// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof eminorv2 !== 'undefined' ? eminorv2 : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 180784;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([22,86,231,158,175,3,210,60,155,43,161,134,155,132,6,61,130,118,73,104,194,37,60,61,17,234,45,129,153,151,113,61,149,100,121,225,127,253,165,61,187,189,215,217,223,124,219,61,149,214,38,232,11,46,17,62,58,140,48,226,142,121,69,62,72,175,188,154,242,215,122,62,141,237,181,160,247,198,176,62,241,104,227,136,181,248,228,62,45,67,28,235,226,54,26,63,252,169,241,210,77,98,80,63,123,20,174,71,225,122,132,63,154,153,153,153,153,153,185,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,36,64,0,0,0,0,0,0,89,64,0,0,0,0,0,64,143,64,0,0,0,0,0,136,195,64,0,0,0,0,0,106,248,64,0,0,0,0,128,132,46,65,0,0,0,0,208,18,99,65,0,0,0,0,132,215,151,65,0,0,0,0,101,205,205,65,0,0,0,32,95,160,2,66,0,0,0,232,118,72,55,66,0,0,0,162,148,26,109,66,0,0,64,229,156,48,162,66,0,0,144,30,196,188,214,66,0,0,52,38,245,107,12,67,93,61,127,102,158,160,230,63,0,0,0,0,0,136,57,61,68,23,117,250,82,176,230,63,0,0,0,0,0,0,216,60,254,217,11,117,18,192,230,63,0,0,0,0,0,120,40,189,191,118,212,221,220,207,230,63,0,0,0,0,0,192,30,61,41,26,101,60,178,223,230,63,0,0,0,0,0,0,216,188,227,58,89,152,146,239,230,63,0,0,0,0,0,0,188,188,134,147,81,249,125,255,230,63,0,0,0,0,0,216,47,189,163,45,244,102,116,15,231,63,0,0,0,0,0,136,44,189,195,95,236,232,117,31,231,63,0,0,0,0,0,192,19,61,5,207,234,134,130,47,231,63,0,0,0,0,0,48,56,189,82,129,165,72,154,63,231,63,0,0,0,0,0,192,0,189,252,204,215,53,189,79,231,63,0,0,0,0,0,136,47,61,241,103,66,86,235,95,231,63,0,0,0,0,0,224,3,61,72,109,171,177,36,112,231,63,0,0,0,0,0,208,39,189,56,93,222,79,105,128,231,63,0,0,0,0,0,0,221,188,0,29,172,56,185,144,231,63,0,0,0,0,0,0,227,60,120,1,235,115,20,161,231,63,0,0,0,0,0,0,237,188,96,208,118,9,123,177,231,63,0,0,0,0,0,64,32,61,51,193,48,1,237,193,231,63,0,0,0,0,0,0,160,60,54,134,255,98,106,210,231,63,0,0,0,0,0,144,38,189,59,78,207,54,243,226,231,63,0,0,0,0,0,224,2,189,232,195,145,132,135,243,231,63,0,0,0,0,0,88,36,189,78,27,62,84,39,4,232,63,0,0,0,0,0,0,51,61,26,7,209,173,210,20,232,63,0,0,0,0,0,0,15,61,126,205,76,153,137,37,232,63,0,0,0,0,0,192,33,189,208,66,185,30,76,54,232,63,0,0,0,0,0,208,41,61,181,202,35,70,26,71,232,63,0,0,0,0,0,16,71,61,188,91,159,23,244,87,232,63,0,0,0,0,0,96,34,61,175,145,68,155,217,104,232,63,0,0,0,0,0,196,50,189,149,163,49,217,202,121,232,63,0,0,0,0,0,0,35,189,184,101,138,217,199,138,232,63,0,0,0,0,0,128,42,189,0,88,120,164,208,155,232,63,0,0,0,0,0,0,237,188,35,162,42,66,229,172,232,63,0,0,0,0,0,40,51,61,250,25,214,186,5,190,232,63,0,0,0,0,0,180,66,61,131,67,181,22,50,207,232,63,0,0,0,0,0,208,46,189,76,102,8,94,106,224,232,63,0,0,0,0,0,80,32,189,7,120,21,153,174,241,232,63,0,0,0,0,0,40,40,61,14,44,40,208,254,2,233,63,0,0,0,0,0,176,28,189,150,255,145,11,91,20,233,63,0,0,0,0,0,224,5,189,249,47,170,83,195,37,233,63,0,0,0,0,0,64,245,60,74,198,205,176,55,55,233,63,0,0,0,0,0,32,23,61,174,152,95,43,184,72,233,63,0,0,0,0,0,0,9,189,203,82,200,203,68,90,233,63,0,0,0,0,0,104,37,61,33,111,118,154,221,107,233,63,0,0,0,0,0,208,54,189,42,78,222,159,130,125,233,63,0,0,0,0,0,0,1,189,163,35,122,228,51,143,233,63,0,0,0,0,0,0,45,61,4,6,202,112,241,160,233,63,0,0,0,0,0,164,56,189,137,255,83,77,187,178,233,63,0,0,0,0,0,92,53,61,91,241,163,130,145,196,233,63,0,0,0,0,0,184,38,61,197,184,75,25,116,214,233,63,0,0,0,0,0,0,236,188,142,35,227,25,99,232,233,63,0,0,0,0,0,208,23,61,2,243,7,141,94,250,233,63,0,0,0,0,0,64,22,61,77,229,93,123,102,12,234,63,0,0,0,0,0,0,245,188,246,184,142,237,122,30,234,63,0,0,0,0,0,224,9,61,39,46,74,236,155,48,234,63,0,0,0,0,0,216,42,61,93,10,70,128,201,66,234,63,0,0,0,0,0,240,26,189,155,37,62,178,3,85,234,63,0,0,0,0,0,96,11,61,19,98,244,138,74,103,234,63,0,0,0,0,0,136,56,61,167,179,48,19,158,121,234,63,0,0,0,0,0,32,17,61,141,46,193,83,254,139,234,63,0,0,0,0,0,192,6,61,210,252,121,85,107,158,234,63,0,0,0,0,0,184,41,189,184,111,53,33,229,176,234,63,0,0,0,0,0,112,43,61,129,243,211,191,107,195,234,63,0,0,0,0,0,0,217,60,128,39,60,58,255,213,234,63,0,0,0,0,0,0,228,60,163,210,90,153,159,232,234,63,0,0,0,0,0,144,44,189,103,243,34,230,76,251,234,63,0,0,0,0,0,80,22,61,144,183,141,41,7,14,235,63,0,0,0,0,0,212,47,61,169,137,154,108,206,32,235,63,0,0,0,0,0,112,18,61,75,26,79,184,162,51,235,63,0,0,0,0,0,71,77,61,231,71,183,21,132,70,235,63,0,0,0,0,0,56,56,189,58,89,229,141,114,89,235,63,0,0,0,0,0,0,152,60,106,197,241,41,110,108,235,63,0,0,0,0,0,208,10,61,80,94,251,242,118,127,235,63,0,0,0,0,0,128,222,60,178,73,39,242,140,146,235,63,0,0,0,0,0,192,4,189,3,6,161,48,176,165,235,63,0,0,0,0,0,112,13,189,102,111,154,183,224,184,235,63,0,0,0,0,0,144,13,61,255,193,75,144,30,204,235,63,0,0,0,0,0,160,2,61,111,161,243,195,105,223,235,63,0,0,0,0,0,120,31,189,184,29,215,91,194,242,235,63,0,0,0,0,0,160,16,189,233,178,65,97,40,6,236,63,0,0,0,0,0,64,17,189,224,82,133,221,155,25,236,63,0,0,0,0,0,224,11,61,238,100,250,217,28,45,236,63,0,0,0,0,0,64,9,189,47,208,255,95,171,64,236,63,0,0,0,0,0,208,14,189,21,253,250,120,71,84,236,63,0,0,0,0,0,102,57,61,203,208,87,46,241,103,236,63,0,0,0,0,0,16,26,189,182,193,136,137,168,123,236,63,0,0,0,0,128,69,88,189,51,231,6,148,109,143,236,63,0,0,0,0,0,72,26,189,223,196,81,87,64,163,236,63,0,0,0,0,0,0,203,60,148,144,239,220,32,183,236,63,0,0,0,0,0,64,1,61,137,22,109,46,15,203,236,63,0,0,0,0,0,32,240,60,18,196,93,85,11,223,236,63,0,0,0,0,0,96,243,60,59,171,91,91,21,243,236,63,0,0,0,0,0,144,6,189,188,137,7,74,45,7,237,63,0,0,0,0,0,160,9,61,250,200,8,43,83,27,237,63,0,0,0,0,0,224,21,189,133,138,13,8,135,47,237,63,0,0,0,0,0,40,29,61,3,162,202,234,200,67,237,63,0,0,0,0,0,160,1,61,145,164,251,220,24,88,237,63,0,0,0,0,0,0,223,60,161,230,98,232,118,108,237,63,0,0,0,0,0,160,3,189,78,131,201,22,227,128,237,63,0,0,0,0,0,216,12,189,144,96,255,113,93,149,237,63,0,0,0,0,0,192,244,60,174,50,219,3,230,169,237,63,0,0,0,0,0,144,255,60,37,131,58,214,124,190,237,63,0,0,0,0,0,128,233,60,69,180,1,243,33,211,237,63,0,0,0,0,0,32,245,188,191,5,28,100,213,231,237,63,0,0,0,0,0,112,29,189,236,154,123,51,151,252,237,63,0,0,0,0,0,20,22,189,94,125,25,107,103,17,238,63,0,0,0,0,0,72,11,61,231,163,245,20,70,38,238,63,0,0,0,0,0,206,64,61,92,238,22,59,51,59,238,63,0,0,0,0,0,104,12,61,180,63,139,231,46,80,238,63,0,0,0,0,0,48,9,189,104,109,103,36,57,101,238,63,0,0,0,0,0,0,229,188,68,76,199,251,81,122,238,63,0,0,0,0,0,248,7,189,38,183,205,119,121,143,238,63,0,0,0,0,0,112,243,188,232,144,164,162,175,164,238,63,0,0,0,0,0,208,229,60,228,202,124,134,244,185,238,63,0,0,0,0,0,26,22,61,13,104,142,45,72,207,238,63,0,0,0,0,0,80,245,60,20,133,24,162,170,228,238,63,0,0,0,0,0,64,198,60,19,90,97,238,27,250,238,63,0,0,0,0,0,128,238,188,6,65,182,28,156,15,239,63,0,0,0,0,0,136,250,188,99,185,107,55,43,37,239,63,0,0,0,0,0,144,44,189,117,114,221,72,201,58,239,63,0,0,0,0,0,0,170,60,36,69,110,91,118,80,239,63,0,0,0,0,0,240,244,188,253,68,136,121,50,102,239,63,0,0,0,0,0,128,202,60,56,190,156,173,253,123,239,63,0,0,0,0,0,188,250,60,130,60,36,2,216,145,239,63,0,0,0,0,0,96,212,188,142,144,158,129,193,167,239,63,0,0,0,0,0,12,11,189,17,213,146,54,186,189,239,63,0,0,0,0,0,224,192,188,148,113,143,43,194,211,239,63,0,0,0,0,128,222,16,189,238,35,42,107,217,233,239,63,0,0,0,0,0,67,238,60,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,190,188,90,250,26,11,240,63,0,0,0,0,0,64,179,188,3,51,251,169,61,22,240,63,0,0,0,0,0,23,18,189,130,2,59,20,104,33,240,63,0,0,0,0,0,64,186,60,108,128,119,62,154,44,240,63,0,0,0,0,0,152,239,60,202,187,17,46,212,55,240,63,0,0,0,0,0,64,199,188,137,127,110,232,21,67,240,63,0,0,0,0,0,48,216,60,103,84,246,114,95,78,240,63,0,0,0,0,0,63,26,189,90,133,21,211,176,89,240,63,0,0,0,0,0,132,2,189,149,31,60,14,10,101,240,63,0,0,0,0,0,96,241,60,26,247,221,41,107,112,240,63,0,0,0,0,0,36,21,61,45,168,114,43,212,123,240,63,0,0,0,0,0,160,233,188,208,155,117,24,69,135,240,63,0,0,0,0,0,64,230,60,200,7,102,246,189,146,240,63,0,0,0,0,0,120,0,189,131,243,198,202,62,158,240,63,0,0,0,0,0,0,152,188,48,57,31,155,199,169,240,63,0,0,0,0,0,160,255,60,252,136,249,108,88,181,240,63,0,0,0,0,0,200,250,188,138,108,228,69,241,192,240,63,0,0,0,0,0,192,217,60,22,72,114,43,146,204,240,63,0,0,0,0,0,32,5,61,216,93,57,35,59,216,240,63,0,0,0,0,0,208,250,188,243,209,211,50,236,227,240,63,0,0,0,0,0,172,27,61,166,169,223,95,165,239,240,63,0,0,0,0,0,232,4,189,240,210,254,175,102,251,240,63,0,0,0,0,0,48,13,189,75,35,215,40,48,7,241,63,0,0,0,0,0,80,241,60,91,91,18,208,1,19,241,63,0,0,0,0,0,0,236,60,249,42,94,171,219,30,241,63,0,0,0,0,0,188,22,61,213,49,108,192,189,42,241,63,0,0,0,0,0,64,232,60,125,4,242,20,168,54,241,63,0,0,0,0,0,208,14,189,233,45,169,174,154,66,241,63,0,0,0,0,0,224,232,60,56,49,79,147,149,78,241,63,0,0,0,0,0,64,235,60,113,142,165,200,152,90,241,63,0,0,0,0,0,48,5,61,223,195,113,84,164,102,241,63,0,0,0,0,0,56,3,61,17,82,125,60,184,114,241,63,0,0,0,0,0,212,40,61,159,187,149,134,212,126,241,63,0,0,0,0,0,208,5,189,147,141,140,56,249,138,241,63,0,0,0,0,0,136,28,189,102,93,55,88,38,151,241,63,0,0,0,0,0,240,17,61,167,203,111,235,91,163,241,63,0,0,0,0,0,72,16,61,227,135,19,248,153,175,241,63,0,0,0,0,0,57,71,189,84,93,4,132,224,187,241,63,0,0,0,0,0,228,36,61,67,28,40,149,47,200,241,63,0,0,0,0,0,32,10,189,178,185,104,49,135,212,241,63,0,0,0,0,0,128,227,60,49,64,180,94,231,224,241,63,0,0,0,0,0,192,234,60,56,217,252,34,80,237,241,63,0,0,0,0,0,144,1,61,247,205,56,132,193,249,241,63,0,0,0,0,0,120,27,189,143,141,98,136,59,6,242,63,0,0,0,0,0,148,45,61,30,168,120,53,190,18,242,63,0,0,0,0,0,0,216,60,65,221,125,145,73,31,242,63,0,0,0,0,0,52,43,61,35,19,121,162,221,43,242,63,0,0,0,0,0,248,25,61,231,97,117,110,122,56,242,63,0,0,0,0,0,200,25,189,39,20,130,251,31,69,242,63,0,0,0,0,0,48,2,61,2,166,178,79,206,81,242,63,0,0,0,0,0,72,19,189,176,206,30,113,133,94,242,63,0,0,0,0,0,112,18,61,22,125,226,101,69,107,242,63,0,0,0,0,0,208,17,61,15,224,29,52,14,120,242,63,0,0,0,0,0,238,49,61,62,99,245,225,223,132,242,63,0,0,0,0,0,192,20,189,48,187,145,117,186,145,242,63,0,0,0,0,0,216,19,189,9,223,31,245,157,158,242,63,0,0,0,0,0,176,8,61,155,14,209,102,138,171,242,63,0,0,0,0,0,124,34,189,58,218,218,208,127,184,242,63,0,0,0,0,0,52,42,61,249,26,119,57,126,197,242,63,0,0,0,0,0,128,16,189,217,2,228,166,133,210,242,63,0,0,0,0,0,208,14,189,121,21,100,31,150,223,242,63,0,0,0,0,0,32,244,188,207,46,62,169,175,236,242,63,0,0,0,0,0,152,36,189,34,136,189,74,210,249,242,63,0,0,0,0,0,48,22,189,37,182,49,10,254,6,243,63,0,0,0,0,0,54,50,189,11,165,238,237,50,20,243,63,0,0,0,0,128,223,112,189,184,215,76,252,112,33,243,63,0,0,0,0,0,72,34,189,162,233,168,59,184,46,243,63,0,0,0,0,0,152,37,189,102,23,100,178,8,60,243,63,0,0,0,0,0,208,30,61,39,250,227,102,98,73,243,63,0,0,0,0,0,0,220,188,15,159,146,95,197,86,243,63,0,0,0,0,0,216,48,189,185,136,222,162,49,100,243,63,0,0,0,0,0,200,34,61,57,170,58,55,167,113,243,63,0,0,0,0,0,96,32,61,254,116,30,35,38,127,243,63,0,0,0,0,0,96,22,189,56,216,5,109,174,140,243,63,0,0,0,0,0,224,10,189,195,62,113,27,64,154,243,63,0,0,0,0,0,114,68,189,32,160,229,52,219,167,243,63,0,0,0,0,0,32,8,61,149,110,236,191,127,181,243,63,0,0,0,0,0,128,62,61,242,168,19,195,45,195,243,63,0,0,0,0,0,128,239,60,34,225,237,68,229,208,243,63,0,0,0,0,0,160,23,189,187,52,18,76,166,222,243,63,0,0,0,0,0,48,38,61,204,78,28,223,112,236,243,63,0,0,0,0,0,166,72,189,140,126,172,4,69,250,243,63,0,0,0,0,0,220,60,189,187,160,103,195,34,8,244,63,0,0,0,0,0,184,37,61,149,46,247,33,10,22,244,63,0,0,0,0,0,192,30,61,70,70,9,39,251,35,244,63,0,0,0,0,0,96,19,189,32,169,80,217,245,49,244,63,0,0,0,0,0,152,35,61,235,185,132,63,250,63,244,63,0,0,0,0,0,0,250,60,25,137,97,96,8,78,244,63,0,0,0,0,0,192,246,188,1,210,167,66,32,92,244,63,0,0,0,0,0,192,11,189,22,0,29,237,65,106,244,63,0,0,0,0,0,128,18,189,38,51,139,102,109,120,244,63,0,0,0,0,0,224,48,61,0,60,193,181,162,134,244,63,0,0,0,0,0,64,45,189,4,175,146,225,225,148,244,63,0,0,0,0,0,32,12,61,114,211,215,240,42,163,244,63,0,0,0,0,0,80,30,189,1,184,109,234,125,177,244,63,0,0,0,0,0,128,7,61,225,41,54,213,218,191,244,63,0,0,0,0,0,128,19,189,50,193,23,184,65,206,244,63,0,0,0,0,0,128,0,61,219,221,253,153,178,220,244,63,0,0,0,0,0,112,44,61,150,171,216,129,45,235,244,63,0,0,0,0,0,224,28,189,2,45,157,118,178,249,244,63,0,0,0,0,0,32,25,61,193,49,69,127,65,8,245,63,0,0,0,0,0,192,8,189,42,102,207,162,218,22,245,63,0,0,0,0,0,0,250,188,234,81,63,232,125,37,245,63,0,0,0,0,0,8,74,61,218,78,157,86,43,52,245,63,0,0,0,0,0,216,38,189,26,172,246,244,226,66,245,63,0,0,0,0,0,68,50,189,219,148,93,202,164,81,245,63,0,0,0,0,0,60,72,61,107,17,233,221,112,96,245,63,0,0,0,0,0,176,36,61,222,41,181,54,71,111,245,63,0,0,0,0,0,90,65,61,14,196,226,219,39,126,245,63,0,0,0,0,0,224,41,189,111,199,151,212,18,141,245,63,0,0,0,0,0,8,35,189,76,11,255,39,8,156,245,63,0,0,0,0,0,236,77,61,39,84,72,221,7,171,245,63,0,0,0,0,0,0,196,188,244,122,168,251,17,186,245,63,0,0,0,0,0,8,48,61,11,70,89,138,38,201,245,63,0,0,0,0,0,200,38,189,63,142,153,144,69,216,245,63,0,0,0,0,0,154,70,61,225,32,173,21,111,231,245,63,0,0,0,0,0,64,27,189,202,235,220,32,163,246,245,63,0,0,0,0,0,112,23,61,184,220,118,185,225,5,246,63,0,0,0,0,0,248,38,61,21,247,205,230,42,21,246,63,0,0,0,0,0,0,1,61,49,85,58,176,126,36,246,63,0,0,0,0,0,208,21,189,181,41,25,29,221,51,246,63,0,0,0,0,0,208,18,189,19,195,204,52,70,67,246,63,0,0,0,0,0,128,234,188,250,142,188,254,185,82,246,63,0,0,0,0,0,96,40,189,151,51,85,130,56,98,246,63,0,0,0,0,0,254,113,61,142,50,8,199,193,113,246,63,0,0,0,0,0,32,55,189,126,169,76,212,85,129,246,63,0,0,0,0,0,128,230,60,113,148,158,177,244,144,246,63,0,0,0,0,0,120,41,189,205,59,127,102,158,160,230,63,135,1,235,115,20,161,231,63,219,160,42,66,229,172,232,63,144,240,163,130,145,196,233,63,173,211,90,153,159,232,234,63,156,82,133,221,155,25,236,63,135,164,251,220,24,88,237,63,218,144,164,162,175,164,238,63,0,0,0,0,0,0,240,63,15,137,249,108,88,181,240,63,123,81,125,60,184,114,241,63,56,98,117,110,122,56,242,63,21,183,49,10,254,6,243,63,34,52,18,76,166,222,243,63,39,42,54,213,218,191,244,63,41,84,72,221,7,171,245,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,56,64,0,0,0,0,0,0,94,64,0,0,0,0,0,128,134,64,0,0,0,0,0,176,179,64,0,0,0,0,0,176,227,64,0,0,0,0,0,38,22,65,0,0,0,0,128,175,75,65,0,0,0,0,168,8,131,65,0,0,0,0,252,140,188,65,0,0,0,192,140,50,247,65,0,0,0,40,59,76,52,66,0,0,128,117,119,7,115,66,0,0,128,117,119,7,179,66,0,0,216,236,238,55,244,66,0,0,115,202,236,190,54,67,0,144,104,48,185,2,123,67,0,90,65,190,179,225,192,67,32,198,181,233,59,40,6,68,108,240,89,97,82,119,78,68,158,164,193,67,81,234,21,66,87,76,245,117,112,252,35,66,26,182,138,129,50,161,32,66,26,38,232,34,181,176,16,66,232,161,165,179,193,127,246,65,63,243,211,245,24,116,213,65,42,95,185,123,12,171,173,65,152,204,93,249,118,248,125,65,76,244,128,80,233,241,69,65,235,135,135,31,66,182,6,65,4,216,88,8,172,135,191,64,82,59,188,123,96,90,106,64,5,39,246,31,147,13,4,64,0,0,0,0,0,0,0,0,0,0,0,0,168,8,131,65,0,0,0,128,105,189,156,65,0,0,0,176,166,253,161,65,0,0,0,112,113,24,153,65,0,0,0,144,182,238,133,65,0,0,0,224,113,113,105,65,0,0,0,0,123,31,68,65,0,0,0,0,188,208,21,65,0,0,0,0,128,231,223,64,0,0,0,0,0,20,158,64,0,0,0,0,0,128,80,64,0,0,0,0,0,0,240,63,0,0,0,64,251,33,249,63,0,0,0,0,45,68,116,62,0,0,0,128,152,70,248,60,0,0,0,96,81,204,120,59,0,0,0,128,131,27,240,57,0,0,0,64,32,37,122,56,0,0,0,128,34,130,227,54,0,0,0,0,29,243,105,53,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,156,6,52,161,73,101,65,64,95,167,241,7,51,12,117,64,35,213,55,80,124,91,144,64,233,49,46,163,125,214,139,64,83,237,46,124,109,242,89,64,220,236,213,138,189,111,53,64,213,44,249,20,147,82,95,64,217,219,162,213,216,8,109,64,169,132,24,218,122,107,93,64,146,81,78,244,177,186,32,64,221,158,173,167,33,252,41,62,123,209,33,91,245,255,189,63,138,173,94,232,188,118,15,64,41,209,166,157,72,143,65,64,55,24,44,77,133,195,86,64,229,62,168,142,143,71,72,64,244,68,85,246,212,233,124,62,131,13,118,190,66,255,189,63,192,174,143,249,183,242,2,64,100,169,113,127,55,124,40,64,226,142,127,23,168,177,49,64,254,193,116,165,73,75,20,64,172,108,101,142,69,141,92,64,79,39,77,150,220,133,172,64,127,187,197,151,134,11,226,64,187,23,143,178,44,212,247,64,45,11,122,105,17,21,222,64,61,99,175,168,234,163,77,64,1,103,6,27,54,251,142,64,251,182,6,87,68,233,180,64,21,187,165,184,176,164,190,64,81,94,111,3,48,128,151,64,0,0,0,0,0,0,0,0,206,252,255,255,255,255,189,63,206,127,127,53,157,122,42,64,144,165,46,101,212,192,121,64,204,50,165,163,125,69,174,64,221,130,39,195,122,234,190,64,125,202,225,218,103,6,173,61,67,0,193,226,255,255,189,63,227,21,99,110,4,54,27,64,237,2,38,69,185,19,91,64,73,214,82,208,22,45,128,64,183,12,126,187,184,133,128,64,228,103,211,204,35,213,71,64,62,238,49,192,235,14,133,64,154,124,142,68,78,104,170,64,166,84,29,166,186,171,181,64,75,223,212,13,122,188,157,64,31,49,10,41,112,230,96,192,255,100,174,120,138,136,61,64,186,28,130,219,104,159,111,64,247,160,73,206,5,172,135,64,41,192,212,72,37,27,135,64,212,216,62,60,94,126,99,64,107,232,27,231,134,214,19,192,79,200,143,211,169,207,53,190,84,237,174,81,235,63,186,191,255,217,2,51,194,112,18,192,218,22,93,194,113,236,76,192,95,213,24,71,211,135,108,192,246,27,92,95,185,102,107,192,210,38,198,68,38,241,135,190,16,176,72,145,142,62,186,191,218,78,187,105,132,4,6,192,127,144,104,193,226,169,51,192,170,74,16,222,163,41,69,192,82,110,207,57,54,95,53,192,229,205,91,222,166,44,100,64,25,132,216,208,98,145,190,64,152,94,183,176,154,87,0,65,25,156,134,114,83,246,37,65,92,173,25,119,210,87,36,65,24,170,165,14,105,249,17,193,178,17,90,255,178,81,84,64,57,248,123,231,49,31,159,64,41,206,100,13,31,15,209,64,151,209,186,170,109,87,232,64,75,54,124,207,4,75,219,64,4,160,255,252,46,111,178,192,0,0,0,0,0,0,0,0,243,253,255,255,255,63,186,191,247,121,103,162,145,69,48,192,118,181,228,83,208,188,135,192,21,116,248,64,231,36,199,192,106,156,208,101,208,166,231,192,152,160,161,26,67,250,182,189,239,127,89,203,255,63,186,191,75,173,3,202,230,28,32,192,176,185,167,108,109,245,102,192,79,115,49,105,198,116,149,192,157,167,253,136,227,104,164,192,211,125,7,132,146,237,65,64,14,124,74,70,57,152,118,64,214,97,16,109,110,166,146,64,126,155,195,184,252,159,145,64,129,144,55,252,150,178,101,64,89,89,139,144,101,56,54,64,143,135,232,14,158,6,97,64,155,7,234,66,134,231,112,64,255,250,182,58,3,60,99,64,9,24,57,68,179,80,45,64,134,170,225,111,3,225,37,190,75,226,192,247,246,255,177,191,116,128,164,174,178,69,3,192,20,78,185,76,74,247,53,192,69,26,10,66,34,10,77,192,15,216,146,168,172,114,63,192,109,2,39,233,22,211,119,190,66,30,94,73,98,255,177,191,67,168,36,138,57,54,247,191,243,167,175,237,243,138,30,192,3,99,36,197,230,98,38,192,15,231,143,175,129,222,9,192,81,103,169,7,51,34,93,64,56,105,89,80,125,243,173,64,95,176,182,110,187,210,227,64,189,169,159,143,15,129,252,64,220,73,44,79,119,65,231,64,222,197,152,12,129,96,78,64,100,40,126,92,2,109,144,64,96,29,190,143,248,90,183,64,56,250,118,250,184,204,194,64,100,232,11,199,29,204,162,64,0,0,0,0,0,0,0,0,50,253,255,255,255,255,177,191,121,167,79,180,208,41,32,192,99,232,25,123,2,17,112,192,252,202,77,205,110,106,163,192,61,100,204,54,11,133,180,192,204,149,228,71,177,24,169,189,198,251,154,230,255,255,177,191,191,107,12,249,112,163,16,192,131,23,125,90,47,235,80,192,99,204,66,103,179,179,116,192,215,139,163,40,239,166,117,192,166,67,227,191,34,97,72,64,179,78,84,134,131,45,134,64,99,252,77,228,75,240,172,64,40,106,199,215,108,60,185,64,192,177,79,217,170,168,163,64,15,244,28,32,235,167,98,192,237,122,192,247,150,93,62,64,64,75,209,228,145,213,112,64,34,191,179,34,69,102,138,64,20,194,92,156,124,151,139,64,101,19,0,14,83,149,106,64,49,41,179,248,106,62,21,192,130,203,222,106,3,205,50,62,66,8,141,14,238,191,178,63,245,156,20,97,252,192,10,64,221,174,45,150,152,79,69,64,31,253,94,226,219,89,101,64,224,33,250,129,124,215,100,64,219,107,247,84,59,49,132,62,52,62,136,62,197,190,178,63,156,119,39,231,151,248,255,63,229,111,249,170,191,253,44,64,74,220,251,41,142,170,63,64,180,75,129,113,177,64,48,64,188,57,91,54,213,120,100,64,99,5,107,78,88,162,191,64,63,140,211,84,82,102,1,65,67,43,165,131,218,131,40,65,61,11,222,40,107,166,41,65,197,48,149,44,109,253,20,193,67,21,94,251,179,177,84,64,206,192,33,218,160,59,160,64,109,30,89,123,210,103,210,64,114,35,224,151,227,181,235,64,160,84,122,31,24,145,225,64,9,198,219,190,87,234,180,192,0,0,0,0,0,0,0,0,44,254,255,255,255,191,178,63,214,52,179,91,82,137,39,64,37,24,48,21,99,109,129,64,109,244,24,62,153,77,193,64,102,21,144,14,212,18,226,64,217,140,204,41,143,61,180,61,76,176,114,209,255,191,178,63,211,61,149,185,176,87,23,64,233,136,135,10,146,227,96,64,129,196,200,157,249,12,144,64,166,227,198,83,233,23,159,64,34,174,40,215,152,47,138,66,205,101,239,35,145,68,55,113,47,59,77,236,207,251,192,181,188,219,137,129,165,219,181,233,56,181,72,243,91,194,86,57,25,208,5,182,241,17,241,89,155,79,25,175,164,130,63,146,24,129,109,218,213,94,28,171,66,2,3,163,152,170,7,216,190,111,112,69,1,91,131,18,140,178,228,78,190,133,49,36,226,180,255,213,195,125,12,85,111,137,123,242,116,93,190,114,177,150,22,59,254,177,222,128,53,18,199,37,167,6,220,155,148,38,105,207,116,241,155,193,210,74,241,158,193,105,155,228,227,37,79,56,134,71,190,239,181,213,140,139,198,157,193,15,101,156,172,119,204,161,12,36,117,2,43,89,111,44,233,45,131,228,166,110,170,132,116,74,212,251,65,189,220,169,176,92,181,83,17,131,218,136,249,118,171,223,102,238,82,81,62,152,16,50,180,45,109,198,49,168,63,33,251,152,200,39,3,176,228,14,239,190,199,127,89,191,194,143,168,61,243,11,224,198,37,167,10,147,71,145,167,213,111,130,3,224,81,99,202,6,112,110,14,10,103,41,41,20,252,47,210,70,133,10,183,39,38,201,38,92,56,33,27,46,237,42,196,90,252,109,44,77,223,179,149,157,19,13,56,83,222,99,175,139,84,115,10,101,168,178,119,60,187,10,106,118,230,174,237,71,46,201,194,129,59,53,130,20,133,44,114,146,100,3,241,76,161,232,191,162,1,48,66,188,75,102,26,168,145,151,248,208,112,139,75,194,48,190,84,6,163,81,108,199,24,82,239,214,25,232,146,209,16,169,101,85,36,6,153,214,42,32,113,87,133,53,14,244,184,209,187,50,112,160,106,16,200,208,210,184,22,193,164,25,83,171,65,81,8,108,55,30,153,235,142,223,76,119,72,39,168,72,155,225,181,188,176,52,99,90,201,197,179,12,28,57,203,138,65,227,74,170,216,78,115,227,99,119,79,202,156,91,163,184,178,214,243,111,46,104,252,178,239,93,238,130,143,116,96,47,23,67,111,99,165,120,114,171,240,161,20,120,200,132,236,57,100,26,8,2,199,140,40,30,99,35,250,255,190,144,233,189,130,222,235,108,80,164,21,121,198,178,247,163,249,190,43,83,114,227,242,120,113,198,156,97,38,234,206,62,39,202,7,194,192,33,199,184,134,209,30,235,224,205,214,125,218,234,120,209,110,238,127,79,125,245,186,111,23,114,170,103,240,6,166,152,200,162,197,125,99,10,174,13,249,190,4,152,63,17,27,71,28,19,53,11,113,27,132,125,4,35,245,119,219,40,147,36,199,64,123,171,202,50,188,190,201,21,10,190,158,60,76,13,16,156,196,103,29,67,182,66,62,203,190,212,197,76,42,126,101,252,156,41,127,89,236,250,214,58,171,111,203,95,23,88,71,74,140,25,68,108,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,144,61,0,0,144,61,0,0,0,62,0,0,0,62,0,0,112,62,0,0,112,62,0,0,0,0,0,0,0,0,0,0,16,0,0,0,16,0,0,0,0,16,0,0,0,16,0,0,16,16,0,0,16,16,0,0,0,0,16,0,0,0,16,0,16,0,16,0,16,0,16,0,0,16,16,0,0,16,16,0,16,16,16,0,16,16,16,0,0,0,0,0,0,0,0,0,32,0,0,0,32,0,0,0,0,32,0,0,0,32,0,0,32,32,0,0,32,32,0,0,0,0,32,0,0,0,32,0,32,0,32,0,32,0,32,0,0,32,32,0,0,32,32,0,32,32,32,0,32,32,32,0,0,0,0,0,0,0,0,0,64,0,0,0,64,0,0,0,0,64,0,0,0,64,0,0,64,64,0,0,64,64,0,0,0,0,64,0,0,0,64,0,64,0,64,0,64,0,64,0,0,64,64,0,0,64,64,0,64,64,64,0,64,64,64,0,0,0,0,0,0,0,0,0,128,0,0,0,128,0,0,0,0,128,0,0,0,128,0,0,128,128,0,0,128,128,0,0,0,0,128,0,0,0,128,0,128,0,128,0,128,0,128,0,0,128,128,0,0,128,128,0,128,128,128,0,128,128,128,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,1,0,1,0,0,1,1,0,1,1,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,1,0,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,0,2,0,0,0,0,2,0,0,2,2,0,0,0,0,2,0,2,0,2,0,0,2,2,0,2,2,2,0,0,0,0,2,2,0,0,2,0,2,0,2,2,2,0,2,0,0,2,2,2,0,2,2,0,2,2,2,2,2,2,2,0,0,0,0,4,0,0,0,0,4,0,0,4,4,0,0,0,0,4,0,4,0,4,0,0,4,4,0,4,4,4,0,0,0,0,4,4,0,0,4,0,4,0,4,4,4,0,4,0,0,4,4,4,0,4,4,0,4,4,4,4,4,4,4,0,0,0,0,8,0,0,0,0,8,0,0,8,8,0,0,0,0,8,0,8,0,8,0,0,8,8,0,8,8,8,0,0,0,0,8,8,0,0,8,0,8,0,8,8,8,0,8,0,0,8,8,8,0,8,8,0,8,8,8,8,8,8,8,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,16,0,0,16,0,0,0,16,0,0,0,16,16,0,0,16,16,0,16,0,0,0,16,0,0,0,16,0,16,0,16,0,16,0,16,16,0,0,16,16,0,0,16,16,16,0,16,16,16,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,32,0,0,32,0,0,0,32,0,0,0,32,32,0,0,32,32,0,32,0,0,0,32,0,0,0,32,0,32,0,32,0,32,0,32,32,0,0,32,32,0,0,32,32,32,0,32,32,32,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,64,0,0,64,0,0,0,64,0,0,0,64,64,0,0,64,64,0,64,0,0,0,64,0,0,0,64,0,64,0,64,0,64,0,64,64,0,0,64,64,0,0,64,64,64,0,64,64,64,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,128,0,0,128,0,0,0,128,0,0,0,128,128,0,0,128,128,0,128,0,0,0,128,0,0,0,128,0,128,0,128,0,128,0,128,128,0,0,128,128,0,0,128,128,128,0,128,128,128,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,2,0,0,0,2,0,0,0,2,2,0,0,2,2,0,2,0,0,0,2,0,0,0,2,0,2,0,2,0,2,0,2,2,0,0,2,2,0,0,2,2,2,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,4,0,0,0,4,0,0,0,4,4,0,0,4,4,0,4,0,0,0,4,0,0,0,4,0,4,0,4,0,4,0,4,4,0,0,4,4,0,0,4,4,4,0,4,4,4,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,8,0,0,0,8,0,0,0,8,8,0,0,8,8,0,8,0,0,0,8,0,0,0,8,0,8,0,8,0,8,0,8,8,0,0,8,8,0,0,8,8,8,0,8,8,8,0,0,0,0,0,0,2,0,1,0,0,0,1,0,2,0,0,0,8,0,0,0,10,0,1,0,8,0,1,0,10,0,0,0,0,0,0,16,0,0,0,0,0,0,0,16,0,0,64,0,0,0,64,16,0,0,64,0,0,0,64,16,0,0,0,0,0,0,0,0,64,0,32,0,0,0,32,0,64,0,0,128,0,0,0,128,64,0,32,128,0,0,32,128,64,0,0,0,0,0,0,0,16,0,0,8,0,0,0,8,16,0,0,0,0,0,0,0,16,0,0,8,0,0,0,8,16,0,0,0,0,0,0,0,32,0,0,0,2,0,0,0,34,0,2,0,0,0,2,0,32,0,2,0,2,0,2,0,34,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,16,0,4,0,0,0,4,0,0,0,4,0,16,0,4,0,16,0,0,0,0,0,0,64,0,0,0,8,0,0,0,72,0,0,0,0,0,0,0,64,0,0,0,8,0,0,0,72,0,0,0,0,0,0,0,0,64,0,0,128,0,0,0,128,64,0,8,0,0,0,8,0,64,0,8,128,0,0,8,128,64,0,0,0,0,0,16,0,0,0,0,64,0,0,16,64,0,0,0,0,4,0,16,0,4,0,0,64,4,0,16,64,4,0,0,1,0,0,16,1,0,0,0,65,0,0,16,65,0,0,0,1,4,0,16,1,4,0,0,65,4,0,16,65,4,0,0,0,0,0,0,0,128,0,2,0,0,0,2,0,128,0,0,2,0,0,0,2,128,0,2,2,0,0,2,2,128,0,0,0,32,0,0,0,160,0,2,0,32,0,2,0,160,0,0,2,32,0,0,2,160,0,2,2,32,0,2,2,160,0,0,0,0,0,0,32,0,0,4,0,0,0,4,32,0,0,0,4,0,0,0,36,0,0,4,4,0,0,4,36,0,0,0,0,0,0,0,32,0,0,4,0,0,0,4,32,0,0,0,4,0,0,0,36,0,0,4,4,0,0,4,36,0,0,0,0,0,0,0,0,1,0,8,0,0,0,8,0,1,0,128,0,0,0,128,0,1,0,136,0,0,0,136,0,1,0,0,0,0,0,0,0,1,0,8,0,0,0,8,0,1,0,128,0,0,0,128,0,1,0,136,0,0,0,136,0,1,0,0,0,0,0,0,0,0,0,128,0,0,0,128,0,0,0,0,32,0,0,0,32,0,0,128,32,0,0,128,32,0,0,1,0,0,0,1,0,0,0,129,0,0,0,129,0,0,0,1,32,0,0,1,32,0,0,129,32,0,0,129,32,0,0,0,0,0,0,16,0,0,0,0,0,128,0,16,0,128,0,0,0,1,0,16,0,1,0,0,0,129,0,16,0,129,0,0,2,0,0,16,2,0,0,0,2,128,0,16,2,128,0,0,2,1,0,16,2,1,0,0,2,129,0,16,2,129,0,0,0,0,0,0,4,0,0,0,16,0,0,0,20,0,0,0,0,8,0,0,4,8,0,0,16,8,0,0,20,8,0,32,0,0,0,32,4,0,0,32,16,0,0,32,20,0,0,32,0,8,0,32,4,8,0,32,16,8,0,32,20,8,0,0,0,0,0,0,1,0,0,0,0,4,0,0,1,4,0,0,0,0,0,0,1,0,0,0,0,4,0,0,1,4,0,64,0,0,0,64,1,0,0,64,0,4,0,64,1,4,0,64,0,0,0,64,1,0,0,64,0,4,0,64,1,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,2,2,0,0,0,2,0,0,2,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,2,2,0,0,0,2,0,0,2,2,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,2,2,0,0,0,2,0,0,2,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,2,2,0,0,0,2,0,0,2,2,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,4,0,0,4,4,0,0,0,4,0,0,4,4,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,4,0,0,4,4,0,0,0,4,0,0,4,4,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,4,0,0,4,4,0,0,0,4,0,0,4,4,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,4,0,0,4,4,0,0,0,4,0,0,4,4,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,8,0,0,8,8,0,0,0,8,0,0,8,8,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,8,0,0,8,8,0,0,0,8,0,0,8,8,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,8,0,0,8,8,0,0,0,8,0,0,8,8,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,8,0,0,8,8,0,0,0,8,0,0,8,8,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,16,0,0,0,0,16,0,0,16,16,0,0,0,16,0,0,16,16,0,0,0,0,0,0,16,0,0,0,0,0,0,0,16,0,0,0,0,16,0,0,16,16,0,0,0,16,0,0,16,16,0,0,0,0,16,0,0,0,0,0,0,0,16,0,0,0,0,16,0,0,16,16,0,0,0,16,0,0,16,16,0,0,0,0,0,0,16,0,0,0,0,0,0,0,16,0,0,0,0,16,0,0,16,16,0,0,0,16,0,0,16,16,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,32,0,0,0,0,32,0,0,32,32,0,0,0,32,0,0,32,32,0,0,0,0,0,0,32,0,0,0,0,0,0,0,32], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([32,0,0,32,32,0,0,0,32,0,0,32,32,0,0,0,0,32,0,0,0,0,0,0,0,32,0,0,0,0,32,0,0,32,32,0,0,0,32,0,0,32,32,0,0,0,0,0,0,32,0,0,0,0,0,0,0,32,0,0,0,0,32,0,0,32,32,0,0,0,32,0,0,32,32,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,64,0,0,64,64,0,0,0,64,0,0,64,64,0,0,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,64,0,0,64,64,0,0,0,64,0,0,64,64,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,64,0,0,64,64,0,0,0,64,0,0,64,64,0,0,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,64,0,0,64,64,0,0,0,64,0,0,64,64,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,128,0,0,0,0,128,0,0,128,128,0,0,0,128,0,0,128,128,0,0,0,0,0,0,128,0,0,0,0,0,0,0,128,0,0,0,0,128,0,0,128,128,0,0,0,128,0,0,128,128,0,0,0,0,128,0,0,0,0,0,0,0,128,0,0,0,0,128,0,0,128,128,0,0,0,128,0,0,128,128,0,0,0,0,0,0,128,0,0,0,0,0,0,0,128,0,0,0,0,128,0,0,128,128,0,0,0,128,0,0,128,128,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,2,0,0,0,2,0,0,2,2,0,0,2,2,0,0,0,2,0,0,0,2,0,0,2,2,0,0,2,2,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,2,0,0,0,2,0,0,2,2,0,0,2,2,0,0,0,2,0,0,0,2,0,0,2,2,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,4,0,0,0,4,0,0,4,4,0,0,4,4,0,0,0,4,0,0,0,4,0,0,4,4,0,0,4,4,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,4,0,0,0,4,0,0,4,4,0,0,4,4,0,0,0,4,0,0,0,4,0,0,4,4,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,0,8,0,0,0,8,0,0,8,8,0,0,8,8,0,0,0,8,0,0,0,8,0,0,8,8,0,0,8,8,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,0,8,0,0,0,8,0,0,8,8,0,0,8,8,0,0,0,8,0,0,0,8,0,0,8,8,0,0,8,8,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,16,0,0,0,0,16,0,0,0,16,0,0,16,16,0,0,16,16,0,0,0,16,0,0,0,16,0,0,16,16,0,0,16,16,0,0,0,0,0,0,0,0,16,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,16,0,0,0,0,16,0,0,0,16,0,0,16,16,0,0,16,16,0,0,0,16,0,0,0,16,0,0,16,16,0,0,16,16,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,32,0,0,0,0,32,0,0,0,32,0,0,32,32,0,0,32,32,0,0,0,32,0,0,0,32,0,0,32,32,0,0,32,32,0,0,0,0,0,0,0,0,32,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,32,0,0,0,0,32,0,0,0,32,0,0,32,32,0,0,32,32,0,0,0,32,0,0,0,32,0,0,32,32,0,0,32,32,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,64,0,0,0,0,64,0,0,0,64,0,0,64,64,0,0,64,64,0,0,0,64,0,0,0,64,0,0,64,64,0,0,64,64,0,0,0,0,0,0,0,0,64,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,64,0,0,0,0,64,0,0,0,64,0,0,64,64,0,0,64,64,0,0,0,64,0,0,0,64,0,0,64,64,0,0,64,64,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,128,0,0,0,0,128,0,0,0,128,0,0,128,128,0,0,128,128,0,0,0,128,0,0,0,128,0,0,128,128,0,0,128,128,0,0,0,0,0,0,0,0,128,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,128,0,0,0,0,128,0,0,0,128,0,0,128,128,0,0,128,128,0,0,0,128,0,0,0,128,0,0,128,128,0,0,128,128,0,0,0,130,128,0,0,0,0,0,0,128,0,0,2,130,128,0,2,128,128,0,2,130,0,0,2,0,0,0,0,128,0,0,0,2,0,0,0,130,128,0,2,130,128,0,0,2,0,0,2,2,128,0,2,128,128,0,0,0,128,0,2,0,0,0,2,2,0,0,0,2,128,0,0,2,128,0,0,130,0,0,0,130,0,0,0,128,128,0,0,128,128,0,2,2,128,0,2,128,0,0,2,0,128,0,2,0,128,0,2,128,0,0,0,0,0,0,2,2,0,0,2,130,0,0,0,0,128,0,0,128,0,0,2,130,128,0,2,0,0,0,0,128,128,0,0,130,128,0,0,0,128,0,0,0,128,0,0,2,0,0,2,128,128,0,0,128,0,0,0,130,0,0,2,0,128,0,0,2,0,0,2,0,0,0,2,2,128,0,2,130,0,0,2,130,128,0,2,128,0,0,0,128,128,0,2,2,128,0,2,0,128,0,2,2,0,0,2,130,0,0,0,130,128,0,2,2,0,0,0,2,128,0,0,2,128,0,0,0,0,0,2,128,0,0,0,130,0,0,0,0,0,0,2,128,128,0,16,64,8,64,0,64,0,64,0,64,0,0,16,64,8,0,0,0,8,0,16,0,0,0,16,0,8,64,16,64,0,64,16,0,0,64,16,64,8,64,0,64,8,64,0,0,0,64,0,64,0,64,0,0,8,0,16,0,0,0,16,0,8,64,0,64,8,0,16,0,8,0,16,64,0,64,0,0,0,0,0,0,0,64,0,64,0,0,16,64,8,0,0,0,8,64,16,0,8,0,16,0,0,64,0,0,0,0,0,64,8,0,16,64,0,0,0,64,8,64,0,0,8,64,16,64,0,0,0,0,0,0,16,64,8,0,16,0,8,64,0,0,8,0,16,64,0,64,0,0,8,64,0,64,8,64,0,64,0,0,0,0,8,64,0,64,0,64,16,0,0,0,16,64,8,64,16,64,8,0,16,0,0,0,0,64,0,0,0,0,0,64,16,64,0,0,0,64,8,64,0,0,8,0,16,0,0,64,16,0,8,0,16,64,0,64,16,0,0,64,16,0,8,0,0,64,8,0,0,0,0,0,0,64,0,64,16,64,0,0,0,0,0,64,16,0,8,64,16,64,8,64,0,64,8,0,4,1,0,0,0,1,1,4,0,0,0,0,4,0,1,4,0,1,0,4,0,0,0,0,4,1,1,0,0,1,0,4,4,0,1,0,4,0,0,4,4,0,0,4,0,0,1,0,4,1,1,4,4,0,1,0,0,0,1,4,4,1,0,0,0,0,0,4,4,0,0,0,0,1,1,4,0,1,0,0,0,1,1,0,0,0,1,4,4,0,1,4,4,1,1,0,4,1,0,4,0,1,1,0,0,0,1,0,4,1,0,4,4,0,0,0,4,1,1,4,0,1,0,0,0,0,0,4,0,1,1,4,0,0,0,4,4,0,1,0,4,1,0,0,0,0,1,0,0,1,1,4,0,1,0,4,0,0,0,0,0,1,0,0,4,0,1,0,4,1,1,4,0,1,0,4,4,0,0,4,0,1,0,0,0,0,0,0,4,0,1,4,4,1,0,4,0,0,1,0,0,0,0,4,4,1,1,4,4,0,0,0,4,1,1,0,0,1,1,0,4,0,0,4,0,0,1,4,4,1,0,4,4,1,0,0,0,0,1,4,4,1,1,0,4,0,0,0,4,0,1,4,0,1,1,0,0,16,64,128,64,16,0,128,64,16,0,128,64,0,0,0,64,16,64,0,64,0,64,128,0,0,64,128,0,16,0,128,0,0,0,0,0,16,64,0,0,16,64,0,64,16,64,128,64,0,0,128,0,0,0,0,64,0,64,0,0,0,64,128,0,0,0,128,0,16,0,0,0,0,64,0,0,16,64,128,64,0,0,0,0,0,64,0,0,16,0,128,64,16,0,0,64,0,64,128,0,0,0,128,64,16,0,0,64,0,64,0,0,16,0,0,64,16,64,0,64,16,64,128,64,0,0,128,64,0,64,0,0,0,64,128,0,16,64,0,64,16,64,128,64,0,0,128,0,0,0,0,0,0,0,0,0,16,64,0,64,16,0,0,64,0,64,0,64,0,64,128,0,0,0,128,0,16,64,128,64,16,0,128,64,16,0,128,64,0,0,0,64,16,64,128,64,0,0,128,0,0,0,128,0,16,0,0,0,0,64,128,0,16,0,128,64,16,64,0,64,0,64,128,0,16,0,128,64,16,0,0,0,0,64,0,0,16,64,128,64,0,0,0,0,0,64,0,0,16,0,0,64,16,64,0,128,0,0,0,128,0,4,1,0,0,4,1,128,0,0,33,0,0,4,0,128,0,0,0,0,0,0,32,0,0,4,1,128,0,4,32,0,0,4,0,128,0,0,1,128,0,4,32,128,0,0,33,0,0,4,33,128,0,4,0,0,0,0,32,0,0,0,1,0,0,4,32,0,0,4,32,0,0,0,0,128,0,0,32,128,0,4,33,128,0,4,33,128,0,0,1,0,0,4,33,128,0,0,32,0,0,0,0,0,0,0,33,128,0,4,1,0,0,0,1,0,0,0,33,128,0,4,0,0,0,4,0,128,0,0,33,128,0,0,0,0,0,0,1,0,0,0,32,0,0,4,1,128,0,0,33,128,0,4,32,128,0,0,1,0,0,0,32,0,0,4,33,128,0,4,1,128,0,4,32,128,0,0,0,0,0,0,1,0,0,4,33,128,0,4,33,128,0,4,0,0,0,0,33,128,0,4,33,0,0,4,1,0,0,0,0,0,0,4,32,0,0,0,33,128,0,4,0,128,0,0,1,128,0,0,32,0,0,4,0,0,0,0,0,0,0,4,32,128,0,4,1,128,0,0,32,8,0,0,16,0,0,32,16,0,32,0,0,8,32,32,16,0,0,32,16,8,0,0,0,8,32,32,16,0,0,32,0,0,32,0,16,8,32,32,0,0,0,32,0,8,0,0,16,8,0,32,0,0,32,0,16,0,0,0,16,8,32,0,0,0,0,0,0,8,0,32,0,8,32,0,16,0,32,0,0,0,32,32,0,8,32,0,16,8,0,0,0,8,0,32,16,8,0,32,16,0,0,0,0,8,32,32,0,0,32,32,16,8,32,0,0,0,32,32,0,0,32,32,16,0,0,0,16,0,32,0,16,8,0,0,0,8,0,32,16,0,32,32,0,8,32,32,16,0,0,32,0,8,32,0,0,8,0,0,16,0,0,32,0,0,32,0,16,0,0,0,16,8,32,0,0,8,0,0,16,8,32,32,16,0,32,32,0,0,0,32,16,8,32,32,0,0,32,32,16,0,0,0,0,8,0,32,16,8,0,0,0,0,32,0,0,0,0,32,16,8,32,32,0,0,32,0,0,8,0,32,0,8,32,0,16,0,0,0,0,0,32,32,16,0,0,0,16,8,0,32,0,8,32,0,16,0,0,16,0,1,0,16,2,1,4,0,2,0,0,0,0,0,4,0,0,1,4,0,2,1,4,16,0,0,4,16,2,1,4,16,2,0,0,16,0,0,0,0,0,1,0,0,2,1,0,0,0,0,0,0,2,1,0,16,2,1,4,0,0,0,4,0,2,1,4,16,0,1,0,16,0,0,4,0,2,1,0,0,2,0,0,16,2,0,4,16,2,1,0,16,0,0,0,16,2,0,4,0,0,1,4,0,0,1,4,16,2,0,4,16,0,1,0,0,0,0,0,0,2,0,4,16,0,0,0,0,2,0,4,16,0,0,0,16,0,1,4,0,2,1,4,0,2,1,0,16,2,1,0,16,2,1,0,0,0,1,0,16,0,0,0,0,2,0,4,0,2,0,0,16,0,0,4,16,2,1,4,0,0,1,4,16,0,0,4,16,2,1,4,0,0,1,0,0,2,1,4,16,2,0,0,16,2,0,4,16,0,0,0,0,0,1,0,0,0,1,4,16,2,0,0,0,0,1,4,16,0,0,0,16,2,0,4,0,0,1,0,0,2,0,4,0,2,0,4,0,0,1,0,16,0,32,8,0,8,0,8,0,0,0,0,2,0,32,8,2,8,0,0,0,8,32,8,0,8,32,0,0,0,0,0,0,8,32,0,2,0,0,0,2,8,32,8,2,8,0,8,2,0,0,8,2,8,32,8,2,0,0,8,0,0,32,0,0,0,0,0,2,8,32,0,0,8,0,8,0,8,32,8,0,0,0,8,2,0,32,0,2,0,32,0,2,8,0,8,2,8,32,8,0,0,0,0,0,0,0,0,0,0,32,0,2,8,32,0,0,8,0,8,0,8,32,8,2,0,0,0,2,0,32,8,2,0,0,0,2,0,0,8,2,8,0,8,0,0,32,0,0,0,32,0,2,8,0,8,0,0,32,8,2,0,0,8,0,8,32,0,0,0,32,0,0,8,0,0,2,8,32,0,2,8,0,0,0,8,0,0,2,0,32,8,0,8,0,0,0,0,32,8,2,8,32,0,2,0,32,0,0,8,0,0,2,8,0,8,0,8,32,8,0,8,0,0,0,0,32,8,2,8,0,8,2,0,0,8,2,0,32,8,0,0,32,8,0,0,32,0,2,0,0,0,0,8,0,8,2,8,0,0,0,0,0,0,0,64,0,0,64,0,0,0,64,64,0,64,0,0,0,64,0,64,0,64,64,0,0,64,64,64,64,0,0,0,64,0,0,64,64,0,64,0,64,0,64,64,64,64,0,0,64,64,0,64,64,64,64,0,64,64,64,64,0,0,0,0,0,0,0,16,0,0,16,0,0,0,16,16,0,16,0,0,0,16,0,16,0,16,16,0,0,16,16,16,16,0,0,0,16,0,0,16,16,0,16,0,16,0,16,16,16,16,0,0,16,16,0,16,16,16,16,0,16,16,16,16,0,0,0,0,0,0,0,4,0,0,4,0,0,0,4,4,0,4,0,0,0,4,0,4,0,4,4,0,0,4,4,4,4,0,0,0,4,0,0,4,4,0,4,0,4,0,4,4,4,4,0,0,4,4,0,4,4,4,4,0,4,4,4,4,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,1,0,0,0,1,0,1,0,1,1,0,0,1,1,1,1,0,0,0,1,0,0,1,1,0,1,0,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,128,0,0,128,0,0,0,128,128,0,128,0,0,0,128,0,128,0,128,128,0,0,128,128,128,128,0,0,0,128,0,0,128,128,0,128,0,128,0,128,128,128,128,0,0,128,128,0,128,128,128,128,0,128,128,128,128,0,0,0,0,0,0,0,32,0,0,32,0,0,0,32,32,0,32,0,0,0,32,0,32,0,32,32,0,0,32,32,32,32,0,0,0,32,0,0,32,32,0,32,0,32,0,32,32,32,32,0,0,32,32,0,32,32,32,32,0,32,32,32,32,0,0,0,0,0,0,0,8,0,0,8,0,0,0,8,8,0,8,0,0,0,8,0,8,0,8,8,0,0,8,8,8,8,0,0,0,8,0,0,8,8,0,8,0,8,0,8,8,8,8,0,0,8,8,0,8,8,8,8,0,8,8,8,8,0,0,0,0,0,0,0,2,0,0,2,0,0,0,2,2,0,2,0,0,0,2,0,2,0,2,2,0,0,2,2,2,2,0,0,0,2,0,0,2,2,0,2,0,2,0,2,2,2,2,0,0,2,2,0,2,2,2,2,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,9,0,0,0,10,0,0,0,13,0,0,0,11,0,0,0,12,0,0,0,133,0,0,0,0,32,0,0,1,32,0,0,2,32,0,0,3,32,0,0,4,32,0,0,5,32,0,0,6,32,0,0,8,32,0,0,9,32,0,0,10,32,0,0,40,32,0,0,41,32,0,0,95,32,0,0,0,48,0,0,0,0,0,0,124,59,2,0,88,74,0,0,88,68,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,66,192,2,0,68,192,2,0,68,192,2,0,68,192,2,0,68,192,2,0,68,192,2,0,68,192,2,0,68,192,2,0,68,192,2,0,68,192,2,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,149,191,214,51,189,55,134,53,172,197,39,55,23,183,209,56,111,18,131,58,10,215,35,60,205,204,204,61,0,0,128,63,0,0,32,65,0,0,200,66,0,0,122,68,0,64,28,70,0,80,195,71,0,36,116,73,128,150,24,75,3,0,0,0,4,0,0,0,4,0,0,0,6,0,0,0,131,249,162,0,68,78,110,0,252,41,21,0,209,87,39,0,221,52,245,0,98,219,192,0,60,153,149,0,65,144,67,0,99,81,254,0,187,222,171,0,183,97,197,0,58,110,36,0,210,77,66,0,73,6,224,0,9,234,46,0,28,146,209,0,235,29,254,0,41,177,28,0,232,62,167,0,245,53,130,0,68,187,46,0,156,233,132,0,180,38,112,0,65,126,95,0,214,145,57,0,83,131,57,0,156,244,57,0,139,95,132,0,40,249,189,0,248,31,59,0,222,255,151,0,15,152,5,0,17,47,239,0,10,90,139,0,109,31,109,0,207,126,54,0,9,203,39,0,70,79,183,0,158,102,63,0,45,234,95,0,186,39,117,0,229,235,199,0,61,123,241,0,247,57,7,0,146,82,138,0,251,107,234,0,31,177,95,0,8,93,141,0,48,3,86,0,123,252,70,0,240,171,107,0,32,188,207,0,54,244,154,0,227,169,29,0,94,97,145,0,8,27,230,0,133,153,101,0,160,20,95,0,141,64,104,0,128,216,255,0,39,115,77,0,6,6,49,0,202,86,21,0,201,168,115,0,123,226,96,0,107,140,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,3,0,0,0,0,0,0,0,92,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,255,255,255,216,255,255,255,220,255,255,255,254,255,255,255,236,255,255,255,226,255,255,255,247,255,255,255,234,255,255,255,230,255,255,255,242,255,255,255,251,255,255,255,244,255,255,255,240,255,255,255,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,196,187,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,188,183,2,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,4,0,0,0,180,179,2,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,116,0,0,0,227,191,2,0,110,0,0,0,229,191,2,0,114,0,0,0,231,191,2,0,102,0,0,0,233,191,2,0,97,0,0,0,235,191,2,0,101,0,0,0,237,191,2,0,119,0,0,0,239,191,2,0,87,0,0,0,252,191,2,0,115,0,0,0,10,192,2,0,83,0,0,0,22,192,2,0,100,0,0,0,35,192,2,0,68,0,0,0,47,192,2,0,0,0,0,0,0,0,0,0,0,0,0,0,45,244,81,88,207,140,177,192,70,246,181,203,41,49,3,199,4,91,112,48,180,93,253,32,120,127,139,154,216,89,41,80,104,72,137,171,167,86,3,108,255,183,205,136,63,212,119,180,43,165,163,112,241,186,228,168,252,65,131,253,217,111,225,138,122,47,45,116,150,7,31,13,9,94,3,118,44,112,247,64,165,44,167,111,87,65,168,170,116,223,160,88,100,3,74,199,196,60,83,174,175,95,24,4,21,177,227,109,40,134,171,12,164,191,67,240,233,80,129,57,87,22,82,55,77,42,11,66,152,97,168,67,227,219,130,68,237,179,94,68,108,147,207,66,236,125,171,65,153,148,250,66,199,70,104,67,215,91,235,66,144,213,5,65,13,225,79,49,171,255,239,61,231,181,123,64,69,122,12,66,42,28,182,66,124,60,66,66,168,78,231,51,22,250,239,61,192,149,23,64,188,225,67,65,65,141,141,65,77,90,162,64,44,106,228,66,229,46,100,69,53,92,16,71,102,161,190,71,139,168,240,70,85,31,109,66,177,217,119,68,35,74,167,69,134,37,245,69,128,1,188,68,0,0,0,0,0,0,240,61,234,212,83,65,163,6,206,67,237,43,114,69,214,83,247,69,63,51,104,45,255,255,239,61,35,176,217,64,202,157,216,66,183,104,1,68,198,45,4,68,55,101,33,67,23,139,244,69,214,188,2,72,156,178,47,73,148,190,34,73,72,203,143,200,84,68,236,65,71,251,124,67,46,96,61,68,42,217,56,68,242,242,27,67,55,180,158,192,0,0,0,0,0,0,210,189,141,44,130,193,131,230,61,196,58,39,57,198,131,54,61,199,50,137,63,180,117,244,209,189,35,36,48,192,22,79,157,193,31,77,41,194,178,249,170,193,148,108,15,66,202,193,180,67,115,51,149,68,230,255,140,68,184,148,45,67,45,195,177,65,240,52,8,67,50,60,135,67,26,224,25,67,154,133,106,65,27,8,47,177,184,255,143,189,149,45,26,192,82,186,175,193,18,81,104,194,101,149,251,193,183,152,190,179,18,251,143,189,204,177,185,191,159,87,244,192,54,23,51,193,13,244,78,192,152,17,233,66,235,155,111,69,219,149,30,71,124,8,228,71,186,11,58,71,8,4,115,66,19,104,131,68,196,215,186,69,200,101,22,70,238,96,22,69,0,0,0,0,0,0,144,189,134,78,1,193,20,136,128,195,118,83,27,197,90,40,164,197,138,197,72,173,255,255,143,189,136,27,133,192,123,89,135,194,155,157,165,195,121,55,173,195,22,9,67,66,28,108,49,68,95,130,103,69,103,227,201,69,87,69,29,69,89,63,21,195,184,236,242,65,143,172,134,67,41,50,83,68,229,187,92,68,152,170,84,67,88,243,169,192,27,104,150,49,112,255,149,61,227,7,86,64,197,124,42,66,223,206,42,67,228,187,38,67,219,137,33,52,42,246,149,61,191,196,255,63,253,237,103,65,113,84,253,65,140,5,130,65,170,198,35,67,194,18,253,69,147,50,11,72,212,30,68,73,89,51,77,73,105,235,167,200,160,141,165,66,7,221,1,69,148,62,147,70,29,175,93,71,193,136,12,71,190,82,167,197,0,0,0,0,0,0,150,61,147,74,60,65,25,107,11,68,202,108,10,70,160,150,16,71,121,236,161,45,255,255,149,61,134,189,186,64,144,28,7,67,205,103,128,68,75,191,248,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10243);
/* memory initializer */ allocate([1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,47,138,66,145,68,55,113,207,251,192,181,165,219,181,233,91,194,86,57,241,17,241,89,164,130,63,146,213,94,28,171,152,170,7,216,1,91,131,18,190,133,49,36,195,125,12,85,116,93,190,114,254,177,222,128,167,6,220,155,116,241,155,193,193,105,155,228,134,71,190,239,198,157,193,15,204,161,12,36,111,44,233,45,170,132,116,74,220,169,176,92,218,136,249,118,82,81,62,152,109,198,49,168,200,39,3,176,199,127,89,191,243,11,224,198,71,145,167,213,81,99,202,6,103,41,41,20,133,10,183,39,56,33,27,46,252,109,44,77,19,13,56,83,84,115,10,101,187,10,106,118,46,201,194,129,133,44,114,146,161,232,191,162,75,102,26,168,112,139,75,194,163,81,108,199,25,232,146,209,36,6,153,214,133,53,14,244,112,160,106,16,22,193,164,25,8,108,55,30,76,119,72,39,181,188,176,52,179,12,28,57,74,170,216,78,79,202,156,91,243,111,46,104,238,130,143,116,111,99,165,120,20,120,200,132,8,2,199,140,250,255,190,144,235,108,80,164,247,163,249,190,242,120,113,198,120,164,106,215,86,183,199,232,219,112,32,36,238,206,189,193,175,15,124,245,42,198,135,71,19,70,48,168,1,149,70,253,216,152,128,105,175,247,68,139,177,91,255,255,190,215,92,137,34,17,144,107,147,113,152,253,142,67,121,166,33,8,180,73,98,37,30,246,64,179,64,192,81,90,94,38,170,199,182,233,93,16,47,214,83,20,68,2,129,230,161,216,200,251,211,231,230,205,225,33,214,7,55,195,135,13,213,244,237,20,90,69,5,233,227,169,248,163,239,252,217,2,111,103,138,76,42,141,66,57,250,255,129,246,113,135,34,97,157,109,12,56,229,253,68,234,190,164,169,207,222,75,96,75,187,246,112,188,191,190,198,126,155,40,250,39,161,234,133,48,239,212,5,29,136,4,57,208,212,217,229,153,219,230,248,124,162,31,101,86,172,196,68,34,41,244,151,255,42,67,167,35,148,171,57,160,147,252,195,89,91,101,146,204,12,143,125,244,239,255,209,93,132,133,79,126,168,111,224,230,44,254,20,67,1,163,161,17,8,78,130,126,83,247,53,242,58,189,187,210,215,42,145,211,134,235,136,106,63,36,211,8,163,133,46,138,25,19,68,115,112,3,34,56,9,164,208,49,159,41,152,250,46,8,137,108,78,236,230,33,40,69,119,19,208,56,207,102,84,190,108,12,233,52,183,41,172,192,221,80,124,201,181,213,132,63,23,9,71,181,217,213,22,146,27,251,121,137,166,11,49,209,172,181,223,152,219,114,253,47,183,223,26,208,237,175,225,184,150,126,38,106,69,144,124,186,153,127,44,241,71,153,161,36,247,108,145,179,226,242,1,8,22,252,142,133,216,32,105,99,105,78,87,113,163,254,88,164,126,61,147,244,143,116,149,13,88,182,142,114,88,205,139,113,238,74,21,130,29,164,84,123,181,89,90,194,57,213,48,156,19,96,242,42,35,176,209,197,240,133,96,40,24,121,65,202,239,56,219,184,176,220,121,142,14,24,58,96,139,14,158,108,62,138,30,176,193,119,21,215,39,75,49,189,218,47,175,120,96,92,96,85,243,37,85,230,148,171,85,170,98,152,72,87,64,20,232,99,106,57,202,85,182,16,171,42,52,92,204,180,206,232,65,17,175,134,84,161,147,233,114,124,17,20,238,179,42,188,111,99,93,197,169,43,246,49,24,116,22,62,92,206,30,147,135,155,51,186,214,175,92,207,36,108,129,83,50,122,119,134,149,40,152,72,143,59,175,185,75,107,27,232,191,196,147,33,40,102,204,9,216,97,145,169,33,251,96,172,124,72,50,128,236,93,93,93,132,239,177,117,133,233,2,35,38,220,136,27,101,235,129,62,137,35,197,172,150,211,243,111,109,15,57,66,244,131,130,68,11,46,4,32,132,164,74,240,200,105,94,155,31,158,66,104,198,33,154,108,233,246,97,156,12,103,240,136,211,171,210,160,81,106,104,47,84,216,40,167,15,150,163,51,81,171,108,11,239,110,228,59,122,19,80,240,59,186,152,42,251,126,29,101,241,161,118,1,175,57,62,89,202,102,136,14,67,130,25,134,238,140,180,159,111,69,195,165,132,125,190,94,139,59,216,117,111,224,115,32,193,133,159,68,26,64,166,106,193,86,98,170,211,78,6,119,63,54,114,223,254,27,61,2,155,66,36,215,208,55,72,18,10,208,211,234,15,219,155,192,241,73,201,114,83,7,123,27,153,128,216,121,212,37,247,222,232,246,26,80,254,227,59,76,121,182,189,224,108,151,186,6,192,4,182,79,169,193,196,96,159,64,194,158,92,94,99,36,106,25,175,111,251,104,181,83,108,62,235,178,57,19,111,236,82,59,31,81,252,109,44,149,48,155,68,69,129,204,9,189,94,175,4,208,227,190,253,74,51,222,7,40,15,102,179,75,46,25,87,168,203,192,15,116,200,69,57,95,11,210,219,251,211,185,189,192,121,85,10,50,96,26,198,0,161,214,121,114,44,64,254,37,159,103,204,163,31,251,248,233,165,142,248,34,50,219,223,22,117,60,21,107,97,253,200,30,80,47,171,82,5,173,250,181,61,50,96,135,35,253,72,123,49,83,130,223,0,62,187,87,92,158,160,140,111,202,46,86,135,26,219,105,23,223,246,168,66,213,195,255,126,40,198,50,103,172,115,85,79,140,176,39,91,105,200,88,202,187,93,163,255,225,160,17,240,184,152,61,250,16,184,131,33,253,108,181,252,74,91,211,209,45,121,228,83,154,101,69,248,182,188,73,142,210,144,151,251,75,218,242,221,225,51,126,203,164,65,19,251,98,232,198,228,206,218,202,32,239,1,76,119,54,254,158,126,208,180,31,241,43,77,218,219,149,152,145,144,174,113,142,173,234,160,213,147,107,208,209,142,208,224,37,199,175,47,91,60,142,183,148,117,142,251,226,246,143,100,43,18,242,18,184,136,136,28,240,13,144,160,94,173,79,28,195,143,104,145,241,207,209,173,193,168,179,24,34,47,47,119,23,14,190,254,45,117,234,161,31,2,139,15,204,160,229,232,116,111,181,214,243,172,24,153,226,137,206,224,79,168,180,183,224,19,253,129,59,196,124,217,168,173,210,102,162,95,22,5,119,149,128,20,115,204,147,119,20,26,33,101,32,173,230,134,250,181,119,245,66,84,199,207,53,157,251,12,175,205,235,160,137,62,123,211,27,65,214,73,126,30,174,45,14,37,0,94,179,113,32,187,0,104,34,175,224,184,87,155,54,100,36,30,185,9,240,29,145,99,85,170,166,223,89,137,67,193,120,127,83,90,217,162,91,125,32,197,185,229,2,118,3,38,131,169,207,149,98,104,25,200,17,65,74,115,78,202,45,71,179,74,169,20,123,82,0,81,27,21,41,83,154,63,87,15,214,228,198,155,188,118,164,96,43,0,116,230,129,181,111,186,8,31,233,27,87,107,236,150,242,21,217,13,42,33,101,99,182,182,249,185,231,46,5,52,255,100,86,133,197,93,45,176,83,161,143,159,169,153,71,186,8,106,7,133,110,233,112,122,75,68,41,179,181,46,9,117,219,35,38,25,196,176,166,110,173,125,223,167,73,184,96,238,156,102,178,237,143,113,140,170,236,255,23,154,105,108,82,100,86,225,158,177,194,165,2,54,25,41,76,9,117,64,19,89,160,62,58,24,228,154,152,84,63,101,157,66,91,214,228,143,107,214,63,247,153,7,156,210,161,245,48,232,239,230,56,45,77,193,93,37,240,134,32,221,76,38,235,112,132,198,233,130,99,94,204,30,2,63,107,104,9,201,239,186,62,20,24,151,60,161,112,106,107,132,53,127,104,134,226,160,82,5,83,156,183,55,7,80,170,28,132,7,62,92,174,222,127,236,68,125,142,184,242,22,87,55,218,58,176,13,12,80,240,4,31,28,240,255,179,0,2,26,245,12,174,178,116,181,60,88,122,131,37,189,33,9,220,249,19,145,209,246,47,169,124,115,71,50,148,1,71,245,34,129,229,229,58,220,218,194,55,52,118,181,200,167,221,243,154,70,97,68,169,14,3,208,15,62,199,200,236,65,30,117,164,153,205,56,226,47,14,234,59,161,187,128,50,49,179,62,24,56,139,84,78,8,185,109,79,3,13,66,111,191,4,10,246,144,18,184,44,121,124,151,36,114,176,121,86,175,137,175,188,31,119,154,222,16,8,147,217,18,174,139,179,46,63,207,220,31,114,18,85,36,113,107,46,230,221,26,80,135,205,132,159,24,71,88,122,23,218,8,116,188,154,159,188,140,125,75,233,58,236,122,236,250,29,133,219,102,67,9,99,210,195,100,196,71,24,28,239,8,217,21,50,55,59,67,221,22,186,194,36,67,77,161,18,81,196,101,42,2,0,148,80,221,228,58,19,158,248,223,113,85,78,49,16,214,119,172,129,155,25,17,95,241,86,53,4,107,199,163,215,59,24,17,60,9,165,36,89,237,230,143,242,250,251,241,151,44,191,186,158,110,60,21,30,112,69,227,134,177,111,233,234,10,94,14,134,179,42,62,90,28,231,31,119,250,6,61,78,185,220,101,41,15,29,231,153,214,137,62,128,37,200,102,82,120,201,76,46,106,179,16,156,186,14,21,198,120,234,226,148,83,60,252,165,244,45,10,30,167,78,247,242,61,43,29,54,15,38,57,25,96,121,194,25,8,167,35,82,182,18,19,247,110,254,173,235,102,31,195,234,149,69,188,227,131,200,123,166,209,55,127,177,40,255,140,1,239,221,50,195,165,90,108,190,133,33,88,101,2,152,171,104,15,165,206,238,59,149,47,219,173,125,239,42,132,47,110,91,40,182,33,21,112,97,7,41,117,71,221,236,16,21,159,97,48,168,204,19,150,189,97,235,30,254,52,3,207,99,3,170,144,92,115,181,57,162,112,76,11,158,158,213,20,222,170,203,188,134,204,238,167,44,98,96,171,92,171,156,110,132,243,178,175,30,139,100,202,240,189,25,185,105,35,160,80,187,90,101,50,90,104,64,179,180,42,60,213,233,158,49,247,184,33,192,25,11,84,155,153,160,95,135,126,153,247,149,168,125,61,98,154,136,55,248,119,45,227,151,95,147,237,17,129,18,104,22,41,136,53,14,214,31,230,199,161,223,222,150,153,186,88,120,165,132,245,87,99,114,34,27,255,195,131,155,150,70,194,26,235,10,179,205,84,48,46,83,228,72,217,143,40,49,188,109,239,242,235,88,234,255,198,52,97,237,40,254,115,60,124,238,217,20,74,93,227,183,100,232,20,93,16,66,224,19,62,32,182,226,238,69,234,171,170,163,21,79,108,219,208,79,203,250,66,244,66,199,181,187,106,239,29,59,79,101,5,33,205,65,158,121,30,216,199,77,133,134,106,71,75,228,80,98,129,61,242,161,98,207,70,38,141,91,160,131,136,252,163,182,199,193,195,36,21,127,146,116,203,105,11,138,132,71,133,178,146,86,0,191,91,9,157,72,25,173,116,177,98,20,0,14,130,35,42,141,66,88,234,245,85,12,62,244,173,29,97,112,63,35,146,240,114,51,65,126,147,141,241,236,95,214,219,59,34,108,89,55,222,124,96,116,238,203,167,242,133,64,110,50,119,206,132,128,7,166,158,80,248,25,85,216,239,232,53,151,217,97,170,167,105,169,194,6,12,197,252,171,4,90,220,202,11,128,46,122,68,158,132,52,69,195,5,103,213,253,201,158,30,14,211,219,115,219,205,136,85,16,121,218,95,103,64,67,103,227,101,52,196,197,216,56,62,113,158,248,40,61,32,255,109,241,231,33,62,21,74,61,176,143,43,159,227,230,247,173,131,219,104,90,61,233,247,64,129,148,28,38,76,246,52,41,105,148,247,32,21,65,247,212,2,118,46,107,244,188,104,0,162,212,113,36,8,212,106,244,32,51,183,212,183,67,175,97,0,80,46,246,57,30,70,69,36,151,116,79,33,20,64,136,139,191,29,252,149,77,175,145,181,150,211,221,244,112,69,47,160,102,236,9,188,191,133,151,189,3,208,109,172,127,4,133,203,49,179,39,235,150,65,57,253,85,230,71,37,218,154,10,202,171,37,120,80,40,244,41,4,83,218,134,44,10,251,109,182,233,98,20,220,104,0,105,72,215,164,192,14,104,238,141,161,39,162,254,63,79,140,173,135,232,6,224,140,181,182,214,244,122,124,30,206,170,236,95,55,211,153,163,120,206,66,42,107,64,53,158,254,32,185,133,243,217,171,215,57,238,139,78,18,59,247,250,201,29,86,24,109,75,49,102,163,38,178,151,227,234,116,250,110,58,50,67,91,221,247,231,65,104,251,32,120,202,78,245,10,251,151,179,254,216,172,86,64,69,39,149,72,186,58,58,83,85,135,141,131,32,183,169,107,254,75,149,150,208,188,103,168,85,88,154,21,161,99,41,169,204,51,219,225,153,86,74,42,166,249,37,49,63,28,126,244,94,124,49,41,144,2,232,248,253,112,47,39,4,92,21,187,128,227,44,40,5,72,21,193,149,34,109,198,228,63,19,193,72,220,134,15,199,238,201,249,7,15,31,4,65,164,121,71,64,23,110,136,93,235,81,95,50,209,192,155,213,143,193,188,242,100,53,17,65,52,120,123,37,96,156,42,96,163,232,248,223,27,108,99,31,194,180,18,14,158,50,225,2,209,79,102,175,21,129,209,202,224,149,35,107,225,146,62,51,98,11,36,59,34,185,190,238,14,162,178,133,153,13,186,230,140,12,114,222,40,247,162,45,69,120,18,208,253,148,183,149,98,8,125,100,240,245,204,231,111,163,73,84,250,72,125,135,39,253,157,195,30,141,62,243,65,99,71,10,116,255,46,153,171,110,111,58,55,253,248,244,96,220,18,168,248,221,235,161,76,225,27,153,13,107,110,219,16,85,123,198,55,44,103,109,59,212,101,39,4,232,208,220,199,13,41,241,163,255,0,204,146,15,57,181,11,237,15,105,251,159,123,102,156,125,219,206,11,207,145,160,163,94,21,217,136,47,19,187,36,173,91,81,191,121,148,123,235,214,59,118,179,46,57,55,121,89,17,204,151,226,38,128,45,49,46,244,167,173,66,104,59,43,106,198,204,76,117,18,28,241,46,120,55,66,18,106,231,81,146,183,230,187,161,6,80,99,251,75,24,16,107,26,250,237,202,17,216,189,37,61,201,195,225,226,89,22,66,68,134,19,18,10,110,236,12,217,42,234,171,213,78,103,175,100,95,168,134,218,136,233,191,190,254,195,228,100,87,128,188,157,134,192,247,240,248,123,120,96,77,96,3,96,70,131,253,209,176,31,56,246,4,174,69,119,204,252,54,215,51,107,66,131,113,171,30,240,135,65,128,176,95,94,0,60,190,87,160,119,36,174,232,189,153,66,70,85,97,46,88,191,143,244,88,78,162,253,221,242,56,239,116,244,194,189,137,135,195,249,102,83,116,142,179,200,85,242,117,180,185,217,252,70,97,38,235,122,132,223,29,139,121,14,106,132,226,149,95,145,142,89,110,70,112,87,180,32,145,85,213,140,76,222,2,201,225,172,11,185,208,5,130,187,72,98,168,17,158,169,116,117,182,25,127,183,9,220,169,224,161,9,45,102,51,70,50,196,2,31,90,232,140,190,240,9,37,160,153,74,16,254,110,29,29,61,185,26,223,164,165,11,15,242,134,161,105,241,104,40,131,218,183,220,254,6,57,87,155,206,226,161,82,127,205,79,1,94,17,80,250,131,6,167,196,181,2,160,39,208,230,13,39,140,248,154,65,134,63,119,6,76,96,195,181,6,168,97,40,122,23,240,224,134,245,192,170,88,96,0,98,125,220,48,215,158,230,17,99,234,56,35,148,221,194,83,52,22,194,194,86,238,203,187,222,182,188,144,161,125,252,235,118,29,89,206,9,228,5,111,136,1,124,75,61,10,114,57,36,124,146,124,95,114,227,134,185,157,77,114,180,91,193,26,252,184,158,211,120,85,84,237,181,165,252,8,211,124,61,216,196,15,173,77,94,239,80,30,248,230,97,177,217,20,133,162,60,19,81,108,231,199,213,111,196,78,225,86,206,191,42,54,55,200,198,221,52,50,154,215,18,130,99,146,142,250,14,103,224,0,96,64,55,206,57,58,207,245,250,211,55,119,194,171,27,45,197,90,158,103,176,92,66,55,163,79,64,39,130,211,190,155,188,153,157,142,17,213,21,115,15,191,126,28,45,214,123,196,0,199,107,27,140,183,69,144,161,33,190,177,110,178,180,110,54,106,47,171,72,87,121,110,148,188,210,118,163,198,200,194,73,101,238,248,15,83,125,222,141,70,29,10,115,213,198,77,208,76,219,187,57,41,80,70,186,169,232,38,149,172,4,227,94,190,240,213,250,161,154,81,45,106,226,140,239,99,34,238,134,154,184,194,137,192,246,46,36,67,170,3,30,165,164,208,242,156,186,97,192,131,77,106,233,155,80,21,229,143,214,91,100,186,249,162,38,40,225,58,58,167,134,149,169,75,233,98,85,239,211,239,47,199,218,247,82,247,105,111,4,63,89,10,250,119,21,169,228,128,1,134,176,135,173,230,9,155,147,229,62,59,90,253,144,233,151,215,52,158,217,183,240,44,81,139,43,2,58,172,213,150,125,166,125,1,214,62,207,209,40,45,125,124,207,37,159,31,155,184,242,173,114,180,214,90,76,245,136,90,113,172,41,224,230,165,25,224,253,172,176,71,155,250,147,237,141,196,211,232,204,87,59,40,41,102,213,248,40,46,19,121,145,1,95,120,85,96,117,237,68,14,150,247,140,94,211,227,212,109,5,21,186,109,244,136,37,97,161,3,189,240,100,5,21,158,235,195,162,87,144,60,236,26,39,151,42,7,58,169,155,109,63,27,245,33,99,30,251,102,156,245,25,243,220,38,40,217,51,117,245,253,85,177,130,52,86,3,187,60,186,138,17,119,81,40,248,217,10,194,103,81,204,171,95,146,173,204,81,23,232,77,142,220,48,56,98,88,157,55,145,249,32,147,194,144,122,234,206,123,62,251,100,206,33,81,50,190,79,119,126,227,182,168,70,61,41,195,105,83,222,72,128,230,19,100,16,8,174,162,36,178,109,221,253,45,133,105,102,33,7,9,10,70,154,179,221,192,69,100,207,222,108,88,174,200,32,28,221,247,190,91,64,141,88,27,127,1,210,204,187,227,180,107,126,106,162,221,69,255,89,58,68,10,53,62,213,205,180,188,168,206,234,114,187,132,100,250,174,18,102,141,71,111,60,191,99,228,155,210,158,93,47,84,27,119,194,174,112,99,78,246,141,13,14,116,87,19,91,231,113,22,114,248,93,125,83,175,8,203,64,64,204,226,180,78,106,70,210,52,132,175,21,1,40,4,176,225,29,58,152,149,180,159,184,6,72,160,110,206,130,59,63,111,130,171,32,53,75,29,26,1,248,39,114,39,177,96,21,97,220,63,147,231,43,121,58,187,189,37,69,52,225,57,136,160,75,121,206,81,183,201,50,47,201,186,31,160,126,200,28,224,246,209,199,188,195,17,1,207,199,170,232,161,73,135,144,26,154,189,79,212,203,222,218,208,56,218,10,213,42,195,57,3,103,54,145,198,124,49,249,141,79,43,177,224,183,89,158,247,58,187,245,67,255,25,213,242,156,69,217,39,44,34,151,191,42,252,230,21,113,252,145,15,37,21,148,155,97,147,229,250,235,156,182,206,89,100,168,194,209,168,186,18,94,7,193,182,12,106,5,227,101,80,210,16,66,164,3,203,14,110,236,224,59,219,152,22,190,160,152,76,100,233,120,50,50,149,31,159,223,146,211,224,43,52,160,211,30,242,113,137,65,116,10,27,140,52,163,75,32,113,190,197,216,50,118,195,141,159,53,223,46,47,153,155,71,111,11,230,29,241,227,15,84,218,76,229,145,216,218,30,207,121,98,206,111,126,62,205,102,177,24,22,5,29,44,253,197,210,143,132,153,34,251,246,87,243,35,245,35,118,50,166,49,53,168,147,2,205,204,86,98,129,240,172,181,235,117,90,151,54,22,110,204,115,210,136,146,98,150,222,208,73,185,129,27,144,80,76,20,86,198,113,189,199,198,230,10,20,122,50,6,208,225,69,154,123,242,195,253,83,170,201,0,15,168,98,226,191,37,187,246,210,189,53,5,105,18,113,34,2,4,178,124,207,203,182,43,156,118,205,192,62,17,83,211,227,64,22,96,189,171,56,240,173,71,37,156,32,56,186,118,206,70,247,197,161,175,119,96,96,117,32,78,254,203,133,216,141,232,138,176,249,170,122,126,170,249,76,92,194,72,25,140,138,251,2,228,106,195,1,249,225,235,214,105,248,212,144,160,222,92,166,45,37,9,63,159,230,8,194,50,97,78,183,91,226,119,206,227,223,143,87,230,114,195,58,104,112,114,79,66,110,97,101,108,111,104,101,83,114,101,100,68,121,114,99,116,98,117,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,230,236,222,5,0,11,0,0,48,1,48,2,48,12,255,14,255,251,48,26,255,27,255,31,255,1,255,155,48,156,48,180,0,64,255,168,0,62,255,227,255,63,255,253,48,254,48,157,48,158,48,3,48,221,78,5,48,6,48,7,48,252,48,21,32,16,32,15,255,92,0,28,48,22,32,92,255,38,32,37,32,24,32,25,32,28,32,29,32,8,255,9,255,20,48,21,48,59,255,61,255,91,255,93,255,8,48,9,48,10,48,11,48,12,48,13,48,14,48,15,48,16,48,17,48,11,255,18,34,177,0,215,0,247,0,29,255,96,34,28,255,30,255,102,34,103,34,30,34,52,34,66,38,64,38,176,0,50,32,51,32,3,33,229,255,4,255,162,0,163,0,5,255,3,255,6,255,10,255,32,255,167,0,6,38,5,38,203,37,207,37,206,37,199,37,198,37,161,37,160,37,179,37,178,37,189,37,188,37,59,32,18,48,146,33,144,33,145,33,147,33,19,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,34,11,34,134,34,135,34,130,34,131,34,42,34,41,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,34,40,34,172,0,210,33,212,33,0,34,3,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,34,165,34,18,35,2,34,7,34,97,34,82,34,106,34,107,34,26,34,61,34,29,34,53,34,43,34,44,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,33,48,32,111,38,109,38,106,38,32,32,33,32,182,0,0,0,0,0,0,0,0,0,239,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,255,17,255,18,255,19,255,20,255,21,255,22,255,23,255,24,255,25,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,255,34,255,35,255,36,255,37,255,38,255,39,255,40,255,41,255,42,255,43,255,44,255,45,255,46,255,47,255,48,255,49,255,50,255,51,255,52,255,53,255,54,255,55,255,56,255,57,255,58,255,0,0,0,0,0,0,0,0,0,0,0,0,65,255,66,255,67,255,68,255,69,255,70,255,71,255,72,255,73,255,74,255,75,255,76,255,77,255,78,255,79,255,80,255,81,255,82,255,83,255,84,255,85,255,86,255,87,255,88,255,89,255,90,255,0,0,0,0,0,0,0,0,65,48,66,48,67,48,68,48,69,48,70,48,71,48,72,48,73,48,74,48,75,48,76,48,77,48,78,48,79,48,80,48,81,48,82,48,83,48,84,48,85,48,86,48,87,48,88,48,89,48,90,48,91,48,92,48,93,48,94,48,95,48,96,48,97,48,98,48,99,48,100,48,101,48,102,48,103,48,104,48,105,48,106,48,107,48,108,48,109,48,110,48,111,48,112,48,113,48,114,48,115,48,116,48,117,48,118,48,119,48,120,48,121,48,122,48,123,48,124,48,125,48,126,48,127,48,128,48,129,48,130,48,131,48,132,48,133,48,134,48,135,48,136,48,137,48,138,48,139,48,140,48,141,48,142,48,143,48,144,48,145,48,146,48,147,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,48,162,48,163,48,164,48,165,48,166,48,167,48,168,48,169,48,170,48,171,48,172,48,173,48,174,48,175,48,176,48,177,48,178,48,179,48,180,48,181,48,182,48,183,48,184,48,185,48,186,48,187,48,188,48,189,48,190,48,191,48,192,48,193,48,194,48,195,48,196,48,197,48,198,48,199,48,200,48,201,48,202,48,203,48,204,48,205,48,206,48,207,48,208,48,209,48,210,48,211,48,212,48,213,48,214,48,215,48,216,48,217,48,218,48,219,48,220,48,221,48,222,48,223,48,224,48,225,48,226,48,227,48,228,48,229,48,230,48,231,48,232,48,233,48,234,48,235,48,236,48,237,48,238,48,239,48,240,48,241,48,242,48,243,48,244,48,245,48,246,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,4,17,4,18,4,19,4,20,4,21,4,1,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,4,49,4,50,4,51,4,52,4,53,4,81,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,2,37,12,37,16,37,24,37,20,37,28,37,44,37,36,37,52,37,60,37,1,37,3,37,15,37,19,37,27,37,23,37,35,37,51,37,43,37,59,37,75,37,32,37,47,37,40,37,55,37,63,37,29,37,48,37,37,37,56,37,66,37], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+19028);
/* memory initializer */ allocate([156,78,22,85,3,90,63,150,192,84,27,97,40,99,246,89,34,144,117,132,28,131,80,122,170,96,225,99,37,110,237,101,102,132,166,130,245,155,147,104,39,87,161,101,113,98,155,91,208,89,123,134,244,152,98,125,190,125,142,155,22,98,159,124,183,136,137,91,181,94,9,99,151,102,72,104,199,149,141,151,79,103,229,78,10,79,77,79,157,79,73,80,242,86,55,89,212,89,1,90,9,92,223,96,15,97,112,97,19,102,5,105,186,112,79,117,112,117,251,121,173,125,239,125,195,128,14,132,99,136,2,139,85,144,122,144,59,83,149,78,165,78,223,87,178,128,193,144,239,120,0,78,241,88,162,110,56,144,50,122,40,131,139,130,47,156,65,81,112,83,189,84,225,84,224,86,251,89,21,95,242,152,235,109,228,128,45,133,98,150,112,150,160,150,251,151,11,84,243,83,135,91,207,112,189,127,194,143,232,150,111,83,92,157,186,122,17,78,147,120,252,129,38,110,24,86,4,85,29,107,26,133,59,156,229,89,169,83,102,109,220,116,143,149,66,86,145,78,75,144,242,150,79,131,12,153,225,83,182,85,48,91,113,95,32,102,243,102,4,104,56,108,243,108,41,109,91,116,200,118,78,122,52,152,241,130,91,136,96,138,237,146,178,109,171,117,202,118,197,153,166,96,1,139,138,141,178,149,142,105,173,83,134,81,18,87,48,88,68,89,180,91,246,94,40,96,169,99,244,99,191,108,20,111,142,112,20,113,89,113,213,113,63,115,1,126,118,130,209,130,151,133,96,144,91,146,27,157,105,88,188,101,90,108,37,117,249,81,46,89,101,89,128,95,220,95,188,98,250,101,42,106,39,107,180,107,139,115,193,127,86,137,44,157,14,157,196,158,161,92,150,108,123,131,4,81,75,92,182,97,198,129,118,104,97,114,89,78,250,79,120,83,105,96,41,110,79,122,243,151,11,78,22,83,238,78,85,79,61,79,161,79,115,79,160,82,239,83,9,86,15,89,193,90,182,91,225,91,209,121,135,102,156,103,182,103,76,107,179,108,107,112,194,115,141,121,190,121,60,122,135,123,177,130,219,130,4,131,119,131,239,131,211,131,102,135,178,138,41,86,168,140,230,143,78,144,30,151,138,134,196,79,232,92,17,98,89,114,59,117,229,129,189,130,254,134,192,140,197,150,19,153,213,153,203,78,26,79,227,137,222,86,74,88,202,88,251,94,235,95,42,96,148,96,98,96,208,97,18,98,208,98,57,101,65,155,102,102,176,104,119,109,112,112,76,117,134,118,117,125,165,130,249,135,139,149,142,150,157,140,241,81,190,82,22,89,179,84,179,91,22,93,104,97,130,105,175,109,141,120,203,132,87,136,114,138,167,147,184,154,108,109,168,153,217,134,163,87,255,103,206,134,14,146,131,82,135,86,4,84,211,94,225,98,185,100,60,104,56,104,187,107,114,115,186,120,107,122,154,137,210,137,107,141,3,143,237,144,163,149,148,150,105,151,102,91,179,92,125,105,77,152,78,152,155,99,32,123,43,106,127,106,182,104,13,156,95,111,114,82,157,85,112,96,236,98,59,109,7,110,209,110,91,132,16,137,68,143,20,78,57,156,246,83,27,105,58,106,132,151,42,104,92,81,195,122,178,132,220,145,140,147,91,86,40,157,34,104,5,131,49,132,165,124,8,82,197,130,230,116,126,78,131,79,160,81,210,91,10,82,216,82,231,82,251,93,154,85,42,88,230,89,140,91,152,91,219,91,114,94,121,94,163,96,31,97,99,97,190,97,219,99,98,101,209,103,83,104,250,104,62,107,83,107,87,108,34,111,151,111,69,111,176,116,24,117,227,118,11,119,255,122,161,123,33,124,233,125,54,127,240,127,157,128,102,130,158,131,179,137,204,138,171,140,132,144,81,148,147,149,145,149,162,149,101,150,211,151,40,153,24,130,56,78,43,84,184,92,204,93,169,115,76,118,60,119,169,92,235,127,11,141,193,150,17,152,84,152,88,152,1,79,14,79,113,83,156,85,104,86,250,87,71,89,9,91,196,91,144,92,12,94,126,94,204,95,238,99,58,103,215,101,226,101,31,103,203,104,196,104,95,106,48,94,197,107,23,108,125,108,127,117,72,121,99,91,0,122,0,125,189,95,143,137,24,138,180,140,119,141,204,142,29,143,226,152,14,154,60,155,128,78,125,80,0,81,147,89,156,91,47,98,128,98,236,100,58,107,160,114,145,117,71,121,169,127,251,135,188,138,112,139,172,99,202,131,160,151,9,84,3,84,171,85,84,104,88,106,112,138,39,120,117,103,205,158,116,83,162,91,26,129,80,134,6,144,24,78,69,78,199,78,17,79,202,83,56,84,174,91,19,95,37,96,81,101,61,103,66,108,114,108,227,108,120,112,3,116,118,122,174,122,8,123,26,125,254,124,102,125,231,101,91,114,187,83,69,92,232,93,210,98,224,98,25,99,32,110,90,134,49,138,221,141,248,146,1,111,166,121,90,155,168,78,171,78,172,78,155,79,160,79,209,80,71,81,246,122,113,81,246,81,84,83,33,83,127,83,235,83,172,85,131,88,225,92,55,95,74,95,47,96,80,96,109,96,31,99,89,101,75,106,193,108,194,114,237,114,239,119,248,128,5,129,8,130,78,133,247,144,225,147,255,151,87,153,90,154,240,78,221,81,45,92,129,102,109,105,64,92,242,102,117,105,137,115,80,104,129,124,197,80,228,82,71,87,254,93,38,147,164,101,35,107,61,107,52,116,129,121,189,121,75,123,202,125,185,130,204,131,127,136,95,137,57,139,209,143,209,145,31,84,128,146,93,78,54,80,229,83,58,83,215,114,150,115,233,119,230,130,175,142,198,153,200,153,210,153,119,81,26,97,94,134,176,85,122,122,118,80,211,91,71,144,133,150,50,78,219,106,231,145,81,92,72,92,152,99,159,122,147,108,116,151,97,143,170,122,138,113,136,150,130,124,23,104,112,126,81,104,108,147,242,82,27,84,171,133,19,138,164,127,205,142,225,144,102,83,136,136,65,121,194,79,190,80,17,82,68,81,83,85,45,87,234,115,139,87,81,89,98,95,132,95,117,96,118,97,103,97,169,97,178,99,58,100,108,101,111,102,66,104,19,110,102,117,61,122,251,124,76,125,153,125,75,126,107,127,14,131,74,131,205,134,8,138,99,138,102,139,253,142,26,152,143,157,184,130,206,143,232,155,135,82,31,98,131,100,192,111,153,150,65,104,145,80,32,107,122,108,84,111,116,122,80,125,64,136,35,138,8,103,246,78,57,80,38,80,101,80,124,81,56,82,99,82,167,85,15,87,5,88,204,90,250,94,178,97,248,97,243,98,114,99,28,105,41,106,125,114,172,114,46,115,20,120,111,120,121,125,12,119,169,128,139,137,25,139,226,140,210,142,99,144,117,147,122,150,85,152,19,154,120,158,67,81,159,83,179,83,123,94,38,95,27,110,144,110,132,115,254,115,67,125,55,130,0,138,250,138,80,150,78,78,11,80,228,83,124,84,250,86,209,89,100,91,241,93,171,94,39,95,56,98,69,101,175,103,86,110,208,114,202,124,180,136,161,128,225,128,240,131,78,134,135,138,232,141,55,146,199,150,103,152,19,159,148,78,146,78,13,79,72,83,73,84,62,84,47,90,140,95,161,95,159,96,167,104,142,106,90,116,129,120,158,138,164,138,119,139,144,145,94,78,201,155,164,78,124,79,175,79,25,80,22,80,73,81,108,81,159,82,185,82,254,82,154,83,227,83,17,84,14,84,137,85,81,87,162,87,125,89,84,91,93,91,143,91,229,93,231,93,247,93,120,94,131,94,154,94,183,94,24,95,82,96,76,97,151,98,216,98,167,99,59,101,2,102,67,102,244,102,109,103,33,104,151,104,203,105,95,108,42,109,105,109,47,110,157,110,50,117,135,118,108,120,63,122,224,124,5,125,24,125,94,125,177,125,21,128,3,128,175,128,177,128,84,129,143,129,42,130,82,131,76,136,97,136,27,139,162,140,252,140,202,144,117,145,113,146,63,120,252,146,164,149,77,150,5,152,153,153,216,154,59,157,91,82,171,82,247,83,8,84,213,88,247,98,224,111,106,140,95,143,185,158,75,81,59,82,74,84,253,86,64,122,119,145,96,157,210,158,68,115,9,111,112,129,17,117,253,95,218,96,168,154,219,114,188,143,100,107,3,152,202,78,240,86,100,87,190,88,90,90,104,96,199,97,15,102,6,102,57,104,177,104,247,109,213,117,58,125,110,130,66,155,155,78,80,79,201,83,6,85,111,93,230,93,238,93,251,103,153,108,115,116,2,120,80,138,150,147,223,136,80,87,167,94,43,99,181,80,172,80,141,81,0,103,201,84,94,88,187,89,176,91,105,95,77,98,161,99,61,104,115,107,8,110,125,112,199,145,128,114,21,120,38,120,109,121,142,101,48,125,220,131,193,136,9,143,155,150,100,82,40,87,80,103,106,127,161,140,180,81,66,87,42,150,58,88,138,105,180,128,178,84,14,93,252,87,149,120,250,157,92,79,74,82,139,84,62,100,40,102,20,103,245,103,132,122,86,123,34,125,47,147,92,104,173,155,57,123,25,83,138,81,55,82,223,91,246,98,174,100,230,100,45,103,186,107,169,133,209,150,144,118,214,155,76,99,6,147,171,155,191,118,82,102,9,78,152,80,194,83,113,92,232,96,146,100,99,101,95,104,230,113,202,115,35,117,151,123,130,126,149,134,131,139,219,140,120,145,16,153,172,101,171,102,139,107,213,78,212,78,58,79,127,79,58,82,248,83,242,83,227,85,219,86,235,88,203,89,201,89,255,89,80,91,77,92,2,94,43,94,215,95,29,96,7,99,47,101,92,91,175,101,189,101,232,101,157,103,98,107,123,107,15,108,69,115,73,121,193,121,248,124,25,125,43,125,162,128,2,129,243,129,150,137,94,138,105,138,102,138,140,138,238,138,199,140,220,140,204,150,252,152,111,107,139,78,60,79,141,79,80,81,87,91,250,91,72,97,1,99,66,102,33,107,203,110,187,108,62,114,189,116,212,117,193,120,58,121,12,128,51,128,234,129,148,132,158,143,80,108,127,158,15,95,88,139,43,157,250,122,248,142,141,91,235,150,3,78,241,83,247,87,49,89,201,90,164,91,137,96,127,110,6,111,190,117,234,140,159,91,0,133,224,123,114,80,244,103,157,130,97,92,74,133,30,126,14,130,153,81,4,92,104,99,102,141,156,101,110,113,62,121,23,125,5,128,29,139,202,142,110,144,199,134,170,144,31,80,250,82,58,92,83,103,124,112,53,114,76,145,200,145,43,147,229,130,194,91,49,95,249,96,59,78,214,83,136,91,75,98,49,103,138,107,233,114,224,115,46,122,107,129,163,141,82,145,150,153,18,81,215,83,106,84,255,91,136,99,57,106,172,125,0,151,218,86,206,83,104,84,151,91,49,92,222,93,238,79,1,97,254,98,50,109,192,121,203,121,66,125,77,126,210,127,237,129,31,130,144,132,70,136,114,137,144,139,116,142,47,143,49,144,75,145,108,145,198,150,156,145,192,78,79,79,69,81,65,83,147,95,14,98,212,103,65,108,11,110,99,115,38,126,205,145,131,146,212,83,25,89,191,91,209,109,93,121,46,126,155,124,126,88,159,113,250,81,83,136,240,143,202,79,251,92,37,102,172,119,227,122,28,130,255,153,198,81,170,95,236,101,111,105,137,107,243,109,150,110,100,111,254,118,20,125,225,93,117,144,135,145,6,152,230,81,29,82,64,98,145,102,217,102,26,110,182,94,210,125,114,127,248,102,175,133,247,133,248,138,169,82,217,83,115,89,143,94,144,95,85,96,228,146,100,150,183,80,31,81,221,82,32,83,71,83,236,83,232,84,70,85,49,85,23,86,104,89,190,89,60,90,181,91,6,92,15,92,17,92,26,92,132,94,138,94,224,94,112,95,127,98,132,98,219,98,140,99,119,99,7,102,12,102,45,102,118,102,126,103,162,104,31,106,53,106,188,108,136,109,9,110,88,110,60,113,38,113,103,113,199,117,1,119,93,120,1,121,101,121,240,121,224,122,17,123,167,124,57,125,150,128,214,131,139,132,73,133,93,136,243,136,31,138,60,138,84,138,115,138,97,140,222,140,164,145,102,146,126,147,24,148,156,150,152,151,10,78,8,78,30,78,87,78,151,81,112,82,206,87,52,88,204,88,34,91,56,94,197,96,254,100,97,103,86,103,68,109,182,114,115,117,99,122,184,132,114,139,184,145,32,147,49,86,244,87,254,152,237,98,13,105,150,107,237,113,84,126,119,128,114,130,230,137,223,152,85,135,177,143,59,92,56,79,225,79,181,79,7,85,32,90,221,91,233,91,195,95,78,97,47,99,176,101,75,102,238,104,155,105,120,109,241,109,51,117,185,117,31,119,94,121,230,121,51,125,227,129,175,130,170,133,170,137,58,138,171,142,155,143,50,144,221,145,7,151,186,78,193,78,3,82,117,88,236,88,11,92,26,117,61,92,78,129,10,138,197,143,99,150,109,151,37,123,207,138,8,152,98,145,243,86,168,83,23,144,57,84,130,87,37,94,168,99,52,108,138,112,97,119,139,124,224,127,112,136,66,144,84,145,16,147,24,147,143,150,94,116,196,154,7,93,105,93,112,101,162,103,168,141,219,150,110,99,73,103,25,105,197,131,23,152,192,150,254,136,132,111,122,100,248,91,22,78,44,112,93,117,47,102,196,81,54,82,226,82,211,89,129,95,39,96,16,98,63,101,116,101,31,102,116,102,242,104,22,104,99,107,5,110,114,114,31,117,219,118,190,124,86,128,240,88,253,136,127,137,160,138,147,138,203,138,29,144,146,145,82,151,89,151,137,101,14,122,6,129,187,150,45,94,220,96,26,98,165,101,20,102,144,103,243,119,77,122,77,124,62,126,10,129,172,140,100,141,225,141,95,142,169,120,7,82,217,98,165,99,66,100,152,98,45,138,131,122,192,123,172,138,234,150,118,125,12,130,73,135,217,78,72,81,67,83,96,83,163,91,2,92,22,92,221,93,38,98,71,98,176,100,19,104,52,104,201,108,69,109,23,109,211,103,92,111,78,113,125,113,203,101,127,122,173,123,218,125,74,126,168,127,122,129,27,130,57,130,166,133,110,138,206,140,245,141,120,144,119,144,173,146,145,146,131,149,174,155,77,82,132,85,56,111,54,113,104,81,133,121,85,126,179,129,206,124,76,86,81,88,168,92,170,99,254,102,253,102,90,105,217,114,143,117,142,117,14,121,86,121,223,121,151,124,32,125,68,125,7,134,52,138,59,150,97,144,32,159,231,80,117,82,204,83,226,83,9,80,170,85,238,88,79,89,61,114,139,91,100,92,29,83,227,96,243,96,92,99,131,99,63,99,187,99,205,100,233,101,249,102,227,93,205,105,253,105,21,111,229,113,137,78,233,117,248,118,147,122,223,124,207,125,156,125,97,128,73,131,88,131,108,132,188,132,251,133,197,136,112,141,1,144,109,144,151,147,28,151,18,154,207,80,151,88,142,97,211,129,53,133,8,141,32,144,195,79,116,80,71,82,115,83,111,96,73,99,95,103,44,110,179,141,31,144,215,79,94,92,202,140,207,101,154,125,82,83,150,136,118,81,195,99,88,91,107,91,10,92,13,100,81,103,92,144,214,78,26,89,42,89,112,108,81,138,62,85,21,88,165,89,240,96,83,98,193,103,53,130,85,105,64,150,196,153,40,154,83,79,6,88,254,91,16,128,177,92,47,94,133,95,32,96,75,97,52,98,255,102,240,108,222,110,206,128,127,129,212,130,139,136,184,140,0,144,46,144,138,150,219,158,219,155,227,78,240,83,39,89,44,123,141,145,76,152,249,157,221,110,39,112,83,83,68,85,133,91,88,98,158,98,211,98,162,108,239,111,34,116,23,138,56,148,193,111,254,138,56,131,231,81,248,134,234,83,233,83,70,79,84,144,176,143,106,89,49,129,253,93,234,122,191,143,218,104,55,140,248,114,72,156,61,106,176,138,57,78,88,83,6,86,102,87,197,98,162,99,230,101,78,107,225,109,91,110,173,112,237,119,239,122,170,123,187,125,61,128,198,128,203,134,149,138,91,147,227,86,199,88,62,95,173,101,150,102,128,106,181,107,55,117,199,138,36,80,229,119,48,87,27,95,101,96,122,102,96,108,244,117,26,122,110,127,244,129,24,135,69,144,179,153,201,123,92,117,249,122,81,123,196,132,16,144,233,121,146,122,54,131,225,90,64,119,45,78,242,78,153,91,224,95,189,98,60,102,241,103,232,108,107,134,119,136,59,138,78,145,243,146,208,153,23,106,38,112,42,115,231,130,87,132,175,140,1,78,70,81,203,81,139,85,245,91,22,94,51,94,129,94,20,95,53,95,107,95,180,95,242,97,17,99,162,102,29,103,110,111,82,114,58,117,58,119,116,128,57,129,120,129,118,135,191,138,220,138,133,141,243,141,154,146,119,149,2,152,229,156,197,82,87,99,244,118,21,103,136,108,205,115,195,140,174,147,115,150,37,109,156,88,14,105,204,105,253,143,154,147,219,117,26,144,90,88,2,104,180,99,251,105,67,79,44,111,216,103,187,143,38,133,180,125,84,147,63,105,112,111,106,87,247,88,44,91,44,125,42,114,10,84,227,145,180,157,173,78,78,79,92,80,117,80,67,82,158,140,72,84,36,88,154,91,29,94,149,94,173,94,247,94,31,95,140,96,181,98,58,99,208,99,175,104,64,108,135,120,142,121,11,122,224,125,71,130,2,138,230,138,68,142,19,144,184,144,45,145,216,145,14,159,229,108,88,100,226,100,117,101,244,110,132,118,27,123,105,144,209,147,186,110,242,84,185,95,164,100,77,143,237,143,68,146,120,81,107,88,41,89,85,92,151,94,251,109,143,126,28,117,188,140,226,142,91,152,185,112,29,79,191,107,177,111,48,117,251,150,78,81,16,84,53,88,87,88,172,89,96,92,146,95,151,101,92,103,33,110,123,118,223,131,237,140,20,144,253,144,77,147,37,120,58,120,170,82,166,94,31,87,116,89,18,96,18,80,90,81,172,81,205,81,0,82,16,85,84,88,88,88,87,89,149,91,246,92,139,93,188,96,149,98,45,100,113,103,67,104,188,104,223,104,215,118,216,109,111,110,155,109,111,112,200,113,83,95,216,117,119,121,73,123,84,123,82,123,214,124,113,125,48,82,99,132,105,133,228,133,14,138,4,139,70,140,15,142,3,144,15,144,25,148,118,150,45,152,48,154,216,149,205,80,213,82,12,84,2,88,14,92,167,97,158,100,30,109,179,119,229,122,244,128,4,132,83,144,133,146,224,92,7,157,63,83,151,95,179,95,156,109,121,114,99,119,191,121,228,123,210,107,236,114,173,138,3,104,97,106,248,81,129,122,52,105,74,92,246,156,235,130,197,91,73,145,30,112,120,86,111,92,199,96,102,101,140,108,90,140,65,144,19,152,81,84,199,102,13,146,72,89,163,144,133,81,77,78,234,81,153,133,14,139,88,112,122,99,75,147,98,105,180,153,4,126,119,117,87,83,96,105,223,142,227,150,93,108,140,78,60,92,16,95,233,143,2,83,209,140,137,128,121,134,255,94,229,101,115,78,101,81,130,89,63,92,238,151,251,78,138,89,205,95,141,138,225,111,176,121,98,121,231,91,113,132,43,115,177,113,116,94,245,95,123,99,154,100,195,113,152,124,67,78,252,94,75,78,220,87,162,86,169,96,195,111,13,125,253,128,51,129,191,129,178,143,151,137,164,134,244,93,138,98,173,100,135,137,119,103,226,108,62,109,54,116,52,120,70,90,117,127,173,130,172,153,243,79,195,94,221,98,146,99,87,101,111,103,195,118,76,114,204,128,186,128,41,143,77,145,13,80,249,87,146,90,133,104,115,105,100,113,253,114,183,140,242,88,224,140,106,150,25,144,127,135,228,121,231,119,41,132,47,79,101,82,90,83,205,98,207,103,202,108,125,118,148,123,149,124,54,130,132,133,235,143,221,102,32,111,6,114,27,126,171,131,193,153,166,158,253,81,177,123,114,120,184,123,135,128,72,123,232,106,97,94,140,128,81,117,96,117,107,81,98,146,140,110,122,118,151,145,234,154,16,79,112,127,156,98,79,123,165,149,233,156,122,86,89,88,228,134,188,150,52,79,36,82,74,83,205,83,219,83,6,94,44,100,145,101,127,103,62,108,78,108,72,114,175,114,237,115,84,117,65,126,44,130,233,133,169,140,196,123,198,145,105,113,18,152,239,152,61,99,105,102,106,117,228,118,208,120,67,133,238,134,42,83,81,83,38,84,131,89,135,94,124,95,178,96,73,98,121,98,171,98,144,101,212,107,204,108,178,117,174,118,145,120,216,121,203,125,119,127,165,128,171,136,185,138,187,140,127,144,94,151,219,152,11,106,56,124,153,80,62,92,174,95,135,103,216,107,53,116,9,119,142,127,59,159,202,103,23,122,57,83,139,117,237,154,102,95,157,129,241,131,152,128,60,95,197,95,98,117,70,123,60,144,103,104,235,89,155,90,16,125,126,118,44,139,245,79,106,95,25,106,55,108,2,111,226,116,104,121,104,136,85,138,121,140,223,94,207,99,197,117,210,121,215,130,40,147,242,146,156,132,237,134,45,156,193,84,108,95,140,101,92,109,21,112,167,140,211,140,59,152,79,101,246,116,13,78,216,78,224,87,43,89,102,90,204,91,168,81,3,94,156,94,22,96,118,98,119,101,167,101,110,102,110,109,54,114,38,123,80,129,154,129,153,130,92,139,160,140,230,140,116,141,28,150,68,150,174,79,171,100,102,107,30,130,97,132,106,133,232,144,1,92,83,105,168,152,122,132,87,133,15,79,111,82,169,95,69,94,13,103,143,121,121,129,7,137,134,137,245,109,23,95,85,98,184,108,207,78,105,114,146,155,6,82,59,84,116,86,179,88,164,97,110,98,26,113,110,89,137,124,222,124,27,125,240,150,135,101,94,128,25,78,117,79,117,81,64,88,99,94,115,94,10,95,196,103,38,78,61,133,137,149,91,150,115,124,1,152,251,80,193,88,86,118,167,120,37,82,165,119,17,133,134,123,79,80,9,89,71,114,199,123,232,125,186,143,212,143,77,144,191,79,201,82,41,90,1,95,173,151,221,79,23,130,234,146,3,87,85,99,105,107,43,117,220,136,20,143,66,122,223,82,147,88,85,97,10,98,174,102,205,107,63,124,233,131,35,80,248,79,5,83,70,84,49,88,73,89,157,91,240,92,239,92,41,93,150,94,177,98,103,99,62,101,185,101,11,103,213,108,225,108,249,112,50,120,43,126,222,128,179,130,12,132,236,132,2,135,18,137,42,138,74,140,166,144,210,146,253,152,243,156,108,157,79,78,161,78,141,80,86,82,74,87,168,89,61,94,216,95,217,95,63,98,180,102,27,103,208,103,210,104,146,81,33,125,170,128,168,129,0,139,140,140,191,140,126,146,50,150,32,84,44,152,23,83,213,80,92,83,168,88,178,100,52,103,103,114,102,119,70,122,230,145,195,82,161,108,134,107,0,88,76,94,84,89,44,103,251,127,225,81,198,118,105,100,232,120,84,155,187,158,203,87,185,89,39,102,154,103,206,107,233,84,217,105,85,94,156,129,149,103,170,155,254,103,82,156,93,104,166,78,227,79,200,83,185,98,43,103,171,108,196,143,173,79,109,126,191,158,7,78,98,97,128,110,43,111,19,133,115,84,42,103,69,155,243,93,149,123,172,92,198,91,28,135,74,110,209,132,20,122,8,129,153,89,141,124,17,108,32,119,217,82,34,89,33,113,95,114,219,119,39,151,97,157,11,105,127,90,24,90,165,81,13,84,125,84,14,102,223,118,247,143,152,146,244,156,234,89,93,114,197,110,77,81,201,104,191,125,236,125,98,151,186,158,120,100,33,106,2,131,132,89,95,91,219,107,27,115,242,118,178,125,23,128,153,132,50,81,40,103,217,158,238,118,98,103,255,82,5,153,36,92,59,98,126,124,176,140,79,85,182,96,11,125,128,149,1,83,95,78,182,81,28,89,58,114,54,128,206,145,37,95,226,119,132,83,121,95,4,125,172,133,51,138,141,142,86,151,243,103,174,133,83,148,9,97,8,97,185,108,82,118,237,138,56,143,47,85,81,79,42,81,199,82,203,83,165,91,125,94,160,96,130,97,214,99,9,103,218,103,103,110,140,109,54,115,55,115,49,117,80,121,213,136,152,138,74,144,145,144,245,144,196,150,141,135,21,89,136,78,89,79,14,78,137,138,63,143,16,152,173,80,124,94,150,89,185,91,184,94,218,99,250,99,193,100,220,102,74,105,216,105,11,109,182,110,148,113,40,117,175,122,138,127,0,128,73,132,201,132,129,137,33,139,10,142,101,144,125,150,10,153,126,97,145,98,50,107,131,108,116,109,204,127,252,127,192,109,133,127,186,135,248,136,101,103,177,131,60,152,247,150,27,109,97,125,61,132,106,145,113,78,117,83,80,93,4,107,235,111,205,133,45,134,167,137,41,82,15,84,101,92,78,103,168,104,6,116,131,116,226,117,207,136,225,136,204,145,226,150,120,150,139,95,135,115,203,122,78,132,160,99,101,117,137,82,65,109,156,110,9,116,89,117,107,120,146,124,134,150,220,122,141,159,182,79,110,97,197,101,92,134,134,78,174,78,218,80,33,78,204,81,238,91,153,101,129,104,188,109,31,115,66,118,173,119,28,122,231,124,111,130,210,138,124,144,207,145,117,150,24,152,155,82,209,125,43,80,152,83,151,103,203,109,208,113,51,116,232,129,42,143,163,150,87,156,159,158,96,116,65,88,153,109,47,125,94,152,228,78,54,79,139,79,183,81,177,82,186,93,28,96,178,115,60,121,211,130,52,146,183,150,246,150,10,151,151,158,98,159,166,102,116,107,23,82,163,82,200,112,194,136,201,94,75,96,144,97,35,111,73,113,62,124,244,125,111,128,238,132,35,144,44,147,66,84,111,155,211,106,137,112,194,140,239,141,50,151,180,82,65,90,202,94,4,95,23,103,124,105,148,105,106,109,15,111,98,114,252,114,237,123,1,128,126,128,75,135,206,144,109,81,147,158,132,121,139,128,50,147,214,138,45,80,140,84,113,138,106,107,196,140,7,129,209,96,160,103,242,157,153,78,152,78,16,156,107,138,193,133,104,133,0,105,126,110,151,120,85,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,95,16,78,21,78,42,78,49,78,54,78,60,78,63,78,66,78,86,78,88,78,130,78,133,78,107,140,138,78,18,130,13,95,142,78,158,78,159,78,160,78,162,78,176,78,179,78,182,78,206,78,205,78,196,78,198,78,194,78,215,78,222,78,237,78,223,78,247,78,9,79,90,79,48,79,91,79,93,79,87,79,71,79,118,79,136,79,143,79,152,79,123,79,105,79,112,79,145,79,111,79,134,79,150,79,24,81,212,79,223,79,206,79,216,79,219,79,209,79,218,79,208,79,228,79,229,79,26,80,40,80,20,80,42,80,37,80,5,80,28,79,246,79,33,80,41,80,44,80,254,79,239,79,17,80,6,80,67,80,71,80,3,103,85,80,80,80,72,80,90,80,86,80,108,80,120,80,128,80,154,80,133,80,180,80,178,80,201,80,202,80,179,80,194,80,214,80,222,80,229,80,237,80,227,80,238,80,249,80,245,80,9,81,1,81,2,81,22,81,21,81,20,81,26,81,33,81,58,81,55,81,60,81,59,81,63,81,64,81,82,81,76,81,84,81,98,81,248,122,105,81,106,81,110,81,128,81,130,81,216,86,140,81,137,81,143,81,145,81,147,81,149,81,150,81,164,81,166,81,162,81,169,81,170,81,171,81,179,81,177,81,178,81,176,81,181,81,189,81,197,81,201,81,219,81,224,81,85,134,233,81,237,81,240,81,245,81,254,81,4,82,11,82,20,82,14,82,39,82,42,82,46,82,51,82,57,82,79,82,68,82,75,82,76,82,94,82,84,82,106,82,116,82,105,82,115,82,127,82,125,82,141,82,148,82,146,82,113,82,136,82,145,82,168,143,167,143,172,82,173,82,188,82,181,82,193,82,205,82,215,82,222,82,227,82,230,82,237,152,224,82,243,82,245,82,248,82,249,82,6,83,8,83,56,117,13,83,16,83,15,83,21,83,26,83,35,83,47,83,49,83,51,83,56,83,64,83,70,83,69,83,23,78,73,83,77,83,214,81,94,83,105,83,110,83,24,89,123,83,119,83,130,83,150,83,160,83,166,83,165,83,174,83,176,83,182,83,195,83,18,124,217,150,223,83,252,102,238,113,238,83,232,83,237,83,250,83,1,84,61,84,64,84,44,84,45,84,60,84,46,84,54,84,41,84,29,84,78,84,143,84,117,84,142,84,95,84,113,84,119,84,112,84,146,84,123,84,128,84,118,84,132,84,144,84,134,84,199,84,162,84,184,84,165,84,172,84,196,84,200,84,168,84,171,84,194,84,164,84,190,84,188,84,216,84,229,84,230,84,15,85,20,85,253,84,238,84,237,84,250,84,226,84,57,85,64,85,99,85,76,85,46,85,92,85,69,85,86,85,87,85,56,85,51,85,93,85,153,85,128,85,175,84,138,85,159,85,123,85,126,85,152,85,158,85,174,85,124,85,131,85,169,85,135,85,168,85,218,85,197,85,223,85,196,85,220,85,228,85,212,85,20,86,247,85,22,86,254,85,253,85,27,86,249,85,78,86,80,86,223,113,52,86,54,86,50,86,56,86,107,86,100,86,47,86,108,86,106,86,134,86,128,86,138,86,160,86,148,86,143,86,165,86,174,86,182,86,180,86,194,86,188,86,193,86,195,86,192,86,200,86,206,86,209,86,211,86,215,86,238,86,249,86,0,87,255,86,4,87,9,87,8,87,11,87,13,87,19,87,24,87,22,87,199,85,28,87,38,87,55,87,56,87,78,87,59,87,64,87,79,87,105,87,192,87,136,87,97,87,127,87,137,87,147,87,160,87,179,87,164,87,170,87,176,87,195,87,198,87,212,87,210,87,211,87,10,88,214,87,227,87,11,88,25,88,29,88,114,88,33,88,98,88,75,88,112,88,192,107,82,88,61,88,121,88,133,88,185,88,159,88,171,88,186,88,222,88,187,88,184,88,174,88,197,88,211,88,209,88,215,88,217,88,216,88,229,88,220,88,228,88,223,88,239,88,250,88,249,88,251,88,252,88,253,88,2,89,10,89,16,89,27,89,166,104,37,89,44,89,45,89,50,89,56,89,62,89,210,122,85,89,80,89,78,89,90,89,88,89,98,89,96,89,103,89,108,89,105,89,120,89,129,89,157,89,94,79,171,79,163,89,178,89,198,89,232,89,220,89,141,89,217,89,218,89,37,90,31,90,17,90,28,90,9,90,26,90,64,90,108,90,73,90,53,90,54,90,98,90,106,90,154,90,188,90,190,90,203,90,194,90,189,90,227,90,215,90,230,90,233,90,214,90,250,90,251,90,12,91,11,91,22,91,50,91,208,90,42,91,54,91,62,91,67,91,69,91,64,91,81,91,85,91,90,91,91,91,101,91,105,91,112,91,115,91,117,91,120,91,136,101,122,91,128,91,131,91,166,91,184,91,195,91,199,91,201,91,212,91,208,91,228,91,230,91,226,91,222,91,229,91,235,91,240,91,246,91,243,91,5,92,7,92,8,92,13,92,19,92,32,92,34,92,40,92,56,92,57,92,65,92,70,92,78,92,83,92,80,92,79,92,113,91,108,92,110,92,98,78,118,92,121,92,140,92,145,92,148,92,155,89,171,92,187,92,182,92,188,92,183,92,197,92,190,92,199,92,217,92,233,92,253,92,250,92,237,92,140,93,234,92,11,93,21,93,23,93,92,93,31,93,27,93,17,93,20,93,34,93,26,93,25,93,24,93,76,93,82,93,78,93,75,93,108,93,115,93,118,93,135,93,132,93,130,93,162,93,157,93,172,93,174,93,189,93,144,93,183,93,188,93,201,93,205,93,211,93,210,93,214,93,219,93,235,93,242,93,245,93,11,94,26,94,25,94,17,94,27,94,54,94,55,94,68,94,67,94,64,94,78,94,87,94,84,94,95,94,98,94,100,94,71,94,117,94,118,94,122,94,188,158,127,94,160,94,193,94,194,94,200,94,208,94,207,94,214,94,227,94,221,94,218,94,219,94,226,94,225,94,232,94,233,94,236,94,241,94,243,94,240,94,244,94,248,94,254,94,3,95,9,95,93,95,92,95,11,95,17,95,22,95,41,95,45,95,56,95,65,95,72,95,76,95,78,95,47,95,81,95,86,95,87,95,89,95,97,95,109,95,115,95,119,95,131,95,130,95,127,95,138,95,136,95,145,95,135,95,158,95,153,95,152,95,160,95,168,95,173,95,188,95,214,95,251,95,228,95,248,95,241,95,221,95,179,96,255,95,33,96,96,96,25,96,16,96,41,96,14,96,49,96,27,96,21,96,43,96,38,96,15,96,58,96,90,96,65,96,106,96,119,96,95,96,74,96,70,96,77,96,99,96,67,96,100,96,66,96,108,96,107,96,89,96,129,96,141,96,231,96,131,96,154,96,132,96,155,96,150,96,151,96,146,96,167,96,139,96,225,96,184,96,224,96,211,96,180,96,240,95,189,96,198,96,181,96,216,96,77,97,21,97,6,97,246,96,247,96,0,97,244,96,250,96,3,97,33,97,251,96,241,96,13,97,14,97,71,97,62,97,40,97,39,97,74,97,63,97,60,97,44,97,52,97,61,97,66,97,68,97,115,97,119,97,88,97,89,97,90,97,107,97,116,97,111,97,101,97,113,97,95,97,93,97,83,97,117,97,153,97,150,97,135,97,172,97,148,97,154,97,138,97,145,97,171,97,174,97,204,97,202,97,201,97,247,97,200,97,195,97,198,97,186,97,203,97,121,127,205,97,230,97,227,97,246,97,250,97,244,97,255,97,253,97,252,97,254,97,0,98,8,98,9,98,13,98,12,98,20,98,27,98,30,98,33,98,42,98,46,98,48,98,50,98,51,98,65,98,78,98,94,98,99,98,91,98,96,98,104,98,124,98,130,98,137,98,126,98,146,98,147,98,150,98,212,98,131,98,148,98,215,98,209,98,187,98,207,98,255,98,198,98,212,100,200,98,220,98,204,98,202,98,194,98,199,98,155,98,201,98,12,99,238,98,241,98,39,99,2,99,8,99,239,98,245,98,80,99,62,99,77,99,28,100,79,99,150,99,142,99,128,99,171,99,118,99,163,99,143,99,137,99,159,99,181,99,107,99,105,99,190,99,233,99,192,99,198,99,227,99,201,99,210,99,246,99,196,99,22,100,52,100,6,100,19,100,38,100,54,100,29,101,23,100,40,100,15,100,103,100,111,100,118,100,78,100,42,101,149,100,147,100,165,100,169,100,136,100,188,100,218,100,210,100,197,100,199,100,187,100,216,100,194,100,241,100,231,100,9,130,224,100,225,100,172,98,227,100,239,100,44,101,246,100,244,100,242,100,250,100,0,101,253,100,24,101,28,101,5,101,36,101,35,101,43,101,52,101,53,101,55,101,54,101,56,101,75,117,72,101,86,101,85,101,77,101,88,101,94,101,93,101,114,101,120,101,130,101,131,101,138,139,155,101,159,101,171,101,183,101,195,101,198,101,193,101,196,101,204,101,210,101,219,101,217,101,224,101,225,101,241,101,114,103,10,102,3,102,251,101,115,103,53,102,54,102,52,102,28,102,79,102,68,102,73,102,65,102,94,102,93,102,100,102,103,102,104,102,95,102,98,102,112,102,131,102,136,102,142,102,137,102,132,102,152,102,157,102,193,102,185,102,201,102,190,102,188,102,196,102,184,102,214,102,218,102,224,102,63,102,230,102,233,102,240,102,245,102,247,102,15,103,22,103,30,103,38,103,39,103,56,151,46,103,63,103,54,103,65,103,56,103,55,103,70,103,94,103,96,103,89,103,99,103,100,103,137,103,112,103,169,103,124,103,106,103,140,103,139,103,166,103,161,103,133,103,183,103,239,103,180,103,236,103,179,103,233,103,184,103,228,103,222,103,221,103,226,103,238,103,185,103,206,103,198,103,231,103,156,106,30,104,70,104,41,104,64,104,77,104,50,104,78,104,179,104,43,104,89,104,99,104,119,104,127,104,159,104,143,104,173,104,148,104,157,104,155,104,131,104,174,106,185,104,116,104,181,104,160,104,186,104,15,105,141,104,126,104,1,105,202,104,8,105,216,104,34,105,38,105,225,104,12,105,205,104,212,104,231,104,213,104,54,105,18,105,4,105,215,104,227,104,37,105,249,104,224,104,239,104,40,105,42,105,26,105,35,105,33,105,198,104,121,105,119,105,92,105,120,105,107,105,84,105,126,105,110,105,57,105,116,105,61,105,89,105,48,105,97,105,94,105,93,105,129,105,106,105,178,105,174,105,208,105,191,105,193,105,211,105,190,105,206,105,232,91,202,105,221,105,187,105,195,105,167,105,46,106,145,105,160,105,156,105,149,105,180,105,222,105,232,105,2,106,27,106,255,105,10,107,249,105,242,105,231,105,5,106,177,105,30,106,237,105,20,106,235,105,10,106,18,106,193,106,35,106,19,106,68,106,12,106,114,106,54,106,120,106,71,106,98,106,89,106,102,106,72,106,56,106,34,106,144,106,141,106,160,106,132,106,162,106,163,106,151,106,23,134,187,106,195,106,194,106,184,106,179,106,172,106,222,106,209,106,223,106,170,106,218,106,234,106,251,106,5,107,22,134,250,106,18,107,22,107,49,155,31,107,56,107,55,107,220,118,57,107,238,152,71,107,67,107,73,107,80,107,89,107,84,107,91,107,95,107,97,107,120,107,121,107,127,107,128,107,132,107,131,107,141,107,152,107,149,107,158,107,164,107,170,107,171,107,175,107,178,107,177,107,179,107,183,107,188,107,198,107,203,107,211,107,223,107,236,107,235,107,243,107,239,107,190,158,8,108,19,108,20,108,27,108,36,108,35,108,94,108,85,108,98,108,106,108,130,108,141,108,154,108,129,108,155,108,126,108,104,108,115,108,146,108,144,108,196,108,241,108,211,108,189,108,215,108,197,108,221,108,174,108,177,108,190,108,186,108,219,108,239,108,217,108,234,108,31,109,77,136,54,109,43,109,61,109,56,109,25,109,53,109,51,109,18,109,12,109,99,109,147,109,100,109,90,109,121,109,89,109,142,109,149,109,228,111,133,109,249,109,21,110,10,110,181,109,199,109,230,109,184,109,198,109,236,109,222,109,204,109,232,109,210,109,197,109,250,109,217,109,228,109,213,109,234,109,238,109,45,110,110,110,46,110,25,110,114,110,95,110,62,110,35,110,107,110,43,110,118,110,77,110,31,110,67,110,58,110,78,110,36,110,255,110,29,110,56,110,130,110,170,110,152,110,201,110,183,110,211,110,189,110,175,110,196,110,178,110,212,110,213,110,143,110,165,110,194,110,159,110,65,111,17,111,76,112,236,110,248,110,254,110,63,111,242,110,49,111,239,110,50,111,204,110,62,111,19,111,247,110,134,111,122,111,120,111,129,111,128,111,111,111,91,111,243,111,109,111,130,111,124,111,88,111,142,111,145,111,194,111,102,111,179,111,163,111,161,111,164,111,185,111,198,111,170,111,223,111,213,111,236,111,212,111,216,111,241,111,238,111,219,111,9,112,11,112,250,111,17,112,1,112,15,112,254,111,27,112,26,112,116,111,29,112,24,112,31,112,48,112,62,112,50,112,81,112,99,112,153,112,146,112,175,112,241,112,172,112,184,112,179,112,174,112,223,112,203,112,221,112,217,112,9,113,253,112,28,113,25,113,101,113,85,113,136,113,102,113,98,113,76,113,86,113,108,113,143,113,251,113,132,113,149,113,168,113,172,113,215,113,185,113,190,113,210,113,201,113,212,113,206,113,224,113,236,113,231,113,245,113,252,113,249,113,255,113,13,114,16,114,27,114,40,114,45,114,44,114,48,114,50,114,59,114,60,114,63,114,64,114,70,114,75,114,88,114,116,114,126,114,130,114,129,114,135,114,146,114,150,114,162,114,167,114,185,114,178,114,195,114,198,114,196,114,206,114,210,114,226,114,224,114,225,114,249,114,247,114,15,80,23,115,10,115,28,115,22,115,29,115,52,115,47,115,41,115,37,115,62,115,78,115,79,115,216,158,87,115,106,115,104,115,112,115,120,115,117,115,123,115,122,115,200,115,179,115,206,115,187,115,192,115,229,115,238,115,222,115,162,116,5,116,111,116,37,116,248,115,50,116,58,116,85,116,63,116,95,116,89,116,65,116,92,116,105,116,112,116,99,116,106,116,118,116,126,116,139,116,158,116,167,116,202,116,207,116,212,116,241,115,224,116,227,116,231,116,233,116,238,116,242,116,240,116,241,116,248,116,247,116,4,117,3,117,5,117,12,117,14,117,13,117,21,117,19,117,30,117,38,117,44,117,60,117,68,117,77,117,74,117,73,117,91,117,70,117,90,117,105,117,100,117,103,117,107,117,109,117,120,117,118,117,134,117,135,117,116,117,138,117,137,117,130,117,148,117,154,117,157,117,165,117,163,117,194,117,179,117,195,117,181,117,189,117,184,117,188,117,177,117,205,117,202,117,210,117,217,117,227,117,222,117,254,117,255,117,252,117,1,118,240,117,250,117,242,117,243,117,11,118,13,118,9,118,31,118,39,118,32,118,33,118,34,118,36,118,52,118,48,118,59,118,71,118,72,118,70,118,92,118,88,118,97,118,98,118,104,118,105,118,106,118,103,118,108,118,112,118,114,118,118,118,120,118,124,118,128,118,131,118,136,118,139,118,142,118,150,118,147,118,153,118,154,118,176,118,180,118,184,118,185,118,186,118,194,118,205,118,214,118,210,118,222,118,225,118,229,118,231,118,234,118,47,134,251,118,8,119,7,119,4,119,41,119,36,119,30,119,37,119,38,119,27,119,55,119,56,119,71,119,90,119,104,119,107,119,91,119,101,119,127,119,126,119,121,119,142,119,139,119,145,119,160,119,158,119,176,119,182,119,185,119,191,119,188,119,189,119,187,119,199,119,205,119,215,119,218,119,220,119,227,119,238,119,252,119,12,120,18,120,38,121,32,120,42,121,69,120,142,120,116,120,134,120,124,120,154,120,140,120,163,120,181,120,170,120,175,120,209,120,198,120,203,120,212,120,190,120,188,120,197,120,202,120,236,120,231,120,218,120,253,120,244,120,7,121,18,121,17,121,25,121,44,121,43,121,64,121,96,121,87,121,95,121,90,121,85,121,83,121,122,121,127,121,138,121,157,121,167,121,75,159,170,121,174,121,179,121,185,121,186,121,201,121,213,121,231,121,236,121,225,121,227,121,8,122,13,122,24,122,25,122,32,122,31,122,128,121,49,122,59,122,62,122,55,122,67,122,87,122,73,122,97,122,98,122,105,122,157,159,112,122,121,122,125,122,136,122,151,122,149,122,152,122,150,122,169,122,200,122,176,122,182,122,197,122,196,122,191,122,131,144,199,122,202,122,205,122,207,122,213,122,211,122,217,122,218,122,221,122,225,122,226,122,230,122,237,122,240,122,2,123,15,123,10,123,6,123,51,123,24,123,25,123,30,123,53,123,40,123,54,123,80,123,122,123,4,123,77,123,11,123,76,123,69,123,117,123,101,123,116,123,103,123,112,123,113,123,108,123,110,123,157,123,152,123,159,123,141,123,156,123,154,123,139,123,146,123,143,123,93,123,153,123,203,123,193,123,204,123,207,123,180,123,198,123,221,123,233,123,17,124,20,124,230,123,229,123,96,124,0,124,7,124,19,124,243,123,247,123,23,124,13,124,246,123,35,124,39,124,42,124,31,124,55,124,43,124,61,124,76,124,67,124,84,124,79,124,64,124,80,124,88,124,95,124,100,124,86,124,101,124,108,124,117,124,131,124,144,124,164,124,173,124,162,124,171,124,161,124,168,124,179,124,178,124,177,124,174,124,185,124,189,124,192,124,197,124,194,124,216,124,210,124,220,124,226,124,59,155,239,124,242,124,244,124,246,124,250,124,6,125,2,125,28,125,21,125,10,125,69,125,75,125,46,125,50,125,63,125,53,125,70,125,115,125,86,125,78,125,114,125,104,125,110,125,79,125,99,125,147,125,137,125,91,125,143,125,125,125,155,125,186,125,174,125,163,125,181,125,199,125,189,125,171,125,61,126,162,125,175,125,220,125,184,125,159,125,176,125,216,125,221,125,228,125,222,125,251,125,242,125,225,125,5,126,10,126,35,126,33,126,18,126,49,126,31,126,9,126,11,126,34,126,70,126,102,126,59,126,53,126,57,126,67,126,55,126,50,126,58,126,103,126,93,126,86,126,94,126,89,126,90,126,121,126,106,126,105,126,124,126,123,126,131,126,213,125,125,126,174,143,127,126,136,126,137,126,140,126,146,126,144,126,147,126,148,126,150,126,142,126,155,126,156,126,56,127,58,127,69,127,76,127,77,127,78,127,80,127,81,127,85,127,84,127,88,127,95,127,96,127,104,127,105,127,103,127,120,127,130,127,134,127,131,127,136,127,135,127,140,127,148,127,158,127,157,127,154,127,163,127,175,127,178,127,185,127,174,127,182,127,184,127,113,139,197,127,198,127,202,127,213,127,212,127,225,127,230,127,233,127,243,127,249,127,220,152], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+28146);
/* memory initializer */ allocate([6,128,4,128,11,128,18,128,24,128,25,128,28,128,33,128,40,128,63,128,59,128,74,128,70,128,82,128,88,128,90,128,95,128,98,128,104,128,115,128,114,128,112,128,118,128,121,128,125,128,127,128,132,128,134,128,133,128,155,128,147,128,154,128,173,128,144,81,172,128,219,128,229,128,217,128,221,128,196,128,218,128,214,128,9,129,239,128,241,128,27,129,41,129,35,129,47,129,75,129,139,150,70,129,62,129,83,129,81,129,252,128,113,129,110,129,101,129,102,129,116,129,131,129,136,129,138,129,128,129,130,129,160,129,149,129,164,129,163,129,95,129,147,129,169,129,176,129,181,129,190,129,184,129,189,129,192,129,194,129,186,129,201,129,205,129,209,129,217,129,216,129,200,129,218,129,223,129,224,129,231,129,250,129,251,129,254,129,1,130,2,130,5,130,7,130,10,130,13,130,16,130,22,130,41,130,43,130,56,130,51,130,64,130,89,130,88,130,93,130,90,130,95,130,100,130,98,130,104,130,106,130,107,130,46,130,113,130,119,130,120,130,126,130,141,130,146,130,171,130,159,130,187,130,172,130,225,130,227,130,223,130,210,130,244,130,243,130,250,130,147,131,3,131,251,130,249,130,222,130,6,131,220,130,9,131,217,130,53,131,52,131,22,131,50,131,49,131,64,131,57,131,80,131,69,131,47,131,43,131,23,131,24,131,133,131,154,131,170,131,159,131,162,131,150,131,35,131,142,131,135,131,138,131,124,131,181,131,115,131,117,131,160,131,137,131,168,131,244,131,19,132,235,131,206,131,253,131,3,132,216,131,11,132,193,131,247,131,7,132,224,131,242,131,13,132,34,132,32,132,189,131,56,132,6,133,251,131,109,132,42,132,60,132,90,133,132,132,119,132,107,132,173,132,110,132,130,132,105,132,70,132,44,132,111,132,121,132,53,132,202,132,98,132,185,132,191,132,159,132,217,132,205,132,187,132,218,132,208,132,193,132,198,132,214,132,161,132,33,133,255,132,244,132,23,133,24,133,44,133,31,133,21,133,20,133,252,132,64,133,99,133,88,133,72,133,65,133,2,134,75,133,85,133,128,133,164,133,136,133,145,133,138,133,168,133,109,133,148,133,155,133,234,133,135,133,156,133,119,133,126,133,144,133,201,133,186,133,207,133,185,133,208,133,213,133,221,133,229,133,220,133,249,133,10,134,19,134,11,134,254,133,250,133,6,134,34,134,26,134,48,134,63,134,77,134,85,78,84,134,95,134,103,134,113,134,147,134,163,134,169,134,170,134,139,134,140,134,182,134,175,134,196,134,198,134,176,134,201,134,35,136,171,134,212,134,222,134,233,134,236,134,223,134,219,134,239,134,18,135,6,135,8,135,0,135,3,135,251,134,17,135,9,135,13,135,249,134,10,135,52,135,63,135,55,135,59,135,37,135,41,135,26,135,96,135,95,135,120,135,76,135,78,135,116,135,87,135,104,135,110,135,89,135,83,135,99,135,106,135,5,136,162,135,159,135,130,135,175,135,203,135,189,135,192,135,208,135,214,150,171,135,196,135,179,135,199,135,198,135,187,135,239,135,242,135,224,135,15,136,13,136,254,135,246,135,247,135,14,136,210,135,17,136,22,136,21,136,34,136,33,136,49,136,54,136,57,136,39,136,59,136,68,136,66,136,82,136,89,136,94,136,98,136,107,136,129,136,126,136,158,136,117,136,125,136,181,136,114,136,130,136,151,136,146,136,174,136,153,136,162,136,141,136,164,136,176,136,191,136,177,136,195,136,196,136,212,136,216,136,217,136,221,136,249,136,2,137,252,136,244,136,232,136,242,136,4,137,12,137,10,137,19,137,67,137,30,137,37,137,42,137,43,137,65,137,68,137,59,137,54,137,56,137,76,137,29,137,96,137,94,137,102,137,100,137,109,137,106,137,111,137,116,137,119,137,126,137,131,137,136,137,138,137,147,137,152,137,161,137,169,137,166,137,172,137,175,137,178,137,186,137,189,137,191,137,192,137,218,137,220,137,221,137,231,137,244,137,248,137,3,138,22,138,16,138,12,138,27,138,29,138,37,138,54,138,65,138,91,138,82,138,70,138,72,138,124,138,109,138,108,138,98,138,133,138,130,138,132,138,168,138,161,138,145,138,165,138,166,138,154,138,163,138,196,138,205,138,194,138,218,138,235,138,243,138,231,138,228,138,241,138,20,139,224,138,226,138,247,138,222,138,219,138,12,139,7,139,26,139,225,138,22,139,16,139,23,139,32,139,51,139,171,151,38,139,43,139,62,139,40,139,65,139,76,139,79,139,78,139,73,139,86,139,91,139,90,139,107,139,95,139,108,139,111,139,116,139,125,139,128,139,140,139,142,139,146,139,147,139,150,139,153,139,154,139,58,140,65,140,63,140,72,140,76,140,78,140,80,140,85,140,98,140,108,140,120,140,122,140,130,140,137,140,133,140,138,140,141,140,142,140,148,140,124,140,152,140,29,98,173,140,170,140,189,140,178,140,179,140,174,140,182,140,200,140,193,140,228,140,227,140,218,140,253,140,250,140,251,140,4,141,5,141,10,141,7,141,15,141,13,141,16,141,78,159,19,141,205,140,20,141,22,141,103,141,109,141,113,141,115,141,129,141,153,141,194,141,190,141,186,141,207,141,218,141,214,141,204,141,219,141,203,141,234,141,235,141,223,141,227,141,252,141,8,142,9,142,255,141,29,142,30,142,16,142,31,142,66,142,53,142,48,142,52,142,74,142,71,142,73,142,76,142,80,142,72,142,89,142,100,142,96,142,42,142,99,142,85,142,118,142,114,142,124,142,129,142,135,142,133,142,132,142,139,142,138,142,147,142,145,142,148,142,153,142,170,142,161,142,172,142,176,142,198,142,177,142,190,142,197,142,200,142,203,142,219,142,227,142,252,142,251,142,235,142,254,142,10,143,5,143,21,143,18,143,25,143,19,143,28,143,31,143,27,143,12,143,38,143,51,143,59,143,57,143,69,143,66,143,62,143,76,143,73,143,70,143,78,143,87,143,92,143,98,143,99,143,100,143,156,143,159,143,163,143,173,143,175,143,183,143,218,143,229,143,226,143,234,143,239,143,135,144,244,143,5,144,249,143,250,143,17,144,21,144,33,144,13,144,30,144,22,144,11,144,39,144,54,144,53,144,57,144,248,143,79,144,80,144,81,144,82,144,14,144,73,144,62,144,86,144,88,144,94,144,104,144,111,144,118,144,168,150,114,144,130,144,125,144,129,144,128,144,138,144,137,144,143,144,168,144,175,144,177,144,181,144,226,144,228,144,72,98,219,144,2,145,18,145,25,145,50,145,48,145,74,145,86,145,88,145,99,145,101,145,105,145,115,145,114,145,139,145,137,145,130,145,162,145,171,145,175,145,170,145,181,145,180,145,186,145,192,145,193,145,201,145,203,145,208,145,214,145,223,145,225,145,219,145,252,145,245,145,246,145,30,146,255,145,20,146,44,146,21,146,17,146,94,146,87,146,69,146,73,146,100,146,72,146,149,146,63,146,75,146,80,146,156,146,150,146,147,146,155,146,90,146,207,146,185,146,183,146,233,146,15,147,250,146,68,147,46,147,25,147,34,147,26,147,35,147,58,147,53,147,59,147,92,147,96,147,124,147,110,147,86,147,176,147,172,147,173,147,148,147,185,147,214,147,215,147,232,147,229,147,216,147,195,147,221,147,208,147,200,147,228,147,26,148,20,148,19,148,3,148,7,148,16,148,54,148,43,148,53,148,33,148,58,148,65,148,82,148,68,148,91,148,96,148,98,148,94,148,106,148,41,146,112,148,117,148,119,148,125,148,90,148,124,148,126,148,129,148,127,148,130,149,135,149,138,149,148,149,150,149,152,149,153,149,160,149,168,149,167,149,173,149,188,149,187,149,185,149,190,149,202,149,246,111,195,149,205,149,204,149,213,149,212,149,214,149,220,149,225,149,229,149,226,149,33,150,40,150,46,150,47,150,66,150,76,150,79,150,75,150,119,150,92,150,94,150,93,150,95,150,102,150,114,150,108,150,141,150,152,150,149,150,151,150,170,150,167,150,177,150,178,150,176,150,180,150,182,150,184,150,185,150,206,150,203,150,201,150,205,150,77,137,220,150,13,151,213,150,249,150,4,151,6,151,8,151,19,151,14,151,17,151,15,151,22,151,25,151,36,151,42,151,48,151,57,151,61,151,62,151,68,151,70,151,72,151,66,151,73,151,92,151,96,151,100,151,102,151,104,151,210,82,107,151,113,151,121,151,133,151,124,151,129,151,122,151,134,151,139,151,143,151,144,151,156,151,168,151,166,151,163,151,179,151,180,151,195,151,198,151,200,151,203,151,220,151,237,151,79,159,242,151,223,122,246,151,245,151,15,152,12,152,56,152,36,152,33,152,55,152,61,152,70,152,79,152,75,152,107,152,111,152,112,152,113,152,116,152,115,152,170,152,175,152,177,152,182,152,196,152,195,152,198,152,233,152,235,152,3,153,9,153,18,153,20,153,24,153,33,153,29,153,30,153,36,153,32,153,44,153,46,153,61,153,62,153,66,153,73,153,69,153,80,153,75,153,81,153,82,153,76,153,85,153,151,153,152,153,165,153,173,153,174,153,188,153,223,153,219,153,221,153,216,153,209,153,237,153,238,153,241,153,242,153,251,153,248,153,1,154,15,154,5,154,226,153,25,154,43,154,55,154,69,154,66,154,64,154,67,154,62,154,85,154,77,154,91,154,87,154,95,154,98,154,101,154,100,154,105,154,107,154,106,154,173,154,176,154,188,154,192,154,207,154,209,154,211,154,212,154,222,154,223,154,226,154,227,154,230,154,239,154,235,154,238,154,244,154,241,154,247,154,251,154,6,155,24,155,26,155,31,155,34,155,35,155,37,155,39,155,40,155,41,155,42,155,46,155,47,155,50,155,68,155,67,155,79,155,77,155,78,155,81,155,88,155,116,155,147,155,131,155,145,155,150,155,151,155,159,155,160,155,168,155,180,155,192,155,202,155,185,155,198,155,207,155,209,155,210,155,227,155,226,155,228,155,212,155,225,155,58,156,242,155,241,155,240,155,21,156,20,156,9,156,19,156,12,156,6,156,8,156,18,156,10,156,4,156,46,156,27,156,37,156,36,156,33,156,48,156,71,156,50,156,70,156,62,156,90,156,96,156,103,156,118,156,120,156,231,156,236,156,240,156,9,157,8,157,235,156,3,157,6,157,42,157,38,157,175,157,35,157,31,157,68,157,21,157,18,157,65,157,63,157,62,157,70,157,72,157,93,157,94,157,100,157,81,157,80,157,89,157,114,157,137,157,135,157,171,157,111,157,122,157,154,157,164,157,169,157,178,157,196,157,193,157,187,157,184,157,186,157,198,157,207,157,194,157,217,157,211,157,248,157,230,157,237,157,239,157,253,157,26,158,27,158,30,158,117,158,121,158,125,158,129,158,136,158,139,158,140,158,146,158,149,158,145,158,157,158,165,158,169,158,184,158,170,158,173,158,97,151,204,158,206,158,207,158,208,158,212,158,220,158,222,158,221,158,224,158,229,158,232,158,239,158,244,158,246,158,247,158,249,158,251,158,252,158,253,158,7,159,8,159,183,118,21,159,33,159,44,159,62,159,74,159,82,159,84,159,99,159,95,159,96,159,97,159,102,159,103,159,108,159,106,159,119,159,114,159,118,159,149,159,156,159,160,159,47,88,199,105,89,144,100,116,220,81,153,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,78,4,78,5,78,6,78,15,78,18,78,23,78,31,78,32,78,33,78,35,78,38,78,41,78,46,78,47,78,49,78,51,78,53,78,55,78,60,78,64,78,65,78,66,78,68,78,70,78,74,78,81,78,85,78,87,78,90,78,91,78,98,78,99,78,100,78,101,78,103,78,104,78,106,78,107,78,108,78,109,78,110,78,111,78,114,78,116,78,117,78,118,78,119,78,120,78,121,78,122,78,123,78,124,78,125,78,127,78,128,78,129,78,130,78,131,78,132,78,133,78,135,78,138,78,144,78,150,78,151,78,153,78,156,78,157,78,158,78,163,78,170,78,175,78,176,78,177,78,180,78,182,78,183,78,184,78,185,78,188,78,189,78,190,78,200,78,204,78,207,78,208,78,210,78,218,78,219,78,220,78,224,78,226,78,230,78,231,78,233,78,237,78,238,78,239,78,241,78,244,78,248,78,249,78,250,78,252,78,254,78,0,79,2,79,3,79,4,79,5,79,6,79,7,79,8,79,11,79,12,79,18,79,19,79,20,79,21,79,22,79,28,79,29,79,33,79,35,79,40,79,41,79,44,79,45,79,46,79,49,79,51,79,53,79,55,79,57,79,59,79,62,79,63,79,64,79,65,79,66,79,68,79,69,79,71,79,72,79,73,79,74,79,75,79,76,79,82,79,84,79,86,79,97,79,98,79,102,79,104,79,106,79,107,79,109,79,110,79,113,79,114,79,117,79,119,79,120,79,121,79,122,79,125,79,128,79,129,79,130,79,133,79,134,79,135,79,138,79,140,79,142,79,144,79,146,79,147,79,149,79,150,79,152,79,153,79,154,79,156,79,158,79,159,79,161,79,162,79,164,79,171,79,173,79,176,79,177,79,178,79,179,79,180,79,182,79,183,79,184,79,185,79,186,79,187,79,188,79,189,79,190,79,192,79,193,79,194,79,198,79,199,79,200,79,201,79,203,79,204,79,205,79,210,79,211,79,212,79,213,79,214,79,217,79,219,79,224,79,226,79,228,79,229,79,231,79,235,79,236,79,240,79,242,79,244,79,245,79,246,79,247,79,249,79,251,79,252,79,253,79,255,79,0,80,1,80,2,80,3,80,4,80,5,80,6,80,7,80,8,80,9,80,10,80,11,80,14,80,16,80,17,80,19,80,21,80,22,80,23,80,27,80,29,80,30,80,32,80,34,80,35,80,36,80,39,80,43,80,47,80,48,80,49,80,50,80,51,80,52,80,53,80,54,80,55,80,56,80,57,80,59,80,61,80,63,80,64,80,65,80,66,80,68,80,69,80,70,80,73,80,74,80,75,80,77,80,80,80,81,80,82,80,83,80,84,80,86,80,87,80,88,80,89,80,91,80,93,80,94,80,95,80,96,80,97,80,98,80,99,80,100,80,102,80,103,80,104,80,105,80,106,80,107,80,109,80,110,80,111,80,112,80,113,80,114,80,115,80,116,80,117,80,120,80,121,80,122,80,124,80,125,80,129,80,130,80,131,80,132,80,134,80,135,80,137,80,138,80,139,80,140,80,142,80,143,80,144,80,145,80,146,80,147,80,148,80,149,80,150,80,151,80,152,80,153,80,154,80,155,80,156,80,157,80,158,80,159,80,160,80,161,80,162,80,164,80,166,80,170,80,171,80,173,80,174,80,175,80,176,80,177,80,179,80,180,80,181,80,182,80,183,80,184,80,185,80,188,80,189,80,190,80,191,80,192,80,193,80,194,80,195,80,196,80,197,80,198,80,199,80,200,80,201,80,202,80,203,80,204,80,205,80,206,80,208,80,209,80,210,80,211,80,212,80,213,80,215,80,216,80,217,80,219,80,220,80,221,80,222,80,223,80,224,80,225,80,226,80,227,80,228,80,229,80,232,80,233,80,234,80,235,80,239,80,240,80,241,80,242,80,244,80,246,80,247,80,248,80,249,80,250,80,252,80,253,80,254,80,255,80,0,81,1,81,2,81,3,81,4,81,5,81,8,81,9,81,10,81,12,81,13,81,14,81,15,81,16,81,17,81,19,81,20,81,21,81,22,81,23,81,24,81,25,81,26,81,27,81,28,81,29,81,30,81,31,81,32,81,34,81,35,81,36,81,37,81,38,81,39,81,40,81,41,81,42,81,43,81,44,81,45,81,46,81,47,81,48,81,49,81,50,81,51,81,52,81,53,81,54,81,55,81,56,81,57,81,58,81,59,81,60,81,61,81,62,81,66,81,71,81,74,81,76,81,78,81,79,81,80,81,82,81,83,81,87,81,88,81,89,81,91,81,93,81,94,81,95,81,96,81,97,81,99,81,100,81,102,81,103,81,105,81,106,81,111,81,114,81,122,81,126,81,127,81,131,81,132,81,134,81,135,81,138,81,139,81,142,81,143,81,144,81,145,81,147,81,148,81,152,81,154,81,157,81,158,81,159,81,161,81,163,81,166,81,167,81,168,81,169,81,170,81,173,81,174,81,180,81,184,81,185,81,186,81,190,81,191,81,193,81,194,81,195,81,197,81,200,81,202,81,205,81,206,81,208,81,210,81,211,81,212,81,213,81,214,81,215,81,216,81,217,81,218,81,220,81,222,81,223,81,226,81,227,81,229,81,230,81,231,81,232,81,233,81,234,81,236,81,238,81,241,81,242,81,244,81,247,81,254,81,4,82,5,82,9,82,11,82,12,82,15,82,16,82,19,82,20,82,21,82,28,82,30,82,31,82,33,82,34,82,35,82,37,82,38,82,39,82,42,82,44,82,47,82,49,82,50,82,52,82,53,82,60,82,62,82,68,82,69,82,70,82,71,82,72,82,73,82,75,82,78,82,79,82,82,82,83,82,85,82,87,82,88,82,89,82,90,82,91,82,93,82,95,82,96,82,98,82,99,82,100,82,102,82,104,82,107,82,108,82,109,82,110,82,112,82,113,82,115,82,116,82,117,82,118,82,119,82,120,82,121,82,122,82,123,82,124,82,126,82,128,82,131,82,132,82,133,82,134,82,135,82,137,82,138,82,139,82,140,82,141,82,142,82,143,82,145,82,146,82,148,82,149,82,150,82,151,82,152,82,153,82,154,82,156,82,164,82,165,82,166,82,167,82,174,82,175,82,176,82,180,82,181,82,182,82,183,82,184,82,185,82,186,82,187,82,188,82,189,82,192,82,193,82,194,82,196,82,197,82,198,82,200,82,202,82,204,82,205,82,206,82,207,82,209,82,211,82,212,82,213,82,215,82,217,82,218,82,219,82,220,82,221,82,222,82,224,82,225,82,226,82,227,82,229,82,230,82,231,82,232,82,233,82,234,82,235,82,236,82,237,82,238,82,239,82,241,82,242,82,243,82,244,82,245,82,246,82,247,82,248,82,251,82,252,82,253,82,1,83,2,83,3,83,4,83,7,83,9,83,10,83,11,83,12,83,14,83,17,83,18,83,19,83,20,83,24,83,27,83,28,83,30,83,31,83,34,83,36,83,37,83,39,83,40,83,41,83,43,83,44,83,45,83,47,83,48,83,49,83,50,83,51,83,52,83,53,83,54,83,55,83,56,83,60,83,61,83,64,83,66,83,68,83,70,83,75,83,76,83,77,83,80,83,84,83,88,83,89,83,91,83,93,83,101,83,104,83,106,83,108,83,109,83,114,83,118,83,121,83,123,83,124,83,125,83,126,83,128,83,129,83,131,83,135,83,136,83,138,83,142,83,143,83,144,83,145,83,146,83,147,83,148,83,150,83,151,83,153,83,155,83,156,83,158,83,160,83,161,83,164,83,167,83,170,83,171,83,172,83,173,83,175,83,176,83,177,83,178,83,179,83,180,83,181,83,183,83,184,83,185,83,186,83,188,83,189,83,190,83,192,83,195,83,196,83,197,83,198,83,199,83,206,83,207,83,208,83,210,83,211,83,213,83,218,83,220,83,221,83,222,83,225,83,226,83,231,83,244,83,250,83,254,83,255,83,0,84,2,84,5,84,7,84,11,84,20,84,24,84,25,84,26,84,28,84,34,84,36,84,37,84,42,84,48,84,51,84,54,84,55,84,58,84,61,84,63,84,65,84,66,84,68,84,69,84,71,84,73,84,76,84,77,84,78,84,79,84,81,84,90,84,93,84,94,84,95,84,96,84,97,84,99,84,101,84,103,84,105,84,106,84,107,84,108,84,109,84,110,84,111,84,112,84,116,84,121,84,122,84,126,84,127,84,129,84,131,84,133,84,135,84,136,84,137,84,138,84,141,84,145,84,147,84,151,84,152,84,156,84,158,84,159,84,160,84,161,84,162,84,165,84,174,84,176,84,178,84,181,84,182,84,183,84,185,84,186,84,188,84,190,84,195,84,197,84,202,84,203,84,214,84,216,84,219,84,224,84,225,84,226,84,227,84,228,84,235,84,236,84,239,84,240,84,241,84,244,84,245,84,246,84,247,84,248,84,249,84,251,84,254,84,0,85,2,85,3,85,4,85,5,85,8,85,10,85,11,85,12,85,13,85,14,85,18,85,19,85,21,85,22,85,23,85,24,85,25,85,26,85,28,85,29,85,30,85,31,85,33,85,37,85,38,85,40,85,41,85,43,85,45,85,50,85,52,85,53,85,54,85,56,85,57,85,58,85,59,85,61,85,64,85,66,85,69,85,71,85,72,85,75,85,76,85,77,85,78,85,79,85,81,85,82,85,83,85,84,85,87,85,88,85,89,85,90,85,91,85,93,85,94,85,95,85,96,85,98,85,99,85,104,85,105,85,107,85,111,85,112,85,113,85,114,85,115,85,116,85,121,85,122,85,125,85,127,85,133,85,134,85,140,85,141,85,142,85,144,85,146,85,147,85,149,85,150,85,151,85,154,85,155,85,158,85,160,85,161,85,162,85,163,85,164,85,165,85,166,85,168,85,169,85,170,85,171,85,172,85,173,85,174,85,175,85,176,85,178,85,180,85,182,85,184,85,186,85,188,85,191,85,192,85,193,85,194,85,195,85,198,85,199,85,200,85,202,85,203,85,206,85,207,85,208,85,213,85,215,85,216,85,217,85,218,85,219,85,222,85,224,85,226,85,231,85,233,85,237,85,238,85,240,85,241,85,244,85,246,85,248,85,249,85,250,85,251,85,252,85,255,85,2,86,3,86,4,86,5,86,6,86,7,86,10,86,11,86,13,86,16,86,17,86,18,86,19,86,20,86,21,86,22,86,23,86,25,86,26,86,28,86,29,86,32,86,33,86,34,86,37,86,38,86,40,86,41,86,42,86,43,86,46,86,47,86,48,86,51,86,53,86,55,86,56,86,58,86,60,86,61,86,62,86,64,86,65,86,66,86,67,86,68,86,69,86,70,86,71,86,72,86,73,86,74,86,75,86,79,86,80,86,81,86,82,86,83,86,85,86,86,86,90,86,91,86,93,86,94,86,95,86,96,86,97,86,99,86,101,86,102,86,103,86,109,86,110,86,111,86,112,86,114,86,115,86,116,86,117,86,119,86,120,86,121,86,122,86,125,86,126,86,127,86,128,86,129,86,130,86,131,86,132,86,135,86,136,86,137,86,138,86,139,86,140,86,141,86,144,86,145,86,146,86,148,86,149,86,150,86,151,86,152,86,153,86,154,86,155,86,156,86,157,86,158,86,159,86,160,86,161,86,162,86,164,86,165,86,166,86,167,86,168,86,169,86,170,86,171,86,172,86,173,86,174,86,176,86,177,86,178,86,179,86,180,86,181,86,182,86,184,86,185,86,186,86,187,86,189,86,190,86,191,86,192,86,193,86,194,86,195,86,196,86,197,86,198,86,199,86,200,86,201,86,203,86,204,86,205,86,206,86,207,86,208,86,209,86,210,86,211,86,213,86,214,86,216,86,217,86,220,86,227,86,229,86,230,86,231,86,232,86,233,86,234,86,236,86,238,86,239,86,242,86,243,86,246,86,247,86,248,86,251,86,252,86,0,87,1,87,2,87,5,87,7,87,11,87,12,87,13,87,14,87,15,87,16,87,17,87,18,87,19,87,20,87,21,87,22,87,23,87,24,87,25,87,26,87,27,87,29,87,30,87,32,87,33,87,34,87,36,87,37,87,38,87,39,87,43,87,49,87,50,87,52,87,53,87,54,87,55,87,56,87,60,87,61,87,63,87,65,87,67,87,68,87,69,87,70,87,72,87,73,87,75,87,82,87,83,87,84,87,85,87,86,87,88,87,89,87,98,87,99,87,101,87,103,87,108,87,110,87,112,87,113,87,114,87,116,87,117,87,120,87,121,87,122,87,125,87,126,87,127,87,128,87,129,87,135,87,136,87,137,87,138,87,141,87,142,87,143,87,144,87,145,87,148,87,149,87,150,87,151,87,152,87,153,87,154,87,156,87,157,87,158,87,159,87,165,87,168,87,170,87,172,87,175,87,176,87,177,87,179,87,181,87,182,87,183,87,185,87,186,87,187,87,188,87,189,87,190,87,191,87,192,87,193,87,196,87,197,87,198,87,199,87,200,87,201,87,202,87,204,87,205,87,208,87,209,87,211,87,214,87,215,87,219,87,220,87,222,87,225,87,226,87,227,87,229,87,230,87,231,87,232,87,233,87,234,87,235,87,236,87,238,87,240,87,241,87,242,87,243,87,245,87,246,87,247,87,251,87,252,87,254,87,255,87,1,88,3,88,4,88,5,88,8,88,9,88,10,88,12,88,14,88,15,88,16,88,18,88,19,88,20,88,22,88,23,88,24,88,26,88,27,88,28,88,29,88,31,88,34,88,35,88,37,88,38,88,39,88,40,88,41,88,43,88,44,88,45,88,46,88,47,88,49,88,50,88,51,88,52,88,54,88,55,88,56,88,57,88,58,88,59,88,60,88,61,88,62,88,63,88,64,88,65,88,66,88,67,88,69,88,70,88,71,88,72,88,73,88,74,88,75,88,78,88,79,88,80,88,82,88,83,88,85,88,86,88,87,88,89,88,90,88,91,88,92,88,93,88,95,88,96,88,97,88,98,88,99,88,100,88,102,88,103,88,104,88,105,88,106,88,109,88,110,88,111,88,112,88,113,88,114,88,115,88,116,88,117,88,118,88,119,88,120,88,121,88,122,88,123,88,124,88,125,88,127,88,130,88,132,88,134,88,135,88,136,88,138,88,139,88,140,88,141,88,142,88,143,88,144,88,145,88,148,88,149,88,150,88,151,88,152,88,155,88,156,88,157,88,160,88,161,88,162,88,163,88,164,88,165,88,166,88,167,88,170,88,171,88,172,88,173,88,174,88,175,88,176,88,177,88,178,88,179,88,180,88,181,88,182,88,183,88,184,88,185,88,186,88,187,88,189,88,190,88,191,88,192,88,194,88,195,88,196,88,198,88,199,88,200,88,201,88,202,88,203,88,204,88,205,88,206,88,207,88,208,88,210,88,211,88,212,88,214,88,215,88,216,88,217,88,218,88,219,88,220,88,221,88,222,88,223,88,224,88,225,88,226,88,227,88,229,88,230,88,231,88,232,88,233,88,234,88,237,88,239,88,241,88,242,88,244,88,245,88,247,88,248,88,250,88,251,88,252,88,253,88,254,88,255,88,0,89,1,89,3,89,5,89,6,89,8,89,9,89,10,89,11,89,12,89,14,89,16,89,17,89,18,89,19,89,23,89,24,89,27,89,29,89,30,89,32,89,33,89,34,89,35,89,38,89,40,89,44,89,48,89,50,89,51,89,53,89,54,89,59,89,61,89,62,89,63,89,64,89,67,89,69,89,70,89,74,89,76,89,77,89,80,89,82,89,83,89,89,89,91,89,92,89,93,89,94,89,95,89,97,89,99,89,100,89,102,89,103,89,104,89,105,89,106,89,107,89,108,89,109,89,110,89,111,89,112,89,113,89,114,89,117,89,119,89,122,89,123,89,124,89,126,89,127,89,128,89,133,89,137,89,139,89,140,89,142,89,143,89,144,89,145,89,148,89,149,89,152,89,154,89,155,89,156,89,157,89,159,89,160,89,161,89,162,89,166,89,167,89,172,89,173,89,176,89,177,89,179,89,180,89,181,89,182,89,183,89,184,89,186,89,188,89,189,89,191,89,192,89,193,89,194,89,195,89,196,89,197,89,199,89,200,89,201,89,204,89,205,89,206,89,207,89,213,89,214,89,217,89,219,89,222,89,223,89,224,89,225,89,226,89,228,89,230,89,231,89,233,89,234,89,235,89,237,89,238,89,239,89,240,89,241,89,242,89,243,89,244,89,245,89,246,89,247,89,248,89,250,89,252,89,253,89,254,89,0,90,2,90,10,90,11,90,13,90,14,90,15,90,16,90,18,90,20,90,21,90,22,90,23,90,25,90,26,90,27,90,29,90,30,90,33,90,34,90,36,90,38,90,39,90,40,90,42,90,43,90,44,90,45,90,46,90,47,90,48,90,51,90,53,90,55,90,56,90,57,90,58,90,59,90,61,90,62,90,63,90,65,90,66,90,67,90,68,90,69,90,71,90,72,90,75,90,76,90,77,90,78,90,79,90,80,90,81,90,82,90,83,90,84,90,86,90,87,90,88,90,89,90,91,90,92,90,93,90,94,90,95,90,96,90,97,90,99,90,100,90,101,90,102,90,104,90,105,90,107,90,108,90,109,90,110,90,111,90,112,90,113,90,114,90,115,90,120,90,121,90,123,90,124,90,125,90,126,90,128,90,129,90,130,90,131,90,132,90,133,90,134,90,135,90,136,90,137,90,138,90,139,90,140,90,141,90,142,90,143,90,144,90,145,90,147,90,148,90,149,90,150,90,151,90,152,90,153,90,156,90,157,90,158,90,159,90,160,90,161,90,162,90,163,90,164,90,165,90,166,90,167,90,168,90,169,90,171,90,172,90,173,90,174,90,175,90,176,90,177,90,180,90,182,90,183,90,185,90,186,90,187,90,188,90,189,90,191,90,192,90,195,90,196,90,197,90,198,90,199,90,200,90,202,90,203,90,205,90,206,90,207,90,208,90,209,90,211,90,213,90,215,90,217,90,218,90,219,90,221,90,222,90,223,90,226,90,228,90,229,90,231,90,232,90,234,90,236,90,237,90,238,90,239,90,240,90,242,90,243,90,244,90,245,90,246,90,247,90,248,90,249,90,250,90,251,90,252,90,253,90,254,90,255,90,0,91,1,91,2,91,3,91,4,91,5,91,6,91,7,91,8,91,10,91,11,91,12,91,13,91,14,91,15,91,16,91,17,91,18,91,19,91,20,91,21,91,24,91,25,91,26,91,27,91,28,91,29,91,30,91,31,91,32,91,33,91,34,91,35,91,36,91,37,91,38,91,39,91,40,91,41,91,42,91,43,91,44,91,45,91,46,91,47,91,48,91,49,91,51,91,53,91,54,91,56,91,57,91,58,91,59,91,60,91,61,91,62,91,63,91,65,91,66,91,67,91,68,91,69,91,70,91,71,91,72,91,73,91,74,91,75,91,76,91,77,91,78,91,79,91,82,91,86,91,94,91,96,91,97,91,103,91,104,91,107,91,109,91,110,91,111,91,114,91,116,91,118,91,119,91,120,91,121,91,123,91,124,91,126,91,127,91,130,91,134,91,138,91,141,91,142,91,144,91,145,91,146,91,148,91,150,91,159,91,167,91,168,91,169,91,172,91,173,91,174,91,175,91,177,91,178,91,183,91,186,91,187,91,188,91,192,91,193,91,195,91,200,91,201,91,202,91,203,91,205,91,206,91,207,91,209,91,212,91,213,91,214,91,215,91,216,91,217,91,218,91,219,91,220,91,224,91,226,91,227,91,230,91,231,91,233,91,234,91,235,91,236,91,237,91,239,91,241,91,242,91,243,91,244,91,245,91,246,91,247,91,253,91,254,91,0,92,2,92,3,92,5,92,7,92,8,92,11,92,12,92,13,92,14,92,16,92,18,92,19,92,23,92,25,92,27,92,30,92,31,92,32,92,33,92,35,92,38,92,40,92,41,92,42,92,43,92,45,92,46,92,47,92,48,92,50,92,51,92,53,92,54,92,55,92,67,92,68,92,70,92,71,92,76,92,77,92,82,92,83,92,84,92,86,92,87,92,88,92,90,92,91,92,92,92,93,92,95,92,98,92,100,92,103,92,104,92,105,92,106,92,107,92,108,92,109,92,112,92,114,92,115,92,116,92,117,92,118,92,119,92,120,92,123,92,124,92,125,92,126,92,128,92,131,92,132,92,133,92,134,92,135,92,137,92,138,92,139,92,142,92,143,92,146,92,147,92,149,92,157,92,158,92,159,92,160,92,161,92,164,92,165,92,166,92,167,92,168,92,170,92,174,92,175,92,176,92,178,92,180,92,182,92,185,92,186,92,187,92,188,92,190,92,192,92,194,92,195,92,197,92,198,92,199,92,200,92,201,92,202,92,204,92,205,92,206,92,207,92,208,92,209,92,211,92,212,92,213,92,214,92,215,92,216,92,218,92,219,92,220,92,221,92,222,92,223,92,224,92,226,92,227,92,231,92,233,92,235,92,236,92,238,92,239,92,241,92,242,92,243,92,244,92,245,92,246,92,247,92,248,92,249,92,250,92,252,92,253,92,254,92,255,92,0,93,1,93,4,93,5,93,8,93,9,93,10,93,11,93,12,93,13,93,15,93,16,93,17,93,18,93,19,93,21,93,23,93,24,93,25,93,26,93,28,93,29,93,31,93,32,93,33,93,34,93,35,93,37,93,40,93,42,93,43,93,44,93,47,93,48,93,49,93,50,93,51,93,53,93,54,93,55,93,56,93,57,93,58,93,59,93,60,93,63,93,64,93,65,93,66,93,67,93,68,93,69,93,70,93,72,93,73,93,77,93,78,93,79,93,80,93,81,93,82,93,83,93,84,93,85,93,86,93,87,93,89,93,90,93,92,93,94,93,95,93,96,93,97,93,98,93,99,93,100,93,101,93,102,93,103,93,104,93,106,93,109,93,110,93,112,93,113,93,114,93,115,93,117,93,118,93,119,93,120,93,121,93,122,93,123,93,124,93,125,93,126,93,127,93,128,93,129,93,131,93,132,93,133,93,134,93,135,93,136,93,137,93,138,93,139,93,140,93,141,93,142,93,143,93,144,93,145,93,146,93,147,93,148,93,149,93,150,93,151,93,152,93,154,93,155,93,156,93,158,93,159,93,160,93,161,93,162,93,163,93,164,93,165,93,166,93,167,93,168,93,169,93,170,93,171,93,172,93,173,93,174,93,175,93,176,93,177,93,178,93,179,93,180,93,181,93,182,93,184,93,185,93,186,93,187,93,188,93,189,93,190,93,191,93,192,93,193,93,194,93,195,93,196,93,198,93,199,93,200,93,201,93,202,93,203,93,204,93,206,93,207,93,208,93,209,93,210,93,211,93,212,93,213,93,214,93,215,93,216,93,217,93,218,93,220,93,223,93,224,93,227,93,228,93,234,93,236,93,237,93,240,93,245,93,246,93,248,93,249,93,250,93,251,93,252,93,255,93,0,94,4,94,7,94,9,94,10,94,11,94,13,94,14,94,18,94,19,94,23,94,30,94,31,94,32,94,33,94,34,94,35,94,36,94,37,94,40,94,41,94,42,94,43,94,44,94,47,94,48,94,50,94,51,94,52,94,53,94,54,94,57,94,58,94,62,94,63,94,64,94,65,94,67,94,70,94,71,94,72,94,73,94,74,94,75,94,77,94,78,94,79,94,80,94,81,94,82,94,83,94,86,94,87,94,88,94,89,94,90,94,92,94,93,94,95,94,96,94,99,94,100,94,101,94,102,94,103,94,104,94,105,94,106,94,107,94,108,94,109,94,110,94,111,94,112,94,113,94,117,94,119,94,121,94,126,94,129,94,130,94,131,94,133,94,136,94,137,94,140,94,141,94,142,94,146,94,152,94,155,94,157,94,161,94,162,94,163,94,164,94,168,94,169,94,170,94,171,94,172,94,174,94,175,94,176,94,177,94,178,94,180,94,186,94,187,94,188,94,189,94,191,94,192,94,193,94,194,94,195,94,196,94,197,94,198,94,199,94,200,94,203,94,204,94,205,94,206,94,207,94,208,94,212,94,213,94,215,94,216,94,217,94,218,94,220,94,221,94,222,94,223,94,224,94,225,94,226,94,227,94,228,94,229,94,230,94,231,94,233,94,235,94,236,94,237,94,238,94,239,94,240,94,241,94,242,94,243,94,245,94,248,94,249,94,251,94,252,94,253,94,5,95,6,95,7,95,9,95,12,95,13,95,14,95,16,95,18,95,20,95,22,95,25,95,26,95,28,95,29,95,30,95,33,95,34,95,35,95,36,95,40,95,43,95,44,95,46,95,48,95,50,95,51,95,52,95,53,95,54,95,55,95,56,95,59,95,61,95,62,95,63,95,65,95,66,95,67,95,68,95,69,95,70,95,71,95,72,95,73,95,74,95,75,95,76,95,77,95,78,95,79,95,81,95,84,95,89,95,90,95,91,95,92,95,94,95,95,95,96,95,99,95,101,95,103,95,104,95,107,95,110,95,111,95,114,95,116,95,117,95,118,95,120,95,122,95,125,95,126,95,127,95,131,95,134,95,141,95,142,95,143,95,145,95,147,95,148,95,150,95,154,95,155,95,157,95,158,95,159,95,160,95,162,95,163,95,164,95,165,95,166,95,167,95,169,95,171,95,172,95,175,95,176,95,177,95,178,95,179,95,180,95,182,95,184,95,185,95,186,95,187,95,190,95,191,95,192,95,193,95,194,95,199,95,200,95,202,95,203,95,206,95,211,95,212,95,213,95,218,95,219,95,220,95,222,95,223,95,226,95,227,95,229,95,230,95,232,95,233,95,236,95,239,95,240,95,242,95,243,95,244,95,246,95,247,95,249,95,250,95,252,95,7,96,8,96,9,96,11,96,12,96,16,96,17,96,19,96,23,96,24,96,26,96,30,96,31,96,34,96,35,96,36,96,44,96,45,96,46,96,48,96,49,96,50,96,51,96,52,96,54,96,55,96,56,96,57,96,58,96,61,96,62,96,64,96,68,96,69,96,70,96,71,96,72,96,73,96,74,96,76,96,78,96,79,96,81,96,83,96,84,96,86,96,87,96,88,96,91,96,92,96,94,96,95,96,96,96,97,96,101,96,102,96,110,96,113,96,114,96,116,96,117,96,119,96,126,96,128,96,129,96,130,96,133,96,134,96,135,96,136,96,138,96,139,96,142,96,143,96,144,96,145,96,147,96,149,96,151,96,152,96,153,96,156,96,158,96,161,96,162,96,164,96,165,96,167,96,169,96,170,96,174,96,176,96,179,96,181,96,182,96,183,96,185,96,186,96,189,96,190,96,191,96,192,96,193,96,194,96,195,96,196,96,199,96,200,96,201,96,204,96,205,96,206,96,207,96,208,96,210,96,211,96,212,96,214,96,215,96,217,96,219,96,222,96,225,96,226,96,227,96,228,96,229,96,234,96,241,96,242,96,245,96,247,96,248,96,251,96,252,96,253,96,254,96,255,96,2,97,3,97,4,97,5,97,7,97,10,97,11,97,12,97,16,97,17,97,18,97,19,97,20,97,22,97,23,97,24,97,25,97,27,97,28,97,29,97,30,97,33,97,34,97,37,97,40,97,41,97,42,97,44,97,45,97,46,97,47,97,48,97,49,97,50,97,51,97,52,97,53,97,54,97,55,97,56,97,57,97,58,97,59,97,60,97,61,97,62,97,64,97,65,97,66,97,67,97,68,97,69,97,70,97,71,97,73,97,75,97,77,97,79,97,80,97,82,97,83,97,84,97,86,97,87,97,88,97,89,97,90,97,91,97,92,97,94,97,95,97,96,97,97,97,99,97,100,97,101,97,102,97,105,97,106,97,107,97,108,97,109,97,110,97,111,97,113,97,114,97,115,97,116,97,118,97,120,97,121,97,122,97,123,97,124,97,125,97,126,97,127,97,128,97,129,97,130,97,131,97,132,97,133,97,134,97,135,97,136,97,137,97,138,97,140,97,141,97,143,97,144,97,145,97,146,97,147,97,149,97,150,97,151,97,152,97,153,97,154,97,155,97,156,97,158,97,159,97,160,97,161,97,162,97,163,97,164,97,165,97,166,97,170,97,171,97,173,97,174,97,175,97,176,97,177,97,178,97,179,97,180,97,181,97,182,97,184,97,185,97,186,97,187,97,188,97,189,97,191,97,192,97,193,97,195,97,196,97,197,97,198,97,199,97,201,97,204,97,205,97,206,97,207,97,208,97,211,97,213,97,214,97,215,97,216,97,217,97,218,97,219,97,220,97,221,97,222,97,223,97,224,97,225,97,226,97,227,97,228,97,229,97,231,97,232,97,233,97,234,97,235,97,236,97,237,97,238,97,239,97,240,97,241,97,242,97,243,97,244,97,246,97,247,97,248,97,249,97,250,97,251,97,252,97,253,97,254,97,0,98,1,98,2,98,3,98,4,98,5,98,7,98,9,98,19,98,20,98,25,98,28,98,29,98,30,98,32,98,35,98,38,98,39,98,40,98,41,98,43,98,45,98,47,98,48,98,49,98,50,98,53,98,54,98,56,98,57,98,58,98,59,98,60,98,66,98,68,98,69,98,70,98,74,98,79,98,80,98,85,98,86,98,87,98,89,98,90,98,92,98,93,98,94,98,95,98,96,98,97,98,98,98,100,98,101,98,104,98,113,98,114,98,116,98,117,98,119,98,120,98,122,98,123,98,125,98,129,98,130,98,131,98,133,98,134,98,135,98,136,98,139,98,140,98,141,98,142,98,143,98,144,98,148,98,153,98,156,98,157,98,158,98,163,98,166,98,167,98,169,98,170,98,173,98,174,98,175,98,176,98,178,98,179,98,180,98,182,98,183,98,184,98,186,98,190,98,192,98,193,98,195,98,203,98,207,98,209,98,213,98,221,98,222,98,224,98,225,98,228,98,234,98,235,98,240,98,242,98,245,98,248,98,249,98,250,98,251,98,0,99,3,99,4,99,5,99,6,99,10,99,11,99,12,99,13,99,15,99,16,99,18,99,19,99,20,99,21,99,23,99,24,99,25,99,28,99,38,99,39,99,41,99,44,99,45,99,46,99,48,99,49,99,51,99,52,99,53,99,54,99,55,99,56,99,59,99,60,99,62,99,63,99,64,99,65,99,68,99,71,99,72,99,74,99,81,99,82,99,83,99,84,99,86,99,87,99,88,99,89,99,90,99,91,99,92,99,93,99,96,99,100,99,101,99,102,99,104,99,106,99,107,99,108,99,111,99,112,99,114,99,115,99,116,99,117,99,120,99,121,99,124,99,125,99,126,99,127,99,129,99,131,99,132,99,133,99,134,99,139,99,141,99,145,99,147,99,148,99,149,99,151,99,153,99,154,99,155,99,156,99,157,99,158,99,159,99,161,99,164,99,166,99,171,99,175,99,177,99,178,99,181,99,182,99,185,99,187,99,189,99,191,99,192,99,193,99,194,99,195,99,197,99,199,99,200,99,202,99,203,99,204,99,209,99,211,99,212,99,213,99,215,99,216,99,217,99,218,99,219,99,220,99,221,99,223,99,226,99,228,99,229,99,230,99,231,99,232,99,235,99,236,99,238,99,239,99,240,99,241,99,243,99,245,99,247,99,249,99,250,99,251,99,252,99,254,99,3,100,4,100,6,100,7,100,8,100,9,100,10,100,13,100,14,100,17,100,18,100,21,100,22,100,23,100,24,100,25,100,26,100,29,100,31,100,34,100,35,100,36,100,37,100,39,100,40,100,41,100,43,100,46,100,47,100,48,100,49,100,50,100,51,100,53,100,54,100,55,100,56,100,57,100,59,100,60,100,62,100,64,100,66,100,67,100,73,100,75,100,76,100,77,100,78,100,79,100,80,100,81,100,83,100,85,100,86,100,87,100,89,100,90,100,91,100,92,100,93,100,95,100,96,100,97,100,98,100,99,100,100,100,101,100,102,100,104,100,106,100,107,100,108,100,110,100,111,100,112,100,113,100,114,100,115,100,116,100,117,100,118,100,119,100,123,100,124,100,125,100,126,100,127,100,128,100,129,100,131,100,134,100,136,100,137,100,138,100,139,100,140,100,141,100,142,100,143,100,144,100,147,100,148,100,151,100,152,100,154,100,155,100,156,100,157,100,159,100,160,100,161,100,162,100,163,100,165,100,166,100,167,100,168,100,170,100,171,100,175,100,177,100,178,100,179,100,180,100,182,100,185,100,187,100,189,100,190,100,191,100,193,100,195,100,196,100,198,100,199,100,200,100,201,100,202,100,203,100,204,100,207,100,209,100,211,100,212,100,213,100,214,100,217,100,218,100,219,100,220,100,221,100,223,100,224,100,225,100,227,100,229,100,231,100,232,100,233,100,234,100,235,100,236,100,237,100,238,100,239,100,240,100,241,100,242,100,243,100,244,100,245,100,246,100,247,100,248,100,249,100,250,100,251,100,252,100,253,100,254,100,255,100,1,101,2,101,3,101,4,101,5,101,6,101,7,101,8,101,10,101,11,101,12,101,13,101,14,101,15,101,16,101,17,101,19,101,20,101,21,101,22,101,23,101,25,101,26,101,27,101,28,101,29,101,30,101,31,101,32,101,33,101,34,101,35,101,36,101,38,101,39,101,40,101,41,101,42,101,44,101,45,101,48,101,49,101,50,101,51,101,55,101,58,101,60,101,61,101,64,101,65,101,66,101,67,101,68,101,70,101,71,101,74,101,75,101,77,101,78,101,80,101,82,101,83,101,84,101,87,101,88,101,90,101,92,101,95,101,96,101,97,101,100,101,101,101,103,101,104,101,105,101,106,101,109,101,110,101,111,101,113,101,115,101,117,101,118,101,120,101,121,101,122,101,123,101,124,101,125,101,126,101,127,101,128,101,129,101,130,101,131,101,132,101,133,101,134,101,136,101,137,101,138,101,141,101,142,101,143,101,146,101,148,101,149,101,150,101,152,101,154,101,157,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+38386);
/* memory initializer */ allocate([158,101,160,101,162,101,163,101,166,101,168,101,170,101,172,101,174,101,177,101,178,101,179,101,180,101,181,101,182,101,183,101,184,101,186,101,187,101,190,101,191,101,192,101,194,101,199,101,200,101,201,101,202,101,205,101,208,101,209,101,211,101,212,101,213,101,216,101,217,101,218,101,219,101,220,101,221,101,222,101,223,101,225,101,227,101,228,101,234,101,235,101,242,101,243,101,244,101,245,101,248,101,249,101,251,101,252,101,253,101,254,101,255,101,1,102,4,102,5,102,7,102,8,102,9,102,11,102,13,102,16,102,17,102,18,102,22,102,23,102,24,102,26,102,27,102,28,102,30,102,33,102,34,102,35,102,36,102,38,102,41,102,42,102,43,102,44,102,46,102,48,102,50,102,51,102,55,102,56,102,57,102,58,102,59,102,61,102,63,102,64,102,66,102,68,102,69,102,70,102,71,102,72,102,73,102,74,102,77,102,78,102,80,102,81,102,88,102,89,102,91,102,92,102,93,102,94,102,96,102,98,102,99,102,101,102,103,102,105,102,106,102,107,102,108,102,109,102,113,102,114,102,115,102,117,102,120,102,121,102,123,102,124,102,125,102,127,102,128,102,129,102,131,102,133,102,134,102,136,102,137,102,138,102,139,102,141,102,142,102,143,102,144,102,146,102,147,102,148,102,149,102,152,102,153,102,154,102,155,102,156,102,158,102,159,102,160,102,161,102,162,102,163,102,164,102,165,102,166,102,169,102,170,102,171,102,172,102,173,102,175,102,176,102,177,102,178,102,179,102,181,102,182,102,183,102,184,102,186,102,187,102,188,102,189,102,191,102,192,102,193,102,194,102,195,102,196,102,197,102,198,102,199,102,200,102,201,102,202,102,203,102,204,102,205,102,206,102,207,102,208,102,209,102,210,102,211,102,212,102,213,102,214,102,215,102,216,102,218,102,222,102,223,102,224,102,225,102,226,102,227,102,228,102,229,102,231,102,232,102,234,102,235,102,236,102,237,102,238,102,239,102,241,102,245,102,246,102,248,102,250,102,251,102,253,102,1,103,2,103,3,103,4,103,5,103,6,103,7,103,12,103,14,103,15,103,17,103,18,103,19,103,22,103,24,103,25,103,26,103,28,103,30,103,32,103,33,103,34,103,35,103,36,103,37,103,39,103,41,103,46,103,48,103,50,103,51,103,54,103,55,103,56,103,57,103,59,103,60,103,62,103,63,103,65,103,68,103,69,103,71,103,74,103,75,103,77,103,82,103,84,103,85,103,87,103,88,103,89,103,90,103,91,103,93,103,98,103,99,103,100,103,102,103,103,103,107,103,108,103,110,103,113,103,116,103,118,103,120,103,121,103,122,103,123,103,125,103,128,103,130,103,131,103,133,103,134,103,136,103,138,103,140,103,141,103,142,103,143,103,145,103,146,103,147,103,148,103,150,103,153,103,155,103,159,103,160,103,161,103,164,103,166,103,169,103,172,103,174,103,177,103,178,103,180,103,185,103,186,103,187,103,188,103,189,103,190,103,191,103,192,103,194,103,197,103,198,103,199,103,200,103,201,103,202,103,203,103,204,103,205,103,206,103,213,103,214,103,215,103,219,103,223,103,225,103,227,103,228,103,230,103,231,103,232,103,234,103,235,103,237,103,238,103,242,103,245,103,246,103,247,103,248,103,249,103,250,103,251,103,252,103,254,103,1,104,2,104,3,104,4,104,6,104,13,104,16,104,18,104,20,104,21,104,24,104,25,104,26,104,27,104,28,104,30,104,31,104,32,104,34,104,35,104,36,104,37,104,38,104,39,104,40,104,43,104,44,104,45,104,46,104,47,104,48,104,49,104,52,104,53,104,54,104,58,104,59,104,63,104,71,104,75,104,77,104,79,104,82,104,86,104,87,104,88,104,89,104,90,104,91,104,92,104,93,104,94,104,95,104,106,104,108,104,109,104,110,104,111,104,112,104,113,104,114,104,115,104,117,104,120,104,121,104,122,104,123,104,124,104,125,104,126,104,127,104,128,104,130,104,132,104,135,104,136,104,137,104,138,104,139,104,140,104,141,104,142,104,144,104,145,104,146,104,148,104,149,104,150,104,152,104,153,104,154,104,155,104,156,104,157,104,158,104,159,104,160,104,161,104,163,104,164,104,165,104,169,104,170,104,171,104,172,104,174,104,177,104,178,104,180,104,182,104,183,104,184,104,185,104,186,104,187,104,188,104,189,104,190,104,191,104,193,104,195,104,196,104,197,104,198,104,199,104,200,104,202,104,204,104,206,104,207,104,208,104,209,104,211,104,212,104,214,104,215,104,217,104,219,104,220,104,221,104,222,104,223,104,225,104,226,104,228,104,229,104,230,104,231,104,232,104,233,104,234,104,235,104,236,104,237,104,239,104,242,104,243,104,244,104,246,104,247,104,248,104,251,104,253,104,254,104,255,104,0,105,2,105,3,105,4,105,6,105,7,105,8,105,9,105,10,105,12,105,15,105,17,105,19,105,20,105,21,105,22,105,23,105,24,105,25,105,26,105,27,105,28,105,29,105,30,105,33,105,34,105,35,105,37,105,38,105,39,105,40,105,41,105,42,105,43,105,44,105,46,105,47,105,49,105,50,105,51,105,53,105,54,105,55,105,56,105,58,105,59,105,60,105,62,105,64,105,65,105,67,105,68,105,69,105,70,105,71,105,72,105,73,105,74,105,75,105,76,105,77,105,78,105,79,105,80,105,81,105,82,105,83,105,85,105,86,105,88,105,89,105,91,105,92,105,95,105,97,105,98,105,100,105,101,105,103,105,104,105,105,105,106,105,108,105,109,105,111,105,112,105,114,105,115,105,116,105,117,105,118,105,122,105,123,105,125,105,126,105,127,105,129,105,131,105,133,105,138,105,139,105,140,105,142,105,143,105,144,105,145,105,146,105,147,105,150,105,151,105,153,105,154,105,157,105,158,105,159,105,160,105,161,105,162,105,163,105,164,105,165,105,166,105,169,105,170,105,172,105,174,105,175,105,176,105,178,105,179,105,181,105,182,105,184,105,185,105,186,105,188,105,189,105,190,105,191,105,192,105,194,105,195,105,196,105,197,105,198,105,199,105,200,105,201,105,203,105,205,105,207,105,209,105,210,105,211,105,213,105,214,105,215,105,216,105,217,105,218,105,220,105,221,105,222,105,225,105,226,105,227,105,228,105,229,105,230,105,231,105,232,105,233,105,234,105,235,105,236,105,238,105,239,105,240,105,241,105,243,105,244,105,245,105,246,105,247,105,248,105,249,105,250,105,251,105,252,105,254,105,0,106,1,106,2,106,3,106,4,106,5,106,6,106,7,106,8,106,9,106,11,106,12,106,13,106,14,106,15,106,16,106,17,106,18,106,19,106,20,106,21,106,22,106,25,106,26,106,27,106,28,106,29,106,30,106,32,106,34,106,35,106,36,106,37,106,38,106,39,106,41,106,43,106,44,106,45,106,46,106,48,106,50,106,51,106,52,106,54,106,55,106,56,106,57,106,58,106,59,106,60,106,63,106,64,106,65,106,66,106,67,106,69,106,70,106,72,106,73,106,74,106,75,106,76,106,77,106,78,106,79,106,81,106,82,106,83,106,84,106,85,106,86,106,87,106,90,106,92,106,93,106,94,106,95,106,96,106,98,106,99,106,100,106,102,106,103,106,104,106,105,106,106,106,107,106,108,106,109,106,110,106,111,106,112,106,114,106,115,106,116,106,117,106,118,106,119,106,120,106,122,106,123,106,125,106,126,106,127,106,129,106,130,106,131,106,133,106,134,106,135,106,136,106,137,106,138,106,139,106,140,106,141,106,143,106,146,106,147,106,148,106,149,106,150,106,152,106,153,106,154,106,155,106,156,106,157,106,158,106,159,106,161,106,162,106,163,106,164,106,165,106,166,106,167,106,168,106,170,106,173,106,174,106,175,106,176,106,177,106,178,106,179,106,180,106,181,106,182,106,183,106,184,106,185,106,186,106,187,106,188,106,189,106,190,106,191,106,192,106,193,106,194,106,195,106,196,106,197,106,198,106,199,106,200,106,201,106,202,106,203,106,204,106,205,106,206,106,207,106,208,106,209,106,210,106,211,106,212,106,213,106,214,106,215,106,216,106,217,106,218,106,219,106,220,106,221,106,222,106,223,106,224,106,225,106,226,106,227,106,228,106,229,106,230,106,231,106,232,106,233,106,234,106,235,106,236,106,237,106,238,106,239,106,240,106,241,106,242,106,243,106,244,106,245,106,246,106,247,106,248,106,249,106,250,106,251,106,252,106,253,106,254,106,255,106,0,107,1,107,2,107,3,107,4,107,5,107,6,107,7,107,8,107,9,107,10,107,11,107,12,107,13,107,14,107,15,107,16,107,17,107,18,107,19,107,20,107,21,107,22,107,23,107,24,107,25,107,26,107,27,107,28,107,29,107,30,107,31,107,37,107,38,107,40,107,41,107,42,107,43,107,44,107,45,107,46,107,47,107,48,107,49,107,51,107,52,107,53,107,54,107,56,107,59,107,60,107,61,107,63,107,64,107,65,107,66,107,68,107,69,107,72,107,74,107,75,107,77,107,78,107,79,107,80,107,81,107,82,107,83,107,84,107,85,107,86,107,87,107,88,107,90,107,91,107,92,107,93,107,94,107,95,107,96,107,97,107,104,107,105,107,107,107,108,107,109,107,110,107,111,107,112,107,113,107,114,107,115,107,116,107,117,107,118,107,119,107,120,107,122,107,125,107,126,107,127,107,128,107,133,107,136,107,140,107,142,107,143,107,144,107,145,107,148,107,149,107,151,107,152,107,153,107,156,107,157,107,158,107,159,107,160,107,162,107,163,107,164,107,165,107,166,107,167,107,168,107,169,107,171,107,172,107,173,107,174,107,175,107,176,107,177,107,178,107,182,107,184,107,185,107,186,107,187,107,188,107,189,107,190,107,192,107,195,107,196,107,198,107,199,107,200,107,201,107,202,107,204,107,206,107,208,107,209,107,216,107,218,107,220,107,221,107,222,107,223,107,224,107,226,107,227,107,228,107,229,107,230,107,231,107,232,107,233,107,236,107,237,107,238,107,240,107,241,107,242,107,244,107,246,107,247,107,248,107,250,107,251,107,252,107,254,107,255,107,0,108,1,108,2,108,3,108,4,108,8,108,9,108,10,108,11,108,12,108,14,108,18,108,23,108,28,108,29,108,30,108,32,108,35,108,37,108,43,108,44,108,45,108,49,108,51,108,54,108,55,108,57,108,58,108,59,108,60,108,62,108,63,108,67,108,68,108,69,108,72,108,75,108,76,108,77,108,78,108,79,108,81,108,82,108,83,108,86,108,88,108,89,108,90,108,98,108,99,108,101,108,102,108,103,108,107,108,108,108,109,108,110,108,111,108,113,108,115,108,117,108,119,108,120,108,122,108,123,108,124,108,127,108,128,108,132,108,135,108,138,108,139,108,141,108,142,108,145,108,146,108,149,108,150,108,151,108,152,108,154,108,156,108,157,108,158,108,160,108,162,108,168,108,172,108,175,108,176,108,180,108,181,108,182,108,183,108,186,108,192,108,193,108,194,108,195,108,198,108,199,108,200,108,203,108,205,108,206,108,207,108,209,108,210,108,216,108,217,108,218,108,220,108,221,108,223,108,228,108,230,108,231,108,233,108,236,108,237,108,242,108,244,108,249,108,255,108,0,109,2,109,3,109,5,109,6,109,8,109,9,109,10,109,13,109,15,109,16,109,17,109,19,109,20,109,21,109,22,109,24,109,28,109,29,109,31,109,32,109,33,109,34,109,35,109,36,109,38,109,40,109,41,109,44,109,45,109,47,109,48,109,52,109,54,109,55,109,56,109,58,109,63,109,64,109,66,109,68,109,73,109,76,109,80,109,85,109,86,109,87,109,88,109,91,109,93,109,95,109,97,109,98,109,100,109,101,109,103,109,104,109,107,109,108,109,109,109,112,109,113,109,114,109,115,109,117,109,118,109,121,109,122,109,123,109,125,109,126,109,127,109,128,109,129,109,131,109,132,109,134,109,135,109,138,109,139,109,141,109,143,109,144,109,146,109,150,109,151,109,152,109,153,109,154,109,156,109,162,109,165,109,172,109,173,109,176,109,177,109,179,109,180,109,182,109,183,109,185,109,186,109,187,109,188,109,189,109,190,109,193,109,194,109,195,109,200,109,201,109,202,109,205,109,206,109,207,109,208,109,210,109,211,109,212,109,213,109,215,109,218,109,219,109,220,109,223,109,226,109,227,109,229,109,231,109,232,109,233,109,234,109,237,109,239,109,240,109,242,109,244,109,245,109,246,109,248,109,250,109,253,109,254,109,255,109,0,110,1,110,2,110,3,110,4,110,6,110,7,110,8,110,9,110,11,110,15,110,18,110,19,110,21,110,24,110,25,110,27,110,28,110,30,110,31,110,34,110,38,110,39,110,40,110,42,110,44,110,46,110,48,110,49,110,51,110,53,110,54,110,55,110,57,110,59,110,60,110,61,110,62,110,63,110,64,110,65,110,66,110,69,110,70,110,71,110,72,110,73,110,74,110,75,110,76,110,79,110,80,110,81,110,82,110,85,110,87,110,89,110,90,110,92,110,93,110,94,110,96,110,97,110,98,110,99,110,100,110,101,110,102,110,103,110,104,110,105,110,106,110,108,110,109,110,111,110,112,110,113,110,114,110,115,110,116,110,117,110,118,110,119,110,120,110,121,110,122,110,123,110,124,110,125,110,128,110,129,110,130,110,132,110,135,110,136,110,138,110,139,110,140,110,141,110,142,110,145,110,146,110,147,110,148,110,149,110,150,110,151,110,153,110,154,110,155,110,157,110,158,110,160,110,161,110,163,110,164,110,166,110,168,110,169,110,171,110,172,110,173,110,174,110,176,110,179,110,181,110,184,110,185,110,188,110,190,110,191,110,192,110,195,110,196,110,197,110,198,110,200,110,201,110,202,110,204,110,205,110,206,110,208,110,210,110,214,110,216,110,217,110,219,110,220,110,221,110,227,110,231,110,234,110,235,110,236,110,237,110,238,110,239,110,240,110,241,110,242,110,243,110,245,110,246,110,247,110,248,110,250,110,251,110,252,110,253,110,254,110,255,110,0,111,1,111,3,111,4,111,5,111,7,111,8,111,10,111,11,111,12,111,13,111,14,111,16,111,17,111,18,111,22,111,23,111,24,111,25,111,26,111,27,111,28,111,29,111,30,111,31,111,33,111,34,111,35,111,37,111,38,111,39,111,40,111,44,111,46,111,48,111,50,111,52,111,53,111,55,111,56,111,57,111,58,111,59,111,60,111,61,111,63,111,64,111,65,111,66,111,67,111,68,111,69,111,72,111,73,111,74,111,76,111,78,111,79,111,80,111,81,111,82,111,83,111,84,111,85,111,86,111,87,111,89,111,90,111,91,111,93,111,95,111,96,111,97,111,99,111,100,111,101,111,103,111,104,111,105,111,106,111,107,111,108,111,111,111,112,111,113,111,115,111,117,111,118,111,119,111,121,111,123,111,125,111,126,111,127,111,128,111,129,111,130,111,131,111,133,111,134,111,135,111,138,111,139,111,143,111,144,111,145,111,146,111,147,111,148,111,149,111,150,111,151,111,152,111,153,111,154,111,155,111,157,111,158,111,159,111,160,111,162,111,163,111,164,111,165,111,166,111,168,111,169,111,170,111,171,111,172,111,173,111,174,111,175,111,176,111,177,111,178,111,180,111,181,111,183,111,184,111,186,111,187,111,188,111,189,111,190,111,191,111,193,111,195,111,196,111,197,111,198,111,199,111,200,111,202,111,203,111,204,111,205,111,206,111,207,111,208,111,211,111,212,111,213,111,214,111,215,111,216,111,217,111,218,111,219,111,220,111,221,111,223,111,226,111,227,111,228,111,229,111,230,111,231,111,232,111,233,111,234,111,235,111,236,111,237,111,240,111,241,111,242,111,243,111,244,111,245,111,246,111,247,111,248,111,249,111,250,111,251,111,252,111,253,111,254,111,255,111,0,112,1,112,2,112,3,112,4,112,5,112,6,112,7,112,8,112,9,112,10,112,11,112,12,112,13,112,14,112,15,112,16,112,18,112,19,112,20,112,21,112,22,112,23,112,24,112,25,112,28,112,29,112,30,112,31,112,32,112,33,112,34,112,36,112,37,112,38,112,39,112,40,112,41,112,42,112,43,112,44,112,45,112,46,112,47,112,48,112,49,112,50,112,51,112,52,112,54,112,55,112,56,112,58,112,59,112,60,112,61,112,62,112,63,112,64,112,65,112,66,112,67,112,68,112,69,112,70,112,71,112,72,112,73,112,74,112,75,112,77,112,78,112,80,112,81,112,82,112,83,112,84,112,85,112,86,112,87,112,88,112,89,112,90,112,91,112,92,112,93,112,95,112,96,112,97,112,98,112,99,112,100,112,101,112,102,112,103,112,104,112,105,112,106,112,110,112,113,112,114,112,115,112,116,112,119,112,121,112,122,112,123,112,125,112,129,112,130,112,131,112,132,112,134,112,135,112,136,112,139,112,140,112,141,112,143,112,144,112,145,112,147,112,151,112,152,112,154,112,155,112,158,112,159,112,160,112,161,112,162,112,163,112,164,112,165,112,166,112,167,112,168,112,169,112,170,112,176,112,178,112,180,112,181,112,182,112,186,112,190,112,191,112,196,112,197,112,198,112,199,112,201,112,203,112,204,112,205,112,206,112,207,112,208,112,209,112,210,112,211,112,212,112,213,112,214,112,215,112,218,112,220,112,221,112,222,112,224,112,225,112,226,112,227,112,229,112,234,112,238,112,240,112,241,112,242,112,243,112,244,112,245,112,246,112,248,112,250,112,251,112,252,112,254,112,255,112,0,113,1,113,2,113,3,113,4,113,5,113,6,113,7,113,8,113,11,113,12,113,13,113,14,113,15,113,17,113,18,113,20,113,23,113,27,113,28,113,29,113,30,113,31,113,32,113,33,113,34,113,35,113,36,113,37,113,39,113,40,113,41,113,42,113,43,113,44,113,45,113,46,113,50,113,51,113,52,113,53,113,55,113,56,113,57,113,58,113,59,113,60,113,61,113,62,113,63,113,64,113,65,113,66,113,67,113,68,113,70,113,71,113,72,113,73,113,75,113,77,113,79,113,80,113,81,113,82,113,83,113,84,113,85,113,86,113,87,113,88,113,89,113,90,113,91,113,93,113,95,113,96,113,97,113,98,113,99,113,101,113,105,113,106,113,107,113,108,113,109,113,111,113,112,113,113,113,116,113,117,113,118,113,119,113,121,113,123,113,124,113,126,113,127,113,128,113,129,113,130,113,131,113,133,113,134,113,135,113,136,113,137,113,139,113,140,113,141,113,142,113,144,113,145,113,146,113,147,113,149,113,150,113,151,113,154,113,155,113,156,113,157,113,158,113,161,113,162,113,163,113,164,113,165,113,166,113,167,113,169,113,170,113,171,113,173,113,174,113,175,113,176,113,177,113,178,113,180,113,182,113,183,113,184,113,186,113,187,113,188,113,189,113,190,113,191,113,192,113,193,113,194,113,196,113,197,113,198,113,199,113,200,113,201,113,202,113,203,113,204,113,205,113,207,113,208,113,209,113,210,113,211,113,214,113,215,113,216,113,217,113,218,113,219,113,220,113,221,113,222,113,223,113,225,113,226,113,227,113,228,113,230,113,232,113,233,113,234,113,235,113,236,113,237,113,239,113,240,113,241,113,242,113,243,113,244,113,245,113,246,113,247,113,248,113,250,113,251,113,252,113,253,113,254,113,255,113,0,114,1,114,2,114,3,114,4,114,5,114,7,114,8,114,9,114,10,114,11,114,12,114,13,114,14,114,15,114,16,114,17,114,18,114,19,114,20,114,21,114,22,114,23,114,24,114,25,114,26,114,27,114,28,114,30,114,31,114,32,114,33,114,34,114,35,114,36,114,37,114,38,114,39,114,41,114,43,114,45,114,46,114,47,114,50,114,51,114,52,114,58,114,60,114,62,114,64,114,65,114,66,114,67,114,68,114,69,114,70,114,73,114,74,114,75,114,78,114,79,114,80,114,81,114,83,114,84,114,85,114,87,114,88,114,90,114,92,114,94,114,96,114,99,114,100,114,101,114,104,114,106,114,107,114,108,114,109,114,112,114,113,114,115,114,116,114,118,114,119,114,120,114,123,114,124,114,125,114,130,114,131,114,133,114,134,114,135,114,136,114,137,114,140,114,142,114,144,114,145,114,147,114,148,114,149,114,150,114,151,114,152,114,153,114,154,114,155,114,156,114,157,114,158,114,160,114,161,114,162,114,163,114,164,114,165,114,166,114,167,114,168,114,169,114,170,114,171,114,174,114,177,114,178,114,179,114,181,114,186,114,187,114,188,114,189,114,190,114,191,114,192,114,197,114,198,114,199,114,201,114,202,114,203,114,204,114,207,114,209,114,211,114,212,114,213,114,214,114,216,114,218,114,219,114,198,228,199,228,200,228,201,228,202,228,203,228,204,228,205,228,206,228,207,228,208,228,209,228,210,228,211,228,212,228,213,228,214,228,215,228,216,228,217,228,218,228,219,228,220,228,221,228,222,228,223,228,224,228,225,228,226,228,227,228,228,228,229,228,230,228,231,228,232,228,233,228,234,228,235,228,236,228,237,228,238,228,239,228,240,228,241,228,242,228,243,228,244,228,245,228,246,228,247,228,248,228,249,228,250,228,251,228,252,228,253,228,254,228,255,228,0,229,1,229,2,229,3,229,4,229,5,229,6,229,7,229,8,229,9,229,10,229,11,229,12,229,13,229,14,229,15,229,16,229,17,229,18,229,19,229,20,229,21,229,22,229,23,229,24,229,25,229,26,229,27,229,28,229,29,229,30,229,31,229,32,229,33,229,34,229,35,229,36,229,37,229,0,48,1,48,2,48,183,0,201,2,199,2,168,0,3,48,5,48,20,32,94,255,22,32,38,32,24,32,25,32,28,32,29,32,20,48,21,48,8,48,9,48,10,48,11,48,12,48,13,48,14,48,15,48,22,48,23,48,16,48,17,48,177,0,215,0,247,0,54,34,39,34,40,34,17,34,15,34,42,34,41,34,8,34,55,34,26,34,165,34,37,34,32,34,18,35,153,34,43,34,46,34,97,34,76,34,72,34,61,34,29,34,96,34,110,34,111,34,100,34,101,34,30,34,53,34,52,34,66,38,64,38,176,0,50,32,51,32,3,33,4,255,164,0,224,255,225,255,48,32,167,0,22,33,6,38,5,38,203,37,207,37,206,37,199,37,198,37,161,37,160,37,179,37,178,37,59,32,146,33,144,33,145,33,147,33,19,48,38,229,39,229,40,229,41,229,42,229,43,229,44,229,45,229,46,229,47,229,48,229,49,229,50,229,51,229,52,229,53,229,54,229,55,229,56,229,57,229,58,229,59,229,60,229,61,229,62,229,63,229,64,229,65,229,66,229,67,229,68,229,69,229,70,229,71,229,72,229,73,229,74,229,75,229,76,229,77,229,78,229,79,229,80,229,81,229,82,229,83,229,84,229,85,229,86,229,87,229,88,229,89,229,90,229,91,229,92,229,93,229,94,229,95,229,96,229,97,229,98,229,99,229,100,229,101,229,102,229,103,229,104,229,105,229,106,229,107,229,108,229,109,229,110,229,111,229,112,229,113,229,114,229,115,229,116,229,117,229,118,229,119,229,120,229,121,229,122,229,123,229,124,229,125,229,126,229,127,229,128,229,129,229,130,229,131,229,132,229,133,229,112,33,113,33,114,33,115,33,116,33,117,33,118,33,119,33,120,33,121,33,102,231,103,231,104,231,105,231,106,231,107,231,136,36,137,36,138,36,139,36,140,36,141,36,142,36,143,36,144,36,145,36,146,36,147,36,148,36,149,36,150,36,151,36,152,36,153,36,154,36,155,36,116,36,117,36,118,36,119,36,120,36,121,36,122,36,123,36,124,36,125,36,126,36,127,36,128,36,129,36,130,36,131,36,132,36,133,36,134,36,135,36,96,36,97,36,98,36,99,36,100,36,101,36,102,36,103,36,104,36,105,36,172,32,109,231,32,50,33,50,34,50,35,50,36,50,37,50,38,50,39,50,40,50,41,50,110,231,111,231,96,33,97,33,98,33,99,33,100,33,101,33,102,33,103,33,104,33,105,33,106,33,107,33,112,231,113,231,134,229,135,229,136,229,137,229,138,229,139,229,140,229,141,229,142,229,143,229,144,229,145,229,146,229,147,229,148,229,149,229,150,229,151,229,152,229,153,229,154,229,155,229,156,229,157,229,158,229,159,229,160,229,161,229,162,229,163,229,164,229,165,229,166,229,167,229,168,229,169,229,170,229,171,229,172,229,173,229,174,229,175,229,176,229,177,229,178,229,179,229,180,229,181,229,182,229,183,229,184,229,185,229,186,229,187,229,188,229,189,229,190,229,191,229,192,229,193,229,194,229,195,229,196,229,197,229,198,229,199,229,200,229,201,229,202,229,203,229,204,229,205,229,206,229,207,229,208,229,209,229,210,229,211,229,212,229,213,229,214,229,215,229,216,229,217,229,218,229,219,229,220,229,221,229,222,229,223,229,224,229,225,229,226,229,227,229,228,229,229,229,1,255,2,255,3,255,229,255,5,255,6,255,7,255,8,255,9,255,10,255,11,255,12,255,13,255,14,255,15,255,16,255,17,255,18,255,19,255,20,255,21,255,22,255,23,255,24,255,25,255,26,255,27,255,28,255,29,255,30,255,31,255,32,255,33,255,34,255,35,255,36,255,37,255,38,255,39,255,40,255,41,255,42,255,43,255,44,255,45,255,46,255,47,255,48,255,49,255,50,255,51,255,52,255,53,255,54,255,55,255,56,255,57,255,58,255,59,255,60,255,61,255,62,255,63,255,64,255,65,255,66,255,67,255,68,255,69,255,70,255,71,255,72,255,73,255,74,255,75,255,76,255,77,255,78,255,79,255,80,255,81,255,82,255,83,255,84,255,85,255,86,255,87,255,88,255,89,255,90,255,91,255,92,255,93,255,227,255,230,229,231,229,232,229,233,229,234,229,235,229,236,229,237,229,238,229,239,229,240,229,241,229,242,229,243,229,244,229,245,229,246,229,247,229,248,229,249,229,250,229,251,229,252,229,253,229,254,229,255,229,0,230,1,230,2,230,3,230,4,230,5,230,6,230,7,230,8,230,9,230,10,230,11,230,12,230,13,230,14,230,15,230,16,230,17,230,18,230,19,230,20,230,21,230,22,230,23,230,24,230,25,230,26,230,27,230,28,230,29,230,30,230,31,230,32,230,33,230,34,230,35,230,36,230,37,230,38,230,39,230,40,230,41,230,42,230,43,230,44,230,45,230,46,230,47,230,48,230,49,230,50,230,51,230,52,230,53,230,54,230,55,230,56,230,57,230,58,230,59,230,60,230,61,230,62,230,63,230,64,230,65,230,66,230,67,230,68,230,69,230,65,48,66,48,67,48,68,48,69,48,70,48,71,48,72,48,73,48,74,48,75,48,76,48,77,48,78,48,79,48,80,48,81,48,82,48,83,48,84,48,85,48,86,48,87,48,88,48,89,48,90,48,91,48,92,48,93,48,94,48,95,48,96,48,97,48,98,48,99,48,100,48,101,48,102,48,103,48,104,48,105,48,106,48,107,48,108,48,109,48,110,48,111,48,112,48,113,48,114,48,115,48,116,48,117,48,118,48,119,48,120,48,121,48,122,48,123,48,124,48,125,48,126,48,127,48,128,48,129,48,130,48,131,48,132,48,133,48,134,48,135,48,136,48,137,48,138,48,139,48,140,48,141,48,142,48,143,48,144,48,145,48,146,48,147,48,114,231,115,231,116,231,117,231,118,231,119,231,120,231,121,231,122,231,123,231,124,231,70,230,71,230,72,230,73,230,74,230,75,230,76,230,77,230,78,230,79,230,80,230,81,230,82,230,83,230,84,230,85,230,86,230,87,230,88,230,89,230,90,230,91,230,92,230,93,230,94,230,95,230,96,230,97,230,98,230,99,230,100,230,101,230,102,230,103,230,104,230,105,230,106,230,107,230,108,230,109,230,110,230,111,230,112,230,113,230,114,230,115,230,116,230,117,230,118,230,119,230,120,230,121,230,122,230,123,230,124,230,125,230,126,230,127,230,128,230,129,230,130,230,131,230,132,230,133,230,134,230,135,230,136,230,137,230,138,230,139,230,140,230,141,230,142,230,143,230,144,230,145,230,146,230,147,230,148,230,149,230,150,230,151,230,152,230,153,230,154,230,155,230,156,230,157,230,158,230,159,230,160,230,161,230,162,230,163,230,164,230,165,230,161,48,162,48,163,48,164,48,165,48,166,48,167,48,168,48,169,48,170,48,171,48,172,48,173,48,174,48,175,48,176,48,177,48,178,48,179,48,180,48,181,48,182,48,183,48,184,48,185,48,186,48,187,48,188,48,189,48,190,48,191,48,192,48,193,48,194,48,195,48,196,48,197,48,198,48,199,48,200,48,201,48,202,48,203,48,204,48,205,48,206,48,207,48,208,48,209,48,210,48,211,48,212,48,213,48,214,48,215,48,216,48,217,48,218,48,219,48,220,48,221,48,222,48,223,48,224,48,225,48,226,48,227,48,228,48,229,48,230,48,231,48,232,48,233,48,234,48,235,48,236,48,237,48,238,48,239,48,240,48,241,48,242,48,243,48,244,48,245,48,246,48,125,231,126,231,127,231,128,231,129,231,130,231,131,231,132,231,166,230,167,230,168,230,169,230,170,230,171,230,172,230,173,230,174,230,175,230,176,230,177,230,178,230,179,230,180,230,181,230,182,230,183,230,184,230,185,230,186,230,187,230,188,230,189,230,190,230,191,230,192,230,193,230,194,230,195,230,196,230,197,230,198,230,199,230,200,230,201,230,202,230,203,230,204,230,205,230,206,230,207,230,208,230,209,230,210,230,211,230,212,230,213,230,214,230,215,230,216,230,217,230,218,230,219,230,220,230,221,230,222,230,223,230,224,230,225,230,226,230,227,230,228,230,229,230,230,230,231,230,232,230,233,230,234,230,235,230,236,230,237,230,238,230,239,230,240,230,241,230,242,230,243,230,244,230,245,230,246,230,247,230,248,230,249,230,250,230,251,230,252,230,253,230,254,230,255,230,0,231,1,231,2,231,3,231,4,231,5,231,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,133,231,134,231,135,231,136,231,137,231,138,231,139,231,140,231,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,141,231,142,231,143,231,144,231,145,231,146,231,147,231,53,254,54,254,57,254,58,254,63,254,64,254,61,254,62,254,65,254,66,254,67,254,68,254,148,231,149,231,59,254,60,254,55,254,56,254,49,254,150,231,51,254,52,254,151,231,152,231,153,231,154,231,155,231,156,231,157,231,158,231,159,231,6,231,7,231,8,231,9,231,10,231,11,231,12,231,13,231,14,231,15,231,16,231,17,231,18,231,19,231,20,231,21,231,22,231,23,231,24,231,25,231,26,231,27,231,28,231,29,231,30,231,31,231,32,231,33,231,34,231,35,231,36,231,37,231,38,231,39,231,40,231,41,231,42,231,43,231,44,231,45,231,46,231,47,231,48,231,49,231,50,231,51,231,52,231,53,231,54,231,55,231,56,231,57,231,58,231,59,231,60,231,61,231,62,231,63,231,64,231,65,231,66,231,67,231,68,231,69,231,70,231,71,231,72,231,73,231,74,231,75,231,76,231,77,231,78,231,79,231,80,231,81,231,82,231,83,231,84,231,85,231,86,231,87,231,88,231,89,231,90,231,91,231,92,231,93,231,94,231,95,231,96,231,97,231,98,231,99,231,100,231,101,231,16,4,17,4,18,4,19,4,20,4,21,4,1,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,160,231,161,231,162,231,163,231,164,231,165,231,166,231,167,231,168,231,169,231,170,231,171,231,172,231,173,231,174,231,48,4,49,4,50,4,51,4,52,4,53,4,81,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,175,231,176,231,177,231,178,231,179,231,180,231,181,231,182,231,183,231,184,231,185,231,186,231,187,231,202,2,203,2,217,2,19,32,21,32,37,32,53,32,5,33,9,33,150,33,151,33,152,33,153,33,21,34,31,34,35,34,82,34,102,34,103,34,191,34,80,37,81,37,82,37,83,37,84,37,85,37,86,37,87,37,88,37,89,37,90,37,91,37,92,37,93,37,94,37,95,37,96,37,97,37,98,37,99,37,100,37,101,37,102,37,103,37,104,37,105,37,106,37,107,37,108,37,109,37,110,37,111,37,112,37,113,37,114,37,115,37,129,37,130,37,131,37,132,37,133,37,134,37,135,37,136,37,137,37,138,37,139,37,140,37,141,37,142,37,143,37,147,37,148,37,149,37,188,37,189,37,226,37,227,37,228,37,229,37,9,38,149,34,18,48,29,48,30,48,188,231,189,231,190,231,191,231,192,231,193,231,194,231,195,231,196,231,197,231,198,231,1,1,225,0,206,1,224,0,19,1,233,0,27,1,232,0,43,1,237,0,208,1,236,0,77,1,243,0,210,1,242,0,107,1,250,0,212,1,249,0,214,1,216,1,218,1,220,1,252,0,234,0,81,2,199,231,68,1,72,1,249,1,97,2,201,231,202,231,203,231,204,231,5,49,6,49,7,49,8,49,9,49,10,49,11,49,12,49,13,49,14,49,15,49,16,49,17,49,18,49,19,49,20,49,21,49,22,49,23,49,24,49,25,49,26,49,27,49,28,49,29,49,30,49,31,49,32,49,33,49,34,49,35,49,36,49,37,49,38,49,39,49,40,49,41,49,205,231,206,231,207,231,208,231,209,231,210,231,211,231,212,231,213,231,214,231,215,231,216,231,217,231,218,231,219,231,220,231,221,231,222,231,223,231,224,231,225,231,33,48,34,48,35,48,36,48,37,48,38,48,39,48,40,48,41,48,163,50,142,51,143,51,156,51,157,51,158,51,161,51,196,51,206,51,209,51,210,51,213,51,48,254,226,255,228,255,226,231,33,33,49,50,227,231,16,32,228,231,229,231,230,231,252,48,155,48,156,48,253,48,254,48,6,48,157,48,158,48,73,254,74,254,75,254,76,254,77,254,78,254,79,254,80,254,81,254,82,254,84,254,85,254,86,254,87,254,89,254,90,254,91,254,92,254,93,254,94,254,95,254,96,254,97,254,98,254,99,254,100,254,101,254,102,254,104,254,105,254,106,254,107,254,62,48,240,47,241,47,242,47,243,47,244,47,245,47,246,47,247,47,248,47,249,47,250,47,251,47,7,48,244,231,245,231,246,231,247,231,248,231,249,231,250,231,251,231,252,231,253,231,254,231,255,231,0,232,0,37,1,37,2,37,3,37,4,37,5,37,6,37,7,37,8,37,9,37,10,37,11,37,12,37,13,37,14,37,15,37,16,37,17,37,18,37,19,37,20,37,21,37,22,37,23,37,24,37,25,37,26,37,27,37,28,37,29,37,30,37,31,37,32,37,33,37,34,37,35,37,36,37,37,37,38,37,39,37,40,37,41,37,42,37,43,37,44,37,45,37,46,37,47,37,48,37,49,37,50,37,51,37,52,37,53,37,54,37,55,37,56,37,57,37,58,37,59,37,60,37,61,37,62,37,63,37,64,37,65,37,66,37,67,37,68,37,69,37,70,37,71,37,72,37,73,37,74,37,75,37,1,232,2,232,3,232,4,232,5,232,6,232,7,232,8,232,9,232,10,232,11,232,12,232,13,232,14,232,15,232,220,114,221,114,223,114,226,114,227,114,228,114,229,114,230,114,231,114,234,114,235,114,245,114,246,114,249,114,253,114,254,114,255,114,0,115,2,115,4,115,5,115,6,115,7,115,8,115,9,115,11,115,12,115,13,115,15,115,16,115,17,115,18,115,20,115,24,115,25,115,26,115,31,115,32,115,35,115,36,115,38,115,39,115,40,115,45,115,47,115,48,115,50,115,51,115,53,115,54,115,58,115,59,115,60,115,61,115,64,115,65,115,66,115,67,115,68,115,69,115,70,115,71,115,72,115,73,115,74,115,75,115,76,115,78,115,79,115,81,115,83,115,84,115,85,115,86,115,88,115,89,115,90,115,91,115,92,115,93,115,94,115,95,115,97,115,98,115,99,115,100,115,101,115,102,115,103,115,104,115,105,115,106,115,107,115,110,115,112,115,113,115,0,224,1,224,2,224,3,224,4,224,5,224,6,224,7,224,8,224,9,224,10,224,11,224,12,224,13,224,14,224,15,224,16,224,17,224,18,224,19,224,20,224,21,224,22,224,23,224,24,224,25,224,26,224,27,224,28,224,29,224,30,224,31,224,32,224,33,224,34,224,35,224,36,224,37,224,38,224,39,224,40,224,41,224,42,224,43,224,44,224,45,224,46,224,47,224,48,224,49,224,50,224,51,224,52,224,53,224,54,224,55,224,56,224,57,224,58,224,59,224,60,224,61,224,62,224,63,224,64,224,65,224,66,224,67,224,68,224,69,224,70,224,71,224,72,224,73,224,74,224,75,224,76,224,77,224,78,224,79,224,80,224,81,224,82,224,83,224,84,224,85,224,86,224,87,224,88,224,89,224,90,224,91,224,92,224,93,224,114,115,115,115,116,115,117,115,118,115,119,115,120,115,121,115,122,115,123,115,124,115,125,115,127,115,128,115,129,115,130,115,131,115,133,115,134,115,136,115,138,115,140,115,141,115,143,115,144,115,146,115,147,115,148,115,149,115,151,115,152,115,153,115,154,115,156,115,157,115,158,115,160,115,161,115,163,115,164,115,165,115,166,115,167,115,168,115,170,115,172,115,173,115,177,115,180,115,181,115,182,115,184,115,185,115,188,115,189,115,190,115,191,115,193,115,195,115,196,115,197,115,198,115,199,115,203,115,204,115,206,115,210,115,211,115,212,115,213,115,214,115,215,115,216,115,218,115,219,115,220,115,221,115,223,115,225,115,226,115,227,115,228,115,230,115,232,115,234,115,235,115,236,115,238,115,239,115,240,115,241,115,243,115,244,115,245,115,246,115,247,115,94,224,95,224,96,224,97,224,98,224,99,224,100,224,101,224,102,224,103,224,104,224,105,224,106,224,107,224,108,224,109,224,110,224,111,224,112,224,113,224,114,224,115,224,116,224,117,224,118,224,119,224,120,224,121,224,122,224,123,224,124,224,125,224,126,224,127,224,128,224,129,224,130,224,131,224,132,224,133,224,134,224,135,224,136,224,137,224,138,224,139,224,140,224,141,224,142,224,143,224,144,224,145,224,146,224,147,224,148,224,149,224,150,224,151,224,152,224,153,224,154,224,155,224,156,224,157,224,158,224,159,224,160,224,161,224,162,224,163,224,164,224,165,224,166,224,167,224,168,224,169,224,170,224,171,224,172,224,173,224,174,224,175,224,176,224,177,224,178,224,179,224,180,224,181,224,182,224,183,224,184,224,185,224,186,224,187,224,248,115,249,115,250,115,251,115,252,115,253,115,254,115,255,115,0,116,1,116,2,116,4,116,7,116,8,116,11,116,12,116,13,116,14,116,17,116,18,116,19,116,20,116,21,116,22,116,23,116,24,116,25,116,28,116,29,116,30,116,31,116,32,116,33,116,35,116,36,116,39,116,41,116,43,116,45,116,47,116,49,116,50,116,55,116,56,116,57,116,58,116,59,116,61,116,62,116,63,116,64,116,66,116,67,116,68,116,69,116,70,116,71,116,72,116,73,116,74,116,75,116,76,116,77,116,78,116,79,116,80,116,81,116,82,116,83,116,84,116,86,116,88,116,93,116,96,116,97,116,98,116,99,116,100,116,101,116,102,116,103,116,104,116,105,116,106,116,107,116,108,116,110,116,111,116,113,116,114,116,115,116,116,116,117,116,120,116,121,116,122,116,188,224,189,224,190,224,191,224,192,224,193,224,194,224,195,224,196,224,197,224,198,224,199,224,200,224,201,224,202,224,203,224,204,224,205,224,206,224,207,224,208,224,209,224,210,224,211,224,212,224,213,224,214,224,215,224,216,224,217,224,218,224,219,224,220,224,221,224,222,224,223,224,224,224,225,224,226,224,227,224,228,224,229,224,230,224,231,224,232,224,233,224,234,224,235,224,236,224,237,224,238,224,239,224,240,224,241,224,242,224,243,224,244,224,245,224,246,224,247,224,248,224,249,224,250,224,251,224,252,224,253,224,254,224,255,224,0,225,1,225,2,225,3,225,4,225,5,225,6,225,7,225,8,225,9,225,10,225,11,225,12,225,13,225,14,225,15,225,16,225,17,225,18,225,19,225,20,225,21,225,22,225,23,225,24,225,25,225,123,116,124,116,125,116,127,116,130,116,132,116,133,116,134,116,136,116,137,116,138,116,140,116,141,116,143,116,145,116,146,116,147,116,148,116,149,116,150,116,151,116,152,116,153,116,154,116,155,116,157,116,159,116,160,116,161,116,162,116,163,116,164,116,165,116,166,116,170,116,171,116,172,116,173,116,174,116,175,116,176,116,177,116,178,116,179,116,180,116,181,116,182,116,183,116,184,116,185,116,187,116,188,116,189,116,190,116,191,116,192,116,193,116,194,116,195,116,196,116,197,116,198,116,199,116,200,116,201,116,202,116,203,116,204,116,205,116,206,116,207,116,208,116,209,116,211,116,212,116,213,116,214,116,215,116,216,116,217,116,218,116,219,116,221,116,223,116,225,116,229,116,231,116,232,116,233,116,234,116,235,116,236,116,237,116,240,116,241,116,242,116,26,225,27,225,28,225,29,225,30,225,31,225,32,225,33,225,34,225,35,225,36,225,37,225,38,225,39,225,40,225,41,225,42,225,43,225,44,225,45,225,46,225,47,225,48,225,49,225,50,225,51,225,52,225,53,225,54,225,55,225,56,225,57,225,58,225,59,225,60,225,61,225,62,225,63,225,64,225,65,225,66,225,67,225,68,225,69,225,70,225,71,225,72,225,73,225,74,225,75,225,76,225,77,225,78,225,79,225,80,225,81,225,82,225,83,225,84,225,85,225,86,225,87,225,88,225,89,225,90,225,91,225,92,225,93,225,94,225,95,225,96,225,97,225,98,225,99,225,100,225,101,225,102,225,103,225,104,225,105,225,106,225,107,225,108,225,109,225,110,225,111,225,112,225,113,225,114,225,115,225,116,225,117,225,118,225,119,225,243,116,245,116,248,116,249,116,250,116,251,116,252,116,253,116,254,116,0,117,1,117,2,117,3,117,5,117,6,117,7,117,8,117,9,117,10,117,11,117,12,117,14,117,16,117,18,117,20,117,21,117,22,117,23,117,27,117,29,117,30,117,32,117,33,117,34,117,35,117,36,117,38,117,39,117,42,117,46,117,52,117,54,117,57,117,60,117,61,117,63,117,65,117,66,117,67,117,68,117,70,117,71,117,73,117,74,117,77,117,80,117,81,117,82,117,83,117,85,117,86,117,87,117,88,117,93,117,94,117,95,117,96,117,97,117,98,117,99,117,100,117,103,117,104,117,105,117,107,117,108,117,109,117,110,117,111,117,112,117,113,117,115,117,117,117,118,117,119,117,122,117,123,117,124,117,125,117,126,117,128,117,129,117,130,117,132,117,133,117,135,117,120,225,121,225,122,225,123,225,124,225,125,225,126,225,127,225,128,225,129,225,130,225,131,225,132,225,133,225,134,225,135,225,136,225,137,225,138,225,139,225,140,225,141,225,142,225,143,225,144,225,145,225,146,225,147,225,148,225,149,225,150,225,151,225,152,225,153,225,154,225,155,225,156,225,157,225,158,225,159,225,160,225,161,225,162,225,163,225,164,225,165,225,166,225,167,225,168,225,169,225,170,225,171,225,172,225,173,225,174,225,175,225,176,225,177,225,178,225,179,225,180,225,181,225,182,225,183,225,184,225,185,225,186,225,187,225,188,225,189,225,190,225,191,225,192,225,193,225,194,225,195,225,196,225,197,225,198,225,199,225,200,225,201,225,202,225,203,225,204,225,205,225,206,225,207,225,208,225,209,225,210,225,211,225,212,225,213,225,136,117,137,117,138,117,140,117,141,117,142,117,144,117,147,117,149,117,152,117,155,117,156,117,158,117,162,117,166,117,167,117,168,117,169,117,170,117,173,117,182,117,183,117,186,117,187,117,191,117,192,117,193,117,198,117,203,117,204,117,206,117,207,117,208,117,209,117,211,117,215,117,217,117,218,117,220,117,221,117,223,117,224,117,225,117,229,117,233,117,236,117,237,117,238,117,239,117,242,117,243,117,245,117,246,117,247,117,248,117,250,117,251,117,253,117,254,117,2,118,4,118,6,118,7,118,8,118,9,118,11,118,13,118,14,118,15,118,17,118,18,118,19,118,20,118,22,118,26,118,28,118,29,118,30,118,33,118,35,118,39,118,40,118,44,118,46,118,47,118,49,118,50,118,54,118,55,118,57,118,58,118,59,118,61,118,65,118,66,118,68,118,214,225,215,225,216,225,217,225,218,225,219,225,220,225,221,225,222,225,223,225,224,225,225,225,226,225,227,225,228,225,229,225,230,225,231,225,232,225,233,225,234,225,235,225,236,225,237,225,238,225,239,225,240,225,241,225,242,225,243,225,244,225,245,225,246,225,247,225,248,225,249,225,250,225,251,225], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+48626);
/* memory initializer */ allocate([252,225,253,225,254,225,255,225,0,226,1,226,2,226,3,226,4,226,5,226,6,226,7,226,8,226,9,226,10,226,11,226,12,226,13,226,14,226,15,226,16,226,17,226,18,226,19,226,20,226,21,226,22,226,23,226,24,226,25,226,26,226,27,226,28,226,29,226,30,226,31,226,32,226,33,226,34,226,35,226,36,226,37,226,38,226,39,226,40,226,41,226,42,226,43,226,44,226,45,226,46,226,47,226,48,226,49,226,50,226,51,226,69,118,70,118,71,118,72,118,73,118,74,118,75,118,78,118,79,118,80,118,81,118,82,118,83,118,85,118,87,118,88,118,89,118,90,118,91,118,93,118,95,118,96,118,97,118,98,118,100,118,101,118,102,118,103,118,104,118,105,118,106,118,108,118,109,118,110,118,112,118,113,118,114,118,115,118,116,118,117,118,118,118,119,118,121,118,122,118,124,118,127,118,128,118,129,118,131,118,133,118,137,118,138,118,140,118,141,118,143,118,144,118,146,118,148,118,149,118,151,118,152,118,154,118,155,118,156,118,157,118,158,118,159,118,160,118,161,118,162,118,163,118,165,118,166,118,167,118,168,118,169,118,170,118,171,118,172,118,173,118,175,118,176,118,179,118,181,118,182,118,183,118,184,118,185,118,186,118,187,118,188,118,189,118,190,118,192,118,193,118,195,118,74,85,63,150,195,87,40,99,206,84,9,85,192,84,145,118,76,118,60,133,238,119,126,130,141,120,49,114,152,150,141,151,40,108,137,91,250,79,9,99,151,102,184,92,250,128,72,104,174,128,2,102,206,118,249,81,86,101,172,113,241,127,132,136,178,80,101,89,202,97,179,111,173,130,76,99,82,98,237,83,39,84,6,123,107,81,164,117,244,93,212,98,203,141,118,151,138,98,25,128,93,87,56,151,98,127,56,114,125,118,207,103,126,118,70,100,112,79,37,141,220,98,23,122,145,101,237,115,44,100,115,98,44,130,129,152,127,103,72,114,110,98,204,98,52,79,227,116,74,83,158,82,202,126,166,144,46,94,134,104,156,105,128,129,209,126,210,104,197,120,140,134,81,149,141,80,36,140,222,130,222,128,5,83,18,137,101,82,196,118,199,118,201,118,203,118,204,118,211,118,213,118,217,118,218,118,220,118,221,118,222,118,224,118,225,118,226,118,227,118,228,118,230,118,231,118,232,118,233,118,234,118,235,118,236,118,237,118,240,118,243,118,245,118,246,118,247,118,250,118,251,118,253,118,255,118,0,119,2,119,3,119,5,119,6,119,10,119,12,119,14,119,15,119,16,119,17,119,18,119,19,119,20,119,21,119,22,119,23,119,24,119,27,119,28,119,29,119,30,119,33,119,35,119,36,119,37,119,39,119,42,119,43,119,44,119,46,119,48,119,49,119,50,119,51,119,52,119,57,119,59,119,61,119,62,119,63,119,66,119,68,119,69,119,70,119,72,119,73,119,74,119,75,119,76,119,77,119,78,119,79,119,82,119,83,119,84,119,85,119,86,119,87,119,88,119,89,119,92,119,132,133,249,150,221,79,33,88,113,153,157,91,177,98,165,98,180,102,121,140,141,156,6,114,111,103,145,120,178,96,81,83,23,83,136,143,204,128,29,141,161,148,13,80,200,114,7,89,235,96,25,113,171,136,84,89,239,130,44,103,40,123,41,93,247,126,45,117,245,108,102,142,248,143,60,144,59,159,212,107,25,145,20,123,124,95,167,120,214,132,61,133,213,107,217,107,214,107,1,94,135,94,249,117,237,149,93,101,10,95,197,95,159,143,193,88,194,129,127,144,91,150,173,151,185,143,22,127,44,141,65,98,191,79,216,83,94,83,168,143,169,143,171,143,77,144,7,104,106,95,152,129,104,136,214,156,139,97,43,82,42,118,108,95,140,101,210,111,232,110,190,91,72,100,117,81,176,81,196,103,25,78,201,121,124,153,179,112,93,119,94,119,95,119,96,119,100,119,103,119,105,119,106,119,109,119,110,119,111,119,112,119,113,119,114,119,115,119,116,119,117,119,118,119,119,119,120,119,122,119,123,119,124,119,129,119,130,119,131,119,134,119,135,119,136,119,137,119,138,119,139,119,143,119,144,119,147,119,148,119,149,119,150,119,151,119,152,119,153,119,154,119,155,119,156,119,157,119,158,119,161,119,163,119,164,119,166,119,168,119,171,119,173,119,174,119,175,119,177,119,178,119,180,119,182,119,183,119,184,119,185,119,186,119,188,119,190,119,192,119,193,119,194,119,195,119,196,119,197,119,198,119,199,119,200,119,201,119,202,119,203,119,204,119,206,119,207,119,208,119,209,119,210,119,211,119,212,119,213,119,214,119,216,119,217,119,218,119,221,119,222,119,223,119,224,119,225,119,228,119,197,117,118,94,187,115,224,131,173,100,232,98,181,148,226,108,90,83,195,82,15,100,194,148,148,123,47,79,27,94,54,130,22,129,138,129,36,110,202,108,115,154,85,99,92,83,250,84,101,136,224,87,13,78,3,94,101,107,63,124,232,144,22,96,230,100,28,115,193,136,80,103,77,98,34,141,108,119,41,142,199,145,105,95,220,131,33,133,16,153,194,83,149,134,139,107,237,96,232,96,127,112,205,130,49,130,211,78,167,108,207,133,205,100,217,124,253,105,249,102,73,131,149,83,86,123,167,79,140,81,75,109,66,92,109,142,210,99,201,83,44,131,54,131,229,103,180,120,61,100,223,91,148,92,238,93,231,139,198,98,244,103,122,140,0,100,186,99,73,135,139,153,23,140,32,127,242,148,167,78,16,150,164,152,12,102,22,115,230,119,232,119,234,119,239,119,240,119,241,119,242,119,244,119,245,119,247,119,249,119,250,119,251,119,252,119,3,120,4,120,5,120,6,120,7,120,8,120,10,120,11,120,14,120,15,120,16,120,19,120,21,120,25,120,27,120,30,120,32,120,33,120,34,120,36,120,40,120,42,120,43,120,46,120,47,120,49,120,50,120,51,120,53,120,54,120,61,120,63,120,65,120,66,120,67,120,68,120,70,120,72,120,73,120,74,120,75,120,77,120,79,120,81,120,83,120,84,120,88,120,89,120,90,120,91,120,92,120,94,120,95,120,96,120,97,120,98,120,99,120,100,120,101,120,102,120,103,120,104,120,105,120,111,120,112,120,113,120,114,120,115,120,116,120,117,120,118,120,120,120,121,120,122,120,123,120,125,120,126,120,127,120,128,120,129,120,130,120,131,120,58,87,29,92,56,94,127,149,127,80,160,128,130,83,94,101,69,117,49,85,33,80,133,141,132,98,158,148,29,103,50,86,110,111,226,93,53,84,146,112,102,143,111,98,164,100,163,99,123,95,136,111,244,144,227,129,176,143,24,92,104,102,241,95,137,108,72,150,129,141,108,136,145,100,240,121,206,87,89,106,16,98,72,84,88,78,11,122,233,96,132,111,218,139,127,98,30,144,139,154,228,121,3,84,244,117,1,99,25,83,96,108,223,143,27,95,112,154,59,128,127,159,136,79,58,92,100,141,197,127,165,101,189,112,69,81,178,81,107,134,7,93,160,91,189,98,108,145,116,117,12,142,32,122,1,97,121,123,199,78,248,126,133,119,17,78,237,129,29,82,250,81,113,106,168,83,135,142,4,149,207,150,193,110,100,150,90,105,132,120,133,120,134,120,136,120,138,120,139,120,143,120,144,120,146,120,148,120,149,120,150,120,153,120,157,120,158,120,160,120,162,120,164,120,166,120,168,120,169,120,170,120,171,120,172,120,173,120,174,120,175,120,181,120,182,120,183,120,184,120,186,120,187,120,188,120,189,120,191,120,192,120,194,120,195,120,196,120,198,120,199,120,200,120,204,120,205,120,206,120,207,120,209,120,210,120,211,120,214,120,215,120,216,120,218,120,219,120,220,120,221,120,222,120,223,120,224,120,225,120,226,120,227,120,228,120,229,120,230,120,231,120,233,120,234,120,235,120,237,120,238,120,239,120,240,120,241,120,243,120,245,120,246,120,248,120,249,120,251,120,252,120,253,120,254,120,255,120,0,121,2,121,3,121,4,121,6,121,7,121,8,121,9,121,10,121,11,121,12,121,64,120,168,80,215,119,16,100,230,137,4,89,227,99,221,93,127,122,61,105,32,79,57,130,152,85,50,78,174,117,151,122,98,94,138,94,239,149,27,82,57,84,138,112,118,99,36,149,130,87,37,102,63,105,135,145,7,85,243,109,175,126,34,136,51,98,240,126,181,117,40,131,193,120,204,150,158,143,72,97,247,116,205,139,100,107,58,82,80,141,33,107,106,128,113,132,241,86,6,83,206,78,27,78,209,81,151,124,139,145,7,124,195,79,127,142,225,123,156,122,103,100,20,93,172,80,6,129,1,118,185,124,236,109,224,127,81,103,88,91,248,91,203,120,174,100,19,100,170,99,43,99,25,149,45,100,190,143,84,123,41,118,83,98,39,89,70,84,121,107,163,80,52,98,38,94,134,107,227,78,55,141,139,136,133,95,46,144,13,121,14,121,15,121,16,121,17,121,18,121,20,121,21,121,22,121,23,121,24,121,25,121,26,121,27,121,28,121,29,121,31,121,32,121,33,121,34,121,35,121,37,121,38,121,39,121,40,121,41,121,42,121,43,121,44,121,45,121,46,121,47,121,48,121,49,121,50,121,51,121,53,121,54,121,55,121,56,121,57,121,61,121,63,121,66,121,67,121,68,121,69,121,71,121,74,121,75,121,76,121,77,121,78,121,79,121,80,121,81,121,82,121,84,121,85,121,88,121,89,121,97,121,99,121,100,121,102,121,105,121,106,121,107,121,108,121,110,121,112,121,113,121,114,121,115,121,116,121,117,121,118,121,121,121,123,121,124,121,125,121,126,121,127,121,130,121,131,121,134,121,135,121,136,121,137,121,139,121,140,121,141,121,142,121,144,121,145,121,146,121,32,96,61,128,197,98,57,78,85,83,248,144,184,99,198,128,230,101,46,108,70,79,238,96,225,109,222,139,57,95,203,134,83,95,33,99,90,81,97,131,99,104,0,82,99,99,72,142,18,80,155,92,119,121,252,91,48,82,59,122,188,96,83,144,215,118,183,95,151,95,132,118,108,142,111,112,123,118,73,123,170,119,243,81,147,144,36,88,78,79,244,110,234,143,76,101,27,123,196,114,164,109,223,127,225,90,181,98,149,94,48,87,130,132,44,123,29,94,31,95,18,144,20,127,160,152,130,99,199,110,152,120,185,112,120,81,91,151,171,87,53,117,67,79,56,117,151,94,230,96,96,89,192,109,191,107,137,120,252,83,213,150,203,81,1,82,137,99,10,84,147,148,3,140,204,141,57,114,159,120,118,135,237,143,13,140,224,83,147,121,148,121,149,121,150,121,151,121,152,121,153,121,155,121,156,121,157,121,158,121,159,121,160,121,161,121,162,121,163,121,164,121,165,121,166,121,168,121,169,121,170,121,171,121,172,121,173,121,174,121,175,121,176,121,177,121,178,121,180,121,181,121,182,121,183,121,184,121,188,121,191,121,194,121,196,121,197,121,199,121,200,121,202,121,204,121,206,121,207,121,208,121,211,121,212,121,214,121,215,121,217,121,218,121,219,121,220,121,221,121,222,121,224,121,225,121,226,121,229,121,232,121,234,121,236,121,238,121,241,121,242,121,243,121,244,121,245,121,246,121,247,121,249,121,250,121,252,121,254,121,255,121,1,122,4,122,5,122,7,122,8,122,9,122,10,122,12,122,15,122,16,122,17,122,18,122,19,122,21,122,22,122,24,122,25,122,27,122,28,122,1,78,239,118,238,83,137,148,118,152,14,159,45,149,154,91,162,139,34,78,28,78,172,81,99,132,194,97,168,82,11,104,151,79,107,96,187,81,30,109,92,81,150,98,151,101,97,150,70,140,23,144,216,117,253,144,99,119,210,107,138,114,236,114,251,139,53,88,121,119,76,141,92,103,64,149,154,128,166,94,33,110,146,89,239,122,237,119,59,149,181,107,173,101,14,127,6,88,81,81,31,150,249,91,169,88,40,84,114,142,102,101,127,152,228,86,157,148,254,118,65,144,135,99,198,84,26,89,58,89,155,87,178,142,53,103,250,141,53,130,65,82,240,96,21,88,254,134,232,92,69,158,196,79,157,152,185,139,37,90,118,96,132,83,124,98,79,144,2,145,127,153,105,96,12,128,63,81,51,128,20,92,117,153,49,109,140,78,29,122,31,122,33,122,34,122,36,122,37,122,38,122,39,122,40,122,41,122,42,122,43,122,44,122,45,122,46,122,47,122,48,122,49,122,50,122,52,122,53,122,54,122,56,122,58,122,62,122,64,122,65,122,66,122,67,122,68,122,69,122,71,122,72,122,73,122,74,122,75,122,76,122,77,122,78,122,79,122,80,122,82,122,83,122,84,122,85,122,86,122,88,122,89,122,90,122,91,122,92,122,93,122,94,122,95,122,96,122,97,122,98,122,99,122,100,122,101,122,102,122,103,122,104,122,105,122,106,122,107,122,108,122,109,122,110,122,111,122,113,122,114,122,115,122,117,122,123,122,124,122,125,122,126,122,130,122,133,122,135,122,137,122,138,122,139,122,140,122,142,122,143,122,144,122,147,122,148,122,153,122,154,122,155,122,158,122,161,122,162,122,48,141,209,83,90,127,79,123,16,79,79,78,0,150,213,108,208,115,233,133,6,94,106,117,251,127,10,106,254,119,146,148,65,126,225,81,230,112,205,83,212,143,3,131,41,141,175,114,109,153,219,108,74,87,179,130,185,101,170,128,63,98,50,150,168,89,255,78,191,139,186,126,62,101,242,131,94,151,97,85,222,152,165,128,42,83,253,139,32,84,186,128,159,94,184,108,57,141,172,130,90,145,41,84,27,108,6,82,183,126,95,87,26,113,126,108,137,124,75,89,253,78,255,95,36,97,170,124,48,78,1,92,171,103,2,135,240,92,11,149,206,152,175,117,253,112,34,144,175,81,29,127,189,139,73,89,228,81,91,79,38,84,43,89,119,101,164,128,117,91,118,98,194,98,144,143,69,94,31,108,38,123,15,79,216,79,13,103,163,122,164,122,167,122,169,122,170,122,171,122,174,122,175,122,176,122,177,122,178,122,180,122,181,122,182,122,183,122,184,122,185,122,186,122,187,122,188,122,189,122,190,122,192,122,193,122,194,122,195,122,196,122,197,122,198,122,199,122,200,122,201,122,202,122,204,122,205,122,206,122,207,122,208,122,209,122,210,122,211,122,212,122,213,122,215,122,216,122,218,122,219,122,220,122,221,122,225,122,226,122,228,122,231,122,232,122,233,122,234,122,235,122,236,122,238,122,240,122,241,122,242,122,243,122,244,122,245,122,246,122,247,122,248,122,251,122,252,122,254,122,0,123,1,123,2,123,5,123,7,123,9,123,12,123,13,123,14,123,16,123,18,123,19,123,22,123,23,123,24,123,26,123,28,123,29,123,31,123,33,123,34,123,35,123,39,123,41,123,45,123,110,109,170,109,143,121,177,136,23,95,43,117,154,98,133,143,239,79,220,145,167,101,47,129,81,129,156,94,80,129,116,141,111,82,134,137,75,141,13,89,133,80,216,78,28,150,54,114,121,129,31,141,204,91,163,139,68,150,135,89,26,127,144,84,118,86,14,86,229,139,57,101,130,105,153,148,214,118,137,110,114,94,24,117,70,103,209,103,255,122,157,128,118,141,31,97,198,121,98,101,99,141,136,81,26,82,162,148,56,127,155,128,178,126,151,92,47,110,96,103,217,123,139,118,216,154,143,129,148,127,213,124,30,100,80,149,63,122,74,84,229,84,76,107,1,100,8,98,61,158,243,128,153,117,114,82,105,151,91,132,60,104,228,134,1,150,148,150,236,148,42,78,4,84,217,126,57,104,223,141,21,128,244,102,154,94,185,127,47,123,48,123,50,123,52,123,53,123,54,123,55,123,57,123,59,123,61,123,63,123,64,123,65,123,66,123,67,123,68,123,70,123,72,123,74,123,77,123,78,123,83,123,85,123,87,123,89,123,92,123,94,123,95,123,97,123,99,123,100,123,101,123,102,123,103,123,104,123,105,123,106,123,107,123,108,123,109,123,111,123,112,123,115,123,116,123,118,123,120,123,122,123,124,123,125,123,127,123,129,123,130,123,131,123,132,123,134,123,135,123,136,123,137,123,138,123,139,123,140,123,142,123,143,123,145,123,146,123,147,123,150,123,152,123,153,123,154,123,155,123,158,123,159,123,160,123,163,123,164,123,165,123,174,123,175,123,176,123,178,123,179,123,181,123,182,123,183,123,185,123,186,123,187,123,188,123,189,123,190,123,191,123,192,123,194,123,195,123,196,123,194,87,63,128,151,104,229,93,59,101,159,82,109,96,154,159,155,79,172,142,108,81,171,91,19,95,233,93,94,108,241,98,33,141,113,81,169,148,254,82,159,108,223,130,215,114,162,87,132,103,45,141,31,89,156,143,199,131,149,84,141,123,48,79,189,108,100,91,209,89,19,159,228,83,202,134,168,154,55,140,161,128,69,101,126,152,250,86,199,150,46,82,220,116,80,82,225,91,2,99,2,137,86,78,208,98,42,96,250,104,115,81,152,91,160,81,194,137,161,123,134,153,80,127,239,96,76,112,47,141,73,81,127,94,27,144,112,116,196,137,45,87,69,120,82,95,159,159,250,149,104,143,60,155,225,139,120,118,66,104,220,103,234,141,53,141,61,82,138,143,218,110,205,104,5,149,237,144,253,86,156,103,249,136,199,143,200,84,197,123,200,123,201,123,202,123,203,123,205,123,206,123,207,123,208,123,210,123,212,123,213,123,214,123,215,123,216,123,219,123,220,123,222,123,223,123,224,123,226,123,227,123,228,123,231,123,232,123,233,123,235,123,236,123,237,123,239,123,240,123,242,123,243,123,244,123,245,123,246,123,248,123,249,123,250,123,251,123,253,123,255,123,0,124,1,124,2,124,3,124,4,124,5,124,6,124,8,124,9,124,10,124,13,124,14,124,16,124,17,124,18,124,19,124,20,124,21,124,23,124,24,124,25,124,26,124,27,124,28,124,29,124,30,124,32,124,33,124,34,124,35,124,36,124,37,124,40,124,41,124,43,124,44,124,45,124,46,124,47,124,48,124,49,124,50,124,51,124,52,124,53,124,54,124,55,124,57,124,58,124,59,124,60,124,61,124,62,124,66,124,184,154,105,91,119,109,38,108,165,78,179,91,135,154,99,145,168,97,175,144,233,151,43,84,181,109,210,91,253,81,138,85,85,127,240,127,188,100,77,99,241,101,190,97,141,96,10,113,87,108,73,108,47,89,109,103,42,130,213,88,142,86,106,140,235,107,221,144,125,89,23,128,247,83,105,109,117,84,157,85,119,131,207,131,56,104,190,121,140,84,85,79,8,84,210,118,137,140,2,150,179,108,184,109,107,141,16,137,100,158,58,141,63,86,209,158,213,117,136,95,224,114,104,96,252,84,168,78,42,106,97,136,82,96,112,143,196,84,216,112,121,134,63,158,42,109,143,91,24,95,162,126,137,85,175,79,52,115,60,84,154,83,25,80,14,84,124,84,78,78,253,95,90,116,246,88,107,132,225,128,116,135,208,114,202,124,86,110,67,124,68,124,69,124,70,124,71,124,72,124,73,124,74,124,75,124,76,124,78,124,79,124,80,124,81,124,82,124,83,124,84,124,85,124,86,124,87,124,88,124,89,124,90,124,91,124,92,124,93,124,94,124,95,124,96,124,97,124,98,124,99,124,100,124,101,124,102,124,103,124,104,124,105,124,106,124,107,124,108,124,109,124,110,124,111,124,112,124,113,124,114,124,117,124,118,124,119,124,120,124,121,124,122,124,126,124,127,124,128,124,129,124,130,124,131,124,132,124,133,124,134,124,135,124,136,124,138,124,139,124,140,124,141,124,142,124,143,124,144,124,147,124,148,124,150,124,153,124,154,124,155,124,160,124,161,124,163,124,166,124,167,124,168,124,169,124,171,124,172,124,173,124,175,124,176,124,180,124,181,124,182,124,183,124,184,124,186,124,187,124,39,95,78,134,44,85,164,98,146,78,170,108,55,98,177,130,215,84,78,83,62,115,209,110,59,117,18,82,22,83,221,139,208,105,138,95,0,96,238,109,79,87,34,107,175,115,83,104,216,143,19,127,98,99,163,96,36,85,234,117,98,140,21,113,163,109,166,91,123,94,82,131,76,97,196,158,250,120,87,135,39,124,135,118,240,81,246,96,76,113,67,102,76,94,77,96,14,140,112,112,37,99,137,143,189,95,98,96,212,134,222,86,193,107,148,96,103,97,73,83,224,96,102,102,63,141,253,121,26,79,233,112,71,108,179,139,242,139,216,126,100,131,15,102,90,90,66,155,81,109,247,109,65,140,59,109,25,79,107,112,183,131,22,98,209,96,13,151,39,141,120,121,251,81,62,87,250,87,58,103,120,117,61,122,239,121,149,123,191,124,192,124,194,124,195,124,196,124,198,124,201,124,203,124,206,124,207,124,208,124,209,124,210,124,211,124,212,124,216,124,218,124,219,124,221,124,222,124,225,124,226,124,227,124,228,124,229,124,230,124,231,124,233,124,234,124,235,124,236,124,237,124,238,124,240,124,241,124,242,124,243,124,244,124,245,124,246,124,247,124,249,124,250,124,252,124,253,124,254,124,255,124,0,125,1,125,2,125,3,125,4,125,5,125,6,125,7,125,8,125,9,125,11,125,12,125,13,125,14,125,15,125,16,125,17,125,18,125,19,125,20,125,21,125,22,125,23,125,24,125,25,125,26,125,27,125,28,125,29,125,30,125,31,125,33,125,35,125,36,125,37,125,38,125,40,125,41,125,42,125,44,125,45,125,46,125,48,125,49,125,50,125,51,125,52,125,53,125,54,125,140,128,101,153,249,143,192,111,165,139,33,158,236,89,233,126,9,127,9,84,129,103,216,104,145,143,77,124,198,150,202,83,37,96,190,117,114,108,115,83,201,90,167,126,36,99,224,81,10,129,241,93,223,132,128,98,128,81,99,91,14,79,109,121,66,82,184,96,78,109,196,91,194,91,161,139,176,139,226,101,204,95,69,150,147,89,231,126,170,126,9,86,183,103,57,89,115,79,182,91,160,82,90,131,138,152,62,141,50,117,190,148,71,80,60,122,247,78,182,103,126,154,193,90,124,107,209,118,90,87,22,92,58,123,244,149,78,113,124,81,169,128,112,130,120,89,4,127,39,131,192,104,236,103,177,120,119,120,227,98,97,99,128,123,237,79,106,82,207,81,80,131,219,105,116,146,245,141,49,141,193,137,46,149,173,123,246,78,55,125,56,125,57,125,58,125,59,125,60,125,61,125,62,125,63,125,64,125,65,125,66,125,67,125,68,125,69,125,70,125,71,125,72,125,73,125,74,125,75,125,76,125,77,125,78,125,79,125,80,125,81,125,82,125,83,125,84,125,85,125,86,125,87,125,88,125,89,125,90,125,91,125,92,125,93,125,94,125,95,125,96,125,97,125,98,125,99,125,100,125,101,125,102,125,103,125,104,125,105,125,106,125,107,125,108,125,109,125,111,125,112,125,113,125,114,125,115,125,116,125,117,125,118,125,120,125,121,125,122,125,123,125,124,125,125,125,126,125,127,125,128,125,129,125,130,125,131,125,132,125,133,125,134,125,135,125,136,125,137,125,138,125,139,125,140,125,141,125,142,125,143,125,144,125,145,125,146,125,147,125,148,125,149,125,150,125,151,125,152,125,101,80,48,130,81,82,111,153,16,110,133,110,167,109,250,94,245,80,220,89,6,92,70,109,95,108,134,117,139,132,104,104,86,89,178,139,32,83,113,145,77,150,73,133,18,105,1,121,38,113,246,128,164,78,202,144,71,109,132,154,7,90,188,86,5,100,240,148,235,119,165,79,26,129,225,114,210,137,122,153,52,127,222,126,127,82,89,101,117,145,127,143,131,143,235,83,150,122,237,99,165,99,134,118,248,121,87,136,54,150,42,98,171,82,130,130,84,104,112,103,119,99,107,119,237,122,1,109,211,126,227,137,208,89,18,98,201,133,165,130,76,117,31,80,203,78,165,117,235,139,74,92,254,93,75,123,164,101,209,145,202,78,37,109,95,137,39,125,38,149,197,78,40,140,219,143,115,151,75,102,129,121,209,143,236,112,120,109,153,125,154,125,155,125,156,125,157,125,158,125,159,125,160,125,161,125,162,125,163,125,164,125,165,125,167,125,168,125,169,125,170,125,171,125,172,125,173,125,175,125,176,125,177,125,178,125,179,125,180,125,181,125,182,125,183,125,184,125,185,125,186,125,187,125,188,125,189,125,190,125,191,125,192,125,193,125,194,125,195,125,196,125,197,125,198,125,199,125,200,125,201,125,202,125,203,125,204,125,205,125,206,125,207,125,208,125,209,125,210,125,211,125,212,125,213,125,214,125,215,125,216,125,217,125,218,125,219,125,220,125,221,125,222,125,223,125,224,125,225,125,226,125,227,125,228,125,229,125,230,125,231,125,232,125,233,125,234,125,235,125,236,125,237,125,238,125,239,125,240,125,241,125,242,125,243,125,244,125,245,125,246,125,247,125,248,125,249,125,250,125,61,92,178,82,70,131,98,81,14,131,91,119,118,102,184,156,172,78,202,96,190,124,179,124,207,126,149,78,102,139,111,102,136,152,89,151,131,88,108,101,92,149,132,95,201,117,86,151,223,122,222,122,192,81,175,112,152,122,234,99,118,122,160,126,150,115,237,151,69,78,120,112,93,78,82,145,169,83,81,101,231,101,252,129,5,130,142,84,49,92,154,117,160,151,216,98,217,114,189,117,69,92,121,154,202,131,64,92,128,84,233,119,62,78,174,108,90,128,210,98,110,99,232,93,119,81,221,141,30,142,47,149,241,79,229,83,231,96,172,112,103,82,80,99,67,158,31,90,38,80,55,119,119,83,226,126,133,100,43,101,137,98,152,99,20,80,53,114,201,137,179,81,192,139,221,126,71,87,204,131,167,148,155,81,27,84,251,92,251,125,252,125,253,125,254,125,255,125,0,126,1,126,2,126,3,126,4,126,5,126,6,126,7,126,8,126,9,126,10,126,11,126,12,126,13,126,14,126,15,126,16,126,17,126,18,126,19,126,20,126,21,126,22,126,23,126,24,126,25,126,26,126,27,126,28,126,29,126,30,126,31,126,32,126,33,126,34,126,35,126,36,126,37,126,38,126,39,126,40,126,41,126,42,126,43,126,44,126,45,126,46,126,47,126,48,126,49,126,50,126,51,126,52,126,53,126,54,126,55,126,56,126,57,126,58,126,60,126,61,126,62,126,63,126,64,126,66,126,67,126,68,126,69,126,70,126,72,126,73,126,74,126,75,126,76,126,77,126,78,126,79,126,80,126,81,126,82,126,83,126,84,126,85,126,86,126,87,126,88,126,89,126,90,126,91,126,92,126,93,126,202,79,227,122,90,109,225,144,143,154,128,85,150,84,97,83,175,84,0,95,233,99,119,105,239,81,104,97,10,82,42,88,216,82,78,87,13,120,11,119,183,94,119,97,224,124,91,98,151,98,162,78,149,112,3,128,247,98,228,112,96,151,119,87,219,130,239,103,245,104,213,120,151,152,209,121,243,88,179,84,239,83,52,110,75,81,59,82,162,91,254,139,175,128,67,85,166,87,115,96,81,87,45,84,122,122,80,96,84,91,167,99,160,98,227,83,99,98,199,91,175,103,237,84,159,122,230,130,119,145,147,94,228,136,56,89,174,87,14,99,232,141,239,128,87,87,119,123,169,79,235,95,189,91,62,107,33,83,80,123,194,114,70,104,255,119,54,119,247,101,181,81,143,78,212,118,191,92,165,122,117,132,78,89,65,155,128,80,94,126,95,126,96,126,97,126,98,126,99,126,100,126,101,126,102,126,103,126,104,126,105,126,106,126,107,126,108,126,109,126,110,126,111,126,112,126,113,126,114,126,115,126,116,126,117,126,118,126,119,126,120,126,121,126,122,126,123,126,124,126,125,126,126,126,127,126,128,126,129,126,131,126,132,126,133,126,134,126,135,126,136,126,137,126,138,126,139,126,140,126,141,126,142,126,143,126,144,126,145,126,146,126,147,126,148,126,149,126,150,126,151,126,152,126,153,126,154,126,156,126,157,126,158,126,174,126,180,126,187,126,188,126,214,126,228,126,236,126,249,126,10,127,16,127,30,127,55,127,57,127,59,127,60,127,61,127,62,127,63,127,64,127,65,127,67,127,70,127,71,127,72,127,73,127,74,127,75,127,76,127,77,127,78,127,79,127,82,127,83,127,136,153,39,97,131,110,100,87,6,102,70,99,240,86,236,98,105,98,211,94,20,150,131,87,201,98,135,85,33,135,74,129,163,143,102,85,177,131,101,103,86,141,221,132,106,90,15,104,230,98,238,123,17,150,112,81,156,111,48,140,253,99,200,137,210,97,6,127,194,112,229,110,5,116,148,105,252,114,202,94,206,144,23,103,106,109,94,99,179,82,98,114,1,128,108,79,229,89,106,145,217,112,157,109,210,82,80,78,247,150,109,149,126,133,202,120,47,125,33,81,146,87,194,100,139,128,123,124,234,108,241,104,94,105,183,81,152,83,168,104,129,114,206,158,241,123,248,114,187,121,19,111,6,116,78,103,204,145,164,156,60,121,137,131,84,131,15,84,23,104,61,78,137,83,177,82,62,120,134,83,41,82,136,80,139,79,208,79,86,127,89,127,91,127,92,127,93,127,94,127,96,127,99,127,100,127,101,127,102,127,103,127,107,127,108,127,109,127,111,127,112,127,115,127,117,127,118,127,119,127,120,127,122,127,123,127,124,127,125,127,127,127,128,127,130,127,131,127,132,127,133,127,134,127,135,127,136,127,137,127,139,127,141,127,143,127,144,127,145,127,146,127,147,127,149,127,150,127,151,127,152,127,153,127,155,127,156,127,160,127,162,127,163,127,165,127,166,127,168,127,169,127,170,127,171,127,172,127,173,127,174,127,177,127,179,127,180,127,181,127,182,127,183,127,186,127,187,127,190,127,192,127,194,127,195,127,196,127,198,127,199,127,200,127,201,127,203,127,205,127,207,127,208,127,209,127,210,127,211,127,214,127,215,127,217,127,218,127,219,127,220,127,221,127,222,127,226,127,227,127,226,117,203,122,146,124,165,108,182,150,155,82,131,116,233,84,233,79,84,128,178,131,222,143,112,149,201,94,28,96,159,109,24,94,91,101,56,129,254,148,75,96,188,112,195,126,174,124,201,81,129,104,177,124,111,130,36,78,134,143,207,145,126,102,174,78,5,140,169,100,74,128,218,80,151,117,206,113,229,91,189,143,102,111,134,78,130,100,99,149,214,94,153,101,23,82,194,136,200,112,163,82,14,115,51,116,151,103,247,120,22,151,52,78,187,144,222,156,203,109,219,81,65,141,29,84,206,98,178,115,241,131,246,150,132,159,195,148,54,79,154,127,204,81,117,112,117,150,173,92,134,152,230,83,228,78,156,110,9,116,180,105,107,120,143,153,89,117,24,82,36,118,65,109,243,103,109,81,153,159,75,128,153,84,60,123,191,122,228,127,231,127,232,127,234,127,235,127,236,127,237,127,239,127,242,127,244,127,245,127,246,127,247,127,248,127,249,127,250,127,253,127,254,127,255,127,2,128,7,128,8,128,9,128,10,128,14,128,15,128,17,128,19,128,26,128,27,128,29,128,30,128,31,128,33,128,35,128,36,128,43,128,44,128,45,128,46,128,47,128,48,128,50,128,52,128,57,128,58,128,60,128,62,128,64,128,65,128,68,128,69,128,71,128,72,128,73,128,78,128,79,128,80,128,81,128,83,128,85,128,86,128,87,128,89,128,91,128,92,128,93,128,94,128,95,128,96,128,97,128,98,128,99,128,100,128,101,128,102,128,103,128,104,128,107,128,108,128,109,128,110,128,111,128,112,128,114,128,115,128,116,128,117,128,118,128,119,128,120,128,121,128,122,128,123,128,124,128,125,128,134,150,132,87,226,98,71,150,124,105,4,90,2,100,211,123,15,111,75,150,166,130,98,83,133,152,144,94,137,112,179,99,100,83,79,134,129,156,147,158,140,120,50,151,239,141,66,141,127,158,94,111,132,121,85,95,70,150,46,98,116,154,21,84,221,148,163,79,197,101,101,92,97,92,21,127,81,134,47,108,139,95,135,115,228,110,255,126,230,92,27,99,106,91,230,110,117,83,113,78,160,99,101,117,161,98,110,143,38,79,209,78,166,108,182,126,186,139,29,132,186,135,87,127,59,144,35,149,169,123,161,154,248,136,61,132,27,109,134,154,220,126,136,89,187,158,155,115,1,120,130,134,108,154,130,154,27,86,23,84,203,87,112,78,166,158,86,83,200,143,9,129,146,119,146,153,238,134,225,110,19,133,252,102,98,97,43,111,126,128,129,128,130,128,133,128,136,128,138,128,141,128,142,128,143,128,144,128,145,128,146,128,148,128,149,128,151,128,153,128,158,128,163,128,166,128,167,128,168,128,172,128,176,128,179,128,181,128,182,128,184,128,185,128,187,128,197,128,199,128,200,128,201,128,202,128,203,128,207,128,208,128,209,128,210,128,211,128,212,128,213,128,216,128,223,128,224,128,226,128,227,128,230,128,238,128,245,128,247,128,249,128,251,128,254,128,255,128,0,129,1,129,3,129,4,129,5,129,7,129,8,129,11,129,12,129,21,129,23,129,25,129,27,129,28,129,29,129,31,129,32,129,33,129,34,129,35,129,36,129,37,129,38,129,39,129,40,129,41,129,42,129,43,129,45,129,46,129,48,129,51,129,52,129,53,129,55,129,57,129,58,129,59,129,60,129,61,129,63,129,41,140,146,130,43,131,242,118,19,108,217,95,189,131,43,115,5,131,26,149,219,107,219,119,198,148,111,83,2,131,146,81,61,94,140,140,56,141,72,78,171,115,154,103,133,104,118,145,9,151,100,113,161,108,9,119,146,90,65,149,207,107,142,127,39,102,208,91,185,89,154,90,232,149,247,149,236,78,12,132,153,132,172,106,223,118,48,149,27,115,166,104,95,91,47,119,154,145,97,151,220,124,247,143,28,140,37,95,115,124,216,121,197,137,204,108,28,135,198,91,66,94,201,104,32,119,245,126,149,81,77,81,201,82,41,90,5,127,98,151,215,130,207,99,132,119,208,133,210,121,58,110,153,94,153,89,17,133,109,112,17,108,191,98,191,118,79,101,175,96,253,149,14,102,159,135,35,158,237,148,13,84,125,84,44,140,120,100,64,129,65,129,66,129,67,129,68,129,69,129,71,129,73,129,77,129,78,129,79,129,82,129,86,129,87,129,88,129,91,129,92,129,93,129,94,129,95,129,97,129,98,129,99,129,100,129,102,129,104,129,106,129,107,129,108,129,111,129,114,129,115,129,117,129,118,129,119,129,120,129,129,129,131,129,132,129,133,129,134,129,135,129,137,129,139,129,140,129,141,129,142,129,144,129,146,129,147,129,148,129,149,129,150,129,151,129,153,129,154,129,158,129,159,129,160,129,161,129,162,129,164,129,165,129,167,129,169,129,171,129,172,129,173,129,174,129,175,129,176,129,177,129,178,129,180,129,181,129,182,129,183,129,184,129,185,129,188,129,189,129,190,129,191,129,196,129,197,129,199,129,200,129,201,129,203,129,205,129,206,129,207,129,208,129,209,129,210,129,211,129,121,100,17,134,33,106,156,129,232,120,105,100,84,155,185,98,43,103,171,131,168,88,216,158,171,108,32,111,222,91,76,150,11,140,95,114,208,103,199,98,97,114,169,78,198,89,205,107,147,88,174,102,85,94,223,82,85,97,40,103,238,118,102,119,103,114,70,122,255,98,234,84,80,84,160,148,163,144,28,90,179,126,22,108,67,78,118,89,16,128,72,89,87,83,55,117,190,150,202,86,32,99,17,129,124,96,249,149,214,109,98,84,129,153,133,81,233,90,253,128,174,89,19,151,42,80,229,108,60,92,223,98,96,79,63,83,123,129,6,144,186,110,43,133,200,98,116,94,190,120,181,100,123,99,245,95,24,90,127,145,31,158,63,92,79,99,66,128,125,91,110,85,74,149,77,149,133,109,168,96,224,103,222,114,221,81,129,91,212,129,213,129,214,129,215,129,216,129,217,129,218,129,219,129,220,129,221,129,222,129,223,129,224,129,225,129,226,129,228,129,229,129,230,129,232,129,233,129,235,129,238,129,239,129,240,129,241,129,242,129,245,129,246,129,247,129,248,129,249,129,250,129,253,129,255,129,3,130,7,130,8,130,9,130,10,130,11,130,14,130,15,130,17,130,19,130,21,130,22,130,23,130,24,130,25,130,26,130,29,130,32,130,36,130,37,130,38,130,39,130,41,130,46,130,50,130,58,130,60,130,61,130,63,130,64,130,65,130,66,130,67,130,69,130,70,130,72,130,74,130,76,130,77,130,78,130,80,130,81,130,82,130,83,130,84,130,85,130,86,130,87,130,89,130,91,130,92,130,93,130,94,130,96,130,97,130,98,130,99,130,100,130,101,130,102,130,103,130,105,130,231,98,222,108,91,114,109,98,174,148,189,126,19,129,83,109,156,81,4,95,116,89,170,82,18,96,115,89,150,102,80,134,159,117,42,99,230,97,239,124,250,139,230,84,39,107,37,158,180,107,213,133,85,84,118,80,164,108,106,85,180,141,44,114,21,94,21,96,54,116,205,98,146,99,76,114,152,95,67,110,62,109,0,101,88,111,216,118,208,120,252,118,84,117,36,82,219,83,83,78,158,94,193,101,42,128,214,128,155,98,134,84,40,82,174,112,141,136,209,141,225,108,120,84,218,128,249,87,244,136,84,141,106,150,77,145,105,79,155,108,183,85,198,118,48,120,168,98,249,112,142,111,109,95,236,132,218,104,124,120,247,123,168,129,11,103,79,158,103,99,176,120,111,87,18,120,57,151,121,98,171,98,136,82,53,116,215,107,106,130,107,130,108,130,109,130,113,130,117,130,118,130,119,130,120,130,123,130,124,130,128,130,129,130,131,130,133,130,134,130,135,130,137,130,140,130,144,130,147,130,148,130,149,130,150,130,154,130,155,130,158,130,160,130,162,130,163,130,167,130,178,130,181,130,182,130,186,130,187,130,188,130,191,130,192,130,194,130,195,130,197,130,198,130,201,130,208,130,214,130,217,130,218,130,221,130,226,130,231,130,232,130,233,130,234,130,236,130,237,130,238,130,240,130,242,130,243,130,245,130,246,130,248,130,250,130,252,130,253,130,254,130,255,130,0,131,10,131,11,131,13,131,16,131,18,131,19,131,22,131,24,131,25,131,29,131,30,131,31,131,32,131,33,131,34,131,35,131,36,131,37,131,38,131,41,131,42,131,46,131,48,131,50,131,55,131,59,131,61,131,100,85,62,129,178,117,174,118,57,83,222,117,251,80,65,92,108,139,199,123,79,80,71,114,151,154,216,152,2,111,226,116,104,121,135,100,165,119,252,98,145,152,43,141,193,84,88,128,82,78,106,87,249,130,13,132,115,94,237,81,246,116,196,139,79,92,97,87,252,108,135,152,70,90,52,120,68,155,235,143,149,124,86,82,81,98,250,148,198,78,134,131,97,132,233,131,178,132,212,87,52,103,3,87,110,102,102,109,49,140,221,102,17,112,31,103,58,107,22,104,26,98,187,89,3,78,196,81,6,111,210,103,143,108,118,81,203,104,71,89,103,107,102,117,14,93,16,129,80,159,215,101,72,121,65,121,145,154,119,141,130,92,94,78,1,79,47,84,81,89,12,120,104,86,20,108,196,143,3,95,125,108,227,108,171,139,144,99,62,131,63,131,65,131,66,131,68,131,69,131,72,131,74,131,75,131,76,131,77,131,78,131,83,131,85,131,86,131,87,131,88,131,89,131,93,131,98,131,112,131,113,131,114,131,115,131,116,131,117,131,118,131,121,131,122,131,126,131,127,131,128,131,129,131,130,131,131,131,132,131,135,131,136,131,138,131,139,131,140,131,141,131,143,131,144,131,145,131,148,131,149,131,150,131,151,131,153,131,154,131,157,131,159,131,161,131,162,131,163,131,164,131,165,131,166,131,167,131,172,131,173,131,174,131,175,131,181,131,187,131,190,131,191,131,194,131,195,131,196,131,198,131,200,131,201,131,203,131,205,131,206,131,208,131,209,131,210,131,211,131,213,131,215,131,217,131,218,131,219,131,222,131,226,131,227,131,228,131,230,131,231,131,232,131,235,131,236,131,237,131,112,96,61,109,117,114,102,98,142,148,197,148,67,83,193,143,126,123,223,78,38,140,126,78,212,158,177,148,179,148,77,82,92,111,99,144,69,109,52,140,17,88,76,93,32,107,73,107,170,103,91,84,84,129,140,127,153,88,55,133,58,95,162,98,71,106,57,149,114,101,132,96,101,104,167,119,84,78,168,79,231,93,152,151,172,100,216,127,237,92,207,79,141,122,7,82,4,131,20,78,47,96,131,122,166,148,181,79,178,78,230,121,52,116,228,82,185,130,210,100,189,121,221,91,129,108,82,151,123,143,34,108,62,80,127,83,5,110,206,100,116,102,48,108,197,96,119,152,247,139,134,94,60,116,119,122,203,121,24,78,177,144,3,116,66,108,218,86,75,145,197,108,139,141,58,83,198,134,242,102,175,142,72,92,113,154,32,110,238,131,239,131,243,131,244,131,245,131,246,131,247,131,250,131,251,131,252,131,254,131,255,131,0,132,2,132,5,132,7,132,8,132,9,132,10,132,16,132,18,132,19,132,20,132,21,132,22,132,23,132,25,132,26,132,27,132,30,132,31,132,32,132,33,132,34,132,35,132,41,132,42,132,43,132,44,132,45,132,46,132,47,132,48,132,50,132,51,132,52,132,53,132,54,132,55,132,57,132,58,132,59,132,62,132,63,132,64,132,65,132,66,132,67,132,68,132,69,132,71,132,72,132,73,132,74,132,75,132,76,132,77,132,78,132,79,132,80,132,82,132,83,132,84,132,85,132,86,132,88,132,93,132,94,132,95,132,96,132,98,132,100,132,101,132,102,132,103,132,104,132,106,132,110,132,111,132,112,132,114,132,116,132,119,132,121,132,123,132,124,132,214,83,54,90,139,159,163,141,187,83,8,87,167,152,67,103,155,145,201,108,104,81,202,117,243,98,172,114,56,82,157,82,58,127,148,112,56,118,116,83,74,158,183,105,110,120,192,150,217,136,164,127,54,113,195,113,137,81,211,103,228,116,228,88,24,101,183,86,169,139,118,153,112,98,213,126,249,96,237,112,236,88,193,78,186,78,205,95,231,151,251,78,164,139,3,82,138,89,171,126,84,98,205,78,229,101,14,98,56,131,201,132,99,131,141,135,148,113,182,110,185,91,210,126,151,81,201,99,212,103,137,128,57,131,21,136,18,81,122,91,130,89,177,143,115,78,93,108,101,81,37,137,111,143,46,150,74,133,94,116,16,149,240,149,166,109,229,130,49,95,146,100,18,109,40,132,110,129,195,156,94,88,91,141,9,78,193,83,125,132,126,132,127,132,128,132,129,132,131,132,132,132,133,132,134,132,138,132,141,132,143,132,144,132,145,132,146,132,147,132,148,132,149,132,150,132,152,132,154,132,155,132,157,132,158,132,159,132,160,132,162,132,163,132,164,132,165,132,166,132,167,132,168,132,169,132,170,132,171,132,172,132,173,132,174,132,176,132,177,132,179,132,181,132,182,132,183,132,187,132,188,132,190,132,192,132,194,132,195,132,197,132,198,132,199,132,200,132,203,132,204,132,206,132,207,132,210,132,212,132,213,132,215,132,216,132,217,132,218,132,219,132,220,132,222,132,225,132,226,132,228,132,231,132,232,132,233,132,234,132,235,132,237,132,238,132,239,132,241,132,242,132,243,132,244,132,245,132,246,132,247,132,248,132,249,132,250,132,251,132,253,132,254,132,0,133,1,133,2,133,30,79,99,101,81,104,211,85,39,78,20,100,154,154,107,98,194,90,95,116,114,130,169,109,238,104,231,80,142,131,2,120,64,103,57,82,153,108,177,126,187,80,101,85,94,113,91,123,82,102,202,115,235,130,73,103,113,92,32,82,125,113,107,136,234,149,85,150,197,100,97,141,179,129,132,85,85,108,71,98,46,127,146,88,36,79,70,85,79,141,76,102,10,78,26,92,243,136,162,104,78,99,13,122,231,112,141,130,250,82,246,151,17,92,232,84,181,144,205,126,98,89,74,141,199,134,12,130,13,130,102,141,68,100,4,92,81,97,137,109,62,121,190,139,55,120,51,117,123,84,56,79,171,142,241,109,32,90,197,126,94,121,136,108,161,91,118,90,26,117,190,128,78,97,23,110,240,88,31,117,37,117,114,114,71,83,243,126,3,133,4,133,5,133,6,133,7,133,8,133,9,133,10,133,11,133,13,133,14,133,15,133,16,133,18,133,20,133,21,133,22,133,24,133,25,133,27,133,28,133,29,133,30,133,32,133,34,133,35,133,36,133,37,133,38,133,39,133,40,133,41,133,42,133,45,133,46,133,47,133,48,133,49,133,50,133,51,133,52,133,53,133,54,133,62,133,63,133,64,133,65,133,66,133,68,133,69,133,70,133,71,133,75,133,76,133,77,133,78,133,79,133,80,133,81,133,82,133,83,133,84,133,85,133,87,133,88,133,90,133,91,133,92,133,93,133,95,133,96,133,97,133,98,133,99,133,101,133,102,133,103,133,105,133,106,133,107,133,108,133,109,133,110,133,111,133,112,133,113,133,115,133,117,133,118,133,119,133,120,133,124,133,125,133,127,133,128,133,129,133,1,119,219,118,105,82,220,128,35,87,8,94,49,89,238,114,189,101,127,110,215,139,56,92,113,134,65,83,243,119,254,98,246,101,192,78,223,152,128,134,158,91,198,139,242,83,226,119,127,79,78,92,118,154,203,89], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+58866);
/* memory initializer */ allocate([15,95,58,121,235,88,22,78,255,103,139,78,237,98,147,138,29,144,191,82,47,102,220,85,108,86,2,144,213,78,141,79,202,145,112,153,15,108,2,94,67,96,164,91,198,137,213,139,54,101,75,98,150,153,136,91,255,91,136,99,46,85,215,83,38,118,125,81,44,133,162,103,179,104,138,107,146,98,147,143,212,83,18,130,209,109,143,117,102,78,78,141,112,91,159,113,175,133,145,102,217,102,114,127,0,135,205,158,32,159,94,92,47,103,240,143,17,104,95,103,13,98,214,122,133,88,182,94,112,101,49,111,130,133,131,133,134,133,136,133,137,133,138,133,139,133,140,133,141,133,142,133,144,133,145,133,146,133,147,133,148,133,149,133,150,133,151,133,152,133,153,133,154,133,157,133,158,133,159,133,160,133,161,133,162,133,163,133,165,133,166,133,167,133,169,133,171,133,172,133,173,133,177,133,178,133,179,133,180,133,181,133,182,133,184,133,186,133,187,133,188,133,189,133,190,133,191,133,192,133,194,133,195,133,196,133,197,133,198,133,199,133,200,133,202,133,203,133,204,133,205,133,206,133,209,133,210,133,212,133,214,133,215,133,216,133,217,133,218,133,219,133,221,133,222,133,223,133,224,133,225,133,226,133,227,133,229,133,230,133,231,133,232,133,234,133,235,133,236,133,237,133,238,133,239,133,240,133,241,133,242,133,243,133,244,133,245,133,246,133,247,133,248,133,85,96,55,82,13,128,84,100,112,136,41,117,5,94,19,104,244,98,28,151,204,83,61,114,1,140,52,108,97,119,14,122,46,84,172,119,122,152,28,130,244,139,85,120,20,103,193,112,175,101,149,100,54,86,29,96,193,121,248,83,29,78,123,107,134,128,250,91,227,85,219,86,58,79,60,79,114,153,243,93,126,103,56,128,2,96,130,152,1,144,139,91,188,139,245,139,28,100,88,130,222,100,253,85,207,130,101,145,215,79,32,125,31,144,159,124,243,80,81,88,175,110,191,91,201,139,131,128,120,145,156,132,151,123,125,134,139,150,143,150,229,126,211,154,142,120,129,92,87,122,66,144,167,150,95,121,89,91,95,99,11,123,209,132,173,104,6,85,41,127,16,116,34,125,1,149,64,98,76,88,214,78,131,91,121,89,84,88,249,133,250,133,252,133,253,133,254,133,0,134,1,134,2,134,3,134,4,134,6,134,7,134,8,134,9,134,10,134,11,134,12,134,13,134,14,134,15,134,16,134,18,134,19,134,20,134,21,134,23,134,24,134,25,134,26,134,27,134,28,134,29,134,30,134,31,134,32,134,33,134,34,134,35,134,36,134,37,134,38,134,40,134,42,134,43,134,44,134,45,134,46,134,47,134,48,134,49,134,50,134,51,134,52,134,53,134,54,134,55,134,57,134,58,134,59,134,61,134,62,134,63,134,64,134,65,134,66,134,67,134,68,134,69,134,70,134,71,134,72,134,73,134,74,134,75,134,76,134,82,134,83,134,85,134,86,134,87,134,88,134,89,134,91,134,92,134,93,134,95,134,96,134,97,134,99,134,100,134,101,134,102,134,103,134,104,134,105,134,106,134,109,115,30,99,75,142,15,142,206,128,212,130,172,98,240,83,240,108,94,145,42,89,1,96,112,108,77,87,74,100,42,141,43,118,233,110,91,87,128,106,240,117,109,111,45,140,8,140,102,87,239,107,146,136,179,120,162,99,249,83,173,112,100,108,88,88,42,100,2,88,224,104,155,129,16,85,214,124,24,80,186,142,204,109,159,141,235,112,143,99,155,109,212,110,230,126,4,132,67,104,3,144,216,109,118,150,168,139,87,89,121,114,228,133,126,129,188,117,138,138,175,104,84,82,34,142,17,149,208,99,152,152,68,142,124,85,83,79,255,102,143,86,213,96,149,109,67,82,73,92,41,89,251,109,107,88,48,117,28,117,108,96,20,130,70,129,17,99,97,103,226,143,58,119,243,141,52,141,193,148,22,94,133,83,44,84,195,112,109,134,111,134,112,134,114,134,115,134,116,134,117,134,118,134,119,134,120,134,131,134,132,134,133,134,134,134,135,134,136,134,137,134,142,134,143,134,144,134,145,134,146,134,148,134,150,134,151,134,152,134,153,134,154,134,155,134,158,134,159,134,160,134,161,134,162,134,165,134,166,134,171,134,173,134,174,134,178,134,179,134,183,134,184,134,185,134,187,134,188,134,189,134,190,134,191,134,193,134,194,134,195,134,197,134,200,134,204,134,205,134,210,134,211,134,213,134,214,134,215,134,218,134,220,134,221,134,224,134,225,134,226,134,227,134,229,134,230,134,231,134,232,134,234,134,235,134,236,134,239,134,245,134,246,134,247,134,250,134,251,134,252,134,253,134,255,134,1,135,4,135,5,135,6,135,11,135,12,135,14,135,15,135,16,135,17,135,20,135,22,135,64,108,247,94,92,80,173,78,173,94,58,99,71,130,26,144,80,104,110,145,179,119,12,84,220,148,100,95,229,122,118,104,69,99,82,123,223,126,219,117,119,80,149,98,52,89,15,144,248,81,195,121,129,122,254,86,146,95,20,144,130,109,96,92,31,87,16,84,84,81,77,110,226,86,168,99,147,152,127,129,21,135,42,137,0,144,30,84,111,92,192,129,214,98,88,98,49,129,53,158,64,150,110,154,124,154,45,105,165,89,211,98,62,85,22,99,199,84,217,134,60,109,3,90,230,116,156,136,106,107,22,89,76,140,47,95,126,110,169,115,125,152,56,78,247,112,140,91,151,120,61,99,90,102,150,118,203,96,155,91,73,90,7,78,85,129,106,108,139,115,161,78,137,103,81,127,128,95,250,101,27,103,216,95,132,89,1,90,25,135,27,135,29,135,31,135,32,135,36,135,38,135,39,135,40,135,42,135,43,135,44,135,45,135,47,135,48,135,50,135,51,135,53,135,54,135,56,135,57,135,58,135,60,135,61,135,64,135,65,135,66,135,67,135,68,135,69,135,70,135,74,135,75,135,77,135,79,135,80,135,81,135,82,135,84,135,85,135,86,135,88,135,90,135,91,135,92,135,93,135,94,135,95,135,97,135,98,135,102,135,103,135,104,135,105,135,106,135,107,135,108,135,109,135,111,135,113,135,114,135,115,135,117,135,119,135,120,135,121,135,122,135,127,135,128,135,129,135,132,135,134,135,135,135,137,135,138,135,140,135,142,135,143,135,144,135,145,135,146,135,148,135,149,135,150,135,152,135,153,135,154,135,155,135,156,135,157,135,158,135,160,135,161,135,162,135,163,135,164,135,205,93,174,95,113,83,230,151,221,143,69,104,244,86,47,85,223,96,58,78,77,111,244,126,199,130,14,132,212,89,31,79,42,79,62,92,172,126,42,103,26,133,115,84,79,117,195,128,130,85,79,155,77,79,45,110,19,140,9,92,112,97,107,83,31,118,41,110,138,134,135,101,251,149,185,126,59,84,51,122,10,125,238,149,225,85,193,127,238,116,29,99,23,135,161,109,157,122,17,98,161,101,103,83,225,99,131,108,235,93,92,84,168,148,76,78,97,108,236,139,75,92,224,101,156,130,167,104,62,84,52,84,203,107,102,107,148,78,66,99,72,83,30,130,13,79,174,79,94,87,10,98,254,150,100,102,105,114,255,82,161,82,159,96,239,139,20,102,153,113,144,103,127,137,82,120,253,119,112,102,59,86,56,84,33,149,122,114,165,135,166,135,167,135,169,135,170,135,174,135,176,135,177,135,178,135,180,135,182,135,183,135,184,135,185,135,187,135,188,135,190,135,191,135,193,135,194,135,195,135,196,135,197,135,199,135,200,135,201,135,204,135,205,135,206,135,207,135,208,135,212,135,213,135,214,135,215,135,216,135,217,135,218,135,220,135,221,135,222,135,223,135,225,135,226,135,227,135,228,135,230,135,231,135,232,135,233,135,235,135,236,135,237,135,239,135,240,135,241,135,242,135,243,135,244,135,245,135,246,135,247,135,248,135,250,135,251,135,252,135,253,135,255,135,0,136,1,136,2,136,4,136,5,136,6,136,7,136,8,136,9,136,11,136,12,136,13,136,14,136,15,136,16,136,17,136,18,136,20,136,23,136,24,136,25,136,26,136,28,136,29,136,30,136,31,136,32,136,35,136,0,122,111,96,12,94,137,96,157,129,21,89,220,96,132,113,239,112,170,110,80,108,128,114,132,106,173,136,45,94,96,78,179,90,156,85,227,148,23,109,251,124,153,150,15,98,198,126,142,119,126,134,35,83,30,151,150,143,135,102,225,92,160,79,237,114,11,78,166,83,15,89,19,84,128,99,40,149,72,81,217,78,156,156,164,126,184,84,36,141,84,136,55,130,242,149,142,109,38,95,204,90,62,102,105,150,176,115,46,115,191,83,122,129,133,153,161,127,170,91,119,150,80,150,191,126,248,118,162,83,118,149,153,153,177,123,68,137,88,110,97,78,212,127,101,121,230,139,243,96,205,84,171,78,121,152,247,93,97,106,207,80,17,84,97,140,39,132,93,120,4,151,74,82,238,84,163,86,0,149,136,109,181,91,198,109,83,102,36,136,37,136,38,136,39,136,40,136,41,136,42,136,43,136,44,136,45,136,46,136,47,136,48,136,49,136,51,136,52,136,53,136,54,136,55,136,56,136,58,136,59,136,61,136,62,136,63,136,65,136,66,136,67,136,70,136,71,136,72,136,73,136,74,136,75,136,78,136,79,136,80,136,81,136,82,136,83,136,85,136,86,136,88,136,90,136,91,136,92,136,93,136,94,136,95,136,96,136,102,136,103,136,106,136,109,136,111,136,113,136,115,136,116,136,117,136,118,136,120,136,121,136,122,136,123,136,124,136,128,136,131,136,134,136,135,136,137,136,138,136,140,136,142,136,143,136,144,136,145,136,147,136,148,136,149,136,151,136,152,136,153,136,154,136,155,136,157,136,158,136,159,136,160,136,161,136,163,136,165,136,166,136,167,136,168,136,169,136,170,136,15,92,93,91,33,104,150,128,120,85,17,123,72,101,84,105,155,78,71,107,78,135,139,151,79,83,31,99,58,100,170,144,156,101,193,128,16,140,153,81,176,104,120,83,249,135,200,97,196,108,251,108,34,140,81,92,170,133,175,130,12,149,35,107,155,143,176,101,251,95,195,95,225,79,69,136,31,102,101,129,41,115,250,96,116,81,17,82,139,87,98,95,162,144,76,136,146,145,120,94,79,103,39,96,211,89,68,81,246,81,248,128,8,83,121,108,196,150,138,113,17,79,238,79,158,127,61,103,197,85,8,149,192,121,150,136,227,126,159,88,12,98,0,151,90,134,24,86,123,152,144,95,184,139,196,132,87,145,217,83,237,101,143,94,92,117,100,96,110,125,127,90,234,126,237,126,105,143,167,85,163,91,172,96,203,101,132,115,172,136,174,136,175,136,176,136,178,136,179,136,180,136,181,136,182,136,184,136,185,136,186,136,187,136,189,136,190,136,191,136,192,136,195,136,196,136,199,136,200,136,202,136,203,136,204,136,205,136,207,136,208,136,209,136,211,136,214,136,215,136,218,136,219,136,220,136,221,136,222,136,224,136,225,136,230,136,231,136,233,136,234,136,235,136,236,136,237,136,238,136,239,136,242,136,245,136,246,136,247,136,250,136,251,136,253,136,255,136,0,137,1,137,3,137,4,137,5,137,6,137,7,137,8,137,9,137,11,137,12,137,13,137,14,137,15,137,17,137,20,137,21,137,22,137,23,137,24,137,28,137,29,137,30,137,31,137,32,137,34,137,35,137,36,137,38,137,39,137,40,137,41,137,44,137,45,137,46,137,47,137,49,137,50,137,51,137,53,137,55,137,9,144,99,118,41,119,218,126,116,151,155,133,102,91,116,122,234,150,64,136,203,82,143,113,170,95,236,101,226,139,251,91,111,154,225,93,137,107,91,108,173,139,175,139,10,144,197,143,139,83,188,98,38,158,45,158,64,84,43,78,189,130,89,114,156,134,22,93,89,136,175,109,197,150,209,84,154,78,182,139,9,113,189,84,9,150,223,112,249,109,208,118,37,78,20,120,18,135,169,92,246,94,0,138,156,152,14,150,142,112,191,108,68,89,169,99,60,119,77,136,20,111,115,130,48,88,213,113,140,83,26,120,193,150,1,85,102,95,48,113,180,91,26,140,140,154,131,107,46,89,47,158,231,121,104,103,108,98,111,79,161,117,138,127,11,109,51,150,39,108,240,78,210,117,123,81,55,104,62,111,128,144,112,129,150,89,118,116,56,137,57,137,58,137,59,137,60,137,61,137,62,137,63,137,64,137,66,137,67,137,69,137,70,137,71,137,72,137,73,137,74,137,75,137,76,137,77,137,78,137,79,137,80,137,81,137,82,137,83,137,84,137,85,137,86,137,87,137,88,137,89,137,90,137,91,137,92,137,93,137,96,137,97,137,98,137,99,137,100,137,101,137,103,137,104,137,105,137,106,137,107,137,108,137,109,137,110,137,111,137,112,137,113,137,114,137,115,137,116,137,117,137,118,137,119,137,120,137,121,137,122,137,124,137,125,137,126,137,128,137,130,137,132,137,133,137,135,137,136,137,137,137,138,137,139,137,140,137,141,137,142,137,143,137,144,137,145,137,146,137,147,137,148,137,149,137,150,137,151,137,152,137,153,137,154,137,155,137,156,137,157,137,158,137,159,137,160,137,161,137,71,100,39,92,101,144,145,122,35,140,218,89,172,84,0,130,111,131,129,137,0,128,48,105,78,86,54,128,55,114,206,145,182,81,95,78,117,152,150,99,26,78,246,83,243,102,75,129,28,89,178,109,0,78,249,88,59,83,214,99,241,148,157,79,10,79,99,136,144,152,55,89,87,144,251,121,234,78,240,128,145,117,130,108,156,91,232,89,93,95,5,105,129,134,26,80,242,93,89,78,227,119,229,78,122,130,145,98,19,102,145,144,121,92,191,78,121,95,198,129,56,144,132,128,171,117,166,78,212,136,15,97,197,107,198,95,73,78,202,118,162,110,227,139,174,139,10,140,209,139,2,95,252,127,204,127,206,126,53,131,107,131,224,86,183,107,243,151,52,150,251,89,31,84,246,148,235,109,197,91,110,153,57,92,21,95,144,150,162,137,163,137,164,137,165,137,166,137,167,137,168,137,169,137,170,137,171,137,172,137,173,137,174,137,175,137,176,137,177,137,178,137,179,137,180,137,181,137,182,137,183,137,184,137,185,137,186,137,187,137,188,137,189,137,190,137,191,137,192,137,195,137,205,137,211,137,212,137,213,137,215,137,216,137,217,137,219,137,221,137,223,137,224,137,225,137,226,137,228,137,231,137,232,137,233,137,234,137,236,137,237,137,238,137,240,137,241,137,242,137,244,137,245,137,246,137,247,137,248,137,249,137,250,137,251,137,252,137,253,137,254,137,255,137,1,138,2,138,3,138,4,138,5,138,6,138,8,138,9,138,10,138,11,138,12,138,13,138,14,138,15,138,16,138,17,138,18,138,19,138,20,138,21,138,22,138,23,138,24,138,25,138,26,138,27,138,28,138,29,138,112,83,241,130,49,106,116,90,112,158,148,94,40,127,185,131,36,132,37,132,103,131,71,135,206,143,98,141,200,118,113,95,150,152,108,120,32,102,223,84,229,98,99,79,195,129,200,117,184,94,205,150,10,142,249,134,143,84,243,108,140,109,56,108,127,96,199,82,40,117,125,94,24,79,160,96,231,95,36,92,49,117,174,144,192,148,185,114,185,108,56,110,73,145,9,103,203,83,243,83,81,79,201,145,241,139,200,83,124,94,194,143,228,109,142,78,194,118,134,105,94,134,26,97,6,130,89,79,222,79,62,144,124,156,9,97,29,110,20,110,133,150,136,78,49,90,232,150,14,78,127,92,185,121,135,91,237,139,189,127,137,115,223,87,139,130,193,144,1,84,71,144,187,85,234,92,161,95,8,97,50,107,241,114,178,128,137,138,30,138,31,138,32,138,33,138,34,138,35,138,36,138,37,138,38,138,39,138,40,138,41,138,42,138,43,138,44,138,45,138,46,138,47,138,48,138,49,138,50,138,51,138,52,138,53,138,54,138,55,138,56,138,57,138,58,138,59,138,60,138,61,138,63,138,64,138,65,138,66,138,67,138,68,138,69,138,70,138,71,138,73,138,74,138,75,138,76,138,77,138,78,138,79,138,80,138,81,138,82,138,83,138,84,138,85,138,86,138,87,138,88,138,89,138,90,138,91,138,92,138,93,138,94,138,95,138,96,138,97,138,98,138,99,138,100,138,101,138,102,138,103,138,104,138,105,138,106,138,107,138,108,138,109,138,110,138,111,138,112,138,113,138,114,138,115,138,116,138,117,138,118,138,119,138,120,138,122,138,123,138,124,138,125,138,126,138,127,138,128,138,116,109,211,91,213,136,132,152,107,140,109,154,51,158,10,110,164,81,67,81,163,87,129,136,159,83,244,99,149,143,237,86,88,84,6,87,63,115,144,110,24,127,220,143,209,130,63,97,40,96,98,150,240,102,166,126,138,141,195,141,165,148,179,92,164,124,8,103,166,96,5,150,24,128,145,78,231,144,0,83,104,150,65,81,208,143,116,133,93,145,85,102,245,151,85,91,29,83,56,120,66,103,61,104,201,84,126,112,176,91,125,143,141,81,40,87,177,84,18,101,130,102,94,141,67,141,15,129,108,132,109,144,223,124,255,81,251,133,163,103,233,101,161,111,164,134,129,142,106,86,32,144,130,118,118,112,229,113,35,141,233,98,25,82,253,108,60,141,14,96,158,88,142,97,254,102,96,141,78,98,179,85,35,110,45,103,103,143,129,138,130,138,131,138,132,138,133,138,134,138,135,138,136,138,139,138,140,138,141,138,142,138,143,138,144,138,145,138,146,138,148,138,149,138,150,138,151,138,152,138,153,138,154,138,155,138,156,138,157,138,158,138,159,138,160,138,161,138,162,138,163,138,164,138,165,138,166,138,167,138,168,138,169,138,170,138,171,138,172,138,173,138,174,138,175,138,176,138,177,138,178,138,179,138,180,138,181,138,182,138,183,138,184,138,185,138,186,138,187,138,188,138,189,138,190,138,191,138,192,138,193,138,194,138,195,138,196,138,197,138,198,138,199,138,200,138,201,138,202,138,203,138,204,138,205,138,206,138,207,138,208,138,209,138,210,138,211,138,212,138,213,138,214,138,215,138,216,138,217,138,218,138,219,138,220,138,221,138,222,138,223,138,224,138,225,138,226,138,227,138,225,148,248,149,40,119,5,104,168,105,139,84,77,78,184,112,200,139,88,100,139,101,133,91,132,122,58,80,232,91,187,119,225,107,121,138,152,124,190,108,207,118,169,101,151,143,45,93,85,92,56,134,8,104,96,83,24,98,217,122,91,110,253,126,31,106,224,122,112,95,51,111,32,95,140,99,168,109,86,103,8,78,16,94,38,141,215,78,192,128,52,118,156,150,219,98,45,102,126,98,188,108,117,141,103,113,105,127,70,81,135,128,236,83,110,144,152,98,242,84,240,134,153,143,5,128,23,149,23,133,217,143,89,109,205,115,159,101,31,119,4,117,39,120,251,129,30,141,136,148,166,79,149,103,185,117,202,139,7,151,47,99,71,149,53,150,184,132,35,99,65,119,129,95,240,114,137,78,20,96,116,101,239,98,99,107,63,101,228,138,229,138,230,138,231,138,232,138,233,138,234,138,235,138,236,138,237,138,238,138,239,138,240,138,241,138,242,138,243,138,244,138,245,138,246,138,247,138,248,138,249,138,250,138,251,138,252,138,253,138,254,138,255,138,0,139,1,139,2,139,3,139,4,139,5,139,6,139,8,139,9,139,10,139,11,139,12,139,13,139,14,139,15,139,16,139,17,139,18,139,19,139,20,139,21,139,22,139,23,139,24,139,25,139,26,139,27,139,28,139,29,139,30,139,31,139,32,139,33,139,34,139,35,139,36,139,37,139,39,139,40,139,41,139,42,139,43,139,44,139,45,139,46,139,47,139,48,139,49,139,50,139,51,139,52,139,53,139,54,139,55,139,56,139,57,139,58,139,59,139,60,139,61,139,62,139,63,139,64,139,65,139,66,139,67,139,68,139,69,139,39,94,199,117,209,144,193,139,157,130,157,103,47,101,49,84,24,135,229,119,162,128,2,129,65,108,75,78,199,126,76,128,244,118,13,105,150,107,103,98,60,80,132,79,64,87,7,99,98,107,190,141,234,83,232,101,184,126,215,95,26,99,183,99,243,129,244,129,110,127,28,94,217,92,54,82,122,102,233,121,26,122,40,141,153,112,212,117,222,110,187,108,146,122,45,78,197,118,224,95,159,148,119,136,200,126,205,121,191,128,205,145,242,78,23,79,31,130,104,84,222,93,50,109,204,139,165,124,116,143,152,128,26,94,146,84,177,118,153,91,60,102,164,154,224,115,42,104,219,134,49,103,42,115,248,139,219,139,16,144,249,122,219,112,110,113,196,98,169,119,49,86,59,78,87,132,241,103,169,82,192,134,46,141,248,148,81,123,70,139,71,139,72,139,73,139,74,139,75,139,76,139,77,139,78,139,79,139,80,139,81,139,82,139,83,139,84,139,85,139,86,139,87,139,88,139,89,139,90,139,91,139,92,139,93,139,94,139,95,139,96,139,97,139,98,139,99,139,100,139,101,139,103,139,104,139,105,139,106,139,107,139,109,139,110,139,111,139,112,139,113,139,114,139,115,139,116,139,117,139,118,139,119,139,120,139,121,139,122,139,123,139,124,139,125,139,126,139,127,139,128,139,129,139,130,139,131,139,132,139,133,139,134,139,135,139,136,139,137,139,138,139,139,139,140,139,141,139,142,139,143,139,144,139,145,139,146,139,147,139,148,139,149,139,150,139,151,139,152,139,153,139,154,139,155,139,156,139,157,139,158,139,159,139,172,139,177,139,187,139,199,139,208,139,234,139,9,140,30,140,79,79,232,108,93,121,123,154,147,98,42,114,253,98,19,78,22,120,108,143,176,100,90,141,198,123,105,104,132,94,197,136,134,89,158,100,238,88,182,114,14,105,37,149,253,143,88,141,96,87,0,127,6,140,198,81,73,99,217,98,83,83,76,104,34,116,1,131,76,145,68,85,64,119,124,112,74,109,121,81,168,84,68,141,255,89,203,110,196,109,92,91,43,125,212,78,125,124,211,110,80,91,234,129,13,110,87,91,3,155,213,104,42,142,151,91,252,126,59,96,181,126,185,144,112,141,79,89,205,99,223,121,179,141,82,83,207,101,86,121,197,139,59,150,196,126,187,148,130,126,52,86,137,145,0,103,106,127,10,92,117,144,40,102,230,93,80,79,222,103,90,80,92,79,80,87,167,94,16,232,17,232,18,232,19,232,20,232,56,140,57,140,58,140,59,140,60,140,61,140,62,140,63,140,64,140,66,140,67,140,68,140,69,140,72,140,74,140,75,140,77,140,78,140,79,140,80,140,81,140,82,140,83,140,84,140,86,140,87,140,88,140,89,140,91,140,92,140,93,140,94,140,95,140,96,140,99,140,100,140,101,140,102,140,103,140,104,140,105,140,108,140,109,140,110,140,111,140,112,140,113,140,114,140,116,140,117,140,118,140,119,140,123,140,124,140,125,140,126,140,127,140,128,140,129,140,131,140,132,140,134,140,135,140,136,140,139,140,141,140,142,140,143,140,144,140,145,140,146,140,147,140,149,140,150,140,151,140,153,140,154,140,155,140,156,140,157,140,158,140,159,140,160,140,161,140,162,140,163,140,164,140,165,140,166,140,167,140,168,140,169,140,170,140,171,140,172,140,173,140,141,78,12,78,64,81,16,78,255,94,69,83,21,78,152,78,30,78,50,155,108,91,105,86,40,78,186,121,63,78,21,83,71,78,45,89,59,114,110,83,16,108,223,86,228,128,151,153,211,107,126,119,23,159,54,78,159,78,16,159,92,78,105,78,147,78,136,130,91,91,108,85,15,86,196,78,141,83,157,83,163,83,165,83,174,83,101,151,93,141,26,83,245,83,38,83,46,83,62,83,92,141,102,83,99,83,2,82,8,82,14,82,45,82,51,82,63,82,64,82,76,82,94,82,97,82,92,82,175,132,125,82,130,82,129,82,144,82,147,82,130,81,84,127,187,78,195,78,201,78,194,78,232,78,225,78,235,78,222,78,27,79,243,78,34,79,100,79,245,78,37,79,39,79,9,79,43,79,94,79,103,79,56,101,90,79,93,79,174,140,175,140,176,140,177,140,178,140,179,140,180,140,181,140,182,140,183,140,184,140,185,140,186,140,187,140,188,140,189,140,190,140,191,140,192,140,193,140,194,140,195,140,196,140,197,140,198,140,199,140,200,140,201,140,202,140,203,140,204,140,205,140,206,140,207,140,208,140,209,140,210,140,211,140,212,140,213,140,214,140,215,140,216,140,217,140,218,140,219,140,220,140,221,140,222,140,223,140,224,140,225,140,226,140,227,140,228,140,229,140,230,140,231,140,232,140,233,140,234,140,235,140,236,140,237,140,238,140,239,140,240,140,241,140,242,140,243,140,244,140,245,140,246,140,247,140,248,140,249,140,250,140,251,140,252,140,253,140,254,140,255,140,0,141,1,141,2,141,3,141,4,141,5,141,6,141,7,141,8,141,9,141,10,141,11,141,12,141,13,141,95,79,87,79,50,79,61,79,118,79,116,79,145,79,137,79,131,79,143,79,126,79,123,79,170,79,124,79,172,79,148,79,230,79,232,79,234,79,197,79,218,79,227,79,220,79,209,79,223,79,248,79,41,80,76,80,243,79,44,80,15,80,46,80,45,80,254,79,28,80,12,80,37,80,40,80,126,80,67,80,85,80,72,80,78,80,108,80,123,80,165,80,167,80,169,80,186,80,214,80,6,81,237,80,236,80,230,80,238,80,7,81,11,81,221,78,61,108,88,79,101,79,206,79,160,159,70,108,116,124,110,81,253,93,201,158,152,153,129,81,20,89,249,82,13,83,7,138,16,83,235,81,25,89,85,81,160,78,86,81,179,78,110,136,164,136,181,78,20,129,210,136,128,121,52,91,3,136,184,127,171,81,177,81,189,81,188,81,14,141,15,141,16,141,17,141,18,141,19,141,20,141,21,141,22,141,23,141,24,141,25,141,26,141,27,141,28,141,32,141,81,141,82,141,87,141,95,141,101,141,104,141,105,141,106,141,108,141,110,141,111,141,113,141,114,141,120,141,121,141,122,141,123,141,124,141,125,141,126,141,127,141,128,141,130,141,131,141,134,141,135,141,136,141,137,141,140,141,141,141,142,141,143,141,144,141,146,141,147,141,149,141,150,141,151,141,152,141,153,141,154,141,155,141,156,141,157,141,158,141,160,141,161,141,162,141,164,141,165,141,166,141,167,141,168,141,169,141,170,141,171,141,172,141,173,141,174,141,175,141,176,141,178,141,182,141,183,141,185,141,187,141,189,141,192,141,193,141,194,141,197,141,199,141,200,141,201,141,202,141,205,141,208,141,210,141,211,141,212,141,199,81,150,81,162,81,165,81,160,139,166,139,167,139,170,139,180,139,181,139,183,139,194,139,195,139,203,139,207,139,206,139,210,139,211,139,212,139,214,139,216,139,217,139,220,139,223,139,224,139,228,139,232,139,233,139,238,139,240,139,243,139,246,139,249,139,252,139,255,139,0,140,2,140,4,140,7,140,12,140,15,140,17,140,18,140,20,140,21,140,22,140,25,140,27,140,24,140,29,140,31,140,32,140,33,140,37,140,39,140,42,140,43,140,46,140,47,140,50,140,51,140,53,140,54,140,105,83,122,83,29,150,34,150,33,150,49,150,42,150,61,150,60,150,66,150,73,150,84,150,95,150,103,150,108,150,114,150,116,150,136,150,141,150,151,150,176,150,151,144,155,144,157,144,153,144,172,144,161,144,180,144,179,144,182,144,186,144,213,141,216,141,217,141,220,141,224,141,225,141,226,141,229,141,230,141,231,141,233,141,237,141,238,141,240,141,241,141,242,141,244,141,246,141,252,141,254,141,255,141,0,142,1,142,2,142,3,142,4,142,6,142,7,142,8,142,11,142,13,142,14,142,16,142,17,142,18,142,19,142,21,142,22,142,23,142,24,142,25,142,26,142,27,142,28,142,32,142,33,142,36,142,37,142,38,142,39,142,40,142,43,142,45,142,48,142,50,142,51,142,52,142,54,142,55,142,56,142,59,142,60,142,62,142,63,142,67,142,69,142,70,142,76,142,77,142,78,142,79,142,80,142,83,142,84,142,85,142,86,142,87,142,88,142,90,142,91,142,92,142,93,142,94,142,95,142,96,142,97,142,98,142,99,142,100,142,101,142,103,142,104,142,106,142,107,142,110,142,113,142,184,144,176,144,207,144,197,144,190,144,208,144,196,144,199,144,211,144,230,144,226,144,220,144,215,144,219,144,235,144,239,144,254,144,4,145,34,145,30,145,35,145,49,145,47,145,57,145,67,145,70,145,13,82,66,89,162,82,172,82,173,82,190,82,255,84,208,82,214,82,240,82,223,83,238,113,205,119,244,94,245,81,252,81,47,155,182,83,1,95,90,117,239,93,76,87,169,87,161,87,126,88,188,88,197,88,209,88,41,87,44,87,42,87,51,87,57,87,46,87,47,87,92,87,59,87,66,87,105,87,133,87,107,87,134,87,124,87,123,87,104,87,109,87,118,87,115,87,173,87,164,87,140,87,178,87,207,87,167,87,180,87,147,87,160,87,213,87,216,87,218,87,217,87,210,87,184,87,244,87,239,87,248,87,228,87,221,87,115,142,117,142,119,142,120,142,121,142,122,142,123,142,125,142,126,142,128,142,130,142,131,142,132,142,134,142,136,142,137,142,138,142,139,142,140,142,141,142,142,142,145,142,146,142,147,142,149,142,150,142,151,142,152,142,153,142,154,142,155,142,157,142,159,142,160,142,161,142,162,142,163,142,164,142,165,142,166,142,167,142,168,142,169,142,170,142,173,142,174,142,176,142,177,142,179,142,180,142,181,142,182,142,183,142,184,142,185,142,187,142,188,142,189,142,190,142,191,142,192,142,193,142,194,142,195,142,196,142,197,142,198,142,199,142,200,142,201,142,202,142,203,142,204,142,205,142,207,142,208,142,209,142,210,142,211,142,212,142,213,142,214,142,215,142,216,142,217,142,218,142,219,142,220,142,221,142,222,142,223,142,224,142,225,142,226,142,227,142,228,142,11,88,13,88,253,87,237,87,0,88,30,88,25,88,68,88,32,88,101,88,108,88,129,88,137,88,154,88,128,88,168,153,25,159,255,97,121,130,125,130,127,130,143,130,138,130,168,130,132,130,142,130,145,130,151,130,153,130,171,130,184,130,190,130,176,130,200,130,202,130,227,130,152,130,183,130,174,130,203,130,204,130,193,130,169,130,180,130,161,130,170,130,159,130,196,130,206,130,164,130,225,130,9,131,247,130,228,130,15,131,7,131,220,130,244,130,210,130,216,130,12,131,251,130,211,130,17,131,26,131,6,131,20,131,21,131,224,130,213,130,28,131,81,131,91,131,92,131,8,131,146,131,60,131,52,131,49,131,155,131,94,131,47,131,79,131,71,131,67,131,95,131,64,131,23,131,96,131,45,131,58,131,51,131,102,131,101,131,229,142,230,142,231,142,232,142,233,142,234,142,235,142,236,142,237,142,238,142,239,142,240,142,241,142,242,142,243,142,244,142,245,142,246,142,247,142,248,142,249,142,250,142,251,142,252,142,253,142,254,142,255,142,0,143,1,143,2,143,3,143,4,143,5,143,6,143,7,143,8,143,9,143,10,143,11,143,12,143,13,143,14,143,15,143,16,143,17,143,18,143,19,143,20,143,21,143,22,143,23,143,24,143,25,143,26,143,27,143,28,143,29,143,30,143,31,143,32,143,33,143,34,143,35,143,36,143,37,143,38,143,39,143,40,143,41,143,42,143,43,143,44,143,45,143,46,143,47,143,48,143,49,143,50,143,51,143,52,143,53,143,54,143,55,143,56,143,57,143,58,143,59,143,60,143,61,143,62,143,63,143,64,143,65,143,66,143,67,143,68,143,104,131,27,131,105,131,108,131,106,131,109,131,110,131,176,131,120,131,179,131,180,131,160,131,170,131,147,131,156,131,133,131,124,131,182,131,169,131,125,131,184,131,123,131,152,131,158,131,168,131,186,131,188,131,193,131,1,132,229,131,216,131,7,88,24,132,11,132,221,131,253,131,214,131,28,132,56,132,17,132,6,132,212,131,223,131,15,132,3,132,248,131,249,131,234,131,197,131,192,131,38,132,240,131,225,131,92,132,81,132,90,132,89,132,115,132,135,132,136,132,122,132,137,132,120,132,60,132,70,132,105,132,118,132,140,132,142,132,49,132,109,132,193,132,205,132,208,132,230,132,189,132,211,132,202,132,191,132,186,132,224,132,161,132,185,132,180,132,151,132,229,132,227,132,12,133,13,117,56,133,240,132,57,133,31,133,58,133,69,143,70,143,71,143,72,143,73,143,74,143,75,143,76,143,77,143,78,143,79,143,80,143,81,143,82,143,83,143,84,143,85,143,86,143,87,143,88,143,89,143,90,143,91,143,92,143,93,143,94,143,95,143,96,143,97,143,98,143,99,143,100,143,101,143,106,143,128,143,140,143,146,143,157,143,160,143,161,143,162,143,164,143,165,143,166,143,167,143,170,143,172,143,173,143,174,143,175,143,178,143,179,143,180,143,181,143,183,143,184,143,186,143,187,143,188,143,191,143,192,143,195,143,198,143,201,143,202,143,203,143,204,143,205,143,207,143,210,143,214,143,215,143,218,143,224,143,225,143,227,143,231,143,236,143,239,143,241,143,242,143,244,143,245,143,246,143,250,143,251,143,252,143,254,143,255,143,7,144,8,144,12,144,14,144,19,144,21,144,24,144,86,133,59,133,255,132,252,132,89,133,72,133,104,133,100,133,94,133,122,133,162,119,67,133,114,133,123,133,164,133,168,133,135,133,143,133,121,133,174,133,156,133,133,133,185,133,183,133,176,133,211,133,193,133,220,133,255,133,39,134,5,134,41,134,22,134,60,134,254,94,8,95,60,89,65,89,55,128,85,89,90,89,88,89,15,83,34,92,37,92,44,92,52,92,76,98,106,98,159,98,187,98,202,98,218,98,215,98,238,98,34,99,246,98,57,99,75,99,67,99,173,99,246,99,113,99,122,99,142,99,180,99,109,99,172,99,138,99,105,99,174,99,188,99,242,99,248,99,224,99,255,99,196,99,222,99,206,99,82,100,198,99,190,99,69,100,65,100,11,100,27,100,32,100,12,100,38,100,33,100,94,100,132,100,109,100,150,100,25,144,28,144,35,144,36,144,37,144,39,144,40,144,41,144,42,144,43,144,44,144,48,144,49,144,50,144,51,144,52,144,55,144,57,144,58,144,61,144,63,144,64,144,67,144,69,144,70,144,72,144,73,144,74,144,75,144,76,144,78,144,84,144,85,144,86,144,89,144,90,144,92,144,93,144,94,144,95,144,96,144,97,144,100,144,102,144,103,144,105,144,106,144,107,144,108,144,111,144,112,144,113,144,114,144,115,144,118,144,119,144,120,144,121,144,122,144,123,144,124,144,126,144,129,144,132,144,133,144,134,144,135,144,137,144,138,144,140,144,141,144,142,144,143,144,144,144,146,144,148,144,150,144,152,144,154,144,156,144,158,144,159,144,160,144,164,144,165,144,167,144,168,144,169,144,171,144,173,144,178,144,183,144,188,144,189,144,191,144,192,144,122,100,183,100,184,100,153,100,186,100,192,100,208,100,215,100,228,100,226,100,9,101,37,101,46,101,11,95,210,95,25,117,17,95,95,83,241,83,253,83,233,83,232,83,251,83,18,84,22,84,6,84,75,84,82,84,83,84,84,84,86,84,67,84,33,84,87,84,89,84,35,84,50,84,130,84,148,84,119,84,113,84,100,84,154,84,155,84,132,84,118,84,102,84,157,84,208,84,173,84,194,84,180,84,210,84,167,84,166,84,211,84,212,84,114,84,163,84,213,84,187,84,191,84,204,84,217,84,218,84,220,84,169,84,170,84,164,84,221,84,207,84,222,84,27,85,231,84,32,85,253,84,20,85,243,84,34,85,35,85,15,85,17,85,39,85,42,85,103,85,143,85,181,85,73,85,109,85,65,85,85,85,63,85,80,85,60,85,194,144,195,144,198,144,200,144,201,144,203,144,204,144,205,144,210,144,212,144,213,144,214,144,216,144,217,144,218,144,222,144,223,144,224,144,227,144,228,144,229,144,233,144,234,144,236,144,238,144,240,144,241,144,242,144,243,144,245,144,246,144,247,144,249,144,250,144,251,144,252,144,255,144,0,145,1,145,3,145,5,145,6,145,7,145,8,145,9,145,10,145,11,145,12,145,13,145,14,145,15,145,16,145,17,145,18,145,19,145,20,145,21,145,22,145,23,145,24,145,26,145,27,145,28,145,29,145,31,145,32,145,33,145,36,145,37,145,38,145,39,145,40,145,41,145,42,145,43,145,44,145,45,145,46,145,48,145,50,145,51,145,52,145,53,145,54,145,55,145,56,145,58,145,59,145,60,145,61,145,62,145,63,145,64,145,65,145,66,145,68,145,55,85,86,85,117,85,118,85,119,85,51,85,48,85,92,85,139,85,210,85,131,85,177,85,185,85,136,85,129,85,159,85,126,85,214,85,145,85,123,85,223,85,189,85,190,85,148,85,153,85,234,85,247,85,201,85,31,86,209,85,235,85,236,85,212,85,230,85,221,85,196,85,239,85,229,85,242,85,243,85,204,85,205,85,232,85,245,85,228,85,148,143,30,86,8,86,12,86,1,86,36,86,35,86,254,85,0,86,39,86,45,86,88,86,57,86,87,86,44,86,77,86,98,86,89,86,92,86,76,86,84,86,134,86,100,86,113,86,107,86,123,86,124,86,133,86,147,86,175,86,212,86,215,86,221,86,225,86,245,86,235,86,249,86,255,86,4,87,10,87,9,87,28,87,15,94,25,94,20,94,17,94,49,94,59,94,60,94,69,145,71,145,72,145,81,145,83,145,84,145,85,145,86,145,88,145,89,145,91,145,92,145,95,145,96,145,102,145,103,145,104,145,107,145,109,145,115,145,122,145,123,145,124,145,128,145,129,145,130,145,131,145,132,145,134,145,136,145,138,145,142,145,143,145,147,145,148,145,149,145,150,145,151,145,152,145,153,145,156,145,157,145,158,145,159,145,160,145,161,145,164,145,165,145,166,145,167,145,168,145,169,145,171,145,172,145,176,145,177,145,178,145,179,145,182,145,183,145,184,145,185,145,187,145,188,145,189,145,190,145,191,145,192,145,193,145,194,145,195,145,196,145,197,145,198,145,200,145,203,145,208,145,210,145,211,145,212,145,213,145,214,145,215,145,216,145,217,145,218,145,219,145,221,145,222,145,223,145,224,145,225,145,226,145,227,145,228,145,229,145,55,94,68,94,84,94,91,94,94,94,97,94,140,92,122,92,141,92,144,92,150,92,136,92,152,92,153,92,145,92,154,92,156,92,181,92,162,92,189,92,172,92,171,92,177,92,163,92,193,92,183,92,196,92,210,92,228,92,203,92,229,92,2,93,3,93,39,93,38,93,46,93,36,93,30,93,6,93,27,93,88,93,62,93,52,93,61,93,108,93,91,93,111,93,93,93,107,93,75,93,74,93,105,93,116,93,130,93,153,93,157,93,115,140,183,93,197,93,115,95,119,95,130,95,135,95,137,95,140,95,149,95,153,95,156,95,168,95,173,95,181,95,188,95,98,136,97,95,173,114,176,114,180,114,183,114,184,114,195,114,193,114,206,114,205,114,210,114,232,114,239,114,233,114,242,114,244,114,247,114,1,115,243,114,3,115,250,114,230,145,231,145,232,145,233,145,234,145,235,145,236,145,237,145,238,145,239,145,240,145,241,145,242,145,243,145,244,145,245,145,246,145,247,145,248,145,249,145,250,145,251,145,252,145,253,145,254,145,255,145,0,146,1,146,2,146,3,146,4,146,5,146,6,146,7,146,8,146,9,146,10,146,11,146,12,146,13,146,14,146,15,146,16,146,17,146,18,146,19,146,20,146,21,146,22,146,23,146,24,146,25,146,26,146,27,146,28,146,29,146,30,146,31,146,32,146,33,146,34,146,35,146,36,146,37,146,38,146,39,146,40,146,41,146,42,146,43,146,44,146,45,146,46,146,47,146,48,146,49,146,50,146,51,146,52,146,53,146,54,146,55,146,56,146,57,146,58,146,59,146,60,146,61,146,62,146,63,146,64,146,65,146,66,146,67,146,68,146,69,146,251,114,23,115,19,115,33,115,10,115,30,115,29,115,21,115,34,115,57,115,37,115,44,115,56,115,49,115,80,115,77,115,87,115,96,115,108,115,111,115,126,115,27,130,37,89,231,152,36,89,2,89,99,153,103,153,104,153,105,153,106,153,107,153,108,153,116,153,119,153,125,153,128,153,132,153,135,153,138,153,141,153,144,153,145,153,147,153,148,153,149,153,128,94,145,94,139,94,150,94,165,94,160,94,185,94,181,94,190,94,179,94,83,141,210,94,209,94,219,94,232,94,234,94,186,129,196,95,201,95,214,95,207,95,3,96,238,95,4,96,225,95,228,95,254,95,5,96,6,96,234,95,237,95,248,95,25,96,53,96,38,96,27,96,15,96,13,96,41,96,43,96,10,96,63,96,33,96,120,96,121,96,123,96,122,96,66,96,70,146,71,146,72,146,73,146,74,146,75,146,76,146,77,146,78,146,79,146,80,146,81,146,82,146,83,146,84,146,85,146,86,146,87,146,88,146,89,146,90,146,91,146,92,146,93,146,94,146,95,146,96,146,97,146,98,146,99,146,100,146,101,146,102,146,103,146,104,146,105,146,106,146,107,146,108,146,109,146,110,146,111,146,112,146,113,146,114,146,115,146,117,146,118,146,119,146,120,146,121,146,122,146,123,146,124,146,125,146,126,146,127,146,128,146,129,146,130,146,131,146,132,146,133,146,134,146,135,146,136,146,137,146,138,146,139,146,140,146,141,146,143,146,144,146,145,146,146,146,147,146,148,146,149,146,150,146,151,146,152,146,153,146,154,146,155,146,156,146,157,146,158,146,159,146,160,146,161,146,162,146,163,146,164,146,165,146,166,146,167,146,106,96,125,96,150,96,154,96,173,96,157,96,131,96,146,96,140,96,155,96,236,96,187,96,177,96,221,96,216,96,198,96,218,96,180,96,32,97,38,97,21,97,35,97,244,96,0,97,14,97,43,97,74,97,117,97,172,97,148,97,167,97,183,97,212,97,245,97,221,95,179,150,233,149,235,149,241,149,243,149,245,149,246,149,252,149,254,149,3,150,4,150,6,150,8,150,10,150,11,150,12,150,13,150,15,150,18,150,21,150,22,150,23,150,25,150,26,150,44,78,63,114,21,98,53,108,84,108,92,108,74,108,163,108,133,108,144,108,148,108,140,108,104,108,105,108,116,108,118,108,134,108,169,108,208,108,212,108,173,108,247,108,248,108,241,108,215,108,178,108,224,108,214,108,250,108,235,108,238,108,177,108,211,108,239,108,254,108,168,146,169,146,170,146,171,146,172,146,173,146,175,146,176,146,177,146,178,146,179,146,180,146,181,146,182,146,183,146,184,146,185,146,186,146,187,146,188,146,189,146,190,146,191,146,192,146,193,146,194,146,195,146,196,146,197,146,198,146,199,146,201,146,202,146,203,146,204,146,205,146,206,146,207,146,208,146,209,146,210,146,211,146,212,146,213,146,214,146,215,146,216,146,217,146,218,146,219,146,220,146,221,146,222,146,223,146,224,146,225,146,226,146,227,146,228,146,229,146,230,146,231,146,232,146,233,146,234,146,235,146,236,146,237,146,238,146,239,146,240,146,241,146,242,146,243,146,244,146,245,146,246,146,247,146,248,146,249,146,250,146,251,146,252,146,253,146,254,146,255,146,0,147,1,147,2,147,3,147,4,147,5,147,6,147,7,147,8,147,9,147,57,109,39,109,12,109,67,109,72,109,7,109,4,109,25,109,14,109,43,109,77,109,46,109,53,109,26,109,79,109,82,109,84,109,51,109,145,109,111,109,158,109,160,109,94,109,147,109,148,109,92,109,96,109,124,109,99,109,26,110,199,109,197,109,222,109,14,110,191,109,224,109,17,110,230,109,221,109,217,109,22,110,171,109,12,110,174,109,43,110,110,110,78,110,107,110,178,110,95,110,134,110,83,110,84,110,50,110,37,110,68,110,223,110,177,110,152,110,224,110,45,111,226,110,165,110,167,110,189,110,187,110,183,110,215,110,180,110,207,110,143,110,194,110,159,110,98,111,70,111,71,111,36,111,21,111,249,110,47,111,54,111,75,111,116,111,42,111,9,111,41,111,137,111,141,111,140,111,120,111,114,111,124,111,122,111,209,111,10,147,11,147,12,147,13,147,14,147,15,147,16,147,17,147,18,147,19,147,20,147,21,147,22,147,23,147,24,147,25,147,26,147,27,147,28,147,29,147,30,147,31,147,32,147,33,147,34,147,35,147,36,147,37,147,38,147,39,147,40,147,41,147,42,147,43,147,44,147,45,147,46,147,47,147,48,147,49,147,50,147,51,147,52,147,53,147,54,147,55,147,56,147,57,147,58,147,59,147,60,147,61,147,63,147,64,147,65,147,66,147,67,147,68,147,69,147,70,147,71,147,72,147,73,147,74,147,75,147,76,147,77,147,78,147,79,147,80,147,81,147,82,147,83,147,84,147,85,147,86,147,87,147,88,147,89,147,90,147,91,147,92,147,93,147,94,147,95,147,96,147,97,147,98,147,99,147,100,147,101,147,102,147,103,147,104,147,105,147,107,147,201,111,167,111,185,111,182,111,194,111,225,111,238,111,222,111,224,111,239,111,26,112,35,112,27,112,57,112,53,112,79,112,94,112,128,91], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+69106);
/* memory initializer */ allocate([132,91,149,91,147,91,165,91,184,91,47,117,158,154,52,100,228,91,238,91,48,137,240,91,71,142,7,139,182,143,211,143,213,143,229,143,238,143,228,143,233,143,230,143,243,143,232,143,5,144,4,144,11,144,38,144,17,144,13,144,22,144,33,144,53,144,54,144,45,144,47,144,68,144,81,144,82,144,80,144,104,144,88,144,98,144,91,144,185,102,116,144,125,144,130,144,136,144,131,144,139,144,80,95,87,95,86,95,88,95,59,92,171,84,80,92,89,92,113,91,99,92,102,92,188,127,42,95,41,95,45,95,116,130,60,95,59,155,110,92,129,89,131,89,141,89,169,89,170,89,163,89,108,147,109,147,110,147,111,147,112,147,113,147,114,147,115,147,116,147,117,147,118,147,119,147,120,147,121,147,122,147,123,147,124,147,125,147,126,147,127,147,128,147,129,147,130,147,131,147,132,147,133,147,134,147,135,147,136,147,137,147,138,147,139,147,140,147,141,147,142,147,144,147,145,147,146,147,147,147,148,147,149,147,150,147,151,147,152,147,153,147,154,147,155,147,156,147,157,147,158,147,159,147,160,147,161,147,162,147,163,147,164,147,165,147,166,147,167,147,168,147,169,147,170,147,171,147,172,147,173,147,174,147,175,147,176,147,177,147,178,147,179,147,180,147,181,147,182,147,183,147,184,147,185,147,186,147,187,147,188,147,189,147,190,147,191,147,192,147,193,147,194,147,195,147,196,147,197,147,198,147,199,147,200,147,201,147,203,147,204,147,205,147,151,89,202,89,171,89,158,89,164,89,210,89,178,89,175,89,215,89,190,89,5,90,6,90,221,89,8,90,227,89,216,89,249,89,12,90,9,90,50,90,52,90,17,90,35,90,19,90,64,90,103,90,74,90,85,90,60,90,98,90,117,90,236,128,170,90,155,90,119,90,122,90,190,90,235,90,178,90,210,90,212,90,184,90,224,90,227,90,241,90,214,90,230,90,216,90,220,90,9,91,23,91,22,91,50,91,55,91,64,91,21,92,28,92,90,91,101,91,115,91,81,91,83,91,98,91,117,154,119,154,120,154,122,154,127,154,125,154,128,154,129,154,133,154,136,154,138,154,144,154,146,154,147,154,150,154,152,154,155,154,156,154,157,154,159,154,160,154,162,154,163,154,165,154,167,154,159,126,161,126,163,126,165,126,168,126,169,126,206,147,207,147,208,147,209,147,210,147,211,147,212,147,213,147,215,147,216,147,217,147,218,147,219,147,220,147,221,147,222,147,223,147,224,147,225,147,226,147,227,147,228,147,229,147,230,147,231,147,232,147,233,147,234,147,235,147,236,147,237,147,238,147,239,147,240,147,241,147,242,147,243,147,244,147,245,147,246,147,247,147,248,147,249,147,250,147,251,147,252,147,253,147,254,147,255,147,0,148,1,148,2,148,3,148,4,148,5,148,6,148,7,148,8,148,9,148,10,148,11,148,12,148,13,148,14,148,15,148,16,148,17,148,18,148,19,148,20,148,21,148,22,148,23,148,24,148,25,148,26,148,27,148,28,148,29,148,30,148,31,148,32,148,33,148,34,148,35,148,36,148,37,148,38,148,39,148,40,148,41,148,42,148,43,148,44,148,45,148,46,148,173,126,176,126,190,126,192,126,193,126,194,126,201,126,203,126,204,126,208,126,212,126,215,126,219,126,224,126,225,126,232,126,235,126,238,126,239,126,241,126,242,126,13,127,246,126,250,126,251,126,254,126,1,127,2,127,3,127,7,127,8,127,11,127,12,127,15,127,17,127,18,127,23,127,25,127,28,127,27,127,31,127,33,127,34,127,35,127,36,127,37,127,38,127,39,127,42,127,43,127,44,127,45,127,47,127,48,127,49,127,50,127,51,127,53,127,122,94,127,117,219,93,62,117,149,144,142,115,145,115,174,115,162,115,159,115,207,115,194,115,209,115,183,115,179,115,192,115,201,115,200,115,229,115,217,115,124,152,10,116,233,115,231,115,222,115,186,115,242,115,15,116,42,116,91,116,38,116,37,116,40,116,48,116,46,116,44,116,47,148,48,148,49,148,50,148,51,148,52,148,53,148,54,148,55,148,56,148,57,148,58,148,59,148,60,148,61,148,63,148,64,148,65,148,66,148,67,148,68,148,69,148,70,148,71,148,72,148,73,148,74,148,75,148,76,148,77,148,78,148,79,148,80,148,81,148,82,148,83,148,84,148,85,148,86,148,87,148,88,148,89,148,90,148,91,148,92,148,93,148,94,148,95,148,96,148,97,148,98,148,99,148,100,148,101,148,102,148,103,148,104,148,105,148,106,148,108,148,109,148,110,148,111,148,112,148,113,148,114,148,115,148,116,148,117,148,118,148,119,148,120,148,121,148,122,148,123,148,124,148,125,148,126,148,127,148,128,148,129,148,130,148,131,148,132,148,145,148,150,148,152,148,199,148,207,148,211,148,212,148,218,148,230,148,251,148,28,149,32,149,27,116,26,116,65,116,92,116,87,116,85,116,89,116,119,116,109,116,126,116,156,116,142,116,128,116,129,116,135,116,139,116,158,116,168,116,169,116,144,116,167,116,210,116,186,116,234,151,235,151,236,151,76,103,83,103,94,103,72,103,105,103,165,103,135,103,106,103,115,103,152,103,167,103,117,103,168,103,158,103,173,103,139,103,119,103,124,103,240,103,9,104,216,103,10,104,233,103,176,103,12,104,217,103,181,103,218,103,179,103,221,103,0,104,195,103,184,103,226,103,14,104,193,103,253,103,50,104,51,104,96,104,97,104,78,104,98,104,68,104,100,104,131,104,29,104,85,104,102,104,65,104,103,104,64,104,62,104,74,104,73,104,41,104,181,104,143,104,116,104,119,104,147,104,107,104,194,104,110,105,252,104,31,105,32,105,249,104,39,149,51,149,61,149,67,149,72,149,75,149,85,149,90,149,96,149,110,149,116,149,117,149,119,149,120,149,121,149,122,149,123,149,124,149,125,149,126,149,128,149,129,149,130,149,131,149,132,149,133,149,134,149,135,149,136,149,137,149,138,149,139,149,140,149,141,149,142,149,143,149,144,149,145,149,146,149,147,149,148,149,149,149,150,149,151,149,152,149,153,149,154,149,155,149,156,149,157,149,158,149,159,149,160,149,161,149,162,149,163,149,164,149,165,149,166,149,167,149,168,149,169,149,170,149,171,149,172,149,173,149,174,149,175,149,176,149,177,149,178,149,179,149,180,149,181,149,182,149,183,149,184,149,185,149,186,149,187,149,188,149,189,149,190,149,191,149,192,149,193,149,194,149,195,149,196,149,197,149,198,149,199,149,200,149,201,149,202,149,203,149,36,105,240,104,11,105,1,105,87,105,227,104,16,105,113,105,57,105,96,105,66,105,93,105,132,105,107,105,128,105,152,105,120,105,52,105,204,105,135,105,136,105,206,105,137,105,102,105,99,105,121,105,155,105,167,105,187,105,171,105,173,105,212,105,177,105,193,105,202,105,223,105,149,105,224,105,141,105,255,105,47,106,237,105,23,106,24,106,101,106,242,105,68,106,62,106,160,106,80,106,91,106,53,106,142,106,121,106,61,106,40,106,88,106,124,106,145,106,144,106,169,106,151,106,171,106,55,115,82,115,129,107,130,107,135,107,132,107,146,107,147,107,141,107,154,107,155,107,161,107,170,107,107,143,109,143,113,143,114,143,115,143,117,143,118,143,120,143,119,143,121,143,122,143,124,143,126,143,129,143,130,143,132,143,135,143,139,143,204,149,205,149,206,149,207,149,208,149,209,149,210,149,211,149,212,149,213,149,214,149,215,149,216,149,217,149,218,149,219,149,220,149,221,149,222,149,223,149,224,149,225,149,226,149,227,149,228,149,229,149,230,149,231,149,236,149,255,149,7,150,19,150,24,150,27,150,30,150,32,150,35,150,36,150,37,150,38,150,39,150,40,150,41,150,43,150,44,150,45,150,47,150,48,150,55,150,56,150,57,150,58,150,62,150,65,150,67,150,74,150,78,150,79,150,81,150,82,150,83,150,86,150,87,150,88,150,89,150,90,150,92,150,93,150,94,150,96,150,99,150,101,150,102,150,107,150,109,150,110,150,111,150,112,150,113,150,115,150,120,150,121,150,122,150,123,150,124,150,125,150,126,150,127,150,128,150,129,150,130,150,131,150,132,150,135,150,137,150,138,150,141,143,142,143,143,143,152,143,154,143,206,142,11,98,23,98,27,98,31,98,34,98,33,98,37,98,36,98,44,98,231,129,239,116,244,116,255,116,15,117,17,117,19,117,52,101,238,101,239,101,240,101,10,102,25,102,114,103,3,102,21,102,0,102,133,112,247,102,29,102,52,102,49,102,54,102,53,102,6,128,95,102,84,102,65,102,79,102,86,102,97,102,87,102,119,102,132,102,140,102,167,102,157,102,190,102,219,102,220,102,230,102,233,102,50,141,51,141,54,141,59,141,61,141,64,141,69,141,70,141,72,141,73,141,71,141,77,141,85,141,89,141,199,137,202,137,203,137,204,137,206,137,207,137,208,137,209,137,110,114,159,114,93,114,102,114,111,114,126,114,127,114,132,114,139,114,141,114,143,114,146,114,8,99,50,99,176,99,140,150,142,150,145,150,146,150,147,150,149,150,150,150,154,150,155,150,157,150,158,150,159,150,160,150,161,150,162,150,163,150,164,150,165,150,166,150,168,150,169,150,170,150,171,150,172,150,173,150,174,150,175,150,177,150,178,150,180,150,181,150,183,150,184,150,186,150,187,150,191,150,194,150,195,150,200,150,202,150,203,150,208,150,209,150,211,150,212,150,214,150,215,150,216,150,217,150,218,150,219,150,220,150,221,150,222,150,223,150,225,150,226,150,227,150,228,150,229,150,230,150,231,150,235,150,236,150,237,150,238,150,240,150,241,150,242,150,244,150,245,150,248,150,250,150,251,150,252,150,253,150,255,150,2,151,3,151,5,151,10,151,11,151,12,151,16,151,17,151,18,151,20,151,21,151,23,151,24,151,25,151,26,151,27,151,29,151,31,151,32,151,63,100,216,100,4,128,234,107,243,107,253,107,245,107,249,107,5,108,7,108,6,108,13,108,21,108,24,108,25,108,26,108,33,108,41,108,36,108,42,108,50,108,53,101,85,101,107,101,77,114,82,114,86,114,48,114,98,134,22,82,159,128,156,128,147,128,188,128,10,103,189,128,177,128,171,128,173,128,180,128,183,128,231,128,232,128,233,128,234,128,219,128,194,128,196,128,217,128,205,128,215,128,16,103,221,128,235,128,241,128,244,128,237,128,13,129,14,129,242,128,252,128,21,103,18,129,90,140,54,129,30,129,44,129,24,129,50,129,72,129,76,129,83,129,116,129,89,129,90,129,113,129,96,129,105,129,124,129,125,129,109,129,103,129,77,88,181,90,136,129,130,129,145,129,213,110,163,129,170,129,204,129,38,103,202,129,187,129,33,151,34,151,35,151,36,151,37,151,38,151,39,151,40,151,41,151,43,151,44,151,46,151,47,151,49,151,51,151,52,151,53,151,54,151,55,151,58,151,59,151,60,151,61,151,63,151,64,151,65,151,66,151,67,151,68,151,69,151,70,151,71,151,72,151,73,151,74,151,75,151,76,151,77,151,78,151,79,151,80,151,81,151,84,151,85,151,87,151,88,151,90,151,92,151,93,151,95,151,99,151,100,151,102,151,103,151,104,151,106,151,107,151,108,151,109,151,110,151,111,151,112,151,113,151,114,151,117,151,119,151,120,151,121,151,122,151,123,151,125,151,126,151,127,151,128,151,129,151,130,151,131,151,132,151,134,151,135,151,136,151,137,151,138,151,140,151,142,151,143,151,144,151,147,151,149,151,150,151,151,151,153,151,154,151,155,151,156,151,157,151,193,129,166,129,36,107,55,107,57,107,67,107,70,107,89,107,209,152,210,152,211,152,213,152,217,152,218,152,179,107,64,95,194,107,243,137,144,101,81,159,147,101,188,101,198,101,196,101,195,101,204,101,206,101,210,101,214,101,128,112,156,112,150,112,157,112,187,112,192,112,183,112,171,112,177,112,232,112,202,112,16,113,19,113,22,113,47,113,49,113,115,113,92,113,104,113,69,113,114,113,74,113,120,113,122,113,152,113,179,113,181,113,168,113,160,113,224,113,212,113,231,113,249,113,29,114,40,114,108,112,24,113,102,113,185,113,62,98,61,98,67,98,72,98,73,98,59,121,64,121,70,121,73,121,91,121,92,121,83,121,90,121,98,121,87,121,96,121,111,121,103,121,122,121,133,121,138,121,154,121,167,121,179,121,209,95,208,95,158,151,159,151,161,151,162,151,164,151,165,151,166,151,167,151,168,151,169,151,170,151,172,151,174,151,176,151,177,151,179,151,181,151,182,151,183,151,184,151,185,151,186,151,187,151,188,151,189,151,190,151,191,151,192,151,193,151,194,151,195,151,196,151,197,151,198,151,199,151,200,151,201,151,202,151,203,151,204,151,205,151,206,151,207,151,208,151,209,151,210,151,211,151,212,151,213,151,214,151,215,151,216,151,217,151,218,151,219,151,220,151,221,151,222,151,223,151,224,151,225,151,226,151,227,151,228,151,229,151,232,151,238,151,239,151,240,151,241,151,242,151,244,151,247,151,248,151,249,151,250,151,251,151,252,151,253,151,254,151,255,151,0,152,1,152,2,152,3,152,4,152,5,152,6,152,7,152,8,152,9,152,10,152,11,152,12,152,13,152,14,152,60,96,93,96,90,96,103,96,65,96,89,96,99,96,171,96,6,97,13,97,93,97,169,97,157,97,203,97,209,97,6,98,128,128,127,128,147,108,246,108,252,109,246,119,248,119,0,120,9,120,23,120,24,120,17,120,171,101,45,120,28,120,29,120,57,120,58,120,59,120,31,120,60,120,37,120,44,120,35,120,41,120,78,120,109,120,86,120,87,120,38,120,80,120,71,120,76,120,106,120,155,120,147,120,154,120,135,120,156,120,161,120,163,120,178,120,185,120,165,120,212,120,217,120,201,120,236,120,242,120,5,121,244,120,19,121,36,121,30,121,52,121,155,159,249,158,251,158,252,158,241,118,4,119,13,119,249,118,7,119,8,119,26,119,34,119,25,119,45,119,38,119,53,119,56,119,80,119,81,119,71,119,67,119,90,119,104,119,15,152,16,152,17,152,18,152,19,152,20,152,21,152,22,152,23,152,24,152,25,152,26,152,27,152,28,152,29,152,30,152,31,152,32,152,33,152,34,152,35,152,36,152,37,152,38,152,39,152,40,152,41,152,42,152,43,152,44,152,45,152,46,152,47,152,48,152,49,152,50,152,51,152,52,152,53,152,54,152,55,152,56,152,57,152,58,152,59,152,60,152,61,152,62,152,63,152,64,152,65,152,66,152,67,152,68,152,69,152,70,152,71,152,72,152,73,152,74,152,75,152,76,152,77,152,78,152,79,152,80,152,81,152,82,152,83,152,84,152,85,152,86,152,87,152,88,152,89,152,90,152,91,152,92,152,93,152,94,152,95,152,96,152,97,152,98,152,99,152,100,152,101,152,102,152,103,152,104,152,105,152,106,152,107,152,108,152,109,152,110,152,98,119,101,119,127,119,141,119,125,119,128,119,140,119,145,119,159,119,160,119,176,119,181,119,189,119,58,117,64,117,78,117,75,117,72,117,91,117,114,117,121,117,131,117,88,127,97,127,95,127,72,138,104,127,116,127,113,127,121,127,129,127,126,127,205,118,229,118,50,136,133,148,134,148,135,148,139,148,138,148,140,148,141,148,143,148,144,148,148,148,151,148,149,148,154,148,155,148,156,148,163,148,164,148,171,148,170,148,173,148,172,148,175,148,176,148,178,148,180,148,182,148,183,148,184,148,185,148,186,148,188,148,189,148,191,148,196,148,200,148,201,148,202,148,203,148,204,148,205,148,206,148,208,148,209,148,210,148,213,148,214,148,215,148,217,148,216,148,219,148,222,148,223,148,224,148,226,148,228,148,229,148,231,148,232,148,234,148,111,152,112,152,113,152,114,152,115,152,116,152,139,152,142,152,146,152,149,152,153,152,163,152,168,152,169,152,170,152,171,152,172,152,173,152,174,152,175,152,176,152,177,152,178,152,179,152,180,152,181,152,182,152,183,152,184,152,185,152,186,152,187,152,188,152,189,152,190,152,191,152,192,152,193,152,194,152,195,152,196,152,197,152,198,152,199,152,200,152,201,152,202,152,203,152,204,152,205,152,207,152,208,152,212,152,214,152,215,152,219,152,220,152,221,152,224,152,225,152,226,152,227,152,228,152,229,152,230,152,233,152,234,152,235,152,236,152,237,152,238,152,239,152,240,152,241,152,242,152,243,152,244,152,245,152,246,152,247,152,248,152,249,152,250,152,251,152,252,152,253,152,254,152,255,152,0,153,1,153,2,153,3,153,4,153,5,153,6,153,7,153,233,148,235,148,238,148,239,148,243,148,244,148,245,148,247,148,249,148,252,148,253,148,255,148,3,149,2,149,6,149,7,149,9,149,10,149,13,149,14,149,15,149,18,149,19,149,20,149,21,149,22,149,24,149,27,149,29,149,30,149,31,149,34,149,42,149,43,149,41,149,44,149,49,149,50,149,52,149,54,149,55,149,56,149,60,149,62,149,63,149,66,149,53,149,68,149,69,149,70,149,73,149,76,149,78,149,79,149,82,149,83,149,84,149,86,149,87,149,88,149,89,149,91,149,94,149,95,149,93,149,97,149,98,149,100,149,101,149,102,149,103,149,104,149,105,149,106,149,107,149,108,149,111,149,113,149,114,149,115,149,58,149,231,119,236,119,201,150,213,121,237,121,227,121,235,121,6,122,71,93,3,122,2,122,30,122,20,122,8,153,9,153,10,153,11,153,12,153,14,153,15,153,17,153,18,153,19,153,20,153,21,153,22,153,23,153,24,153,25,153,26,153,27,153,28,153,29,153,30,153,31,153,32,153,33,153,34,153,35,153,36,153,37,153,38,153,39,153,40,153,41,153,42,153,43,153,44,153,45,153,47,153,48,153,49,153,50,153,51,153,52,153,53,153,54,153,55,153,56,153,57,153,58,153,59,153,60,153,61,153,62,153,63,153,64,153,65,153,66,153,67,153,68,153,69,153,70,153,71,153,72,153,73,153,74,153,75,153,76,153,77,153,78,153,79,153,80,153,81,153,82,153,83,153,86,153,87,153,88,153,89,153,90,153,91,153,92,153,93,153,94,153,95,153,96,153,97,153,98,153,100,153,102,153,115,153,120,153,121,153,123,153,126,153,130,153,131,153,137,153,57,122,55,122,81,122,207,158,165,153,112,122,136,118,142,118,147,118,153,118,164,118,222,116,224,116,44,117,32,158,34,158,40,158,41,158,42,158,43,158,44,158,50,158,49,158,54,158,56,158,55,158,57,158,58,158,62,158,65,158,66,158,68,158,70,158,71,158,72,158,73,158,75,158,76,158,78,158,81,158,85,158,87,158,90,158,91,158,92,158,94,158,99,158,102,158,103,158,104,158,105,158,106,158,107,158,108,158,113,158,109,158,115,158,146,117,148,117,150,117,160,117,157,117,172,117,163,117,179,117,180,117,184,117,196,117,177,117,176,117,195,117,194,117,214,117,205,117,227,117,232,117,230,117,228,117,235,117,231,117,3,118,241,117,252,117,255,117,16,118,0,118,5,118,12,118,23,118,10,118,37,118,24,118,21,118,25,118,140,153,142,153,154,153,155,153,156,153,157,153,158,153,159,153,160,153,161,153,162,153,163,153,164,153,166,153,167,153,169,153,170,153,171,153,172,153,173,153,174,153,175,153,176,153,177,153,178,153,179,153,180,153,181,153,182,153,183,153,184,153,185,153,186,153,187,153,188,153,189,153,190,153,191,153,192,153,193,153,194,153,195,153,196,153,197,153,198,153,199,153,200,153,201,153,202,153,203,153,204,153,205,153,206,153,207,153,208,153,209,153,210,153,211,153,212,153,213,153,214,153,215,153,216,153,217,153,218,153,219,153,220,153,221,153,222,153,223,153,224,153,225,153,226,153,227,153,228,153,229,153,230,153,231,153,232,153,233,153,234,153,235,153,236,153,237,153,238,153,239,153,240,153,241,153,242,153,243,153,244,153,245,153,246,153,247,153,248,153,249,153,27,118,60,118,34,118,32,118,64,118,45,118,48,118,63,118,53,118,67,118,62,118,51,118,77,118,94,118,84,118,92,118,86,118,107,118,111,118,202,127,230,122,120,122,121,122,128,122,134,122,136,122,149,122,166,122,160,122,172,122,168,122,173,122,179,122,100,136,105,136,114,136,125,136,127,136,130,136,162,136,198,136,183,136,188,136,201,136,226,136,206,136,227,136,229,136,241,136,26,137,252,136,232,136,254,136,240,136,33,137,25,137,19,137,27,137,10,137,52,137,43,137,54,137,65,137,102,137,123,137,139,117,229,128,178,118,180,118,220,119,18,128,20,128,22,128,28,128,32,128,34,128,37,128,38,128,39,128,41,128,40,128,49,128,11,128,53,128,67,128,70,128,77,128,82,128,105,128,113,128,131,137,120,152,128,152,131,152,250,153,251,153,252,153,253,153,254,153,255,153,0,154,1,154,2,154,3,154,4,154,5,154,6,154,7,154,8,154,9,154,10,154,11,154,12,154,13,154,14,154,15,154,16,154,17,154,18,154,19,154,20,154,21,154,22,154,23,154,24,154,25,154,26,154,27,154,28,154,29,154,30,154,31,154,32,154,33,154,34,154,35,154,36,154,37,154,38,154,39,154,40,154,41,154,42,154,43,154,44,154,45,154,46,154,47,154,48,154,49,154,50,154,51,154,52,154,53,154,54,154,55,154,56,154,57,154,58,154,59,154,60,154,61,154,62,154,63,154,64,154,65,154,66,154,67,154,68,154,69,154,70,154,71,154,72,154,73,154,74,154,75,154,76,154,77,154,78,154,79,154,80,154,81,154,82,154,83,154,84,154,85,154,86,154,87,154,88,154,89,154,137,152,140,152,141,152,143,152,148,152,154,152,155,152,158,152,159,152,161,152,162,152,165,152,166,152,77,134,84,134,108,134,110,134,127,134,122,134,124,134,123,134,168,134,141,134,139,134,172,134,157,134,167,134,163,134,170,134,147,134,169,134,182,134,196,134,181,134,206,134,176,134,186,134,177,134,175,134,201,134,207,134,180,134,233,134,241,134,242,134,237,134,243,134,208,134,19,135,222,134,244,134,223,134,216,134,209,134,3,135,7,135,248,134,8,135,10,135,13,135,9,135,35,135,59,135,30,135,37,135,46,135,26,135,62,135,72,135,52,135,49,135,41,135,55,135,63,135,130,135,34,135,125,135,126,135,123,135,96,135,112,135,76,135,110,135,139,135,83,135,99,135,124,135,100,135,89,135,101,135,147,135,175,135,168,135,210,135,90,154,91,154,92,154,93,154,94,154,95,154,96,154,97,154,98,154,99,154,100,154,101,154,102,154,103,154,104,154,105,154,106,154,107,154,114,154,131,154,137,154,141,154,142,154,148,154,149,154,153,154,166,154,169,154,170,154,171,154,172,154,173,154,174,154,175,154,178,154,179,154,180,154,181,154,185,154,187,154,189,154,190,154,191,154,195,154,196,154,198,154,199,154,200,154,201,154,202,154,205,154,206,154,207,154,208,154,210,154,212,154,213,154,214,154,215,154,217,154,218,154,219,154,220,154,221,154,222,154,224,154,226,154,227,154,228,154,229,154,231,154,232,154,233,154,234,154,236,154,238,154,240,154,241,154,242,154,243,154,244,154,245,154,246,154,247,154,248,154,250,154,252,154,253,154,254,154,255,154,0,155,1,155,2,155,4,155,5,155,6,155,198,135,136,135,133,135,173,135,151,135,131,135,171,135,229,135,172,135,181,135,179,135,203,135,211,135,189,135,209,135,192,135,202,135,219,135,234,135,224,135,238,135,22,136,19,136,254,135,10,136,27,136,33,136,57,136,60,136,54,127,66,127,68,127,69,127,16,130,250,122,253,122,8,123,3,123,4,123,21,123,10,123,43,123,15,123,71,123,56,123,42,123,25,123,46,123,49,123,32,123,37,123,36,123,51,123,62,123,30,123,88,123,90,123,69,123,117,123,76,123,93,123,96,123,110,123,123,123,98,123,114,123,113,123,144,123,166,123,167,123,184,123,172,123,157,123,168,123,133,123,170,123,156,123,162,123,171,123,180,123,209,123,193,123,204,123,221,123,218,123,229,123,230,123,234,123,12,124,254,123,252,123,15,124,22,124,11,124,7,155,9,155,10,155,11,155,12,155,13,155,14,155,16,155,17,155,18,155,20,155,21,155,22,155,23,155,24,155,25,155,26,155,27,155,28,155,29,155,30,155,32,155,33,155,34,155,36,155,37,155,38,155,39,155,40,155,41,155,42,155,43,155,44,155,45,155,46,155,48,155,49,155,51,155,52,155,53,155,54,155,55,155,56,155,57,155,58,155,61,155,62,155,63,155,64,155,70,155,74,155,75,155,76,155,78,155,80,155,82,155,83,155,85,155,86,155,87,155,88,155,89,155,90,155,91,155,92,155,93,155,94,155,95,155,96,155,97,155,98,155,99,155,100,155,101,155,102,155,103,155,104,155,105,155,106,155,107,155,108,155,109,155,110,155,111,155,112,155,113,155,114,155,115,155,116,155,117,155,118,155,119,155,120,155,121,155,122,155,123,155,31,124,42,124,38,124,56,124,65,124,64,124,254,129,1,130,2,130,4,130,236,129,68,136,33,130,34,130,35,130,45,130,47,130,40,130,43,130,56,130,59,130,51,130,52,130,62,130,68,130,73,130,75,130,79,130,90,130,95,130,104,130,126,136,133,136,136,136,216,136,223,136,94,137,157,127,159,127,167,127,175,127,176,127,178,127,124,124,73,101,145,124,157,124,156,124,158,124,162,124,178,124,188,124,189,124,193,124,199,124,204,124,205,124,200,124,197,124,215,124,232,124,110,130,168,102,191,127,206,127,213,127,229,127,225,127,230,127,233,127,238,127,243,127,248,124,119,125,166,125,174,125,71,126,155,126,184,158,180,158,115,141,132,141,148,141,145,141,177,141,103,141,109,141,71,140,73,140,74,145,80,145,78,145,79,145,100,145,124,155,125,155,126,155,127,155,128,155,129,155,130,155,131,155,132,155,133,155,134,155,135,155,136,155,137,155,138,155,139,155,140,155,141,155,142,155,143,155,144,155,145,155,146,155,147,155,148,155,149,155,150,155,151,155,152,155,153,155,154,155,155,155,156,155,157,155,158,155,159,155,160,155,161,155,162,155,163,155,164,155,165,155,166,155,167,155,168,155,169,155,170,155,171,155,172,155,173,155,174,155,175,155,176,155,177,155,178,155,179,155,180,155,181,155,182,155,183,155,184,155,185,155,186,155,187,155,188,155,189,155,190,155,191,155,192,155,193,155,194,155,195,155,196,155,197,155,198,155,199,155,200,155,201,155,202,155,203,155,204,155,205,155,206,155,207,155,208,155,209,155,210,155,211,155,212,155,213,155,214,155,215,155,216,155,217,155,218,155,219,155,98,145,97,145,112,145,105,145,111,145,125,145,126,145,114,145,116,145,121,145,140,145,133,145,144,145,141,145,145,145,162,145,163,145,170,145,173,145,174,145,175,145,181,145,180,145,186,145,85,140,126,158,184,141,235,141,5,142,89,142,105,142,181,141,191,141,188,141,186,141,196,141,214,141,215,141,218,141,222,141,206,141,207,141,219,141,198,141,236,141,247,141,248,141,227,141,249,141,251,141,228,141,9,142,253,141,20,142,29,142,31,142,44,142,46,142,35,142,47,142,58,142,64,142,57,142,53,142,61,142,49,142,73,142,65,142,66,142,81,142,82,142,74,142,112,142,118,142,124,142,111,142,116,142,133,142,143,142,148,142,144,142,156,142,158,142,120,140,130,140,138,140,133,140,152,140,148,140,155,101,214,137,222,137,218,137,220,137,220,155,221,155,222,155,223,155,224,155,225,155,226,155,227,155,228,155,229,155,230,155,231,155,232,155,233,155,234,155,235,155,236,155,237,155,238,155,239,155,240,155,241,155,242,155,243,155,244,155,245,155,246,155,247,155,248,155,249,155,250,155,251,155,252,155,253,155,254,155,255,155,0,156,1,156,2,156,3,156,4,156,5,156,6,156,7,156,8,156,9,156,10,156,11,156,12,156,13,156,14,156,15,156,16,156,17,156,18,156,19,156,20,156,21,156,22,156,23,156,24,156,25,156,26,156,27,156,28,156,29,156,30,156,31,156,32,156,33,156,34,156,35,156,36,156,37,156,38,156,39,156,40,156,41,156,42,156,43,156,44,156,45,156,46,156,47,156,48,156,49,156,50,156,51,156,52,156,53,156,54,156,55,156,56,156,57,156,58,156,59,156,229,137,235,137,239,137,62,138,38,139,83,151,233,150,243,150,239,150,6,151,1,151,8,151,15,151,14,151,42,151,45,151,48,151,62,151,128,159,131,159,133,159,134,159,135,159,136,159,137,159,138,159,140,159,254,158,11,159,13,159,185,150,188,150,189,150,206,150,210,150,191,119,224,150,142,146,174,146,200,146,62,147,106,147,202,147,143,147,62,148,107,148,127,156,130,156,133,156,134,156,135,156,136,156,35,122,139,156,142,156,144,156,145,156,146,156,148,156,149,156,154,156,155,156,158,156,159,156,160,156,161,156,162,156,163,156,165,156,166,156,167,156,168,156,169,156,171,156,173,156,174,156,176,156,177,156,178,156,179,156,180,156,181,156,182,156,183,156,186,156,187,156,188,156,189,156,196,156,197,156,198,156,199,156,202,156,203,156,60,156,61,156,62,156,63,156,64,156,65,156,66,156,67,156,68,156,69,156,70,156,71,156,72,156,73,156,74,156,75,156,76,156,77,156,78,156,79,156,80,156,81,156,82,156,83,156,84,156,85,156,86,156,87,156,88,156,89,156,90,156,91,156,92,156,93,156,94,156,95,156,96,156,97,156,98,156,99,156,100,156,101,156,102,156,103,156,104,156,105,156,106,156,107,156,108,156,109,156,110,156,111,156,112,156,113,156,114,156,115,156,116,156,117,156,118,156,119,156,120,156,121,156,122,156,123,156,125,156,126,156,128,156,131,156,132,156,137,156,138,156,140,156,143,156,147,156,150,156,151,156,152,156,153,156,157,156,170,156,172,156,175,156,185,156,190,156,191,156,192,156,193,156,194,156,200,156,201,156,209,156,210,156,218,156,219,156,224,156,225,156,204,156,205,156,206,156,207,156,208,156,211,156,212,156,213,156,215,156,216,156,217,156,220,156,221,156,223,156,226,156,124,151,133,151,145,151,146,151,148,151,175,151,171,151,163,151,178,151,180,151,177,154,176,154,183,154,88,158,182,154,186,154,188,154,193,154,192,154,197,154,194,154,203,154,204,154,209,154,69,155,67,155,71,155,73,155,72,155,77,155,81,155,232,152,13,153,46,153,85,153,84,153,223,154,225,154,230,154,239,154,235,154,251,154,237,154,249,154,8,155,15,155,19,155,31,155,35,155,189,158,190,158,59,126,130,158,135,158,136,158,139,158,146,158,214,147,157,158,159,158,219,158,220,158,221,158,224,158,223,158,226,158,233,158,231,158,229,158,234,158,239,158,34,159,44,159,47,159,57,159,55,159,61,159,62,159,68,159,227,156,228,156,229,156,230,156,231,156,232,156,233,156,234,156,235,156,236,156,237,156,238,156,239,156,240,156,241,156,242,156,243,156,244,156,245,156,246,156,247,156,248,156,249,156,250,156,251,156,252,156,253,156,254,156,255,156,0,157,1,157,2,157,3,157,4,157,5,157,6,157,7,157,8,157,9,157,10,157,11,157,12,157,13,157,14,157,15,157,16,157,17,157,18,157,19,157,20,157,21,157,22,157,23,157,24,157,25,157,26,157,27,157,28,157,29,157,30,157,31,157,32,157,33,157,34,157,35,157,36,157,37,157,38,157,39,157,40,157,41,157,42,157,43,157,44,157,45,157,46,157,47,157,48,157,49,157,50,157,51,157,52,157,53,157,54,157,55,157,56,157,57,157,58,157,59,157,60,157,61,157,62,157,63,157,64,157,65,157,66,157,52,226,53,226,54,226,55,226,56,226,57,226,58,226,59,226,60,226,61,226,62,226,63,226,64,226,65,226,66,226,67,226,68,226,69,226,70,226,71,226,72,226,73,226,74,226,75,226,76,226,77,226,78,226,79,226,80,226,81,226,82,226,83,226,84,226,85,226,86,226,87,226,88,226,89,226,90,226,91,226,92,226,93,226,94,226,95,226,96,226,97,226,98,226,99,226,100,226,101,226,102,226,103,226,104,226,105,226,106,226,107,226,108,226,109,226,110,226,111,226,112,226,113,226,114,226,115,226,116,226,117,226,118,226,119,226,120,226,121,226,122,226,123,226,124,226,125,226,126,226,127,226,128,226,129,226,130,226,131,226,132,226,133,226,134,226,135,226,136,226,137,226,138,226,139,226,140,226,141,226,142,226,143,226,144,226,145,226,67,157,68,157,69,157,70,157,71,157,72,157,73,157,74,157,75,157,76,157,77,157,78,157,79,157,80,157,81,157,82,157,83,157,84,157,85,157,86,157,87,157,88,157,89,157,90,157,91,157,92,157,93,157,94,157,95,157,96,157,97,157,98,157,99,157,100,157,101,157,102,157,103,157,104,157,105,157,106,157,107,157,108,157,109,157,110,157,111,157,112,157,113,157,114,157,115,157,116,157,117,157,118,157,119,157,120,157,121,157,122,157,123,157,124,157,125,157,126,157,127,157,128,157,129,157,130,157,131,157,132,157,133,157,134,157,135,157,136,157,137,157,138,157,139,157,140,157,141,157,142,157,143,157,144,157,145,157,146,157,147,157,148,157,149,157,150,157,151,157,152,157,153,157,154,157,155,157,156,157,157,157,158,157,159,157,160,157,161,157,162,157,146,226,147,226,148,226,149,226,150,226,151,226,152,226,153,226,154,226,155,226,156,226,157,226,158,226,159,226,160,226,161,226,162,226,163,226,164,226,165,226,166,226,167,226,168,226,169,226,170,226,171,226,172,226,173,226,174,226,175,226,176,226,177,226,178,226,179,226,180,226,181,226,182,226,183,226,184,226,185,226,186,226,187,226,188,226,189,226,190,226,191,226,192,226,193,226,194,226,195,226,196,226,197,226,198,226,199,226,200,226,201,226,202,226,203,226,204,226,205,226,206,226,207,226,208,226,209,226,210,226,211,226,212,226,213,226,214,226,215,226,216,226,217,226,218,226,219,226,220,226,221,226,222,226,223,226,224,226,225,226,226,226,227,226,228,226,229,226,230,226,231,226,232,226,233,226,234,226,235,226,236,226,237,226,238,226,239,226,163,157,164,157,165,157,166,157,167,157,168,157,169,157,170,157,171,157,172,157,173,157,174,157,175,157,176,157,177,157,178,157,179,157,180,157,181,157,182,157,183,157,184,157,185,157,186,157,187,157,188,157,189,157,190,157,191,157,192,157,193,157,194,157,195,157,196,157,197,157,198,157,199,157,200,157,201,157,202,157,203,157,204,157,205,157,206,157,207,157,208,157,209,157,210,157,211,157,212,157,213,157,214,157,215,157,216,157,217,157,218,157,219,157,220,157,221,157,222,157,223,157,224,157,225,157,226,157,227,157,228,157,229,157,230,157,231,157,232,157,233,157,234,157,235,157,236,157,237,157,238,157,239,157,240,157,241,157,242,157,243,157,244,157,245,157,246,157,247,157,248,157,249,157,250,157,251,157,252,157,253,157,254,157,255,157,0,158,1,158,2,158,240,226,241,226,242,226,243,226,244,226,245,226,246,226,247,226,248,226,249,226,250,226,251,226,252,226,253,226,254,226,255,226,0,227,1,227,2,227,3,227,4,227,5,227,6,227,7,227,8,227,9,227,10,227,11,227,12,227,13,227,14,227,15,227,16,227,17,227,18,227,19,227,20,227,21,227,22,227,23,227,24,227,25,227,26,227,27,227,28,227,29,227,30,227,31,227,32,227,33,227,34,227,35,227,36,227,37,227,38,227,39,227,40,227,41,227,42,227,43,227,44,227,45,227,46,227,47,227,48,227,49,227,50,227,51,227,52,227,53,227,54,227,55,227,56,227,57,227,58,227,59,227,60,227,61,227,62,227,63,227,64,227,65,227,66,227,67,227,68,227,69,227,70,227,71,227,72,227,73,227,74,227,75,227,76,227,77,227,3,158,4,158,5,158,6,158,7,158,8,158,9,158,10,158,11,158,12,158,13,158,14,158,15,158,16,158,17,158,18,158,19,158,20,158,21,158,22,158,23,158,24,158,25,158,26,158,27,158,28,158,29,158,30,158,36,158,39,158,46,158,48,158,52,158,59,158,60,158,64,158,77,158,80,158,82,158,83,158,84,158,86,158,89,158,93,158,95,158,96,158,97,158,98,158,101,158,110,158,111,158,114,158,116,158,117,158,118,158,119,158,120,158,121,158,122,158,123,158,124,158,125,158,128,158,129,158,131,158,132,158,133,158,134,158,137,158,138,158,140,158,141,158,142,158,143,158,144,158,145,158,148,158,149,158,150,158,151,158,152,158,153,158,154,158,155,158,156,158,158,158,160,158,161,158,162,158,163,158,164,158,165,158,167,158,168,158,169,158,170,158,78,227,79,227,80,227,81,227,82,227,83,227,84,227,85,227,86,227,87,227,88,227,89,227,90,227,91,227,92,227,93,227,94,227,95,227,96,227,97,227,98,227,99,227,100,227,101,227,102,227,103,227,104,227,105,227,106,227,107,227,108,227,109,227,110,227,111,227,112,227,113,227,114,227,115,227,116,227,117,227,118,227,119,227,120,227,121,227,122,227,123,227,124,227,125,227,126,227,127,227,128,227,129,227,130,227,131,227,132,227,133,227,134,227,135,227,136,227,137,227,138,227,139,227,140,227,141,227,142,227,143,227,144,227,145,227,146,227,147,227,148,227,149,227,150,227,151,227,152,227,153,227,154,227,155,227,156,227,157,227,158,227,159,227,160,227,161,227,162,227,163,227,164,227,165,227,166,227,167,227,168,227,169,227,170,227,171,227,171,158,172,158,173,158,174,158,175,158,176,158,177,158,178,158,179,158,181,158,182,158,183,158,185,158,186,158,188,158,191,158,192,158,193,158,194,158,195,158,197,158,198,158,199,158,200,158,202,158,203,158,204,158,208,158,210,158,211,158,213,158,214,158,215,158,217,158,218,158,222,158,225,158,227,158,228,158,230,158,232,158,235,158,236,158,237,158,238,158,240,158,241,158,242,158,243,158,244,158,245,158,246,158,247,158,248,158,250,158,253,158,255,158,0,159,1,159,2,159,3,159,4,159,5,159,6,159,7,159,8,159,9,159,10,159,12,159,15,159,17,159,18,159,20,159,21,159,22,159,24,159,26,159,27,159,28,159,29,159,30,159,31,159,33,159,35,159,36,159,37,159,38,159,39,159,40,159,41,159,42,159,43,159,45,159,46,159,48,159,49,159,172,227,173,227,174,227,175,227,176,227,177,227,178,227,179,227,180,227,181,227,182,227,183,227,184,227,185,227,186,227,187,227,188,227,189,227,190,227,191,227,192,227,193,227,194,227,195,227,196,227,197,227,198,227,199,227,200,227,201,227,202,227,203,227,204,227,205,227,206,227,207,227,208,227,209,227,210,227,211,227,212,227,213,227,214,227,215,227,216,227,217,227,218,227,219,227,220,227,221,227,222,227,223,227,224,227,225,227,226,227,227,227,228,227,229,227,230,227,231,227,232,227,233,227,234,227,235,227,236,227,237,227,238,227,239,227,240,227,241,227,242,227,243,227,244,227,245,227,246,227,247,227,248,227,249,227,250,227,251,227,252,227,253,227,254,227,255,227,0,228,1,228,2,228,3,228,4,228,5,228,6,228,7,228,8,228,9,228,50,159,51,159,52,159,53,159,54,159,56,159,58,159,60,159,63,159,64,159,65,159,66,159,67,159,69,159,70,159,71,159,72,159,73,159,74,159,75,159,76,159,77,159,78,159,79,159,82,159,83,159,84,159,85,159,86,159,87,159,88,159,89,159,90,159,91,159,92,159,93,159,94,159,95,159,96,159,97,159,98,159,99,159,100,159,101,159,102,159,103,159,104,159,105,159,106,159,107,159,108,159,109,159,110,159,111,159,112,159,113,159,114,159,115,159,116,159,117,159,118,159,119,159,120,159,121,159,122,159,123,159,124,159,125,159,126,159,129,159,130,159,141,159,142,159,143,159,144,159,145,159,146,159,147,159,148,159,149,159,150,159,151,159,152,159,156,159,157,159,158,159,161,159,162,159,163,159,164,159,165,159,44,249,121,249,149,249,231,249,241,249,10,228,11,228,12,228,13,228,14,228,15,228,16,228,17,228,18,228,19,228,20,228,21,228,22,228,23,228,24,228,25,228,26,228,27,228,28,228,29,228,30,228,31,228,32,228,33,228,34,228,35,228,36,228,37,228,38,228,39,228,40,228,41,228,42,228,43,228,44,228,45,228,46,228,47,228,48,228,49,228,50,228,51,228,52,228,53,228,54,228,55,228,56,228,57,228,58,228,59,228,60,228,61,228,62,228,63,228,64,228,65,228,66,228,67,228,68,228,69,228,70,228,71,228,72,228,73,228,74,228,75,228,76,228,77,228,78,228,79,228,80,228,81,228,82,228,83,228,84,228,85,228,86,228,87,228,88,228,89,228,90,228,91,228,92,228,93,228,94,228,95,228,96,228,97,228,98,228,99,228,100,228,101,228,102,228,103,228,12,250,13,250,14,250,15,250,17,250,19,250,20,250,24,250,31,250,32,250,33,250,35,250,36,250,39,250,40,250,41,250,129,46,22,232,23,232,24,232,132,46,115,52,71,52,136,46,139,46,30,232,158,53,26,54,14,54,140,46,151,46,110,57,24,57,38,232,207,57,223,57,115,58,208,57,43,232,44,232,78,59,110,60,224,60,167,46,49,232,50,232,170,46,86,64,95,65,174,46,55,67,179,46,182,46,183,46,59,232,177,67,172,67,187,46,221,67,214,68,97,70,76,70,67,232,35,71,41,71,124,71,141,71,202,46,71,73,122,73,125,73,130,73,131,73,133,73,134,73,159,73,155,73,183,73,182,73,84,232,85,232,163,76,159,76,160,76,161,76,119,76,162,76,19,77,20,77,21,77,22,77,23,77,24,77,25,77,174,77,100,232,104,228,105,228,106,228,107,228,108,228,109,228,110,228,111,228,112,228,113,228,114,228,115,228,116,228,117,228,118,228,119,228,120,228,121,228,122,228,123,228,124,228,125,228,126,228,127,228,128,228,129,228,130,228,131,228,132,228,133,228,134,228,135,228,136,228,137,228,138,228,139,228,140,228,141,228,142,228,143,228,144,228,145,228,146,228,147,228,148,228,149,228,150,228,151,228,152,228,153,228,154,228,155,228,156,228,157,228,158,228,159,228,160,228,161,228,162,228,163,228,164,228,165,228,166,228,167,228,168,228,169,228,170,228,171,228,172,228,173,228,174,228,175,228,176,228,177,228,178,228,179,228,180,228,181,228,182,228,183,228,184,228,185,228,186,228,187,228,188,228,189,228,190,228,191,228,192,228,193,228,194,228,195,228,196,228,197,228,240,67,50,76,3,70,166,69,120,69,103,114,119,77,179,69,177,124,226,76,197,124,149,59,54,71,68,71,71,76,64,76,191,66,23,54,82,115,139,110,210,112,87,76,81,163,79,71,218,69,133,76,108,124,7,77,164,74,161,70,35,107,37,114,84,90,99,26,6,62,97,63,77,102,251,86,0,0,149,125,29,89,185,139,244,61,52,151,239,123,219,91,94,29,164,90,37,54,176,158,209,90,183,91,252,92,110,103,147,133,69,153,97,116,157,116,117,56,83,29,158,54,33,96,236,62,222,88,245,58,252,122,151,159,97,65,13,137,234,49,138,10,94,50,10,67,132,132,150,159,47,148,48,73,19,134,150,88,74,151,24,146,208,121,50,122,96,102,41,106,157,136,76,116,197,123,130,103,44,122,79,82,70,144,230,52,196,115,185,93,198,116,199,159,179,87,47,73,76,84,49,65,142,54,24,88,114,122,101,123,143,139,174,70,136,110,129,65,153,93,174,123,188,36,200,159,193,36,201,36,204,36,201,159,4,133,187,53,180,64,202,159,225,68,255,173,193,98,110,112,203,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,49,193,49,194,49,195,49,196,49,12,1,197,49,209,0,205,0,198,49,199,49,203,0,232,31,200,49,202,0,201,49,202,49,203,49,204,49,14,1,205,49,206,49,0,1,193,0,205,1,192,0,18,1,201,0,26,1,200,0,76,1,211,0,209,1,210,0,0,220,190,30,4,220,192,30,202,0,1,1,225,0,206,1,224,0,81,2,19,1,233,0,27,1,232,0,43,1,237,0,208,1,236,0,77,1,243,0,210,1,242,0,107,1,250,0,212,1,249,0,214,1,216,1,218,1,220,1,252,0,8,220,191,30,12,220,193,30,234,0,97,2,218,35,219,35], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+79346);
/* memory initializer */ allocate([169,163,69,17,0,0,10,101,0,0,0,0,61,78,221,110,78,157,223,145,0,0,0,0,53,119,145,100,26,79,40,79,168,79,86,81,116,81,156,81,228,81,161,82,168,82,59,83,78,83,209,83,216,83,226,86,240,88,4,89,7,89,50,89,52,89,102,91,158,91,159,91,154,92,134,94,59,96,137,101,254,103,4,104,101,104,78,109,188,112,53,117,164,126,172,126,186,126,199,126,207,126,223,126,6,127,55,127,122,130,207,130,111,131,198,137,190,139,226,139,102,143,103,143,110,143,17,116,252,124,205,125,70,105,201,122,39,82,0,0,0,0,0,0,0,0,140,145,184,120,94,145,188,128,0,0,11,141,246,128,231,9,0,0,0,0,159,128,199,158,205,76,201,157,12,158,62,76,246,157,14,112,10,158,51,161,193,53,0,0,154,110,62,130,25,117,0,0,17,73,108,154,143,154,153,159,135,121,108,132,202,29,208,5,230,42,36,78,129,78,128,78,135,78,191,78,235,78,55,79,76,52,189,79,72,62,3,80,136,80,125,52,147,52,165,52,134,81,5,89,219,81,252,81,5,82,137,78,121,82,144,82,39,83,199,53,169,83,81,53,176,83,83,53,194,83,35,84,109,53,114,53,129,54,147,84,163,84,180,84,185,84,208,84,239,84,24,85,35,85,40,85,152,53,63,85,165,53,191,53,215,85,197,53,132,125,37,85,0,0,66,12,21,13,43,81,144,85,198,44,236,57,65,3,70,142,184,77,229,148,83,64,190,128,122,119,56,44,52,58,213,71,93,129,242,105,234,77,221,100,124,13,180,15,213,12,244,16,141,100,126,142,150,14,11,12,100,15,169,44,86,130,211,68,0,0,70,13,77,154,233,128,244,71,167,78,194,44,178,154,103,58,244,149,237,63,6,53,199,82,212,151,200,120,68,45,110,157,21,152,0,0,217,67,165,96,180,100,227,84,76,45,202,43,119,16,251,57,111,16,218,102,22,103,160,121,234,100,82,80,67,12,104,142,161,33,76,139,49,7,0,0,11,72,169,1,250,63,115,88,141,45,0,0,200,69,252,4,151,96,76,15,150,13,121,85,187,64,186,67,0,0,180,74,102,42,157,16,170,129,245,152,156,13,121,99,254,57,117,39,192,141,161,86,124,100,67,62,0,0,1,166,9,14,207,42,201,44,0,0,200,16,194,57,146,57,6,58,155,130,120,53,73,94,199,32,82,86,49,15,178,44,32,151,188,52,61,108,59,78,0,0,0,0,116,117,139,46,8,34,91,166,205,140,122,14,52,12,28,104,147,127,207,16,3,40,57,41,251,53,227,81,140,14,141,15,170,14,147,63,48,15,71,13,79,17,76,14,0,0,171,14,169,11,72,13,192,16,61,17,249,63,150,38,50,100,173,15,244,51,57,118,206,43,126,13,127,13,81,44,85,44,24,58,152,14,199,16,46,15,50,166,80,107,210,140,153,141,202,140,170,149,204,84,196,130,185,85,0,0,195,158,38,156,182,154,94,119,238,45,64,113,109,129,236,128,28,92,114,101,52,129,151,55,95,83,189,128,182,145,250,14,15,14,119,14,251,14,221,53,235,77,9,54,214,12,175,86,181,39,201,16,16,14,120,14,120,16,72,17,7,130,85,20,121,14,80,78,164,45,84,90,29,16,30,16,245,16,246,16,156,87,17,14,148,118,205,130,181,15,123,14,126,81,3,55,182,15,128,17,216,82,189,162,218,73,58,24,119,65,124,130,153,88,104,82,26,54,61,87,178,123,104,91,0,72,44,75,39,159,231,73,31,156,141,155,116,91,61,49,251,85,242,53,137,86,40,78,2,89,193,27,120,248,81,151,134,0,91,78,187,78,62,53,35,92,81,95,196,95,250,56,76,98,53,101,122,107,53,108,58,108,108,112,43,114,44,78,173,114,233,72,82,127,59,121,249,124,83,127,106,98,193,52,0,0,75,99,2,128,128,128,18,102,81,105,93,83,100,136,193,137,178,120,160,139,29,141,133,148,120,149,127,149,232,149,15,142,230,151,117,152,206,152,222,152,99,153,16,152,124,156,31,158,196,158,111,107,7,249,55,78,135,0,29,150,55,98,162,148,0,0,59,80,254,109,115,156,166,159,201,61,143,136,78,65,119,112,245,92,32,75,205,81,89,53,48,93,34,97,50,138,167,143,246,145,145,113,25,103,186,115,129,50,7,161,139,60,128,25,16,75,228,120,2,116,174,81,15,135,9,64,99,106,186,162,35,66,15,134,111,10,42,122,71,153,234,138,85,151,77,112,36,83,126,32,244,147,217,118,227,137,167,159,221,119,163,78,240,79,188,80,47,78,23,79,168,159,52,84,139,125,146,88,208,88,182,29,146,94,153,94,194,95,18,39,139,101,249,51,25,105,67,106,99,60,255,108,0,0,0,114,5,69,140,115,219,62,19,74,21,91,185,116,131,139,164,92,149,86,147,122,236,123,195,124,108,126,248,130,151,133,169,159,144,136,170,159,185,142,171,159,207,143,95,133,224,153,33,146,172,159,185,141,63,20,113,64,162,66,26,90,0,0,0,0,0,0,104,152,107,103,118,66,61,87,0,0,214,133,123,73,191,130,13,113,129,76,116,109,123,93,21,107,190,111,173,159,174,159,150,91,175,159,231,102,91,126,87,110,202,121,136,61,195,68,86,50,150,39,154,67,54,69,0,0,213,92,26,59,249,138,120,92,18,61,81,53,120,93,178,159,87,113,88,69,236,64,35,30,119,76,120,57,74,52,164,1,65,108,204,138,180,79,57,2,191,89,108,129,86,152,250,152,59,95,159,11,0,0,193,33,109,137,2,65,187,70,121,144,7,63,179,159,181,161,248,64,214,55,247,70,70,108,124,65,178,134,255,115,109,69,212,56,154,84,97,69,27,69,137,77,123,76,118,77,234,69,200,63,15,75,97,54,222,68,189,68,237,65,62,93,72,93,86,93,252,61,15,56,164,93,185,93,32,56,56,56,66,94,189,94,37,95,131,95,8,57,20,57,63,57,77,57,215,96,61,97,229,92,137,57,183,97,185,97,207,97,184,57,44,98,144,98,229,98,24,99,248,57,177,86,3,58,226,99,251,99,7,100,90,100,75,58,192,100,21,93,33,86,159,159,151,58,134,101,189,58,255,101,83,102,242,58,146,102,34,59,22,103,66,59,164,103,0,104,88,59,74,104,132,104,114,59,113,59,123,59,9,105,67,105,92,114,100,105,159,105,133,105,188,59,214,105,221,59,101,106,116,106,113,106,130,106,236,59,153,106,242,59,171,106,181,106,212,106,246,106,129,107,193,107,234,107,117,108,170,108,203,60,2,109,6,109,38,109,129,109,239,60,164,109,177,109,21,110,24,110,41,110,134,110,192,137,187,110,226,110,218,110,127,159,232,110,233,110,36,111,52,111,70,61,65,63,129,111,190,111,106,61,117,61,183,113,153,92,138,61,44,112,145,61,80,112,84,112,111,112,127,112,137,112,37,3,193,67,241,53,216,14,215,62,190,87,211,110,62,113,224,87,78,54,162,105,233,139,116,91,73,122,225,88,217,148,101,122,125,122,172,89,187,122,176,122,194,122,195,122,209,113,141,100,202,65,218,122,221,122,234,122,239,65,178,84,1,92,11,123,85,123,41,123,14,83,254,92,162,123,111,123,156,131,180,91,127,108,208,123,33,132,146,123,0,0,32,93,173,61,101,92,146,132,250,123,0,0,53,124,193,92,68,124,131,124,130,72,166,124,125,102,120,69,201,124,199,124,230,124,116,124,243,124,245,124,0,0,103,126,29,69,68,110,93,125,214,110,141,116,137,125,171,125,53,113,179,125,0,0,87,64,41,96,228,125,19,61,245,125,249,23,229,125,109,131,0,0,33,97,90,97,110,126,146,126,43,67,108,148,39,126,64,127,65,127,71,127,54,121,208,98,225,153,151,127,81,99,163,127,97,22,104,0,92,69,102,55,3,69,58,131,250,127,137,100,0,0,8,128,29,128,0,0,47,128,135,160,195,108,59,128,60,128,97,128,20,39,137,73,38,102,227,61,232,102,37,103,167,128,72,138,7,129,26,129,176,88,246,38,127,108,152,100,184,79,231,100,138,20,24,130,94,24,83,106,101,74,149,74,122,68,41,130,13,11,82,106,126,61,249,79,253,20,226,132,98,131,10,107,167,73,48,53,115,23,248,61,170,130,27,105,148,249,219,65,75,133,208,130,26,131,22,14,180,23,193,54,125,49,90,53,123,130,226,130,24,131,139,62,163,109,5,107,151,107,206,53,191,61,29,131,236,85,133,131,11,69,165,109,172,131,0,0,211,131,126,52,212,110,87,106,90,133,150,52,66,110,239,46,88,132,228,91,113,132,211,61,228,68,167,106,74,132,181,60,88,121,0,0,150,107,119,110,67,110,222,132,0,0,145,131,160,68,147,132,228,132,145,92,64,66,192,92,67,69,52,133,242,90,153,110,39,69,115,133,22,69,191,103,22,134,37,134,59,134,193,133,136,112,2,134,130,21,205,112,178,249,106,69,40,134,72,54,162,24,247,83,154,115,126,134,113,135,248,160,238,135,39,44,177,135,218,135,15,136,97,86,108,134,86,104,15,70,69,136,70,136,224,117,185,61,228,117,94,136,156,136,91,70,180,136,181,136,193,99,197,136,119,119,15,119,135,137,138,137,0,0,0,0,167,137,188,137,37,138,231,137,36,121,189,122,156,138,147,119,254,145,144,138,89,122,233,122,58,123,143,63,19,71,56,123,124,113,12,139,31,139,48,84,101,85,63,139,76,139,77,139,169,138,122,74,144,139,155,139,175,138,223,22,21,70,79,136,155,140,84,125,143,125,212,249,37,55,83,125,214,140,152,125,189,125,18,141,3,141,16,25,219,140,92,112,17,141,201,76,208,62,0,0,169,141,2,128,20,16,138,73,124,59,188,129,12,113,231,122,173,142,182,142,195,142,212,146,25,143,45,143,101,131,18,132,165,143,3,147,159,162,80,10,179,143,42,73,222,137,61,133,187,61,248,94,98,50,249,143,20,160,188,134,1,133,37,35,128,57,215,110,55,144,60,133,190,122,97,144,108,133,11,134,168,144,19,135,196,144,230,134,174,144,0,0,103,145,240,58,169,145,196,145,172,124,51,137,137,30,14,146,159,108,65,146,98,146,185,85,0,0,198,138,155,60,12,139,219,85,49,13,44,147,107,147,225,138,235,139,143,112,195,90,226,138,229,138,101,73,68,146,236,139,57,140,255,139,115,147,91,148,188,142,133,149,166,149,38,148,160,149,246,111,185,66,122,38,216,134,124,18,46,62,223,73,28,108,123,150,150,150,108,65,163,150,213,110,218,97,182,150,245,120,224,138,189,150,204,83,161,73,184,108,116,2,16,100,175,144,229,144,209,74,21,25,10,51,49,151,66,134,54,151,15,74,61,69,133,69,233,74,117,112,65,91,27,151,0,0,213,145,87,151,74,91,235,145,95,151,37,148,208,80,183,48,188,48,137,151,159,151,177,151,190,151,192,151,210,151,224,151,108,84,238,151,28,116,51,148,0,0,245,151,29,148,122,121,209,74,52,152,51,152,75,152,102,152,14,59,117,113,81,61,48,6,92,65,6,87,202,152,183,152,200,152,199,152,255,74,39,109,211,22,176,85,225,152,230,152,236,152,120,147,57,153,41,74,114,75,87,152,5,153,245,153,12,154,59,154,16,154,88,154,37,87,196,54,177,144,213,155,224,154,226,154,5,155,244,154,14,76,20,155,45,155,0,134,52,80,52,155,168,105,195,56,125,48,80,155,64,155,62,157,69,90,99,24,142,155,75,66,2,156,255,155,12,156,104,158,212,157,183,159,146,161,171,161,225,160,35,161,223,161,126,157,131,157,52,161,14,158,136,104,196,157,91,33,147,161,32,162,59,25,51,162,57,157,185,160,180,162,144,158,149,158,158,158,162,158,52,77,170,158,175,158,100,67,193,158,96,59,229,57,29,61,50,79,190,55,43,140,2,159,8,159,150,75,36,148,162,109,23,159,0,0,57,159,159,86,138,86,69,159,184,153,139,144,242,151,127,132,98,159,105,159,220,122,142,159,22,114,190,75,117,73,187,73,119,113,248,73,72,67,81,74,158,115,218,139,250,24,159,121,126,137,54,142,105,147,243,147,68,138,236,146,129,147,203,147,108,137,185,68,23,114,235,62,114,119,67,122,208,112,115,68,248,67,126,113,239,23,163,112,190,24,153,53,199,62,133,24,47,84,248,23,34,55,251,22,57,24,225,54,116,23,209,24,75,95,35,55,192,22,91,87,37,74,254,19,168,18,198,19,182,20,3,133,166,54,0,0,85,132,148,73,101,113,49,62,92,85,251,62,82,112,244,68,238,54,157,153,38,111,249,103,51,55,21,60,231,61,108,88,34,25,16,104,87,64,63,55,225,64,139,64,15,65,33,108,203,84,158,86,177,102,146,86,223,15,168,11,13,14,198,147,19,139,156,147,248,78,43,81,25,56,54,68,188,78,101,4,127,3,75,79,138,79,81,86,104,90,171,1,203,3,153,57,10,3,20,4,53,52,41,79,192,2,179,142,117,2,218,138,12,2,152,78,205,80,13,81,162,79,3,79,14,74,138,62,66,79,46,80,108,80,129,80,204,79,229,79,88,80,252,80,0,0,0,0,0,0,0,0,118,110,149,53,57,62,191,62,114,109,132,24,137,62,168,81,195,81,224,5,221,68,163,4,146,4,145,4,122,141,156,138,14,7,89,82,164,82,115,8,225,82,0,0,122,70,140,113,140,67,32,12,172,73,228,16,209,105,29,14,0,0,222,62,153,116,20,116,86,116,152,115,142,75,188,74,141,64,208,83,132,53,15,114,201,64,180,85,69,3,205,84,198,11,29,87,93,146,244,150,102,147,221,87,141,87,127,87,62,54,203,88,153,90,70,138,250,22,111,23,16,23,44,90,184,89,143,146,126,90,207,90,18,90,70,89,243,25,97,24,149,66,245,54,5,109,67,116,33,90,131,94,129,90,215,139,19,4,224,147,140,116,3,19,5,113,114,73,8,148,251,137,189,147,160,55,30,92,158,92,94,94,72,94,150,25,124,25,238,58,205,94,79,91,3,25,4,25,1,55,160,24,221,54,254,22,211,54,42,129,71,138,186,29,114,52,168,137,12,95,14,95,39,25,171,23,107,90,59,23,68,91,20,134,253,117,96,136,126,96,96,40,43,38,219,95,184,62,175,37,190,37,136,144,115,111,192,97,62,0,70,0,27,38,153,97,152,97,117,96,155,44,7,45,212,70,77,145,113,100,101,70,106,43,41,58,34,43,80,52,234,152,120,46,55,99,91,164,182,100,49,99,209,99,227,73,103,45,164,98,161,44,59,100,107,101,114,105,244,59,142,48,173,50,137,73,171,50,13,85,224,50,217,24,63,148,206,102,137,50,179,49,224,58,144,65,132,85,34,139,143,85,252,22,91,85,37,84,238,120,3,49,42,24,52,50,100,52,15,50,130,49,201,66,142,102,36,109,107,102,147,75,48,102,112,120,235,29,99,102,210,50,225,50,30,102,114,88,209,56,58,56,188,55,153,59,162,55,254,51,208,116,150,59,143,103,42,70,182,104,30,104,196,59,190,106,99,56,213,55,135,68,51,106,82,106,201,106,5,107,18,25,17,101,152,104,76,106,215,59,122,106,87,107,192,63,154,60,160,147,242,146,234,139,203,138,137,146,30,128,220,137,103,148,165,109,11,111,236,73,0,0,127,63,143,61,4,110,60,64,61,90,10,110,71,88,36,109,66,120,59,113,26,67,118,66,241,112,80,114,135,114,148,114,143,71,37,71,121,81,164,74,235,5,122,116,248,62,95,54,74,74,23,73,225,95,6,63,177,62,223,74,35,140,53,63,167,96,243,62,204,116,60,116,135,147,55,116,159,68,234,109,81,69,131,117,99,63,217,76,6,77,88,63,85,117,115,118,198,165,25,59,104,116,204,138,171,73,142,73,251,58,205,61,78,74,255,62,197,73,243,72,250,145,50,87,66,147,227,138,100,24,223,80,33,82,231,81,120,119,50,50,14,119,15,119,123,119,151,70,129,55,94,58,240,72,56,116,155,116,191,62,186,74,199,74,200,64,150,74,174,97,7,147,129,85,30,120,141,120,136,120,210,120,208,115,89,121,65,119,227,86,14,65,0,0,150,132,165,121,45,106,250,62,58,122,244,121,110,65,230,22,50,65,53,146,241,121,76,13,140,73,153,2,186,61,110,23,151,53,107,85,112,53,170,54,212,1,13,12,226,122,89,90,245,38,175,90,156,90,13,90,91,2,240,120,42,90,198,91,254,122,249,65,93,124,109,124,17,66,179,91,188,94,166,94,205,124,249,73,176,23,142,124,124,124,174,124,178,106,220,125,7,126,211,125,78,127,97,98,92,97,72,123,151,125,130,94,106,66,117,107,22,9,214,103,78,0,207,53,196,87,18,100,248,99,98,73,221,127,39,123,44,8,233,90,67,93,12,123,14,94,230,153,69,134,99,154,28,106,63,52,226,57,247,73,173,101,31,154,160,101,128,132,39,113,209,108,234,68,55,129,2,68,198,128,9,129,66,129,180,103,195,152,66,106,98,130,101,130,81,106,83,132,167,109,16,134,27,114,134,90,127,65,64,24,43,91,161,24,228,90,216,24,160,134,188,249,143,61,45,136,34,116,2,90,110,136,69,79,135,136,191,136,230,136,101,137,77,137,131,86,84,137,133,119,132,119,245,139,217,139,156,139,249,137,173,62,163,132,245,70,207,70,242,55,61,138,28,138,72,148,77,95,43,146,132,66,212,101,41,113,196,112,69,24,109,157,159,140,233,140,220,125,154,89,195,119,240,89,110,67,212,54,42,142,167,142,9,76,48,143,74,143,244,66,88,108,187,111,33,35,155,72,121,111,139,110,218,23,233,155,181,54,47,73,187,144,0,0,113,85,6,73,187,145,4,148,75,138,98,64,252,138,39,148,29,140,59,140,229,132,43,138,153,149,167,149,151,149,150,149,52,141,69,116,194,62,255,72,66,74,234,67,231,62,37,50,143,150,231,142,102,142,101,142,204,62,237,73,120,74,238,63,18,116,107,116,252,62,65,151,176,144,71,104,29,74,147,144,223,87,0,0,104,147,137,137,38,140,47,139,190,99,186,146,17,91,105,139,60,73,249,115,27,66,155,151,113,151,56,153,38,15,193,93,197,139,178,74,31,152,218,148,246,146,215,149,229,145,192,68,80,139,103,74,100,139,220,152,69,138,0,63,42,146,37,73,20,132,59,153,77,153,6,123,253,61,155,153,111,75,170,153,92,154,101,139,200,88,143,106,33,154,254,90,47,154,241,152,144,75,72,153,188,153,189,75,151,75,125,147,114,88,2,19,34,88,184,73,232,20,68,120,31,39,184,61,197,104,125,61,88,148,39,57,80,97,129,39,107,41,7,97,79,156,83,156,123,156,53,156,16,156,127,155,207,155,45,158,159,155,245,161,254,160,33,157,174,76,4,65,24,158,176,76,12,157,180,161,237,160,243,160,47,153,165,157,189,132,18,110,223,111,130,107,252,133,51,69,164,109,132,110,240,109,32,132,238,133,0,110,215,55,100,96,226,121,156,53,64,54,45,73,222,73,98,61,219,147,190,146,72,147,191,2,185,120,119,146,77,148,228,79,64,52,100,144,93,85,61,120,84,120,182,120,75,120,87,23,201,49,65,73,154,54,114,79,218,111,217,111,0,0,30,112,20,84,181,65,187,87,243,88,138,87,22,157,215,87,52,113,175,52,172,65,235,113,64,108,151,79,0,0,181,23,73,138,12,97,206,90,11,90,188,66,136,68,44,55,123,75,252,137,187,147,184,147,214,24,29,15,114,132,192,108,19,20,250,66,38,44,193,67,148,89,183,61,65,103,168,125,91,97,164,96,185,73,139,73,250,137,229,146,226,115,233,62,180,116,99,139,159,24,225,62,179,74,216,106,243,115,251,115,214,62,62,74,148,74,217,23,102,74,167,3,36,20,229,73,72,116,22,73,165,112,118,73,132,146,230,115,95,147,254,4,49,147,206,138,22,138,134,147,231,139,213,85,53,73,130,138,107,113,67,73,255,12,164,86,26,6,235,11,184,12,2,85,196,121,250,23,254,125,194,22,80,74,82,24,46,69,1,148,10,55,192,138,173,73,176,89,191,24,131,24,132,116,161,90,226,54,91,61,176,54,95,146,121,90,129,138,98,24,116,147,205,60,180,10,150,74,138,57,244,80,105,61,76,61,156,19,117,113,251,66,24,130,15,110,228,144,235,68,87,109,79,126,103,112,175,108,214,60,237,63,45,62,2,110,12,111,111,61,245,3,81,117,188,54,200,52,128,70,218,62,113,72,196,89,110,146,62,73,65,143,28,140,192,107,18,88,200,87,214,54,82,20,254,112,98,67,113,74,227,47,176,18,189,35,185,104,103,105,152,19,229,52,244,123,223,54,131,138,214,55,250,51,159,76,26,106,173,54,183,108,62,132,223,68,206,68,38,109,81,109,130,108,222,111,23,111,9,113,61,131,58,23,237,131,128,108,83,112,219,23,137,89,130,90,179,23,97,90,113,90,5,25,252,65,45,55,239,89,60,23,199,54,142,113,144,147,154,102,165,66,110,90,43,90,147,66,43,106,249,62,54,119,91,68,202,66,29,113,89,66,225,137,176,79,40,109,194,92,206,68,77,126,189,67,12,106,86,66,4,19,166,112,51,113,233,67,165,61,223,108,37,248,79,74,101,126,235,89,47,93,243,61,92,95,93,74,223,23,164,125,38,132,133,84,250,58,0,51,20,2,126,87,213,8,25,6,229,63,158,31,182,162,3,112,91,145,112,93,143,115,211,124,89,138,32,148,200,79,231,127,205,114,16,115,244,122,56,115,57,115,246,86,65,115,72,115,169,62,24,123,108,144,245,113,242,72,225,115,246,129,202,62,12,119,209,62,162,108,253,86,25,116,30,116,31,116,226,62,240,62,244,62,250,62,211,116,14,63,83,63,66,117,109,117,114,117,141,117,124,63,200,117,220,117,192,63,77,118,215,63,116,118,220,63,122,118,92,79,136,113,35,86,128,137,105,88,29,64,67,119,57,64,97,103,69,64,219,53,152,119,106,64,111,64,94,92,190,119,203,119,242,88,24,120,185,112,28,120,168,64,57,120,71,120,81,120,102,120,72,132,53,85,51,121,3,104,50,121,3,65,9,65,145,121,153,121,187,143,6,122,188,143,103,65,145,122,178,65,188,122,121,130,196,65,207,122,219,122,207,65,33,78,98,123,108,123,123,123,18,124,27,124,96,66,122,66,123,124,156,124,140,66,184,124,148,66,237,124,147,143,192,112,207,12,207,125,212,125,208,125,253,125,174,127,180,127,159,114,151,67,32,128,37,128,57,123,46,128,49,128,84,128,204,61,180,87,160,112,183,128,233,128,237,67,12,129,42,115,14,129,18,129,96,117,20,129,1,68,57,59,86,129,89,129,90,129,19,68,58,88,124,129,132,129,37,68,147,129,45,68,165,129,239,87,193,129,228,129,84,130,143,68,166,130,118,130,202,130,216,130,255,130,176,68,87,131,105,150,138,105,5,132,245,112,100,132,227,96,136,132,4,69,190,132,225,132,248,132,16,133,56,133,82,133,59,69,111,133,112,133,224,133,119,69,114,134,146,134,178,134,239,134,69,150,139,135,6,70,23,70,174,136,255,136,36,137,71,137,145,137,103,121,41,138,56,138,148,138,180,138,81,140,212,140,242,140,28,141,152,71,95,88,195,141,237,71,238,78,58,142,216,85,84,87,113,142,245,85,176,142,55,72,206,142,226,142,228,142,237,142,242,142,183,143,193,143,202,143,204,143,51,144,196,153,173,72,224,152,19,146,30,73,40,146,88,146,107,146,177,146,174,146,191,146,227,146,235,146,243,146,244,146,253,146,67,147,132,147,173,147,69,73,81,73,191,158,23,148,1,83,29,148,45,148,62,148,106,73,84,148,121,148,45,149,162,149,167,73,244,149,51,150,229,73,160,103,36,74,64,151,53,74,178,151,194,151,84,86,228,74,232,96,185,152,25,75,241,152,68,88,14,153,25,153,180,81,28,153,55,153,66,153,93,153,98,153,112,75,197,153,157,75,60,154,15,155,131,122,105,155,129,155,221,155,241,155,244,155,109,76,32,156,111,55,194,27,73,157,58,156,254,158,80,86,147,157,189,157,192,157,252,157,246,148,182,143,123,158,172,158,177,158,189,158,198,158,220,148,226,158,241,158,248,158,200,122,68,159,148,0,183,2,160,3,26,105,195,148,172,89,215,4,64,88,193,148,185,55,213,5,21,6,118,6,186,22,87,87,115,113,194,10,205,10,191,11,106,84,59,248,203,11,158,84,251,11,59,12,83,12,101,12,124,12,231,96,141,12,122,86,181,12,221,12,237,12,111,13,178,13,200,13,85,105,47,156,165,135,4,14,14,14,215,14,144,15,45,15,115,14,32,92,188,15,11,94,92,16,79,16,118,16,30,103,123,16,136,16,150,16,71,54,191,16,211,16,47,17,59,17,100,83,173,132,227,18,117,19,54,19,129,139,119,21,25,22,195,23,199,23,120,78,187,112,45,24,106,25,45,26,69,26,42,28,112,28,172,28,200,30,195,98,213,30,21,31,152,113,85,104,69,32,233,105,200,54,124,34,215,35,250,35,42,39,113,40,79,41,253,130,103,41,147,41,213,42,165,137,232,42,160,143,14,43,184,151,63,43,71,152,189,154,76,44,0,0,136,44,183,44,232,91,8,45,18,45,183,45,149,45,66,46,116,47,204,47,51,48,102,48,31,51,222,51,177,95,72,102,191,102,121,122,103,53,243,53,0,0,186,73,0,0,26,54,22,55,0,0,70,3,181,88,14,103,24,105,167,58,87,118,226,95,17,62,185,62,254,117,154,32,208,72,184,74,25,65,154,138,238,66,13,67,59,64,52,67,150,67,69,74,202,5,210,81,17,6,159,89,168,30,190,59,255,60,4,68,214,68,136,87,116,70,155,57,47,71,232,133,201,153,98,55,195,33,94,139,78,139,0,0,18,72,251,72,21,74,9,114,192,74,120,12,101,89,165,78,134,79,121,7,218,142,44,80,143,82,63,87,113,113,153,82,25,84,74,63,167,74,188,85,70,84,110,84,82,107,0,0,115,52,63,85,50,118,94,85,24,71,98,85,102,85,199,87,63,73,93,88,102,80,251,52,204,51,0,0,3,89,124,71,72,137,174,90,137,91,6,92,144,29,161,87,81,113,0,0,2,97,18,124,86,144,178,97,154,79,98,139,2,100,74,100,91,93,247,107,0,0,132,100,28,25,234,138,246,73,136,100,239,63,18,101,192,75,191,101,181,102,27,39,101,148,225,87,149,97,39,90,205,248,0,0,185,86,33,69,252,102,106,78,52,73,86,150,143,109,189,108,24,54,119,137,153,103,110,104,17,100,94,104,0,0,199,104,66,123,192,144,17,10,38,105,0,0,57,105,69,122,0,0,250,105,38,154,45,106,95,54,105,100,33,0,131,121,52,106,91,107,44,93,25,53,0,0,157,107,208,70,164,108,59,117,101,136,174,109,182,88,28,55,141,37,75,112,205,113,84,60,128,114,133,114,129,146,122,33,139,114,48,147,230,114,208,73,57,108,159,148,80,116,248,14,39,136,245,136,38,41,115,132,177,23,184,110,42,74,32,24,164,57,185,54,0,0,0,0,63,69,182,102,173,156,164,152,67,137,204,119,88,120,214,86,223,64,10,22,161,57,47,55,232,128,197,19,173,113,102,131,221,121,168,145,0,0,183,76,175,112,171,137,253,121,10,122,11,123,102,125,122,65,67,123,126,121,9,128,181,111,223,162,3,106,24,131,162,83,7,110,191,147,54,104,93,151,111,129,35,128,181,105,237,19,47,50,72,128,133,93,48,140,131,128,21,87,35,152,73,137,171,93,136,73,190,101,213,105,210,83,165,74,129,63,17,60,54,103,144,128,244,128,46,129,161,31,79,129,137,129,175,129,26,130,6,131,47,131,138,131,202,53,104,132,170,134,250,72,230,99,86,137,8,120,85,146,184,137,242,67,231,137,223,67,232,137,70,139,212,139,248,89,9,140,0,0,197,143,236,144,0,0,16,145,60,145,247,61,94,145,202,74,208,143,143,114,139,86,231,148,233,149,176,149,184,149,50,151,209,152,73,153,106,153,195,153,40,154,14,155,90,157,155,157,159,126,248,158,35,159,164,76,71,149,147,162,162,113,255,162,145,77,18,144,203,165,156,77,156,12,190,143,193,85,186,143,176,36,185,143,147,74,9,69,127,126,86,111,177,106,234,78,228,52,44,139,157,120,58,55,128,142,245,23,36,128,108,139,153,139,62,122,175,102,235,61,85,118,183,60,53,86,86,89,154,78,129,94,88,98,191,86,109,14,14,142,109,91,136,62,158,76,222,99,0,0,246,23,123,24,48,101,45,86,74,92,26,84,17,83,198,61,152,157,125,76,34,86,30,86,73,127,216,94,117,89,64,61,112,135,28,78,234,15,73,13,186,54,23,129,94,157,24,141,59,118,69,156,78,118,185,119,69,147,50,84,72,129,247,130,37,86,50,129,24,132,189,128,234,85,98,121,67,86,22,84,157,14,206,53,5,86,241,85,241,102,226,130,45,54,52,117,240,85,186,85,151,84,114,85,65,12,150,12,208,94,72,81,118,14,98,44,162,14,171,158,90,125,222,85,117,16,157,98,109,151,148,84,205,140,246,113,118,145,252,99,185,99,254,99,105,85,67,43,114,156,179,46,154,81,223,52,167,13,167,81,77,84,30,85,19,85,102,118,45,142,138,104,177,117,182,128,4,136,134,135,199,136,182,129,28,132,193,16,236,68,4,115,6,71,144,91,11,131,147,104,123,86,244,38,47,125,163,65,115,125,208,110,182,114,112,145,217,17,8,146,252,60,169,166,172,14,249,14,102,114,162,28,78,71,194,79,249,127,235,15,250,64,93,156,31,101,160,45,243,72,224,71,124,157,236,15,10,14,0,0,163,117,237,15,0,0,72,96,135,17,163,113,142,126,80,157,26,78,4,78,119,53,13,91,178,108,103,83,172,54,220,57,125,83,165,54,24,70,154,88,110,75,45,130,75,84,170,87,149,90,121,9,0,0,82,58,101,36,116,115,172,158,9,77,237,155,254,60,48,159,91,76,169,79,158,149,222,159,92,132,182,61,178,114,179,103,32,55,46,99,37,125,247,62,44,62,42,58,8,144,204,82,116,62,122,54,233,69,142,4,64,118,240,90,182,14,122,120,46,127,167,88,191,64,124,86,139,155,116,93,84,118,52,164,133,158,225,76,0,0,251,55,25,97,218,48,242,67,0,0,93,86,169,18,167,87,99,73,6,158,52,82,174,112,173,53,0,0,124,157,86,124,57,155,222,87,108,23,83,92,211,100,208,148,53,99,100,113,173,134,40,13,34,109,226,74,113,13,0,0,254,81,15,31,142,93,3,151,209,29,129,158,76,144,31,123,2,155,209,92,163,123,104,98,53,99,255,154,207,123,42,155,126,124,0,0,66,124,134,124,21,156,252,123,9,155,0,0,27,156,62,73,90,159,115,85,195,91,253,79,152,158,242,79,96,82,6,62,209,82,103,87,86,80,183,89,18,94,200,151,171,157,92,143,105,84,180,151,64,153,186,151,44,83,48,97,44,105,218,83,10,156,2,157,59,76,65,150,128,105,166,80,70,117,109,23,218,153,115,82,0,0,89,145,129,150,92,145,0,0,81,145,151,142,127,99,35,109,202,106,17,86,142,145,122,117,133,98,252,3,79,115,112,124,33,92,253,60,0,0,25,73,214,118,157,155,42,78,212,12,190,131,66,136,0,0,74,92,192,105,0,0,122,87,31,82,245,93,206,78,49,108,242,1,57,79,156,84,218,84,154,82,130,141,254,53,0,0,243,53,0,0,82,107,124,145,165,159,151,155,46,152,180,152,186,154,168,158,132,158,122,113,20,123,0,0,250,107,24,136,120,127,0,0,32,86,74,166,119,142,83,159,0,0,212,141,79,142,28,158,1,142,130,98,125,131,40,142,117,142,211,122,119,74,62,122,216,120,234,108,103,138,7,118,90,138,38,159,206,108,214,135,195,117,178,162,83,120,64,248,12,141,226,114,113,115,45,139,2,115,241,116,235,140,187,74,47,134,186,95,160,136,183,68,0,0,59,24,5,110,0,0,126,138,27,37,0,0,253,96,103,118,215,154,68,157,110,147,143,155,245,135,0,0,0,0,247,140,44,115,33,151,176,155,214,53,178,114,7,76,81,124,74,153,89,97,89,97,4,76,150,158,125,97,0,0,95,87,111,97,166,98,57,98,0,0,92,58,226,97,170,83,245,51,100,99,2,104,210,53,87,93,194,139,218,143,57,142,0,0,217,80,70,29,6,121,50,83,56,150,59,15,101,64,0,0,254,119,0,0,194,124,26,95,218,124,45,122,102,128,99,128,77,125,5,117,242,116,148,137,26,130,12,103,98,128,134,116,91,128,240,116,3,129,36,119,137,137,204,103,83,117,209,110,169,135,206,135,200,129,140,135,73,138,173,140,67,139,43,119,248,116,218,132,53,54,178,105,166,141,0,0,169,137,0,0,185,109,193,135,17,64,231,116,219,61,118,113,164,96,156,97,209,60,0,0,119,96,0,0,113,127,45,139,0,0,233,96,126,75,32,82,24,60,199,60,215,94,86,118,49,85,68,25,254,18,3,153,220,109,173,112,193,92,173,97,15,138,119,54,238,0,70,104,14,79,98,69,31,91,76,99,80,159,166,158,107,98,71,5,219,146,223,5,197,63,76,133,181,66,239,115,181,81,73,54,66,73,228,137,68,147,219,25,238,130,200,60,60,120,68,103,223,98,51,73,170,137,160,2,179,107,5,19,171,79,237,36,8,80,41,109,132,122,0,54,177,74,19,37,0,0,126,3,164,95,128,3,71,3,219,110,31,4,0,0,1,81,122,52,14,81,108,152,67,55,22,132,164,73,135,4,96,81,180,51,106,81,255,11,252,32,229,2,48,37,142,5,51,50,131,25,130,91,125,135,179,5,153,60,178,81,184,81,52,157,201,81,207,81,209,81,220,60,211,81,166,74,179,81,226,81,66,83,237,81,205,131,62,105,45,55,123,95,11,82,38,82,60,82,181,82,87,82,148,82,185,82,197,82,21,124,66,133,224,82,13,134,19,107,0,0,222,138,73,85,217,110,128,63,84,9,236,63,51,83,0,0,226,11,203,108,38,23,27,104,213,115,74,96,170,62,204,56,232,22,221,113,162,68,109,83,116,83,171,134,126,83,0,0,150,21,19,22,230,119,147,83,155,138,160,83,171,83,174,83,167,115,114,87,89,63,156,115,193,83,197,83,73,108,73,78,254,87,217,83,171,58,143,11,224,83,235,63,163,45,246,83,119,12,19,84,121,112,43,85,87,102,91,109,109,84,83,107,116,13,93,85,143,84,164,84,166,71,13,23,221,14,180,61,77,13,188,137,152,38,71,85,237,76,47,84,23,116,134,85,169,85,0,0,215,24,58,64,82,69,53,68,179,102,180,16,55,86,205,102,138,50,164,102,173,102,77,86,79,86,241,120,241,86,135,151,254,83,0,87,239,86,237,86,102,139,35,54,79,18,70,87,165,65,110,108,139,112,66,87,177,54,126,108,230,87,22,20,3,88,84,20,99,67,38,88,245,75,92,88,170,88,97,53,224,88,220,88,60,18,251,88,255,91,67,87,80,161,120,66,211,147,161,53,31,89,166,104,195,54,89,110,62,22,36,90,83,85,146,22,5,133,201,89,78,13,129,108,42,109,220,23,217,89,251,23,178,23,166,109,113,109,40,24,213,22,249,89,69,110,171,90,99,90,230,54,169,73,0,0,8,55,150,90,101,116,211,90,161,111,84,37,133,61,17,25,50,55,184,22,131,94,208,82,118,91,136,101,124,91,14,122,4,64,93,72,4,2,213,91,96,97,52,26,204,89,165,5,243,91,157,91,16,77,5,92,68,27,19,92,206,115,20,92,165,28,40,107,73,92,221,72,133,92,233,92,239,92,139,93,249,29,55,30,16,93,24,93,70,93,164,30,186,92,215,93,252,130,45,56,1,73,73,32,115,33,135,130,54,56,194,59,46,94,138,106,0,0,122,94,188,68,211,12,166,83,183,78,0,0,168,83,113,23,9,94,244,94,130,132,249,94,251,94,160,56,252,94,62,104,27,148,13,95,193,1,148,248,222,58,174,72,58,19,58,95,136,104,208,35,0,0,113,36,99,95,189,151,110,110,114,95,64,147,54,138,167,95,182,93,95,61,80,82,106,31,248,112,104,38,214,145,158,2,41,138,49,96,133,102,119,24,99,57,199,61,57,54,144,87,180,39,113,121,64,62,158,96,0,0,179,96,130,73,143,73,83,122,164,116,225,80,160,90,100,97,36,132,66,97,166,248,210,110,129,97,244,81,86,6,135,97,170,91,183,63,95,40,211,97,157,139,93,153,208,97,50,57,128,41,193,40,35,96,92,97,30,101,139,99,24,1,197,98,112,23,213,98,13,46,108,99,223,73,23,58,56,100,248,99,142,19,252,23,0,0,138,111,54,46,20,152,140,64,29,87,225,100,229,100,123,148,102,58,58,100,87,58,77,101,22,111,40,74,35,74,133,101,109,101,95,101,126,48,181,101,64,73,55,75,209,101,216,64,41,24,224,101,227,101,223,95,0,52,24,102,247,49,248,49,68,102,164,49,165,49,75,102,117,14,103,102,230,81,115,102,0,0,61,30,49,50,244,133,200,49,19,83,197,119,247,40,164,153,2,103,156,67,33,74,43,59,250,105,194,55,0,0,103,103,98,103,205,65,237,144,215,103,233,68,34,104,80,110,60,146,1,104,230,51,160,109,93,104,111,52,225,105,11,106,223,138,115,105,195,104,205,53,1,105,0,105,50,61,1,58,60,54,128,59,172,103,97,105,74,138,252,66,54,105,152,105,161,59,201,3,99,131,144,80,249,105,89,54,42,33,69,106,3,55,157,106,243,59,177,103,200,106,156,145,13,60,29,107,35,9,222,96,53,107,116,107,205,39,181,110,219,58,181,3,88,25,64,55,33,84,90,59,225,107,252,62,220,107,55,108,139,36,241,72,81,107,90,108,38,130,121,108,188,61,197,68,189,61,164,65,12,73,0,73,201,60,229,54,235,60,50,13,131,155,249,49,145,36,143,127,55,104,37,109,161,109,235,109,150,109,92,109,124,110,4,111,127,73,133,64,114,110,51,133,116,111,199,81,0,0,0,0,46,132,33,139,0,0,47,62,83,116,130,63,204,121,79,110,145,90,75,48,248,111,13,55,157,111,48,62,250,110,151,20,61,64,85,69,240,147,68,111,92,111,78,61,116,111,112,145,59,61,159,111,68,65,211,111,145,64,85,65,57,64,240,63,180,63,63,65,223,81,86,65,87,65,64,65,221,97,75,112,126,112,167,112,129,112,204,112,213,112,214,112,223,112,4,65,232,61,180,113,150,113,119,66,43,113,69,113,136,90,74,113,0,0,156,92,101,67,79,113,98,147,193,66,44,113,90,68,39,74,34,74,186,113,232,139,189,112,14,114,66,148,21,114,17,89,67,148,36,114,65,147,5,86,46,114,64,114,116,73,189,104,85,114,87,114,85,62,68,48,13,104,61,111,130,114,0,0,43,115,35,72,43,136,237,72,4,136,40,115,46,115,207,115,170,115,58,12,46,106,201,115,73,116,226,65,231,22,36,74,35,102,197,54,183,73,141,73,251,73,247,115,21,116,3,105,38,74,57,116,195,5,215,62,0,0,173,40,96,116,178,142,71,116,228,115,118,116,185,131,108,116,48,55,116,116,241,147,44,106,130,116,83,73,140,74,95,65,121,74,143,139,70,91,3,140,158,24,200,116,136,25,14,117,0,0,30,117,217,142,75,26,215,91,172,142,133,147,77,117,74,117,103,117,110,117,130,79,4,63,19,77,142,117,93,116,158,117,180,117,2,118,44,118,81,118,79,118,111,118,118,118,245,99,144,118,239,129,248,55,17,105,14,105,161,118,165,118,183,118,204,118,159,111,98,132,157,80,125,81,28,30,30,119,38,119,64,119,175,100,32,82,88,119,172,50,175,119,100,137,104,137,193,22,244,119,0,0,118,19,18,74,202,104,175,120,199,120,211,120,165,150,46,121,224,85,215,120,52,121,177,120,12,118,184,143,132,136,43,139,131,96,28,38,134,121,0,137,2,105,128,121,87,88,157,121,57,123,60,121,169,121,42,110,38,113,168,62,198,121,13,145,212,121,32,5,95,68,15,82,130,184,248,0,0,64,32,169,78,4,0,0,0,0,52,11,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,64,0,0,0,0,0,0,0,0,4,88,0,60,0,0,0,0,0,128,92,173,220,243,187,201,67,238,237,164,15,38,193,155,118,242,239,222,251,250,247,15,50,68,175,254,239,253,254,17,96,176,0,0,33,25,129,32,16,136,168,96,33,105,36,0,68,137,196,0,0,3,64,53,0,67,132,49,81,147,104,2,2,0,0,0,0,0,0,0,0,0,0,0,64,0,1,128,172,100,130,64,140,161,144,4,80,96,212,0,210,42,24,157,104,53,151,79,216,248,32,196,130,28,40,130,117,148,2,56,64,160,161,197,16,113,77,196,13,152,185,94,91,1,67,159,153,3,120,32,226,31,8,137,1,201,64,7,3,13,154,144,82,209,79,124,3,2,33,32,192,110,19,131,181,219,245,229,119,144,79,23,154,54,23,12,0,110,186,9,47,96,84,0,30,120,104,34,112,86,158,37,243,142,183,23,11,239,230,119,23,91,27,193,16,152,141,18,24,182,207,1,49,114,26,91,44,182,192,32,226,195,92,130,27,224,218,206,133,214,64,169,84,11,208,15,72,68,64,16,9,212,64,174,59,100,30,68,43,23,8,134,130,54,24,160,137,231,156,91,8,132,3,2,218,144,236,219,135,133,191,162,173,157,142,157,152,32,37,70,0,70,159,127,227,213,201,132,244,214,77,6,227,182,24,18,9,0,0,0,4,0,0,32,0,0,0,0,2,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,142,120,110,95,63,126,221,61,247,252,155,252,174,210,255,143,107,241,231,191,186,174,110,23,239,220,167,62,182,181,119,201,146,215,165,182,74,110,155,185,129,77,103,254,84,241,155,98,254,111,82,215,54,254,191,41,69,129,249,189,101,166,66,57,0,0,66,96,143,0,148,64,64,210,175,215,209,219,0,160,152,178,123,6,82,32,152,22,200,61,9,0,0,1,0,0,0,1,10,178,8,128,0,0,0,4,136,32,20,16,76,0,0,4,0,161,68,16,0,65,1,0,8,64,240,223,79,54,88,241,245,181,128,245,103,128,64,0,80,78,65,200,132,0,90,96,216,1,43,1,80,161,22,196,64,242,110,17,172,32,57,196,192,8,7,12,9,152,150,196,155,16,28,152,108,134,42,166,1,70,17,109,229,203,196,192,146,16,33,22,18,157,114,244,105,14,23,42,162,129,244,123,0,8,164,11,144,16,44,204,57,74,1,240,22,11,10,64,12,29,234,12,68,14,69,2,0,0,48,12,255,1,48,2,48,14,255,39,32,27,255,26,255,31,255,1,255,48,254,38,32,37,32,80,254,81,254,82,254,183,0,84,254,85,254,86,254,87,254,92,255,19,32,49,254,20,32,51,254,116,37,52,254,79,254,8,255,9,255,53,254,54,254,91,255,93,255,55,254,56,254,20,48,21,48,57,254,58,254,16,48,17,48,59,254,60,254,10,48,11,48,61,254,62,254,8,48,9,48,63,254,64,254,12,48,13,48,65,254,66,254,14,48,15,48,67,254,68,254,89,254,90,254,91,254,92,254,93,254,94,254,24,32,25,32,28,32,29,32,29,48,30,48,53,32,50,32,3,255,6,255,10,255,59,32,167,0,3,48,203,37,207,37,179,37,178,37,206,37,6,38,5,38,199,37,198,37,161,37,160,37,189,37,188,37,163,50,5,33,175,0,227,255,63,255,205,2,73,254,74,254,77,254,78,254,75,254,76,254,95,254,96,254,97,254,11,255,13,255,215,0,247,0,177,0,26,34,28,255,30,255,29,255,102,34,103,34,96,34,30,34,82,34,97,34,98,254,99,254,100,254,101,254,102,254,94,255,41,34,42,34,165,34,32,34,31,34,191,34,210,51,209,51,43,34,46,34,53,34,52,34,64,38,66,38,149,34,153,34,145,33,147,33,144,33,146,33,150,33,151,33,153,33,152,33,37,34,35,34,15,255,60,255,21,34,104,254,4,255,229,255,18,48,224,255,225,255,5,255,32,255,3,33,9,33,105,254,106,254,107,254,213,51,156,51,157,51,158,51,206,51,161,51,142,51,143,51,196,51,176,0,89,81,91,81,94,81,93,81,97,81,99,81,231,85,233,116,206,124,129,37,130,37,131,37,132,37,133,37,134,37,135,37,136,37,143,37,142,37,141,37,140,37,139,37,138,37,137,37,60,37,52,37,44,37,36,37,28,37,148,37,0,37,2,37,149,37,12,37,16,37,20,37,24,37,109,37,110,37,112,37,111,37,80,37,94,37,106,37,97,37,226,37,227,37,229,37,228,37,113,37,114,37,115,37,16,255,17,255,18,255,19,255,20,255,21,255,22,255,23,255,24,255,25,255,96,33,97,33,98,33,99,33,100,33,101,33,102,33,103,33,104,33,105,33,33,48,34,48,35,48,36,48,37,48,38,48,39,48,40,48], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+89626);
/* memory initializer */ allocate([41,48,65,83,68,83,69,83,33,255,34,255,35,255,36,255,37,255,38,255,39,255,40,255,41,255,42,255,43,255,44,255,45,255,46,255,47,255,48,255,49,255,50,255,51,255,52,255,53,255,54,255,55,255,56,255,57,255,58,255,65,255,66,255,67,255,68,255,69,255,70,255,71,255,72,255,73,255,74,255,75,255,76,255,77,255,78,255,79,255,80,255,81,255,82,255,83,255,84,255,85,255,86,255,87,255,88,255,89,255,90,255,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,5,49,6,49,7,49,8,49,9,49,10,49,11,49,12,49,13,49,14,49,15,49,16,49,17,49,18,49,19,49,20,49,21,49,22,49,23,49,24,49,25,49,26,49,27,49,28,49,29,49,30,49,31,49,32,49,33,49,34,49,35,49,36,49,37,49,38,49,39,49,40,49,41,49,217,2,201,2,202,2,199,2,203,2,0,36,1,36,2,36,3,36,4,36,5,36,6,36,7,36,8,36,9,36,10,36,11,36,12,36,13,36,14,36,15,36,16,36,17,36,18,36,19,36,20,36,21,36,22,36,23,36,24,36,25,36,26,36,27,36,28,36,29,36,30,36,31,36,33,36,172,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,89,78,1,78,3,78,67,78,93,78,134,78,140,78,186,78,63,81,101,81,107,81,224,81,0,82,1,82,155,82,21,83,65,83,92,83,200,83,9,78,11,78,8,78,10,78,43,78,56,78,225,81,69,78,72,78,95,78,94,78,142,78,161,78,64,81,3,82,250,82,67,83,201,83,227,83,31,87,235,88,21,89,39,89,115,89,80,91,81,91,83,91,248,91,15,92,34,92,56,92,113,92,221,93,229,93,241,93,242,93,243,93,254,93,114,94,254,94,11,95,19,95,77,98,17,78,16,78,13,78,45,78,48,78,57,78,75,78,57,92,136,78,145,78,149,78,146,78,148,78,162,78,193,78,192,78,195,78,198,78,199,78,205,78,202,78,203,78,196,78,67,81,65,81,103,81,109,81,110,81,108,81,151,81,246,81,6,82,7,82,8,82,251,82,254,82,255,82,22,83,57,83,72,83,71,83,69,83,94,83,132,83,203,83,202,83,205,83,236,88,41,89,43,89,42,89,45,89,84,91,17,92,36,92,58,92,111,92,244,93,123,94,255,94,20,95,21,95,195,95,8,98,54,98,75,98,78,98,47,101,135,101,151,101,164,101,185,101,229,101,240,102,8,103,40,103,32,107,98,107,121,107,203,107,212,107,219,107,15,108,52,108,107,112,42,114,54,114,59,114,71,114,89,114,91,114,172,114,139,115,25,78,22,78,21,78,20,78,24,78,59,78,77,78,79,78,78,78,229,78,216,78,212,78,213,78,214,78,215,78,227,78,228,78,217,78,222,78,69,81,68,81,137,81,138,81,172,81,249,81,250,81,248,81,10,82,160,82,159,82,5,83,6,83,23,83,29,83,223,78,74,83,73,83,97,83,96,83,111,83,110,83,187,83,239,83,228,83,243,83,236,83,238,83,233,83,232,83,252,83,248,83,245,83,235,83,230,83,234,83,242,83,241,83,240,83,229,83,237,83,251,83,219,86,218,86,22,89,46,89,49,89,116,89,118,89,85,91,131,91,60,92,232,93,231,93,230,93,2,94,3,94,115,94,124,94,1,95,24,95,23,95,197,95,10,98,83,98,84,98,82,98,81,98,165,101,230,101,46,103,44,103,42,103,43,103,45,103,99,107,205,107,17,108,16,108,56,108,65,108,64,108,62,108,175,114,132,115,137,115,220,116,230,116,24,117,31,117,40,117,41,117,48,117,49,117,50,117,51,117,139,117,125,118,174,118,191,118,238,118,219,119,226,119,243,119,58,121,190,121,116,122,203,122,30,78,31,78,82,78,83,78,105,78,153,78,164,78,166,78,165,78,255,78,9,79,25,79,10,79,21,79,13,79,16,79,17,79,15,79,242,78,246,78,251,78,240,78,243,78,253,78,1,79,11,79,73,81,71,81,70,81,72,81,104,81,113,81,141,81,176,81,23,82,17,82,18,82,14,82,22,82,163,82,8,83,33,83,32,83,112,83,113,83,9,84,15,84,12,84,10,84,16,84,1,84,11,84,4,84,17,84,13,84,8,84,3,84,14,84,6,84,18,84,224,86,222,86,221,86,51,87,48,87,40,87,45,87,44,87,47,87,41,87,25,89,26,89,55,89,56,89,132,89,120,89,131,89,125,89,121,89,130,89,129,89,87,91,88,91,135,91,136,91,133,91,137,91,250,91,22,92,121,92,222,93,6,94,118,94,116,94,15,95,27,95,217,95,214,95,14,98,12,98,13,98,16,98,99,98,91,98,88,98,54,101,233,101,232,101,236,101,237,101,242,102,243,102,9,103,61,103,52,103,49,103,53,103,33,107,100,107,123,107,22,108,93,108,87,108,89,108,95,108,96,108,80,108,85,108,97,108,91,108,77,108,78,108,112,112,95,114,93,114,126,118,249,122,115,124,248,124,54,127,138,127,189,127,1,128,3,128,12,128,18,128,51,128,127,128,137,128,139,128,140,128,227,129,234,129,243,129,252,129,12,130,27,130,31,130,110,130,114,130,126,130,107,134,64,136,76,136,99,136,127,137,33,150,50,78,168,78,77,79,79,79,71,79,87,79,94,79,52,79,91,79,85,79,48,79,80,79,81,79,61,79,58,79,56,79,67,79,84,79,60,79,70,79,99,79,92,79,96,79,47,79,78,79,54,79,89,79,93,79,72,79,90,79,76,81,75,81,77,81,117,81,182,81,183,81,37,82,36,82,41,82,42,82,40,82,171,82,169,82,170,82,172,82,35,83,115,83,117,83,29,84,45,84,30,84,62,84,38,84,78,84,39,84,70,84,67,84,51,84,72,84,66,84,27,84,41,84,74,84,57,84,59,84,56,84,46,84,53,84,54,84,32,84,60,84,64,84,49,84,43,84,31,84,44,84,234,86,240,86,228,86,235,86,74,87,81,87,64,87,77,87,71,87,78,87,62,87,80,87,79,87,59,87,239,88,62,89,157,89,146,89,168,89,158,89,163,89,153,89,150,89,141,89,164,89,147,89,138,89,165,89,93,91,92,91,90,91,91,91,140,91,139,91,143,91,44,92,64,92,65,92,63,92,62,92,144,92,145,92,148,92,140,92,235,93,12,94,143,94,135,94,138,94,247,94,4,95,31,95,100,95,98,95,119,95,121,95,216,95,204,95,215,95,205,95,241,95,235,95,248,95,234,95,18,98,17,98,132,98,151,98,150,98,128,98,118,98,137,98,109,98,138,98,124,98,126,98,121,98,115,98,146,98,111,98,152,98,110,98,149,98,147,98,145,98,134,98,57,101,59,101,56,101,241,101,244,102,95,103,78,103,79,103,80,103,81,103,92,103,86,103,94,103,73,103,70,103,96,103,83,103,87,103,101,107,207,107,66,108,94,108,153,108,129,108,136,108,137,108,133,108,155,108,106,108,122,108,144,108,112,108,140,108,104,108,150,108,146,108,125,108,131,108,114,108,126,108,116,108,134,108,118,108,141,108,148,108,152,108,130,108,118,112,124,112,125,112,120,112,98,114,97,114,96,114,196,114,194,114,150,115,44,117,43,117,55,117,56,117,130,118,239,118,227,119,193,121,192,121,191,121,118,122,251,124,85,127,150,128,147,128,157,128,152,128,155,128,154,128,178,128,111,130,146,130,139,130,141,130,139,137,210,137,0,138,55,140,70,140,85,140,157,140,100,141,112,141,179,141,171,142,202,142,155,143,176,143,194,143,198,143,197,143,196,143,225,93,145,144,162,144,170,144,166,144,163,144,73,145,198,145,204,145,50,150,46,150,49,150,42,150,44,150,38,78,86,78,115,78,139,78,155,78,158,78,171,78,172,78,111,79,157,79,141,79,115,79,127,79,108,79,155,79,139,79,134,79,131,79,112,79,117,79,136,79,105,79,123,79,150,79,126,79,143,79,145,79,122,79,84,81,82,81,85,81,105,81,119,81,118,81,120,81,189,81,253,81,59,82,56,82,55,82,58,82,48,82,46,82,54,82,65,82,190,82,187,82,82,83,84,83,83,83,81,83,102,83,119,83,120,83,121,83,214,83,212,83,215,83,115,84,117,84,150,84,120,84,149,84,128,84,123,84,119,84,132,84,146,84,134,84,124,84,144,84,113,84,118,84,140,84,154,84,98,84,104,84,139,84,125,84,142,84,250,86,131,87,119,87,106,87,105,87,97,87,102,87,100,87,124,87,28,89,73,89,71,89,72,89,68,89,84,89,190,89,187,89,212,89,185,89,174,89,209,89,198,89,208,89,205,89,203,89,211,89,202,89,175,89,179,89,210,89,197,89,95,91,100,91,99,91,151,91,154,91,152,91,156,91,153,91,155,91,26,92,72,92,69,92,70,92,183,92,161,92,184,92,169,92,171,92,177,92,179,92,24,94,26,94,22,94,21,94,27,94,17,94,120,94,154,94,151,94,156,94,149,94,150,94,246,94,38,95,39,95,41,95,128,95,129,95,127,95,124,95,221,95,224,95,253,95,245,95,255,95,15,96,20,96,47,96,53,96,22,96,42,96,21,96,33,96,39,96,41,96,43,96,27,96,22,98,21,98,63,98,62,98,64,98,127,98,201,98,204,98,196,98,191,98,194,98,185,98,210,98,219,98,171,98,211,98,212,98,203,98,200,98,168,98,189,98,188,98,208,98,217,98,199,98,205,98,181,98,218,98,177,98,216,98,214,98,215,98,198,98,172,98,206,98,62,101,167,101,188,101,250,101,20,102,19,102,12,102,6,102,2,102,14,102,0,102,15,102,21,102,10,102,7,102,13,103,11,103,109,103,139,103,149,103,113,103,156,103,115,103,119,103,135,103,157,103,151,103,111,103,112,103,127,103,137,103,126,103,144,103,117,103,154,103,147,103,124,103,106,103,114,103,35,107,102,107,103,107,127,107,19,108,27,108,227,108,232,108,243,108,177,108,204,108,229,108,179,108,189,108,190,108,188,108,226,108,171,108,213,108,211,108,184,108,196,108,185,108,193,108,174,108,215,108,197,108,241,108,191,108,187,108,225,108,219,108,202,108,172,108,239,108,220,108,214,108,224,108,149,112,142,112,146,112,138,112,153,112,44,114,45,114,56,114,72,114,103,114,105,114,192,114,206,114,217,114,215,114,208,114,169,115,168,115,159,115,171,115,165,115,61,117,157,117,153,117,154,117,132,118,194,118,242,118,244,118,229,119,253,119,62,121,64,121,65,121,201,121,200,121,122,122,121,122,250,122,254,124,84,127,140,127,139,127,5,128,186,128,165,128,162,128,177,128,161,128,171,128,169,128,180,128,170,128,175,128,229,129,254,129,13,130,179,130,157,130,153,130,173,130,189,130,159,130,185,130,177,130,172,130,165,130,175,130,184,130,163,130,176,130,190,130,183,130,78,134,113,134,29,82,104,136,203,142,206,143,212,143,209,143,181,144,184,144,177,144,182,144,199,145,209,145,119,149,128,149,28,150,64,150,63,150,59,150,68,150,66,150,185,150,232,150,82,151,94,151,159,78,173,78,174,78,225,79,181,79,175,79,191,79,224,79,209,79,207,79,221,79,195,79,182,79,216,79,223,79,202,79,215,79,174,79,208,79,196,79,194,79,218,79,206,79,222,79,183,79,87,81,146,81,145,81,160,81,78,82,67,82,74,82,77,82,76,82,75,82,71,82,199,82,201,82,195,82,193,82,13,83,87,83,123,83,154,83,219,83,172,84,192,84,168,84,206,84,201,84,184,84,166,84,179,84,199,84,194,84,189,84,170,84,193,84,196,84,200,84,175,84,171,84,177,84,187,84,169,84,167,84,191,84,255,86,130,87,139,87,160,87,163,87,162,87,206,87,174,87,147,87,85,89,81,89,79,89,78,89,80,89,220,89,216,89,255,89,227,89,232,89,3,90,229,89,234,89,218,89,230,89,1,90,251,89,105,91,163,91,166,91,164,91,162,91,165,91,1,92,78,92,79,92,77,92,75,92,217,92,210,92,247,93,29,94,37,94,31,94,125,94,160,94,166,94,250,94,8,95,45,95,101,95,136,95,133,95,138,95,139,95,135,95,140,95,137,95,18,96,29,96,32,96,37,96,14,96,40,96,77,96,112,96,104,96,98,96,70,96,67,96,108,96,107,96,106,96,100,96,65,98,220,98,22,99,9,99,252,98,237,98,1,99,238,98,253,98,7,99,241,98,247,98,239,98,236,98,254,98,244,98,17,99,2,99,63,101,69,101,171,101,189,101,226,101,37,102,45,102,32,102,39,102,47,102,31,102,40,102,49,102,36,102,247,102,255,103,211,103,241,103,212,103,208,103,236,103,182,103,175,103,245,103,233,103,239,103,196,103,209,103,180,103,218,103,229,103,184,103,207,103,222,103,243,103,176,103,217,103,226,103,221,103,210,103,106,107,131,107,134,107,181,107,210,107,215,107,31,108,201,108,11,109,50,109,42,109,65,109,37,109,12,109,49,109,30,109,23,109,59,109,61,109,62,109,54,109,27,109,245,108,57,109,39,109,56,109,41,109,46,109,53,109,14,109,43,109,171,112,186,112,179,112,172,112,175,112,173,112,184,112,174,112,164,112,48,114,114,114,111,114,116,114,233,114,224,114,225,114,183,115,202,115,187,115,178,115,205,115,192,115,179,115,26,117,45,117,79,117,76,117,78,117,75,117,171,117,164,117,165,117,162,117,163,117,120,118,134,118,135,118,136,118,200,118,198,118,195,118,197,118,1,119,249,118,248,118,9,119,11,119,254,118,252,118,7,119,220,119,2,120,20,120,12,120,13,120,70,121,73,121,72,121,71,121,185,121,186,121,209,121,210,121,203,121,127,122,129,122,255,122,253,122,125,124,2,125,5,125,0,125,9,125,7,125,4,125,6,125,56,127,142,127,191,127,4,128,16,128,13,128,17,128,54,128,214,128,229,128,218,128,195,128,196,128,204,128,225,128,219,128,206,128,222,128,228,128,221,128,244,129,34,130,231,130,3,131,5,131,227,130,219,130,230,130,4,131,229,130,2,131,9,131,210,130,215,130,241,130,1,131,220,130,212,130,209,130,222,130,211,130,223,130,239,130,6,131,80,134,121,134,123,134,122,134,77,136,107,136,129,137,212,137,8,138,2,138,3,138,158,140,160,140,116,141,115,141,180,141,205,142,204,142,240,143,230,143,226,143,234,143,229,143,237,143,235,143,228,143,232,143,202,144,206,144,193,144,195,144,75,145,74,145,205,145,130,149,80,150,75,150,76,150,77,150,98,151,105,151,203,151,237,151,243,151,1,152,168,152,219,152,223,152,150,153,153,153,88,78,179,78,12,80,13,80,35,80,239,79,38,80,37,80,248,79,41,80,22,80,6,80,60,80,31,80,26,80,18,80,17,80,250,79,0,80,20,80,40,80,241,79,33,80,11,80,25,80,24,80,243,79,238,79,45,80,42,80,254,79,43,80,9,80,124,81,164,81,165,81,162,81,205,81,204,81,198,81,203,81,86,82,92,82,84,82,91,82,93,82,42,83,127,83,159,83,157,83,223,83,232,84,16,85,1,85,55,85,252,84,229,84,242,84,6,85,250,84,20,85,233,84,237,84,225,84,9,85,238,84,234,84,230,84,39,85,7,85,253,84,15,85,3,87,4,87,194,87,212,87,203,87,195,87,9,88,15,89,87,89,88,89,90,89,17,90,24,90,28,90,31,90,27,90,19,90,236,89,32,90,35,90,41,90,37,90,12,90,9,90,107,91,88,92,176,91,179,91,182,91,180,91,174,91,181,91,185,91,184,91,4,92,81,92,85,92,80,92,237,92,253,92,251,92,234,92,232,92,240,92,246,92,1,93,244,92,238,93,45,94,43,94,171,94,173,94,167,94,49,95,146,95,145,95,144,95,89,96,99,96,101,96,80,96,85,96,109,96,105,96,111,96,132,96,159,96,154,96,141,96,148,96,140,96,133,96,150,96,71,98,243,98,8,99,255,98,78,99,62,99,47,99,85,99,66,99,70,99,79,99,73,99,58,99,80,99,61,99,42,99,43,99,40,99,77,99,76,99,72,101,73,101,153,101,193,101,197,101,66,102,73,102,79,102,67,102,82,102,76,102,69,102,65,102,248,102,20,103,21,103,23,103,33,104,56,104,72,104,70,104,83,104,57,104,66,104,84,104,41,104,179,104,23,104,76,104,81,104,61,104,244,103,80,104,64,104,60,104,67,104,42,104,69,104,19,104,24,104,65,104,138,107,137,107,183,107,35,108,39,108,40,108,38,108,36,108,240,108,106,109,149,109,136,109,135,109,102,109,120,109,119,109,89,109,147,109,108,109,137,109,110,109,90,109,116,109,105,109,140,109,138,109,121,109,133,109,101,109,148,109,202,112,216,112,228,112,217,112,200,112,207,112,57,114,121,114,252,114,249,114,253,114,248,114,247,114,134,115,237,115,9,116,238,115,224,115,234,115,222,115,84,117,93,117,92,117,90,117,89,117,190,117,197,117,199,117,178,117,179,117,189,117,188,117,185,117,194,117,184,117,139,118,176,118,202,118,205,118,206,118,41,119,31,119,32,119,40,119,233,119,48,120,39,120,56,120,29,120,52,120,55,120,37,120,45,120,32,120,31,120,50,120,85,121,80,121,96,121,95,121,86,121,94,121,93,121,87,121,90,121,228,121,227,121,231,121,223,121,230,121,233,121,216,121,132,122,136,122,217,122,6,123,17,123,137,124,33,125,23,125,11,125,10,125,32,125,34,125,20,125,16,125,21,125,26,125,28,125,13,125,25,125,27,125,58,127,95,127,148,127,197,127,193,127,6,128,24,128,21,128,25,128,23,128,61,128,63,128,241,128,2,129,240,128,5,129,237,128,244,128,6,129,248,128,243,128,8,129,253,128,10,129,252,128,239,128,237,129,236,129,0,130,16,130,42,130,43,130,40,130,44,130,187,130,43,131,82,131,84,131,74,131,56,131,80,131,73,131,53,131,52,131,79,131,50,131,57,131,54,131,23,131,64,131,49,131,40,131,67,131,84,134,138,134,170,134,147,134,164,134,169,134,140,134,163,134,156,134,112,136,119,136,129,136,130,136,125,136,121,136,24,138,16,138,14,138,12,138,21,138,10,138,23,138,19,138,22,138,15,138,17,138,72,140,122,140,121,140,161,140,162,140,119,141,172,142,210,142,212,142,207,142,177,143,1,144,6,144,247,143,0,144,250,143,244,143,3,144,253,143,5,144,248,143,149,144,225,144,221,144,226,144,82,145,77,145,76,145,216,145,221,145,215,145,220,145,217,145,131,149,98,150,99,150,97,150,91,150,93,150,100,150,88,150,94,150,187,150,226,152,172,153,168,154,216,154,37,155,50,155,60,155,126,78,122,80,125,80,92,80,71,80,67,80,76,80,90,80,73,80,101,80,118,80,78,80,85,80,117,80,116,80,119,80,79,80,15,80,111,80,109,80,92,81,149,81,240,81,106,82,111,82,210,82,217,82,216,82,213,82,16,83,15,83,25,83,63,83,64,83,62,83,195,83,252,102,70,85,106,85,102,85,68,85,94,85,97,85,67,85,74,85,49,85,86,85,79,85,85,85,47,85,100,85,56,85,46,85,92,85,44,85,99,85,51,85,65,85,87,85,8,87,11,87,9,87,223,87,5,88,10,88,6,88,224,87,228,87,250,87,2,88,53,88,247,87,249,87,32,89,98,89,54,90,65,90,73,90,102,90,106,90,64,90,60,90,98,90,90,90,70,90,74,90,112,91,199,91,197,91,196,91,194,91,191,91,198,91,9,92,8,92,7,92,96,92,92,92,93,92,7,93,6,93,14,93,27,93,22,93,34,93,17,93,41,93,20,93,25,93,36,93,39,93,23,93,226,93,56,94,54,94,51,94,55,94,183,94,184,94,182,94,181,94,190,94,53,95,55,95,87,95,108,95,105,95,107,95,151,95,153,95,158,95,152,95,161,95,160,95,156,95,127,96,163,96,137,96,160,96,168,96,203,96,180,96,230,96,189,96,197,96,187,96,181,96,220,96,188,96,216,96,213,96,198,96,223,96,184,96,218,96,199,96,26,98,27,98,72,98,160,99,167,99,114,99,150,99,162,99,165,99,119,99,103,99,152,99,170,99,113,99,169,99,137,99,131,99,155,99,107,99,168,99,132,99,136,99,153,99,161,99,172,99,146,99,143,99,128,99,123,99,105,99,104,99,122,99,93,101,86,101,81,101,89,101,87,101,95,85,79,101,88,101,85,101,84,101,156,101,155,101,172,101,207,101,203,101,204,101,206,101,93,102,90,102,100,102,104,102,102,102,94,102,249,102,215,82,27,103,129,104,175,104,162,104,147,104,181,104,127,104,118,104,177,104,167,104,151,104,176,104,131,104,196,104,173,104,134,104,133,104,148,104,157,104,168,104,159,104,161,104,130,104,50,107,186,107,235,107,236,107,43,108,142,109,188,109,243,109,217,109,178,109,225,109,204,109,228,109,251,109,250,109,5,110,199,109,203,109,175,109,209,109,174,109,222,109,249,109,184,109,247,109,245,109,197,109,210,109,26,110,181,109,218,109,235,109,216,109,234,109,241,109,238,109,232,109,198,109,196,109,170,109,236,109,191,109,230,109,249,112,9,113,10,113,253,112,239,112,61,114,125,114,129,114,28,115,27,115,22,115,19,115,25,115,135,115,5,116,10,116,3,116,6,116,254,115,13,116,224,116,246,116,247,116,28,117,34,117,101,117,102,117,98,117,112,117,143,117,212,117,213,117,181,117,202,117,205,117,142,118,212,118,210,118,219,118,55,119,62,119,60,119,54,119,56,119,58,119,107,120,67,120,78,120,101,121,104,121,109,121,251,121,146,122,149,122,32,123,40,123,27,123,44,123,38,123,25,123,30,123,46,123,146,124,151,124,149,124,70,125,67,125,113,125,46,125,57,125,60,125,64,125,48,125,51,125,68,125,47,125,66,125,50,125,49,125,61,127,158,127,154,127,204,127,206,127,210,127,28,128,74,128,70,128,47,129,22,129,35,129,43,129,41,129,48,129,36,129,2,130,53,130,55,130,54,130,57,130,142,131,158,131,152,131,120,131,162,131,150,131,189,131,171,131,146,131,138,131,147,131,137,131,160,131,119,131,123,131,124,131,134,131,167,131,85,134,106,95,199,134,192,134,182,134,196,134,181,134,198,134,203,134,177,134,175,134,201,134,83,136,158,136,136,136,171,136,146,136,150,136,141,136,139,136,147,137,143,137,42,138,29,138,35,138,37,138,49,138,45,138,31,138,27,138,34,138,73,140,90,140,169,140,172,140,171,140,168,140,170,140,167,140,103,141,102,141,190,141,186,141,219,142,223,142,25,144,13,144,26,144,23,144,35,144,31,144,29,144,16,144,21,144,30,144,32,144,15,144,34,144,22,144,27,144,20,144,232,144,237,144,253,144,87,145,206,145,245,145,230,145,227,145,231,145,237,145,233,145,137,149,106,150,117,150,115,150,120,150,112,150,116,150,118,150,119,150,108,150,192,150,234,150,233,150,224,122,223,122,2,152,3,152,90,155,229,156,117,158,127,158,165,158,187,158,162,80,141,80,133,80,153,80,145,80,128,80,150,80,152,80,154,80,0,103,241,81,114,82,116,82,117,82,105,82,222,82,221,82,219,82,90,83,165,83,123,85,128,85,167,85,124,85,138,85,157,85,152,85,130,85,156,85,170,85,148,85,135,85,139,85,131,85,179,85,174,85,159,85,62,85,178,85,154,85,187,85,172,85,177,85,126,85,137,85,171,85,153,85,13,87,47,88,42,88,52,88,36,88,48,88,49,88,33,88,29,88,32,88,249,88,250,88,96,89,119,90,154,90,127,90,146,90,155,90,167,90,115,91,113,91,210,91,204,91,211,91,208,91,10,92,11,92,49,92,76,93,80,93,52,93,71,93,253,93,69,94,61,94,64,94,67,94,126,94,202,94,193,94,194,94,196,94,60,95,109,95,169,95,170,95,168,95,209,96,225,96,178,96,182,96,224,96,28,97,35,97,250,96,21,97,240,96,251,96,244,96,104,97,241,96,14,97,246,96,9,97,0,97,18,97,31,98,73,98,163,99,140,99,207,99,192,99,233,99,201,99,198,99,205,99,210,99,227,99,208,99,225,99,214,99,237,99,238,99,118,99,244,99,234,99,219,99,82,100,218,99,249,99,94,101,102,101,98,101,99,101,145,101,144,101,175,101,110,102,112,102,116,102,118,102,111,102,145,102,122,102,126,102,119,102,254,102,255,102,31,103,29,103,250,104,213,104,224,104,216,104,215,104,5,105,223,104,245,104,238,104,231,104,249,104,210,104,242,104,227,104,203,104,205,104,13,105,18,105,14,105,201,104,218,104,110,105,251,104,62,107,58,107,61,107,152,107,150,107,188,107,239,107,46,108,47,108,44,108,47,110,56,110,84,110,33,110,50,110,103,110,74,110,32,110,37,110,35,110,27,110,91,110,88,110,36,110,86,110,110,110,45,110,38,110,111,110,52,110,77,110,58,110,44,110,67,110,29,110,62,110,203,110,137,110,25,110,78,110,99,110,68,110,114,110,105,110,95,110,25,113,26,113,38,113,48,113,33,113,54,113,110,113,28,113,76,114,132,114,128,114,54,115,37,115,52,115,41,115,58,116,42,116,51,116,34,116,37,116,53,116,54,116,52,116,47,116,27,116,38,116,40,116,37,117,38,117,107,117,106,117,226,117,219,117,227,117,217,117,216,117,222,117,224,117,123,118,124,118,150,118,147,118,180,118,220,118,79,119,237,119,93,120,108,120,111,120,13,122,8,122,11,122,5,122,0,122,152,122,151,122,150,122,229,122,227,122,73,123,86,123,70,123,80,123,82,123,84,123,77,123,75,123,79,123,81,123,159,124,165,124,94,125,80,125,104,125,85,125,43,125,110,125,114,125,97,125,102,125,98,125,112,125,115,125,132,85,212,127,213,127,11,128,82,128,133,128,85,129,84,129,75,129,81,129,78,129,57,129,70,129,62,129,76,129,83,129,116,129,18,130,28,130,233,131,3,132,248,131,13,132,224,131,197,131,11,132,193,131,239,131,241,131,244,131,87,132,10,132,240,131,12,132,204,131,253,131,242,131,202,131,56,132,14,132,4,132,220,131,7,132,212,131,223,131,91,134,223,134,217,134,237,134,212,134,219,134,228,134,208,134,222,134,87,136,193,136,194,136,177,136,131,137,150,137,59,138,96,138,85,138,94,138,60,138,65,138,84,138,91,138,80,138,70,138,52,138,58,138,54,138,86,138,97,140,130,140,175,140,188,140,179,140,189,140,193,140,187,140,192,140,180,140,183,140,182,140,191,140,184,140,138,141,133,141,129,141,206,141,221,141,203,141,218,141,209,141,204,141,219,141,198,141,251,142,248,142,252,142,156,143,46,144,53,144,49,144,56,144,50,144,54,144,2,145,245,144,9,145,254,144,99,145,101,145,207,145,20,146,21,146,35,146,9,146,30,146,13,146,16,146,7,146,17,146,148,149,143,149,139,149,145,149,147,149,146,149,142,149,138,150,142,150,139,150,125,150,133,150,134,150,141,150,114,150,132,150,193,150,197,150,196,150,198,150,199,150,239,150,242,150,204,151,5,152,6,152,8,152,231,152,234,152,239,152,233,152,242,152,237,152,174,153,173,153,195,158,205,158,209,158,130,78,173,80,181,80,178,80,179,80,197,80,190,80,172,80,183,80,187,80,175,80,199,80,127,82,119,82,125,82,223,82,230,82,228,82,226,82,227,82,47,83,223,85,232,85,211,85,230,85,206,85,220,85,199,85,209,85,227,85,228,85,239,85,218,85,225,85,197,85,198,85,229,85,201,85,18,87,19,87,94,88,81,88,88,88,87,88,90,88,84,88,107,88,76,88,109,88,74,88,98,88,82,88,75,88,103,89,193,90,201,90,204,90,190,90,189,90,188,90,179,90,194,90,178,90,105,93,111,93,76,94,121,94,201,94,200,94,18,95,89,95,172,95,174,95,26,97,15,97,72,97,31,97,243,96,27,97,249,96,1,97,8,97,78,97,76,97,68,97,77,97,62,97,52,97,39,97,13,97,6,97,55,97,33,98,34,98,19,100,62,100,30,100,42,100,45,100,61,100,44,100,15,100,28,100,20,100,13,100,54,100,22,100,23,100,6,100,108,101,159,101,176,101,151,102,137,102,135,102,136,102,150,102,132,102,152,102,141,102,3,103,148,105,109,105,90,105,119,105,96,105,84,105,117,105,48,105,130,105,74,105,104,105,107,105,94,105,83,105,121,105,134,105,93,105,99,105,91,105,71,107,114,107,192,107,191,107,211,107,253,107,162,110,175,110,211,110,182,110,194,110,144,110,157,110,199,110,197,110,165,110,152,110,188,110,186,110,171,110,209,110,150,110,156,110,196,110,212,110,170,110,167,110,180,110,78,113,89,113,105,113,100,113,73,113,103,113,92,113,108,113,102,113,76,113,101,113,94,113,70,113,104,113,86,113,58,114,82,114,55,115,69,115,63,115,62,115,111,116,90,116,85,116,95,116,94,116,65,116,63,116,89,116,91,116,92,116,118,117,120,117,0,118,240,117,1,118,242,117,241,117,250,117,255,117,244,117,243,117,222,118,223,118,91,119,107,119,102,119,94,119,99,119,121,119,106,119,108,119,92,119,101,119,104,119,98,119,238,119,142,120,176,120,151,120,152,120,140,120,137,120,124,120,145,120,147,120,127,120,122,121,127,121,129,121,44,132,189,121,28,122,26,122,32,122,20,122,31,122,30,122,159,122,160,122,119,123,192,123,96,123,110,123,103,123,177,124,179,124,181,124,147,125,121,125,145,125,129,125,143,125,91,125,110,127,105,127,106,127,114,127,169,127,168,127,164,127,86,128,88,128,134,128,132,128,113,129,112,129,120,129,101,129,110,129,115,129,107,129,121,129,122,129,102,129,5,130,71,130,130,132,119,132,61,132,49,132,117,132,102,132,107,132,73,132,108,132,91,132,60,132,53,132,97,132,99,132,105,132,109,132,70,132,94,134,92,134,95,134,249,134,19,135,8,135,7,135,0,135,254,134,251,134,2,135,3,135,6,135,10,135,89,136,223,136,212,136,217,136,220,136,216,136,221,136,225,136,202,136,213,136,210,136,156,137,227,137,107,138,114,138,115,138,102,138,105,138,112,138,135,138,124,138,99,138,160,138,113,138,133,138,109,138,98,138,110,138,108,138,121,138,123,138,62,138,104,138,98,140,138,140,137,140,202,140,199,140,200,140,196,140,178,140,195,140,194,140,197,140,225,141,223,141,232,141,239,141,243,141,250,141,234,141,228,141,230,141,178,142,3,143,9,143,254,142,10,143,159,143,178,143,75,144,74,144,83,144,66,144,84,144,60,144,85,144,80,144,71,144,79,144,78,144,77,144,81,144,62,144,65,144,18,145,23,145,108,145,106,145,105,145,201,145,55,146,87,146,56,146,61,146,64,146,62,146,91,146,75,146,100,146,81,146,52,146,73,146,77,146,69,146,57,146,63,146,90,146,152,149,152,150,148,150,149,150,205,150,203,150,201,150,202,150,247,150,251,150,249,150,246,150,86,151,116,151,118,151,16,152,17,152,19,152,10,152,18,152,12,152,252,152,244,152,253,152,254,152,179,153,177,153,180,153,225,154,233,156,130,158,14,159,19,159,32,159,231,80,238,80,229,80,214,80,237,80,218,80,213,80,207,80,209,80,241,80,206,80,233,80,98,81,243,81,131,82,130,82,49,83,173,83,254,85,0,86,27,86,23,86,253,85,20,86,6,86,9,86,13,86,14,86,247,85,22,86,31,86,8,86,16,86,246,85,24,87,22,87,117,88,126,88,131,88,147,88,138,88,121,88,133,88,125,88,253,88,37,89,34,89,36,89,106,89,105,89,225,90,230,90,233,90,215,90,214,90,216,90,227,90,117,91,222,91,231,91,225,91,229,91,230,91,232,91,226,91,228,91,223,91,13,92,98,92,132,93,135,93,91,94,99,94,85,94,87,94,84,94,211,94,214,94,10,95,70,95,112,95,185,95,71,97,63,97,75,97,119,97,98,97,99,97,95,97,90,97,88,97,117,97,42,98,135,100,88,100,84,100,164,100,120,100,95,100,122,100,81,100,103,100,52,100,109,100,123,100,114,101,161,101,215,101,214,101,162,102,168,102,157,102,156,105,168,105,149,105,193,105,174,105,211,105,203,105,155,105,183,105,187,105,171,105,180,105,208,105,205,105,173,105,204,105,166,105,195,105,163,105,73,107,76,107,51,108,51,111,20,111,254,110,19,111,244,110,41,111,62,111,32,111,44,111,15,111,2,111,34,111,255,110,239,110,6,111,49,111,56,111,50,111,35,111,21,111,43,111,47,111,136,111,42,111,236,110,1,111,242,110,204,110,247,110,148,113,153,113,125,113,138,113,132,113,146,113,62,114,146,114,150,114,68,115,80,115,100,116,99,116,106,116,112,116,109,116,4,117,145,117,39,118,13,118,11,118,9,118,19,118,225,118,227,118,132,119,125,119,127,119,97,119,193,120,159,120,167,120,179,120,169,120,163,120,142,121,143,121,141,121,46,122,49,122,170,122,169,122,237,122,239,122,161,123,149,123,139,123,117,123,151,123,157,123,148,123,143,123,184,123,135,123,132,123,185,124,189,124,190,124,187,125,176,125,156,125,189,125,190,125,160,125,202,125,180,125,178,125,177,125,186,125,162,125,191,125,181,125,184,125,173,125,210,125,199,125,172,125,112,127,224,127,225,127,223,127,94,128,90,128,135,128,80,129,128,129,143,129,136,129,138,129,127,129,130,129,231,129,250,129,7,130,20,130,30,130,75,130,201,132,191,132,198,132,196,132,153,132,158,132,178,132,156,132,203,132,184,132,192,132,211,132,144,132,188,132,209,132,202,132,63,135,28,135,59,135,34,135,37,135,52,135,24,135,85,135,55,135,41,135,243,136,2,137,244,136,249,136,248,136,253,136,232,136,26,137,239,136,166,138,140,138,158,138,163,138,141,138,161,138,147,138,164,138,170,138,165,138,168,138,152,138,145,138,154,138,167,138,106,140,141,140,140,140,211,140,209,140,210,140,107,141,153,141,149,141,252,141,20,143,18,143,21,143,19,143,163,143,96,144,88,144,92,144,99,144,89,144,94,144,98,144,93,144,91,144,25,145,24,145,30,145,117,145,120,145,119,145,116,145,120,146,128,146,133,146,152,146,150,146,123,146,147,146,156,146,168,146,124,146,145,146,161,149,168,149,169,149,163,149,165,149,164,149,153,150,156,150,155,150,204,150,210,150,0,151,124,151,133,151,246,151,23,152,24,152,175,152,177,152,3,153,5,153,12,153,9,153,193,153,175,154,176,154,230,154,65,155,66,155,244,156,246,156,243,156,188,158,59,159,74,159,4,81,0,81,251,80,245,80,249,80,2,81,8,81,9,81,5,81,220,81,135,82,136,82,137,82,141,82,138,82,240,82,178,83,46,86,59,86,57,86,50,86,63,86,52,86,41,86,83,86,78,86,87,86,116,86,54,86,47,86,48,86,128,88,159,88,158,88,179,88,156,88,174,88,169,88,166,88,109,89,9,91,251,90,11,91,245,90,12,91,8,91,238,91,236,91,233,91,235,91,100,92,101,92,157,93,148,93,98,94,95,94,97,94,226,94,218,94,223,94,221,94,227,94,224,94,72,95,113,95,183,95,181,95,118,97,103,97,110,97,93,97,85,97,130,97,124,97,112,97,107,97,126,97,167,97,144,97,171,97,142,97,172,97,154,97,164,97,148,97,174,97,46,98,105,100,111,100,121,100,158,100,178,100,136,100,144,100,176,100,165,100,147,100,149,100,169,100,146,100,174,100,173,100,171,100,154,100,172,100,153,100,162,100,179,100,117,101,119,101,120,101,174,102,171,102,180,102,177,102,35,106,31,106,232,105,1,106,30,106,25,106,253,105,33,106,19,106,10,106,243,105,2,106,5,106,237,105,17,106,80,107,78,107,164,107,197,107,198,107,63,111,124,111,132,111,81,111,102,111,84,111,134,111,109,111,91,111,120,111,110,111,142,111,122,111,112,111,100,111,151,111,88,111,213,110,111,111,96,111,95,111,159,113,172,113,177,113,168,113,86,114,155,114,78,115,87,115,105,116,139,116,131,116,126,116,128,116,127,117,32,118,41,118,31,118,36,118,38,118,33,118,34,118,154,118,186,118,228,118,142,119,135,119,140,119,145,119,139,119,203,120,197,120,186,120,202,120,190,120,213,120,188,120,208,120,63,122,60,122,64,122,61,122,55,122,59,122,175,122,174,122,173,123,177,123,196,123,180,123,198,123,199,123,193,123,160,123,204,123,202,124,224,125,244,125,239,125,251,125,216,125,236,125,221,125,232,125,227,125,218,125,222,125,233,125,158,125,217,125,242,125,249,125,117,127,119,127,175,127,233,127,38,128,155,129,156,129,157,129,160,129,154,129,152,129,23,133,61,133,26,133,238,132,44,133,45,133,19,133,17,133,35,133,33,133,20,133,236,132,37,133,255,132,6,133,130,135,116,135,118,135,96,135,102,135,120,135,104,135,89,135,87,135,76,135,83,135,91,136,93,136,16,137,7,137,18,137,19,137,21,137,10,137,188,138,210,138,199,138,196,138,149,138,203,138,248,138,178,138,201,138,194,138,191,138,176,138,214,138,205,138,182,138,185,138,219,138,76,140,78,140,108,140,224,140,222,140,230,140,228,140,236,140,237,140,226,140,227,140,220,140,234,140,225,140,109,141,159,141,163,141,43,142,16,142,29,142,34,142,15,142,41,142,31,142,33,142,30,142,186,142,29,143,27,143,31,143,41,143,38,143,42,143,28,143,30,143,37,143,105,144,110,144,104,144,109,144,119,144,48,145,45,145,39,145,49,145,135,145,137,145,139,145,131,145,197,146,187,146,183,146,234,146,172,146,228,146,193,146,179,146,188,146,210,146,199,146,240,146,178,146,173,149,177,149,4,151,6,151,7,151,9,151,96,151,141,151,139,151,143,151,33,152,43,152,28,152,179,152,10,153,19,153,18,153,24,153,221,153,208,153,223,153,219,153,209,153,213,153,210,153,217,153,183,154,238,154,239,154,39,155,69,155,68,155,119,155,111,155,6,157,9,157,3,157,169,158,190,158,206,158,168,88,82,159,18,81,24,81,20,81,16,81,21,81,128,81,170,81,221,81,145,82,147,82,243,82,89,86,107,86,121,86,105,86,100,86,120,86,106,86,104,86,101,86,113,86,111,86,108,86,98,86,118,86,193,88,190,88,199,88,197,88,110,89,29,91,52,91,120,91,240,91,14,92,74,95,178,97,145,97,169,97,138,97,205,97,182,97,190,97,202,97,200,97,48,98,197,100,193,100,203,100,187,100,188,100,218,100,196,100,199,100,194,100,205,100,191,100,210,100,212,100,190,100,116,101,198,102,201,102,185,102,196,102,199,102,184,102,61,106,56,106,58,106,89,106,107,106,88,106,57,106,68,106,98,106,97,106,75,106,71,106,53,106,95,106,72,106,89,107,119,107,5,108,194,111,177,111,161,111,195,111,164,111,193,111,167,111,179,111,192,111,185,111,182,111,166,111,160,111,180,111,190,113,201,113,208,113,210,113,200,113,213,113,185,113,206,113,217,113,220,113,195,113,196,113,104,115,156,116,163,116,152,116,159,116,158,116,226,116,12,117,13,117,52,118,56,118,58,118,231,118,229,118,160,119,158,119,159,119,165,119,232,120,218,120,236,120,231,120,166,121,77,122,78,122,70,122,76,122,75,122,186,122,217,123,17,124,201,123,228,123,219,123,225,123,233,123,230,123,213,124,214,124,10,126,17,126,8,126,27,126,35,126,30,126,29,126,9,126,16,126,121,127,178,127,240,127,241,127,238,127,40,128,179,129,169,129,168,129,251,129,8,130,88,130,89,130,74,133,89,133,72,133,104,133,105,133,67,133,73,133,109,133,106,133,94,133,131,135,159,135,158,135,162,135,141,135,97,136,42,137,50,137,37,137,43,137,33,137,170,137,166,137,230,138,250,138,235,138,241,138,0,139,220,138,231,138,238,138,254,138,1,139,2,139,247,138,237,138,243,138,246,138,252,138,107,140,109,140,147,140,244,140,68,142,49,142,52,142,66,142,57,142,53,142,59,143,47,143,56,143,51,143,168,143,166,143,117,144,116,144,120,144,114,144,124,144,122,144,52,145,146,145,32,147,54,147,248,146,51,147,47,147,34,147,252,146,43,147,4,147,26,147,16,147,38,147,33,147,21,147,46,147,25,147,187,149,167,150,168,150,170,150,213,150,14,151,17,151,22,151,13,151,19,151,15,151,91,151,92,151,102,151,152,151,48,152,56,152,59,152,55,152,45,152,57,152,36,152,16,153,40,153,30,153,27,153,33,153,26,153,237,153,226,153,241,153,184,154,188,154,251,154,237,154,40,155,145,155,21,157,35,157,38,157,40,157,18,157,27,157,216,158,212,158,141,159,156,159,42,81,31,81,33,81,50,81,245,82,142,86,128,86,144,86,133,86,135,86,143,86,213,88,211,88,209,88,206,88,48,91,42,91,36,91,122,91,55,92,104,92,188,93,186,93,189,93,184,93,107,94,76,95,189,95,201,97,194,97,199,97,230,97,203,97,50,98,52,98,206,100,202,100,216,100,224,100,240,100,230,100,236,100,241,100,226,100,237,100,130,101,131,101,217,102,214,102,128,106,148,106,132,106,162,106,156,106,219,106,163,106,126,106,151,106,144,106,160,106,92,107,174,107,218,107,8,108,216,111,241,111,223,111,224,111,219,111,228,111,235,111,239,111,128,111,236,111,225,111,233,111,213,111,238,111,240,111,231,113,223,113,238,113,230,113,229,113,237,113,236,113,244,113,224,113,53,114,70,114,112,115,114,115,169,116,176,116,166,116,168,116,70,118,66,118,76,118,234,118,179,119,170,119,176,119,172,119,167,119,173,119,239,119,247,120,250,120,244,120,239,120,1,121,167,121,170,121,87,122,191,122,7,124,13,124,254,123,247,123,12,124,224,123,224,124,220,124,222,124,226,124,223,124,217,124,221,124,46,126,62,126,70,126,55,126,50,126,67,126,43,126,61,126,49,126,69,126,65,126,52,126,57,126,72,126,53,126,63,126,47,126,68,127,243,127,252,127,113,128,114,128,112,128,111,128,115,128,198,129,195,129,186,129,194,129,192,129,191,129,189,129,201,129,190,129,232,129,9,130,113,130,170,133,132,133,126,133,156,133,145,133,148,133,175,133,155,133,135,133,168,133,138,133,103,134,192,135,209,135,179,135,210,135,198,135,171,135,187,135,186,135,200,135,203,135,59,137,54,137,68,137,56,137,61,137,172,137,14,139,23,139,25,139,27,139,10,139,32,139,29,139,4,139,16,139,65,140,63,140,115,140,250,140,253,140,252,140,248,140,251,140,168,141,73,142,75,142,72,142,74,142,68,143,62,143,66,143,69,143,63,143,127,144,125,144,132,144,129,144,130,144,128,144,57,145,163,145,158,145,156,145,77,147,130,147,40,147,117,147,74,147,101,147,75,147,24,147,126,147,108,147,91,147,112,147,90,147,84,147,202,149,203,149,204,149,200,149,198,149,177,150,184,150,214,150,28,151,30,151,160,151,211,151,70,152,182,152,53,153,1,154,255,153,174,155,171,155,170,155,173,155,59,157,63,157,139,158,207,158,222,158,220,158,221,158,219,158,62,159,75,159,226,83,149,86,174,86,217,88,216,88,56,91,93,95,227,97,51,98,244,100,242,100,254,100,6,101,250,100,251,100,247,100,183,101,220,102,38,103,179,106,172,106,195,106,187,106,184,106,194,106,174,106,175,106,95,107,120,107,175,107,9,112,11,112,254,111,6,112,250,111,17,112,15,112,251,113,252,113,254,113,248,113,119,115,117,115,167,116,191,116,21,117,86,118,88,118,82,118,189,119,191,119,187,119,188,119,14,121,174,121,97,122,98,122,96,122,196,122,197,122,43,124,39,124,42,124,30,124,35,124,33,124,231,124,84,126,85,126,94,126,90,126,97,126,82,126,89,126,72,127,249,127,251,127,119,128,118,128,205,129,207,129,10,130,207,133,169,133,205,133,208,133,201,133,176,133,186,133,185,133,166,133,239,135,236,135,242,135,224,135,134,137,178,137,244,137,40,139,57,139,44,139,43,139,80,140,5,141,89,142,99,142,102,142,100,142,95,142,85,142,192,142,73,143,77,143,135,144,131,144,136,144,171,145,172,145,208,145,148,147,138,147,150,147,162,147,179,147,174,147,172,147,176,147,152,147,154,147,151,147,212,149,214,149,208,149,213,149,226,150,220,150,217,150,219,150,222,150,36,151,163,151,166,151,173,151,249,151,77,152,79,152,76,152,78,152,83,152,186,152,62,153,63,153,61,153,46,153,165,153,14,154,193,154,3,155,6,155,79,155,78,155,77,155,202,155,201,155,253,155,200,155,192,155,81,157,93,157,96,157,224,158,21,159,44,159,51,81,165,86,222,88,223,88,226,88,245,91,144,159,236,94,242,97,247,97,246,97,245,97,0,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+99866);
/* memory initializer */ allocate([15,101,224,102,221,102,229,106,221,106,218,106,211,106,27,112,31,112,40,112,26,112,29,112,21,112,24,112,6,114,13,114,88,114,162,114,120,115,122,115,189,116,202,116,227,116,135,117,134,117,95,118,97,118,199,119,25,121,177,121,107,122,105,122,62,124,63,124,56,124,61,124,55,124,64,124,107,126,109,126,121,126,105,126,106,126,133,127,115,126,182,127,185,127,184,127,216,129,233,133,221,133,234,133,213,133,228,133,229,133,247,133,251,135,5,136,13,136,249,135,254,135,96,137,95,137,86,137,94,137,65,139,92,139,88,139,73,139,90,139,78,139,79,139,70,139,89,139,8,141,10,141,124,142,114,142,135,142,118,142,108,142,122,142,116,142,84,143,78,143,173,143,138,144,139,144,177,145,174,145,225,147,209,147,223,147,195,147,200,147,220,147,221,147,214,147,226,147,205,147,216,147,228,147,215,147,232,147,220,149,180,150,227,150,42,151,39,151,97,151,220,151,251,151,94,152,88,152,91,152,188,152,69,153,73,153,22,154,25,154,13,155,232,155,231,155,214,155,219,155,137,157,97,157,114,157,106,157,108,157,146,158,151,158,147,158,180,158,248,82,168,86,183,86,182,86,180,86,188,86,228,88,64,91,67,91,125,91,246,91,201,93,248,97,250,97,24,101,20,101,25,101,230,102,39,103,236,106,62,112,48,112,50,112,16,114,123,115,207,116,98,118,101,118,38,121,42,121,44,121,43,121,199,122,246,122,76,124,67,124,77,124,239,124,240,124,174,143,125,126,124,126,130,126,76,127,0,128,218,129,102,130,251,133,249,133,17,134,250,133,6,134,11,134,7,134,10,134,20,136,21,136,100,137,186,137,248,137,112,139,108,139,102,139,111,139,95,139,107,139,15,141,13,141,137,142,129,142,133,142,130,142,180,145,203,145,24,148,3,148,253,147,225,149,48,151,196,152,82,153,81,153,168,153,43,154,48,154,55,154,53,154,19,156,13,156,121,158,181,158,232,158,47,159,95,159,99,159,97,159,55,81,56,81,193,86,192,86,194,86,20,89,108,92,205,93,252,97,254,97,29,101,28,101,149,101,233,102,251,106,4,107,250,106,178,107,76,112,27,114,167,114,214,116,212,116,105,118,211,119,80,124,143,126,140,126,188,127,23,134,45,134,26,134,35,136,34,136,33,136,31,136,106,137,108,137,189,137,116,139,119,139,125,139,19,141,138,142,141,142,139,142,95,143,175,143,186,145,46,148,51,148,53,148,58,148,56,148,50,148,43,148,226,149,56,151,57,151,50,151,255,151,103,152,101,152,87,153,69,154,67,154,64,154,62,154,207,154,84,155,81,155,45,156,37,156,175,157,180,157,194,157,184,157,157,158,239,158,25,159,92,159,102,159,103,159,60,81,59,81,200,86,202,86,201,86,127,91,212,93,210,93,78,95,255,97,36,101,10,107,97,107,81,112,88,112,128,115,228,116,138,117,110,118,108,118,179,121,96,124,95,124,126,128,125,128,223,129,114,137,111,137,252,137,128,139,22,141,23,141,145,142,147,142,97,143,72,145,68,148,81,148,82,148,61,151,62,151,195,151,193,151,107,152,85,153,85,154,77,154,210,154,26,155,73,156,49,156,62,156,59,156,211,157,215,157,52,159,108,159,106,159,148,159,204,86,214,93,0,98,35,101,43,101,42,101,236,102,16,107,218,116,202,122,100,124,99,124,101,124,147,126,150,126,148,126,226,129,56,134,63,134,49,136,138,139,144,144,143,144,99,148,96,148,100,148,104,151,111,152,92,153,90,154,91,154,87,154,211,154,212,154,209,154,84,156,87,156,86,156,229,157,159,158,244,158,209,86,233,88,44,101,94,112,113,118,114,118,215,119,80,127,136,127,54,136,57,136,98,136,147,139,146,139,150,139,119,130,27,141,192,145,106,148,66,151,72,151,68,151,198,151,112,152,95,154,34,155,88,155,95,156,249,157,250,157,124,158,125,158,7,159,119,159,114,159,243,94,22,107,99,112,108,124,110,124,59,136,192,137,161,142,193,145,114,148,112,148,113,152,94,153,214,154,35,155,204,158,100,112,218,119,154,139,119,148,201,151,98,154,101,154,156,126,156,139,170,142,197,145,125,148,126,148,124,148,119,156,120,156,247,158,84,140,127,148,26,158,40,114,106,154,49,155,27,158,30,158,114,124,96,36,97,36,98,36,99,36,100,36,101,36,102,36,103,36,104,36,105,36,116,36,117,36,118,36,119,36,120,36,121,36,122,36,123,36,124,36,125,36,112,33,113,33,114,33,115,33,116,33,117,33,118,33,119,33,120,33,121,33,54,78,63,78,133,78,160,78,130,81,150,81,171,81,249,82,56,83,105,83,182,83,10,89,128,91,219,93,122,94,127,94,244,94,80,95,97,95,52,101,224,101,146,117,118,118,181,143,182,150,168,0,198,2,253,48,254,48,157,48,158,48,0,0,0,0,5,48,6,48,7,48,252,48,59,255,61,255,61,39,65,48,66,48,67,48,68,48,69,48,70,48,71,48,72,48,73,48,74,48,75,48,76,48,77,48,78,48,79,48,80,48,81,48,82,48,83,48,84,48,85,48,86,48,87,48,88,48,89,48,90,48,91,48,92,48,93,48,94,48,95,48,96,48,97,48,98,48,99,48,100,48,101,48,102,48,103,48,104,48,105,48,106,48,107,48,108,48,109,48,110,48,111,48,112,48,113,48,114,48,115,48,116,48,117,48,118,48,119,48,120,48,121,48,122,48,123,48,124,48,125,48,126,48,127,48,128,48,129,48,130,48,131,48,132,48,133,48,134,48,135,48,136,48,137,48,138,48,139,48,140,48,141,48,142,48,143,48,144,48,145,48,146,48,147,48,161,48,162,48,163,48,164,48,165,48,166,48,167,48,168,48,169,48,170,48,171,48,172,48,173,48,174,48,175,48,176,48,177,48,178,48,179,48,180,48,181,48,182,48,183,48,184,48,185,48,186,48,187,48,188,48,189,48,190,48,191,48,192,48,193,48,194,48,195,48,196,48,197,48,198,48,199,48,200,48,201,48,202,48,203,48,204,48,205,48,206,48,207,48,208,48,209,48,210,48,211,48,212,48,213,48,214,48,215,48,216,48,217,48,218,48,219,48,220,48,221,48,222,48,223,48,224,48,225,48,226,48,227,48,228,48,229,48,230,48,231,48,232,48,233,48,234,48,235,48,236,48,237,48,238,48,239,48,240,48,241,48,242,48,243,48,244,48,245,48,246,48,16,4,17,4,18,4,19,4,20,4,21,4,1,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,48,4,49,4,50,4,51,4,52,4,53,4,81,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,231,33,184,33,185,33,207,49,204,0,90,78,138,0,2,82,145,68,176,159,136,81,177,159,7,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,255,228,255,7,255,2,255,49,50,22,33,33,33,155,48,156,48,128,46,132,46,134,46,135,46,136,46,138,46,140,46,141,46,149,46,156,46,157,46,165,46,167,46,170,46,172,46,174,46,182,46,188,46,190,46,198,46,202,46,204,46,205,46,207,46,214,46,215,46,222,46,227,46,0,0,0,0,0,0,131,2,80,2,91,2,84,2,117,2,83,1,248,0,75,1,138,2,106,2,66,78,92,78,245,81,26,83,130,83,7,78,12,78,71,78,141,78,215,86,12,250,110,92,115,95,15,78,135,81,14,78,46,78,147,78,194,78,201,78,200,78,152,81,252,82,108,83,185,83,32,87,3,89,44,89,16,92,255,93,225,101,179,107,204,107,20,108,63,114,49,78,60,78,232,78,220,78,233,78,225,78,221,78,218,78,12,82,28,83,76,83,34,87,35,87,23,89,47,89,129,91,132,91,18,92,59,92,116,92,115,92,4,94,128,94,130,94,201,95,9,98,80,98,21,108,54,108,67,108,63,108,59,108,174,114,176,114,138,115,184,121,138,128,30,150,14,79,24,79,44,79,245,78,20,79,241,78,0,79,247,78,8,79,29,79,2,79,5,79,34,79,19,79,4,79,244,78,18,79,177,81,19,82,9,82,16,82,166,82,34,83,31,83,77,83,138,83,7,84,225,86,223,86,46,87,42,87,52,87,60,89,128,89,124,89,133,89,123,89,126,89,119,89,127,89,86,91,21,92,37,92,124,92,122,92,123,92,126,92,223,93,117,94,132,94,2,95,26,95,116,95,213,95,212,95,207,95,92,98,94,98,100,98,97,98,102,98,98,98,89,98,96,98,90,98,101,98,239,101,238,101,62,103,57,103,56,103,59,103,58,103,63,103,60,103,51,103,24,108,70,108,82,108,92,108,79,108,74,108,84,108,75,108,76,108,113,112,94,114,180,114,181,114,142,115,42,117,127,118,117,122,81,127,120,130,124,130,128,130,125,130,127,130,77,134,126,137,153,144,151,144,152,144,155,144,148,144,34,150,36,150,32,150,35,150,86,79,59,79,98,79,73,79,83,79,100,79,62,79,103,79,82,79,95,79,65,79,88,79,45,79,51,79,63,79,97,79,143,81,185,81,28,82,30,82,33,82,173,82,174,82,9,83,99,83,114,83,142,83,143,83,48,84,55,84,42,84,84,84,69,84,25,84,28,84,37,84,24,84,61,84,79,84,65,84,40,84,36,84,71,84,238,86,231,86,229,86,65,87,69,87,76,87,73,87,75,87,82,87,6,89,64,89,166,89,152,89,160,89,151,89,142,89,162,89,144,89,143,89,167,89,161,89,142,91,146,91,40,92,42,92,141,92,143,92,136,92,139,92,137,92,146,92,138,92,134,92,147,92,149,92,224,93,10,94,14,94,139,94,137,94,140,94,136,94,141,94,5,95,29,95,120,95,118,95,210,95,209,95,208,95,237,95,232,95,238,95,243,95,225,95,228,95,227,95,250,95,239,95,247,95,251,95,0,96,244,95,58,98,131,98,140,98,142,98,143,98,148,98,135,98,113,98,123,98,122,98,112,98,129,98,136,98,119,98,125,98,114,98,116,98,55,101,240,101,244,101,243,101,242,101,245,101,69,103,71,103,89,103,85,103,76,103,72,103,93,103,77,103,90,103,75,103,208,107,25,108,26,108,120,108,103,108,107,108,132,108,139,108,143,108,113,108,111,108,105,108,154,108,109,108,135,108,149,108,156,108,102,108,115,108,101,108,123,108,142,108,116,112,122,112,99,114,191,114,189,114,195,114,198,114,193,114,186,114,197,114,149,115,151,115,147,115,148,115,146,115,58,117,57,117,148,117,149,117,129,118,61,121,52,128,149,128,153,128,144,128,146,128,156,128,144,130,143,130,133,130,142,130,145,130,147,130,138,130,131,130,132,130,120,140,201,143,191,143,159,144,161,144,165,144,158,144,167,144,160,144,48,150,40,150,47,150,45,150,51,78,152,79,124,79,133,79,125,79,128,79,135,79,118,79,116,79,137,79,132,79,119,79,76,79,151,79,106,79,154,79,121,79,129,79,120,79,144,79,156,79,148,79,158,79,146,79,130,79,149,79,107,79,110,79,158,81,188,81,190,81,53,82,50,82,51,82,70,82,49,82,188,82,10,83,11,83,60,83,146,83,148,83,135,84,127,84,129,84,145,84,130,84,136,84,107,84,122,84,126,84,101,84,108,84,116,84,102,84,141,84,111,84,97,84,96,84,152,84,99,84,103,84,100,84,247,86,249,86,111,87,114,87,109,87,107,87,113,87,112,87,118,87,128,87,117,87,123,87,115,87,116,87,98,87,104,87,125,87,12,89,69,89,181,89,186,89,207,89,206,89,178,89,204,89,193,89,182,89,188,89,195,89,214,89,177,89,189,89,192,89,200,89,180,89,199,89,98,91,101,91,147,91,149,91,68,92,71,92,174,92,164,92,160,92,181,92,175,92,168,92,172,92,159,92,163,92,173,92,162,92,170,92,167,92,157,92,165,92,182,92,176,92,166,92,23,94,20,94,25,94,40,95,34,95,35,95,36,95,84,95,130,95,126,95,125,95,222,95,229,95,45,96,38,96,25,96,50,96,11,96,52,96,10,96,23,96,51,96,26,96,30,96,44,96,34,96,13,96,16,96,46,96,19,96,17,96,12,96,9,96,28,96,20,98,61,98,173,98,180,98,209,98,190,98,170,98,182,98,202,98,174,98,179,98,175,98,187,98,169,98,176,98,184,98,61,101,168,101,187,101,9,102,252,101,4,102,18,102,8,102,251,101,3,102,11,102,13,102,5,102,253,101,17,102,16,102,246,102,10,103,133,103,108,103,142,103,146,103,118,103,123,103,152,103,134,103,132,103,116,103,141,103,140,103,122,103,159,103,145,103,153,103,131,103,125,103,129,103,120,103,121,103,148,103,37,107,128,107,126,107,222,107,29,108,147,108,236,108,235,108,238,108,217,108,182,108,212,108,173,108,231,108,183,108,208,108,194,108,186,108,195,108,198,108,237,108,242,108,210,108,221,108,180,108,138,108,157,108,128,108,222,108,192,108,48,109,205,108,199,108,176,108,249,108,207,108,233,108,209,108,148,112,152,112,133,112,147,112,134,112,132,112,145,112,150,112,130,112,154,112,131,112,106,114,214,114,203,114,216,114,201,114,220,114,210,114,212,114,218,114,204,114,209,114,164,115,161,115,173,115,166,115,162,115,160,115,172,115,157,115,221,116,232,116,63,117,64,117,62,117,140,117,152,117,175,118,243,118,241,118,240,118,245,118,248,119,252,119,249,119,251,119,250,119,247,119,66,121,63,121,197,121,120,122,123,122,251,122,117,124,253,124,53,128,143,128,174,128,163,128,184,128,181,128,173,128,32,130,160,130,192,130,171,130,154,130,152,130,155,130,181,130,167,130,174,130,188,130,158,130,186,130,180,130,168,130,161,130,169,130,194,130,164,130,195,130,182,130,162,130,112,134,111,134,109,134,110,134,86,140,210,143,203,143,211,143,205,143,214,143,213,143,215,143,178,144,180,144,175,144,179,144,176,144,57,150,61,150,60,150,58,150,67,150,205,79,197,79,211,79,178,79,201,79,203,79,193,79,212,79,220,79,217,79,187,79,179,79,219,79,199,79,214,79,186,79,192,79,185,79,236,79,68,82,73,82,192,82,194,82,61,83,124,83,151,83,150,83,153,83,152,83,186,84,161,84,173,84,165,84,207,84,195,84,13,131,183,84,174,84,214,84,182,84,197,84,198,84,160,84,112,84,188,84,162,84,190,84,114,84,222,84,176,84,181,87,158,87,159,87,164,87,140,87,151,87,157,87,155,87,148,87,152,87,143,87,153,87,165,87,154,87,149,87,244,88,13,89,83,89,225,89,222,89,238,89,0,90,241,89,221,89,250,89,253,89,252,89,246,89,228,89,242,89,247,89,219,89,233,89,243,89,245,89,224,89,254,89,244,89,237,89,168,91,76,92,208,92,216,92,204,92,215,92,203,92,219,92,222,92,218,92,201,92,199,92,202,92,214,92,211,92,212,92,207,92,200,92,198,92,206,92,223,92,248,92,249,93,33,94,34,94,35,94,32,94,36,94,176,94,164,94,162,94,155,94,163,94,165,94,7,95,46,95,86,95,134,95,55,96,57,96,84,96,114,96,94,96,69,96,83,96,71,96,73,96,91,96,76,96,64,96,66,96,95,96,36,96,68,96,88,96,102,96,110,96,66,98,67,98,207,98,13,99,11,99,245,98,14,99,3,99,235,98,249,98,15,99,12,99,248,98,246,98,0,99,19,99,20,99,250,98,21,99,251,98,240,98,65,101,67,101,170,101,191,101,54,102,33,102,50,102,53,102,28,102,38,102,34,102,51,102,43,102,58,102,29,102,52,102,57,102,46,102,15,103,16,103,193,103,242,103,200,103,186,103,220,103,187,103,248,103,216,103,192,103,183,103,197,103,235,103,228,103,223,103,181,103,205,103,179,103,247,103,246,103,238,103,227,103,194,103,185,103,206,103,231,103,240,103,178,103,252,103,198,103,237,103,204,103,174,103,230,103,219,103,250,103,201,103,202,103,195,103,234,103,203,103,40,107,130,107,132,107,182,107,214,107,216,107,224,107,32,108,33,108,40,109,52,109,45,109,31,109,60,109,63,109,18,109,10,109,218,108,51,109,4,109,25,109,58,109,26,109,17,109,0,109,29,109,66,109,1,109,24,109,55,109,3,109,15,109,64,109,7,109,32,109,44,109,8,109,34,109,9,109,16,109,183,112,159,112,190,112,177,112,176,112,161,112,180,112,181,112,169,112,65,114,73,114,74,114,108,114,112,114,115,114,110,114,202,114,228,114,232,114,235,114,223,114,234,114,230,114,227,114,133,115,204,115,194,115,200,115,197,115,185,115,182,115,181,115,180,115,235,115,191,115,199,115,190,115,195,115,198,115,184,115,203,115,236,116,238,116,46,117,71,117,72,117,167,117,170,117,121,118,196,118,8,119,3,119,4,119,5,119,10,119,247,118,251,118,250,118,231,119,232,119,6,120,17,120,18,120,5,120,16,120,15,120,14,120,9,120,3,120,19,120,74,121,76,121,75,121,69,121,68,121,213,121,205,121,207,121,214,121,206,121,128,122,126,122,209,122,0,123,1,123,122,124,120,124,121,124,127,124,128,124,129,124,3,125,8,125,1,125,88,127,145,127,141,127,190,127,7,128,14,128,15,128,20,128,55,128,216,128,199,128,224,128,209,128,200,128,194,128,208,128,197,128,227,128,217,128,220,128,202,128,213,128,201,128,207,128,215,128,230,128,205,128,255,129,33,130,148,130,217,130,254,130,249,130,7,131,232,130,0,131,213,130,58,131,235,130,214,130,244,130,236,130,225,130,242,130,245,130,12,131,251,130,246,130,240,130,234,130,228,130,224,130,250,130,243,130,237,130,119,134,116,134,124,134,115,134,65,136,78,136,103,136,106,136,105,136,211,137,4,138,7,138,114,141,227,143,225,143,238,143,224,143,241,144,189,144,191,144,213,144,197,144,190,144,199,144,203,144,200,144,212,145,211,145,84,150,79,150,81,150,83,150,74,150,78,150,30,80,5,80,7,80,19,80,34,80,48,80,27,80,245,79,244,79,51,80,55,80,44,80,246,79,247,79,23,80,28,80,32,80,39,80,53,80,47,80,49,80,14,80,90,81,148,81,147,81,202,81,196,81,197,81,200,81,206,81,97,82,90,82,82,82,94,82,95,82,85,82,98,82,205,82,14,83,158,83,38,85,226,84,23,85,18,85,231,84,243,84,228,84,26,85,255,84,4,85,8,85,235,84,17,85,5,85,241,84,10,85,251,84,247,84,248,84,224,84,14,85,3,85,11,85,1,87,2,87,204,87,50,88,213,87,210,87,186,87,198,87,189,87,188,87,184,87,182,87,191,87,199,87,208,87,185,87,193,87,14,89,74,89,25,90,22,90,45,90,46,90,21,90,15,90,23,90,10,90,30,90,51,90,108,91,167,91,173,91,172,91,3,92,86,92,84,92,236,92,255,92,238,92,241,92,247,92,0,93,249,92,41,94,40,94,168,94,174,94,170,94,172,94,51,95,48,95,103,95,93,96,90,96,103,96,65,96,162,96,136,96,128,96,146,96,129,96,157,96,131,96,149,96,155,96,151,96,135,96,156,96,142,96,25,98,70,98,242,98,16,99,86,99,44,99,68,99,69,99,54,99,67,99,228,99,57,99,75,99,74,99,60,99,41,99,65,99,52,99,88,99,84,99,89,99,45,99,71,99,51,99,90,99,81,99,56,99,87,99,64,99,72,99,74,101,70,101,198,101,195,101,196,101,194,101,74,102,95,102,71,102,81,102,18,103,19,103,31,104,26,104,73,104,50,104,51,104,59,104,75,104,79,104,22,104,49,104,28,104,53,104,43,104,45,104,47,104,78,104,68,104,52,104,29,104,18,104,20,104,38,104,40,104,46,104,77,104,58,104,37,104,32,104,44,107,47,107,45,107,49,107,52,107,109,107,130,128,136,107,230,107,228,107,232,107,227,107,226,107,231,107,37,108,122,109,99,109,100,109,118,109,13,109,97,109,146,109,88,109,98,109,109,109,111,109,145,109,141,109,239,109,127,109,134,109,94,109,103,109,96,109,151,109,112,109,124,109,95,109,130,109,152,109,47,109,104,109,139,109,126,109,128,109,132,109,22,109,131,109,123,109,125,109,117,109,144,109,220,112,211,112,209,112,221,112,203,112,57,127,226,112,215,112,210,112,222,112,224,112,212,112,205,112,197,112,198,112,199,112,218,112,206,112,225,112,66,114,120,114,119,114,118,114,0,115,250,114,244,114,254,114,246,114,243,114,251,114,1,115,211,115,217,115,229,115,214,115,188,115,231,115,227,115,233,115,220,115,210,115,219,115,212,115,221,115,218,115,215,115,216,115,232,115,222,116,223,116,244,116,245,116,33,117,91,117,95,117,176,117,193,117,187,117,196,117,192,117,191,117,182,117,186,117,138,118,201,118,29,119,27,119,16,119,19,119,18,119,35,119,17,119,21,119,25,119,26,119,34,119,39,119,35,120,44,120,34,120,53,120,47,120,40,120,46,120,43,120,33,120,41,120,51,120,42,120,49,120,84,121,91,121,79,121,92,121,83,121,82,121,81,121,235,121,236,121,224,121,238,121,237,121,234,121,220,121,222,121,221,121,134,122,137,122,133,122,139,122,140,122,138,122,135,122,216,122,16,123,4,123,19,123,5,123,15,123,8,123,10,123,14,123,9,123,18,123,132,124,145,124,138,124,140,124,136,124,141,124,133,124,30,125,29,125,17,125,14,125,24,125,22,125,19,125,31,125,18,125,15,125,12,125,92,127,97,127,94,127,96,127,93,127,91,127,150,127,146,127,195,127,194,127,192,127,22,128,62,128,57,128,250,128,242,128,249,128,245,128,1,129,251,128,0,129,1,130,47,130,37,130,51,131,45,131,68,131,25,131,81,131,37,131,86,131,63,131,65,131,38,131,28,131,34,131,66,131,78,131,27,131,42,131,8,131,60,131,77,131,22,131,36,131,32,131,55,131,47,131,41,131,71,131,69,131,76,131,83,131,30,131,44,131,75,131,39,131,72,131,83,134,82,134,162,134,168,134,150,134,141,134,145,134,158,134,135,134,151,134,134,134,139,134,154,134,133,134,165,134,153,134,161,134,167,134,149,134,152,134,142,134,157,134,144,134,148,134,67,136,68,136,109,136,117,136,118,136,114,136,128,136,113,136,127,136,111,136,131,136,126,136,116,136,124,136,18,138,71,140,87,140,123,140,164,140,163,140,118,141,120,141,181,141,183,141,182,141,209,142,211,142,254,143,245,143,2,144,255,143,251,143,4,144,252,143,246,143,214,144,224,144,217,144,218,144,227,144,223,144,229,144,216,144,219,144,215,144,220,144,228,144,80,145,78,145,79,145,213,145,226,145,218,145,92,150,95,150,188,150,227,152,223,154,47,155,127,78,112,80,106,80,97,80,94,80,96,80,83,80,75,80,93,80,114,80,72,80,77,80,65,80,91,80,74,80,98,80,21,80,69,80,95,80,105,80,107,80,99,80,100,80,70,80,64,80,110,80,115,80,87,80,81,80,208,81,107,82,109,82,108,82,110,82,214,82,211,82,45,83,156,83,117,85,118,85,60,85,77,85,80,85,52,85,42,85,81,85,98,85,54,85,53,85,48,85,82,85,69,85,12,85,50,85,101,85,78,85,57,85,72,85,45,85,59,85,64,85,75,85,10,87,7,87,251,87,20,88,226,87,246,87,220,87,244,87,0,88,237,87,253,87,8,88,248,87,11,88,243,87,207,87,7,88,238,87,227,87,242,87,229,87,236,87,225,87,14,88,252,87,16,88,231,87,1,88,12,88,241,87,233,87,240,87,13,88,4,88,92,89,96,90,88,90,85,90,103,90,94,90,56,90,53,90,109,90,80,90,95,90,101,90,108,90,83,90,100,90,87,90,67,90,93,90,82,90,68,90,91,90,72,90,142,90,62,90,77,90,57,90,76,90,112,90,105,90,71,90,81,90,86,90,66,90,92,90,114,91,110,91,193,91,192,91,89,92,30,93,11,93,29,93,26,93,32,93,12,93,40,93,13,93,38,93,37,93,15,93,48,93,18,93,35,93,31,93,46,93,62,94,52,94,177,94,180,94,185,94,178,94,179,94,54,95,56,95,155,95,150,95,159,95,138,96,144,96,134,96,190,96,176,96,186,96,211,96,212,96,207,96,228,96,217,96,221,96,200,96,177,96,219,96,183,96,202,96,191,96,195,96,205,96,192,96,50,99,101,99,138,99,130,99,125,99,189,99,158,99,173,99,157,99,151,99,171,99,142,99,111,99,135,99,144,99,110,99,175,99,117,99,156,99,109,99,174,99,124,99,164,99,59,99,159,99,120,99,133,99,129,99,145,99,141,99,112,99,83,101,205,101,101,102,97,102,91,102,89,102,92,102,98,102,24,103,121,104,135,104,144,104,156,104,109,104,110,104,174,104,171,104,86,105,111,104,163,104,172,104,169,104,117,104,116,104,178,104,143,104,119,104,146,104,124,104,107,104,114,104,170,104,128,104,113,104,126,104,155,104,150,104,139,104,160,104,137,104,164,104,120,104,123,104,145,104,140,104,138,104,125,104,54,107,51,107,55,107,56,107,145,107,143,107,141,107,142,107,140,107,42,108,192,109,171,109,180,109,179,109,116,110,172,109,233,109,226,109,183,109,246,109,212,109,0,110,200,109,224,109,223,109,214,109,190,109,229,109,220,109,221,109,219,109,244,109,202,109,189,109,237,109,240,109,186,109,213,109,194,109,207,109,201,109,208,109,242,109,211,109,253,109,215,109,205,109,227,109,187,109,250,112,13,113,247,112,23,113,244,112,12,113,240,112,4,113,243,112,16,113,252,112,255,112,6,113,19,113,0,113,248,112,246,112,11,113,2,113,14,113,126,114,123,114,124,114,127,114,29,115,23,115,7,115,17,115,24,115,10,115,8,115,255,114,15,115,30,115,136,115,246,115,248,115,245,115,4,116,1,116,253,115,7,116,0,116,250,115,252,115,255,115,12,116,11,116,244,115,8,116,100,117,99,117,206,117,210,117,207,117,203,117,204,117,209,117,208,117,143,118,137,118,211,118,57,119,47,119,45,119,49,119,50,119,52,119,51,119,61,119,37,119,59,119,53,119,72,120,82,120,73,120,77,120,74,120,76,120,38,120,69,120,80,120,100,121,103,121,105,121,106,121,99,121,107,121,97,121,187,121,250,121,248,121,246,121,247,121,143,122,148,122,144,122,53,123,71,123,52,123,37,123,48,123,34,123,36,123,51,123,24,123,42,123,29,123,49,123,43,123,45,123,47,123,50,123,56,123,26,123,35,123,148,124,152,124,150,124,163,124,53,125,61,125,56,125,54,125,58,125,69,125,44,125,41,125,65,125,71,125,62,125,63,125,74,125,59,125,40,125,99,127,149,127,156,127,157,127,155,127,202,127,203,127,205,127,208,127,209,127,199,127,207,127,201,127,31,128,30,128,27,128,71,128,67,128,72,128,24,129,37,129,25,129,27,129,45,129,31,129,44,129,30,129,33,129,21,129,39,129,29,129,34,129,17,130,56,130,51,130,58,130,52,130,50,130,116,130,144,131,163,131,168,131,141,131,122,131,115,131,164,131,116,131,143,131,129,131,149,131,153,131,117,131,148,131,169,131,125,131,131,131,140,131,157,131,155,131,170,131,139,131,126,131,165,131,175,131,136,131,151,131,176,131,127,131,166,131,135,131,174,131,118,131,154,131,89,134,86,134,191,134,183,134,194,134,193,134,197,134,186,134,176,134,200,134,185,134,179,134,184,134,204,134,180,134,187,134,188,134,195,134,189,134,190,134,82,136,137,136,149,136,168,136,162,136,170,136,154,136,145,136,161,136,159,136,152,136,167,136,153,136,155,136,151,136,164,136,172,136,140,136,147,136,142,136,130,137,214,137,217,137,213,137,48,138,39,138,44,138,30,138,57,140,59,140,92,140,93,140,125,140,165,140,125,141,123,141,121,141,188,141,194,141,185,141,191,141,193,141,216,142,222,142,221,142,220,142,215,142,224,142,225,142,36,144,11,144,17,144,28,144,12,144,33,144,239,144,234,144,240,144,244,144,242,144,243,144,212,144,235,144,236,144,233,144,86,145,88,145,90,145,83,145,85,145,236,145,244,145,241,145,243,145,248,145,228,145,249,145,234,145,235,145,247,145,232,145,238,145,122,149,134,149,136,149,124,150,109,150,107,150,113,150,111,150,191,150,106,151,4,152,229,152,151,153,155,80,149,80,148,80,158,80,139,80,163,80,131,80,140,80,142,80,157,80,104,80,156,80,146,80,130,80,135,80,95,81,212,81,18,83,17,83,164,83,167,83,145,85,168,85,165,85,173,85,119,85,69,86,162,85,147,85,136,85,143,85,181,85,129,85,163,85,146,85,164,85,125,85,140,85,166,85,127,85,149,85,161,85,142,85,12,87,41,88,55,88,25,88,30,88,39,88,35,88,40,88,245,87,72,88,37,88,28,88,27,88,51,88,63,88,54,88,46,88,57,88,56,88,45,88,44,88,59,88,97,89,175,90,148,90,159,90,122,90,162,90,158,90,120,90,166,90,124,90,165,90,172,90,149,90,174,90,55,90,132,90,138,90,151,90,131,90,139,90,169,90,123,90,125,90,140,90,156,90,143,90,147,90,157,90,234,91,205,91,203,91,212,91,209,91,202,91,206,91,12,92,48,92,55,93,67,93,107,93,65,93,75,93,63,93,53,93,81,93,78,93,85,93,51,93,58,93,82,93,61,93,49,93,89,93,66,93,57,93,73,93,56,93,60,93,50,93,54,93,64,93,69,93,68,94,65,94,88,95,166,95,165,95,171,95,201,96,185,96,204,96,226,96,206,96,196,96,20,97,242,96,10,97,22,97,5,97,245,96,19,97,248,96,252,96,254,96,193,96,3,97,24,97,29,97,16,97,255,96,4,97,11,97,74,98,148,99,177,99,176,99,206,99,229,99,232,99,239,99,195,99,157,100,243,99,202,99,224,99,246,99,213,99,242,99,245,99,97,100,223,99,190,99,221,99,220,99,196,99,216,99,211,99,194,99,199,99,204,99,203,99,200,99,240,99,215,99,217,99,50,101,103,101,106,101,100,101,92,101,104,101,101,101,140,101,157,101,158,101,174,101,208,101,210,101,124,102,108,102,123,102,128,102,113,102,121,102,106,102,114,102,1,103,12,105,211,104,4,105,220,104,42,105,236,104,234,104,241,104,15,105,214,104,247,104,235,104,228,104,246,104,19,105,16,105,243,104,225,104,7,105,204,104,8,105,112,105,180,104,17,105,239,104,198,104,20,105,248,104,208,104,253,104,252,104,232,104,11,105,10,105,23,105,206,104,200,104,221,104,222,104,230,104,244,104,209,104,6,105,212,104,233,104,21,105,37,105,199,104,57,107,59,107,63,107,60,107,148,107,151,107,153,107,149,107,189,107,240,107,242,107,243,107,48,108,252,109,70,110,71,110,31,110,73,110,136,110,60,110,61,110,69,110,98,110,43,110,63,110,65,110,93,110,115,110,28,110,51,110,75,110,64,110,81,110,59,110,3,110,46,110,94,110,104,110,92,110,97,110,49,110,40,110,96,110,113,110,107,110,57,110,34,110,48,110,83,110,101,110,39,110,120,110,100,110,119,110,85,110,121,110,82,110,102,110,53,110,54,110,90,110,32,113,30,113,47,113,251,112,46,113,49,113,35,113,37,113,34,113,50,113,31,113,40,113,58,113,27,113,75,114,90,114,136,114,137,114,134,114,133,114,139,114,18,115,11,115,48,115,34,115,49,115,51,115,39,115,50,115,45,115,38,115,35,115,53,115,12,115,46,116,44,116,48,116,43,116,22,116,26,116,33,116,45,116,49,116,36,116,35,116,29,116,41,116,32,116,50,116,251,116,47,117,111,117,108,117,231,117,218,117,225,117,230,117,221,117,223,117,228,117,215,117,149,118,146,118,218,118,70,119,71,119,68,119,77,119,69,119,74,119,78,119,75,119,76,119,222,119,236,119,96,120,100,120,101,120,92,120,109,120,113,120,106,120,110,120,112,120,105,120,104,120,94,120,98,120,116,121,115,121,114,121,112,121,2,122,10,122,3,122,12,122,4,122,153,122,230,122,228,122,74,123,59,123,68,123,72,123,76,123,78,123,64,123,88,123,69,123,162,124,158,124,168,124,161,124,88,125,111,125,99,125,83,125,86,125,103,125,106,125,79,125,109,125,92,125,107,125,82,125,84,125,105,125,81,125,95,125,78,125,62,127,63,127,101,127,102,127,162,127,160,127,161,127,215,127,81,128,79,128,80,128,254,128,212,128,67,129,74,129,82,129,79,129,71,129,61,129,77,129,58,129,230,129,238,129,247,129,248,129,249,129,4,130,60,130,61,130,63,130,117,130,59,131,207,131,249,131,35,132,192,131,232,131,18,132,231,131,228,131,252,131,246,131,16,132,198,131,200,131,235,131,227,131,191,131,1,132,221,131,229,131,216,131,255,131,225,131,203,131,206,131,214,131,245,131,201,131,9,132,15,132,222,131,17,132,6,132,194,131,243,131,213,131,250,131,199,131,209,131,234,131,19,132,195,131,236,131,238,131,196,131,251,131,215,131,226,131,27,132,219,131,254,131,216,134,226,134,230,134,211,134,227,134,218,134,234,134,221,134,235,134,220,134,236,134,233,134,215,134,232,134,209,134,72,136,86,136,85,136,186,136,215,136,185,136,184,136,192,136,190,136,182,136,188,136,183,136,189,136,178,136,1,137,201,136,149,137,152,137,151,137,221,137,218,137,219,137,78,138,77,138,57,138,89,138,64,138,87,138,88,138,68,138,69,138,82,138,72,138,81,138,74,138,76,138,79,138,95,140,129,140,128,140,186,140,190,140,176,140,185,140,181,140,132,141,128,141,137,141,216,141,211,141,205,141,199,141,214,141,220,141,207,141,213,141,217,141,200,141,215,141,197,141,239,142,247,142,250,142,249,142,230,142,238,142,229,142,245,142,231,142,232,142,246,142,235,142,241,142,236,142,244,142,233,142,45,144,52,144,47,144,6,145,44,145,4,145,255,144,252,144,8,145,249,144,251,144,1,145,0,145,7,145,5,145,3,145,97,145,100,145,95,145,98,145,96,145,1,146,10,146,37,146,3,146,26,146,38,146,15,146,12,146,0,146,18,146,255,145,253,145,6,146,4,146,39,146,2,146,28,146,36,146,25,146,23,146,5,146,22,146,123,149,141,149,140,149,144,149,135,150,126,150,136,150,137,150,131,150,128,150,194,150,200,150,195,150,241,150,240,150,108,151,112,151,110,151,7,152,169,152,235,152,230,156,249,158,131,78,132,78,182,78,189,80,191,80,198,80,174,80,196,80,202,80,180,80,200,80,194,80,176,80,193,80,186,80,177,80,203,80,201,80,182,80,184,80,215,81,122,82,120,82,123,82,124,82,195,85,219,85,204,85,208,85,203,85,202,85,221,85,192,85,212,85,196,85,233,85,191,85,210,85,141,85,207,85,213,85,226,85,214,85,200,85,242,85,205,85,217,85,194,85,20,87,83,88,104,88,100,88,79,88,77,88,73,88,111,88,85,88,78,88,93,88,89,88,101,88,91,88,61,88,99,88,113,88,252,88,199,90,196,90,203,90,186,90,184,90,177,90,181,90,176,90,191,90,200,90,187,90,198,90,183,90,192,90,202,90,180,90,182,90,205,90,185,90,144,90,214,91,216,91,217,91,31,92,51,92,113,93,99,93,74,93,101,93,114,93,108,93,94,93,104,93,103,93,98,93,240,93,79,94,78,94,74,94,77,94,75,94,197,94,204,94,198,94,203,94,199,94,64,95,175,95,173,95,247,96,73,97,74,97,43,97,69,97,54,97,50,97,46,97,70,97,47,97,79,97,41,97,64,97,32,98,104,145,35,98,37,98,36,98,197,99,241,99,235,99,16,100,18,100,9,100,32,100,36,100,51,100,67,100,31,100,21,100,24,100,57,100,55,100,34,100,35,100,12,100,38,100,48,100,40,100,65,100,53,100,47,100,10,100,26,100,64,100,37,100,39,100,11,100,231,99,27,100,46,100,33,100,14,100,111,101,146,101,211,101,134,102,140,102,149,102,144,102,139,102,138,102,153,102,148,102,120,102,32,103,102,105,95,105,56,105,78,105,98,105,113,105,63,105,69,105,106,105,57,105,66,105,87,105,89,105,122,105,72,105,73,105,53,105,108,105,51,105,61,105,101,105,240,104,120,105,52,105,105,105,64,105,111,105,68,105,118,105,88,105,65,105,116,105,76,105,59,105,75,105,55,105,92,105,79,105,81,105,50,105,82,105,47,105,123,105,60,105,70,107,69,107,67,107,66,107,72,107,65,107,155,107,13,250,251,107,252,107,249,107,247,107,248,107,155,110,214,110,200,110,143,110,192,110,159,110,147,110,148,110,160,110,177,110,185,110,198,110,210,110,189,110,193,110,158,110,201,110,183,110,176,110,205,110,166,110,207,110,178,110,190,110,195,110,220,110,216,110,153,110,146,110,142,110,141,110,164,110,161,110,191,110,179,110,208,110,202,110,151,110,174,110,163,110,71,113,84,113,82,113,99,113,96,113,65,113,93,113,98,113,114,113,120,113,106,113,97,113,66,113,88,113,67,113,75,113,112,113,95,113,80,113,83,113,68,113,77,113,90,113,79,114,141,114,140,114,145,114,144,114,142,114,60,115,66,115,59,115,58,115,64,115,74,115,73,115,68,116,74,116,75,116,82,116,81,116,87,116,64,116,79,116,80,116,78,116,66,116,70,116,77,116,84,116,225,116,255,116,254,116,253,116,29,117,121,117,119,117,131,105,239,117,15,118,3,118,247,117,254,117,252,117,249,117,248,117,16,118,251,117,246,117,237,117,245,117,253,117,153,118,181,118,221,118,85,119,95,119,96,119,82,119,86,119,90,119,105,119,103,119,84,119,89,119,109,119,224,119,135,120,154,120,148,120,143,120,132,120,149,120,133,120,134,120,161,120,131,120,121,120,153,120,128,120,150,120,123,120,124,121,130,121,125,121,121,121,17,122,24,122,25,122,18,122,23,122,21,122,34,122,19,122,27,122,16,122,163,122,162,122,158,122,235,122,102,123,100,123,109,123,116,123,105,123,114,123,101,123,115,123,113,123,112,123,97,123,120,123,118,123,99,123,178,124,180,124,175,124,136,125,134,125,128,125,141,125,127,125,133,125,122,125,142,125,123,125,131,125,124,125,140,125,148,125,132,125,125,125,146,125,109,127,107,127,103,127,104,127,108,127,166,127,165,127,167,127,219,127,220,127,33,128,100,129,96,129,119,129,92,129,105,129,91,129,98,129,114,129,33,103,94,129,118,129,103,129,111,129,68,129,97,129,29,130,73,130,68,130,64,130,66,130,69,130,241,132,63,132,86,132,118,132,121,132,143,132,141,132,101,132,81,132,64,132,134,132,103,132,48,132,77,132,125,132,90,132,89,132,116,132,115,132,93,132,7,133,94,132,55,132,58,132,52,132,122,132,67,132,120,132,50,132,69,132,41,132,217,131,75,132,47,132,66,132,45,132,95,132,112,132,57,132,78,132,76,132,82,132,111,132,197,132,142,132,59,132,71,132,54,132,51,132,104,132,126,132,68,132,43,132,96,132,84,132,110,132,80,132,11,135,4,135,247,134,12,135,250,134,214,134,245,134,77,135,248,134,14,135,9,135,1,135,246,134,13,135,5,135,214,136,203,136,205,136,206,136,222,136,219,136,218,136,204,136,208,136,133,137,155,137,223,137,229,137,228,137,225,137,224,137,226,137,220,137,230,137,118,138,134,138,127,138,97,138,63,138,119,138,130,138,132,138,117,138,131,138,129,138,116,138,122,138,60,140,75,140,74,140,101,140,100,140,102,140,134,140,132,140,133,140,204,140,104,141,105,141,145,141,140,141,142,141,143,141,141,141,147,141,148,141,144,141,146,141,240,141,224,141,236,141,241,141,238,141,208,141,233,141,227,141,226,141,231,141,242,141,235,141,244,141,6,143,255,142,1,143,0,143,5,143,7,143,8,143,2,143,11,143,82,144,63,144,68,144,73,144,61,144,16,145,13,145,15,145,17,145,22,145,20,145,11,145,14,145,110,145,111,145,72,146,82,146,48,146,58,146,102,146,51,146,101,146,94,146,131,146,46,146,74,146,70,146,109,146,108,146,79,146,96,146,103,146,111,146,54,146,97,146,112,146,49,146,84,146,99,146,80,146,114,146,78,146,83,146,76,146,86,146,50,146,159,149,156,149,158,149,155,149,146,150,147,150,145,150,151,150,206,150,250,150,253,150,248,150,245,150,115,151,119,151,120,151,114,151,15,152,13,152,14,152,172,152,246,152,249,152,175,153,178,153,176,153,181,153,173,154,171,154,91,155,234,156,237,156,231,156,128,158,253,158,230,80,212,80,215,80,232,80,243,80,219,80,234,80,221,80,228,80,211,80,236,80,240,80,239,80,227,80,224,80,216,81,128,82,129,82,233,82,235,82,48,83,172,83,39,86,21,86,12,86,18,86,252,85,15,86,28,86,1,86,19,86,2,86,250,85,29,86,4,86,255,85,249,85,137,88,124,88,144,88,152,88,134,88,129,88,127,88,116,88,139,88,122,88,135,88,145,88,142,88,118,88,130,88,136,88,123,88,148,88,143,88,254,88,107,89,220,90,238,90,229,90,213,90,234,90,218,90,237,90,235,90,243,90,226,90,224,90,219,90,236,90,222,90,221,90,217,90,232,90,223,90,119,91,224,91,227,91,99,92,130,93,128,93,125,93,134,93,122,93,129,93,119,93,138,93,137,93,136,93,126,93,124,93,141,93,121,93,127,93,88,94,89,94,83,94,216,94,209,94,215,94,206,94,220,94,213,94,217,94,210,94,212,94,68,95,67,95,111,95,182,95,44,97,40,97,65,97,94,97,113,97,115,97,82,97,83,97,114,97,108,97,128,97,116,97,84,97,122,97,91,97,101,97,59,97,106,97,97,97,86,97,41,98,39,98,43,98,43,100,77,100,91,100,93,100,116,100,118,100,114,100,115,100,125,100,117,100,102,100,166,100,78,100,130,100,94,100,92,100,75,100,83,100,96,100,80,100,127,100,63,100,108,100,107,100,89,100,101,100,119,100,115,101,160,101,161,102,160,102,159,102,5,103,4,103,34,103,177,105,182,105,201,105,160,105,206,105,150,105,176,105,172,105,188,105,145,105,153,105,142,105,167,105,141,105,169,105,190,105,175,105,191,105,196,105,189,105,164,105,212,105,185,105,202,105,154,105,207,105,179,105,147,105,170,105,161,105,158,105,217,105,151,105,144,105,194,105,181,105,165,105,198,105,74,107,77,107,75,107,158,107,159,107,160,107,195,107,196,107,254,107,206,110,245,110,241,110,3,111,37,111,248,110,55,111,251,110,46,111,9,111,78,111,25,111,26,111,39,111,24,111,59,111,18,111,237,110,10,111,54,111,115,111,249,110,238,110,45,111,64,111,48,111,60,111,53,111,235,110,7,111,14,111,67,111,5,111,253,110,246,110,57,111,28,111,252,110,58,111,31,111,13,111,30,111,8,111,33,111,135,113,144,113,137,113,128,113,133,113,130,113,143,113,123,113,134,113,129,113,151,113,68,114,83,114,151,114,149,114,147,114,67,115,77,115,81,115,76,115,98,116,115,116,113,116,117,116,114,116,103,116,110,116,0,117,2,117,3,117,125,117,144,117,22,118,8,118,12,118,21,118,17,118,10,118,20,118,184,118,129,119,124,119,133,119,130,119,110,119,128,119,111,119,126,119,131,119,178,120,170,120,180,120,173,120,168,120,126,120,171,120,158,120,165,120,160,120,172,120,162,120,164,120,152,121,138,121,139,121,150,121,149,121,148,121,147,121,151,121,136,121,146,121,144,121,43,122,74,122,48,122,47,122,40,122,38,122,168,122,171,122,172,122,238,122,136,123,156,123,138,123,145,123,144,123,150,123,141,123,140,123,155,123,142,123,133,123,152,123,132,82,153,123,164,123,130,123,187,124,191,124,188,124,186,124,167,125,183,125,194,125,163,125,170,125,193,125,192,125,197,125,157,125,206,125,196,125,198,125,203,125,204,125,175,125,185,125,150,125,188,125,159,125,166,125,174,125,169,125,161,125,201,125,115,127,226,127,227,127,229,127,222,127,36,128,93,128,92,128,137,129,134,129,131,129,135,129,141,129,140,129,139,129,21,130,151,132,164,132,161,132,159,132,186,132,206,132,194,132,172,132,174,132,171,132,185,132,180,132,193,132,205,132,170,132,154,132,177,132,208,132,157,132,167,132,187,132,162,132,148,132,199,132,204,132,155,132,169,132,175,132,168,132,214,132,152,132,182,132,207,132,160,132,215,132,212,132,210,132,219,132,176,132,145,132,97,134,51,135,35,135,40,135,107,135,64,135,46,135,30,135,33,135,25,135,27,135,67,135,44,135,65,135,62,135,70,135,32,135,50,135,42,135,45,135,60,135,18,135,58,135,49,135,53,135,66,135], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+110106);
/* memory initializer */ allocate([38,135,39,135,56,135,36,135,26,135,48,135,17,135,247,136,231,136,241,136,242,136,250,136,254,136,238,136,252,136,246,136,251,136,240,136,236,136,235,136,157,137,161,137,159,137,158,137,233,137,235,137,232,137,171,138,153,138,139,138,146,138,143,138,150,138,61,140,104,140,105,140,213,140,207,140,215,140,150,141,9,142,2,142,255,141,13,142,253,141,10,142,3,142,7,142,6,142,5,142,254,141,0,142,4,142,16,143,17,143,14,143,13,143,35,145,28,145,32,145,34,145,31,145,29,145,26,145,36,145,33,145,27,145,122,145,114,145,121,145,115,145,165,146,164,146,118,146,155,146,122,146,160,146,148,146,170,146,141,146,166,146,154,146,171,146,121,146,151,146,127,146,163,146,238,146,142,146,130,146,149,146,162,146,125,146,136,146,161,146,138,146,134,146,140,146,153,146,167,146,126,146,135,146,169,146,157,146,139,146,45,146,158,150,161,150,255,150,88,151,125,151,122,151,126,151,131,151,128,151,130,151,123,151,132,151,129,151,127,151,206,151,205,151,22,152,173,152,174,152,2,153,0,153,7,153,157,153,156,153,195,153,185,153,187,153,186,153,194,153,189,153,199,153,177,154,227,154,231,154,62,155,63,155,96,155,97,155,95,155,241,156,242,156,245,156,167,158,255,80,3,81,48,81,248,80,6,81,7,81,246,80,254,80,11,81,12,81,253,80,10,81,139,82,140,82,241,82,239,82,72,86,66,86,76,86,53,86,65,86,74,86,73,86,70,86,88,86,90,86,64,86,51,86,61,86,44,86,62,86,56,86,42,86,58,86,26,87,171,88,157,88,177,88,160,88,163,88,175,88,172,88,165,88,161,88,255,88,255,90,244,90,253,90,247,90,246,90,3,91,248,90,2,91,249,90,1,91,7,91,5,91,15,91,103,92,153,93,151,93,159,93,146,93,162,93,147,93,149,93,160,93,156,93,161,93,154,93,158,93,105,94,93,94,96,94,92,94,243,125,219,94,222,94,225,94,73,95,178,95,139,97,131,97,121,97,177,97,176,97,162,97,137,97,155,97,147,97,175,97,173,97,159,97,146,97,170,97,161,97,141,97,102,97,179,97,45,98,110,100,112,100,150,100,160,100,133,100,151,100,156,100,143,100,139,100,138,100,140,100,163,100,159,100,104,100,177,100,152,100,118,101,122,101,121,101,123,101,178,101,179,101,181,102,176,102,169,102,178,102,183,102,170,102,175,102,0,106,6,106,23,106,229,105,248,105,21,106,241,105,228,105,32,106,255,105,236,105,226,105,27,106,29,106,254,105,39,106,242,105,238,105,20,106,247,105,231,105,64,106,8,106,230,105,251,105,13,106,252,105,235,105,9,106,4,106,24,106,37,106,15,106,246,105,38,106,7,106,244,105,22,106,81,107,165,107,163,107,162,107,166,107,1,108,0,108,255,107,2,108,65,111,38,111,126,111,135,111,198,111,146,111,141,111,137,111,140,111,98,111,79,111,133,111,90,111,150,111,118,111,108,111,130,111,85,111,114,111,82,111,80,111,87,111,148,111,147,111,93,111,0,111,97,111,107,111,125,111,103,111,144,111,83,111,139,111,105,111,127,111,149,111,99,111,119,111,106,111,123,111,178,113,175,113,155,113,176,113,160,113,154,113,169,113,181,113,157,113,165,113,158,113,164,113,161,113,170,113,156,113,167,113,179,113,152,114,154,114,88,115,82,115,94,115,95,115,96,115,93,115,91,115,97,115,90,115,89,115,98,115,135,116,137,116,138,116,134,116,129,116,125,116,133,116,136,116,124,116,121,116,8,117,7,117,126,117,37,118,30,118,25,118,29,118,28,118,35,118,26,118,40,118,27,118,156,118,157,118,158,118,155,118,141,119,143,119,137,119,136,119,205,120,187,120,207,120,204,120,209,120,206,120,212,120,200,120,195,120,196,120,201,120,154,121,161,121,160,121,156,121,162,121,155,121,118,107,57,122,178,122,180,122,179,122,183,123,203,123,190,123,172,123,206,123,175,123,185,123,202,123,181,123,197,124,200,124,204,124,203,124,247,125,219,125,234,125,231,125,215,125,225,125,3,126,250,125,230,125,246,125,241,125,240,125,238,125,223,125,118,127,172,127,176,127,173,127,237,127,235,127,234,127,236,127,230,127,232,127,100,128,103,128,163,129,159,129,158,129,149,129,162,129,153,129,151,129,22,130,79,130,83,130,82,130,80,130,78,130,81,130,36,133,59,133,15,133,0,133,41,133,14,133,9,133,13,133,31,133,10,133,39,133,28,133,251,132,43,133,250,132,8,133,12,133,244,132,42,133,242,132,21,133,247,132,235,132,243,132,252,132,18,133,234,132,233,132,22,133,254,132,40,133,29,133,46,133,2,133,253,132,30,133,246,132,49,133,38,133,231,132,232,132,240,132,239,132,249,132,24,133,32,133,48,133,11,133,25,133,47,133,98,134,86,135,99,135,100,135,119,135,225,135,115,135,88,135,84,135,91,135,82,135,97,135,90,135,81,135,94,135,109,135,106,135,80,135,78,135,95,135,93,135,111,135,108,135,122,135,110,135,92,135,101,135,79,135,123,135,117,135,98,135,103,135,105,135,90,136,5,137,12,137,20,137,11,137,23,137,24,137,25,137,6,137,22,137,17,137,14,137,9,137,162,137,164,137,163,137,237,137,240,137,236,137,207,138,198,138,184,138,211,138,209,138,212,138,213,138,187,138,215,138,190,138,192,138,197,138,216,138,195,138,186,138,189,138,217,138,62,140,77,140,143,140,229,140,223,140,217,140,232,140,218,140,221,140,231,140,160,141,156,141,161,141,155,141,32,142,35,142,37,142,36,142,46,142,21,142,27,142,22,142,17,142,25,142,38,142,39,142,20,142,18,142,24,142,19,142,28,142,23,142,26,142,44,143,36,143,24,143,26,143,32,143,35,143,22,143,23,143,115,144,112,144,111,144,103,144,107,144,47,145,43,145,41,145,42,145,50,145,38,145,46,145,133,145,134,145,138,145,129,145,130,145,132,145,128,145,208,146,195,146,196,146,192,146,217,146,182,146,207,146,241,146,223,146,216,146,233,146,215,146,221,146,204,146,239,146,194,146,232,146,202,146,200,146,206,146,230,146,205,146,213,146,201,146,224,146,222,146,231,146,209,146,211,146,181,146,225,146,198,146,180,146,124,149,172,149,171,149,174,149,176,149,164,150,162,150,211,150,5,151,8,151,2,151,90,151,138,151,142,151,136,151,208,151,207,151,30,152,29,152,38,152,41,152,40,152,32,152,27,152,39,152,178,152,8,153,250,152,17,153,20,153,22,153,23,153,21,153,220,153,205,153,207,153,211,153,212,153,206,153,201,153,214,153,216,153,203,153,215,153,204,153,179,154,236,154,235,154,243,154,242,154,241,154,70,155,67,155,103,155,116,155,113,155,102,155,118,155,117,155,112,155,104,155,100,155,108,155,252,156,250,156,253,156,255,156,247,156,7,157,0,157,249,156,251,156,8,157,5,157,4,157,131,158,211,158,15,159,16,159,28,81,19,81,23,81,26,81,17,81,222,81,52,83,225,83,112,86,96,86,110,86,115,86,102,86,99,86,109,86,114,86,94,86,119,86,28,87,27,87,200,88,189,88,201,88,191,88,186,88,194,88,188,88,198,88,23,91,25,91,27,91,33,91,20,91,19,91,16,91,22,91,40,91,26,91,32,91,30,91,239,91,172,93,177,93,169,93,167,93,181,93,176,93,174,93,170,93,168,93,178,93,173,93,175,93,180,93,103,94,104,94,102,94,111,94,233,94,231,94,230,94,232,94,229,94,75,95,188,95,157,97,168,97,150,97,197,97,180,97,198,97,193,97,204,97,186,97,191,97,184,97,140,97,215,100,214,100,208,100,207,100,201,100,189,100,137,100,195,100,219,100,243,100,217,100,51,101,127,101,124,101,162,101,200,102,190,102,192,102,202,102,203,102,207,102,189,102,187,102,186,102,204,102,35,103,52,106,102,106,73,106,103,106,50,106,104,106,62,106,93,106,109,106,118,106,91,106,81,106,40,106,90,106,59,106,63,106,65,106,106,106,100,106,80,106,79,106,84,106,111,106,105,106,96,106,60,106,94,106,86,106,85,106,77,106,78,106,70,106,85,107,84,107,86,107,167,107,170,107,171,107,200,107,199,107,4,108,3,108,6,108,173,111,203,111,163,111,199,111,188,111,206,111,200,111,94,111,196,111,189,111,158,111,202,111,168,111,4,112,165,111,174,111,186,111,172,111,170,111,207,111,191,111,184,111,162,111,201,111,171,111,205,111,175,111,178,111,176,111,197,113,194,113,191,113,184,113,214,113,192,113,193,113,203,113,212,113,202,113,199,113,207,113,189,113,216,113,188,113,198,113,218,113,219,113,157,114,158,114,105,115,102,115,103,115,108,115,101,115,107,115,106,115,127,116,154,116,160,116,148,116,146,116,149,116,161,116,11,117,128,117,47,118,45,118,49,118,61,118,51,118,60,118,53,118,50,118,48,118,187,118,230,118,154,119,157,119,161,119,156,119,155,119,162,119,163,119,149,119,153,119,151,119,221,120,233,120,229,120,234,120,222,120,227,120,219,120,225,120,226,120,237,120,223,120,224,120,164,121,68,122,72,122,71,122,182,122,184,122,181,122,177,122,183,122,222,123,227,123,231,123,221,123,213,123,229,123,218,123,232,123,249,123,212,123,234,123,226,123,220,123,235,123,216,123,223,123,210,124,212,124,215,124,208,124,209,124,18,126,33,126,23,126,12,126,31,126,32,126,19,126,14,126,28,126,21,126,26,126,34,126,11,126,15,126,22,126,13,126,20,126,37,126,36,126,67,127,123,127,124,127,122,127,177,127,239,127,42,128,41,128,108,128,177,129,166,129,174,129,185,129,181,129,171,129,176,129,172,129,180,129,178,129,183,129,167,129,242,129,85,130,86,130,87,130,86,133,69,133,107,133,77,133,83,133,97,133,88,133,64,133,70,133,100,133,65,133,98,133,68,133,81,133,71,133,99,133,62,133,91,133,113,133,78,133,110,133,117,133,85,133,103,133,96,133,140,133,102,133,93,133,84,133,101,133,108,133,99,134,101,134,100,134,155,135,143,135,151,135,147,135,146,135,136,135,129,135,150,135,152,135,121,135,135,135,163,135,133,135,144,135,145,135,157,135,132,135,148,135,156,135,154,135,137,135,30,137,38,137,48,137,45,137,46,137,39,137,49,137,34,137,41,137,35,137,47,137,44,137,31,137,241,137,224,138,226,138,242,138,244,138,245,138,221,138,20,139,228,138,223,138,240,138,200,138,222,138,225,138,232,138,255,138,239,138,251,138,145,140,146,140,144,140,245,140,238,140,241,140,240,140,243,140,108,141,110,141,165,141,167,141,51,142,62,142,56,142,64,142,69,142,54,142,60,142,61,142,65,142,48,142,63,142,189,142,54,143,46,143,53,143,50,143,57,143,55,143,52,143,118,144,121,144,123,144,134,144,250,144,51,145,53,145,54,145,147,145,144,145,145,145,141,145,143,145,39,147,30,147,8,147,31,147,6,147,15,147,122,147,56,147,60,147,27,147,35,147,18,147,1,147,70,147,45,147,14,147,13,147,203,146,29,147,250,146,37,147,19,147,249,146,247,146,52,147,2,147,36,147,255,146,41,147,57,147,53,147,42,147,20,147,12,147,11,147,254,146,9,147,0,147,251,146,22,147,188,149,205,149,190,149,185,149,186,149,182,149,191,149,181,149,189,149,169,150,212,150,11,151,18,151,16,151,153,151,151,151,148,151,240,151,248,151,53,152,47,152,50,152,36,153,31,153,39,153,41,153,158,153,238,153,236,153,229,153,228,153,240,153,227,153,234,153,233,153,231,153,185,154,191,154,180,154,187,154,246,154,250,154,249,154,247,154,51,155,128,155,133,155,135,155,124,155,126,155,123,155,130,155,147,155,146,155,144,155,122,155,149,155,125,155,136,155,37,157,23,157,32,157,30,157,20,157,41,157,29,157,24,157,34,157,16,157,25,157,31,157,136,158,134,158,135,158,174,158,173,158,213,158,214,158,250,158,18,159,61,159,38,81,37,81,34,81,36,81,32,81,41,81,244,82,147,86,140,86,141,86,134,86,132,86,131,86,126,86,130,86,127,86,129,86,214,88,212,88,207,88,210,88,45,91,37,91,50,91,35,91,44,91,39,91,38,91,47,91,46,91,123,91,241,91,242,91,183,93,108,94,106,94,190,95,187,95,195,97,181,97,188,97,231,97,224,97,229,97,228,97,232,97,222,97,239,100,233,100,227,100,235,100,228,100,232,100,129,101,128,101,182,101,218,101,210,102,141,106,150,106,129,106,165,106,137,106,159,106,155,106,161,106,158,106,135,106,147,106,142,106,149,106,131,106,168,106,164,106,145,106,127,106,166,106,154,106,133,106,140,106,146,106,91,107,173,107,9,108,204,111,169,111,244,111,212,111,227,111,220,111,237,111,231,111,230,111,222,111,242,111,221,111,226,111,232,111,225,113,241,113,232,113,242,113,228,113,240,113,226,113,115,115,110,115,111,115,151,116,178,116,171,116,144,116,170,116,173,116,177,116,165,116,175,116,16,117,17,117,18,117,15,117,132,117,67,118,72,118,73,118,71,118,164,118,233,118,181,119,171,119,178,119,183,119,182,119,180,119,177,119,168,119,240,119,243,120,253,120,2,121,251,120,252,120,242,120,5,121,249,120,254,120,4,121,171,121,168,121,92,122,91,122,86,122,88,122,84,122,90,122,190,122,192,122,193,122,5,124,15,124,242,123,0,124,255,123,251,123,14,124,244,123,11,124,243,123,2,124,9,124,3,124,1,124,248,123,253,123,6,124,240,123,241,123,16,124,10,124,232,124,45,126,60,126,66,126,51,126,72,152,56,126,42,126,73,126,64,126,71,126,41,126,76,126,48,126,59,126,54,126,68,126,58,126,69,127,127,127,126,127,125,127,244,127,242,127,44,128,187,129,196,129,204,129,202,129,197,129,199,129,188,129,233,129,91,130,90,130,92,130,131,133,128,133,143,133,167,133,149,133,160,133,139,133,163,133,123,133,164,133,154,133,158,133,119,133,124,133,137,133,161,133,122,133,120,133,87,133,142,133,150,133,134,133,141,133,153,133,157,133,129,133,162,133,130,133,136,133,133,133,121,133,118,133,152,133,144,133,159,133,104,134,190,135,170,135,173,135,197,135,176,135,172,135,185,135,181,135,188,135,174,135,201,135,195,135,194,135,204,135,183,135,175,135,196,135,202,135,180,135,182,135,191,135,184,135,189,135,222,135,178,135,53,137,51,137,60,137,62,137,65,137,82,137,55,137,66,137,173,137,175,137,174,137,242,137,243,137,30,139,24,139,22,139,17,139,5,139,11,139,34,139,15,139,18,139,21,139,7,139,13,139,8,139,6,139,28,139,19,139,26,139,79,140,112,140,114,140,113,140,111,140,149,140,148,140,249,140,111,141,78,142,77,142,83,142,80,142,76,142,71,142,67,143,64,143,133,144,126,144,56,145,154,145,162,145,155,145,153,145,159,145,161,145,157,145,160,145,161,147,131,147,175,147,100,147,86,147,71,147,124,147,88,147,92,147,118,147,73,147,80,147,81,147,96,147,109,147,143,147,76,147,106,147,121,147,87,147,85,147,82,147,79,147,113,147,119,147,123,147,97,147,94,147,99,147,103,147,128,147,78,147,89,147,199,149,192,149,201,149,195,149,197,149,183,149,174,150,176,150,172,150,32,151,31,151,24,151,29,151,25,151,154,151,161,151,156,151,158,151,157,151,213,151,212,151,241,151,65,152,68,152,74,152,73,152,69,152,67,152,37,153,43,153,44,153,42,153,51,153,50,153,47,153,45,153,49,153,48,153,152,153,163,153,161,153,2,154,250,153,244,153,247,153,249,153,248,153,246,153,251,153,253,153,254,153,252,153,3,154,190,154,254,154,253,154,1,155,252,154,72,155,154,155,168,155,158,155,155,155,166,155,161,155,165,155,164,155,134,155,162,155,160,155,175,155,51,157,65,157,103,157,54,157,46,157,47,157,49,157,56,157,48,157,69,157,66,157,67,157,62,157,55,157,64,157,61,157,245,127,45,157,138,158,137,158,141,158,176,158,200,158,218,158,251,158,255,158,36,159,35,159,34,159,84,159,160,159,49,81,45,81,46,81,152,86,156,86,151,86,154,86,157,86,153,86,112,89,60,91,105,92,106,92,192,93,109,94,110,94,216,97,223,97,237,97,238,97,241,97,234,97,240,97,235,97,214,97,233,97,255,100,4,101,253,100,248,100,1,101,3,101,252,100,148,101,219,101,218,102,219,102,216,102,197,106,185,106,189,106,225,106,198,106,186,106,182,106,183,106,199,106,180,106,173,106,94,107,201,107,11,108,7,112,12,112,13,112,1,112,5,112,20,112,14,112,255,111,0,112,251,111,38,112,252,111,247,111,10,112,1,114,255,113,249,113,3,114,253,113,118,115,184,116,192,116,181,116,193,116,190,116,182,116,187,116,194,116,20,117,19,117,92,118,100,118,89,118,80,118,83,118,87,118,90,118,166,118,189,118,236,118,194,119,186,119,255,120,12,121,19,121,20,121,9,121,16,121,18,121,17,121,173,121,172,121,95,122,28,124,41,124,25,124,32,124,31,124,45,124,29,124,38,124,40,124,34,124,37,124,48,124,92,126,80,126,86,126,99,126,88,126,98,126,95,126,81,126,96,126,87,126,83,126,181,127,179,127,247,127,248,127,117,128,209,129,210,129,208,129,95,130,94,130,180,133,198,133,192,133,195,133,194,133,179,133,181,133,189,133,199,133,196,133,191,133,203,133,206,133,200,133,197,133,177,133,182,133,210,133,36,134,184,133,183,133,190,133,105,134,231,135,230,135,226,135,219,135,235,135,234,135,229,135,223,135,243,135,228,135,212,135,220,135,211,135,237,135,216,135,227,135,164,135,215,135,217,135,1,136,244,135,232,135,221,135,83,137,75,137,79,137,76,137,70,137,80,137,81,137,73,137,42,139,39,139,35,139,51,139,48,139,53,139,71,139,47,139,60,139,62,139,49,139,37,139,55,139,38,139,54,139,46,139,36,139,59,139,61,139,58,139,66,140,117,140,153,140,152,140,151,140,254,140,4,141,2,141,0,141,92,142,98,142,96,142,87,142,86,142,94,142,101,142,103,142,91,142,90,142,97,142,93,142,105,142,84,142,70,143,71,143,72,143,75,143,40,145,58,145,59,145,62,145,168,145,165,145,167,145,175,145,170,145,181,147,140,147,146,147,183,147,155,147,157,147,137,147,167,147,142,147,170,147,158,147,166,147,149,147,136,147,153,147,159,147,141,147,177,147,145,147,178,147,164,147,168,147,180,147,163,147,165,147,210,149,211,149,209,149,179,150,215,150,218,150,194,93,223,150,216,150,221,150,35,151,34,151,37,151,172,151,174,151,168,151,171,151,164,151,170,151,162,151,165,151,215,151,217,151,214,151,216,151,250,151,80,152,81,152,82,152,184,152,65,153,60,153,58,153,15,154,11,154,9,154,13,154,4,154,17,154,10,154,5,154,7,154,6,154,192,154,220,154,8,155,4,155,5,155,41,155,53,155,74,155,76,155,75,155,199,155,198,155,195,155,191,155,193,155,181,155,184,155,211,155,182,155,196,155,185,155,189,155,92,157,83,157,79,157,74,157,91,157,75,157,89,157,86,157,76,157,87,157,82,157,84,157,95,157,88,157,90,157,142,158,140,158,223,158,1,159,0,159,22,159,37,159,43,159,42,159,41,159,40,159,76,159,85,159,52,81,53,81,150,82,247,82,180,83,171,86,173,86,166,86,167,86,170,86,172,86,218,88,221,88,219,88,18,89,61,91,62,91,63,91,195,93,112,94,191,95,251,97,7,101,16,101,13,101,9,101,12,101,14,101,132,101,222,101,221,101,222,102,231,106,224,106,204,106,209,106,217,106,203,106,223,106,220,106,208,106,235,106,207,106,205,106,222,106,96,107,176,107,12,108,25,112,39,112,32,112,22,112,43,112,33,112,34,112,35,112,41,112,23,112,36,112,28,112,42,112,12,114,10,114,7,114,2,114,5,114,165,114,166,114,164,114,163,114,161,114,203,116,197,116,183,116,195,116,22,117,96,118,201,119,202,119,196,119,241,119,29,121,27,121,33,121,28,121,23,121,30,121,176,121,103,122,104,122,51,124,60,124,57,124,44,124,59,124,236,124,234,124,118,126,117,126,120,126,112,126,119,126,111,126,122,126,114,126,116,126,104,126,75,127,74,127,131,127,134,127,183,127,253,127,254,127,120,128,215,129,213,129,100,130,97,130,99,130,235,133,241,133,237,133,217,133,225,133,232,133,218,133,215,133,236,133,242,133,248,133,216,133,223,133,227,133,220,133,209,133,240,133,230,133,239,133,222,133,226,133,0,136,250,135,3,136,246,135,247,135,9,136,12,136,11,136,6,136,252,135,8,136,255,135,10,136,2,136,98,137,90,137,91,137,87,137,97,137,92,137,88,137,93,137,89,137,136,137,183,137,182,137,246,137,80,139,72,139,74,139,64,139,83,139,86,139,84,139,75,139,85,139,81,139,66,139,82,139,87,139,67,140,119,140,118,140,154,140,6,141,7,141,9,141,172,141,170,141,173,141,171,141,109,142,120,142,115,142,106,142,111,142,123,142,194,142,82,143,81,143,79,143,80,143,83,143,180,143,64,145,63,145,176,145,173,145,222,147,199,147,207,147,194,147,218,147,208,147,249,147,236,147,204,147,217,147,169,147,230,147,202,147,212,147,238,147,227,147,213,147,196,147,206,147,192,147,210,147,231,147,125,149,218,149,219,149,225,150,41,151,43,151,44,151,40,151,38,151,179,151,183,151,182,151,221,151,222,151,223,151,92,152,89,152,93,152,87,152,191,152,189,152,187,152,190,152,72,153,71,153,67,153,166,153,167,153,26,154,21,154,37,154,29,154,36,154,27,154,34,154,32,154,39,154,35,154,30,154,28,154,20,154,194,154,11,155,10,155,14,155,12,155,55,155,234,155,235,155,224,155,222,155,228,155,230,155,226,155,240,155,212,155,215,155,236,155,220,155,217,155,229,155,213,155,225,155,218,155,119,157,129,157,138,157,132,157,136,157,113,157,128,157,120,157,134,157,139,157,140,157,125,157,107,157,116,157,117,157,112,157,105,157,133,157,115,157,123,157,130,157,111,157,121,157,127,157,135,157,104,157,148,158,145,158,192,158,252,158,45,159,64,159,65,159,77,159,86,159,87,159,88,159,55,83,178,86,181,86,179,86,227,88,69,91,198,93,199,93,238,94,239,94,192,95,193,95,249,97,23,101,22,101,21,101,19,101,223,101,232,102,227,102,228,102,243,106,240,106,234,106,232,106,249,106,241,106,238,106,239,106,60,112,53,112,47,112,55,112,52,112,49,112,66,112,56,112,63,112,58,112,57,112,64,112,59,112,51,112,65,112,19,114,20,114,168,114,125,115,124,115,186,116,171,118,170,118,190,118,237,118,204,119,206,119,207,119,205,119,242,119,37,121,35,121,39,121,40,121,36,121,41,121,178,121,110,122,108,122,109,122,247,122,73,124,72,124,74,124,71,124,69,124,238,124,123,126,126,126,129,126,128,126,186,127,255,127,121,128,219,129,217,129,11,130,104,130,105,130,34,134,255,133,1,134,254,133,27,134,0,134,246,133,4,134,9,134,5,134,12,134,253,133,25,136,16,136,17,136,23,136,19,136,22,136,99,137,102,137,185,137,247,137,96,139,106,139,93,139,104,139,99,139,101,139,103,139,109,139,174,141,134,142,136,142,132,142,89,143,86,143,87,143,85,143,88,143,90,143,141,144,67,145,65,145,183,145,181,145,178,145,179,145,11,148,19,148,251,147,32,148,15,148,20,148,254,147,21,148,16,148,40,148,25,148,13,148,245,147,0,148,247,147,7,148,14,148,22,148,18,148,250,147,9,148,248,147,10,148,255,147,252,147,12,148,246,147,17,148,6,148,222,149,224,149,223,149,46,151,47,151,185,151,187,151,253,151,254,151,96,152,98,152,99,152,95,152,193,152,194,152,80,153,78,153,89,153,76,153,75,153,83,153,50,154,52,154,49,154,44,154,42,154,54,154,41,154,46,154,56,154,45,154,199,154,202,154,198,154,16,155,18,155,17,155,11,156,8,156,247,155,5,156,18,156,248,155,64,156,7,156,14,156,6,156,23,156,20,156,9,156,159,157,153,157,164,157,157,157,146,157,152,157,144,157,155,157,160,157,148,157,156,157,170,157,151,157,161,157,154,157,162,157,168,157,158,157,163,157,191,157,169,157,150,157,166,157,167,157,153,158,155,158,154,158,229,158,228,158,231,158,230,158,48,159,46,159,91,159,96,159,94,159,93,159,89,159,145,159,58,81,57,81,152,82,151,82,195,86,189,86,190,86,72,91,71,91,203,93,207,93,241,94,253,97,27,101,2,107,252,106,3,107,248,106,0,107,67,112,68,112,74,112,72,112,73,112,69,112,70,112,29,114,26,114,25,114,126,115,23,117,106,118,208,119,45,121,49,121,47,121,84,124,83,124,242,124,138,126,135,126,136,126,139,126,134,126,141,126,77,127,187,127,48,128,221,129,24,134,42,134,38,134,31,134,35,134,28,134,25,134,39,134,46,134,33,134,32,134,41,134,30,134,37,134,41,136,29,136,27,136,32,136,36,136,28,136,43,136,74,136,109,137,105,137,110,137,107,137,250,137,121,139,120,139,69,139,122,139,123,139,16,141,20,141,175,141,142,142,140,142,94,143,91,143,93,143,70,145,68,145,69,145,185,145,63,148,59,148,54,148,41,148,61,148,60,148,48,148,57,148,42,148,55,148,44,148,64,148,49,148,229,149,228,149,227,149,53,151,58,151,191,151,225,151,100,152,201,152,198,152,192,152,88,153,86,153,57,154,61,154,70,154,68,154,66,154,65,154,58,154,63,154,205,154,21,155,23,155,24,155,22,155,58,155,82,155,43,156,29,156,28,156,44,156,35,156,40,156,41,156,36,156,33,156,183,157,182,157,188,157,193,157,199,157,202,157,207,157,190,157,197,157,195,157,187,157,181,157,206,157,185,157,186,157,172,157,200,157,177,157,173,157,204,157,179,157,205,157,178,157,122,158,156,158,235,158,238,158,237,158,27,159,24,159,26,159,49,159,78,159,101,159,100,159,146,159,185,78,198,86,197,86,203,86,113,89,75,91,76,91,213,93,209,93,242,94,33,101,32,101,38,101,34,101,11,107,8,107,9,107,13,108,85,112,86,112,87,112,82,112,30,114,31,114,169,114,127,115,216,116,213,116,217,116,215,116,109,118,173,118,53,121,180,121,112,122,113,122,87,124,92,124,89,124,91,124,90,124,244,124,241,124,145,126,79,127,135,127,222,129,107,130,52,134,53,134,51,134,44,134,50,134,54,134,44,136,40,136,38,136,42,136,37,136,113,137,191,137,190,137,251,137,126,139,132,139,130,139,134,139,133,139,127,139,21,141,149,142,148,142,154,142,146,142,144,142,150,142,151,142,96,143,98,143,71,145,76,148,80,148,74,148,75,148,79,148,71,148,69,148,72,148,73,148,70,148,63,151,227,151,106,152,105,152,203,152,84,153,91,153,78,154,83,154,84,154,76,154,79,154,72,154,74,154,73,154,82,154,80,154,208,154,25,155,43,155,59,155,86,155,85,155,70,156,72,156,63,156,68,156,57,156,51,156,65,156,60,156,55,156,52,156,50,156,61,156,54,156,219,157,210,157,222,157,218,157,203,157,208,157,220,157,209,157,223,157,233,157,217,157,216,157,214,157,245,157,213,157,221,157,182,158,240,158,53,159,51,159,50,159,66,159,107,159,149,159,162,159,61,81,153,82,232,88,231,88,114,89,77,91,216,93,47,136,79,95,1,98,3,98,4,98,41,101,37,101,150,101,235,102,17,107,18,107,15,107,202,107,91,112,90,112,34,114,130,115,129,115,131,115,112,118,212,119,103,124,102,124,149,126,108,130,58,134,64,134,57,134,60,134,49,134,59,134,62,134,48,136,50,136,46,136,51,136,118,137,116,137,115,137,254,137,140,139,142,139,139,139,136,139,69,140,25,141,152,142,100,143,99,143,188,145,98,148,85,148,93,148,87,148,94,148,196,151,197,151,0,152,86,154,89,154,30,155,31,155,32,155,82,156,88,156,80,156,74,156,77,156,75,156,85,156,89,156,76,156,78,156,251,157,247,157,239,157,227,157,235,157,248,157,228,157,246,157,225,157,238,157,230,157,242,157,240,157,226,157,236,157,244,157,243,157,232,157,237,157,194,158,208,158,242,158,243,158,6,159,28,159,56,159,55,159,54,159,67,159,79,159,113,159,112,159,110,159,111,159,211,86,205,86,78,91,109,92,45,101,237,102,238,102,19,107,95,112,97,112,93,112,96,112,35,114,219,116,229,116,213,119,56,121,183,121,182,121,106,124,151,126,137,127,109,130,67,134,56,136,55,136,53,136,75,136,148,139,149,139,158,142,159,142,160,142,157,142,190,145,189,145,194,145,107,148,104,148,105,148,229,150,70,151,67,151,71,151,199,151,229,151,94,154,213,154,89,155,99,156,103,156,102,156,98,156,94,156,96,156,2,158,254,157,7,158,3,158,6,158,5,158,0,158,1,158,9,158,255,157,253,157,4,158,160,158,30,159,70,159,116,159,117,159,118,159,212,86,46,101,184,101,24,107,25,107,23,107,26,107,98,112,38,114,170,114,216,119,217,119,57,121,105,124,107,124,246,124,154,126,152,126,155,126,153,126,224,129,225,129,70,134,71,134,72,134,121,137,122,137,124,137,123,137,255,137,152,139,153,139,165,142,164,142,163,142,110,148,109,148,111,148,113,148,115,148,73,151,114,152,95,153,104,156,110,156,109,156,11,158,13,158,16,158,15,158,18,158,17,158,161,158,245,158,9,159,71,159,120,159,123,159,122,159,121,159,30,87,102,112,111,124,60,136,178,141,166,142,195,145,116,148,120,148,118,148,117,148,96,154,116,156,115,156,113,156,117,156,20,158,19,158,246,158,10,159,164,159,104,112,101,112,247,124,106,134,62,136,61,136,63,136,158,139,156,140,169,142,201,142,75,151,115,152,116,152,204,152,97,153,171,153,100,154,102,154,103,154,36,155,21,158,23,158,72,159,7,98,30,107,39,114,76,134,168,142,130,148,128,148,129,148,105,154,104,154,46,155,25,158,41,114,75,134,159,139,131,148,121,156,183,158,117,118,107,154,122,156,29,158,105,112,106,112,164,158,126,159,73,159,152,159,129,120,185,146,207,136,187,88,82,96,167,124,250,90,84,37,102,37,87,37,96,37,108,37,99,37,90,37,105,37,93,37,82,37,100,37,85,37,94,37,106,37,97,37,88,37,103,37,91,37,83,37,101,37,86,37,95,37,107,37,98,37,89,37,104,37,92,37,81,37,80,37,109,37,110,37,112,37,111,37,147,37,0,48,1,48,2,48,183,0,37,32,38,32,168,0,3,48,173,0,21,32,37,34,60,255,60,34,24,32,25,32,28,32,29,32,20,48,21,48,8,48,9,48,10,48,11,48,12,48,13,48,14,48,15,48,16,48,17,48,177,0,215,0,247,0,96,34,100,34,101,34,30,34,52,34,176,0,50,32,51,32,3,33,43,33,224,255,225,255,229,255,66,38,64,38,32,34,165,34,18,35,2,34,7,34,97,34,82,34,167,0,59,32,6,38,5,38,203,37,207,37,206,37,199,37,198,37,161,37,160,37,179,37,178,37,189,37,188,37,146,33,144,33,145,33,147,33,148,33,19,48,106,34,107,34,26,34,61,34,29,34,53,34,43,34,44,34,8,34,11,34,134,34,135,34,130,34,131,34,42,34,41,34,39,34,40,34,226,255,210,33,212,33,0,34,3,34,180,0,94,255,199,2,216,2,221,2,218,2,217,2,184,0,219,2,161,0,191,0,208,2,46,34,17,34,15,34,164,0,9,33,48,32,193,37,192,37,183,37,182,37,100,38,96,38,97,38,101,38,103,38,99,38,153,34,200,37,163,37,208,37,209,37,146,37,164,37,165,37,168,37,167,37,166,37,169,37,104,38,15,38,14,38,28,38,30,38,182,0,32,32,33,32,149,33,151,33,153,33,150,33,152,33,109,38,105,38,106,38,108,38,127,50,28,50,22,33,199,51,34,33,194,51,216,51,33,33,172,32,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,255,2,255,3,255,4,255,5,255,6,255,7,255,8,255,9,255,10,255,11,255,12,255,13,255,14,255,15,255,16,255,17,255,18,255,19,255,20,255,21,255,22,255,23,255,24,255,25,255,26,255,27,255,28,255,29,255,30,255,31,255,32,255,33,255,34,255,35,255,36,255,37,255,38,255,39,255,40,255,41,255,42,255,43,255,44,255,45,255,46,255,47,255,48,255,49,255,50,255,51,255,52,255,53,255,54,255,55,255,56,255,57,255,58,255,59,255,230,255,61,255,62,255,63,255,64,255,65,255,66,255,67,255,68,255,69,255,70,255,71,255,72,255,73,255,74,255,75,255,76,255,77,255,78,255,79,255,80,255,81,255,82,255,83,255,84,255,85,255,86,255,87,255,88,255,89,255,90,255,91,255,92,255,93,255,227,255,49,49,50,49,51,49,52,49,53,49,54,49,55,49,56,49,57,49,58,49,59,49,60,49,61,49,62,49,63,49,64,49,65,49,66,49,67,49,68,49,69,49,70,49,71,49,72,49,73,49,74,49,75,49,76,49,77,49,78,49,79,49,80,49,81,49,82,49,83,49,84,49,85,49,86,49,87,49,88,49,89,49,90,49,91,49,92,49,93,49,94,49,95,49,96,49,97,49,98,49,99,49,100,49,101,49,102,49,103,49,104,49,105,49,106,49,107,49,108,49,109,49,110,49,111,49,112,49,113,49,114,49,115,49,116,49,117,49,118,49,119,49,120,49,121,49,122,49,123,49,124,49,125,49,126,49,127,49,128,49,129,49,130,49,131,49,132,49,133,49,134,49,135,49,136,49,137,49,138,49,139,49,140,49,141,49,142,49,112,33,113,33,114,33,115,33,116,33,117,33,118,33,119,33,120,33,121,33,0,0,0,0,0,0,0,0,0,0,96,33,97,33,98,33,99,33,100,33,101,33,102,33,103,33,104,33,105,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,0,0,0,0,0,0,0,0,0,0,0,0,0,37,2,37,12,37,16,37,24,37,20,37,28,37,44,37,36,37,52,37,60,37,1,37,3,37,15,37,19,37,27,37,23,37,35,37,51,37,43,37,59,37,75,37,32,37,47,37,40,37,55,37,63,37,29,37,48,37,37,37,56,37,66,37,18,37,17,37,26,37,25,37,22,37,21,37,14,37,13,37,30,37,31,37,33,37,34,37,38,37,39,37,41,37,42,37,45,37,46,37,49,37,50,37,53,37,54,37,57,37,58,37,61,37,62,37,64,37,65,37,67,37,68,37,69,37,70,37,71,37,72,37,73,37,74,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,51,150,51,151,51,19,33,152,51,196,51,163,51,164,51,165,51,166,51,153,51,154,51,155,51,156,51,157,51,158,51,159,51,160,51,161,51,162,51,202,51,141,51,142,51,143,51,207,51,136,51,137,51,200,51,167,51,168,51,176,51,177,51,178,51,179,51,180,51,181,51,182,51,183,51,184,51,185,51,128,51,129,51,130,51,131,51,132,51,186,51,187,51,188,51,189,51,190,51,191,51,144,51,145,51,146,51,147,51,148,51,38,33,192,51,193,51,138,51,139,51,140,51,214,51,197,51,173,51,174,51,175,51,219,51,169,51,170,51,171,51,172,51,221,51,208,51,211,51,195,51,201,51,220,51,198,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,0,208,0,170,0,38,1,0,0,50,1,0,0,63,1,65,1,216,0,82,1,186,0,222,0,102,1,74,1,0,0,96,50,97,50,98,50,99,50,100,50,101,50,102,50,103,50,104,50,105,50,106,50,107,50,108,50,109,50,110,50,111,50,112,50,113,50,114,50,115,50,116,50,117,50,118,50,119,50,120,50,121,50,122,50,123,50,208,36,209,36,210,36,211,36,212,36,213,36,214,36,215,36,216,36,217,36,218,36,219,36,220,36,221,36,222,36,223,36,224,36,225,36,226,36,227,36,228,36,229,36,230,36,231,36,232,36,233,36,96,36,97,36,98,36,99,36,100,36,101,36,102,36,103,36,104,36,105,36,106,36,107,36,108,36,109,36,110,36,189,0,83,33,84,33,188,0,190,0,91,33,92,33,93,33,94,33,230,0,17,1,240,0,39,1,49,1,51,1,56,1,64,1,66,1,248,0,83,1,223,0,254,0,103,1,75,1,73,1,0,50,1,50,2,50,3,50,4,50,5,50,6,50,7,50,8,50,9,50,10,50,11,50,12,50,13,50,14,50,15,50,16,50,17,50,18,50,19,50,20,50,21,50,22,50,23,50,24,50,25,50,26,50,27,50,156,36,157,36,158,36,159,36,160,36,161,36,162,36,163,36,164,36,165,36,166,36,167,36,168,36,169,36,170,36,171,36,172,36,173,36,174,36,175,36,176,36,177,36,178,36,179,36,180,36,181,36,116,36,117,36,118,36,119,36,120,36,121,36,122,36,123,36,124,36,125,36,126,36,127,36,128,36,129,36,130,36,185,0,178,0,179,0,116,32,127,32,129,32,130,32,131,32,132,32,65,48,66,48,67,48,68,48,69,48,70,48,71,48,72,48,73,48,74,48,75,48,76,48,77,48,78,48,79,48,80,48,81,48,82,48,83,48,84,48,85,48,86,48,87,48,88,48,89,48,90,48,91,48,92,48,93,48,94,48,95,48,96,48,97,48,98,48,99,48,100,48,101,48,102,48,103,48,104,48,105,48,106,48,107,48,108,48,109,48,110,48,111,48,112,48,113,48,114,48,115,48,116,48,117,48,118,48,119,48,120,48,121,48,122,48,123,48,124,48,125,48,126,48,127,48,128,48,129,48,130,48,131,48,132,48,133,48,134,48,135,48,136,48,137,48,138,48,139,48,140,48,141,48,142,48,143,48,144,48,145,48,146,48,147,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,48,162,48,163,48,164,48,165,48,166,48,167,48,168,48,169,48,170,48,171,48,172,48,173,48,174,48,175,48,176,48,177,48,178,48,179,48,180,48,181,48,182,48,183,48,184,48,185,48,186,48,187,48,188,48,189,48,190,48,191,48,192,48,193,48,194,48,195,48,196,48,197,48,198,48,199,48,200,48,201,48,202,48,203,48,204,48,205,48,206,48,207,48,208,48,209,48,210,48,211,48,212,48,213,48,214,48,215,48,216,48,217,48,218,48,219,48,220,48,221,48,222,48,223,48,224,48,225,48,226,48,227,48,228,48,229,48,230,48,231,48,232,48,233,48,234,48,235,48,236,48,237,48,238,48,239,48,240,48,241,48,242,48,243,48,244,48,245,48,246,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,4,17,4,18,4,19,4,20,4,21,4,1,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,4,49,4,50,4,51,4,52,4,53,4,81,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,1,172,4,172,7,172,8,172,9,172,10,172,16,172,17,172,18,172,19,172,20,172,21,172,22,172,23,172,25,172,26,172,27,172,28,172,29,172,32,172,36,172,44,172,45,172,47,172,48,172,49,172,56,172,57,172,60,172,64,172,75,172,77,172,84,172,88,172,92,172,112,172,113,172,116,172,119,172,120,172,122,172,128,172,129,172,131,172,132,172,133,172,134,172,137,172,138,172,139,172,140,172,144,172,148,172,156,172,157,172,159,172,160,172,161,172,168,172,169,172,170,172,172,172,175,172,176,172,184,172,185,172,187,172,188,172,189,172,193,172,196,172,200,172,204,172,213,172,215,172,224,172,225,172,228,172,231,172,232,172,234,172,236,172,239,172,240,172,241,172,243,172,245,172,246,172,252,172,253,172,0,173,4,173,6,173,12,173,13,173,15,173,17,173,24,173,28,173,32,173,41,173,44,173,45,173,52,173,53,173,56,173,60,173,68,173,69,173,71,173,73,173,80,173,84,173,88,173,97,173,99,173,108,173,109,173,112,173,115,173,116,173,117,173,118,173,123,173,124,173,125,173,127,173,129,173,130,173,136,173,137,173,140,173,144,173,156,173,157,173,164,173,183,173,192,173,193,173,196,173,200,173,208,173,209,173,211,173,220,173,224,173,228,173,248,173,249,173,252,173,255,173,0,174,1,174,8,174,9,174,11,174,13,174,20,174,48,174,49,174,52,174,55,174,56,174,58,174,64,174,65,174,67,174,69,174,70,174,74,174,76,174,77,174,78,174,80,174,84,174,86,174,92,174,93,174,95,174,96,174,97,174,101,174,104,174,105,174,108,174,112,174,120,174,121,174,123,174,124,174,125,174,132,174,133,174,140,174,188,174,189,174,190,174,192,174,196,174,204,174,205,174,207,174,208,174,209,174,216,174,217,174,220,174,232,174,235,174,237,174,244,174,248,174,252,174,7,175,8,175,13,175,16,175,44,175,45,175,48,175,50,175,52,175,60,175,61,175,63,175,65,175,66,175,67,175,72,175,73,175,80,175,92,175,93,175,100,175,101,175,121,175,128,175,132,175], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+120346);
/* memory initializer */ allocate([136,175,144,175,145,175,149,175,156,175,184,175,185,175,188,175,192,175,199,175,200,175,201,175,203,175,205,175,206,175,212,175,220,175,232,175,233,175,240,175,241,175,244,175,248,175,0,176,1,176,4,176,12,176,16,176,20,176,28,176,29,176,40,176,68,176,69,176,72,176,74,176,76,176,78,176,83,176,84,176,85,176,87,176,89,176,93,176,124,176,125,176,128,176,132,176,140,176,141,176,143,176,145,176,152,176,153,176,154,176,156,176,159,176,160,176,161,176,162,176,168,176,169,176,171,176,172,176,173,176,174,176,175,176,177,176,179,176,180,176,181,176,184,176,188,176,196,176,197,176,199,176,200,176,201,176,208,176,209,176,212,176,216,176,224,176,229,176,8,177,9,177,11,177,12,177,16,177,18,177,19,177,24,177,25,177,27,177,28,177,29,177,35,177,36,177,37,177,40,177,44,177,52,177,53,177,55,177,56,177,57,177,64,177,65,177,68,177,72,177,80,177,81,177,84,177,85,177,88,177,92,177,96,177,120,177,121,177,124,177,128,177,130,177,136,177,137,177,139,177,141,177,146,177,147,177,148,177,152,177,156,177,168,177,204,177,208,177,212,177,220,177,221,177,223,177,232,177,233,177,236,177,240,177,249,177,251,177,253,177,4,178,5,178,8,178,11,178,12,178,20,178,21,178,23,178,25,178,32,178,52,178,60,178,88,178,92,178,96,178,104,178,105,178,116,178,117,178,124,178,132,178,133,178,137,178,144,178,145,178,148,178,152,178,153,178,154,178,160,178,161,178,163,178,165,178,166,178,170,178,172,178,176,178,180,178,200,178,201,178,204,178,208,178,210,178,216,178,217,178,219,178,221,178,226,178,228,178,229,178,230,178,232,178,235,178,236,178,237,178,238,178,239,178,243,178,244,178,245,178,247,178,248,178,249,178,250,178,251,178,255,178,0,179,1,179,4,179,8,179,16,179,17,179,19,179,20,179,21,179,28,179,84,179,85,179,86,179,88,179,91,179,92,179,94,179,95,179,100,179,101,179,103,179,105,179,107,179,110,179,112,179,113,179,116,179,120,179,128,179,129,179,131,179,132,179,133,179,140,179,144,179,148,179,160,179,161,179,168,179,172,179,196,179,197,179,200,179,203,179,204,179,206,179,208,179,212,179,213,179,215,179,217,179,219,179,221,179,224,179,228,179,232,179,252,179,16,180,24,180,28,180,32,180,40,180,41,180,43,180,52,180,80,180,81,180,84,180,88,180,96,180,97,180,99,180,101,180,108,180,128,180,136,180,157,180,164,180,168,180,172,180,181,180,183,180,185,180,192,180,196,180,200,180,208,180,213,180,220,180,221,180,224,180,227,180,228,180,230,180,236,180,237,180,239,180,241,180,248,180,20,181,21,181,24,181,27,181,28,181,36,181,37,181,39,181,40,181,41,181,42,181,48,181,49,181,52,181,56,181,64,181,65,181,67,181,68,181,69,181,75,181,76,181,77,181,80,181,84,181,92,181,93,181,95,181,96,181,97,181,160,181,161,181,164,181,168,181,170,181,171,181,176,181,177,181,179,181,180,181,181,181,187,181,188,181,189,181,192,181,196,181,204,181,205,181,207,181,208,181,209,181,216,181,236,181,16,182,17,182,20,182,24,182,37,182,44,182,52,182,72,182,100,182,104,182,156,182,157,182,160,182,164,182,171,182,172,182,177,182,212,182,240,182,244,182,248,182,0,183,1,183,5,183,40,183,41,183,44,183,47,183,48,183,56,183,57,183,59,183,68,183,72,183,76,183,84,183,85,183,96,183,100,183,104,183,112,183,113,183,115,183,117,183,124,183,125,183,128,183,132,183,140,183,141,183,143,183,144,183,145,183,146,183,150,183,151,183,152,183,153,183,156,183,160,183,168,183,169,183,171,183,172,183,173,183,180,183,181,183,184,183,199,183,201,183,236,183,237,183,240,183,244,183,252,183,253,183,255,183,0,184,1,184,7,184,8,184,9,184,12,184,16,184,24,184,25,184,27,184,29,184,36,184,37,184,40,184,44,184,52,184,53,184,55,184,56,184,57,184,64,184,68,184,81,184,83,184,92,184,93,184,96,184,100,184,108,184,109,184,111,184,113,184,120,184,124,184,141,184,168,184,176,184,180,184,184,184,192,184,193,184,195,184,197,184,204,184,208,184,212,184,221,184,223,184,225,184,232,184,233,184,236,184,240,184,248,184,249,184,251,184,253,184,4,185,24,185,32,185,60,185,61,185,64,185,68,185,76,185,79,185,81,185,88,185,89,185,92,185,96,185,104,185,105,185,107,185,109,185,116,185,117,185,120,185,124,185,132,185,133,185,135,185,137,185,138,185,141,185,142,185,172,185,173,185,176,185,180,185,188,185,189,185,191,185,193,185,200,185,201,185,204,185,206,185,207,185,208,185,209,185,210,185,216,185,217,185,219,185,221,185,222,185,225,185,227,185,228,185,229,185,232,185,236,185,244,185,245,185,247,185,248,185,249,185,250,185,0,186,1,186,8,186,21,186,56,186,57,186,60,186,64,186,66,186,72,186,73,186,75,186,77,186,78,186,83,186,84,186,85,186,88,186,92,186,100,186,101,186,103,186,104,186,105,186,112,186,113,186,116,186,120,186,131,186,132,186,133,186,135,186,140,186,168,186,169,186,171,186,172,186,176,186,178,186,184,186,185,186,187,186,189,186,196,186,200,186,216,186,217,186,252,186,0,187,4,187,13,187,15,187,17,187,24,187,28,187,32,187,41,187,43,187,52,187,53,187,54,187,56,187,59,187,60,187,61,187,62,187,68,187,69,187,71,187,73,187,77,187,79,187,80,187,84,187,88,187,97,187,99,187,108,187,136,187,140,187,144,187,164,187,168,187,172,187,180,187,183,187,192,187,196,187,200,187,208,187,211,187,248,187,249,187,252,187,255,187,0,188,2,188,8,188,9,188,11,188,12,188,13,188,15,188,17,188,20,188,21,188,22,188,23,188,24,188,27,188,28,188,29,188,30,188,31,188,36,188,37,188,39,188,41,188,45,188,48,188,49,188,52,188,56,188,64,188,65,188,67,188,68,188,69,188,73,188,76,188,77,188,80,188,93,188,132,188,133,188,136,188,139,188,140,188,142,188,148,188,149,188,151,188,153,188,154,188,160,188,161,188,164,188,167,188,168,188,176,188,177,188,179,188,180,188,181,188,188,188,189,188,192,188,196,188,205,188,207,188,208,188,209,188,213,188,216,188,220,188,244,188,245,188,246,188,248,188,252,188,4,189,5,189,7,189,9,189,16,189,20,189,36,189,44,189,64,189,72,189,73,189,76,189,80,189,88,189,89,189,100,189,104,189,128,189,129,189,132,189,135,189,136,189,137,189,138,189,144,189,145,189,147,189,149,189,153,189,154,189,156,189,164,189,176,189,184,189,212,189,213,189,216,189,220,189,233,189,240,189,244,189,248,189,0,190,3,190,5,190,12,190,13,190,16,190,20,190,28,190,29,190,31,190,68,190,69,190,72,190,76,190,78,190,84,190,85,190,87,190,89,190,90,190,91,190,96,190,97,190,100,190,104,190,106,190,112,190,113,190,115,190,116,190,117,190,123,190,124,190,125,190,128,190,132,190,140,190,141,190,143,190,144,190,145,190,152,190,153,190,168,190,208,190,209,190,212,190,215,190,216,190,224,190,227,190,228,190,229,190,236,190,1,191,8,191,9,191,24,191,25,191,27,191,28,191,29,191,64,191,65,191,68,191,72,191,80,191,81,191,85,191,148,191,176,191,197,191,204,191,205,191,208,191,212,191,220,191,223,191,225,191,60,192,81,192,88,192,92,192,96,192,104,192,105,192,144,192,145,192,148,192,152,192,160,192,161,192,163,192,165,192,172,192,173,192,175,192,176,192,179,192,180,192,181,192,182,192,188,192,189,192,191,192,192,192,193,192,197,192,200,192,201,192,204,192,208,192,216,192,217,192,219,192,220,192,221,192,228,192,229,192,232,192,236,192,244,192,245,192,247,192,249,192,0,193,4,193,8,193,16,193,21,193,28,193,29,193,30,193,31,193,32,193,35,193,36,193,38,193,39,193,44,193,45,193,47,193,48,193,49,193,54,193,56,193,57,193,60,193,64,193,72,193,73,193,75,193,76,193,77,193,84,193,85,193,88,193,92,193,100,193,101,193,103,193,104,193,105,193,112,193,116,193,120,193,133,193,140,193,141,193,142,193,144,193,148,193,150,193,156,193,157,193,159,193,161,193,165,193,168,193,169,193,172,193,176,193,189,193,196,193,200,193,204,193,212,193,215,193,216,193,224,193,228,193,232,193,240,193,241,193,243,193,252,193,253,193,0,194,4,194,12,194,13,194,15,194,17,194,24,194,25,194,28,194,31,194,32,194,40,194,41,194,43,194,45,194,47,194,49,194,50,194,52,194,72,194,80,194,81,194,84,194,88,194,96,194,101,194,108,194,109,194,112,194,116,194,124,194,125,194,127,194,129,194,136,194,137,194,144,194,152,194,155,194,157,194,164,194,165,194,168,194,172,194,173,194,180,194,181,194,183,194,185,194,220,194,221,194,224,194,227,194,228,194,235,194,236,194,237,194,239,194,241,194,246,194,248,194,249,194,251,194,252,194,0,195,8,195,9,195,12,195,13,195,19,195,20,195,21,195,24,195,28,195,36,195,37,195,40,195,41,195,69,195,104,195,105,195,108,195,112,195,114,195,120,195,121,195,124,195,125,195,132,195,136,195,140,195,192,195,216,195,217,195,220,195,223,195,224,195,226,195,232,195,233,195,237,195,244,195,245,195,248,195,8,196,16,196,36,196,44,196,48,196,52,196,60,196,61,196,72,196,100,196,101,196,104,196,108,196,116,196,117,196,121,196,128,196,148,196,156,196,184,196,188,196,233,196,240,196,241,196,244,196,248,196,250,196,255,196,0,197,1,197,12,197,16,197,20,197,28,197,40,197,41,197,44,197,48,197,56,197,57,197,59,197,61,197,68,197,69,197,72,197,73,197,74,197,76,197,77,197,78,197,83,197,84,197,85,197,87,197,88,197,89,197,93,197,94,197,96,197,97,197,100,197,104,197,112,197,113,197,115,197,116,197,117,197,124,197,125,197,128,197,132,197,135,197,140,197,141,197,143,197,145,197,149,197,151,197,152,197,156,197,160,197,169,197,180,197,181,197,184,197,185,197,187,197,188,197,189,197,190,197,196,197,197,197,198,197,199,197,200,197,201,197,202,197,204,197,206,197,208,197,209,197,212,197,216,197,224,197,225,197,227,197,229,197,236,197,237,197,238,197,240,197,244,197,246,197,247,197,252,197,253,197,254,197,255,197,0,198,1,198,5,198,6,198,7,198,8,198,12,198,16,198,24,198,25,198,27,198,28,198,36,198,37,198,40,198,44,198,45,198,46,198,48,198,51,198,52,198,53,198,55,198,57,198,59,198,64,198,65,198,68,198,72,198,80,198,81,198,83,198,84,198,85,198,92,198,93,198,96,198,108,198,111,198,113,198,120,198,121,198,124,198,128,198,136,198,137,198,139,198,141,198,148,198,149,198,152,198,156,198,164,198,165,198,167,198,169,198,176,198,177,198,180,198,184,198,185,198,186,198,192,198,193,198,195,198,197,198,204,198,205,198,208,198,212,198,220,198,221,198,224,198,225,198,232,198,233,198,236,198,240,198,248,198,249,198,253,198,4,199,5,199,8,199,12,199,20,199,21,199,23,199,25,199,32,199,33,199,36,199,40,199,48,199,49,199,51,199,53,199,55,199,60,199,61,199,64,199,68,199,74,199,76,199,77,199,79,199,81,199,82,199,83,199,84,199,85,199,86,199,87,199,88,199,92,199,96,199,104,199,107,199,116,199,117,199,120,199,124,199,125,199,126,199,131,199,132,199,133,199,135,199,136,199,137,199,138,199,142,199,144,199,145,199,148,199,150,199,151,199,152,199,154,199,160,199,161,199,163,199,164,199,165,199,166,199,172,199,173,199,176,199,180,199,188,199,189,199,191,199,192,199,193,199,200,199,201,199,204,199,206,199,208,199,216,199,221,199,228,199,232,199,236,199,0,200,1,200,4,200,8,200,10,200,16,200,17,200,19,200,21,200,22,200,28,200,29,200,32,200,36,200,44,200,45,200,47,200,49,200,56,200,60,200,64,200,72,200,73,200,76,200,77,200,84,200,112,200,113,200,116,200,120,200,122,200,128,200,129,200,131,200,133,200,134,200,135,200,139,200,140,200,141,200,148,200,157,200,159,200,161,200,168,200,188,200,189,200,196,200,200,200,204,200,212,200,213,200,215,200,217,200,224,200,225,200,228,200,245,200,252,200,253,200,0,201,4,201,5,201,6,201,12,201,13,201,15,201,17,201,24,201,44,201,52,201,80,201,81,201,84,201,88,201,96,201,97,201,99,201,108,201,112,201,116,201,124,201,136,201,137,201,140,201,144,201,152,201,153,201,155,201,157,201,192,201,193,201,196,201,199,201,200,201,202,201,208,201,209,201,211,201,213,201,214,201,217,201,218,201,220,201,221,201,224,201,226,201,228,201,231,201,236,201,237,201,239,201,240,201,241,201,248,201,249,201,252,201,0,202,8,202,9,202,11,202,12,202,13,202,20,202,24,202,41,202,76,202,77,202,80,202,84,202,92,202,93,202,95,202,96,202,97,202,104,202,125,202,132,202,152,202,188,202,189,202,192,202,196,202,204,202,205,202,207,202,209,202,211,202,216,202,217,202,224,202,236,202,244,202,8,203,16,203,20,203,24,203,32,203,33,203,65,203,72,203,73,203,76,203,80,203,88,203,89,203,93,203,100,203,120,203,121,203,156,203,184,203,212,203,228,203,231,203,233,203,12,204,13,204,16,204,20,204,28,204,29,204,33,204,34,204,39,204,40,204,41,204,44,204,46,204,48,204,56,204,57,204,59,204,60,204,61,204,62,204,68,204,69,204,72,204,76,204,84,204,85,204,87,204,88,204,89,204,96,204,100,204,102,204,104,204,112,204,117,204,152,204,153,204,156,204,160,204,168,204,169,204,171,204,172,204,173,204,180,204,181,204,184,204,188,204,196,204,197,204,199,204,201,204,208,204,212,204,228,204,236,204,240,204,1,205,8,205,9,205,12,205,16,205,24,205,25,205,27,205,29,205,36,205,40,205,44,205,57,205,92,205,96,205,100,205,108,205,109,205,111,205,113,205,120,205,136,205,148,205,149,205,152,205,156,205,164,205,165,205,167,205,169,205,176,205,196,205,204,205,208,205,232,205,236,205,240,205,248,205,249,205,251,205,253,205,4,206,8,206,12,206,20,206,25,206,32,206,33,206,36,206,40,206,48,206,49,206,51,206,53,206,88,206,89,206,92,206,95,206,96,206,97,206,104,206,105,206,107,206,109,206,116,206,117,206,120,206,124,206,132,206,133,206,135,206,137,206,144,206,145,206,148,206,152,206,160,206,161,206,163,206,164,206,165,206,172,206,173,206,193,206,228,206,229,206,232,206,235,206,236,206,244,206,245,206,247,206,248,206,249,206,0,207,1,207,4,207,8,207,16,207,17,207,19,207,21,207,28,207,32,207,36,207,44,207,45,207,47,207,48,207,49,207,56,207,84,207,85,207,88,207,92,207,100,207,101,207,103,207,105,207,112,207,113,207,116,207,120,207,128,207,133,207,140,207,161,207,168,207,176,207,196,207,224,207,225,207,228,207,232,207,240,207,241,207,243,207,245,207,252,207,0,208,4,208,17,208,24,208,45,208,52,208,53,208,56,208,60,208,68,208,69,208,71,208,73,208,80,208,84,208,88,208,96,208,108,208,109,208,112,208,116,208,124,208,125,208,129,208,164,208,165,208,168,208,172,208,180,208,181,208,183,208,185,208,192,208,193,208,196,208,200,208,201,208,208,208,209,208,211,208,212,208,213,208,220,208,221,208,224,208,228,208,236,208,237,208,239,208,240,208,241,208,248,208,13,209,48,209,49,209,52,209,56,209,58,209,64,209,65,209,67,209,68,209,69,209,76,209,77,209,80,209,84,209,92,209,93,209,95,209,97,209,104,209,108,209,124,209,132,209,136,209,160,209,161,209,164,209,168,209,176,209,177,209,179,209,181,209,186,209,188,209,192,209,216,209,244,209,248,209,7,210,9,210,16,210,44,210,45,210,48,210,52,210,60,210,61,210,63,210,65,210,72,210,92,210,100,210,128,210,129,210,132,210,136,210,144,210,145,210,149,210,156,210,160,210,164,210,172,210,177,210,184,210,185,210,188,210,191,210,192,210,194,210,200,210,201,210,203,210,212,210,216,210,220,210,228,210,229,210,240,210,241,210,244,210,248,210,0,211,1,211,3,211,5,211,12,211,13,211,14,211,16,211,20,211,22,211,28,211,29,211,31,211,32,211,33,211,37,211,40,211,41,211,44,211,48,211,56,211,57,211,59,211,60,211,61,211,68,211,69,211,124,211,125,211,128,211,132,211,140,211,141,211,143,211,144,211,145,211,152,211,153,211,156,211,160,211,168,211,169,211,171,211,173,211,180,211,184,211,188,211,196,211,197,211,200,211,201,211,208,211,216,211,225,211,227,211,236,211,237,211,240,211,244,211,252,211,253,211,255,211,1,212,8,212,29,212,64,212,68,212,92,212,96,212,100,212,109,212,111,212,120,212,121,212,124,212,127,212,128,212,130,212,136,212,137,212,139,212,141,212,148,212,169,212,204,212,208,212,212,212,220,212,223,212,232,212,236,212,240,212,248,212,251,212,253,212,4,213,8,213,12,213,20,213,21,213,23,213,60,213,61,213,64,213,68,213,76,213,77,213,79,213,81,213,88,213,89,213,92,213,96,213,101,213,104,213,105,213,107,213,109,213,116,213,117,213,120,213,124,213,132,213,133,213,135,213,136,213,137,213,144,213,165,213,200,213,201,213,204,213,208,213,210,213,216,213,217,213,219,213,221,213,228,213,229,213,232,213,236,213,244,213,245,213,247,213,249,213,0,214,1,214,4,214,8,214,16,214,17,214,19,214,20,214,21,214,28,214,32,214,36,214,45,214,56,214,57,214,60,214,64,214,69,214,72,214,73,214,75,214,77,214,81,214,84,214,85,214,88,214,92,214,103,214,105,214,112,214,113,214,116,214,131,214,133,214,140,214,141,214,144,214,148,214,157,214,159,214,161,214,168,214,172,214,176,214,185,214,187,214,196,214,197,214,200,214,204,214,209,214,212,214,215,214,217,214,224,214,228,214,232,214,240,214,245,214,252,214,253,214,0,215,4,215,17,215,24,215,25,215,28,215,32,215,40,215,41,215,43,215,45,215,52,215,53,215,56,215,60,215,68,215,71,215,73,215,80,215,81,215,84,215,86,215,87,215,88,215,89,215,96,215,97,215,99,215,101,215,105,215,108,215,112,215,116,215,124,215,125,215,129,215,136,215,137,215,140,215,144,215,152,215,153,215,155,215,157,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,79,115,79,71,80,249,80,160,82,239,83,117,84,229,84,9,86,193,90,182,91,135,102,182,103,183,103,239,103,76,107,194,115,194,117,60,122,219,130,4,131,87,136,136,136,54,138,200,140,207,141,251,142,230,143,213,153,59,82,116,83,4,84,106,96,100,97,188,107,207,115,26,129,186,137,210,137,163,149,131,79,10,82,190,88,120,89,230,89,114,94,121,94,199,97,192,99,70,103,236,103,127,104,151,111,78,118,11,119,245,120,8,122,255,122,33,124,157,128,110,130,113,130,235,138,147,149,107,78,157,85,247,102,52,110,163,120,237,122,91,132,16,137,78,135,168,151,216,82,78,87,42,88,76,93,31,97,190,97,33,98,98,101,209,103,68,106,27,110,24,117,179,117,227,118,176,119,58,125,175,144,81,148,82,148,149,159,35,83,172,92,50,117,219,128,64,146,152,149,91,82,8,88,220,89,161,92,23,93,183,94,58,95,74,95,119,97,95,108,122,117,134,117,224,124,115,125,177,125,140,127,84,129,33,130,145,133,65,137,27,139,252,146,77,150,71,156,203,78,247,78,11,80,241,81,79,88,55,97,62,97,104,97,57,101,234,105,17,111,165,117,134,118,214,118,135,123,165,130,203,132,0,249,167,147,139,149,128,85,162,91,81,87,1,249,179,124,185,127,181,145,40,80,187,83,69,92,232,93,210,98,110,99,218,100,231,100,32,110,172,112,91,121,221,141,30,142,2,249,125,144,69,146,248,146,126,78,246,78,101,80,254,93,250,94,6,97,87,105,113,129,84,134,71,142,117,147,43,154,94,78,145,80,112,103,64,104,9,81,141,82,146,82,162,106,188,119,16,146,212,158,171,82,47,96,242,143,72,80,169,97,237,99,202,100,60,104,132,106,192,111,136,129,161,137,148,150,5,88,125,114,172,114,4,117,121,125,109,126,169,128,139,137,116,139,99,144,81,157,137,98,122,108,84,111,80,125,58,127,35,138,124,81,74,97,157,123,25,139,87,146,140,147,172,78,211,79,30,80,190,80,6,81,193,82,205,82,127,83,112,87,131,88,154,94,145,95,118,97,172,97,206,100,108,101,111,102,187,102,244,102,151,104,135,109,133,112,241,112,159,116,165,116,202,116,217,117,108,120,236,120,223,122,246,122,69,125,147,125,21,128,63,128,27,129,150,131,102,139,21,143,21,144,225,147,3,152,56,152,90,154,232,155,194,79,83,85,58,88,81,89,99,91,70,92,184,96,18,98,66,104,176,104,232,104,170,110,76,117,120,118,206,120,61,122,251,124,107,126,124,126,8,138,161,138,63,140,142,150,196,157,228,83,233,83,74,84,113,84,250,86,209,89,100,91,59,92,171,94,247,98,55,101,69,101,114,101,160,102,175,103,193,105,189,108,252,117,144,118,126,119,63,122,148,127,3,128,161,128,143,129,230,130,253,130,240,131,193,133,49,136,180,136,165,138,3,249,156,143,46,147,199,150,103,152,216,154,19,159,237,84,155,101,242,102,143,104,64,122,55,140,96,157,240,86,100,87,17,93,6,102,177,104,205,104,254,110,40,116,158,136,228,155,104,108,4,249,168,154,155,79,108,81,113,81,159,82,84,91,229,93,80,96,109,96,241,98,167,99,59,101,217,115,122,122,163,134,162,140,143,151,50,78,225,91,8,98,156,103,220,116,209,121,211,131,135,138,178,138,232,141,78,144,75,147,70,152,211,94,232,105,255,133,237,144,5,249,160,81,152,91,236,91,99,97,250,104,62,107,76,112,47,116,216,116,161,123,80,127,197,131,192,137,171,140,220,149,40,153,46,82,93,96,236,98,2,144,138,79,73,81,33,83,217,88,227,94,224,102,56,109,154,112,194,114,214,115,80,123,241,128,91,148,102,83,155,99,107,127,86,78,128,80,74,88,222,88,42,96,39,97,208,98,208,105,65,155,143,91,24,125,177,128,95,143,164,78,209,80,172,84,172,85,12,91,160,93,231,93,42,101,78,101,33,104,75,106,225,114,142,118,239,119,94,125,249,127,160,129,78,133,223,134,3,143,78,143,202,144,3,153,85,154,171,155,24,78,69,78,93,78,199,78,241,79,119,81,254,82,64,83,227,83,229,83,142,84,20,86,117,87,162,87,199,91,135,93,208,94,252,97,216,98,81,101,184,103,233,103,203,105,80,107,198,107,236,107,66,108,157,110,120,112,215,114,150,115,3,116,191,119,233,119,118,122,127,125,9,128,252,129,5,130,10,130,223,130,98,136,51,139,252,140,192,142,17,144,177,144,100,146,182,146,210,153,69,154,233,156,215,157,156,159,11,87,64,92,202,131,160,151,171,151,180,158,27,84,152,122,164,127,217,136,205,142,225,144,0,88,72,92,152,99,159,122,174,91,19,95,121,122,174,122,142,130,172,142,38,80,56,82,248,82,119,83,8,87,243,98,114,99,10,107,195,109,55,119,165,83,87,115,104,133,118,142,213,149,58,103,195,106,112,111,109,138,204,142,75,153,6,249,119,102,120,107,180,140,60,155,7,249,235,83,45,87,78,89,198,99,251,105,234,115,69,120,186,122,197,122,254,124,117,132,143,137,115,141,53,144,168,149,251,82,71,87,71,117,96,123,204,131,30,146,8,249,88,106,75,81,75,82,135,82,31,98,216,104,117,105,153,150,197,80,164,82,228,82,195,97,164,101,57,104,255,105,126,116,75,123,185,130,235,131,178,137,57,139,209,143,73,153,9,249,202,78,151,89,210,100,17,102,142,106,52,116,129,121,189,121,169,130,126,136,127,136,95,137,10,249,38,147,11,79,202,83,37,96,113,98,114,108,26,125,102,125,152,78,98,81,220,119,175,128,1,79,14,79,118,81,128,81,220,85,104,86,59,87,250,87,252,87,20,89,71,89,147,89,196,91,144,92,14,93,241,93,126,94,204,95,128,98,215,101,227,101,30,103,31,103,94,103,203,104,196,104,95,106,58,107,35,108,125,108,130,108,199,109,152,115,38,116,42,116,130,116,163,116,120,117,127,117,129,120,239,120,65,121,71,121,72,121,122,121,149,123,0,125,186,125,136,127,6,128,45,128,140,128,24,138,79,139,72,140,119,141,33,147,36,147,226,152,81,153,14,154,15,154,101,154,146,158,202,125,118,79,9,84,238,98,84,104,209,145,171,85,58,81,11,249,12,249,28,90,230,97,13,249,207,98,255,98,14,249,15,249,16,249,17,249,18,249,19,249,163,144,20,249,21,249,22,249,23,249,24,249,254,138,25,249,26,249,27,249,28,249,150,102,29,249,86,113,30,249,31,249,227,150,32,249,79,99,122,99,87,83,33,249,143,103,96,105,115,110,34,249,55,117,35,249,36,249,37,249,13,125,38,249,39,249,114,136,202,86,24,90,40,249,41,249,42,249,43,249,44,249,67,78,45,249,103,81,72,89,240,103,16,128,46,249,115,89,116,94,154,100,202,121,245,95,108,96,200,98,123,99,231,91,215,91,170,82,47,249,116,89,41,95,18,96,48,249,49,249,50,249,89,116,51,249,52,249,53,249,54,249,55,249,56,249,209,153,57,249,58,249,59,249,60,249,61,249,62,249,63,249,64,249,65,249,66,249,67,249,195,111,68,249,69,249,191,129,178,143,241,96,70,249,71,249,102,129,72,249,73,249,63,92,74,249,75,249,76,249,77,249,78,249,79,249,80,249,81,249,233,90,37,138,123,103,16,125,82,249,83,249,84,249,85,249,86,249,87,249,253,128,88,249,89,249,60,92,229,108,63,83,186,110,26,89,54,131,57,78,182,78,70,79,174,85,24,87,199,88,86,95,183,101,230,101,128,106,181,107,77,110,237,119,239,122,30,124,222,125,203,134,146,136,50,145,91,147,187,100,190,111,122,115,184,117,84,144,86,85,77,87,186,97,212,100,199,102,225,109,91,110,109,111,185,111,240,117,67,128,189,129,65,133,131,137,199,138,90,139,31,147,147,108,83,117,84,123,15,142,93,144,16,85,2,88,88,88,98,94,7,98,158,100,224,104,118,117,214,124,179,135,232,158,227,78,136,87,110,87,39,89,13,92,177,92,54,94,133,95,52,98,225,100,179,115,250,129,139,136,184,140,138,150,219,158,133,91,183,95,179,96,18,80,0,82,48,82,22,87,53,88,87,88,14,92,96,92,246,92,139,93,166,94,146,95,188,96,17,99,137,99,23,100,67,104,249,104,194,106,216,109,33,110,212,110,228,111,254,113,220,118,121,119,177,121,59,122,4,132,169,137,237,140,243,141,72,142,3,144,20,144,83,144,253,144,77,147,118,150,220,151,210,107,6,112,88,114,162,114,104,115,99,119,191,121,228,123,155,126,128,139,169,88,199,96,102,101,253,101,190,102,140,108,30,113,201,113,90,140,19,152,109,78,129,122,221,78,172,81,205,81,213,82,12,84,167,97,113,103,80,104,223,104,30,109,124,111,188,117,179,119,229,122,244,128,99,132,133,146,92,81,151,101,92,103,147,103,216,117,199,122,115,131,90,249,70,140,23,144,45,152,111,92,192,129,154,130,65,144,111,144,13,146,151,95,157,93,89,106,200,113,123,118,73,123,228,133,4,139,39,145,48,154,135,85,246,97,91,249,105,118,133,127,63,134,186,135,248,136,143,144,92,249,27,109,217,112,222,115,97,125,61,132,93,249,106,145,241,153,94,249,130,78,117,83,4,107,18,107,62,112,27,114,45,134,30,158,76,82,163,143,80,93,229,100,44,101,22,107,235,111,67,124,156,126,205,133,100,137,189,137,201,98,216,129,31,136,202,94,23,103,106,109,252,114,5,116,111,116,130,135,222,144,134,79,13,93,160,95,10,132,183,81,160,99,101,117,174,78,6,80,105,81,201,81,129,104,17,106,174,124,177,124,231,124,111,130,210,138,27,143,207,145,182,79,55,81,245,82,66,84,236,94,110,97,62,98,197,101,218,106,254,111,42,121,220,133,35,136,173,149,98,154,106,154,151,158,206,158,155,82,198,102,119,107,29,112,43,121,98,143,66,151,144,97,0,98,35,101,35,111,73,113,137,116,244,125,111,128,238,132,38,143,35,144,74,147,189,81,23,82,163,82,12,109,200,112,194,136,201,94,130,101,174,107,194,111,62,124,117,115,228,78,54,79,249,86,95,249,186,92,186,93,28,96,178,115,45,123,154,127,206,127,70,128,30,144,52,146,246,150,72,151,24,152,97,159,139,79,167,111,174,121,180,145,183,150,222,82,96,249,136,100,196,100,211,106,94,111,24,112,16,114,231,118,1,128,6,134,92,134,239,141,5,143,50,151,111,155,250,157,117,158,140,120,127,121,160,125,201,131,4,147,127,158,147,158,214,138,223,88,4,95,39,103,39,112,207,116,96,124,126,128,33,81,40,112,98,114,202,120,194,140,218,140,244,140,247,150,134,78,218,80,238,91,214,94,153,101,206,113,66,118,173,119,74,128,252,132,124,144,39,155,141,159,216,88,65,90,98,92,19,106,218,109,15,111,59,118,47,125,55,126,30,133,56,137,228,147,75,150,137,82,210,101,243,103,180,105,65,109,156,110,15,112,9,116,96,116,89,117,36,118,107,120,44,139,94,152,109,81,46,98,120,150,150,79,43,80,25,93,234,109,184,125,42,143,139,95,68,97,23,104,97,249,134,150,210,82,139,128,220,81,204,81,94,105,28,122,190,125,241,131,117,150,218,79,41,82,152,83,15,84,14,85,101,92,167,96,78,103,168,104,108,109,129,114,248,114,6,116,131,116,98,249,226,117,108,124,121,127,184,127,137,131,207,136,225,136,204,145,208,145,226,150,201,155,29,84,126,111,208,113,152,116,250,133,170,142,163,150,87,156,159,158,151,103,203,109,51,116,232,129,22,151,44,120,203,122,32,123,146,124,105,100,106,116,242,117,188,120,232,120,172,153,84,155,187,158,222,91,85,94,32,111,156,129,171,131,136,144,7,78,77,83,41,90,210,93,78,95,98,97,61,99,105,102,252,102,255,110,43,111,99,112,158,119,44,132,19,133,59,136,19,143,69,153,59,156,28,85,185,98,43,103,171,108,9,131,106,137,122,151,161,78,132,89,216,95,217,95,27,103,178,125,84,127,146,130,43,131,189,131,30,143,153,144,203,87,185,89,146,90,208,91,39,102,154,103,133,104,207,107,100,113,117,127,183,140,227,140,129,144,69,155,8,129,138,140,76,150,64,154,165,158,95,91,19,108,27,115,242,118,223,118,12,132,170,81,147,137,77,81,149,81,201,82,201,104,148,108,4,119,32,119,191,125,236,125,98,151,181,158,197,110,17,133,165,81,13,84,125,84,14,102,157,102,39,105,159,110,191,118,145,119,23,131,194,132,159,135,105,145,152,146,244,156,130,136,174,79,146,81,223,82,198,89,61,94,85,97,120,100,121,100,174,102,208,103,33,106,205,107,219,107,95,114,97,114,65,116,56,119,219,119,23,128,188,130,5,131,0,139,40,139,140,140,40,103,144,108,103,114,238,118,102,119,70,122,169,157,127,107,146,108,34,89,38,103,153,132,111,83,147,88,153,89,223,94,207,99,52,102,115,103,58,110,43,115,215,122,215,130,40,147,217,82,235,93,174,97,203,97,10,98,199,98,171,100,224,101,89,105,102,107,203,107,33,113,247,115,93,117,70,126,30,130,2,131,106,133,163,138,191,140,39,151,97,157,168,88,216,158,17,80,14,82,59,84,79,85,135,101,118,108,10,125,11,125,94,128,138,134,128,149,239,150,255,82,149,108,105,114,115,84,154,90,62,92,75,93,76,95,174,95,42,103,182,104,99,105,60,110,68,110,9,119,115,124,142,127,135,133,14,139,247,143,97,151,244,158,183,92,182,96,13,97,171,97,79,101,251,101,252,101,17,108,239,108,159,115,201,115,225,125,148,149,198,91,28,135,16,139,93,82,90,83,205,98,15,100,178,100,52,103,56,106,202,108,192,115,158,116,148,123,149,124,27,126,138,129,54,130,132,133,235,143,249,150,193,153,52,79,74,83,205,83,219,83,204,98,44,100,0,101,145,101,195,105,238,108,88,111,237,115,84,117,34,118,228,118,252,118,208,120,251,120,44,121,70,125,44,130,224,135,212,143,18,152,239,152,195,82,212,98,165,100,36,110,81,111,124,118,203,141,177,145,98,146,238,154,67,155,35,80,141,80,74,87,168,89,40,92,71,94,119,95,63,98,62,101,185,101,193,101,9,102,139,103,156,105,194,110,197,120,33,125,170,128,128,129,43,130,179,130,161,132,140,134,42,138,23,139,166,144,50,150,144,159,13,80,243,79,99,249,249,87,152,95,220,98,146,99,111,103,67,110,25,113,195,118,204,128,218,128,244,136,245,136,25,137,224,140,41,143,77,145,106,150,47,79,112,79,27,94,207,103,34,104,125,118,126,118,68,155,97,94,10,106,105,113,212,113,106,117,100,249,65,126,67,133,233,133,220,152,16,79,79,123,112,127,165,149,225,81,6,94,181,104,62,108,78,108,219,108,175,114,196,123,3,131,213,108,58,116,251,80,136,82,193,88,216,100,151,106,167,116,86,118,167,120,23,134,226,149,57,151,101,249,94,83,1,95,138,139,168,143,175,143,138,144,37,82,165,119,73,156,8,159,25,78,2,80,117,81,91,92,119,94,30,102,58,102,196,103,197,104,179,112,1,117,197,117,201,121,221,122,39,143,32,153,8,154,221,79,33,88,49,88,246,91,110,102,101,107,17,109,122,110,125,111,228,115,43,117,233,131,220,136,19,137,92,139,20,143,15,79,213,80,16,83,92,83,147,91,169,95,13,103,143,121,121,129,47,131,20,133,7,137,134,137,57,143,59,143,165,153,18,156,44,103,118,78,248,79,73,89,1,92,239,92,240,92,103,99,210,104,253,112,162,113,43,116,43,126,236,132,2,135,34,144,210,146,243,156,13,78,216,78,239,79,133,80,86,82,111,82,38,84,144,84,224,87,43,89,102,90,90,91,117,91,204,91,156,94,102,249,118,98,119,101,167,101,110,109,165,110,54,114,38,123,63,124,54,127,80,129,81,129,154,129,64,130,153,130,169,131,3,138,160,140,230,140,251,140,116,141,186,141,232,144,220,145,28,150,68,150,217,153,231,156,23,83,6,82,41,84,116,86,179,88,84,89,110,89,255,95,164,97,110,98,16,102,126,108,26,113,198,118,137,124,222,124,27,125,172,130,193,140,240,150,103,249,91,79,23,95,127,95,194,98,41,93,11,103,218,104,124,120,67,126,108,157,21,78,153,80,21,83,42,83,81,83,131,89,98,90,135,94,178,96,138,97,73,98,121,98,144,101,135,103,167,105,212,107,214,107,215,107,216,107,184,108,104,249,53,116,250,117,18,120,145,120,213,121,216,121,131,124,203,125,225,127,165,128,62,129,194,129,242,131,26,135,232,136,185,138,108,139,187,140,25,145,94,151,219,152,59,159,172,86,42,91,108,95,140,101,179,106,175,107,92,109,241,111,21,112,93,114,173,115,167,140,211,140,59,152,145,97,55,108,88,128,1,154,77,78,139,78,155,78,213,78,58,79,60,79,127,79,223,79,255,80,242,83,248,83,6,85,227,85,219,86,235,88,98,89,17,90,235,91,250,91,4,92,243,93,43,94,153,95,29,96,104,99,156,101,175,101,246,103,251,103,173,104,123,107,153,108,215,108,35,110,9,112,69,115,2,120,62,121,64,121,96,121,193,121,233,123,23,125,114,125,134,128,13,130,142,131,209,132,199,134,223,136,80,138,94,138,29,139,220,140,102,141,173,143,170,144,252,152,223,153,157,158,74,82,105,249,20,103,106,249,152,80,42,82,113,92,99,101,85,108,202,115,35,117,157,117,151,123,156,132,120,145,48,151,119,78,146,100,186,107,94,113,169,133,9,78,107,249,73,103,238,104,23,110,159,130,24,133,107,136,247,99,129,111,18,146,175,152,10,78,183,80,207,80,31,81,70,85,170,85,23,86,64,91,25,92,224,92,56,94,138,94,160,94,194,94,243,96,81,104,97,106,88,110,61,114,64,114,192,114,248,118,101,121,177,123,212,127,243,136,244,137,115,138,97,140,222,140,28,151,94,88,189,116,253,140,199,85,108,249,97,122,34,125,114,130,114,114,31,117,37,117,109,249,25,123,133,88,251,88,188,93,143,94,182,94,144,95,85,96,146,98,127,99,77,101,145,102,217,102,248,102,22,104,242,104,128,114,94,116,110,123,110,125,214,125,114,127,229,128,18,130,175,133,127,137,147,138,29,144,228,146,205,158,32,159,21,89,109,89,45,94,220,96,20,102,115,102,144,103,80,108,197,109,95,111,243,119,169,120,198,132,203,145,43,147,217,78,202,80,72,81,132,85,11,91,163,91,71,98,126,101,203,101,50,110,125,113,1,116,68,116,135,116,191,116,108,118,170,121,218,125,85,126,168,127,122,129,179,129,57,130,26,134,236,135,117,138,227,141,120,144,145,146,37,148,77,153,174,155,104,83,81,92,84,105,196,108,41,109,43,110,12,130,155,133,59,137,45,138,170,138,234,150,103,159,97,82,185,102,178,107,150,126,254,135,13,141,131,149,93,150,29,101,137,109,238,113,110,249,206,87,211,89,172,91,39,96,250,96,16,98,31,102,95,102,41,115,249,115,219,118,1,119,108,123,86,128,114,128,101,129,160,138,146,145,22,78,226,82,114,107,23,109,5,122,57,123,48,125,111,249,176,140,236,83,47,86,81,88,181,91,15,92,17,92,226,93,64,98,131,99,20,100,45,102,179,104,188,108,136,109,175,110,31,112,164,112,210,113,38,117,143,117,142,117,25,118,17,123,224,123,43,124,32,125,57,125,44,133,109,133,7,134,52,138,13,144,97,144,181,144,183,146,246,151,55,154,215,79,108,92,95,103,145,109,159,124,140,126,22,139,22,141,31,144,107,91,253,93,13,100,192,132,92,144,225,152,135,115,139,91,154,96,126,103,222,109,31,138,166,138,1,144,12,152,55,82,112,249,81,112,142,120,150,147,112,136,215,145,238,79,215,83,253,85,218,86,130,87,253,88,194,90,136,91,171,92,192,92,37,94,1,97,13,98,75,98,136,99,28,100,54,101,120,101,57,106,138,107,52,108,25,109,49,111,231,113,233,114,120,115,7,116,178,116,38,118,97,119,192,121,87,122,234,122,185,124,143,125,172,125,97,126,158,127,41,129,49,131,144,132,218,132,234,133,150,136,176,138,144,139,56,143,66,144,131,144,108,145,150,146,185,146,139,150,167,150,168,150,214,150,0,151,8,152,150,153,211,154,26,155,212,83,126,88,25,89,112,91,191,91,209,109,90,111,159,113,33,116,185,116,133,128,253,131,225,93,135,95,170,95,66,96,236,101,18,104,111,105,83,106,137,107,53,109,243,109,227,115,254,118,172,119,77,123,20,125,35,129,28,130,64,131,244,132,99,133,98,138,196,138,135,145,30,147,6,152,180,153,12,98,83,136,240,143,101,146,7,93,39,93,105,93,95,116,157,129,104,135,213,111,254,98,210,127,54,137,114,137,30,78,88,78,231,80,221,82,71,83,127,98,7,102,105,126,5,136,94,150,141,79,25,83,54,86,203,89,164,90,56,92,78,92,77,92,2,94,17,95,67,96,189,101,47,102,66,102,190,103,244,103,28,115,226,119,58,121,197,127,148,132,205,132,150,137,102,138,105,138,225,138,85,140,122,140,244,87,212,91,15,95,111,96,237,98,13,105,150,107,92,110,132,113,210,123,85,135,88,139,254,142,223,152,254,152,56,79,129,79,225,79,123,84,32,90,184,91,60,97,176,101,104,102,252,113,51,117,94,121,51,125,78,129,227,129,152,131,170,133,206,133,3,135,10,138,171,142,155,143,113,249,197,143,49,89,164,91,230,91,137,96,233,91,11,92,195,95,129,108,114,249,241,109,11,112,26,117,175,130,246,138,192,78,65,83,115,249,217,150,15,108,158,78,196,79,82,81,94,85,37,90,232,92,17,98,89,114,189,130,170,131,254,134,89,136,29,138,63,150,197,150,19,153,9,157,93,157,10,88,179,92,189,93,68,94,225,96,21,97,225,99,2,106,37,110,2,145,84,147,78,152,16,156,119,159,137,91,184,92,9,99,79,102,72,104,60,119,193,150,141,151,84,152,159,155,161,101,1,139,203,142,188,149,53,85,169,92,214,93,181,94,151,102,76,118,244,131,199,149,211,88,188,98,206,114,40,157,240,78,46,89,15,96,59,102,131,107,231,121,38,157,147,83,192,84,195,87,22,93,27,97,214,102,175,109,141,120,126,130,152,150,68,151,132,83,124,98,150,99,178,109,10,126,75,129,77,152,251,106,76,127,175,157,26,158,95,78,59,80,182,81,28,89,249,96,246,99,48,105,58,114,54,128,116,249,206,145,49,95,117,249,118,249,4,125,229,130,111,132,187,132,229,133,141,142,119,249,111,79,120,249,121,249,228,88,67,91,89,96,218,99,24,101,109,101,152,102,122,249,74,105,35,106,11,109,1,112,108,113,210,117,13,118,179,121,112,122,123,249,138,127,124,249,68,137,125,249,147,139,192,145,125,150,126,249,10,153,4,87,161,95,188,101,1,111,0,118,166,121,158,138,173,153,90,155,108,159,4,81,182,97,145,98,141,106,198,129,67,80,48,88,102,95,9,113,0,138,250,138,124,91,22,134,250,79,60,81,180,86,68,89,169,99,249,109,170,93,109,105,134,81,136,78,89,79,127,249,128,249,129,249,130,89,130,249,131,249,95,107,93,108,132,249,181,116,22,121,133,249,7,130,69,130,57,131,63,143,93,143,134,249,24,153,135,249,136,249,137,249,166,78,138,249,223,87,121,95,19,102,139,249,140,249,171,117,121,126,111,139,141,249,6,144,91,154,165,86,39,88,248,89,31,90,180,91,142,249,246,94,143,249,144,249,80,99,59,99,145,249,61,105,135,108,191,108,142,109,147,109,245,109,20,111,146,249,223,112,54,113,89,113,147,249,195,113,213,113,148,249,79,120,111,120,149,249,117,123,227,125,150,249,47,126,151,249,77,136,223,142,152,249,153,249,154,249,91,146,155,249,246,156,156,249,157,249,158,249,133,96,133,109,159,249,177,113,160,249,161,249,177,149,173,83,162,249,163,249,164,249,211,103,165,249,142,112,48,113,48,116,118,130,210,130,166,249,187,149,229,154,125,158,196,102,167,249,193,113,73,132,168,249,169,249,75,88,170,249,171,249,184,93,113,95,172,249,32,102,142,102,121,105,174,105,56,108,243,108,54,110,65,111,218,111,27,112,47,112,80,113,223,113,112,115,173,249,91,116,174,249,212,116,200,118,78,122,147,126,175,249,176,249,241,130,96,138,206,143,177,249,72,147,178,249,25,151,179,249,180,249,66,78,42,80,181,249,8,82,225,83,243,102,109,108,202,111,10,115,127,119,98,122,174,130,221,133,2,134,182,249,212,136,99,138,125,139,107,140,183,249,179,146,184,249,19,151,16,152,148,78,13,79,201,79,178,80,72,83,62,84,51,84,218,85,98,88,186,88,103,89,27,90,228,91,159,96,185,249,202,97,86,101,255,101,100,102,167,104,90,108,179,111,207,112,172,113,82,115,125,123,8,135,164,138,50,156,7,159,75,92,131,108,68,115,137,115,58,146,171,110,101,116,31,118,105,122,21,126,10,134,64,81,197,88,193,100,238,116,21,117,112,118,193,127,149,144,205,150,84,153,38,110,230,116,169,122,170,122,229,129,217,134,120,135,27,138,73,90,140,91,155,91,161,104,0,105,99,109,169,115,19,116,44,116,151,120,233,125,235,127,24,129,85,129,158,131,76,140,46,150,17,152,240,102,128,95,250,101,137,103,106,108,139,115,45,80,3,90,106,107,238,119,22,89,108,93,205,93,37,115,79,117,186,249,187,249,229,80,249,81,47,88,45,89,150,89,218,89,229,91,188,249,189,249,162,93,215,98,22,100,147,100,254,100,190,249,220,102,191,249,72,106,192,249,255,113,100,116,193,249,136,122], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+130586);
/* memory initializer */ allocate([175,122,71,126,94,126,0,128,112,129,194,249,239,135,129,137,32,139,89,144,195,249,128,144,82,153,126,97,50,107,116,109,31,126,37,137,177,143,209,79,173,80,151,81,199,82,199,87,137,88,185,91,184,94,66,97,149,105,140,109,103,110,182,110,148,113,98,116,40,117,44,117,115,128,56,131,201,132,10,142,148,147,222,147,196,249,142,78,81,79,118,80,42,81,200,83,203,83,243,83,135,91,211,91,36,92,26,97,130,97,244,101,91,114,151,115,64,116,194,118,80,121,145,121,185,121,6,125,189,127,139,130,213,133,94,134,194,143,71,144,245,144,234,145,133,150,232,150,233,150,214,82,103,95,237,101,49,102,47,104,92,113,54,122,193,144,10,152,145,78,197,249,82,106,158,107,144,111,137,113,24,128,184,130,83,133,75,144,149,150,242,150,251,151,26,133,49,155,144,78,138,113,196,150,67,81,159,83,225,84,19,87,18,87,163,87,155,90,196,90,195,91,40,96,63,97,244,99,133,108,57,109,114,110,144,110,48,114,63,115,87,116,209,130,129,136,69,143,96,144,198,249,98,150,88,152,27,157,8,103,138,141,94,146,77,79,73,80,222,80,113,83,13,87,212,89,1,90,9,92,112,97,144,102,45,110,50,114,75,116,239,125,195,128,14,132,102,132,63,133,95,135,91,136,24,137,2,139,85,144,203,151,79,155,115,78,145,79,18,81,106,81,199,249,47,85,169,85,122,91,165,91,124,94,125,94,190,94,160,96,223,96,8,97,9,97,196,99,56,101,9,103,200,249,212,103,218,103,201,249,97,105,98,105,185,108,39,109,202,249,56,110,203,249,225,111,54,115,55,115,204,249,92,116,49,117,205,249,82,118,206,249,207,249,173,125,254,129,56,132,213,136,152,138,219,138,237,138,48,142,66,142,74,144,62,144,122,144,73,145,201,145,110,147,208,249,209,249,9,88,210,249,211,107,137,128,178,128,211,249,212,249,65,81,107,89,57,92,213,249,214,249,100,111,167,115,228,128,7,141,215,249,23,146,143,149,216,249,217,249,218,249,219,249,127,128,14,98,28,112,104,125,141,135,220,249,160,87,105,96,71,97,183,107,190,138,128,146,177,150,89,78,31,84,235,109,45,133,112,150,243,151,238,152,214,99,227,108,145,144,221,81,201,97,186,129,249,157,157,79,26,80,0,81,156,91,15,97,255,97,236,100,5,105,197,107,145,117,227,119,169,127,100,130,143,133,251,135,99,136,188,138,112,139,171,145,140,78,229,78,10,79,221,249,222,249,55,89,232,89,223,249,242,93,27,95,91,95,33,96,224,249,225,249,226,249,227,249,62,114,229,115,228,249,112,117,205,117,229,249,251,121,230,249,12,128,51,128,132,128,225,130,81,131,231,249,232,249,189,140,179,140,135,144,233,249,234,249,244,152,12,153,235,249,236,249,55,112,202,118,202,127,204,127,252,127,26,139,186,78,193,78,3,82,112,83,237,249,189,84,224,86,251,89,197,91,21,95,205,95,110,110,238,249,239,249,106,125,53,131,240,249,147,134,141,138,241,249,109,151,119,151,242,249,243,249,0,78,90,79,126,79,249,88,229,101,162,110,56,144,176,147,185,153,251,78,236,88,138,89,217,89,65,96,244,249,245,249,20,122,246,249,79,131,195,140,101,81,68,83,247,249,248,249,249,249,205,78,105,82,85,91,191,130,212,78,58,82,168,84,201,89,255,89,80,91,87,91,92,91,99,96,72,97,203,110,153,112,110,113,134,115,247,116,181,117,193,120,43,125,5,128,234,129,40,131,23,133,201,133,238,138,199,140,204,150,92,79,250,82,188,86,171,101,40,102,124,112,184,112,53,114,189,125,141,130,76,145,192,150,114,157,113,91,231,104,152,107,122,111,222,118,145,92,171,102,91,111,180,123,42,124,54,136,220,150,8,78,215,78,32,83,52,88,187,88,239,88,108,89,7,92,51,94,132,94,53,95,140,99,178,102,86,103,31,106,163,106,12,107,63,111,70,114,250,249,80,115,139,116,224,122,167,124,120,129,223,129,231,129,138,131,108,132,35,133,148,133,207,133,221,136,19,141,172,145,119,149,156,150,141,81,201,84,40,87,176,91,77,98,80,103,61,104,147,104,61,110,211,110,125,112,33,126,193,136,161,140,9,143,75,159,78,159,45,114,143,123,205,138,26,147,71,79,78,79,50,81,128,84,208,89,149,94,181,98,117,103,110,105,23,106,174,108,26,110,217,114,42,115,189,117,184,123,53,125,231,130,249,131,87,132,247,133,91,138,175,140,135,142,25,144,184,144,206,150,95,159,227,82,10,84,225,90,194,91,88,100,117,101,244,110,196,114,251,249,132,118,77,122,27,123,77,124,62,126,223,127,123,131,43,139,202,140,100,141,225,141,95,142,234,143,249,143,105,144,209,147,67,79,122,79,179,80,104,81,120,81,77,82,106,82,97,88,124,88,96,89,8,92,85,92,219,94,155,96,48,98,19,104,191,107,8,108,177,111,78,113,32,116,48,117,56,117,81,117,114,118,76,123,139,123,173,123,198,123,143,126,110,138,62,143,73,143,63,146,147,146,34,147,43,148,251,150,90,152,107,152,30,153,7,82,42,98,152,98,89,109,100,118,202,122,192,123,118,125,96,83,190,92,151,94,56,111,185,112,152,124,17,151,142,155,222,158,165,99,122,100,118,135,1,78,149,78,173,78,92,80,117,80,72,84,195,89,154,91,64,94,173,94,247,94,129,95,197,96,58,99,63,101,116,101,204,101,118,102,120,102,254,103,104,105,137,106,99,107,64,108,192,109,232,109,31,110,94,110,30,112,161,112,142,115,253,115,58,117,91,119,135,120,142,121,11,122,125,122,190,124,142,125,71,130,2,138,234,138,158,140,45,145,74,145,216,145,102,146,204,146,32,147,6,151,86,151,92,151,2,152,14,159,54,82,145,82,124,85,36,88,29,94,31,95,140,96,208,99,175,104,223,111,109,121,44,123,205,129,186,133,253,136,248,138,68,142,141,145,100,150,155,150,61,151,76,152,74,159,206,79,70,81,203,81,169,82,50,86,20,95,107,95,170,99,205,100,233,101,65,102,250,102,249,102,29,103,157,104,215,104,253,105,21,111,110,111,103,113,229,113,42,114,170,116,58,119,86,121,90,121,223,121,32,122,149,122,151,124,223,124,68,125,112,126,135,128,251,133,164,134,84,138,191,138,153,141,129,142,32,144,109,144,227,145,59,150,213,150,229,156,207,101,7,124,179,141,195,147,88,91,10,92,82,83,217,98,29,115,39,80,151,91,158,95,176,96,107,97,213,104,217,109,46,116,46,122,66,125,156,125,49,126,107,129,42,142,53,142,126,147,24,148,80,79,80,87,230,93,167,94,43,99,106,127,59,78,79,79,143,79,90,80,221,89,196,128,106,84,104,84,254,85,79,89,153,91,222,93,218,94,93,102,49,103,241,103,42,104,232,108,50,109,74,110,141,111,183,112,224,115,135,117,76,124,2,125,44,125,162,125,31,130,219,134,59,138,133,138,112,141,138,142,51,143,49,144,78,145,82,145,68,148,208,153,249,122,165,124,202,79,1,81,198,81,200,87,239,91,251,92,89,102,61,106,90,109,150,110,236,111,12,113,111,117,227,122,34,136,33,144,117,144,203,150,255,153,1,131,45,78,242,78,70,136,205,145,125,83,219,106,107,105,65,108,122,132,158,88,142,97,254,102,239,98,221,112,17,117,199,117,82,126,184,132,73,139,8,141,75,78,234,83,171,84,48,87,64,87,215,95,1,99,7,99,111,100,47,101,232,101,122,102,157,103,179,103,98,107,96,108,154,108,44,111,229,119,37,120,73,121,87,121,25,125,162,128,2,129,243,129,157,130,183,130,24,135,140,138,252,249,4,141,190,141,114,144,244,118,25,122,55,122,84,126,119,128,7,85,212,85,117,88,47,99,34,100,73,102,75,102,109,104,155,105,132,107,37,109,177,110,205,115,104,116,161,116,91,117,185,117,225,118,30,119,139,119,230,121,9,126,29,126,251,129,47,133,151,136,58,138,209,140,235,142,176,143,50,144,173,147,99,150,115,150,7,151,132,79,241,83,234,89,201,90,25,94,78,104,198,116,190,117,233,121,146,122,163,129,237,134,234,140,204,141,237,143,159,101,21,103,253,249,247,87,87,111,221,125,47,143,246,147,198,150,181,95,242,97,132,111,20,78,152,79,31,80,201,83,223,85,111,93,238,93,33,107,100,107,203,120,154,123,254,249,73,142,202,142,110,144,73,99,62,100,64,119,132,122,47,147,127,148,106,159,176,100,175,111,230,113,168,116,218,116,196,122,18,124,130,126,178,124,152,126,154,139,10,141,125,148,16,153,76,153,57,82,223,91,230,100,45,103,46,125,237,80,195,83,121,88,88,97,89,97,250,97,172,101,217,122,146,139,150,139,9,80,33,80,117,82,49,85,60,90,224,94,112,95,52,97,94,101,12,102,54,102,162,102,205,105,196,110,50,111,22,115,33,118,147,122,57,129,89,130,214,131,188,132,181,80,240,87,192,91,232,91,105,95,161,99,38,120,181,125,220,131,33,133,199,145,245,145,138,81,245,103,86,123,172,140,196,81,187,89,189,96,85,134,28,80,255,249,84,82,58,92,125,97,26,98,211,98,242,100,165,101,204,110,32,118,10,129,96,142,95,150,187,150,223,78,67,83,152,85,41,89,221,93,197,100,201,108,250,109,148,115,127,122,27,130,166,133,228,140,16,142,119,144,231,145,225,149,33,150,198,151,248,81,242,84,134,85,185,95,164,100,136,111,180,125,31,143,77,143,53,148,201,80,22,92,190,108,251,109,27,117,187,119,61,124,100,124,121,138,194,138,30,88,190,89,22,94,119,99,82,114,138,117,107,119,220,138,188,140,18,143,243,94,116,102,248,109,125,128,193,131,203,138,81,151,214,155,0,250,67,82,255,102,149,109,239,110,224,125,230,138,46,144,94,144,212,154,29,82,127,82,232,84,148,97,132,98,219,98,162,104,18,105,90,105,53,106,146,112,38,113,93,120,1,121,14,121,210,121,13,122,150,128,120,130,213,130,73,131,73,133,130,140,133,141,98,145,139,145,174,145,195,79,209,86,237,113,215,119,0,135,248,137,248,91,214,95,81,103,168,144,226,83,90,88,245,91,164,96,129,97,96,100,61,126,112,128,37,133,131,146,174,100,172,80,20,93,0,103,156,88,189,98,168,99,14,105,120,105,30,106,107,110,186,118,203,121,187,130,41,132,207,138,168,141,253,143,18,145,75,145,156,145,16,147,24,147,154,147,219,150,54,154,13,156,17,78,92,117,93,121,250,122,81,123,201,123,46,126,196,132,89,142,116,142,248,142,16,144,37,102,63,105,67,116,250,81,46,103,220,158,69,81,224,95,150,108,242,135,93,136,119,136,180,96,181,129,3,132,5,141,214,83,57,84,52,86,54,90,49,92,138,112,224,127,90,128,6,129,237,129,163,141,137,145,95,154,242,157,116,80,196,78,160,83,251,96,44,110,100,92,136,79,36,80,228,85,217,92,95,94,101,96,148,104,187,108,196,109,190,113,212,117,244,117,97,118,26,122,73,122,199,125,251,125,110,127,244,129,169,134,28,143,201,150,179,153,82,159,71,82,197,82,237,152,170,137,3,78,210,103,6,111,181,79,226,91,149,103,136,108,120,109,27,116,39,120,221,145,124,147,196,135,228,121,49,122,235,95,214,78,164,84,62,85,174,88,165,89,240,96,83,98,214,98,54,103,85,105,53,130,64,150,177,153,221,153,44,80,83,83,68,85,124,87,1,250,88,98,2,250,226,100,107,102,221,103,193,111,239,111,34,116,56,116,23,138,56,148,81,84,6,86,102,87,72,95,154,97,78,107,88,112,173,112,187,125,149,138,106,89,43,129,162,99,8,119,61,128,170,140,84,88,45,100,187,105,149,91,17,94,111,110,3,250,105,133,76,81,240,83,42,89,32,96,75,97,134,107,112,108,240,108,30,123,206,128,212,130,198,141,176,144,177,152,4,250,199,100,164,111,145,100,4,101,78,81,16,84,31,87,14,138,95,97,118,104,5,250,219,117,82,123,113,125,26,144,6,88,204,105,127,129,42,137,0,144,57,152,120,80,87,89,172,89,149,98,15,144,42,155,93,97,121,114,214,149,97,87,70,90,244,93,138,98,173,100,250,100,119,103,226,108,62,109,44,114,54,116,52,120,119,127,173,130,219,141,23,152,36,82,66,87,127,103,72,114,227,116,169,140,166,143,17,146,42,150,107,81,237,83,76,99,105,79,4,85,150,96,87,101,155,108,127,109,76,114,253,114,23,122,135,137,157,140,109,95,142,111,249,112,168,129,14,97,191,79,79,80,65,98,71,114,199,123,232,125,233,127,77,144,173,151,25,154,182,140,106,87,115,94,176,103,13,132,85,138,32,84,22,91,99,94,226,94,10,95,131,101,186,128,61,133,137,149,91,150,72,79,5,83,13,83,15,83,134,84,250,84,3,87,3,94,22,96,155,98,177,98,85,99,6,250,225,108,102,109,177,117,50,120,222,128,47,129,222,130,97,132,178,132,141,136,18,137,11,144,234,146,253,152,145,155,69,94,180,102,221,102,17,112,6,114,7,250,245,79,125,82,106,95,83,97,83,103,25,106,2,111,226,116,104,121,104,136,121,140,199,152,196,152,67,154,193,84,31,122,83,105,247,138,74,140,168,152,174,153,124,95,171,98,178,117,174,118,171,136,127,144,66,150,57,83,60,95,197,95,204,108,204,115,98,117,139,117,70,123,254,130,157,153,79,78,60,144,11,78,85,79,166,83,15,89,200,94,48,102,179,108,85,116,119,131,102,135,192,140,80,144,30,151,21,156,209,88,120,91,80,134,20,139,180,157,210,91,104,96,141,96,241,101,87,108,34,111,163,111,26,112,85,127,240,127,145,149,146,149,80,150,211,151,114,82,68,143,253,81,43,84,184,84,99,85,138,85,187,106,181,109,216,125,102,130,156,146,119,150,121,158,8,84,200,84,210,118,228,134,164,149,212,149,92,150,162,78,9,79,238,89,230,90,247,93,82,96,151,98,109,103,65,104,134,108,47,110,56,127,155,128,42,130,8,250,9,250,5,152,165,78,85,80,179,84,147,87,90,89,105,91,179,91,200,97,119,105,119,109,35,112,249,135,227,137,114,138,231,138,130,144,237,153,184,154,190,82,56,104,22,80,120,94,79,103,71,131,76,136,171,78,17,84,174,86,230,115,21,145,255,151,9,153,87,153,153,153,83,86,159,88,91,134,49,138,178,97,246,106,123,115,210,142,71,107,170,150,87,154,85,89,0,114,107,141,105,151,212,79,244,92,38,95,248,97,91,102,235,108,171,112,132,115,185,115,254,115,41,119,77,119,67,125,98,125,35,126,55,130,82,136,10,250,226,140,73,146,111,152,81,91,116,122,64,136,1,152,204,90,224,79,84,83,62,89,253,92,62,99,121,109,249,114,5,129,7,129,162,131,207,146,48,152,168,78,68,81,17,82,139,87,98,95,194,108,206,110,5,112,80,112,175,112,146,113,233,115,105,116,74,131,162,135,97,136,8,144,162,144,163,147,168,153,110,81,87,95,224,96,103,97,179,102,89,133,74,142,175,145,139,151,78,78,146,78,124,84,213,88,250,88,125,89,181,92,39,95,54,98,72,98,10,102,103,102,235,107,105,109,207,109,86,110,248,110,148,111,224,111,233,111,93,112,208,114,37,116,90,116,224,116,147,118,92,121,202,124,30,126,225,128,166,130,107,132,191,132,78,134,95,134,116,135,119,139,106,140,172,147,0,152,101,152,209,96,22,98,119,145,90,90,15,102,247,109,62,110,63,116,66,155,253,95,218,96,15,123,196,84,24,95,94,108,211,108,42,109,216,112,5,125,121,134,12,138,59,157,22,83,140,84,5,91,58,106,107,112,117,117,141,121,190,121,177,130,239,131,113,138,65,139,168,140,116,151,11,250,244,100,43,101,186,120,187,120,107,122,56,78,154,85,80,89,166,91,123,94,163,96,219,99,97,107,101,102,83,104,25,110,101,113,176,116,8,125,132,144,105,154,37,156,59,109,209,110,62,115,65,140,202,149,240,81,76,94,168,95,77,96,246,96,48,97,76,97,67,102,68,102,165,105,193,108,95,110,201,110,98,111,76,113,156,116,135,118,193,123,39,124,82,131,87,135,81,144,141,150,195,158,47,83,222,86,251,94,138,95,98,96,148,96,247,97,102,102,3,103,156,106,238,109,174,111,112,112,106,115,106,126,190,129,52,131,212,134,168,138,196,140,131,82,114,115,150,91,107,106,4,148,238,84,134,86,93,91,72,101,133,101,201,102,159,104,141,109,198,109,59,114,180,128,117,145,77,154,175,79,25,80,154,83,14,84,60,84,137,85,197,85,63,94,140,95,61,103,102,113,221,115,5,144,219,82,243,82,100,88,206,88,4,113,143,113,251,113,176,133,19,138,136,102,168,133,167,85,132,102,74,113,49,132,73,83,153,85,193,107,89,95,189,95,238,99,137,102,71,113,241,138,29,143,190,158,17,79,58,100,203,112,102,117,103,134,100,96,78,139,248,157,71,81,246,81,8,83,54,109,248,128,209,158,21,102,35,107,152,112,213,117,3,84,121,92,7,125,22,138,32,107,61,107,70,107,56,84,112,96,61,109,213,127,8,130,214,80,222,81,156,85,107,86,205,86,236,89,9,91,12,94,153,97,152,97,49,98,94,102,230,102,153,113,185,113,186,113,167,114,167,121,0,122,178,127,112,138,0,0,1,0,160,0,167,0,168,0,169,0,175,0,176,0,178,0,183,0,184,0,198,0,215,0,216,0,230,0,247,0,248,0,0,1,1,1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,9,1,10,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,1,46,1,47,1,48,1,49,1,52,1,53,1,54,1,55,1,56,1,57,1,58,1,59,1,60,1,61,1,62,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,74,1,75,1,76,1,77,1,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,93,1,94,1,95,1,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,107,1,108,1,109,1,110,1,111,1,112,1,113,1,114,1,115,1,116,1,117,1,118,1,119,1,120,1,121,1,122,1,123,1,124,1,125,1,126,1,146,1,160,1,161,1,175,1,176,1,24,2,25,2,26,2,27,2,198,2,199,2,216,2,217,2,219,2,220,2,221,2,0,3,1,3,3,3,9,3,35,3,122,3,132,3,133,3,134,3,136,3,137,3,138,3,140,3,142,3,143,3,144,3,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,170,3,171,3,172,3,173,3,174,3,175,3,176,3,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,194,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,202,3,203,3,204,3,205,3,206,3,1,4,2,4,3,4,4,4,5,4,6,4,7,4,8,4,9,4,10,4,11,4,12,4,14,4,15,4,16,4,17,4,18,4,19,4,20,4,21,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,48,4,49,4,50,4,51,4,52,4,53,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,81,4,82,4,83,4,84,4,85,4,86,4,87,4,88,4,89,4,90,4,91,4,92,4,94,4,95,4,144,4,145,4,176,5,177,5,178,5,179,5,180,5,181,5,182,5,183,5,184,5,185,5,187,5,188,5,189,5,190,5,191,5,192,5,193,5,194,5,195,5,208,5,209,5,210,5,211,5,212,5,213,5,214,5,215,5,216,5,217,5,218,5,219,5,220,5,221,5,222,5,223,5,224,5,225,5,226,5,227,5,228,5,229,5,230,5,231,5,232,5,233,5,234,5,240,5,241,5,242,5,243,5,244,5,12,6,27,6,31,6,33,6,34,6,35,6,36,6,37,6,38,6,39,6,40,6,41,6,42,6,43,6,44,6,45,6,46,6,47,6,48,6,49,6,50,6,51,6,52,6,53,6,54,6,55,6,56,6,57,6,58,6,64,6,65,6,66,6,67,6,68,6,69,6,70,6,71,6,72,6,73,6,74,6,75,6,76,6,77,6,78,6,79,6,80,6,81,6,82,6,121,6,126,6,134,6,136,6,145,6,152,6,169,6,175,6,186,6,190,6,193,6,210,6,1,14,2,14,3,14,4,14,5,14,6,14,7,14,8,14,9,14,10,14,11,14,12,14,13,14,14,14,15,14,16,14,17,14,18,14,19,14,20,14,21,14,22,14,23,14,24,14,25,14,26,14,27,14,28,14,29,14,30,14,31,14,32,14,33,14,34,14,35,14,36,14,37,14,38,14,39,14,40,14,41,14,42,14,43,14,44,14,45,14,46,14,47,14,48,14,49,14,50,14,51,14,52,14,53,14,54,14,55,14,56,14,57,14,58,14,63,14,64,14,65,14,66,14,67,14,68,14,69,14,70,14,71,14,72,14,73,14,74,14,75,14,76,14,77,14,78,14,79,14,80,14,81,14,82,14,83,14,84,14,85,14,86,14,87,14,88,14,89,14,90,14,91,14,2,30,3,30,10,30,11,30,30,30,31,30,64,30,65,30,86,30,87,30,96,30,97,30,106,30,107,30,128,30,129,30,130,30,131,30,132,30,133,30,242,30,243,30,12,32,13,32,14,32,15,32,19,32,20,32,21,32,23,32,24,32,25,32,26,32,28,32,29,32,30,32,32,32,33,32,34,32,38,32,48,32,57,32,58,32,170,32,171,32,172,32,175,32,22,33,34,33,25,34,26,34,72,34,100,34,101,34,32,35,33,35,0,37,2,37,12,37,16,37,20,37,24,37,28,37,36,37,44,37,52,37,60,37,80,37,81,37,82,37,83,37,84,37,85,37,86,37,87,37,88,37,89,37,90,37,91,37,92,37,93,37,94,37,95,37,96,37,97,37,98,37,99,37,100,37,101,37,102,37,103,37,104,37,105,37,106,37,107,37,108,37,128,37,132,37,136,37,140,37,144,37,145,37,146,37,147,37,160,37,0,0,0,0,0,0,1,0,47,100,101,118,47,108,111,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,3,32,2,32,2,32,2,32,2,32,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1,96,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,213,8,213,8,213,8,213,8,213,8,213,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,4,192,4,192,4,192,4,192,4,192,4,192,8,214,8,214,8,214,8,214,8,214,8,214,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,4,192,4,192,4,192,4,192,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,0,49,1,83,0,127,1,48,1,105,0,120,1,255,0,129,1,83,2,130,1,131,1,132,1,133,1,134,1,84,2,135,1,136,1,137,1,86,2,138,1,87,2,139,1,140,1,142,1,221,1,143,1,89,2,144,1,91,2,145,1,146,1,147,1,96,2,148,1,99,2,150,1,105,2,151,1,104,2,152,1,153,1,156,1,111,2,157,1,114,2,159,1,117,2,166,1,128,2,167,1,168,1,169,1,131,2,172,1,173,1,174,1,136,2,175,1,176,1,177,1,138,2,178,1,139,2,183,1,146,2,184,1,185,1,188,1,189,1,196,1,198,1,196,1,197,1,197,1,198,1,199,1,201,1,199,1,200,1,200,1,201,1,202,1,204,1,202,1,203,1,203,1,204,1,241,1,243,1,241,1,242,1,242,1,243,1,244,1,245,1,246,1,149,1,247,1,191,1,32,2,158,1,134,3,172,3,136,3,173,3,137,3,174,3,138,3,175,3,140,3,204,3,142,3,205,3,143,3,206,3,153,3,69,3,153,3,190,31,163,3,194,3,247,3,248,3,250,3,251,3,96,30,155,30,223,0,223,0,158,30,223,0,89,31,81,31,91,31,83,31,93,31,85,31,95,31,87,31,188,31,179,31,204,31,195,31,236,31,229,31,252,31,243,31,58,2,101,44,59,2,60,2,61,2,154,1,62,2,102,44,65,2,66,2,67,2,128,1,68,2,137,2,69,2,140,2,244,3,184,3,249,3,242,3,253,3,123,3,254,3,124,3,255,3,125,3,192,4,207,4,38,33,201,3,42,33,107,0,43,33,229,0,50,33,78,33,131,33,132,33,96,44,97,44,98,44,107,2,99,44,125,29,100,44,125,2,109,44,81,2,110,44,113,2,111,44,80,2,112,44,82,2,114,44,115,44,117,44,118,44,126,44,63,2,127,44,64,2,242,44,243,44,125,167,121,29,139,167,140,167,141,167,101,2,170,167,102,2,199,16,39,45,205,16,45,45,118,3,119,3,156,3,181,0,146,3,208,3,152,3,209,3,166,3,213,3,160,3,214,3,154,3,240,3,161,3,241,3,149,3,245,3,207,3,215,3,0,0,0,0,65,0,32,26,192,0,32,31,0,1,1,47,50,1,1,5,57,1,1,15,74,1,1,45,121,1,1,5,112,3,1,3,145,3,32,17,163,3,32,9,0,4,80,16,16,4,32,32,96,4,1,33,138,4,1,53,193,4,1,13,208,4,1,63,20,5,1,19,49,5,48,38,160,1,1,5,179,1,1,3,205,1,1,15,222,1,1,17,248,1,1,39,34,2,1,17,216,3,1,23,0,30,1,149,160,30,1,95,8,31,248,8,24,31,248,6,40,31,248,8,56,31,248,8,72,31,248,6,104,31,248,8,136,31,248,8,152,31,248,8,168,31,248,8,184,31,248,2,186,31,182,2,200,31,170,4,216,31,248,2,218,31,156,2,232,31,248,2,234,31,144,2,248,31,128,2,250,31,130,2,70,2,1,9,16,5,1,3,96,33,16,16,0,44,48,47,103,44,1,5,128,44,1,99,235,44,1,3,64,166,1,45,128,166,1,23,34,167,1,13,50,167,1,61,121,167,1,3,126,167,1,9,144,167,1,3,160,167,1,9,33,255,32,26,0,0,0,0,1,0,1,0,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1,0,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,7,0,2,0,1,115,1,115,5,0,1,115,21,127,2,0,1,115,1,115,5,0,1,115,21,127,2,0,1,115,1,115,5,0,1,115,17,127,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,1,0,5,0,1,115,1,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,3,0,2,0,1,115,1,115,5,0,1,115,17,127,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,1,0,5,0,1,115,9,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,1,0,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,1,0,5,0,1,115,1,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,3,0,2,0,1,115,1,115,5,0,1,115,17,127,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,7,0,5,0,1,115,17,127,2,0,1,115,1,115,5,0,1,115,17,127,2,0,1,115,1,115,5,0,1,115,17,127,5,0,1,115,17,115,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,9,0,14,0,0,115,0,113,15,0,1,115,1,106,16,0,1,115,1,115,17,0,1,115,17,127,18,0,0,115,17,119,19,0,0,115,0,115,20,0,1,115,0,115,2,0,1,115,1,115,5,0,1,115,17,127,0,0,0,0,0,0,21,0,8,0,5,0,1,115,49,119,2,0,1,115,1,115,5,0,1,115,49,119,2,0,1,115,1,115,5,0,1,115,49,119,2,0,1,115,1,115,5,0,1,115,49,119,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,22,0,6,0,20,0,1,115,0,115,2,0,1,115,1,115,20,0,1,115,0,115,2,0,1,115,1,115,20,0,1,115,0,115,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,1,0,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,1,0,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,9,0,5,0,1,115,17,115,20,0,1,115,24,115,5,0,1,115,17,115,20,0,1,115,24,115,5,0,1,115,17,115,5,0,1,115,17,127,20,0,1,115,24,115,5,0,1,115,17,115,5,0,1,115,17,127,0,0,0,0,0,0,26,0,3,0,2,0,1,115,1,115,5,0,1,115,1,127,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,3,0,2,0,1,115,1,115,5,0,1,115,17,127,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,1,0,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,3,0,2,0,1,115,1,115,31,0,17,127,1,115,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,3,0,2,0,1,115,1,115,2,0,1,115,1,115,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,0,1,0,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,0,3,0,2,0,1,115,1,115,5,0,1,115,25,115,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,1,0,19,0,0,115,24,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,0,1,0,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,1,0,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,0,1,0,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,10,0,19,0,0,115,0,115,2,0,1,115,1,115,20,0,1,115,0,115,19,0,0,115,0,115,2,0,1,115,1,115,31,0,17,127,1,115,40,0,17,127,0,115,19,0,0,115,0,115,2,0,1,115,1,115,31,0,17,127,1,115,41,0,1,0,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,0,1,0,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,0,1,0,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,4,0,2,0,1,115,1,115,5,0,1,115,1,123,5,0,1,115,49,113,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,8,0,19,0,0,115,0,115,2,0,1,115,1,115,19,0,0,115,0,115,18,0,0,115,17,109,2,0,1,115,1,115,19,0,0,115,0,115,2,0,1,115,1,115,5,0,1,115,9,123,0,0,0,0,0,0,0,0,0,0,0,0,46,0,1,0,5,0,1,115,17,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,1,0,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,2,0,2,0,1,115,1,115,5,0,1,115,17,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,5,0,2,0,1,115,1,115,5,0,1,115,1,119,5,0,1,115,1,123,5,0,1,115,17,119,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,5,0,19,0,0,115,0,115,19,0,0,115,0,127,19,0,0,115,0,115,19,0,0,115,0,127,19,0,0,115,0,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,7,0,19,0,0,115,0,115,2,0,1,115,1,115,19,0,0,115,0,115,2,0,1,115,1,115,5,0,1,115,1,123,2,0,1,115,1,115,20,0,1,115,0,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,1,0,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,1,0,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,1,0,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,6,0,20,0,1,115,0,115,2,0,1,115,1,115,20,0,1,115,0,115,2,0,1,115,1,115,20,0,1,115,0,115,2,0,1,115,1,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,7,0,19,0,0,115,0,115,2,0,1,115,1,115,19,0,0,115,0,115,2,0,1,115,1,115,5,0,1,115,17,127,2,0,1,115,1,115,5,0,1,115,17,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,3,0,58,0,3,115,3,115,17,0,3,115,11,127,58,0,3,115,3,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,0,3,0,58,0,3,115,3,115,17,0,3,115,11,127,58,0,3,115,3,115], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+140826);
/* memory initializer */ allocate([12,22,5,2,31,29,22,12,39,19,41,4,10,37,8,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,77,111,110,107,101,121,32,87,114,101,110,99,104,0,0,0,0,0,0,0,74,68,32,100,105,114,116,121,59,77,71,32,100,105,114,116,121,0,0,0,69,118,101,110,32,70,108,111,119,0,0,0,0,0,0,0,0,0,0,0,90,101,114,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,68,32,108,101,97,100,59,77,71,32,100,105,114,116,121,0,0,0,0,87,111,110,100,101,114,119,97,108,108,0,0,0,0,0,0,0,0,0,0,66,117,100,100,121,32,72,111,108,108,121,0,0,0,0,0,0,0,0,0,80,108,117,115,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,111,109,101,32,79,117,116,0,0,0,0,0,0,0,0,0,0,0,0,68,114,105,118,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,111,109,101,32,65,114,111,117,110,100,0,0,0,0,0,0,0,0,0,90,101,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,97,110,100,109,97,110,0,0,0,0,0,0,0,0,0,0,0,0,0,67,108,101,97,110,32,105,110,116,114,111,0,0,0,0,0,0,0,0,0,73,110,116,114,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,101,114,115,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,68,32,108,101,97,100,0,0,0,0,0,0,0,0,0,0,0,0,0,74,68,32,108,101,97,100,59,77,71,32,99,108,101,97,110,0,0,0,0,74,68,32,99,108,101,97,110,59,77,71,32,99,108,101,97,110,0,0,0,74,68,32,99,108,101,97,110,59,77,71,32,100,105,114,116,121,0,0,0,67,114,97,119,108,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,83,111,110,103,32,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,101,120,32,84,121,112,101,32,84,104,105,110,103,0,0,0,0,0,0,77,114,32,74,111,110,101,115,0,0,0,0,0,0,0,0,0,0,0,0,66,108,117,101,32,67,97,114,115,0,0,0,0,0,0,0,0,0,0,0,73,110,32,66,108,111,111,109,0,0,0,0,0,0,0,0,0,0,0,0,72,97,115,104,32,80,105,112,101,0,0,0,0,0,0,0,0,0,0,0,77,121,32,72,101,114,111,0,0,0,0,0,0,0,0,0,0,0,0,0,77,97,99,104,105,110,101,104,101,97,100,0,0,0,0,0,0,0,0,0,72,111,108,105,100,97,121,0,0,0,0,0,0,0,0,0,0,0,0,0,74,68,32,100,105,114,116,121,59,77,71,32,108,101,97,100,0,0,0,0,67,108,111,115,105,110,103,32,84,105,109,101,0,0,0,0,0,0,0,0,66,114,97,105,110,32,83,116,101,119,0,0,0,0,0,0,0,0,0,0,66,111,117,110,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,32,65,108,111,110,101,0,0,0,0,0,0,0,0,0,0,0,0,0,67,117,109,98,101,114,115,111,109,101,0,0,0,0,0,0,0,0,0,0,76,117,109,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,101,121,32,74,101,97,108,111,117,115,121,0,0,0,0,0,0,0,0,75,114,121,112,116,111,110,105,116,101,0,0,0,0,0,0,0,0,0,0,74,68,32,99,108,101,97,110,59,77,71,32,108,101,97,100,0,0,0,0,68,97,109,109,105,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,101,109,105,45,99,104,97,114,109,101,100,0,0,0,0,0,0,0,0,77,121,32,79,119,110,32,87,111,114,115,116,32,69,110,101,109,121,0,0,84,104,101,32,77,105,100,100,108,101,0,0,0,0,0,0,0,0,0,0,66,117,108,108,101,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,102,32,89,111,117,32,67,111,117,108,100,32,79,110,108,121,0,0,0,66,101,97,117,116,105,102,117,108,32,68,105,115,97,115,116,101,114,0,0,66,101,108,108,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,117,101,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,104,97,116,32,73,32,71,111,116,0,0,0,0,0,0,0,0,0,0,83,97,121,32,73,116,32,65,105,110,116,32,83,111,0,0,0,0,0,0,83,104,105,110,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,97,115,107,101,116,99,97,115,101,0,0,0,0,0,0,0,0,0,0,66,114,101,101,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,105,116,104,105,117,109,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,100,111,110,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,111,114,121,32,111,102,32,97,32,71,105,114,108,0,0,0,0,0,82,104,121,116,104,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,114,105,112,112,105,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,4,4,4,4,5,5,5,6,6,6,7,7,8,8,9,9,10,10,11,12,12,13,14,15,16,17,18,19,20,21,22,24,25,26,28,30,32,33,35,38,40,42,45,47,50,53,57,60,64,67,71,76,80,85,90,95,101,107,113,120,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,108,111,97,100,32,112,114,111,103,114,97,109,0,108,111,97,100,32,115,99,101,110,101,0,99,108,101,97,110,0,100,105,114,116,121,0,77,73,68,73,32,115,101,116,32,65,77,80,49,32,37,115,0,77,73,68,73,32,115,101,116,32,65,77,80,50,32,37,115,0,88,0,89,0,53,0,77,73,68,73,32,115,101,116,32,65,77,80,49,32,118,111,108,117,109,101,32,61,32,37,99,37,100,46,37,115,0,77,73,68,73,32,115,101,116,32,65,77,80,50,32,118,111,108,117,109,101,32,61,32,37,99,37,100,46,37,115,0,100,101,102,97,117,108,116,32,115,99,101,110,101,0,110,101,120,116,32,115,99,101,110,101,0,112,114,101,118,32,115,99,101,110,101,0,110,101,120,116,32,112,114,111,103,114,97,109,0,110,101,120,116,32,115,111,110,103,0,112,114,101,118,32,112,114,111,103,114,97,109,0,112,114,101,118,32,115,111,110,103,0,99,104,97,110,103,101,32,115,101,116,108,105,115,116,32,109,111,100,101,0,114,101,115,101,116,32,97,109,112,115,0,114,101,115,101,116,32,97,109,112,37,99,0,117,112,100,97,116,101,32,76,67,68,0,66,79,84,72,0,77,71,47,74,68,0,86,79,76,61,48,0,86,79,76,45,45,0,86,79,76,43,43,0,84,65,80,0,80,82,69,86,32,83,67,69,78,69,0,78,69,88,84,32,83,67,69,78,69,0,68,73,82,84,89,0,88,47,89,0,80,73,84,67,72,0,67,72,79,82,85,83,0,68,69,76,65,89,0,70,73,76,84,69,82,0,80,82,69,86,32,83,79,78,71,0,78,69,88,84,32,83,79,78,71,0,77,71,32,32,48,46,48,100,66,32,32,74,68,32,32,48,46,48,100,66,0,80,114,111,103,114,97,109,32,32,32,32,32,32,32,32,32,35,32,32,32,0,50,48,49,52,45,48,49,45,48,49,32,32,32,32,32,32,32,35,32,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,50,97,36,48,48,36,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,117,0,56,98,32,208,193,210,207,204,216,0,86,85,114,80,109,88,68,54,113,47,110,86,83,83,112,55,112,78,68,104,67,82,57,48,55,49,73,102,73,82,101,0,85,0,105,49,68,55,48,57,118,102,97,109,117,108,105,109,108,71,99,113,48,113,113,51,85,118,117,85,97,115,118,69,97,0,85,0,255,163,51,52,255,255,255,163,51,52,53,0,1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1,95,48,46,46,46,47,57,90,122,0,128,120,0,128,255,128,1,32,127,129,128,128,13,10,255,127,32,129,32,116,101,115,116,0,95,48,46,46,46,47,57,90,122,88,55,105,83,74,78,100,50,49,115,85,0,128,120,50,50,47,119,75,53,50,90,75,71,65,0,120,0,88,121,48,49,64,35,1,2,128,127,255,13,10,129,9,32,33,0,36,49,36,97,98,99,100,48,49,50,51,36,0,36,49,36,97,98,99,100,48,49,50,51,36,57,81,99,103,56,68,121,118,105,101,107,86,51,116,68,71,77,90,121,110,74,49,0,88,121,48,49,64,35,1,2,128,127,255,13,10,129,9,32,33,0,36,53,36,114,111,117,110,100,115,61,49,50,51,52,36,97,98,99,48,49,50,51,52,53,54,55,56,57,36,0,36,53,36,114,111,117,110,100,115,61,49,50,51,52,36,97,98,99,48,49,50,51,52,53,54,55,56,57,36,51,86,102,68,106,80,116,48,53,86,72,70,110,52,55,67,47,111,106,70,90,54,75,82,80,89,114,79,106,106,49,108,76,98,72,46,100,107,70,51,98,90,54,0,88,121,48,49,64,35,1,2,128,127,255,13,10,129,9,32,33,0,36,54,36,114,111,117,110,100,115,61,49,50,51,52,36,97,98,99,48,49,50,51,52,53,54,55,56,57,36,0,36,54,36,114,111,117,110,100,115,61,49,50,51,52,36,97,98,99,48,49,50,51,52,53,54,55,56,57,36,66,67,112,116,56,122,76,114,99,47,82,99,121,117,88,109,67,68,79,69,49,65,76,113,77,88,66,50,77,72,54,110,49,103,56,57,49,72,104,70,106,56,46,119,55,76,120,71,118,46,70,84,107,113,113,54,86,120,99,47,107,109,51,89,48,106,69,48,106,50,52,106,89,53,80,73,118,47,111,79,117,54,114,101,103,49,0,42,0,18,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,17,34,35,36,17,37,38,39,40,41,42,43,44,17,45,46,47,16,16,48,16,16,16,16,16,16,16,49,50,51,16,52,53,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,54,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,55,17,17,17,17,56,17,57,58,59,60,61,62,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,63,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,64,65,17,66,67,68,69,70,71,72,73,16,16,16,74,75,76,77,78,16,16,16,79,80,16,16,16,16,81,16,16,16,16,16,16,16,16,16,17,17,17,82,83,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,84,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,85,16,16,16,16,86,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,87,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,88,89,90,91,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,92,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,7,254,255,255,7,0,0,0,0,0,4,32,4,255,255,127,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,195,255,3,0,31,80,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,223,60,64,215,255,255,251,255,255,255,255,255,255,255,255,255,191,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,254,255,255,255,127,2,254,255,255,255,255,0,0,0,0,0,255,191,182,0,255,255,255,7,7,0,0,0,255,7,255,255,255,255,255,255,255,254,255,195,255,255,255,255,255,255,255,255,255,255,255,255,239,31,254,225,255,159,0,0,255,255,255,255,255,255,0,224,255,255,255,255,255,255,255,255,255,255,255,255,3,0,255,255,255,255,255,7,48,4,255,255,255,252,255,31,0,0,255,255,255,1,0,0,0,0,0,0,0,0,253,31,0,0,0,0,0,0,240,3,255,127,255,255,255,255,255,255,255,239,255,223,225,255,207,255,254,254,238,159,249,255,255,253,197,227,159,89,128,176,207,255,3,0,238,135,249,255,255,253,109,195,135,25,2,94,192,255,63,0,238,191,251,255,255,253,237,227,191,27,1,0,207,255,0,0,238,159,249,255,255,253,237,227,159,25,192,176,207,255,2,0,236,199,61,214,24,199,255,195,199,29,129,0,192,255,0,0,238,223,253,255,255,253,239,227,223,29,96,3,207,255,0,0,236,223,253,255,255,253,239,227,223,29,96,64,207,255,6,0,236,223,253,255,255,255,255,231,223,93,128,0,207,255,0,252,236,255,127,252,255,255,251,47,127,128,95,255,0,0,12,0,254,255,255,255,255,127,255,7,63,32,255,3,0,0,0,0,150,37,240,254,174,236,255,59,95,32,255,243,0,0,0,0,1,0,0,0,255,3,0,0,255,254,255,255,255,31,254,255,3,255,255,254,255,255,255,31,0,0,0,0,0,0,0,0,255,255,255,255,255,255,127,249,255,3,255,255,231,193,255,255,127,64,255,51,255,255,255,255,191,32,255,255,255,255,255,247,255,255,255,255,255,255,255,255,255,61,127,61,255,255,255,255,255,61,255,255,255,255,61,127,61,255,127,255,255,255,255,255,255,255,61,255,255,255,255,255,255,255,255,135,0,0,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,31,0,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,159,255,255,254,255,255,7,255,255,255,255,255,255,255,255,255,199,1,0,255,223,15,0,255,255,15,0,255,255,15,0,255,223,13,0,255,255,255,255,255,255,207,255,255,1,128,16,255,3,0,0,0,0,255,3,255,255,255,255,255,255,255,255,255,255,255,0,255,255,255,255,255,7,255,255,255,255,255,255,255,255,63,0,255,255,255,31,255,15,255,1,192,255,255,255,255,63,31,0,255,255,255,255,255,15,255,255,255,3,255,3,0,0,0,0,255,255,255,15,255,255,255,255,255,255,255,127,254,255,31,0,255,3,255,3,128,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,239,255,239,15,255,3,0,0,0,0,255,255,255,255,255,243,255,255,255,255,255,255,191,255,3,0,255,255,255,255,255,255,63,0,255,227,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,222,111,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,255,255,63,63,255,255,255,255,63,63,255,170,255,255,255,63,255,255,255,255,255,255,223,95,220,31,207,15,255,31,220,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,128,0,0,255,31,0,0,0,0,0,0,0,0,0,0,0,0,132,252,47,62,80,189,255,243,224,67,0,0,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,255,255,255,255,255,255,3,0,0,255,255,255,255,255,127,255,255,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,120,12,0,255,255,255,255,191,32,255,255,255,255,255,255,255,128,0,0,255,255,127,0,127,127,127,127,127,127,127,127,255,255,255,255,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,0,0,0,254,3,62,31,254,255,255,255,255,255,255,255,255,255,127,224,254,255,255,255,255,255,255,255,255,255,255,247,224,255,255,255,255,63,254,255,255,255,255,255,255,255,255,255,255,127,0,0,255,255,255,7,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,0,0,0,0,0,0,255,255,255,255,255,63,255,31,255,255,255,15,0,0,255,255,255,255,255,127,240,143,255,255,255,128,255,255,255,255,255,255,255,255,255,255,0,0,0,0,128,255,252,255,255,255,255,255,255,255,255,255,255,255,255,121,15,0,255,7,0,0,0,0,0,0,0,0,0,255,187,247,255,255,255,0,0,0,255,255,255,255,255,255,15,0,255,255,255,255,255,255,255,255,15,0,255,3,0,0,252,8,255,255,255,255,255,7,255,255,255,255,7,0,255,255,255,31,255,255,255,255,255,255,247,255,0,128,255,3,0,0,0,0,255,255,255,255,255,255,127,0,255,63,255,3,255,255,127,4,255,255,255,255,255,255,255,127,5,0,0,56,255,255,60,0,126,126,126,0,127,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,7,255,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,255,127,248,255,255,255,255,255,15,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,0,127,0,248,224,255,253,127,95,219,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,248,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,255,255,255,255,255,255,255,255,252,255,255,255,255,255,255,0,0,0,0,0,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,255,3,254,255,255,7,254,255,255,7,192,255,255,255,255,255,255,255,255,255,255,127,252,252,252,28,0,0,0,0,255,239,255,255,127,255,255,183,255,63,255,63,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,7,0,0,0,0,0,0,0,0,255,255,255,255,255,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,31,255,255,255,255,255,255,1,0,0,0,0,0,255,255,255,127,0,0,255,255,255,7,0,0,0,0,0,0,255,255,255,63,255,255,255,255,15,255,62,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,3,0,0,0,0,0,0,0,0,0,0,63,253,255,255,255,255,191,145,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,63,0,255,255,255,3,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,192,0,0,0,0,0,0,0,0,111,240,239,254,255,255,15,0,0,0,0,0,255,255,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,63,0,255,255,63,0,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,192,255,0,0,252,255,255,255,255,255,255,1,0,0,255,255,255,1,255,3,255,255,255,255,255,255,199,255,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,30,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,63,0,255,3,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,31,0,255,255,255,255,255,127,0,0,248,255,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,223,255,255,255,255,255,255,255,255,223,100,222,255,235,239,255,255,255,255,255,255,255,191,231,223,223,255,255,255,123,95,252,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,255,255,253,255,255,247,255,255,255,247,255,255,223,255,255,255,223,255,255,127,255,255,255,127,255,255,255,253,255,255,255,253,255,255,247,207,255,255,255,255,255,255,239,255,255,255,150,254,247,10,132,234,150,170,150,247,247,94,255,251,255,15,238,251,255,15,0,0,0,0,0,0,0,0,97,108,110,117,109,0,97,108,112,104,97,0,98,108,97,110,107,0,99,110,116,114,108,0,100,105,103,105,116,0,103,114,97,112,104,0,108,111,119,101,114,0,112,114,105,110,116,0,112,117,110,99,116,0,115,112,97,99,101,0,117,112,112,101,114,0,120,100,105,103,105,116,0,18,16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,16,16,34,35,16,36,37,38,39,40,41,42,43,16,44,45,46,17,47,48,17,17,49,17,17,17,50,51,52,53,54,55,56,57,17,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,58,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,59,16,60,61,62,63,64,65,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,66,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,67,16,16,68,16,69,70,71,16,72,16,73,16,16,16,16,74,75,76,77,16,16,78,16,79,80,16,16,16,16,81,16,16,16,16,16,16,16,16,16,16,16,16,16,82,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,83,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,84,85,86,87,16,16,88,89,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,90,16,91,92,93,94,95,96,97,98,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,254,255,0,252,1,0,0,248,1,0,0,120,0,0,0,0,255,251,223,251,0,0,128,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,252,255,224,175,255,255,255,255,255,255,255,255,255,255,223,255,255,255,255,255,32,64,176,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,0,0,0,0,0,134,254,255,255,255,0,64,73,0,0,0,0,0,24,0,223,255,0,200,0,0,0,0,0,0,0,1,0,60,0,0,0,0,0,0,0,0,0,0,0,0,16,224,1,30,0,96,255,191,0,0,0,0,0,0,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,207,3,0,0,0,3,0,32,255,127,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,0,0,0,0,0,0,0,0,0,16,0,32,30,0,48,0,1,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,252,15,0,0,0,0,0,0,0,16,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,3,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,253,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,255,7,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,255,0,0,0,0,0,0,0,16,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,63,2,0,0,0,0,0,0,0,0,0,4,0,0,0,0,16,0,0,0,0,0,0,128,0,128,192,223,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,254,255,255,255,0,252,255,255,0,0,0,0,0,0,0,0,252,0,0,0,0,0,0,192,255,223,255,7,0,0,0,0,0,0,0,0,0,0,128,6,0,252,0,0,24,62,0,0,128,191,0,204,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,96,255,255,255,31,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,1,0,0,24,0,0,0,0,0,0,0,0,0,56,0,0,0,0,16,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,254,127,47,0,0,255,3,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,255,255,255,255,0,0,0,192,0,0,0,0,0,0,0,0,1,0,224,159,0,0,0,0,127,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,0,0,252,255,255,255,31,0,0,0,0,0,12,0,0,0,0,0,0,64,0,12,240,0,0,0,0,0,0,192,248,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,255,0,255,255,255,33,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,127,0,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,3,224,0,224,0,224,0,96,128,248,255,255,255,252,255,255,255,255,255,127,31,252,241,127,255,127,0,0,255,255,255,3,0,0,255,255,255,255,1,0,123,3,208,193,175,66,0,12,31,188,255,255,0,0,0,0,0,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,255,255,255,127,0,0,0,255,7,0,0,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,252,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,135,3,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,127,255,15,0,0,0,0,0,0,0,0,255,255,255,251,255,255,255,255,255,255,255,255,255,255,15,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,255,15,30,255,255,255,1,252,193,224,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,255,255,255,255,15,0,0,0,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,127,0,0,0,0,0,0,192,0,224,0,0,0,0,0,0,0,0,0,0,0,128,15,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,255,127,0,3,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,8,0,0,0,15,255,3,0,0,0,0,0,0,240,0,0,0,0,0,0,0,0,0,16,192,0,0,255,255,3,7,0,0,0,0,0,248,0,0,0,0,8,128,0,0,0,0,0,0,0,0,0,0,8,0,255,63,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,0,128,11,0,0,0,0,0,0,0,128,2,0,0,192,0,0,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,255,255,255,3,127,0,255,255,255,255,247,255,127,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,254,255,0,252,1,0,0,248,1,0,0,248,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,127,0,48,135,255,255,255,255,255,143,255,0,0,0,0,0,0,224,255,255,7,255,15,0,0,0,0,0,0,255,255,255,255,255,63,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,143,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,255,0,255,1,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,63,252,255,63,0,0,0,3,0,0,0,0,0,0,254,3,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,7,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,255,255,255,255,127,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,127,0,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,8,0,0,0,8,0,0,32,0,0,0,32,0,0,128,0,0,0,128,0,0,0,2,0,0,0,2,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,255,255,255,255,255,15,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,127,254,127,254,255,254,255,0,0,0,0,255,7,255,255,255,127,255,255,255,255,255,255,255,15,255,255,255,255,255,7,0,0,0,0,0,0,0,0,192,255,255,255,7,0,255,255,255,255,255,7,255,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,191,255,255,255,255,255,255,255,255,31,255,255,15,0,255,255,255,255,223,7,0,0,255,255,1,0,255,255,255,255,255,255,255,127,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,30,255,255,255,255,255,255,255,63,15,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,255,255,255,255,255,225,255,0,0,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,111,117,112,112,101,114,0,116,111,108,111,119,101,114,0,16,16,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,16,16,32,16,16,16,33,34,35,36,37,38,39,16,16,40,16,16,16,16,16,16,16,16,16,16,16,41,42,16,16,43,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,44,16,45,46,47,48,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,49,16,16,50,51,16,52,16,16,16,16,16,16,16,16,53,16,16,16,16,16,54,55,16,16,16,16,56,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,57,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,58,59,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+155736);
/* memory initializer */ allocate([248,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,191,182,0,0,0,0,0,0,0,31,0,255,7,0,0,0,0,0,248,255,255,0,0,1,0,0,0,0,0,0,0,0,0,0,0,192,191,159,61,0,0,0,128,2,0,0,0,255,255,255,7,0,0,0,0,0,0,0,0,0,0,192,255,1,0,0,0,0,0,0,248,15,0,0,0,192,251,239,62,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,255,255,127,7,0,0,0,0,0,0,20,254,33,254,0,12,0,0,0,2,0,0,0,0,0,0,16,30,32,0,0,12,0,0,0,6,0,0,0,0,0,0,16,134,57,2,0,0,0,35,0,6,0,0,0,0,0,0,16,190,33,0,0,12,0,0,0,2,0,0,0,0,0,0,144,30,32,64,0,12,0,0,0,4,0,0,0,0,0,0,0,1,32,0,0,0,0,0,0,0,0,0,0,0,0,0,192,193,61,96,0,12,0,0,0,0,0,0,0,0,0,0,144,64,48,0,0,12,0,0,0,0,0,0,0,0,0,0,0,30,32,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,4,92,0,0,0,0,0,0,0,0,0,0,0,242,7,128,127,0,0,0,0,0,0,0,0,0,0,0,0,242,27,0,63,0,0,0,0,0,0,0,0,0,3,0,0,160,2,0,0,0,0,0,0,254,127,223,224,255,254,255,255,255,31,64,0,0,0,0,0,0,0,0,0,0,0,0,224,253,102,0,0,0,195,1,0,30,0,100,32,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,28,0,0,0,12,0,0,0,12,0,0,0,0,0,0,0,176,63,64,254,15,32,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,1,4,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,1,0,0,0,0,0,0,64,127,229,31,248,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,208,23,4,0,0,0,0,248,15,0,3,0,0,0,60,11,0,0,0,0,0,0,64,163,3,0,0,0,0,0,0,240,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,255,253,33,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,127,0,0,240,0,248,0,0,0,124,0,0,0,0,0,0,31,252,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,247,63,0,0,0,128,0,0,0,0,0,0,0,0,0,0,3,0,68,8,0,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,255,255,3,0,0,0,0,0,192,63,0,0,128,255,3,0,0,0,0,0,7,0,0,0,0,0,200,19,0,0,0,0,0,0,0,0,0,0,0,0,0,126,102,0,8,16,0,0,0,0,0,0,0,0,0,0,0,0,157,193,2,0,0,0,0,48,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,33,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,110,240,0,0,0,0,0,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,255,127,0,0,0,0,0,0,0,3,0,0,0,0,0,120,38,0,0,0,0,0,0,0,0,7,0,0,0,128,239,31,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,192,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,3,248,255,231,15,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,18,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,19,16,16,16,16,16,16,16,16,16,16,20,21,22,23,24,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,25,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,26,16,16,16,16,27,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,28,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,16,16,16,29,30,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,31,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,32,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,248,0,0,0,0,0,0,0,0,0,0,252,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,251,255,255,255,255,255,255,255,255,255,255,15,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,255,15,255,255,255,255,255,255,255,127,254,255,255,255,255,255,255,255,255,255,127,254,255,255,255,255,255,255,255,255,255,255,255,255,224,255,255,255,255,63,254,255,255,255,255,255,255,255,255,255,255,127,255,255,255,255,255,7,255,255,255,255,15,0,255,255,255,255,255,127,255,255,255,255,255,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,255,127,248,255,255,255,255,255,15,0,0,255,3,0,0,255,255,255,255,247,255,127,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,255,255,255,255,255,7,255,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,47,112,114,111,99,47,115,101,108,102,47,102,100,47,0,117,116,102,56,0,0,200,119,99,104,97,114,116,0,0,198,117,99,115,50,0,117,99,115,50,98,101,0,0,196,117,99,115,50,108,101,0,0,197,117,116,102,49,54,0,117,116,102,49,54,98,101,0,0,194,117,116,102,49,54,108,101,0,0,193,117,99,115,52,0,117,99,115,52,98,101,0,117,116,102,51,50,0,117,116,102,51,50,98,101,0,0,192,117,99,115,52,108,101,0,117,116,102,51,50,108,101,0,0,195,97,115,99,105,105,0,117,115,97,115,99,105,105,0,105,115,111,54,52,54,0,105,115,111,54,52,54,117,115,0,0,199,101,117,99,106,112,0,0,208,115,104,105,102,116,106,105,115,0,115,106,105,115,0,0,209,103,98,49,56,48,51,48,0,0,216,103,98,107,0,0,217,103,98,50,51,49,50,0,0,218,98,105,103,53,0,98,105,103,102,105,118,101,0,99,112,57,53,48,0,98,105,103,53,104,107,115,99,115,0,0,224,101,117,99,107,114,0,107,115,99,53,54,48,49,0,107,115,120,49,48,48,49,0,99,112,57,52,57,0,0,232,105,115,111,56,56,53,57,49,0,108,97,116,105,110,49,0,0,128,105,115,111,56,56,53,57,50,0,0,32,0,84,0,137,18,0,32,1,6,0,0,152,65,134,26,127,0,48,72,32,0,88,32,201,18,0,36,17,198,35,0,156,81,198,26,128,80,66,136,32,90,0,0,192,4,0,16,113,1,0,29,0,112,2,0,41,0,0,192,7,33,48,1,5,0,0,88,1,0,0,94,208,1,128,29,0,0,128,6,0,91,0,0,0,5,0,20,129,1,0,30,0,128,2,0,42,0,0,0,8,34,52,17,5,0,0,92,1,0,0,95,212,1,192,29,0,0,144,70,36,105,115,111,56,56,53,57,51,0,0,32,0,212,0,9,0,0,4,48,3,0,0,244,64,70,11,63,0,16,64,32,0,216,0,0,0,0,0,64,3,0,0,248,80,134,11,64,0,16,128,32,0,0,0,64,0,0,108,144,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,188,0,0,0,43,0,0,0,0,0,200,33,6,0,0,0,0,64,0,0,112,160,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,192,0,0,0,44,0,0,0,0,0,204,49,70,36,105,115,111,56,56,53,57,52,0,0,32,0,84,48,4,23,0,220,96,4,0,0,152,49,66,12,108,0,48,8,0,0,88,32,73,23,0,224,112,196,35,0,156,65,130,12,109,72,65,200,20,17,0,0,0,0,0,0,0,192,14,29,0,112,2,0,37,0,0,64,14,33,56,65,69,16,0,0,0,0,0,0,224,1,0,0,0,184,1,7,0,18,0,0,0,0,0,0,0,0,15,30,0,128,2,0,38,0,0,128,14,34,60,81,133,16,0,0,0,0,0,0,228,1,0,0,0,188,17,71,36,105,115,111,56,56,53,57,53,0,0,32,0,136,51,14,57,229,152,115,14,58,233,168,179,14,59,237,0,224,206,59,240,196,35,207,60,244,212,99,207,61,248,228,163,207,62,252,244,227,207,63,0,5,36,208,64,4,21,100,208,65,8,37,164,208,66,12,53,228,208,67,16,69,36,209,68,20,85,100,209,69,24,101,164,209,70,28,117,228,209,71,32,133,36,210,72,36,149,100,210,73,40,165,164,210,74,44,181,228,210,75,53,194,20,147,76,51,209,84,147,77,55,225,148,147,78,59,13,192,83,79,105,115,111,56,56,53,57,54,0,0,32,0,4,16,64,0,0,4,16,64,0,1,4,16,64,0,115,1,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,0,93,1,4,16,64,93,1,216,117,23,94,121,233,181,23,95,125,249,245,23,96,129,9,54,24,97,133,25,118,24,98,137,41,182,24,99,141,57,246,88,0,1,4,16,64,0,144,69,38,217,100,148,85,102,217,101,152,101,166,217,102,156,117,230,217,103,160,133,38,90,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,105,115,111,56,56,53,57,55,0,0,32,0,144,88,34,0,51,210,8,0,0,0,0,160,9,0,0,0,16,128,136,0,0,0,0,0,155,112,210,9,0,158,124,2,10,0,161,0,32,202,40,164,148,98,202,41,168,164,162,202,42,172,180,226,202,43,176,196,34,203,44,180,212,18,128,45,183,224,146,139,46,187,240,210,139,47,191,0,19,140,48,195,16,83,140,49,199,32,147,140,50,203,48,211,140,51,207,64,19,141,52,211,80,83,141,53,215,96,147,141,54,219,112,211,141,55,223,128,19,78,0,105,115,111,56,56,53,57,56,0,0,32,0,4,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,0,0,0,0,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,192,136,83,81,85,149,85,87,97,149,149,86,91,113,213,149,87,95,129,21,150,88,99,145,85,150,89,103,161,149,150,90,107,177,213,86,0,1,120,248,97,0,105,115,111,56,56,53,57,57,0,0,80,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,64,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,80,6,0,105,115,111,56,56,53,57,49,48,0,0,32,0,84,48,66,12,57,220,16,4,0,70,132,96,6,27,131,0,0,135,20,0,88,64,130,12,58,224,32,4,0,71,136,112,70,27,132,136,24,199,20,17,0,0,0,0,0,0,0,192,14,29,0,112,2,0,37,0,0,0,0,0,56,65,5,0,0,0,0,128,27,0,224,1,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,15,30,0,128,2,0,38,0,0,0,0,0,60,81,5,0,0,0,0,192,27,0,228,1,0,0,0,0,0,192,16,105,115,111,56,56,53,57,49,49,0,116,105,115,54,50,48,0,0,32,0,188,6,91,108,178,205,70,91,109,182,221,134,91,110,186,237,198,91,111,190,253,6,92,112,194,13,71,92,113,198,29,135,92,114,202,45,199,92,115,206,61,7,93,116,210,77,71,93,117,214,93,135,93,118,218,109,199,93,119,222,125,7,94,120,226,141,71,94,121,230,157,135,94,0,1,4,16,64,122,234,173,199,94,123,238,189,7,95,124,242,205,71,95,125,246,221,135,95,126,250,237,199,95,127,254,253,7,96,128,2,14,72,96,129,1,4,16,64,0,105,115,111,56,56,53,57,49,51,0,0,32,0,160,8,0,0,0,164,8,0,0,13,0,192,5,0,0,0,0,192,2,0,0,0,0,0,39,2,0,0,0,16,0,208,5,0,0,0,0,128,3,21,236,16,193,5,0,0,112,194,8,29,0,240,71,9,49,4,145,131,17,102,48,225,4,0,84,0,0,0,0,120,40,1,6,28,0,4,50,8,0,22,240,32,1,6,0,0,128,2,9,30,0,0,136,9,50,8,161,195,17,103,52,241,4,0,85,0,0,0,0,121,44,17,70,28,0,8,66,72,137,105,115,111,56,56,53,57,49,52,0,0,32,0,24,120,32,0,27,112,128,32,0,20,2,96,97,130,26,2,0,128,31,10,46,248,2,12,12,54,8,128,131,21,62,120,33,132,27,98,152,97,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,128,132,0,0,0,0,0,0,0,192,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,0,0,0,0,0,0,0,192,132,0,0,0,0,0,0,0,208,7,0,105,115,111,56,56,53,57,49,53,0,108,97,116,105,110,57,0,0,36,51,2,96,6,0,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,0,0,0,0,132,0,0,0,0,88,100,225,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,115,111,56,56,53,57,49,54,0,0,32,0,84,96,129,18,51,166,104,6,0,103,0,160,8,0,127,0,0,72,32,0,0,208,193,18,131,160,8,0,0,132,120,176,8,0,88,100,225,135,32,0,0,0,192,4,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,33,48,1,0,0,0,88,1,0,24,118,0,0,0,0,0,156,192,8,0,0,0,0,0,5,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,34,52,1,0,0,0,92,1,64,24,119,0,0,0,0,0,160,208,8,0,99,112,49,50,53,48,0,119,105,110,100,111,119,115,49,50,53,48,0,0,0,51,6,96,98,0,41,182,168,226,138,1,184,104,198,139,96,168,49,200,31,1,144,88,226,137,40,178,8,98,136,1,216,120,6,140,97,172,65,8,32,0,60,2,137,18,0,84,0,0,0,0,0,64,6,0,0,0,0,64,32,0,0,32,201,18,0,0,0,0,0,0,88,80,6,0,72,80,146,132,32,90,0,0,192,4,0,16,113,1,0,29,0,112,2,0,41,0,0,192,7,33,48,1,5,0,0,88,1,0,0,94,208,1,128,29,0,0,128,6,0,91,0,0,0,5,0,20,129,1,0,30,0,128,2,0,42,0,0,0,8,34,52,17,5,0,0,92,1,0,0,95,212,1,192,29,0,0,144,70,36,99,112,49,50,53,49,0,119,105,110,100,111,119,115,49,50,53,49,0,0,0,227,144,99,162,76,41,182,168,226,138,51,186,168,206,139,235,180,195,206,59,49,145,88,226,137,40,178,8,98,136,1,216,136,19,140,57,237,164,83,79,0,184,195,83,58,0,248,4,0,0,226,0,80,14,0,0,0,0,0,58,0,0,112,78,77,63,1,0,0,0,48,213,56,19,0,55,153,67,147,77,240,196,35,207,60,244,212,99,207,61,248,228,163,207,62,252,244,227,207,63,0,5,36,208,64,4,21,100,208,65,8,37,164,208,66,12,53,228,208,67,16,69,36,209,68,20,85,100,209,69,24,101,164,209,70,28,117,228,209,71,32,133,36,210,72,36,149,100,210,73,40,165,164,210,74,44,181,228,210,75,99,112,49,50,53,50,0,119,105,110,100,111,119,115,49,50,53,50,0,0,0,51,6,96,98,33,41,182,168,226,138,142,184,104,198,139,88,4,48,72,0,1,144,88,226,137,40,178,8,98,136,147,216,120,6,140,89,4,64,136,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,112,49,50,53,51,0,119,105,110,100,111,119,115,49,50,53,51,0,0,0,51,6,96,98,33,41,182,168,226,138,1,184,24,192,139,1,4,16,64,0,1,144,88,226,137,40,178,8,98,136,1,216,24,0,140,1,4,16,64,0,0,112,210,9,0,0,0,0,0,0,0,0,16,0,0,0,0,0,128,136,0,0,0,0,0,155,0,0,0,0,158,124,2,10,0,161,0,32,202,40,164,148,98,202,41,168,164,162,202,42,172,180,226,202,43,176,196,34,203,44,180,212,18,128,45,183,224,146,139,46,187,240,210,139,47,191,0,19,140,48,195,16,83,140,49,199,32,147,140,50,203,48,211,140,51,207,64,19,141,52,211,80,83,141,53,215,96,147,141,54,219,112,211,141,55,223,128,19,78,0,99,112,49,50,53,52,0,119,105,110,100,111,119,115,49,50,53,52,0,0,0,51,6,96,98,33,41,182,168,226,138,142,184,104,198,139,88,4,16,64,0,1,144,88,226,137,40,178,8,98,136,147,216,120,6,140,89,4,16,128,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,64,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,80,6,0,99,112,49,50,53,53,0,119,105,110,100,111,119,115,49,50,53,53,0,0,0,51,6,96,98,33,41,182,168,226,138,142,184,24,192,139,1,4,16,64,0,1,144,88,226,137,40,178,8,98,136,147,216,24,0,140,1,4,16,64,0,0,0,0,0,0,49,2,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,0,0,0,0,0,0,64,5,37,212,80,68,21,101,212,81,72,37,21,128,82,75,49,213,148,83,79,65,21,149,84,110,189,5,87,92,114,5,16,64,0,1,4,16,64,0,83,81,85,149,85,87,97,149,149,86,91,113,213,149,87,95,129,21,150,88,99,145,85,150,89,103,161,149,150,90,107,177,213,86,0,1,120,248,97,0,99,112,49,50,53,54,0,119,105,110,100,111,119,115,49,50,53,54,0,0,0,51,146,102,98,33,41,182,168,226,138,142,184,56,218,139,88,148,134,154,105,170,145,88,226,137,40,178,8,98,136,169,217,120,26,140,89,112,216,225,106,0,204,5,0,0,0,0,0,0,0,0,0,192,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,23,0,0,0,0,64,93,173,217,117,23,94,121,233,181,23,95,125,249,245,23,96,129,9,54,24,97,133,25,118,24,98,137,41,182,24,0,140,53,230,216,99,144,69,38,217,100,0,80,6,64,101,150,93,134,25,0,0,0,0,0,0,153,105,6,0,0,155,113,214,153,103,0,124,6,26,0,161,1,32,26,0,0,120,248,161,107,99,112,49,50,53,55,0,119,105,110,100,111,119,115,49,50,53,55,0,0,0,51,6,96,98,0,41,182,168,226,138,1,184,24,192,139,1,16,240,136,2,1,144,88,226,137,40,178,8,98,136,1,216,24,0,140,1,24,32,73,0,0,4,0,0,0,0,4,0,0,0,13,0,192,5,0,0,0,0,192,2,0,0,0,0,0,0,0,0,0,0,16,0,208,5,0,0,0,0,128,3,21,236,16,193,5,0,0,112,194,8,29,0,240,71,9,49,4,145,131,17,102,48,225,4,0,84,0,0,0,0,120,40,1,6,28,0,4,50,8,0,22,240,32,1,6,0,0,128,2,9,30,0,0,136,9,50,8,161,195,17,103,52,241,4,0,85,0,0,0,0,121,44,17,70,28,0,8,66,72,36,99,112,49,50,53,56,0,119,105,110,100,111,119,115,49,50,53,56,0,0,0,51,6,96,98,33,41,182,168,226,138,142,184,24,192,139,88,4,16,64,0,1,144,88,226,137,40,178,8,98,136,147,216,24,0,140,89,4,16,128,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,4,0,0,0,0,0,0,0,0,0,0,149,0,0,0,0,33,0,128,9,0,0,24,2,0,0,0,0,0,0,0,0,32,114,9,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,150,0,0,0,0,34,0,144,9,0,0,28,2,0,0,0,0,0,0,0,0,36,34,35,0,107,111,105,56,114,0,0,0,62,254,8,100,144,66,14,73,100,145,70,30,137,164,153,103,162,153,166,154,107,178,217,38,143,110,222,136,99,142,58,238,40,64,143,7,32,144,192,3,73,42,185,36,76,76,54,233,228,147,80,70,41,229,148,84,86,105,229,149,88,102,169,165,56,91,114,217,165,151,95,130,25,166,152,99,146,89,102,1,46,65,20,145,73,20,85,68,210,68,37,97,148,145,70,27,113,212,145,71,31,189,4,82,72,34,141,100,145,68,44,173,116,17,74,45,165,116,146,74,14,193,19,143,65,244,212,67,208,60,5,225,147,143,62,251,240,211,143,63,255,60,4,80,64,2,13,100,143,60,12,45,116,15,66,13,37,116,144,66,107,111,105,56,117,0,0,0,62,254,8,100,144,66,14,73,100,145,70,30,137,164,153,103,162,153,166,154,107,178,217,38,143,110,222,136,99,142,58,238,40,64,143,7,32,144,192,3,73,42,185,36,76,51,53,89,147,77,80,70,41,229,148,84,254,100,229,149,88,102,169,165,56,229,112,121,14,58,95,130,25,166,152,99,250,84,102,1,46,65,20,145,73,20,85,68,210,68,37,97,148,145,70,27,113,212,145,71,31,189,4,82,72,34,141,100,145,68,44,173,116,17,74,45,165,116,146,74,14,193,19,143,65,244,212,67,208,60,5,225,147,143,62,251,240,211,143,63,255,60,4,80,64,2,13,100,143,60,12,45,116,15,66,13,37,116,144,66,0,8,4,4,8,4,4,8,2,4,0,195,138,204,132,195,138,204,140,195,170,204,132,195,170,204,140,0,109,101,115,115,97,103,101,115,0,94,91,121,89,93,0,94,91,110,78,93,0,121,101,115,0,110,111,0,83,117,110,0,77,111,110,0,84,117,101,0,87,101,100,0,84,104,117,0,70,114,105,0,83,97,116,0,83,117,110,100,97,121,0,77,111,110,100,97,121,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,84,104,117,114,115,100,97,121,0,70,114,105,100,97,121,0,83,97,116,117,114,100,97,121,0,74,97,110,0,70,101,98,0,77,97,114,0,65,112,114,0,77,97,121,0,74,117,110,0,74,117,108,0,65,117,103,0,83,101,112,0,79,99,116,0,78,111,118,0,68,101,99,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,77,97,114,99,104,0,65,112,114,105,108,0,77,97,121,0,74,117,110,101,0,74,117,108,121,0,65,117,103,117,115,116,0,83,101,112,116,101,109,98,101,114,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,68,101,99,101,109,98,101,114,0,65,77,0,80,77,0,37,97,32,37,98,32,37,101,32,37,84,32,37,89,0,37,109,47,37,100,47,37,121,0,37,72,58,37,77,58,37,83,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,37,109,47,37,100,47,37,121,0,48,49,50,51,52,53,54,55,56,57,0,37,97,32,37,98,32,37,101,32,37,84,32,37,89,0,37,72,58,37,77,58,37,83,0,46,0,0,85,84,70,45,56,0,67,0,80,79,83,73,88,0,67,46,85,84,70,45,56,0,0,0,0,0,0,0,0,58,32,105,108,108,101,103,97,108,32,111,112,116,105,111,110,58,32,0,58,32,111,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,58,32,0,80,87,68,0,37,42,91,94,10,93,37,42,91,10,93,0,32,37,110,37,42,115,37,110,32,37,110,37,42,115,37,110,32,37,110,37,42,115,37,110,32,37,110,37,42,115,37,110,32,37,100,32,37,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,115,9,37,115,9,37,115,9,37,115,9,37,100,9,37,100,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,100,101,118,47,112,116,109,120,0,47,100,101,118,47,112,116,115,47,37,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,98,32,37,101,32,37,84,0,91,0,93,0,60,37,100,62,37,115,32,37,115,37,115,37,46,48,100,37,115,58,32,0,50,62,47,100,101,118,47,110,117,108,108,0,101,118,97,108,32,34,112,114,105,110,116,102,32,37,115,92,92,92,92,48,32,120,32,36,49,32,36,50,34,0,114,0,47,100,101,118,47,115,104,109,47,0,0,0,0,0,0,0,37,46,50,88,0,58,37,46,50,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,112,114,111,99,47,110,101,116,47,105,102,95,105,110,101,116,54,0,114,98,101,0,37,120,32,37,120,32,37,120,32,37,120,32,37,115,0,116,99,112,0,117,100,112,0,58,32,0,37,115,37,115,37,115,0,72,111,115,116,32,110,111,116,32,102,111,117,110,100,0,84,114,121,32,97,103,97,105,110,0,78,111,110,45,114,101,99,111,118,101,114,97,98,108,101,32,101,114,114,111,114,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,85,110,107,110,111,119,110,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,100,46,37,100,46,37,100,46,37,100,0,37,120,58,37,120,58,37,120,58,37,120,58,37,120,58,37,120,58,37,120,58,37,120,0,37,120,58,37,120,58,37,120,58,37,120,58,37,120,58,37,120,58,37,100,46,37,100,46,37,100,46,37,100,0,58,48,0,47,101,116,99,47,114,101,115,111,108,118,46,99,111,110,102,0,110,97,109,101,115,101,114,118,101,114,0,0,0,0,0,0,0,0,0,0,0,255,255,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,0,105,112,54,46,97,114,112,97,0,37,100,46,37,100,46,37,100,46,37,100,46,105,110,45,97,100,100,114,46,97,114,112,97,0,47,0,78,111,32,101,114,114,111,114,0,78,111,32,109,97,116,99,104,0,73,110,118,97,108,105,100,32,114,101,103,101,120,112,0,85,110,107,110,111,119,110,32,99,111,108,108,97,116,105,110,103,32,101,108,101,109,101,110,116,0,85,110,107,110,111,119,110,32,99,104,97,114,97,99,116,101,114,32,99,108,97,115,115,32,110,97,109,101,0,84,114,97,105,108,105,110,103,32,98,97,99,107,115,108,97,115,104,0,73,110,118,97,108,105,100,32,98,97,99,107,32,114,101,102,101,114,101,110,99,101,0,77,105,115,115,105,110,103,32,39,93,39,0,77,105,115,115,105,110,103,32,39,41,39,0,77,105,115,115,105,110,103,32,39,125,39,0,73,110,118,97,108,105,100,32,99,111,110,116,101,110,116,115,32,111,102,32,123,125,0,73,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,114,97,110,103,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,112,101,116,105,116,105,111,110,32,110,111,116,32,112,114,101,99,101,100,101,100,32,98,121,32,118,97,108,105,100,32,101,120,112,114,101,115,115,105,111,110,0,0,85,110,107,110,111,119,110,32,101,114,114,111,114,0,37,115,0,115,104,0,45,99,0,47,98,105,110,47,115,104,0,116,101,109,112,0,37,115,47,37,115,45,37,100,45,37,100,45,37,120,0,119,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,116,109,112,0,47,116,109,112,47,116,37,120,45,37,120,0,104,104,0,104,0,0,0,0,0,108,0,0,76,0,0,108,108], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+166000);
/* memory initializer */ allocate([0,37,46,42,115,37,46,48,100,37,115,37,99,37,37,108,108,110,0,37,42,0,114,119,97,0,37,46,42,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,42,102,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,37,46,42,103,0,85,110,107,110,111,119,110,32,115,105,103,110,97,108,0,72,97,110,103,117,112,0,73,110,116,101,114,114,117,112,116,0,81,117,105,116,0,73,108,108,101,103,97,108,32,105,110,115,116,114,117,99,116,105,111,110,0,84,114,97,99,101,47,98,114,101,97,107,112,111,105,110,116,32,116,114,97,112,0,65,98,111,114,116,101,100,0,66,117,115,32,101,114,114,111,114,0,65,114,105,116,104,109,101,116,105,99,32,101,120,99,101,112,116,105,111,110,0,75,105,108,108,101,100,0,85,115,101,114,32,100,101,102,105,110,101,100,32,115,105,103,110,97,108,32,49,0,83,101,103,109,101,110,116,97,116,105,111,110,32,102,97,117,108,116,0,85,115,101,114,32,100,101,102,105,110,101,100,32,115,105,103,110,97,108,32,50,0,66,114,111,107,101,110,32,112,105,112,101,0,65,108,97,114,109,32,99,108,111,99,107,0,84,101,114,109,105,110,97,116,101,100,0,83,116,97,99,107,32,102,97,117,108,116,0,67,104,105,108,100,32,112,114,111,99,101,115,115,32,115,116,97,116,117,115,0,67,111,110,116,105,110,117,101,100,0,83,116,111,112,112,101,100,32,40,115,105,103,110,97,108,41,0,83,116,111,112,112,101,100,0,83,116,111,112,112,101,100,32,40,116,116,121,32,105,110,112,117,116,41,0,83,116,111,112,112,101,100,32,40,116,116,121,32,111,117,116,112,117,116,41,0,85,114,103,101,110,116,32,73,47,79,32,99,111,110,100,105,116,105,111,110,0,67,80,85,32,116,105,109,101,32,108,105,109,105,116,32,101,120,99,101,101,100,101,100,0,70,105,108,101,32,115,105,122,101,32,108,105,109,105,116,32,101,120,99,101,101,100,101,100,0,86,105,114,116,117,97,108,32,116,105,109,101,114,32,101,120,112,105,114,101,100,0,80,114,111,102,105,108,105,110,103,32,116,105,109,101,114,32,101,120,112,105,114,101,100,0,87,105,110,100,111,119,32,99,104,97,110,103,101,100,0,73,47,79,32,112,111,115,115,105,98,108,101,0,80,111,119,101,114,32,102,97,105,108,117,114,101,0,66,97,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,84,51,50,0,82,84,51,51,0,82,84,51,52,0,82,84,51,53,0,82,84,51,54,0,82,84,51,55,0,82,84,51,56,0,82,84,51,57,0,82,84,52,48,0,82,84,52,49,0,82,84,52,50,0,82,84,52,51,0,82,84,52,52,0,82,84,52,53,0,82,84,52,54,0,82,84,52,55,0,82,84,52,56,0,82,84,52,57,0,82,84,53,48,0,82,84,53,49,0,82,84,53,50,0,82,84,53,51,0,82,84,53,52,0,82,84,53,53,0,82,84,53,54,0,82,84,53,55,0,82,84,53,56,0,82,84,53,57,0,82,84,54,48,0,82,84,54,49,0,82,84,54,50,0,82,84,54,51,0,82,84,54,52,0,88,88,88,88,88,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,100,101,118,47,116,116,121,0,76,79,71,78,65,77,69], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+176240);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,10,10,0,0,0,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,37,46,42,115,0,35,0,43,0,45,0,32,0,48,0,76,0,0,106,76,76,76,0,106,0,0,0,0,0,106,106,0,0,0,0,106,0,0,106,37,37,37,115,37,115,37,115,37,115,37,115,42,46,42,37,99,37,99,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,9,0,10,0,13,0,12,0,7,0,27,0,91,91,58,97,108,110,117,109,58,93,95,93,0,91,94,91,58,97,108,110,117,109,58,93,95,93,0,91,91,58,115,112,97,99,101,58,93,93,0,91,94,91,58,115,112,97,99,101,58,93,93,0,91,91,58,100,105,103,105,116,58,93,93,0,91,94,91,58,100,105,103,105,116,58,93,93,0,37,42,46,42,102,0,46,0,0,36,54,36,0,36,54,36,37,115,37,46,42,115,36,0,0,21,42,22,43,1,44,2,23,3,24,45,25,46,4,47,5,26,6,27,48,28,49,7,50,8,29,9,30,51,31,52,10,53,11,32,12,33,54,34,55,13,56,14,35,15,36,57,37,58,16,59,17,38,18,39,60,40,61,19,62,20,41,36,53,36,0,114,111,117,110,100,115,61,0,114,111,117,110,100,115,61,37,117,36,0,36,53,36,37,115,37,46,42,115,36,0,0,10,20,21,1,11,12,22,2,3,13,23,24,4,14,15,25,5,6,16,26,27,7,17,18,28,8,9,19,29,36,49,36,0,0,6,12,1,7,13,2,8,14,3,9,15,4,10,5,46,47,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,0,64,64,64,64,64,64,64,64,64,64,64,64,64,64,0,1,54,55,56,57,58,59,60,61,62,63,64,64,64,64,64,64,64,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,64,64,64,64,64,64,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,64,64,64,64,64,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,0,46,47,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,0,109,97,120,32,115,121,115,116,101,109,32,98,121,116,101,115,32,61,32,37,49,48,108,117,10,0,115,121,115,116,101,109,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0,105,110,32,117,115,101,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+179132);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};var Sockets={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};
  
  
  function __inet_pton4_raw(str) {
      var b = str.split('.');
      for (var i = 0; i < 4; i++) {
        var tmp = Number(b[i]);
        if (isNaN(tmp)) return null;
        b[i] = tmp;
      }
      return (b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24)) >>> 0;
    }
  
  
  var _htons=undefined;function __inet_pton6_raw(str) {
      var words;
      var w, offset, z, i;
      /* http://home.deds.nl/~aeron/regex/ */
      var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i
      var parts = [];
      if (!valid6regx.test(str)) {
        return null;
      }
      if (str === "::") {
        return [0, 0, 0, 0, 0, 0, 0, 0];
      }
      // Z placeholder to keep track of zeros when splitting the string on ":"
      if (str.indexOf("::") === 0) {
        str = str.replace("::", "Z:"); // leading zeros case
      } else {
        str = str.replace("::", ":Z:");
      }
  
      if (str.indexOf(".") > 0) {
        // parse IPv4 embedded stress
        str = str.replace(new RegExp('[.]', 'g'), ":");
        words = str.split(":");
        words[words.length-4] = parseInt(words[words.length-4]) + parseInt(words[words.length-3])*256;
        words[words.length-3] = parseInt(words[words.length-2]) + parseInt(words[words.length-1])*256;
        words = words.slice(0, words.length-2);
      } else {
        words = str.split(":");
      }
  
      offset = 0; z = 0;
      for (w=0; w < words.length; w++) {
        if (typeof words[w] === 'string') {
          if (words[w] === 'Z') {
            // compressed zeros - write appropriate number of zero words
            for (z = 0; z < (8 - words.length+1); z++) {
              parts[w+z] = 0;
            }
            offset = z-1;
          } else {
            // parse hex to field to 16-bit value and write it in network byte-order
            parts[w+offset] = _htons(parseInt(words[w],16));
          }
        } else {
          // parsed IPv4 words
          parts[w+offset] = words[w];
        }
      }
      return [
        (parts[1] << 16) | parts[0],
        (parts[3] << 16) | parts[2],
        (parts[5] << 16) | parts[4],
        (parts[7] << 16) | parts[6]
      ];
    }var DNS={address_map:{id:1,addrs:{},names:{}},lookup_name:function (name) {
        // If the name is already a valid ipv4 / ipv6 address, don't generate a fake one.
        var res = __inet_pton4_raw(name);
        if (res) {
          return name;
        }
        res = __inet_pton6_raw(name);
        if (res) {
          return name;
        }
  
        // See if this name is already mapped.
        var addr;
  
        if (DNS.address_map.addrs[name]) {
          addr = DNS.address_map.addrs[name];
        } else {
          var id = DNS.address_map.id++;
          assert(id < 65535, 'exceeded max address mappings of 65535');
  
          addr = '172.29.' + (id & 0xff) + '.' + (id & 0xff00);
  
          DNS.address_map.names[addr] = name;
          DNS.address_map.addrs[name] = addr;
        }
  
        return addr;
      },lookup_addr:function (addr) {
        if (DNS.address_map.names[addr]) {
          return DNS.address_map.names[addr];
        }
  
        return null;
      }};
  
  function __inet_ntop4_raw(addr) {
      return (addr & 0xff) + '.' + ((addr >> 8) & 0xff) + '.' + ((addr >> 16) & 0xff) + '.' + ((addr >> 24) & 0xff)
    }
  
  
  var _ntohs=undefined;function __inet_ntop6_raw(ints) {
      //  ref:  http://www.ietf.org/rfc/rfc2373.txt - section 2.5.4
      //  Format for IPv4 compatible and mapped  128-bit IPv6 Addresses
      //  128-bits are split into eight 16-bit words
      //  stored in network byte order (big-endian)
      //  |                80 bits               | 16 |      32 bits        |
      //  +-----------------------------------------------------------------+
      //  |               10 bytes               |  2 |      4 bytes        |
      //  +--------------------------------------+--------------------------+
      //  +               5 words                |  1 |      2 words        |
      //  +--------------------------------------+--------------------------+
      //  |0000..............................0000|0000|    IPv4 ADDRESS     | (compatible)
      //  +--------------------------------------+----+---------------------+
      //  |0000..............................0000|FFFF|    IPv4 ADDRESS     | (mapped)
      //  +--------------------------------------+----+---------------------+
      var str = "";
      var word = 0;
      var longest = 0;
      var lastzero = 0;
      var zstart = 0;
      var len = 0;
      var i = 0;
      var parts = [
        ints[0] & 0xffff,
        (ints[0] >> 16),
        ints[1] & 0xffff,
        (ints[1] >> 16),
        ints[2] & 0xffff,
        (ints[2] >> 16),
        ints[3] & 0xffff,
        (ints[3] >> 16)
      ];
  
      // Handle IPv4-compatible, IPv4-mapped, loopback and any/unspecified addresses
  
      var hasipv4 = true;
      var v4part = "";
      // check if the 10 high-order bytes are all zeros (first 5 words)
      for (i = 0; i < 5; i++) {
        if (parts[i] !== 0) { hasipv4 = false; break; }
      }
  
      if (hasipv4) {
        // low-order 32-bits store an IPv4 address (bytes 13 to 16) (last 2 words)
        v4part = __inet_ntop4_raw(parts[6] | (parts[7] << 16));
        // IPv4-mapped IPv6 address if 16-bit value (bytes 11 and 12) == 0xFFFF (6th word)
        if (parts[5] === -1) {
          str = "::ffff:";
          str += v4part;
          return str;
        }
        // IPv4-compatible IPv6 address if 16-bit value (bytes 11 and 12) == 0x0000 (6th word)
        if (parts[5] === 0) {
          str = "::";
          //special case IPv6 addresses
          if(v4part === "0.0.0.0") v4part = ""; // any/unspecified address
          if(v4part === "0.0.0.1") v4part = "1";// loopback address
          str += v4part;
          return str;
        }
      }
  
      // Handle all other IPv6 addresses
  
      // first run to find the longest contiguous zero words
      for (word = 0; word < 8; word++) {
        if (parts[word] === 0) {
          if (word - lastzero > 1) {
            len = 0;
          }
          lastzero = word;
          len++;
        }
        if (len > longest) {
          longest = len;
          zstart = word - longest + 1;
        }
      }
  
      for (word = 0; word < 8; word++) {
        if (longest > 1) {
          // compress contiguous zeros - to produce "::"
          if (parts[word] === 0 && word >= zstart && word < (zstart + longest) ) {
            if (word === zstart) {
              str += ":";
              if (zstart === 0) str += ":"; //leading zeros case
            }
            continue;
          }
        }
        // converts 16-bit words from big-endian to little-endian before converting to hex string
        str += Number(_ntohs(parts[word] & 0xffff)).toString(16);
        str += word < 7 ? ":" : "";
      }
      return str;
    }
  
  function __write_sockaddr(sa, family, addr, port) {
      switch (family) {
        case 2:
          addr = __inet_pton4_raw(addr);
          HEAP16[((sa)>>1)]=family;
          HEAP32[(((sa)+(4))>>2)]=addr;
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          break;
        case 10:
          addr = __inet_pton6_raw(addr);
          HEAP32[((sa)>>2)]=family;
          HEAP32[(((sa)+(8))>>2)]=addr[0];
          HEAP32[(((sa)+(12))>>2)]=addr[1];
          HEAP32[(((sa)+(16))>>2)]=addr[2];
          HEAP32[(((sa)+(20))>>2)]=addr[3];
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          HEAP32[(((sa)+(4))>>2)]=0;
          HEAP32[(((sa)+(24))>>2)]=0;
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
      // kind of lame, but let's match _read_sockaddr's interface
      return {};
    }function _getaddrinfo(node, service, hint, out) {
      // Note getaddrinfo currently only returns a single addrinfo with ai_next defaulting to NULL. When NULL
      // hints are specified or ai_family set to AF_UNSPEC or ai_socktype or ai_protocol set to 0 then we
      // really should provide a linked list of suitable addrinfo values.
      var addrs = [];
      var canon = null;
      var addr = 0;
      var port = 0;
      var flags = 0;
      var family = 0;
      var type = 0;
      var proto = 0;
      var ai, last;
  
      function allocaddrinfo(family, type, proto, canon, addr, port) {
        var sa, salen, ai;
        var res;
  
        salen = family === 10 ?
          28 :
          16;
        addr = family === 10 ?
          __inet_ntop6_raw(addr) :
          __inet_ntop4_raw(addr);
        sa = _malloc(salen);
        res = __write_sockaddr(sa, family, addr, port);
        assert(!res.errno);
  
        ai = _malloc(32);
        HEAP32[(((ai)+(4))>>2)]=family;
        HEAP32[(((ai)+(8))>>2)]=type;
        HEAP32[(((ai)+(12))>>2)]=proto;
        if (canon) {
          HEAP32[(((ai)+(24))>>2)]=canon;
        }
        HEAP32[(((ai)+(20))>>2)]=sa;
        if (family === 10) {
          HEAP32[(((ai)+(16))>>2)]=28;
        } else {
          HEAP32[(((ai)+(16))>>2)]=16;
        }
        HEAP32[(((ai)+(28))>>2)]=0;
  
        return ai;
      }
  
      if (hint) {
        flags = HEAP32[((hint)>>2)];
        family = HEAP32[(((hint)+(4))>>2)];
        type = HEAP32[(((hint)+(8))>>2)];
        proto = HEAP32[(((hint)+(12))>>2)];
      }
      if (type && !proto) {
        proto = type === 2 ? 17 : 6;
      }
      if (!type && proto) {
        type = proto === 17 ? 2 : 1;
      }
  
      // If type or proto are set to zero in hints we should really be returning multiple addrinfo values, but for
      // now default to a TCP STREAM socket so we can at least return a sensible addrinfo given NULL hints.
      if (proto === 0) {
        proto = 6;
      }
      if (type === 0) {
        type = 1;
      }
  
      if (!node && !service) {
        return -2;
      }
      if (flags & ~(1|2|4|
          1024|8|16|32)) {
        return -1;
      }
      if (hint !== 0 && (HEAP32[((hint)>>2)] & 2) && !node) {
        return -1;
      }
      if (flags & 32) {
        // TODO
        return -2;
      }
      if (type !== 0 && type !== 1 && type !== 2) {
        return -7;
      }
      if (family !== 0 && family !== 2 && family !== 10) {
        return -6;
      }
  
      if (service) {
        service = Pointer_stringify(service);
        port = parseInt(service, 10);
  
        if (isNaN(port)) {
          if (flags & 1024) {
            return -2;
          }
          // TODO support resolving well-known service names from:
          // http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
          return -8;
        }
      }
  
      if (!node) {
        if (family === 0) {
          family = 2;
        }
        if ((flags & 1) === 0) {
          if (family === 2) {
            addr = _htonl(2130706433);
          } else {
            addr = [0, 0, 0, 1];
          }
        }
        ai = allocaddrinfo(family, type, proto, null, addr, port);
        HEAP32[((out)>>2)]=ai;
        return 0;
      }
  
      //
      // try as a numeric address
      //
      node = Pointer_stringify(node);
      addr = __inet_pton4_raw(node);
      if (addr !== null) {
        // incoming node is a valid ipv4 address
        if (family === 0 || family === 2) {
          family = 2;
        }
        else if (family === 10 && (flags & 8)) {
          addr = [0, 0, _htonl(0xffff), addr];
          family = 10;
        } else {
          return -2;
        }
      } else {
        addr = __inet_pton6_raw(node);
        if (addr !== null) {
          // incoming node is a valid ipv6 address
          if (family === 0 || family === 10) {
            family = 10;
          } else {
            return -2;
          }
        }
      }
      if (addr != null) {
        ai = allocaddrinfo(family, type, proto, node, addr, port);
        HEAP32[((out)>>2)]=ai;
        return 0;
      }
      if (flags & 4) {
        return -2;
      }
  
      //
      // try as a hostname
      //
      // resolve the hostname to a temporary fake address
      node = DNS.lookup_name(node);
      addr = __inet_pton4_raw(node);
      if (family === 0) {
        family = 2;
      } else if (family === 10) {
        addr = [0, 0, _htonl(0xffff), addr];
      }
      ai = allocaddrinfo(family, type, proto, null, addr, port);
      HEAP32[((out)>>2)]=ai;
      return 0;
    }

  var _DtoILow=true;

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall144(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // msync
      var addr = SYSCALLS.get(), len = SYSCALLS.get(), flags = SYSCALLS.get();
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      SYSCALLS.doMsync(addr, FS.getStream(info.fd), len, info.flags);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _posix_spawn() {
  Module['printErr']('missing function: posix_spawn'); abort(-1);
  }

  function ___syscall191(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ugetrlimit
      var resource = SYSCALLS.get(), rlim = SYSCALLS.get();
      HEAP32[((rlim)>>2)]=-1;  // RLIM_INFINITY
      HEAP32[(((rlim)+(4))>>2)]=-1;  // RLIM_INFINITY
      HEAP32[(((rlim)+(8))>>2)]=-1;  // RLIM_INFINITY
      HEAP32[(((rlim)+(12))>>2)]=-1;  // RLIM_INFINITY
      return 0; // just report no limits
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall193(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // truncate64
      var path = SYSCALLS.getStr(), zero = SYSCALLS.getZero(), length = SYSCALLS.get64();
      FS.truncate(path, length);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall192(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mmap2
      var addr = SYSCALLS.get(), len = SYSCALLS.get(), prot = SYSCALLS.get(), flags = SYSCALLS.get(), fd = SYSCALLS.get(), off = SYSCALLS.get()
      off <<= 12; // undo pgoffset
      var ptr;
      var allocated = false;
      if (fd === -1) {
        ptr = _malloc(len);
        if (!ptr) return -ERRNO_CODES.ENOMEM;
        _memset(ptr, 0, len);
        allocated = true;
      } else {
        var info = FS.getStream(fd);
        if (!info) return -ERRNO_CODES.EBADF;
        var res = FS.mmap(info, HEAPU8, addr, len, off, prot, flags);
        ptr = res.ptr;
        allocated = res.allocated;
      }
      SYSCALLS.mappings[ptr] = { malloc: ptr, len: len, allocated: allocated, fd: fd, flags: flags };
      return ptr;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _kill(pid, sig) {
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/kill.html
      // Makes no sense in a single-process environment.
  	  // Should kill itself somtimes depending on `pid`
      Module.printErr('Calling stub instead of kill()');
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }

  function ___syscall194(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ftruncate64
      var fd = SYSCALLS.get(), zero = SYSCALLS.getZero(), length = SYSCALLS.get64();
      FS.ftruncate(fd, length);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall197(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_fstat64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, stream.path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall196(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_lstat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.lstat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function ___syscall202(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getgid32
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall199() {
  return ___syscall202.apply(null, arguments)
  }

  function ___syscall198(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // lchown32
      var path = SYSCALLS.getStr(), owner = SYSCALLS.get(), group = SYSCALLS.get();
      FS.chown(path, owner, group); // XXX we ignore the 'l' aspect, and do the same as chown
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var EmterpreterAsync=undefined;function ___syscall118(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fsync
      var stream = SYSCALLS.getStreamFromFD();
      return 0; // we can't do anything synchronously; the in-memory FS is already synced to
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall296(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mkdirat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), mode = SYSCALLS.get();
      path = SYSCALLS.calculateAt(dirfd, path);
      return SYSCALLS.doMkdir(path, mode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      Runtime.stackRestore(ret);
    }

  function _posix_spawn_file_actions_init() {
  Module['printErr']('missing function: posix_spawn_file_actions_init'); abort(-1);
  }

  function ___syscall295(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // openat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get();
      path = SYSCALLS.calculateAt(dirfd, path);
      return FS.open(path, flags, mode).fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall298(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fchownat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), owner = SYSCALLS.get(), group = SYSCALLS.get(), flags = SYSCALLS.get();
      assert(flags === 0);
      path = SYSCALLS.calculateAt(dirfd, path);
      FS.chown(path, owner, group);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall299(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // futimesat
      abort('futimesat is obsolete');
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall114(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // wait4
      abort('cannot wait on child processes');
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall218(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mincore
      return -ERRNO_CODES.ENOSYS; // unsupported feature
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall219(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // madvise
      return 0; // advice is welcome, but ignored
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall51(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // acct
      return -ERRNO_CODES.ENOSYS; // unsupported features
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall211(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getresgid32
      var ruid = SYSCALLS.get(), euid = SYSCALLS.get(), suid = SYSCALLS.get();
      HEAP32[((ruid)>>2)]=0;
      HEAP32[((euid)>>2)]=0;
      HEAP32[((suid)>>2)]=0;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};function ___syscall57(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // setpgid
      var pid = SYSCALLS.get(), pgid = SYSCALLS.get();
      if (pid && pid !== PROCINFO.pid) return -ERRNO_CODES.ESRCH;
      if (pgid && pgid !== PROCINFO.pgid) return -ERRNO_CODES.EPERM;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall39(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mkdir
      var path = SYSCALLS.getStr(), mode = SYSCALLS.get();
      return SYSCALLS.doMkdir(path, mode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall38(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rename
      var old_path = SYSCALLS.getStr(), new_path = SYSCALLS.getStr();
      FS.rename(old_path, new_path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___muldc3() {
  Module['printErr']('missing function: __muldc3'); abort(-1);
  }

  function ___syscall33(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // access
      var path = SYSCALLS.getStr(), amode = SYSCALLS.get();
      return SYSCALLS.doAccess(path, amode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _midi_log_cwrap() {
  Module['printErr']('missing function: midi_log_cwrap'); abort(-1);
  }

  function ___syscall36(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // sync
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall34(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // nice
      var inc = SYSCALLS.get();
      return -ERRNO_CODES.EPERM; // no meaning to nice for our single-process environment
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _lcd_updated_all() {
  Module['printErr']('missing function: lcd_updated_all'); abort(-1);
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _execl(/* ... */) {
      // int execl(const char *path, const char *arg0, ... /*, (char *)0 */);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/exec.html
      // We don't support executing external code.
      ___setErrNo(ERRNO_CODES.ENOEXEC);
      return -1;
    }

  function ___block_all_sigs() {
  Module['printErr']('missing function: __block_all_sigs'); abort(-1);
  }

   
  Module["_memmove"] = _memmove;

  function _pthread_setcancelstate() { return 0 }

  
  function _wait(stat_loc) {
      // pid_t wait(int *stat_loc);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/wait.html
      // Makes no sense in a single-process environment.
      ___setErrNo(ERRNO_CODES.ECHILD);
      return -1;
    }function _waitpid() {
  return _wait.apply(null, arguments)
  }

  function ___syscall205(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getgroups32
      var size = SYSCALLS.get(), list = SYSCALLS.get();
      if (size < 1) return -ERRNO_CODES.EINVAL;
      HEAP32[((list)>>2)]=0;
      return 1;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function ___syscall214(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // setgid32
      var uid = SYSCALLS.get();
      if (uid !== 0) return -ERRNO_CODES.EPERM;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall204() {
  return ___syscall214.apply(null, arguments)
  }

  function ___syscall207(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fchown32
      var fd = SYSCALLS.get(), owner = SYSCALLS.get(), group = SYSCALLS.get();
      FS.fchown(fd, owner, group);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall168(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // poll
      var fds = SYSCALLS.get(), nfds = SYSCALLS.get(), timeout = SYSCALLS.get();
      var nonzero = 0;
      for (var i = 0; i < nfds; i++) {
        var pollfd = fds + 8 * i;
        var fd = HEAP32[((pollfd)>>2)];
        var events = HEAP16[(((pollfd)+(4))>>1)];
        var mask = 32;
        var stream = FS.getStream(fd);
        if (stream) {
          mask = SYSCALLS.DEFAULT_POLLMASK;
          if (stream.stream_ops.poll) {
            mask = stream.stream_ops.poll(stream);
          }
        }
        mask &= events | 8 | 16;
        if (mask) nonzero++;
        HEAP16[(((pollfd)+(6))>>1)]=mask;
      }
      return nonzero;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall200() {
  return ___syscall202.apply(null, arguments)
  }

  function ___syscall203() {
  return ___syscall214.apply(null, arguments)
  }


  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall209() {
  return ___syscall211.apply(null, arguments)
  }

  function ___syscall40(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rmdir
      var path = SYSCALLS.getStr();
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _led_set() {
  Module['printErr']('missing function: led_set'); abort(-1);
  }

  var _cosf=Math_cos;

  function _endgrent() {
  Module['printErr']('missing function: endgrent'); abort(-1);
  }

  function _setgrent() {
  Module['printErr']('missing function: setgrent'); abort(-1);
  }

  function ___syscall20(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpid
      return PROCINFO.pid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  var _logf=Math_log;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _midi_send_cmd2() {
  Module['printErr']('missing function: midi_send_cmd2'); abort(-1);
  }

  function ___lock() {}

  function _inet_addr(ptr) {
      var addr = __inet_pton4_raw(Pointer_stringify(ptr));
      if (addr === null) {
        return -1;
      }
      return addr;
    }

  function ___syscall272(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fadvise64_64
      return 0; // your advice is important to us (but we can't use it)
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function ___clone() {
  Module['printErr']('missing function: __clone'); abort(-1);
  }

  function ___syscall201() {
  return ___syscall202.apply(null, arguments)
  }

  var _atan2f=Math_atan2;

  function _fsw_poll() {
  Module['printErr']('missing function: fsw_poll'); abort(-1);
  }

  function ___syscall15(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // chmod
      var path = SYSCALLS.getStr(), mode = SYSCALLS.get();
      FS.chmod(path, mode);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall14(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mknod
      var path = SYSCALLS.getStr(), mode = SYSCALLS.get(), dev = SYSCALLS.get();
      return SYSCALLS.doMknod(path, mode, dev);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall12(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // chdir
      var path = SYSCALLS.getStr();
      FS.chdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall9(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // link
      var oldpath = SYSCALLS.get(), newpath = SYSCALLS.get();
      return -ERRNO_CODES.EMLINK; // no hardlinks for us
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _sinf=Math_sin;

  
  function __read_sockaddr(sa, salen) {
      // family / port offsets are common to both sockaddr_in and sockaddr_in6
      var family = HEAP16[((sa)>>1)];
      var port = _ntohs(HEAP16[(((sa)+(2))>>1)]);
      var addr;
  
      switch (family) {
        case 2:
          if (salen !== 16) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = HEAP32[(((sa)+(4))>>2)];
          addr = __inet_ntop4_raw(addr);
          break;
        case 10:
          if (salen !== 28) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = [
            HEAP32[(((sa)+(8))>>2)],
            HEAP32[(((sa)+(12))>>2)],
            HEAP32[(((sa)+(16))>>2)],
            HEAP32[(((sa)+(20))>>2)]
          ];
          addr = __inet_ntop6_raw(addr);
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
  
      return { family: family, addr: addr, port: port };
    }function _getnameinfo(sa, salen, node, nodelen, serv, servlen, flags) {
      var info = __read_sockaddr(sa, salen);
      if (info.errno) {
        return -6;
      }
      var port = info.port;
      var addr = info.addr;
  
      if (node && nodelen) {
        var lookup;
        if ((flags & 1) || !(lookup = DNS.lookup_addr(addr))) {
          if (flags & 8) {
            return -2;
          }
        } else {
          addr = lookup;
        }
        if (addr.length >= nodelen) {
          return -12;
        }
        writeStringToMemory(addr, node);
      }
  
      if (serv && servlen) {
        port = '' + port;
        if (port.length > servlen) {
          return -12;
        }
        writeStringToMemory(port, serv);
      }
  
      return 0;
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall297(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mknodat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), mode = SYSCALLS.get(), dev = SYSCALLS.get();
      path = SYSCALLS.calculateAt(dirfd, path);
      return SYSCALLS.doMknod(path, mode, dev);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _cos=Math_cos;

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  function ___syscall() {
  Module['printErr']('missing function: __syscall'); abort(-1);
  }

  function ___syscall42() {
  return ___syscall51.apply(null, arguments)
  }

  function ___syscall148(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fdatasync
      var stream = SYSCALLS.getStreamFromFD();
      return 0; // we can't do anything synchronously; the in-memory FS is already synced to
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall308(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pselect
      return -ERRNO_CODES.ENOSYS; // unsupported feature
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall265(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // clock_nanosleep
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall142(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // newselect
      // readfds are supported,
      // writefds checks socket open status
      // exceptfds not supported
      // timeout is always 0 - fully async
      var nfds = SYSCALLS.get(), readfds = SYSCALLS.get(), writefds = SYSCALLS.get(), exceptfds = SYSCALLS.get(), timeout = SYSCALLS.get();
  
      assert(nfds <= 64, 'nfds must be less than or equal to 64');  // fd sets have 64 bits // TODO: this could be 1024 based on current musl headers
      assert(!exceptfds, 'exceptfds not supported');
  
      var total = 0;
      
      var srcReadLow = (readfds ? HEAP32[((readfds)>>2)] : 0),
          srcReadHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0);
      var srcWriteLow = (writefds ? HEAP32[((writefds)>>2)] : 0),
          srcWriteHigh = (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0);
      var srcExceptLow = (exceptfds ? HEAP32[((exceptfds)>>2)] : 0),
          srcExceptHigh = (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      var dstReadLow = 0,
          dstReadHigh = 0;
      var dstWriteLow = 0,
          dstWriteHigh = 0;
      var dstExceptLow = 0,
          dstExceptHigh = 0;
  
      var allLow = (readfds ? HEAP32[((readfds)>>2)] : 0) |
                   (writefds ? HEAP32[((writefds)>>2)] : 0) |
                   (exceptfds ? HEAP32[((exceptfds)>>2)] : 0);
      var allHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0) |
                    (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0) |
                    (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      function check(fd, low, high, val) {
        return (fd < 32 ? (low & val) : (high & val));
      }
  
      for (var fd = 0; fd < nfds; fd++) {
        var mask = 1 << (fd % 32);
        if (!(check(fd, allLow, allHigh, mask))) {
          continue;  // index isn't in the set
        }
  
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  
        var flags = SYSCALLS.DEFAULT_POLLMASK;
  
        if (stream.stream_ops.poll) {
          flags = stream.stream_ops.poll(stream);
        }
  
        if ((flags & 1) && check(fd, srcReadLow, srcReadHigh, mask)) {
          fd < 32 ? (dstReadLow = dstReadLow | mask) : (dstReadHigh = dstReadHigh | mask);
          total++;
        }
        if ((flags & 4) && check(fd, srcWriteLow, srcWriteHigh, mask)) {
          fd < 32 ? (dstWriteLow = dstWriteLow | mask) : (dstWriteHigh = dstWriteHigh | mask);
          total++;
        }
        if ((flags & 2) && check(fd, srcExceptLow, srcExceptHigh, mask)) {
          fd < 32 ? (dstExceptLow = dstExceptLow | mask) : (dstExceptHigh = dstExceptHigh | mask);
          total++;
        }
      }
  
      if (readfds) {
        HEAP32[((readfds)>>2)]=dstReadLow;
        HEAP32[(((readfds)+(4))>>2)]=dstReadHigh;
      }
      if (writefds) {
        HEAP32[((writefds)>>2)]=dstWriteLow;
        HEAP32[(((writefds)+(4))>>2)]=dstWriteHigh;
      }
      if (exceptfds) {
        HEAP32[((exceptfds)>>2)]=dstExceptLow;
        HEAP32[(((exceptfds)+(4))>>2)]=dstExceptHigh;
      }
      
      return total;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall305(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readlinkat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), buf = SYSCALLS.get(), bufsize = SYSCALLS.get();
      path = SYSCALLS.calculateAt(dirfd, path);
      return SYSCALLS.doReadlink(path, buf, bufsize);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall306(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fchmodat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), mode = SYSCALLS.get(), flags = SYSCALLS.get();
      assert(flags === 0);
      path = SYSCALLS.calculateAt(dirfd, path);
      FS.chmod(path, mode);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall163(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mremap
      return -ERRNO_CODES.ENOMEM; // never succeed
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall300(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fstatat64
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), buf = SYSCALLS.get(), flags = SYSCALLS.get();
      var nofollow = flags & 256;
      flags = flags & (~256);
      assert(!flags, flags);
      path = SYSCALLS.calculateAt(dirfd, path);
      return SYSCALLS.doStat(nofollow ? FS.lstat : FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall147(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getsid
      var pid = SYSCALLS.get();
      if (pid && pid !== PROCINFO.pid) return -ERRNO_CODES.ESRCH;
      return PROCINFO.sid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall302(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // renameat
      var olddirfd = SYSCALLS.get(), oldpath = SYSCALLS.getStr(), newdirfd = SYSCALLS.get(), newpath = SYSCALLS.getStr();
      oldpath = SYSCALLS.calculateAt(olddirfd, oldpath);
      newpath = SYSCALLS.calculateAt(newdirfd, newpath);
      FS.rename(oldpath, newpath);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getUTCSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getUTCMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getUTCHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getUTCDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getUTCMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getUTCFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getUTCDay();
      HEAP32[(((tmPtr)+(36))>>2)]=0;
      HEAP32[(((tmPtr)+(32))>>2)]=0;
      var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
      var yday = ((date.getTime() - start) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone;
  
      return tmPtr;
    }

   
  Module["_i64Subtract"] = _i64Subtract;

  var _fabsf=Math_abs;

  var _floorf=Math_floor;

  
  function _emscripten_get_now() {
      if (!_emscripten_get_now.actual) {
        if (ENVIRONMENT_IS_NODE) {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() {
            var t = process['hrtime']();
            return t[0] * 1e3 + t[1] / 1e6;
          }
        } else if (typeof dateNow !== 'undefined') {
          _emscripten_get_now.actual = dateNow;
        } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return self['performance']['now'](); };
        } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return performance['now'](); };
        } else {
          _emscripten_get_now.actual = Date.now;
        }
      }
      return _emscripten_get_now.actual();
    }
  
  function _emscripten_get_now_is_monotonic() {
      // return whether emscripten_get_now is guaranteed monotonic; the Date.now
      // implementation is not :(
      return ENVIRONMENT_IS_NODE || (typeof dateNow !== 'undefined') ||
          ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']);
    }function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now();
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }

  var _FtoIHigh=true;

  var _fabsl=Math_abs;

  function ___syscall1(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // exit
      var status = SYSCALLS.get();
      Module['exit'](status);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _sqrtf=Math_sqrt;

  var _log=Math_log;

  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      var seconds = HEAP32[((rqtp)>>2)];
      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
      if (rmtp !== 0) {
        HEAP32[((rmtp)>>2)]=0;
        HEAP32[(((rmtp)+(4))>>2)]=0;
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }

  function ___syscall94(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fchmod
      var fd = SYSCALLS.get(), mode = SYSCALLS.get();
      FS.fchmod(fd, mode);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall97(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // setpriority
      return -ERRNO_CODES.EPERM;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall96(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpriority
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function ___syscall153(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munlockall
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall151() {
  return ___syscall153.apply(null, arguments)
  }

  function ___syscall150() {
  return ___syscall153.apply(null, arguments)
  }


  function ___syscall152() {
  return ___syscall153.apply(null, arguments)
  }

  function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags)
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _posix_spawn_file_actions_destroy() {
  Module['printErr']('missing function: posix_spawn_file_actions_destroy'); abort(-1);
  }

  function ___syscall77(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getrusage
      var who = SYSCALLS.get(), usage = SYSCALLS.get();
      _memset(usage, 0, 136);
      HEAP32[((usage)>>2)]=1; // fake some values
      HEAP32[(((usage)+(4))>>2)]=2;
      HEAP32[(((usage)+(8))>>2)]=3;
      HEAP32[(((usage)+(12))>>2)]=4;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall75(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // setrlimit
      return 0; // no-op
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _BDtoIHigh=true;

  function _llvm_fma_f64() {
  Module['printErr']('missing function: llvm_fma_f64'); abort(-1);
  }

  function ___syscall212(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // chown32
      var path = SYSCALLS.getStr(), owner = SYSCALLS.get(), group = SYSCALLS.get();
      FS.chown(path, owner, group);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function __Exit() {
  Module['printErr']('missing function: _Exit'); abort(-1);
  }

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  function ___syscall29(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pause
      return -ERRNO_CODES.EINTR; // we can't pause
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _tanf=Math_tan;

  var _BItoD=true;

  function _lcd_row_get() {
  Module['printErr']('missing function: lcd_row_get'); abort(-1);
  }

  function ___syscall85(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readlink
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get(), bufsize = SYSCALLS.get();
      return SYSCALLS.doReadlink(path, buf, bufsize);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall121(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // setdomainname
      return -ERRNO_CODES.EPERM;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall122(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // uname
      var buf = SYSCALLS.get();
      if (!buf) return -ERRNO_CODES.EFAULT
      var layout = {"sysname":0,"nodename":65,"domainname":325,"machine":260,"version":195,"release":130,"__size__":390};
      function copyString(element, value) {
        var offset = layout[element];
        writeAsciiToMemory(value, buf + offset);
      }
      copyString('sysname', 'Emscripten');
      copyString('nodename', 'emscripten');
      copyString('release', '1.0');
      copyString('version', '#1');
      copyString('machine', 'x86-JS');
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function ___syscall125(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mprotect
      return 0; // let's not and say we did
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall269(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fstatfs64
      var stream = SYSCALLS.getStreamFromFD(), size = SYSCALLS.get(), buf = SYSCALLS.get();
      return ___syscall([268, 0, size, buf], 0);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall320(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // utimensat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), times = SYSCALLS.get(), flags = SYSCALLS.get();
      assert(flags === 0);
      path = SYSCALLS.calculateAt(dirfd, path);
      var seconds = HEAP32[((times)>>2)];
      var nanoseconds = HEAP32[(((times)+(4))>>2)];
      var atime = (seconds*1000) + (nanoseconds/(1000*1000));
      times += 8;
      seconds = HEAP32[((times)>>2)];
      nanoseconds = HEAP32[(((times)+(4))>>2)];
      var mtime = (seconds*1000) + (nanoseconds/(1000*1000));
      FS.utime(path, atime, mtime);
      return 0;  
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _expf=Math_exp;

  function ___syscall324(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fallocate
      var stream = SYSCALLS.getStreamFromFD(), mode = SYSCALLS.get(), offset = SYSCALLS.get64(), len = SYSCALLS.get64();
      assert(mode === 0);
      FS.allocate(stream, offset, len);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall64(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getppid
      return PROCINFO.ppid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall65(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpgrp
      return PROCINFO.pgid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall66(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // setsid
      return 0; // no-op
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall60(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // umask
      var mask = SYSCALLS.get();
      var old = SYSCALLS.umask;
      SYSCALLS.umask = mask;
      return old;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function ___syscall63(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup2
      var old = SYSCALLS.getStreamFromFD(), suggestFD = SYSCALLS.get();
      if (old.fd === suggestFD) return suggestFD;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function ___wait() {
  Module['printErr']('missing function: __wait'); abort(-1);
  }

  var _DtoIHigh=true;

  function _abort() {
      Module['abort']();
    }

  function ___syscall268(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // statfs64
      var path = SYSCALLS.getStr(), size = SYSCALLS.get(), buf = SYSCALLS.get();
      assert(size === 64);
      // NOTE: None of the constants here are true. We're just returning safe and
      //       sane values.
      HEAP32[(((buf)+(4))>>2)]=4096;
      HEAP32[(((buf)+(40))>>2)]=4096;
      HEAP32[(((buf)+(8))>>2)]=1000000;
      HEAP32[(((buf)+(12))>>2)]=500000;
      HEAP32[(((buf)+(16))>>2)]=500000;
      HEAP32[(((buf)+(20))>>2)]=FS.nextInode;
      HEAP32[(((buf)+(24))>>2)]=1000000;
      HEAP32[(((buf)+(28))>>2)]=42;
      HEAP32[(((buf)+(44))>>2)]=2;  // ST_NOSUID
      HEAP32[(((buf)+(36))>>2)]=255;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _tan=Math_tan;

  function ___syscall41(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup
      var old = SYSCALLS.getStreamFromFD();
      return FS.open(old.path, old.flags, 0).fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___unlock() {}

  function ___syscall132(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpgid
      var pid = SYSCALLS.get();
      if (pid && pid !== PROCINFO.pid) return -ERRNO_CODES.ESRCH;
      return PROCINFO.pgid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_i64Add"] = _i64Add;

  var _fabs=Math_abs;

  var _floor=Math_floor;

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _posix_spawn_file_actions_adddup2() {
  Module['printErr']('missing function: posix_spawn_file_actions_adddup2'); abort(-1);
  }

  var _sqrt=Math_sqrt;

  function ___syscall133(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fchdir
      var stream = SYSCALLS.getStreamFromFD();
      FS.chdir(stream.path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall334(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pwritev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get(), offset = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt, offset);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall331(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pipe2
      return -ERRNO_CODES.ENOSYS; // unsupported feature
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall330(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup3
      var old = SYSCALLS.getStreamFromFD(), suggestFD = SYSCALLS.get(), flags = SYSCALLS.get();
      assert(!flags);
      if (old.fd === suggestFD) return -ERRNO_CODES.EINVAL;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall333(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // preadv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get(), offset = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt, offset);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _label_row_update() {
  Module['printErr']('missing function: label_row_update'); abort(-1);
  }

  var _sin=Math_sin;

  function _fork() {
      // pid_t fork(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fork.html
      // We don't support multiple processes.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }

  function ___restore_sigs() {
  Module['printErr']('missing function: __restore_sigs'); abort(-1);
  }

  function _label_row_get() {
  Module['printErr']('missing function: label_row_get'); abort(-1);
  }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function ___clock_gettime() {
  return _clock_gettime.apply(null, arguments)
  }

  function ___syscall304(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // symlinkat
      var target = SYSCALLS.get(), newdirfd = SYSCALLS.get(), linkpath = SYSCALLS.get();
      linkpath = SYSCALLS.calculateAt(newdirfd, linkpath);
      FS.symlink(target, linkpath);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall183(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getcwd
      var buf = SYSCALLS.get(), size = SYSCALLS.get();
      if (size === 0) return -ERRNO_CODES.EINVAL;
      var cwd = FS.cwd();
      if (size < cwd.length + 1) return -ERRNO_CODES.ERANGE;
      writeAsciiToMemory(cwd, buf);
      return buf;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall180(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pread64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get(), zero = SYSCALLS.getZero(), offset = SYSCALLS.get64();
      return FS.read(stream, HEAP8,buf, count, offset);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall181(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pwrite64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get(), zero = SYSCALLS.getZero(), offset = SYSCALLS.get64();
      return FS.write(stream, HEAP8,buf, nbyte, offset);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _setgroups(ngroups, gidset) {
      // int setgroups(int ngroups, const gid_t *gidset);
      // https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man2/setgroups.2.html
      if (ngroups < 1 || ngroups > _sysconf(3)) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        // We have just one process/user/group, so it makes no sense to set groups.
        ___setErrNo(ERRNO_CODES.EPERM);
        return -1;
      }
    }

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall307(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // faccessat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), amode = SYSCALLS.get(), flags = SYSCALLS.get();
      assert(flags === 0);
      path = SYSCALLS.calculateAt(dirfd, path);
      return SYSCALLS.doAccess(path, amode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___mulsc3() {
  Module['printErr']('missing function: __mulsc3'); abort(-1);
  }

  function _setitimer() {
      throw 'setitimer() is not implemented yet';
    }

  
  var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port;
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function ___syscall102(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // socketcall
      var call = SYSCALLS.get(), socketvararg = SYSCALLS.get();
      // socketcalls pass the rest of the arguments in a struct
      SYSCALLS.varargs = socketvararg;
      switch (call) {
        case 1: { // socket
          var domain = SYSCALLS.get(), type = SYSCALLS.get(), protocol = SYSCALLS.get();
          var sock = SOCKFS.createSocket(domain, type, protocol);
          assert(sock.stream.fd < 64); // XXX ? select() assumes socket fd values are in 0..63
          return sock.stream.fd;
        }
        case 2: { // bind
          var sock = SYSCALLS.getSocketFromFD(), info = SYSCALLS.getSocketAddress();
          sock.sock_ops.bind(sock, info.addr, info.port);
          return 0;
        }
        case 3: { // connect
          var sock = SYSCALLS.getSocketFromFD(), info = SYSCALLS.getSocketAddress();
          sock.sock_ops.connect(sock, info.addr, info.port);
          return 0;
        }
        case 4: { // listen
          var sock = SYSCALLS.getSocketFromFD(), backlog = SYSCALLS.get();
          sock.sock_ops.listen(sock, backlog);
          return 0;
        }
        case 5: { // accept
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var newsock = sock.sock_ops.accept(sock);
          if (addr) {
            var res = __write_sockaddr(addr, newsock.family, DNS.lookup_name(newsock.daddr), newsock.dport);
            assert(!res.errno);
          }
          return newsock.stream.fd;
        }
        case 6: { // getsockname
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.daddr || '0.0.0.0'), sock.dport);
          assert(!res.errno);
          return 0;
        }
        case 11: { // sendto
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), length = SYSCALLS.get(), flags = SYSCALLS.get(), dest = SYSCALLS.getSocketAddress(true);
          if (!dest) {
            // send, no address provided
            return FS.write(sock.stream, HEAP8,message, length);
          } else {
            // sendto an address
            return sock.sock_ops.sendmsg(sock, HEAP8,message, length, dest.addr, dest.port);
          }
        }
        case 12: { // recvfrom
          var sock = SYSCALLS.getSocketFromFD(), buf = SYSCALLS.get(), len = SYSCALLS.get(), flags = SYSCALLS.get(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var msg = sock.sock_ops.recvmsg(sock, len);
          if (!msg) return 0; // socket is closed
          if (addr) {
            var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          HEAPU8.set(msg.buffer, buf);
          return msg.buffer.byteLength;
        }
        case 14: { // setsockopt
          return -ERRNO_CODES.ENOPROTOOPT; // The option is unknown at the level indicated.
        }
        case 15: { // getsockopt
          var sock = SYSCALLS.getSocketFromFD(), level = SYSCALLS.get(), optname = SYSCALLS.get(), optval = SYSCALLS.get(), optlen = SYSCALLS.get();
          // Minimal getsockopt aimed at resolving https://github.com/kripken/emscripten/issues/2211
          // so only supports SOL_SOCKET with SO_ERROR.
          if (level === 1) {
            if (optname === 4) {
              HEAP32[((optval)>>2)]=sock.error;
              HEAP32[((optlen)>>2)]=4;
              sock.error = null; // Clear the error (The SO_ERROR option obtains and then clears this field).
              return 0;
            }
          }
          return -ERRNO_CODES.ENOPROTOOPT; // The option is unknown at the level indicated.
        }
        case 16: { // sendmsg
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // read the address and port to send to
          var addr, port;
          var name = HEAP32[((message)>>2)];
          var namelen = HEAP32[(((message)+(4))>>2)];
          if (name) {
            var info = __read_sockaddr(name, namelen);
            if (info.errno) return -info.errno;
            port = info.port;
            addr = DNS.lookup_addr(info.addr) || info.addr;
          }
          // concatenate scatter-gather arrays into one message buffer
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          var view = new Uint8Array(total);
          var offset = 0;
          for (var i = 0; i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            for (var j = 0; j < iovlen; j++) {  
              view[offset++] = HEAP8[(((iovbase)+(j))>>0)];
            }
          }
          // write the buffer
          return sock.sock_ops.sendmsg(sock, view, 0, total, addr, port);
        }
        case 17: { // recvmsg
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // get the total amount of data we can read across all arrays
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          // try to read total data
          var msg = sock.sock_ops.recvmsg(sock, total);
          if (!msg) return 0; // socket is closed
  
          // TODO honor flags:
          // MSG_OOB
          // Requests out-of-band data. The significance and semantics of out-of-band data are protocol-specific.
          // MSG_PEEK
          // Peeks at the incoming message.
          // MSG_WAITALL
          // Requests that the function block until the full amount of data requested can be returned. The function may return a smaller amount of data if a signal is caught, if the connection is terminated, if MSG_PEEK was specified, or if an error is pending for the socket.
  
          // write the source address out
          var name = HEAP32[((message)>>2)];
          if (name) {
            var res = __write_sockaddr(name, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          // write the buffer out to the scatter-gather arrays
          var bytesRead = 0;
          var bytesRemaining = msg.buffer.byteLength;
          for (var i = 0; bytesRemaining > 0 && i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            if (!iovlen) {
              continue;
            }
            var length = Math.min(iovlen, bytesRemaining);
            var buf = msg.buffer.subarray(bytesRead, bytesRead + length);
            HEAPU8.set(buf, iovbase + bytesRead);
            bytesRead += length;
            bytesRemaining -= length;
          }
  
          // TODO set msghdr.msg_flags
          // MSG_EOR
          // End of record was received (if supported by the protocol).
          // MSG_OOB
          // Out-of-band data was received.
          // MSG_TRUNC
          // Normal data was truncated.
          // MSG_CTRUNC
  
          return bytesRead;
        }
        default: abort('unsupported socketcall syscall ' + call);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall83(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // symlink
      var target = SYSCALLS.getStr(), linkpath = SYSCALLS.getStr();
      FS.symlink(target, linkpath);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall301(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlinkat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), flags = SYSCALLS.get();
      assert(flags === 0);
      path = SYSCALLS.calculateAt(dirfd, path);
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall340(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // prlimit64
      var pid = SYSCALLS.get(), resource = SYSCALLS.get(), new_limit = SYSCALLS.get(), old_limit = SYSCALLS.get();
      if (old_limit) { // just report no limits
        HEAP32[((old_limit)>>2)]=-1;  // RLIM_INFINITY
        HEAP32[(((old_limit)+(4))>>2)]=-1;  // RLIM_INFINITY
        HEAP32[(((old_limit)+(8))>>2)]=-1;  // RLIM_INFINITY
        HEAP32[(((old_limit)+(12))>>2)]=-1;  // RLIM_INFINITY
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _atan2=Math_atan2;

  function _getgrent() {
  Module['printErr']('missing function: getgrent'); abort(-1);
  }

  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }

  var _exp=Math_exp;

  var _FtoILow=true;

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall303(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // linkat
      return -ERRNO_CODES.EMLINK; // no hardlinks for us
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _llvm_nacl_atomic_cmpxchg_i32=undefined;

  function ___syscall220(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_getdents64
      var stream = SYSCALLS.getStreamFromFD(), dirp = SYSCALLS.get(), count = SYSCALLS.get();
      if (!stream.getdents) {
        stream.getdents = FS.readdir(stream.path);
      }
      var pos = 0;
      while (stream.getdents.length > 0 && pos + 268 < count) {
        var id;
        var type;
        var name = stream.getdents.pop();
        assert(name.length < 256); // limit of dirent struct
        if (name[0] === '.') {
          id = 1;
          type = 4; // DT_DIR
        } else {
          var child = FS.lookupNode(stream.node, name);
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        HEAP32[((dirp + pos)>>2)]=id;
        HEAP32[(((dirp + pos)+(4))>>2)]=stream.position;
        HEAP16[(((dirp + pos)+(8))>>1)]=268;
        HEAP8[(((dirp + pos)+(10))>>0)]=type;
        for (var i = 0; i < name.length; i++) {
          HEAP8[(((dirp + pos)+(11 + i))>>0)]=name.charCodeAt(i);
        }
        HEAP8[(((dirp + pos)+(11 + i))>>0)]=0;
        pos += 268;
      }
      return pos;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
___buildEnvironment(ENV);
__ATINIT__.push(function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); });
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vi": nullFunc_vi, "nullFunc_ii": nullFunc_ii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iii": nullFunc_iii, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_ii": invoke_ii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_iii": invoke_iii, "_fabs": _fabs, "_midi_send_cmd2": _midi_send_cmd2, "_exp": _exp, "__inet_ntop6_raw": __inet_ntop6_raw, "___syscall220": ___syscall220, "___syscall66": ___syscall66, "___syscall64": ___syscall64, "_sqrtf": _sqrtf, "___syscall63": ___syscall63, "___syscall60": ___syscall60, "___muldc3": ___muldc3, "_label_row_get": _label_row_get, "__isLeapYear": __isLeapYear, "_clock_gettime": _clock_gettime, "_llvm_pow_f64": _llvm_pow_f64, "_setgrent": _setgrent, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "___syscall38": ___syscall38, "_sbrk": _sbrk, "_label_row_update": _label_row_update, "_endgrent": _endgrent, "_emscripten_memcpy_big": _emscripten_memcpy_big, "__addDays": __addDays, "_getnameinfo": _getnameinfo, "___syscall152": ___syscall152, "_execl": _execl, "___syscall150": ___syscall150, "_tanf": _tanf, "___syscall221": ___syscall221, "_abort": _abort, "_cos": _cos, "_pthread_setcancelstate": _pthread_setcancelstate, "_led_set": _led_set, "___syscall75": ___syscall75, "_llvm_stacksave": _llvm_stacksave, "___syscall77": ___syscall77, "___syscall132": ___syscall132, "_fsw_poll": _fsw_poll, "__write_sockaddr": __write_sockaddr, "_expf": _expf, "_gmtime_r": _gmtime_r, "_pthread_cleanup_push": _pthread_cleanup_push, "___syscall306": ___syscall306, "___syscall307": ___syscall307, "___syscall304": ___syscall304, "___syscall305": ___syscall305, "___syscall302": ___syscall302, "___syscall303": ___syscall303, "___syscall300": ___syscall300, "___syscall301": ___syscall301, "___syscall140": ___syscall140, "___syscall142": ___syscall142, "_posix_spawn_file_actions_adddup2": _posix_spawn_file_actions_adddup2, "___syscall144": ___syscall144, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall147": ___syscall147, "___block_all_sigs": ___block_all_sigs, "___syscall85": ___syscall85, "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic, "___syscall83": ___syscall83, "___syscall125": ___syscall125, "___syscall122": ___syscall122, "__inet_ntop4_raw": __inet_ntop4_raw, "___syscall118": ___syscall118, "_llvm_stackrestore": _llvm_stackrestore, "_atan2f": _atan2f, "___syscall148": ___syscall148, "___clone": ___clone, "_wait": _wait, "___setErrNo": ___setErrNo, "___syscall333": ___syscall333, "___syscall331": ___syscall331, "___syscall330": ___syscall330, "___syscall334": ___syscall334, "___syscall153": ___syscall153, "___syscall97": ___syscall97, "___syscall96": ___syscall96, "___syscall94": ___syscall94, "_nanosleep": _nanosleep, "___syscall91": ___syscall91, "___buildEnvironment": ___buildEnvironment, "_lcd_updated_all": _lcd_updated_all, "_setgroups": _setgroups, "_kill": _kill, "___syscall114": ___syscall114, "_getaddrinfo": _getaddrinfo, "___syscall15": ___syscall15, "___syscall14": ___syscall14, "___syscall12": ___syscall12, "_emscripten_get_now": _emscripten_get_now, "___syscall10": ___syscall10, "___syscall9": ___syscall9, "___syscall3": ___syscall3, "___syscall1": ___syscall1, "___lock": ___lock, "___syscall320": ___syscall320, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "___syscall4": ___syscall4, "_time": _time, "___syscall308": ___syscall308, "___syscall209": ___syscall209, "___syscall207": ___syscall207, "___syscall205": ___syscall205, "___syscall204": ___syscall204, "___syscall203": ___syscall203, "___syscall202": ___syscall202, "___syscall201": ___syscall201, "___syscall200": ___syscall200, "_pthread_cleanup_pop": _pthread_cleanup_pop, "__inet_pton4_raw": __inet_pton4_raw, "___syscall269": ___syscall269, "___syscall268": ___syscall268, "___syscall102": ___syscall102, "_setitimer": _setitimer, "___syscall265": ___syscall265, "_getgrent": _getgrent, "___syscall29": ___syscall29, "___syscall20": ___syscall20, "__Exit": __Exit, "_logf": _logf, "_floor": _floor, "___syscall295": ___syscall295, "___syscall296": ___syscall296, "___syscall219": ___syscall219, "___syscall298": ___syscall298, "___syscall299": ___syscall299, "_fabsf": _fabsf, "___syscall218": ___syscall218, "___syscall192": ___syscall192, "___syscall191": ___syscall191, "___syscall197": ___syscall197, "___syscall196": ___syscall196, "___syscall195": ___syscall195, "___syscall194": ___syscall194, "___syscall211": ___syscall211, "___syscall199": ___syscall199, "___syscall198": ___syscall198, "___syscall214": ___syscall214, "_strftime": _strftime, "_sinf": _sinf, "___syscall272": ___syscall272, "_getenv": _getenv, "___syscall36": ___syscall36, "_floorf": _floorf, "___syscall33": ___syscall33, "_log": _log, "___syscall121": ___syscall121, "___syscall39": ___syscall39, "___syscall212": ___syscall212, "_tan": _tan, "_sysconf": _sysconf, "___syscall340": ___syscall340, "___syscall180": ___syscall180, "___syscall181": ___syscall181, "___syscall183": ___syscall183, "___syscall324": ___syscall324, "_atan2": _atan2, "_fabsl": _fabsl, "___mulsc3": ___mulsc3, "_waitpid": _waitpid, "_lcd_row_get": _lcd_row_get, "___syscall163": ___syscall163, "_sin": _sin, "_cosf": _cosf, "___syscall168": ___syscall168, "___syscall40": ___syscall40, "___syscall41": ___syscall41, "___syscall42": ___syscall42, "___syscall151": ___syscall151, "_fork": _fork, "__inet_pton6_raw": __inet_pton6_raw, "___clock_gettime": ___clock_gettime, "_usleep": _usleep, "___syscall193": ___syscall193, "___syscall297": ___syscall297, "__read_sockaddr": __read_sockaddr, "_posix_spawn_file_actions_destroy": _posix_spawn_file_actions_destroy, "_llvm_fma_f64": _llvm_fma_f64, "_posix_spawn_file_actions_init": _posix_spawn_file_actions_init, "__arraySum": __arraySum, "_pthread_self": _pthread_self, "_posix_spawn": _posix_spawn, "___restore_sigs": ___restore_sigs, "___syscall51": ___syscall51, "___syscall57": ___syscall57, "___syscall133": ___syscall133, "___syscall54": ___syscall54, "___unlock": ___unlock, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___syscall": ___syscall, "___syscall65": ___syscall65, "___syscall34": ___syscall34, "_midi_log_cwrap": _midi_log_cwrap, "___wait": ___wait, "_sqrt": _sqrt, "_inet_addr": _inet_addr, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___environ": ___environ };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___environ=env.___environ|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var invoke_ii=env.invoke_ii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iii=env.invoke_iii;
  var _fabs=env._fabs;
  var _midi_send_cmd2=env._midi_send_cmd2;
  var _exp=env._exp;
  var __inet_ntop6_raw=env.__inet_ntop6_raw;
  var ___syscall220=env.___syscall220;
  var ___syscall66=env.___syscall66;
  var ___syscall64=env.___syscall64;
  var _sqrtf=env._sqrtf;
  var ___syscall63=env.___syscall63;
  var ___syscall60=env.___syscall60;
  var ___muldc3=env.___muldc3;
  var _label_row_get=env._label_row_get;
  var __isLeapYear=env.__isLeapYear;
  var _clock_gettime=env._clock_gettime;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _setgrent=env._setgrent;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var ___syscall38=env.___syscall38;
  var _sbrk=env._sbrk;
  var _label_row_update=env._label_row_update;
  var _endgrent=env._endgrent;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var __addDays=env.__addDays;
  var _getnameinfo=env._getnameinfo;
  var ___syscall152=env.___syscall152;
  var _execl=env._execl;
  var ___syscall150=env.___syscall150;
  var _tanf=env._tanf;
  var ___syscall221=env.___syscall221;
  var _abort=env._abort;
  var _cos=env._cos;
  var _pthread_setcancelstate=env._pthread_setcancelstate;
  var _led_set=env._led_set;
  var ___syscall75=env.___syscall75;
  var _llvm_stacksave=env._llvm_stacksave;
  var ___syscall77=env.___syscall77;
  var ___syscall132=env.___syscall132;
  var _fsw_poll=env._fsw_poll;
  var __write_sockaddr=env.__write_sockaddr;
  var _expf=env._expf;
  var _gmtime_r=env._gmtime_r;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___syscall306=env.___syscall306;
  var ___syscall307=env.___syscall307;
  var ___syscall304=env.___syscall304;
  var ___syscall305=env.___syscall305;
  var ___syscall302=env.___syscall302;
  var ___syscall303=env.___syscall303;
  var ___syscall300=env.___syscall300;
  var ___syscall301=env.___syscall301;
  var ___syscall140=env.___syscall140;
  var ___syscall142=env.___syscall142;
  var _posix_spawn_file_actions_adddup2=env._posix_spawn_file_actions_adddup2;
  var ___syscall144=env.___syscall144;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall147=env.___syscall147;
  var ___block_all_sigs=env.___block_all_sigs;
  var ___syscall85=env.___syscall85;
  var _emscripten_get_now_is_monotonic=env._emscripten_get_now_is_monotonic;
  var ___syscall83=env.___syscall83;
  var ___syscall125=env.___syscall125;
  var ___syscall122=env.___syscall122;
  var __inet_ntop4_raw=env.__inet_ntop4_raw;
  var ___syscall118=env.___syscall118;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _atan2f=env._atan2f;
  var ___syscall148=env.___syscall148;
  var ___clone=env.___clone;
  var _wait=env._wait;
  var ___setErrNo=env.___setErrNo;
  var ___syscall333=env.___syscall333;
  var ___syscall331=env.___syscall331;
  var ___syscall330=env.___syscall330;
  var ___syscall334=env.___syscall334;
  var ___syscall153=env.___syscall153;
  var ___syscall97=env.___syscall97;
  var ___syscall96=env.___syscall96;
  var ___syscall94=env.___syscall94;
  var _nanosleep=env._nanosleep;
  var ___syscall91=env.___syscall91;
  var ___buildEnvironment=env.___buildEnvironment;
  var _lcd_updated_all=env._lcd_updated_all;
  var _setgroups=env._setgroups;
  var _kill=env._kill;
  var ___syscall114=env.___syscall114;
  var _getaddrinfo=env._getaddrinfo;
  var ___syscall15=env.___syscall15;
  var ___syscall14=env.___syscall14;
  var ___syscall12=env.___syscall12;
  var _emscripten_get_now=env._emscripten_get_now;
  var ___syscall10=env.___syscall10;
  var ___syscall9=env.___syscall9;
  var ___syscall3=env.___syscall3;
  var ___syscall1=env.___syscall1;
  var ___lock=env.___lock;
  var ___syscall320=env.___syscall320;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var ___syscall4=env.___syscall4;
  var _time=env._time;
  var ___syscall308=env.___syscall308;
  var ___syscall209=env.___syscall209;
  var ___syscall207=env.___syscall207;
  var ___syscall205=env.___syscall205;
  var ___syscall204=env.___syscall204;
  var ___syscall203=env.___syscall203;
  var ___syscall202=env.___syscall202;
  var ___syscall201=env.___syscall201;
  var ___syscall200=env.___syscall200;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var __inet_pton4_raw=env.__inet_pton4_raw;
  var ___syscall269=env.___syscall269;
  var ___syscall268=env.___syscall268;
  var ___syscall102=env.___syscall102;
  var _setitimer=env._setitimer;
  var ___syscall265=env.___syscall265;
  var _getgrent=env._getgrent;
  var ___syscall29=env.___syscall29;
  var ___syscall20=env.___syscall20;
  var __Exit=env.__Exit;
  var _logf=env._logf;
  var _floor=env._floor;
  var ___syscall295=env.___syscall295;
  var ___syscall296=env.___syscall296;
  var ___syscall219=env.___syscall219;
  var ___syscall298=env.___syscall298;
  var ___syscall299=env.___syscall299;
  var _fabsf=env._fabsf;
  var ___syscall218=env.___syscall218;
  var ___syscall192=env.___syscall192;
  var ___syscall191=env.___syscall191;
  var ___syscall197=env.___syscall197;
  var ___syscall196=env.___syscall196;
  var ___syscall195=env.___syscall195;
  var ___syscall194=env.___syscall194;
  var ___syscall211=env.___syscall211;
  var ___syscall199=env.___syscall199;
  var ___syscall198=env.___syscall198;
  var ___syscall214=env.___syscall214;
  var _strftime=env._strftime;
  var _sinf=env._sinf;
  var ___syscall272=env.___syscall272;
  var _getenv=env._getenv;
  var ___syscall36=env.___syscall36;
  var _floorf=env._floorf;
  var ___syscall33=env.___syscall33;
  var _log=env._log;
  var ___syscall121=env.___syscall121;
  var ___syscall39=env.___syscall39;
  var ___syscall212=env.___syscall212;
  var _tan=env._tan;
  var _sysconf=env._sysconf;
  var ___syscall340=env.___syscall340;
  var ___syscall180=env.___syscall180;
  var ___syscall181=env.___syscall181;
  var ___syscall183=env.___syscall183;
  var ___syscall324=env.___syscall324;
  var _atan2=env._atan2;
  var _fabsl=env._fabsl;
  var ___mulsc3=env.___mulsc3;
  var _waitpid=env._waitpid;
  var _lcd_row_get=env._lcd_row_get;
  var ___syscall163=env.___syscall163;
  var _sin=env._sin;
  var _cosf=env._cosf;
  var ___syscall168=env.___syscall168;
  var ___syscall40=env.___syscall40;
  var ___syscall41=env.___syscall41;
  var ___syscall42=env.___syscall42;
  var ___syscall151=env.___syscall151;
  var _fork=env._fork;
  var __inet_pton6_raw=env.__inet_pton6_raw;
  var ___clock_gettime=env.___clock_gettime;
  var _usleep=env._usleep;
  var ___syscall193=env.___syscall193;
  var ___syscall297=env.___syscall297;
  var __read_sockaddr=env.__read_sockaddr;
  var _posix_spawn_file_actions_destroy=env._posix_spawn_file_actions_destroy;
  var _llvm_fma_f64=env._llvm_fma_f64;
  var _posix_spawn_file_actions_init=env._posix_spawn_file_actions_init;
  var __arraySum=env.__arraySum;
  var _pthread_self=env._pthread_self;
  var _posix_spawn=env._posix_spawn;
  var ___restore_sigs=env.___restore_sigs;
  var ___syscall51=env.___syscall51;
  var ___syscall57=env.___syscall57;
  var ___syscall133=env.___syscall133;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___syscall=env.___syscall;
  var ___syscall65=env.___syscall65;
  var ___syscall34=env.___syscall34;
  var _midi_log_cwrap=env._midi_log_cwrap;
  var ___wait=env.___wait;
  var _sqrt=env._sqrt;
  var _inet_addr=env._inet_addr;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _flash_load($addr,$count,$data) {
 $addr = $addr|0;
 $count = $count|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $count;
 $2 = $data;
 $3 = $2;
 $4 = $0;
 $5 = $4&65535;
 $6 = (147552 + ($5)|0);
 $7 = $1;
 $8 = $7&65535;
 _memcpy(($3|0),($6|0),($8|0))|0;
 STACKTOP = sp;return;
}
function _flash_store($addr,$count,$data) {
 $addr = $addr|0;
 $count = $count|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $count;
 $2 = $data;
 $3 = $0;
 $4 = $3&65535;
 $5 = (147552 + ($4)|0);
 $6 = $2;
 $7 = $1;
 $8 = $7&65535;
 _memcpy(($5|0),($6|0),($8|0))|0;
 STACKTOP = sp;return;
}
function _flash_addr($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $0;
 $2 = $1&65535;
 $3 = (147552 + ($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _lookup_table($table) {
 $table = $table|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $table;
 STACKTOP = sp;return (157792|0);
}
function _debug_log($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $ap = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $target = sp + 24|0;
 $ap = sp;
 $0 = $fmt;
 HEAP32[$ap>>2] = $varargs;
 $1 = $0;
 (_vsprintf($target,$1,$ap)|0);
 _midi_log_cwrap(($target|0));
 STACKTOP = sp;return;
}
function _controller_init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 HEAP8[(7090)>>0] = 0;
 HEAP8[(7122)>>0] = 0;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = $0&255;
  $2 = ($1|0)<(1);
  if (!($2)) {
   break;
  }
  $3 = $i;
  $4 = $3&255;
  $5 = ((7124) + ($4<<3)|0);
  $6 = ((($5)) + 4|0);
  HEAP8[$6>>0] = 0;
  $7 = $i;
  $8 = $7&255;
  $9 = ((7124) + ($8<<3)|0);
  HEAP8[$9>>0] = 0;
  $10 = $i;
  $11 = (($10) + 1)<<24>>24;
  $i = $11;
 }
 HEAP16[(7088)>>1] = -1;
 HEAP16[(7120)>>1] = 0;
 HEAP8[(7101)>>0] = 0;
 HEAP8[(7133)>>0] = 1;
 _flash_load(8192,64,157920);
 $12 = HEAP8[157920>>0]|0;
 $13 = $12&255;
 $14 = (($13) - 1)|0;
 $15 = $14&255;
 HEAP8[157984>>0] = $15;
 HEAP8[(7134)>>0] = 0;
 HEAP8[(7135)>>0] = 0;
 HEAP8[(7136)>>0] = 0;
 $16 = HEAP8[(7134)>>0]|0;
 $17 = $16&255;
 $18 = ((157923) + ($17)|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20<<6;
 $22 = $21&65535;
 _flash_load($22,64,25256);
 $23 = HEAP8[(7136)>>0]|0;
 $24 = $23&255;
 $25 = ((25260) + (($24*6)|0)|0);
 $26 = ((($25)) + 2|0);
 ;HEAP8[(7139)>>0]=HEAP8[$26>>0]|0;HEAP8[(7139)+1>>0]=HEAP8[$26+1>>0]|0;
 $27 = HEAP8[(7136)>>0]|0;
 $28 = $27&255;
 $29 = ((25260) + (($28*6)|0)|0);
 $30 = ((($29)) + 2|0);
 $31 = ((($30)) + 2|0);
 ;HEAP8[(7141)>>0]=HEAP8[$31>>0]|0;HEAP8[(7141)+1>>0]=HEAP8[$31+1>>0]|0;
 $32 = HEAP8[(7139)>>0]|0;
 $33 = $32&255;
 $34 = $33 ^ -1;
 $35 = $34&255;
 HEAP8[(7107)>>0] = $35;
 $36 = HEAP8[(7141)>>0]|0;
 $37 = $36&255;
 $38 = $37 ^ -1;
 $39 = $38&255;
 HEAP8[(7109)>>0] = $39;
 $40 = HEAP8[(7140)>>0]|0;
 $41 = $40&255;
 $42 = $41 ^ -1;
 $43 = $42&255;
 HEAP8[(7108)>>0] = $43;
 $44 = HEAP8[(7142)>>0]|0;
 $45 = $44&255;
 $46 = $45 ^ -1;
 $47 = $46&255;
 HEAP8[(7110)>>0] = $47;
 HEAP8[(7137)>>0] = 1;
 HEAP8[(7138)>>0] = 0;
 $48 = (_lookup_table(0)|0);
 HEAP32[7076>>2] = $48;
 $i = 0;
 while(1) {
  $49 = $i;
  $50 = $49&255;
  $51 = ($50|0)<(4);
  if (!($51)) {
   break;
  }
  $52 = $i;
  $53 = (_lcd_row_get(($52|0))|0);
  $54 = $i;
  $55 = $54&255;
  $56 = (7144 + ($55<<2)|0);
  HEAP32[$56>>2] = $53;
  $57 = $i;
  $58 = (($57) + 1)<<24>>24;
  $i = $58;
 }
 $i = 0;
 while(1) {
  $59 = $i;
  $60 = $59&255;
  $61 = ($60|0)<(20);
  if (!($61)) {
   break;
  }
  $62 = $i;
  $63 = $62&255;
  $64 = (157994 + ($63)|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $i;
  $67 = $66&255;
  $68 = HEAP32[7144>>2]|0;
  $69 = (($68) + ($67)|0);
  HEAP8[$69>>0] = $65;
  $70 = $i;
  $71 = $70&255;
  $72 = (157994 + ($71)|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $i;
  $75 = $74&255;
  $76 = HEAP32[(7148)>>2]|0;
  $77 = (($76) + ($75)|0);
  HEAP8[$77>>0] = $73;
  $78 = $i;
  $79 = $78&255;
  $80 = (157994 + ($79)|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $i;
  $83 = $82&255;
  $84 = HEAP32[(7152)>>2]|0;
  $85 = (($84) + ($83)|0);
  HEAP8[$85>>0] = $81;
  $86 = $i;
  $87 = $86&255;
  $88 = (157994 + ($87)|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = $i;
  $91 = $90&255;
  $92 = HEAP32[(7156)>>2]|0;
  $93 = (($92) + ($91)|0);
  HEAP8[$93>>0] = $89;
  $94 = $i;
  $95 = (($94) + 1)<<24>>24;
  $i = $95;
 }
 _update_lcd();
 STACKTOP = sp;return;
}
function _controller_10msec_timer() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[(7116)>>0]|0;
 $1 = $0&255;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP8[7112>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==(2);
  if ($5) {
   $6 = HEAP8[(157992)>>0]|0;
   $7 = $6&255;
   $8 = $7 & 128;
   $9 = ($8|0)!=(0);
   if ($9) {
    $10 = HEAP8[(157992)>>0]|0;
    $11 = $10&255;
    $12 = $11 & 127;
    $13 = ($12|0)<(127);
    if ($13) {
     $14 = HEAP8[(157992)>>0]|0;
     $15 = $14&255;
     $16 = $15 & 128;
     $17 = HEAP8[(157992)>>0]|0;
     $18 = $17&255;
     $19 = $18 & 127;
     $20 = (($19) + 1)|0;
     $21 = $16 | $20;
     $22 = $21&255;
     HEAP8[(157992)>>0] = $22;
     $23 = HEAP8[(157992)>>0]|0;
     $24 = $23&255;
     $25 = $24 & 127;
     $26 = ($25|0)==(127);
     if ($26) {
      HEAP8[(157992)>>0] = 0;
      _curr_amp_reset();
     }
    }
   }
  }
 }
 $27 = HEAP8[(7116)>>0]|0;
 $28 = $27&255;
 $29 = ($28|0)==(0);
 if ($29) {
  $30 = HEAP8[7112>>0]|0;
  $31 = $30&255;
  $32 = ($31|0)==(8);
  if ($32) {
   $33 = HEAP8[157985>>0]|0;
   $34 = $33&255;
   $35 = $34 & 192;
   $36 = ($35|0)!=(0);
   if ($36) {
    $37 = HEAP8[157985>>0]|0;
    $38 = $37&255;
    $39 = $38 & 192;
    $40 = HEAP8[157985>>0]|0;
    $41 = $40&255;
    $42 = $41 & 63;
    $43 = (($42) + 1)|0;
    $44 = $43 & 63;
    $45 = $39 | $44;
    $46 = $45&255;
    HEAP8[157985>>0] = $46;
   }
   $47 = HEAP8[157985>>0]|0;
   $48 = $47&255;
   $49 = $48 & 128;
   $50 = ($49|0)!=(0);
   if ($50) {
    $51 = HEAP8[157985>>0]|0;
    $52 = $51&255;
    $53 = $52 & 63;
    $54 = ($53|0)>=(32);
    if ($54) {
     $55 = HEAP8[157985>>0]|0;
     $56 = $55&255;
     $57 = $56 | 64;
     $58 = $57&255;
     HEAP8[157985>>0] = $58;
    }
   }
   $59 = HEAP8[157985>>0]|0;
   $60 = $59&255;
   $61 = $60 & 64;
   $62 = ($61|0)!=(0);
   if ($62) {
    $63 = HEAP8[157985>>0]|0;
    $64 = $63&255;
    $65 = $64 & 7;
    $66 = ($65|0)==(0);
    if ($66) {
     _curr_amp_vol_decrease();
    }
   }
  }
 }
 $67 = HEAP8[(7116)>>0]|0;
 $68 = $67&255;
 $69 = ($68|0)==(0);
 if ($69) {
  $70 = HEAP8[7112>>0]|0;
  $71 = $70&255;
  $72 = ($71|0)==(16);
  if ($72) {
   $73 = HEAP8[(157986)>>0]|0;
   $74 = $73&255;
   $75 = $74 & 192;
   $76 = ($75|0)!=(0);
   if ($76) {
    $77 = HEAP8[(157986)>>0]|0;
    $78 = $77&255;
    $79 = $78 & 192;
    $80 = HEAP8[(157986)>>0]|0;
    $81 = $80&255;
    $82 = $81 & 63;
    $83 = (($82) + 1)|0;
    $84 = $83 & 63;
    $85 = $79 | $84;
    $86 = $85&255;
    HEAP8[(157986)>>0] = $86;
   }
   $87 = HEAP8[(157986)>>0]|0;
   $88 = $87&255;
   $89 = $88 & 128;
   $90 = ($89|0)!=(0);
   if ($90) {
    $91 = HEAP8[(157986)>>0]|0;
    $92 = $91&255;
    $93 = $92 & 63;
    $94 = ($93|0)>=(32);
    if ($94) {
     $95 = HEAP8[(157986)>>0]|0;
     $96 = $95&255;
     $97 = $96 | 64;
     $98 = $97&255;
     HEAP8[(157986)>>0] = $98;
    }
   }
   $99 = HEAP8[(157986)>>0]|0;
   $100 = $99&255;
   $101 = $100 & 64;
   $102 = ($101|0)!=(0);
   if ($102) {
    $103 = HEAP8[(157986)>>0]|0;
    $104 = $103&255;
    $105 = $104 & 7;
    $106 = ($105|0)==(0);
    if ($106) {
     _curr_amp_vol_increase();
    }
   }
  }
 }
 $107 = HEAP8[(7116)>>0]|0;
 $108 = $107&255;
 $109 = ($108|0)==(0);
 if ($109) {
  $110 = HEAP8[7112>>0]|0;
  $111 = $110&255;
  $112 = ($111|0)==(32);
  if ($112) {
   $113 = HEAP8[(157993)>>0]|0;
   $114 = $113&255;
   $115 = $114 & 128;
   $116 = ($115|0)!=(0);
   if ($116) {
    $117 = HEAP8[(157993)>>0]|0;
    $118 = $117&255;
    $119 = $118 & 127;
    $120 = ($119|0)<(127);
    if ($120) {
     $121 = HEAP8[(157993)>>0]|0;
     $122 = $121&255;
     $123 = $122 & 128;
     $124 = HEAP8[(157993)>>0]|0;
     $125 = $124&255;
     $126 = $125 & 127;
     $127 = (($126) + 1)|0;
     $128 = $123 | $127;
     $129 = $128&255;
     HEAP8[(157993)>>0] = $129;
     $130 = HEAP8[(157993)>>0]|0;
     $131 = $130&255;
     $132 = $131 & 127;
     $133 = ($132|0)==(127);
     if ($133) {
      HEAP8[(157993)>>0] = 0;
      _toggle_setlist_mode();
     }
    }
   }
  }
 }
 $134 = HEAP8[(7116)>>0]|0;
 $135 = $134&255;
 $136 = ($135|0)==(0);
 if ($136) {
  $137 = HEAP8[7112>>0]|0;
  $138 = $137&255;
  $139 = ($138|0)==(64);
  if ($139) {
   $140 = HEAP8[(157987)>>0]|0;
   $141 = $140&255;
   $142 = $141 & 128;
   $143 = ($142|0)!=(0);
   if ($143) {
    $144 = HEAP8[(157987)>>0]|0;
    $145 = $144&255;
    $146 = $145 & 127;
    $147 = ($146|0)<(127);
    if ($147) {
     $148 = HEAP8[(157987)>>0]|0;
     $149 = $148&255;
     $150 = $149 & 128;
     $151 = HEAP8[(157987)>>0]|0;
     $152 = $151&255;
     $153 = $152 & 127;
     $154 = (($153) + 1)|0;
     $155 = $150 | $154;
     $156 = $155&255;
     HEAP8[(157987)>>0] = $156;
     $157 = HEAP8[(157987)>>0]|0;
     $158 = $157&255;
     $159 = $158 & 127;
     $160 = ($159|0)==(127);
     if ($160) {
      HEAP8[(157987)>>0] = 0;
      _scene_delete();
     }
    }
   }
  }
 }
 $161 = HEAP8[(7116)>>0]|0;
 $162 = $161&255;
 $163 = ($162|0)==(0);
 if ($163) {
  $164 = HEAP8[7112>>0]|0;
  $165 = $164&255;
  $166 = ($165|0)==(128);
  if ($166) {
   $167 = HEAP8[(157988)>>0]|0;
   $168 = $167&255;
   $169 = $168 & 128;
   $170 = ($169|0)!=(0);
   if ($170) {
    $171 = HEAP8[(157988)>>0]|0;
    $172 = $171&255;
    $173 = $172 & 127;
    $174 = ($173|0)<(127);
    if ($174) {
     $175 = HEAP8[(157988)>>0]|0;
     $176 = $175&255;
     $177 = $176 & 128;
     $178 = HEAP8[(157988)>>0]|0;
     $179 = $178&255;
     $180 = $179 & 127;
     $181 = (($180) + 1)|0;
     $182 = $177 | $181;
     $183 = $182&255;
     HEAP8[(157988)>>0] = $183;
     $184 = HEAP8[(157988)>>0]|0;
     $185 = $184&255;
     $186 = $185 & 127;
     $187 = ($186|0)==(127);
     if ($187) {
      HEAP8[(157988)>>0] = 0;
      _scene_insert();
     }
    }
   }
  }
 }
 $188 = HEAP8[7112>>0]|0;
 $189 = $188&255;
 $190 = ($189|0)==(0);
 if ($190) {
  $191 = HEAP8[(7116)>>0]|0;
  $192 = $191&255;
  $193 = ($192|0)==(64);
  if ($193) {
   $194 = HEAP8[(157989)>>0]|0;
   $195 = $194&255;
   $196 = $195 & 192;
   $197 = ($196|0)!=(0);
   if ($197) {
    $198 = HEAP8[(157989)>>0]|0;
    $199 = $198&255;
    $200 = $199 & 192;
    $201 = HEAP8[(157989)>>0]|0;
    $202 = $201&255;
    $203 = $202 & 63;
    $204 = (($203) + 1)|0;
    $205 = $204 & 63;
    $206 = $200 | $205;
    $207 = $206&255;
    HEAP8[(157989)>>0] = $207;
   }
   $208 = HEAP8[(157989)>>0]|0;
   $209 = $208&255;
   $210 = $209 & 128;
   $211 = ($210|0)!=(0);
   if ($211) {
    $212 = HEAP8[(157989)>>0]|0;
    $213 = $212&255;
    $214 = $213 & 63;
    $215 = ($214|0)>=(32);
    if ($215) {
     $216 = HEAP8[(157989)>>0]|0;
     $217 = $216&255;
     $218 = $217 | 64;
     $219 = $218&255;
     HEAP8[(157989)>>0] = $219;
    }
   }
   $220 = HEAP8[(157989)>>0]|0;
   $221 = $220&255;
   $222 = $221 & 64;
   $223 = ($222|0)!=(0);
   if ($223) {
    $224 = HEAP8[(157989)>>0]|0;
    $225 = $224&255;
    $226 = $225 & 7;
    $227 = ($226|0)==(0);
    if ($227) {
     _prev_song();
    }
   }
  }
 }
 $228 = HEAP8[7112>>0]|0;
 $229 = $228&255;
 $230 = ($229|0)==(0);
 if (!($230)) {
  return;
 }
 $231 = HEAP8[(7116)>>0]|0;
 $232 = $231&255;
 $233 = ($232|0)==(128);
 if (!($233)) {
  return;
 }
 $234 = HEAP8[(157990)>>0]|0;
 $235 = $234&255;
 $236 = $235 & 192;
 $237 = ($236|0)!=(0);
 if ($237) {
  $238 = HEAP8[(157990)>>0]|0;
  $239 = $238&255;
  $240 = $239 & 192;
  $241 = HEAP8[(157990)>>0]|0;
  $242 = $241&255;
  $243 = $242 & 63;
  $244 = (($243) + 1)|0;
  $245 = $244 & 63;
  $246 = $240 | $245;
  $247 = $246&255;
  HEAP8[(157990)>>0] = $247;
 }
 $248 = HEAP8[(157990)>>0]|0;
 $249 = $248&255;
 $250 = $249 & 128;
 $251 = ($250|0)!=(0);
 if ($251) {
  $252 = HEAP8[(157990)>>0]|0;
  $253 = $252&255;
  $254 = $253 & 63;
  $255 = ($254|0)>=(32);
  if ($255) {
   $256 = HEAP8[(157990)>>0]|0;
   $257 = $256&255;
   $258 = $257 | 64;
   $259 = $258&255;
   HEAP8[(157990)>>0] = $259;
  }
 }
 $260 = HEAP8[(157990)>>0]|0;
 $261 = $260&255;
 $262 = $261 & 64;
 $263 = ($262|0)!=(0);
 if (!($263)) {
  return;
 }
 $264 = HEAP8[(157990)>>0]|0;
 $265 = $264&255;
 $266 = $265 & 7;
 $267 = ($266|0)==(0);
 if (!($267)) {
  return;
 }
 _next_song();
 return;
}
function _controller_handle() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fx = 0, $fx1 = 0, $fx2 = 0;
 var $fx3 = 0, $fx4 = 0, $fx5 = 0, $pr_num = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_fsw_poll()|0);
 $tmp = $0;
 $1 = $tmp;
 $2 = $1&65535;
 $3 = $2 & 255;
 $4 = $3&255;
 HEAP8[7112>>0] = $4;
 $5 = $tmp;
 $6 = $5&65535;
 $7 = $6 >> 8;
 $8 = $7 & 255;
 $9 = $8&255;
 HEAP8[(7116)>>0] = $9;
 $10 = HEAP8[7080>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = HEAP8[7112>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)==(1);
  if ($15) {
   $16 = HEAP8[(7138)>>0]|0;
   $17 = $16&255;
   $18 = $17 ^ 1;
   $19 = $18&255;
   HEAP8[(7138)>>0] = $19;
   HEAP8[(157991)>>0] = -128;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $20 = HEAP8[7080>>0]|0;
  $21 = $20&255;
  $22 = $21 & 1;
  $23 = ($22|0)==(1);
  if ($23) {
   $24 = HEAP8[7112>>0]|0;
   $25 = $24&255;
   $26 = $25 & 1;
   $27 = ($26|0)==(0);
   if ($27) {
    HEAP8[(157991)>>0] = 0;
   }
  }
 }
 $28 = HEAP8[7080>>0]|0;
 $29 = $28&255;
 $30 = ($29|0)==(0);
 if ($30) {
  $31 = HEAP8[7112>>0]|0;
  $32 = $31&255;
  $33 = ($32|0)==(2);
  if ($33) {
   HEAP8[(157992)>>0] = -128;
  } else {
   label = 10;
  }
 } else {
  label = 10;
 }
 if ((label|0) == 10) {
  $34 = HEAP8[7080>>0]|0;
  $35 = $34&255;
  $36 = $35 & 2;
  $37 = ($36|0)==(2);
  if ($37) {
   $38 = HEAP8[7112>>0]|0;
   $39 = $38&255;
   $40 = $39 & 2;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = HEAP8[(157992)>>0]|0;
    $43 = $42&255;
    $44 = $43 & 128;
    $45 = ($44|0)!=(0);
    if ($45) {
     $46 = HEAP8[(7137)>>0]|0;
     $47 = $46&255;
     $48 = $47 ^ 1;
     $49 = $48&255;
     HEAP8[(7137)>>0] = $49;
    }
    HEAP8[(157992)>>0] = 0;
   }
  }
 }
 $50 = HEAP8[7080>>0]|0;
 $51 = $50&255;
 $52 = ($51|0)==(0);
 if ($52) {
  $53 = HEAP8[7112>>0]|0;
  $54 = $53&255;
  $55 = ($54|0)==(4);
  if ($55) {
   _curr_amp_vol_toggle();
  }
 }
 $56 = HEAP8[7080>>0]|0;
 $57 = $56&255;
 $58 = ($57|0)==(0);
 if ($58) {
  $59 = HEAP8[7112>>0]|0;
  $60 = $59&255;
  $61 = ($60|0)==(8);
  if ($61) {
   HEAP8[157985>>0] = -128;
   _curr_amp_vol_decrease();
  } else {
   label = 21;
  }
 } else {
  label = 21;
 }
 if ((label|0) == 21) {
  $62 = HEAP8[7080>>0]|0;
  $63 = $62&255;
  $64 = $63 & 8;
  $65 = ($64|0)==(8);
  if ($65) {
   $66 = HEAP8[7112>>0]|0;
   $67 = $66&255;
   $68 = $67 & 8;
   $69 = ($68|0)==(0);
   if ($69) {
    $70 = HEAP8[157985>>0]|0;
    $71 = $70&255;
    $72 = $71 & -193;
    $73 = $72&255;
    HEAP8[157985>>0] = $73;
   }
  }
 }
 $74 = HEAP8[7080>>0]|0;
 $75 = $74&255;
 $76 = ($75|0)==(0);
 if ($76) {
  $77 = HEAP8[7112>>0]|0;
  $78 = $77&255;
  $79 = ($78|0)==(16);
  if ($79) {
   HEAP8[(157986)>>0] = -128;
   _curr_amp_vol_increase();
  } else {
   label = 27;
  }
 } else {
  label = 27;
 }
 if ((label|0) == 27) {
  $80 = HEAP8[7080>>0]|0;
  $81 = $80&255;
  $82 = $81 & 16;
  $83 = ($82|0)==(16);
  if ($83) {
   $84 = HEAP8[7112>>0]|0;
   $85 = $84&255;
   $86 = $85 & 16;
   $87 = ($86|0)==(0);
   if ($87) {
    $88 = HEAP8[(157986)>>0]|0;
    $89 = $88&255;
    $90 = $89 & -193;
    $91 = $90&255;
    HEAP8[(157986)>>0] = $91;
   }
  }
 }
 $92 = HEAP8[7080>>0]|0;
 $93 = $92&255;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP8[7112>>0]|0;
  $96 = $95&255;
  $97 = ($96|0)==(32);
  if ($97) {
   HEAP8[(157993)>>0] = -128;
   $98 = HEAP8[(7132)>>0]|0;
   $99 = $98&255;
   $100 = $99 ^ 127;
   $101 = $100&255;
   HEAP8[(7132)>>0] = $101;
   $102 = HEAP8[(7132)>>0]|0;
   _midi_send_cmd2(11,2,14,($102|0));
  } else {
   label = 33;
  }
 } else {
  label = 33;
 }
 if ((label|0) == 33) {
  $103 = HEAP8[7080>>0]|0;
  $104 = $103&255;
  $105 = ($104|0)==(0);
  if ($105) {
   $106 = HEAP8[7112>>0]|0;
   $107 = $106&255;
   $108 = ($107|0)==(32);
   if ($108) {
    HEAP8[(157993)>>0] = 0;
   }
  }
 }
 $109 = HEAP8[7080>>0]|0;
 $110 = $109&255;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP8[7112>>0]|0;
  $113 = $112&255;
  $114 = ($113|0)==(64);
  if ($114) {
   HEAP8[(157987)>>0] = -128;
  } else {
   label = 39;
  }
 } else {
  label = 39;
 }
 if ((label|0) == 39) {
  $115 = HEAP8[7080>>0]|0;
  $116 = $115&255;
  $117 = $116 & 64;
  $118 = ($117|0)==(64);
  if ($118) {
   $119 = HEAP8[7112>>0]|0;
   $120 = $119&255;
   $121 = $120 & 64;
   $122 = ($121|0)==(0);
   if ($122) {
    $123 = HEAP8[(157987)>>0]|0;
    $124 = $123&255;
    $125 = $124 & 128;
    $126 = ($125|0)!=(0);
    if ($126) {
     _prev_scene();
    }
    HEAP8[(157987)>>0] = 0;
   }
  }
 }
 $127 = HEAP8[7080>>0]|0;
 $128 = $127&255;
 $129 = ($128|0)==(0);
 if ($129) {
  $130 = HEAP8[7112>>0]|0;
  $131 = $130&255;
  $132 = ($131|0)==(128);
  if ($132) {
   HEAP8[(157988)>>0] = -128;
  } else {
   label = 47;
  }
 } else {
  label = 47;
 }
 if ((label|0) == 47) {
  $133 = HEAP8[7080>>0]|0;
  $134 = $133&255;
  $135 = $134 & 128;
  $136 = ($135|0)==(128);
  if ($136) {
   $137 = HEAP8[7112>>0]|0;
   $138 = $137&255;
   $139 = $138 & 128;
   $140 = ($139|0)==(0);
   if ($140) {
    $141 = HEAP8[(157988)>>0]|0;
    $142 = $141&255;
    $143 = $142 & 128;
    $144 = ($143|0)!=(0);
    if ($144) {
     _next_scene();
    }
    HEAP8[(157988)>>0] = 0;
   }
  }
 }
 $145 = HEAP8[7080>>0]|0;
 $146 = $145&255;
 $147 = ($146|0)==(0);
 do {
  if ($147) {
   $148 = HEAP8[7112>>0]|0;
   $149 = $148&255;
   $150 = ($149|0)==(0);
   if ($150) {
    $151 = HEAP8[(7084)>>0]|0;
    $152 = $151&255;
    $153 = ($152|0)==(0);
    if ($153) {
     $154 = HEAP8[(7116)>>0]|0;
     $155 = $154&255;
     $156 = ($155|0)==(1);
     if ($156) {
      $157 = HEAP8[(7138)>>0]|0;
      $158 = ($157<<24>>24)!=(0);
      if ($158) {
       $159 = HEAP8[(7139)>>0]|0;
       $160 = $159&255;
       $161 = HEAP8[(7141)>>0]|0;
       $162 = $161&255;
       $163 = $160 | $162;
       $164 = $163 & 1;
       $165 = $164 ^ 1;
       $166 = $165&255;
       $fx = $166;
       $167 = HEAP8[(7139)>>0]|0;
       $168 = $167&255;
       $169 = $168 & -2;
       $170 = $fx;
       $171 = $170&255;
       $172 = $169 | $171;
       $173 = $172&255;
       HEAP8[(7139)>>0] = $173;
       $174 = HEAP8[(7141)>>0]|0;
       $175 = $174&255;
       $176 = $175 & -2;
       $177 = $fx;
       $178 = $177&255;
       $179 = $176 | $178;
       $180 = $179&255;
       HEAP8[(7141)>>0] = $180;
       break;
      } else {
       $181 = HEAP8[(7137)>>0]|0;
       $182 = $181&255;
       $183 = ((7139) + ($182<<1)|0);
       $184 = HEAP8[$183>>0]|0;
       $185 = $184&255;
       $186 = $185 ^ 1;
       $187 = $186&255;
       $188 = HEAP8[(7137)>>0]|0;
       $189 = $188&255;
       $190 = ((7139) + ($189<<1)|0);
       HEAP8[$190>>0] = $187;
       break;
      }
     }
    }
   }
  }
 } while(0);
 $191 = HEAP8[7080>>0]|0;
 $192 = $191&255;
 $193 = ($192|0)==(0);
 do {
  if ($193) {
   $194 = HEAP8[7112>>0]|0;
   $195 = $194&255;
   $196 = ($195|0)==(0);
   if ($196) {
    $197 = HEAP8[(7084)>>0]|0;
    $198 = $197&255;
    $199 = ($198|0)==(0);
    if ($199) {
     $200 = HEAP8[(7116)>>0]|0;
     $201 = $200&255;
     $202 = ($201|0)==(2);
     if ($202) {
      $203 = HEAP8[(7138)>>0]|0;
      $204 = ($203<<24>>24)!=(0);
      if ($204) {
       $205 = HEAP8[(7139)>>0]|0;
       $206 = $205&255;
       $207 = HEAP8[(7141)>>0]|0;
       $208 = $207&255;
       $209 = $206 | $208;
       $210 = $209 & 2;
       $211 = $210 ^ 2;
       $212 = $211&255;
       $fx1 = $212;
       $213 = HEAP8[(7139)>>0]|0;
       $214 = $213&255;
       $215 = $214 & -3;
       $216 = $fx1;
       $217 = $216&255;
       $218 = $215 | $217;
       $219 = $218&255;
       HEAP8[(7139)>>0] = $219;
       $220 = HEAP8[(7141)>>0]|0;
       $221 = $220&255;
       $222 = $221 & -3;
       $223 = $fx1;
       $224 = $223&255;
       $225 = $222 | $224;
       $226 = $225&255;
       HEAP8[(7141)>>0] = $226;
       break;
      } else {
       $227 = HEAP8[(7137)>>0]|0;
       $228 = $227&255;
       $229 = ((7139) + ($228<<1)|0);
       $230 = HEAP8[$229>>0]|0;
       $231 = $230&255;
       $232 = $231 ^ 2;
       $233 = $232&255;
       $234 = HEAP8[(7137)>>0]|0;
       $235 = $234&255;
       $236 = ((7139) + ($235<<1)|0);
       HEAP8[$236>>0] = $233;
       break;
      }
     }
    }
   }
  }
 } while(0);
 $237 = HEAP8[7080>>0]|0;
 $238 = $237&255;
 $239 = ($238|0)==(0);
 do {
  if ($239) {
   $240 = HEAP8[7112>>0]|0;
   $241 = $240&255;
   $242 = ($241|0)==(0);
   if ($242) {
    $243 = HEAP8[(7084)>>0]|0;
    $244 = $243&255;
    $245 = ($244|0)==(0);
    if ($245) {
     $246 = HEAP8[(7116)>>0]|0;
     $247 = $246&255;
     $248 = ($247|0)==(4);
     if ($248) {
      $249 = HEAP8[(7138)>>0]|0;
      $250 = ($249<<24>>24)!=(0);
      if ($250) {
       $251 = HEAP8[(7139)>>0]|0;
       $252 = $251&255;
       $253 = HEAP8[(7141)>>0]|0;
       $254 = $253&255;
       $255 = $252 | $254;
       $256 = $255 & 4;
       $257 = $256 ^ 4;
       $258 = $257&255;
       $fx2 = $258;
       $259 = HEAP8[(7139)>>0]|0;
       $260 = $259&255;
       $261 = $260 & -5;
       $262 = $fx2;
       $263 = $262&255;
       $264 = $261 | $263;
       $265 = $264&255;
       HEAP8[(7139)>>0] = $265;
       $266 = HEAP8[(7141)>>0]|0;
       $267 = $266&255;
       $268 = $267 & -5;
       $269 = $fx2;
       $270 = $269&255;
       $271 = $268 | $270;
       $272 = $271&255;
       HEAP8[(7141)>>0] = $272;
       break;
      } else {
       $273 = HEAP8[(7137)>>0]|0;
       $274 = $273&255;
       $275 = ((7139) + ($274<<1)|0);
       $276 = HEAP8[$275>>0]|0;
       $277 = $276&255;
       $278 = $277 ^ 4;
       $279 = $278&255;
       $280 = HEAP8[(7137)>>0]|0;
       $281 = $280&255;
       $282 = ((7139) + ($281<<1)|0);
       HEAP8[$282>>0] = $279;
       break;
      }
     }
    }
   }
  }
 } while(0);
 $283 = HEAP8[7080>>0]|0;
 $284 = $283&255;
 $285 = ($284|0)==(0);
 do {
  if ($285) {
   $286 = HEAP8[7112>>0]|0;
   $287 = $286&255;
   $288 = ($287|0)==(0);
   if ($288) {
    $289 = HEAP8[(7084)>>0]|0;
    $290 = $289&255;
    $291 = ($290|0)==(0);
    if ($291) {
     $292 = HEAP8[(7116)>>0]|0;
     $293 = $292&255;
     $294 = ($293|0)==(8);
     if ($294) {
      $295 = HEAP8[(7138)>>0]|0;
      $296 = ($295<<24>>24)!=(0);
      if ($296) {
       $297 = HEAP8[(7139)>>0]|0;
       $298 = $297&255;
       $299 = HEAP8[(7141)>>0]|0;
       $300 = $299&255;
       $301 = $298 | $300;
       $302 = $301 & 8;
       $303 = $302 ^ 8;
       $304 = $303&255;
       $fx3 = $304;
       $305 = HEAP8[(7139)>>0]|0;
       $306 = $305&255;
       $307 = $306 & -9;
       $308 = $fx3;
       $309 = $308&255;
       $310 = $307 | $309;
       $311 = $310&255;
       HEAP8[(7139)>>0] = $311;
       $312 = HEAP8[(7141)>>0]|0;
       $313 = $312&255;
       $314 = $313 & -9;
       $315 = $fx3;
       $316 = $315&255;
       $317 = $314 | $316;
       $318 = $317&255;
       HEAP8[(7141)>>0] = $318;
       break;
      } else {
       $319 = HEAP8[(7137)>>0]|0;
       $320 = $319&255;
       $321 = ((7139) + ($320<<1)|0);
       $322 = HEAP8[$321>>0]|0;
       $323 = $322&255;
       $324 = $323 ^ 8;
       $325 = $324&255;
       $326 = HEAP8[(7137)>>0]|0;
       $327 = $326&255;
       $328 = ((7139) + ($327<<1)|0);
       HEAP8[$328>>0] = $325;
       break;
      }
     }
    }
   }
  }
 } while(0);
 $329 = HEAP8[7080>>0]|0;
 $330 = $329&255;
 $331 = ($330|0)==(0);
 do {
  if ($331) {
   $332 = HEAP8[7112>>0]|0;
   $333 = $332&255;
   $334 = ($333|0)==(0);
   if ($334) {
    $335 = HEAP8[(7084)>>0]|0;
    $336 = $335&255;
    $337 = ($336|0)==(0);
    if ($337) {
     $338 = HEAP8[(7116)>>0]|0;
     $339 = $338&255;
     $340 = ($339|0)==(16);
     if ($340) {
      $341 = HEAP8[(7138)>>0]|0;
      $342 = ($341<<24>>24)!=(0);
      if ($342) {
       $343 = HEAP8[(7139)>>0]|0;
       $344 = $343&255;
       $345 = HEAP8[(7141)>>0]|0;
       $346 = $345&255;
       $347 = $344 | $346;
       $348 = $347 & 16;
       $349 = $348 ^ 16;
       $350 = $349&255;
       $fx4 = $350;
       $351 = HEAP8[(7139)>>0]|0;
       $352 = $351&255;
       $353 = $352 & -17;
       $354 = $fx4;
       $355 = $354&255;
       $356 = $353 | $355;
       $357 = $356&255;
       HEAP8[(7139)>>0] = $357;
       $358 = HEAP8[(7141)>>0]|0;
       $359 = $358&255;
       $360 = $359 & -17;
       $361 = $fx4;
       $362 = $361&255;
       $363 = $360 | $362;
       $364 = $363&255;
       HEAP8[(7141)>>0] = $364;
       break;
      } else {
       $365 = HEAP8[(7137)>>0]|0;
       $366 = $365&255;
       $367 = ((7139) + ($366<<1)|0);
       $368 = HEAP8[$367>>0]|0;
       $369 = $368&255;
       $370 = $369 ^ 16;
       $371 = $370&255;
       $372 = HEAP8[(7137)>>0]|0;
       $373 = $372&255;
       $374 = ((7139) + ($373<<1)|0);
       HEAP8[$374>>0] = $371;
       break;
      }
     }
    }
   }
  }
 } while(0);
 $375 = HEAP8[7080>>0]|0;
 $376 = $375&255;
 $377 = ($376|0)==(0);
 do {
  if ($377) {
   $378 = HEAP8[7112>>0]|0;
   $379 = $378&255;
   $380 = ($379|0)==(0);
   if ($380) {
    $381 = HEAP8[(7084)>>0]|0;
    $382 = $381&255;
    $383 = ($382|0)==(0);
    if ($383) {
     $384 = HEAP8[(7116)>>0]|0;
     $385 = $384&255;
     $386 = ($385|0)==(32);
     if ($386) {
      $387 = HEAP8[(7138)>>0]|0;
      $388 = ($387<<24>>24)!=(0);
      if ($388) {
       $389 = HEAP8[(7139)>>0]|0;
       $390 = $389&255;
       $391 = HEAP8[(7141)>>0]|0;
       $392 = $391&255;
       $393 = $390 | $392;
       $394 = $393 & 32;
       $395 = $394 ^ 32;
       $396 = $395&255;
       $fx5 = $396;
       $397 = HEAP8[(7139)>>0]|0;
       $398 = $397&255;
       $399 = $398 & -33;
       $400 = $fx5;
       $401 = $400&255;
       $402 = $399 | $401;
       $403 = $402&255;
       HEAP8[(7139)>>0] = $403;
       $404 = HEAP8[(7141)>>0]|0;
       $405 = $404&255;
       $406 = $405 & -33;
       $407 = $fx5;
       $408 = $407&255;
       $409 = $406 | $408;
       $410 = $409&255;
       HEAP8[(7141)>>0] = $410;
       break;
      } else {
       $411 = HEAP8[(7137)>>0]|0;
       $412 = $411&255;
       $413 = ((7139) + ($412<<1)|0);
       $414 = HEAP8[$413>>0]|0;
       $415 = $414&255;
       $416 = $415 ^ 32;
       $417 = $416&255;
       $418 = HEAP8[(7137)>>0]|0;
       $419 = $418&255;
       $420 = ((7139) + ($419<<1)|0);
       HEAP8[$420>>0] = $417;
       break;
      }
     }
    }
   }
  }
 } while(0);
 $421 = HEAP8[7080>>0]|0;
 $422 = $421&255;
 $423 = ($422|0)==(0);
 if ($423) {
  $424 = HEAP8[7112>>0]|0;
  $425 = $424&255;
  $426 = ($425|0)==(0);
  if ($426) {
   $427 = HEAP8[(7084)>>0]|0;
   $428 = $427&255;
   $429 = ($428|0)==(0);
   if ($429) {
    $430 = HEAP8[(7116)>>0]|0;
    $431 = $430&255;
    $432 = ($431|0)==(64);
    if ($432) {
     _prev_song();
     HEAP8[(157989)>>0] = -128;
    } else {
     label = 99;
    }
   } else {
    label = 99;
   }
  } else {
   label = 99;
  }
 } else {
  label = 99;
 }
 if ((label|0) == 99) {
  $433 = HEAP8[(7084)>>0]|0;
  $434 = $433&255;
  $435 = $434 & 64;
  $436 = ($435|0)==(64);
  if ($436) {
   $437 = HEAP8[(7116)>>0]|0;
   $438 = $437&255;
   $439 = $438 & 64;
   $440 = ($439|0)==(0);
   if ($440) {
    HEAP8[(157989)>>0] = 0;
   }
  }
 }
 $441 = HEAP8[7080>>0]|0;
 $442 = $441&255;
 $443 = ($442|0)==(0);
 if ($443) {
  $444 = HEAP8[7112>>0]|0;
  $445 = $444&255;
  $446 = ($445|0)==(0);
  if ($446) {
   $447 = HEAP8[(7084)>>0]|0;
   $448 = $447&255;
   $449 = ($448|0)==(0);
   if ($449) {
    $450 = HEAP8[(7116)>>0]|0;
    $451 = $450&255;
    $452 = ($451|0)==(128);
    if ($452) {
     _next_song();
     HEAP8[(157990)>>0] = -128;
    } else {
     label = 107;
    }
   } else {
    label = 107;
   }
  } else {
   label = 107;
  }
 } else {
  label = 107;
 }
 if ((label|0) == 107) {
  $453 = HEAP8[(7084)>>0]|0;
  $454 = $453&255;
  $455 = $454 & 128;
  $456 = ($455|0)==(128);
  if ($456) {
   $457 = HEAP8[(7116)>>0]|0;
   $458 = $457&255;
   $459 = $458 & 128;
   $460 = ($459|0)==(0);
   if ($460) {
    HEAP8[(157990)>>0] = 0;
   }
  }
 }
 $461 = HEAP8[(7133)>>0]|0;
 $462 = $461&255;
 $463 = HEAP8[(7101)>>0]|0;
 $464 = $463&255;
 $465 = ($462|0)!=($464|0);
 if ($465) {
  label = 113;
 } else {
  $466 = HEAP8[(7134)>>0]|0;
  $467 = $466&255;
  $468 = HEAP8[(7102)>>0]|0;
  $469 = $468&255;
  $470 = ($467|0)!=($469|0);
  if ($470) {
   label = 113;
  } else {
   $471 = HEAP8[(7135)>>0]|0;
   $472 = $471&255;
   $473 = HEAP8[(7103)>>0]|0;
   $474 = $473&255;
   $475 = ($472|0)!=($474|0);
   if ($475) {
    label = 113;
   }
  }
 }
 if ((label|0) == 113) {
  _debug_log(158015,$vararg_buffer);
  $476 = HEAP8[(7133)>>0]|0;
  $477 = $476&255;
  $478 = ($477|0)==(1);
  if ($478) {
   $479 = HEAP8[(7134)>>0]|0;
   $480 = $479&255;
   $481 = ((157923) + ($480)|0);
   $482 = HEAP8[$481>>0]|0;
   $pr_num = $482;
  } else {
   $483 = HEAP8[(7135)>>0]|0;
   $pr_num = $483;
  }
  $484 = $pr_num;
  $485 = $484&255;
  $486 = $485<<6;
  $487 = $486&65535;
  _flash_load($487,64,25256);
  HEAP8[(7136)>>0] = 0;
  $488 = HEAP16[25256>>1]|0;
  $489 = $488&65535;
  $490 = ($489|0)==(0);
  if ($490) {
   HEAP8[(25258)>>0] = 1;
   _scene_default();
  }
  $491 = HEAP8[(7136)>>0]|0;
  $492 = $491&255;
  $493 = $492 ^ -1;
  $494 = $493&255;
  HEAP8[(7104)>>0] = $494;
 }
 $495 = HEAP8[(7136)>>0]|0;
 $496 = $495&255;
 $497 = HEAP8[(7104)>>0]|0;
 $498 = $497&255;
 $499 = ($496|0)!=($498|0);
 if (!($499)) {
  _calc_midi();
  _calc_leds();
  ;HEAP32[7080>>2]=HEAP32[7112>>2]|0;HEAP32[7080+4>>2]=HEAP32[7112+4>>2]|0;HEAP32[7080+8>>2]=HEAP32[7112+8>>2]|0;HEAP32[7080+12>>2]=HEAP32[7112+12>>2]|0;HEAP32[7080+16>>2]=HEAP32[7112+16>>2]|0;HEAP32[7080+20>>2]=HEAP32[7112+20>>2]|0;HEAP32[7080+24>>2]=HEAP32[7112+24>>2]|0;HEAP32[7080+28>>2]=HEAP32[7112+28>>2]|0;
  STACKTOP = sp;return;
 }
 _debug_log(158028,$vararg_buffer1);
 $500 = HEAP8[(7104)>>0]|0;
 $501 = $500&255;
 $502 = ((25260) + (($501*6)|0)|0);
 $503 = ((($502)) + 2|0);
 ;HEAP8[$503>>0]=HEAP8[(7139)>>0]|0;HEAP8[$503+1>>0]=HEAP8[(7139)+1>>0]|0;
 $504 = HEAP8[(7104)>>0]|0;
 $505 = $504&255;
 $506 = ((25260) + (($505*6)|0)|0);
 $507 = ((($506)) + 2|0);
 $508 = ((($507)) + 2|0);
 ;HEAP8[$508>>0]=HEAP8[(7141)>>0]|0;HEAP8[$508+1>>0]=HEAP8[(7141)+1>>0]|0;
 $509 = HEAP8[(7136)>>0]|0;
 $510 = $509&255;
 $511 = ($510|0)>(0);
 do {
  if ($511) {
   $512 = HEAP8[(7136)>>0]|0;
   $513 = $512&255;
   $514 = ((25260) + (($513*6)|0)|0);
   $515 = HEAP16[$514>>1]|0;
   $516 = $515&65535;
   $517 = ($516|0)==(0);
   if (!($517)) {
    break;
   }
   $518 = HEAP8[(7136)>>0]|0;
   $519 = $518&255;
   $520 = ((25260) + (($519*6)|0)|0);
   $521 = HEAP8[(7136)>>0]|0;
   $522 = $521&255;
   $523 = (($522) - 1)|0;
   $524 = ((25260) + (($523*6)|0)|0);
   ;HEAP16[$520>>1]=HEAP16[$524>>1]|0;HEAP16[$520+2>>1]=HEAP16[$524+2>>1]|0;HEAP16[$520+4>>1]=HEAP16[$524+4>>1]|0;
   $525 = HEAP8[(7136)>>0]|0;
   $526 = $525&255;
   $527 = ((25260) + (($526*6)|0)|0);
   HEAP16[$527>>1] = 0;
  }
 } while(0);
 $528 = HEAP8[(7136)>>0]|0;
 $529 = $528&255;
 $530 = ((25260) + (($529*6)|0)|0);
 $531 = ((($530)) + 2|0);
 ;HEAP8[(7139)>>0]=HEAP8[$531>>0]|0;HEAP8[(7139)+1>>0]=HEAP8[$531+1>>0]|0;
 $532 = HEAP8[(7136)>>0]|0;
 $533 = $532&255;
 $534 = ((25260) + (($533*6)|0)|0);
 $535 = ((($534)) + 2|0);
 $536 = ((($535)) + 2|0);
 ;HEAP8[(7141)>>0]=HEAP8[$536>>0]|0;HEAP8[(7141)+1>>0]=HEAP8[$536+1>>0]|0;
 _calc_midi();
 _calc_leds();
 ;HEAP32[7080>>2]=HEAP32[7112>>2]|0;HEAP32[7080+4>>2]=HEAP32[7112+4>>2]|0;HEAP32[7080+8>>2]=HEAP32[7112+8>>2]|0;HEAP32[7080+12>>2]=HEAP32[7112+12>>2]|0;HEAP32[7080+16>>2]=HEAP32[7112+16>>2]|0;HEAP32[7080+20>>2]=HEAP32[7112+20>>2]|0;HEAP32[7080+24>>2]=HEAP32[7112+24>>2]|0;HEAP32[7080+28>>2]=HEAP32[7112+28>>2]|0;
 STACKTOP = sp;return;
}
function _update_lcd() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $dd = 0, $i = 0, $labels = 0, $mm = 0, $pr_name = 0, $sc_name = 0, $vararg_buffer = 0, $volhalfdb = 0, $yyyy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _debug_log(158278,$vararg_buffer);
 $0 = (_label_row_get(0)|0);
 $labels = $0;
 $1 = $labels;
 HEAP32[$1>>2] = 158289;
 $2 = $labels;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 158294;
 $4 = $labels;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 158300;
 $6 = $labels;
 $7 = ((($6)) + 12|0);
 HEAP32[$7>>2] = 158306;
 $8 = $labels;
 $9 = ((($8)) + 16|0);
 HEAP32[$9>>2] = 158312;
 $10 = $labels;
 $11 = ((($10)) + 20|0);
 HEAP32[$11>>2] = 158318;
 $12 = $labels;
 $13 = ((($12)) + 24|0);
 HEAP32[$13>>2] = 158322;
 $14 = $labels;
 $15 = ((($14)) + 28|0);
 HEAP32[$15>>2] = 158333;
 _label_row_update(0);
 $16 = (_label_row_get(1)|0);
 $labels = $16;
 $17 = $labels;
 HEAP32[$17>>2] = 158344;
 $18 = $labels;
 $19 = ((($18)) + 4|0);
 HEAP32[$19>>2] = 158350;
 $20 = $labels;
 $21 = ((($20)) + 8|0);
 HEAP32[$21>>2] = 158354;
 $22 = $labels;
 $23 = ((($22)) + 12|0);
 HEAP32[$23>>2] = 158360;
 $24 = $labels;
 $25 = ((($24)) + 16|0);
 HEAP32[$25>>2] = 158367;
 $26 = $labels;
 $27 = ((($26)) + 20|0);
 HEAP32[$27>>2] = 158373;
 $28 = $labels;
 $29 = ((($28)) + 24|0);
 HEAP32[$29>>2] = 158380;
 $30 = $labels;
 $31 = ((($30)) + 28|0);
 HEAP32[$31>>2] = 158390;
 _label_row_update(1);
 $i = 0;
 while(1) {
  $32 = $i;
  $33 = $32 << 24 >> 24;
  $34 = ($33|0)<(20);
  if (!($34)) {
   break;
  }
  $35 = $i;
  $36 = $35 << 24 >> 24;
  $37 = (158400 + ($36)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $i;
  $40 = $39 << 24 >> 24;
  $41 = HEAP32[7144>>2]|0;
  $42 = (($41) + ($40)|0);
  HEAP8[$42>>0] = $38;
  $43 = $i;
  $44 = $43 << 24 >> 24;
  $45 = (157994 + ($44)|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $i;
  $48 = $47 << 24 >> 24;
  $49 = HEAP32[(7148)>>2]|0;
  $50 = (($49) + ($48)|0);
  HEAP8[$50>>0] = $46;
  $51 = $i;
  $52 = $51 << 24 >> 24;
  $53 = (157994 + ($52)|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $i;
  $56 = $55 << 24 >> 24;
  $57 = HEAP32[(7152)>>2]|0;
  $58 = (($57) + ($56)|0);
  HEAP8[$58>>0] = $54;
  $59 = $i;
  $60 = $59 << 24 >> 24;
  $61 = (157994 + ($60)|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $i;
  $64 = $63 << 24 >> 24;
  $65 = HEAP32[(7156)>>2]|0;
  $66 = (($65) + ($64)|0);
  HEAP8[$66>>0] = $62;
  $67 = $i;
  $68 = (($67) + 1)<<24>>24;
  $i = $68;
 }
 $69 = HEAP8[(7137)>>0]|0;
 $70 = $69&255;
 $71 = ($70|0)==(0);
 $72 = $71 ? 42 : 32;
 $73 = $72&255;
 $74 = HEAP32[7144>>2]|0;
 $75 = ((($74)) + 2|0);
 HEAP8[$75>>0] = $73;
 $76 = HEAP8[(7137)>>0]|0;
 $77 = $76&255;
 $78 = ($77|0)==(1);
 $79 = $78 ? 42 : 32;
 $80 = $79&255;
 $81 = HEAP32[7144>>2]|0;
 $82 = ((($81)) + 13|0);
 HEAP8[$82>>0] = $80;
 $83 = HEAP8[(7140)>>0]|0;
 $84 = $83 << 24 >> 24;
 $85 = (($84) - 115)|0;
 $86 = $85&255;
 $volhalfdb = $86;
 $87 = HEAP32[7144>>2]|0;
 $88 = $volhalfdb;
 _print_half($87,4,$88);
 $89 = HEAP8[(7142)>>0]|0;
 $90 = $89 << 24 >> 24;
 $91 = (($90) - 115)|0;
 $92 = $91&255;
 $volhalfdb = $92;
 $93 = HEAP32[7144>>2]|0;
 $94 = $volhalfdb;
 _print_half($93,15,$94);
 $95 = HEAP8[(7133)>>0]|0;
 $96 = $95&255;
 $97 = ($96|0)==(0);
 if ($97) {
  $i = 0;
  while(1) {
   $98 = $i;
   $99 = $98 << 24 >> 24;
   $100 = ($99|0)<(20);
   if (!($100)) {
    break;
   }
   $101 = $i;
   $102 = $101 << 24 >> 24;
   $103 = (158421 + ($102)|0);
   $104 = HEAP8[$103>>0]|0;
   $105 = $i;
   $106 = $105 << 24 >> 24;
   $107 = HEAP32[(7148)>>2]|0;
   $108 = (($107) + ($106)|0);
   HEAP8[$108>>0] = $104;
   $109 = $i;
   $110 = (($109) + 1)<<24>>24;
   $i = $110;
  }
  $111 = HEAP32[(7148)>>2]|0;
  $112 = HEAP8[(7135)>>0]|0;
  $113 = $112&255;
  $114 = (($113) + 1)|0;
  $115 = $114&255;
  (_ritoa($111,19,$115)|0);
  $166 = HEAP16[25256>>1]|0;
  $167 = (_name_get($166)|0);
  $pr_name = $167;
  $168 = HEAP8[(7136)>>0]|0;
  $169 = $168&255;
  $170 = ((25260) + (($169*6)|0)|0);
  $171 = HEAP16[$170>>1]|0;
  $172 = (_name_get($171)|0);
  $sc_name = $172;
  $173 = $pr_name;
  $174 = HEAP32[(7152)>>2]|0;
  _copy_str_lcd($173,$174);
  $175 = $sc_name;
  $176 = HEAP32[(7156)>>2]|0;
  _copy_str_lcd($175,$176);
  $177 = HEAP32[(7156)>>2]|0;
  $178 = HEAP8[(7136)>>0]|0;
  $179 = $178&255;
  $180 = (($179) + 1)|0;
  $181 = $180&255;
  (_ritoa($177,19,$181)|0);
  _lcd_updated_all();
  STACKTOP = sp;return;
 } else {
  $116 = HEAP8[(157922)>>0]|0;
  $117 = $116&255;
  $118 = $117 >> 1;
  $119 = $118&255;
  $yyyy = $119;
  $120 = HEAP8[(157922)>>0]|0;
  $121 = $120&255;
  $122 = $121 & 1;
  $123 = $122 << 3;
  $124 = HEAP8[(157921)>>0]|0;
  $125 = $124&255;
  $126 = $125 >> 5;
  $127 = $123 | $126;
  $128 = $127&255;
  $mm = $128;
  $129 = HEAP8[(157921)>>0]|0;
  $130 = $129&255;
  $131 = $130 & 31;
  $132 = $131&255;
  $dd = $132;
  $i = 0;
  while(1) {
   $133 = $i;
   $134 = $133 << 24 >> 24;
   $135 = ($134|0)<(20);
   if (!($135)) {
    break;
   }
   $136 = $i;
   $137 = $136 << 24 >> 24;
   $138 = (158442 + ($137)|0);
   $139 = HEAP8[$138>>0]|0;
   $140 = $i;
   $141 = $140 << 24 >> 24;
   $142 = HEAP32[(7148)>>2]|0;
   $143 = (($142) + ($141)|0);
   HEAP8[$143>>0] = $139;
   $144 = $i;
   $145 = (($144) + 1)<<24>>24;
   $i = $145;
  }
  $146 = HEAP32[(7148)>>2]|0;
  $147 = $yyyy;
  $148 = $147&255;
  $149 = (($148) + 14)|0;
  $150 = $149&255;
  (_ritoa($146,3,$150)|0);
  $151 = HEAP32[(7148)>>2]|0;
  $152 = $mm;
  $153 = $152&255;
  $154 = (($153) + 1)|0;
  $155 = $154&255;
  (_ritoa($151,6,$155)|0);
  $156 = HEAP32[(7148)>>2]|0;
  $157 = $dd;
  $158 = $157&255;
  $159 = (($158) + 1)|0;
  $160 = $159&255;
  (_ritoa($156,9,$160)|0);
  $161 = HEAP32[(7148)>>2]|0;
  $162 = HEAP8[(7134)>>0]|0;
  $163 = $162&255;
  $164 = (($163) + 1)|0;
  $165 = $164&255;
  (_ritoa($161,19,$165)|0);
  $166 = HEAP16[25256>>1]|0;
  $167 = (_name_get($166)|0);
  $pr_name = $167;
  $168 = HEAP8[(7136)>>0]|0;
  $169 = $168&255;
  $170 = ((25260) + (($169*6)|0)|0);
  $171 = HEAP16[$170>>1]|0;
  $172 = (_name_get($171)|0);
  $sc_name = $172;
  $173 = $pr_name;
  $174 = HEAP32[(7152)>>2]|0;
  _copy_str_lcd($173,$174);
  $175 = $sc_name;
  $176 = HEAP32[(7156)>>2]|0;
  _copy_str_lcd($175,$176);
  $177 = HEAP32[(7156)>>2]|0;
  $178 = HEAP8[(7136)>>0]|0;
  $179 = $178&255;
  $180 = (($179) + 1)|0;
  $181 = $180&255;
  (_ritoa($177,19,$181)|0);
  _lcd_updated_all();
  STACKTOP = sp;return;
 }
}
function _curr_amp_reset() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP8[(7138)>>0]|0;
 $1 = ($0<<24>>24)!=(0);
 if ($1) {
  _debug_log(158255,$vararg_buffer);
  $2 = HEAP8[(7139)>>0]|0;
  $3 = $2&255;
  $4 = $3 ^ -1;
  $5 = $4&255;
  HEAP8[(7107)>>0] = $5;
  $6 = HEAP8[(7140)>>0]|0;
  $7 = $6&255;
  $8 = $7 ^ -1;
  $9 = $8&255;
  HEAP8[(7108)>>0] = $9;
  $10 = HEAP8[(7141)>>0]|0;
  $11 = $10&255;
  $12 = $11 ^ -1;
  $13 = $12&255;
  HEAP8[(7109)>>0] = $13;
  $14 = HEAP8[(7142)>>0]|0;
  $15 = $14&255;
  $16 = $15 ^ -1;
  $17 = $16&255;
  HEAP8[(7110)>>0] = $17;
  STACKTOP = sp;return;
 } else {
  $18 = HEAP8[(7137)>>0]|0;
  $19 = $18&255;
  $20 = (($19) + 49)|0;
  HEAP32[$vararg_buffer1>>2] = $20;
  _debug_log(158266,$vararg_buffer1);
  $21 = HEAP8[(7137)>>0]|0;
  $22 = $21&255;
  $23 = ((7139) + ($22<<1)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $25 ^ -1;
  $27 = $26&255;
  $28 = HEAP8[(7137)>>0]|0;
  $29 = $28&255;
  $30 = ((7107) + ($29<<1)|0);
  HEAP8[$30>>0] = $27;
  $31 = HEAP8[(7137)>>0]|0;
  $32 = $31&255;
  $33 = ((7139) + ($32<<1)|0);
  $34 = ((($33)) + 1|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = $36 ^ -1;
  $38 = $37&255;
  $39 = HEAP8[(7137)>>0]|0;
  $40 = $39&255;
  $41 = ((7107) + ($40<<1)|0);
  $42 = ((($41)) + 1|0);
  HEAP8[$42>>0] = $38;
  STACKTOP = sp;return;
 }
}
function _curr_amp_vol_decrease() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[(7137)>>0]|0;
 $1 = $0&255;
 $2 = ((7139) + ($1<<1)|0);
 $3 = ((($2)) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)>(0);
 if (!($6)) {
  return;
 }
 $7 = HEAP8[(7137)>>0]|0;
 $8 = $7&255;
 $9 = ((7139) + ($8<<1)|0);
 $10 = ((($9)) + 1|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = (($11) + -1)<<24>>24;
 HEAP8[$10>>0] = $12;
 return;
}
function _curr_amp_vol_increase() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[(7137)>>0]|0;
 $1 = $0&255;
 $2 = ((7139) + ($1<<1)|0);
 $3 = ((($2)) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)<(127);
 if (!($6)) {
  return;
 }
 $7 = HEAP8[(7137)>>0]|0;
 $8 = $7&255;
 $9 = ((7139) + ($8<<1)|0);
 $10 = ((($9)) + 1|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = (($11) + 1)<<24>>24;
 HEAP8[$10>>0] = $12;
 return;
}
function _toggle_setlist_mode() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _debug_log(158235,$vararg_buffer);
 $0 = HEAP8[(7133)>>0]|0;
 $1 = $0&255;
 $2 = $1 ^ 1;
 $3 = $2&255;
 HEAP8[(7133)>>0] = $3;
 $4 = HEAP8[(7133)>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(1);
 if (!($6)) {
  HEAP8[157984>>0] = 127;
  $26 = HEAP8[(7134)>>0]|0;
  $27 = $26&255;
  $28 = ((157923) + ($27)|0);
  $29 = HEAP8[$28>>0]|0;
  HEAP8[(7135)>>0] = $29;
  STACKTOP = sp;return;
 }
 $7 = HEAP8[157920>>0]|0;
 $8 = $7&255;
 $9 = (($8) - 1)|0;
 $10 = $9&255;
 HEAP8[157984>>0] = $10;
 HEAP8[(7134)>>0] = 0;
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = $11&255;
  $13 = HEAP8[157920>>0]|0;
  $14 = $13&255;
  $15 = ($12|0)<($14|0);
  if (!($15)) {
   label = 8;
   break;
  }
  $16 = $i;
  $17 = $16&255;
  $18 = ((157923) + ($17)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = HEAP8[(7135)>>0]|0;
  $22 = $21&255;
  $23 = ($20|0)==($22|0);
  $24 = $i;
  if ($23) {
   break;
  }
  $25 = (($24) + 1)<<24>>24;
  $i = $25;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return;
 }
 HEAP8[(7134)>>0] = $24;
 STACKTOP = sp;return;
}
function _scene_delete() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP8[(25258)>>0]|0;
 $1 = $0&255;
 $2 = ($1|0)<=(1);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP8[(7136)>>0]|0;
 $4 = $3&255;
 $5 = HEAP8[(25258)>>0]|0;
 $6 = $5&255;
 $7 = ($4|0)>=($6|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = HEAP8[(7136)>>0]|0;
 $i = $8;
 while(1) {
  $9 = $i;
  $10 = $9&255;
  $11 = HEAP8[(25258)>>0]|0;
  $12 = $11&255;
  $13 = ($10|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = $14&255;
  $16 = ((25260) + (($15*6)|0)|0);
  $17 = $i;
  $18 = $17&255;
  $19 = (($18) + 1)|0;
  $20 = ((25260) + (($19*6)|0)|0);
  ;HEAP16[$16>>1]=HEAP16[$20>>1]|0;HEAP16[$16+2>>1]=HEAP16[$20+2>>1]|0;HEAP16[$16+4>>1]=HEAP16[$20+4>>1]|0;
  $21 = $i;
  $22 = (($21) + 1)<<24>>24;
  $i = $22;
 }
 $23 = HEAP8[(25258)>>0]|0;
 $24 = (($23) + -1)<<24>>24;
 HEAP8[(25258)>>0] = $24;
 $25 = HEAP8[(7136)>>0]|0;
 $26 = $25&255;
 $27 = HEAP8[(25258)>>0]|0;
 $28 = $27&255;
 $29 = ($26|0)>=($28|0);
 if ($29) {
  $30 = HEAP8[(25258)>>0]|0;
  $31 = $30&255;
  $32 = (($31) - 1)|0;
  $33 = $32&255;
  HEAP8[(7136)>>0] = $33;
 }
 $34 = HEAP8[(7136)>>0]|0;
 $35 = $34&255;
 $36 = $35 ^ -1;
 $37 = $36&255;
 HEAP8[(7104)>>0] = $37;
 STACKTOP = sp;return;
}
function _scene_insert() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP8[(25258)>>0]|0;
 $1 = $0&255;
 $2 = ($1|0)>=(10);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP8[(25258)>>0]|0;
 $i = $3;
 while(1) {
  $4 = $i;
  $5 = $4&255;
  $6 = HEAP8[(7136)>>0]|0;
  $7 = $6&255;
  $8 = ($5|0)>($7|0);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = $9&255;
  $11 = ((25260) + (($10*6)|0)|0);
  $12 = $i;
  $13 = $12&255;
  $14 = (($13) - 1)|0;
  $15 = ((25260) + (($14*6)|0)|0);
  ;HEAP16[$11>>1]=HEAP16[$15>>1]|0;HEAP16[$11+2>>1]=HEAP16[$15+2>>1]|0;HEAP16[$11+4>>1]=HEAP16[$15+4>>1]|0;
  $16 = $i;
  $17 = (($16) + -1)<<24>>24;
  $i = $17;
 }
 $18 = HEAP8[(25258)>>0]|0;
 $19 = (($18) + 1)<<24>>24;
 HEAP8[(25258)>>0] = $19;
 _scene_default();
 $20 = HEAP8[(7136)>>0]|0;
 $21 = $20&255;
 $22 = $21 ^ -1;
 $23 = $22&255;
 HEAP8[(7104)>>0] = $23;
 STACKTOP = sp;return;
}
function _prev_song() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP8[(7133)>>0]|0;
 $1 = $0&255;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP8[(7135)>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)>(0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  _debug_log(158212,$vararg_buffer);
  $6 = HEAP8[(7135)>>0]|0;
  $7 = (($6) + -1)<<24>>24;
  HEAP8[(7135)>>0] = $7;
  STACKTOP = sp;return;
 } else {
  $8 = HEAP8[(7134)>>0]|0;
  $9 = $8&255;
  $10 = ($9|0)>(0);
  if (!($10)) {
   STACKTOP = sp;return;
  }
  _debug_log(158225,$vararg_buffer1);
  $11 = HEAP8[(7134)>>0]|0;
  $12 = (($11) + -1)<<24>>24;
  HEAP8[(7134)>>0] = $12;
  STACKTOP = sp;return;
 }
}
function _next_song() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP8[(7133)>>0]|0;
 $1 = $0&255;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP8[(7135)>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)<(127);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  _debug_log(158189,$vararg_buffer);
  $6 = HEAP8[(7135)>>0]|0;
  $7 = (($6) + 1)<<24>>24;
  HEAP8[(7135)>>0] = $7;
  STACKTOP = sp;return;
 } else {
  $8 = HEAP8[(7134)>>0]|0;
  $9 = $8&255;
  $10 = HEAP8[157984>>0]|0;
  $11 = $10&255;
  $12 = ($9|0)<($11|0);
  if (!($12)) {
   STACKTOP = sp;return;
  }
  _debug_log(158202,$vararg_buffer1);
  $13 = HEAP8[(7134)>>0]|0;
  $14 = (($13) + 1)<<24>>24;
  HEAP8[(7134)>>0] = $14;
  STACKTOP = sp;return;
 }
}
function _curr_amp_vol_toggle() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[(7137)>>0]|0;
 $1 = $0&255;
 $2 = ((7139) + ($1<<1)|0);
 $3 = ((($2)) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(115);
 $7 = HEAP8[(7137)>>0]|0;
 $8 = $7&255;
 $9 = ((7139) + ($8<<1)|0);
 $10 = ((($9)) + 1|0);
 if ($6) {
  HEAP8[$10>>0] = 127;
  return;
 } else {
  HEAP8[$10>>0] = 115;
  return;
 }
}
function _prev_scene() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP8[(7136)>>0]|0;
 $1 = $0&255;
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 _debug_log(158178,$vararg_buffer);
 $3 = HEAP8[(7136)>>0]|0;
 $4 = (($3) + -1)<<24>>24;
 HEAP8[(7136)>>0] = $4;
 STACKTOP = sp;return;
}
function _next_scene() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP8[(7136)>>0]|0;
 $1 = $0&255;
 $2 = HEAP8[(25258)>>0]|0;
 $3 = $2&255;
 $4 = ($1|0)<($3|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 _debug_log(158167,$vararg_buffer);
 $5 = HEAP8[(7136)>>0]|0;
 $6 = (($5) + 1)<<24>>24;
 HEAP8[(7136)>>0] = $6;
 STACKTOP = sp;return;
}
function _scene_default() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _debug_log(158153,$vararg_buffer);
 $0 = HEAP8[(7136)>>0]|0;
 $1 = $0&255;
 $2 = ((25260) + (($1*6)|0)|0);
 HEAP16[$2>>1] = 0;
 $3 = HEAP8[(7136)>>0]|0;
 $4 = $3&255;
 $5 = ((25260) + (($4*6)|0)|0);
 $6 = ((($5)) + 2|0);
 HEAP8[$6>>0] = 1;
 $7 = HEAP8[(7136)>>0]|0;
 $8 = $7&255;
 $9 = ((25260) + (($8*6)|0)|0);
 $10 = ((($9)) + 2|0);
 $11 = ((($10)) + 1|0);
 HEAP8[$11>>0] = 115;
 $12 = HEAP8[(7136)>>0]|0;
 $13 = $12&255;
 $14 = ((25260) + (($13*6)|0)|0);
 $15 = ((($14)) + 2|0);
 $16 = ((($15)) + 2|0);
 HEAP8[$16>>0] = 1;
 $17 = HEAP8[(7136)>>0]|0;
 $18 = $17&255;
 $19 = ((25260) + (($18*6)|0)|0);
 $20 = ((($19)) + 2|0);
 $21 = ((($20)) + 2|0);
 $22 = ((($21)) + 1|0);
 HEAP8[$22>>0] = 115;
 STACKTOP = sp;return;
}
function _calc_midi() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $diff = 0, $dirty = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer10 = 0, $vararg_buffer15 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vol = 0, $vol1 = 0, $xy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $diff = 0;
 $0 = HEAP8[(7139)>>0]|0;
 $1 = $0&255;
 $2 = $1 & 1;
 $3 = $2 >> 0;
 $4 = $3&255;
 $dirty = $4;
 $5 = $dirty;
 $6 = $5&255;
 $7 = HEAP8[(7107)>>0]|0;
 $8 = $7&255;
 $9 = $8 & 1;
 $10 = $9 >> 0;
 $11 = ($6|0)!=($10|0);
 if ($11) {
  $12 = $dirty;
  $13 = $12&255;
  $14 = ($13|0)==(0);
  $15 = $14 ? 158039 : 158045;
  HEAP32[$vararg_buffer>>2] = $15;
  _debug_log(158051,$vararg_buffer);
  $16 = $dirty;
  $17 = $16&255;
  $18 = ($17|0)==(0);
  $19 = $18 ? 0 : 127;
  $20 = $19&255;
  _midi_send_cmd2(11,2,18,($20|0));
  $21 = $dirty;
  $22 = $21&255;
  $23 = ($22|0)==(0);
  $24 = $23 ? 0 : 127;
  $25 = $24&255;
  _midi_send_cmd2(11,2,60,($25|0));
  $26 = $dirty;
  $27 = ($26<<24>>24)!=(0);
  $28 = $27 ^ 1;
  $29 = $28&1;
  $30 = ($29|0)==(0);
  $31 = $30 ? 0 : 127;
  $32 = $31&255;
  _midi_send_cmd2(11,2,43,($32|0));
 }
 $33 = HEAP8[(7141)>>0]|0;
 $34 = $33&255;
 $35 = $34 & 1;
 $36 = $35 >> 0;
 $37 = $36&255;
 $dirty = $37;
 $38 = $dirty;
 $39 = $38&255;
 $40 = HEAP8[(7109)>>0]|0;
 $41 = $40&255;
 $42 = $41 & 1;
 $43 = $42 >> 0;
 $44 = ($39|0)!=($43|0);
 if ($44) {
  $45 = $dirty;
  $46 = $45&255;
  $47 = ($46|0)==(0);
  $48 = $47 ? 158039 : 158045;
  HEAP32[$vararg_buffer1>>2] = $48;
  _debug_log(158068,$vararg_buffer1);
  $49 = $dirty;
  $50 = $49&255;
  $51 = ($50|0)==(0);
  $52 = $51 ? 0 : 127;
  $53 = $52&255;
  _midi_send_cmd2(11,2,19,($53|0));
  $54 = $dirty;
  $55 = $54&255;
  $56 = ($55|0)==(0);
  $57 = $56 ? 0 : 127;
  $58 = $57&255;
  _midi_send_cmd2(11,2,61,($58|0));
  $59 = $dirty;
  $60 = ($59<<24>>24)!=(0);
  $61 = $60 ^ 1;
  $62 = $61&1;
  $63 = ($62|0)==(0);
  $64 = $63 ? 0 : 127;
  $65 = $64&255;
  _midi_send_cmd2(11,2,44,($65|0));
 }
 $66 = HEAP8[(7139)>>0]|0;
 $67 = $66&255;
 $68 = $67 & 2;
 $69 = $68 >> 1;
 $70 = $69&255;
 $xy = $70;
 $71 = $xy;
 $72 = $71&255;
 $73 = HEAP8[(7107)>>0]|0;
 $74 = $73&255;
 $75 = $74 & 2;
 $76 = $75 >> 1;
 $77 = ($72|0)!=($76|0);
 if ($77) {
  $78 = $xy;
  $79 = $78&255;
  $80 = ($79|0)==(0);
  $81 = $80 ? 158085 : 158087;
  HEAP32[$vararg_buffer4>>2] = $81;
  _debug_log(158051,$vararg_buffer4);
  $82 = $xy;
  $83 = ($82<<24>>24)!=(0);
  $84 = $83 ^ 1;
  $85 = $84&1;
  $86 = ($85|0)==(0);
  $87 = $86 ? 0 : 127;
  $88 = $87&255;
  _midi_send_cmd2(11,2,100,($88|0));
 }
 $89 = HEAP8[(7141)>>0]|0;
 $90 = $89&255;
 $91 = $90 & 2;
 $92 = $91 >> 1;
 $93 = $92&255;
 $xy = $93;
 $94 = $xy;
 $95 = $94&255;
 $96 = HEAP8[(7109)>>0]|0;
 $97 = $96&255;
 $98 = $97 & 2;
 $99 = $98 >> 1;
 $100 = ($95|0)!=($99|0);
 if ($100) {
  $101 = $xy;
  $102 = $101&255;
  $103 = ($102|0)==(0);
  $104 = $103 ? 158085 : 158087;
  HEAP32[$vararg_buffer7>>2] = $104;
  _debug_log(158068,$vararg_buffer7);
  $105 = $xy;
  $106 = ($105<<24>>24)!=(0);
  $107 = $106 ^ 1;
  $108 = $107&1;
  $109 = ($108|0)==(0);
  $110 = $109 ? 0 : 127;
  $111 = $110&255;
  _midi_send_cmd2(11,2,101,($111|0));
 }
 $112 = HEAP8[(7140)>>0]|0;
 $113 = $112&255;
 $114 = HEAP8[(7108)>>0]|0;
 $115 = $114&255;
 $116 = ($113|0)!=($115|0);
 if ($116) {
  $117 = HEAP8[(7140)>>0]|0;
  $118 = $117&255;
  $119 = (($118) - 115)|0;
  $120 = $119&255;
  $vol = $120;
  $121 = $vol;
  $122 = $121 << 24 >> 24;
  $123 = ($122|0)<(0);
  $124 = $123 ? 45 : 32;
  $125 = $vol;
  $126 = $125 << 24 >> 24;
  $127 = ($126|0)<(0);
  $128 = $vol;
  $129 = $128 << 24 >> 24;
  $130 = (0 - ($129))|0;
  $131 = $127 ? $130 : $129;
  $132 = (($131|0) / 2)&-1;
  $133 = $vol;
  $134 = $133&255;
  $135 = $134 & 1;
  $136 = ($135|0)==(0);
  $137 = $136 ? 179617 : 158089;
  HEAP32[$vararg_buffer10>>2] = $124;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $132;
  $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
  HEAP32[$vararg_ptr14>>2] = $137;
  _debug_log(158091,$vararg_buffer10);
  $138 = HEAP8[(7140)>>0]|0;
  $139 = $138&255;
  $140 = $139 & 127;
  $141 = HEAP32[7076>>2]|0;
  $142 = (($141) + ($140)|0);
  $143 = HEAP8[$142>>0]|0;
  _midi_send_cmd2(11,2,16,($143|0));
  $diff = 1;
 }
 $144 = HEAP8[(7142)>>0]|0;
 $145 = $144&255;
 $146 = HEAP8[(7110)>>0]|0;
 $147 = $146&255;
 $148 = ($145|0)!=($147|0);
 if ($148) {
  $149 = HEAP8[(7142)>>0]|0;
  $150 = $149&255;
  $151 = (($150) - 115)|0;
  $152 = $151&255;
  $vol1 = $152;
  $153 = $vol1;
  $154 = $153 << 24 >> 24;
  $155 = ($154|0)<(0);
  $156 = $155 ? 45 : 32;
  $157 = $vol1;
  $158 = $157 << 24 >> 24;
  $159 = ($158|0)<(0);
  $160 = $vol1;
  $161 = $160 << 24 >> 24;
  $162 = (0 - ($161))|0;
  $163 = $159 ? $162 : $161;
  $164 = (($163|0) / 2)&-1;
  $165 = $vol1;
  $166 = $165&255;
  $167 = $166 & 1;
  $168 = ($167|0)==(0);
  $169 = $168 ? 179617 : 158089;
  HEAP32[$vararg_buffer15>>2] = $156;
  $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
  HEAP32[$vararg_ptr18>>2] = $164;
  $vararg_ptr19 = ((($vararg_buffer15)) + 8|0);
  HEAP32[$vararg_ptr19>>2] = $169;
  _debug_log(158122,$vararg_buffer15);
  $170 = HEAP8[(7142)>>0]|0;
  $171 = $170&255;
  $172 = $171 & 127;
  $173 = HEAP32[7076>>2]|0;
  $174 = (($173) + ($172)|0);
  $175 = HEAP8[$174>>0]|0;
  _midi_send_cmd2(11,2,17,($175|0));
  $diff = 1;
 }
 $176 = HEAP8[(7139)>>0]|0;
 $177 = $176&255;
 $178 = $177 & 16;
 $179 = $178 >> 4;
 $180 = HEAP8[(7107)>>0]|0;
 $181 = $180&255;
 $182 = $181 & 16;
 $183 = $182 >> 4;
 $184 = ($179|0)!=($183|0);
 if ($184) {
  $185 = HEAP8[(7139)>>0]|0;
  $186 = $185&255;
  $187 = $186 & 16;
  $188 = $187 >> 4;
  $189 = ($188|0)==(0);
  $190 = $189 ? 0 : 127;
  $191 = $190&255;
  _midi_send_cmd2(11,2,47,($191|0));
 }
 $192 = HEAP8[(7141)>>0]|0;
 $193 = $192&255;
 $194 = $193 & 16;
 $195 = $194 >> 4;
 $196 = HEAP8[(7109)>>0]|0;
 $197 = $196&255;
 $198 = $197 & 16;
 $199 = $198 >> 4;
 $200 = ($195|0)!=($199|0);
 if ($200) {
  $201 = HEAP8[(7141)>>0]|0;
  $202 = $201&255;
  $203 = $202 & 16;
  $204 = $203 >> 4;
  $205 = ($204|0)==(0);
  $206 = $205 ? 0 : 127;
  $207 = $206&255;
  _midi_send_cmd2(11,2,48,($207|0));
 }
 $208 = HEAP8[(7139)>>0]|0;
 $209 = $208&255;
 $210 = $209 & 4;
 $211 = $210 >> 2;
 $212 = HEAP8[(7107)>>0]|0;
 $213 = $212&255;
 $214 = $213 & 4;
 $215 = $214 >> 2;
 $216 = ($211|0)!=($215|0);
 if ($216) {
  $217 = HEAP8[(7139)>>0]|0;
  $218 = $217&255;
  $219 = $218 & 4;
  $220 = $219 >> 2;
  $221 = ($220|0)==(0);
  $222 = $221 ? 0 : 127;
  $223 = $222&255;
  _midi_send_cmd2(11,2,77,($223|0));
 }
 $224 = HEAP8[(7141)>>0]|0;
 $225 = $224&255;
 $226 = $225 & 4;
 $227 = $226 >> 2;
 $228 = HEAP8[(7109)>>0]|0;
 $229 = $228&255;
 $230 = $229 & 4;
 $231 = $230 >> 2;
 $232 = ($227|0)!=($231|0);
 if ($232) {
  $233 = HEAP8[(7141)>>0]|0;
  $234 = $233&255;
  $235 = $234 & 4;
  $236 = $235 >> 2;
  $237 = ($236|0)==(0);
  $238 = $237 ? 0 : 127;
  $239 = $238&255;
  _midi_send_cmd2(11,2,78,($239|0));
 }
 $240 = HEAP8[(7139)>>0]|0;
 $241 = $240&255;
 $242 = $241 & 8;
 $243 = $242 >> 3;
 $244 = HEAP8[(7107)>>0]|0;
 $245 = $244&255;
 $246 = $245 & 8;
 $247 = $246 >> 3;
 $248 = ($243|0)!=($247|0);
 if ($248) {
  $249 = HEAP8[(7139)>>0]|0;
  $250 = $249&255;
  $251 = $250 & 8;
  $252 = $251 >> 3;
  $253 = ($252|0)==(0);
  $254 = $253 ? 0 : 127;
  $255 = $254&255;
  _midi_send_cmd2(11,2,41,($255|0));
 }
 $256 = HEAP8[(7141)>>0]|0;
 $257 = $256&255;
 $258 = $257 & 8;
 $259 = $258 >> 3;
 $260 = HEAP8[(7109)>>0]|0;
 $261 = $260&255;
 $262 = $261 & 8;
 $263 = $262 >> 3;
 $264 = ($259|0)!=($263|0);
 if ($264) {
  $265 = HEAP8[(7141)>>0]|0;
  $266 = $265&255;
  $267 = $266 & 8;
  $268 = $267 >> 3;
  $269 = ($268|0)==(0);
  $270 = $269 ? 0 : 127;
  $271 = $270&255;
  _midi_send_cmd2(11,2,42,($271|0));
 }
 $272 = HEAP8[(7139)>>0]|0;
 $273 = $272&255;
 $274 = $273 & 32;
 $275 = $274 >> 5;
 $276 = HEAP8[(7107)>>0]|0;
 $277 = $276&255;
 $278 = $277 & 32;
 $279 = $278 >> 5;
 $280 = ($275|0)!=($279|0);
 if ($280) {
  $281 = HEAP8[(7139)>>0]|0;
  $282 = $281&255;
  $283 = $282 & 32;
  $284 = $283 >> 5;
  $285 = ($284|0)==(0);
  $286 = $285 ? 0 : 127;
  $287 = $286&255;
  _midi_send_cmd2(11,2,75,($287|0));
 }
 $288 = HEAP8[(7141)>>0]|0;
 $289 = $288&255;
 $290 = $289 & 32;
 $291 = $290 >> 5;
 $292 = HEAP8[(7109)>>0]|0;
 $293 = $292&255;
 $294 = $293 & 32;
 $295 = $294 >> 5;
 $296 = ($291|0)!=($295|0);
 if ($296) {
  $297 = HEAP8[(7141)>>0]|0;
  $298 = $297&255;
  $299 = $298 & 32;
  $300 = $299 >> 5;
  $301 = ($300|0)==(0);
  $302 = $301 ? 0 : 127;
  $303 = $302&255;
  _midi_send_cmd2(11,2,76,($303|0));
 }
 $304 = HEAP8[(7139)>>0]|0;
 $305 = $304&255;
 $306 = HEAP8[(7107)>>0]|0;
 $307 = $306&255;
 $308 = ($305|0)!=($307|0);
 if ($308) {
  $diff = 1;
 }
 $309 = HEAP8[(7141)>>0]|0;
 $310 = $309&255;
 $311 = HEAP8[(7109)>>0]|0;
 $312 = $311&255;
 $313 = ($310|0)!=($312|0);
 if ($313) {
  $diff = 1;
 }
 $314 = HEAP8[(7135)>>0]|0;
 $315 = $314&255;
 $316 = HEAP8[(7103)>>0]|0;
 $317 = $316&255;
 $318 = ($315|0)!=($317|0);
 if ($318) {
  $diff = 1;
 } else {
  $319 = HEAP8[(7136)>>0]|0;
  $320 = $319&255;
  $321 = HEAP8[(7104)>>0]|0;
  $322 = $321&255;
  $323 = ($320|0)!=($322|0);
  if ($323) {
   $diff = 1;
  }
 }
 $324 = HEAP8[(7137)>>0]|0;
 $325 = $324&255;
 $326 = HEAP8[(7105)>>0]|0;
 $327 = $326&255;
 $328 = ($325|0)!=($327|0);
 if ($328) {
  $diff = 1;
 }
 $329 = HEAP8[(7138)>>0]|0;
 $330 = $329&255;
 $331 = HEAP8[(7106)>>0]|0;
 $332 = $331&255;
 $333 = ($330|0)!=($332|0);
 if ($333) {
  $diff = 1;
 }
 $334 = $diff;
 $335 = ($334<<24>>24)!=(0);
 if (!($335)) {
  STACKTOP = sp;return;
 }
 _update_lcd();
 STACKTOP = sp;return;
}
function _calc_leds() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[(7138)>>0]|0;
 $1 = ($0<<24>>24)!=(0);
 if ($1) {
  $2 = HEAP8[(7139)>>0]|0;
  $3 = $2&255;
  $4 = $3 & 1;
  $5 = $4 >> 0;
  $6 = HEAP8[(7141)>>0]|0;
  $7 = $6&255;
  $8 = $7 & 1;
  $9 = $8 >> 0;
  $10 = $5 | $9;
  $11 = HEAP8[(7122)>>0]|0;
  $12 = $11&255;
  $13 = ((7124) + ($12<<3)|0);
  $14 = ((($13)) + 4|0);
  $15 = $10&255;
  $16 = HEAP8[$14>>0]|0;
  $17 = $15 & 1;
  $18 = $16 & -2;
  $19 = $18 | $17;
  HEAP8[$14>>0] = $19;
  $20 = HEAP8[(7139)>>0]|0;
  $21 = $20&255;
  $22 = $21 & 2;
  $23 = $22 >> 1;
  $24 = HEAP8[(7141)>>0]|0;
  $25 = $24&255;
  $26 = $25 & 2;
  $27 = $26 >> 1;
  $28 = $23 | $27;
  $29 = HEAP8[(7122)>>0]|0;
  $30 = $29&255;
  $31 = ((7124) + ($30<<3)|0);
  $32 = ((($31)) + 4|0);
  $33 = $28&255;
  $34 = HEAP8[$32>>0]|0;
  $35 = $33 & 1;
  $36 = ($35 << 1)&255;
  $37 = $34 & -3;
  $38 = $37 | $36;
  HEAP8[$32>>0] = $38;
  $39 = HEAP8[(7139)>>0]|0;
  $40 = $39&255;
  $41 = $40 & 4;
  $42 = $41 >> 2;
  $43 = HEAP8[(7141)>>0]|0;
  $44 = $43&255;
  $45 = $44 & 4;
  $46 = $45 >> 2;
  $47 = $42 | $46;
  $48 = HEAP8[(7122)>>0]|0;
  $49 = $48&255;
  $50 = ((7124) + ($49<<3)|0);
  $51 = ((($50)) + 4|0);
  $52 = $47&255;
  $53 = HEAP8[$51>>0]|0;
  $54 = $52 & 1;
  $55 = ($54 << 2)&255;
  $56 = $53 & -5;
  $57 = $56 | $55;
  HEAP8[$51>>0] = $57;
  $58 = HEAP8[(7139)>>0]|0;
  $59 = $58&255;
  $60 = $59 & 8;
  $61 = $60 >> 3;
  $62 = HEAP8[(7141)>>0]|0;
  $63 = $62&255;
  $64 = $63 & 8;
  $65 = $64 >> 3;
  $66 = $61 | $65;
  $67 = HEAP8[(7122)>>0]|0;
  $68 = $67&255;
  $69 = ((7124) + ($68<<3)|0);
  $70 = ((($69)) + 4|0);
  $71 = $66&255;
  $72 = HEAP8[$70>>0]|0;
  $73 = $71 & 1;
  $74 = ($73 << 3)&255;
  $75 = $72 & -9;
  $76 = $75 | $74;
  HEAP8[$70>>0] = $76;
  $77 = HEAP8[(7139)>>0]|0;
  $78 = $77&255;
  $79 = $78 & 16;
  $80 = $79 >> 4;
  $81 = HEAP8[(7141)>>0]|0;
  $82 = $81&255;
  $83 = $82 & 16;
  $84 = $83 >> 4;
  $85 = $80 | $84;
  $86 = HEAP8[(7122)>>0]|0;
  $87 = $86&255;
  $88 = ((7124) + ($87<<3)|0);
  $89 = ((($88)) + 4|0);
  $90 = $85&255;
  $91 = HEAP8[$89>>0]|0;
  $92 = $90 & 1;
  $93 = ($92 << 4)&255;
  $94 = $91 & -17;
  $95 = $94 | $93;
  HEAP8[$89>>0] = $95;
  $96 = HEAP8[(7139)>>0]|0;
  $97 = $96&255;
  $98 = $97 & 32;
  $99 = $98 >> 5;
  $100 = HEAP8[(7141)>>0]|0;
  $101 = $100&255;
  $102 = $101 & 32;
  $103 = $102 >> 5;
  $104 = $99 | $103;
  $105 = HEAP8[(7122)>>0]|0;
  $106 = $105&255;
  $107 = ((7124) + ($106<<3)|0);
  $108 = ((($107)) + 4|0);
  $109 = $104&255;
  $110 = HEAP8[$108>>0]|0;
  $111 = $109 & 1;
  $112 = ($111 << 5)&255;
  $113 = $110 & -33;
  $114 = $113 | $112;
  HEAP8[$108>>0] = $114;
 } else {
  $115 = HEAP8[(7137)>>0]|0;
  $116 = $115&255;
  $117 = ((7139) + ($116<<1)|0);
  $118 = HEAP8[$117>>0]|0;
  $119 = $118&255;
  $120 = $119 & 1;
  $121 = $120 >> 0;
  $122 = HEAP8[(7122)>>0]|0;
  $123 = $122&255;
  $124 = ((7124) + ($123<<3)|0);
  $125 = ((($124)) + 4|0);
  $126 = $121&255;
  $127 = HEAP8[$125>>0]|0;
  $128 = $126 & 1;
  $129 = $127 & -2;
  $130 = $129 | $128;
  HEAP8[$125>>0] = $130;
  $131 = HEAP8[(7137)>>0]|0;
  $132 = $131&255;
  $133 = ((7139) + ($132<<1)|0);
  $134 = HEAP8[$133>>0]|0;
  $135 = $134&255;
  $136 = $135 & 2;
  $137 = $136 >> 1;
  $138 = HEAP8[(7122)>>0]|0;
  $139 = $138&255;
  $140 = ((7124) + ($139<<3)|0);
  $141 = ((($140)) + 4|0);
  $142 = $137&255;
  $143 = HEAP8[$141>>0]|0;
  $144 = $142 & 1;
  $145 = ($144 << 1)&255;
  $146 = $143 & -3;
  $147 = $146 | $145;
  HEAP8[$141>>0] = $147;
  $148 = HEAP8[(7137)>>0]|0;
  $149 = $148&255;
  $150 = ((7139) + ($149<<1)|0);
  $151 = HEAP8[$150>>0]|0;
  $152 = $151&255;
  $153 = $152 & 4;
  $154 = $153 >> 2;
  $155 = HEAP8[(7122)>>0]|0;
  $156 = $155&255;
  $157 = ((7124) + ($156<<3)|0);
  $158 = ((($157)) + 4|0);
  $159 = $154&255;
  $160 = HEAP8[$158>>0]|0;
  $161 = $159 & 1;
  $162 = ($161 << 2)&255;
  $163 = $160 & -5;
  $164 = $163 | $162;
  HEAP8[$158>>0] = $164;
  $165 = HEAP8[(7137)>>0]|0;
  $166 = $165&255;
  $167 = ((7139) + ($166<<1)|0);
  $168 = HEAP8[$167>>0]|0;
  $169 = $168&255;
  $170 = $169 & 8;
  $171 = $170 >> 3;
  $172 = HEAP8[(7122)>>0]|0;
  $173 = $172&255;
  $174 = ((7124) + ($173<<3)|0);
  $175 = ((($174)) + 4|0);
  $176 = $171&255;
  $177 = HEAP8[$175>>0]|0;
  $178 = $176 & 1;
  $179 = ($178 << 3)&255;
  $180 = $177 & -9;
  $181 = $180 | $179;
  HEAP8[$175>>0] = $181;
  $182 = HEAP8[(7137)>>0]|0;
  $183 = $182&255;
  $184 = ((7139) + ($183<<1)|0);
  $185 = HEAP8[$184>>0]|0;
  $186 = $185&255;
  $187 = $186 & 16;
  $188 = $187 >> 4;
  $189 = HEAP8[(7122)>>0]|0;
  $190 = $189&255;
  $191 = ((7124) + ($190<<3)|0);
  $192 = ((($191)) + 4|0);
  $193 = $188&255;
  $194 = HEAP8[$192>>0]|0;
  $195 = $193 & 1;
  $196 = ($195 << 4)&255;
  $197 = $194 & -17;
  $198 = $197 | $196;
  HEAP8[$192>>0] = $198;
  $199 = HEAP8[(7137)>>0]|0;
  $200 = $199&255;
  $201 = ((7139) + ($200<<1)|0);
  $202 = HEAP8[$201>>0]|0;
  $203 = $202&255;
  $204 = $203 & 32;
  $205 = $204 >> 5;
  $206 = HEAP8[(7122)>>0]|0;
  $207 = $206&255;
  $208 = ((7124) + ($207<<3)|0);
  $209 = ((($208)) + 4|0);
  $210 = $205&255;
  $211 = HEAP8[$209>>0]|0;
  $212 = $210 & 1;
  $213 = ($212 << 5)&255;
  $214 = $211 & -33;
  $215 = $214 | $213;
  HEAP8[$209>>0] = $215;
 }
 $216 = HEAP8[(7116)>>0]|0;
 $217 = ($216&255) >>> 6;
 $218 = $217 & 1;
 $219 = $218&255;
 $220 = HEAP8[(7122)>>0]|0;
 $221 = $220&255;
 $222 = ((7124) + ($221<<3)|0);
 $223 = ((($222)) + 4|0);
 $224 = $219&255;
 $225 = HEAP8[$223>>0]|0;
 $226 = $224 & 1;
 $227 = ($226 << 6)&255;
 $228 = $225 & -65;
 $229 = $228 | $227;
 HEAP8[$223>>0] = $229;
 $230 = HEAP8[(7116)>>0]|0;
 $231 = ($230&255) >>> 7;
 $232 = $231&255;
 $233 = HEAP8[(7122)>>0]|0;
 $234 = $233&255;
 $235 = ((7124) + ($234<<3)|0);
 $236 = ((($235)) + 4|0);
 $237 = $232&255;
 $238 = HEAP8[$236>>0]|0;
 $239 = $237 & 1;
 $240 = ($239 << 7)&255;
 $241 = $238 & 127;
 $242 = $241 | $240;
 HEAP8[$236>>0] = $242;
 $243 = HEAP8[(7138)>>0]|0;
 $244 = $243&255;
 $245 = HEAP8[(7122)>>0]|0;
 $246 = $245&255;
 $247 = ((7124) + ($246<<3)|0);
 $248 = $244&255;
 $249 = HEAP8[$247>>0]|0;
 $250 = $248 & 1;
 $251 = $249 & -2;
 $252 = $251 | $250;
 HEAP8[$247>>0] = $252;
 $253 = HEAP8[(7137)>>0]|0;
 $254 = $253&255;
 $255 = HEAP8[(7122)>>0]|0;
 $256 = $255&255;
 $257 = ((7124) + ($256<<3)|0);
 $258 = $254&255;
 $259 = HEAP8[$257>>0]|0;
 $260 = $258 & 1;
 $261 = ($260 << 1)&255;
 $262 = $259 & -3;
 $263 = $262 | $261;
 HEAP8[$257>>0] = $263;
 $264 = HEAP8[7112>>0]|0;
 $265 = ($264&255) >>> 2;
 $266 = $265 & 1;
 $267 = $266&255;
 $268 = HEAP8[(7137)>>0]|0;
 $269 = $268&255;
 $270 = ((7139) + ($269<<1)|0);
 $271 = ((($270)) + 1|0);
 $272 = HEAP8[$271>>0]|0;
 $273 = $272&255;
 $274 = ($273|0)!=(115);
 $275 = $274&1;
 $276 = $267 | $275;
 $277 = HEAP8[(7122)>>0]|0;
 $278 = $277&255;
 $279 = ((7124) + ($278<<3)|0);
 $280 = $276&255;
 $281 = HEAP8[$279>>0]|0;
 $282 = $280 & 1;
 $283 = ($282 << 2)&255;
 $284 = $281 & -5;
 $285 = $284 | $283;
 HEAP8[$279>>0] = $285;
 $286 = HEAP8[7112>>0]|0;
 $287 = ($286&255) >>> 3;
 $288 = $287 & 1;
 $289 = $288&255;
 $290 = HEAP8[(7137)>>0]|0;
 $291 = $290&255;
 $292 = ((7139) + ($291<<1)|0);
 $293 = ((($292)) + 1|0);
 $294 = HEAP8[$293>>0]|0;
 $295 = $294&255;
 $296 = ($295|0)>(115);
 $297 = $296&1;
 $298 = $289 | $297;
 $299 = HEAP8[(7122)>>0]|0;
 $300 = $299&255;
 $301 = ((7124) + ($300<<3)|0);
 $302 = $298&255;
 $303 = HEAP8[$301>>0]|0;
 $304 = $302 & 1;
 $305 = ($304 << 3)&255;
 $306 = $303 & -9;
 $307 = $306 | $305;
 HEAP8[$301>>0] = $307;
 $308 = HEAP8[7112>>0]|0;
 $309 = ($308&255) >>> 4;
 $310 = $309 & 1;
 $311 = $310&255;
 $312 = HEAP8[(7137)>>0]|0;
 $313 = $312&255;
 $314 = ((7139) + ($313<<1)|0);
 $315 = ((($314)) + 1|0);
 $316 = HEAP8[$315>>0]|0;
 $317 = $316&255;
 $318 = ($317|0)<(115);
 $319 = $318&1;
 $320 = $311 | $319;
 $321 = HEAP8[(7122)>>0]|0;
 $322 = $321&255;
 $323 = ((7124) + ($322<<3)|0);
 $324 = $320&255;
 $325 = HEAP8[$323>>0]|0;
 $326 = $324 & 1;
 $327 = ($326 << 4)&255;
 $328 = $325 & -17;
 $329 = $328 | $327;
 HEAP8[$323>>0] = $329;
 $330 = HEAP8[7112>>0]|0;
 $331 = ($330&255) >>> 5;
 $332 = $331 & 1;
 $333 = $332&255;
 $334 = HEAP8[(7122)>>0]|0;
 $335 = $334&255;
 $336 = ((7124) + ($335<<3)|0);
 $337 = $333&255;
 $338 = HEAP8[$336>>0]|0;
 $339 = $337 & 1;
 $340 = ($339 << 5)&255;
 $341 = $338 & -33;
 $342 = $341 | $340;
 HEAP8[$336>>0] = $342;
 $343 = HEAP8[7112>>0]|0;
 $344 = ($343&255) >>> 6;
 $345 = $344 & 1;
 $346 = $345&255;
 $347 = HEAP8[(7122)>>0]|0;
 $348 = $347&255;
 $349 = ((7124) + ($348<<3)|0);
 $350 = $346&255;
 $351 = HEAP8[$349>>0]|0;
 $352 = $350 & 1;
 $353 = ($352 << 6)&255;
 $354 = $351 & -65;
 $355 = $354 | $353;
 HEAP8[$349>>0] = $355;
 $356 = HEAP8[7112>>0]|0;
 $357 = ($356&255) >>> 7;
 $358 = $357&255;
 $359 = HEAP8[(7122)>>0]|0;
 $360 = $359&255;
 $361 = ((7124) + ($360<<3)|0);
 $362 = $358&255;
 $363 = HEAP8[$361>>0]|0;
 $364 = $362 & 1;
 $365 = ($364 << 7)&255;
 $366 = $363 & 127;
 $367 = $366 | $365;
 HEAP8[$361>>0] = $367;
 _send_leds();
 return;
}
function _send_leds() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[(7122)>>0]|0;
 $1 = $0&255;
 $2 = ((7124) + ($1<<3)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4&65535;
 $6 = HEAP8[(7122)>>0]|0;
 $7 = $6&255;
 $8 = ((7124) + ($7<<3)|0);
 $9 = ((($8)) + 4|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11&65535;
 $13 = $12 << 8;
 $14 = $5 | $13;
 $15 = $14&65535;
 HEAP16[(7120)>>1] = $15;
 $16 = HEAP16[(7120)>>1]|0;
 $17 = $16&65535;
 $18 = HEAP16[(7088)>>1]|0;
 $19 = $18&65535;
 $20 = ($17|0)!=($19|0);
 if (!($20)) {
  return;
 }
 $21 = HEAP16[(7120)>>1]|0;
 _led_set(($21|0));
 $22 = HEAP16[(7120)>>1]|0;
 HEAP16[(7088)>>1] = $22;
 return;
}
function _print_half($dst,$col,$volhalfdb) {
 $dst = $dst|0;
 $col = $col|0;
 $volhalfdb = $volhalfdb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dst;
 $1 = $col;
 $2 = $volhalfdb;
 $3 = $2;
 $4 = $3 << 24 >> 24;
 $5 = ($4|0)<(0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 if ($5) {
  $9 = $8 << 24 >> 24;
  $10 = (0 - ($9))|0;
  $11 = $10&255;
  $12 = $11&255;
  $13 = $12 >> 1;
  $14 = $13&255;
  $15 = (_ritoa($6,$7,$14)|0);
  $i = $15;
  $16 = $i;
  $17 = $16 << 24 >> 24;
  $18 = $0;
  $19 = (($18) + ($17)|0);
  HEAP8[$19>>0] = 45;
 } else {
  $20 = $8&255;
  $21 = $20 >> 1;
  $22 = $21&255;
  (_ritoa($6,$7,$22)|0);
 }
 $23 = $1;
 $24 = $23&255;
 $25 = (($24) + 1)|0;
 $26 = $0;
 $27 = (($26) + ($25)|0);
 HEAP8[$27>>0] = 46;
 $28 = $2;
 $29 = $28&255;
 $30 = $29 & 1;
 $31 = ($30|0)!=(0);
 $32 = $1;
 $33 = $32&255;
 $34 = (($33) + 2)|0;
 $35 = $0;
 $36 = (($35) + ($34)|0);
 if ($31) {
  HEAP8[$36>>0] = 53;
  STACKTOP = sp;return;
 } else {
  HEAP8[$36>>0] = 48;
  STACKTOP = sp;return;
 }
}
function _ritoa($dst,$col,$n) {
 $dst = $dst|0;
 $col = $col|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dst;
 $1 = $col;
 $2 = $n;
 while(1) {
  $3 = $2;
  $4 = $3&255;
  $5 = (($4|0) % 10)&-1;
  $6 = (($5) + 48)|0;
  $7 = $6&255;
  $8 = $1;
  $9 = (($8) + -1)<<24>>24;
  $1 = $9;
  $10 = $8 << 24 >> 24;
  $11 = $0;
  $12 = (($11) + ($10)|0);
  HEAP8[$12>>0] = $7;
  $13 = $2;
  $14 = $13&255;
  $15 = (($14|0) / 10)&-1;
  $16 = $15&255;
  $2 = $16;
  $17 = $16&255;
  $18 = ($17|0)>(0);
  if (!($18)) {
   break;
  }
 }
 $19 = $1;
 STACKTOP = sp;return ($19|0);
}
function _name_get($name_index) {
 $name_index = $name_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name_index;
 $2 = $1;
 $3 = $2&65535;
 $4 = ($3|0)==(0);
 if ($4) {
  $0 = 180292;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $5 = $1;
  $6 = $5&65535;
  $7 = (($6) - 1)|0;
  $8 = ($7*20)|0;
  $9 = (8256 + ($8))|0;
  $10 = $9&65535;
  $11 = (_flash_addr($10)|0);
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _copy_str_lcd($src,$dst) {
 $src = $src|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $src;
 $1 = $dst;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $2&255;
  $4 = $0;
  $5 = (($4) + ($3)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = $9&255;
  $11 = ($10|0)<(20);
  if (!($11)) {
   break;
  }
  $12 = $i;
  $13 = $12&255;
  $14 = $0;
  $15 = (($14) + ($13)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $i;
  $18 = $17&255;
  $19 = $1;
  $20 = (($19) + ($18)|0);
  HEAP8[$20>>0] = $16;
  $21 = $i;
  $22 = (($21) + 1)<<24>>24;
  $i = $22;
 }
 while(1) {
  $23 = $i;
  $24 = $23&255;
  $25 = ($24|0)<(20);
  if (!($25)) {
   break;
  }
  $26 = $i;
  $27 = $26&255;
  $28 = $1;
  $29 = (($28) + ($27)|0);
  HEAP8[$29>>0] = 32;
  $30 = $i;
  $31 = (($30) + 1)<<24>>24;
  $i = $31;
 }
 STACKTOP = sp;return;
}
function _strlwr($str) {
 $str = $str|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$str>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $$01 = $str;$3 = $0;
  while(1) {
   $2 = $3 << 24 >> 24;
   $4 = (_tolower($2)|0);
   $5 = $4&255;
   HEAP8[$$01>>0] = $5;
   $6 = ((($$01)) + 1|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    break;
   } else {
    $$01 = $6;$3 = $7;
   }
  }
 }
 return ($str|0);
}
function _strtoull_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoull($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtoll_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoll($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtoul_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoul($s,$p,$base)|0);
 return ($0|0);
}
function _strtol_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtol($s,$p,$base)|0);
 return ($0|0);
}
function _strupr($str) {
 $str = $str|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$str>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $$01 = $str;$3 = $0;
  while(1) {
   $2 = $3 << 24 >> 24;
   $4 = (_toupper($2)|0);
   $5 = $4&255;
   HEAP8[$$01>>0] = $5;
   $6 = ((($$01)) + 1|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    break;
   } else {
    $$01 = $6;$3 = $7;
   }
  }
 }
 return ($str|0);
}
function ___synccall($func,$ctx) {
 $func = $func|0;
 $ctx = $ctx|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_vi[$func & 63]($ctx);
 return;
}
function _cabs($z) {
 $z = $z|0;
 var $0 = 0.0, $1 = 0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[$z>>3];
 $1 = ((($z)) + 8|0);
 $2 = +HEAPF64[$1>>3];
 $3 = (+_hypot($0,$2));
 return (+$3);
}
function _cabsf($z) {
 $z = $z|0;
 var $0 = 0.0, $1 = 0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$z>>2];
 $1 = ((($z)) + 4|0);
 $2 = +HEAPF32[$1>>2];
 $3 = (+_hypotf($0,$2));
 return (+$3);
}
function _cabsl($z) {
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $0 = sp;
 $1 = +HEAPF64[$z>>3];
 $2 = ((($z)) + 8|0);
 $3 = +HEAPF64[$2>>3];
 $4 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $1;
 HEAPF64[$4>>3] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$0+12>>2]|0;
 $5 = (+_cabs($$byval_copy));
 STACKTOP = sp;return (+$5);
}
function _cacos($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$z>>3];
 $3 = ((($z)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $2;
 HEAPF64[$5>>3] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _casin($0,$$byval_copy);
 $6 = +HEAPF64[$0>>3];
 $7 = ((($0)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = 1.5707963267948966 - $6;
 $10 = -$8;
 $11 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $9;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _cacosf($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp;
 $2 = HEAP32[$z>>2]|0;
 $3 = ((($z)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 HEAP32[$1>>2] = $2;
 HEAP32[$5>>2] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 _casinf($0,$$byval_copy);
 $6 = +HEAPF32[$0>>2];
 $7 = ((($0)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = 1.5707963705062866 - $6;
 $10 = -$8;
 $11 = ((($agg$result)) + 4|0);
 HEAPF32[$agg$result>>2] = $9;
 HEAPF32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function _cacosh($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$z>>3];
 $3 = ((($z)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $2;
 HEAPF64[$5>>3] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _cacos($0,$$byval_copy);
 $6 = +HEAPF64[$0>>3];
 $7 = ((($0)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = -$8;
 $10 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $9;
 HEAPF64[$10>>3] = $6;
 STACKTOP = sp;return;
}
function _cacoshf($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp;
 $2 = HEAP32[$z>>2]|0;
 $3 = ((($z)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 HEAP32[$1>>2] = $2;
 HEAP32[$5>>2] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 _cacosf($0,$$byval_copy);
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($0)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = -$8;
 $10 = ((($agg$result)) + 4|0);
 HEAPF32[$agg$result>>2] = $9;
 HEAP32[$10>>2] = $6;
 STACKTOP = sp;return;
}
function _cacoshl($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$z>>3];
 $3 = ((($z)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $2;
 HEAPF64[$5>>3] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _cacosh($0,$$byval_copy);
 $6 = +HEAPF64[$0>>3];
 $7 = ((($0)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $6;
 HEAPF64[$9>>3] = $8;
 STACKTOP = sp;return;
}
function _cacosl($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$z>>3];
 $3 = ((($z)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $2;
 HEAPF64[$5>>3] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _cacos($0,$$byval_copy);
 $6 = +HEAPF64[$0>>3];
 $7 = ((($0)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $6;
 HEAPF64[$9>>3] = $8;
 STACKTOP = sp;return;
}
function _carg($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($z)) + 8|0);
 $1 = +HEAPF64[$0>>3];
 $2 = +HEAPF64[$z>>3];
 $3 = (+Math_atan2((+$1),(+$2)));
 return (+$3);
}
function _cargf($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($z)) + 4|0);
 $1 = +HEAPF32[$0>>2];
 $2 = +HEAPF32[$z>>2];
 $3 = (+Math_atan2((+$1),(+$2)));
 return (+$3);
}
function _cargl($z) {
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $0 = sp;
 $1 = +HEAPF64[$z>>3];
 $2 = ((($z)) + 8|0);
 $3 = +HEAPF64[$2>>3];
 $4 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $1;
 HEAPF64[$4>>3] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$0+12>>2]|0;
 $5 = (+_carg($$byval_copy));
 STACKTOP = sp;return (+$5);
}
function _casin($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $3 = 0;
 var $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 80|0;
 $$byval_copy = sp + 64|0;
 $0 = sp + 48|0;
 $1 = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$z>>3];
 $5 = ((($z)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $4 - $6;
 $8 = $4 + $6;
 $9 = $7 * $8;
 $10 = 1.0 - $9;
 $11 = $4 * -2.0;
 $12 = $11 * $6;
 $13 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $10;
 HEAPF64[$13>>3] = $12;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _csqrt($0,$$byval_copy);
 $14 = +HEAPF64[$0>>3];
 $15 = ((($0)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $14 - $6;
 $18 = $4 + $16;
 $19 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $17;
 HEAPF64[$19>>3] = $18;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$3+12>>2]|0;
 _clog($2,$$byval_copy1);
 $20 = +HEAPF64[$2>>3];
 $21 = ((($2)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $20;
 HEAPF64[$23>>3] = $22;
 STACKTOP = sp;return;
}
function _casinf($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 40|0;
 $$byval_copy = sp + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp;
 $4 = +HEAPF32[$z>>2];
 $5 = ((($z)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $4 - $6;
 $8 = $4 + $6;
 $9 = $7 * $8;
 $10 = 1.0 - $9;
 $11 = $4;
 $12 = $11 * -2.0;
 $13 = $6;
 $14 = $12 * $13;
 $15 = $14;
 $16 = ((($1)) + 4|0);
 HEAPF32[$1>>2] = $10;
 HEAPF32[$16>>2] = $15;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 _csqrtf($0,$$byval_copy);
 $17 = +HEAPF32[$0>>2];
 $18 = ((($0)) + 4|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $17 - $6;
 $21 = $4 + $19;
 $22 = ((($3)) + 4|0);
 HEAPF32[$3>>2] = $20;
 HEAPF32[$22>>2] = $21;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$3+4>>2]|0;
 _clogf($2,$$byval_copy1);
 $23 = HEAP32[$2>>2]|0;
 $24 = ((($2)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($agg$result)) + 4|0);
 HEAP32[$agg$result>>2] = $23;
 HEAP32[$26>>2] = $25;
 STACKTOP = sp;return;
}
function _casinh($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = ((($z)) + 8|0);
 $3 = +HEAPF64[$2>>3];
 $4 = -$3;
 $5 = +HEAPF64[$z>>3];
 $6 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $4;
 HEAPF64[$6>>3] = $5;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _casin($0,$$byval_copy);
 $7 = +HEAPF64[$0>>3];
 $8 = ((($0)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = -$7;
 $11 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $9;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _casinhf($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp;
 $2 = ((($z)) + 4|0);
 $3 = +HEAPF32[$2>>2];
 $4 = -$3;
 $5 = HEAP32[$z>>2]|0;
 $6 = ((($1)) + 4|0);
 HEAPF32[$1>>2] = $4;
 HEAP32[$6>>2] = $5;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 _casinf($0,$$byval_copy);
 $7 = +HEAPF32[$0>>2];
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = -$7;
 $11 = ((($agg$result)) + 4|0);
 HEAP32[$agg$result>>2] = $9;
 HEAPF32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function _casinhl($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$z>>3];
 $3 = ((($z)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $2;
 HEAPF64[$5>>3] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _casinh($0,$$byval_copy);
 $6 = +HEAPF64[$0>>3];
 $7 = ((($0)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $6;
 HEAPF64[$9>>3] = $8;
 STACKTOP = sp;return;
}
function _casinl($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$z>>3];
 $3 = ((($z)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $2;
 HEAPF64[$5>>3] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _casin($0,$$byval_copy);
 $6 = +HEAPF64[$0>>3];
 $7 = ((($0)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $6;
 HEAPF64[$9>>3] = $8;
 STACKTOP = sp;return;
}
function _catan($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$pre$phi2Z2D = 0, $$pre$phiZ2D = 0, $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
 var $8 = 0.0, $9 = 0, $or$cond = 0, $t$0$i = 0.0, $t$0$v$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[$z>>3];
 $1 = ((($z)) + 8|0);
 $2 = +HEAPF64[$1>>3];
 $3 = $0 == 0.0;
 $4 = $2 > 1.0;
 $or$cond = $3 & $4;
 if ($or$cond) {
  label = 5;
 } else {
  $5 = $0 * $0;
  $6 = 1.0 - $5;
  $7 = $2 * $2;
  $8 = $6 - $7;
  $9 = $8 == 0.0;
  if ($9) {
   label = 5;
  } else {
   $10 = $0 * 2.0;
   $11 = (+Math_atan2((+$10),(+$8)));
   $12 = $11 * 0.5;
   $13 = $12 / 3.1415926535897931;
   $14 = !($13 >= 0.0);
   $t$0$v$i = $14 ? -0.5 : 0.5;
   $t$0$i = $13 + $t$0$v$i;
   $15 = (~~(($t$0$i)));
   $16 = (+($15|0));
   $17 = $2 + -1.0;
   $18 = $17 * $17;
   $19 = $5 + $18;
   $20 = $19 == 0.0;
   if ($20) {
    label = 5;
   } else {
    $21 = $16 * 3.1415926516056061;
    $22 = $12 - $21;
    $23 = $16 * 1.9841871479187034E-9;
    $24 = $22 - $23;
    $25 = $16 * 1.1442377452219664E-17;
    $26 = $24 - $25;
    $27 = $2 + 1.0;
    $28 = $27 * $27;
    $29 = $5 + $28;
    $30 = $29 / $19;
    $31 = (+Math_log((+$30)));
    $32 = $31 * 0.25;
    $33 = $32 * 0.0;
    $34 = $26 + $33;
    $35 = $32 + 0.0;
    $36 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $34;
    HEAPF64[$36>>3] = $35;
    $$pre$phi2Z2D = $36;$$pre$phiZ2D = $agg$result;$38 = $34;$39 = $35;
   }
  }
 }
 if ((label|0) == 5) {
  $37 = ((($agg$result)) + 8|0);
  HEAPF64[$agg$result>>3] = 1.0E+308;
  HEAPF64[$37>>3] = 1.0E+308;
  $$pre$phi2Z2D = $37;$$pre$phiZ2D = $agg$result;$38 = 1.0E+308;$39 = 1.0E+308;
 }
 HEAPF64[$$pre$phiZ2D>>3] = $38;
 HEAPF64[$$pre$phi2Z2D>>3] = $39;
 return;
}
function _catanf($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$pre$phiZ2D = 0, $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $or$cond = 0, $t$0$i = 0.0, $t$0$v$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$z>>2];
 $1 = ((($z)) + 4|0);
 $2 = +HEAPF32[$1>>2];
 $3 = $0 == 0.0;
 $4 = $2 > 1.0;
 $or$cond = $3 & $4;
 if ($or$cond) {
  label = 5;
 } else {
  $5 = $0 * $0;
  $6 = 1.0 - $5;
  $7 = $2 * $2;
  $8 = $6 - $7;
  $9 = $8 == 0.0;
  if ($9) {
   label = 5;
  } else {
   $10 = $0 * 2.0;
   $11 = (+Math_atan2((+$10),(+$8)));
   $12 = $11 * 0.5;
   $13 = $12 / 3.1415927410125732;
   $14 = !($13 >= 0.0);
   $t$0$v$i = $14 ? -0.5 : 0.5;
   $t$0$i = $13 + $t$0$v$i;
   $15 = (~~(($t$0$i)));
   $16 = (+($15|0));
   $17 = $16;
   $18 = $2 + -1.0;
   $19 = $18 * $18;
   $20 = $5 + $19;
   $21 = $20 == 0.0;
   if ($21) {
    label = 5;
   } else {
    $22 = $12;
    $23 = $17 * 3.140625;
    $24 = $22 - $23;
    $25 = $17 * 9.6750259399414063E-4;
    $26 = $24 - $25;
    $27 = $17 * 1.5099579909783765E-7;
    $28 = $26 - $27;
    $29 = $28;
    $30 = $2 + 1.0;
    $31 = $30 * $30;
    $32 = $5 + $31;
    $33 = $32 / $20;
    $34 = (+Math_log((+$33)));
    $35 = $34 * 0.25;
    $36 = $35 * 0.0;
    $37 = $29 + $36;
    $38 = $35 + 0.0;
    $39 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $37;
    HEAPF32[$39>>2] = $38;
    $40 = (HEAPF32[tempDoublePtr>>2]=$37,HEAP32[tempDoublePtr>>2]|0);
    $41 = (HEAPF32[tempDoublePtr>>2]=$38,HEAP32[tempDoublePtr>>2]|0);
    $$pre$phiZ2D = $39;$43 = $40;$44 = $41;
   }
  }
 }
 if ((label|0) == 5) {
  $42 = ((($agg$result)) + 4|0);
  HEAPF32[$agg$result>>2] = 9.9999996802856924E+37;
  HEAPF32[$42>>2] = 9.9999996802856924E+37;
  $$pre$phiZ2D = $42;$43 = 2123789977;$44 = 2123789977;
 }
 HEAP32[$agg$result>>2] = $43;
 HEAP32[$$pre$phiZ2D>>2] = $44;
 return;
}
function _catanh($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = ((($z)) + 8|0);
 $3 = +HEAPF64[$2>>3];
 $4 = -$3;
 $5 = +HEAPF64[$z>>3];
 $6 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $4;
 HEAPF64[$6>>3] = $5;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _catan($0,$$byval_copy);
 $7 = +HEAPF64[$0>>3];
 $8 = ((($0)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = -$7;
 $11 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $9;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _catanhf($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp;
 $2 = ((($z)) + 4|0);
 $3 = +HEAPF32[$2>>2];
 $4 = -$3;
 $5 = HEAP32[$z>>2]|0;
 $6 = ((($1)) + 4|0);
 HEAPF32[$1>>2] = $4;
 HEAP32[$6>>2] = $5;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 _catanf($0,$$byval_copy);
 $7 = +HEAPF32[$0>>2];
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = -$7;
 $11 = ((($agg$result)) + 4|0);
 HEAP32[$agg$result>>2] = $9;
 HEAPF32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function _catanhl($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$z>>3];
 $3 = ((($z)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $2;
 HEAPF64[$5>>3] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _catanh($0,$$byval_copy);
 $6 = +HEAPF64[$0>>3];
 $7 = ((($0)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $6;
 HEAPF64[$9>>3] = $8;
 STACKTOP = sp;return;
}
function _catanl($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$z>>3];
 $3 = ((($z)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $2;
 HEAPF64[$5>>3] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _catan($0,$$byval_copy);
 $6 = +HEAPF64[$0>>3];
 $7 = ((($0)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $6;
 HEAPF64[$9>>3] = $8;
 STACKTOP = sp;return;
}
function _ccos($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = ((($z)) + 8|0);
 $3 = +HEAPF64[$2>>3];
 $4 = -$3;
 $5 = +HEAPF64[$z>>3];
 $6 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $4;
 HEAPF64[$6>>3] = $5;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _ccosh($0,$$byval_copy);
 $7 = +HEAPF64[$0>>3];
 $8 = ((($0)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $7;
 HEAPF64[$10>>3] = $9;
 STACKTOP = sp;return;
}
function _ccosf($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp;
 $2 = ((($z)) + 4|0);
 $3 = +HEAPF32[$2>>2];
 $4 = -$3;
 $5 = HEAP32[$z>>2]|0;
 $6 = ((($1)) + 4|0);
 HEAPF32[$1>>2] = $4;
 HEAP32[$6>>2] = $5;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 _ccoshf($0,$$byval_copy);
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($agg$result)) + 4|0);
 HEAP32[$agg$result>>2] = $7;
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return;
}
function _ccosh($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $$pre$phi35Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$z>>3];
 $3 = ((($z)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 HEAPF64[tempDoublePtr>>3] = $2;$5 = HEAP32[tempDoublePtr>>2]|0;
 $6 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $4;$7 = HEAP32[tempDoublePtr>>2]|0;
 $8 = HEAP32[tempDoublePtr+4>>2]|0;
 $9 = $6 & 2147483647;
 $10 = $8 & 2147483647;
 $11 = ($9>>>0)<(2146435072);
 $12 = ($10>>>0)<(2146435072);
 $or$cond = $11 & $12;
 do {
  if ($or$cond) {
   $13 = $10 | $7;
   $14 = ($13|0)==(0);
   if ($14) {
    $15 = (+_cosh($2));
    $16 = $2 * $4;
    $17 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $15;
    HEAPF64[$17>>3] = $16;
    $$pre$phi35Z2D = $17;$$pre$phiZ2D = $agg$result;$94 = $15;$95 = $16;
    break;
   }
   $18 = ($9>>>0)<(1077280768);
   if ($18) {
    $19 = (+_cosh($2));
    $20 = (+Math_cos((+$4)));
    $21 = $19 * $20;
    $22 = (+_sinh($2));
    $23 = (+Math_sin((+$4)));
    $24 = $22 * $23;
    $25 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $21;
    HEAPF64[$25>>3] = $24;
    $$pre$phi35Z2D = $25;$$pre$phiZ2D = $agg$result;$94 = $21;$95 = $24;
    break;
   }
   $26 = ($9>>>0)<(1082535490);
   if ($26) {
    $27 = (+Math_abs((+$2)));
    $28 = (+Math_exp((+$27)));
    $29 = $28 * 0.5;
    $30 = (+Math_cos((+$4)));
    $31 = $29 * $30;
    $32 = (+_copysign($29,$2));
    $33 = (+Math_sin((+$4)));
    $34 = $32 * $33;
    $35 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $31;
    HEAPF64[$35>>3] = $34;
    $$pre$phi35Z2D = $35;$$pre$phiZ2D = $agg$result;$94 = $31;$95 = $34;
    break;
   }
   $36 = ($9>>>0)<(1083620266);
   if ($36) {
    $37 = (+Math_abs((+$2)));
    $38 = ((($1)) + 8|0);
    HEAPF64[$1>>3] = $37;
    HEAPF64[$38>>3] = $4;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
    ___ldexp_cexp($0,$$byval_copy,-1);
    $39 = +HEAPF64[$0>>3];
    $40 = ((($0)) + 8|0);
    $41 = +HEAPF64[$40>>3];
    HEAPF64[$z>>3] = $39;
    HEAPF64[$3>>3] = $41;
    $42 = (+_copysign(1.0,$2));
    $43 = $41 * $42;
    $44 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $39;
    HEAPF64[$44>>3] = $43;
    $$pre$phi35Z2D = $44;$$pre$phiZ2D = $agg$result;$94 = $39;$95 = $43;
    break;
   } else {
    $45 = $2 * 8.9884656743115795E+307;
    $46 = $45 * $45;
    $47 = (+Math_cos((+$4)));
    $48 = $46 * $47;
    $49 = (+Math_sin((+$4)));
    $50 = $45 * $49;
    $51 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $48;
    HEAPF64[$51>>3] = $50;
    $$pre$phi35Z2D = $51;$$pre$phiZ2D = $agg$result;$94 = $48;$95 = $50;
    break;
   }
  } else {
   $52 = $9 | $5;
   $53 = ($52|0)==(0);
   $54 = ($10>>>0)>(2146435071);
   $or$cond3 = $53 & $54;
   if ($or$cond3) {
    $55 = $4 - $4;
    $56 = $2 * $55;
    $57 = (+_copysign(0.0,$56));
    $58 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $55;
    HEAPF64[$58>>3] = $57;
    $$pre$phi35Z2D = $58;$$pre$phiZ2D = $agg$result;$94 = $55;$95 = $57;
    break;
   }
   $59 = $10 | $7;
   $60 = ($59|0)==(0);
   $61 = ($9>>>0)>(2146435071);
   $or$cond5 = $61 & $60;
   if ($or$cond5) {
    $62 = $6 & 1048575;
    $63 = $62 | $5;
    $64 = ($63|0)==(0);
    $65 = $2 * $2;
    if ($64) {
     $66 = (+_copysign(0.0,$2));
     $67 = $4 * $66;
     $68 = ((($agg$result)) + 8|0);
     HEAPF64[$agg$result>>3] = $65;
     HEAPF64[$68>>3] = $67;
     $$pre$phi35Z2D = $68;$$pre$phiZ2D = $agg$result;$94 = $65;$95 = $67;
     break;
    } else {
     $69 = $2 + $2;
     $70 = $69 * $4;
     $71 = (+_copysign(0.0,$70));
     $72 = ((($agg$result)) + 8|0);
     HEAPF64[$agg$result>>3] = $65;
     HEAPF64[$72>>3] = $71;
     $$pre$phi35Z2D = $72;$$pre$phiZ2D = $agg$result;$94 = $65;$95 = $71;
     break;
    }
   }
   $or$cond7 = $11 & $54;
   if ($or$cond7) {
    $73 = $4 - $4;
    $74 = $2 * $73;
    $75 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $73;
    HEAPF64[$75>>3] = $74;
    $$pre$phi35Z2D = $75;$$pre$phiZ2D = $agg$result;$94 = $73;$95 = $74;
    break;
   }
   if ($61) {
    $76 = $6 & 1048575;
    $77 = $76 | $5;
    $78 = ($77|0)==(0);
    if ($78) {
     $79 = $2 * $2;
     if ($54) {
      $80 = $4 - $4;
      $81 = $2 * $80;
      $82 = ((($agg$result)) + 8|0);
      HEAPF64[$agg$result>>3] = $79;
      HEAPF64[$82>>3] = $81;
      $$pre$phi35Z2D = $82;$$pre$phiZ2D = $agg$result;$94 = $79;$95 = $81;
      break;
     } else {
      $83 = (+Math_cos((+$4)));
      $84 = $79 * $83;
      $85 = (+Math_sin((+$4)));
      $86 = $2 * $85;
      $87 = ((($agg$result)) + 8|0);
      HEAPF64[$agg$result>>3] = $84;
      HEAPF64[$87>>3] = $86;
      $$pre$phi35Z2D = $87;$$pre$phiZ2D = $agg$result;$94 = $84;$95 = $86;
      break;
     }
    }
   }
   $88 = $2 * $2;
   $89 = $4 - $4;
   $90 = $88 * $89;
   $91 = $2 + $2;
   $92 = $91 * $89;
   $93 = ((($agg$result)) + 8|0);
   HEAPF64[$agg$result>>3] = $90;
   HEAPF64[$93>>3] = $92;
   $$pre$phi35Z2D = $93;$$pre$phiZ2D = $agg$result;$94 = $90;$95 = $92;
  }
 } while(0);
 HEAPF64[$$pre$phiZ2D>>3] = $94;
 HEAPF64[$$pre$phi35Z2D>>3] = $95;
 STACKTOP = sp;return;
}
function _ccoshf($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $$in = 0.0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0;
 var $97 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond36 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp;
 $2 = +HEAPF32[$z>>2];
 $3 = ((($z)) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = (HEAPF32[tempDoublePtr>>2]=$2,HEAP32[tempDoublePtr>>2]|0);
 $6 = (HEAPF32[tempDoublePtr>>2]=$4,HEAP32[tempDoublePtr>>2]|0);
 $7 = $5 & 2147483647;
 $8 = $6 & 2147483647;
 $9 = ($7>>>0)<(2139095040);
 $10 = ($8>>>0)<(2139095040);
 $or$cond = $9 & $10;
 do {
  if ($or$cond) {
   $11 = ($8|0)==(0);
   if ($11) {
    $12 = (+_coshf($2));
    $13 = $2 * $4;
    $14 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $12;
    HEAPF32[$14>>2] = $13;
    $15 = (HEAPF32[tempDoublePtr>>2]=$12,HEAP32[tempDoublePtr>>2]|0);
    $$in = $13;$$pre$phiZ2D = $14;$97 = $15;
    break;
   }
   $16 = ($7>>>0)<(1091567616);
   if ($16) {
    $17 = (+_coshf($2));
    $18 = (+Math_cos((+$4)));
    $19 = $17 * $18;
    $20 = (+_sinhf($2));
    $21 = (+Math_sin((+$4)));
    $22 = $20 * $21;
    $23 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $19;
    HEAPF32[$23>>2] = $22;
    $24 = (HEAPF32[tempDoublePtr>>2]=$19,HEAP32[tempDoublePtr>>2]|0);
    $$in = $22;$$pre$phiZ2D = $23;$97 = $24;
    break;
   }
   $25 = ($7>>>0)<(1118925336);
   if ($25) {
    $26 = (+Math_abs((+$2)));
    $27 = (+Math_exp((+$26)));
    $28 = $27 * 0.5;
    $29 = (+Math_cos((+$4)));
    $30 = $28 * $29;
    $31 = (+_copysignf($28,$2));
    $32 = (+Math_sin((+$4)));
    $33 = $31 * $32;
    $34 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $30;
    HEAPF32[$34>>2] = $33;
    $35 = (HEAPF32[tempDoublePtr>>2]=$30,HEAP32[tempDoublePtr>>2]|0);
    $$in = $33;$$pre$phiZ2D = $34;$97 = $35;
    break;
   }
   $36 = ($7>>>0)<(1128313319);
   if ($36) {
    $37 = (+Math_abs((+$2)));
    $38 = ((($1)) + 4|0);
    HEAPF32[$1>>2] = $37;
    HEAPF32[$38>>2] = $4;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
    ___ldexp_cexpf($0,$$byval_copy,-1);
    $39 = HEAP32[$0>>2]|0;
    $40 = ((($0)) + 4|0);
    $41 = +HEAPF32[$40>>2];
    HEAP32[$z>>2] = $39;
    HEAPF32[$3>>2] = $41;
    $42 = (+_copysignf(1.0,$2));
    $43 = $41 * $42;
    $44 = ((($agg$result)) + 4|0);
    HEAP32[$agg$result>>2] = $39;
    HEAPF32[$44>>2] = $43;
    $$in = $43;$$pre$phiZ2D = $44;$97 = $39;
    break;
   } else {
    $45 = $2 * 1.7014118346046923E+38;
    $46 = $45 * $45;
    $47 = (+Math_cos((+$4)));
    $48 = $46 * $47;
    $49 = (+Math_sin((+$4)));
    $50 = $45 * $49;
    $51 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $48;
    HEAPF32[$51>>2] = $50;
    $52 = (HEAPF32[tempDoublePtr>>2]=$48,HEAP32[tempDoublePtr>>2]|0);
    $$in = $50;$$pre$phiZ2D = $51;$97 = $52;
    break;
   }
  } else {
   $53 = ($7|0)==(0);
   $54 = ($8>>>0)>(2139095039);
   $or$cond3 = $53 & $54;
   if ($or$cond3) {
    $55 = $4 - $4;
    $56 = $2 * $55;
    $57 = (+_copysignf(0.0,$56));
    $58 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $55;
    HEAPF32[$58>>2] = $57;
    $59 = (HEAPF32[tempDoublePtr>>2]=$55,HEAP32[tempDoublePtr>>2]|0);
    $$in = $57;$$pre$phiZ2D = $58;$97 = $59;
    break;
   }
   $60 = ($8|0)==(0);
   $61 = ($7>>>0)>(2139095039);
   $or$cond5 = $61 & $60;
   if ($or$cond5) {
    $62 = $5 & 8388607;
    $63 = ($62|0)==(0);
    $64 = $2 * $2;
    if ($63) {
     $65 = (+_copysignf(0.0,$2));
     $66 = $4 * $65;
     $67 = ((($agg$result)) + 4|0);
     HEAPF32[$agg$result>>2] = $64;
     HEAPF32[$67>>2] = $66;
     $68 = (HEAPF32[tempDoublePtr>>2]=$64,HEAP32[tempDoublePtr>>2]|0);
     $$in = $66;$$pre$phiZ2D = $67;$97 = $68;
     break;
    } else {
     $69 = $2 + $2;
     $70 = $69 * $4;
     $71 = (+_copysignf(0.0,$70));
     $72 = ((($agg$result)) + 4|0);
     HEAPF32[$agg$result>>2] = $64;
     HEAPF32[$72>>2] = $71;
     $73 = (HEAPF32[tempDoublePtr>>2]=$64,HEAP32[tempDoublePtr>>2]|0);
     $$in = $71;$$pre$phiZ2D = $72;$97 = $73;
     break;
    }
   }
   $or$cond7 = $9 & $54;
   if ($or$cond7) {
    $74 = $4 - $4;
    $75 = $2 * $74;
    $76 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $74;
    HEAPF32[$76>>2] = $75;
    $77 = (HEAPF32[tempDoublePtr>>2]=$74,HEAP32[tempDoublePtr>>2]|0);
    $$in = $75;$$pre$phiZ2D = $76;$97 = $77;
    break;
   }
   $78 = $5 & 8388607;
   $79 = ($78|0)==(0);
   $or$cond36 = $61 & $79;
   $80 = $2 * $2;
   if (!($or$cond36)) {
    $91 = $4 - $4;
    $92 = $80 * $91;
    $93 = $2 + $2;
    $94 = $93 * $91;
    $95 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $92;
    HEAPF32[$95>>2] = $94;
    $96 = (HEAPF32[tempDoublePtr>>2]=$92,HEAP32[tempDoublePtr>>2]|0);
    $$in = $94;$$pre$phiZ2D = $95;$97 = $96;
    break;
   }
   if ($54) {
    $81 = $4 - $4;
    $82 = $2 * $81;
    $83 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $80;
    HEAPF32[$83>>2] = $82;
    $84 = (HEAPF32[tempDoublePtr>>2]=$80,HEAP32[tempDoublePtr>>2]|0);
    $$in = $82;$$pre$phiZ2D = $83;$97 = $84;
    break;
   } else {
    $85 = (+Math_cos((+$4)));
    $86 = $80 * $85;
    $87 = (+Math_sin((+$4)));
    $88 = $2 * $87;
    $89 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $86;
    HEAPF32[$89>>2] = $88;
    $90 = (HEAPF32[tempDoublePtr>>2]=$86,HEAP32[tempDoublePtr>>2]|0);
    $$in = $88;$$pre$phiZ2D = $89;$97 = $90;
    break;
   }
  }
 } while(0);
 HEAP32[$agg$result>>2] = $97;
 HEAPF32[$$pre$phiZ2D>>2] = $$in;
 STACKTOP = sp;return;
}
function _ccoshl($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$z>>3];
 $3 = ((($z)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $2;
 HEAPF64[$5>>3] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _ccosh($0,$$byval_copy);
 $6 = +HEAPF64[$0>>3];
 $7 = ((($0)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $6;
 HEAPF64[$9>>3] = $8;
 STACKTOP = sp;return;
}
function _ccosl($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$z>>3];
 $3 = ((($z)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $2;
 HEAPF64[$5>>3] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _ccos($0,$$byval_copy);
 $6 = +HEAPF64[$0>>3];
 $7 = ((($0)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $6;
 HEAPF64[$9>>3] = $8;
 STACKTOP = sp;return;
}
function _cexp($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $$off = 0, $$pre$phi13Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0;
 var $41 = 0.0, $42 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$z>>3];
 $3 = ((($z)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 HEAPF64[tempDoublePtr>>3] = $4;$5 = HEAP32[tempDoublePtr>>2]|0;
 $6 = HEAP32[tempDoublePtr+4>>2]|0;
 $7 = $6 & 2147483647;
 $8 = $7 | $5;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = (+Math_exp((+$2)));
   $11 = ((($agg$result)) + 8|0);
   HEAPF64[$agg$result>>3] = $10;
   HEAPF64[$11>>3] = $4;
   $$pre$phi13Z2D = $11;$$pre$phiZ2D = $agg$result;$41 = $10;$42 = $4;
  } else {
   HEAPF64[tempDoublePtr>>3] = $2;$12 = HEAP32[tempDoublePtr>>2]|0;
   $13 = HEAP32[tempDoublePtr+4>>2]|0;
   $14 = $13 & 2147483647;
   $15 = $14 | $12;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = (+Math_cos((+$4)));
    $18 = (+Math_sin((+$4)));
    $19 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $17;
    HEAPF64[$19>>3] = $18;
    $$pre$phi13Z2D = $19;$$pre$phiZ2D = $agg$result;$41 = $17;$42 = $18;
    break;
   }
   $20 = ($7>>>0)>(2146435071);
   if (!($20)) {
    $$off = (($13) + -1082535490)|0;
    $29 = ($$off>>>0)<(1084067);
    if ($29) {
     $30 = ((($1)) + 8|0);
     HEAPF64[$1>>3] = $2;
     HEAPF64[$30>>3] = $4;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
     ___ldexp_cexp($0,$$byval_copy,0);
     $31 = +HEAPF64[$0>>3];
     $32 = ((($0)) + 8|0);
     $33 = +HEAPF64[$32>>3];
     $34 = ((($agg$result)) + 8|0);
     HEAPF64[$agg$result>>3] = $31;
     HEAPF64[$34>>3] = $33;
     $$pre$phi13Z2D = $34;$$pre$phiZ2D = $agg$result;$41 = $31;$42 = $33;
     break;
    } else {
     $35 = (+Math_exp((+$2)));
     $36 = (+Math_cos((+$4)));
     $37 = $35 * $36;
     $38 = (+Math_sin((+$4)));
     $39 = $35 * $38;
     $40 = ((($agg$result)) + 8|0);
     HEAPF64[$agg$result>>3] = $37;
     HEAPF64[$40>>3] = $39;
     $$pre$phi13Z2D = $40;$$pre$phiZ2D = $agg$result;$41 = $37;$42 = $39;
     break;
    }
   }
   $21 = ($12|0)==(0);
   $22 = ($14|0)==(2146435072);
   $or$cond = $21 & $22;
   if (!($or$cond)) {
    $23 = $4 - $4;
    $24 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $23;
    HEAPF64[$24>>3] = $23;
    $$pre$phi13Z2D = $24;$$pre$phiZ2D = $agg$result;$41 = $23;$42 = $23;
    break;
   }
   $25 = ($13|0)<(0);
   if ($25) {
    $26 = ((($agg$result)) + 8|0);
    ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;HEAP32[$agg$result+12>>2]=0|0;
    $$pre$phi13Z2D = $26;$$pre$phiZ2D = $agg$result;$41 = 0.0;$42 = 0.0;
    break;
   } else {
    $27 = $4 - $4;
    $28 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $2;
    HEAPF64[$28>>3] = $27;
    $$pre$phi13Z2D = $28;$$pre$phiZ2D = $agg$result;$41 = $2;$42 = $27;
    break;
   }
  }
 } while(0);
 HEAPF64[$$pre$phiZ2D>>3] = $41;
 HEAPF64[$$pre$phi13Z2D>>3] = $42;
 STACKTOP = sp;return;
}
function _cexpf($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $$off = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp;
 $2 = +HEAPF32[$z>>2];
 $3 = ((($z)) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = (HEAPF32[tempDoublePtr>>2]=$4,HEAP32[tempDoublePtr>>2]|0);
 $6 = $5 & 2147483647;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = (+Math_exp((+$2)));
   $9 = ((($agg$result)) + 4|0);
   HEAPF32[$agg$result>>2] = $8;
   HEAPF32[$9>>2] = $4;
   $10 = (HEAPF32[tempDoublePtr>>2]=$8,HEAP32[tempDoublePtr>>2]|0);
   $$pre$phiZ2D = $9;$43 = $10;$44 = $5;
  } else {
   $11 = (HEAPF32[tempDoublePtr>>2]=$2,HEAP32[tempDoublePtr>>2]|0);
   $12 = $11 & 2147483647;
   $13 = ($12|0)==(0);
   if ($13) {
    $14 = (+Math_cos((+$4)));
    $15 = (+Math_sin((+$4)));
    $16 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $14;
    HEAPF32[$16>>2] = $15;
    $17 = (HEAPF32[tempDoublePtr>>2]=$14,HEAP32[tempDoublePtr>>2]|0);
    $18 = (HEAPF32[tempDoublePtr>>2]=$15,HEAP32[tempDoublePtr>>2]|0);
    $$pre$phiZ2D = $16;$43 = $17;$44 = $18;
    break;
   }
   $19 = ($6>>>0)>(2139095039);
   if (!($19)) {
    $$off = (($11) + -1118925336)|0;
    $29 = ($$off>>>0)<(9342557);
    if ($29) {
     $30 = ((($1)) + 4|0);
     HEAPF32[$1>>2] = $2;
     HEAPF32[$30>>2] = $4;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
     ___ldexp_cexpf($0,$$byval_copy,0);
     $31 = HEAP32[$0>>2]|0;
     $32 = ((($0)) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ((($agg$result)) + 4|0);
     HEAP32[$agg$result>>2] = $31;
     HEAP32[$34>>2] = $33;
     $$pre$phiZ2D = $34;$43 = $31;$44 = $33;
     break;
    } else {
     $35 = (+Math_exp((+$2)));
     $36 = (+Math_cos((+$4)));
     $37 = $35 * $36;
     $38 = (+Math_sin((+$4)));
     $39 = $35 * $38;
     $40 = ((($agg$result)) + 4|0);
     HEAPF32[$agg$result>>2] = $37;
     HEAPF32[$40>>2] = $39;
     $41 = (HEAPF32[tempDoublePtr>>2]=$37,HEAP32[tempDoublePtr>>2]|0);
     $42 = (HEAPF32[tempDoublePtr>>2]=$39,HEAP32[tempDoublePtr>>2]|0);
     $$pre$phiZ2D = $40;$43 = $41;$44 = $42;
     break;
    }
   }
   $20 = ($12|0)==(2139095040);
   if (!($20)) {
    $21 = $4 - $4;
    $22 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $21;
    HEAPF32[$22>>2] = $21;
    $23 = (HEAPF32[tempDoublePtr>>2]=$21,HEAP32[tempDoublePtr>>2]|0);
    $$pre$phiZ2D = $22;$43 = $23;$44 = $23;
    break;
   }
   $24 = ($11|0)<(0);
   if ($24) {
    $25 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = 0.0;
    HEAPF32[$25>>2] = 0.0;
    $$pre$phiZ2D = $25;$43 = 0;$44 = 0;
    break;
   } else {
    $26 = $4 - $4;
    $27 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $2;
    HEAPF32[$27>>2] = $26;
    $28 = (HEAPF32[tempDoublePtr>>2]=$26,HEAP32[tempDoublePtr>>2]|0);
    $$pre$phiZ2D = $27;$43 = $11;$44 = $28;
    break;
   }
  }
 } while(0);
 HEAP32[$agg$result>>2] = $43;
 HEAP32[$$pre$phiZ2D>>2] = $44;
 STACKTOP = sp;return;
}
function _cexpl($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$z>>3];
 $3 = ((($z)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $2;
 HEAPF64[$5>>3] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _cexp($0,$$byval_copy);
 $6 = +HEAPF64[$0>>3];
 $7 = ((($0)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $6;
 HEAPF64[$9>>3] = $8;
 STACKTOP = sp;return;
}
function _cimag($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($z)) + 8|0);
 $1 = +HEAPF64[$0>>3];
 return (+$1);
}
function _cimagf($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($z)) + 4|0);
 $1 = +HEAPF32[$0>>2];
 return (+$1);
}
function _cimagl($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($z)) + 8|0);
 $1 = +HEAPF64[$0>>3];
 return (+$1);
}
function _clog($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 48|0;
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$z>>3];
 $3 = ((($z)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $2;
 HEAPF64[$5>>3] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$0+12>>2]|0;
 $6 = (+_cabs($$byval_copy));
 $7 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $2;
 HEAPF64[$7>>3] = $4;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$1+12>>2]|0;
 $8 = (+_carg($$byval_copy1));
 $9 = (+Math_log((+$6)));
 $10 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $9;
 HEAPF64[$10>>3] = $8;
 STACKTOP = sp;return;
}
function _clogf($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 24|0;
 $$byval_copy = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp;
 $2 = HEAP32[$z>>2]|0;
 $3 = ((($z)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $2;
 HEAP32[$5>>2] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 $6 = (+_cabsf($$byval_copy));
 $7 = ((($1)) + 4|0);
 HEAP32[$1>>2] = $2;
 HEAP32[$7>>2] = $4;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
 $8 = (+_cargf($$byval_copy1));
 $9 = (+Math_log((+$6)));
 $10 = ((($agg$result)) + 4|0);
 HEAPF32[$agg$result>>2] = $9;
 HEAPF32[$10>>2] = $8;
 STACKTOP = sp;return;
}
function _clogl($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$z>>3];
 $3 = ((($z)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $2;
 HEAPF64[$5>>3] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _clog($0,$$byval_copy);
 $6 = +HEAPF64[$0>>3];
 $7 = ((($0)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $6;
 HEAPF64[$9>>3] = $8;
 STACKTOP = sp;return;
}
function _conj($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $0 = 0.0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[$z>>3];
 $1 = ((($z)) + 8|0);
 $2 = +HEAPF64[$1>>3];
 $3 = -$2;
 $4 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $0;
 HEAPF64[$4>>3] = $3;
 return;
}
function _conjf($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$z>>2]|0;
 $1 = ((($z)) + 4|0);
 $2 = +HEAPF32[$1>>2];
 $3 = -$2;
 $4 = ((($agg$result)) + 4|0);
 HEAP32[$agg$result>>2] = $0;
 HEAPF32[$4>>2] = $3;
 return;
}
function _conjl($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $0 = 0.0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[$z>>3];
 $1 = ((($z)) + 8|0);
 $2 = +HEAPF64[$1>>3];
 $3 = -$2;
 $4 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $0;
 HEAPF64[$4>>3] = $3;
 return;
}
function _cpow($agg$result,$z,$c) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 $c = $c|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0;
 var $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 96|0;
 $$byval_copy = sp + 80|0;
 $0 = sp + 64|0;
 $1 = sp + 48|0;
 $2 = sp + 32|0;
 $3 = sp + 16|0;
 $4 = sp;
 $5 = +HEAPF64[$c>>3];
 $6 = ((($c)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = +HEAPF64[$z>>3];
 $9 = ((($z)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $8;
 HEAPF64[$11>>3] = $10;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _clog($0,$$byval_copy);
 $12 = +HEAPF64[$0>>3];
 $13 = ((($0)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $5 * $12;
 $16 = $7 * $14;
 $17 = $5 * $14;
 $18 = $7 * $12;
 $19 = $15 - $16;
 $20 = $18 + $17;
 $21 = ($19 != $19) | (0.0 != 0.0);
 $22 = ($20 != $20) | (0.0 != 0.0);
 $or$cond = $21 & $22;
 if ($or$cond) {
  ___muldc3(($2|0),(+$5),(+$7),(+$12),(+$14));
  $23 = +HEAPF64[$2>>3];
  $24 = ((($2)) + 8|0);
  $25 = +HEAPF64[$24>>3];
  $27 = $23;$28 = $25;
 } else {
  $27 = $19;$28 = $20;
 }
 $26 = ((($4)) + 8|0);
 HEAPF64[$4>>3] = $27;
 HEAPF64[$26>>3] = $28;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$4+12>>2]|0;
 _cexp($3,$$byval_copy1);
 $29 = +HEAPF64[$3>>3];
 $30 = ((($3)) + 8|0);
 $31 = +HEAPF64[$30>>3];
 $32 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $29;
 HEAPF64[$32>>3] = $31;
 STACKTOP = sp;return;
}
function _cpowf($agg$result,$z,$c) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 $c = $c|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0;
 var $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 48|0;
 $$byval_copy = sp + 40|0;
 $0 = sp + 32|0;
 $1 = sp + 24|0;
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $5 = +HEAPF32[$c>>2];
 $6 = ((($c)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = HEAP32[$z>>2]|0;
 $9 = ((($z)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 4|0);
 HEAP32[$1>>2] = $8;
 HEAP32[$11>>2] = $10;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 _clogf($0,$$byval_copy);
 $12 = +HEAPF32[$0>>2];
 $13 = ((($0)) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $5 * $12;
 $16 = $7 * $14;
 $17 = $5 * $14;
 $18 = $7 * $12;
 $19 = $15 - $16;
 $20 = $18 + $17;
 $21 = ($19 != $19) | (0.0 != 0.0);
 $22 = ($20 != $20) | (0.0 != 0.0);
 $or$cond = $21 & $22;
 if ($or$cond) {
  ___mulsc3(($2|0),(+$5),(+$7),(+$12),(+$14));
  $23 = +HEAPF32[$2>>2];
  $24 = ((($2)) + 4|0);
  $25 = +HEAPF32[$24>>2];
  $27 = $23;$28 = $25;
 } else {
  $27 = $19;$28 = $20;
 }
 $26 = ((($4)) + 4|0);
 HEAPF32[$4>>2] = $27;
 HEAPF32[$26>>2] = $28;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$4+4>>2]|0;
 _cexpf($3,$$byval_copy1);
 $29 = HEAP32[$3>>2]|0;
 $30 = ((($3)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($agg$result)) + 4|0);
 HEAP32[$agg$result>>2] = $29;
 HEAP32[$32>>2] = $31;
 STACKTOP = sp;return;
}
function _cpowl($agg$result,$z,$c) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 $c = $c|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 64|0;
 $$byval_copy = sp + 48|0;
 $0 = sp + 32|0;
 $1 = sp + 16|0;
 $2 = sp;
 $3 = +HEAPF64[$z>>3];
 $4 = ((($z)) + 8|0);
 $5 = +HEAPF64[$4>>3];
 $6 = +HEAPF64[$c>>3];
 $7 = ((($c)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $3;
 HEAPF64[$9>>3] = $5;
 $10 = ((($2)) + 8|0);
 HEAPF64[$2>>3] = $6;
 HEAPF64[$10>>3] = $8;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$2+12>>2]|0;
 _cpow($0,$$byval_copy,$$byval_copy1);
 $11 = +HEAPF64[$0>>3];
 $12 = ((($0)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $11;
 HEAPF64[$14>>3] = $13;
 STACKTOP = sp;return;
}
function _cproj($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$pre$phi2Z2D = 0, $$pre$phiZ2D = 0, $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[$z>>3];
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = $2 & 2147483647;
 $4 = ($1|0)==(0);
 $5 = ($3|0)==(2146435072);
 $6 = $4 & $5;
 if ($6) {
  label = 3;
 } else {
  $7 = ((($z)) + 8|0);
  $8 = +HEAPF64[$7>>3];
  HEAPF64[tempDoublePtr>>3] = $8;$9 = HEAP32[tempDoublePtr>>2]|0;
  $10 = HEAP32[tempDoublePtr+4>>2]|0;
  $11 = $10 & 2147483647;
  $12 = ($9|0)==(0);
  $13 = ($11|0)==(2146435072);
  $14 = $12 & $13;
  if ($14) {
   label = 3;
  } else {
   $17 = ((($agg$result)) + 8|0);
   HEAPF64[$agg$result>>3] = $0;
   HEAPF64[$17>>3] = $8;
   $$pre$phi2Z2D = $17;$$pre$phiZ2D = $agg$result;$18 = $0;$19 = $8;
  }
 }
 if ((label|0) == 3) {
  $15 = (+_copysign(0.0,$0));
  $16 = ((($agg$result)) + 8|0);
  HEAPF64[$agg$result>>3] = inf;
  HEAPF64[$16>>3] = $15;
  $$pre$phi2Z2D = $16;$$pre$phiZ2D = $agg$result;$18 = inf;$19 = $15;
 }
 HEAPF64[$$pre$phiZ2D>>3] = $18;
 HEAPF64[$$pre$phi2Z2D>>3] = $19;
 return;
}
function _cprojf($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$pre$phi4Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$z>>2]|0;
 $1 = $0 & 2147483647;
 $2 = ($1|0)==(2139095040);
 $3 = (HEAP32[tempDoublePtr>>2]=$0,+HEAPF32[tempDoublePtr>>2]);
 if ($2) {
  label = 3;
 } else {
  $4 = ((($z)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 2147483647;
  $7 = ($6|0)==(2139095040);
  if ($7) {
   label = 3;
  } else {
   $11 = ((($agg$result)) + 4|0);
   HEAP32[$agg$result>>2] = $0;
   HEAP32[$11>>2] = $5;
   $$pre$phi4Z2D = $11;$$pre$phiZ2D = $agg$result;$12 = $0;$13 = $5;
  }
 }
 if ((label|0) == 3) {
  $8 = (+_copysignf(0.0,$3));
  $9 = ((($agg$result)) + 4|0);
  HEAPF32[$agg$result>>2] = inf;
  HEAPF32[$9>>2] = $8;
  $10 = (HEAPF32[tempDoublePtr>>2]=$8,HEAP32[tempDoublePtr>>2]|0);
  $$pre$phi4Z2D = $9;$$pre$phiZ2D = $agg$result;$12 = 2139095040;$13 = $10;
 }
 HEAP32[$$pre$phiZ2D>>2] = $12;
 HEAP32[$$pre$phi4Z2D>>2] = $13;
 return;
}
function _cprojl($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$z>>3];
 $3 = ((($z)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $2;
 HEAPF64[$5>>3] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _cproj($0,$$byval_copy);
 $6 = +HEAPF64[$0>>3];
 $7 = ((($0)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $6;
 HEAPF64[$9>>3] = $8;
 STACKTOP = sp;return;
}
function _creal($z) {
 $z = $z|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[$z>>3];
 return (+$0);
}
function _crealf($z) {
 $z = $z|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$z>>2];
 return (+$0);
}
function _creall($z) {
 $z = $z|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[$z>>3];
 return (+$0);
}
function _csin($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = ((($z)) + 8|0);
 $3 = +HEAPF64[$2>>3];
 $4 = -$3;
 $5 = +HEAPF64[$z>>3];
 $6 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $4;
 HEAPF64[$6>>3] = $5;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _csinh($0,$$byval_copy);
 $7 = +HEAPF64[$0>>3];
 $8 = ((($0)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = -$7;
 $11 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $9;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _csinf($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp;
 $2 = ((($z)) + 4|0);
 $3 = +HEAPF32[$2>>2];
 $4 = -$3;
 $5 = HEAP32[$z>>2]|0;
 $6 = ((($1)) + 4|0);
 HEAPF32[$1>>2] = $4;
 HEAP32[$6>>2] = $5;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 _csinhf($0,$$byval_copy);
 $7 = +HEAPF32[$0>>2];
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = -$7;
 $11 = ((($agg$result)) + 4|0);
 HEAP32[$agg$result>>2] = $9;
 HEAPF32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function _csinh($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $$pre$phi35Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0;
 var $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$z>>3];
 $3 = ((($z)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 HEAPF64[tempDoublePtr>>3] = $2;$5 = HEAP32[tempDoublePtr>>2]|0;
 $6 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $4;$7 = HEAP32[tempDoublePtr>>2]|0;
 $8 = HEAP32[tempDoublePtr+4>>2]|0;
 $9 = $6 & 2147483647;
 $10 = $8 & 2147483647;
 $11 = ($9>>>0)<(2146435072);
 $12 = ($10>>>0)<(2146435072);
 $or$cond = $11 & $12;
 do {
  if ($or$cond) {
   $13 = $10 | $7;
   $14 = ($13|0)==(0);
   if ($14) {
    $15 = (+_sinh($2));
    $16 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $15;
    HEAPF64[$16>>3] = $4;
    $$pre$phi35Z2D = $16;$$pre$phiZ2D = $agg$result;$88 = $15;$89 = $4;
    break;
   }
   $17 = ($9>>>0)<(1077280768);
   if ($17) {
    $18 = (+_sinh($2));
    $19 = (+Math_cos((+$4)));
    $20 = $18 * $19;
    $21 = (+_cosh($2));
    $22 = (+Math_sin((+$4)));
    $23 = $21 * $22;
    $24 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $20;
    HEAPF64[$24>>3] = $23;
    $$pre$phi35Z2D = $24;$$pre$phiZ2D = $agg$result;$88 = $20;$89 = $23;
    break;
   }
   $25 = ($9>>>0)<(1082535490);
   if ($25) {
    $26 = (+Math_abs((+$2)));
    $27 = (+Math_exp((+$26)));
    $28 = $27 * 0.5;
    $29 = (+_copysign($28,$2));
    $30 = (+Math_cos((+$4)));
    $31 = $29 * $30;
    $32 = (+Math_sin((+$4)));
    $33 = $28 * $32;
    $34 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $31;
    HEAPF64[$34>>3] = $33;
    $$pre$phi35Z2D = $34;$$pre$phiZ2D = $agg$result;$88 = $31;$89 = $33;
    break;
   }
   $35 = ($9>>>0)<(1083620266);
   if ($35) {
    $36 = (+Math_abs((+$2)));
    $37 = ((($1)) + 8|0);
    HEAPF64[$1>>3] = $36;
    HEAPF64[$37>>3] = $4;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
    ___ldexp_cexp($0,$$byval_copy,-1);
    $38 = +HEAPF64[$0>>3];
    $39 = ((($0)) + 8|0);
    $40 = +HEAPF64[$39>>3];
    HEAPF64[$z>>3] = $38;
    HEAPF64[$3>>3] = $40;
    $41 = (+_copysign(1.0,$2));
    $42 = $38 * $41;
    $43 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $42;
    HEAPF64[$43>>3] = $40;
    $$pre$phi35Z2D = $43;$$pre$phiZ2D = $agg$result;$88 = $42;$89 = $40;
    break;
   } else {
    $44 = $2 * 8.9884656743115795E+307;
    $45 = (+Math_cos((+$4)));
    $46 = $44 * $45;
    $47 = $44 * $44;
    $48 = (+Math_sin((+$4)));
    $49 = $47 * $48;
    $50 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $46;
    HEAPF64[$50>>3] = $49;
    $$pre$phi35Z2D = $50;$$pre$phiZ2D = $agg$result;$88 = $46;$89 = $49;
    break;
   }
  } else {
   $51 = $9 | $5;
   $52 = ($51|0)==(0);
   $53 = ($10>>>0)>(2146435071);
   $or$cond3 = $52 & $53;
   if ($or$cond3) {
    $54 = $4 - $4;
    $55 = $2 * $54;
    $56 = (+_copysign(0.0,$55));
    $57 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $56;
    HEAPF64[$57>>3] = $54;
    $$pre$phi35Z2D = $57;$$pre$phiZ2D = $agg$result;$88 = $56;$89 = $54;
    break;
   }
   $58 = $10 | $7;
   $59 = ($58|0)==(0);
   $60 = ($9>>>0)>(2146435071);
   $or$cond5 = $60 & $59;
   if ($or$cond5) {
    $61 = $6 & 1048575;
    $62 = $61 | $5;
    $63 = ($62|0)==(0);
    if ($63) {
     $64 = ((($agg$result)) + 8|0);
     HEAPF64[$agg$result>>3] = $2;
     HEAPF64[$64>>3] = $4;
     $$pre$phi35Z2D = $64;$$pre$phiZ2D = $agg$result;$88 = $2;$89 = $4;
     break;
    } else {
     $65 = (+_copysign(0.0,$4));
     $66 = ((($agg$result)) + 8|0);
     HEAPF64[$agg$result>>3] = $2;
     HEAPF64[$66>>3] = $65;
     $$pre$phi35Z2D = $66;$$pre$phiZ2D = $agg$result;$88 = $2;$89 = $65;
     break;
    }
   }
   $or$cond7 = $11 & $53;
   if ($or$cond7) {
    $67 = $4 - $4;
    $68 = $2 * $67;
    $69 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $67;
    HEAPF64[$69>>3] = $68;
    $$pre$phi35Z2D = $69;$$pre$phiZ2D = $agg$result;$88 = $67;$89 = $68;
    break;
   }
   if ($60) {
    $70 = $6 & 1048575;
    $71 = $70 | $5;
    $72 = ($71|0)==(0);
    if ($72) {
     if ($53) {
      $73 = $2 * $2;
      $74 = $4 - $4;
      $75 = $2 * $74;
      $76 = ((($agg$result)) + 8|0);
      HEAPF64[$agg$result>>3] = $73;
      HEAPF64[$76>>3] = $75;
      $$pre$phi35Z2D = $76;$$pre$phiZ2D = $agg$result;$88 = $73;$89 = $75;
      break;
     } else {
      $77 = (+Math_cos((+$4)));
      $78 = $2 * $77;
      $79 = (+Math_sin((+$4)));
      $80 = $79 * inf;
      $81 = ((($agg$result)) + 8|0);
      HEAPF64[$agg$result>>3] = $78;
      HEAPF64[$81>>3] = $80;
      $$pre$phi35Z2D = $81;$$pre$phiZ2D = $agg$result;$88 = $78;$89 = $80;
      break;
     }
    }
   }
   $82 = $2 * $2;
   $83 = $4 - $4;
   $84 = $82 * $83;
   $85 = $2 + $2;
   $86 = $85 * $83;
   $87 = ((($agg$result)) + 8|0);
   HEAPF64[$agg$result>>3] = $84;
   HEAPF64[$87>>3] = $86;
   $$pre$phi35Z2D = $87;$$pre$phiZ2D = $agg$result;$88 = $84;$89 = $86;
  }
 } while(0);
 HEAPF64[$$pre$phiZ2D>>3] = $88;
 HEAPF64[$$pre$phi35Z2D>>3] = $89;
 STACKTOP = sp;return;
}
function _csinhf($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0;
 var $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond36 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp;
 $2 = +HEAPF32[$z>>2];
 $3 = ((($z)) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = (HEAPF32[tempDoublePtr>>2]=$2,HEAP32[tempDoublePtr>>2]|0);
 $6 = (HEAPF32[tempDoublePtr>>2]=$4,HEAP32[tempDoublePtr>>2]|0);
 $7 = $5 & 2147483647;
 $8 = $6 & 2147483647;
 $9 = ($7>>>0)<(2139095040);
 $10 = ($8>>>0)<(2139095040);
 $or$cond = $9 & $10;
 do {
  if ($or$cond) {
   $11 = ($8|0)==(0);
   if ($11) {
    $12 = (+_sinhf($2));
    $13 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $12;
    HEAPF32[$13>>2] = $4;
    $14 = (HEAPF32[tempDoublePtr>>2]=$12,HEAP32[tempDoublePtr>>2]|0);
    $$pre$phiZ2D = $13;$101 = $14;$102 = $6;
    break;
   }
   $15 = ($7>>>0)<(1091567616);
   if ($15) {
    $16 = (+_sinhf($2));
    $17 = (+Math_cos((+$4)));
    $18 = $16 * $17;
    $19 = (+_coshf($2));
    $20 = (+Math_sin((+$4)));
    $21 = $19 * $20;
    $22 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $18;
    HEAPF32[$22>>2] = $21;
    $23 = (HEAPF32[tempDoublePtr>>2]=$18,HEAP32[tempDoublePtr>>2]|0);
    $24 = (HEAPF32[tempDoublePtr>>2]=$21,HEAP32[tempDoublePtr>>2]|0);
    $$pre$phiZ2D = $22;$101 = $23;$102 = $24;
    break;
   }
   $25 = ($7>>>0)<(1118925336);
   if ($25) {
    $26 = (+Math_abs((+$2)));
    $27 = (+Math_exp((+$26)));
    $28 = $27 * 0.5;
    $29 = (+_copysignf($28,$2));
    $30 = (+Math_cos((+$4)));
    $31 = $29 * $30;
    $32 = (+Math_sin((+$4)));
    $33 = $28 * $32;
    $34 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $31;
    HEAPF32[$34>>2] = $33;
    $35 = (HEAPF32[tempDoublePtr>>2]=$31,HEAP32[tempDoublePtr>>2]|0);
    $36 = (HEAPF32[tempDoublePtr>>2]=$33,HEAP32[tempDoublePtr>>2]|0);
    $$pre$phiZ2D = $34;$101 = $35;$102 = $36;
    break;
   }
   $37 = ($7>>>0)<(1128313319);
   if ($37) {
    $38 = (+Math_abs((+$2)));
    $39 = ((($1)) + 4|0);
    HEAPF32[$1>>2] = $38;
    HEAPF32[$39>>2] = $4;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
    ___ldexp_cexpf($0,$$byval_copy,-1);
    $40 = HEAP32[$0>>2]|0;
    $41 = ((($0)) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    HEAP32[$z>>2] = $40;
    HEAP32[$3>>2] = $42;
    $43 = (HEAP32[tempDoublePtr>>2]=$40,+HEAPF32[tempDoublePtr>>2]);
    $44 = (+_copysignf(1.0,$2));
    $45 = $43 * $44;
    $46 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $45;
    HEAP32[$46>>2] = $42;
    $47 = (HEAPF32[tempDoublePtr>>2]=$45,HEAP32[tempDoublePtr>>2]|0);
    $$pre$phiZ2D = $46;$101 = $47;$102 = $42;
    break;
   } else {
    $48 = $2 * 1.7014118346046923E+38;
    $49 = (+Math_cos((+$4)));
    $50 = $48 * $49;
    $51 = $48 * $48;
    $52 = (+Math_sin((+$4)));
    $53 = $51 * $52;
    $54 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $50;
    HEAPF32[$54>>2] = $53;
    $55 = (HEAPF32[tempDoublePtr>>2]=$50,HEAP32[tempDoublePtr>>2]|0);
    $56 = (HEAPF32[tempDoublePtr>>2]=$53,HEAP32[tempDoublePtr>>2]|0);
    $$pre$phiZ2D = $54;$101 = $55;$102 = $56;
    break;
   }
  } else {
   $57 = ($7|0)==(0);
   $58 = ($8>>>0)>(2139095039);
   $or$cond3 = $57 & $58;
   if ($or$cond3) {
    $59 = $4 - $4;
    $60 = $2 * $59;
    $61 = (+_copysignf(0.0,$60));
    $62 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $61;
    HEAPF32[$62>>2] = $59;
    $63 = (HEAPF32[tempDoublePtr>>2]=$61,HEAP32[tempDoublePtr>>2]|0);
    $64 = (HEAPF32[tempDoublePtr>>2]=$59,HEAP32[tempDoublePtr>>2]|0);
    $$pre$phiZ2D = $62;$101 = $63;$102 = $64;
    break;
   }
   $65 = ($8|0)==(0);
   $66 = ($7>>>0)>(2139095039);
   $or$cond5 = $66 & $65;
   if ($or$cond5) {
    $67 = $5 & 8388607;
    $68 = ($67|0)==(0);
    if ($68) {
     $69 = ((($agg$result)) + 4|0);
     HEAPF32[$agg$result>>2] = $2;
     HEAPF32[$69>>2] = $4;
     $$pre$phiZ2D = $69;$101 = $5;$102 = $6;
     break;
    } else {
     $70 = (+_copysignf(0.0,$4));
     $71 = ((($agg$result)) + 4|0);
     HEAPF32[$agg$result>>2] = $2;
     HEAPF32[$71>>2] = $70;
     $72 = (HEAPF32[tempDoublePtr>>2]=$70,HEAP32[tempDoublePtr>>2]|0);
     $$pre$phiZ2D = $71;$101 = $5;$102 = $72;
     break;
    }
   }
   $or$cond7 = $9 & $58;
   if ($or$cond7) {
    $73 = $4 - $4;
    $74 = $2 * $73;
    $75 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $73;
    HEAPF32[$75>>2] = $74;
    $76 = (HEAPF32[tempDoublePtr>>2]=$73,HEAP32[tempDoublePtr>>2]|0);
    $77 = (HEAPF32[tempDoublePtr>>2]=$74,HEAP32[tempDoublePtr>>2]|0);
    $$pre$phiZ2D = $75;$101 = $76;$102 = $77;
    break;
   }
   $78 = $5 & 8388607;
   $79 = ($78|0)==(0);
   $or$cond36 = $66 & $79;
   if (!($or$cond36)) {
    $93 = $2 * $2;
    $94 = $4 - $4;
    $95 = $93 * $94;
    $96 = $2 + $2;
    $97 = $96 * $94;
    $98 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $95;
    HEAPF32[$98>>2] = $97;
    $99 = (HEAPF32[tempDoublePtr>>2]=$95,HEAP32[tempDoublePtr>>2]|0);
    $100 = (HEAPF32[tempDoublePtr>>2]=$97,HEAP32[tempDoublePtr>>2]|0);
    $$pre$phiZ2D = $98;$101 = $99;$102 = $100;
    break;
   }
   if ($58) {
    $80 = $2 * $2;
    $81 = $4 - $4;
    $82 = $2 * $81;
    $83 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $80;
    HEAPF32[$83>>2] = $82;
    $84 = (HEAPF32[tempDoublePtr>>2]=$80,HEAP32[tempDoublePtr>>2]|0);
    $85 = (HEAPF32[tempDoublePtr>>2]=$82,HEAP32[tempDoublePtr>>2]|0);
    $$pre$phiZ2D = $83;$101 = $84;$102 = $85;
    break;
   } else {
    $86 = (+Math_cos((+$4)));
    $87 = $2 * $86;
    $88 = (+Math_sin((+$4)));
    $89 = $88 * inf;
    $90 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $87;
    HEAPF32[$90>>2] = $89;
    $91 = (HEAPF32[tempDoublePtr>>2]=$87,HEAP32[tempDoublePtr>>2]|0);
    $92 = (HEAPF32[tempDoublePtr>>2]=$89,HEAP32[tempDoublePtr>>2]|0);
    $$pre$phiZ2D = $90;$101 = $91;$102 = $92;
    break;
   }
  }
 } while(0);
 HEAP32[$agg$result>>2] = $101;
 HEAP32[$$pre$phiZ2D>>2] = $102;
 STACKTOP = sp;return;
}
function _csinhl($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$z>>3];
 $3 = ((($z)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $2;
 HEAPF64[$5>>3] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _csinh($0,$$byval_copy);
 $6 = +HEAPF64[$0>>3];
 $7 = ((($0)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $6;
 HEAPF64[$9>>3] = $8;
 STACKTOP = sp;return;
}
function _csinl($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$z>>3];
 $3 = ((($z)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $2;
 HEAPF64[$5>>3] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _csin($0,$$byval_copy);
 $6 = +HEAPF64[$0>>3];
 $7 = ((($0)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $6;
 HEAPF64[$9>>3] = $8;
 STACKTOP = sp;return;
}
function _csqrt($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$pre$phi14Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $8 = 0, $9 = 0, $a$0 = 0.0, $b$0 = 0.0, $or$cond = 0, $result$sroa$0$0 = 0.0, $result$sroa$0$1 = 0.0, $result$sroa$5$0 = 0.0, $result$sroa$5$1 = 0.0;
 var $scale$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = +HEAPF64[$z>>3];
 $2 = ((($z)) + 8|0);
 $3 = +HEAPF64[$2>>3];
 $4 = $1 == 0.0;
 $5 = $3 == 0.0;
 $6 = $4 & $5;
 do {
  if ($6) {
   $7 = ((($agg$result)) + 8|0);
   HEAPF64[$agg$result>>3] = 0.0;
   HEAPF64[$7>>3] = $3;
   $$pre$phi14Z2D = $7;$$pre$phiZ2D = $agg$result;$69 = 0.0;$70 = $3;
  } else {
   HEAPF64[tempDoublePtr>>3] = $3;$8 = HEAP32[tempDoublePtr>>2]|0;
   $9 = HEAP32[tempDoublePtr+4>>2]|0;
   $10 = $9 & 2147483647;
   $11 = ($8|0)==(0);
   $12 = ($10|0)==(2146435072);
   $13 = $11 & $12;
   if ($13) {
    $14 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = inf;
    HEAPF64[$14>>3] = $3;
    $$pre$phi14Z2D = $14;$$pre$phiZ2D = $agg$result;$69 = inf;$70 = $3;
    break;
   }
   HEAPF64[tempDoublePtr>>3] = $1;$15 = HEAP32[tempDoublePtr>>2]|0;
   $16 = HEAP32[tempDoublePtr+4>>2]|0;
   $17 = $16 & 2147483647;
   $18 = ($17>>>0)>(2146435072);
   $19 = ($15>>>0)>(0);
   $20 = ($17|0)==(2146435072);
   $21 = $20 & $19;
   $22 = $18 | $21;
   if ($22) {
    $23 = $3 - $3;
    $24 = $23 / $23;
    $25 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $1;
    HEAPF64[$25>>3] = $24;
    $$pre$phi14Z2D = $25;$$pre$phiZ2D = $agg$result;$69 = $1;$70 = $24;
    break;
   }
   $26 = ($15|0)==(0);
   $27 = ($17|0)==(2146435072);
   $28 = $26 & $27;
   if ($28) {
    $29 = ($16|0)<(0);
    $30 = $3 - $3;
    if ($29) {
     $31 = (+Math_abs((+$30)));
     $32 = (+_copysign($1,$3));
     $33 = ((($agg$result)) + 8|0);
     HEAPF64[$agg$result>>3] = $31;
     HEAPF64[$33>>3] = $32;
     $$pre$phi14Z2D = $33;$$pre$phiZ2D = $agg$result;$69 = $31;$70 = $32;
     break;
    } else {
     $34 = (+_copysign($30,$3));
     $35 = ((($agg$result)) + 8|0);
     HEAPF64[$agg$result>>3] = $1;
     HEAPF64[$35>>3] = $34;
     $$pre$phi14Z2D = $35;$$pre$phiZ2D = $agg$result;$69 = $1;$70 = $34;
     break;
    }
   }
   $36 = (+Math_abs((+$1)));
   $37 = !($36 >= 7.4462887744497663E+307);
   if ($37) {
    $38 = (+Math_abs((+$3)));
    $39 = !($38 >= 7.4462887744497663E+307);
    if ($39) {
     $a$0 = $1;$b$0 = $3;$scale$0 = 0;
    } else {
     label = 13;
    }
   } else {
    label = 13;
   }
   if ((label|0) == 13) {
    $40 = $1 * 0.25;
    $41 = $3 * 0.25;
    $a$0 = $40;$b$0 = $41;$scale$0 = 1;
   }
   $42 = !($a$0 >= 0.0);
   $43 = (+_hypot($a$0,$b$0));
   if ($42) {
    $49 = $43 - $a$0;
    $50 = $49 * 0.5;
    $51 = (+Math_sqrt((+$50)));
    $52 = (+Math_abs((+$b$0)));
    $53 = $51 * 2.0;
    $54 = $52 / $53;
    $55 = (+_copysign($51,$b$0));
    $result$sroa$0$0 = $54;$result$sroa$5$0 = $55;
   } else {
    $44 = $a$0 + $43;
    $45 = $44 * 0.5;
    $46 = (+Math_sqrt((+$45)));
    $47 = $46 * 2.0;
    $48 = $b$0 / $47;
    $result$sroa$0$0 = $46;$result$sroa$5$0 = $48;
   }
   $56 = ($scale$0|0)==(0);
   if ($56) {
    $result$sroa$0$1 = $result$sroa$0$0;$result$sroa$5$1 = $result$sroa$5$0;
   } else {
    $57 = $result$sroa$0$0 * 2.0;
    $58 = $result$sroa$5$0 * 0.0;
    $59 = $result$sroa$0$0 * 0.0;
    $60 = $result$sroa$5$0 * 2.0;
    $61 = $57 - $58;
    $62 = $59 + $60;
    $63 = ($61 != $61) | (0.0 != 0.0);
    $64 = ($62 != $62) | (0.0 != 0.0);
    $or$cond = $63 & $64;
    if ($or$cond) {
     ___muldc3(($0|0),(+$result$sroa$0$0),(+$result$sroa$5$0),2.0,0.0);
     $65 = +HEAPF64[$0>>3];
     $66 = ((($0)) + 8|0);
     $67 = +HEAPF64[$66>>3];
     $result$sroa$0$1 = $65;$result$sroa$5$1 = $67;
    } else {
     $result$sroa$0$1 = $61;$result$sroa$5$1 = $62;
    }
   }
   $68 = ((($agg$result)) + 8|0);
   HEAPF64[$agg$result>>3] = $result$sroa$0$1;
   HEAPF64[$68>>3] = $result$sroa$5$1;
   $$pre$phi14Z2D = $68;$$pre$phiZ2D = $agg$result;$69 = $result$sroa$0$1;$70 = $result$sroa$5$1;
  }
 } while(0);
 HEAPF64[$$pre$phiZ2D>>3] = $69;
 HEAPF64[$$pre$phi14Z2D>>3] = $70;
 STACKTOP = sp;return;
}
function _csqrtf($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$pre$phiZ2D = 0, $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$z>>2];
 $1 = ((($z)) + 4|0);
 $2 = +HEAPF32[$1>>2];
 $3 = $0 == 0.0;
 $4 = $2 == 0.0;
 $5 = $3 & $4;
 do {
  if ($5) {
   $6 = ((($agg$result)) + 4|0);
   HEAPF32[$agg$result>>2] = 0.0;
   HEAPF32[$6>>2] = $2;
   $7 = (HEAPF32[tempDoublePtr>>2]=$2,HEAP32[tempDoublePtr>>2]|0);
   $$pre$phiZ2D = $6;$62 = 0;$63 = $7;
  } else {
   $8 = (HEAPF32[tempDoublePtr>>2]=$2,HEAP32[tempDoublePtr>>2]|0);
   $9 = $8 & 2147483647;
   $10 = ($9|0)==(2139095040);
   if ($10) {
    $11 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = inf;
    HEAPF32[$11>>2] = $2;
    $$pre$phiZ2D = $11;$62 = 2139095040;$63 = $8;
    break;
   }
   $12 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
   $13 = $12 & 2147483647;
   $14 = ($13>>>0)>(2139095040);
   if ($14) {
    $15 = $2 - $2;
    $16 = $15 / $15;
    $17 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $0;
    HEAPF32[$17>>2] = $16;
    $18 = (HEAPF32[tempDoublePtr>>2]=$16,HEAP32[tempDoublePtr>>2]|0);
    $$pre$phiZ2D = $17;$62 = $12;$63 = $18;
    break;
   }
   $19 = ($13|0)==(2139095040);
   if ($19) {
    $20 = ($12|0)<(0);
    $21 = $2 - $2;
    if ($20) {
     $22 = (+Math_abs((+$21)));
     $23 = (+_copysignf($0,$2));
     $24 = ((($agg$result)) + 4|0);
     HEAPF32[$agg$result>>2] = $22;
     HEAPF32[$24>>2] = $23;
     $25 = (HEAPF32[tempDoublePtr>>2]=$22,HEAP32[tempDoublePtr>>2]|0);
     $26 = (HEAPF32[tempDoublePtr>>2]=$23,HEAP32[tempDoublePtr>>2]|0);
     $$pre$phiZ2D = $24;$62 = $25;$63 = $26;
     break;
    } else {
     $27 = (+_copysignf($21,$2));
     $28 = ((($agg$result)) + 4|0);
     HEAPF32[$agg$result>>2] = $0;
     HEAPF32[$28>>2] = $27;
     $29 = (HEAPF32[tempDoublePtr>>2]=$27,HEAP32[tempDoublePtr>>2]|0);
     $$pre$phiZ2D = $28;$62 = $12;$63 = $29;
     break;
    }
   } else {
    $30 = !($0 >= 0.0);
    if ($30) {
     $44 = -$0;
     $45 = $44;
     $46 = $0;
     $47 = $2;
     $48 = (+_hypot($46,$47));
     $49 = $45 + $48;
     $50 = $49 * 0.5;
     $51 = (+Math_sqrt((+$50)));
     $52 = (+Math_abs((+$2)));
     $53 = $52;
     $54 = $51 * 2.0;
     $55 = $53 / $54;
     $56 = $55;
     $57 = $51;
     $58 = (+_copysignf($57,$2));
     $59 = ((($agg$result)) + 4|0);
     HEAPF32[$agg$result>>2] = $56;
     HEAPF32[$59>>2] = $58;
     $60 = (HEAPF32[tempDoublePtr>>2]=$56,HEAP32[tempDoublePtr>>2]|0);
     $61 = (HEAPF32[tempDoublePtr>>2]=$58,HEAP32[tempDoublePtr>>2]|0);
     $$pre$phiZ2D = $59;$62 = $60;$63 = $61;
     break;
    } else {
     $31 = $0;
     $32 = $2;
     $33 = (+_hypot($31,$32));
     $34 = $31 + $33;
     $35 = $34 * 0.5;
     $36 = (+Math_sqrt((+$35)));
     $37 = $36;
     $38 = $36 * 2.0;
     $39 = $32 / $38;
     $40 = $39;
     $41 = ((($agg$result)) + 4|0);
     HEAPF32[$agg$result>>2] = $37;
     HEAPF32[$41>>2] = $40;
     $42 = (HEAPF32[tempDoublePtr>>2]=$37,HEAP32[tempDoublePtr>>2]|0);
     $43 = (HEAPF32[tempDoublePtr>>2]=$40,HEAP32[tempDoublePtr>>2]|0);
     $$pre$phiZ2D = $41;$62 = $42;$63 = $43;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$agg$result>>2] = $62;
 HEAP32[$$pre$phiZ2D>>2] = $63;
 return;
}
function _csqrtl($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$z>>3];
 $3 = ((($z)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $2;
 HEAPF64[$5>>3] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _csqrt($0,$$byval_copy);
 $6 = +HEAPF64[$0>>3];
 $7 = ((($0)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $6;
 HEAPF64[$9>>3] = $8;
 STACKTOP = sp;return;
}
function _ctan($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = ((($z)) + 8|0);
 $3 = +HEAPF64[$2>>3];
 $4 = -$3;
 $5 = +HEAPF64[$z>>3];
 $6 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $4;
 HEAPF64[$6>>3] = $5;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _ctanh($0,$$byval_copy);
 $7 = +HEAPF64[$0>>3];
 $8 = ((($0)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = -$7;
 $11 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $9;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _ctanf($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp;
 $2 = ((($z)) + 4|0);
 $3 = +HEAPF32[$2>>2];
 $4 = -$3;
 $5 = HEAP32[$z>>2]|0;
 $6 = ((($1)) + 4|0);
 HEAPF32[$1>>2] = $4;
 HEAP32[$6>>2] = $5;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 _ctanhf($0,$$byval_copy);
 $7 = +HEAPF32[$0>>2];
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = -$7;
 $11 = ((($agg$result)) + 4|0);
 HEAP32[$agg$result>>2] = $9;
 HEAPF32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function _ctanh($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$pre$phi10Z2D = 0, $$pre$phiZ2D = 0, $0 = 0.0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[$z>>3];
 $1 = ((($z)) + 8|0);
 $2 = +HEAPF64[$1>>3];
 HEAPF64[tempDoublePtr>>3] = $0;$3 = HEAP32[tempDoublePtr>>2]|0;
 $4 = HEAP32[tempDoublePtr+4>>2]|0;
 $5 = $4 & 2147483647;
 $6 = ($5>>>0)>(2146435071);
 do {
  if ($6) {
   $7 = $4 & 1048575;
   $8 = $7 | $3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $2 == 0.0;
    $11 = $0 * $2;
    $12 = $10 ? $2 : $11;
    $13 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $0;
    HEAPF64[$13>>3] = $12;
    $$pre$phi10Z2D = $13;$$pre$phiZ2D = $agg$result;$69 = $0;$70 = $12;
    break;
   }
   $14 = (($4) + -1073741824)|0;
   HEAPF64[tempDoublePtr>>3] = $2;$15 = HEAP32[tempDoublePtr>>2]|0;
   $16 = HEAP32[tempDoublePtr+4>>2]|0;
   $17 = $16 & 2147483647;
   $18 = ($15|0)==(0);
   $19 = ($17|0)==(2146435072);
   $20 = $18 & $19;
   if ($20) {
    $24 = $2;
   } else {
    $21 = (+Math_sin((+$2)));
    $22 = (+Math_cos((+$2)));
    $23 = $21 * $22;
    $24 = $23;
   }
   $25 = (+_copysign(0.0,$24));
   $26 = ((($agg$result)) + 8|0);
   $27 = $agg$result;
   $28 = $27;
   HEAP32[$28>>2] = $3;
   $29 = (($27) + 4)|0;
   $30 = $29;
   HEAP32[$30>>2] = $14;
   HEAPF64[$26>>3] = $25;
   HEAP32[tempDoublePtr>>2] = $3;HEAP32[tempDoublePtr+4>>2] = $14;$31 = +HEAPF64[tempDoublePtr>>3];
   $$pre$phi10Z2D = $26;$$pre$phiZ2D = $agg$result;$69 = $31;$70 = $25;
  } else {
   HEAPF64[tempDoublePtr>>3] = $2;$32 = HEAP32[tempDoublePtr>>2]|0;
   $33 = HEAP32[tempDoublePtr+4>>2]|0;
   $34 = $33 & 2146435072;
   $35 = ($34>>>0)<(2146435072);
   $36 = (0)<(0);
   $37 = ($34|0)==(2146435072);
   $38 = $37 & $36;
   $39 = $35 | $38;
   if (!($39)) {
    $40 = $2 - $2;
    $41 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $40;
    HEAPF64[$41>>3] = $40;
    $$pre$phi10Z2D = $41;$$pre$phiZ2D = $agg$result;$69 = $40;$70 = $40;
    break;
   }
   $42 = ($5>>>0)>(1077280767);
   if ($42) {
    $43 = (+Math_abs((+$0)));
    $44 = -$43;
    $45 = (+Math_exp((+$44)));
    $46 = (+_copysign(1.0,$0));
    $47 = (+Math_sin((+$2)));
    $48 = $47 * 4.0;
    $49 = (+Math_cos((+$2)));
    $50 = $48 * $49;
    $51 = $45 * $50;
    $52 = $45 * $51;
    $53 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $46;
    HEAPF64[$53>>3] = $52;
    $$pre$phi10Z2D = $53;$$pre$phiZ2D = $agg$result;$69 = $46;$70 = $52;
    break;
   } else {
    $54 = (+Math_tan((+$2)));
    $55 = $54 * $54;
    $56 = $55 + 1.0;
    $57 = (+_sinh($0));
    $58 = $57 * $57;
    $59 = $58 + 1.0;
    $60 = (+Math_sqrt((+$59)));
    $61 = $57 * $56;
    $62 = $57 * $61;
    $63 = $62 + 1.0;
    $64 = $56 * $60;
    $65 = $57 * $64;
    $66 = $65 / $63;
    $67 = $54 / $63;
    $68 = ((($agg$result)) + 8|0);
    HEAPF64[$agg$result>>3] = $66;
    HEAPF64[$68>>3] = $67;
    $$pre$phi10Z2D = $68;$$pre$phiZ2D = $agg$result;$69 = $66;$70 = $67;
    break;
   }
  }
 } while(0);
 HEAPF64[$$pre$phiZ2D>>3] = $69;
 HEAPF64[$$pre$phi10Z2D>>3] = $70;
 return;
}
function _ctanhf($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$pre$phiZ2D = 0, $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$z>>2];
 $1 = ((($z)) + 4|0);
 $2 = +HEAPF32[$1>>2];
 $3 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $4 = $3 & 2147483647;
 $5 = ($4>>>0)>(2139095039);
 do {
  if ($5) {
   $6 = $3 & 8388607;
   $7 = ($6|0)==(0);
   if (!($7)) {
    $8 = $2 == 0.0;
    $9 = $0 * $2;
    $10 = $8 ? $2 : $9;
    $11 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $0;
    HEAPF32[$11>>2] = $10;
    $12 = (HEAPF32[tempDoublePtr>>2]=$10,HEAP32[tempDoublePtr>>2]|0);
    $$pre$phiZ2D = $11;$61 = $3;$62 = $12;
    break;
   }
   $13 = (($3) + -1073741824)|0;
   $14 = (HEAPF32[tempDoublePtr>>2]=$2,HEAP32[tempDoublePtr>>2]|0);
   $15 = $14 & 2147483647;
   $16 = ($15|0)==(2139095040);
   if ($16) {
    $20 = $2;
   } else {
    $17 = (+Math_sin((+$2)));
    $18 = (+Math_cos((+$2)));
    $19 = $17 * $18;
    $20 = $19;
   }
   $21 = (+_copysignf(0.0,$20));
   $22 = ((($agg$result)) + 4|0);
   HEAP32[$agg$result>>2] = $13;
   HEAPF32[$22>>2] = $21;
   $23 = (HEAPF32[tempDoublePtr>>2]=$21,HEAP32[tempDoublePtr>>2]|0);
   $$pre$phiZ2D = $22;$61 = $13;$62 = $23;
  } else {
   $24 = (HEAPF32[tempDoublePtr>>2]=$2,HEAP32[tempDoublePtr>>2]|0);
   $25 = $24 & 2139095040;
   $26 = ($25>>>0)<(2139095040);
   if (!($26)) {
    $27 = $2 - $2;
    $28 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $27;
    HEAPF32[$28>>2] = $27;
    $29 = (HEAPF32[tempDoublePtr>>2]=$27,HEAP32[tempDoublePtr>>2]|0);
    $$pre$phiZ2D = $28;$61 = $29;$62 = $29;
    break;
   }
   $30 = ($4>>>0)>(1093664767);
   if ($30) {
    $31 = (+Math_abs((+$0)));
    $32 = -$31;
    $33 = (+Math_exp((+$32)));
    $34 = (+_copysignf(1.0,$0));
    $35 = (+Math_sin((+$2)));
    $36 = $35 * 4.0;
    $37 = (+Math_cos((+$2)));
    $38 = $36 * $37;
    $39 = $33 * $38;
    $40 = $33 * $39;
    $41 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $34;
    HEAPF32[$41>>2] = $40;
    $42 = (HEAPF32[tempDoublePtr>>2]=$34,HEAP32[tempDoublePtr>>2]|0);
    $43 = (HEAPF32[tempDoublePtr>>2]=$40,HEAP32[tempDoublePtr>>2]|0);
    $$pre$phiZ2D = $41;$61 = $42;$62 = $43;
    break;
   } else {
    $44 = (+Math_tan((+$2)));
    $45 = $44 * $44;
    $46 = $45 + 1.0;
    $47 = (+_sinhf($0));
    $48 = $47 * $47;
    $49 = $48 + 1.0;
    $50 = (+Math_sqrt((+$49)));
    $51 = $47 * $46;
    $52 = $47 * $51;
    $53 = $52 + 1.0;
    $54 = $46 * $50;
    $55 = $47 * $54;
    $56 = $55 / $53;
    $57 = $44 / $53;
    $58 = ((($agg$result)) + 4|0);
    HEAPF32[$agg$result>>2] = $56;
    HEAPF32[$58>>2] = $57;
    $59 = (HEAPF32[tempDoublePtr>>2]=$56,HEAP32[tempDoublePtr>>2]|0);
    $60 = (HEAPF32[tempDoublePtr>>2]=$57,HEAP32[tempDoublePtr>>2]|0);
    $$pre$phiZ2D = $58;$61 = $59;$62 = $60;
    break;
   }
  }
 } while(0);
 HEAP32[$agg$result>>2] = $61;
 HEAP32[$$pre$phiZ2D>>2] = $62;
 return;
}
function _ctanhl($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$z>>3];
 $3 = ((($z)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $2;
 HEAPF64[$5>>3] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _ctanh($0,$$byval_copy);
 $6 = +HEAPF64[$0>>3];
 $7 = ((($0)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $6;
 HEAPF64[$9>>3] = $8;
 STACKTOP = sp;return;
}
function _ctanl($agg$result,$z) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$z>>3];
 $3 = ((($z)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $2;
 HEAPF64[$5>>3] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 _ctan($0,$$byval_copy);
 $6 = +HEAPF64[$0>>3];
 $7 = ((($0)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $6;
 HEAPF64[$9>>3] = $8;
 STACKTOP = sp;return;
}
function ___ldexp_cexp($agg$result,$z,$expt) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 $expt = $expt|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[$z>>3];
 $1 = ((($z)) + 8|0);
 $2 = +HEAPF64[$1>>3];
 $3 = $0 + -1246.9717778273416;
 $4 = (+Math_exp((+$3)));
 HEAPF64[tempDoublePtr>>3] = $4;$5 = HEAP32[tempDoublePtr>>2]|0;
 $6 = HEAP32[tempDoublePtr+4>>2]|0;
 $7 = (_bitshift64Lshr(($5|0),($6|0),52)|0);
 $8 = tempRet0;
 $9 = $6 & 1048575;
 $10 = $9 | 2145386496;
 HEAP32[tempDoublePtr>>2] = $5;HEAP32[tempDoublePtr+4>>2] = $10;$11 = +HEAPF64[tempDoublePtr>>3];
 $12 = (($expt) + -247)|0;
 $13 = (($12) + ($7))|0;
 $14 = (($13|0) / 2)&-1;
 $15 = $14 << 20;
 $16 = (($15) + 1072693248)|0;
 HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = (($13) - ($14))|0;
 $19 = $18 << 20;
 $20 = (($19) + 1072693248)|0;
 HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $20;$21 = +HEAPF64[tempDoublePtr>>3];
 $22 = (+Math_cos((+$2)));
 $23 = $22 * $11;
 $24 = $17 * $23;
 $25 = $24 * $21;
 $26 = (+Math_sin((+$2)));
 $27 = $26 * $11;
 $28 = $17 * $27;
 $29 = $28 * $21;
 $30 = ((($agg$result)) + 8|0);
 HEAPF64[$agg$result>>3] = $25;
 HEAPF64[$30>>3] = $29;
 return;
}
function ___ldexp_cexpf($agg$result,$z,$expt) {
 $agg$result = $agg$result|0;
 $z = $z|0;
 $expt = $expt|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$z>>2];
 $1 = ((($z)) + 4|0);
 $2 = +HEAPF32[$1>>2];
 $3 = $0 + -162.88958740234375;
 $4 = (+Math_exp((+$3)));
 $5 = (HEAPF32[tempDoublePtr>>2]=$4,HEAP32[tempDoublePtr>>2]|0);
 $6 = $5 >>> 23;
 $7 = $5 & 8388607;
 $8 = $7 | 2130706432;
 $9 = (HEAP32[tempDoublePtr>>2]=$8,+HEAPF32[tempDoublePtr>>2]);
 $10 = (($expt) + -19)|0;
 $11 = (($10) + ($6))|0;
 $12 = (($11|0) / 2)&-1;
 $13 = $12 << 23;
 $14 = (($13) + 1065353216)|0;
 $15 = (HEAP32[tempDoublePtr>>2]=$14,+HEAPF32[tempDoublePtr>>2]);
 $16 = (($11) - ($12))|0;
 $17 = $16 << 23;
 $18 = (($17) + 1065353216)|0;
 $19 = (HEAP32[tempDoublePtr>>2]=$18,+HEAPF32[tempDoublePtr>>2]);
 $20 = (+Math_cos((+$2)));
 $21 = $20 * $9;
 $22 = $15 * $21;
 $23 = $22 * $19;
 $24 = (+Math_sin((+$2)));
 $25 = $24 * $9;
 $26 = $15 * $25;
 $27 = $26 * $19;
 $28 = ((($agg$result)) + 4|0);
 HEAPF32[$agg$result>>2] = $23;
 HEAPF32[$28>>2] = $27;
 return;
}
function _crypt($key,$salt) {
 $key = $key|0;
 $salt = $salt|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___crypt_r($key,$salt,158463)|0);
 return ($0|0);
}
function ___crypt_blowfish($key,$setting,$output) {
 $key = $key|0;
 $setting = $setting|0;
 $output = $output|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ae = 0, $ai = 0, $buf = 0, $or$cond = 0, $or$cond2 = 0, $ye = 0, $yi = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 288|0;
 $ae = sp + 216|0;
 $ai = sp + 144|0;
 $ye = sp + 72|0;
 $yi = sp;
 $0 = (_BF_crypt($key,$setting,$output,16)|0);
 dest=$buf; src=158591; stop=dest+30|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = ((($setting)) + 2|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ((($buf)) + 2|0);
  HEAP8[$4>>0] = $3;
 }
 $5 = ((($buf)) + 30|0);
 dest=$5; stop=dest+62|0; do { HEAP8[dest>>0]=85|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $6 = ((($buf)) + 92|0);
 HEAP8[$6>>0] = 0;
 $7 = (_BF_crypt(158621,$buf,$5,1)|0);
 $8 = ($7|0)==($5|0);
 if ($8) {
  $9 = (_memcmp($5,$buf,29)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   $11 = ((($buf)) + 59|0);
   $12 = ((($buf)) + 2|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $15 = $14 & 1;
   $16 = (158631 + (($15*34)|0)|0);
   $17 = (_memcmp($11,$16,34)|0);
   $18 = ($17|0)==(0);
   $22 = $18;
  } else {
   $22 = 0;
  }
 } else {
  $22 = 0;
 }
 _BF_set_key(158699,$ae,$ai,2);
 _BF_set_key(158699,$ye,$yi,4);
 $19 = HEAP32[$ai>>2]|0;
 $20 = $19 ^ 65536;
 HEAP32[$ai>>2] = $20;
 $21 = ($19|0)==(-610444868);
 $or$cond2 = $22 & $21;
 if ($or$cond2) {
  $23 = ((($ye)) + 68|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(859059456);
  if ($25) {
   $26 = (_memcmp($ae,$ye,72)|0);
   $27 = ($26|0)==(0);
   if ($27) {
    $28 = (_memcmp($ai,$yi,72)|0);
    $29 = ($28|0)==(0);
    $30 = $29;
   } else {
    $30 = 0;
   }
  } else {
   $30 = 0;
  }
 } else {
  $30 = 0;
 }
 $or$cond = $1 & $30;
 $$ = $or$cond ? $0 : 159149;
 STACKTOP = sp;return ($$|0);
}
function ___des_setkey($key,$ekey) {
 $key = $key|0;
 $ekey = $ekey|0;
 var $$lcssa = 0, $$lcssa25 = 0, $$lcssa26 = 0, $$lcssa27 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond14 = 0, $exitcond15 = 0, $i$07 = 0, $i$11 = 0, $ibit$08 = 0, $ibit$12 = 0, $k0$010 = 0, $k1$09 = 0, $kl$03 = 0, $kr$04 = 0, $round$05 = 0, $shifts$06 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($key)) + 3|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = ((($key)) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = $6 | $2;
 $8 = ((($key)) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 16;
 $12 = $7 | $11;
 $13 = HEAP8[$key>>0]|0;
 $14 = $13&255;
 $15 = $14 << 24;
 $16 = $12 | $15;
 $17 = ((($key)) + 7|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = ((($key)) + 6|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $22 << 8;
 $24 = $23 | $19;
 $25 = ((($key)) + 5|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $27 << 16;
 $29 = $24 | $28;
 $30 = ((($key)) + 4|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $32 << 24;
 $34 = $29 | $33;
 $i$07 = 0;$ibit$08 = 28;$k0$010 = 0;$k1$09 = 0;
 while(1) {
  $35 = $i$07 << 1;
  $36 = $16 >>> $ibit$08;
  $37 = $36 & 15;
  $38 = ((7512 + ($i$07<<6)|0) + ($37<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $34 >>> $ibit$08;
  $41 = $40 & 15;
  $42 = (($i$07) + 4)|0;
  $43 = ((7512 + ($42<<6)|0) + ($41<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $39 | $k0$010;
  $46 = $45 | $44;
  $47 = ((8024 + ($35<<6)|0) + ($37<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($ibit$08) + -4)|0;
  $50 = $16 >>> $49;
  $51 = $50 & 15;
  $52 = $35 | 1;
  $53 = ((8024 + ($52<<6)|0) + ($51<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $34 >>> $49;
  $56 = $55 & 15;
  $57 = (($i$07) + 8)|0;
  $58 = ((8024 + ($57<<6)|0) + ($56<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $48 | $k1$09;
  $61 = $60 | $54;
  $62 = $61 | $59;
  $63 = (($i$07) + 1)|0;
  $64 = (($ibit$08) + -8)|0;
  $exitcond15 = ($63|0)==(4);
  if ($exitcond15) {
   $$lcssa26 = $46;$$lcssa27 = $62;
   break;
  } else {
   $i$07 = $63;$ibit$08 = $64;$k0$010 = $46;$k1$09 = $62;
  }
 }
 $round$05 = 0;$shifts$06 = 0;
 while(1) {
  $65 = (158711 + ($round$05)|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $68 = (($67) + ($shifts$06))|0;
  $69 = $$lcssa26 << $68;
  $70 = (28 - ($68))|0;
  $71 = $$lcssa26 >>> $70;
  $72 = $71 | $69;
  $73 = $$lcssa27 << $68;
  $74 = $$lcssa27 >>> $70;
  $75 = $74 | $73;
  $i$11 = 0;$ibit$12 = 25;$kl$03 = 0;$kr$04 = 0;
  while(1) {
   $76 = $72 >>> $ibit$12;
   $77 = $76 & 7;
   $78 = ((8792 + ($i$11<<5)|0) + ($77<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $79 | $kl$03;
   $81 = $75 >>> $ibit$12;
   $82 = $81 & 7;
   $83 = ((8920 + ($i$11<<5)|0) + ($82<<2)|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $84 | $kr$04;
   $86 = (($ibit$12) + -4)|0;
   $87 = $72 >>> $86;
   $88 = $87 & 15;
   $89 = ((9048 + ($i$11<<6)|0) + ($88<<2)|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $80 | $90;
   $92 = $75 >>> $86;
   $93 = $92 & 15;
   $94 = ((9304 + ($i$11<<6)|0) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $85 | $95;
   $97 = (($ibit$12) + -7)|0;
   $98 = (($i$11) + 1)|0;
   $exitcond = ($98|0)==(4);
   if ($exitcond) {
    $$lcssa = $91;$$lcssa25 = $96;
    break;
   } else {
    $i$11 = $98;$ibit$12 = $97;$kl$03 = $91;$kr$04 = $96;
   }
  }
  $99 = (($ekey) + ($round$05<<2)|0);
  HEAP32[$99>>2] = $$lcssa;
  $100 = (((($ekey)) + 64|0) + ($round$05<<2)|0);
  HEAP32[$100>>2] = $$lcssa25;
  $101 = (($round$05) + 1)|0;
  $exitcond14 = ($101|0)==(16);
  if ($exitcond14) {
   break;
  } else {
   $round$05 = $101;$shifts$06 = $68;
  }
 }
 return;
}
function ___do_des($l_in,$r_in,$l_out,$r_out,$count,$saltbits,$ekey) {
 $l_in = $l_in|0;
 $r_in = $r_in|0;
 $l_out = $l_out|0;
 $r_out = $r_out|0;
 $count = $count|0;
 $saltbits = $saltbits|0;
 $ekey = $ekey|0;
 var $$in = 0, $$lcssa = 0, $$lcssa36 = 0, $$lcssa37 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond23 = 0, $i$016 = 0, $i1$03 = 0, $ibit$017 = 0, $ibit2$04 = 0, $kl$09 = 0, $kr$010 = 0, $l$018 = 0, $l$1$lcssa = 0, $l$1$ph = 0, $l$113 = 0;
 var $l$211 = 0, $l$211$phi = 0, $lo$05 = 0, $r$015 = 0, $r$1$lcssa = 0, $r$1$ph = 0, $r$112 = 0, $r$27 = 0, $r$27$lcssa = 0, $ro$06 = 0, $round$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $r_in | $l_in;
 $1 = ($0|0)==(0);
 if ($1) {
  $l$1$ph = 0;$r$1$ph = 0;
 } else {
  $i$016 = 0;$ibit$017 = 28;$l$018 = 0;$r$015 = 0;
  while(1) {
   $4 = $l_in >>> $ibit$017;
   $5 = $4 & 15;
   $6 = ((9560 + ($i$016<<6)|0) + ($5<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $r_in >>> $ibit$017;
   $9 = $8 & 15;
   $10 = (($i$016) + 8)|0;
   $11 = ((9560 + ($10<<6)|0) + ($9<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $7 | $l$018;
   $14 = $13 | $12;
   $15 = ((10584 + ($i$016<<6)|0) + ($5<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((10584 + ($10<<6)|0) + ($9<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $16 | $r$015;
   $20 = $19 | $18;
   $21 = (($i$016) + 1)|0;
   $22 = (($ibit$017) + -4)|0;
   $exitcond23 = ($21|0)==(8);
   if ($exitcond23) {
    $l$1$ph = $14;$r$1$ph = $20;
    break;
   } else {
    $i$016 = $21;$ibit$017 = $22;$l$018 = $14;$r$015 = $20;
   }
  }
 }
 $2 = ($count|0)==(0);
 if ($2) {
  $l$1$lcssa = $l$1$ph;$r$1$lcssa = $r$1$ph;
 } else {
  $3 = ((($ekey)) + 64|0);
  $$in = $count;$l$113 = $l$1$ph;$r$112 = $r$1$ph;
  while(1) {
   $kl$09 = $ekey;$kr$010 = $3;$l$211 = $l$113;$r$27 = $r$112;$round$08 = 16;
   while(1) {
    $25 = (($round$08) + -1)|0;
    $26 = $r$27 << 23;
    $27 = $26 & 8388608;
    $28 = $r$27 >>> 9;
    $29 = $28 & 8126464;
    $30 = $27 | $29;
    $31 = $r$27 >>> 11;
    $32 = $31 & 258048;
    $33 = $30 | $32;
    $34 = $r$27 >>> 13;
    $35 = $34 & 4032;
    $36 = $33 | $35;
    $37 = $r$27 >>> 15;
    $38 = $37 & 63;
    $39 = $36 | $38;
    $40 = $r$27 << 7;
    $41 = $40 & 16515072;
    $42 = $r$27 << 5;
    $43 = $42 & 258048;
    $44 = $r$27 << 3;
    $45 = $44 & 4032;
    $46 = $r$27 << 1;
    $47 = $46 & 62;
    $48 = $r$27 >>> 31;
    $49 = $43 | $48;
    $50 = $49 | $41;
    $51 = $50 | $45;
    $52 = $51 | $47;
    $53 = $39 ^ $52;
    $54 = $53 & $saltbits;
    $55 = ((($kl$09)) + 4|0);
    $56 = HEAP32[$kl$09>>2]|0;
    $57 = $54 ^ $39;
    $58 = $57 ^ $56;
    $59 = ((($kr$010)) + 4|0);
    $60 = HEAP32[$kr$010>>2]|0;
    $61 = $54 ^ $52;
    $62 = $61 ^ $60;
    $63 = $58 >>> 18;
    $64 = (11608 + ($63<<2)|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = $58 >>> 12;
    $67 = $66 & 63;
    $68 = (11864 + ($67<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $69 | $65;
    $71 = $58 >>> 6;
    $72 = $71 & 63;
    $73 = (12120 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $70 | $74;
    $76 = $58 & 63;
    $77 = (12376 + ($76<<2)|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = $75 | $78;
    $80 = $62 >>> 18;
    $81 = (12632 + ($80<<2)|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $79 | $82;
    $84 = $62 >>> 12;
    $85 = $84 & 63;
    $86 = (12888 + ($85<<2)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = $83 | $87;
    $89 = $62 >>> 6;
    $90 = $89 & 63;
    $91 = (13144 + ($90<<2)|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = $88 | $92;
    $94 = $62 & 63;
    $95 = (13400 + ($94<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $93 | $96;
    $98 = $97 ^ $l$211;
    $99 = ($25|0)==(0);
    if ($99) {
     $$lcssa37 = $98;$r$27$lcssa = $r$27;
     break;
    } else {
     $l$211$phi = $r$27;$kl$09 = $55;$kr$010 = $59;$r$27 = $98;$round$08 = $25;$l$211 = $l$211$phi;
    }
   }
   $23 = (($$in) + -1)|0;
   $24 = ($23|0)==(0);
   if ($24) {
    $l$1$lcssa = $$lcssa37;$r$1$lcssa = $r$27$lcssa;
    break;
   } else {
    $$in = $23;$l$113 = $$lcssa37;$r$112 = $r$27$lcssa;
   }
  }
 }
 $i1$03 = 0;$ibit2$04 = 28;$lo$05 = 0;$ro$06 = 0;
 while(1) {
  $100 = $l$1$lcssa >>> $ibit2$04;
  $101 = $100 & 15;
  $102 = ((13656 + ($i1$03<<6)|0) + ($101<<2)|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = $r$1$lcssa >>> $ibit2$04;
  $105 = $104 & 15;
  $106 = (($i1$03) + 4)|0;
  $107 = ((13656 + ($106<<6)|0) + ($105<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $103 | $ro$06;
  $110 = $109 | $108;
  $111 = (($ibit2$04) + -4)|0;
  $112 = $l$1$lcssa >>> $111;
  $113 = $112 & 15;
  $114 = ((13656 + ($i1$03<<6)|0) + ($113<<2)|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $r$1$lcssa >>> $111;
  $117 = $116 & 15;
  $118 = ((13656 + ($106<<6)|0) + ($117<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = $115 | $lo$05;
  $121 = $120 | $119;
  $122 = (($i1$03) + 1)|0;
  $123 = (($ibit2$04) + -8)|0;
  $exitcond = ($122|0)==(4);
  if ($exitcond) {
   $$lcssa = $110;$$lcssa36 = $121;
   break;
  } else {
   $i1$03 = $122;$ibit2$04 = $123;$lo$05 = $121;$ro$06 = $110;
  }
 }
 HEAP32[$l_out>>2] = $$lcssa36;
 HEAP32[$r_out>>2] = $$lcssa;
 return;
}
function ___crypt_des($key,$setting,$output) {
 $key = $key|0;
 $setting = $setting|0;
 $output = $output|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $test_buf = 0, $test_hash$0 = 0, $test_setting$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $test_buf = sp;
 $0 = HEAP8[$setting>>0]|0;
 $1 = ($0<<24>>24)==(95);
 $test_setting$0 = $1 ? 158727 : 158737;
 $2 = (__crypt_extended_r_uut($key,$setting,$output)|0);
 $3 = (__crypt_extended_r_uut(158740,$test_setting$0,$test_buf)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  label = 3;
 } else {
  $test_hash$0 = $1 ? 158761 : 158782;
  $5 = (_strcmp($3,$test_hash$0)|0);
  $6 = ($5|0)==(0);
  $7 = ($2|0)!=(0|0);
  $or$cond = $7 & $6;
  if ($or$cond) {
   $$0 = $2;
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $8 = HEAP8[$setting>>0]|0;
  $9 = ($8<<24>>24)==(42);
  $10 = $9 ? 158796 : 159149;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___crypt_md5($key,$setting,$output) {
 $key = $key|0;
 $setting = $setting|0;
 $output = $output|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, $testbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $testbuf = sp;
 $0 = (_md5crypt($key,$setting,$output)|0);
 $1 = (_md5crypt(158798,158816,$testbuf)|0);
 $2 = ($0|0)!=(0|0);
 $3 = ($1|0)==($testbuf|0);
 $or$cond = $2 & $3;
 if ($or$cond) {
  $4 = (_memcmp($testbuf,158829,35)|0);
  $5 = ($4|0)==(0);
  $$ = $5 ? $0 : 159149;
  $$0 = $$;
 } else {
  $$0 = 159149;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___crypt_r($key,$salt,$data) {
 $key = $key|0;
 $salt = $salt|0;
 $data = $data|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$salt>>0]|0;
 $1 = ($0<<24>>24)==(36);
 L1: do {
  if ($1) {
   $2 = ((($salt)) + 1|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    label = 13;
   } else {
    $5 = ((($salt)) + 2|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     label = 13;
    } else {
     $8 = ($3<<24>>24)==(49);
     $9 = ($6<<24>>24)==(36);
     $or$cond = $8 & $9;
     if ($or$cond) {
      $10 = (___crypt_md5($key,$salt,$data)|0);
      $$0 = $10;
      break;
     }
     switch ($3<<24>>24) {
     case 50:  {
      $11 = ((($salt)) + 3|0);
      $12 = HEAP8[$11>>0]|0;
      $13 = ($12<<24>>24)==(36);
      if (!($13)) {
       label = 13;
       break L1;
      }
      $14 = (___crypt_blowfish($key,$salt,$data)|0);
      $$0 = $14;
      break L1;
      break;
     }
     case 53:  {
      if (!($9)) {
       label = 13;
       break L1;
      }
      $15 = (___crypt_sha256($key,$salt,$data)|0);
      $$0 = $15;
      break L1;
      break;
     }
     case 54:  {
      if (!($9)) {
       label = 13;
       break L1;
      }
      $16 = (___crypt_sha512($key,$salt,$data)|0);
      $$0 = $16;
      break L1;
      break;
     }
     default: {
      label = 13;
      break L1;
     }
     }
    }
   }
  } else {
   label = 13;
  }
 } while(0);
 if ((label|0) == 13) {
  $17 = (___crypt_des($key,$salt,$data)|0);
  $$0 = $17;
 }
 return ($$0|0);
}
function ___crypt_sha256($key,$setting,$output) {
 $key = $key|0;
 $setting = $setting|0;
 $output = $output|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, $testbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $testbuf = sp;
 $0 = (_sha256crypt($key,$setting,$output)|0);
 $1 = (_sha256crypt(158864,158882,$testbuf)|0);
 $2 = ($0|0)!=(0|0);
 $3 = ($1|0)==($testbuf|0);
 $or$cond = $2 & $3;
 if ($or$cond) {
  $4 = (_memcmp($testbuf,158912,73)|0);
  $5 = ($4|0)==(0);
  $$ = $5 ? $0 : 159149;
  $$0 = $$;
 } else {
  $$0 = 159149;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___crypt_sha512($key,$setting,$output) {
 $key = $key|0;
 $setting = $setting|0;
 $output = $output|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, $testbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $testbuf = sp;
 $0 = (_sha512crypt($key,$setting,$output)|0);
 $1 = (_sha512crypt(158985,159003,$testbuf)|0);
 $2 = ($0|0)!=(0|0);
 $3 = ($1|0)==($testbuf|0);
 $or$cond = $2 & $3;
 if ($or$cond) {
  $4 = (_memcmp($testbuf,159033,116)|0);
  $5 = ($4|0)==(0);
  $$ = $5 ? $0 : 159149;
  $$0 = $$;
 } else {
  $$0 = 159149;
 }
 STACKTOP = sp;return ($$0|0);
}
function _setkey($key) {
 $key = $key|0;
 var $$03 = 0, $$11 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bkey = 0, $exitcond = 0, $i$04 = 0, $j$02 = 0, $scevgep = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bkey = sp;
 $$03 = $key;$i$04 = 0;
 while(1) {
  $0 = (($bkey) + ($i$04)|0);
  HEAP8[$0>>0] = 0;
  $$11 = $$03;$6 = 0;$j$02 = 7;
  while(1) {
   $1 = HEAP8[$$11>>0]|0;
   $2 = $1&255;
   $3 = $2 & 1;
   $4 = $3 << $j$02;
   $5 = $6 & 255;
   $7 = $4 | $5;
   $8 = $7&255;
   HEAP8[$0>>0] = $8;
   $9 = (($j$02) + -1)|0;
   $10 = ((($$11)) + 1|0);
   $11 = ($j$02|0)>(0);
   if ($11) {
    $$11 = $10;$6 = $7;$j$02 = $9;
   } else {
    break;
   }
  }
  $scevgep = ((($$03)) + 8|0);
  $12 = (($i$04) + 1)|0;
  $exitcond = ($12|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $$03 = $scevgep;$i$04 = $12;
  }
 }
 ___des_setkey($bkey,14168);
 STACKTOP = sp;return;
}
function _encrypt($block,$edflag) {
 $block = $block|0;
 $edflag = $edflag|0;
 var $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $decrypt_key = 0, $exitcond = 0, $i$16 = 0, $j$07 = 0, $j$07$1 = 0, $j$12 = 0, $j$12$1 = 0, $key$0 = 0, $p$18 = 0, $p$18$1 = 0, $p$33 = 0, $p$33$1 = 0, $scevgep13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $decrypt_key = sp + 8|0;
 $b = sp;
 HEAP32[$b>>2] = 0;
 $5 = 0;$j$07 = 31;$p$18 = $block;
 while(1) {
  $0 = HEAP8[$p$18>>0]|0;
  $1 = $0&255;
  $2 = $1 & 1;
  $3 = $2 << $j$07;
  $4 = $3 | $5;
  HEAP32[$b>>2] = $4;
  $6 = (($j$07) + -1)|0;
  $7 = ((($p$18)) + 1|0);
  $8 = ($j$07|0)>(0);
  if ($8) {
   $5 = $4;$j$07 = $6;$p$18 = $7;
  } else {
   $$lcssa19 = $4;
   break;
  }
 }
 $scevgep13 = ((($block)) + 32|0);
 $9 = ((($b)) + 4|0);
 HEAP32[$9>>2] = 0;
 $37 = 0;$j$07$1 = 31;$p$18$1 = $scevgep13;
 while(1) {
  $32 = HEAP8[$p$18$1>>0]|0;
  $33 = $32&255;
  $34 = $33 & 1;
  $35 = $34 << $j$07$1;
  $36 = $35 | $37;
  HEAP32[$9>>2] = $36;
  $38 = (($j$07$1) + -1)|0;
  $39 = ((($p$18$1)) + 1|0);
  $40 = ($j$07$1|0)>(0);
  if ($40) {
   $37 = $36;$j$07$1 = $38;$p$18$1 = $39;
  } else {
   $$lcssa = $36;
   break;
  }
 }
 $41 = ($edflag|0)==(0);
 if ($41) {
  $key$0 = 14168;
 } else {
  $i$16 = 0;
  while(1) {
   $10 = (15 - ($i$16))|0;
   $11 = (14168 + ($10<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($decrypt_key) + ($i$16<<2)|0);
   HEAP32[$13>>2] = $12;
   $14 = (14232 + ($10<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (((($decrypt_key)) + 64|0) + ($i$16<<2)|0);
   HEAP32[$16>>2] = $15;
   $17 = (($i$16) + 1)|0;
   $exitcond = ($17|0)==(16);
   if ($exitcond) {
    $key$0 = $decrypt_key;
    break;
   } else {
    $i$16 = $17;
   }
  }
 }
 ___do_des($$lcssa19,$$lcssa,$b,$9,1,0,$key$0);
 $j$12 = 31;$p$33 = $block;
 while(1) {
  $18 = HEAP32[$b>>2]|0;
  $19 = $18 >>> $j$12;
  $20 = $19 & 1;
  $21 = $20&255;
  $22 = ((($p$33)) + 1|0);
  HEAP8[$p$33>>0] = $21;
  $23 = (($j$12) + -1)|0;
  $24 = ($j$12|0)>(0);
  if ($24) {
   $j$12 = $23;$p$33 = $22;
  } else {
   $j$12$1 = 31;$p$33$1 = $scevgep13;
   break;
  }
 }
 while(1) {
  $25 = HEAP32[$9>>2]|0;
  $26 = $25 >>> $j$12$1;
  $27 = $26 & 1;
  $28 = $27&255;
  $29 = ((($p$33$1)) + 1|0);
  HEAP8[$p$33$1>>0] = $28;
  $30 = (($j$12$1) + -1)|0;
  $31 = ($j$12$1|0)>(0);
  if ($31) {
   $j$12$1 = $30;$p$33$1 = $29;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _isalnum($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $isdigit = 0, $isdigittmp = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isalpha($c)|0);
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $not$ = ($0|0)!=(0);
 $1 = $isdigit | $not$;
 $2 = $1&1;
 return ($2|0);
}
function _isalpha($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _isascii($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c>>>0)<(128);
 $1 = $0&1;
 return ($1|0);
}
function _isblank($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = ($c|0)==(9);
 $2 = $0 | $1;
 $3 = $2&1;
 return ($3|0);
}
function _iscntrl($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c>>>0)<(32);
 $1 = ($c|0)==(127);
 $2 = $0 | $1;
 $3 = $2&1;
 return ($3|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 return ($2|0);
}
function _isgraph($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -33)|0;
 $1 = ($0>>>0)<(94);
 $2 = $1&1;
 return ($2|0);
}
function _islower($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -97)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _isprint($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -32)|0;
 $1 = ($0>>>0)<(95);
 $2 = $1&1;
 return ($2|0);
}
function _ispunct($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isgraph($c)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $5 = 0;
 } else {
  $2 = (_isalnum($c)|0);
  $3 = ($2|0)==(0);
  $5 = $3;
 }
 $4 = $5&1;
 return ($4|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _iswalnum($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswdigit($wc)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_iswalpha($wc)|0);
  $3 = ($2|0)!=(0);
  $5 = $3;
 } else {
  $5 = 1;
 }
 $4 = $5&1;
 return ($4|0);
}
function _iswalpha($wc) {
 $wc = $wc|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($wc>>>0)<(131072);
 if ($0) {
  $1 = $wc >>> 8;
  $2 = (159151 + ($1)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = $4 << 5;
  $6 = $wc >>> 3;
  $7 = $6 & 31;
  $8 = $5 | $7;
  $9 = (159151 + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $wc & 7;
  $13 = $11 >>> $12;
  $14 = $13 & 1;
  $$0 = $14;
 } else {
  $15 = ($wc>>>0)<(196606);
  $$ = $15&1;
  $$0 = $$;
 }
 return ($$0|0);
}
function _iswblank($wc) {
 $wc = $wc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isblank($wc)|0);
 return ($0|0);
}
function _iswcntrl($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($wc>>>0)<(32);
 $1 = (($wc) + -127)|0;
 $2 = ($1>>>0)<(33);
 $or$cond = $0 | $2;
 $3 = $wc & -2;
 $4 = ($3|0)==(8232);
 $or$cond3 = $4 | $or$cond;
 if ($or$cond3) {
  $8 = 1;
 } else {
  $5 = (($wc) + -65529)|0;
  $6 = ($5>>>0)<(3);
  $8 = $6;
 }
 $7 = $8&1;
 return ($7|0);
}
function _iswctype($wc,$type) {
 $wc = $wc|0;
 $type = $type|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch ($type|0) {
  case 1:  {
   $0 = (_iswalnum($wc)|0);
   $$0 = $0;
   break;
  }
  case 2:  {
   $1 = (_iswalpha($wc)|0);
   $$0 = $1;
   break;
  }
  case 3:  {
   $2 = (_iswblank($wc)|0);
   $$0 = $2;
   break;
  }
  case 4:  {
   $3 = (_iswcntrl($wc)|0);
   $$0 = $3;
   break;
  }
  case 5:  {
   $4 = (_iswdigit($wc)|0);
   $$0 = $4;
   break;
  }
  case 6:  {
   $5 = (_iswgraph($wc)|0);
   $$0 = $5;
   break;
  }
  case 7:  {
   $6 = (_iswlower($wc)|0);
   $$0 = $6;
   break;
  }
  case 8:  {
   $7 = (_iswprint($wc)|0);
   $$0 = $7;
   break;
  }
  case 9:  {
   $8 = (_iswpunct($wc)|0);
   $$0 = $8;
   break;
  }
  case 10:  {
   $9 = (_iswspace($wc)|0);
   $$0 = $9;
   break;
  }
  case 11:  {
   $10 = (_iswupper($wc)|0);
   $$0 = $10;
   break;
  }
  case 12:  {
   $11 = (_iswxdigit($wc)|0);
   $$0 = $11;
   break;
  }
  default: {
   $$0 = 0;
  }
  }
 } while(0);
 return ($$0|0);
}
function _wctype($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i$01 = 0, $p$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$s>>0]|0;
 $2 = 97;$i$01 = 1;$p$02 = 162127;
 while(1) {
  $1 = ($0<<24>>24)==($2<<24>>24);
  if ($1) {
   $3 = (_strcmp($s,$p$02)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$0 = $i$01;
    break;
   }
  }
  $5 = (($i$01) + 1)|0;
  $6 = ((($p$02)) + 6|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   $$0 = 0;
   break;
  } else {
   $2 = $7;$i$01 = $5;$p$02 = $6;
  }
 }
 return ($$0|0);
}
function _iswdigit($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($wc) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 return ($2|0);
}
function _iswgraph($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswspace($wc)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_iswprint($wc)|0);
  $3 = ($2|0)!=(0);
  $5 = $3;
 } else {
  $5 = 0;
 }
 $4 = $5&1;
 return ($4|0);
}
function _iswlower($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_towupper($wc)|0);
 $1 = ($0|0)!=($wc|0);
 $2 = ($wc|0)==(223);
 $3 = $2 | $1;
 $4 = $3&1;
 return ($4|0);
}
function _iswprint($wc) {
 $wc = $wc|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($wc>>>0)<(255);
 if ($0) {
  $1 = (($wc) + 1)|0;
  $2 = $1 & 127;
  $3 = ($2>>>0)>(32);
  $4 = $3&1;
  $$0 = $4;
 } else {
  $5 = ($wc>>>0)<(8232);
  $6 = (($wc) + -8234)|0;
  $7 = ($6>>>0)<(47062);
  $or$cond = $5 | $7;
  $8 = (($wc) + -57344)|0;
  $9 = ($8>>>0)<(8185);
  $or$cond3 = $9 | $or$cond;
  if ($or$cond3) {
   $$0 = 1;
  } else {
   $10 = (($wc) + -65532)|0;
   $11 = ($10>>>0)>(1048579);
   $12 = $wc & 65534;
   $13 = ($12|0)==(65534);
   $or$cond5 = $11 | $13;
   $14 = $or$cond5&1;
   $$ = $14 ^ 1;
   return ($$|0);
  }
 }
 return ($$0|0);
}
function _iswpunct($wc) {
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($wc>>>0)<(131072);
 if ($0) {
  $1 = $wc >>> 8;
  $2 = (162200 + ($1)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = $4 << 5;
  $6 = $wc >>> 3;
  $7 = $6 & 31;
  $8 = $5 | $7;
  $9 = (162200 + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $wc & 7;
  $13 = $11 >>> $12;
  $14 = $13 & 1;
  $$0 = $14;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function _iswspace($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($wc|0)==(0);
 if ($0) {
  $4 = 0;
 } else {
  $1 = (_wcschr(14296,$wc)|0);
  $2 = ($1|0)!=(0|0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _iswupper($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_towlower($wc)|0);
 $1 = ($0|0)!=($wc|0);
 $2 = $1&1;
 return ($2|0);
}
function _iswxdigit($wc) {
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($wc) + -48)|0;
 $1 = ($0>>>0)<(10);
 if ($1) {
  $6 = 1;
 } else {
  $2 = $wc | 32;
  $3 = (($2) + -97)|0;
  $4 = ($3>>>0)<(6);
  $6 = $4;
 }
 $5 = $6&1;
 return ($5|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
 } else {
  $0 = $c | 32;
  $1 = (($0) + -97)|0;
  $2 = ($1>>>0)<(6);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _toascii($c) {
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 127;
 return ($0|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function _toupper($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_islower($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c & 95;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function _towupper($wc) {
 $wc = $wc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___towcase($wc,0)|0);
 return ($0|0);
}
function _towlower($wc) {
 $wc = $wc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___towcase($wc,1)|0);
 return ($0|0);
}
function _wcswidth($wcs,$n) {
 $wcs = $wcs|0;
 $n = $n|0;
 var $$023 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$05 = 0, $k$1 = 0, $l$0$lcssa = 0, $l$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $k$1 = 0;$l$0$lcssa = 0;
  } else {
   $$023 = $wcs;$$in = $n;$k$05 = 0;$l$04 = 0;
   while(1) {
    $1 = (($$in) + -1)|0;
    $2 = HEAP32[$$023>>2]|0;
    $3 = ($2|0)==(0);
    if ($3) {
     $k$1 = $k$05;$l$0$lcssa = $l$04;
     break L1;
    }
    $4 = (_wcwidth($2)|0);
    $5 = ($4|0)>(-1);
    if (!($5)) {
     $k$1 = $4;$l$0$lcssa = $l$04;
     break L1;
    }
    $6 = (($4) + ($l$04))|0;
    $7 = ((($$023)) + 4|0);
    $8 = ($1|0)==(0);
    if ($8) {
     $k$1 = $4;$l$0$lcssa = $6;
     break;
    } else {
     $$023 = $7;$$in = $1;$k$05 = $4;$l$04 = $6;
    }
   }
  }
 } while(0);
 $9 = ($k$1|0)<(0);
 $10 = $9 ? $k$1 : $l$0$lcssa;
 return ($10|0);
}
function _wctrans($class) {
 $class = $class|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcmp($class,165368)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = (1);
 } else {
  $2 = (_strcmp($class,165376)|0);
  $3 = ($2|0)==(0);
  $$ = $3 ? (2) : 0;
  $$0 = $$;
 }
 return ($$0|0);
}
function _towctrans($wc,$trans) {
 $wc = $wc|0;
 $trans = $trans|0;
 var $$0 = 0, $0 = 0, $1 = 0, $magicptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $magicptr = $trans;
 switch ($magicptr|0) {
 case 1:  {
  $0 = (_towupper($wc)|0);
  $$0 = $0;
  break;
 }
 case 2:  {
  $1 = (_towlower($wc)|0);
  $$0 = $1;
  break;
 }
 default: {
  $$0 = $wc;
 }
 }
 return ($$0|0);
}
function _wcwidth($wc) {
 $wc = $wc|0;
 var $$ = 0, $$0 = 0, $$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($wc>>>0)<(255);
 do {
  if ($0) {
   $1 = (($wc) + 1)|0;
   $2 = $1 & 127;
   $3 = ($2>>>0)>(32);
   $4 = ($wc|0)!=(0);
   $5 = $4 << 31 >> 31;
   $6 = $3 ? 1 : $5;
   $$0 = $6;
  } else {
   $7 = $wc & -65538;
   $8 = ($7>>>0)<(65534);
   if ($8) {
    $9 = $wc >> 8;
    $10 = (165384 + ($9)|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = $11&255;
    $13 = $12 << 5;
    $14 = $wc >>> 3;
    $15 = $14 & 31;
    $16 = $13 | $15;
    $17 = (165384 + ($16)|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18&255;
    $20 = $wc & 7;
    $21 = 1 << $20;
    $22 = $19 & $21;
    $23 = ($22|0)==(0);
    if (!($23)) {
     $$0 = 0;
     break;
    }
    $24 = (167304 + ($9)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    $27 = $26 << 5;
    $28 = $27 | $15;
    $29 = (167304 + ($28)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30&255;
    $32 = $31 & $21;
    $33 = ($32|0)==(0);
    $$ = $33 ? 1 : 2;
    $$0 = $$;
    break;
   }
   $34 = $wc & 65534;
   $35 = ($34|0)==(65534);
   if ($35) {
    $$0 = -1;
   } else {
    $36 = $wc & -131072;
    $37 = ($36|0)==(131072);
    if ($37) {
     $$0 = 2;
    } else {
     $38 = ($wc|0)==(917505);
     $39 = (($wc) + -917536)|0;
     $40 = ($39>>>0)<(95);
     $or$cond = $38 | $40;
     $41 = (($wc) + -917760)|0;
     $42 = ($41|0)<(239);
     $or$cond3 = $42 | $or$cond;
     $43 = $or$cond3&1;
     $$4 = $43 ^ 1;
     return ($$4|0);
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function ___ctype_b_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (14384|0);
}
function ___ctype_get_mb_cur_max() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function ___ctype_tolower_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (14388|0);
}
function ___ctype_toupper_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (14392|0);
}
function _alphasort($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = ((($0)) + 11|0);
 $2 = HEAP32[$b>>2]|0;
 $3 = ((($2)) + 11|0);
 $4 = (_strcoll($1,$3)|0);
 return ($4|0);
}
function _closedir($dir) {
 $dir = $dir|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$dir>>2]|0;
 $1 = (_close($0)|0);
 _free($dir);
 return ($1|0);
}
function _dirfd($d) {
 $d = $d|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$d>>2]|0;
 return ($0|0);
}
function _fdopendir($fd) {
 $fd = $fd|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $st = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $st = sp + 4|0;
 $0 = (_fstat($fd,$st)|0);
 $1 = ($0|0)<(0);
 do {
  if ($1) {
   $$0 = 0;
  } else {
   $2 = ((($st)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = $3 & 61440;
   $5 = ($4|0)==(16384);
   if (!($5)) {
    $6 = (___errno_location()|0);
    HEAP32[$6>>2] = 20;
    $$0 = 0;
    break;
   }
   $7 = (_calloc(1,2072)|0);
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$0 = 0;
   } else {
    HEAP32[$vararg_buffer>>2] = 1;
    (_fcntl($fd,2,$vararg_buffer)|0);
    HEAP32[$7>>2] = $fd;
    $$0 = $7;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _opendir($name) {
 $name = $name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_open($name,589824,$vararg_buffer)|0);
 $1 = ($0|0)<(0);
 do {
  if ($1) {
   $$0 = 0;
  } else {
   $2 = (_calloc(1,2072)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    HEAP32[$vararg_buffer1>>2] = $0;
    (___syscall6(6,($vararg_buffer1|0))|0);
    $$0 = 0;
    break;
   } else {
    HEAP32[$2>>2] = $0;
    $$0 = $2;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _readdir($dir) {
 $dir = $dir|0;
 var $$0 = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($dir)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($dir)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)<($3|0);
 do {
  if ($4) {
   $14 = $1;
   label = 6;
  } else {
   $5 = HEAP32[$dir>>2]|0;
   $6 = ((($dir)) + 24|0);
   HEAP32[$vararg_buffer>>2] = $5;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $6;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 2048;
   $7 = (___syscall220(220,($vararg_buffer|0))|0);
   $8 = ($7|0)<(1);
   if (!($8)) {
    HEAP32[$2>>2] = $7;
    HEAP32[$0>>2] = 0;
    $14 = 0;
    label = 6;
    break;
   }
   $9 = ($7|0)<(0);
   $10 = ($7|0)!=(-2);
   $or$cond = $9 & $10;
   if ($or$cond) {
    $11 = (0 - ($7))|0;
    $12 = (___errno_location()|0);
    HEAP32[$12>>2] = $11;
    $$0 = 0;
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $13 = (((($dir)) + 24|0) + ($14)|0);
  $$sum = (($14) + 8)|0;
  $15 = (((($dir)) + 24|0) + ($$sum)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = (($17) + ($14))|0;
  HEAP32[$0>>2] = $18;
  $$sum2 = (($14) + 4)|0;
  $19 = (((($dir)) + 24|0) + ($$sum2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($dir)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$0 = $13;
 }
 STACKTOP = sp;return ($$0|0);
}
function _readdir_r($dir,$buf,$result) {
 $dir = $dir|0;
 $buf = $buf|0;
 $result = $result|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___errno_location()|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($dir)) + 16|0);
 ___lock(($2|0));
 HEAP32[$0>>2] = 0;
 $3 = (_readdir($dir)|0);
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  HEAP32[$0>>2] = $1;
  $6 = ($3|0)==(0|0);
  if ($6) {
   $$01 = 0;
  } else {
   $7 = ((($3)) + 8|0);
   $8 = HEAP16[$7>>1]|0;
   $9 = $8&65535;
   _memcpy(($buf|0),($3|0),($9|0))|0;
   $$01 = $buf;
  }
  ___unlock(($2|0));
  HEAP32[$result>>2] = $$01;
  $$0 = 0;
 } else {
  ___unlock(($2|0));
  $$0 = $4;
 }
 return ($$0|0);
}
function _rewinddir($dir) {
 $dir = $dir|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dir)) + 16|0);
 ___lock(($0|0));
 $1 = HEAP32[$dir>>2]|0;
 (_lseek($1,0,0)|0);
 $2 = ((($dir)) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($dir)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($dir)) + 4|0);
 HEAP32[$4>>2] = 0;
 ___unlock(($0|0));
 return;
}
function _scandir($path,$res,$sel,$cmp) {
 $path = $path|0;
 $res = $res|0;
 $sel = $sel|0;
 $cmp = $cmp|0;
 var $$0 = 0, $$in = 0, $$lcssa27 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0$ph = 0, $cnt$0$ph30 = 0, $len$0$ph = 0;
 var $len$1 = 0, $names$0$ph = 0, $names$1 = 0, $names$2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_opendir($path)|0);
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = -1;
  } else {
   $4 = ($sel|0)==(0|0);
   $cnt$0$ph = 0;$len$0$ph = 0;$names$0$ph = 0;
   L3: while(1) {
    while(1) {
     HEAP32[$1>>2] = 0;
     $5 = (_readdir($0)|0);
     $6 = ($5|0)==(0|0);
     if ($6) {
      $cnt$0$ph30 = $cnt$0$ph;$names$2 = $names$0$ph;
      break L3;
     }
     if ($4) {
      $$lcssa27 = $5;
      break;
     }
     $7 = (FUNCTION_TABLE_ii[$sel & 63]($5)|0);
     $8 = ($7|0)==(0);
     if (!($8)) {
      $$lcssa27 = $5;
      break;
     }
    }
    $9 = ($cnt$0$ph>>>0)<($len$0$ph>>>0);
    if ($9) {
     $len$1 = $len$0$ph;$names$1 = $names$0$ph;
    } else {
     $10 = $len$0$ph << 1;
     $11 = $10 | 1;
     $12 = ($11>>>0)>(1073741823);
     if ($12) {
      $cnt$0$ph30 = $cnt$0$ph;$names$2 = $names$0$ph;
      break;
     }
     $13 = $11 << 2;
     $14 = (_realloc($names$0$ph,$13)|0);
     $15 = ($14|0)==(0|0);
     if ($15) {
      $cnt$0$ph30 = $cnt$0$ph;$names$2 = $names$0$ph;
      break;
     }
     $len$1 = $11;$names$1 = $14;
    }
    $16 = ((($$lcssa27)) + 8|0);
    $17 = HEAP16[$16>>1]|0;
    $18 = $17&65535;
    $19 = (_malloc($18)|0);
    $20 = (($names$1) + ($cnt$0$ph<<2)|0);
    HEAP32[$20>>2] = $19;
    $21 = ($19|0)==(0|0);
    if ($21) {
     $cnt$0$ph30 = $cnt$0$ph;$names$2 = $names$1;
     break;
    }
    $22 = (($cnt$0$ph) + 1)|0;
    $23 = HEAP16[$16>>1]|0;
    $24 = $23&65535;
    _memcpy(($19|0),($$lcssa27|0),($24|0))|0;
    $cnt$0$ph = $22;$len$0$ph = $len$1;$names$0$ph = $names$1;
   }
   (_closedir($0)|0);
   $25 = HEAP32[$1>>2]|0;
   $26 = ($25|0)==(0);
   if ($26) {
    HEAP32[$1>>2] = $2;
    $33 = ($cmp|0)==(0|0);
    if (!($33)) {
     _qsort($names$2,$cnt$0$ph30,4,$cmp);
    }
    HEAP32[$res>>2] = $names$2;
    $$0 = $cnt$0$ph30;
    break;
   } else {
    $27 = ($names$2|0)==(0|0);
    $28 = ($cnt$0$ph30|0)==(0);
    $or$cond = $27 | $28;
    if (!($or$cond)) {
     $$in = $cnt$0$ph30;
     while(1) {
      $29 = (($$in) + -1)|0;
      $30 = (($names$2) + ($29<<2)|0);
      $31 = HEAP32[$30>>2]|0;
      _free($31);
      $32 = ($29|0)==(0);
      if ($32) {
       break;
      } else {
       $$in = $29;
      }
     }
    }
    _free($names$2);
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _seekdir($dir,$off) {
 $dir = $dir|0;
 $off = $off|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dir)) + 16|0);
 ___lock(($0|0));
 $1 = HEAP32[$dir>>2]|0;
 $2 = (_lseek($1,$off,0)|0);
 $3 = ((($dir)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($dir)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($dir)) + 8|0);
 HEAP32[$5>>2] = 0;
 ___unlock(($0|0));
 return;
}
function _telldir($dir) {
 $dir = $dir|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dir)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _versionsort($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = ((($0)) + 11|0);
 $2 = HEAP32[$b>>2]|0;
 $3 = ((($2)) + 11|0);
 $4 = (_strverscmp($1,$3)|0);
 return ($4|0);
}
function ___getdents($fd,$buf,$len) {
 $fd = $fd|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $buf;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $len;
 $0 = (___syscall220(220,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (168360 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 168448;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 168448;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 168448;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7168>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 14396;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function _creat($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $mode;
 $0 = (_open($filename,577,$vararg_buffer)|0);
 STACKTOP = sp;return ($0|0);
}
function _fcntl($fd,$cmd,$varargs) {
 $fd = $fd|0;
 $cmd = $cmd|0;
 $varargs = $varargs|0;
 var $$ = 0, $$0 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $ex = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0, $vararg_buffer23 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer36 = 0, $vararg_buffer41 = 0;
 var $vararg_buffer46 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr40 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr49 = 0, $vararg_ptr50 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer46 = sp + 152|0;
 $vararg_buffer41 = sp + 136|0;
 $vararg_buffer36 = sp + 120|0;
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $ap = sp + 176|0;
 $ex = sp + 168|0;
 HEAP32[$ap>>2] = $varargs;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 4|0);
 $expanded2 = $1;
 $expanded = (($expanded2) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 4|0);
 $expanded6 = $3;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $4 = $2 & $expanded4;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $arglist_next = ((($5)) + 4|0);
 HEAP32[$ap>>2] = $arglist_next;
 $7 = ($cmd|0)==(4);
 $8 = $6 | 32768;
 $$ = $7 ? $8 : $6;
 L1: do {
  switch ($cmd|0) {
  case 14:  {
   $9 = $$;
   HEAP32[$vararg_buffer>>2] = $fd;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 14;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $9;
   $10 = (___syscall221(221,($vararg_buffer|0))|0);
   $11 = (___syscall_ret($10)|0);
   $$0 = $11;
   break;
  }
  case 9:  {
   HEAP32[$vararg_buffer3>>2] = $fd;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = 16;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $ex;
   $12 = (___syscall221(221,($vararg_buffer3|0))|0);
   switch ($12|0) {
   case -22:  {
    $13 = $$;
    HEAP32[$vararg_buffer8>>2] = $fd;
    $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
    HEAP32[$vararg_ptr11>>2] = 9;
    $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
    HEAP32[$vararg_ptr12>>2] = $13;
    $14 = (___syscall221(221,($vararg_buffer8|0))|0);
    $$0 = $14;
    break L1;
    break;
   }
   case 0:  {
    $16 = HEAP32[$ex>>2]|0;
    $17 = ($16|0)==(2);
    $18 = ((($ex)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (0 - ($19))|0;
    $21 = $17 ? $20 : $19;
    $$0 = $21;
    break L1;
    break;
   }
   default: {
    $15 = (___syscall_ret($12)|0);
    $$0 = $15;
    break L1;
   }
   }
   break;
  }
  case 1030:  {
   HEAP32[$vararg_buffer13>>2] = $fd;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = 1030;
   $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
   HEAP32[$vararg_ptr17>>2] = $$;
   $22 = (___syscall221(221,($vararg_buffer13|0))|0);
   $23 = ($22|0)==(-22);
   if (!($23)) {
    $24 = ($22|0)>(-1);
    if ($24) {
     HEAP32[$vararg_buffer18>>2] = $22;
     $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
     HEAP32[$vararg_ptr21>>2] = 2;
     $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
     HEAP32[$vararg_ptr22>>2] = 1;
     (___syscall221(221,($vararg_buffer18|0))|0);
    }
    $25 = (___syscall_ret($22)|0);
    $$0 = $25;
    break L1;
   }
   HEAP32[$vararg_buffer23>>2] = $fd;
   $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
   HEAP32[$vararg_ptr26>>2] = 1030;
   $vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
   HEAP32[$vararg_ptr27>>2] = 0;
   $26 = (___syscall221(221,($vararg_buffer23|0))|0);
   $27 = ($26|0)==(-22);
   if ($27) {
    HEAP32[$vararg_buffer31>>2] = $fd;
    $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
    HEAP32[$vararg_ptr34>>2] = 0;
    $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
    HEAP32[$vararg_ptr35>>2] = $$;
    $30 = (___syscall221(221,($vararg_buffer31|0))|0);
    $31 = ($30|0)>(-1);
    if ($31) {
     HEAP32[$vararg_buffer36>>2] = $30;
     $vararg_ptr39 = ((($vararg_buffer36)) + 4|0);
     HEAP32[$vararg_ptr39>>2] = 2;
     $vararg_ptr40 = ((($vararg_buffer36)) + 8|0);
     HEAP32[$vararg_ptr40>>2] = 1;
     (___syscall221(221,($vararg_buffer36|0))|0);
    }
    $32 = (___syscall_ret($30)|0);
    $$0 = $32;
    break L1;
   } else {
    $28 = ($26|0)>(-1);
    if ($28) {
     HEAP32[$vararg_buffer28>>2] = $26;
     (___syscall6(6,($vararg_buffer28|0))|0);
    }
    $29 = (___syscall_ret(-22)|0);
    $$0 = $29;
    break L1;
   }
   break;
  }
  default: {
   $$off = (($cmd) + -12)|0;
   $switch = ($$off>>>0)<(5);
   if ($switch) {
    $33 = $$;
    HEAP32[$vararg_buffer41>>2] = $fd;
    $vararg_ptr44 = ((($vararg_buffer41)) + 4|0);
    HEAP32[$vararg_ptr44>>2] = $cmd;
    $vararg_ptr45 = ((($vararg_buffer41)) + 8|0);
    HEAP32[$vararg_ptr45>>2] = $33;
    $34 = (___syscall221(221,($vararg_buffer41|0))|0);
    $35 = (___syscall_ret($34)|0);
    $$0 = $35;
    break L1;
   } else {
    HEAP32[$vararg_buffer46>>2] = $fd;
    $vararg_ptr49 = ((($vararg_buffer46)) + 4|0);
    HEAP32[$vararg_ptr49>>2] = $cmd;
    $vararg_ptr50 = ((($vararg_buffer46)) + 8|0);
    HEAP32[$vararg_ptr50>>2] = $$;
    $36 = (___syscall221(221,($vararg_buffer46|0))|0);
    $37 = (___syscall_ret($36)|0);
    $$0 = $37;
    break L1;
   }
  }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _open($filename,$flags,$varargs) {
 $filename = $filename|0;
 $flags = $flags|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ap = sp + 16|0;
 HEAP32[$ap>>2] = $varargs;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 4|0);
 $expanded2 = $1;
 $expanded = (($expanded2) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 4|0);
 $expanded6 = $3;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $4 = $2 & $expanded4;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $arglist_next = ((($5)) + 4|0);
 HEAP32[$ap>>2] = $arglist_next;
 $7 = $flags | 32768;
 HEAP32[$vararg_buffer>>2] = $filename;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $6;
 $8 = (___syscall5(5,($vararg_buffer|0))|0);
 $9 = (___syscall_ret($8)|0);
 STACKTOP = sp;return ($9|0);
}
function _openat($fd,$filename,$flags,$varargs) {
 $fd = $fd|0;
 $filename = $filename|0;
 $flags = $flags|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0;
 var $mode$0 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ap = sp + 16|0;
 $0 = $flags & 4194368;
 $1 = ($0|0)==(0);
 if ($1) {
  $mode$0 = 0;
 } else {
  HEAP32[$ap>>2] = $varargs;
  $arglist_current = HEAP32[$ap>>2]|0;
  $2 = $arglist_current;
  $3 = ((0) + 4|0);
  $expanded2 = $3;
  $expanded = (($expanded2) - 1)|0;
  $4 = (($2) + ($expanded))|0;
  $5 = ((0) + 4|0);
  $expanded6 = $5;
  $expanded5 = (($expanded6) - 1)|0;
  $expanded4 = $expanded5 ^ -1;
  $6 = $4 & $expanded4;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $arglist_next = ((($7)) + 4|0);
  HEAP32[$ap>>2] = $arglist_next;
  $mode$0 = $8;
 }
 $9 = $flags | 32768;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $filename;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $9;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $mode$0;
 $10 = (___syscall295(295,($vararg_buffer|0))|0);
 $11 = (___syscall_ret($10)|0);
 STACKTOP = sp;return ($11|0);
}
function _posix_fadvise($fd,$base,$len,$advice) {
 $fd = $fd|0;
 $base = $base|0;
 $len = $len|0;
 $advice = $advice|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($base|0)<(0);
 $1 = $0 << 31 >> 31;
 $2 = ($len|0)<(0);
 $3 = $2 << 31 >> 31;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $base;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $1;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $len;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $3;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $advice;
 $4 = (___syscall272(272,($vararg_buffer|0))|0);
 $5 = (0 - ($4))|0;
 STACKTOP = sp;return ($5|0);
}
function _posix_fallocate($fd,$base,$len) {
 $fd = $fd|0;
 $base = $base|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($base|0)<(0);
 $1 = $0 << 31 >> 31;
 $2 = ($len|0)<(0);
 $3 = $2 << 31 >> 31;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $base;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $1;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $len;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $3;
 $4 = (___syscall324(324,($vararg_buffer|0))|0);
 $5 = (0 - ($4))|0;
 STACKTOP = sp;return ($5|0);
}
function _fegetexceptflag($fp,$mask) {
 $fp = $fp|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fetestexcept($mask)|0);
 $1 = $0&65535;
 HEAP16[$fp>>1] = $1;
 return 0;
}
function _feholdexcept($envp) {
 $envp = $envp|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _feclearexcept($mask) {
 $mask = $mask|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _feraiseexcept($mask) {
 $mask = $mask|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _fetestexcept($mask) {
 $mask = $mask|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _fegetround() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___fesetround($r) {
 $r = $r|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _fegetenv($envp) {
 $envp = $envp|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _fesetenv($envp) {
 $envp = $envp|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _fesetexceptflag($fp,$mask) {
 $fp = $fp|0;
 $mask = $mask|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _fesetround($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $r & -3073;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (___fesetround($r)|0);
  $$0 = $2;
 } else {
  $$0 = -1;
 }
 return ($$0|0);
}
function _feupdateenv($envp) {
 $envp = $envp|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$0$i27 = 0.0, $$010$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$11$i = 0, $$18$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3105$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa256 = 0;
 var $$lcssa256$lcssa = 0, $$lcssa257 = 0, $$lcssa257$lcssa = 0, $$lcssa263 = 0, $$lcssa264 = 0, $$lcssa265 = 0, $$lcssa275 = 0, $$lnz$0$i = 0, $$neg32$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi42$iZ2D = 0.0, $$pre41$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0;
 var $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0.0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0, $656 = 0, $657 = 0.0, $658 = 0;
 var $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0.0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0$lcssa151$i = 0, $a$085$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph38$i = 0, $a$3$i = 0, $a$3$i$lcssa248 = 0, $a$3$i249 = 0, $a$3$ph$i = 0, $a$3$ph157$i = 0, $a$478$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge$i28 = 0;
 var $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$087$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry3$081$i = 0, $cond$i = 0, $d$0$i = 0;
 var $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i246 = 0, $e2$1$ph$i = 0, $e2$1$ph156$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa242 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa273 = 0;
 var $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3101$i = 0, $gotdig$3101$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1102$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0;
 var $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0104$i = 0, $j$0104$i$lcssa = 0, $j$067$i = 0, $j$068$i = 0, $j$069$i = 0, $j$2$i = 0, $j$394$i = 0, $k$0$lcssa$i = 0, $k$0103$i = 0, $k$0103$i$lcssa = 0, $k$063$i = 0, $k$064$i = 0, $k$065$i = 0, $k$2$i = 0;
 var $k$3$i = 0, $k$486$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$679$i = 0, $lnz$0$lcssa$i = 0, $lnz$0100$i = 0, $lnz$0100$i$lcssa = 0, $lnz$057$i = 0, $lnz$058$i = 0, $lnz$059$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0;
 var $or$cond182$i = 0, $or$cond19$i = 0, $or$cond20$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $rp$0$lcssa152$i = 0, $rp$084$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph36$i = 0, $rp$3$ph$i = 0, $rp$3$ph34$i = 0, $rp$477$i = 0, $rp$5$i = 0;
 var $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph37$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0;
 var $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 switch ($prec|0) {
 case 0:  {
  $bits$0$ph = 24;$emin$0$ph = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $0 = ((($f)) + 4|0);
   $1 = ((($f)) + 100|0);
   while(1) {
    $2 = HEAP32[$0>>2]|0;
    $3 = HEAP32[$1>>2]|0;
    $4 = ($2>>>0)<($3>>>0);
    if ($4) {
     $5 = ((($2)) + 1|0);
     HEAP32[$0>>2] = $5;
     $6 = HEAP8[$2>>0]|0;
     $7 = $6&255;
     $9 = $7;
    } else {
     $8 = (___shgetc($f)|0);
     $9 = $8;
    }
    $10 = (_isspace($9)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$lcssa275 = $9;
     break;
    }
   }
   $12 = ($$lcssa275|0)==(45);
   L13: do {
    switch ($$lcssa275|0) {
    case 43: case 45:  {
     $13 = $12&1;
     $14 = $13 << 1;
     $15 = (1 - ($14))|0;
     $16 = HEAP32[$0>>2]|0;
     $17 = HEAP32[$1>>2]|0;
     $18 = ($16>>>0)<($17>>>0);
     if ($18) {
      $19 = ((($16)) + 1|0);
      HEAP32[$0>>2] = $19;
      $20 = HEAP8[$16>>0]|0;
      $21 = $20&255;
      $c$0 = $21;$sign$0 = $15;
      break L13;
     } else {
      $22 = (___shgetc($f)|0);
      $c$0 = $22;$sign$0 = $15;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa275;$sign$0 = 1;
    }
    }
   } while(0);
   $c$179 = $c$0;$i$078 = 0;
   while(1) {
    $23 = $c$179 | 32;
    $24 = (170252 + ($i$078)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = ($23|0)==($26|0);
    if (!($27)) {
     $c$1$lcssa = $c$179;$i$0$lcssa = $i$078;
     break;
    }
    $28 = ($i$078>>>0)<(7);
    do {
     if ($28) {
      $29 = HEAP32[$0>>2]|0;
      $30 = HEAP32[$1>>2]|0;
      $31 = ($29>>>0)<($30>>>0);
      if ($31) {
       $32 = ((($29)) + 1|0);
       HEAP32[$0>>2] = $32;
       $33 = HEAP8[$29>>0]|0;
       $34 = $33&255;
       $c$2 = $34;
       break;
      } else {
       $35 = (___shgetc($f)|0);
       $c$2 = $35;
       break;
      }
     } else {
      $c$2 = $c$179;
     }
    } while(0);
    $36 = (($i$078) + 1)|0;
    $37 = ($36>>>0)<(8);
    if ($37) {
     $c$179 = $c$2;$i$078 = $36;
    } else {
     $c$1$lcssa = $c$2;$i$0$lcssa = $36;
     break;
    }
   }
   L29: do {
    switch ($i$0$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $38 = ($i$0$lcssa>>>0)>(3);
     $39 = ($pok|0)!=(0);
     $or$cond5 = $39 & $38;
     if ($or$cond5) {
      $40 = ($i$0$lcssa|0)==(8);
      if ($40) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $53 = ($i$0$lcssa|0)==(0);
     L34: do {
      if ($53) {
       $c$377 = $c$1$lcssa;$i$276 = 0;
       while(1) {
        $54 = $c$377 | 32;
        $55 = (180187 + ($i$276)|0);
        $56 = HEAP8[$55>>0]|0;
        $57 = $56 << 24 >> 24;
        $58 = ($54|0)==($57|0);
        if (!($58)) {
         $c$5 = $c$377;$i$3 = $i$276;
         break L34;
        }
        $59 = ($i$276>>>0)<(2);
        do {
         if ($59) {
          $60 = HEAP32[$0>>2]|0;
          $61 = HEAP32[$1>>2]|0;
          $62 = ($60>>>0)<($61>>>0);
          if ($62) {
           $63 = ((($60)) + 1|0);
           HEAP32[$0>>2] = $63;
           $64 = HEAP8[$60>>0]|0;
           $65 = $64&255;
           $c$4 = $65;
           break;
          } else {
           $66 = (___shgetc($f)|0);
           $c$4 = $66;
           break;
          }
         } else {
          $c$4 = $c$377;
         }
        } while(0);
        $67 = (($i$276) + 1)|0;
        $68 = ($67>>>0)<(3);
        if ($68) {
         $c$377 = $c$4;$i$276 = $67;
        } else {
         $c$5 = $c$4;$i$3 = $67;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $69 = HEAP32[$0>>2]|0;
      $70 = HEAP32[$1>>2]|0;
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $72 = ((($69)) + 1|0);
       HEAP32[$0>>2] = $72;
       $73 = HEAP8[$69>>0]|0;
       $74 = $73&255;
       $76 = $74;
      } else {
       $75 = (___shgetc($f)|0);
       $76 = $75;
      }
      $77 = ($76|0)==(40);
      if ($77) {
       $i$4 = 1;
      } else {
       $78 = HEAP32[$1>>2]|0;
       $79 = ($78|0)==(0|0);
       if ($79) {
        $$0 = nan;
        break L4;
       }
       $80 = HEAP32[$0>>2]|0;
       $81 = ((($80)) + -1|0);
       HEAP32[$0>>2] = $81;
       $$0 = nan;
       break L4;
      }
      while(1) {
       $82 = HEAP32[$0>>2]|0;
       $83 = HEAP32[$1>>2]|0;
       $84 = ($82>>>0)<($83>>>0);
       if ($84) {
        $85 = ((($82)) + 1|0);
        HEAP32[$0>>2] = $85;
        $86 = HEAP8[$82>>0]|0;
        $87 = $86&255;
        $90 = $87;
       } else {
        $88 = (___shgetc($f)|0);
        $90 = $88;
       }
       $89 = (($90) + -48)|0;
       $91 = ($89>>>0)<(10);
       $92 = (($90) + -65)|0;
       $93 = ($92>>>0)<(26);
       $or$cond = $91 | $93;
       if (!($or$cond)) {
        $94 = (($90) + -97)|0;
        $95 = ($94>>>0)<(26);
        $96 = ($90|0)==(95);
        $or$cond7 = $96 | $95;
        if (!($or$cond7)) {
         $$lcssa = $90;$i$4$lcssa = $i$4;
         break;
        }
       }
       $108 = (($i$4) + 1)|0;
       $i$4 = $108;
      }
      $97 = ($$lcssa|0)==(41);
      if ($97) {
       $$0 = nan;
       break L4;
      }
      $98 = HEAP32[$1>>2]|0;
      $99 = ($98|0)==(0|0);
      if (!($99)) {
       $100 = HEAP32[$0>>2]|0;
       $101 = ((($100)) + -1|0);
       HEAP32[$0>>2] = $101;
      }
      if (!($39)) {
       $103 = (___errno_location()|0);
       HEAP32[$103>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       break L4;
      }
      $102 = ($i$4$lcssa|0)==(0);
      if ($102) {
       $$0 = nan;
       break L4;
      } else {
       $$in = $i$4$lcssa;
      }
      while(1) {
       $104 = (($$in) + -1)|0;
       if (!($99)) {
        $105 = HEAP32[$0>>2]|0;
        $106 = ((($105)) + -1|0);
        HEAP32[$0>>2] = $106;
       }
       $107 = ($104|0)==(0);
       if ($107) {
        $$0 = nan;
        break L4;
       } else {
        $$in = $104;
       }
      }
      break;
     }
     case 0:  {
      $114 = ($c$5|0)==(48);
      do {
       if ($114) {
        $115 = HEAP32[$0>>2]|0;
        $116 = HEAP32[$1>>2]|0;
        $117 = ($115>>>0)<($116>>>0);
        if ($117) {
         $118 = ((($115)) + 1|0);
         HEAP32[$0>>2] = $118;
         $119 = HEAP8[$115>>0]|0;
         $120 = $119&255;
         $123 = $120;
        } else {
         $121 = (___shgetc($f)|0);
         $123 = $121;
        }
        $122 = $123 | 32;
        $124 = ($122|0)==(120);
        if (!($124)) {
         $326 = HEAP32[$1>>2]|0;
         $327 = ($326|0)==(0|0);
         if ($327) {
          $c$6 = 48;
          break;
         }
         $328 = HEAP32[$0>>2]|0;
         $329 = ((($328)) + -1|0);
         HEAP32[$0>>2] = $329;
         $c$6 = 48;
         break;
        }
        $125 = HEAP32[$0>>2]|0;
        $126 = HEAP32[$1>>2]|0;
        $127 = ($125>>>0)<($126>>>0);
        if ($127) {
         $128 = ((($125)) + 1|0);
         HEAP32[$0>>2] = $128;
         $129 = HEAP8[$125>>0]|0;
         $130 = $129&255;
         $c$0$i = $130;$gotdig$0$i = 0;
        } else {
         $131 = (___shgetc($f)|0);
         $c$0$i = $131;$gotdig$0$i = 0;
        }
        L94: while(1) {
         switch ($c$0$i|0) {
         case 46:  {
          $gotdig$0$i$lcssa242 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $168 = 0;$170 = 0;$694 = 0;$695 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break L94;
         }
         }
         $132 = HEAP32[$0>>2]|0;
         $133 = HEAP32[$1>>2]|0;
         $134 = ($132>>>0)<($133>>>0);
         if ($134) {
          $135 = ((($132)) + 1|0);
          HEAP32[$0>>2] = $135;
          $136 = HEAP8[$132>>0]|0;
          $137 = $136&255;
          $c$0$i = $137;$gotdig$0$i = 1;
          continue;
         } else {
          $138 = (___shgetc($f)|0);
          $c$0$i = $138;$gotdig$0$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $139 = HEAP32[$0>>2]|0;
         $140 = HEAP32[$1>>2]|0;
         $141 = ($139>>>0)<($140>>>0);
         if ($141) {
          $142 = ((($139)) + 1|0);
          HEAP32[$0>>2] = $142;
          $143 = HEAP8[$139>>0]|0;
          $144 = $143&255;
          $c$1$ph$i = $144;
         } else {
          $145 = (___shgetc($f)|0);
          $c$1$ph$i = $145;
         }
         $146 = ($c$1$ph$i|0)==(48);
         if ($146) {
          $154 = 0;$155 = 0;
          while(1) {
           $147 = HEAP32[$0>>2]|0;
           $148 = HEAP32[$1>>2]|0;
           $149 = ($147>>>0)<($148>>>0);
           if ($149) {
            $150 = ((($147)) + 1|0);
            HEAP32[$0>>2] = $150;
            $151 = HEAP8[$147>>0]|0;
            $152 = $151&255;
            $158 = $152;
           } else {
            $153 = (___shgetc($f)|0);
            $158 = $153;
           }
           $156 = (_i64Add(($154|0),($155|0),-1,-1)|0);
           $157 = tempRet0;
           $159 = ($158|0)==(48);
           if ($159) {
            $154 = $156;$155 = $157;
           } else {
            $168 = 0;$170 = 0;$694 = $156;$695 = $157;$c$2$i = $158;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
            break;
           }
          }
         } else {
          $168 = 0;$170 = 0;$694 = 0;$695 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa242;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         }
        }
        while(1) {
         $160 = (($c$2$i) + -48)|0;
         $161 = ($160>>>0)<(10);
         $$pre$i = $c$2$i | 32;
         if ($161) {
          label = 86;
         } else {
          $162 = (($$pre$i) + -97)|0;
          $163 = ($162>>>0)<(6);
          $164 = ($c$2$i|0)==(46);
          $or$cond6$i = $164 | $163;
          if (!($or$cond6$i)) {
           $212 = $694;$213 = $170;$215 = $695;$216 = $168;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break;
          }
          if ($164) {
           $165 = ($gotrad$0$i|0)==(0);
           if ($165) {
            $696 = $170;$697 = $168;$698 = $170;$699 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           } else {
            $212 = $694;$213 = $170;$215 = $695;$216 = $168;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $166 = ($c$2$i|0)>(57);
          $167 = (($$pre$i) + -87)|0;
          $d$0$i = $166 ? $167 : $160;
          $169 = ($168|0)<(0);
          $171 = ($170>>>0)<(8);
          $172 = ($168|0)==(0);
          $173 = $172 & $171;
          $174 = $169 | $173;
          do {
           if ($174) {
            $175 = $x$0$i << 4;
            $176 = (($d$0$i) + ($175))|0;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
           } else {
            $177 = ($168|0)<(0);
            $178 = ($170>>>0)<(14);
            $179 = ($168|0)==(0);
            $180 = $179 & $178;
            $181 = $177 | $180;
            if ($181) {
             $182 = (+($d$0$i|0));
             $183 = $scale$0$i * 0.0625;
             $184 = $183 * $182;
             $185 = $y$0$i + $184;
             $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
             break;
            }
            $186 = ($d$0$i|0)==(0);
            $187 = ($gottail$0$i|0)!=(0);
            $or$cond$i = $187 | $186;
            if ($or$cond$i) {
             $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
            } else {
             $188 = $scale$0$i * 0.5;
             $189 = $y$0$i + $188;
             $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
            }
           }
          } while(0);
          $190 = (_i64Add(($170|0),($168|0),1,0)|0);
          $191 = tempRet0;
          $696 = $694;$697 = $695;$698 = $190;$699 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
         }
         $192 = HEAP32[$0>>2]|0;
         $193 = HEAP32[$1>>2]|0;
         $194 = ($192>>>0)<($193>>>0);
         if ($194) {
          $195 = ((($192)) + 1|0);
          HEAP32[$0>>2] = $195;
          $196 = HEAP8[$192>>0]|0;
          $197 = $196&255;
          $168 = $699;$170 = $698;$694 = $696;$695 = $697;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         } else {
          $198 = (___shgetc($f)|0);
          $168 = $699;$170 = $698;$694 = $696;$695 = $697;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         }
        }
        $199 = ($gotdig$2$i$lcssa|0)==(0);
        if ($199) {
         $200 = HEAP32[$1>>2]|0;
         $201 = ($200|0)==(0|0);
         if (!($201)) {
          $202 = HEAP32[$0>>2]|0;
          $203 = ((($202)) + -1|0);
          HEAP32[$0>>2] = $203;
         }
         $204 = ($pok|0)==(0);
         if ($204) {
          ___shlim($f,0);
         } else {
          if (!($201)) {
           $205 = HEAP32[$0>>2]|0;
           $206 = ((($205)) + -1|0);
           HEAP32[$0>>2] = $206;
           $207 = ($gotrad$0$i$lcssa|0)==(0);
           if (!($207)) {
            $208 = ((($205)) + -2|0);
            HEAP32[$0>>2] = $208;
           }
          }
         }
         $209 = (+($sign$0|0));
         $210 = $209 * 0.0;
         $$0 = $210;
         break L4;
        }
        $211 = ($gotrad$0$i$lcssa|0)==(0);
        $214 = $211 ? $213 : $212;
        $217 = $211 ? $216 : $215;
        $218 = ($216|0)<(0);
        $219 = ($213>>>0)<(8);
        $220 = ($216|0)==(0);
        $221 = $220 & $219;
        $222 = $218 | $221;
        if ($222) {
         $224 = $213;$225 = $216;$x$324$i = $x$0$i$lcssa;
         while(1) {
          $223 = $x$324$i << 4;
          $226 = (_i64Add(($224|0),($225|0),1,0)|0);
          $227 = tempRet0;
          $228 = ($227|0)<(0);
          $229 = ($226>>>0)<(8);
          $230 = ($227|0)==(0);
          $231 = $230 & $229;
          $232 = $228 | $231;
          if ($232) {
           $224 = $226;$225 = $227;$x$324$i = $223;
          } else {
           $x$3$lcssa$i = $223;
           break;
          }
         }
        } else {
         $x$3$lcssa$i = $x$0$i$lcssa;
        }
        $233 = $c$2$lcssa$i | 32;
        $234 = ($233|0)==(112);
        if ($234) {
         $235 = (_scanexp($f,$pok)|0);
         $236 = tempRet0;
         $237 = ($235|0)==(0);
         $238 = ($236|0)==(-2147483648);
         $239 = $237 & $238;
         if ($239) {
          $240 = ($pok|0)==(0);
          if ($240) {
           ___shlim($f,0);
           $$0 = 0.0;
           break L4;
          }
          $241 = HEAP32[$1>>2]|0;
          $242 = ($241|0)==(0|0);
          if ($242) {
           $253 = 0;$254 = 0;
          } else {
           $243 = HEAP32[$0>>2]|0;
           $244 = ((($243)) + -1|0);
           HEAP32[$0>>2] = $244;
           $253 = 0;$254 = 0;
          }
         } else {
          $253 = $235;$254 = $236;
         }
        } else {
         $245 = HEAP32[$1>>2]|0;
         $246 = ($245|0)==(0|0);
         if ($246) {
          $253 = 0;$254 = 0;
         } else {
          $247 = HEAP32[$0>>2]|0;
          $248 = ((($247)) + -1|0);
          HEAP32[$0>>2] = $248;
          $253 = 0;$254 = 0;
         }
        }
        $249 = (_bitshift64Shl(($214|0),($217|0),2)|0);
        $250 = tempRet0;
        $251 = (_i64Add(($249|0),($250|0),-32,-1)|0);
        $252 = tempRet0;
        $255 = (_i64Add(($251|0),($252|0),($253|0),($254|0))|0);
        $256 = tempRet0;
        $257 = ($x$3$lcssa$i|0)==(0);
        if ($257) {
         $258 = (+($sign$0|0));
         $259 = $258 * 0.0;
         $$0 = $259;
         break L4;
        }
        $260 = (0 - ($emin$0$ph))|0;
        $261 = ($256|0)>(0);
        $262 = ($255>>>0)>($260>>>0);
        $263 = ($256|0)==(0);
        $264 = $263 & $262;
        $265 = $261 | $264;
        if ($265) {
         $266 = (___errno_location()|0);
         HEAP32[$266>>2] = 34;
         $267 = (+($sign$0|0));
         $268 = $267 * 1.7976931348623157E+308;
         $269 = $268 * 1.7976931348623157E+308;
         $$0 = $269;
         break L4;
        }
        $270 = (($emin$0$ph) + -106)|0;
        $271 = ($270|0)<(0);
        $272 = $271 << 31 >> 31;
        $273 = ($256|0)<($272|0);
        $274 = ($255>>>0)<($270>>>0);
        $275 = ($256|0)==($272|0);
        $276 = $275 & $274;
        $277 = $273 | $276;
        if ($277) {
         $279 = (___errno_location()|0);
         HEAP32[$279>>2] = 34;
         $280 = (+($sign$0|0));
         $281 = $280 * 2.2250738585072014E-308;
         $282 = $281 * 2.2250738585072014E-308;
         $$0 = $282;
         break L4;
        }
        $278 = ($x$3$lcssa$i|0)>(-1);
        if ($278) {
         $288 = $255;$289 = $256;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i$lcssa;
         while(1) {
          $283 = !($y$320$i >= 0.5);
          $284 = $x$419$i << 1;
          $285 = $y$320$i + -1.0;
          $286 = $283&1;
          $287 = $286 | $284;
          $x$5$i = $287 ^ 1;
          $$pn$i = $283 ? $y$320$i : $285;
          $y$4$i = $y$320$i + $$pn$i;
          $290 = (_i64Add(($288|0),($289|0),-1,-1)|0);
          $291 = tempRet0;
          $292 = ($287|0)>(-1);
          if ($292) {
           $288 = $290;$289 = $291;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
          } else {
           $297 = $290;$298 = $291;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
           break;
          }
         }
        } else {
         $297 = $255;$298 = $256;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
        }
        $293 = ($emin$0$ph|0)<(0);
        $294 = $293 << 31 >> 31;
        $295 = (_i64Subtract(32,0,($emin$0$ph|0),($294|0))|0);
        $296 = tempRet0;
        $299 = (_i64Add(($297|0),($298|0),($295|0),($296|0))|0);
        $300 = tempRet0;
        $301 = (0)>($300|0);
        $302 = ($bits$0$ph>>>0)>($299>>>0);
        $303 = (0)==($300|0);
        $304 = $303 & $302;
        $305 = $301 | $304;
        if ($305) {
         $306 = ($299|0)<(0);
         if ($306) {
          $$0710$i = 0;
          label = 127;
         } else {
          $$07$i = $299;
          label = 125;
         }
        } else {
         $$07$i = $bits$0$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $307 = ($$07$i|0)<(53);
         if ($307) {
          $$0710$i = $$07$i;
          label = 127;
         } else {
          $$pre41$i = (+($sign$0|0));
          $$0711$i = $$07$i;$$pre$phi42$iZ2D = $$pre41$i;$bias$0$i = 0.0;
         }
        }
        if ((label|0) == 127) {
         $308 = (84 - ($$0710$i))|0;
         $309 = (+_scalbn(1.0,$308));
         $310 = (+($sign$0|0));
         $311 = (+_copysignl($309,$310));
         $$0711$i = $$0710$i;$$pre$phi42$iZ2D = $310;$bias$0$i = $311;
        }
        $312 = ($$0711$i|0)<(32);
        $313 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $313 & $312;
        $314 = $x$4$lcssa$i & 1;
        $315 = ($314|0)==(0);
        $or$cond9$i = $315 & $or$cond4$i;
        $316 = $or$cond9$i&1;
        $x$6$i = (($316) + ($x$4$lcssa$i))|0;
        $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
        $317 = (+($x$6$i>>>0));
        $318 = $$pre$phi42$iZ2D * $317;
        $319 = $bias$0$i + $318;
        $320 = $$pre$phi42$iZ2D * $y$5$i;
        $321 = $320 + $319;
        $322 = $321 - $bias$0$i;
        $323 = $322 != 0.0;
        if (!($323)) {
         $324 = (___errno_location()|0);
         HEAP32[$324>>2] = 34;
        }
        $325 = (+_scalbnl($322,$297));
        $$0 = $325;
        break L4;
       } else {
        $c$6 = $c$5;
       }
      } while(0);
      $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
      $330 = (0 - ($sum$i))|0;
      $$09$i = $c$6;$gotdig$0$i12 = 0;
      L184: while(1) {
       switch ($$09$i|0) {
       case 46:  {
        $gotdig$0$i12$lcssa273 = $gotdig$0$i12;
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$2$i = $$09$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
        break L184;
       }
       }
       $331 = HEAP32[$0>>2]|0;
       $332 = HEAP32[$1>>2]|0;
       $333 = ($331>>>0)<($332>>>0);
       if ($333) {
        $334 = ((($331)) + 1|0);
        HEAP32[$0>>2] = $334;
        $335 = HEAP8[$331>>0]|0;
        $336 = $335&255;
        $$09$i = $336;$gotdig$0$i12 = 1;
        continue;
       } else {
        $337 = (___shgetc($f)|0);
        $$09$i = $337;$gotdig$0$i12 = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $338 = HEAP32[$0>>2]|0;
       $339 = HEAP32[$1>>2]|0;
       $340 = ($338>>>0)<($339>>>0);
       if ($340) {
        $341 = ((($338)) + 1|0);
        HEAP32[$0>>2] = $341;
        $342 = HEAP8[$338>>0]|0;
        $343 = $342&255;
        $$1$ph$i = $343;
       } else {
        $344 = (___shgetc($f)|0);
        $$1$ph$i = $344;
       }
       $345 = ($$1$ph$i|0)==(48);
       if ($345) {
        $346 = 0;$347 = 0;
        while(1) {
         $348 = (_i64Add(($346|0),($347|0),-1,-1)|0);
         $349 = tempRet0;
         $350 = HEAP32[$0>>2]|0;
         $351 = HEAP32[$1>>2]|0;
         $352 = ($350>>>0)<($351>>>0);
         if ($352) {
          $353 = ((($350)) + 1|0);
          HEAP32[$0>>2] = $353;
          $354 = HEAP8[$350>>0]|0;
          $355 = $354&255;
          $$1$be$i = $355;
         } else {
          $356 = (___shgetc($f)|0);
          $$1$be$i = $356;
         }
         $357 = ($$1$be$i|0)==(48);
         if ($357) {
          $346 = $348;$347 = $349;
         } else {
          $$2$i = $$1$be$i;$700 = $348;$701 = $349;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$1$ph$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa273;$gotrad$0$i14 = 1;
       }
      }
      HEAP32[$x$i>>2] = 0;
      $358 = (($$2$i) + -48)|0;
      $359 = ($358>>>0)<(10);
      $360 = ($$2$i|0)==(46);
      $361 = $360 | $359;
      L203: do {
       if ($361) {
        $362 = ((($x$i)) + 496|0);
        $$3105$i = $$2$i;$365 = 0;$366 = 0;$702 = $360;$703 = $358;$704 = $700;$705 = $701;$gotdig$3101$i = $gotdig$2$i13;$gotrad$1102$i = $gotrad$0$i14;$j$0104$i = 0;$k$0103$i = 0;$lnz$0100$i = 0;
        L205: while(1) {
         do {
          if ($702) {
           $cond$i = ($gotrad$1102$i|0)==(0);
           if ($cond$i) {
            $706 = $365;$707 = $366;$708 = $365;$709 = $366;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = 1;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
           } else {
            $710 = $704;$711 = $705;$712 = $365;$713 = $366;$gotdig$3101$i$lcssa = $gotdig$3101$i;$j$0104$i$lcssa = $j$0104$i;$k$0103$i$lcssa = $k$0103$i;$lnz$0100$i$lcssa = $lnz$0100$i;
            break L205;
           }
          } else {
           $364 = ($k$0103$i|0)<(125);
           $367 = (_i64Add(($365|0),($366|0),1,0)|0);
           $368 = tempRet0;
           $369 = ($$3105$i|0)!=(48);
           if (!($364)) {
            if (!($369)) {
             $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
             break;
            }
            $379 = HEAP32[$362>>2]|0;
            $380 = $379 | 1;
            HEAP32[$362>>2] = $380;
            $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
            break;
           }
           $$lnz$0$i = $369 ? $367 : $lnz$0100$i;
           $370 = ($j$0104$i|0)==(0);
           $371 = (($x$i) + ($k$0103$i<<2)|0);
           if ($370) {
            $storemerge$i = $703;
           } else {
            $372 = HEAP32[$371>>2]|0;
            $373 = ($372*10)|0;
            $374 = (($$3105$i) + -48)|0;
            $375 = (($374) + ($373))|0;
            $storemerge$i = $375;
           }
           HEAP32[$371>>2] = $storemerge$i;
           $376 = (($j$0104$i) + 1)|0;
           $377 = ($376|0)==(9);
           $378 = $377&1;
           $$k$0$i = (($378) + ($k$0103$i))|0;
           $$11$i = $377 ? 0 : $376;
           $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $$11$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
          }
         } while(0);
         $381 = HEAP32[$0>>2]|0;
         $382 = HEAP32[$1>>2]|0;
         $383 = ($381>>>0)<($382>>>0);
         if ($383) {
          $384 = ((($381)) + 1|0);
          HEAP32[$0>>2] = $384;
          $385 = HEAP8[$381>>0]|0;
          $386 = $385&255;
          $$3$be$i = $386;
         } else {
          $387 = (___shgetc($f)|0);
          $$3$be$i = $387;
         }
         $388 = (($$3$be$i) + -48)|0;
         $389 = ($388>>>0)<(10);
         $390 = ($$3$be$i|0)==(46);
         $391 = $390 | $389;
         if ($391) {
          $$3105$i = $$3$be$i;$365 = $708;$366 = $709;$702 = $390;$703 = $388;$704 = $706;$705 = $707;$gotdig$3101$i = $gotdig$4$i;$gotrad$1102$i = $gotrad$2$i;$j$0104$i = $j$2$i;$k$0103$i = $k$2$i;$lnz$0100$i = $lnz$2$i;
         } else {
          $$3$lcssa$i = $$3$be$i;$393 = $706;$394 = $708;$396 = $707;$397 = $709;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
          label = 161;
          break L203;
         }
        }
        $363 = ($gotdig$3101$i$lcssa|0)!=(0);
        $714 = $712;$715 = $713;$716 = $710;$717 = $711;$718 = $363;$j$069$i = $j$0104$i$lcssa;$k$065$i = $k$0103$i$lcssa;$lnz$059$i = $lnz$0100$i$lcssa;
        label = 169;
       } else {
        $$3$lcssa$i = $$2$i;$393 = $700;$394 = 0;$396 = $701;$397 = 0;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $392 = ($gotrad$1$lcssa$i|0)==(0);
        $395 = $392 ? $394 : $393;
        $398 = $392 ? $397 : $396;
        $399 = ($gotdig$3$lcssa$i|0)!=(0);
        $400 = $$3$lcssa$i | 32;
        $401 = ($400|0)==(101);
        $or$cond13$i = $401 & $399;
        if (!($or$cond13$i)) {
         $416 = ($$3$lcssa$i|0)>(-1);
         if ($416) {
          $714 = $394;$715 = $397;$716 = $395;$717 = $398;$718 = $399;$j$069$i = $j$0$lcssa$i;$k$065$i = $k$0$lcssa$i;$lnz$059$i = $lnz$0$lcssa$i;
          label = 169;
          break;
         } else {
          $719 = $394;$720 = $397;$721 = $399;$722 = $395;$723 = $398;$j$068$i = $j$0$lcssa$i;$k$064$i = $k$0$lcssa$i;$lnz$058$i = $lnz$0$lcssa$i;
          label = 171;
          break;
         }
        }
        $402 = (_scanexp($f,$pok)|0);
        $403 = tempRet0;
        $404 = ($402|0)==(0);
        $405 = ($403|0)==(-2147483648);
        $406 = $404 & $405;
        if ($406) {
         $407 = ($pok|0)==(0);
         if ($407) {
          ___shlim($f,0);
          $$0$i27 = 0.0;
          break;
         }
         $408 = HEAP32[$1>>2]|0;
         $409 = ($408|0)==(0|0);
         if ($409) {
          $412 = 0;$413 = 0;
         } else {
          $410 = HEAP32[$0>>2]|0;
          $411 = ((($410)) + -1|0);
          HEAP32[$0>>2] = $411;
          $412 = 0;$413 = 0;
         }
        } else {
         $412 = $402;$413 = $403;
        }
        $414 = (_i64Add(($412|0),($413|0),($395|0),($398|0))|0);
        $415 = tempRet0;
        $426 = $414;$428 = $394;$429 = $415;$431 = $397;$j$067$i = $j$0$lcssa$i;$k$063$i = $k$0$lcssa$i;$lnz$057$i = $lnz$0$lcssa$i;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $417 = HEAP32[$1>>2]|0;
       $418 = ($417|0)==(0|0);
       if ($418) {
        $719 = $714;$720 = $715;$721 = $718;$722 = $716;$723 = $717;$j$068$i = $j$069$i;$k$064$i = $k$065$i;$lnz$058$i = $lnz$059$i;
        label = 171;
       } else {
        $419 = HEAP32[$0>>2]|0;
        $420 = ((($419)) + -1|0);
        HEAP32[$0>>2] = $420;
        if ($718) {
         $426 = $716;$428 = $714;$429 = $717;$431 = $715;$j$067$i = $j$069$i;$k$063$i = $k$065$i;$lnz$057$i = $lnz$059$i;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($721) {
        $426 = $722;$428 = $719;$429 = $723;$431 = $720;$j$067$i = $j$068$i;$k$063$i = $k$064$i;$lnz$057$i = $lnz$058$i;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $421 = (___errno_location()|0);
        HEAP32[$421>>2] = 22;
        ___shlim($f,0);
        $$0$i27 = 0.0;
       }
       else if ((label|0) == 173) {
        $422 = HEAP32[$x$i>>2]|0;
        $423 = ($422|0)==(0);
        if ($423) {
         $424 = (+($sign$0|0));
         $425 = $424 * 0.0;
         $$0$i27 = $425;
         break;
        }
        $427 = ($426|0)==($428|0);
        $430 = ($429|0)==($431|0);
        $432 = $427 & $430;
        $433 = ($431|0)<(0);
        $434 = ($428>>>0)<(10);
        $435 = ($431|0)==(0);
        $436 = $435 & $434;
        $437 = $433 | $436;
        $or$cond$i16 = $437 & $432;
        if ($or$cond$i16) {
         $438 = ($bits$0$ph>>>0)>(30);
         $439 = $422 >>> $bits$0$ph;
         $440 = ($439|0)==(0);
         $or$cond15$i = $438 | $440;
         if ($or$cond15$i) {
          $441 = (+($sign$0|0));
          $442 = (+($422>>>0));
          $443 = $441 * $442;
          $$0$i27 = $443;
          break;
         }
        }
        $444 = (($emin$0$ph|0) / -2)&-1;
        $445 = ($444|0)<(0);
        $446 = $445 << 31 >> 31;
        $447 = ($429|0)>($446|0);
        $448 = ($426>>>0)>($444>>>0);
        $449 = ($429|0)==($446|0);
        $450 = $449 & $448;
        $451 = $447 | $450;
        if ($451) {
         $452 = (___errno_location()|0);
         HEAP32[$452>>2] = 34;
         $453 = (+($sign$0|0));
         $454 = $453 * 1.7976931348623157E+308;
         $455 = $454 * 1.7976931348623157E+308;
         $$0$i27 = $455;
         break;
        }
        $456 = (($emin$0$ph) + -106)|0;
        $457 = ($456|0)<(0);
        $458 = $457 << 31 >> 31;
        $459 = ($429|0)<($458|0);
        $460 = ($426>>>0)<($456>>>0);
        $461 = ($429|0)==($458|0);
        $462 = $461 & $460;
        $463 = $459 | $462;
        if ($463) {
         $464 = (___errno_location()|0);
         HEAP32[$464>>2] = 34;
         $465 = (+($sign$0|0));
         $466 = $465 * 2.2250738585072014E-308;
         $467 = $466 * 2.2250738585072014E-308;
         $$0$i27 = $467;
         break;
        }
        $468 = ($j$067$i|0)==(0);
        if ($468) {
         $k$3$i = $k$063$i;
        } else {
         $469 = ($j$067$i|0)<(9);
         if ($469) {
          $470 = (($x$i) + ($k$063$i<<2)|0);
          $$promoted$i = HEAP32[$470>>2]|0;
          $472 = $$promoted$i;$j$394$i = $j$067$i;
          while(1) {
           $471 = ($472*10)|0;
           $473 = (($j$394$i) + 1)|0;
           $exitcond$i = ($473|0)==(9);
           if ($exitcond$i) {
            $$lcssa265 = $471;
            break;
           } else {
            $472 = $471;$j$394$i = $473;
           }
          }
          HEAP32[$470>>2] = $$lcssa265;
         }
         $474 = (($k$063$i) + 1)|0;
         $k$3$i = $474;
        }
        $475 = ($lnz$057$i|0)<(9);
        if ($475) {
         $476 = ($lnz$057$i|0)<=($426|0);
         $477 = ($426|0)<(18);
         $or$cond3$i = $476 & $477;
         if ($or$cond3$i) {
          $478 = ($426|0)==(9);
          if ($478) {
           $479 = (+($sign$0|0));
           $480 = HEAP32[$x$i>>2]|0;
           $481 = (+($480>>>0));
           $482 = $479 * $481;
           $$0$i27 = $482;
           break;
          }
          $483 = ($426|0)<(9);
          if ($483) {
           $484 = (+($sign$0|0));
           $485 = HEAP32[$x$i>>2]|0;
           $486 = (+($485>>>0));
           $487 = $484 * $486;
           $488 = (8 - ($426))|0;
           $489 = (14400 + ($488<<2)|0);
           $490 = HEAP32[$489>>2]|0;
           $491 = (+($490|0));
           $492 = $487 / $491;
           $$0$i27 = $492;
           break;
          }
          $$neg32$i = (($bits$0$ph) + 27)|0;
          $493 = Math_imul($426, -3)|0;
          $494 = (($$neg32$i) + ($493))|0;
          $495 = ($494|0)>(30);
          $$pre$i17 = HEAP32[$x$i>>2]|0;
          $496 = $$pre$i17 >>> $494;
          $497 = ($496|0)==(0);
          $or$cond182$i = $495 | $497;
          if ($or$cond182$i) {
           $498 = (+($sign$0|0));
           $499 = (+($$pre$i17>>>0));
           $500 = $498 * $499;
           $501 = (($426) + -10)|0;
           $502 = (14400 + ($501<<2)|0);
           $503 = HEAP32[$502>>2]|0;
           $504 = (+($503|0));
           $505 = $500 * $504;
           $$0$i27 = $505;
           break;
          }
         }
        }
        $506 = (($426|0) % 9)&-1;
        $507 = ($506|0)==(0);
        if ($507) {
         $a$2$ph38$i = 0;$e2$0$ph$i = 0;$rp$2$ph36$i = $426;$z$1$ph37$i = $k$3$i;
        } else {
         $508 = ($426|0)>(-1);
         $509 = (($506) + 9)|0;
         $510 = $508 ? $506 : $509;
         $511 = (8 - ($510))|0;
         $512 = (14400 + ($511<<2)|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = ($k$3$i|0)==(0);
         if ($514) {
          $a$0$lcssa151$i = 0;$rp$0$lcssa152$i = $426;$z$0$i = 0;
         } else {
          $515 = (1000000000 / ($513|0))&-1;
          $a$085$i = 0;$carry$087$i = 0;$k$486$i = 0;$rp$084$i = $426;
          while(1) {
           $516 = (($x$i) + ($k$486$i<<2)|0);
           $517 = HEAP32[$516>>2]|0;
           $518 = (($517>>>0) % ($513>>>0))&-1;
           $519 = (($517>>>0) / ($513>>>0))&-1;
           $520 = (($519) + ($carry$087$i))|0;
           HEAP32[$516>>2] = $520;
           $521 = Math_imul($518, $515)|0;
           $522 = ($k$486$i|0)==($a$085$i|0);
           $523 = ($520|0)==(0);
           $or$cond16$i = $522 & $523;
           $524 = (($k$486$i) + 1)|0;
           $525 = $524 & 127;
           $526 = (($rp$084$i) + -9)|0;
           $rp$1$i18 = $or$cond16$i ? $526 : $rp$084$i;
           $a$1$i = $or$cond16$i ? $525 : $a$085$i;
           $527 = ($524|0)==($k$3$i|0);
           if ($527) {
            $$lcssa264 = $521;$a$1$i$lcssa = $a$1$i;$rp$1$i18$lcssa = $rp$1$i18;
            break;
           } else {
            $a$085$i = $a$1$i;$carry$087$i = $521;$k$486$i = $524;$rp$084$i = $rp$1$i18;
           }
          }
          $528 = ($$lcssa264|0)==(0);
          if ($528) {
           $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $k$3$i;
          } else {
           $529 = (($k$3$i) + 1)|0;
           $530 = (($x$i) + ($k$3$i<<2)|0);
           HEAP32[$530>>2] = $$lcssa264;
           $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $529;
          }
         }
         $531 = (9 - ($510))|0;
         $532 = (($531) + ($rp$0$lcssa152$i))|0;
         $a$2$ph38$i = $a$0$lcssa151$i;$e2$0$ph$i = 0;$rp$2$ph36$i = $532;$z$1$ph37$i = $z$0$i;
        }
        L284: while(1) {
         $533 = ($rp$2$ph36$i|0)<(18);
         $534 = ($rp$2$ph36$i|0)==(18);
         $535 = (($x$i) + ($a$2$ph38$i<<2)|0);
         $e2$0$i19 = $e2$0$ph$i;$z$1$i = $z$1$ph37$i;
         while(1) {
          if (!($533)) {
           if (!($534)) {
            $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = $rp$2$ph36$i;$z$5$ph$i = $z$1$i;
            break L284;
           }
           $536 = HEAP32[$535>>2]|0;
           $537 = ($536>>>0)<(9007199);
           if (!($537)) {
            $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = 18;$z$5$ph$i = $z$1$i;
            break L284;
           }
          }
          $538 = (($z$1$i) + 127)|0;
          $carry1$0$i = 0;$k$5$in$i = $538;$z$2$i = $z$1$i;
          while(1) {
           $k$5$i = $k$5$in$i & 127;
           $539 = (($x$i) + ($k$5$i<<2)|0);
           $540 = HEAP32[$539>>2]|0;
           $541 = (_bitshift64Shl(($540|0),0,29)|0);
           $542 = tempRet0;
           $543 = (_i64Add(($541|0),($542|0),($carry1$0$i|0),0)|0);
           $544 = tempRet0;
           $545 = ($544>>>0)>(0);
           $546 = ($543>>>0)>(1000000000);
           $547 = ($544|0)==(0);
           $548 = $547 & $546;
           $549 = $545 | $548;
           if ($549) {
            $550 = (___udivdi3(($543|0),($544|0),1000000000,0)|0);
            $551 = tempRet0;
            $552 = (___uremdi3(($543|0),($544|0),1000000000,0)|0);
            $553 = tempRet0;
            $$sink$off0$i = $552;$carry1$1$i = $550;
           } else {
            $$sink$off0$i = $543;$carry1$1$i = 0;
           }
           HEAP32[$539>>2] = $$sink$off0$i;
           $554 = (($z$2$i) + 127)|0;
           $555 = $554 & 127;
           $556 = ($k$5$i|0)!=($555|0);
           $557 = ($k$5$i|0)==($a$2$ph38$i|0);
           $or$cond17$i = $556 | $557;
           $558 = ($$sink$off0$i|0)==(0);
           $k$5$z$2$i = $558 ? $k$5$i : $z$2$i;
           $z$3$i = $or$cond17$i ? $z$2$i : $k$5$z$2$i;
           $559 = (($k$5$i) + -1)|0;
           if ($557) {
            $carry1$1$i$lcssa = $carry1$1$i;$z$3$i$lcssa = $z$3$i;
            break;
           } else {
            $carry1$0$i = $carry1$1$i;$k$5$in$i = $559;$z$2$i = $z$3$i;
           }
          }
          $560 = (($e2$0$i19) + -29)|0;
          $561 = ($carry1$1$i$lcssa|0)==(0);
          if ($561) {
           $e2$0$i19 = $560;$z$1$i = $z$3$i$lcssa;
          } else {
           $$lcssa263 = $560;$carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;$z$3$i$lcssa$lcssa = $z$3$i$lcssa;
           break;
          }
         }
         $562 = (($rp$2$ph36$i) + 9)|0;
         $563 = (($a$2$ph38$i) + 127)|0;
         $564 = $563 & 127;
         $565 = ($564|0)==($z$3$i$lcssa$lcssa|0);
         if ($565) {
          $566 = (($z$3$i$lcssa$lcssa) + 127)|0;
          $567 = $566 & 127;
          $568 = (($x$i) + ($567<<2)|0);
          $569 = HEAP32[$568>>2]|0;
          $570 = (($z$3$i$lcssa$lcssa) + 126)|0;
          $571 = $570 & 127;
          $572 = (($x$i) + ($571<<2)|0);
          $573 = HEAP32[$572>>2]|0;
          $574 = $573 | $569;
          HEAP32[$572>>2] = $574;
          $z$4$i = $567;
         } else {
          $z$4$i = $z$3$i$lcssa$lcssa;
         }
         $575 = (($x$i) + ($564<<2)|0);
         HEAP32[$575>>2] = $carry1$1$i$lcssa$lcssa;
         $a$2$ph38$i = $564;$e2$0$ph$i = $$lcssa263;$rp$2$ph36$i = $562;$z$1$ph37$i = $z$4$i;
        }
        L302: while(1) {
         $606 = (($z$5$ph$i) + 1)|0;
         $603 = $606 & 127;
         $607 = (($z$5$ph$i) + 127)|0;
         $608 = $607 & 127;
         $609 = (($x$i) + ($608<<2)|0);
         $a$3$ph157$i = $a$3$ph$i;$e2$1$ph156$i = $e2$1$ph$i;$rp$3$ph$i = $rp$3$ph34$i;
         while(1) {
          $610 = ($rp$3$ph$i|0)==(18);
          $611 = ($rp$3$ph$i|0)>(27);
          $$18$i = $611 ? 9 : 1;
          $$not$i = $610 ^ 1;
          $a$3$i = $a$3$ph157$i;$e2$1$i = $e2$1$ph156$i;
          while(1) {
           $576 = $a$3$i & 127;
           $577 = ($576|0)==($z$5$ph$i|0);
           do {
            if ($577) {
             label = 219;
            } else {
             $578 = (($x$i) + ($576<<2)|0);
             $579 = HEAP32[$578>>2]|0;
             $580 = ($579>>>0)<(9007199);
             if ($580) {
              label = 219;
              break;
             }
             $581 = ($579>>>0)>(9007199);
             if ($581) {
              break;
             }
             $582 = (($a$3$i) + 1)|0;
             $583 = $582 & 127;
             $584 = ($583|0)==($z$5$ph$i|0);
             if ($584) {
              label = 219;
              break;
             }
             $690 = (($x$i) + ($583<<2)|0);
             $691 = HEAP32[$690>>2]|0;
             $692 = ($691>>>0)<(254740991);
             if ($692) {
              label = 219;
              break;
             }
             $693 = ($691>>>0)>(254740991);
             $brmerge$i28 = $693 | $$not$i;
             if (!($brmerge$i28)) {
              $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
              break L302;
             }
            }
           } while(0);
           if ((label|0) == 219) {
            label = 0;
            if ($610) {
             label = 220;
             break L302;
            }
           }
           $585 = (($e2$1$i) + ($$18$i))|0;
           $586 = ($a$3$i|0)==($z$5$ph$i|0);
           if ($586) {
            $a$3$i = $z$5$ph$i;$e2$1$i = $585;
           } else {
            $$lcssa256 = $585;$a$3$i$lcssa248 = $a$3$i;
            break;
           }
          }
          $587 = 1 << $$18$i;
          $588 = (($587) + -1)|0;
          $589 = 1000000000 >>> $$18$i;
          $a$478$i = $a$3$i$lcssa248;$carry3$081$i = 0;$k$679$i = $a$3$i$lcssa248;$rp$477$i = $rp$3$ph$i;
          while(1) {
           $590 = (($x$i) + ($k$679$i<<2)|0);
           $591 = HEAP32[$590>>2]|0;
           $592 = $591 & $588;
           $593 = $591 >>> $$18$i;
           $594 = (($593) + ($carry3$081$i))|0;
           HEAP32[$590>>2] = $594;
           $595 = Math_imul($592, $589)|0;
           $596 = ($k$679$i|0)==($a$478$i|0);
           $597 = ($594|0)==(0);
           $or$cond19$i = $596 & $597;
           $598 = (($k$679$i) + 1)|0;
           $599 = $598 & 127;
           $600 = (($rp$477$i) + -9)|0;
           $rp$5$i = $or$cond19$i ? $600 : $rp$477$i;
           $a$5$i = $or$cond19$i ? $599 : $a$478$i;
           $601 = ($599|0)==($z$5$ph$i|0);
           if ($601) {
            $$lcssa257 = $595;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
            break;
           } else {
            $a$478$i = $a$5$i;$carry3$081$i = $595;$k$679$i = $599;$rp$477$i = $rp$5$i;
           }
          }
          $602 = ($$lcssa257|0)==(0);
          if ($602) {
           $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
           continue;
          }
          $604 = ($603|0)==($a$5$i$lcssa|0);
          if (!($604)) {
           $$lcssa256$lcssa = $$lcssa256;$$lcssa257$lcssa = $$lcssa257;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
           break;
          }
          $612 = HEAP32[$609>>2]|0;
          $613 = $612 | 1;
          HEAP32[$609>>2] = $613;
          $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
         }
         $605 = (($x$i) + ($z$5$ph$i<<2)|0);
         HEAP32[$605>>2] = $$lcssa257$lcssa;
         $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa256$lcssa;$rp$3$ph34$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $603;
        }
        if ((label|0) == 220) {
         if ($577) {
          $614 = (($603) + -1)|0;
          $615 = (($x$i) + ($614<<2)|0);
          HEAP32[$615>>2] = 0;
          $617 = $z$5$ph$i;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $603;
         } else {
          $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
         }
        }
        $616 = (($x$i) + ($617<<2)|0);
        $618 = HEAP32[$616>>2]|0;
        $619 = (+($618>>>0));
        $620 = (($a$3$i249) + 1)|0;
        $621 = $620 & 127;
        $622 = ($621|0)==($z$7$i|0);
        if ($622) {
         $679 = (($a$3$i249) + 2)|0;
         $680 = $679 & 127;
         $681 = (($680) + -1)|0;
         $682 = (($x$i) + ($681<<2)|0);
         HEAP32[$682>>2] = 0;
         $z$7$1$i = $680;
        } else {
         $z$7$1$i = $z$7$i;
        }
        $683 = $619 * 1.0E+9;
        $684 = (($x$i) + ($621<<2)|0);
        $685 = HEAP32[$684>>2]|0;
        $686 = (+($685>>>0));
        $687 = $683 + $686;
        $643 = (+($sign$0|0));
        $625 = $643 * $687;
        $663 = (($e2$1$i246) + 53)|0;
        $669 = (($663) - ($emin$0$ph))|0;
        $670 = ($669|0)<($bits$0$ph|0);
        $688 = ($669|0)<(0);
        $$$i = $688 ? 0 : $669;
        $denormal$0$i = $670&1;
        $$010$i = $670 ? $$$i : $bits$0$ph;
        $689 = ($$010$i|0)<(53);
        if ($689) {
         $623 = (105 - ($$010$i))|0;
         $624 = (+_scalbn(1.0,$623));
         $626 = (+_copysignl($624,$625));
         $627 = (53 - ($$010$i))|0;
         $628 = (+_scalbn(1.0,$627));
         $629 = (+_fmodl($625,$628));
         $630 = $625 - $629;
         $631 = $626 + $630;
         $bias$0$i25 = $626;$frac$0$i = $629;$y$1$i24 = $631;
        } else {
         $bias$0$i25 = 0.0;$frac$0$i = 0.0;$y$1$i24 = $625;
        }
        $632 = (($a$3$i249) + 2)|0;
        $633 = $632 & 127;
        $634 = ($633|0)==($z$7$1$i|0);
        do {
         if ($634) {
          $frac$2$i = $frac$0$i;
         } else {
          $635 = (($x$i) + ($633<<2)|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636>>>0)<(500000000);
          do {
           if ($637) {
            $638 = ($636|0)==(0);
            if ($638) {
             $639 = (($a$3$i249) + 3)|0;
             $640 = $639 & 127;
             $641 = ($640|0)==($z$7$1$i|0);
             if ($641) {
              $frac$1$i = $frac$0$i;
              break;
             }
            }
            $642 = $643 * 0.25;
            $644 = $642 + $frac$0$i;
            $frac$1$i = $644;
           } else {
            $645 = ($636>>>0)>(500000000);
            if ($645) {
             $646 = $643 * 0.75;
             $647 = $646 + $frac$0$i;
             $frac$1$i = $647;
             break;
            }
            $648 = (($a$3$i249) + 3)|0;
            $649 = $648 & 127;
            $650 = ($649|0)==($z$7$1$i|0);
            if ($650) {
             $651 = $643 * 0.5;
             $652 = $651 + $frac$0$i;
             $frac$1$i = $652;
             break;
            } else {
             $653 = $643 * 0.75;
             $654 = $653 + $frac$0$i;
             $frac$1$i = $654;
             break;
            }
           }
          } while(0);
          $655 = (53 - ($$010$i))|0;
          $656 = ($655|0)>(1);
          if (!($656)) {
           $frac$2$i = $frac$1$i;
           break;
          }
          $657 = (+_fmodl($frac$1$i,1.0));
          $658 = $657 != 0.0;
          if ($658) {
           $frac$2$i = $frac$1$i;
           break;
          }
          $659 = $frac$1$i + 1.0;
          $frac$2$i = $659;
         }
        } while(0);
        $660 = $y$1$i24 + $frac$2$i;
        $661 = $660 - $bias$0$i25;
        $662 = $663 & 2147483647;
        $664 = (-2 - ($sum$i))|0;
        $665 = ($662|0)>($664|0);
        do {
         if ($665) {
          $666 = (+Math_abs((+$661)));
          $667 = !($666 >= 9007199254740992.0);
          if ($667) {
           $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i246;$y$2$i26 = $661;
          } else {
           $668 = ($$010$i|0)==($669|0);
           $or$cond20$i = $670 & $668;
           $denormal$1$i = $or$cond20$i ? 0 : $denormal$0$i;
           $671 = $661 * 0.5;
           $672 = (($e2$1$i246) + 1)|0;
           $denormal$2$i = $denormal$1$i;$e2$2$i = $672;$y$2$i26 = $671;
          }
          $673 = (($e2$2$i) + 50)|0;
          $674 = ($673|0)>($330|0);
          if (!($674)) {
           $675 = ($denormal$2$i|0)!=(0);
           $676 = $frac$2$i != 0.0;
           $or$cond8$i = $676 & $675;
           if (!($or$cond8$i)) {
            $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
            break;
           }
          }
          $677 = (___errno_location()|0);
          HEAP32[$677>>2] = 34;
          $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
         } else {
          $e2$3$i = $e2$1$i246;$y$3$i = $661;
         }
        } while(0);
        $678 = (+_scalbnl($y$3$i,$e2$3$i));
        $$0$i27 = $678;
       }
      } while(0);
      $$0 = $$0$i27;
      break L4;
      break;
     }
     default: {
      $109 = HEAP32[$1>>2]|0;
      $110 = ($109|0)==(0|0);
      if (!($110)) {
       $111 = HEAP32[$0>>2]|0;
       $112 = ((($111)) + -1|0);
       HEAP32[$0>>2] = $112;
      }
      $113 = (___errno_location()|0);
      HEAP32[$113>>2] = 22;
      ___shlim($f,0);
      $$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $41 = HEAP32[$1>>2]|0;
    $42 = ($41|0)==(0|0);
    if (!($42)) {
     $43 = HEAP32[$0>>2]|0;
     $44 = ((($43)) + -1|0);
     HEAP32[$0>>2] = $44;
    }
    $45 = ($pok|0)!=(0);
    $46 = ($i$0$lcssa>>>0)>(3);
    $or$cond9 = $45 & $46;
    if ($or$cond9) {
     $i$1 = $i$0$lcssa;
     while(1) {
      if (!($42)) {
       $47 = HEAP32[$0>>2]|0;
       $48 = ((($47)) + -1|0);
       HEAP32[$0>>2] = $48;
      }
      $49 = (($i$1) + -1)|0;
      $$old8 = ($49>>>0)>(3);
      if ($$old8) {
       $i$1 = $49;
      } else {
       break;
      }
     }
    }
   }
   $50 = (+($sign$0|0));
   $51 = $50 * inf;
   $52 = $51;
   $$0 = $52;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$122 = 0, $$123 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa130 = 0, $$lcssa131 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa135 = 0, $$sum = 0, $$sum14 = 0, $$sum1445 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum1865 = 0, $$sum19 = 0;
 var $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$124 = 0, $c$2$be = 0, $c$2$be$lcssa = 0;
 var $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$371 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$753 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond40 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$082 = 0, $x$146 = 0, $x$266 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 L1: do {
  if ($2) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $286 = 0;$287 = 0;
  } else {
   $3 = ((($f)) + 4|0);
   $4 = ((($f)) + 100|0);
   while(1) {
    $6 = HEAP32[$3>>2]|0;
    $7 = HEAP32[$4>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$3>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($f)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$lcssa135 = $13;
     break;
    }
   }
   $16 = ($$lcssa135|0)==(45);
   L11: do {
    switch ($$lcssa135|0) {
    case 43: case 45:  {
     $17 = $16 << 31 >> 31;
     $18 = HEAP32[$3>>2]|0;
     $19 = HEAP32[$4>>2]|0;
     $20 = ($18>>>0)<($19>>>0);
     if ($20) {
      $21 = ((($18)) + 1|0);
      HEAP32[$3>>2] = $21;
      $22 = HEAP8[$18>>0]|0;
      $23 = $22&255;
      $c$0 = $23;$neg$0 = $17;
      break L11;
     } else {
      $24 = (___shgetc($f)|0);
      $c$0 = $24;$neg$0 = $17;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa135;$neg$0 = 0;
    }
    }
   } while(0);
   $25 = ($base|0)==(0);
   $26 = $base & -17;
   $27 = ($26|0)==(0);
   $28 = ($c$0|0)==(48);
   $or$cond5 = $27 & $28;
   do {
    if ($or$cond5) {
     $29 = HEAP32[$3>>2]|0;
     $30 = HEAP32[$4>>2]|0;
     $31 = ($29>>>0)<($30>>>0);
     if ($31) {
      $32 = ((($29)) + 1|0);
      HEAP32[$3>>2] = $32;
      $33 = HEAP8[$29>>0]|0;
      $34 = $33&255;
      $37 = $34;
     } else {
      $35 = (___shgetc($f)|0);
      $37 = $35;
     }
     $36 = $37 | 32;
     $38 = ($36|0)==(120);
     if (!($38)) {
      if ($25) {
       $$123 = 8;$c$124 = $37;
       label = 46;
       break;
      } else {
       $$1 = $base;$c$1 = $37;
       label = 32;
       break;
      }
     }
     $39 = HEAP32[$3>>2]|0;
     $40 = HEAP32[$4>>2]|0;
     $41 = ($39>>>0)<($40>>>0);
     if ($41) {
      $42 = ((($39)) + 1|0);
      HEAP32[$3>>2] = $42;
      $43 = HEAP8[$39>>0]|0;
      $44 = $43&255;
      $46 = $44;
     } else {
      $45 = (___shgetc($f)|0);
      $46 = $45;
     }
     $$sum20 = (($46) + 1)|0;
     $47 = (170261 + ($$sum20)|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = ($48&255)>(15);
     if ($49) {
      $50 = HEAP32[$4>>2]|0;
      $51 = ($50|0)==(0|0);
      if (!($51)) {
       $52 = HEAP32[$3>>2]|0;
       $53 = ((($52)) + -1|0);
       HEAP32[$3>>2] = $53;
      }
      $54 = ($pok|0)==(0);
      if ($54) {
       ___shlim($f,0);
       $286 = 0;$287 = 0;
       break L1;
      }
      if ($51) {
       $286 = 0;$287 = 0;
       break L1;
      }
      $55 = HEAP32[$3>>2]|0;
      $56 = ((($55)) + -1|0);
      HEAP32[$3>>2] = $56;
      $286 = 0;$287 = 0;
      break L1;
     } else {
      $$123 = 16;$c$124 = $46;
      label = 46;
     }
    } else {
     $$base21 = $25 ? 10 : $base;
     $$sum = (($c$0) + 1)|0;
     $57 = (170261 + ($$sum)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = ($59>>>0)<($$base21>>>0);
     if ($60) {
      $$1 = $$base21;$c$1 = $c$0;
      label = 32;
     } else {
      $61 = HEAP32[$4>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $63 = HEAP32[$3>>2]|0;
       $64 = ((($63)) + -1|0);
       HEAP32[$3>>2] = $64;
      }
      ___shlim($f,0);
      $65 = (___errno_location()|0);
      HEAP32[$65>>2] = 22;
      $286 = 0;$287 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $66 = ($$1|0)==(10);
    if ($66) {
     $67 = (($c$1) + -48)|0;
     $68 = ($67>>>0)<(10);
     if ($68) {
      $71 = $67;$x$082 = 0;
      while(1) {
       $69 = ($x$082*10)|0;
       $70 = (($69) + ($71))|0;
       $72 = HEAP32[$3>>2]|0;
       $73 = HEAP32[$4>>2]|0;
       $74 = ($72>>>0)<($73>>>0);
       if ($74) {
        $75 = ((($72)) + 1|0);
        HEAP32[$3>>2] = $75;
        $76 = HEAP8[$72>>0]|0;
        $77 = $76&255;
        $c$2$be = $77;
       } else {
        $78 = (___shgetc($f)|0);
        $c$2$be = $78;
       }
       $79 = (($c$2$be) + -48)|0;
       $80 = ($79>>>0)<(10);
       $81 = ($70>>>0)<(429496729);
       $82 = $80 & $81;
       if ($82) {
        $71 = $79;$x$082 = $70;
       } else {
        $$lcssa134 = $70;$c$2$be$lcssa = $c$2$be;
        break;
       }
      }
      $288 = $$lcssa134;$289 = 0;$c$2$lcssa = $c$2$be$lcssa;
     } else {
      $288 = 0;$289 = 0;$c$2$lcssa = $c$1;
     }
     $83 = (($c$2$lcssa) + -48)|0;
     $84 = ($83>>>0)<(10);
     if ($84) {
      $85 = $288;$86 = $289;$89 = $83;$c$371 = $c$2$lcssa;
      while(1) {
       $87 = (___muldi3(($85|0),($86|0),10,0)|0);
       $88 = tempRet0;
       $90 = ($89|0)<(0);
       $91 = $90 << 31 >> 31;
       $92 = $89 ^ -1;
       $93 = $91 ^ -1;
       $94 = ($88>>>0)>($93>>>0);
       $95 = ($87>>>0)>($92>>>0);
       $96 = ($88|0)==($93|0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        $$lcssa = $89;$290 = $85;$291 = $86;$c$3$lcssa = $c$371;
        break;
       }
       $99 = (_i64Add(($87|0),($88|0),($89|0),($91|0))|0);
       $100 = tempRet0;
       $101 = HEAP32[$3>>2]|0;
       $102 = HEAP32[$4>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $104 = ((($101)) + 1|0);
        HEAP32[$3>>2] = $104;
        $105 = HEAP8[$101>>0]|0;
        $106 = $105&255;
        $c$3$be = $106;
       } else {
        $107 = (___shgetc($f)|0);
        $c$3$be = $107;
       }
       $108 = (($c$3$be) + -48)|0;
       $109 = ($108>>>0)<(10);
       $110 = ($100>>>0)<(429496729);
       $111 = ($99>>>0)<(2576980378);
       $112 = ($100|0)==(429496729);
       $113 = $112 & $111;
       $114 = $110 | $113;
       $or$cond7 = $109 & $114;
       if ($or$cond7) {
        $85 = $99;$86 = $100;$89 = $108;$c$371 = $c$3$be;
       } else {
        $$lcssa = $108;$290 = $99;$291 = $100;$c$3$lcssa = $c$3$be;
        break;
       }
      }
      $115 = ($$lcssa>>>0)>(9);
      if ($115) {
       $259 = $291;$261 = $290;$neg$1 = $neg$0;
      } else {
       $$122 = 10;$292 = $290;$293 = $291;$c$8 = $c$3$lcssa;
       label = 72;
      }
     } else {
      $259 = $289;$261 = $288;$neg$1 = $neg$0;
     }
    } else {
     $$123 = $$1;$c$124 = $c$1;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $116 = (($$123) + -1)|0;
     $117 = $116 & $$123;
     $118 = ($117|0)==(0);
     if ($118) {
      $123 = ($$123*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (170518 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $$sum1445 = (($c$124) + 1)|0;
      $129 = (170261 + ($$sum1445)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($131>>>0)<($$123>>>0);
      if ($132) {
       $135 = $131;$x$146 = 0;
       while(1) {
        $133 = $x$146 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$3>>2]|0;
        $137 = HEAP32[$4>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$3>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $c$4$be = $141;
        } else {
         $142 = (___shgetc($f)|0);
         $c$4$be = $142;
        }
        $$sum14 = (($c$4$be) + 1)|0;
        $143 = (170261 + ($$sum14)|0);
        $144 = HEAP8[$143>>0]|0;
        $145 = $144&255;
        $146 = ($145>>>0)<($$123>>>0);
        $147 = ($134>>>0)<(134217728);
        $148 = $147 & $146;
        if ($148) {
         $135 = $145;$x$146 = $134;
        } else {
         $$lcssa130 = $134;$$lcssa131 = $144;$c$4$be$lcssa = $c$4$be;
         break;
        }
       }
       $152 = $$lcssa131;$154 = 0;$156 = $$lcssa130;$c$4$lcssa = $c$4$be$lcssa;
      } else {
       $152 = $130;$154 = 0;$156 = 0;$c$4$lcssa = $c$124;
      }
      $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $150 = tempRet0;
      $151 = $152&255;
      $153 = ($151>>>0)>=($$123>>>0);
      $155 = ($154>>>0)>($150>>>0);
      $157 = ($156>>>0)>($149>>>0);
      $158 = ($154|0)==($150|0);
      $159 = $158 & $157;
      $160 = $155 | $159;
      $or$cond40 = $153 | $160;
      if ($or$cond40) {
       $$122 = $$123;$292 = $156;$293 = $154;$c$8 = $c$4$lcssa;
       label = 72;
       break;
      } else {
       $161 = $156;$162 = $154;$166 = $152;
      }
      while(1) {
       $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
       $164 = tempRet0;
       $165 = $166&255;
       $167 = $165 | $163;
       $168 = HEAP32[$3>>2]|0;
       $169 = HEAP32[$4>>2]|0;
       $170 = ($168>>>0)<($169>>>0);
       if ($170) {
        $171 = ((($168)) + 1|0);
        HEAP32[$3>>2] = $171;
        $172 = HEAP8[$168>>0]|0;
        $173 = $172&255;
        $c$5$be = $173;
       } else {
        $174 = (___shgetc($f)|0);
        $c$5$be = $174;
       }
       $$sum15 = (($c$5$be) + 1)|0;
       $175 = (170261 + ($$sum15)|0);
       $176 = HEAP8[$175>>0]|0;
       $177 = $176&255;
       $178 = ($177>>>0)>=($$123>>>0);
       $179 = ($164>>>0)>($150>>>0);
       $180 = ($167>>>0)>($149>>>0);
       $181 = ($164|0)==($150|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$122 = $$123;$292 = $167;$293 = $164;$c$8 = $c$5$be;
        label = 72;
        break L63;
       } else {
        $161 = $167;$162 = $164;$166 = $176;
       }
      }
     }
     $$sum1865 = (($c$124) + 1)|0;
     $119 = (170261 + ($$sum1865)|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = ($121>>>0)<($$123>>>0);
     if ($122) {
      $186 = $121;$x$266 = 0;
      while(1) {
       $184 = Math_imul($x$266, $$123)|0;
       $185 = (($186) + ($184))|0;
       $187 = HEAP32[$3>>2]|0;
       $188 = HEAP32[$4>>2]|0;
       $189 = ($187>>>0)<($188>>>0);
       if ($189) {
        $190 = ((($187)) + 1|0);
        HEAP32[$3>>2] = $190;
        $191 = HEAP8[$187>>0]|0;
        $192 = $191&255;
        $c$6$be = $192;
       } else {
        $193 = (___shgetc($f)|0);
        $c$6$be = $193;
       }
       $$sum18 = (($c$6$be) + 1)|0;
       $194 = (170261 + ($$sum18)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = ($196>>>0)<($$123>>>0);
       $198 = ($185>>>0)<(119304647);
       $199 = $198 & $197;
       if ($199) {
        $186 = $196;$x$266 = $185;
       } else {
        $$lcssa132 = $185;$$lcssa133 = $195;$c$6$be$lcssa = $c$6$be;
        break;
       }
      }
      $201 = $$lcssa133;$294 = $$lcssa132;$295 = 0;$c$6$lcssa = $c$6$be$lcssa;
     } else {
      $201 = $120;$294 = 0;$295 = 0;$c$6$lcssa = $c$124;
     }
     $200 = $201&255;
     $202 = ($200>>>0)<($$123>>>0);
     if ($202) {
      $203 = (___udivdi3(-1,-1,($$123|0),0)|0);
      $204 = tempRet0;
      $205 = $295;$207 = $294;$215 = $201;$c$753 = $c$6$lcssa;
      while(1) {
       $206 = ($205>>>0)>($204>>>0);
       $208 = ($207>>>0)>($203>>>0);
       $209 = ($205|0)==($204|0);
       $210 = $209 & $208;
       $211 = $206 | $210;
       if ($211) {
        $$122 = $$123;$292 = $207;$293 = $205;$c$8 = $c$753;
        label = 72;
        break L63;
       }
       $212 = (___muldi3(($207|0),($205|0),($$123|0),0)|0);
       $213 = tempRet0;
       $214 = $215&255;
       $216 = $214 ^ -1;
       $217 = ($213>>>0)>(4294967295);
       $218 = ($212>>>0)>($216>>>0);
       $219 = ($213|0)==(-1);
       $220 = $219 & $218;
       $221 = $217 | $220;
       if ($221) {
        $$122 = $$123;$292 = $207;$293 = $205;$c$8 = $c$753;
        label = 72;
        break L63;
       }
       $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
       $223 = tempRet0;
       $224 = HEAP32[$3>>2]|0;
       $225 = HEAP32[$4>>2]|0;
       $226 = ($224>>>0)<($225>>>0);
       if ($226) {
        $227 = ((($224)) + 1|0);
        HEAP32[$3>>2] = $227;
        $228 = HEAP8[$224>>0]|0;
        $229 = $228&255;
        $c$7$be = $229;
       } else {
        $230 = (___shgetc($f)|0);
        $c$7$be = $230;
       }
       $$sum19 = (($c$7$be) + 1)|0;
       $231 = (170261 + ($$sum19)|0);
       $232 = HEAP8[$231>>0]|0;
       $233 = $232&255;
       $234 = ($233>>>0)<($$123>>>0);
       if ($234) {
        $205 = $223;$207 = $222;$215 = $232;$c$753 = $c$7$be;
       } else {
        $$122 = $$123;$292 = $222;$293 = $223;$c$8 = $c$7$be;
        label = 72;
        break;
       }
      }
     } else {
      $$122 = $$123;$292 = $294;$293 = $295;$c$8 = $c$6$lcssa;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $$sum16 = (($c$8) + 1)|0;
    $235 = (170261 + ($$sum16)|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = ($237>>>0)<($$122>>>0);
    if ($238) {
     while(1) {
      $239 = HEAP32[$3>>2]|0;
      $240 = HEAP32[$4>>2]|0;
      $241 = ($239>>>0)<($240>>>0);
      if ($241) {
       $242 = ((($239)) + 1|0);
       HEAP32[$3>>2] = $242;
       $243 = HEAP8[$239>>0]|0;
       $244 = $243&255;
       $c$9$be = $244;
      } else {
       $245 = (___shgetc($f)|0);
       $c$9$be = $245;
      }
      $$sum17 = (($c$9$be) + 1)|0;
      $246 = (170261 + ($$sum17)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = ($248>>>0)<($$122>>>0);
      if (!($249)) {
       break;
      }
     }
     $250 = (___errno_location()|0);
     HEAP32[$250>>2] = 34;
     $251 = $0 & 1;
     $252 = ($251|0)==(0);
     $253 = (0)==(0);
     $254 = $252 & $253;
     $neg$0$ = $254 ? $neg$0 : 0;
     $259 = $1;$261 = $0;$neg$1 = $neg$0$;
    } else {
     $259 = $293;$261 = $292;$neg$1 = $neg$0;
    }
   }
   $255 = HEAP32[$4>>2]|0;
   $256 = ($255|0)==(0|0);
   if (!($256)) {
    $257 = HEAP32[$3>>2]|0;
    $258 = ((($257)) + -1|0);
    HEAP32[$3>>2] = $258;
   }
   $260 = ($259>>>0)<($1>>>0);
   $262 = ($261>>>0)<($0>>>0);
   $263 = ($259|0)==($1|0);
   $264 = $263 & $262;
   $265 = $260 | $264;
   if (!($265)) {
    $266 = $0 & 1;
    $267 = ($266|0)!=(0);
    $268 = (0)!=(0);
    $269 = $267 | $268;
    $270 = ($neg$1|0)!=(0);
    $or$cond12 = $269 | $270;
    if (!($or$cond12)) {
     $271 = (___errno_location()|0);
     HEAP32[$271>>2] = 34;
     $272 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $273 = tempRet0;
     $286 = $273;$287 = $272;
     break;
    }
    $274 = ($259>>>0)>($1>>>0);
    $275 = ($261>>>0)>($0>>>0);
    $276 = ($259|0)==($1|0);
    $277 = $276 & $275;
    $278 = $274 | $277;
    if ($278) {
     $279 = (___errno_location()|0);
     HEAP32[$279>>2] = 34;
     $286 = $1;$287 = $0;
     break;
    }
   }
   $280 = ($neg$1|0)<(0);
   $281 = $280 << 31 >> 31;
   $282 = $261 ^ $neg$1;
   $283 = $259 ^ $281;
   $284 = (_i64Subtract(($282|0),($283|0),($neg$1|0),($281|0))|0);
   $285 = tempRet0;
   $286 = $285;$287 = $284;
  }
 } while(0);
 tempRet0 = ($286);
 return ($287|0);
}
function ___procfdname($buf,$fd) {
 $buf = $buf|0;
 $fd = $fd|0;
 var $$01 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$0 = 0, $i$13 = 0, $i$22 = 0, $j$04 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$0 = 0;
 while(1) {
  $0 = (170527 + ($i$0)|0);
  $1 = HEAP8[$0>>0]|0;
  $2 = (($buf) + ($i$0)|0);
  HEAP8[$2>>0] = $1;
  $3 = ($i$0|0)==(14);
  $4 = (($i$0) + 1)|0;
  if ($3) {
   break;
  } else {
   $i$0 = $4;
  }
 }
 $5 = ($fd|0)==(0);
 if ($5) {
  $scevgep = ((($buf)) + 14|0);
  HEAP8[$scevgep>>0] = 48;
  $6 = ((($buf)) + 15|0);
  HEAP8[$6>>0] = 0;
 } else {
  $i$13 = 14;$j$04 = $fd;
  while(1) {
   $7 = (($j$04>>>0) / 10)&-1;
   $8 = (($i$13) + 1)|0;
   $9 = ($j$04>>>0)<(10);
   if ($9) {
    $$lcssa = $8;
    break;
   } else {
    $i$13 = $8;$j$04 = $7;
   }
  }
  $10 = (($buf) + ($$lcssa)|0);
  HEAP8[$10>>0] = 0;
  $$01 = $fd;$i$22 = $$lcssa;
  while(1) {
   $11 = (($$01>>>0) % 10)&-1;
   $12 = $11 | 48;
   $13 = $12&255;
   $14 = (($i$22) + -1)|0;
   $15 = (($buf) + ($14)|0);
   HEAP8[$15>>0] = $13;
   $16 = (($$01>>>0) / 10)&-1;
   $17 = ($$01>>>0)<(10);
   if ($17) {
    break;
   } else {
    $$01 = $16;$i$22 = $14;
   }
  }
 }
 return;
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ((($f)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $11;
 } else {
  $13 = ((($f)) + 100|0);
  HEAP32[$13>>2] = $5;
 }
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   if ($10) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $11 = $$pre;
    $26 = $$pre;$41 = $11;
    label = 9;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($f)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $12;
    $16 = $14;
    $17 = (($15) - ($16))|0;
    $18 = ((($f)) + 108|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($9) - ($19))|0;
    $21 = (($20) + -1)|0;
    $22 = ($17|0)>($21|0);
    if ($22) {
     $23 = (($14) + ($21)|0);
     $24 = ((($f)) + 100|0);
     HEAP32[$24>>2] = $23;
     $27 = $12;
    } else {
     $26 = $15;$41 = $12;
     label = 9;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($f)) + 100|0);
    HEAP32[$25>>2] = $26;
    $27 = $41;
   }
   $28 = ($27|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
   if (!($28)) {
    $29 = $27;
    $30 = $$pre4;
    $31 = ((($f)) + 108|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($29) + 1)|0;
    $34 = (($33) - ($30))|0;
    $35 = (($34) + ($32))|0;
    HEAP32[$31>>2] = $35;
   }
   $36 = ((($$pre4)) + -1|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$36>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function _catclose($catd) {
 $catd = $catd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _catgets($catd,$set_id,$msg_id,$s) {
 $catd = $catd|0;
 $set_id = $set_id|0;
 $msg_id = $msg_id|0;
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($s|0);
}
function _catopen($name,$oflag) {
 $name = $name|0;
 $oflag = $oflag|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((-1)|0);
}
function _duplocale($old) {
 $old = $old|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,4)|0);
 $1 = ($0|0)!=(0|0);
 $2 = ($old|0)!=((-1)|0);
 $or$cond = $2 & $1;
 if ($or$cond) {
  $3 = HEAP32[$old>>2]|0;
  HEAP32[$0>>2] = $3;
 }
 return ($0|0);
}
function _freelocale($l) {
 $l = $l|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($l);
 return;
}
function _iconv_open($to,$from) {
 $to = $to|0;
 $from = $from|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_find_charmap($to)|0);
 $1 = ($0|0)==(-1);
 if ($1) {
  label = 4;
 } else {
  $2 = (_find_charmap($from)|0);
  $3 = ($2|0)==(-1);
  if ($3) {
   label = 4;
  } else {
   $4 = (170542 + ($0)|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = ($5&255)>(207);
   if ($6) {
    label = 4;
   } else {
    $8 = $2 << 16;
    $9 = $8 | $0;
    $10 = $9;
    $$0 = $10;
   }
  }
 }
 if ((label|0) == 4) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 22;
  $$0 = (-1);
 }
 return ($$0|0);
}
function _iconv_close($cd) {
 $cd = $cd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _iconv($cd0,$in,$inb,$out,$outb) {
 $cd0 = $cd0|0;
 $in = $in|0;
 $inb = $inb|0;
 $out = $out|0;
 $outb = $outb|0;
 var $$ = 0, $$0 = 0, $$19 = 0, $$20 = 0, $$23 = 0, $$26 = 0, $$c$8 = 0, $$in = 0, $$lobit = 0, $$mask = 0, $$pn = 0, $$sum = 0, $$sum12 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum2930 = 0, $$sum3132 = 0, $$sum3435 = 0;
 var $$sum3637 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $c$0 = 0, $c$1 = 0, $c$10 = 0, $c$1162 = 0, $c$1162$lcssa = 0, $c$2 = 0;
 var $c$360 = 0, $c$4 = 0, $c$5 = 0, $c$654 = 0, $c$8 = 0, $c$9 = 0, $d$1 = 0, $d$261 = 0, $d$5 = 0, $d$655 = 0, $err$0 = 0, $exitcond = 0, $exitcond68 = 0, $exitcond69 = 0, $exitcond70 = 0, $i$059 = 0, $i1$053 = 0, $j$057 = 0, $j2$051 = 0, $k$058 = 0;
 var $k$1$ = 0, $k$1$$lcssa = 0, $k$1$$lcssa$lcssa = 0, $k$156 = 0, $k$3 = 0, $k$452 = 0, $k$5$ = 0, $k$5$$lcssa = 0, $k$5$$lcssa$lcssa = 0, $k$550 = 0, $k$7 = 0, $l$0 = 0, $l$2 = 0, $l$3 = 0, $not$ = 0, $not$33 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond21 = 0, $or$cond22 = 0;
 var $or$cond25 = 0, $or$cond28 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond9 = 0, $st = 0, $switch$cast = 0, $switch$cast$clear = 0, $switch$downshift = 0, $switch$downshift$clear = 0, $switch$masked = 0, $switch$tableidx = 0, $tmp = 0, $wc = 0, $x$063 = 0, $x$1 = 0, $x$2 = 0, $x$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $st = sp;
 $wc = sp + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $tmp = sp + 20|0;
 $2 = $cd0;
 $3 = $2 & 65535;
 $4 = $2 >>> 16;
 $$sum = (($4) + 1)|0;
 $$sum12 = (($3) + 1)|0;
 $5 = $st;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = (170542 + ($4)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = (170542 + ($3)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($in|0)==(0|0);
 L1: do {
  if ($13) {
   $$0 = 0;
  } else {
   $14 = HEAP32[$in>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    $$0 = 0;
   } else {
    $16 = HEAP32[$inb>>2]|0;
    $17 = ($16|0)==(0);
    if ($17) {
     $$0 = 0;
    } else {
     $18 = $10&255;
     $19 = (($18) + 128)|0;
     $20 = (($4) + 2)|0;
     $21 = $18 & 3;
     $22 = $21 ^ 1;
     $23 = $21 ^ 2;
     $24 = $21 ^ 3;
     $25 = $18 & 1;
     $26 = $25 ^ 1;
     $27 = $18 & 254;
     $28 = ($27|0)==(196);
     $$sum3435 = $25 | 2;
     $$sum3637 = $26 | 2;
     $29 = ($10<<24>>24)==(-38);
     $30 = ($10<<24>>24)==(-40);
     $31 = $12&255;
     $32 = (($31) + -192)|0;
     $33 = ($32>>>0)>(8);
     $34 = $3;
     $35 = (174567 + ($32)|0);
     $36 = (($31) + 128)|0;
     $37 = (128 - ($31))|0;
     $38 = ($37|0)==(0);
     $39 = (($3) + 2)|0;
     $40 = $10 & -2;
     $41 = ($40<<24>>24)==(-60);
     $42 = $31 & 1;
     $43 = $42 ^ 1;
     $$sum2930 = $42 | 2;
     $$sum3132 = $43 | 2;
     $44 = $31 & 3;
     $45 = $44 ^ 1;
     $46 = $44 ^ 2;
     $47 = $44 ^ 3;
     $48 = (($18) + -192)|0;
     $49 = ($48>>>0)<(7);
     $$in = $14;$53 = $16;$x$063 = 0;
     L5: while(1) {
      $50 = HEAP8[$$in>>0]|0;
      $51 = $50&255;
      $52 = ($50<<24>>24)<(0);
      $brmerge = $52 | $49;
      L7: do {
       if ($brmerge) {
        do {
         switch ($18|0) {
         case 199:  {
          $err$0 = 84;
          break L5;
          break;
         }
         case 200:  {
          $54 = (_mbrtowc($wc,$$in,$53,$st)|0);
          switch ($54|0) {
          case -1:  {
           $err$0 = 84;
           break L5;
           break;
          }
          case -2:  {
           label = 111;
           break L5;
           break;
          }
          case 0:  {
           $l$0 = 1;
           break;
          }
          default: {
           $l$0 = $54;
          }
          }
          $55 = HEAP32[$wc>>2]|0;
          $c$8 = $55;$l$2 = $l$0;
          label = 86;
          break L7;
          break;
         }
         case 198:  {
          $56 = ($53>>>0)<(4);
          if ($56) {
           label = 111;
           break L5;
          }
          $57 = HEAP32[$$in>>2]|0;
          $c$0 = $57;
          label = 14;
          break;
         }
         case 195: case 192:  {
          $58 = ($53>>>0)<(4);
          if ($58) {
           label = 111;
           break L5;
          }
          $59 = (($$in) + ($21)|0);
          $60 = HEAP8[$59>>0]|0;
          $61 = $60&255;
          $62 = $61 << 24;
          $63 = (($$in) + ($22)|0);
          $64 = HEAP8[$63>>0]|0;
          $65 = $64&255;
          $66 = $65 << 16;
          $67 = $66 | $62;
          $68 = (($$in) + ($23)|0);
          $69 = HEAP8[$68>>0]|0;
          $70 = $69&255;
          $71 = $70 << 8;
          $72 = $67 | $71;
          $73 = (($$in) + ($24)|0);
          $74 = HEAP8[$73>>0]|0;
          $75 = $74&255;
          $76 = $72 | $75;
          $c$0 = $76;
          label = 14;
          break;
         }
         case 193: case 194: case 197: case 196:  {
          $80 = ($53>>>0)<(2);
          if ($80) {
           label = 111;
           break L5;
          }
          $81 = (($$in) + ($25)|0);
          $82 = HEAP8[$81>>0]|0;
          $83 = $82&255;
          $84 = $83 << 8;
          $85 = (($$in) + ($26)|0);
          $86 = HEAP8[$85>>0]|0;
          $87 = $86&255;
          $88 = $84 | $87;
          $89 = $84 & 64512;
          switch ($89|0) {
          case 56320:  {
           $err$0 = 84;
           break L5;
           break;
          }
          case 55296:  {
           break;
          }
          default: {
           $c$8 = $88;$l$2 = 2;
           label = 86;
           break L7;
          }
          }
          if ($28) {
           $err$0 = 84;
           break L5;
          }
          $90 = ($53>>>0)<(4);
          if ($90) {
           label = 111;
           break L5;
          }
          $91 = (($$in) + ($$sum3435)|0);
          $92 = HEAP8[$91>>0]|0;
          $93 = $92&255;
          $94 = $93 << 8;
          $95 = (($$in) + ($$sum3637)|0);
          $96 = HEAP8[$95>>0]|0;
          $97 = $96&255;
          $98 = $94 | $97;
          $99 = (($98) + -56320)|0;
          $100 = ($99>>>0)>(1023);
          if ($100) {
           $err$0 = 84;
           break L5;
          }
          $101 = $88 << 10;
          $102 = (($101) + -56557568)|0;
          $103 = (($102) + ($99))|0;
          $c$8 = $103;$l$2 = 4;
          label = 86;
          break L7;
          break;
         }
         case 209:  {
          $104 = (($51) + -161)|0;
          $105 = ($104>>>0)<(63);
          if ($105) {
           $106 = (($51) + 65216)|0;
           $c$8 = $106;$l$2 = 1;
           label = 86;
           break L7;
          }
          $107 = ($53>>>0)<(2);
          if ($107) {
           label = 111;
           break L5;
          }
          $108 = ((($$in)) + 1|0);
          $109 = HEAP8[$108>>0]|0;
          $110 = $109&255;
          $111 = (($51) + -129)|0;
          $112 = ($111>>>0)<(31);
          if ($112) {
           $c$1 = $111;
          } else {
           $113 = $51 & 240;
           $114 = ($113|0)==(224);
           if (!($114)) {
            $err$0 = 84;
            break L5;
           }
           $115 = (($51) + -193)|0;
           $c$1 = $115;
          }
          $116 = $c$1 << 1;
          $117 = (($110) + -64)|0;
          $118 = ($117>>>0)<(95);
          if ($118) {
           $119 = ($109<<24>>24)==(127);
           if ($119) {
            $err$0 = 84;
            break L5;
           }
           $$lobit = ($109<<24>>24) >> 7;
           $120 = $$lobit << 24 >> 24;
           $121 = (($117) + ($120))|0;
           $c$2 = $116;$d$1 = $121;
          } else {
           $122 = (($110) + -159)|0;
           $123 = ($122>>>0)<(94);
           $124 = $123&1;
           $$19 = $116 | $124;
           $$20 = $123 ? $122 : $110;
           $c$2 = $$19;$d$1 = $$20;
          }
          $125 = ((25334 + (($c$2*188)|0)|0) + ($d$1<<1)|0);
          $126 = HEAP16[$125>>1]|0;
          $127 = $126&65535;
          $128 = ($126<<16>>16)==(0);
          if ($128) {
           $err$0 = 84;
           break L5;
          } else {
           $c$8 = $127;$l$2 = 2;
           label = 86;
           break L7;
          }
          break;
         }
         case 208:  {
          $129 = ($53>>>0)<(2);
          if ($129) {
           label = 111;
           break L5;
          }
          $130 = ((($$in)) + 1|0);
          $131 = HEAP8[$130>>0]|0;
          $132 = $131&255;
          $133 = ($50<<24>>24)==(-114);
          if ($133) {
           $134 = (($132) + -161)|0;
           $135 = ($134>>>0)>(62);
           if ($135) {
            $err$0 = 84;
            break L5;
           }
           $136 = (($132) + 65216)|0;
           $c$8 = $136;$l$2 = 2;
           label = 86;
           break L7;
          } else {
           $137 = (($51) + -161)|0;
           $138 = (($132) + -161)|0;
           $139 = ($137>>>0)>(83);
           $140 = ($138>>>0)>(93);
           $or$cond3 = $139 | $140;
           if ($or$cond3) {
            $err$0 = 84;
            break L5;
           }
           $141 = ((25334 + (($137*188)|0)|0) + ($138<<1)|0);
           $142 = HEAP16[$141>>1]|0;
           $143 = $142&65535;
           $144 = ($142<<16>>16)==(0);
           if ($144) {
            $err$0 = 84;
            break L5;
           } else {
            $c$8 = $143;$l$2 = 2;
            label = 86;
            break L7;
           }
          }
          break;
         }
         case 218:  {
          $145 = ($50&255)<(161);
          if ($145) {
           $err$0 = 84;
           break L5;
          }
          break;
         }
         case 216: case 217:  {
          break;
         }
         case 224:  {
          $192 = ($53>>>0)<(2);
          if ($192) {
           label = 111;
           break L5;
          }
          $193 = ((($$in)) + 1|0);
          $194 = HEAP8[$193>>0]|0;
          $195 = $194&255;
          $196 = (($195) + -64)|0;
          $197 = ($196>>>0)>(190);
          $198 = (($195) + -127)|0;
          $199 = ($198>>>0)<(34);
          $or$cond25 = $197 | $199;
          if ($or$cond25) {
           $err$0 = 84;
           break L5;
          }
          $200 = ($196>>>0)>(62);
          $201 = (($195) + -98)|0;
          $$26 = $200 ? $201 : $196;
          $202 = (($51) + -161)|0;
          $203 = ($202>>>0)>(88);
          if (!($203)) {
           $233 = ((99350 + (($202*314)|0)|0) + ($$26<<1)|0);
           $234 = HEAP16[$233>>1]|0;
           $235 = $234&65535;
           $236 = ($202|0)==(39);
           if ($236) {
            $switch$tableidx = (($$26) + -58)|0;
            $237 = ($switch$tableidx>>>0)<(9);
            if ($237) {
             $switch$cast = $switch$tableidx&65535;
             $switch$cast$clear = $switch$cast & 511;
             $switch$downshift = (261&65535) >>> $switch$cast$clear;
             $switch$downshift$clear = $switch$downshift & 511;
             $switch$masked = $switch$downshift$clear&65535;
             $239 = $switch$masked;
            } else {
             $239 = 0;
            }
           } else {
            $239 = 0;
           }
           $238 = $239 << 17;
           $240 = $238 & 131072;
           $241 = $240 | $235;
           $242 = ($241|0)==(0);
           if ($242) {
            $err$0 = 84;
            break L5;
           } else {
            $c$8 = $241;$l$2 = 2;
            label = 86;
            break L7;
           }
          }
          $204 = (($51) + -135)|0;
          $205 = ($204>>>0)>(119);
          if ($205) {
           $err$0 = 84;
           break L5;
          }
          $206 = ($50&255)<(161);
          $207 = (($51) + -224)|0;
          $c$4 = $206 ? $204 : $207;
          $208 = ($c$4*157)|0;
          $209 = (($$26) + ($208))|0;
          $210 = $209 >>> 4;
          $211 = (($210) + 4867)|0;
          $212 = (89006 + ($211<<1)|0);
          $213 = HEAP16[$212>>1]|0;
          $214 = $213&65535;
          $215 = $209 & 15;
          $216 = $214 >>> $215;
          $217 = (($216|0) % 2)&-1;
          $218 = $217 << 17;
          $219 = (89006 + ($209<<1)|0);
          $220 = HEAP16[$219>>1]|0;
          $221 = $220&65535;
          $222 = $221 | $218;
          $$mask = $222 & -65792;
          $223 = ($$mask|0)==(56320);
          if (!($223)) {
           $232 = ($222|0)==(0);
           if ($232) {
            $err$0 = 84;
            break L5;
           } else {
            $c$8 = $222;$l$2 = 2;
            label = 86;
            break L7;
           }
          }
          if ($33) {
           $k$3 = 2;
          } else {
           $224 = HEAP8[$35>>0]|0;
           $225 = $224 << 24 >> 24;
           $k$3 = $225;
          }
          $226 = HEAP32[$outb>>2]|0;
          $227 = ($k$3>>>0)>($226>>>0);
          if ($227) {
           $err$0 = 7;
           break L5;
          }
          $228 = $221 & 255;
          $229 = (174577 + ($228)|0);
          HEAP32[$0>>2] = $229;
          HEAP32[$1>>2] = 4;
          $230 = (_iconv($34,$0,$1,$out,$outb)|0);
          $231 = (($230) + ($x$063))|0;
          $l$3 = 2;$x$3 = $231;
          break L7;
          break;
         }
         case 232:  {
          $243 = ($53>>>0)<(2);
          if ($243) {
           label = 111;
           break L5;
          }
          $244 = ((($$in)) + 1|0);
          $245 = HEAP8[$244>>0]|0;
          $246 = $245&255;
          $247 = (($51) + -161)|0;
          $248 = (($246) + -161)|0;
          $249 = ($247>>>0)>(92);
          $250 = ($248>>>0)>(93);
          $or$cond9 = $249 | $250;
          if (!($or$cond9)) {
           $280 = ((127296 + (($247*188)|0)|0) + ($248<<1)|0);
           $281 = HEAP16[$280>>1]|0;
           $282 = $281&65535;
           $283 = ($281<<16>>16)==(0);
           if ($283) {
            $err$0 = 84;
            break L5;
           } else {
            $c$8 = $282;$l$2 = 2;
            label = 86;
            break L7;
           }
          }
          $251 = (($51) + -129)|0;
          $252 = ($251>>>0)>(92);
          if ($252) {
           $err$0 = 84;
           break L5;
          }
          $253 = ($251>>>0)>(68);
          $254 = ($245&255)>(82);
          $or$cond11 = $253 & $254;
          if ($or$cond11) {
           $err$0 = 84;
           break L5;
          }
          $255 = (($246) + -65)|0;
          $256 = ($255>>>0)<(26);
          do {
           if ($256) {
            $d$5 = $255;
           } else {
            $257 = (($246) + -97)|0;
            $258 = ($257>>>0)<(26);
            if ($258) {
             $259 = (($246) + -71)|0;
             $d$5 = $259;
             break;
            }
            $260 = (($246) + -129)|0;
            $261 = ($260>>>0)<(126);
            if (!($261)) {
             $err$0 = 84;
             break L5;
            }
            $262 = (($246) + -77)|0;
            $d$5 = $262;
           }
          } while(0);
          $263 = ($251>>>0)<(32);
          $264 = ($251*178)|0;
          $265 = ($247*84)|0;
          $266 = (($265) + 5696)|0;
          $$pn = $263 ? $264 : $266;
          $c$5 = (($$pn) + 44032)|0;
          $267 = (($c$5) + ($d$5))|0;
          $268 = ($267>>>0)<(44032);
          if ($268) {
           $c$8 = $267;$l$2 = 2;
           label = 86;
           break L7;
          } else {
           $c$654 = $267;$d$655 = 44032;
          }
          while(1) {
           $269 = (($c$654) - ($d$655))|0;
           $i1$053 = 0;$k$452 = 0;
           while(1) {
            $j2$051 = 0;$k$550 = $k$452;
            while(1) {
             $270 = ((127296 + (($i1$053*188)|0)|0) + ($j2$051<<1)|0);
             $271 = HEAP16[$270>>1]|0;
             $272 = $271&65535;
             $273 = (($272) - ($d$655))|0;
             $not$ = ($273>>>0)<=($269>>>0);
             $274 = $not$&1;
             $k$5$ = (($274) + ($k$550))|0;
             $275 = (($j2$051) + 1)|0;
             $exitcond = ($275|0)==(94);
             if ($exitcond) {
              $k$5$$lcssa = $k$5$;
              break;
             } else {
              $j2$051 = $275;$k$550 = $k$5$;
             }
            }
            $276 = (($i1$053) + 1)|0;
            $exitcond68 = ($276|0)==(93);
            if ($exitcond68) {
             $k$5$$lcssa$lcssa = $k$5$$lcssa;
             break;
            } else {
             $i1$053 = $276;$k$452 = $k$5$$lcssa;
            }
           }
           $277 = (($c$654) + 1)|0;
           $278 = (($k$5$$lcssa$lcssa) + ($c$654))|0;
           $279 = ($278>>>0)<($277>>>0);
           if ($279) {
            $c$8 = $278;$l$2 = 2;
            label = 86;
            break L7;
           } else {
            $c$654 = $278;$d$655 = $277;
           }
          }
          break;
         }
         default: {
          $284 = ($51>>>0)<($19>>>0);
          if ($284) {
           $c$8 = $51;$l$2 = 1;
           label = 86;
           break L7;
          }
          $285 = (($51) - ($19))|0;
          $286 = ($285*5)|0;
          $287 = $286 >>> 2;
          $$sum17 = (($287) + ($$sum))|0;
          $288 = (170542 + ($$sum17)|0);
          $289 = HEAP8[$288>>0]|0;
          $290 = $289&255;
          $291 = $285 << 1;
          $292 = $291 & 6;
          $293 = $290 >>> $292;
          $$sum18 = (($20) + ($287))|0;
          $294 = (170542 + ($$sum18)|0);
          $295 = HEAP8[$294>>0]|0;
          $296 = $295&255;
          $297 = (8 - ($292))|0;
          $298 = $296 << $297;
          $299 = $298 & 1023;
          $300 = $299 | $293;
          $301 = (144780 + ($300<<1)|0);
          $302 = HEAP16[$301>>1]|0;
          $303 = $302&65535;
          $304 = ($300|0)==(0);
          $$ = $304 ? $51 : $303;
          $305 = ($$|0)==(1);
          if ($305) {
           $err$0 = 84;
           break L5;
          } else {
           $c$8 = $$;$l$2 = 1;
           label = 86;
           break L7;
          }
         }
         }
        } while(0);
        if ((label|0) == 14) {
         label = 0;
         $77 = $c$0 & -2048;
         $78 = ($77|0)==(55296);
         $79 = ($c$0>>>0)>(1114111);
         $or$cond = $79 | $78;
         if ($or$cond) {
          $err$0 = 84;
          break L5;
         } else {
          $c$8 = $c$0;$l$2 = 4;
          label = 86;
          break;
         }
        }
        $146 = (($51) + -129)|0;
        $147 = ($146>>>0)>(125);
        if ($147) {
         $err$0 = 84;
         break L5;
        }
        $148 = ($53>>>0)<(2);
        if ($148) {
         label = 111;
         break L5;
        }
        $149 = ((($$in)) + 1|0);
        $150 = HEAP8[$149>>0]|0;
        $151 = $150&255;
        $152 = ($150&255)<(161);
        $or$cond21 = $29 & $152;
        if ($or$cond21) {
         $err$0 = 84;
         break L5;
        }
        $153 = (($151) + -64)|0;
        $154 = ($153>>>0)>(190);
        $155 = ($150<<24>>24)==(127);
        $or$cond5 = $155 | $154;
        if (!($or$cond5)) {
         $187 = ($153>>>0)>(63);
         $188 = (($151) + -65)|0;
         $$23 = $187 ? $188 : $153;
         $189 = ((41126 + (($146*380)|0)|0) + ($$23<<1)|0);
         $190 = HEAP16[$189>>1]|0;
         $191 = $190&65535;
         $c$8 = $191;$l$2 = 2;
         label = 86;
         break;
        }
        $156 = (($151) + -48)|0;
        $157 = ($156>>>0)<(10);
        $or$cond22 = $30 & $157;
        if (!($or$cond22)) {
         $err$0 = 84;
         break L5;
        }
        $158 = ($53>>>0)<(4);
        if ($158) {
         label = 111;
         break L5;
        }
        $159 = ((($$in)) + 2|0);
        $160 = HEAP8[$159>>0]|0;
        $161 = $160&255;
        $162 = (($161) + -129)|0;
        $163 = ($162>>>0)>(126);
        if ($163) {
         $err$0 = 84;
         break L5;
        }
        $164 = ((($$in)) + 3|0);
        $165 = HEAP8[$164>>0]|0;
        $166 = $165&255;
        $167 = (($166) + -48)|0;
        $168 = ($167>>>0)>(9);
        if ($168) {
         $err$0 = 84;
         break L5;
        }
        $169 = ($146*10)|0;
        $170 = (($151) + ($169))|0;
        $171 = ($170*1260)|0;
        $172 = ($162*10)|0;
        $173 = (($171) + -60352)|0;
        $174 = (($173) + ($172))|0;
        $175 = (($174) + ($167))|0;
        $c$360 = $175;$d$261 = 0;
        while(1) {
         $176 = (($c$360) - ($d$261))|0;
         $i$059 = 0;$k$058 = 0;
         while(1) {
          $j$057 = 0;$k$156 = $k$058;
          while(1) {
           $177 = ((41126 + (($i$059*380)|0)|0) + ($j$057<<1)|0);
           $178 = HEAP16[$177>>1]|0;
           $179 = $178&65535;
           $180 = (($179) - ($d$261))|0;
           $not$33 = ($180>>>0)<=($176>>>0);
           $181 = $not$33&1;
           $k$1$ = (($181) + ($k$156))|0;
           $182 = (($j$057) + 1)|0;
           $exitcond69 = ($182|0)==(190);
           if ($exitcond69) {
            $k$1$$lcssa = $k$1$;
            break;
           } else {
            $j$057 = $182;$k$156 = $k$1$;
           }
          }
          $183 = (($i$059) + 1)|0;
          $exitcond70 = ($183|0)==(126);
          if ($exitcond70) {
           $k$1$$lcssa$lcssa = $k$1$$lcssa;
           break;
          } else {
           $i$059 = $183;$k$058 = $k$1$$lcssa;
          }
         }
         $184 = (($c$360) + 1)|0;
         $185 = (($k$1$$lcssa$lcssa) + ($c$360))|0;
         $186 = ($185>>>0)<($184>>>0);
         if ($186) {
          $c$8 = $185;$l$2 = 4;
          label = 86;
          break;
         } else {
          $c$360 = $185;$d$261 = $184;
         }
        }
       } else {
        $c$8 = $51;$l$2 = 1;
        label = 86;
       }
      } while(0);
      L109: do {
       if ((label|0) == 86) {
        label = 0;
        switch ($31|0) {
        case 198:  {
         $306 = HEAP32[$outb>>2]|0;
         $307 = ($306>>>0)<(4);
         if ($307) {
          $err$0 = 7;
          break L5;
         }
         $308 = HEAP32[$out>>2]|0;
         HEAP32[$308>>2] = $c$8;
         $309 = ((($308)) + 4|0);
         HEAP32[$out>>2] = $309;
         $310 = HEAP32[$outb>>2]|0;
         $311 = (($310) + -4)|0;
         HEAP32[$outb>>2] = $311;
         $l$3 = $l$2;$x$3 = $x$063;
         break L109;
         break;
        }
        case 200:  {
         $312 = HEAP32[$outb>>2]|0;
         $313 = ($312>>>0)<(4);
         if ($313) {
          $314 = (_wctomb($tmp,$c$8)|0);
          $315 = HEAP32[$outb>>2]|0;
          $316 = ($315>>>0)<($314>>>0);
          if ($316) {
           $err$0 = 7;
           break L5;
          }
          $317 = HEAP32[$out>>2]|0;
          _memcpy(($317|0),($tmp|0),($314|0))|0;
          $321 = $317;$k$7 = $314;
         } else {
          $318 = HEAP32[$out>>2]|0;
          $319 = (_wctomb($318,$c$8)|0);
          $321 = $318;$k$7 = $319;
         }
         $320 = (($321) + ($k$7)|0);
         HEAP32[$out>>2] = $320;
         $322 = HEAP32[$outb>>2]|0;
         $323 = (($322) - ($k$7))|0;
         HEAP32[$outb>>2] = $323;
         $l$3 = $l$2;$x$3 = $x$063;
         break L109;
         break;
        }
        case 199:  {
         $324 = ($c$8>>>0)>(127);
         if ($324) {
          $x$1 = $x$063;
          label = 95;
         } else {
          $c$9 = $c$8;$x$2 = $x$063;
         }
         break;
        }
        case 193: case 194: case 197: case 196:  {
         $356 = ($c$8>>>0)<(65536);
         $or$cond28 = $41 | $356;
         if ($or$cond28) {
          $357 = ($c$8>>>0)>(65535);
          $$c$8 = $357 ? 65533 : $c$8;
          $358 = HEAP32[$outb>>2]|0;
          $359 = ($358>>>0)<(2);
          if ($359) {
           $err$0 = 7;
           break L5;
          }
          $360 = HEAP32[$out>>2]|0;
          $361 = $$c$8 >>> 8;
          $362 = $361&255;
          $363 = (($360) + ($42)|0);
          HEAP8[$363>>0] = $362;
          $364 = $$c$8&255;
          $365 = (($360) + ($43)|0);
          HEAP8[$365>>0] = $364;
          $366 = ((($360)) + 2|0);
          HEAP32[$out>>2] = $366;
          $367 = HEAP32[$outb>>2]|0;
          $368 = (($367) + -2)|0;
          HEAP32[$outb>>2] = $368;
          $l$3 = $l$2;$x$3 = $x$063;
          break L109;
         } else {
          $369 = HEAP32[$outb>>2]|0;
          $370 = ($369>>>0)<(4);
          if ($370) {
           $err$0 = 7;
           break L5;
          }
          $371 = (($c$8) + -65536)|0;
          $372 = HEAP32[$out>>2]|0;
          $373 = $371 >>> 10;
          $374 = $371 >>> 18;
          $375 = $374 | 216;
          $376 = $375&255;
          $377 = (($372) + ($42)|0);
          HEAP8[$377>>0] = $376;
          $378 = $373&255;
          $379 = (($372) + ($43)|0);
          HEAP8[$379>>0] = $378;
          $380 = $371 >>> 8;
          $381 = $380 & 3;
          $382 = $381 | 220;
          $383 = $382&255;
          $384 = (($372) + ($$sum2930)|0);
          HEAP8[$384>>0] = $383;
          $385 = $371&255;
          $386 = (($372) + ($$sum3132)|0);
          HEAP8[$386>>0] = $385;
          $387 = ((($372)) + 4|0);
          HEAP32[$out>>2] = $387;
          $388 = HEAP32[$outb>>2]|0;
          $389 = (($388) + -4)|0;
          HEAP32[$outb>>2] = $389;
          $l$3 = $l$2;$x$3 = $x$063;
          break L109;
         }
         break;
        }
        case 195: case 192:  {
         $390 = HEAP32[$outb>>2]|0;
         $391 = ($390>>>0)<(4);
         if ($391) {
          $err$0 = 7;
          break L5;
         }
         $392 = HEAP32[$out>>2]|0;
         $393 = $c$8 >>> 24;
         $394 = $393&255;
         $395 = (($392) + ($44)|0);
         HEAP8[$395>>0] = $394;
         $396 = $c$8 >>> 16;
         $397 = $396&255;
         $398 = (($392) + ($45)|0);
         HEAP8[$398>>0] = $397;
         $399 = $c$8 >>> 8;
         $400 = $399&255;
         $401 = (($392) + ($46)|0);
         HEAP8[$401>>0] = $400;
         $402 = $c$8&255;
         $403 = (($392) + ($47)|0);
         HEAP8[$403>>0] = $402;
         $404 = ((($392)) + 4|0);
         HEAP32[$out>>2] = $404;
         $405 = HEAP32[$outb>>2]|0;
         $406 = (($405) + -4)|0;
         HEAP32[$outb>>2] = $406;
         $l$3 = $l$2;$x$3 = $x$063;
         break L109;
         break;
        }
        default: {
         $c$9 = $c$8;$x$2 = $x$063;
        }
        }
        L129: while(1) {
         if ((label|0) == 95) {
          label = 0;
          $325 = (($x$1) + 1)|0;
          $c$9 = 42;$x$2 = $325;
         }
         $326 = HEAP32[$outb>>2]|0;
         $327 = ($326|0)==(0);
         if ($327) {
          $err$0 = 7;
          break L5;
         }
         $328 = ($c$9>>>0)<($36>>>0);
         if ($328) {
          $c$10 = $c$9;
          break;
         }
         if ($38) {
          $x$1 = $x$2;
          label = 95;
          continue;
         } else {
          $c$1162 = 0;
         }
         while(1) {
          $334 = ($c$1162*5)|0;
          $335 = $334 >>> 2;
          $$sum15 = (($335) + ($$sum12))|0;
          $336 = (170542 + ($$sum15)|0);
          $337 = HEAP8[$336>>0]|0;
          $338 = $337&255;
          $339 = $c$1162 << 1;
          $340 = $339 & 6;
          $341 = $338 >>> $340;
          $$sum16 = (($39) + ($335))|0;
          $342 = (170542 + ($$sum16)|0);
          $343 = HEAP8[$342>>0]|0;
          $344 = $343&255;
          $345 = (8 - ($340))|0;
          $346 = $344 << $345;
          $347 = $346 & 1023;
          $348 = $347 | $341;
          $349 = (144780 + ($348<<1)|0);
          $350 = HEAP16[$349>>1]|0;
          $351 = $350&65535;
          $352 = ($c$9|0)==($351|0);
          if ($352) {
           $c$1162$lcssa = $c$1162;
           label = 101;
           break L129;
          }
          $354 = (($c$1162) + 1)|0;
          $355 = ($354>>>0)<($37>>>0);
          if ($355) {
           $c$1162 = $354;
          } else {
           $x$1 = $x$2;
           label = 95;
           continue L129;
          }
         }
        }
        if ((label|0) == 101) {
         label = 0;
         $353 = (($c$1162$lcssa) + 128)|0;
         $c$10 = $353;
        }
        $329 = $c$10&255;
        $330 = HEAP32[$out>>2]|0;
        $331 = ((($330)) + 1|0);
        HEAP32[$out>>2] = $331;
        HEAP8[$330>>0] = $329;
        $332 = HEAP32[$outb>>2]|0;
        $333 = (($332) + -1)|0;
        HEAP32[$outb>>2] = $333;
        $l$3 = $l$2;$x$3 = $x$2;
       }
      } while(0);
      $407 = HEAP32[$in>>2]|0;
      $408 = (($407) + ($l$3)|0);
      HEAP32[$in>>2] = $408;
      $409 = (($53) - ($l$3))|0;
      HEAP32[$inb>>2] = $409;
      $410 = ($53|0)==($l$3|0);
      if ($410) {
       $$0 = $x$3;
       break L1;
      } else {
       $$in = $408;$53 = $409;$x$063 = $x$3;
      }
     }
     if ((label|0) == 111) {
      $err$0 = 22;
     }
     $411 = (___errno_location()|0);
     HEAP32[$411>>2] = $err$0;
     $$0 = -1;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _gettext($msgid) {
 $msgid = $msgid|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($msgid|0);
}
function _dgettext($domainname,$msgid) {
 $domainname = $domainname|0;
 $msgid = $msgid|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($msgid|0);
}
function _dcgettext($domainname,$msgid,$category) {
 $domainname = $domainname|0;
 $msgid = $msgid|0;
 $category = $category|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($msgid|0);
}
function _ngettext($msgid1,$msgid2,$n) {
 $msgid1 = $msgid1|0;
 $msgid2 = $msgid2|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(1);
 $1 = $0 ? $msgid1 : $msgid2;
 return ($1|0);
}
function _dngettext($domainname,$msgid1,$msgid2,$n) {
 $domainname = $domainname|0;
 $msgid1 = $msgid1|0;
 $msgid2 = $msgid2|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(1);
 $1 = $0 ? $msgid1 : $msgid2;
 return ($1|0);
}
function _dcngettext($domainname,$msgid1,$msgid2,$n,$category) {
 $domainname = $domainname|0;
 $msgid1 = $msgid1|0;
 $msgid2 = $msgid2|0;
 $n = $n|0;
 $category = $category|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(1);
 $1 = $0 ? $msgid1 : $msgid2;
 return ($1|0);
}
function _textdomain($domainname) {
 $domainname = $domainname|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($domainname|0)==(0|0);
 if ($0) {
  $$0 = 174594;
 } else {
  $1 = HEAP8[$domainname>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = 174594;
  } else {
   $3 = (_strcmp($domainname,174594)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$0 = 174594;
   } else {
    $5 = (___errno_location()|0);
    HEAP32[$5>>2] = 22;
    $$0 = 0;
   }
  }
 }
 return ($$0|0);
}
function _bindtextdomain($domainname,$dirname) {
 $domainname = $domainname|0;
 $dirname = $dirname|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($domainname|0)==(0|0);
 if ($0) {
  label = 6;
 } else {
  $1 = HEAP8[$domainname>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   label = 6;
  } else {
   $3 = ($dirname|0)==(0|0);
   if ($3) {
    $$0 = 175866;
   } else {
    $4 = HEAP8[$dirname>>0]|0;
    $5 = ($4<<24>>24)==(47);
    if ($5) {
     $6 = ((($dirname)) + 1|0);
     $7 = HEAP8[$6>>0]|0;
     $8 = ($7<<24>>24)==(0);
     if ($8) {
      $$0 = 175866;
     } else {
      label = 6;
     }
    } else {
     label = 6;
    }
   }
  }
 }
 if ((label|0) == 6) {
  $9 = (___errno_location()|0);
  HEAP32[$9>>2] = 22;
  $$0 = 0;
 }
 return ($$0|0);
}
function _bind_textdomain_codeset($domainname,$codeset) {
 $domainname = $domainname|0;
 $codeset = $codeset|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($domainname|0)==(0|0);
 if ($0) {
  label = 5;
 } else {
  $1 = HEAP8[$domainname>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   label = 5;
  } else {
   $3 = ($codeset|0)==(0|0);
   if (!($3)) {
    $4 = (_strcasecmp($codeset,174941)|0);
    $5 = ($4|0)==(0);
    if (!($5)) {
     label = 5;
    }
   }
  }
 }
 if ((label|0) == 5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
 }
 return (0|0);
}
function _isalnum_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isalnum($c)|0);
 return ($0|0);
}
function _isalpha_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isalpha($c)|0);
 return ($0|0);
}
function _isblank_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isblank($c)|0);
 return ($0|0);
}
function _iscntrl_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iscntrl($c)|0);
 return ($0|0);
}
function _isdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $0 = $isdigit&1;
 return ($0|0);
}
function _isgraph_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isgraph($c)|0);
 return ($0|0);
}
function _islower_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_islower($c)|0);
 return ($0|0);
}
function _isprint_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isprint($c)|0);
 return ($0|0);
}
function _ispunct_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ispunct($c)|0);
 return ($0|0);
}
function _isspace_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isspace($c)|0);
 return ($0|0);
}
function _isupper_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 return ($0|0);
}
function _iswalnum_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswalnum($c)|0);
 return ($0|0);
}
function _iswalpha_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswalpha($c)|0);
 return ($0|0);
}
function _iswblank_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswblank($c)|0);
 return ($0|0);
}
function _iswcntrl_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswcntrl($c)|0);
 return ($0|0);
}
function _iswctype_l($c,$t,$l) {
 $c = $c|0;
 $t = $t|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswctype($c,$t)|0);
 return ($0|0);
}
function _iswdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswdigit($c)|0);
 return ($0|0);
}
function _iswgraph_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswgraph($c)|0);
 return ($0|0);
}
function _iswlower_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswlower($c)|0);
 return ($0|0);
}
function _iswprint_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswprint($c)|0);
 return ($0|0);
}
function _iswpunct_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswpunct($c)|0);
 return ($0|0);
}
function _iswspace_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswspace($c)|0);
 return ($0|0);
}
function _iswupper_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswupper($c)|0);
 return ($0|0);
}
function _iswxdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_iswxdigit($c)|0);
 return ($0|0);
}
function _isxdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isxdigit($c)|0);
 return ($0|0);
}
function ___nl_langinfo_l($item,$loc) {
 $item = $item|0;
 $loc = $loc|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $idx$02 = 0, $str$0$ph = 0, $str$03 = 0, $str$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $item & 65535;
 $1 = ($item|0)==(14);
 L1: do {
  if ($1) {
   $$0 = 174941;
  } else {
   $2 = $item >> 16;
   switch ($2|0) {
   case 1:  {
    $3 = ($0>>>0)>(1);
    if ($3) {
     $$0 = 0;
     break L1;
    } else {
     $str$0$ph = 174938;
    }
    break;
   }
   case 2:  {
    $4 = ($0>>>0)>(49);
    if ($4) {
     $$0 = 0;
     break L1;
    } else {
     $str$0$ph = 174622;
    }
    break;
   }
   case 4:  {
    $5 = ($0|0)==(0);
    $$ = $5 ? 180292 : 0;
    return ($$|0);
    break;
   }
   case 5:  {
    $6 = ($0>>>0)>(3);
    if ($6) {
     $$0 = 0;
     break L1;
    } else {
     $str$0$ph = 174603;
    }
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $7 = ($0|0)==(0);
   if ($7) {
    $$0 = $str$0$ph;
   } else {
    $idx$02 = $0;$str$03 = $str$0$ph;
    while(1) {
     $str$1 = $str$03;
     while(1) {
      $8 = HEAP8[$str$1>>0]|0;
      $9 = ($8<<24>>24)==(0);
      $10 = ((($str$1)) + 1|0);
      if ($9) {
       $$lcssa = $10;
       break;
      } else {
       $str$1 = $10;
      }
     }
     $11 = (($idx$02) + -1)|0;
     $12 = ($11|0)==(0);
     if ($12) {
      $$0 = $$lcssa;
      break;
     } else {
      $idx$02 = $11;$str$03 = $$lcssa;
     }
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function ___nl_langinfo($item) {
 $item = $item|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___nl_langinfo_l($item,0)|0);
 return ($0|0);
}
function _localeconv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (14432|0);
}
function _newlocale($mask,$name,$base) {
 $mask = $mask|0;
 $name = $name|0;
 $base = $base|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$name>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  label = 4;
 } else {
  $2 = (_strcmp($name,174947)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   label = 4;
  } else {
   $4 = (_strcmp($name,174949)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    label = 4;
   } else {
    $$01 = 0;
   }
  }
 }
 if ((label|0) == 4) {
  $6 = ($base|0)==(0|0);
  if ($6) {
   $7 = (_calloc(1,4)|0);
   $$01 = $7;
  } else {
   $$01 = $base;
  }
 }
 return ($$01|0);
}
function _setlocale($category,$locale) {
 $category = $category|0;
 $locale = $locale|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (174955|0);
}
function _strcasecmp_l($l,$r,$loc) {
 $l = $l|0;
 $r = $r|0;
 $loc = $loc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcasecmp($l,$r)|0);
 return ($0|0);
}
function ___strcoll_l($l,$r,$loc) {
 $l = $l|0;
 $r = $r|0;
 $loc = $loc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcmp($l,$r)|0);
 return ($0|0);
}
function _strcoll($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcmp($l,$r)|0);
 return ($0|0);
}
function _strerror_l($err,$l) {
 $err = $err|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strerror($err)|0);
 return ($0|0);
}
function _strfmon_l($s,$n,$loc,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $loc = $loc|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vstrfmon_l($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _strfmon($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vstrfmon_l($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _strncasecmp_l($l,$r,$n,$loc) {
 $l = $l|0;
 $r = $r|0;
 $n = $n|0;
 $loc = $loc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strncasecmp($l,$r,$n)|0);
 return ($0|0);
}
function ___strxfrm_l($dest,$src,$n,$loc) {
 $dest = $dest|0;
 $src = $src|0;
 $n = $n|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($src)|0);
 $1 = ($0>>>0)<($n>>>0);
 if ($1) {
  (_strcpy($dest,$src)|0);
 }
 return ($0|0);
}
function _strxfrm($dest,$src,$n) {
 $dest = $dest|0;
 $src = $src|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($src)|0);
 $1 = ($0>>>0)<($n>>>0);
 if ($1) {
  (_strcpy($dest,$src)|0);
 }
 return ($0|0);
}
function _tolower_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_tolower($c)|0);
 return ($0|0);
}
function _toupper_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_toupper($c)|0);
 return ($0|0);
}
function _towctrans_l($c,$t,$l) {
 $c = $c|0;
 $t = $t|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_towctrans($c,$t)|0);
 return ($0|0);
}
function _towlower_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_towlower($c)|0);
 return ($0|0);
}
function _towupper_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_towupper($c)|0);
 return ($0|0);
}
function _uselocale($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 $1 = ((($0)) + 176|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($l|0)==(0|0);
 if (!($3)) {
  HEAP32[$1>>2] = $l;
 }
 return ($2|0);
}
function ___wcscoll_l($l,$r,$locale) {
 $l = $l|0;
 $r = $r|0;
 $locale = $locale|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcscmp($l,$r)|0);
 return ($0|0);
}
function _wcscoll($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcscmp($l,$r)|0);
 return ($0|0);
}
function ___wcsxfrm_l($dest,$src,$n,$loc) {
 $dest = $dest|0;
 $src = $src|0;
 $n = $n|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($src)|0);
 $1 = ($0>>>0)<($n>>>0);
 if ($1) {
  $2 = (($0) + 1)|0;
  (_wmemcpy($dest,$src,$2)|0);
 } else {
  $3 = ($n|0)==(0);
  if (!($3)) {
   $4 = (($n) + -1)|0;
   (_wmemcpy($dest,$src,$4)|0);
   $5 = (($dest) + ($4<<2)|0);
   HEAP32[$5>>2] = 0;
  }
 }
 return ($0|0);
}
function _wcsxfrm($dest,$src,$n) {
 $dest = $dest|0;
 $src = $src|0;
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___wcsxfrm_l($dest,$src,$n,0)|0);
 return ($0|0);
}
function _wctrans_l($s,$l) {
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wctrans($s)|0);
 return ($0|0);
}
function _wctype_l($s,$l) {
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wctype($s)|0);
 return ($0|0);
}
function _acosh($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 $5 = ($4>>>0)<(1024);
 do {
  if ($5) {
   $6 = $x + -1.0;
   $7 = $6 * $6;
   $8 = $6 * 2.0;
   $9 = $7 + $8;
   $10 = (+Math_sqrt((+$9)));
   $11 = $6 + $10;
   $12 = (+_log1p($11));
   $$0 = $12;
  } else {
   $13 = ($4>>>0)<(1049);
   if ($13) {
    $14 = $x * 2.0;
    $15 = $x * $x;
    $16 = $15 + -1.0;
    $17 = (+Math_sqrt((+$16)));
    $18 = $17 + $x;
    $19 = 1.0 / $18;
    $20 = $14 - $19;
    $21 = (+Math_log((+$20)));
    $$0 = $21;
    break;
   } else {
    $22 = (+Math_log((+$x)));
    $23 = $22 + 0.69314718055994529;
    $$0 = $23;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _acoshf($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
 var $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2147483647;
 $2 = ($1>>>0)<(1073741824);
 do {
  if ($2) {
   $3 = $x + -1.0;
   $4 = $3 * $3;
   $5 = $3 * 2.0;
   $6 = $4 + $5;
   $7 = (+Math_sqrt((+$6)));
   $8 = $3 + $7;
   $9 = (+_log1pf($8));
   $$0 = $9;
  } else {
   $10 = ($1>>>0)<(1166016512);
   if ($10) {
    $11 = $x * 2.0;
    $12 = $x * $x;
    $13 = $12 + -1.0;
    $14 = (+Math_sqrt((+$13)));
    $15 = $14 + $x;
    $16 = 1.0 / $15;
    $17 = $11 - $16;
    $18 = (+Math_log((+$17)));
    $$0 = $18;
    break;
   } else {
    $19 = (+Math_log((+$x)));
    $20 = $19 + 0.69314718246459961;
    $$0 = $20;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _acoshl($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_acosh($x));
 return (+$0);
}
function _asinh($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 $5 = $1 & 2147483647;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $5;$6 = +HEAPF64[tempDoublePtr>>3];
 $7 = ($4>>>0)>(1048);
 do {
  if ($7) {
   $8 = (+Math_log((+$6)));
   $9 = $8 + 0.69314718055994529;
   $$0 = $9;
  } else {
   $10 = ($4>>>0)>(1023);
   if ($10) {
    $11 = $6 * 2.0;
    $12 = $6 * $6;
    $13 = $12 + 1.0;
    $14 = (+Math_sqrt((+$13)));
    $15 = $6 + $14;
    $16 = 1.0 / $15;
    $17 = $11 + $16;
    $18 = (+Math_log((+$17)));
    $$0 = $18;
    break;
   }
   $19 = ($4>>>0)>(996);
   if ($19) {
    $20 = $6 * $6;
    $21 = $20 + 1.0;
    $22 = (+Math_sqrt((+$21)));
    $23 = $22 + 1.0;
    $24 = $20 / $23;
    $25 = $6 + $24;
    $26 = (+_log1p($25));
    $$0 = $26;
   } else {
    $$0 = $6;
   }
  }
 } while(0);
 $27 = ($1|0)<(0);
 $28 = -$$0;
 $29 = $27 ? $28 : $$0;
 return (+$29);
}
function _asinhf($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2147483647;
 $2 = (HEAP32[tempDoublePtr>>2]=$1,+HEAPF32[tempDoublePtr>>2]);
 $3 = ($1>>>0)>(1166016511);
 do {
  if ($3) {
   $4 = (+Math_log((+$2)));
   $5 = $4 + 0.69314718246459961;
   $$0 = $5;
  } else {
   $6 = ($1>>>0)>(1073741823);
   if ($6) {
    $7 = $2 * 2.0;
    $8 = $2 * $2;
    $9 = $8 + 1.0;
    $10 = (+Math_sqrt((+$9)));
    $11 = $2 + $10;
    $12 = 1.0 / $11;
    $13 = $7 + $12;
    $14 = (+Math_log((+$13)));
    $$0 = $14;
    break;
   }
   $15 = ($1>>>0)>(964689919);
   if ($15) {
    $16 = $2 * $2;
    $17 = $16 + 1.0;
    $18 = (+Math_sqrt((+$17)));
    $19 = $18 + 1.0;
    $20 = $16 / $19;
    $21 = $2 + $20;
    $22 = (+_log1pf($21));
    $$0 = $22;
   } else {
    $$0 = $2;
   }
  }
 } while(0);
 $23 = ($0|0)<(0);
 $24 = -$$0;
 $25 = $23 ? $24 : $$0;
 return (+$25);
}
function _asinhl($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_asinh($x));
 return (+$0);
}
function _atanh($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 $5 = $1 & 2147483647;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $5;$6 = +HEAPF64[tempDoublePtr>>3];
 $7 = ($4>>>0)<(1022);
 if ($7) {
  $8 = ($4>>>0)<(991);
  if ($8) {
   $y$0 = $6;
  } else {
   $9 = $6 * 2.0;
   $10 = $6 * $9;
   $11 = 1.0 - $6;
   $12 = $10 / $11;
   $13 = $9 + $12;
   $14 = (+_log1p($13));
   $15 = $14 * 0.5;
   $y$0 = $15;
  }
 } else {
  $16 = 1.0 - $6;
  $17 = $6 / $16;
  $18 = $17 * 2.0;
  $19 = (+_log1p($18));
  $20 = $19 * 0.5;
  $y$0 = $20;
 }
 $21 = ($1|0)<(0);
 $22 = -$y$0;
 $23 = $21 ? $22 : $y$0;
 return (+$23);
}
function _atanhf($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2147483647;
 $2 = (HEAP32[tempDoublePtr>>2]=$1,+HEAPF32[tempDoublePtr>>2]);
 $3 = ($1>>>0)<(1056964608);
 if ($3) {
  $4 = ($1>>>0)<(796917760);
  if ($4) {
   $y$0 = $2;
  } else {
   $5 = $2 * 2.0;
   $6 = $2 * $5;
   $7 = 1.0 - $2;
   $8 = $6 / $7;
   $9 = $5 + $8;
   $10 = (+_log1pf($9));
   $11 = $10 * 0.5;
   $y$0 = $11;
  }
 } else {
  $12 = 1.0 - $2;
  $13 = $2 / $12;
  $14 = $13 * 2.0;
  $15 = (+_log1pf($14));
  $16 = $15 * 0.5;
  $y$0 = $16;
 }
 $17 = ($0|0)<(0);
 $18 = -$y$0;
 $19 = $17 ? $18 : $y$0;
 return (+$19);
}
function _atanhl($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_atanh($x));
 return (+$0);
}
function _cbrt($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $hx$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 $3 = ($2>>>0)>(2146435071);
 do {
  if ($3) {
   $4 = $x + $x;
   $$0 = $4;
  } else {
   $5 = ($2>>>0)<(1048576);
   if ($5) {
    $6 = $x * 18014398509481984.0;
    HEAPF64[tempDoublePtr>>3] = $6;$7 = HEAP32[tempDoublePtr>>2]|0;
    $8 = HEAP32[tempDoublePtr+4>>2]|0;
    $9 = $8 & 2147483647;
    $10 = ($9|0)==(0);
    if ($10) {
     $$0 = $x;
     break;
    }
    $11 = (($9>>>0) / 3)&-1;
    $12 = (($11) + 696219795)|0;
    $16 = $8;$47 = $7;$hx$0 = $12;
   } else {
    $13 = (($2>>>0) / 3)&-1;
    $14 = (($13) + 715094163)|0;
    $16 = $1;$47 = $0;$hx$0 = $14;
   }
   $15 = $16 & -2147483648;
   $17 = $hx$0 | $15;
   HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $17;$18 = +HEAPF64[tempDoublePtr>>3];
   $19 = $18 * $18;
   $20 = $18 / $x;
   $21 = $20 * $19;
   $22 = $21 * 1.6214297201053545;
   $23 = $22 + -1.8849797954337717;
   $24 = $21 * $23;
   $25 = $24 + 1.8759518242717701;
   $26 = $21 * $21;
   $27 = $21 * $26;
   $28 = $21 * 0.14599619288661245;
   $29 = $28 + -0.75839793477876605;
   $30 = $27 * $29;
   $31 = $30 + $25;
   $32 = $18 * $31;
   HEAPF64[tempDoublePtr>>3] = $32;$33 = HEAP32[tempDoublePtr>>2]|0;
   $34 = HEAP32[tempDoublePtr+4>>2]|0;
   $35 = (_i64Add(($33|0),($34|0),-2147483648,0)|0);
   $36 = tempRet0;
   $37 = $35 & -1073741824;
   HEAP32[tempDoublePtr>>2] = $37;HEAP32[tempDoublePtr+4>>2] = $36;$38 = +HEAPF64[tempDoublePtr>>3];
   $39 = $38 * $38;
   $40 = $x / $39;
   $41 = $38 + $38;
   $42 = $40 - $38;
   $43 = $40 + $41;
   $44 = $42 / $43;
   $45 = $44 * $38;
   $46 = $38 + $45;
   $$0 = $46;
  }
 } while(0);
 return (+$$0);
}
function _cbrtf($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $hx$0 = 0, $u$sroa$0$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2147483647;
 $2 = ($1>>>0)>(2139095039);
 do {
  if ($2) {
   $3 = $x + $x;
   $$0 = $3;
  } else {
   $4 = ($1>>>0)<(8388608);
   if ($4) {
    $5 = ($1|0)==(0);
    if ($5) {
     $$0 = $x;
     break;
    }
    $6 = $x * 16777216.0;
    $7 = (HEAPF32[tempDoublePtr>>2]=$6,HEAP32[tempDoublePtr>>2]|0);
    $8 = $7 & 2147483647;
    $9 = (($8>>>0) / 3)&-1;
    $10 = (($9) + 642849266)|0;
    $hx$0 = $10;$u$sroa$0$0 = $7;
   } else {
    $11 = (($1>>>0) / 3)&-1;
    $12 = (($11) + 709958130)|0;
    $hx$0 = $12;$u$sroa$0$0 = $0;
   }
   $13 = $u$sroa$0$0 & -2147483648;
   $14 = $13 | $hx$0;
   $15 = (HEAP32[tempDoublePtr>>2]=$14,+HEAPF32[tempDoublePtr>>2]);
   $16 = $15;
   $17 = $16 * $16;
   $18 = $16 * $17;
   $19 = $x;
   $20 = $19 + $19;
   $21 = $20 + $18;
   $22 = $16 * $21;
   $23 = $19 + $18;
   $24 = $18 + $23;
   $25 = $22 / $24;
   $26 = $25 * $25;
   $27 = $25 * $26;
   $28 = $20 + $27;
   $29 = $25 * $28;
   $30 = $19 + $27;
   $31 = $27 + $30;
   $32 = $29 / $31;
   $33 = $32;
   $$0 = $33;
  }
 } while(0);
 return (+$$0);
}
function _cbrtl($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_cbrt($x));
 return (+$0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignf($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = (HEAPF32[tempDoublePtr>>2]=$y,HEAP32[tempDoublePtr>>2]|0);
 $2 = $0 & 2147483647;
 $3 = $1 & -2147483648;
 $4 = $3 | $2;
 $5 = (HEAP32[tempDoublePtr>>2]=$4,+HEAPF32[tempDoublePtr>>2]);
 return (+$5);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _cosh($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $2;$3 = +HEAPF64[tempDoublePtr>>3];
 $4 = ($2>>>0)<(1072049730);
 do {
  if ($4) {
   $5 = ($2>>>0)<(1045430272);
   if ($5) {
    $$0 = 1.0;
   } else {
    $6 = (+_expm1($3));
    $7 = $6 * $6;
    $8 = $6 + 1.0;
    $9 = $8 * 2.0;
    $10 = $7 / $9;
    $11 = $10 + 1.0;
    $$0 = $11;
   }
  } else {
   $12 = ($2>>>0)<(1082535490);
   if ($12) {
    $13 = (+Math_exp((+$3)));
    $14 = 1.0 / $13;
    $15 = $13 + $14;
    $16 = $15 * 0.5;
    $$0 = $16;
    break;
   } else {
    $17 = (+___expo2($3));
    $$0 = $17;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _coshf($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2147483647;
 $2 = (HEAP32[tempDoublePtr>>2]=$1,+HEAPF32[tempDoublePtr>>2]);
 $3 = ($1>>>0)<(1060205079);
 do {
  if ($3) {
   $4 = ($1>>>0)<(964689920);
   if ($4) {
    $$0 = 1.0;
   } else {
    $5 = (+_expm1f($2));
    $6 = $5 * $5;
    $7 = $5 + 1.0;
    $8 = $7 * 2.0;
    $9 = $6 / $8;
    $10 = $9 + 1.0;
    $$0 = $10;
   }
  } else {
   $11 = ($1>>>0)<(1118925335);
   if ($11) {
    $12 = (+Math_exp((+$2)));
    $13 = 1.0 / $12;
    $14 = $12 + $13;
    $15 = $14 * 0.5;
    $$0 = $15;
    break;
   } else {
    $16 = (+___expo2f($2));
    $$0 = $16;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _coshl($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_cosh($x));
 return (+$0);
}
function _erf($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
 $3 = tempRet0;
 $4 = $1 & 2147483647;
 $5 = ($4>>>0)>(2146435071);
 do {
  if ($5) {
   $6 = (_bitshift64Shl(($2|0),($3|0),1)|0);
   $7 = tempRet0;
   $8 = (1 - ($6))|0;
   $9 = (+($8|0));
   $10 = 1.0 / $x;
   $11 = $9 + $10;
   $$0 = $11;
  } else {
   $12 = ($4>>>0)<(1072365568);
   if ($12) {
    $13 = ($4>>>0)<(1043333120);
    if ($13) {
     $14 = $x * 8.0;
     $15 = $x * 1.0270333367641007;
     $16 = $14 + $15;
     $17 = $16 * 0.125;
     $$0 = $17;
     break;
    } else {
     $18 = $x * $x;
     $19 = $18 * 2.3763016656650163E-5;
     $20 = -0.0057702702964894416 - $19;
     $21 = $18 * $20;
     $22 = $21 + -0.02848174957559851;
     $23 = $18 * $22;
     $24 = $23 + -0.3250421072470015;
     $25 = $18 * $24;
     $26 = $25 + 0.12837916709551256;
     $27 = $18 * 3.9602282787753681E-6;
     $28 = 1.3249473800432164E-4 - $27;
     $29 = $18 * $28;
     $30 = $29 + 0.0050813062818757656;
     $31 = $18 * $30;
     $32 = $31 + 0.065022249988767294;
     $33 = $18 * $32;
     $34 = $33 + 0.39791722395915535;
     $35 = $18 * $34;
     $36 = $35 + 1.0;
     $37 = $26 / $36;
     $38 = $37 * $x;
     $39 = $38 + $x;
     $$0 = $39;
     break;
    }
   } else {
    $40 = ($4>>>0)<(1075314688);
    if ($40) {
     $41 = (+_erfc2($4,$x));
     $42 = 1.0 - $41;
     $y$0 = $42;
    } else {
     $y$0 = 1.0;
    }
    $43 = ($2|0)!=(0);
    $44 = ($3|0)!=(0);
    $45 = $43 | $44;
    $46 = -$y$0;
    $47 = $45 ? $46 : $y$0;
    $$0 = $47;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _erfc($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0;
 var $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
 $3 = tempRet0;
 $4 = $1 & 2147483647;
 $5 = ($4>>>0)>(2146435071);
 do {
  if ($5) {
   $6 = (_bitshift64Shl(($2|0),($3|0),1)|0);
   $7 = tempRet0;
   $8 = (+($6|0));
   $9 = 1.0 / $x;
   $10 = $8 + $9;
   $$0 = $10;
  } else {
   $11 = ($4>>>0)<(1072365568);
   if (!($11)) {
    $43 = ($4>>>0)<(1077673984);
    $44 = ($2|0)!=(0);
    if ($43) {
     $45 = (+_erfc2($4,$x));
     $46 = 2.0 - $45;
     $47 = $44 ? $46 : $45;
     $$0 = $47;
     break;
    } else {
     $48 = $44 ? 2.0 : 0.0;
     $$0 = $48;
     break;
    }
   }
   $12 = ($4>>>0)<(1013972992);
   if ($12) {
    $13 = 1.0 - $x;
    $$0 = $13;
    break;
   }
   $14 = $x * $x;
   $15 = $14 * 2.3763016656650163E-5;
   $16 = -0.0057702702964894416 - $15;
   $17 = $14 * $16;
   $18 = $17 + -0.02848174957559851;
   $19 = $14 * $18;
   $20 = $19 + -0.3250421072470015;
   $21 = $14 * $20;
   $22 = $21 + 0.12837916709551256;
   $23 = $14 * 3.9602282787753681E-6;
   $24 = 1.3249473800432164E-4 - $23;
   $25 = $14 * $24;
   $26 = $25 + 0.0050813062818757656;
   $27 = $14 * $26;
   $28 = $27 + 0.065022249988767294;
   $29 = $14 * $28;
   $30 = $29 + 0.39791722395915535;
   $31 = $14 * $30;
   $32 = $31 + 1.0;
   $33 = $22 / $32;
   $34 = ($2|0)!=(0);
   $35 = ($4>>>0)<(1070596096);
   $or$cond = $34 | $35;
   if ($or$cond) {
    $36 = $33 * $x;
    $37 = $36 + $x;
    $38 = 1.0 - $37;
    $$0 = $38;
    break;
   } else {
    $39 = $x + -0.5;
    $40 = $33 * $x;
    $41 = $39 + $40;
    $42 = 0.5 - $41;
    $$0 = $42;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _erff($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $5 = 0;
 var $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 >>> 31;
 $2 = $0 & 2147483647;
 $3 = ($2>>>0)>(2139095039);
 do {
  if ($3) {
   $4 = $1 << 1;
   $5 = (1 - ($4))|0;
   $6 = (+($5|0));
   $7 = 1.0 / $x;
   $8 = $6 + $7;
   $$0 = $8;
  } else {
   $9 = ($2>>>0)<(1062731776);
   if ($9) {
    $10 = ($2>>>0)<(830472192);
    if ($10) {
     $11 = $x * 8.0;
     $12 = $x * 1.0270333290100098;
     $13 = $11 + $12;
     $14 = $13 * 0.125;
     $$0 = $14;
     break;
    } else {
     $15 = $x * $x;
     $16 = $15 * 2.3763017452438362E-5;
     $17 = -0.0057702702470123768 - $16;
     $18 = $15 * $17;
     $19 = $18 + -0.028481749817728996;
     $20 = $15 * $19;
     $21 = $20 + -0.32504209876060486;
     $22 = $15 * $21;
     $23 = $22 + 0.12837916612625122;
     $24 = $15 * 3.9602282413397916E-6;
     $25 = 1.3249473704490811E-4 - $24;
     $26 = $15 * $25;
     $27 = $26 + 0.0050813062116503716;
     $28 = $15 * $27;
     $29 = $28 + 0.06502225250005722;
     $30 = $15 * $29;
     $31 = $30 + 0.39791721105575562;
     $32 = $15 * $31;
     $33 = $32 + 1.0;
     $34 = $23 / $33;
     $35 = $34 * $x;
     $36 = $35 + $x;
     $$0 = $36;
     break;
    }
   } else {
    $37 = ($2>>>0)<(1086324736);
    if ($37) {
     $38 = (+_erfc2144($2,$x));
     $39 = 1.0 - $38;
     $y$0 = $39;
    } else {
     $y$0 = 1.0;
    }
    $40 = ($1|0)!=(0);
    $41 = -$y$0;
    $42 = $40 ? $41 : $y$0;
    $$0 = $42;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _erfcf($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 >>> 31;
 $2 = $0 & 2147483647;
 $3 = ($2>>>0)>(2139095039);
 do {
  if ($3) {
   $4 = $1 << 1;
   $5 = (+($4|0));
   $6 = 1.0 / $x;
   $7 = $5 + $6;
   $$0 = $7;
  } else {
   $8 = ($2>>>0)<(1062731776);
   if (!($8)) {
    $40 = ($2>>>0)<(1105199104);
    $41 = ($1|0)!=(0);
    if ($40) {
     $42 = (+_erfc2144($2,$x));
     $43 = 2.0 - $42;
     $44 = $41 ? $43 : $42;
     $$0 = $44;
     break;
    } else {
     $45 = $41 ? 2.0 : 0.0;
     $$0 = $45;
     break;
    }
   }
   $9 = ($2>>>0)<(595591168);
   if ($9) {
    $10 = 1.0 - $x;
    $$0 = $10;
    break;
   }
   $11 = $x * $x;
   $12 = $11 * 2.3763017452438362E-5;
   $13 = -0.0057702702470123768 - $12;
   $14 = $11 * $13;
   $15 = $14 + -0.028481749817728996;
   $16 = $11 * $15;
   $17 = $16 + -0.32504209876060486;
   $18 = $11 * $17;
   $19 = $18 + 0.12837916612625122;
   $20 = $11 * 3.9602282413397916E-6;
   $21 = 1.3249473704490811E-4 - $20;
   $22 = $11 * $21;
   $23 = $22 + 0.0050813062116503716;
   $24 = $11 * $23;
   $25 = $24 + 0.06502225250005722;
   $26 = $11 * $25;
   $27 = $26 + 0.39791721105575562;
   $28 = $11 * $27;
   $29 = $28 + 1.0;
   $30 = $19 / $29;
   $31 = ($1|0)!=(0);
   $32 = ($2>>>0)<(1048576000);
   $or$cond = $31 | $32;
   if ($or$cond) {
    $33 = $30 * $x;
    $34 = $33 + $x;
    $35 = 1.0 - $34;
    $$0 = $35;
    break;
   } else {
    $36 = $x + -0.5;
    $37 = $30 * $x;
    $38 = $36 + $37;
    $39 = 0.5 - $38;
    $$0 = $39;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _erfl($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_erf($x));
 return (+$0);
}
function _erfcl($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_erfc($x));
 return (+$0);
}
function _exp10($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $n = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $n = sp;
 $0 = (+_modf($x,$n));
 $1 = +HEAPF64[$n>>3];
 $2 = (+Math_abs((+$1)));
 $3 = $2 < 16.0;
 do {
  if ($3) {
   $4 = $0 != 0.0;
   if ($4) {
    $9 = $0 * 3.3219280948873622;
    $10 = (+_exp2($9));
    $11 = (~~(($1)));
    $12 = (($11) + 15)|0;
    $13 = (8 + ($12<<3)|0);
    $14 = +HEAPF64[$13>>3];
    $15 = $10 * $14;
    $$0 = $15;
    break;
   } else {
    $5 = (~~(($1)));
    $6 = (($5) + 15)|0;
    $7 = (8 + ($6<<3)|0);
    $8 = +HEAPF64[$7>>3];
    $$0 = $8;
    break;
   }
  } else {
   $16 = (+Math_pow(10.0,(+$x)));
   $$0 = $16;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function _exp10f($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0;
 var $9 = 0.0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $n = sp;
 $0 = (+_modff($x,$n));
 $1 = +HEAPF32[$n>>2];
 $2 = (+Math_abs((+$1)));
 $3 = $2 < 8.0;
 do {
  if ($3) {
   $4 = $0 != 0.0;
   if ($4) {
    $9 = $0 * 3.3219280242919922;
    $10 = (+_exp2f($9));
    $11 = (~~(($1)));
    $12 = (($11) + 7)|0;
    $13 = (14488 + ($12<<2)|0);
    $14 = +HEAPF32[$13>>2];
    $15 = $10 * $14;
    $$0 = $15;
    break;
   } else {
    $5 = (~~(($1)));
    $6 = (($5) + 7)|0;
    $7 = (14488 + ($6<<2)|0);
    $8 = +HEAPF32[$7>>2];
    $$0 = $8;
    break;
   }
  } else {
   $16 = $x;
   $17 = $16 * 3.3219280948873622;
   $18 = (+_exp2($17));
   $19 = $18;
   $$0 = $19;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function _exp10l($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $n = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $n = sp;
 $0 = (+_modfl($x,$n));
 $1 = +HEAPF64[$n>>3];
 $2 = (+Math_abs((+$1)));
 $3 = $2 < 16.0;
 do {
  if ($3) {
   $4 = $0 != 0.0;
   if ($4) {
    $9 = $0 * 3.3219280948873622;
    $10 = (+_exp2l($9));
    $11 = (~~(($1)));
    $12 = (($11) + 15)|0;
    $13 = (8 + ($12<<3)|0);
    $14 = +HEAPF64[$13>>3];
    $15 = $10 * $14;
    $$0 = $15;
    break;
   } else {
    $5 = (~~(($1)));
    $6 = (($5) + 15)|0;
    $7 = (8 + ($6<<3)|0);
    $8 = +HEAPF64[$7>>3];
    $$0 = $8;
    break;
   }
  } else {
   $16 = (+Math_pow(10.0,(+$x)));
   $$0 = $16;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function _exp2($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 $3 = ($2>>>0)>(1083174911);
 do {
  if ($3) {
   $4 = ($2>>>0)>(1083179007);
   $5 = ($1|0)>(-1);
   $6 = ($0>>>0)>(4294967295);
   $7 = ($1|0)==(-1);
   $8 = $7 & $6;
   $9 = $5 | $8;
   $or$cond = $9 & $4;
   if ($or$cond) {
    $10 = $x * 8.9884656743115795E+307;
    $$0 = $10;
    break;
   }
   $11 = ($2>>>0)>(2146435071);
   if ($11) {
    $12 = -1.0 / $x;
    $$0 = $12;
    break;
   } else {
    $13 = !($x <= -1075.0);
    $or$cond1 = $13 | $9;
    if ($or$cond1) {
     label = 9;
     break;
    } else {
     $$0 = 0.0;
     break;
    }
   }
  } else {
   $14 = ($2>>>0)<(1016070144);
   if ($14) {
    $15 = $x + 1.0;
    $$0 = $15;
   } else {
    label = 9;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $16 = $x + 26388279066624.0;
  HEAPF64[tempDoublePtr>>3] = $16;$17 = HEAP32[tempDoublePtr>>2]|0;
  $18 = HEAP32[tempDoublePtr+4>>2]|0;
  $19 = (($17) + 128)|0;
  $20 = $19 & -256;
  $21 = (($20|0) / 256)&-1;
  $22 = $16 + -26388279066624.0;
  $23 = $x - $22;
  $24 = $19 << 1;
  $25 = $24 & 510;
  $26 = (256 + ($25<<3)|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $25 | 1;
  $29 = (256 + ($28<<3)|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $23 - $30;
  $32 = $27 * $31;
  $33 = $31 * 0.0013333559164630223;
  $34 = $33 + 0.0096181298421260663;
  $35 = $31 * $34;
  $36 = $35 + 0.055504108664821403;
  $37 = $31 * $36;
  $38 = $37 + 0.2402265069591;
  $39 = $31 * $38;
  $40 = $39 + 0.69314718055994529;
  $41 = $32 * $40;
  $42 = $27 + $41;
  $43 = (+_scalbn($42,$21));
  $$0 = $43;
 }
 return (+$$0);
}
function _exp2f($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, $or$cond1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2147483647;
 $2 = ($1>>>0)>(1123811328);
 do {
  if ($2) {
   $3 = ($0>>>0)>(1124073471);
   $4 = ($0|0)>(-1);
   $or$cond = $3 & $4;
   if ($or$cond) {
    $5 = $x * 1.7014118346046923E+38;
    $$0 = $5;
    break;
   } else {
    $6 = ($0|0)<(0);
    $7 = ($0>>>0)>(3272998911);
    $or$cond1 = $6 & $7;
    if ($or$cond1) {
     $$0 = 0.0;
     break;
    } else {
     label = 7;
     break;
    }
   }
  } else {
   $8 = ($1>>>0)<(855638017);
   if ($8) {
    $9 = $x + 1.0;
    $$0 = $9;
   } else {
    label = 7;
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $10 = $x + 786432.0;
  $11 = (HEAPF32[tempDoublePtr>>2]=$10,HEAP32[tempDoublePtr>>2]|0);
  $12 = (($11) + 8)|0;
  $13 = $12 >>> 4;
  $14 = (($13) + 1023)|0;
  $15 = (_bitshift64Shl(($14|0),0,52)|0);
  $16 = tempRet0;
  $17 = $12 & 15;
  $18 = $10 + -786432.0;
  $19 = $x - $18;
  $20 = $19;
  $21 = (4352 + ($17<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $20 * $22;
  $24 = $20 * 0.24022650718688965;
  $25 = $24 + 0.69314718246459961;
  $26 = $25 * $23;
  $27 = $22 + $26;
  $28 = $20 * $20;
  $29 = $28 * $23;
  $30 = $20 * 0.0096183549612760544;
  $31 = $30 + 0.055505409836769104;
  $32 = $31 * $29;
  $33 = $27 + $32;
  HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$34 = +HEAPF64[tempDoublePtr>>3];
  $35 = $34 * $33;
  $36 = $35;
  $$0 = $36;
 }
 return (+$$0);
}
function _exp2l($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_exp2($x));
 return (+$0);
}
function _expm1($x) {
 $x = +$x;
 var $$0 = 0.0, $$02 = 0.0, $$pn = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0;
 var $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0;
 var $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $c$0 = 0.0, $hi$0 = 0.0, $k$0 = 0;
 var $k$1 = 0, $lo$0 = 0.0, $y$0 = 0.0, $y$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 $3 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
 $4 = tempRet0;
 $5 = ($2>>>0)>(1078159481);
 do {
  if ($5) {
   $6 = $1 & 2147483647;
   $7 = ($6>>>0)>(2146435072);
   $8 = ($0>>>0)>(0);
   $9 = ($6|0)==(2146435072);
   $10 = $9 & $8;
   $11 = $7 | $10;
   if ($11) {
    $$0 = $x;
   } else {
    $12 = ($3|0)==(0);
    if ($12) {
     $13 = $x > 709.78271289338397;
     if ($13) {
      $14 = $x * 8.9884656743115795E+307;
      $$0 = $14;
     } else {
      label = 11;
     }
    } else {
     $$0 = -1.0;
    }
   }
  } else {
   $15 = ($2>>>0)>(1071001154);
   if (!($15)) {
    $32 = ($2>>>0)<(1016070144);
    if ($32) {
     $$0 = $x;
     break;
    } else {
     $$02 = $x;$c$0 = 0.0;$k$1 = 0;
     label = 14;
     break;
    }
   }
   $16 = ($2>>>0)<(1072734898);
   if ($16) {
    $17 = ($3|0)==(0);
    if ($17) {
     $18 = $x + -0.69314718036912382;
     $hi$0 = $18;$k$0 = 1;$lo$0 = 1.9082149292705877E-10;
     label = 12;
     break;
    } else {
     $19 = $x + 0.69314718036912382;
     $hi$0 = $19;$k$0 = -1;$lo$0 = -1.9082149292705877E-10;
     label = 12;
     break;
    }
   } else {
    label = 11;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $20 = $x * 1.4426950408889634;
  $21 = ($3|0)!=(0);
  $22 = $21 ? -0.5 : 0.5;
  $23 = $20 + $22;
  $24 = (~~(($23)));
  $25 = (+($24|0));
  $26 = $25 * 0.69314718036912382;
  $27 = $x - $26;
  $28 = $25 * 1.9082149292705877E-10;
  $hi$0 = $27;$k$0 = $24;$lo$0 = $28;
  label = 12;
 }
 if ((label|0) == 12) {
  $29 = $hi$0 - $lo$0;
  $30 = $hi$0 - $29;
  $31 = $30 - $lo$0;
  $$02 = $29;$c$0 = $31;$k$1 = $k$0;
  label = 14;
 }
 L18: do {
  if ((label|0) == 14) {
   $33 = $$02 * 0.5;
   $34 = $$02 * $33;
   $35 = $34 * 2.0109921818362437E-7;
   $36 = 4.0082178273293624E-6 - $35;
   $37 = $34 * $36;
   $38 = $37 + -7.9365075786748794E-5;
   $39 = $34 * $38;
   $40 = $39 + 0.0015873015872548146;
   $41 = $34 * $40;
   $42 = $41 + -0.033333333333333132;
   $43 = $34 * $42;
   $44 = $43 + 1.0;
   $45 = $33 * $44;
   $46 = 3.0 - $45;
   $47 = $44 - $46;
   $48 = $$02 * $46;
   $49 = 6.0 - $48;
   $50 = $47 / $49;
   $51 = $34 * $50;
   $52 = ($k$1|0)==(0);
   if ($52) {
    $53 = $$02 * $51;
    $54 = $53 - $34;
    $55 = $$02 - $54;
    $$0 = $55;
    break;
   }
   $56 = $51 - $c$0;
   $57 = $$02 * $56;
   $58 = $57 - $c$0;
   $59 = $58 - $34;
   switch ($k$1|0) {
   case -1:  {
    $60 = $$02 - $59;
    $61 = $60 * 0.5;
    $62 = $61 + -0.5;
    $$0 = $62;
    break L18;
    break;
   }
   case 1:  {
    $63 = $$02 < -0.25;
    if ($63) {
     $64 = $$02 + 0.5;
     $65 = $59 - $64;
     $66 = $65 * -2.0;
     $$0 = $66;
     break L18;
    } else {
     $67 = $$02 - $59;
     $68 = $67 * 2.0;
     $69 = $68 + 1.0;
     $$0 = $69;
     break L18;
    }
    break;
   }
   default: {
    $70 = (($k$1) + 1023)|0;
    $71 = (_bitshift64Shl(($70|0),0,52)|0);
    $72 = tempRet0;
    HEAP32[tempDoublePtr>>2] = $71;HEAP32[tempDoublePtr+4>>2] = $72;$73 = +HEAPF64[tempDoublePtr>>3];
    $74 = ($k$1>>>0)>(56);
    if ($74) {
     $75 = $$02 - $59;
     $76 = $75 + 1.0;
     $77 = ($k$1|0)==(1024);
     $78 = $76 * 2.0;
     $79 = $78 * 8.9884656743115795E+307;
     $80 = $73 * $76;
     $y$0 = $77 ? $79 : $80;
     $81 = $y$0 + -1.0;
     $$0 = $81;
     break L18;
    }
    $82 = (1023 - ($k$1))|0;
    $83 = (_bitshift64Shl(($82|0),0,52)|0);
    $84 = tempRet0;
    $85 = ($k$1|0)<(20);
    if ($85) {
     $86 = $$02 - $59;
     HEAP32[tempDoublePtr>>2] = $83;HEAP32[tempDoublePtr+4>>2] = $84;$87 = +HEAPF64[tempDoublePtr>>3];
     $88 = 1.0 - $87;
     $89 = $88 + $86;
     $$pn = $89;
    } else {
     HEAP32[tempDoublePtr>>2] = $83;HEAP32[tempDoublePtr+4>>2] = $84;$90 = +HEAPF64[tempDoublePtr>>3];
     $91 = $90 + $59;
     $92 = $$02 - $91;
     $93 = $92 + 1.0;
     $$pn = $93;
    }
    $y$1 = $73 * $$pn;
    $$0 = $y$1;
    break L18;
   }
   }
  }
 } while(0);
 return (+$$0);
}
function _expm1f($x) {
 $x = +$x;
 var $$0 = 0.0, $$02 = 0.0, $$pn = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0;
 var $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0;
 var $8 = 0, $9 = 0, $c$0 = 0.0, $hi$0 = 0.0, $k$0 = 0, $k$1 = 0, $lo$0 = 0.0, $y$0 = 0.0, $y$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2147483647;
 $2 = $0 >>> 31;
 $3 = ($1>>>0)>(1100331075);
 do {
  if ($3) {
   $4 = ($1>>>0)>(2139095040);
   if ($4) {
    $$0 = $x;
   } else {
    $5 = ($2|0)==(0);
    if ($5) {
     $6 = $x > 88.7216796875;
     if ($6) {
      $7 = $x * 1.7014118346046923E+38;
      $$0 = $7;
     } else {
      label = 11;
     }
    } else {
     $$0 = -1.0;
    }
   }
  } else {
   $8 = ($1>>>0)>(1051816472);
   if (!($8)) {
    $25 = ($1>>>0)<(855638016);
    if ($25) {
     $$0 = $x;
     break;
    } else {
     $$02 = $x;$c$0 = 0.0;$k$1 = 0;
     label = 14;
     break;
    }
   }
   $9 = ($1>>>0)<(1065686418);
   if ($9) {
    $10 = ($2|0)==(0);
    if ($10) {
     $11 = $x + -0.69313812255859375;
     $hi$0 = $11;$k$0 = 1;$lo$0 = 9.0580006144591607E-6;
     label = 12;
     break;
    } else {
     $12 = $x + 0.69313812255859375;
     $hi$0 = $12;$k$0 = -1;$lo$0 = -9.0580006144591607E-6;
     label = 12;
     break;
    }
   } else {
    label = 11;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $13 = $x * 1.4426950216293335;
  $14 = ($2|0)!=(0);
  $15 = $14 ? -0.5 : 0.5;
  $16 = $13 + $15;
  $17 = (~~(($16)));
  $18 = (+($17|0));
  $19 = $18 * 0.69313812255859375;
  $20 = $x - $19;
  $21 = $18 * 9.0580006144591607E-6;
  $hi$0 = $20;$k$0 = $17;$lo$0 = $21;
  label = 12;
 }
 if ((label|0) == 12) {
  $22 = $hi$0 - $lo$0;
  $23 = $hi$0 - $22;
  $24 = $23 - $lo$0;
  $$02 = $22;$c$0 = $24;$k$1 = $k$0;
  label = 14;
 }
 L18: do {
  if ((label|0) == 14) {
   $26 = $$02 * 0.5;
   $27 = $$02 * $26;
   $28 = $27 * 0.0015807170420885086;
   $29 = $28 + -0.03333321213722229;
   $30 = $27 * $29;
   $31 = $30 + 1.0;
   $32 = $26 * $31;
   $33 = 3.0 - $32;
   $34 = $31 - $33;
   $35 = $$02 * $33;
   $36 = 6.0 - $35;
   $37 = $34 / $36;
   $38 = $27 * $37;
   $39 = ($k$1|0)==(0);
   if ($39) {
    $40 = $$02 * $38;
    $41 = $40 - $27;
    $42 = $$02 - $41;
    $$0 = $42;
    break;
   }
   $43 = $38 - $c$0;
   $44 = $$02 * $43;
   $45 = $44 - $c$0;
   $46 = $45 - $27;
   switch ($k$1|0) {
   case -1:  {
    $47 = $$02 - $46;
    $48 = $47 * 0.5;
    $49 = $48 + -0.5;
    $$0 = $49;
    break L18;
    break;
   }
   case 1:  {
    $50 = $$02 < -0.25;
    if ($50) {
     $51 = $$02 + 0.5;
     $52 = $46 - $51;
     $53 = $52 * -2.0;
     $$0 = $53;
     break L18;
    } else {
     $54 = $$02 - $46;
     $55 = $54 * 2.0;
     $56 = $55 + 1.0;
     $$0 = $56;
     break L18;
    }
    break;
   }
   default: {
    $57 = $k$1 << 23;
    $58 = (($57) + 1065353216)|0;
    $59 = (HEAP32[tempDoublePtr>>2]=$58,+HEAPF32[tempDoublePtr>>2]);
    $60 = ($k$1>>>0)>(56);
    if ($60) {
     $61 = $$02 - $46;
     $62 = $61 + 1.0;
     $63 = ($k$1|0)==(128);
     $64 = $62 * 2.0;
     $65 = $64 * 1.7014118346046923E+38;
     $66 = $59 * $62;
     $y$0 = $63 ? $65 : $66;
     $67 = $y$0 + -1.0;
     $$0 = $67;
     break L18;
    }
    $68 = (127 - ($k$1))|0;
    $69 = $68 << 23;
    $70 = ($k$1|0)<(23);
    if ($70) {
     $71 = $$02 - $46;
     $72 = (HEAP32[tempDoublePtr>>2]=$69,+HEAPF32[tempDoublePtr>>2]);
     $73 = 1.0 - $72;
     $74 = $73 + $71;
     $$pn = $74;
    } else {
     $75 = (HEAP32[tempDoublePtr>>2]=$69,+HEAPF32[tempDoublePtr>>2]);
     $76 = $75 + $46;
     $77 = $$02 - $76;
     $78 = $77 + 1.0;
     $$pn = $78;
    }
    $y$1 = $59 * $$pn;
    $$0 = $y$1;
    break L18;
   }
   }
  }
 } while(0);
 return (+$$0);
}
function _expm1l($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_expm1($x));
 return (+$0);
}
function _fdim($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 $3 = ($2>>>0)>(2146435072);
 $4 = ($0>>>0)>(0);
 $5 = ($2|0)==(2146435072);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0 = $x;
 } else {
  HEAPF64[tempDoublePtr>>3] = $y;$8 = HEAP32[tempDoublePtr>>2]|0;
  $9 = HEAP32[tempDoublePtr+4>>2]|0;
  $10 = $9 & 2147483647;
  $11 = ($10>>>0)>(2146435072);
  $12 = ($8>>>0)>(0);
  $13 = ($10|0)==(2146435072);
  $14 = $13 & $12;
  $15 = $11 | $14;
  if ($15) {
   $$0 = $y;
  } else {
   $16 = $x > $y;
   $17 = $x - $y;
   $18 = $16 ? $17 : 0.0;
   $$0 = $18;
  }
 }
 return (+$$0);
}
function _fdimf($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2147483647;
 $2 = ($1>>>0)>(2139095040);
 if ($2) {
  $$0 = $x;
 } else {
  $3 = (HEAPF32[tempDoublePtr>>2]=$y,HEAP32[tempDoublePtr>>2]|0);
  $4 = $3 & 2147483647;
  $5 = ($4>>>0)>(2139095040);
  if ($5) {
   $$0 = $y;
  } else {
   $6 = $x > $y;
   $7 = $x - $y;
   $8 = $6 ? $7 : 0.0;
   $$0 = $8;
  }
 }
 return (+$$0);
}
function _fdiml($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fdim($x,$y));
 return (+$0);
}
function _finite($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2146435072;
 $3 = ($2>>>0)<(2146435072);
 $4 = (0)<(0);
 $5 = ($2|0)==(2146435072);
 $6 = $5 & $4;
 $7 = $3 | $6;
 $8 = $7&1;
 return ($8|0);
}
function _finitef($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2139095040;
 $2 = ($1>>>0)<(2139095040);
 $3 = $2&1;
 return ($3|0);
}
function _fma($x,$y,$z) {
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0;
 var $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0.0, $162 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0;
 var $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0;
 var $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $ex = 0, $ey = 0, $ez = 0, $or$cond = 0, $sum$sroa$0$0$i = 0.0, $sum$sroa$0$0$i2 = 0.0, $vzs = 0.0, $zs$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ex = sp + 16|0;
 $ey = sp + 12|0;
 $ez = sp + 8|0;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2146435072;
 $3 = ($2>>>0)<(2146435072);
 $4 = (0)<(0);
 $5 = ($2|0)==(2146435072);
 $6 = $5 & $4;
 $7 = $3 | $6;
 L1: do {
  if ($7) {
   HEAPF64[tempDoublePtr>>3] = $y;$8 = HEAP32[tempDoublePtr>>2]|0;
   $9 = HEAP32[tempDoublePtr+4>>2]|0;
   $10 = $9 & 2146435072;
   $11 = ($10>>>0)<(2146435072);
   $12 = (0)<(0);
   $13 = ($10|0)==(2146435072);
   $14 = $13 & $12;
   $15 = $11 | $14;
   if ($15) {
    HEAPF64[tempDoublePtr>>3] = $z;$18 = HEAP32[tempDoublePtr>>2]|0;
    $19 = HEAP32[tempDoublePtr+4>>2]|0;
    $20 = $19 & 2146435072;
    $21 = ($20>>>0)<(2146435072);
    $22 = (0)<(0);
    $23 = ($20|0)==(2146435072);
    $24 = $23 & $22;
    $25 = $21 | $24;
    if ($25) {
     $26 = $x == 0.0;
     $27 = $y == 0.0;
     $or$cond = $26 | $27;
     if ($or$cond) {
      $28 = $x * $y;
      $29 = $28 + $z;
      $$0 = $29;
      break;
     }
     $30 = $z == 0.0;
     if ($30) {
      $31 = $x * $y;
      $$0 = $31;
      break;
     }
     $32 = (+_frexp($x,$ex));
     $33 = (+_frexp($y,$ey));
     $34 = (+_frexp($z,$ez));
     $35 = (_fegetround()|0);
     $36 = HEAP32[$ex>>2]|0;
     $37 = HEAP32[$ey>>2]|0;
     $38 = (($37) + ($36))|0;
     $39 = HEAP32[$ez>>2]|0;
     $40 = (($38) - ($39))|0;
     $41 = ($40|0)<(-53);
     if ($41) {
      (_i64Add(($18|0),($19|0),0,1048576)|0);
      $42 = tempRet0;
      $43 = $42 & 2145386496;
      $44 = (0)==(0);
      $45 = ($43|0)==(0);
      $46 = $44 & $45;
      if ($46) {
      }
      switch ($35|0) {
      case 3072:  {
       $47 = $x > 0.0;
       $48 = $y < 0.0;
       $49 = $47 ^ $48;
       $50 = $z < 0.0;
       $51 = $49 ^ $50;
       if ($51) {
        $$0 = $z;
        break L1;
       }
       $52 = (+_nextafter($z,0.0));
       $$0 = $52;
       break L1;
       break;
      }
      case 1024:  {
       $53 = $x > 0.0;
       $54 = $y < 0.0;
       $55 = $53 ^ $54;
       if ($55) {
        $$0 = $z;
        break L1;
       }
       $56 = (+_nextafter($z,-inf));
       $$0 = $56;
       break L1;
       break;
      }
      case 2048:  {
       $57 = $x > 0.0;
       $58 = $y < 0.0;
       $59 = $57 ^ $58;
       if (!($59)) {
        $$0 = $z;
        break L1;
       }
       $60 = (+_nextafter($z,inf));
       $$0 = $60;
       break L1;
       break;
      }
      default: {
       $$0 = $z;
       break L1;
      }
      }
     }
     $61 = ($40|0)<(107);
     if ($61) {
      $62 = (0 - ($40))|0;
      $63 = (+_scalbn($34,$62));
      $zs$0 = $63;
     } else {
      $64 = (+_copysign(2.2250738585072014E-308,$34));
      $zs$0 = $64;
     }
     (_fesetround(0)|0);
     $65 = $32 * 134217729.0;
     $66 = $32 - $65;
     $67 = $65 + $66;
     $68 = $32 - $67;
     $69 = $33 * 134217729.0;
     $70 = $33 - $69;
     $71 = $69 + $70;
     $72 = $33 - $71;
     $73 = $67 * $71;
     $74 = $67 * $72;
     $75 = $68 * $71;
     $76 = $75 + $74;
     $77 = $73 + $76;
     $78 = $73 - $77;
     $79 = $76 + $78;
     $80 = $68 * $72;
     $81 = $80 + $79;
     $82 = $77 + $zs$0;
     $83 = $82 - $77;
     $84 = $82 - $83;
     $85 = $77 - $84;
     $86 = $zs$0 - $83;
     $87 = $86 + $85;
     $88 = $82 == 0.0;
     if ($88) {
      (_fesetround($35)|0);
      $vzs = $zs$0;
      $89 = $vzs;
      $90 = $77 + $89;
      $91 = (+_scalbn($81,$38));
      $92 = $90 + $91;
      $$0 = $92;
      break;
     }
     $93 = ($35|0)==(0);
     if (!($93)) {
      $94 = (_fetestexcept(32)|0);
      (_fesetround($35)|0);
      $95 = $81 + $87;
      $96 = $82 + $95;
      $97 = (+_scalbn($96,$38));
      $98 = (_ilogb($97)|0);
      $99 = ($98|0)<(-1022);
      if ($99) {
       $100 = (_fetestexcept(32)|0);
       $101 = ($100|0)==(0);
       if (!($101)) {
        $$0 = $97;
        break;
       }
      }
      $102 = ($94|0)==(0);
      if ($102) {
       $$0 = $97;
       break;
      }
      $$0 = $97;
      break;
     }
     $103 = $81 + $87;
     $104 = $103 - $87;
     $105 = $103 - $104;
     $106 = $87 - $105;
     $107 = $81 - $104;
     $108 = $107 + $106;
     $109 = $108 != 0.0;
     if ($109) {
      HEAPF64[tempDoublePtr>>3] = $103;$110 = HEAP32[tempDoublePtr>>2]|0;
      $111 = HEAP32[tempDoublePtr+4>>2]|0;
      $112 = $110 & 1;
      $113 = ($112|0)==(0);
      $114 = (0)==(0);
      $115 = $113 & $114;
      if ($115) {
       HEAPF64[tempDoublePtr>>3] = $108;$116 = HEAP32[tempDoublePtr>>2]|0;
       $117 = HEAP32[tempDoublePtr+4>>2]|0;
       $118 = $116 ^ $110;
       $119 = $117 ^ $111;
       $120 = (_bitshift64Lshr(($118|0),($119|0),62)|0);
       $121 = tempRet0;
       $122 = (_i64Add(($110|0),($111|0),1,0)|0);
       $123 = tempRet0;
       $124 = (_i64Subtract(($122|0),($123|0),($120|0),($121|0))|0);
       $125 = tempRet0;
       HEAP32[tempDoublePtr>>2] = $124;HEAP32[tempDoublePtr+4>>2] = $125;$126 = +HEAPF64[tempDoublePtr>>3];
       $sum$sroa$0$0$i2 = $126;
      } else {
       $sum$sroa$0$0$i2 = $103;
      }
     } else {
      $sum$sroa$0$0$i2 = $103;
     }
     $127 = (_ilogb($82)|0);
     $128 = (($127) + ($38))|0;
     $129 = ($128|0)>(-1023);
     $130 = $82 + $sum$sroa$0$0$i2;
     if ($129) {
      $131 = (+_scalbn($130,$38));
      $$0 = $131;
      break;
     }
     $132 = $130 - $82;
     $133 = $130 - $132;
     $134 = $82 - $133;
     $135 = $sum$sroa$0$0$i2 - $132;
     $136 = $135 + $134;
     $137 = $136 != 0.0;
     if ($137) {
      HEAPF64[tempDoublePtr>>3] = $130;$138 = HEAP32[tempDoublePtr>>2]|0;
      $139 = HEAP32[tempDoublePtr+4>>2]|0;
      $140 = (_bitshift64Lshr(($138|0),($139|0),52)|0);
      $141 = tempRet0;
      $142 = $140 & 2047;
      $143 = (0 - ($142))|0;
      $144 = ($38|0)!=($143|0);
      $145 = $138 & 1;
      $146 = ($145|0)!=(0);
      $147 = (0)!=(0);
      $148 = $146 | $147;
      $149 = $148 ^ $144;
      if ($149) {
       HEAPF64[tempDoublePtr>>3] = $136;$150 = HEAP32[tempDoublePtr>>2]|0;
       $151 = HEAP32[tempDoublePtr+4>>2]|0;
       $152 = $150 ^ $138;
       $153 = $151 ^ $139;
       $154 = (_bitshift64Lshr(($152|0),($153|0),62)|0);
       $155 = tempRet0;
       $156 = $154 & 2;
       $157 = (_i64Add(($138|0),($139|0),1,0)|0);
       $158 = tempRet0;
       $159 = (_i64Subtract(($157|0),($158|0),($156|0),0)|0);
       $160 = tempRet0;
       HEAP32[tempDoublePtr>>2] = $159;HEAP32[tempDoublePtr+4>>2] = $160;$161 = +HEAPF64[tempDoublePtr>>3];
       $sum$sroa$0$0$i = $161;
      } else {
       $sum$sroa$0$0$i = $130;
      }
     } else {
      $sum$sroa$0$0$i = $130;
     }
     $162 = (+_scalbn($sum$sroa$0$0$i,$38));
     $$0 = $162;
    } else {
     $$0 = $z;
    }
   } else {
    label = 3;
   }
  } else {
   label = 3;
  }
 } while(0);
 if ((label|0) == 3) {
  $16 = $x * $y;
  $17 = $16 + $z;
  $$0 = $17;
 }
 STACKTOP = sp;return (+$$0);
}
function _fmaf($x,$y,$z) {
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $$0 = 0.0, $$0$in = 0.0, $$off = 0, $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0;
 var $vxy = 0.0, $vz = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $y;
 $2 = $0 * $1;
 $3 = $z;
 $4 = $2 + $3;
 HEAPF64[tempDoublePtr>>3] = $4;$5 = HEAP32[tempDoublePtr>>2]|0;
 $6 = HEAP32[tempDoublePtr+4>>2]|0;
 $7 = (_bitshift64Lshr(($5|0),($6|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $5 & 536870911;
 $11 = ($10|0)!=(268435456);
 $12 = (0)!=(0);
 $13 = $11 | $12;
 $14 = ($9|0)==(2047);
 $or$cond = $13 | $14;
 $15 = $4 - $2;
 $16 = $15 == $3;
 $or$cond5 = $16 | $or$cond;
 if ($or$cond5) {
  label = 3;
 } else {
  $17 = (_fegetround()|0);
  $18 = ($17|0)==(0);
  if ($18) {
   (_fesetround(3072)|0);
   $vxy = $2;
   $27 = $vxy;
   $28 = $3 + $27;
   (_fesetround(0)|0);
   $29 = $4 == $28;
   if ($29) {
    HEAPF64[tempDoublePtr>>3] = $28;$30 = HEAP32[tempDoublePtr>>2]|0;
    $31 = HEAP32[tempDoublePtr+4>>2]|0;
    $32 = (_i64Add(($30|0),($31|0),1,0)|0);
    $33 = tempRet0;
    HEAP32[tempDoublePtr>>2] = $32;HEAP32[tempDoublePtr+4>>2] = $33;$34 = +HEAPF64[tempDoublePtr>>3];
    $$0$in = $34;
   } else {
    $$0$in = $28;
   }
  } else {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $$off = (($9) + -874)|0;
   $19 = ($$off>>>0)<(23);
   if ($19) {
    $20 = (_fetestexcept(32)|0);
    $21 = ($20|0)==(0);
    if ($21) {
     $$0$in = $4;
    } else {
     $vz = $z;
     $22 = $vz;
     $23 = $22;
     $24 = $2 + $23;
     $25 = (_fetestexcept(32)|0);
     $26 = ($25|0)==(0);
     if ($26) {
      $$0$in = $24;
      break;
     } else {
      $$0$in = $24;
      break;
     }
    }
   } else {
    $$0$in = $4;
   }
  }
 } while(0);
 $$0 = $$0$in;
 STACKTOP = sp;return (+$$0);
}
function _fmal($x,$y,$z) {
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_llvm_fma_f64((+$x),(+$y),(+$z)));
 return (+$0);
}
function _fmax($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 $3 = ($2>>>0)>(2146435072);
 $4 = ($0>>>0)>(0);
 $5 = ($2|0)==(2146435072);
 $6 = $5 & $4;
 $7 = $3 | $6;
 do {
  if ($7) {
   $$0 = $y;
  } else {
   HEAPF64[tempDoublePtr>>3] = $y;$8 = HEAP32[tempDoublePtr>>2]|0;
   $9 = HEAP32[tempDoublePtr+4>>2]|0;
   $10 = $9 & 2147483647;
   $11 = ($10>>>0)>(2146435072);
   $12 = ($8>>>0)>(0);
   $13 = ($10|0)==(2146435072);
   $14 = $13 & $12;
   $15 = $11 | $14;
   if ($15) {
    $$0 = $x;
   } else {
    $16 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
    $17 = tempRet0;
    $18 = (_bitshift64Lshr(($8|0),($9|0),63)|0);
    $19 = tempRet0;
    $20 = ($16|0)==($18|0);
    if ($20) {
     $23 = $x < $y;
     $24 = $23 ? $y : $x;
     $$0 = $24;
     break;
    } else {
     $21 = ($1|0)<(0);
     $22 = $21 ? $y : $x;
     $$0 = $22;
     break;
    }
   }
  }
 } while(0);
 return (+$$0);
}
function _fmaxf($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$unshifted = 0, $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2147483647;
 $2 = ($1>>>0)>(2139095040);
 do {
  if ($2) {
   $$0 = $y;
  } else {
   $3 = (HEAPF32[tempDoublePtr>>2]=$y,HEAP32[tempDoublePtr>>2]|0);
   $4 = $3 & 2147483647;
   $5 = ($4>>>0)>(2139095040);
   if ($5) {
    $$0 = $x;
   } else {
    $$unshifted = $3 ^ $0;
    $6 = ($$unshifted|0)<(0);
    if ($6) {
     $7 = ($0|0)<(0);
     $8 = $7 ? $y : $x;
     $$0 = $8;
     break;
    } else {
     $9 = $x < $y;
     $10 = $9 ? $y : $x;
     $$0 = $10;
     break;
    }
   }
  }
 } while(0);
 return (+$$0);
}
function _fmaxl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmax($x,$y));
 return (+$0);
}
function _fmin($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 $3 = ($2>>>0)>(2146435072);
 $4 = ($0>>>0)>(0);
 $5 = ($2|0)==(2146435072);
 $6 = $5 & $4;
 $7 = $3 | $6;
 do {
  if ($7) {
   $$0 = $y;
  } else {
   HEAPF64[tempDoublePtr>>3] = $y;$8 = HEAP32[tempDoublePtr>>2]|0;
   $9 = HEAP32[tempDoublePtr+4>>2]|0;
   $10 = $9 & 2147483647;
   $11 = ($10>>>0)>(2146435072);
   $12 = ($8>>>0)>(0);
   $13 = ($10|0)==(2146435072);
   $14 = $13 & $12;
   $15 = $11 | $14;
   if ($15) {
    $$0 = $x;
   } else {
    $16 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
    $17 = tempRet0;
    $18 = (_bitshift64Lshr(($8|0),($9|0),63)|0);
    $19 = tempRet0;
    $20 = ($16|0)==($18|0);
    if ($20) {
     $23 = $x < $y;
     $24 = $23 ? $x : $y;
     $$0 = $24;
     break;
    } else {
     $21 = ($1|0)<(0);
     $22 = $21 ? $x : $y;
     $$0 = $22;
     break;
    }
   }
  }
 } while(0);
 return (+$$0);
}
function _fminf($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$unshifted = 0, $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2147483647;
 $2 = ($1>>>0)>(2139095040);
 do {
  if ($2) {
   $$0 = $y;
  } else {
   $3 = (HEAPF32[tempDoublePtr>>2]=$y,HEAP32[tempDoublePtr>>2]|0);
   $4 = $3 & 2147483647;
   $5 = ($4>>>0)>(2139095040);
   if ($5) {
    $$0 = $x;
   } else {
    $$unshifted = $3 ^ $0;
    $6 = ($$unshifted|0)<(0);
    if ($6) {
     $7 = ($0|0)<(0);
     $8 = $7 ? $x : $y;
     $$0 = $8;
     break;
    } else {
     $9 = $x < $y;
     $10 = $9 ? $x : $y;
     $$0 = $10;
     break;
    }
   }
  }
 } while(0);
 return (+$$0);
}
function _fminl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmin($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0;
 var $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 L1: do {
  if ($15) {
   label = 3;
  } else {
   $16 = $3 & 2147483647;
   $17 = ($16>>>0)>(2146435072);
   $18 = ($2>>>0)>(0);
   $19 = ($16|0)==(2146435072);
   $20 = $19 & $18;
   $21 = $17 | $20;
   $22 = ($6|0)==(2047);
   $or$cond = $21 | $22;
   if ($or$cond) {
    label = 3;
   } else {
    $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $26 = tempRet0;
    $27 = ($26>>>0)>($12>>>0);
    $28 = ($25>>>0)>($11>>>0);
    $29 = ($26|0)==($12|0);
    $30 = $29 & $28;
    $31 = $27 | $30;
    if (!($31)) {
     $32 = ($25|0)==($11|0);
     $33 = ($26|0)==($12|0);
     $34 = $32 & $33;
     $35 = $x * 0.0;
     $$x = $34 ? $35 : $x;
     return (+$$x);
    }
    $36 = ($6|0)==(0);
    if ($36) {
     $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $38 = tempRet0;
     $39 = ($38|0)>(-1);
     $40 = ($37>>>0)>(4294967295);
     $41 = ($38|0)==(-1);
     $42 = $41 & $40;
     $43 = $39 | $42;
     if ($43) {
      $45 = $37;$46 = $38;$ex$026 = 0;
      while(1) {
       $44 = (($ex$026) + -1)|0;
       $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
       $48 = tempRet0;
       $49 = ($48|0)>(-1);
       $50 = ($47>>>0)>(4294967295);
       $51 = ($48|0)==(-1);
       $52 = $51 & $50;
       $53 = $49 | $52;
       if ($53) {
        $45 = $47;$46 = $48;$ex$026 = $44;
       } else {
        $ex$0$lcssa = $44;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $54 = (1 - ($ex$0$lcssa))|0;
     $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
     $56 = tempRet0;
     $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
    } else {
     $57 = $1 & 1048575;
     $58 = $57 | 1048576;
     $83 = $0;$84 = $58;$ex$1 = $6;
    }
    $59 = ($9|0)==(0);
    if ($59) {
     $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $61 = tempRet0;
     $62 = ($61|0)>(-1);
     $63 = ($60>>>0)>(4294967295);
     $64 = ($61|0)==(-1);
     $65 = $64 & $63;
     $66 = $62 | $65;
     if ($66) {
      $68 = $60;$69 = $61;$ey$020 = 0;
      while(1) {
       $67 = (($ey$020) + -1)|0;
       $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
       $71 = tempRet0;
       $72 = ($71|0)>(-1);
       $73 = ($70>>>0)>(4294967295);
       $74 = ($71|0)==(-1);
       $75 = $74 & $73;
       $76 = $72 | $75;
       if ($76) {
        $68 = $70;$69 = $71;$ey$020 = $67;
       } else {
        $ey$0$lcssa = $67;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $77 = (1 - ($ey$0$lcssa))|0;
     $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
     $79 = tempRet0;
     $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
    } else {
     $80 = $3 & 1048575;
     $81 = $80 | 1048576;
     $85 = $2;$86 = $81;$ey$1$ph = $9;
    }
    $82 = ($ex$1|0)>($ey$1$ph|0);
    $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
    $88 = tempRet0;
    $89 = ($88|0)>(-1);
    $90 = ($87>>>0)>(4294967295);
    $91 = ($88|0)==(-1);
    $92 = $91 & $90;
    $93 = $89 | $92;
    L23: do {
     if ($82) {
      $152 = $93;$153 = $87;$154 = $88;$94 = $83;$96 = $84;$ex$212 = $ex$1;
      while(1) {
       if ($152) {
        $95 = ($94|0)==($85|0);
        $97 = ($96|0)==($86|0);
        $98 = $95 & $97;
        if ($98) {
         break;
        } else {
         $100 = $153;$101 = $154;
        }
       } else {
        $100 = $94;$101 = $96;
       }
       $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
       $103 = tempRet0;
       $104 = (($ex$212) + -1)|0;
       $105 = ($104|0)>($ey$1$ph|0);
       $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
       $107 = tempRet0;
       $108 = ($107|0)>(-1);
       $109 = ($106>>>0)>(4294967295);
       $110 = ($107|0)==(-1);
       $111 = $110 & $109;
       $112 = $108 | $111;
       if ($105) {
        $152 = $112;$153 = $106;$154 = $107;$94 = $102;$96 = $103;$ex$212 = $104;
       } else {
        $$lcssa7 = $112;$113 = $102;$115 = $103;$155 = $106;$156 = $107;$ex$2$lcssa = $104;
        break L23;
       }
      }
      $99 = $x * 0.0;
      $$0 = $99;
      break L1;
     } else {
      $$lcssa7 = $93;$113 = $83;$115 = $84;$155 = $87;$156 = $88;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($$lcssa7) {
     $114 = ($113|0)==($85|0);
     $116 = ($115|0)==($86|0);
     $117 = $114 & $116;
     if ($117) {
      $125 = $x * 0.0;
      $$0 = $125;
      break;
     } else {
      $118 = $156;$120 = $155;
     }
    } else {
     $118 = $115;$120 = $113;
    }
    $119 = ($118>>>0)<(1048576);
    $121 = ($120>>>0)<(0);
    $122 = ($118|0)==(1048576);
    $123 = $122 & $121;
    $124 = $119 | $123;
    if ($124) {
     $126 = $120;$127 = $118;$ex$39 = $ex$2$lcssa;
     while(1) {
      $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
      $129 = tempRet0;
      $130 = (($ex$39) + -1)|0;
      $131 = ($129>>>0)<(1048576);
      $132 = ($128>>>0)<(0);
      $133 = ($129|0)==(1048576);
      $134 = $133 & $132;
      $135 = $131 | $134;
      if ($135) {
       $126 = $128;$127 = $129;$ex$39 = $130;
      } else {
       $137 = $128;$138 = $129;$ex$3$lcssa = $130;
       break;
      }
     }
    } else {
     $137 = $120;$138 = $118;$ex$3$lcssa = $ex$2$lcssa;
    }
    $136 = ($ex$3$lcssa|0)>(0);
    if ($136) {
     $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
     $140 = tempRet0;
     $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $142 = tempRet0;
     $143 = $139 | $141;
     $144 = $140 | $142;
     $149 = $144;$151 = $143;
    } else {
     $145 = (1 - ($ex$3$lcssa))|0;
     $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
     $147 = tempRet0;
     $149 = $147;$151 = $146;
    }
    $148 = $149 | $10;
    HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $148;$150 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $150;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $23 = $x * $y;
  $24 = $23 / $23;
  $$0 = $24;
 }
 return (+$$0);
}
function _fmodf($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa = 0, $$lcssa6 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $ex$0$lcssa = 0, $ex$025 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$211 = 0, $ex$3$lcssa = 0, $ex$38 = 0, $ey$0$lcssa = 0, $ey$019 = 0, $ey$1$ph = 0, $i$026 = 0, $i$120 = 0;
 var $or$cond = 0, $uxi$0 = 0, $uxi$1$lcssa = 0, $uxi$112 = 0, $uxi$2 = 0, $uxi$3$lcssa = 0, $uxi$3$ph = 0, $uxi$39 = 0, $uxi$4 = 0, $uy$sroa$0$0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = (HEAPF32[tempDoublePtr>>2]=$y,HEAP32[tempDoublePtr>>2]|0);
 $2 = $0 >>> 23;
 $3 = $2 & 255;
 $4 = $1 >>> 23;
 $5 = $4 & 255;
 $6 = $0 & -2147483648;
 $7 = $1 << 1;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   label = 3;
  } else {
   $9 = $1 & 2147483647;
   $10 = ($9>>>0)>(2139095040);
   $11 = ($3|0)==(255);
   $or$cond = $10 | $11;
   if ($or$cond) {
    label = 3;
   } else {
    $14 = $0 << 1;
    $15 = ($14>>>0)>($7>>>0);
    if (!($15)) {
     $16 = ($14|0)==($7|0);
     $17 = $x * 0.0;
     $$x = $16 ? $17 : $x;
     return (+$$x);
    }
    $18 = ($3|0)==(0);
    if ($18) {
     $19 = $0 << 9;
     $20 = ($19|0)>(-1);
     if ($20) {
      $ex$025 = 0;$i$026 = $19;
      while(1) {
       $21 = (($ex$025) + -1)|0;
       $22 = $i$026 << 1;
       $23 = ($22|0)>(-1);
       if ($23) {
        $ex$025 = $21;$i$026 = $22;
       } else {
        $ex$0$lcssa = $21;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $24 = (1 - ($ex$0$lcssa))|0;
     $25 = $0 << $24;
     $ex$1 = $ex$0$lcssa;$uxi$0 = $25;
    } else {
     $26 = $0 & 8388607;
     $27 = $26 | 8388608;
     $ex$1 = $3;$uxi$0 = $27;
    }
    $28 = ($5|0)==(0);
    if ($28) {
     $29 = $1 << 9;
     $30 = ($29|0)>(-1);
     if ($30) {
      $ey$019 = 0;$i$120 = $29;
      while(1) {
       $31 = (($ey$019) + -1)|0;
       $32 = $i$120 << 1;
       $33 = ($32|0)>(-1);
       if ($33) {
        $ey$019 = $31;$i$120 = $32;
       } else {
        $ey$0$lcssa = $31;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $34 = (1 - ($ey$0$lcssa))|0;
     $35 = $1 << $34;
     $ey$1$ph = $ey$0$lcssa;$uy$sroa$0$0$ph = $35;
    } else {
     $36 = $1 & 8388607;
     $37 = $36 | 8388608;
     $ey$1$ph = $5;$uy$sroa$0$0$ph = $37;
    }
    $38 = ($ex$1|0)>($ey$1$ph|0);
    $39 = (($uxi$0) - ($uy$sroa$0$0$ph))|0;
    $40 = ($39|0)>(-1);
    L23: do {
     if ($38) {
      $62 = $40;$63 = $39;$ex$211 = $ex$1;$uxi$112 = $uxi$0;
      while(1) {
       if ($62) {
        $41 = ($uxi$112|0)==($uy$sroa$0$0$ph|0);
        if ($41) {
         break;
        } else {
         $uxi$2 = $63;
        }
       } else {
        $uxi$2 = $uxi$112;
       }
       $43 = $uxi$2 << 1;
       $44 = (($ex$211) + -1)|0;
       $45 = ($44|0)>($ey$1$ph|0);
       $46 = (($43) - ($uy$sroa$0$0$ph))|0;
       $47 = ($46|0)>(-1);
       if ($45) {
        $62 = $47;$63 = $46;$ex$211 = $44;$uxi$112 = $43;
       } else {
        $$lcssa = $46;$$lcssa6 = $47;$ex$2$lcssa = $44;$uxi$1$lcssa = $43;
        break L23;
       }
      }
      $42 = $x * 0.0;
      $$0 = $42;
      break L1;
     } else {
      $$lcssa = $39;$$lcssa6 = $40;$ex$2$lcssa = $ex$1;$uxi$1$lcssa = $uxi$0;
     }
    } while(0);
    if ($$lcssa6) {
     $48 = ($uxi$1$lcssa|0)==($uy$sroa$0$0$ph|0);
     if ($48) {
      $50 = $x * 0.0;
      $$0 = $50;
      break;
     } else {
      $uxi$3$ph = $$lcssa;
     }
    } else {
     $uxi$3$ph = $uxi$1$lcssa;
    }
    $49 = ($uxi$3$ph>>>0)<(8388608);
    if ($49) {
     $ex$38 = $ex$2$lcssa;$uxi$39 = $uxi$3$ph;
     while(1) {
      $51 = $uxi$39 << 1;
      $52 = (($ex$38) + -1)|0;
      $53 = ($51>>>0)<(8388608);
      if ($53) {
       $ex$38 = $52;$uxi$39 = $51;
      } else {
       $ex$3$lcssa = $52;$uxi$3$lcssa = $51;
       break;
      }
     }
    } else {
     $ex$3$lcssa = $ex$2$lcssa;$uxi$3$lcssa = $uxi$3$ph;
    }
    $54 = ($ex$3$lcssa|0)>(0);
    if ($54) {
     $55 = (($uxi$3$lcssa) + -8388608)|0;
     $56 = $ex$3$lcssa << 23;
     $57 = $55 | $56;
     $uxi$4 = $57;
    } else {
     $58 = (1 - ($ex$3$lcssa))|0;
     $59 = $uxi$3$lcssa >>> $58;
     $uxi$4 = $59;
    }
    $60 = $uxi$4 | $6;
    $61 = (HEAP32[tempDoublePtr>>2]=$60,+HEAPF32[tempDoublePtr>>2]);
    $$0 = $61;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $12 = $x * $y;
  $13 = $12 / $12;
  $$0 = $13;
 }
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _frexpf($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 >>> 23;
 $2 = $1 & 255;
 switch ($2|0) {
 case 0:  {
  $3 = $x != 0.0;
  if ($3) {
   $4 = $x * 1.8446744073709552E+19;
   $5 = (+_frexpf($4,$e));
   $6 = HEAP32[$e>>2]|0;
   $7 = (($6) + -64)|0;
   $$01 = $5;$storemerge = $7;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 255:  {
  $$0 = $x;
  break;
 }
 default: {
  $8 = (($2) + -126)|0;
  HEAP32[$e>>2] = $8;
  $9 = $0 & -2139095041;
  $10 = $9 | 1056964608;
  $11 = (HEAP32[tempDoublePtr>>2]=$10,+HEAPF32[tempDoublePtr>>2]);
  $$0 = $11;
 }
 }
 return (+$$0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _hypot($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$01 = 0.0, $$02 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $z$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & 2147483647;
 $6 = ($4>>>0)<($5>>>0);
 $7 = ($0>>>0)<($2>>>0);
 $8 = ($4|0)==($5|0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 $11 = $10 ? $2 : $0;
 $12 = $10 ? $5 : $4;
 $13 = $10 ? $0 : $2;
 $14 = $10 ? $4 : $5;
 $15 = (_bitshift64Lshr(($11|0),($12|0),52)|0);
 $16 = tempRet0;
 $17 = (_bitshift64Lshr(($13|0),($14|0),52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $11;HEAP32[tempDoublePtr+4>>2] = $12;$19 = +HEAPF64[tempDoublePtr>>3];
 HEAP32[tempDoublePtr>>2] = $13;HEAP32[tempDoublePtr+4>>2] = $14;$20 = +HEAPF64[tempDoublePtr>>3];
 $21 = ($17|0)==(2047);
 do {
  if ($21) {
   $$0 = $20;
  } else {
   $22 = ($15|0)==(2047);
   $23 = ($13|0)==(0);
   $24 = ($14|0)==(0);
   $25 = $23 & $24;
   $or$cond = $25 | $22;
   if ($or$cond) {
    $$0 = $19;
   } else {
    $26 = (($15) - ($17))|0;
    $27 = ($26|0)>(64);
    if ($27) {
     $28 = $19 + $20;
     $$0 = $28;
     break;
    }
    $29 = ($15>>>0)>(1533);
    if ($29) {
     $30 = $19 * 1.9010915662951598E-211;
     $31 = $20 * 1.9010915662951598E-211;
     $$01 = $30;$$02 = $31;$z$0 = 5.2601359015483735E+210;
    } else {
     $32 = ($17>>>0)<(573);
     if ($32) {
      $33 = $19 * 5.2601359015483735E+210;
      $34 = $20 * 5.2601359015483735E+210;
      $$01 = $33;$$02 = $34;$z$0 = 1.9010915662951598E-211;
     } else {
      $$01 = $19;$$02 = $20;$z$0 = 1.0;
     }
    }
    $35 = $$01 * 134217729.0;
    $36 = $$01 - $35;
    $37 = $35 + $36;
    $38 = $$01 - $37;
    $39 = $$01 * $$01;
    $40 = $37 * $37;
    $41 = $40 - $39;
    $42 = $37 * 2.0;
    $43 = $42 * $38;
    $44 = $41 + $43;
    $45 = $38 * $38;
    $46 = $45 + $44;
    $47 = $$02 * 134217729.0;
    $48 = $$02 - $47;
    $49 = $47 + $48;
    $50 = $$02 - $49;
    $51 = $$02 * $$02;
    $52 = $49 * $49;
    $53 = $52 - $51;
    $54 = $49 * 2.0;
    $55 = $54 * $50;
    $56 = $53 + $55;
    $57 = $50 * $50;
    $58 = $57 + $56;
    $59 = $58 + $46;
    $60 = $51 + $59;
    $61 = $39 + $60;
    $62 = (+Math_sqrt((+$61)));
    $63 = $z$0 * $62;
    $$0 = $63;
   }
  }
 } while(0);
 return (+$$0);
}
function _hypotf($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$ = 0, $$0 = 0.0, $$01 = 0.0, $$02 = 0.0, $$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0;
 var $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $z$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = (HEAPF32[tempDoublePtr>>2]=$y,HEAP32[tempDoublePtr>>2]|0);
 $2 = $0 & 2147483647;
 $3 = $1 & 2147483647;
 $4 = ($2>>>0)<($3>>>0);
 $$ = $4 ? $3 : $2;
 $$3 = $4 ? $2 : $3;
 $5 = (HEAP32[tempDoublePtr>>2]=$$,+HEAPF32[tempDoublePtr>>2]);
 $6 = (HEAP32[tempDoublePtr>>2]=$$3,+HEAPF32[tempDoublePtr>>2]);
 $7 = ($$3|0)==(2139095040);
 do {
  if ($7) {
   $$0 = $6;
  } else {
   $8 = ($$>>>0)>(2139095039);
   $9 = ($$3|0)==(0);
   $or$cond = $8 | $9;
   $10 = (($$) - ($$3))|0;
   $11 = ($10>>>0)>(209715199);
   $or$cond5 = $or$cond | $11;
   if ($or$cond5) {
    $12 = $5 + $6;
    $$0 = $12;
    break;
   }
   $13 = ($$>>>0)>(1568669695);
   if ($13) {
    $14 = $5 * 8.0779356694631609E-28;
    $15 = $6 * 8.0779356694631609E-28;
    $$01 = $15;$$02 = $14;$z$0 = 1.2379400392853803E+27;
   } else {
    $16 = ($$3>>>0)<(562036736);
    if ($16) {
     $17 = $5 * 1.2379400392853803E+27;
     $18 = $6 * 1.2379400392853803E+27;
     $$01 = $18;$$02 = $17;$z$0 = 8.0779356694631609E-28;
    } else {
     $$01 = $6;$$02 = $5;$z$0 = 1.0;
    }
   }
   $19 = $$02;
   $20 = $19 * $19;
   $21 = $$01;
   $22 = $21 * $21;
   $23 = $20 + $22;
   $24 = $23;
   $25 = (+Math_sqrt((+$24)));
   $26 = $z$0 * $25;
   $$0 = $26;
  }
 } while(0);
 return (+$$0);
}
function _hypotl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_hypot($x,$y));
 return (+$0);
}
function _ilogb($x) {
 $x = +$x;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = (_bitshift64Shl(($0|0),($1|0),12)|0);
  $6 = tempRet0;
  $7 = ($5|0)==(0);
  $8 = ($6|0)==(0);
  $9 = $7 & $8;
  if ($9) {
   $$0 = -2147483648;
  } else {
   $10 = ($6|0)>(-1);
   $11 = ($5>>>0)>(4294967295);
   $12 = ($6|0)==(-1);
   $13 = $12 & $11;
   $14 = $10 | $13;
   if ($14) {
    $16 = $5;$17 = $6;$e$02 = -1023;
    while(1) {
     $15 = (($e$02) + -1)|0;
     $18 = (_bitshift64Shl(($16|0),($17|0),1)|0);
     $19 = tempRet0;
     $20 = ($19|0)>(-1);
     $21 = ($18>>>0)>(4294967295);
     $22 = ($19|0)==(-1);
     $23 = $22 & $21;
     $24 = $20 | $23;
     if ($24) {
      $16 = $18;$17 = $19;$e$02 = $15;
     } else {
      $$0 = $15;
      break;
     }
    }
   } else {
    $$0 = -1023;
   }
  }
  break;
 }
 case 2047:  {
  $25 = $1 & 1048575;
  $26 = ($0|0)!=(0);
  $27 = ($25|0)!=(0);
  $28 = $26 | $27;
  $29 = $28 ? -2147483648 : 2147483647;
  $$0 = $29;
  break;
 }
 default: {
  $30 = (($4) + -1023)|0;
  $$0 = $30;
 }
 }
 return ($$0|0);
}
function _ilogbf($x) {
 $x = +$x;
 var $$0 = 0, $$mask = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e$02 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 >>> 23;
 $2 = $1 & 255;
 switch ($2|0) {
 case 0:  {
  $3 = $0 << 9;
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = -2147483648;
  } else {
   $5 = ($3|0)>(-1);
   if ($5) {
    $e$02 = -127;$i$01 = $3;
    while(1) {
     $6 = (($e$02) + -1)|0;
     $7 = $i$01 << 1;
     $8 = ($7|0)>(-1);
     if ($8) {
      $e$02 = $6;$i$01 = $7;
     } else {
      $$0 = $6;
      break;
     }
    }
   } else {
    $$0 = -127;
   }
  }
  break;
 }
 case 255:  {
  $$mask = $0 & 8388607;
  $9 = ($$mask|0)!=(0);
  $10 = $9 ? -2147483648 : 2147483647;
  $$0 = $10;
  break;
 }
 default: {
  $11 = (($2) + -127)|0;
  $$0 = $11;
 }
 }
 return ($$0|0);
}
function _ilogbl($x) {
 $x = +$x;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ilogb($x)|0);
 return ($0|0);
}
function _j0($x) {
 $x = +$x;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 $3 = ($2>>>0)>(2146435071);
 do {
  if ($3) {
   $4 = $x * $x;
   $5 = 1.0 / $4;
   $$0 = $5;
  } else {
   $6 = (+Math_abs((+$x)));
   $7 = ($2>>>0)>(1073741823);
   if ($7) {
    $8 = (+_common($2,$6,0));
    $$0 = $8;
    break;
   }
   $9 = ($2>>>0)>(1059061759);
   if ($9) {
    $10 = $6 * $6;
    $11 = $10 * 4.6183268853210319E-9;
    $12 = 1.8295404953270067E-6 - $11;
    $13 = $10 * $12;
    $14 = $13 + -1.8997929423885472E-4;
    $15 = $10 * $14;
    $16 = $15 + 0.015624999999999995;
    $17 = $10 * $16;
    $18 = $10 * 1.1661400333379E-9;
    $19 = $18 + 5.1354655020731811E-7;
    $20 = $10 * $19;
    $21 = $20 + 1.1692678466333745E-4;
    $22 = $10 * $21;
    $23 = $22 + 0.015619102946489001;
    $24 = $10 * $23;
    $25 = $24 + 1.0;
    $26 = $6 * 0.5;
    $27 = $26 + 1.0;
    $28 = 1.0 - $26;
    $29 = $27 * $28;
    $30 = $17 / $25;
    $31 = $10 * $30;
    $32 = $29 + $31;
    $$0 = $32;
    break;
   } else {
    $33 = ($2>>>0)>(939524095);
    $34 = $6 * 0.25;
    $35 = $6 * $34;
    $$01 = $33 ? $35 : $6;
    $36 = 1.0 - $$01;
    $$0 = $36;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _y0($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Shl(($1|0),0,1)|0);
 $3 = tempRet0;
 $4 = $2 | $0;
 $3 | $1;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $$0 = -inf;
  } else {
   $6 = ($1|0)<(0);
   if ($6) {
    $$0 = nan;
   } else {
    $7 = ($1>>>0)>(2146435071);
    if ($7) {
     $8 = 1.0 / $x;
     $$0 = $8;
     break;
    }
    $9 = ($1>>>0)>(1073741823);
    if ($9) {
     $10 = (+_common($1,$x,1));
     $$0 = $10;
     break;
    }
    $11 = ($1>>>0)>(1044381695);
    if ($11) {
     $12 = $x * $x;
     $13 = $12 * 3.982051941321034E-11;
     $14 = 1.9559013703502292E-8 - $13;
     $15 = $12 * $14;
     $16 = $15 + -3.8140705372436416E-6;
     $17 = $12 * $16;
     $18 = $17 + 3.4745343209368365E-4;
     $19 = $12 * $18;
     $20 = $19 + -0.01381856719455969;
     $21 = $12 * $20;
     $22 = $21 + 0.17666645250918112;
     $23 = $12 * $22;
     $24 = $23 + -0.073804295108687232;
     $25 = $12 * 4.4111031133267547E-10;
     $26 = $25 + 2.5915085184045781E-7;
     $27 = $12 * $26;
     $28 = $27 + 7.6006862735035325E-5;
     $29 = $12 * $28;
     $30 = $29 + 0.01273048348341237;
     $31 = $12 * $30;
     $32 = $31 + 1.0;
     $33 = $24 / $32;
     $34 = (+_j0($x));
     $35 = (+Math_log((+$x)));
     $36 = $34 * $35;
     $37 = $36 * 0.63661977236758138;
     $38 = $33 + $37;
     $$0 = $38;
     break;
    } else {
     $39 = (+Math_log((+$x)));
     $40 = $39 * 0.63661977236758138;
     $41 = $40 + -0.073804295108687232;
     $$0 = $41;
     break;
    }
   }
  }
 } while(0);
 return (+$$0);
}
function _j0f($x) {
 $x = +$x;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2147483647;
 $2 = ($1>>>0)>(2139095039);
 do {
  if ($2) {
   $3 = $x * $x;
   $4 = 1.0 / $3;
   $$0 = $4;
  } else {
   $5 = (+Math_abs((+$x)));
   $6 = ($1>>>0)>(1073741823);
   if ($6) {
    $7 = (+_common165($1,$5,0));
    $$0 = $7;
    break;
   }
   $8 = ($1>>>0)>(973078527);
   if ($8) {
    $9 = $5 * $5;
    $10 = $9 * 4.618327054117799E-9;
    $11 = 1.8295404515811242E-6 - $10;
    $12 = $9 * $11;
    $13 = $12 + -1.8997929873876274E-4;
    $14 = $9 * $13;
    $15 = $14 + 0.015625;
    $16 = $9 * $15;
    $17 = $9 * 1.1661400733942173E-9;
    $18 = $17 + 5.1354652441659709E-7;
    $19 = $9 * $18;
    $20 = $19 + 1.1692678526742384E-4;
    $21 = $9 * $20;
    $22 = $21 + 0.015619102865457535;
    $23 = $9 * $22;
    $24 = $23 + 1.0;
    $25 = $5 * 0.5;
    $26 = $25 + 1.0;
    $27 = 1.0 - $25;
    $28 = $26 * $27;
    $29 = $16 / $24;
    $30 = $9 * $29;
    $31 = $28 + $30;
    $$0 = $31;
    break;
   } else {
    $32 = ($1>>>0)>(562036735);
    $33 = $5 * 0.25;
    $34 = $5 * $33;
    $$01 = $32 ? $34 : $5;
    $35 = 1.0 - $$01;
    $$0 = $35;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _y0f($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2147483647;
 $2 = ($1|0)==(0);
 do {
  if ($2) {
   $$0 = -inf;
  } else {
   $3 = ($0|0)<(0);
   if ($3) {
    $$0 = nan;
   } else {
    $4 = ($0>>>0)>(2139095039);
    if ($4) {
     $5 = 1.0 / $x;
     $$0 = $5;
     break;
    }
    $6 = ($0>>>0)>(1073741823);
    if ($6) {
     $7 = (+_common165($0,$x,1));
     $$0 = $7;
     break;
    }
    $8 = ($0>>>0)>(956301311);
    if ($8) {
     $9 = $x * $x;
     $10 = $9 * 3.9820518410449424E-11;
     $11 = 1.955901396399895E-8 - $10;
     $12 = $9 * $11;
     $13 = $12 + -3.8140706237754785E-6;
     $14 = $9 * $13;
     $15 = $14 + 3.4745343145914376E-4;
     $16 = $9 * $15;
     $17 = $16 + -0.013818567618727684;
     $18 = $9 * $17;
     $19 = $18 + 0.17666645348072052;
     $20 = $9 * $19;
     $21 = $20 + -0.073804296553134918;
     $22 = $9 * 4.4111031494153963E-10;
     $23 = $22 + 2.5915085188898956E-7;
     $24 = $9 * $23;
     $25 = $24 + 7.6006865128874779E-5;
     $26 = $9 * $25;
     $27 = $26 + 0.012730483897030354;
     $28 = $9 * $27;
     $29 = $28 + 1.0;
     $30 = $21 / $29;
     $31 = (+_j0f($x));
     $32 = (+Math_log((+$x)));
     $33 = $31 * $32;
     $34 = $33 * 0.63661974668502808;
     $35 = $30 + $34;
     $$0 = $35;
     break;
    } else {
     $36 = (+Math_log((+$x)));
     $37 = $36 * 0.63661974668502808;
     $38 = $37 + -0.073804296553134918;
     $$0 = $38;
     break;
    }
   }
  }
 } while(0);
 return (+$$0);
}
function _j1($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $z$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
 $3 = tempRet0;
 $4 = $1 & 2147483647;
 $5 = ($4>>>0)>(2146435071);
 do {
  if ($5) {
   $6 = $x * $x;
   $7 = 1.0 / $6;
   $$0 = $7;
  } else {
   $8 = ($4>>>0)>(1073741823);
   if ($8) {
    $9 = (+Math_abs((+$x)));
    $10 = (+_common182($4,$9,0,$2));
    $$0 = $10;
    break;
   }
   $11 = ($4>>>0)>(939524095);
   if ($11) {
    $12 = $x * $x;
    $13 = $12 * 4.9672799960958445E-8;
    $14 = $13 + -1.599556310840356E-5;
    $15 = $12 * $14;
    $16 = $15 + 0.0014070566695518971;
    $17 = $12 * $16;
    $18 = $17 + -0.0625;
    $19 = $12 * $18;
    $20 = $12 * 1.2354227442613791E-11;
    $21 = $20 + 5.0463625707621704E-9;
    $22 = $12 * $21;
    $23 = $22 + 1.1771846404262368E-6;
    $24 = $12 * $23;
    $25 = $24 + 1.8594678558863092E-4;
    $26 = $12 * $25;
    $27 = $26 + 0.019153759953836346;
    $28 = $12 * $27;
    $29 = $28 + 1.0;
    $30 = $19 / $29;
    $z$0 = $30;
   } else {
    $z$0 = $x;
   }
   $31 = $z$0 + 0.5;
   $32 = $31 * $x;
   $$0 = $32;
  }
 } while(0);
 return (+$$0);
}
function _y1($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Shl(($1|0),0,1)|0);
 $3 = tempRet0;
 $4 = $2 | $0;
 $3 | $1;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $$0 = -inf;
  } else {
   $6 = ($1|0)<(0);
   if ($6) {
    $$0 = nan;
   } else {
    $7 = ($1>>>0)>(2146435071);
    if ($7) {
     $8 = 1.0 / $x;
     $$0 = $8;
     break;
    }
    $9 = ($1>>>0)>(1073741823);
    if ($9) {
     $10 = (+_common182($1,$x,1,0));
     $$0 = $10;
     break;
    }
    $11 = ($1>>>0)<(1016070144);
    if ($11) {
     $12 = -0.63661977236758138 / $x;
     $$0 = $12;
     break;
    } else {
     $13 = $x * $x;
     $14 = $13 * 9.1909915803987887E-8;
     $15 = 2.352526005616105E-5 - $14;
     $16 = $13 * $15;
     $17 = $16 + -0.0019125689587576355;
     $18 = $13 * $17;
     $19 = $18 + 0.050443871663981128;
     $20 = $13 * $19;
     $21 = $20 + -0.19605709064623894;
     $22 = $13 * 1.6655924620799208E-11;
     $23 = $22 + 6.227414523646215E-9;
     $24 = $13 * $23;
     $25 = $24 + 1.3560880109751623E-6;
     $26 = $13 * $25;
     $27 = $26 + 2.0255258102513517E-4;
     $28 = $13 * $27;
     $29 = $28 + 0.01991673182366499;
     $30 = $13 * $29;
     $31 = $30 + 1.0;
     $32 = $21 / $31;
     $33 = $32 * $x;
     $34 = (+_j1($x));
     $35 = (+Math_log((+$x)));
     $36 = $34 * $35;
     $37 = 1.0 / $x;
     $38 = $36 - $37;
     $39 = $38 * 0.63661977236758138;
     $40 = $33 + $39;
     $$0 = $40;
     break;
    }
   }
  }
 } while(0);
 return (+$$0);
}
function _j1f($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $z$0 = 0.0, $z$0$in = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 >>> 31;
 $2 = $0 & 2147483647;
 $3 = ($2>>>0)>(2139095039);
 do {
  if ($3) {
   $4 = $x * $x;
   $5 = 1.0 / $4;
   $$0 = $5;
  } else {
   $6 = ($2>>>0)>(1073741823);
   if ($6) {
    $7 = (+Math_abs((+$x)));
    $8 = (+_common183($2,$7,0,$1));
    $$0 = $8;
    break;
   }
   $9 = ($2>>>0)>(838860799);
   if ($9) {
    $10 = $x * $x;
    $11 = $10 * 4.9672799207201024E-8;
    $12 = $11 + -1.5995563444448635E-5;
    $13 = $10 * $12;
    $14 = $13 + 0.0014070566976442933;
    $15 = $10 * $14;
    $16 = $15 + -0.0625;
    $17 = $10 * $16;
    $18 = $10 * 1.2354227016397878E-11;
    $19 = $18 + 5.0463624390317818E-9;
    $20 = $10 * $19;
    $21 = $20 + 1.1771846857300261E-6;
    $22 = $10 * $21;
    $23 = $22 + 1.8594678840599954E-4;
    $24 = $10 * $23;
    $25 = $24 + 0.019153760746121407;
    $26 = $10 * $25;
    $27 = $26 + 1.0;
    $28 = $17 / $27;
    $z$0$in = $28;
   } else {
    $z$0$in = $x;
   }
   $z$0 = $z$0$in + 0.5;
   $29 = $z$0 * $x;
   $$0 = $29;
  }
 } while(0);
 return (+$$0);
}
function _y1f($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2147483647;
 $2 = ($1|0)==(0);
 do {
  if ($2) {
   $$0 = -inf;
  } else {
   $3 = ($0|0)<(0);
   if ($3) {
    $$0 = nan;
   } else {
    $4 = ($0>>>0)>(2139095039);
    if ($4) {
     $5 = 1.0 / $x;
     $$0 = $5;
     break;
    }
    $6 = ($0>>>0)>(1073741823);
    if ($6) {
     $7 = (+_common183($0,$x,1,0));
     $$0 = $7;
     break;
    }
    $8 = ($0>>>0)<(838860800);
    if ($8) {
     $9 = -0.63661974668502808 / $x;
     $$0 = $9;
     break;
    } else {
     $10 = $x * $x;
     $11 = $10 * 9.1909917898647109E-8;
     $12 = 2.3525259166490287E-5 - $11;
     $13 = $10 * $12;
     $14 = $13 + -0.0019125689286738634;
     $15 = $10 * $14;
     $16 = $15 + 0.050443872809410095;
     $17 = $10 * $16;
     $18 = $17 + -0.19605709612369537;
     $19 = $10 * 1.6655924903186126E-11;
     $20 = $19 + 6.2274145840035544E-9;
     $21 = $10 * $20;
     $22 = $21 + 1.3560879779106472E-6;
     $23 = $10 * $22;
     $24 = $23 + 2.0255257550161332E-4;
     $25 = $10 * $24;
     $26 = $25 + 0.019916731864213943;
     $27 = $10 * $26;
     $28 = $27 + 1.0;
     $29 = $18 / $28;
     $30 = $29 * $x;
     $31 = (+_j1f($x));
     $32 = (+Math_log((+$x)));
     $33 = $31 * $32;
     $34 = 1.0 / $x;
     $35 = $33 - $34;
     $36 = $35 * 0.63661974668502808;
     $37 = $30 + $36;
     $$0 = $37;
     break;
    }
   }
  }
 } while(0);
 return (+$$0);
}
function _jn($n,$x) {
 $n = $n|0;
 $x = +$x;
 var $$0 = 0.0, $$02 = 0.0, $$lcssa71 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0;
 var $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0;
 var $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0;
 var $97 = 0, $98 = 0.0, $99 = 0.0, $a$08 = 0.0, $a$08$phi = 0.0, $a$1$lcssa = 0.0, $a$111 = 0.0, $a$217 = 0.0, $a$217$phi = 0.0, $a$323 = 0.0, $a$4 = 0.0, $a$5 = 0.0, $b$09 = 0.0, $b$1$lcssa = 0.0, $b$112 = 0.0, $b$218 = 0.0, $b$324 = 0.0, $b$4 = 0.0, $b$5 = 0.0, $b$6 = 0.0;
 var $exitcond = 0, $exitcond47 = 0, $i$07 = 0, $i$110 = 0, $i$230 = 0, $i$316 = 0, $i$422 = 0, $k$038 = 0, $k$038$lcssa = 0, $nm1$0 = 0, $or$cond = 0, $q0$035 = 0.0, $q0$035$phi = 0.0, $q1$036 = 0.0, $sign$0 = 0, $t$0$lcssa = 0.0, $t$031 = 0.0, $t$125 = 0.0, $t$2 = 0.0, $t$3 = 0.0;
 var $temp$0 = 0.0, $z$037 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
 $3 = tempRet0;
 $4 = $1 & 2147483647;
 $5 = (0 - ($0))|0;
 $6 = $0 | $5;
 $7 = $6 >>> 31;
 $8 = $4 | $7;
 $9 = ($8>>>0)>(2146435072);
 do {
  if ($9) {
   $$0 = $x;
  } else {
   $10 = ($n|0)==(0);
   if ($10) {
    $11 = (+_j0($x));
    $$0 = $11;
    break;
   }
   $12 = ($n|0)<(0);
   if ($12) {
    $13 = $n ^ -1;
    $14 = -$x;
    $15 = $2 ^ 1;
    $$02 = $14;$nm1$0 = $13;$sign$0 = $15;
   } else {
    $16 = (($n) + -1)|0;
    $$02 = $x;$nm1$0 = $16;$sign$0 = $2;
   }
   $17 = ($nm1$0|0)==(0);
   if ($17) {
    $18 = (+_j1($$02));
    $$0 = $18;
    break;
   }
   $19 = $sign$0 & $n;
   $20 = (+Math_abs((+$$02)));
   $21 = $4 | $0;
   $22 = ($21|0)==(0);
   $23 = ($4|0)==(2146435072);
   $or$cond = $23 | $22;
   L13: do {
    if ($or$cond) {
     $b$6 = 0.0;
    } else {
     $24 = (+($nm1$0|0));
     $25 = $24 < $20;
     if ($25) {
      $26 = ($4>>>0)>(1389363199);
      if (!($26)) {
       $44 = (+_j0($20));
       $45 = (+_j1($20));
       $46 = ($nm1$0|0)>(0);
       if ($46) {
        $a$08 = $44;$b$09 = $45;$i$07 = 0;
       } else {
        $b$6 = $45;
        break;
       }
       while(1) {
        $47 = (($i$07) + 1)|0;
        $48 = (+($47|0));
        $49 = $48 * 2.0;
        $50 = $49 / $20;
        $51 = $b$09 * $50;
        $52 = $51 - $a$08;
        $exitcond = ($47|0)==($nm1$0|0);
        if ($exitcond) {
         $b$6 = $52;
         break L13;
        } else {
         $a$08$phi = $b$09;$b$09 = $52;$i$07 = $47;$a$08 = $a$08$phi;
        }
       }
      }
      $27 = $nm1$0 & 3;
      switch ($27|0) {
      case 0:  {
       $28 = (+Math_cos((+$20)));
       $29 = (+Math_sin((+$20)));
       $30 = $29 - $28;
       $temp$0 = $30;
       break;
      }
      case 1:  {
       $31 = (+Math_cos((+$20)));
       $32 = -$31;
       $33 = (+Math_sin((+$20)));
       $34 = $32 - $33;
       $temp$0 = $34;
       break;
      }
      case 2:  {
       $35 = (+Math_cos((+$20)));
       $36 = (+Math_sin((+$20)));
       $37 = $35 - $36;
       $temp$0 = $37;
       break;
      }
      default: {
       $38 = (+Math_cos((+$20)));
       $39 = (+Math_sin((+$20)));
       $40 = $38 + $39;
       $temp$0 = $40;
      }
      }
      $41 = $temp$0 * 0.56418958354775628;
      $42 = (+Math_sqrt((+$20)));
      $43 = $41 / $42;
      $b$6 = $43;
      break;
     }
     $53 = ($4>>>0)<(1041235968);
     if ($53) {
      $54 = ($nm1$0|0)>(32);
      if ($54) {
       $b$6 = 0.0;
       break;
      }
      $55 = $20 * 0.5;
      $56 = (($nm1$0) + 1)|0;
      $57 = ($56|0)<(2);
      if ($57) {
       $a$1$lcssa = 1.0;$b$1$lcssa = $55;
      } else {
       $58 = (($nm1$0) + 1)|0;
       $a$111 = 1.0;$b$112 = $55;$i$110 = 2;
       while(1) {
        $59 = (+($i$110|0));
        $60 = $a$111 * $59;
        $61 = $55 * $b$112;
        $62 = (($i$110) + 1)|0;
        $exitcond47 = ($i$110|0)==($58|0);
        if ($exitcond47) {
         $a$1$lcssa = $60;$b$1$lcssa = $61;
         break;
        } else {
         $a$111 = $60;$b$112 = $61;$i$110 = $62;
        }
       }
      }
      $63 = $b$1$lcssa / $a$1$lcssa;
      $b$6 = $63;
      break;
     }
     $64 = $24 + 1.0;
     $65 = $64 * 2.0;
     $66 = $65 / $20;
     $67 = 2.0 / $20;
     $68 = $66 + $67;
     $69 = $66 * $68;
     $70 = $69 + -1.0;
     $71 = $70 < 1.0E+9;
     if ($71) {
      $k$038 = 1;$q0$035 = $66;$q1$036 = $70;$z$037 = $68;
      while(1) {
       $73 = (($k$038) + 1)|0;
       $74 = $67 + $z$037;
       $75 = $q1$036 * $74;
       $76 = $75 - $q0$035;
       $77 = $76 < 1.0E+9;
       if ($77) {
        $q0$035$phi = $q1$036;$k$038 = $73;$q1$036 = $76;$z$037 = $74;$q0$035 = $q0$035$phi;
       } else {
        $$lcssa71 = $73;$k$038$lcssa = $k$038;
        break;
       }
      }
      $72 = ($k$038$lcssa|0)>(-2);
      if ($72) {
       $i$230 = $$lcssa71;$t$031 = 0.0;
       label = 29;
      } else {
       $t$0$lcssa = 0.0;
      }
     } else {
      $i$230 = 1;$t$031 = 0.0;
      label = 29;
     }
     if ((label|0) == 29) {
      while(1) {
       label = 0;
       $78 = (+($i$230|0));
       $79 = $64 + $78;
       $80 = $79 * 2.0;
       $81 = $80 / $20;
       $82 = $81 - $t$031;
       $83 = 1.0 / $82;
       $84 = (($i$230) + -1)|0;
       $85 = ($i$230|0)>(0);
       if ($85) {
        $i$230 = $84;$t$031 = $83;
        label = 29;
       } else {
        $t$0$lcssa = $83;
        break;
       }
      }
     }
     $86 = (+Math_abs((+$66)));
     $87 = (+Math_log((+$86)));
     $88 = $64 * $87;
     $89 = $88 < 709.78271289338397;
     $90 = ($nm1$0|0)>(0);
     if ($89) {
      if ($90) {
       $a$217 = $t$0$lcssa;$b$218 = 1.0;$i$316 = $nm1$0;
       while(1) {
        $91 = (+($i$316|0));
        $92 = $91 * 2.0;
        $93 = $b$218 * $92;
        $94 = $93 / $20;
        $95 = $94 - $a$217;
        $96 = (($i$316) + -1)|0;
        $97 = ($i$316|0)>(1);
        if ($97) {
         $a$217$phi = $b$218;$b$218 = $95;$i$316 = $96;$a$217 = $a$217$phi;
        } else {
         $a$5 = $b$218;$b$5 = $95;$t$3 = $t$0$lcssa;
         break;
        }
       }
      } else {
       $a$5 = $t$0$lcssa;$b$5 = 1.0;$t$3 = $t$0$lcssa;
      }
     } else {
      if ($90) {
       $a$323 = $t$0$lcssa;$b$324 = 1.0;$i$422 = $nm1$0;$t$125 = $t$0$lcssa;
       while(1) {
        $98 = (+($i$422|0));
        $99 = $98 * 2.0;
        $100 = $b$324 * $99;
        $101 = $100 / $20;
        $102 = $101 - $a$323;
        $103 = $102 > 3.2733906078961419E+150;
        $104 = $b$324 / $102;
        $105 = $t$125 / $102;
        $a$4 = $103 ? $104 : $b$324;
        $b$4 = $103 ? 1.0 : $102;
        $t$2 = $103 ? $105 : $t$125;
        $106 = (($i$422) + -1)|0;
        $107 = ($i$422|0)>(1);
        if ($107) {
         $a$323 = $a$4;$b$324 = $b$4;$i$422 = $106;$t$125 = $t$2;
        } else {
         $a$5 = $a$4;$b$5 = $b$4;$t$3 = $t$2;
         break;
        }
       }
      } else {
       $a$5 = $t$0$lcssa;$b$5 = 1.0;$t$3 = $t$0$lcssa;
      }
     }
     $108 = (+_j0($20));
     $109 = (+_j1($20));
     $110 = (+Math_abs((+$108)));
     $111 = (+Math_abs((+$109)));
     $112 = !($110 >= $111);
     if ($112) {
      $115 = $t$3 * $109;
      $116 = $115 / $a$5;
      $b$6 = $116;
      break;
     } else {
      $113 = $t$3 * $108;
      $114 = $113 / $b$5;
      $b$6 = $114;
      break;
     }
    }
   } while(0);
   $117 = ($19|0)!=(0);
   $118 = -$b$6;
   $119 = $117 ? $118 : $b$6;
   $$0 = $119;
  }
 } while(0);
 return (+$$0);
}
function _yn($n,$x) {
 $n = $n|0;
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $8 = 0, $9 = 0, $a$05 = 0.0, $a$05$phi = 0.0, $b$06 = 0.0, $b$1 = 0.0, $i$04 = 0, $nm1$0 = 0, $or$cond = 0, $sign$0 = 0, $temp$0 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 $3 = (0 - ($0))|0;
 $4 = $0 | $3;
 $5 = $4 >>> 31;
 $6 = $2 | $5;
 $7 = ($6>>>0)>(2146435072);
 do {
  if ($7) {
   $$0 = $x;
  } else {
   $8 = ($1|0)>(-1);
   $9 = ($0>>>0)>(4294967295);
   $10 = ($1|0)==(-1);
   $11 = $10 & $9;
   $12 = $8 | $11;
   $13 = $2 | $0;
   $14 = ($13|0)==(0);
   $or$cond = $12 | $14;
   if ($or$cond) {
    $15 = ($2|0)==(2146435072);
    if ($15) {
     $$0 = 0.0;
    } else {
     $16 = ($n|0)==(0);
     if ($16) {
      $17 = (+_y0($x));
      $$0 = $17;
      break;
     }
     $18 = ($n|0)<(0);
     $19 = $n ^ -1;
     $20 = $n & 1;
     $21 = (($n) + -1)|0;
     $nm1$0 = $18 ? $19 : $21;
     $sign$0 = $18 ? $20 : 0;
     $22 = ($nm1$0|0)==(0);
     if ($22) {
      $23 = ($sign$0|0)!=(0);
      $24 = (+_y1($x));
      $25 = -$24;
      $26 = $23 ? $25 : $24;
      $$0 = $26;
      break;
     }
     $27 = ($2>>>0)>(1389363199);
     if ($27) {
      $28 = $nm1$0 & 3;
      switch ($28|0) {
      case 0:  {
       $29 = (+Math_sin((+$x)));
       $30 = -$29;
       $31 = (+Math_cos((+$x)));
       $32 = $30 - $31;
       $temp$0 = $32;
       break;
      }
      case 1:  {
       $33 = (+Math_sin((+$x)));
       $34 = (+Math_cos((+$x)));
       $35 = $34 - $33;
       $temp$0 = $35;
       break;
      }
      case 2:  {
       $36 = (+Math_sin((+$x)));
       $37 = (+Math_cos((+$x)));
       $38 = $36 + $37;
       $temp$0 = $38;
       break;
      }
      default: {
       $39 = (+Math_sin((+$x)));
       $40 = (+Math_cos((+$x)));
       $41 = $39 - $40;
       $temp$0 = $41;
      }
      }
      $42 = $temp$0 * 0.56418958354775628;
      $43 = (+Math_sqrt((+$x)));
      $44 = $42 / $43;
      $b$1 = $44;
     } else {
      $45 = (+_y0($x));
      $46 = (+_y1($x));
      HEAPF64[tempDoublePtr>>3] = $46;$47 = HEAP32[tempDoublePtr>>2]|0;
      $48 = HEAP32[tempDoublePtr+4>>2]|0;
      $49 = ($nm1$0|0)>(0);
      $50 = (0)!=(0);
      $51 = ($48|0)!=(-1048576);
      $52 = $50 | $51;
      $53 = $49 & $52;
      if ($53) {
       $a$05 = $45;$b$06 = $46;$i$04 = 0;
       while(1) {
        $54 = (($i$04) + 1)|0;
        $55 = (+($54|0));
        $56 = $55 * 2.0;
        $57 = $56 / $x;
        $58 = $b$06 * $57;
        $59 = $58 - $a$05;
        HEAPF64[tempDoublePtr>>3] = $59;$60 = HEAP32[tempDoublePtr>>2]|0;
        $61 = HEAP32[tempDoublePtr+4>>2]|0;
        $62 = ($54|0)<($nm1$0|0);
        $63 = (0)!=(0);
        $64 = ($61|0)!=(-1048576);
        $65 = $63 | $64;
        $66 = $62 & $65;
        if ($66) {
         $a$05$phi = $b$06;$b$06 = $59;$i$04 = $54;$a$05 = $a$05$phi;
        } else {
         $b$1 = $59;
         break;
        }
       }
      } else {
       $b$1 = $46;
      }
     }
     $67 = ($sign$0|0)!=(0);
     $68 = -$b$1;
     $69 = $67 ? $68 : $b$1;
     $$0 = $69;
    }
   } else {
    $$0 = nan;
   }
  }
 } while(0);
 return (+$$0);
}
function _jnf($n,$x) {
 $n = $n|0;
 $x = +$x;
 var $$0 = 0.0, $$02 = 0.0, $$lcssa71 = 0, $$op$op = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0;
 var $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0;
 var $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0;
 var $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $a$08 = 0.0, $a$08$phi = 0.0, $a$1$lcssa = 0.0;
 var $a$111 = 0.0, $a$217 = 0.0, $a$217$phi = 0.0, $a$323 = 0.0, $a$4 = 0.0, $a$5 = 0.0, $b$09 = 0.0, $b$1$lcssa = 0.0, $b$112 = 0.0, $b$218 = 0.0, $b$324 = 0.0, $b$4 = 0.0, $b$5 = 0.0, $b$6 = 0.0, $exitcond = 0, $exitcond47 = 0, $i$07 = 0, $i$110 = 0, $i$230 = 0, $i$316 = 0;
 var $i$422 = 0, $k$038 = 0, $k$038$lcssa = 0, $nm1$0 = 0, $nm1$0$op = 0, $not$ = 0, $q0$035 = 0.0, $q0$035$phi = 0.0, $q1$036 = 0.0, $sign$0 = 0, $switch$split12D = 0, $switch$split2D = 0, $switch$split42D = 0, $t$0$lcssa = 0.0, $t$031 = 0.0, $t$125 = 0.0, $t$2 = 0.0, $t$3 = 0.0, $z$037 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 >>> 31;
 $2 = $0 & 2147483647;
 $3 = ($2>>>0)>(2139095040);
 do {
  if ($3) {
   $$0 = $x;
  } else {
   $4 = ($n|0)==(0);
   if ($4) {
    $5 = (+_j0f($x));
    $$0 = $5;
    break;
   }
   $6 = ($n|0)<(0);
   if ($6) {
    $7 = $n ^ -1;
    $8 = -$x;
    $9 = $1 ^ 1;
    $$02 = $8;$nm1$0 = $7;$sign$0 = $9;
   } else {
    $10 = (($n) + -1)|0;
    $$02 = $x;$nm1$0 = $10;$sign$0 = $1;
   }
   $11 = ($nm1$0|0)==(0);
   if ($11) {
    $12 = (+_j1f($$02));
    $$0 = $12;
    break;
   }
   $13 = $sign$0 & $n;
   $14 = (+Math_abs((+$$02)));
   $switch$split2D = ($0|0)<(0);
   L13: do {
    if ($switch$split2D) {
     $switch$split12D = ($0|0)<(-8388608);
     if ($switch$split12D) {
      switch ($0|0) {
      case -2147483648:  {
       $b$6 = 0.0;
       break L13;
       break;
      }
      default: {
       label = 10;
       break L13;
      }
      }
     } else {
      switch ($0|0) {
      case -8388608:  {
       $b$6 = 0.0;
       break L13;
       break;
      }
      default: {
       label = 10;
       break L13;
      }
      }
     }
    } else {
     $switch$split42D = ($0|0)<(2139095040);
     if ($switch$split42D) {
      switch ($0|0) {
      case 0:  {
       $b$6 = 0.0;
       break L13;
       break;
      }
      default: {
       label = 10;
       break L13;
      }
      }
     } else {
      switch ($0|0) {
      case 2139095040:  {
       $b$6 = 0.0;
       break L13;
       break;
      }
      default: {
       label = 10;
       break L13;
      }
      }
     }
    }
   } while(0);
   L22: do {
    if ((label|0) == 10) {
     $15 = (+($nm1$0|0));
     $16 = $15 < $14;
     if ($16) {
      $17 = (+_j0f($14));
      $18 = (+_j1f($14));
      $19 = ($nm1$0|0)>(0);
      if ($19) {
       $a$08 = $17;$b$09 = $18;$i$07 = 0;
      } else {
       $b$6 = $18;
       break;
      }
      while(1) {
       $20 = (($i$07) + 1)|0;
       $21 = (+($20|0));
       $22 = $21 * 2.0;
       $23 = $22 / $14;
       $24 = $b$09 * $23;
       $25 = $24 - $a$08;
       $exitcond = ($20|0)==($nm1$0|0);
       if ($exitcond) {
        $b$6 = $25;
        break L22;
       } else {
        $a$08$phi = $b$09;$b$09 = $25;$i$07 = $20;$a$08 = $a$08$phi;
       }
      }
     }
     $26 = ($2>>>0)<(897581056);
     if ($26) {
      $27 = $14 * 0.5;
      $nm1$0$op = (($nm1$0) + 1)|0;
      $28 = ($nm1$0$op|0)<(2);
      $not$ = ($nm1$0|0)<(9);
      $29 = $28 & $not$;
      if ($29) {
       $a$1$lcssa = 1.0;$b$1$lcssa = $27;
      } else {
       $30 = ($nm1$0|0)<(8);
       $$op$op = (($nm1$0) + 2)|0;
       $31 = $30 ? $$op$op : 10;
       $a$111 = 1.0;$b$112 = $27;$i$110 = 2;
       while(1) {
        $32 = (+($i$110|0));
        $33 = $a$111 * $32;
        $34 = $27 * $b$112;
        $35 = (($i$110) + 1)|0;
        $exitcond47 = ($35|0)==($31|0);
        if ($exitcond47) {
         $a$1$lcssa = $33;$b$1$lcssa = $34;
         break;
        } else {
         $a$111 = $33;$b$112 = $34;$i$110 = $35;
        }
       }
      }
      $36 = $b$1$lcssa / $a$1$lcssa;
      $b$6 = $36;
      break;
     }
     $37 = $15 + 1.0;
     $38 = $37 * 2.0;
     $39 = $38 / $14;
     $40 = 2.0 / $14;
     $41 = $39 + $40;
     $42 = $39 * $41;
     $43 = $42 + -1.0;
     $44 = $43 < 1.0E+4;
     if ($44) {
      $k$038 = 1;$q0$035 = $39;$q1$036 = $43;$z$037 = $41;
      while(1) {
       $46 = (($k$038) + 1)|0;
       $47 = $40 + $z$037;
       $48 = $q1$036 * $47;
       $49 = $48 - $q0$035;
       $50 = $49 < 1.0E+4;
       if ($50) {
        $q0$035$phi = $q1$036;$k$038 = $46;$q1$036 = $49;$z$037 = $47;$q0$035 = $q0$035$phi;
       } else {
        $$lcssa71 = $46;$k$038$lcssa = $k$038;
        break;
       }
      }
      $45 = ($k$038$lcssa|0)>(-2);
      if ($45) {
       $i$230 = $$lcssa71;$t$031 = 0.0;
       label = 21;
      } else {
       $t$0$lcssa = 0.0;
      }
     } else {
      $i$230 = 1;$t$031 = 0.0;
      label = 21;
     }
     if ((label|0) == 21) {
      while(1) {
       label = 0;
       $51 = (+($i$230|0));
       $52 = $37 + $51;
       $53 = $52 * 2.0;
       $54 = $53 / $14;
       $55 = $54 - $t$031;
       $56 = 1.0 / $55;
       $57 = (($i$230) + -1)|0;
       $58 = ($i$230|0)>(0);
       if ($58) {
        $i$230 = $57;$t$031 = $56;
        label = 21;
       } else {
        $t$0$lcssa = $56;
        break;
       }
      }
     }
     $59 = (+Math_abs((+$39)));
     $60 = (+Math_log((+$59)));
     $61 = $37 * $60;
     $62 = $61 < 88.7216796875;
     $63 = ($nm1$0|0)>(0);
     if ($62) {
      if ($63) {
       $a$217 = $t$0$lcssa;$b$218 = 1.0;$i$316 = $nm1$0;
       while(1) {
        $64 = (+($i$316|0));
        $65 = $64 * 2.0;
        $66 = $65 * $b$218;
        $67 = $66 / $14;
        $68 = $67 - $a$217;
        $69 = (($i$316) + -1)|0;
        $70 = ($i$316|0)>(1);
        if ($70) {
         $a$217$phi = $b$218;$b$218 = $68;$i$316 = $69;$a$217 = $a$217$phi;
        } else {
         $a$5 = $b$218;$b$5 = $68;$t$3 = $t$0$lcssa;
         break;
        }
       }
      } else {
       $a$5 = $t$0$lcssa;$b$5 = 1.0;$t$3 = $t$0$lcssa;
      }
     } else {
      if ($63) {
       $a$323 = $t$0$lcssa;$b$324 = 1.0;$i$422 = $nm1$0;$t$125 = $t$0$lcssa;
       while(1) {
        $71 = (+($i$422|0));
        $72 = $71 * 2.0;
        $73 = $72 * $b$324;
        $74 = $73 / $14;
        $75 = $74 - $a$323;
        $76 = $75 > 1.152921504606847E+18;
        $77 = $b$324 / $75;
        $78 = $t$125 / $75;
        $a$4 = $76 ? $77 : $b$324;
        $b$4 = $76 ? 1.0 : $75;
        $t$2 = $76 ? $78 : $t$125;
        $79 = (($i$422) + -1)|0;
        $80 = ($i$422|0)>(1);
        if ($80) {
         $a$323 = $a$4;$b$324 = $b$4;$i$422 = $79;$t$125 = $t$2;
        } else {
         $a$5 = $a$4;$b$5 = $b$4;$t$3 = $t$2;
         break;
        }
       }
      } else {
       $a$5 = $t$0$lcssa;$b$5 = 1.0;$t$3 = $t$0$lcssa;
      }
     }
     $81 = (+_j0f($14));
     $82 = (+_j1f($14));
     $83 = (+Math_abs((+$81)));
     $84 = (+Math_abs((+$82)));
     $85 = !($83 >= $84);
     if ($85) {
      $88 = $t$3 * $82;
      $89 = $88 / $a$5;
      $b$6 = $89;
      break;
     } else {
      $86 = $t$3 * $81;
      $87 = $86 / $b$5;
      $b$6 = $87;
      break;
     }
    }
   } while(0);
   $90 = ($13|0)!=(0);
   $91 = -$b$6;
   $92 = $90 ? $91 : $b$6;
   $$0 = $92;
  }
 } while(0);
 return (+$$0);
}
function _ynf($n,$x) {
 $n = $n|0;
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $a$04 = 0.0, $a$04$phi = 0.0, $b$0$lcssa = 0.0, $b$05 = 0.0, $i$03 = 0;
 var $ib$0 = 0, $ib$02 = 0, $nm1$0 = 0, $or$cond = 0, $sign$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2147483647;
 $2 = ($1>>>0)>(2139095040);
 do {
  if ($2) {
   $$0 = $x;
  } else {
   $3 = ($0|0)<(0);
   $4 = ($1|0)!=(0);
   $or$cond = $3 & $4;
   if ($or$cond) {
    $$0 = nan;
   } else {
    $5 = ($1|0)==(2139095040);
    if ($5) {
     $$0 = 0.0;
    } else {
     $6 = ($n|0)==(0);
     if ($6) {
      $7 = (+_y0f($x));
      $$0 = $7;
      break;
     }
     $8 = ($n|0)<(0);
     $9 = $n ^ -1;
     $10 = $n & 1;
     $11 = (($n) + -1)|0;
     $sign$0 = $8 ? $10 : 0;
     $nm1$0 = $8 ? $9 : $11;
     $12 = ($nm1$0|0)==(0);
     if ($12) {
      $13 = ($sign$0|0)!=(0);
      $14 = (+_y1f($x));
      $15 = -$14;
      $16 = $13 ? $15 : $14;
      $$0 = $16;
      break;
     }
     $17 = (+_y0f($x));
     $18 = (+_y1f($x));
     $ib$02 = (HEAPF32[tempDoublePtr>>2]=$18,HEAP32[tempDoublePtr>>2]|0);
     $19 = ($nm1$0|0)>(0);
     $20 = ($ib$02|0)!=(-8388608);
     $21 = $19 & $20;
     if ($21) {
      $a$04 = $17;$b$05 = $18;$i$03 = 0;
      while(1) {
       $22 = (($i$03) + 1)|0;
       $23 = (+($22|0));
       $24 = $23 * 2.0;
       $25 = $24 / $x;
       $26 = $b$05 * $25;
       $27 = $26 - $a$04;
       $ib$0 = (HEAPF32[tempDoublePtr>>2]=$27,HEAP32[tempDoublePtr>>2]|0);
       $28 = ($22|0)<($nm1$0|0);
       $29 = ($ib$0|0)!=(-8388608);
       $30 = $28 & $29;
       if ($30) {
        $a$04$phi = $b$05;$b$05 = $27;$i$03 = $22;$a$04 = $a$04$phi;
       } else {
        $b$0$lcssa = $27;
        break;
       }
      }
     } else {
      $b$0$lcssa = $18;
     }
     $31 = ($sign$0|0)!=(0);
     $32 = -$b$0$lcssa;
     $33 = $31 ? $32 : $b$0$lcssa;
     $$0 = $33;
    }
   }
  }
 } while(0);
 return (+$$0);
}
function _ldexp($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _ldexpf($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbnf($x,$n));
 return (+$0);
}
function _ldexpl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbnl($x,$n));
 return (+$0);
}
function _lgamma($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+___lgamma_r($x,7220));
 return (+$0);
}
function _lgammaf($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+___lgammaf_r($x,7220));
 return (+$0);
}
function ___lgammaf_r($x,$signgamp) {
 $x = +$x;
 $signgamp = $signgamp|0;
 var $$$1 = 0.0, $$0 = 0.0, $$0$i = 0.0, $$02 = 0.0, $$1 = 0.0, $$pn = 0.0, $$r$1 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0;
 var $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0;
 var $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0;
 var $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0;
 var $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0;
 var $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0;
 var $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0;
 var $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $nadj$0 = 0.0, $r$010 = 0.0, $r$04 = 0.0, $r$07 = 0.0, $r$1 = 0.0, $switch$split12D = 0, $switch$split2D = 0, $switch$split42D = 0, $t$0 = 0.0, $y$03 = 0.0, $y$06 = 0.0, $y$09 = 0.0, $z$0 = 0.0;
 var $z$1 = 0.0, $z$2 = 0.0, $z$3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 HEAP32[$signgamp>>2] = 1;
 $1 = $0 & 2147483647;
 $2 = ($1>>>0)>(2139095039);
 do {
  if ($2) {
   $3 = $x * $x;
   $$0 = $3;
  } else {
   $4 = ($1>>>0)<(889192448);
   $5 = ($0|0)<(0);
   if ($4) {
    if ($5) {
     HEAP32[$signgamp>>2] = -1;
     $6 = -$x;
     $$02 = $6;
    } else {
     $$02 = $x;
    }
    $7 = (+Math_log((+$$02)));
    $8 = -$7;
    $$0 = $8;
    break;
   }
   if ($5) {
    $9 = -$x;
    $10 = $x * -0.5;
    $11 = (+Math_floor((+$10)));
    $12 = $10 - $11;
    $13 = $12 * 2.0;
    $14 = $13 * 4.0;
    $15 = (~~(($14)));
    $16 = (($15) + 1)|0;
    $17 = (($16|0) / 2)&-1;
    $18 = (+($17|0));
    $19 = $18 * 0.5;
    $20 = $13 - $19;
    $21 = $20;
    $22 = $21 * 3.1415926535897931;
    switch ($17|0) {
    case 3:  {
     $27 = (+___cosdf($22));
     $28 = -$27;
     $$0$i = $28;
     break;
    }
    case 1:  {
     $24 = (+___cosdf($22));
     $$0$i = $24;
     break;
    }
    case 2:  {
     $25 = -$22;
     $26 = (+___sindf($25));
     $$0$i = $26;
     break;
    }
    default: {
     $23 = (+___sindf($22));
     $$0$i = $23;
    }
    }
    $29 = $$0$i == 0.0;
    if ($29) {
     $30 = $x - $x;
     $31 = 1.0 / $30;
     $$0 = $31;
     break;
    }
    $32 = $$0$i > 0.0;
    if ($32) {
     HEAP32[$signgamp>>2] = -1;
     $t$0 = $$0$i;
    } else {
     $33 = -$$0$i;
     $t$0 = $33;
    }
    $34 = $t$0 * $9;
    $35 = 3.1415927410125732 / $34;
    $36 = (+Math_log((+$35)));
    $$1 = $9;$nadj$0 = $36;
   } else {
    $$1 = $x;$nadj$0 = 0.0;
   }
   $switch$split2D = ($0|0)<(1065353216);
   L26: do {
    if ($switch$split2D) {
     $switch$split12D = ($0|0)<(-1073741824);
     if ($switch$split12D) {
      switch ($0|0) {
      case -1082130432:  {
       $r$1 = 0.0;
       break L26;
       break;
      }
      default: {
       label = 20;
       break L26;
      }
      }
     } else {
      switch ($0|0) {
      case -1073741824:  {
       $r$1 = 0.0;
       break L26;
       break;
      }
      default: {
       label = 20;
       break L26;
      }
      }
     }
    } else {
     $switch$split42D = ($0|0)<(1073741824);
     if ($switch$split42D) {
      switch ($0|0) {
      case 1065353216:  {
       $r$1 = 0.0;
       break L26;
       break;
      }
      default: {
       label = 20;
       break L26;
      }
      }
     } else {
      switch ($0|0) {
      case 1073741824:  {
       $r$1 = 0.0;
       break L26;
       break;
      }
      default: {
       label = 20;
       break L26;
      }
      }
     }
    }
   } while(0);
   L35: do {
    if ((label|0) == 20) {
     $37 = ($1>>>0)<(1073741824);
     if ($37) {
      $38 = ($1>>>0)<(1063675495);
      do {
       if ($38) {
        $39 = (+Math_log((+$$1)));
        $40 = -$39;
        $41 = ($1>>>0)>(1060850207);
        if ($41) {
         $$pn = 1.0;$r$04 = $40;
         label = 28;
        } else {
         $46 = ($1>>>0)>(1047343879);
         $47 = $$1 + -0.4616321325302124;
         $$$1 = $46 ? $47 : $$1;
         if ($46) {
          $r$07 = $40;$y$06 = $$$1;
          label = 29;
         } else {
          $r$010 = $40;$y$09 = $$$1;
          label = 30;
         }
        }
       } else {
        $42 = ($1>>>0)>(1071490583);
        if ($42) {
         $$pn = 2.0;$r$04 = 0.0;
         label = 28;
        } else {
         $43 = ($1>>>0)>(1067296287);
         if ($43) {
          $44 = $$1 + -1.4616321325302124;
          $r$07 = 0.0;$y$06 = $44;
          label = 29;
          break;
         } else {
          $45 = $$1 + -1.0;
          $r$010 = 0.0;$y$09 = $45;
          label = 30;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 28) {
       $y$03 = $$pn - $$1;
       $48 = $y$03 * $y$03;
       $49 = $48 * 2.5214456400135532E-5;
       $50 = $49 + 2.2086278477218002E-4;
       $51 = $48 * $50;
       $52 = $51 + 0.0011927076848223805;
       $53 = $48 * $52;
       $54 = $53 + 0.0073855509981513023;
       $55 = $48 * $54;
       $56 = $55 + 0.067352302372455597;
       $57 = $48 * $56;
       $58 = $57 + 0.077215664088726044;
       $59 = $48 * 4.4864096707897261E-5;
       $60 = $59 + 1.0801156895468011E-4;
       $61 = $48 * $60;
       $62 = $61 + 5.1006977446377277E-4;
       $63 = $48 * $62;
       $64 = $63 + 0.0028905137442052364;
       $65 = $48 * $64;
       $66 = $65 + 0.020580807700753212;
       $67 = $48 * $66;
       $68 = $67 + 0.32246702909469604;
       $69 = $48 * $68;
       $70 = $y$03 * $58;
       $71 = $70 + $69;
       $72 = $y$03 * 0.5;
       $73 = $71 - $72;
       $74 = $r$04 + $73;
       $r$1 = $74;
       break;
      }
      else if ((label|0) == 29) {
       $75 = $y$06 * $y$06;
       $76 = $y$06 * $75;
       $77 = $76 * 3.15632059937343E-4;
       $78 = $77 + -0.0014034647028893232;
       $79 = $76 * $78;
       $80 = $79 + 0.0061005386523902416;
       $81 = $76 * $80;
       $82 = $81 + -0.032788541167974472;
       $83 = $76 * $82;
       $84 = $83 + 0.48383611440658569;
       $85 = $76 * 3.1275415676645935E-4;
       $86 = 8.8108185445889831E-4 - $85;
       $87 = $76 * $86;
       $88 = $87 + -0.0036845202557742596;
       $89 = $76 * $88;
       $90 = $89 + 0.017970675602555275;
       $91 = $76 * $90;
       $92 = $91 + -0.14758771657943726;
       $93 = $76 * 3.3552918466739357E-4;
       $94 = $93 + -5.3859531180933118E-4;
       $95 = $76 * $94;
       $96 = $95 + 0.0022596477065235376;
       $97 = $76 * $96;
       $98 = $97 + -0.010314224287867546;
       $99 = $76 * $98;
       $100 = $99 + 0.06462494283914566;
       $101 = $75 * $84;
       $102 = $y$06 * $100;
       $103 = $92 + $102;
       $104 = $76 * $103;
       $105 = 6.6971006518201648E-9 - $104;
       $106 = $101 - $105;
       $107 = $106 + -0.12148628383874893;
       $108 = $r$07 + $107;
       $r$1 = $108;
       break;
      }
      else if ((label|0) == 30) {
       $109 = $y$09 * 0.013381091877818108;
       $110 = $109 + 0.22896373271942139;
       $111 = $y$09 * $110;
       $112 = $111 + 0.97771751880645751;
       $113 = $y$09 * $112;
       $114 = $113 + 1.4549225568771362;
       $115 = $y$09 * $114;
       $116 = $115 + 0.6328270435333252;
       $117 = $y$09 * $116;
       $118 = $117 + -0.077215664088726044;
       $119 = $y$09 * $118;
       $120 = $y$09 * 0.0032170924823731184;
       $121 = $120 + 0.10422264784574509;
       $122 = $y$09 * $121;
       $123 = $122 + 0.76928514242172241;
       $124 = $y$09 * $123;
       $125 = $124 + 2.1284897327423096;
       $126 = $y$09 * $125;
       $127 = $126 + 2.4559779167175293;
       $128 = $y$09 * $127;
       $129 = $128 + 1.0;
       $130 = $y$09 * 0.5;
       $131 = $119 / $129;
       $132 = $131 - $130;
       $133 = $r$010 + $132;
       $r$1 = $133;
       break;
      }
     } else {
      $134 = ($1>>>0)<(1090519040);
      if (!($134)) {
       $177 = ($1>>>0)<(1551892480);
       $178 = (+Math_log((+$$1)));
       if ($177) {
        $179 = 1.0 / $$1;
        $180 = $179 * $179;
        $181 = $180 * 0.0016309292986989021;
        $182 = 8.3633989561349154E-4 - $181;
        $183 = $180 * $182;
        $184 = $183 + -5.9518753550946712E-4;
        $185 = $180 * $184;
        $186 = $185 + 7.9365057172253728E-4;
        $187 = $180 * $186;
        $188 = $187 + -0.0027777778450399637;
        $189 = $180 * $188;
        $190 = $189 + 0.083333335816860198;
        $191 = $179 * $190;
        $192 = $191 + 0.41893854737281799;
        $193 = $$1 + -0.5;
        $194 = $178 + -1.0;
        $195 = $193 * $194;
        $196 = $195 + $192;
        $r$1 = $196;
        break;
       } else {
        $197 = $178 + -1.0;
        $198 = $$1 * $197;
        $r$1 = $198;
        break;
       }
      }
      $135 = (~~(($$1)));
      $136 = (+($135|0));
      $137 = $$1 - $136;
      $138 = $137 * 3.194753298885189E-5;
      $139 = $138 + 0.0018402845598757267;
      $140 = $137 * $139;
      $141 = $140 + 0.026642270386219025;
      $142 = $137 * $141;
      $143 = $142 + 0.14635047316551208;
      $144 = $137 * $143;
      $145 = $144 + 0.3257787823677063;
      $146 = $137 * $145;
      $147 = $146 + 0.21498242020606995;
      $148 = $137 * $147;
      $149 = $148 + -0.077215664088726044;
      $150 = $137 * $149;
      $151 = $137 * 7.3266842264274601E-6;
      $152 = $151 + 7.7794247772544622E-4;
      $153 = $137 * $152;
      $154 = $153 + 0.018645919859409332;
      $155 = $137 * $154;
      $156 = $155 + 0.1719338595867157;
      $157 = $137 * $156;
      $158 = $157 + 0.72193557024002075;
      $159 = $137 * $158;
      $160 = $159 + 1.3920053243637085;
      $161 = $137 * $160;
      $162 = $161 + 1.0;
      $163 = $137 * 0.5;
      $164 = $150 / $162;
      $165 = $163 + $164;
      switch ($135|0) {
      case 7:  {
       $166 = $137 + 6.0;
       $z$0 = $166;
       label = 34;
       break;
      }
      case 6:  {
       $z$0 = 1.0;
       label = 34;
       break;
      }
      case 5:  {
       $z$1 = 1.0;
       label = 35;
       break;
      }
      case 4:  {
       $z$2 = 1.0;
       label = 36;
       break;
      }
      case 3:  {
       $z$3 = 1.0;
       break;
      }
      default: {
       $r$1 = $165;
       break L35;
      }
      }
      if ((label|0) == 34) {
       $167 = $137 + 5.0;
       $168 = $167 * $z$0;
       $z$1 = $168;
       label = 35;
      }
      if ((label|0) == 35) {
       $169 = $137 + 4.0;
       $170 = $169 * $z$1;
       $z$2 = $170;
       label = 36;
      }
      if ((label|0) == 36) {
       $171 = $137 + 3.0;
       $172 = $171 * $z$2;
       $z$3 = $172;
      }
      $173 = $137 + 2.0;
      $174 = $173 * $z$3;
      $175 = (+Math_log((+$174)));
      $176 = $165 + $175;
      $r$1 = $176;
      break;
     }
    }
   } while(0);
   $199 = $nadj$0 - $r$1;
   $$r$1 = $5 ? $199 : $r$1;
   $$0 = $$r$1;
  }
 } while(0);
 return (+$$0);
}
function ___lgammal_r($x,$sg) {
 $x = +$x;
 $sg = $sg|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+___lgamma_r($x,$sg));
 return (+$0);
}
function _lgammal($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+___lgamma_r($x,7220));
 return (+$0);
}
function ___lgamma_r($x,$signgamp) {
 $x = +$x;
 $signgamp = $signgamp|0;
 var $$$1 = 0.0, $$0 = 0.0, $$0$i = 0.0, $$02 = 0.0, $$1 = 0.0, $$pn = 0.0, $$r$1 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0;
 var $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0;
 var $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0;
 var $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0;
 var $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0;
 var $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0;
 var $20 = 0.0, $200 = 0.0, $201 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0;
 var $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0;
 var $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $nadj$0 = 0.0, $r$010 = 0.0, $r$04 = 0.0, $r$07 = 0.0, $r$1 = 0.0, $switch$split12D = 0, $switch$split2D = 0, $switch$split42D = 0, $t$0 = 0.0, $y$03 = 0.0, $y$06 = 0.0;
 var $y$09 = 0.0, $z$0 = 0.0, $z$1 = 0.0, $z$2 = 0.0, $z$3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAP32[$signgamp>>2] = 1;
 $2 = $1 & 2147483647;
 $3 = ($2>>>0)>(2146435071);
 do {
  if ($3) {
   $4 = $x * $x;
   $$0 = $4;
  } else {
   $5 = ($2>>>0)<(999292928);
   $6 = ($1|0)<(0);
   if ($5) {
    if ($6) {
     $7 = -$x;
     HEAP32[$signgamp>>2] = -1;
     $$02 = $7;
    } else {
     $$02 = $x;
    }
    $8 = (+Math_log((+$$02)));
    $9 = -$8;
    $$0 = $9;
    break;
   }
   if ($6) {
    $10 = -$x;
    $11 = $x * -0.5;
    $12 = (+Math_floor((+$11)));
    $13 = $11 - $12;
    $14 = $13 * 2.0;
    $15 = $14 * 4.0;
    $16 = (~~(($15)));
    $17 = (($16) + 1)|0;
    $18 = (($17|0) / 2)&-1;
    $19 = (+($18|0));
    $20 = $19 * 0.5;
    $21 = $20;
    $22 = $14 - $21;
    $23 = $22 * 3.1415926535897931;
    switch ($18|0) {
    case 3:  {
     $28 = (+___cos($23,0.0));
     $29 = -$28;
     $$0$i = $29;
     break;
    }
    case 1:  {
     $25 = (+___cos($23,0.0));
     $$0$i = $25;
     break;
    }
    case 2:  {
     $26 = -$23;
     $27 = (+___sin($26,0.0,0));
     $$0$i = $27;
     break;
    }
    default: {
     $24 = (+___sin($23,0.0,0));
     $$0$i = $24;
    }
    }
    $30 = $$0$i == 0.0;
    if ($30) {
     $31 = $x - $x;
     $32 = 1.0 / $31;
     $$0 = $32;
     break;
    }
    $33 = $$0$i > 0.0;
    if ($33) {
     HEAP32[$signgamp>>2] = -1;
     $t$0 = $$0$i;
    } else {
     $34 = -$$0$i;
     $t$0 = $34;
    }
    $35 = $t$0 * $10;
    $36 = 3.1415926535897931 / $35;
    $37 = (+Math_log((+$36)));
    $$1 = $10;$nadj$0 = $37;
   } else {
    $$1 = $x;$nadj$0 = 0.0;
   }
   $switch$split2D = ($1|0)<(1072693248);
   L26: do {
    if ($switch$split2D) {
     $switch$split12D = ($1|0)<(-1073741824);
     if ($switch$split12D) {
      switch ($1|0) {
      case -1074790400:  {
       label = 20;
       break L26;
       break;
      }
      default: {
       label = 21;
       break L26;
      }
      }
     } else {
      switch ($1|0) {
      case -1073741824:  {
       label = 20;
       break L26;
       break;
      }
      default: {
       label = 21;
       break L26;
      }
      }
     }
    } else {
     $switch$split42D = ($1|0)<(1073741824);
     if ($switch$split42D) {
      switch ($1|0) {
      case 1072693248:  {
       label = 20;
       break L26;
       break;
      }
      default: {
       label = 21;
       break L26;
      }
      }
     } else {
      switch ($1|0) {
      case 1073741824:  {
       label = 20;
       break L26;
       break;
      }
      default: {
       label = 21;
       break L26;
      }
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    $38 = ($0|0)==(0);
    if ($38) {
     $r$1 = 0.0;
    } else {
     label = 21;
    }
   }
   L37: do {
    if ((label|0) == 21) {
     $39 = ($2>>>0)<(1073741824);
     if ($39) {
      $40 = ($2>>>0)<(1072483533);
      do {
       if ($40) {
        $41 = (+Math_log((+$$1)));
        $42 = -$41;
        $43 = ($2>>>0)>(1072130371);
        if ($43) {
         $$pn = 1.0;$r$04 = $42;
         label = 29;
        } else {
         $48 = ($2>>>0)>(1070442080);
         $49 = $$1 + -0.46163214496836225;
         $$$1 = $48 ? $49 : $$1;
         if ($48) {
          $r$07 = $42;$y$06 = $$$1;
          label = 30;
         } else {
          $r$010 = $42;$y$09 = $$$1;
          label = 31;
         }
        }
       } else {
        $44 = ($2>>>0)>(1073460418);
        if ($44) {
         $$pn = 2.0;$r$04 = 0.0;
         label = 29;
        } else {
         $45 = ($2>>>0)>(1072936131);
         if ($45) {
          $46 = $$1 + -1.4616321449683622;
          $r$07 = 0.0;$y$06 = $46;
          label = 30;
          break;
         } else {
          $47 = $$1 + -1.0;
          $r$010 = 0.0;$y$09 = $47;
          label = 31;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 29) {
       $y$03 = $$pn - $$1;
       $50 = $y$03 * $y$03;
       $51 = $50 * 2.5214456545125733E-5;
       $52 = $51 + 2.2086279071390839E-4;
       $53 = $50 * $52;
       $54 = $53 + 0.0011927076318336207;
       $55 = $50 * $54;
       $56 = $55 + 0.0073855508608140288;
       $57 = $50 * $56;
       $58 = $57 + 0.067352301053129268;
       $59 = $50 * $58;
       $60 = $59 + 0.077215664901532866;
       $61 = $50 * 4.4864094961891516E-5;
       $62 = $61 + 1.0801156724758394E-4;
       $63 = $50 * $62;
       $64 = $63 + 5.1006979215351134E-4;
       $65 = $50 * $64;
       $66 = $65 + 0.0028905138367341563;
       $67 = $50 * $66;
       $68 = $67 + 0.020580808432516733;
       $69 = $50 * $68;
       $70 = $69 + 0.32246703342411359;
       $71 = $50 * $70;
       $72 = $y$03 * $60;
       $73 = $72 + $71;
       $74 = $y$03 * 0.5;
       $75 = $73 - $74;
       $76 = $r$04 + $75;
       $r$1 = $76;
       break;
      }
      else if ((label|0) == 30) {
       $77 = $y$06 * $y$06;
       $78 = $y$06 * $77;
       $79 = $78 * 3.1563207090362595E-4;
       $80 = $79 + -0.0014034646998923284;
       $81 = $78 * $80;
       $82 = $81 + 0.0061005387024629133;
       $83 = $78 * $82;
       $84 = $83 + -0.032788541075985965;
       $85 = $78 * $84;
       $86 = $85 + 0.48383612272381005;
       $87 = $78 * 3.1275416837512086E-4;
       $88 = 8.8108188243765401E-4 - $87;
       $89 = $78 * $88;
       $90 = $89 + -0.0036845201678113826;
       $91 = $78 * $90;
       $92 = $91 + 0.017970675081182039;
       $93 = $78 * $92;
       $94 = $93 + -0.14758772299459391;
       $95 = $78 * 3.3552919263551907E-4;
       $96 = $95 + -5.3859530535674055E-4;
       $97 = $78 * $96;
       $98 = $97 + 0.0022596478090061247;
       $99 = $78 * $98;
       $100 = $99 + -0.010314224129834144;
       $101 = $78 * $100;
       $102 = $101 + 0.064624940239133385;
       $103 = $77 * $86;
       $104 = $y$06 * $102;
       $105 = $94 + $104;
       $106 = $78 * $105;
       $107 = -3.6386769970395054E-18 - $106;
       $108 = $103 - $107;
       $109 = $108 + -0.12148629053584961;
       $110 = $r$07 + $109;
       $r$1 = $110;
       break;
      }
      else if ((label|0) == 31) {
       $111 = $y$09 * 0.013381091853678766;
       $112 = $111 + 0.22896372806469245;
       $113 = $y$09 * $112;
       $114 = $113 + 0.97771752796337275;
       $115 = $y$09 * $114;
       $116 = $115 + 1.4549225013723477;
       $117 = $y$09 * $116;
       $118 = $117 + 0.63282706402509337;
       $119 = $y$09 * $118;
       $120 = $119 + -0.077215664901532866;
       $121 = $y$09 * $120;
       $122 = $y$09 * 0.0032170924228242391;
       $123 = $122 + 0.10422264559336913;
       $124 = $y$09 * $123;
       $125 = $124 + 0.76928515045667278;
       $126 = $y$09 * $125;
       $127 = $126 + 2.128489763798934;
       $128 = $y$09 * $127;
       $129 = $128 + 2.4559779371304113;
       $130 = $y$09 * $129;
       $131 = $130 + 1.0;
       $132 = $y$09 * 0.5;
       $133 = $121 / $131;
       $134 = $133 - $132;
       $135 = $r$010 + $134;
       $r$1 = $135;
       break;
      }
     } else {
      $136 = ($2>>>0)<(1075838976);
      if (!($136)) {
       $179 = ($2>>>0)<(1133510656);
       $180 = (+Math_log((+$$1)));
       if ($179) {
        $181 = 1.0 / $$1;
        $182 = $181 * $181;
        $183 = $182 * 0.0016309293409657527;
        $184 = 8.3633991899628213E-4 - $183;
        $185 = $182 * $184;
        $186 = $185 + -5.9518755745033996E-4;
        $187 = $182 * $186;
        $188 = $187 + 7.9365055864301956E-4;
        $189 = $182 * $188;
        $190 = $189 + -0.0027777777772877554;
        $191 = $182 * $190;
        $192 = $191 + 0.083333333333332968;
        $193 = $181 * $192;
        $194 = $193 + 0.41893853320467273;
        $195 = $$1 + -0.5;
        $196 = $180 + -1.0;
        $197 = $195 * $196;
        $198 = $197 + $194;
        $r$1 = $198;
        break;
       } else {
        $199 = $180 + -1.0;
        $200 = $$1 * $199;
        $r$1 = $200;
        break;
       }
      }
      $137 = (~~(($$1)));
      $138 = (+($137|0));
      $139 = $$1 - $138;
      $140 = $139 * 3.1947532658410087E-5;
      $141 = $140 + 0.0018402845140733772;
      $142 = $139 * $141;
      $143 = $142 + 0.026642270303363861;
      $144 = $139 * $143;
      $145 = $144 + 0.14635047265246445;
      $146 = $139 * $145;
      $147 = $146 + 0.32577879640893098;
      $148 = $139 * $147;
      $149 = $148 + 0.21498241596060885;
      $150 = $139 * $149;
      $151 = $150 + -0.077215664901532866;
      $152 = $139 * $151;
      $153 = $139 * 7.3266843074462564E-6;
      $154 = $153 + 7.779424963818936E-4;
      $155 = $139 * $154;
      $156 = $155 + 0.01864591917156529;
      $157 = $139 * $156;
      $158 = $157 + 0.17193386563280308;
      $159 = $139 * $158;
      $160 = $159 + 0.72193554756713807;
      $161 = $139 * $160;
      $162 = $161 + 1.3920053346762105;
      $163 = $139 * $162;
      $164 = $163 + 1.0;
      $165 = $139 * 0.5;
      $166 = $152 / $164;
      $167 = $165 + $166;
      switch ($137|0) {
      case 7:  {
       $168 = $139 + 6.0;
       $z$0 = $168;
       label = 35;
       break;
      }
      case 6:  {
       $z$0 = 1.0;
       label = 35;
       break;
      }
      case 5:  {
       $z$1 = 1.0;
       label = 36;
       break;
      }
      case 4:  {
       $z$2 = 1.0;
       label = 37;
       break;
      }
      case 3:  {
       $z$3 = 1.0;
       break;
      }
      default: {
       $r$1 = $167;
       break L37;
      }
      }
      if ((label|0) == 35) {
       $169 = $139 + 5.0;
       $170 = $169 * $z$0;
       $z$1 = $170;
       label = 36;
      }
      if ((label|0) == 36) {
       $171 = $139 + 4.0;
       $172 = $171 * $z$1;
       $z$2 = $172;
       label = 37;
      }
      if ((label|0) == 37) {
       $173 = $139 + 3.0;
       $174 = $173 * $z$2;
       $z$3 = $174;
      }
      $175 = $139 + 2.0;
      $176 = $175 * $z$3;
      $177 = (+Math_log((+$176)));
      $178 = $167 + $177;
      $r$1 = $178;
      break;
     }
    }
   } while(0);
   $201 = $nadj$0 - $r$1;
   $$r$1 = $6 ? $201 : $r$1;
   $$0 = $$r$1;
  }
 } while(0);
 return (+$$0);
}
function _llrint($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_rint($x));
 $1 = (~~$0)>>>0;
 $2 = +Math_abs($0) >= 1.0 ? $0 > 0.0 ? (~~+Math_min(+Math_floor($0 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($0 - +(~~$0 >>> 0)) / 4294967296.0) >>> 0 : 0;
 tempRet0 = ($2);
 return ($1|0);
}
function _llrintf($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_rintf($x));
 $1 = (~~$0)>>>0;
 $2 = +Math_abs($0) >= 1.0 ? $0 > 0.0 ? (~~+Math_min(+Math_floor($0 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($0 - +(~~$0 >>> 0)) / 4294967296.0) >>> 0 : 0;
 tempRet0 = ($2);
 return ($1|0);
}
function _llrintl($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_llrint($x)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _llround($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_round($x));
 $1 = (~~$0)>>>0;
 $2 = +Math_abs($0) >= 1.0 ? $0 > 0.0 ? (~~+Math_min(+Math_floor($0 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($0 - +(~~$0 >>> 0)) / 4294967296.0) >>> 0 : 0;
 tempRet0 = ($2);
 return ($1|0);
}
function _llroundf($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_roundf($x));
 $1 = (~~$0)>>>0;
 $2 = +Math_abs($0) >= 1.0 ? $0 > 0.0 ? (~~+Math_min(+Math_floor($0 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($0 - +(~~$0 >>> 0)) / 4294967296.0) >>> 0 : 0;
 tempRet0 = ($2);
 return ($1|0);
}
function _llroundl($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_roundl($x));
 $1 = (~~$0)>>>0;
 $2 = +Math_abs($0) >= 1.0 ? $0 > 0.0 ? (~~+Math_min(+Math_floor($0 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($0 - +(~~$0 >>> 0)) / 4294967296.0) >>> 0 : 0;
 tempRet0 = ($2);
 return ($1|0);
}
function _log10($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $8 = 0.0, $9 = 0.0, $hx$0 = 0, $k$0 = 0, $or$cond = 0, $or$cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = ($1>>>0)<(1048576);
 $3 = ($1|0)<(0);
 $or$cond = $3 | $2;
 do {
  if ($or$cond) {
   $4 = $1 & 2147483647;
   $5 = ($0|0)==(0);
   $6 = ($4|0)==(0);
   $7 = $5 & $6;
   if ($7) {
    $8 = $x * $x;
    $9 = -1.0 / $8;
    $$0 = $9;
    break;
   }
   if ($3) {
    $10 = $x - $x;
    $11 = $10 / 0.0;
    $$0 = $11;
    break;
   } else {
    $12 = $x * 18014398509481984.0;
    HEAPF64[tempDoublePtr>>3] = $12;$13 = HEAP32[tempDoublePtr>>2]|0;
    $14 = HEAP32[tempDoublePtr+4>>2]|0;
    $26 = $13;$70 = $14;$hx$0 = $14;$k$0 = -1077;
    label = 9;
    break;
   }
  } else {
   $15 = ($1>>>0)>(2146435071);
   if ($15) {
    $$0 = $x;
   } else {
    $16 = ($1|0)==(1072693248);
    $17 = ($0|0)==(0);
    $18 = (0)==(0);
    $19 = $17 & $18;
    $or$cond4 = $19 & $16;
    if ($or$cond4) {
     $$0 = 0.0;
    } else {
     $26 = $0;$70 = $1;$hx$0 = $1;$k$0 = -1023;
     label = 9;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $20 = (($hx$0) + 614242)|0;
  $21 = $20 >>> 20;
  $22 = (($k$0) + ($21))|0;
  $23 = $20 & 1048575;
  $24 = (($23) + 1072079006)|0;
  HEAP32[tempDoublePtr>>2] = $26;HEAP32[tempDoublePtr+4>>2] = $24;$25 = +HEAPF64[tempDoublePtr>>3];
  $27 = $25 + -1.0;
  $28 = $27 * 0.5;
  $29 = $27 * $28;
  $30 = $27 + 2.0;
  $31 = $27 / $30;
  $32 = $31 * $31;
  $33 = $32 * $32;
  $34 = $33 * 0.15313837699209373;
  $35 = $34 + 0.22222198432149784;
  $36 = $33 * $35;
  $37 = $36 + 0.39999999999409419;
  $38 = $33 * $37;
  $39 = $33 * 0.14798198605116586;
  $40 = $39 + 0.1818357216161805;
  $41 = $33 * $40;
  $42 = $41 + 0.28571428743662391;
  $43 = $33 * $42;
  $44 = $43 + 0.66666666666667351;
  $45 = $32 * $44;
  $46 = $38 + $45;
  $47 = $27 - $29;
  HEAPF64[tempDoublePtr>>3] = $47;$48 = HEAP32[tempDoublePtr>>2]|0;
  $49 = HEAP32[tempDoublePtr+4>>2]|0;
  HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $49;$50 = +HEAPF64[tempDoublePtr>>3];
  $51 = $27 - $50;
  $52 = $51 - $29;
  $53 = $29 + $46;
  $54 = $31 * $53;
  $55 = $54 + $52;
  $56 = $50 * 0.43429448187816888;
  $57 = (+($22|0));
  $58 = $57 * 0.30102999566361177;
  $59 = $57 * 3.6942390771589308E-13;
  $60 = $50 + $55;
  $61 = $60 * 2.5082946711645275E-11;
  $62 = $59 + $61;
  $63 = $55 * 0.43429448187816888;
  $64 = $63 + $62;
  $65 = $58 + $56;
  $66 = $58 - $65;
  $67 = $56 + $66;
  $68 = $67 + $64;
  $69 = $65 + $68;
  $$0 = $69;
 }
 return (+$$0);
}
function _log10f($x) {
 $x = +$x;
 var $$0 = 0.0, $$mask = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $ix$0 = 0, $k$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = ($0>>>0)<(8388608);
 $2 = ($0|0)<(0);
 $or$cond = $1 | $2;
 do {
  if ($or$cond) {
   $$mask = $0 & 2147483647;
   $3 = ($$mask|0)==(0);
   if ($3) {
    $4 = $x * $x;
    $5 = -1.0 / $4;
    $$0 = $5;
    break;
   }
   if ($2) {
    $6 = $x - $x;
    $7 = $6 / 0.0;
    $$0 = $7;
    break;
   } else {
    $8 = $x * 33554432.0;
    $9 = (HEAPF32[tempDoublePtr>>2]=$8,HEAP32[tempDoublePtr>>2]|0);
    $ix$0 = $9;$k$0 = -152;
    label = 9;
    break;
   }
  } else {
   $10 = ($0>>>0)>(2139095039);
   if ($10) {
    $$0 = $x;
   } else {
    $11 = ($0|0)==(1065353216);
    if ($11) {
     $$0 = 0.0;
    } else {
     $ix$0 = $0;$k$0 = -127;
     label = 9;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $12 = (($ix$0) + 4913933)|0;
  $13 = $12 >>> 23;
  $14 = (($k$0) + ($13))|0;
  $15 = $12 & 8388607;
  $16 = (($15) + 1060439283)|0;
  $17 = (HEAP32[tempDoublePtr>>2]=$16,+HEAPF32[tempDoublePtr>>2]);
  $18 = $17 + -1.0;
  $19 = $18 + 2.0;
  $20 = $18 / $19;
  $21 = $20 * $20;
  $22 = $21 * $21;
  $23 = $22 * 0.24279078841209412;
  $24 = $23 + 0.40000972151756287;
  $25 = $22 * $24;
  $26 = $22 * 0.28498786687850952;
  $27 = $26 + 0.66666662693023682;
  $28 = $21 * $27;
  $29 = $28 + $25;
  $30 = $18 * 0.5;
  $31 = $18 * $30;
  $32 = $18 - $31;
  $33 = (HEAPF32[tempDoublePtr>>2]=$32,HEAP32[tempDoublePtr>>2]|0);
  $34 = $33 & -4096;
  $35 = (HEAP32[tempDoublePtr>>2]=$34,+HEAPF32[tempDoublePtr>>2]);
  $36 = $18 - $35;
  $37 = $36 - $31;
  $38 = $31 + $29;
  $39 = $20 * $38;
  $40 = $39 + $37;
  $41 = (+($14|0));
  $42 = $41 * 7.9034151667656261E-7;
  $43 = $35 + $40;
  $44 = $43 * 3.1689971365267411E-5;
  $45 = $42 - $44;
  $46 = $40 * 0.434326171875;
  $47 = $46 + $45;
  $48 = $35 * 0.434326171875;
  $49 = $48 + $47;
  $50 = $41 * 0.30102920532226563;
  $51 = $50 + $49;
  $$0 = $51;
 }
 return (+$$0);
}
function _log10l($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_log10($x));
 return (+$0);
}
function _log1p($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0;
 var $c$1 = 0.0, $c$2 = 0.0, $f$1 = 0.0, $k$1 = 0.0, $or$cond = 0, $phitmp = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = ($1>>>0)<(1071284858);
 $3 = ($1|0)<(0);
 $or$cond = $3 | $2;
 do {
  if ($or$cond) {
   $4 = ($1>>>0)>(3220176895);
   if ($4) {
    $5 = $x == -1.0;
    if ($5) {
     $$0 = -inf;
     break;
    }
    $6 = $x - $x;
    $7 = $6 / 0.0;
    $$0 = $7;
    break;
   } else {
    $8 = (_bitshift64Shl(($1|0),0,1)|0);
    $9 = tempRet0;
    $10 = ($8>>>0)<(2034237440);
    if ($10) {
     $$0 = $x;
     break;
    }
    $11 = ($1>>>0)<(3218259653);
    if ($11) {
     $c$2 = 0.0;$f$1 = $x;$k$1 = 0.0;
     label = 11;
     break;
    } else {
     label = 8;
     break;
    }
   }
  } else {
   $12 = ($1>>>0)>(2146435071);
   if ($12) {
    $$0 = $x;
   } else {
    label = 8;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $13 = $x + 1.0;
  HEAPF64[tempDoublePtr>>3] = $13;$14 = HEAP32[tempDoublePtr>>2]|0;
  $15 = HEAP32[tempDoublePtr+4>>2]|0;
  $16 = (($15) + 614242)|0;
  $17 = $16 >>> 20;
  $18 = (($17) + -1023)|0;
  $19 = ($18|0)<(54);
  if ($19) {
   $20 = ($18|0)>(1);
   $21 = $13 - $x;
   $22 = 1.0 - $21;
   $23 = $13 + -1.0;
   $24 = $x - $23;
   $25 = $20 ? $22 : $24;
   $26 = $25 / $13;
   $c$1 = $26;
  } else {
   $c$1 = 0.0;
  }
  $27 = $16 & 1048575;
  $28 = (($27) + 1072079006)|0;
  HEAP32[tempDoublePtr>>2] = $14;HEAP32[tempDoublePtr+4>>2] = $28;$29 = +HEAPF64[tempDoublePtr>>3];
  $30 = $29 + -1.0;
  $phitmp = (+($18|0));
  $c$2 = $c$1;$f$1 = $30;$k$1 = $phitmp;
  label = 11;
 }
 if ((label|0) == 11) {
  $31 = $f$1 * 0.5;
  $32 = $f$1 * $31;
  $33 = $f$1 + 2.0;
  $34 = $f$1 / $33;
  $35 = $34 * $34;
  $36 = $35 * $35;
  $37 = $36 * 0.15313837699209373;
  $38 = $37 + 0.22222198432149784;
  $39 = $36 * $38;
  $40 = $39 + 0.39999999999409419;
  $41 = $36 * $40;
  $42 = $36 * 0.14798198605116586;
  $43 = $42 + 0.1818357216161805;
  $44 = $36 * $43;
  $45 = $44 + 0.28571428743662391;
  $46 = $36 * $45;
  $47 = $46 + 0.66666666666667351;
  $48 = $35 * $47;
  $49 = $41 + $48;
  $50 = $32 + $49;
  $51 = $34 * $50;
  $52 = $k$1 * 1.9082149292705877E-10;
  $53 = $c$2 + $52;
  $54 = $53 + $51;
  $55 = $54 - $32;
  $56 = $f$1 + $55;
  $57 = $k$1 * 0.69314718036912382;
  $58 = $57 + $56;
  $$0 = $58;
 }
 return (+$$0);
}
function _log1pf($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $c$1 = 0.0, $c$2 = 0.0, $f$1 = 0.0, $k$1 = 0.0, $or$cond = 0, $phitmp = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = ($0>>>0)<(1054086096);
 $2 = ($0|0)<(0);
 $or$cond = $1 | $2;
 do {
  if ($or$cond) {
   $3 = ($0>>>0)>(3212836863);
   if ($3) {
    $4 = $x == -1.0;
    if ($4) {
     $$0 = -inf;
     break;
    }
    $5 = $x - $x;
    $6 = $5 / 0.0;
    $$0 = $6;
    break;
   } else {
    $7 = $0 << 1;
    $8 = ($7>>>0)<(1728053248);
    if ($8) {
     $$0 = $x;
     break;
    }
    $9 = ($0>>>0)<(3197498906);
    if ($9) {
     $c$2 = 0.0;$f$1 = $x;$k$1 = 0.0;
     label = 11;
     break;
    } else {
     label = 8;
     break;
    }
   }
  } else {
   $10 = ($0>>>0)>(2139095039);
   if ($10) {
    $$0 = $x;
   } else {
    label = 8;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $11 = $x + 1.0;
  $12 = (HEAPF32[tempDoublePtr>>2]=$11,HEAP32[tempDoublePtr>>2]|0);
  $13 = (($12) + 4913933)|0;
  $14 = $13 >>> 23;
  $15 = (($14) + -127)|0;
  $16 = ($15|0)<(25);
  if ($16) {
   $17 = ($15|0)>(1);
   $18 = $11 - $x;
   $19 = 1.0 - $18;
   $20 = $11 + -1.0;
   $21 = $x - $20;
   $22 = $17 ? $19 : $21;
   $23 = $22 / $11;
   $c$1 = $23;
  } else {
   $c$1 = 0.0;
  }
  $24 = $13 & 8388607;
  $25 = (($24) + 1060439283)|0;
  $26 = (HEAP32[tempDoublePtr>>2]=$25,+HEAPF32[tempDoublePtr>>2]);
  $27 = $26 + -1.0;
  $phitmp = (+($15|0));
  $c$2 = $c$1;$f$1 = $27;$k$1 = $phitmp;
  label = 11;
 }
 if ((label|0) == 11) {
  $28 = $f$1 + 2.0;
  $29 = $f$1 / $28;
  $30 = $29 * $29;
  $31 = $30 * $30;
  $32 = $31 * 0.24279078841209412;
  $33 = $32 + 0.40000972151756287;
  $34 = $31 * $33;
  $35 = $31 * 0.28498786687850952;
  $36 = $35 + 0.66666662693023682;
  $37 = $30 * $36;
  $38 = $37 + $34;
  $39 = $f$1 * 0.5;
  $40 = $f$1 * $39;
  $41 = $40 + $38;
  $42 = $29 * $41;
  $43 = $k$1 * 9.0580006144591607E-6;
  $44 = $c$2 + $43;
  $45 = $44 + $42;
  $46 = $45 - $40;
  $47 = $f$1 + $46;
  $48 = $k$1 * 0.69313812255859375;
  $49 = $48 + $47;
  $$0 = $49;
 }
 return (+$$0);
}
function _log1pl($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_log1p($x));
 return (+$0);
}
function _log2($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $hx$0 = 0, $k$0 = 0, $or$cond = 0, $or$cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = ($1>>>0)<(1048576);
 $3 = ($1|0)<(0);
 $or$cond = $3 | $2;
 do {
  if ($or$cond) {
   $4 = $1 & 2147483647;
   $5 = ($0|0)==(0);
   $6 = ($4|0)==(0);
   $7 = $5 & $6;
   if ($7) {
    $8 = $x * $x;
    $9 = -1.0 / $8;
    $$0 = $9;
    break;
   }
   if ($3) {
    $10 = $x - $x;
    $11 = $10 / 0.0;
    $$0 = $11;
    break;
   } else {
    $12 = $x * 18014398509481984.0;
    HEAPF64[tempDoublePtr>>3] = $12;$13 = HEAP32[tempDoublePtr>>2]|0;
    $14 = HEAP32[tempDoublePtr+4>>2]|0;
    $26 = $13;$67 = $14;$hx$0 = $14;$k$0 = -1077;
    label = 9;
    break;
   }
  } else {
   $15 = ($1>>>0)>(2146435071);
   if ($15) {
    $$0 = $x;
   } else {
    $16 = ($1|0)==(1072693248);
    $17 = ($0|0)==(0);
    $18 = (0)==(0);
    $19 = $17 & $18;
    $or$cond4 = $19 & $16;
    if ($or$cond4) {
     $$0 = 0.0;
    } else {
     $26 = $0;$67 = $1;$hx$0 = $1;$k$0 = -1023;
     label = 9;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $20 = (($hx$0) + 614242)|0;
  $21 = $20 >>> 20;
  $22 = (($k$0) + ($21))|0;
  $23 = $20 & 1048575;
  $24 = (($23) + 1072079006)|0;
  HEAP32[tempDoublePtr>>2] = $26;HEAP32[tempDoublePtr+4>>2] = $24;$25 = +HEAPF64[tempDoublePtr>>3];
  $27 = $25 + -1.0;
  $28 = $27 * 0.5;
  $29 = $27 * $28;
  $30 = $27 + 2.0;
  $31 = $27 / $30;
  $32 = $31 * $31;
  $33 = $32 * $32;
  $34 = $33 * 0.15313837699209373;
  $35 = $34 + 0.22222198432149784;
  $36 = $33 * $35;
  $37 = $36 + 0.39999999999409419;
  $38 = $33 * $37;
  $39 = $33 * 0.14798198605116586;
  $40 = $39 + 0.1818357216161805;
  $41 = $33 * $40;
  $42 = $41 + 0.28571428743662391;
  $43 = $33 * $42;
  $44 = $43 + 0.66666666666667351;
  $45 = $32 * $44;
  $46 = $38 + $45;
  $47 = $27 - $29;
  HEAPF64[tempDoublePtr>>3] = $47;$48 = HEAP32[tempDoublePtr>>2]|0;
  $49 = HEAP32[tempDoublePtr+4>>2]|0;
  HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $49;$50 = +HEAPF64[tempDoublePtr>>3];
  $51 = $27 - $50;
  $52 = $51 - $29;
  $53 = $29 + $46;
  $54 = $31 * $53;
  $55 = $54 + $52;
  $56 = $50 * 1.4426950407214463;
  $57 = $50 + $55;
  $58 = $57 * 1.6751713164886512E-10;
  $59 = $55 * 1.4426950407214463;
  $60 = $59 + $58;
  $61 = (+($22|0));
  $62 = $61 + $56;
  $63 = $61 - $62;
  $64 = $56 + $63;
  $65 = $64 + $60;
  $66 = $62 + $65;
  $$0 = $66;
 }
 return (+$$0);
}
function _log2f($x) {
 $x = +$x;
 var $$0 = 0.0, $$mask = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $ix$0 = 0, $k$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = ($0>>>0)<(8388608);
 $2 = ($0|0)<(0);
 $or$cond = $1 | $2;
 do {
  if ($or$cond) {
   $$mask = $0 & 2147483647;
   $3 = ($$mask|0)==(0);
   if ($3) {
    $4 = $x * $x;
    $5 = -1.0 / $4;
    $$0 = $5;
    break;
   }
   if ($2) {
    $6 = $x - $x;
    $7 = $6 / 0.0;
    $$0 = $7;
    break;
   } else {
    $8 = $x * 33554432.0;
    $9 = (HEAPF32[tempDoublePtr>>2]=$8,HEAP32[tempDoublePtr>>2]|0);
    $ix$0 = $9;$k$0 = -152;
    label = 9;
    break;
   }
  } else {
   $10 = ($0>>>0)>(2139095039);
   if ($10) {
    $$0 = $x;
   } else {
    $11 = ($0|0)==(1065353216);
    if ($11) {
     $$0 = 0.0;
    } else {
     $ix$0 = $0;$k$0 = -127;
     label = 9;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $12 = (($ix$0) + 4913933)|0;
  $13 = $12 >>> 23;
  $14 = (($k$0) + ($13))|0;
  $15 = $12 & 8388607;
  $16 = (($15) + 1060439283)|0;
  $17 = (HEAP32[tempDoublePtr>>2]=$16,+HEAPF32[tempDoublePtr>>2]);
  $18 = $17 + -1.0;
  $19 = $18 + 2.0;
  $20 = $18 / $19;
  $21 = $20 * $20;
  $22 = $21 * $21;
  $23 = $22 * 0.24279078841209412;
  $24 = $23 + 0.40000972151756287;
  $25 = $22 * $24;
  $26 = $22 * 0.28498786687850952;
  $27 = $26 + 0.66666662693023682;
  $28 = $21 * $27;
  $29 = $28 + $25;
  $30 = $18 * 0.5;
  $31 = $18 * $30;
  $32 = $18 - $31;
  $33 = (HEAPF32[tempDoublePtr>>2]=$32,HEAP32[tempDoublePtr>>2]|0);
  $34 = $33 & -4096;
  $35 = (HEAP32[tempDoublePtr>>2]=$34,+HEAPF32[tempDoublePtr>>2]);
  $36 = $18 - $35;
  $37 = $36 - $31;
  $38 = $31 + $29;
  $39 = $20 * $38;
  $40 = $39 + $37;
  $41 = $35 + $40;
  $42 = $41 * 1.7605285393074155E-4;
  $43 = $40 * 1.44287109375;
  $44 = $43 - $42;
  $45 = $35 * 1.44287109375;
  $46 = $45 + $44;
  $47 = (+($14|0));
  $48 = $47 + $46;
  $$0 = $48;
 }
 return (+$$0);
}
function _log2l($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_log2($x));
 return (+$0);
}
function _logb($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2146435072;
 $3 = ($2>>>0)<(2146435072);
 $4 = (0)<(0);
 $5 = ($2|0)==(2146435072);
 $6 = $5 & $4;
 $7 = $3 | $6;
 do {
  if ($7) {
   $9 = $x == 0.0;
   if ($9) {
    $10 = $x * $x;
    $11 = -1.0 / $10;
    $$0 = $11;
    break;
   } else {
    $12 = (_ilogb($x)|0);
    $13 = (+($12|0));
    $$0 = $13;
    break;
   }
  } else {
   $8 = $x * $x;
   $$0 = $8;
  }
 } while(0);
 return (+$$0);
}
function _logbf($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2139095040;
 $2 = ($1>>>0)<(2139095040);
 do {
  if ($2) {
   $4 = $x == 0.0;
   if ($4) {
    $5 = $x * $x;
    $6 = -1.0 / $5;
    $$0 = $6;
    break;
   } else {
    $7 = (_ilogbf($x)|0);
    $8 = (+($7|0));
    $$0 = $8;
    break;
   }
  } else {
   $3 = $x * $x;
   $$0 = $3;
  }
 } while(0);
 return (+$$0);
}
function _logbl($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2146435072;
 $3 = ($2>>>0)<(2146435072);
 $4 = (0)<(0);
 $5 = ($2|0)==(2146435072);
 $6 = $5 & $4;
 $7 = $3 | $6;
 do {
  if ($7) {
   $9 = $x == 0.0;
   if ($9) {
    $10 = $x * $x;
    $11 = -1.0 / $10;
    $$0 = $11;
    break;
   } else {
    $12 = (_ilogbl($x)|0);
    $13 = (+($12|0));
    $$0 = $13;
    break;
   }
  } else {
   $8 = $x * $x;
   $$0 = $8;
  }
 } while(0);
 return (+$$0);
}
function _lrint($x) {
 $x = +$x;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fetestexcept(32)|0);
 $1 = (+_rint($x));
 $2 = ($0|0)==(0);
 if ($2) {
  $3 = $1 > 2147483647.0;
  $4 = $1 < -2147483648.0;
  $or$cond = $3 | $4;
  if ($or$cond) {
  }
 }
 $5 = (~~(($1)));
 return ($5|0);
}
function _lrintf($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_rintf($x));
 $1 = (~~(($0)));
 return ($1|0);
}
function _lrintl($x) {
 $x = +$x;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lrint($x)|0);
 return ($0|0);
}
function _lround($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_round($x));
 $1 = (~~(($0)));
 return ($1|0);
}
function _lroundf($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_roundf($x));
 $1 = (~~(($0)));
 return ($1|0);
}
function _lroundl($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_roundl($x));
 $1 = (~~(($0)));
 return ($1|0);
}
function _modf($x,$iptr) {
 $x = +$x;
 $iptr = $iptr|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 $5 = (($4) + -1023)|0;
 $6 = ($5|0)>(51);
 do {
  if ($6) {
   HEAPF64[$iptr>>3] = $x;
   $7 = ($5|0)!=(1024);
   $8 = $1 & 1048575;
   $9 = ($0|0)==(0);
   $10 = ($8|0)==(0);
   $11 = $9 & $10;
   $or$cond = $11 | $7;
   if ($or$cond) {
    $12 = $1 & -2147483648;
    HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $13;
   } else {
    $$0 = $x;
   }
  } else {
   $14 = ($4>>>0)<(1023);
   if ($14) {
    $15 = $1 & -2147483648;
    $16 = $iptr;
    $17 = $16;
    HEAP32[$17>>2] = 0;
    $18 = (($16) + 4)|0;
    $19 = $18;
    HEAP32[$19>>2] = $15;
    $$0 = $x;
    break;
   }
   $20 = (_bitshift64Lshr(-1,1048575,($5|0))|0);
   $21 = tempRet0;
   $22 = $20 & $0;
   $23 = $21 & $1;
   $24 = ($22|0)==(0);
   $25 = ($23|0)==(0);
   $26 = $24 & $25;
   if ($26) {
    HEAPF64[$iptr>>3] = $x;
    $27 = $1 & -2147483648;
    HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $27;$28 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $28;
    break;
   } else {
    $29 = $20 ^ -1;
    $30 = $21 ^ -1;
    $31 = $0 & $29;
    $32 = $1 & $30;
    HEAP32[tempDoublePtr>>2] = $31;HEAP32[tempDoublePtr+4>>2] = $32;$33 = +HEAPF64[tempDoublePtr>>3];
    $34 = $iptr;
    $35 = $34;
    HEAP32[$35>>2] = $31;
    $36 = (($34) + 4)|0;
    $37 = $36;
    HEAP32[$37>>2] = $32;
    $38 = $x - $33;
    $$0 = $38;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _modff($x,$iptr) {
 $x = +$x;
 $iptr = $iptr|0;
 var $$0 = 0.0, $$mask = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 >>> 23;
 $2 = $1 & 255;
 $3 = (($2) + -127)|0;
 $4 = ($3|0)>(22);
 do {
  if ($4) {
   HEAPF32[$iptr>>2] = $x;
   $5 = ($3|0)!=(128);
   $$mask = $0 & 8388607;
   $6 = ($$mask|0)==(0);
   $or$cond = $6 | $5;
   if ($or$cond) {
    $7 = $0 & -2147483648;
    $8 = (HEAP32[tempDoublePtr>>2]=$7,+HEAPF32[tempDoublePtr>>2]);
    $$0 = $8;
   } else {
    $$0 = $x;
   }
  } else {
   $9 = ($2>>>0)<(127);
   if ($9) {
    $10 = $0 & -2147483648;
    HEAP32[$iptr>>2] = $10;
    $$0 = $x;
    break;
   }
   $11 = 8388607 >>> $3;
   $12 = $11 & $0;
   $13 = ($12|0)==(0);
   if ($13) {
    HEAPF32[$iptr>>2] = $x;
    $14 = $0 & -2147483648;
    $15 = (HEAP32[tempDoublePtr>>2]=$14,+HEAPF32[tempDoublePtr>>2]);
    $$0 = $15;
    break;
   } else {
    $16 = $11 ^ -1;
    $17 = $0 & $16;
    $18 = (HEAP32[tempDoublePtr>>2]=$17,+HEAPF32[tempDoublePtr>>2]);
    HEAP32[$iptr>>2] = $17;
    $19 = $x - $18;
    $$0 = $19;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _modfl($x,$iptr) {
 $x = +$x;
 $iptr = $iptr|0;
 var $0 = 0.0, $1 = 0.0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $d = sp;
 $0 = (+_modf($x,$d));
 $1 = +HEAPF64[$d>>3];
 HEAPF64[$iptr>>3] = $1;
 STACKTOP = sp;return (+$0);
}
function _nan($s) {
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +nan;
}
function _nanf($s) {
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +nan;
}
function _nanl($s) {
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +nan;
}
function _nearbyint($x) {
 $x = +$x;
 var $0 = 0, $1 = 0.0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fetestexcept(32)|0);
 $1 = (+_rint($x));
 $2 = ($0|0)==(0);
 if ($2) {
 }
 return (+$1);
}
function _nearbyintf($x) {
 $x = +$x;
 var $0 = 0, $1 = 0.0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fetestexcept(32)|0);
 $1 = (+_rintf($x));
 $2 = ($0|0)==(0);
 if ($2) {
 }
 return (+$1);
}
function _nearbyintl($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_nearbyint($x));
 return (+$0);
}
function _nextafter($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = ($4>>>0)>(2146435072);
 $6 = ($0>>>0)>(0);
 $7 = ($4|0)==(2146435072);
 $8 = $7 & $6;
 $9 = $5 | $8;
 L1: do {
  if ($9) {
   label = 3;
  } else {
   $10 = $3 & 2147483647;
   $11 = ($10>>>0)>(2146435072);
   $12 = ($2>>>0)>(0);
   $13 = ($10|0)==(2146435072);
   $14 = $13 & $12;
   $15 = $11 | $14;
   if ($15) {
    label = 3;
   } else {
    $17 = ($0|0)==($2|0);
    $18 = ($1|0)==($3|0);
    $19 = $17 & $18;
    if ($19) {
     $$0 = $y;
    } else {
     $20 = ($0|0)==(0);
     $21 = ($4|0)==(0);
     $22 = $20 & $21;
     do {
      if ($22) {
       $23 = ($2|0)==(0);
       $24 = ($10|0)==(0);
       $25 = $23 & $24;
       if ($25) {
        $$0 = $y;
        break L1;
       }
       $26 = $3 & -2147483648;
       $39 = $26;$40 = 1;
      } else {
       $27 = ($4>>>0)>($10>>>0);
       $28 = ($0>>>0)>($2>>>0);
       $29 = ($4|0)==($10|0);
       $30 = $29 & $28;
       $31 = $27 | $30;
       $2 ^ $0;
       $32 = $3 ^ $1;
       $33 = ($32|0)<(0);
       $or$cond = $31 | $33;
       if ($or$cond) {
        $34 = (_i64Add(($0|0),($1|0),-1,-1)|0);
        $35 = tempRet0;
        $39 = $35;$40 = $34;
        break;
       } else {
        $36 = (_i64Add(($0|0),($1|0),1,0)|0);
        $37 = tempRet0;
        $39 = $37;$40 = $36;
        break;
       }
      }
     } while(0);
     HEAP32[tempDoublePtr>>2] = $40;HEAP32[tempDoublePtr+4>>2] = $39;$38 = +HEAPF64[tempDoublePtr>>3];
     $$0 = $38;
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $16 = $x + $y;
  $$0 = $16;
 }
 return (+$$0);
}
function _nextafterf($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $ux$sroa$0$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = (HEAPF32[tempDoublePtr>>2]=$y,HEAP32[tempDoublePtr>>2]|0);
 $2 = $0 & 2147483647;
 $3 = ($2>>>0)>(2139095040);
 L1: do {
  if ($3) {
   label = 3;
  } else {
   $4 = $1 & 2147483647;
   $5 = ($4>>>0)>(2139095040);
   if ($5) {
    label = 3;
   } else {
    $7 = ($0|0)==($1|0);
    if ($7) {
     $$0 = $y;
    } else {
     $8 = ($2|0)==(0);
     do {
      if ($8) {
       $9 = ($4|0)==(0);
       if ($9) {
        $$0 = $y;
        break L1;
       }
       $10 = $1 & -2147483648;
       $11 = $10 | 1;
       $ux$sroa$0$0 = $11;
      } else {
       $12 = ($2>>>0)>($4>>>0);
       $13 = $1 ^ $0;
       $14 = ($13|0)<(0);
       $or$cond = $12 | $14;
       if ($or$cond) {
        $15 = (($0) + -1)|0;
        $ux$sroa$0$0 = $15;
        break;
       } else {
        $16 = (($0) + 1)|0;
        $ux$sroa$0$0 = $16;
        break;
       }
      }
     } while(0);
     $17 = (HEAP32[tempDoublePtr>>2]=$ux$sroa$0$0,+HEAPF32[tempDoublePtr>>2]);
     $$0 = $17;
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $6 = $x + $y;
  $$0 = $6;
 }
 return (+$$0);
}
function _nextafterl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_nextafter($x,$y));
 return (+$0);
}
function _nexttoward($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_nextafter($x,$y));
 return (+$0);
}
function _nexttowardf($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$ = 0, $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ux$sroa$0$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2147483647;
 $2 = ($1>>>0)>(2139095040);
 do {
  if ($2) {
   label = 3;
  } else {
   HEAPF64[tempDoublePtr>>3] = $y;$3 = HEAP32[tempDoublePtr>>2]|0;
   $4 = HEAP32[tempDoublePtr+4>>2]|0;
   $5 = $4 & 2147483647;
   $6 = ($5>>>0)>(2146435072);
   $7 = ($3>>>0)>(0);
   $8 = ($5|0)==(2146435072);
   $9 = $8 & $7;
   $10 = $6 | $9;
   if ($10) {
    label = 3;
   } else {
    $14 = $x;
    $15 = $14 == $y;
    if ($15) {
     $16 = $y;
     $$0 = $16;
     break;
    }
    $17 = $x == 0.0;
    do {
     if ($17) {
      $18 = ($4|0)<(0);
      $$ = $18 ? -2147483647 : 1;
      $ux$sroa$0$0 = $$;
     } else {
      $19 = $14 < $y;
      $20 = ($0|0)<(0);
      if ($19) {
       if ($20) {
        $21 = (($0) + -1)|0;
        $ux$sroa$0$0 = $21;
        break;
       } else {
        $22 = (($0) + 1)|0;
        $ux$sroa$0$0 = $22;
        break;
       }
      } else {
       if ($20) {
        $23 = (($0) + 1)|0;
        $ux$sroa$0$0 = $23;
        break;
       } else {
        $24 = (($0) + -1)|0;
        $ux$sroa$0$0 = $24;
        break;
       }
      }
     }
    } while(0);
    $25 = (HEAP32[tempDoublePtr>>2]=$ux$sroa$0$0,+HEAPF32[tempDoublePtr>>2]);
    $$0 = $25;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $11 = $x;
  $12 = $11 + $y;
  $13 = $12;
  $$0 = $13;
 }
 return (+$$0);
}
function _nexttowardl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_nextafterl($x,$y));
 return (+$0);
}
function _remainder($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, $q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $q = sp;
 $0 = (+_remquo($x,$y,$q));
 STACKTOP = sp;return (+$0);
}
function _remainderf($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, $q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $q = sp;
 $0 = (+_remquof($x,$y,$q));
 STACKTOP = sp;return (+$0);
}
function _remainderl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_remainder($x,$y));
 return (+$0);
}
function _remquo($x,$y,$quo) {
 $x = +$x;
 $y = +$y;
 $quo = $quo|0;
 var $$0 = 0.0, $$02 = 0.0, $$q$0 = 0, $$q$0$lcssa = 0, $$q$024 = 0, $$q$027 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $ex$0$lcssa = 0, $ex$039 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$226 = 0, $ex$320 = 0, $ex$4 = 0, $ex$414 = 0, $ex$415 = 0, $ey$0$lcssa = 0, $ey$033 = 0, $ey$1 = 0, $or$cond = 0, $or$cond13 = 0, $q$0 = 0, $q$3 = 0, $q$316 = 0, $q$317 = 0, $q$4 = 0;
 var $y$ = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
 $11 = tempRet0;
 $12 = (_bitshift64Lshr(($2|0),($3|0),63)|0);
 $13 = tempRet0;
 HEAP32[$quo>>2] = 0;
 $14 = $3 & 2147483647;
 $15 = ($2|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 do {
  if ($17) {
   label = 3;
  } else {
   $18 = ($14>>>0)>(2146435072);
   $19 = ($2>>>0)>(0);
   $20 = ($14|0)==(2146435072);
   $21 = $20 & $19;
   $22 = $18 | $21;
   $23 = ($6|0)==(2047);
   $or$cond = $22 | $23;
   if ($or$cond) {
    label = 3;
   } else {
    $26 = $1 & 2147483647;
    $27 = ($0|0)==(0);
    $28 = ($26|0)==(0);
    $29 = $27 & $28;
    if ($29) {
     $$0 = $x;
    } else {
     $30 = ($6|0)==(0);
     if ($30) {
      $31 = (_bitshift64Shl(($0|0),($1|0),12)|0);
      $32 = tempRet0;
      $33 = ($32|0)>(-1);
      $34 = ($31>>>0)>(4294967295);
      $35 = ($32|0)==(-1);
      $36 = $35 & $34;
      $37 = $33 | $36;
      if ($37) {
       $39 = $31;$40 = $32;$ex$039 = 0;
       while(1) {
        $38 = (($ex$039) + -1)|0;
        $41 = (_bitshift64Shl(($39|0),($40|0),1)|0);
        $42 = tempRet0;
        $43 = ($42|0)>(-1);
        $44 = ($41>>>0)>(4294967295);
        $45 = ($42|0)==(-1);
        $46 = $45 & $44;
        $47 = $43 | $46;
        if ($47) {
         $39 = $41;$40 = $42;$ex$039 = $38;
        } else {
         $ex$0$lcssa = $38;
         break;
        }
       }
      } else {
       $ex$0$lcssa = 0;
      }
      $48 = (1 - ($ex$0$lcssa))|0;
      $49 = (_bitshift64Shl(($0|0),($1|0),($48|0))|0);
      $50 = tempRet0;
      $78 = $49;$79 = $50;$ex$1 = $ex$0$lcssa;
     } else {
      $51 = $1 & 1048575;
      $52 = $51 | 1048576;
      $78 = $0;$79 = $52;$ex$1 = $6;
     }
     $53 = ($9|0)==(0);
     if ($53) {
      $54 = (_bitshift64Shl(($2|0),($3|0),12)|0);
      $55 = tempRet0;
      $56 = ($55|0)>(-1);
      $57 = ($54>>>0)>(4294967295);
      $58 = ($55|0)==(-1);
      $59 = $58 & $57;
      $60 = $56 | $59;
      if ($60) {
       $62 = $54;$63 = $55;$ey$033 = 0;
       while(1) {
        $61 = (($ey$033) + -1)|0;
        $64 = (_bitshift64Shl(($62|0),($63|0),1)|0);
        $65 = tempRet0;
        $66 = ($65|0)>(-1);
        $67 = ($64>>>0)>(4294967295);
        $68 = ($65|0)==(-1);
        $69 = $68 & $67;
        $70 = $66 | $69;
        if ($70) {
         $62 = $64;$63 = $65;$ey$033 = $61;
        } else {
         $ey$0$lcssa = $61;
         break;
        }
       }
      } else {
       $ey$0$lcssa = 0;
      }
      $71 = (1 - ($ey$0$lcssa))|0;
      $72 = (_bitshift64Shl(($2|0),($3|0),($71|0))|0);
      $73 = tempRet0;
      $80 = $72;$81 = $73;$ey$1 = $ey$0$lcssa;
     } else {
      $74 = $3 & 1048575;
      $75 = $74 | 1048576;
      $80 = $2;$81 = $75;$ey$1 = $9;
     }
     $76 = ($ex$1|0)<($ey$1|0);
     if ($76) {
      $93 = (($ex$1) + 1)|0;
      $94 = ($93|0)==($ey$1|0);
      if ($94) {
       $134 = $78;$135 = $79;$ex$4 = $ex$1;$q$3 = 0;
       label = 22;
      } else {
       $$0 = $x;
       break;
      }
     } else {
      $77 = ($ex$1|0)>($ey$1|0);
      $82 = (_i64Subtract(($78|0),($79|0),($80|0),($81|0))|0);
      $83 = tempRet0;
      $84 = ($83|0)>(-1);
      $85 = ($82>>>0)>(4294967295);
      $86 = ($83|0)==(-1);
      $87 = $86 & $85;
      $88 = $84 | $87;
      $89 = (_bitshift64Lshr(($82|0),($83|0),63)|0);
      $90 = tempRet0;
      $$q$024 = $89 ^ 1;
      $91 = $88 ? $82 : $78;
      $92 = $88 ? $83 : $79;
      if ($77) {
       $$q$027 = $$q$024;$95 = $91;$96 = $92;$ex$226 = $ex$1;
       while(1) {
        $97 = (_bitshift64Shl(($95|0),($96|0),1)|0);
        $98 = tempRet0;
        $99 = $$q$027 << 1;
        $100 = (($ex$226) + -1)|0;
        $101 = ($100|0)>($ey$1|0);
        $102 = (_i64Subtract(($97|0),($98|0),($80|0),($81|0))|0);
        $103 = tempRet0;
        $104 = ($103|0)>(-1);
        $105 = ($102>>>0)>(4294967295);
        $106 = ($103|0)==(-1);
        $107 = $106 & $105;
        $108 = $104 | $107;
        $109 = (_bitshift64Lshr(($102|0),($103|0),63)|0);
        $110 = tempRet0;
        $q$0 = $109 | $99;
        $$q$0 = $q$0 ^ 1;
        $111 = $108 ? $102 : $97;
        $112 = $108 ? $103 : $98;
        if ($101) {
         $$q$027 = $$q$0;$95 = $111;$96 = $112;$ex$226 = $100;
        } else {
         $$q$0$lcssa = $$q$0;$113 = $111;$115 = $112;$ex$2$lcssa = $ey$1;
         break;
        }
       }
      } else {
       $$q$0$lcssa = $$q$024;$113 = $91;$115 = $92;$ex$2$lcssa = $ex$1;
      }
      $114 = ($113|0)==(0);
      $116 = ($115|0)==(0);
      $117 = $114 & $116;
      if ($117) {
       $143 = 0;$144 = 0;$ex$415 = -60;$q$317 = $$q$0$lcssa;
       label = 24;
      } else {
       $118 = ($115>>>0)<(1048576);
       $119 = ($113>>>0)<(0);
       $120 = ($115|0)==(1048576);
       $121 = $120 & $119;
       $122 = $118 | $121;
       if ($122) {
        $123 = $113;$124 = $115;$ex$320 = $ex$2$lcssa;
        while(1) {
         $125 = (_bitshift64Shl(($123|0),($124|0),1)|0);
         $126 = tempRet0;
         $127 = (($ex$320) + -1)|0;
         $128 = ($126>>>0)<(1048576);
         $129 = ($125>>>0)<(0);
         $130 = ($126|0)==(1048576);
         $131 = $130 & $129;
         $132 = $128 | $131;
         if ($132) {
          $123 = $125;$124 = $126;$ex$320 = $127;
         } else {
          $134 = $125;$135 = $126;$ex$4 = $127;$q$3 = $$q$0$lcssa;
          label = 22;
          break;
         }
        }
       } else {
        $134 = $113;$135 = $115;$ex$4 = $ex$2$lcssa;$q$3 = $$q$0$lcssa;
        label = 22;
       }
      }
     }
     if ((label|0) == 22) {
      $133 = ($ex$4|0)>(0);
      if ($133) {
       $136 = (_i64Add(($134|0),($135|0),0,-1048576)|0);
       $137 = tempRet0;
       $138 = (_bitshift64Shl(($ex$4|0),0,52)|0);
       $139 = tempRet0;
       $140 = $136 | $138;
       $141 = $137 | $139;
       $148 = $141;$149 = $140;$ex$414 = $ex$4;$q$316 = $q$3;
      } else {
       $143 = $134;$144 = $135;$ex$415 = $ex$4;$q$317 = $q$3;
       label = 24;
      }
     }
     if ((label|0) == 24) {
      $142 = (1 - ($ex$415))|0;
      $145 = (_bitshift64Lshr(($143|0),($144|0),($142|0))|0);
      $146 = tempRet0;
      $148 = $146;$149 = $145;$ex$414 = $ex$415;$q$316 = $q$317;
     }
     HEAP32[tempDoublePtr>>2] = $149;HEAP32[tempDoublePtr+4>>2] = $148;$147 = +HEAPF64[tempDoublePtr>>3];
     $150 = ($12|0)==(0);
     $151 = ($13|0)==(0);
     $152 = $150 & $151;
     $153 = -$y;
     $y$ = $152 ? $y : $153;
     $154 = ($ex$414|0)==($ey$1|0);
     if ($154) {
      label = 29;
     } else {
      $155 = (($ex$414) + 1)|0;
      $156 = ($155|0)==($ey$1|0);
      if ($156) {
       $157 = $147 * 2.0;
       $158 = $157 > $y$;
       if ($158) {
        label = 29;
       } else {
        $159 = $157 != $y$;
        $160 = $q$316 & 1;
        $161 = ($160|0)==(0);
        $or$cond13 = $161 | $159;
        if ($or$cond13) {
         $$02 = $147;$q$4 = $q$316;
        } else {
         label = 29;
        }
       }
      } else {
       $$02 = $147;$q$4 = $q$316;
      }
     }
     if ((label|0) == 29) {
      $162 = $147 - $y$;
      $163 = (($q$316) + 1)|0;
      $$02 = $162;$q$4 = $163;
     }
     $164 = $q$4 & 2147483647;
     $165 = ($10|0)!=($12|0);
     $166 = ($11|0)!=($13|0);
     $167 = $165 | $166;
     $168 = (0 - ($164))|0;
     $169 = $167 ? $168 : $164;
     HEAP32[$quo>>2] = $169;
     $170 = ($10|0)!=(0);
     $171 = ($11|0)!=(0);
     $172 = $170 | $171;
     $173 = -$$02;
     $174 = $172 ? $173 : $$02;
     $$0 = $174;
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $24 = $x * $y;
  $25 = $24 / $24;
  $$0 = $25;
 }
 return (+$$0);
}
function _remquof($x,$y,$quo) {
 $x = +$x;
 $y = +$y;
 $quo = $quo|0;
 var $$0 = 0.0, $$02 = 0.0, $$lobit = 0, $$lobit22 = 0, $$mask = 0, $$mask4 = 0, $$q$0 = 0, $$q$0$lcssa = 0, $$q$023 = 0, $$q$026 = 0, $$uxi$1 = 0, $$uxi$1$lcssa = 0, $$uxi$124 = 0, $$uxi$127 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $8 = 0, $9 = 0, $ex$0$lcssa = 0, $ex$038 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$225 = 0, $ex$319 = 0, $ex$4 = 0, $ex$413 = 0, $ex$414 = 0;
 var $ey$0$lcssa = 0, $ey$032 = 0, $ey$1 = 0, $i$039 = 0, $i$133 = 0, $or$cond = 0, $or$cond12 = 0, $q$0 = 0, $q$3 = 0, $q$315 = 0, $q$316 = 0, $q$4 = 0, $uxi$0 = 0, $uxi$420 = 0, $uxi$5 = 0, $uxi$517 = 0, $uxi$6 = 0, $uy$sroa$0$0 = 0, $y$ = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = (HEAPF32[tempDoublePtr>>2]=$y,HEAP32[tempDoublePtr>>2]|0);
 $2 = $0 >>> 23;
 $3 = $2 & 255;
 $4 = $1 >>> 23;
 $5 = $4 & 255;
 $6 = $0 >>> 31;
 $7 = $1 >>> 31;
 HEAP32[$quo>>2] = 0;
 $$mask = $1 & 2147483647;
 $8 = ($$mask|0)==(0);
 do {
  if ($8) {
   label = 3;
  } else {
   $9 = ($$mask>>>0)>(2139095040);
   $10 = ($3|0)==(255);
   $or$cond = $9 | $10;
   if ($or$cond) {
    label = 3;
   } else {
    $$mask4 = $0 & 2147483647;
    $13 = ($$mask4|0)==(0);
    if ($13) {
     $$0 = $x;
    } else {
     $14 = ($3|0)==(0);
     if ($14) {
      $15 = $0 << 9;
      $16 = ($15|0)>(-1);
      if ($16) {
       $ex$038 = 0;$i$039 = $15;
       while(1) {
        $17 = (($ex$038) + -1)|0;
        $18 = $i$039 << 1;
        $19 = ($18|0)>(-1);
        if ($19) {
         $ex$038 = $17;$i$039 = $18;
        } else {
         $ex$0$lcssa = $17;
         break;
        }
       }
      } else {
       $ex$0$lcssa = 0;
      }
      $20 = (1 - ($ex$0$lcssa))|0;
      $21 = $0 << $20;
      $ex$1 = $ex$0$lcssa;$uxi$0 = $21;
     } else {
      $22 = $0 & 8388607;
      $23 = $22 | 8388608;
      $ex$1 = $3;$uxi$0 = $23;
     }
     $24 = ($5|0)==(0);
     if ($24) {
      $25 = $1 << 9;
      $26 = ($25|0)>(-1);
      if ($26) {
       $ey$032 = 0;$i$133 = $25;
       while(1) {
        $27 = (($ey$032) + -1)|0;
        $28 = $i$133 << 1;
        $29 = ($28|0)>(-1);
        if ($29) {
         $ey$032 = $27;$i$133 = $28;
        } else {
         $ey$0$lcssa = $27;
         break;
        }
       }
      } else {
       $ey$0$lcssa = 0;
      }
      $30 = (1 - ($ey$0$lcssa))|0;
      $31 = $1 << $30;
      $ey$1 = $ey$0$lcssa;$uy$sroa$0$0 = $31;
     } else {
      $32 = $1 & 8388607;
      $33 = $32 | 8388608;
      $ey$1 = $5;$uy$sroa$0$0 = $33;
     }
     $34 = ($ex$1|0)<($ey$1|0);
     if ($34) {
      $38 = (($ex$1) + 1)|0;
      $39 = ($38|0)==($ey$1|0);
      if ($39) {
       $ex$4 = $ex$1;$q$3 = 0;$uxi$5 = $uxi$0;
       label = 22;
      } else {
       $$0 = $x;
       break;
      }
     } else {
      $35 = ($ex$1|0)>($ey$1|0);
      $36 = (($uxi$0) - ($uy$sroa$0$0))|0;
      $37 = ($36|0)>(-1);
      $$lobit22 = $36 >>> 31;
      $$q$023 = $$lobit22 ^ 1;
      $$uxi$124 = $37 ? $36 : $uxi$0;
      if ($35) {
       $$q$026 = $$q$023;$$uxi$127 = $$uxi$124;$ex$225 = $ex$1;
       while(1) {
        $40 = $$uxi$127 << 1;
        $41 = $$q$026 << 1;
        $42 = (($ex$225) + -1)|0;
        $43 = ($42|0)>($ey$1|0);
        $44 = (($40) - ($uy$sroa$0$0))|0;
        $45 = ($44|0)>(-1);
        $$lobit = $44 >>> 31;
        $q$0 = $$lobit | $41;
        $$q$0 = $q$0 ^ 1;
        $$uxi$1 = $45 ? $44 : $40;
        if ($43) {
         $$q$026 = $$q$0;$$uxi$127 = $$uxi$1;$ex$225 = $42;
        } else {
         $$q$0$lcssa = $$q$0;$$uxi$1$lcssa = $$uxi$1;$ex$2$lcssa = $ey$1;
         break;
        }
       }
      } else {
       $$q$0$lcssa = $$q$023;$$uxi$1$lcssa = $$uxi$124;$ex$2$lcssa = $ex$1;
      }
      $46 = ($$uxi$1$lcssa|0)==(0);
      if ($46) {
       $ex$414 = -30;$q$316 = $$q$0$lcssa;$uxi$517 = 0;
       label = 24;
      } else {
       $47 = ($$uxi$1$lcssa>>>0)<(8388608);
       if ($47) {
        $ex$319 = $ex$2$lcssa;$uxi$420 = $$uxi$1$lcssa;
        while(1) {
         $48 = $uxi$420 << 1;
         $49 = (($ex$319) + -1)|0;
         $50 = ($48>>>0)<(8388608);
         if ($50) {
          $ex$319 = $49;$uxi$420 = $48;
         } else {
          $ex$4 = $49;$q$3 = $$q$0$lcssa;$uxi$5 = $48;
          label = 22;
          break;
         }
        }
       } else {
        $ex$4 = $ex$2$lcssa;$q$3 = $$q$0$lcssa;$uxi$5 = $$uxi$1$lcssa;
        label = 22;
       }
      }
     }
     if ((label|0) == 22) {
      $51 = ($ex$4|0)>(0);
      if ($51) {
       $52 = (($uxi$5) + -8388608)|0;
       $53 = $ex$4 << 23;
       $54 = $52 | $53;
       $ex$413 = $ex$4;$q$315 = $q$3;$uxi$6 = $54;
      } else {
       $ex$414 = $ex$4;$q$316 = $q$3;$uxi$517 = $uxi$5;
       label = 24;
      }
     }
     if ((label|0) == 24) {
      $55 = (1 - ($ex$414))|0;
      $56 = $uxi$517 >>> $55;
      $ex$413 = $ex$414;$q$315 = $q$316;$uxi$6 = $56;
     }
     $57 = (HEAP32[tempDoublePtr>>2]=$uxi$6,+HEAPF32[tempDoublePtr>>2]);
     $58 = ($7|0)==(0);
     $59 = -$y;
     $y$ = $58 ? $y : $59;
     $60 = ($ex$413|0)==($ey$1|0);
     if ($60) {
      label = 29;
     } else {
      $61 = (($ex$413) + 1)|0;
      $62 = ($61|0)==($ey$1|0);
      if ($62) {
       $63 = $57 * 2.0;
       $64 = $63 > $y$;
       if ($64) {
        label = 29;
       } else {
        $65 = $63 != $y$;
        $66 = $q$315 & 1;
        $67 = ($66|0)==(0);
        $or$cond12 = $67 | $65;
        if ($or$cond12) {
         $$02 = $57;$q$4 = $q$315;
        } else {
         label = 29;
        }
       }
      } else {
       $$02 = $57;$q$4 = $q$315;
      }
     }
     if ((label|0) == 29) {
      $68 = $57 - $y$;
      $69 = (($q$315) + 1)|0;
      $$02 = $68;$q$4 = $69;
     }
     $70 = $q$4 & 2147483647;
     $71 = ($6|0)!=($7|0);
     $72 = (0 - ($70))|0;
     $73 = $71 ? $72 : $70;
     HEAP32[$quo>>2] = $73;
     $74 = ($6|0)!=(0);
     $75 = -$$02;
     $76 = $74 ? $75 : $$02;
     $$0 = $76;
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $11 = $x * $y;
  $12 = $11 / $11;
  $$0 = $12;
 }
 return (+$$0);
}
function _remquol($x,$y,$quo) {
 $x = +$x;
 $y = +$y;
 $quo = $quo|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_remquo($x,$y,$quo));
 return (+$0);
}
function _rint($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2146435072;
 $3 = ($2>>>0)>(1126170624);
 $4 = (0)>(0);
 $5 = ($2|0)==(1126170624);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0 = $x;
 } else {
  $8 = ($1|0)<(0);
  $9 = $x + -4503599627370496.0;
  $10 = $9 + 4503599627370496.0;
  $11 = $x + 4503599627370496.0;
  $12 = $11 + -4503599627370496.0;
  $y$0 = $8 ? $10 : $12;
  $13 = $y$0 == 0.0;
  if ($13) {
   $14 = $8 ? -0.0 : 0.0;
   $$0 = $14;
  } else {
   $$0 = $y$0;
  }
 }
 return (+$$0);
}
function _rintf($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2130706432;
 $2 = ($1>>>0)>(1249902592);
 if ($2) {
  $$0 = $x;
 } else {
  $3 = ($0|0)<(0);
  $4 = $x + -8388608.0;
  $5 = $4 + 8388608.0;
  $6 = $x + 8388608.0;
  $7 = $6 + -8388608.0;
  $y$0 = $3 ? $5 : $7;
  $8 = $y$0 == 0.0;
  if ($8) {
   $9 = $3 ? -0.0 : 0.0;
   $$0 = $9;
  } else {
   $$0 = $y$0;
  }
 }
 return (+$$0);
}
function _rintl($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_rint($x));
 return (+$0);
}
function _round($x) {
 $x = +$x;
 var $$0 = 0.0, $$x = 0.0, $$y$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0.0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 $5 = ($4>>>0)>(1074);
 do {
  if ($5) {
   $$0 = $x;
  } else {
   $6 = ($1|0)<(0);
   $7 = -$x;
   $$x = $6 ? $7 : $x;
   $8 = ($4>>>0)<(1022);
   if ($8) {
    $9 = $x * 0.0;
    $$0 = $9;
    break;
   }
   $10 = $$x + 4503599627370496.0;
   $11 = $10 + -4503599627370496.0;
   $12 = $11 - $$x;
   $13 = $12 > 0.5;
   if ($13) {
    $14 = $$x + $12;
    $15 = $14 + -1.0;
    $y$0 = $15;
   } else {
    $16 = !($12 <= -0.5);
    $17 = $$x + $12;
    if ($16) {
     $y$0 = $17;
    } else {
     $18 = $17 + 1.0;
     $y$0 = $18;
    }
   }
   $19 = -$y$0;
   $$y$0 = $6 ? $19 : $y$0;
   $$0 = $$y$0;
  }
 } while(0);
 return (+$$0);
}
function _roundf($x) {
 $x = +$x;
 var $$0 = 0.0, $$x = 0.0, $$y$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0;
 var $9 = 0.0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 >>> 23;
 $2 = $1 & 255;
 $3 = ($2>>>0)>(149);
 do {
  if ($3) {
   $$0 = $x;
  } else {
   $4 = ($0|0)<(0);
   $5 = -$x;
   $$x = $4 ? $5 : $x;
   $6 = ($2>>>0)<(126);
   if ($6) {
    $7 = $x * 0.0;
    $$0 = $7;
    break;
   }
   $8 = $$x + 8388608.0;
   $9 = $8 + -8388608.0;
   $10 = $9 - $$x;
   $11 = $10 > 0.5;
   if ($11) {
    $12 = $$x + $10;
    $13 = $12 + -1.0;
    $y$0 = $13;
   } else {
    $14 = !($10 <= -0.5);
    $15 = $$x + $10;
    if ($14) {
     $y$0 = $15;
    } else {
     $16 = $15 + 1.0;
     $y$0 = $16;
    }
   }
   $17 = -$y$0;
   $$y$0 = $4 ? $17 : $y$0;
   $$0 = $$y$0;
  }
 } while(0);
 return (+$$0);
}
function _roundl($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_round($x));
 return (+$0);
}
function _scalb($x,$fn) {
 $x = +$x;
 $fn = +$fn;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 $3 = ($2>>>0)>(2146435072);
 $4 = ($0>>>0)>(0);
 $5 = ($2|0)==(2146435072);
 $6 = $5 & $4;
 $7 = $3 | $6;
 do {
  if ($7) {
   label = 3;
  } else {
   HEAPF64[tempDoublePtr>>3] = $fn;$8 = HEAP32[tempDoublePtr>>2]|0;
   $9 = HEAP32[tempDoublePtr+4>>2]|0;
   $10 = $9 & 2147483647;
   $11 = ($10>>>0)>(2146435072);
   $12 = ($8>>>0)>(0);
   $13 = ($10|0)==(2146435072);
   $14 = $13 & $12;
   $15 = $11 | $14;
   if ($15) {
    label = 3;
   } else {
    $17 = $9 & 2146435072;
    $18 = ($17>>>0)<(2146435072);
    $19 = (0)<(0);
    $20 = ($17|0)==(2146435072);
    $21 = $20 & $19;
    $22 = $18 | $21;
    if (!($22)) {
     $23 = $fn > 0.0;
     if ($23) {
      $24 = $x * $fn;
      $$0 = $24;
      break;
     } else {
      $25 = -$fn;
      $26 = $x / $25;
      $$0 = $26;
      break;
     }
    }
    $27 = (+_rint($fn));
    $28 = $27 != $fn;
    if ($28) {
     $29 = $fn - $fn;
     $30 = $29 / $29;
     $$0 = $30;
     break;
    }
    $31 = $fn > 65000.0;
    if ($31) {
     $32 = (+_scalbn($x,65000));
     $$0 = $32;
     break;
    }
    $33 = $fn < -65000.0;
    if ($33) {
     $34 = (+_scalbn($x,-65000));
     $$0 = $34;
     break;
    } else {
     $35 = (~~(($fn)));
     $36 = (+_scalbn($x,$35));
     $$0 = $36;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $16 = $x * $fn;
  $$0 = $16;
 }
 return (+$$0);
}
function _scalbf($x,$fn) {
 $x = +$x;
 $fn = +$fn;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2147483647;
 $2 = ($1>>>0)>(2139095040);
 do {
  if ($2) {
   label = 3;
  } else {
   $3 = (HEAPF32[tempDoublePtr>>2]=$fn,HEAP32[tempDoublePtr>>2]|0);
   $4 = $3 & 2147483647;
   $5 = ($4>>>0)>(2139095040);
   if ($5) {
    label = 3;
   } else {
    $7 = $3 & 2139095040;
    $8 = ($7>>>0)<(2139095040);
    if (!($8)) {
     $9 = $fn > 0.0;
     if ($9) {
      $10 = $x * $fn;
      $$0 = $10;
      break;
     } else {
      $11 = -$fn;
      $12 = $x / $11;
      $$0 = $12;
      break;
     }
    }
    $13 = (+_rintf($fn));
    $14 = $13 != $fn;
    if ($14) {
     $15 = $fn - $fn;
     $16 = $15 / $15;
     $$0 = $16;
     break;
    }
    $17 = $fn > 65000.0;
    if ($17) {
     $18 = (+_scalbnf($x,65000));
     $$0 = $18;
     break;
    }
    $19 = $fn < -65000.0;
    if ($19) {
     $20 = (+_scalbnf($x,-65000));
     $$0 = $20;
     break;
    } else {
     $21 = (~~(($fn)));
     $22 = (+_scalbnf($x,$21));
     $$0 = $22;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $6 = $x * $fn;
  $$0 = $6;
 }
 return (+$$0);
}
function _scalbln($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _scalblnf($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbnf($x,$n));
 return (+$0);
}
function _scalblnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbln($x,$n));
 return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnf($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0;
 var $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(127);
 if ($0) {
  $1 = $x * 1.7014118346046923E+38;
  $2 = (($n) + -127)|0;
  $3 = ($2|0)>(127);
  if ($3) {
   $4 = $1 * 1.7014118346046923E+38;
   $5 = (($n) + -254)|0;
   $6 = ($5|0)>(127);
   $$ = $6 ? 127 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-126);
  if ($7) {
   $8 = $x * 1.1754943508222875E-38;
   $9 = (($n) + 126)|0;
   $10 = ($9|0)<(-126);
   if ($10) {
    $11 = $8 * 1.1754943508222875E-38;
    $12 = (($n) + 252)|0;
    $13 = ($12|0)<(-126);
    $$1 = $13 ? -126 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = $$0 << 23;
 $15 = (($14) + 1065353216)|0;
 $16 = (HEAP32[tempDoublePtr>>2]=$15,+HEAPF32[tempDoublePtr>>2]);
 $17 = $y$0 * $16;
 return (+$17);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _significand($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ilogb($x)|0);
 $1 = (0 - ($0))|0;
 $2 = (+_scalbn($x,$1));
 return (+$2);
}
function _significandf($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ilogbf($x)|0);
 $1 = (0 - ($0))|0;
 $2 = (+_scalbnf($x,$1));
 return (+$2);
}
function _sincos($x,$sin,$cos) {
 $x = +$x;
 $sin = $sin|0;
 $cos = $cos|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $y = sp;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 $3 = ($2>>>0)<(1072243196);
 L1: do {
  if ($3) {
   $4 = ($2>>>0)<(1044816030);
   if ($4) {
    HEAPF64[$sin>>3] = $x;
    HEAPF64[$cos>>3] = 1.0;
    break;
   } else {
    $5 = (+___sin($x,0.0,0));
    HEAPF64[$sin>>3] = $5;
    $6 = (+___cos($x,0.0));
    HEAPF64[$cos>>3] = $6;
    break;
   }
  } else {
   $7 = ($2>>>0)>(2146435071);
   if ($7) {
    $8 = $x - $x;
    HEAPF64[$cos>>3] = $8;
    HEAPF64[$sin>>3] = $8;
    break;
   }
   $9 = (___rem_pio2($x,$y)|0);
   $10 = +HEAPF64[$y>>3];
   $11 = ((($y)) + 8|0);
   $12 = +HEAPF64[$11>>3];
   $13 = (+___sin($10,$12,1));
   $14 = +HEAPF64[$y>>3];
   $15 = +HEAPF64[$11>>3];
   $16 = (+___cos($14,$15));
   $17 = $9 & 3;
   switch ($17|0) {
   case 0:  {
    HEAPF64[$sin>>3] = $13;
    HEAPF64[$cos>>3] = $16;
    break L1;
    break;
   }
   case 1:  {
    HEAPF64[$sin>>3] = $16;
    $18 = -$13;
    HEAPF64[$cos>>3] = $18;
    break L1;
    break;
   }
   case 2:  {
    $19 = -$13;
    HEAPF64[$sin>>3] = $19;
    $20 = -$16;
    HEAPF64[$cos>>3] = $20;
    break L1;
    break;
   }
   default: {
    $21 = -$16;
    HEAPF64[$sin>>3] = $21;
    HEAPF64[$cos>>3] = $13;
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sincosf($x,$sin,$cos) {
 $x = +$x;
 $sin = $sin|0;
 $cos = $cos|0;
 var $$v = 0.0, $$v1 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $y = sp;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 >>> 31;
 $2 = $0 & 2147483647;
 $3 = ($2>>>0)<(1061752795);
 L1: do {
  if ($3) {
   $4 = ($2>>>0)<(964689920);
   if ($4) {
    HEAPF32[$sin>>2] = $x;
    HEAPF32[$cos>>2] = 1.0;
    break;
   } else {
    $5 = $x;
    $6 = (+___sindf($5));
    HEAPF32[$sin>>2] = $6;
    $7 = (+___cosdf($5));
    HEAPF32[$cos>>2] = $7;
    break;
   }
  } else {
   $8 = ($2>>>0)<(1081824210);
   if ($8) {
    $9 = ($2>>>0)<(1075235812);
    $10 = ($1|0)!=(0);
    $11 = $x;
    if (!($9)) {
     $$v1 = $10 ? 3.1415926535897931 : -3.1415926535897931;
     $19 = $11 + $$v1;
     $20 = (+___sindf($19));
     $21 = -$20;
     HEAPF32[$sin>>2] = $21;
     $22 = (+___cosdf($19));
     $23 = -$22;
     HEAPF32[$cos>>2] = $23;
     break;
    }
    if ($10) {
     $12 = $11 + 1.5707963267948966;
     $13 = (+___cosdf($12));
     $14 = -$13;
     HEAPF32[$sin>>2] = $14;
     $15 = (+___sindf($12));
     HEAPF32[$cos>>2] = $15;
     break;
    } else {
     $16 = 1.5707963267948966 - $11;
     $17 = (+___cosdf($16));
     HEAPF32[$sin>>2] = $17;
     $18 = (+___sindf($16));
     HEAPF32[$cos>>2] = $18;
     break;
    }
   }
   $24 = ($2>>>0)<(1088565718);
   if ($24) {
    $25 = ($2>>>0)<(1085271520);
    $26 = ($1|0)!=(0);
    $27 = $x;
    if (!($25)) {
     $$v = $26 ? 6.2831853071795862 : -6.2831853071795862;
     $36 = $27 + $$v;
     $37 = (+___sindf($36));
     HEAPF32[$sin>>2] = $37;
     $38 = (+___cosdf($36));
     HEAPF32[$cos>>2] = $38;
     break;
    }
    if ($26) {
     $28 = $27 + 4.7123889803846897;
     $29 = (+___cosdf($28));
     HEAPF32[$sin>>2] = $29;
     $30 = (+___sindf($28));
     $31 = -$30;
     HEAPF32[$cos>>2] = $31;
     break;
    } else {
     $32 = $27 + -4.7123889803846897;
     $33 = (+___cosdf($32));
     $34 = -$33;
     HEAPF32[$sin>>2] = $34;
     $35 = (+___sindf($32));
     HEAPF32[$cos>>2] = $35;
     break;
    }
   }
   $39 = ($2>>>0)>(2139095039);
   if ($39) {
    $40 = $x - $x;
    HEAPF32[$cos>>2] = $40;
    HEAPF32[$sin>>2] = $40;
    break;
   }
   $41 = (___rem_pio2f($x,$y)|0);
   $42 = +HEAPF64[$y>>3];
   $43 = (+___sindf($42));
   $44 = +HEAPF64[$y>>3];
   $45 = (+___cosdf($44));
   $46 = $41 & 3;
   switch ($46|0) {
   case 0:  {
    HEAPF32[$sin>>2] = $43;
    HEAPF32[$cos>>2] = $45;
    break L1;
    break;
   }
   case 1:  {
    HEAPF32[$sin>>2] = $45;
    $47 = -$43;
    HEAPF32[$cos>>2] = $47;
    break L1;
    break;
   }
   case 2:  {
    $48 = -$43;
    HEAPF32[$sin>>2] = $48;
    $49 = -$45;
    HEAPF32[$cos>>2] = $49;
    break L1;
    break;
   }
   default: {
    $50 = -$45;
    HEAPF32[$sin>>2] = $50;
    HEAPF32[$cos>>2] = $43;
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sincosl($x,$sin,$cos) {
 $x = +$x;
 $sin = $sin|0;
 $cos = $cos|0;
 var $0 = 0.0, $1 = 0.0, $cosd = 0, $sind = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sind = sp + 8|0;
 $cosd = sp;
 _sincos($x,$sind,$cosd);
 $0 = +HEAPF64[$sind>>3];
 HEAPF64[$sin>>3] = $0;
 $1 = +HEAPF64[$cosd>>3];
 HEAPF64[$cos>>3] = $1;
 STACKTOP = sp;return;
}
function _sinh($x) {
 $x = +$x;
 var $$ = 0.0, $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0.0, $5 = 0;
 var $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = ($1|0)<(0);
 $$ = $2 ? -0.5 : 0.5;
 $3 = $1 & 2147483647;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $3;$4 = +HEAPF64[tempDoublePtr>>3];
 $5 = ($3>>>0)<(1082535490);
 do {
  if ($5) {
   $6 = (+_expm1($4));
   $7 = ($3>>>0)<(1072693248);
   if (!($7)) {
    $15 = $6 + 1.0;
    $16 = $6 / $15;
    $17 = $6 + $16;
    $18 = $$ * $17;
    $$0 = $18;
    break;
   }
   $8 = ($3>>>0)<(1045430272);
   if ($8) {
    $$0 = $x;
   } else {
    $9 = $6 * 2.0;
    $10 = $6 * $6;
    $11 = $6 + 1.0;
    $12 = $10 / $11;
    $13 = $9 - $12;
    $14 = $$ * $13;
    $$0 = $14;
   }
  } else {
   $19 = $$ * 2.0;
   $20 = (+___expo2($4));
   $21 = $19 * $20;
   $$0 = $21;
  }
 } while(0);
 return (+$$0);
}
function _sinhf($x) {
 $x = +$x;
 var $$ = 0.0, $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = ($0|0)<(0);
 $$ = $1 ? -0.5 : 0.5;
 $2 = $0 & 2147483647;
 $3 = (HEAP32[tempDoublePtr>>2]=$2,+HEAPF32[tempDoublePtr>>2]);
 $4 = ($2>>>0)<(1118925335);
 do {
  if ($4) {
   $5 = (+_expm1f($3));
   $6 = ($2>>>0)<(1065353216);
   if (!($6)) {
    $14 = $5 + 1.0;
    $15 = $5 / $14;
    $16 = $5 + $15;
    $17 = $$ * $16;
    $$0 = $17;
    break;
   }
   $7 = ($2>>>0)<(964689920);
   if ($7) {
    $$0 = $x;
   } else {
    $8 = $5 * 2.0;
    $9 = $5 * $5;
    $10 = $5 + 1.0;
    $11 = $9 / $10;
    $12 = $8 - $11;
    $13 = $$ * $12;
    $$0 = $13;
   }
  } else {
   $18 = $$ * 2.0;
   $19 = (+___expo2f($3));
   $20 = $18 * $19;
   $$0 = $20;
  }
 } while(0);
 return (+$$0);
}
function _sinhl($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_sinh($x));
 return (+$0);
}
function _tanh($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $t$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $2;$3 = +HEAPF64[tempDoublePtr>>3];
 $4 = ($2>>>0)>(1071748074);
 do {
  if ($4) {
   $5 = ($2>>>0)>(1077149696);
   if ($5) {
    $6 = 0.0 / $3;
    $7 = 1.0 - $6;
    $t$0 = $7;
    break;
   } else {
    $8 = $3 * 2.0;
    $9 = (+_expm1($8));
    $10 = $9 + 2.0;
    $11 = 2.0 / $10;
    $12 = 1.0 - $11;
    $t$0 = $12;
    break;
   }
  } else {
   $13 = ($2>>>0)>(1070618798);
   if ($13) {
    $14 = $3 * 2.0;
    $15 = (+_expm1($14));
    $16 = $15 + 2.0;
    $17 = $15 / $16;
    $t$0 = $17;
    break;
   }
   $18 = ($2>>>0)>(1048575);
   if ($18) {
    $19 = $3 * -2.0;
    $20 = (+_expm1($19));
    $21 = -$20;
    $22 = $20 + 2.0;
    $23 = $21 / $22;
    $t$0 = $23;
   } else {
    $t$0 = $3;
   }
  }
 } while(0);
 $24 = ($1|0)<(0);
 $25 = -$t$0;
 $26 = $24 ? $25 : $t$0;
 return (+$26);
}
function _tanhf($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $3 = 0;
 var $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $t$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2147483647;
 $2 = (HEAP32[tempDoublePtr>>2]=$1,+HEAPF32[tempDoublePtr>>2]);
 $3 = ($1>>>0)>(1057791828);
 do {
  if ($3) {
   $4 = ($1>>>0)>(1092616192);
   if ($4) {
    $5 = 0.0 / $2;
    $6 = $5 + 1.0;
    $t$0 = $6;
    break;
   } else {
    $7 = $2 * 2.0;
    $8 = (+_expm1f($7));
    $9 = $8 + 2.0;
    $10 = 2.0 / $9;
    $11 = 1.0 - $10;
    $t$0 = $11;
    break;
   }
  } else {
   $12 = ($1>>>0)>(1048757624);
   if ($12) {
    $13 = $2 * 2.0;
    $14 = (+_expm1f($13));
    $15 = $14 + 2.0;
    $16 = $14 / $15;
    $t$0 = $16;
    break;
   }
   $17 = ($1>>>0)>(8388607);
   if ($17) {
    $18 = $2 * -2.0;
    $19 = (+_expm1f($18));
    $20 = -$19;
    $21 = $19 + 2.0;
    $22 = $20 / $21;
    $t$0 = $22;
   } else {
    $t$0 = $2;
   }
  }
 } while(0);
 $23 = ($0|0)<(0);
 $24 = -$t$0;
 $25 = $23 ? $24 : $t$0;
 return (+$25);
}
function _tanhl($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_tanh($x));
 return (+$0);
}
function _tgamma($x) {
 $x = +$x;
 var $$ = 0.0, $$0 = 0.0, $$0$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0;
 var $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $9 = 0.0, $den$04$i = 0.0, $den$17$i = 0.0, $den$2$i = 0.0, $dy$0 = 0.0, $dy$1 = 0.0, $exitcond$i = 0, $i$05$i = 0, $i$18$i = 0;
 var $num$03$i = 0.0, $num$16$i = 0.0, $num$2$i = 0.0, $r$0 = 0.0, $z$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 $3 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
 $4 = tempRet0;
 $5 = ($2>>>0)>(2146435071);
 do {
  if ($5) {
   $6 = $x + inf;
   $$0 = $6;
  } else {
   $7 = ($2>>>0)<(1016070144);
   if ($7) {
    $8 = 1.0 / $x;
    $$0 = $8;
    break;
   }
   $9 = (+Math_floor((+$x)));
   $10 = $9 == $x;
   if ($10) {
    $11 = ($3|0)==(0);
    if (!($11)) {
     $$0 = nan;
     break;
    }
    $12 = !($x <= 23.0);
    if (!($12)) {
     $13 = (~~(($x)));
     $14 = (($13) + -1)|0;
     $15 = (4480 + ($14<<3)|0);
     $16 = +HEAPF64[$15>>3];
     $$0 = $16;
     break;
    }
   }
   $17 = ($2>>>0)>(1080492031);
   $18 = ($3|0)!=(0);
   if ($17) {
    if ($18) {
     $19 = $9 * 0.5;
     $20 = $x * 0.5;
     $21 = (+Math_floor((+$20)));
     $22 = $19 == $21;
     $$ = $22 ? 0.0 : -0.0;
     $$0 = $$;
     break;
    } else {
     $23 = $x * 8.9884656743115795E+307;
     $$0 = $23;
     break;
    }
   }
   $24 = -$x;
   $25 = $18 ? $24 : $x;
   $26 = $25 + 5.5246800407767296;
   $27 = $25 > 5.5246800407767296;
   $28 = $26 - $25;
   $29 = $28 + -5.5246800407767296;
   $30 = $26 + -5.5246800407767296;
   $31 = $30 - $25;
   $dy$0 = $27 ? $29 : $31;
   $32 = $25 + -0.5;
   $33 = $25 < 8.0;
   if ($33) {
    $den$04$i = 0.0;$i$05$i = 12;$num$03$i = 0.0;
    while(1) {
     $34 = $25 * $num$03$i;
     $35 = (4664 + ($i$05$i<<3)|0);
     $36 = +HEAPF64[$35>>3];
     $37 = $34 + $36;
     $38 = $25 * $den$04$i;
     $39 = (4768 + ($i$05$i<<3)|0);
     $40 = +HEAPF64[$39>>3];
     $41 = $38 + $40;
     $42 = (($i$05$i) + -1)|0;
     $43 = ($i$05$i|0)>(0);
     if ($43) {
      $den$04$i = $41;$i$05$i = $42;$num$03$i = $37;
     } else {
      $den$2$i = $41;$num$2$i = $37;
      break;
     }
    }
   } else {
    $den$17$i = 0.0;$i$18$i = 0;$num$16$i = 0.0;
    while(1) {
     $44 = $num$16$i / $25;
     $45 = (4664 + ($i$18$i<<3)|0);
     $46 = +HEAPF64[$45>>3];
     $47 = $44 + $46;
     $48 = $den$17$i / $25;
     $49 = (4768 + ($i$18$i<<3)|0);
     $50 = +HEAPF64[$49>>3];
     $51 = $48 + $50;
     $52 = (($i$18$i) + 1)|0;
     $exitcond$i = ($52|0)==(13);
     if ($exitcond$i) {
      $den$2$i = $51;$num$2$i = $47;
      break;
     } else {
      $den$17$i = $51;$i$18$i = $52;$num$16$i = $47;
     }
    }
   }
   $53 = $num$2$i / $den$2$i;
   $54 = -$26;
   $55 = (+Math_exp((+$54)));
   $56 = $53 * $55;
   $57 = $x < 0.0;
   if ($57) {
    $58 = $25 * 0.5;
    $59 = (+Math_floor((+$58)));
    $60 = $58 - $59;
    $61 = $60 * 2.0;
    $62 = $61 * 4.0;
    $63 = (~~(($62)));
    $64 = (($63) + 1)|0;
    $65 = (($64|0) / 2)&-1;
    $66 = (+($65|0));
    $67 = $66 * 0.5;
    $68 = $61 - $67;
    $69 = $68 * 3.1415926535897931;
    switch ($65|0) {
    case 3:  {
     $74 = (+___cos($69,0.0));
     $75 = -$74;
     $$0$i = $75;
     break;
    }
    case 1:  {
     $71 = (+___cos($69,0.0));
     $$0$i = $71;
     break;
    }
    case 2:  {
     $72 = -$69;
     $73 = (+___sin($72,0.0,0));
     $$0$i = $73;
     break;
    }
    default: {
     $70 = (+___sin($69,0.0,0));
     $$0$i = $70;
    }
    }
    $76 = $25 * $$0$i;
    $77 = $56 * $76;
    $78 = -3.1415926535897931 / $77;
    $79 = -$dy$0;
    $80 = -$32;
    $dy$1 = $79;$r$0 = $78;$z$0 = $80;
   } else {
    $dy$1 = $dy$0;$r$0 = $56;$z$0 = $32;
   }
   $81 = $dy$1 * 6.0246800407767296;
   $82 = $81 * $r$0;
   $83 = $82 / $26;
   $84 = $r$0 + $83;
   $85 = $z$0 * 0.5;
   $86 = (+Math_pow((+$26),(+$85)));
   $87 = $84 * $86;
   $88 = $86 * $87;
   $$0 = $88;
  }
 } while(0);
 return (+$$0);
}
function _tgammaf($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x;
 $1 = (+_tgamma($0));
 $2 = $1;
 return (+$2);
}
function _tgammal($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_tgamma($x));
 return (+$0);
}
function _trunc($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 $5 = (($4) + -1011)|0;
 $6 = ($5|0)>(63);
 if ($6) {
  $$0 = $x;
 } else {
  $7 = ($5|0)<(12);
  $8 = (_bitshift64Lshr(-1,-1,($5|0))|0);
  $9 = tempRet0;
  $10 = $7 ? -1 : $8;
  $11 = $7 ? 2147483647 : $9;
  $12 = $10 & $0;
  $13 = $11 & $1;
  $14 = ($12|0)==(0);
  $15 = ($13|0)==(0);
  $16 = $14 & $15;
  if ($16) {
   $$0 = $x;
  } else {
   $17 = $10 ^ -1;
   $18 = $11 ^ -1;
   $19 = $0 & $17;
   $20 = $1 & $18;
   HEAP32[tempDoublePtr>>2] = $19;HEAP32[tempDoublePtr+4>>2] = $20;$21 = +HEAPF64[tempDoublePtr>>3];
   $$0 = $21;
  }
 }
 return (+$$0);
}
function _truncf($x) {
 $x = +$x;
 var $$0 = 0.0, $$op = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 >>> 23;
 $2 = $1 & 255;
 $3 = (($2) + -118)|0;
 $4 = ($3|0)>(31);
 if ($4) {
  $$0 = $x;
 } else {
  $5 = ($3|0)<(9);
  $$op = -1 >>> $3;
  $6 = $5 ? 2147483647 : $$op;
  $7 = $6 & $0;
  $8 = ($7|0)==(0);
  if ($8) {
   $$0 = $x;
  } else {
   $9 = $6 ^ -1;
   $10 = $0 & $9;
   $11 = (HEAP32[tempDoublePtr>>2]=$10,+HEAPF32[tempDoublePtr>>2]);
   $$0 = $11;
  }
 }
 return (+$$0);
}
function _truncl($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_trunc($x));
 return (+$0);
}
function ___cos($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x * $x;
 $1 = $0 * $0;
 $2 = $0 * 2.4801587289476729E-5;
 $3 = $2 + -0.001388888888887411;
 $4 = $0 * $3;
 $5 = $4 + 0.041666666666666602;
 $6 = $0 * $5;
 $7 = $1 * $1;
 $8 = $0 * 1.1359647557788195E-11;
 $9 = 2.0875723212981748E-9 - $8;
 $10 = $0 * $9;
 $11 = $10 + -2.7557314351390663E-7;
 $12 = $7 * $11;
 $13 = $6 + $12;
 $14 = $0 * 0.5;
 $15 = 1.0 - $14;
 $16 = 1.0 - $15;
 $17 = $16 - $14;
 $18 = $0 * $13;
 $19 = $x * $y;
 $20 = $18 - $19;
 $21 = $17 + $20;
 $22 = $15 + $21;
 return (+$22);
}
function ___cosdf($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x * $x;
 $1 = $0 * $0;
 $2 = $0 * 2.4390448796277409E-5;
 $3 = $2 + -0.0013886763774609929;
 $4 = $0 * 0.499999997251031;
 $5 = 1.0 - $4;
 $6 = $1 * 0.041666623323739063;
 $7 = $5 + $6;
 $8 = $0 * $1;
 $9 = $8 * $3;
 $10 = $7 + $9;
 $11 = $10;
 return (+$11);
}
function ___expo2($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x + -1416.0996898839683;
 $1 = (+Math_exp((+$0)));
 $2 = $1 * 2.2471164185778949E+307;
 $3 = $2 * 2.2471164185778949E+307;
 return (+$3);
}
function ___expo2f($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x + -162.88958740234375;
 $1 = (+Math_exp((+$0)));
 $2 = $1 * 1.6615349947311448E+35;
 $3 = $2 * 1.6615349947311448E+35;
 return (+$3);
}
function ___fpclassify($x) {
 $x = +$x;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $1 & 2147483647;
  $6 = ($0|0)!=(0);
  $7 = ($5|0)!=(0);
  $8 = $6 | $7;
  $9 = $8 ? 3 : 2;
  $$0 = $9;
  break;
 }
 case 2047:  {
  $10 = $1 & 1048575;
  $11 = ($0|0)==(0);
  $12 = ($10|0)==(0);
  $13 = $11 & $12;
  $14 = $13&1;
  $$0 = $14;
  break;
 }
 default: {
  $$0 = 4;
 }
 }
 return ($$0|0);
}
function ___fpclassifyf($x) {
 $x = +$x;
 var $$0 = 0, $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 >>> 23;
 $2 = $1 & 255;
 switch ($2|0) {
 case 0:  {
  $$mask = $0 & 2147483647;
  $3 = ($$mask|0)!=(0);
  $4 = $3 ? 3 : 2;
  $$0 = $4;
  break;
 }
 case 255:  {
  $$mask1 = $0 & 8388607;
  $not$ = ($$mask1|0)==(0);
  $5 = $not$&1;
  $$0 = $5;
  break;
 }
 default: {
  $$0 = 4;
 }
 }
 return ($$0|0);
}
function ___polevll($x,$P,$n) {
 $x = +$x;
 $P = $P|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $$lcssa = 0.0, $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $P$pn = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[$P>>3];
 $$0 = $n;$P$pn = $P;$y$0 = $0;
 while(1) {
  $$01 = ((($P$pn)) + 8|0);
  $1 = $y$0 * $x;
  $2 = +HEAPF64[$$01>>3];
  $3 = $1 + $2;
  $4 = (($$0) + -1)|0;
  $5 = ($4|0)==(0);
  if ($5) {
   $$lcssa = $3;
   break;
  } else {
   $$0 = $4;$P$pn = $$01;$y$0 = $3;
  }
 }
 return (+$$lcssa);
}
function ___p1evll($x,$P,$n) {
 $x = +$x;
 $P = $P|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $$lcssa = 0.0, $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $P$pn = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n) + -1)|0;
 $1 = +HEAPF64[$P>>3];
 $2 = $1 + $x;
 $$0 = $0;$P$pn = $P;$y$0 = $2;
 while(1) {
  $$01 = ((($P$pn)) + 8|0);
  $3 = $y$0 * $x;
  $4 = +HEAPF64[$$01>>3];
  $5 = $3 + $4;
  $6 = (($$0) + -1)|0;
  $7 = ($6|0)==(0);
  if ($7) {
   $$lcssa = $5;
   break;
  } else {
   $$0 = $6;$P$pn = $$01;$y$0 = $5;
  }
 }
 return (+$$lcssa);
}
function ___rem_pio2($x,$y) {
 $x = +$x;
 $y = $y|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0;
 var $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0;
 var $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $i$1$lcssa = 0, $r$0 = 0.0, $tx = 0, $ty = 0, $w$0 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tx = sp + 16|0;
 $ty = sp;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
 $3 = tempRet0;
 $4 = $1 & 2147483647;
 $5 = ($4>>>0)<(1074752123);
 do {
  if ($5) {
   $6 = $1 & 1048575;
   $7 = ($6|0)==(598523);
   if ($7) {
    label = 21;
   } else {
    $8 = ($4>>>0)<(1073928573);
    $9 = ($2|0)!=(0);
    if ($8) {
     if ($9) {
      $15 = $x + 1.5707963267341256;
      $16 = $15 + 6.0771005065061922E-11;
      HEAPF64[$y>>3] = $16;
      $17 = $15 - $16;
      $18 = $17 + 6.0771005065061922E-11;
      $19 = ((($y)) + 8|0);
      HEAPF64[$19>>3] = $18;
      $$0 = -1;
      break;
     } else {
      $10 = $x + -1.5707963267341256;
      $11 = $10 + -6.0771005065061922E-11;
      HEAPF64[$y>>3] = $11;
      $12 = $10 - $11;
      $13 = $12 + -6.0771005065061922E-11;
      $14 = ((($y)) + 8|0);
      HEAPF64[$14>>3] = $13;
      $$0 = 1;
      break;
     }
    } else {
     if ($9) {
      $25 = $x + 3.1415926534682512;
      $26 = $25 + 1.2154201013012384E-10;
      HEAPF64[$y>>3] = $26;
      $27 = $25 - $26;
      $28 = $27 + 1.2154201013012384E-10;
      $29 = ((($y)) + 8|0);
      HEAPF64[$29>>3] = $28;
      $$0 = -2;
      break;
     } else {
      $20 = $x + -3.1415926534682512;
      $21 = $20 + -1.2154201013012384E-10;
      HEAPF64[$y>>3] = $21;
      $22 = $20 - $21;
      $23 = $22 + -1.2154201013012384E-10;
      $24 = ((($y)) + 8|0);
      HEAPF64[$24>>3] = $23;
      $$0 = 2;
      break;
     }
    }
   }
  } else {
   $30 = ($4>>>0)<(1075594812);
   if (!($30)) {
    $56 = ($4>>>0)<(1094263291);
    if ($56) {
     label = 21;
     break;
    }
    $98 = ($4>>>0)>(2146435071);
    if ($98) {
     $99 = $x - $x;
     $100 = ((($y)) + 8|0);
     HEAPF64[$100>>3] = $99;
     HEAPF64[$y>>3] = $99;
     $$0 = 0;
     break;
    }
    $101 = $1 & 1048575;
    $102 = $101 | 1096810496;
    HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $102;$103 = +HEAPF64[tempDoublePtr>>3];
    $104 = (~~(($103)));
    $105 = (+($104|0));
    HEAPF64[$tx>>3] = $105;
    $106 = $103 - $105;
    $107 = $106 * 16777216.0;
    $108 = (~~(($107)));
    $109 = (+($108|0));
    $110 = ((($tx)) + 8|0);
    HEAPF64[$110>>3] = $109;
    $111 = $107 - $109;
    $112 = $111 * 16777216.0;
    $113 = ((($tx)) + 16|0);
    HEAPF64[$113>>3] = $112;
    $114 = $112 == 0.0;
    if ($114) {
     $115 = 1;
     while(1) {
      $$phi$trans$insert = (($tx) + ($115<<3)|0);
      $$pre = +HEAPF64[$$phi$trans$insert>>3];
      $116 = $$pre == 0.0;
      $117 = (($115) + -1)|0;
      if ($116) {
       $115 = $117;
      } else {
       $i$1$lcssa = $115;
       break;
      }
     }
    } else {
     $i$1$lcssa = 2;
    }
    $118 = $4 >>> 20;
    $119 = (($118) + -1046)|0;
    $120 = (($i$1$lcssa) + 1)|0;
    $121 = (___rem_pio2_large($tx,$ty,$119,$120,1)|0);
    $122 = ($2|0)==(0);
    $123 = +HEAPF64[$ty>>3];
    $124 = ((($ty)) + 8|0);
    $125 = +HEAPF64[$124>>3];
    if ($122) {
     HEAPF64[$y>>3] = $123;
     $130 = ((($y)) + 8|0);
     HEAPF64[$130>>3] = $125;
     $$0 = $121;
     break;
    } else {
     $126 = -$123;
     HEAPF64[$y>>3] = $126;
     $127 = -$125;
     $128 = ((($y)) + 8|0);
     HEAPF64[$128>>3] = $127;
     $129 = (0 - ($121))|0;
     $$0 = $129;
     break;
    }
   }
   $31 = ($4>>>0)<(1075183037);
   if ($31) {
    $32 = ($4|0)==(1074977148);
    if ($32) {
     label = 21;
     break;
    }
    $33 = ($2|0)==(0);
    if ($33) {
     $34 = $x + -4.7123889802023768;
     $35 = $34 + -1.8231301519518578E-10;
     HEAPF64[$y>>3] = $35;
     $36 = $34 - $35;
     $37 = $36 + -1.8231301519518578E-10;
     $38 = ((($y)) + 8|0);
     HEAPF64[$38>>3] = $37;
     $$0 = 3;
     break;
    } else {
     $39 = $x + 4.7123889802023768;
     $40 = $39 + 1.8231301519518578E-10;
     HEAPF64[$y>>3] = $40;
     $41 = $39 - $40;
     $42 = $41 + 1.8231301519518578E-10;
     $43 = ((($y)) + 8|0);
     HEAPF64[$43>>3] = $42;
     $$0 = -3;
     break;
    }
   } else {
    $44 = ($4|0)==(1075388923);
    if ($44) {
     label = 21;
     break;
    }
    $45 = ($2|0)==(0);
    if ($45) {
     $46 = $x + -6.2831853069365025;
     $47 = $46 + -2.4308402026024769E-10;
     HEAPF64[$y>>3] = $47;
     $48 = $46 - $47;
     $49 = $48 + -2.4308402026024769E-10;
     $50 = ((($y)) + 8|0);
     HEAPF64[$50>>3] = $49;
     $$0 = 4;
     break;
    } else {
     $51 = $x + 6.2831853069365025;
     $52 = $51 + 2.4308402026024769E-10;
     HEAPF64[$y>>3] = $52;
     $53 = $51 - $52;
     $54 = $53 + 2.4308402026024769E-10;
     $55 = ((($y)) + 8|0);
     HEAPF64[$55>>3] = $54;
     $$0 = -4;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 21) {
  $57 = $x * 0.63661977236758138;
  $58 = $57 + 6755399441055744.0;
  $59 = $58 + -6755399441055744.0;
  $60 = (~~(($59)));
  $61 = $59 * 1.5707963267341256;
  $62 = $x - $61;
  $63 = $59 * 6.0771005065061922E-11;
  $64 = $62 - $63;
  HEAPF64[$y>>3] = $64;
  HEAPF64[tempDoublePtr>>3] = $64;$65 = HEAP32[tempDoublePtr>>2]|0;
  $66 = HEAP32[tempDoublePtr+4>>2]|0;
  $67 = (_bitshift64Lshr(($65|0),($66|0),52)|0);
  $68 = tempRet0;
  $69 = $67 & 2047;
  $70 = $4 >>> 20;
  $71 = (($70) - ($69))|0;
  $72 = ($71|0)>(16);
  if ($72) {
   $73 = $59 * 6.077100506303966E-11;
   $74 = $62 - $73;
   $75 = $59 * 2.0222662487959506E-21;
   $76 = $62 - $74;
   $77 = $76 - $73;
   $78 = $75 - $77;
   $79 = $74 - $78;
   HEAPF64[$y>>3] = $79;
   HEAPF64[tempDoublePtr>>3] = $79;$80 = HEAP32[tempDoublePtr>>2]|0;
   $81 = HEAP32[tempDoublePtr+4>>2]|0;
   $82 = (_bitshift64Lshr(($80|0),($81|0),52)|0);
   $83 = tempRet0;
   $84 = $82 & 2047;
   $85 = (($70) - ($84))|0;
   $86 = ($85|0)>(49);
   if ($86) {
    $87 = $59 * 2.0222662487111665E-21;
    $88 = $74 - $87;
    $89 = $59 * 8.4784276603688995E-32;
    $90 = $74 - $88;
    $91 = $90 - $87;
    $92 = $89 - $91;
    $93 = $88 - $92;
    HEAPF64[$y>>3] = $93;
    $95 = $93;$r$0 = $88;$w$0 = $92;
   } else {
    $95 = $79;$r$0 = $74;$w$0 = $78;
   }
  } else {
   $95 = $64;$r$0 = $62;$w$0 = $63;
  }
  $94 = $r$0 - $95;
  $96 = $94 - $w$0;
  $97 = ((($y)) + 8|0);
  HEAPF64[$97>>3] = $96;
  $$0 = $60;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___rem_pio2f($x,$y) {
 $x = +$x;
 $y = $y|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0;
 var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $tx = 0, $ty = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tx = sp + 8|0;
 $ty = sp;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 & 2147483647;
 $2 = ($1>>>0)<(1305022427);
 do {
  if ($2) {
   $3 = $x;
   $4 = $3 * 0.63661977236758138;
   $5 = $4 + 6755399441055744.0;
   $6 = $5 + -6755399441055744.0;
   $7 = (~~(($6)));
   $8 = $6 * 1.5707963109016418;
   $9 = $3 - $8;
   $10 = $6 * 1.5893254773528196E-8;
   $11 = $9 - $10;
   HEAPF64[$y>>3] = $11;
   $$0 = $7;
  } else {
   $12 = ($1>>>0)>(2139095039);
   if ($12) {
    $13 = $x - $x;
    $14 = $13;
    HEAPF64[$y>>3] = $14;
    $$0 = 0;
    break;
   }
   $15 = $1 >>> 23;
   $16 = (($15) + -150)|0;
   $17 = $16 << 23;
   $18 = (($1) - ($17))|0;
   $19 = (HEAP32[tempDoublePtr>>2]=$18,+HEAPF32[tempDoublePtr>>2]);
   $20 = $19;
   HEAPF64[$tx>>3] = $20;
   $21 = (___rem_pio2_large($tx,$ty,$16,1,0)|0);
   $22 = ($0|0)<(0);
   $23 = +HEAPF64[$ty>>3];
   if ($22) {
    $24 = -$23;
    HEAPF64[$y>>3] = $24;
    $25 = (0 - ($21))|0;
    $$0 = $25;
    break;
   } else {
    HEAPF64[$y>>3] = $23;
    $$0 = $21;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___rem_pio2_large($x,$y,$e0,$nx,$prec) {
 $x = $x|0;
 $y = $y|0;
 $e0 = $e0|0;
 $nx = $nx|0;
 $prec = $prec|0;
 var $$ = 0, $$lcssa180 = 0.0, $$lcssa182 = 0, $$op = 0, $$phi$trans$insert = 0, $$phi$trans$insert133 = 0, $$pre = 0.0, $$pre134 = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0;
 var $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0;
 var $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0.0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0;
 var $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0, $224 = 0.0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0;
 var $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0;
 var $99 = 0, $carry$0$lcssa = 0, $carry$076 = 0, $carry$1 = 0, $exitcond = 0, $exitcond128 = 0, $exitcond129 = 0, $exitcond130 = 0, $exitcond131 = 0, $exitcond132 = 0, $f = 0, $fq = 0, $fw$0$lcssa = 0.0, $fw$099 = 0.0, $fw$1$lcssa = 0.0, $fw$188 = 0.0, $fw$266 = 0.0, $fw$358 = 0.0, $fw$4$lcssa = 0.0, $fw$435 = 0.0;
 var $fw$5$lcssa = 0.0, $fw$543 = 0.0, $fw$6$lcssa = 0.0, $fw$637 = 0.0, $fw$7$lcssa = 0.0, $fw$748 = 0.0, $i$0104 = 0, $i$1036 = 0, $i$1103 = 0, $i$1154 = 0, $i$1252 = 0, $i$1347 = 0, $i$269 = 0, $i$377 = 0, $i$483 = 0, $i$483$in = 0, $i$595 = 0, $i$595$in = 0, $i$665 = 0, $i$762 = 0;
 var $i$834 = 0, $i$942 = 0, $ih$0 = 0, $ih$04 = 0, $ih$05 = 0, $ih$05$lcssa = 0, $ih$05$lcssa185 = 0, $ih$05186 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $iq = 0, $j$0105 = 0, $j$198 = 0, $j$270 = 0, $j$382 = 0, $j$487 = 0, $jz$0 = 0, $jz$0$lcssa = 0, $jz$0$lcssa184 = 0, $jz$1 = 0;
 var $jz$1$in = 0, $jz$2 = 0, $k$0 = 0, $k$0$lcssa = 0, $k$157 = 0, $n$0 = 0, $n$03 = 0, $n$1 = 0, $n$1$lcssa = 0, $n$1$lcssa187 = 0, $n$1188 = 0, $q = 0, $q0$0 = 0, $q0$0$in = 0, $q0$1 = 0, $umax = 0, $z$0$lcssa = 0.0, $z$071 = 0.0, $z$1 = 0.0, $z$1$lcssa = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $iq = sp + 480|0;
 $f = sp + 320|0;
 $fq = sp + 160|0;
 $q = sp;
 $0 = (14548 + ($prec<<2)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($nx) + -1)|0;
 $3 = (($e0) + -3)|0;
 $4 = (($3|0) / 24)&-1;
 $5 = ($4|0)<(0);
 $$ = $5 ? 0 : $4;
 $6 = ($$*24)|0;
 $7 = (($6) + 24)|0;
 $8 = (($e0) - ($7))|0;
 $9 = (($1) + ($2))|0;
 $10 = ($9|0)<(0);
 if (!($10)) {
  $11 = (($$) - ($2))|0;
  $12 = (($1) + ($nx))|0;
  $i$0104 = 0;$j$0105 = $11;
  while(1) {
   $14 = ($j$0105|0)<(0);
   if ($14) {
    $19 = 0.0;
   } else {
    $15 = (14564 + ($j$0105<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (+($16|0));
    $19 = $17;
   }
   $18 = (($f) + ($i$0104<<3)|0);
   HEAPF64[$18>>3] = $19;
   $20 = (($i$0104) + 1)|0;
   $21 = (($j$0105) + 1)|0;
   $exitcond132 = ($20|0)==($12|0);
   if ($exitcond132) {
    break;
   } else {
    $i$0104 = $20;$j$0105 = $21;
   }
  }
 }
 $13 = ($nx|0)<(1);
 $i$1103 = 0;
 while(1) {
  if ($13) {
   $fw$0$lcssa = 0.0;
  } else {
   $22 = (($i$1103) + ($2))|0;
   $fw$099 = 0.0;$j$198 = 0;
   while(1) {
    $28 = (($x) + ($j$198<<3)|0);
    $29 = +HEAPF64[$28>>3];
    $30 = (($22) - ($j$198))|0;
    $31 = (($f) + ($30<<3)|0);
    $32 = +HEAPF64[$31>>3];
    $33 = $29 * $32;
    $34 = $fw$099 + $33;
    $35 = (($j$198) + 1)|0;
    $exitcond131 = ($35|0)==($nx|0);
    if ($exitcond131) {
     $fw$0$lcssa = $34;
     break;
    } else {
     $fw$099 = $34;$j$198 = $35;
    }
   }
  }
  $36 = (($q) + ($i$1103<<3)|0);
  HEAPF64[$36>>3] = $fw$0$lcssa;
  $37 = (($i$1103) + 1)|0;
  $38 = ($i$1103|0)<($1|0);
  if ($38) {
   $i$1103 = $37;
  } else {
   break;
  }
 }
 $23 = ($8|0)>(0);
 $24 = (24 - ($8))|0;
 $25 = (23 - ($8))|0;
 $26 = ($nx|0)<(1);
 $27 = ($7|0)==($e0|0);
 $jz$0 = $1;
 L17: while(1) {
  $39 = (($q) + ($jz$0<<3)|0);
  $40 = +HEAPF64[$39>>3];
  $41 = ($jz$0|0)>(0);
  if ($41) {
   $i$269 = 0;$j$270 = $jz$0;$z$071 = $40;
   while(1) {
    $42 = $z$071 * 5.9604644775390625E-8;
    $43 = (~~(($42)));
    $44 = (+($43|0));
    $45 = $44 * 16777216.0;
    $46 = $z$071 - $45;
    $47 = (~~(($46)));
    $48 = (($iq) + ($i$269<<2)|0);
    HEAP32[$48>>2] = $47;
    $49 = (($j$270) + -1)|0;
    $50 = (($q) + ($49<<3)|0);
    $51 = +HEAPF64[$50>>3];
    $52 = $44 + $51;
    $53 = (($i$269) + 1)|0;
    $54 = ($j$270|0)>(1);
    if ($54) {
     $i$269 = $53;$j$270 = $49;$z$071 = $52;
    } else {
     $z$0$lcssa = $52;
     break;
    }
   }
  } else {
   $z$0$lcssa = $40;
  }
  $55 = (+_scalbn($z$0$lcssa,$8));
  $56 = $55 * 0.125;
  $57 = (+Math_floor((+$56)));
  $58 = $57 * 8.0;
  $59 = $55 - $58;
  $60 = (~~(($59)));
  $61 = (+($60|0));
  $62 = $59 - $61;
  do {
   if ($23) {
    $63 = (($jz$0) + -1)|0;
    $64 = (($iq) + ($63<<2)|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = $65 >> $24;
    $67 = (($66) + ($60))|0;
    $68 = $66 << $24;
    $69 = (($65) - ($68))|0;
    HEAP32[$64>>2] = $69;
    $70 = $69 >> $25;
    $ih$0 = $70;$n$0 = $67;
    label = 19;
   } else {
    if ($27) {
     $71 = (($jz$0) + -1)|0;
     $72 = (($iq) + ($71<<2)|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = $73 >> 23;
     $ih$0 = $74;$n$0 = $60;
     label = 19;
     break;
    } else {
     $75 = !($62 >= 0.5);
     if ($75) {
      $ih$05 = 0;$n$1 = $60;$z$1 = $62;
      break;
     } else {
      $ih$04 = 2;$n$03 = $60;
      label = 20;
      break;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   $76 = ($ih$0|0)>(0);
   if ($76) {
    $ih$04 = $ih$0;$n$03 = $n$0;
    label = 20;
   } else {
    $ih$05 = $ih$0;$n$1 = $n$0;$z$1 = $62;
   }
  }
  if ((label|0) == 20) {
   label = 0;
   $77 = (($n$03) + 1)|0;
   if ($41) {
    $carry$076 = 0;$i$377 = 0;
    while(1) {
     $78 = (($iq) + ($i$377<<2)|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($carry$076|0)==(0);
     if ($80) {
      $81 = ($79|0)==(0);
      if ($81) {
       $carry$1 = 0;
      } else {
       $82 = (16777216 - ($79))|0;
       HEAP32[$78>>2] = $82;
       $carry$1 = 1;
      }
     } else {
      $83 = (16777215 - ($79))|0;
      HEAP32[$78>>2] = $83;
      $carry$1 = $carry$076;
     }
     $84 = (($i$377) + 1)|0;
     $exitcond129 = ($84|0)==($jz$0|0);
     if ($exitcond129) {
      $carry$0$lcssa = $carry$1;
      break;
     } else {
      $carry$076 = $carry$1;$i$377 = $84;
     }
    }
   } else {
    $carry$0$lcssa = 0;
   }
   L42: do {
    if ($23) {
     switch ($8|0) {
     case 1:  {
      $85 = (($jz$0) + -1)|0;
      $86 = (($iq) + ($85<<2)|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = $87 & 8388607;
      HEAP32[$86>>2] = $88;
      break L42;
      break;
     }
     case 2:  {
      $89 = (($jz$0) + -1)|0;
      $90 = (($iq) + ($89<<2)|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = $91 & 4194303;
      HEAP32[$90>>2] = $92;
      break L42;
      break;
     }
     default: {
      break L42;
     }
     }
    }
   } while(0);
   $93 = ($ih$04|0)==(2);
   if ($93) {
    $94 = 1.0 - $62;
    $95 = ($carry$0$lcssa|0)==(0);
    if ($95) {
     $ih$05 = 2;$n$1 = $77;$z$1 = $94;
    } else {
     $96 = (+_scalbn(1.0,$8));
     $97 = $94 - $96;
     $ih$05 = 2;$n$1 = $77;$z$1 = $97;
    }
   } else {
    $ih$05 = $ih$04;$n$1 = $77;$z$1 = $62;
   }
  }
  $98 = $z$1 == 0.0;
  if (!($98)) {
   $ih$05$lcssa = $ih$05;$jz$0$lcssa = $jz$0;$n$1$lcssa = $n$1;$z$1$lcssa = $z$1;
   label = 44;
   break;
  }
  $99 = ($jz$0|0)>($1|0);
  if ($99) {
   $i$483$in = $jz$0;$j$382 = 0;
   while(1) {
    $i$483 = (($i$483$in) + -1)|0;
    $100 = (($iq) + ($i$483<<2)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 | $j$382;
    $103 = ($i$483|0)>($1|0);
    if ($103) {
     $i$483$in = $i$483;$j$382 = $102;
    } else {
     $$lcssa182 = $102;
     break;
    }
   }
   $104 = ($$lcssa182|0)==(0);
   if ($104) {
    $k$0 = 1;
   } else {
    $ih$05$lcssa185 = $ih$05;$jz$0$lcssa184 = $jz$0;$n$1$lcssa187 = $n$1;
    label = 37;
    break;
   }
  } else {
   $k$0 = 1;
  }
  while(1) {
   $105 = (($1) - ($k$0))|0;
   $106 = (($iq) + ($105<<2)|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = ($107|0)==(0);
   $109 = (($k$0) + 1)|0;
   if ($108) {
    $k$0 = $109;
   } else {
    $k$0$lcssa = $k$0;
    break;
   }
  }
  $110 = (($k$0$lcssa) + ($jz$0))|0;
  $111 = ($k$0$lcssa|0)>(0);
  if ($111) {
   $i$595$in = $jz$0;
  } else {
   $jz$0 = $110;
   continue;
  }
  while(1) {
   $i$595 = (($i$595$in) + 1)|0;
   $112 = (($i$595) + ($$))|0;
   $113 = (14564 + ($112<<2)|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (+($114|0));
   $116 = (($i$595$in) + ($nx))|0;
   $117 = (($f) + ($116<<3)|0);
   HEAPF64[$117>>3] = $115;
   if ($26) {
    $fw$1$lcssa = 0.0;
   } else {
    $fw$188 = 0.0;$j$487 = 0;
    while(1) {
     $118 = (($x) + ($j$487<<3)|0);
     $119 = +HEAPF64[$118>>3];
     $120 = (($116) - ($j$487))|0;
     $121 = (($f) + ($120<<3)|0);
     $122 = +HEAPF64[$121>>3];
     $123 = $119 * $122;
     $124 = $fw$188 + $123;
     $125 = (($j$487) + 1)|0;
     $exitcond130 = ($125|0)==($nx|0);
     if ($exitcond130) {
      $fw$1$lcssa = $124;
      break;
     } else {
      $fw$188 = $124;$j$487 = $125;
     }
    }
   }
   $126 = (($q) + ($i$595<<3)|0);
   HEAPF64[$126>>3] = $fw$1$lcssa;
   $127 = ($i$595|0)<($110|0);
   if ($127) {
    $i$595$in = $i$595;
   } else {
    $jz$0 = $110;
    continue L17;
   }
  }
 }
 do {
  if ((label|0) == 37) {
   $jz$1$in = $jz$0$lcssa184;$q0$0$in = $8;
   while(1) {
    $q0$0 = (($q0$0$in) + -24)|0;
    $jz$1 = (($jz$1$in) + -1)|0;
    $128 = (($iq) + ($jz$1<<2)|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = ($129|0)==(0);
    if ($130) {
     $jz$1$in = $jz$1;$q0$0$in = $q0$0;
    } else {
     $ih$05186 = $ih$05$lcssa185;$jz$2 = $jz$1;$n$1188 = $n$1$lcssa187;$q0$1 = $q0$0;
     break;
    }
   }
  }
  else if ((label|0) == 44) {
   $131 = (0 - ($8))|0;
   $132 = (+_scalbn($z$1$lcssa,$131));
   $133 = !($132 >= 16777216.0);
   if ($133) {
    $144 = (~~(($132)));
    $145 = (($iq) + ($jz$0$lcssa<<2)|0);
    HEAP32[$145>>2] = $144;
    $ih$05186 = $ih$05$lcssa;$jz$2 = $jz$0$lcssa;$n$1188 = $n$1$lcssa;$q0$1 = $8;
    break;
   } else {
    $134 = $132 * 5.9604644775390625E-8;
    $135 = (~~(($134)));
    $136 = (+($135|0));
    $137 = $136 * 16777216.0;
    $138 = $132 - $137;
    $139 = (~~(($138)));
    $140 = (($iq) + ($jz$0$lcssa<<2)|0);
    HEAP32[$140>>2] = $139;
    $141 = (($jz$0$lcssa) + 1)|0;
    $142 = (($8) + 24)|0;
    $143 = (($iq) + ($141<<2)|0);
    HEAP32[$143>>2] = $135;
    $ih$05186 = $ih$05$lcssa;$jz$2 = $141;$n$1188 = $n$1$lcssa;$q0$1 = $142;
    break;
   }
  }
 } while(0);
 $146 = ($jz$2|0)>(-1);
 if ($146) {
  $147 = (+_scalbn(1.0,$q0$1));
  $fw$266 = $147;$i$665 = $jz$2;
  while(1) {
   $148 = (($iq) + ($i$665<<2)|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = (+($149|0));
   $151 = $fw$266 * $150;
   $152 = (($q) + ($i$665<<3)|0);
   HEAPF64[$152>>3] = $151;
   $153 = $fw$266 * 5.9604644775390625E-8;
   $154 = (($i$665) + -1)|0;
   $155 = ($i$665|0)>(0);
   if ($155) {
    $fw$266 = $153;$i$665 = $154;
   } else {
    break;
   }
  }
  if ($146) {
   $$op = $1 ^ -1;
   $i$762 = $jz$2;$indvars$iv = -1;
   while(1) {
    $156 = ($indvars$iv>>>0)>($$op>>>0);
    $umax = $156 ? $indvars$iv : $$op;
    $157 = (0 - ($umax))|0;
    $158 = (($jz$2) - ($i$762))|0;
    $fw$358 = 0.0;$k$157 = 0;
    while(1) {
     $159 = (4872 + ($k$157<<3)|0);
     $160 = +HEAPF64[$159>>3];
     $161 = (($k$157) + ($i$762))|0;
     $162 = (($q) + ($161<<3)|0);
     $163 = +HEAPF64[$162>>3];
     $164 = $160 * $163;
     $165 = $fw$358 + $164;
     $166 = (($k$157) + 1)|0;
     $exitcond128 = ($166|0)==($157|0);
     if ($exitcond128) {
      $$lcssa180 = $165;
      break;
     } else {
      $fw$358 = $165;$k$157 = $166;
     }
    }
    $167 = (($fq) + ($158<<3)|0);
    HEAPF64[$167>>3] = $$lcssa180;
    $168 = (($i$762) + -1)|0;
    $169 = ($i$762|0)>(0);
    $indvars$iv$next = (($indvars$iv) + -1)|0;
    if ($169) {
     $i$762 = $168;$indvars$iv = $indvars$iv$next;
    } else {
     break;
    }
   }
  }
 }
 L86: do {
  switch ($prec|0) {
  case 0:  {
   if ($146) {
    $fw$435 = 0.0;$i$834 = $jz$2;
    while(1) {
     $171 = (($fq) + ($i$834<<3)|0);
     $172 = +HEAPF64[$171>>3];
     $173 = $fw$435 + $172;
     $174 = (($i$834) + -1)|0;
     $175 = ($i$834|0)>(0);
     if ($175) {
      $fw$435 = $173;$i$834 = $174;
     } else {
      $fw$4$lcssa = $173;
      break;
     }
    }
   } else {
    $fw$4$lcssa = 0.0;
   }
   $176 = ($ih$05186|0)==(0);
   $177 = -$fw$4$lcssa;
   $178 = $176 ? $fw$4$lcssa : $177;
   HEAPF64[$y>>3] = $178;
   break;
  }
  case 2: case 1:  {
   if ($146) {
    $fw$543 = 0.0;$i$942 = $jz$2;
    while(1) {
     $179 = (($fq) + ($i$942<<3)|0);
     $180 = +HEAPF64[$179>>3];
     $181 = $fw$543 + $180;
     $182 = (($i$942) + -1)|0;
     $183 = ($i$942|0)>(0);
     if ($183) {
      $fw$543 = $181;$i$942 = $182;
     } else {
      $fw$5$lcssa = $181;
      break;
     }
    }
   } else {
    $fw$5$lcssa = 0.0;
   }
   $184 = ($ih$05186|0)==(0);
   $185 = -$fw$5$lcssa;
   $186 = $184 ? $fw$5$lcssa : $185;
   HEAPF64[$y>>3] = $186;
   $187 = +HEAPF64[$fq>>3];
   $188 = $187 - $fw$5$lcssa;
   $189 = ($jz$2|0)<(1);
   if ($189) {
    $fw$6$lcssa = $188;
   } else {
    $fw$637 = $188;$i$1036 = 1;
    while(1) {
     $190 = (($fq) + ($i$1036<<3)|0);
     $191 = +HEAPF64[$190>>3];
     $192 = $fw$637 + $191;
     $193 = (($i$1036) + 1)|0;
     $exitcond = ($i$1036|0)==($jz$2|0);
     if ($exitcond) {
      $fw$6$lcssa = $192;
      break;
     } else {
      $fw$637 = $192;$i$1036 = $193;
     }
    }
   }
   $194 = -$fw$6$lcssa;
   $195 = $184 ? $fw$6$lcssa : $194;
   $196 = ((($y)) + 8|0);
   HEAPF64[$196>>3] = $195;
   break;
  }
  case 3:  {
   $170 = ($jz$2|0)>(0);
   if ($170) {
    $$phi$trans$insert = (($fq) + ($jz$2<<3)|0);
    $$pre = +HEAPF64[$$phi$trans$insert>>3];
    $203 = $$pre;$i$1154 = $jz$2;
    while(1) {
     $198 = (($i$1154) + -1)|0;
     $199 = (($fq) + ($198<<3)|0);
     $200 = +HEAPF64[$199>>3];
     $201 = (($fq) + ($i$1154<<3)|0);
     $202 = $200 + $203;
     $204 = $200 - $202;
     $205 = $203 + $204;
     HEAPF64[$201>>3] = $205;
     HEAPF64[$199>>3] = $202;
     $206 = ($i$1154|0)>(1);
     if ($206) {
      $203 = $202;$i$1154 = $198;
     } else {
      break;
     }
    }
    $197 = ($jz$2|0)>(1);
    if ($197) {
     $$phi$trans$insert133 = (($fq) + ($jz$2<<3)|0);
     $$pre134 = +HEAPF64[$$phi$trans$insert133>>3];
     $212 = $$pre134;$i$1252 = $jz$2;
     while(1) {
      $207 = (($i$1252) + -1)|0;
      $208 = (($fq) + ($207<<3)|0);
      $209 = +HEAPF64[$208>>3];
      $210 = (($fq) + ($i$1252<<3)|0);
      $211 = $209 + $212;
      $213 = $209 - $211;
      $214 = $212 + $213;
      HEAPF64[$210>>3] = $214;
      HEAPF64[$208>>3] = $211;
      $215 = ($207|0)>(1);
      if ($215) {
       $212 = $211;$i$1252 = $207;
      } else {
       break;
      }
     }
     if ($197) {
      $fw$748 = 0.0;$i$1347 = $jz$2;
      while(1) {
       $216 = (($fq) + ($i$1347<<3)|0);
       $217 = +HEAPF64[$216>>3];
       $218 = $fw$748 + $217;
       $219 = (($i$1347) + -1)|0;
       $220 = ($219|0)>(1);
       if ($220) {
        $fw$748 = $218;$i$1347 = $219;
       } else {
        $fw$7$lcssa = $218;
        break;
       }
      }
     } else {
      $fw$7$lcssa = 0.0;
     }
    } else {
     $fw$7$lcssa = 0.0;
    }
   } else {
    $fw$7$lcssa = 0.0;
   }
   $221 = ($ih$05186|0)==(0);
   $222 = +HEAPF64[$fq>>3];
   $223 = ((($fq)) + 8|0);
   $224 = +HEAPF64[$223>>3];
   if ($221) {
    HEAPF64[$y>>3] = $222;
    $225 = ((($y)) + 8|0);
    HEAPF64[$225>>3] = $224;
    $226 = ((($y)) + 16|0);
    HEAPF64[$226>>3] = $fw$7$lcssa;
    break L86;
   } else {
    $227 = -$222;
    HEAPF64[$y>>3] = $227;
    $228 = -$224;
    $229 = ((($y)) + 8|0);
    HEAPF64[$229>>3] = $228;
    $230 = -$fw$7$lcssa;
    $231 = ((($y)) + 16|0);
    HEAPF64[$231>>3] = $230;
    break L86;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $232 = $n$1188 & 7;
 STACKTOP = sp;return ($232|0);
}
function ___signbit($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
 $3 = tempRet0;
 return ($2|0);
}
function ___signbitf($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 >>> 31;
 return ($1|0);
}
function ___sin($x,$y,$iy) {
 $x = +$x;
 $y = +$y;
 $iy = $iy|0;
 var $$0 = 0.0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $3 = 0.0;
 var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x * $x;
 $1 = $0 * $0;
 $2 = $0 * 2.7557313707070068E-6;
 $3 = $2 + -1.9841269829857949E-4;
 $4 = $0 * $3;
 $5 = $4 + 0.0083333333333224895;
 $6 = $0 * $1;
 $7 = $0 * 1.5896909952115501E-10;
 $8 = $7 + -2.5050760253406863E-8;
 $9 = $6 * $8;
 $10 = $9 + $5;
 $11 = $0 * $x;
 $12 = ($iy|0)==(0);
 if ($12) {
  $13 = $0 * $10;
  $14 = $13 + -0.16666666666666632;
  $15 = $11 * $14;
  $16 = $15 + $x;
  $$0 = $16;
 } else {
  $17 = $y * 0.5;
  $18 = $11 * $10;
  $19 = $17 - $18;
  $20 = $0 * $19;
  $21 = $20 - $y;
  $22 = $11 * 0.16666666666666632;
  $23 = $22 + $21;
  $24 = $x - $23;
  $$0 = $24;
 }
 return (+$$0);
}
function ___sindf($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x * $x;
 $1 = $0 * $0;
 $2 = $0 * 2.7183114939898219E-6;
 $3 = $2 + -1.9839334836096632E-4;
 $4 = $0 * $x;
 $5 = $0 * 0.0083333293858894632;
 $6 = $5 + -0.16666666641626524;
 $7 = $4 * $6;
 $8 = $7 + $x;
 $9 = $4 * $1;
 $10 = $9 * $3;
 $11 = $10 + $8;
 $12 = $11;
 return (+$12);
}
function ___tan($x,$y,$odd) {
 $x = +$x;
 $y = +$y;
 $odd = $odd|0;
 var $$0 = 0.0, $$01 = 0.0, $$02 = 0.0, $$1 = 0.0, $$13 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0;
 var $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0;
 var $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0;
 var $8 = 0, $9 = 0, $sign$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483640;
 $3 = ($2>>>0)>(1072010279);
 $4 = (0)>(0);
 $5 = ($2|0)==(1072010279);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $8 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
  $9 = tempRet0;
  $10 = ($8|0)==(0);
  $11 = -$x;
  $12 = -$y;
  $$02 = $10 ? $y : $12;
  $$01 = $10 ? $x : $11;
  $13 = 0.78539816339744828 - $$01;
  $14 = 3.061616997868383E-17 - $$02;
  $15 = $13 + $14;
  $$1 = $15;$$13 = 0.0;$sign$0 = $8;
 } else {
  $$1 = $x;$$13 = $y;$sign$0 = 0;
 }
 $16 = $$1 * $$1;
 $17 = $16 * $16;
 $18 = $17 * 1.8558637485527546E-5;
 $19 = 7.8179444293955709E-5 - $18;
 $20 = $17 * $19;
 $21 = $20 + 5.880412408202641E-4;
 $22 = $17 * $21;
 $23 = $22 + 0.0035920791075913124;
 $24 = $17 * $23;
 $25 = $24 + 0.021869488294859542;
 $26 = $17 * $25;
 $27 = $26 + 0.13333333333320124;
 $28 = $17 * 2.5907305186363371E-5;
 $29 = $28 + 7.1407249138260819E-5;
 $30 = $17 * $29;
 $31 = $30 + 2.4646313481846991E-4;
 $32 = $17 * $31;
 $33 = $32 + 0.0014562094543252903;
 $34 = $17 * $33;
 $35 = $34 + 0.0088632398235993;
 $36 = $17 * $35;
 $37 = $36 + 0.053968253976226052;
 $38 = $16 * $37;
 $39 = $$1 * $16;
 $40 = $27 + $38;
 $41 = $39 * $40;
 $42 = $$13 + $41;
 $43 = $16 * $42;
 $44 = $$13 + $43;
 $45 = $39 * 0.33333333333333409;
 $46 = $45 + $44;
 $47 = $$1 + $46;
 if ($7) {
  $48 = $odd << 1;
  $49 = (1 - ($48))|0;
  $50 = (+($49|0));
  $51 = $47 * $47;
  $52 = $50 + $47;
  $53 = $51 / $52;
  $54 = $46 - $53;
  $55 = $$1 + $54;
  $56 = $55 * 2.0;
  $57 = $50 - $56;
  $58 = ($sign$0|0)!=(0);
  $59 = -$57;
  $60 = $58 ? $59 : $57;
  $$0 = $60;
 } else {
  $61 = ($odd|0)==(0);
  if ($61) {
   $$0 = $47;
  } else {
   HEAPF64[tempDoublePtr>>3] = $47;$62 = HEAP32[tempDoublePtr>>2]|0;
   $63 = HEAP32[tempDoublePtr+4>>2]|0;
   HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $63;$64 = +HEAPF64[tempDoublePtr>>3];
   $65 = $64 - $$1;
   $66 = $46 - $65;
   $67 = -1.0 / $47;
   HEAPF64[tempDoublePtr>>3] = $67;$68 = HEAP32[tempDoublePtr>>2]|0;
   $69 = HEAP32[tempDoublePtr+4>>2]|0;
   HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $69;$70 = +HEAPF64[tempDoublePtr>>3];
   $71 = $64 * $70;
   $72 = $71 + 1.0;
   $73 = $66 * $70;
   $74 = $73 + $72;
   $75 = $67 * $74;
   $76 = $70 + $75;
   $$0 = $76;
  }
 }
 return (+$$0);
}
function ___tandf($x,$odd) {
 $x = +$x;
 $odd = $odd|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x * $x;
 $1 = $0 * 0.0094656478494367316;
 $2 = $1 + 0.002974357433599673;
 $3 = $0 * 0.024528318116654728;
 $4 = $3 + 0.053381237844567039;
 $5 = $0 * $0;
 $6 = $0 * $x;
 $7 = $0 * 0.13339200271297674;
 $8 = $7 + 0.3333313950307914;
 $9 = $6 * $8;
 $10 = $9 + $x;
 $11 = $6 * $5;
 $12 = $5 * $2;
 $13 = $4 + $12;
 $14 = $11 * $13;
 $15 = $10 + $14;
 $16 = ($odd|0)!=(0);
 $17 = -1.0 / $15;
 $18 = $16 ? $17 : $15;
 $19 = $18;
 return (+$19);
}
function _a64l($s) {
 $s = $s|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e$02 = 0, $memchr = 0, $x$0$lcssa = 0, $x$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$01 = $s;$e$02 = 0;$x$03 = 0;
 while(1) {
  $0 = HEAP8[$$01>>0]|0;
  $1 = ($0<<24>>24)==(0);
  if ($1) {
   $x$0$lcssa = $x$03;
   break;
  }
  $2 = $0 << 24 >> 24;
  $memchr = (_memchr(180454,$2,65)|0);
  $3 = $memchr;
  $4 = (($3) - (180454))|0;
  $5 = $4 << $e$02;
  $6 = $5 | $x$03;
  $7 = (($e$02) + 6)|0;
  $8 = ((($$01)) + 1|0);
  $9 = ($7|0)<(36);
  if ($9) {
   $$01 = $8;$e$02 = $7;$x$03 = $6;
  } else {
   $x$0$lcssa = $6;
   break;
  }
 }
 return ($x$0$lcssa|0);
}
function _l64a($x0) {
 $x0 = $x0|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $p$0$lcssa = 0, $p$01 = 0, $x$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x0|0)==(0);
 if ($0) {
  $p$0$lcssa = 174963;
 } else {
  $p$01 = 174963;$x$02 = $x0;
  while(1) {
   $1 = $x$02 & 63;
   $2 = (180454 + ($1)|0);
   $3 = HEAP8[$2>>0]|0;
   HEAP8[$p$01>>0] = $3;
   $4 = ((($p$01)) + 1|0);
   $5 = $x$02 >>> 6;
   $6 = ($5|0)==(0);
   if ($6) {
    $p$0$lcssa = $4;
    break;
   } else {
    $p$01 = $4;$x$02 = $5;
   }
  }
 }
 HEAP8[$p$0$lcssa>>0] = 0;
 return (174963|0);
}
function _basename($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$02 = 0, $i$03 = 0, $i$1 = 0;
 var $i$1$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 180290;
 } else {
  $1 = HEAP8[$s>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = 180290;
  } else {
   $3 = (_strlen($s)|0);
   $i$02 = (($3) + -1)|0;
   $4 = ($i$02|0)==(0);
   L4: do {
    if ($4) {
     $i$1 = 0;
    } else {
     $i$03 = $i$02;
     while(1) {
      $5 = (($s) + ($i$03)|0);
      $6 = HEAP8[$5>>0]|0;
      $7 = ($6<<24>>24)==(47);
      if (!($7)) {
       $i$1 = $i$03;
       break L4;
      }
      HEAP8[$5>>0] = 0;
      $i$0 = (($i$03) + -1)|0;
      $8 = ($i$0|0)==(0);
      if ($8) {
       $i$1 = 0;
       break;
      } else {
       $i$03 = $i$0;
      }
     }
    }
   } while(0);
   while(1) {
    $9 = ($i$1|0)==(0);
    if ($9) {
     $i$1$lcssa = 0;
     break;
    }
    $10 = (($i$1) + -1)|0;
    $11 = (($s) + ($10)|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = ($12<<24>>24)==(47);
    if ($13) {
     $i$1$lcssa = $i$1;
     break;
    } else {
     $i$1 = $10;
    }
   }
   $14 = (($s) + ($i$1$lcssa)|0);
   $$0 = $14;
  }
 }
 return ($$0|0);
}
function _dirname($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$0 = 0, $i$0$in = 0, $i$18 = 0, $i$27 = 0, $i$27$lcssa25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 L1: do {
  if ($0) {
   $$0 = 180290;
  } else {
   $1 = HEAP8[$s>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    $$0 = 180290;
   } else {
    $3 = (_strlen($s)|0);
    $i$0$in = $3;
    while(1) {
     $i$0 = (($i$0$in) + -1)|0;
     $4 = (($s) + ($i$0)|0);
     $5 = HEAP8[$4>>0]|0;
     $6 = ($5<<24>>24)==(47);
     if (!($6)) {
      $i$18 = $i$0;
      break;
     }
     $7 = ($i$0|0)==(0);
     if ($7) {
      $$0 = 175866;
      break L1;
     } else {
      $i$0$in = $i$0;
     }
    }
    while(1) {
     $8 = ($i$18|0)==(0);
     if ($8) {
      $$0 = 180290;
      break L1;
     }
     $9 = (($i$18) + -1)|0;
     $10 = (($s) + ($9)|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(47);
     if ($12) {
      $i$27 = $9;
      break;
     } else {
      $i$18 = $9;
     }
    }
    while(1) {
     $13 = ($i$27|0)==(0);
     if ($13) {
      $$0 = 175866;
      break L1;
     }
     $14 = (($i$27) + -1)|0;
     $15 = (($s) + ($14)|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(47);
     if ($17) {
      $i$27 = $14;
     } else {
      $i$27$lcssa25 = $i$27;
      break;
     }
    }
    $18 = (($s) + ($i$27$lcssa25)|0);
    HEAP8[$18>>0] = 0;
    $$0 = $s;
   }
  }
 } while(0);
 return ($$0|0);
}
function _ffs($i) {
 $i = $i|0;
 var $$02$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $nTrailingZeros$03$i = 0, $nTrailingZeros$03$i$lcssa = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0);
 if ($0) {
  $7 = 0;
 } else {
  $1 = $i & 1;
  $2 = ($1|0)==(0);
  if ($2) {
   $$02$i = $i;$nTrailingZeros$03$i = 0;
   while(1) {
    $3 = (($nTrailingZeros$03$i) + 1)|0;
    $4 = $$02$i >>> 1;
    $5 = $4 & 1;
    $6 = ($5|0)==(0);
    if ($6) {
     $$02$i = $4;$nTrailingZeros$03$i = $3;
    } else {
     $nTrailingZeros$03$i$lcssa = $nTrailingZeros$03$i;
     break;
    }
   }
   $phitmp = (($nTrailingZeros$03$i$lcssa) + 2)|0;
   $7 = $phitmp;
  } else {
   $7 = 1;
  }
 }
 return ($7|0);
}
function _forkpty($m,$name,$tio,$ws) {
 $m = $m|0;
 $name = $name|0;
 $tio = $tio|0;
 $ws = $ws|0;
 var $$0 = 0, $$lcssa = 0, $$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $istmp = 0, $s = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $s = sp + 32|0;
 $istmp = sp + 20|0;
 ;HEAP32[$istmp>>2]=0|0;HEAP32[$istmp+4>>2]=0|0;HEAP32[$istmp+8>>2]=0|0;
 $0 = (_openpty($m,$s,$name,$tio,$ws)|0);
 $1 = ($0|0)<(0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $i$04 = 0;
   L2: while(1) {
    $2 = (_fcntl($i$04,3,$vararg_buffer)|0);
    $3 = ($2|0)<(0);
    do {
     if ($3) {
      $4 = HEAP32[$s>>2]|0;
      HEAP32[$vararg_buffer1>>2] = $i$04;
      $5 = (_fcntl($4,0,$vararg_buffer1)|0);
      $6 = ($5|0)<(0);
      if ($6) {
       $$ph = -1;
       break L2;
      }
      $9 = ($5|0)==($i$04|0);
      if ($9) {
       $10 = (($istmp) + ($i$04<<2)|0);
       HEAP32[$10>>2] = 1;
       break;
      } else {
       (_close($5)|0);
       break;
      }
     }
    } while(0);
    $11 = (($i$04) + 1)|0;
    $12 = ($11|0)<(3);
    if ($12) {
     $i$04 = $11;
    } else {
     $$lcssa = $11;
     label = 9;
     break;
    }
   }
   if ((label|0) == 9) {
    $13 = ($$lcssa|0)==(3);
    if ($13) {
     $14 = (_fork()|0);
     $15 = ($14|0)==(0);
     if ($15) {
      $16 = HEAP32[$m>>2]|0;
      (_close($16)|0);
      (_setsid()|0);
      $17 = HEAP32[$s>>2]|0;
      HEAP32[$vararg_buffer3>>2] = 0;
      (_ioctl($17,21518,$vararg_buffer3)|0);
      $18 = HEAP32[$s>>2]|0;
      (_dup2($18,0)|0);
      $19 = HEAP32[$s>>2]|0;
      (_dup2($19,1)|0);
      $20 = HEAP32[$s>>2]|0;
      (_dup2($20,2)|0);
      $21 = HEAP32[$s>>2]|0;
      $22 = ($21|0)>(2);
      if (!($22)) {
       $$0 = 0;
       break;
      }
      (_close($21)|0);
      $$0 = 0;
      break;
     } else {
      $$ph = $14;
     }
    } else {
     $$ph = -1;
    }
   }
   $7 = HEAP32[$istmp>>2]|0;
   $8 = ($7|0)==(0);
   if (!($8)) {
    (_close(0)|0);
   }
   $23 = ((($istmp)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0);
   if (!($25)) {
    (_close(1)|0);
   }
   $27 = ((($istmp)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0);
   if (!($29)) {
    (_close(2)|0);
   }
   $30 = HEAP32[$s>>2]|0;
   (_close($30)|0);
   $31 = ($$ph|0)<(0);
   if ($31) {
    $26 = HEAP32[$m>>2]|0;
    (_close($26)|0);
    $$0 = $$ph;
   } else {
    $$0 = $$ph;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _getdomainname($name,$len) {
 $name = $name|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 (_uname($temp)|0);
 $0 = ($len|0)==(0);
 if ($0) {
  label = 3;
 } else {
  $1 = ((($temp)) + 325|0);
  $2 = (_strlen($1)|0);
  $3 = ($2>>>0)<($len>>>0);
  if ($3) {
   (_strcpy($name,$1)|0);
   $$0 = 0;
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $4 = (___errno_location()|0);
  HEAP32[$4>>2] = 22;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _getgrouplist($user,$gid,$groups,$ngroups) {
 $user = $user|0;
 $gid = $gid|0;
 $groups = $groups|0;
 $ngroups = $ngroups|0;
 var $$ = 0, $$0 = 0, $$02$ph12 = 0, $$lcssa24 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $groups$pn = 0, $i$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ngroups>>2]|0;
 $1 = ($0|0)<(1);
 if ($1) {
  $$0 = -1;
 } else {
  HEAP32[$groups>>2] = $gid;
  HEAP32[$ngroups>>2] = 1;
  _setgrent();
  $2 = (_getgrent()|0);
  $3 = ($2|0)==(0|0);
  L3: do {
   if (!($3)) {
    $27 = $2;$groups$pn = $groups;
    while(1) {
     $$02$ph12 = ((($groups$pn)) + 4|0);
     $7 = $27;
     L6: while(1) {
      $4 = HEAP32[$ngroups>>2]|0;
      $5 = ($4|0)==(2147483647);
      if ($5) {
       break L3;
      }
      $6 = ((($7)) + 12|0);
      $8 = HEAP32[$6>>2]|0;
      $9 = HEAP32[$8>>2]|0;
      $10 = ($9|0)==(0|0);
      L9: do {
       if (!($10)) {
        $$pre = $9;$i$05 = 0;
        while(1) {
         $11 = (_strcmp($user,$$pre)|0);
         $12 = ($11|0)==(0);
         if ($12) {
          break;
         }
         $13 = (($i$05) + 1)|0;
         $14 = (($8) + ($13<<2)|0);
         $15 = HEAP32[$14>>2]|0;
         $16 = ($15|0)==(0|0);
         if ($16) {
          break L9;
         } else {
          $$pre = $15;$i$05 = $13;
         }
        }
        $19 = (($4) + 1)|0;
        HEAP32[$ngroups>>2] = $19;
        $20 = ($19>>>0)>($0>>>0);
        if (!($20)) {
         $$lcssa24 = $7;
         break L6;
        }
       }
      } while(0);
      $17 = (_getgrent()|0);
      $18 = ($17|0)==(0|0);
      if ($18) {
       break L3;
      } else {
       $7 = $17;
      }
     }
     $21 = ((($$lcssa24)) + 8|0);
     $22 = HEAP32[$21>>2]|0;
     HEAP32[$$02$ph12>>2] = $22;
     $23 = (_getgrent()|0);
     $24 = ($23|0)==(0|0);
     if ($24) {
      break;
     } else {
      $27 = $23;$groups$pn = $$02$ph12;
     }
    }
   }
  } while(0);
  _endgrent();
  $25 = HEAP32[$ngroups>>2]|0;
  $26 = ($25>>>0)>($0>>>0);
  $$ = $26 ? -1 : $25;
  $$0 = $$;
 }
 return ($$0|0);
}
function _gethostid() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _getopt($argc,$argv,$optstring) {
 $argc = $argc|0;
 $argv = $argv|0;
 $optstring = $optstring|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $c = 0, $d = 0, $i$0$lcssa = 0, $i$04 = 0, $k$0 = 0, $or$cond = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp + 4|0;
 $d = sp;
 $0 = HEAP32[7224>>2]|0;
 $1 = ($0|0)==(0);
 $2 = HEAP32[7232>>2]|0;
 $3 = ($2|0)!=(0);
 $or$cond = $1 | $3;
 if ($or$cond) {
  HEAP32[7232>>2] = 0;
  HEAP32[7236>>2] = 0;
  HEAP32[7224>>2] = 1;
  $4 = 1;
 } else {
  $4 = $0;
 }
 $5 = ($4|0)<($argc|0);
 L4: do {
  if ($5) {
   $6 = (($argv) + ($4<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = HEAP8[$7>>0]|0;
    $10 = ($9<<24>>24)==(45);
    if ($10) {
     $11 = ((($7)) + 1|0);
     $12 = HEAP8[$11>>0]|0;
     switch ($12<<24>>24) {
     case 0:  {
      $$0 = -1;
      break L4;
      break;
     }
     case 45:  {
      $13 = ((($7)) + 2|0);
      $14 = HEAP8[$13>>0]|0;
      $15 = ($14<<24>>24)==(0);
      if ($15) {
       $16 = (($4) + 1)|0;
       HEAP32[7224>>2] = $16;
       $$0 = -1;
       break L4;
      }
      break;
     }
     default: {
     }
     }
     $17 = HEAP32[7236>>2]|0;
     $18 = ($17|0)==(0);
     if ($18) {
      HEAP32[7236>>2] = 1;
      $20 = 1;
     } else {
      $20 = $17;
     }
     $19 = (($7) + ($20)|0);
     $21 = (_mbtowc($c,$19,4)|0);
     $22 = ($21|0)<(0);
     if ($22) {
      HEAP32[$c>>2] = 65533;
      $28 = 65533;$k$0 = 1;
     } else {
      $$pre = HEAP32[$c>>2]|0;
      $28 = $$pre;$k$0 = $21;
     }
     $23 = HEAP32[7224>>2]|0;
     $24 = (($argv) + ($23<<2)|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = HEAP32[7236>>2]|0;
     $27 = (($25) + ($26)|0);
     HEAP32[7240>>2] = $28;
     $29 = (($26) + ($k$0))|0;
     HEAP32[7236>>2] = $29;
     $30 = (($25) + ($29)|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $33 = (($23) + 1)|0;
      HEAP32[7224>>2] = $33;
      HEAP32[7236>>2] = 0;
     }
     $34 = (_mbtowc($d,$optstring,4)|0);
     $35 = ($34|0)==(0);
     L22: do {
      if ($35) {
       $i$0$lcssa = 0;
      } else {
       $39 = $34;$i$04 = 0;
       while(1) {
        $36 = HEAP32[$d>>2]|0;
        $37 = HEAP32[$c>>2]|0;
        $38 = ($36|0)==($37|0);
        if ($38) {
         $i$0$lcssa = $i$04;
         break L22;
        }
        $40 = ($39|0)<(1);
        $41 = $40 ? 1 : $39;
        $42 = (($41) + ($i$04))|0;
        $43 = (($optstring) + ($42)|0);
        $44 = (_mbtowc($d,$43,4)|0);
        $45 = ($44|0)==(0);
        if ($45) {
         $i$0$lcssa = $42;
         break;
        } else {
         $39 = $44;$i$04 = $42;
        }
       }
      }
     } while(0);
     $46 = HEAP32[$d>>2]|0;
     $47 = HEAP32[$c>>2]|0;
     $48 = ($46|0)==($47|0);
     if (!($48)) {
      $49 = HEAP8[$optstring>>0]|0;
      $50 = ($49<<24>>24)!=(58);
      $51 = HEAP32[7228>>2]|0;
      $52 = ($51|0)!=(0);
      $or$cond3 = $50 & $52;
      if (!($or$cond3)) {
       $$0 = 63;
       break;
      }
      $53 = HEAP32[$argv>>2]|0;
      $54 = (_strlen($53)|0);
      (_write(2,$53,$54)|0);
      (_write(2,174970,18)|0);
      (_write(2,$27,$k$0)|0);
      (_write(2,180197,1)|0);
      $$0 = 63;
      break;
     }
     $55 = (($i$0$lcssa) + 1)|0;
     $56 = (($optstring) + ($55)|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = ($57<<24>>24)==(58);
     if ($58) {
      $59 = HEAP32[7224>>2]|0;
      $60 = ($59|0)<($argc|0);
      if ($60) {
       $67 = (($59) + 1)|0;
       HEAP32[7224>>2] = $67;
       $68 = (($argv) + ($59<<2)|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = HEAP32[7236>>2]|0;
       $71 = (($69) + ($70)|0);
       HEAP32[7244>>2] = $71;
       HEAP32[7236>>2] = 0;
       $$0 = $46;
       break;
      }
      $61 = HEAP8[$optstring>>0]|0;
      $62 = ($61<<24>>24)==(58);
      if ($62) {
       $$0 = 58;
      } else {
       $63 = HEAP32[7228>>2]|0;
       $64 = ($63|0)==(0);
       if ($64) {
        $$0 = 63;
       } else {
        $65 = HEAP32[$argv>>2]|0;
        $66 = (_strlen($65)|0);
        (_write(2,$65,$66)|0);
        (_write(2,174989,31)|0);
        (_write(2,$27,$k$0)|0);
        (_write(2,180197,1)|0);
        $$0 = 63;
       }
      }
     } else {
      $$0 = $46;
     }
    } else {
     $$0 = -1;
    }
   }
  } else {
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _getopt_long($argc,$argv,$optstring,$longopts,$idx) {
 $argc = $argc|0;
 $argv = $argv|0;
 $optstring = $optstring|0;
 $longopts = $longopts|0;
 $idx = $idx|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___getopt_long($argc,$argv,$optstring,$longopts,$idx,0)|0);
 return ($0|0);
}
function _getopt_long_only($argc,$argv,$optstring,$longopts,$idx) {
 $argc = $argc|0;
 $argv = $argv|0;
 $optstring = $optstring|0;
 $longopts = $longopts|0;
 $idx = $idx|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___getopt_long($argc,$argv,$optstring,$longopts,$idx,1)|0);
 return ($0|0);
}
function _getpriority($which,$who) {
 $which = $which|0;
 $who = $who|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $which;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $who;
 $0 = (___syscall96(96,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 $2 = ($1|0)<(0);
 $3 = (20 - ($1))|0;
 $$0 = $2 ? $1 : $3;
 STACKTOP = sp;return ($$0|0);
}
function _getresgid($rgid,$egid,$sgid) {
 $rgid = $rgid|0;
 $egid = $egid|0;
 $sgid = $sgid|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $rgid;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $egid;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $sgid;
 $0 = (___syscall211(211,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _getresuid($ruid,$euid,$suid) {
 $ruid = $ruid|0;
 $euid = $euid|0;
 $suid = $suid|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $ruid;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $euid;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $suid;
 $0 = (___syscall209(209,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _getrlimit($resource,$rlim) {
 $resource = $resource|0;
 $rlim = $rlim|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $k_rlim = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $k_rlim = sp + 24|0;
 HEAP32[$vararg_buffer>>2] = 0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $resource;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 0;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $rlim;
 $0 = (___syscall340(340,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = $rlim;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) + 4)|0;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)==(-1);
  $10 = ($8|0)==(-1);
  $11 = $9 & $10;
  if ($11) {
   $12 = $rlim;
   $13 = $12;
   HEAP32[$13>>2] = -1;
   $14 = (($12) + 4)|0;
   $15 = $14;
   HEAP32[$15>>2] = -1;
  }
  $16 = ((($rlim)) + 8|0);
  $17 = $16;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = ($19|0)==(-1);
  $24 = ($22|0)==(-1);
  $25 = $23 & $24;
  if ($25) {
   $26 = $16;
   $27 = $26;
   HEAP32[$27>>2] = -1;
   $28 = (($26) + 4)|0;
   $29 = $28;
   HEAP32[$29>>2] = -1;
   $$0 = 0;
  } else {
   $$0 = 0;
  }
 } else {
  $30 = (___errno_location()|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(38);
  if ($32) {
   HEAP32[$vararg_buffer4>>2] = $resource;
   $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $k_rlim;
   $33 = (___syscall191(191,($vararg_buffer4|0))|0);
   $34 = (___syscall_ret($33)|0);
   $35 = ($34|0)<(0);
   if ($35) {
    $$0 = -1;
   } else {
    $36 = HEAP32[$k_rlim>>2]|0;
    $37 = ($36|0)==(-1);
    $38 = $37 ? -1 : $36;
    $39 = $37 ? -1 : 0;
    $40 = $rlim;
    $41 = $40;
    HEAP32[$41>>2] = $38;
    $42 = (($40) + 4)|0;
    $43 = $42;
    HEAP32[$43>>2] = $39;
    $44 = ((($k_rlim)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45|0)==(-1);
    $47 = $46 ? -1 : $45;
    $48 = $46 ? -1 : 0;
    $49 = ((($rlim)) + 8|0);
    $50 = $49;
    $51 = $50;
    HEAP32[$51>>2] = $47;
    $52 = (($50) + 4)|0;
    $53 = $52;
    HEAP32[$53>>2] = $48;
    if ($37) {
     $54 = $rlim;
     $55 = $54;
     HEAP32[$55>>2] = -1;
     $56 = (($54) + 4)|0;
     $57 = $56;
     HEAP32[$57>>2] = -1;
    }
    if ($46) {
     $58 = $49;
     $59 = $58;
     HEAP32[$59>>2] = -1;
     $60 = (($58) + 4)|0;
     $61 = $60;
     HEAP32[$61>>2] = -1;
     $$0 = 0;
    } else {
     $$0 = 0;
    }
   }
  } else {
   $$0 = $1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _getrusage($who,$ru) {
 $who = $who|0;
 $ru = $ru|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $who;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $ru;
 $0 = (___syscall77(77,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _getsubopt($opt,$keys,$val) {
 $opt = $opt|0;
 $keys = $keys|0;
 $val = $val|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$02 = 0, $i$02$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$opt>>2]|0;
 HEAP32[$val>>2] = 0;
 $1 = (_strchr($0,44)|0);
 HEAP32[$opt>>2] = $1;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $4 = (_strlen($0)|0);
  $5 = (($0) + ($4)|0);
  HEAP32[$opt>>2] = $5;
 } else {
  $3 = ((($1)) + 1|0);
  HEAP32[$opt>>2] = $3;
  HEAP8[$1>>0] = 0;
 }
 $6 = HEAP32[$keys>>2]|0;
 $7 = ($6|0)==(0|0);
 L5: do {
  if ($7) {
   $$0 = -1;
  } else {
   $8 = $6;$i$02 = 0;
   L6: while(1) {
    $9 = (_strlen($8)|0);
    $10 = (_strncmp($8,$0,$9)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $12 = (($0) + ($9)|0);
     $13 = HEAP8[$12>>0]|0;
     switch ($13<<24>>24) {
     case 0:  {
      $$0 = $i$02;
      break L5;
      break;
     }
     case 61:  {
      $$lcssa = $12;$i$02$lcssa = $i$02;
      break L6;
      break;
     }
     default: {
     }
     }
    }
    $14 = (($i$02) + 1)|0;
    $15 = (($keys) + ($14<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(0|0);
    if ($17) {
     $$0 = -1;
     break L5;
    } else {
     $8 = $16;$i$02 = $14;
    }
   }
   HEAP32[$val>>2] = $$lcssa;
   $$0 = $i$02$lcssa;
  }
 } while(0);
 return ($$0|0);
}
function _get_current_dir_name() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0;
 var $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a = sp + 76|0;
 $b = sp;
 $0 = (_getenv((175021|0))|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  label = 8;
 } else {
  $2 = HEAP8[$0>>0]|0;
  $3 = ($2<<24>>24)==(0);
  if ($3) {
   label = 8;
  } else {
   $4 = (_stat($0,$a)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    $6 = (_stat(180290,$b)|0);
    $7 = ($6|0)==(0);
    if ($7) {
     $8 = HEAP32[$a>>2]|0;
     $9 = HEAP32[$b>>2]|0;
     $10 = ($8|0)==($9|0);
     if ($10) {
      $11 = ((($a)) + 72|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = ((($b)) + 72|0);
      $14 = HEAP32[$13>>2]|0;
      $15 = ($12|0)==($14|0);
      if ($15) {
       $16 = (FUNCTION_TABLE_ii[7 & 63]($0)|0);
       $$0 = $16;
      } else {
       label = 8;
      }
     } else {
      label = 8;
     }
    } else {
     label = 8;
    }
   } else {
    label = 8;
   }
  }
 }
 if ((label|0) == 8) {
  $17 = (_getcwd(0,0)|0);
  $$0 = $17;
 }
 STACKTOP = sp;return ($$0|0);
}
function _initgroups($user,$gid) {
 $user = $user|0;
 $gid = $gid|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $count = 0, $groups = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $groups = sp + 8|0;
 $count = sp;
 HEAP32[$count>>2] = 32;
 $0 = (_getgrouplist($user,$gid,$groups,$count)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = HEAP32[$count>>2]|0;
  $3 = (_setgroups(($2|0),($groups|0))|0);
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _ioctl($fd,$req,$varargs) {
 $fd = $fd|0;
 $req = $req|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ap = sp + 16|0;
 HEAP32[$ap>>2] = $varargs;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 4|0);
 $expanded2 = $1;
 $expanded = (($expanded2) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 4|0);
 $expanded6 = $3;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $4 = $2 & $expanded4;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $arglist_next = ((($5)) + 4|0);
 HEAP32[$ap>>2] = $arglist_next;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $req;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $6;
 $7 = (___syscall54(54,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 STACKTOP = sp;return ($8|0);
}
function _lockf($fd,$op,$size) {
 $fd = $fd|0;
 $op = $op|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $l = sp + 24|0;
 HEAP16[$l>>1] = 1;
 $0 = ((($l)) + 2|0);
 HEAP16[$0>>1] = 1;
 $1 = ((($l)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($l)) + 8|0);
 HEAP32[$2>>2] = $size;
 $3 = ((($l)) + 12|0);
 HEAP32[$3>>2] = 0;
 switch ($op|0) {
 case 3:  {
  HEAP16[$l>>1] = 0;
  HEAP32[$vararg_buffer>>2] = $l;
  $4 = (_fcntl($fd,12,$vararg_buffer)|0);
  $5 = ($4|0)<(0);
  if ($5) {
   $$0 = -1;
  } else {
   $6 = HEAP16[$l>>1]|0;
   $7 = ($6<<16>>16)==(2);
   if ($7) {
    $$0 = 0;
   } else {
    $8 = HEAP32[$3>>2]|0;
    $9 = (_getpid()|0);
    $10 = ($8|0)==($9|0);
    if ($10) {
     $$0 = 0;
    } else {
     $11 = (___errno_location()|0);
     HEAP32[$11>>2] = 13;
     $$0 = -1;
    }
   }
  }
  break;
 }
 case 0:  {
  HEAP16[$l>>1] = 2;
  label = 7;
  break;
 }
 case 2:  {
  label = 7;
  break;
 }
 case 1:  {
  HEAP32[$vararg_buffer4>>2] = $l;
  $13 = (_fcntl($fd,14,$vararg_buffer4)|0);
  $$0 = $13;
  break;
 }
 default: {
  $14 = (___errno_location()|0);
  HEAP32[$14>>2] = 22;
  $$0 = -1;
 }
 }
 if ((label|0) == 7) {
  HEAP32[$vararg_buffer1>>2] = $l;
  $12 = (_fcntl($fd,13,$vararg_buffer1)|0);
  $$0 = $12;
 }
 STACKTOP = sp;return ($$0|0);
}
function _setmntent($name,$mode) {
 $name = $name|0;
 $mode = $mode|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fopen($name,$mode)|0);
 return ($0|0);
}
function _endmntent($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_fclose($f)|0);
 return 1;
}
function _getmntent_r($f,$mnt,$linebuf,$buflen) {
 $f = $f|0;
 $mnt = $mnt|0;
 $linebuf = $linebuf|0;
 $buflen = $buflen|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $n = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $n = sp + 48|0;
 $0 = ((($mnt)) + 16|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($mnt)) + 20|0);
 HEAP32[$1>>2] = 0;
 (_fgets($linebuf,$buflen,$f)|0);
 $2 = (_feof($f)|0);
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $4 = ((($n)) + 4|0);
   $5 = ((($n)) + 8|0);
   $6 = ((($n)) + 12|0);
   $7 = ((($n)) + 16|0);
   $8 = ((($n)) + 20|0);
   $9 = ((($n)) + 24|0);
   $10 = ((($n)) + 28|0);
   while(1) {
    $11 = (_ferror($f)|0);
    $12 = ($11|0)==(0);
    if (!($12)) {
     $$0 = 0;
     break L1;
    }
    $13 = (_strchr($linebuf,10)|0);
    $14 = ($13|0)==(0|0);
    if ($14) {
     label = 5;
     break;
    }
    HEAP32[$vararg_buffer1>>2] = $n;
    $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr3>>2] = $4;
    $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
    HEAP32[$vararg_ptr4>>2] = $5;
    $vararg_ptr5 = ((($vararg_buffer1)) + 12|0);
    HEAP32[$vararg_ptr5>>2] = $6;
    $vararg_ptr6 = ((($vararg_buffer1)) + 16|0);
    HEAP32[$vararg_ptr6>>2] = $7;
    $vararg_ptr7 = ((($vararg_buffer1)) + 20|0);
    HEAP32[$vararg_ptr7>>2] = $8;
    $vararg_ptr8 = ((($vararg_buffer1)) + 24|0);
    HEAP32[$vararg_ptr8>>2] = $9;
    $vararg_ptr9 = ((($vararg_buffer1)) + 28|0);
    HEAP32[$vararg_ptr9>>2] = $10;
    $vararg_ptr10 = ((($vararg_buffer1)) + 32|0);
    HEAP32[$vararg_ptr10>>2] = $0;
    $vararg_ptr11 = ((($vararg_buffer1)) + 36|0);
    HEAP32[$vararg_ptr11>>2] = $1;
    $16 = (_sscanf($linebuf,175037,$vararg_buffer1)|0);
    $17 = ($16|0)<(2);
    if (!($17)) {
     $18 = HEAP32[$n>>2]|0;
     $19 = (($linebuf) + ($18)|0);
     $20 = HEAP8[$19>>0]|0;
     $21 = ($20<<24>>24)==(35);
     if (!($21)) {
      $$lcssa = $19;
      label = 9;
      break;
     }
    }
    (_fgets($linebuf,$buflen,$f)|0);
    $22 = (_feof($f)|0);
    $23 = ($22|0)==(0);
    if (!($23)) {
     $$0 = 0;
     break L1;
    }
   }
   if ((label|0) == 5) {
    (_fscanf($f,175025,$vararg_buffer)|0);
    $15 = (___errno_location()|0);
    HEAP32[$15>>2] = 34;
    $$0 = 0;
    break;
   }
   else if ((label|0) == 9) {
    $24 = HEAP32[$4>>2]|0;
    $25 = (($linebuf) + ($24)|0);
    HEAP8[$25>>0] = 0;
    $26 = HEAP32[$6>>2]|0;
    $27 = (($linebuf) + ($26)|0);
    HEAP8[$27>>0] = 0;
    $28 = HEAP32[$8>>2]|0;
    $29 = (($linebuf) + ($28)|0);
    HEAP8[$29>>0] = 0;
    $30 = HEAP32[$10>>2]|0;
    $31 = (($linebuf) + ($30)|0);
    HEAP8[$31>>0] = 0;
    HEAP32[$mnt>>2] = $$lcssa;
    $32 = HEAP32[$5>>2]|0;
    $33 = (($linebuf) + ($32)|0);
    $34 = ((($mnt)) + 4|0);
    HEAP32[$34>>2] = $33;
    $35 = HEAP32[$7>>2]|0;
    $36 = (($linebuf) + ($35)|0);
    $37 = ((($mnt)) + 8|0);
    HEAP32[$37>>2] = $36;
    $38 = HEAP32[$9>>2]|0;
    $39 = (($linebuf) + ($38)|0);
    $40 = ((($mnt)) + 12|0);
    HEAP32[$40>>2] = $39;
    $$0 = $mnt;
    break;
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _getmntent($f) {
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_getmntent_r($f,14828,175076,256)|0);
 return ($0|0);
}
function _addmntent($f,$mnt) {
 $f = $f|0;
 $mnt = $mnt|0;
 var $$0 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_fseek($f,0,2)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[$mnt>>2]|0;
  $3 = ((($mnt)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($mnt)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($mnt)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($mnt)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($mnt)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $2;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $4;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $6;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $8;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $10;
  $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
  HEAP32[$vararg_ptr5>>2] = $12;
  $13 = (_fprintf($f,175332,$vararg_buffer)|0);
  $$lobit = $13 >>> 31;
  $$0 = $$lobit;
 } else {
  $$0 = 1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _hasmntopt($mnt,$opt) {
 $mnt = $mnt|0;
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($mnt)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_strstr($1,$opt)|0);
 return ($2|0);
}
function _nftw($path,$fn,$fd_limit,$flags) {
 $path = $path|0;
 $fn = $fn|0;
 $fd_limit = $fd_limit|0;
 $flags = $flags|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $cs = 0, $pathbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cs = sp;
 $pathbuf = sp + 4|0;
 $0 = ($fd_limit|0)<(1);
 do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = (_strlen($path)|0);
   $2 = ($1>>>0)>(4096);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 36;
    $$0 = -1;
    break;
   } else {
    $4 = (($1) + 1)|0;
    _memcpy(($pathbuf|0),($path|0),($4|0))|0;
    (_pthread_setcancelstate(1,($cs|0))|0);
    $5 = (_do_nftw($pathbuf,$fn,$fd_limit,$flags,0)|0);
    $6 = HEAP32[$cs>>2]|0;
    (_pthread_setcancelstate(($6|0),(0|0))|0);
    $$0 = $5;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _openpty($m,$s,$name,$tio,$ws) {
 $m = $m|0;
 $s = $s|0;
 $name = $name|0;
 $tio = $tio|0;
 $ws = $ws|0;
 var $$0 = 0, $$name = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $n = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $n = sp + 44|0;
 $buf = sp + 48|0;
 HEAP32[$n>>2] = 0;
 $0 = (_open(175373,258,$vararg_buffer)|0);
 HEAP32[$m>>2] = $0;
 $1 = ($0|0)<(0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   HEAP32[$vararg_buffer1>>2] = $n;
   $2 = (_ioctl($0,1074025521,$vararg_buffer1)|0);
   $3 = ($2|0)==(0);
   if ($3) {
    $4 = HEAP32[$m>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $n;
    $5 = (_ioctl($4,-2147199952,$vararg_buffer3)|0);
    $6 = ($5|0)==(0);
    if ($6) {
     $8 = ($name|0)==(0|0);
     $$name = $8 ? $buf : $name;
     $9 = HEAP32[$n>>2]|0;
     HEAP32[$vararg_buffer6>>2] = $9;
     (_snprintf($$name,20,175383,$vararg_buffer6)|0);
     $10 = (_open($$name,258,$vararg_buffer9)|0);
     HEAP32[$s>>2] = $10;
     $11 = ($10|0)<(0);
     if ($11) {
      $12 = HEAP32[$m>>2]|0;
      (_close($12)|0);
      $$0 = -1;
      break;
     }
     $13 = ($tio|0)==(0|0);
     if (!($13)) {
      (_tcsetattr($10,0,$tio)|0);
     }
     $14 = ($ws|0)==(0|0);
     if ($14) {
      $$0 = 0;
      break;
     }
     $15 = HEAP32[$s>>2]|0;
     HEAP32[$vararg_buffer11>>2] = $ws;
     (_ioctl($15,21524,$vararg_buffer11)|0);
     $$0 = 0;
     break;
    }
   }
   $7 = HEAP32[$m>>2]|0;
   (_close($7)|0);
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ptsname($fd) {
 $fd = $fd|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ptsname_r($fd,175351,22)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 175351;
 } else {
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _posix_openpt($flags) {
 $flags = $flags|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_open(175373,$flags,$vararg_buffer)|0);
 STACKTOP = sp;return ($0|0);
}
function _grantpt($fd) {
 $fd = $fd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _unlockpt($fd) {
 $fd = $fd|0;
 var $0 = 0, $unlock = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $unlock = sp + 4|0;
 HEAP32[$unlock>>2] = 0;
 HEAP32[$vararg_buffer>>2] = $unlock;
 $0 = (_ioctl($fd,1074025521,$vararg_buffer)|0);
 STACKTOP = sp;return ($0|0);
}
function ___ptsname_r($fd,$buf,$len) {
 $fd = $fd|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $len$ = 0, $pty = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $pty = sp + 20|0;
 $0 = ($buf|0)!=(0|0);
 $len$ = $0 ? $len : 0;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = -2147199952;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $pty;
 $1 = (___syscall54(54,($vararg_buffer|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $4 = HEAP32[$pty>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $4;
  $5 = (_snprintf($buf,$len$,175383,$vararg_buffer3)|0);
  $6 = ($5>>>0)<($len$>>>0);
  $$ = $6 ? 0 : 34;
  $$0 = $$;
 } else {
  $3 = (0 - ($1))|0;
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _realpath($filename,$resolved) {
 $filename = $filename|0;
 $resolved = $resolved|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $st1 = 0, $st2 = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $st1 = sp + 96|0;
 $st2 = sp + 20|0;
 $buf = sp + 4272|0;
 $tmp = sp + 176|0;
 $0 = ($filename|0)==(0|0);
 do {
  if ($0) {
   $1 = (___errno_location()|0);
   HEAP32[$1>>2] = 22;
   $$0 = 0;
  } else {
   HEAP32[$vararg_buffer>>2] = $filename;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 2656256;
   $2 = (___syscall5(5,($vararg_buffer|0))|0);
   $3 = (___syscall_ret($2)|0);
   $4 = ($3|0)<(0);
   if ($4) {
    $$0 = 0;
   } else {
    ___procfdname($buf,$3);
    $5 = (_readlink($buf,$tmp,4095)|0);
    $6 = ($5|0)<(0);
    if (!($6)) {
     $7 = (($tmp) + ($5)|0);
     HEAP8[$7>>0] = 0;
     (_fstat($3,$st1)|0);
     $8 = (_stat($tmp,$st2)|0);
     $9 = ($8|0)<(0);
     if (!($9)) {
      $10 = HEAP32[$st1>>2]|0;
      $11 = HEAP32[$st2>>2]|0;
      $12 = ($10|0)==($11|0);
      if ($12) {
       $13 = ((($st1)) + 72|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = ((($st2)) + 72|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = ($14|0)==($16|0);
       if ($17) {
        HEAP32[$vararg_buffer2>>2] = $3;
        (___syscall6(6,($vararg_buffer2|0))|0);
        $20 = ($resolved|0)==(0|0);
        if ($20) {
         $22 = (FUNCTION_TABLE_ii[7 & 63]($tmp)|0);
         $$0 = $22;
         break;
        } else {
         $21 = (_strcpy($resolved,$tmp)|0);
         $$0 = $21;
         break;
        }
       }
      }
      $18 = ($8|0)==(0);
      if ($18) {
       $19 = (___errno_location()|0);
       HEAP32[$19>>2] = 40;
      }
     }
    }
    HEAP32[$vararg_buffer5>>2] = $3;
    (___syscall6(6,($vararg_buffer5|0))|0);
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _setdomainname($name,$len) {
 $name = $name|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $name;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $len;
 $0 = (___syscall121(121,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _setpriority($which,$who,$prio) {
 $which = $which|0;
 $who = $who|0;
 $prio = $prio|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $which;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $who;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $prio;
 $0 = (___syscall97(97,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function ___setrlimit($resource,$rlim) {
 $resource = $resource|0;
 $rlim = $rlim|0;
 var $$0 = 0, $$off01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $extract$t$ = 0, $k_rlim = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $k_rlim = sp + 24|0;
 HEAP32[$vararg_buffer>>2] = 0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $resource;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $rlim;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 0;
 $0 = (___syscall340(340,($vararg_buffer|0))|0);
 $1 = ($0|0)==(-38);
 if ($1) {
  $2 = $rlim;
  $3 = $2;
  $4 = HEAP32[$3>>2]|0;
  $5 = (($2) + 4)|0;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7>>>0)<(0);
  $9 = ($4>>>0)<(4294967295);
  $10 = ($7|0)==(0);
  $11 = $10 & $9;
  $12 = $8 | $11;
  $extract$t$ = $12 ? $4 : -1;
  HEAP32[$k_rlim>>2] = $extract$t$;
  $13 = ((($rlim)) + 8|0);
  $14 = $13;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + 4)|0;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19>>>0)<(0);
  $21 = ($16>>>0)<(4294967295);
  $22 = ($19|0)==(0);
  $23 = $22 & $21;
  $24 = $20 | $23;
  $$off01 = $24 ? $16 : -1;
  $25 = ((($k_rlim)) + 4|0);
  HEAP32[$25>>2] = $$off01;
  HEAP32[$vararg_buffer4>>2] = $resource;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $k_rlim;
  $26 = (___syscall75(75,($vararg_buffer4|0))|0);
  $$0 = $26;
 } else {
  $$0 = $0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _setrlimit($resource,$rlim) {
 $resource = $resource|0;
 $rlim = $rlim|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 HEAP32[$c>>2] = $rlim;
 $0 = ((($c)) + 4|0);
 HEAP32[$0>>2] = $resource;
 $1 = ((($c)) + 8|0);
 HEAP32[$1>>2] = 0;
 ___synccall(8,$c);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
 } else {
  $4 = (___errno_location()|0);
  HEAP32[$4>>2] = $2;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _setlogmask($maskpri) {
 $maskpri = $maskpri|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $success = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($maskpri|0)==(0);
 if ($0) {
  $3 = HEAP32[14852>>2]|0;
  $$0 = $3;
 } else {
  while(1) {
   $1 = HEAP32[14852>>2]|0;
   $2 = HEAP32[14852>>2]|0;if (($2|0) == ($1|0)) HEAP32[14852>>2] = $maskpri;
   $success = ($2|0)==($1|0);
   if ($success) {
    $$0 = $1;
    break;
   }
  }
 }
 return ($$0|0);
}
function _closelog() {
 var $0 = 0, $1 = 0, $cs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cs = sp;
 (_pthread_setcancelstate(1,($cs|0))|0);
 ___lock((14856|0));
 $0 = HEAP32[14864>>2]|0;
 (_close($0)|0);
 HEAP32[14864>>2] = -1;
 ___unlock((14856|0));
 $1 = HEAP32[$cs>>2]|0;
 (_pthread_setcancelstate(($1|0),(0|0))|0);
 STACKTOP = sp;return;
}
function _openlog($ident,$opt,$facility) {
 $ident = $ident|0;
 $opt = $opt|0;
 $facility = $facility|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $cs = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cs = sp;
 (_pthread_setcancelstate(1,($cs|0))|0);
 ___lock((14856|0));
 $0 = ($ident|0)==(0|0);
 if ($0) {
  HEAP8[175395>>0] = 0;
 } else {
  $1 = (_strnlen($ident,31)|0);
  _memcpy((175395|0),($ident|0),($1|0))|0;
  $2 = (175395 + ($1)|0);
  HEAP8[$2>>0] = 0;
 }
 HEAP32[14868>>2] = $opt;
 HEAP32[14872>>2] = $facility;
 $3 = $opt & 8;
 $4 = ($3|0)!=(0);
 $5 = HEAP32[14864>>2]|0;
 $6 = ($5|0)<(0);
 $or$cond = $4 & $6;
 if ($or$cond) {
  ___openlog();
 }
 ___unlock((14856|0));
 $7 = HEAP32[$cs>>2]|0;
 (_pthread_setcancelstate(($7|0),(0|0))|0);
 STACKTOP = sp;return;
}
function ___vsyslog($priority,$message,$ap) {
 $priority = $priority|0;
 $message = $message|0;
 $ap = $ap|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $buf$i = 0, $cs = 0, $l$0$i = 0, $l$1$i = 0, $now$i = 0, $or$cond = 0, $timebuf$i = 0, $tm$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $timebuf$i = sp + 336|0;
 $now$i = sp + 72|0;
 $tm$i = sp + 28|0;
 $buf$i = sp + 80|0;
 $cs = sp + 24|0;
 $0 = HEAP32[14852>>2]|0;
 $1 = $priority & 7;
 $2 = 1 << $1;
 $3 = $0 & $2;
 $4 = ($3|0)==(0);
 $5 = ($priority>>>0)>(1023);
 $or$cond = $5 | $4;
 if (!($or$cond)) {
  (_pthread_setcancelstate(1,($cs|0))|0);
  ___lock((14856|0));
  $6 = (___errno_location()|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[14864>>2]|0;
  $9 = ($8|0)<(0);
  if ($9) {
   ___openlog();
   $10 = HEAP32[14864>>2]|0;
   $11 = ($10|0)<(0);
   if (!($11)) {
    label = 4;
   }
  } else {
   label = 4;
  }
  if ((label|0) == 4) {
   $12 = $priority & 1016;
   $13 = ($12|0)==(0);
   $14 = HEAP32[14872>>2]|0;
   $15 = $13 ? $14 : 0;
   $$0$i = $15 | $priority;
   $16 = (_time((0|0))|0);
   HEAP32[$now$i>>2] = $16;
   (_gmtime_r(($now$i|0),($tm$i|0))|0);
   (_strftime(($timebuf$i|0),16,(175427|0),($tm$i|0))|0);
   $17 = HEAP32[14868>>2]|0;
   $18 = $17 & 1;
   $19 = ($18|0)==(0);
   if ($19) {
    $21 = 0;
   } else {
    $20 = (_getpid()|0);
    $21 = $20;
   }
   $22 = ($21|0)==(0);
   $23 = $22&1;
   $24 = (175436 + ($23)|0);
   $25 = (175438 + ($23)|0);
   HEAP32[$vararg_buffer>>2] = $$0$i;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $timebuf$i;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 175395;
   $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $24;
   $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
   HEAP32[$vararg_ptr4>>2] = $21;
   $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
   HEAP32[$vararg_ptr5>>2] = $25;
   $26 = (_snprintf($buf$i,256,175440,$vararg_buffer)|0);
   HEAP32[$6>>2] = $7;
   $27 = (($buf$i) + ($26)|0);
   $28 = (256 - ($26))|0;
   $29 = (_vsnprintf($27,$28,$message,$ap)|0);
   $30 = ($29|0)>(-1);
   if ($30) {
    $31 = ($29>>>0)<($28>>>0);
    $32 = (($29) + ($26))|0;
    $l$0$i = $31 ? $32 : 255;
    $33 = (($l$0$i) + -1)|0;
    $34 = (($buf$i) + ($33)|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = ($35<<24>>24)==(10);
    if ($36) {
     $l$1$i = $l$0$i;
    } else {
     $37 = (($l$0$i) + 1)|0;
     $38 = (($buf$i) + ($l$0$i)|0);
     HEAP8[$38>>0] = 10;
     $l$1$i = $37;
    }
    $39 = HEAP32[14864>>2]|0;
    (_send($39,$buf$i,$l$1$i,0)|0);
   }
  }
  ___unlock((14856|0));
  $40 = HEAP32[$cs>>2]|0;
  (_pthread_setcancelstate(($40|0),(0|0))|0);
 }
 STACKTOP = sp;return;
}
function _syslog($priority,$message,$varargs) {
 $priority = $priority|0;
 $message = $message|0;
 $varargs = $varargs|0;
 var $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 ___vsyslog($priority,$message,$ap);
 STACKTOP = sp;return;
}
function _uname($uts) {
 $uts = $uts|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $uts;
 $0 = (___syscall122(122,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _wordexp($s,$we,$flags) {
 $s = $s|0;
 $we = $we|0;
 $flags = $flags|0;
 var $$$i = 0, $$0$i = 0, $$dq$0$i = 0, $$i$0$i = 0, $$old1$i = 0, $$pre$i = 0, $$pre25$i = 0, $$sq$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond$i = 0, $cs = 0, $dq$016$i = 0, $dq$1$i = 0, $i$018$i = 0, $i$1$i = 0, $i$2$i = 0, $i$38$i = 0, $l$07$i = 0, $l$1$i = 0, $np$015$i = 0, $np$1$i = 0, $p$i = 0, $s$i$i = 0, $s$i2$i = 0, $set$i = 0, $sq$017$i = 0, $sq$1$i = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $wc$0$i = 0, $wv$0$i = 0, $wv$1$lcssa$i = 0, $wv$19$i = 0, $wv$2$i = 0, $wv$3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $s$i2$i = sp + 184|0;
 $s$i$i = sp + 180|0;
 $0 = sp + 176|0;
 $p$i = sp + 168|0;
 $set$i = sp + 40|0;
 $cs = sp + 32|0;
 (_pthread_setcancelstate(1,($cs|0))|0);
 $1 = $flags & 16;
 $2 = ($1|0)!=(0);
 $3 = $2 ? 180292 : 175460;
 $4 = $flags & 8;
 $5 = ($4|0)==(0);
 if (!($5)) {
  _wordfree($we);
 }
 $6 = $flags & 4;
 $7 = ($6|0)==(0);
 L4: do {
  if ($7) {
   label = 20;
  } else {
   $8 = HEAP8[$s>>0]|0;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    label = 20;
   } else {
    $11 = $8;$dq$016$i = 0;$i$018$i = 0;$np$015$i = 0;$sq$017$i = 0;
    while(1) {
     $10 = $11 << 24 >> 24;
     switch ($10|0) {
     case 92:  {
      $12 = ($sq$017$i|0)==(0);
      $13 = $12&1;
      $$i$0$i = (($13) + ($i$018$i))|0;
      $dq$1$i = $dq$016$i;$i$1$i = $$i$0$i;$np$1$i = $np$015$i;$sq$1$i = $sq$017$i;
      break;
     }
     case 39:  {
      $14 = ($dq$016$i|0)==(0);
      $15 = $14&1;
      $$sq$0$i = $15 ^ $sq$017$i;
      $dq$1$i = $dq$016$i;$i$1$i = $i$018$i;$np$1$i = $np$015$i;$sq$1$i = $$sq$0$i;
      break;
     }
     case 34:  {
      $16 = ($sq$017$i|0)==(0);
      $17 = $16&1;
      $$dq$0$i = $17 ^ $dq$016$i;
      $dq$1$i = $$dq$0$i;$i$1$i = $i$018$i;$np$1$i = $np$015$i;$sq$1$i = $sq$017$i;
      break;
     }
     case 40:  {
      $cond$i = ($np$015$i|0)==(0);
      if ($cond$i) {
       label = 13;
      } else {
       $18 = (($np$015$i) + 1)|0;
       $dq$1$i = $dq$016$i;$i$1$i = $i$018$i;$np$1$i = $18;$sq$1$i = $sq$017$i;
      }
      break;
     }
     case 41:  {
      $19 = ($np$015$i|0)==(0);
      if ($19) {
       label = 13;
      } else {
       $20 = (($np$015$i) + -1)|0;
       $dq$1$i = $dq$016$i;$i$1$i = $i$018$i;$np$1$i = $20;$sq$1$i = $sq$017$i;
      }
      break;
     }
     case 125: case 123: case 62: case 60: case 59: case 38: case 124: case 10:  {
      label = 13;
      break;
     }
     case 36:  {
      $24 = ($sq$017$i|0)==(0);
      if ($24) {
       $25 = (($i$018$i) + 1)|0;
       $26 = (($s) + ($25)|0);
       $27 = HEAP8[$26>>0]|0;
       $28 = ($27<<24>>24)==(40);
       if ($28) {
        $29 = (($i$018$i) + 2)|0;
        $30 = (($s) + ($29)|0);
        $31 = HEAP8[$30>>0]|0;
        $32 = ($31<<24>>24)==(40);
        if (!($32)) {
         $$0$i = 4;
         break L4;
        }
        $33 = (($np$015$i) + 2)|0;
        $dq$1$i = $dq$016$i;$i$1$i = $29;$np$1$i = $33;$sq$1$i = 0;
       } else {
        $dq$1$i = $dq$016$i;$i$1$i = $i$018$i;$np$1$i = $np$015$i;$sq$1$i = 0;
       }
      } else {
       $dq$1$i = $dq$016$i;$i$1$i = $i$018$i;$np$1$i = $np$015$i;$sq$1$i = $sq$017$i;
      }
      break;
     }
     case 96:  {
      $$old1$i = ($sq$017$i|0)==(0);
      if ($$old1$i) {
       $$0$i = 4;
       break L4;
      } else {
       $dq$1$i = $dq$016$i;$i$1$i = $i$018$i;$np$1$i = $np$015$i;$sq$1$i = $sq$017$i;
      }
      break;
     }
     default: {
      $dq$1$i = $dq$016$i;$i$1$i = $i$018$i;$np$1$i = $np$015$i;$sq$1$i = $sq$017$i;
     }
     }
     if ((label|0) == 13) {
      label = 0;
      $21 = $dq$016$i | $sq$017$i;
      $22 = $21 | $np$015$i;
      $23 = ($22|0)==(0);
      if ($23) {
       $$0$i = 2;
       break L4;
      } else {
       $dq$1$i = $dq$016$i;$i$1$i = $i$018$i;$np$1$i = $np$015$i;$sq$1$i = $sq$017$i;
      }
     }
     $34 = (($i$1$i) + 1)|0;
     $35 = (($s) + ($34)|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = ($36<<24>>24)==(0);
     if ($37) {
      label = 20;
      break L4;
     } else {
      $11 = $36;$dq$016$i = $dq$1$i;$i$018$i = $34;$np$015$i = $np$1$i;$sq$017$i = $sq$1$i;
     }
    }
   }
  }
 } while(0);
 L24: do {
  if ((label|0) == 20) {
   $38 = $flags & 2;
   $39 = ($38|0)!=(0);
   if ($39) {
    $40 = HEAP32[$we>>2]|0;
    $41 = ((($we)) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $wc$0$i = $40;$wv$0$i = $42;
   } else {
    $wc$0$i = 0;$wv$0$i = 0;
   }
   $43 = $flags & 1;
   $44 = ($43|0)!=(0);
   $45 = ((($we)) + 8|0);
   if ($44) {
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46>>>0)>(268435455);
    if (!($47)) {
     $48 = (($46) + ($wc$0$i))|0;
     $i$2$i = $48;
     label = 26;
    }
   } else {
    HEAP32[$45>>2] = 0;
    $i$2$i = $wc$0$i;
    label = 26;
   }
   do {
    if ((label|0) == 26) {
     $49 = (_pipe2($p$i,524288)|0);
     $50 = ($49|0)<(0);
     if (!($50)) {
      ___block_all_sigs(($set$i|0));
      $51 = (_fork()|0);
      ___restore_sigs(($set$i|0));
      $52 = ($51|0)<(0);
      if ($52) {
       $53 = HEAP32[$p$i>>2]|0;
       (_close($53)|0);
       $54 = ((($p$i)) + 4|0);
       $55 = HEAP32[$54>>2]|0;
       (_close($55)|0);
       break;
      }
      $56 = ($51|0)==(0);
      $57 = ((($p$i)) + 4|0);
      $58 = HEAP32[$57>>2]|0;
      if ($56) {
       $59 = ($58|0)==(1);
       if ($59) {
        HEAP32[$vararg_buffer>>2] = 0;
        (_fcntl(1,2,$vararg_buffer)|0);
       } else {
        (_dup2($58,1)|0);
       }
       HEAP32[$vararg_buffer1>>2] = 176160;
       $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
       HEAP32[$vararg_ptr4>>2] = 175472;
       $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
       HEAP32[$vararg_ptr5>>2] = 176157;
       $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
       HEAP32[$vararg_ptr6>>2] = $s;
       $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
       HEAP32[$vararg_ptr7>>2] = $3;
       $vararg_ptr8 = ((($vararg_buffer1)) + 20|0);
       HEAP32[$vararg_ptr8>>2] = 0;
       (_execl((176163|0),(176157|0),($vararg_buffer1|0))|0);
       __exit(1);
       // unreachable;
      }
      (_close($58)|0);
      $60 = HEAP32[$p$i>>2]|0;
      $61 = (FUNCTION_TABLE_iii[9 & 63]($60,175502)|0);
      $62 = ($61|0)==(0|0);
      if ($62) {
       $63 = HEAP32[$p$i>>2]|0;
       (_close($63)|0);
       (_kill(($51|0),9)|0);
       _reap($51);
       break;
      }
      HEAP32[$s$i$i>>2] = 0;
      HEAP32[$0>>2] = 0;
      $64 = (_getdelim($s$i$i,$0,0,$61)|0);
      $65 = ($64|0)<(0);
      $66 = HEAP32[$s$i$i>>2]|0;
      $67 = $65 ? 0 : $66;
      _free($67);
      $68 = (_feof($61)|0);
      $69 = ($68|0)==(0);
      if (!($69)) {
       (_fclose($61)|0);
       _reap($51);
       $$0$i = 5;
       break L24;
      }
      HEAP32[$s$i2$i>>2] = 0;
      HEAP32[$0>>2] = 0;
      $70 = (_getdelim($s$i2$i,$0,0,$61)|0);
      $71 = ($70|0)<(0);
      $72 = HEAP32[$s$i2$i>>2]|0;
      $73 = ($72|0)==(0|0);
      $74 = $71 | $73;
      L52: do {
       if ($74) {
        $98 = $i$2$i;$wv$1$lcssa$i = $wv$0$i;
       } else {
        $75 = ($wv$0$i|0)!=(0|0);
        $76 = (($i$2$i) + 1)|0;
        $77 = $75 ? $76 : 0;
        $87 = $72;$i$38$i = $i$2$i;$l$07$i = $77;$wv$19$i = $wv$0$i;
        while(1) {
         $78 = (($i$38$i) + 1)|0;
         $79 = ($78>>>0)<($l$07$i>>>0);
         if ($79) {
          $l$1$i = $l$07$i;$wv$2$i = $wv$19$i;
         } else {
          $80 = $l$07$i >>> 1;
          $81 = (($l$07$i) + 10)|0;
          $82 = (($81) + ($80))|0;
          $83 = $82 << 2;
          $84 = (_realloc($wv$19$i,$83)|0);
          $85 = ($84|0)==(0|0);
          if ($85) {
           $98 = $i$38$i;$wv$1$lcssa$i = $wv$19$i;
           break L52;
          }
          $l$1$i = $82;$wv$2$i = $84;
         }
         $86 = (($wv$2$i) + ($i$38$i<<2)|0);
         HEAP32[$86>>2] = $87;
         $88 = (($wv$2$i) + ($78<<2)|0);
         HEAP32[$88>>2] = 0;
         HEAP32[$s$i2$i>>2] = 0;
         HEAP32[$0>>2] = 0;
         $89 = (_getdelim($s$i2$i,$0,0,$61)|0);
         $90 = ($89|0)<(0);
         $91 = HEAP32[$s$i2$i>>2]|0;
         $92 = ($91|0)==(0|0);
         $93 = $90 | $92;
         if ($93) {
          $98 = $78;$wv$1$lcssa$i = $wv$2$i;
          break;
         } else {
          $87 = $91;$i$38$i = $78;$l$07$i = $l$1$i;$wv$19$i = $wv$2$i;
         }
        }
       }
      } while(0);
      $94 = (_feof($61)|0);
      $95 = ($94|0)==(0);
      $$$i = $95&1;
      (_fclose($61)|0);
      _reap($51);
      $96 = ($wv$1$lcssa$i|0)==(0|0);
      if ($96) {
       $97 = (($98) + 1)|0;
       $99 = (_calloc($97,4)|0);
       $wv$3$i = $99;
      } else {
       $wv$3$i = $wv$1$lcssa$i;
      }
      $100 = ((($we)) + 4|0);
      HEAP32[$100>>2] = $wv$3$i;
      HEAP32[$we>>2] = $98;
      if (!($44)) {
       $$0$i = $$$i;
       break L24;
      }
      $101 = ($wv$3$i|0)==(0|0);
      $$pre25$i = HEAP32[$45>>2]|0;
      if ($101) {
       $111 = $$pre25$i;
      } else {
       $102 = ($$pre25$i|0)==(0);
       if ($102) {
        $111 = 0;
       } else {
        $103 = (($$pre25$i) + -1)|0;
        $104 = (($wv$3$i) + ($103<<2)|0);
        HEAP32[$104>>2] = 0;
        $105 = ($103|0)==(0);
        if ($105) {
         $111 = $$pre25$i;
        } else {
         $$pre$i = HEAP32[$100>>2]|0;
         $107 = $103;
         while(1) {
          $106 = (($107) + -1)|0;
          $108 = (($$pre$i) + ($106<<2)|0);
          HEAP32[$108>>2] = 0;
          $109 = ($106|0)==(0);
          if ($109) {
           $111 = $$pre25$i;
           break;
          } else {
           $107 = $106;
          }
         }
        }
       }
      }
      $110 = (($98) - ($111))|0;
      HEAP32[$we>>2] = $110;
      $$0$i = $$$i;
      break L24;
     }
    }
   } while(0);
   if ($39) {
    $$0$i = 1;
   } else {
    HEAP32[$we>>2] = 0;
    $112 = ((($we)) + 4|0);
    HEAP32[$112>>2] = 0;
    $$0$i = 1;
   }
  }
 } while(0);
 $113 = HEAP32[$cs>>2]|0;
 (_pthread_setcancelstate(($113|0),(0|0))|0);
 STACKTOP = sp;return ($$0$i|0);
}
function _wordfree($we) {
 $we = $we|0;
 var $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($we)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$we>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $19 = $1;
  } else {
   $5 = ((($we)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (($1) + ($6<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   _free($8);
   $9 = HEAP32[$we>>2]|0;
   $10 = ($9>>>0)>(1);
   if ($10) {
    $13 = 1;
    while(1) {
     $$pre = HEAP32[$0>>2]|0;
     $11 = HEAP32[$5>>2]|0;
     $12 = (($11) + ($13))|0;
     $14 = (($$pre) + ($12<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     _free($15);
     $16 = (($13) + 1)|0;
     $17 = HEAP32[$we>>2]|0;
     $18 = ($16>>>0)<($17>>>0);
     if ($18) {
      $13 = $16;
     } else {
      break;
     }
    }
   }
   $$pre3 = HEAP32[$0>>2]|0;
   $19 = $$pre3;
  }
  _free($19);
  HEAP32[$0>>2] = 0;
  HEAP32[$we>>2] = 0;
 }
 return;
}
function ___madvise($addr,$len,$advice) {
 $addr = $addr|0;
 $len = $len|0;
 $advice = $advice|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $addr;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $len;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $advice;
 $0 = (___syscall219(219,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _mincore($addr,$len,$vec) {
 $addr = $addr|0;
 $len = $len|0;
 $vec = $vec|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $addr;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $len;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $vec;
 $0 = (___syscall218(218,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _mlock($addr,$len) {
 $addr = $addr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $addr;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $len;
 $0 = (___syscall150(150,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _mlockall($flags) {
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $flags;
 $0 = (___syscall152(152,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function ___mmap($start,$len,$prot,$flags,$fd,$off) {
 $start = $start|0;
 $len = $len|0;
 $prot = $prot|0;
 $flags = $flags|0;
 $fd = $fd|0;
 $off = $off|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($off|0)<(0);
 $1 = $0 << 31 >> 31;
 $2 = $off & 4095;
 $3 = $1 & -4096;
 $4 = ($2|0)==(0);
 $5 = ($3|0)==(0);
 $6 = $4 & $5;
 do {
  if ($6) {
   $8 = ($len>>>0)>(2147483646);
   if ($8) {
    $9 = (___errno_location()|0);
    HEAP32[$9>>2] = 12;
    $$0 = (-1);
    break;
   }
   $10 = $flags & 16;
   $11 = ($10|0)!=(0);
   if ($11) {
    FUNCTION_TABLE_vi[10 & 63](-1);
   }
   $12 = $off >> 12;
   HEAP32[$vararg_buffer>>2] = $start;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $len;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $prot;
   $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $flags;
   $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
   HEAP32[$vararg_ptr4>>2] = $fd;
   $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
   HEAP32[$vararg_ptr5>>2] = $12;
   $13 = (___syscall192(192,($vararg_buffer|0))|0);
   $14 = (___syscall_ret($13)|0);
   $15 = $14;
   if ($11) {
    FUNCTION_TABLE_v[11 & 31]();
    $$0 = $15;
   } else {
    $$0 = $15;
   }
  } else {
   $7 = (___errno_location()|0);
   HEAP32[$7>>2] = 22;
   $$0 = (-1);
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _mprotect($addr,$len,$prot) {
 $addr = $addr|0;
 $len = $len|0;
 $prot = $prot|0;
 var $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $addr;
 $1 = $0 & -4096;
 $$sum1 = (($len) + 4095)|0;
 $2 = (($addr) + ($$sum1)|0);
 $3 = $2;
 $4 = $3 & -4096;
 $5 = (($4) - ($1))|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $prot;
 $6 = (___syscall125(125,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 STACKTOP = sp;return ($7|0);
}
function ___mremap($old_addr,$old_len,$new_len,$flags,$varargs) {
 $old_addr = $old_addr|0;
 $old_len = $old_len|0;
 $new_len = $new_len|0;
 $flags = $flags|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ap = sp + 24|0;
 HEAP32[$ap>>2] = $varargs;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 4|0);
 $expanded2 = $1;
 $expanded = (($expanded2) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 4|0);
 $expanded6 = $3;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $4 = $2 & $expanded4;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $arglist_next = ((($5)) + 4|0);
 HEAP32[$ap>>2] = $arglist_next;
 HEAP32[$vararg_buffer>>2] = $old_addr;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $old_len;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $new_len;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $flags;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $6;
 $7 = (___syscall163(163,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = $8;
 STACKTOP = sp;return ($9|0);
}
function _msync($start,$len,$flags) {
 $start = $start|0;
 $len = $len|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $start;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $len;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $flags;
 $0 = (___syscall144(144,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _munlock($addr,$len) {
 $addr = $addr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $addr;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $len;
 $0 = (___syscall151(151,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _munlockall() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (___syscall153(153,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function ___munmap($start,$len) {
 $start = $start|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 FUNCTION_TABLE_vi[10 & 63](-1);
 HEAP32[$vararg_buffer>>2] = $start;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $len;
 $0 = (___syscall91(91,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 FUNCTION_TABLE_v[11 & 31]();
 STACKTOP = sp;return ($1|0);
}
function _posix_madvise($addr,$len,$advice) {
 $addr = $addr|0;
 $len = $len|0;
 $advice = $advice|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($advice|0)==(4);
 if ($0) {
  $$0 = 0;
 } else {
  HEAP32[$vararg_buffer>>2] = $addr;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $len;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $advice;
  $1 = (___syscall219(219,($vararg_buffer|0))|0);
  $2 = (0 - ($1))|0;
  $$0 = $2;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___shm_mapname($name,$buf) {
 $name = $name|0;
 $buf = $buf|0;
 var $$0 = 0, $$01 = 0, $$01$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $$01 = $name;
 while(1) {
  $0 = HEAP8[$$01>>0]|0;
  $1 = ($0<<24>>24)==(47);
  $2 = ((($$01)) + 1|0);
  if ($1) {
   $$01 = $2;
  } else {
   $$01$lcssa = $$01;
   break;
  }
 }
 $3 = (___strchrnul($$01$lcssa,47)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)!=(0);
 $6 = ($3|0)==($$01$lcssa|0);
 $or$cond = $6 | $5;
 do {
  if ($or$cond) {
   label = 7;
  } else {
   $7 = $3;
   $8 = $$01$lcssa;
   $9 = (($7) - ($8))|0;
   $10 = ($9|0)<(3);
   if ($10) {
    $11 = HEAP8[$$01$lcssa>>0]|0;
    $12 = ($11<<24>>24)==(46);
    if ($12) {
     $13 = ((($3)) + -1|0);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(46);
     if ($15) {
      label = 7;
      break;
     }
    }
   } else {
    $17 = ($9|0)>(255);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 36;
     $$0 = 0;
     break;
    }
   }
   dest=$buf; src=175504; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $19 = ((($buf)) + 9|0);
   $20 = (($9) + 1)|0;
   _memcpy(($19|0),($$01$lcssa|0),($20|0))|0;
   $$0 = $buf;
  }
 } while(0);
 if ((label|0) == 7) {
  $16 = (___errno_location()|0);
  HEAP32[$16>>2] = 22;
  $$0 = 0;
 }
 return ($$0|0);
}
function _shm_open($name,$flag,$mode) {
 $name = $name|0;
 $flag = $flag|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $buf = 0, $cs = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $cs = sp + 4|0;
 $buf = sp + 8|0;
 $0 = (___shm_mapname($name,$buf)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -1;
 } else {
  (_pthread_setcancelstate(1,($cs|0))|0);
  $2 = $flag | 657408;
  HEAP32[$vararg_buffer>>2] = $mode;
  $3 = (_open($0,$2,$vararg_buffer)|0);
  $4 = HEAP32[$cs>>2]|0;
  (_pthread_setcancelstate(($4|0),(0|0))|0);
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _shm_unlink($name) {
 $name = $name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $0 = (___shm_mapname($name,$buf)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = (_unlink($0)|0);
  $$0 = $2;
 }
 STACKTOP = sp;return ($$0|0);
}
function _btowc($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c>>>0)<(128);
 $1 = $0 ? $c : -1;
 return ($1|0);
}
function _mblen($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_mbtowc(0,$s,$n)|0);
 return ($0|0);
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)!=(0|0);
 $1 = $0 ? $st : 14876;
 $2 = (_mbrtowc(0,$s,$n,$1)|0);
 return ($2|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$lcssa = 0, $$lcssa35 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$05 = 0, $c$1 = 0, $c$2 = 0, $dummy = 0, $dummy$wc = 0, $s$06 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp;
 $0 = ($st|0)==(0|0);
 $$st = $0 ? 14880 : $st;
 $1 = HEAP32[$$st>>2]|0;
 $2 = ($src|0)==(0|0);
 L1: do {
  if ($2) {
   $3 = ($1|0)==(0);
   if ($3) {
    $$0 = 0;
   } else {
    label = 15;
   }
  } else {
   $4 = ($wc|0)==(0|0);
   $dummy$wc = $4 ? $dummy : $wc;
   $5 = ($n|0)==(0);
   if ($5) {
    $$0 = -2;
   } else {
    $6 = ($1|0)==(0);
    if ($6) {
     $7 = HEAP8[$src>>0]|0;
     $8 = $7&255;
     $9 = ($7<<24>>24)>(-1);
     if ($9) {
      HEAP32[$dummy$wc>>2] = $8;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break;
     }
     $12 = (($8) + -194)|0;
     $13 = ($12>>>0)>(50);
     if ($13) {
      label = 15;
      break;
     }
     $14 = ((($src)) + 1|0);
     $15 = (7248 + ($12<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($n) + -1)|0;
     $18 = ($17|0)==(0);
     if ($18) {
      $c$2 = $16;
     } else {
      $$024 = $17;$c$05 = $16;$s$06 = $14;
      label = 9;
     }
    } else {
     $$024 = $n;$c$05 = $1;$s$06 = $src;
     label = 9;
    }
    L11: do {
     if ((label|0) == 9) {
      $19 = HEAP8[$s$06>>0]|0;
      $20 = $19&255;
      $21 = $20 >>> 3;
      $22 = (($21) + -16)|0;
      $23 = $c$05 >> 26;
      $24 = (($21) + ($23))|0;
      $25 = $22 | $24;
      $26 = ($25>>>0)>(7);
      if ($26) {
       label = 15;
       break L1;
      } else {
       $$1 = $$024;$30 = $19;$c$1 = $c$05;$s$1 = $s$06;
      }
      while(1) {
       $27 = $c$1 << 6;
       $28 = ((($s$1)) + 1|0);
       $29 = $30&255;
       $31 = (($29) + -128)|0;
       $32 = $31 | $27;
       $33 = (($$1) + -1)|0;
       $34 = ($32|0)<(0);
       if (!($34)) {
        $$lcssa = $32;$$lcssa35 = $33;
        break;
       }
       $36 = ($33|0)==(0);
       if ($36) {
        $c$2 = $32;
        break L11;
       }
       $37 = HEAP8[$28>>0]|0;
       $38 = $37 & -64;
       $39 = ($38<<24>>24)==(-128);
       if ($39) {
        $$1 = $33;$30 = $37;$c$1 = $32;$s$1 = $28;
       } else {
        label = 15;
        break L1;
       }
      }
      HEAP32[$$st>>2] = 0;
      HEAP32[$dummy$wc>>2] = $$lcssa;
      $35 = (($n) - ($$lcssa35))|0;
      $$0 = $35;
      break L1;
     }
    } while(0);
    HEAP32[$$st>>2] = $c$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  HEAP32[$$st>>2] = 0;
  $40 = (___errno_location()|0);
  HEAP32[$40>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$02$ = 0, $$021 = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$216 = 0, $$24 = 0, $$313 = 0, $$cast = 0, $$lcssa = 0, $$lcssa57 = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$019 = 0, $cnt$1 = 0, $cnt$214 = 0, $cnt$214$lcssa = 0, $cnt$3 = 0, $or$cond = 0, $or$cond17 = 0, $s = 0, $wbuf = 0, $wcs$ = 0;
 var $wn$ = 0, $ws$020 = 0, $ws$020$lcssa56 = 0, $ws$09 = 0, $ws$1 = 0, $ws$215 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wbuf = sp + 8|0;
 $s = sp;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $1 = ($wcs|0)!=(0|0);
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $$cast = $0;
 $2 = ($0|0)!=(0);
 $3 = ($wn$|0)!=(0);
 $or$cond17 = $3 & $2;
 L1: do {
  if ($or$cond17) {
   $$021 = $n;$$0218 = $wn$;$37 = $$cast;$cnt$019 = 0;$ws$020 = $wcs$;
   while(1) {
    $4 = $$021 >>> 2;
    $5 = ($4>>>0)>=($$0218>>>0);
    $6 = ($$021>>>0)>(131);
    $7 = $6 | $5;
    if (!($7)) {
     $$1 = $$021;$$24 = $$0218;$18 = $37;$cnt$1 = $cnt$019;$ws$09 = $ws$020;
     break L1;
    }
    $$02$ = $5 ? $$0218 : $4;
    $8 = (($$021) - ($$02$))|0;
    $9 = (_mbsrtowcs($ws$020,$s,$$02$,$st)|0);
    $10 = ($9|0)==(-1);
    if ($10) {
     $$lcssa57 = $8;$ws$020$lcssa56 = $ws$020;
     break;
    }
    $11 = ($ws$020|0)==($wbuf|0);
    $12 = (($ws$020) + ($9<<2)|0);
    $13 = $11 ? 0 : $9;
    $$13 = (($$0218) - ($13))|0;
    $ws$1 = $11 ? $ws$020 : $12;
    $14 = (($9) + ($cnt$019))|0;
    $15 = HEAP32[$s>>2]|0;
    $16 = ($15|0)!=(0|0);
    $17 = ($$0218|0)!=($13|0);
    $or$cond = $17 & $16;
    if ($or$cond) {
     $$021 = $8;$$0218 = $$13;$37 = $15;$cnt$019 = $14;$ws$020 = $ws$1;
    } else {
     $$1 = $8;$$24 = $$13;$18 = $15;$cnt$1 = $14;$ws$09 = $ws$1;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$s>>2]|0;
   $$1 = $$lcssa57;$$24 = 0;$18 = $$pr$pre;$cnt$1 = -1;$ws$09 = $ws$020$lcssa56;
  } else {
   $$1 = $n;$$24 = $wn$;$18 = $$cast;$cnt$1 = 0;$ws$09 = $wcs$;
  }
 } while(0);
 $19 = ($18|0)==(0|0);
 L8: do {
  if ($19) {
   $cnt$3 = $cnt$1;
  } else {
   $20 = ($$24|0)!=(0);
   $21 = ($$1|0)!=(0);
   $22 = $20 & $21;
   if ($22) {
    $$216 = $$1;$$313 = $$24;$23 = $18;$cnt$214 = $cnt$1;$ws$215 = $ws$09;
    while(1) {
     $24 = (_mbrtowc($ws$215,$23,$$216,$st)|0);
     $25 = (($24) + 2)|0;
     $26 = ($25>>>0)<(3);
     if ($26) {
      $$lcssa = $24;$cnt$214$lcssa = $cnt$214;
      break;
     }
     $27 = HEAP32[$s>>2]|0;
     $28 = (($27) + ($24)|0);
     HEAP32[$s>>2] = $28;
     $29 = (($$216) - ($24))|0;
     $30 = ((($ws$215)) + 4|0);
     $31 = (($$313) + -1)|0;
     $32 = (($cnt$214) + 1)|0;
     $33 = ($31|0)!=(0);
     $34 = ($$216|0)!=($24|0);
     $35 = $33 & $34;
     if ($35) {
      $$216 = $29;$$313 = $31;$23 = $28;$cnt$214 = $32;$ws$215 = $30;
     } else {
      $cnt$3 = $32;
      break L8;
     }
    }
    switch ($$lcssa|0) {
    case -1:  {
     $cnt$3 = -1;
     break L8;
     break;
    }
    case 0:  {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$214$lcssa;
     break L8;
     break;
    }
    default: {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$214$lcssa;
     break L8;
    }
    }
   } else {
    $cnt$3 = $cnt$1;
   }
  }
 } while(0);
 if ($1) {
  $36 = HEAP32[$s>>2]|0;
  HEAP32[$src>>2] = $36;
 }
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$02$ph = 0, $$0219 = 0, $$03 = 0, $$1 = 0, $$1$lcssa = 0, $$14$lcssa = 0, $$1415 = 0, $$2 = 0, $$2$lcssa = 0, $$25 = 0, $$25$lcssa = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$434 = 0, $$47$ph = 0, $$4718 = 0, $$48 = 0, $$5 = 0;
 var $$5$lcssa = 0, $$6 = 0, $$6$lcssa = 0, $$7 = 0, $$8 = 0, $$833 = 0, $$in = 0, $$lcssa102 = 0, $$lcssa90 = 0, $$lcssa94 = 0, $$lcssa96 = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$old1 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0, $s$1035 = 0, $s$109 = 0, $s$116 = 0, $s$2 = 0, $s$2$lcssa = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0;
 var $s$520 = 0, $s$6 = 0, $s$6$lcssa = 0, $s$7 = 0, $s$7$lcssa = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$36 = $wn;$c$2 = $2;$s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 37;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$03 = $wn;$s$0 = $0;
   label = 7;
  } else {
   $$02$ph = $ws;$$47$ph = $wn;$s$5$ph = $0;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $6 = ($$47$ph|0)==(0);
   if ($6) {
    $s$5$lcssa = $s$5$ph;
    label = 26;
    break;
   } else {
    $$0219 = $$02$ph;$$4718 = $$47$ph;$s$520 = $s$5$ph;
   }
   while(1) {
    $63 = HEAP8[$s$520>>0]|0;
    $64 = $63&255;
    $65 = (($64) + -1)|0;
    $66 = ($65>>>0)<(127);
    do {
     if ($66) {
      $67 = $s$520;
      $68 = $67 & 3;
      $69 = ($68|0)==(0);
      $70 = ($$4718>>>0)>(4);
      $or$cond = $70 & $69;
      if ($or$cond) {
       $$1 = $$0219;$$5 = $$4718;$s$6 = $s$520;
       while(1) {
        $71 = HEAP32[$s$6>>2]|0;
        $72 = (($71) + -16843009)|0;
        $73 = $72 | $71;
        $74 = $73 & -2139062144;
        $75 = ($74|0)==(0);
        if (!($75)) {
         $$1$lcssa = $$1;$$5$lcssa = $$5;$$lcssa94 = $71;$s$6$lcssa = $s$6;
         label = 32;
         break;
        }
        $76 = ((($s$6)) + 1|0);
        $77 = $71 & 255;
        $78 = ((($$1)) + 4|0);
        HEAP32[$$1>>2] = $77;
        $79 = ((($s$6)) + 2|0);
        $80 = HEAP8[$76>>0]|0;
        $81 = $80&255;
        $82 = ((($$1)) + 8|0);
        HEAP32[$78>>2] = $81;
        $83 = ((($s$6)) + 3|0);
        $84 = HEAP8[$79>>0]|0;
        $85 = $84&255;
        $86 = ((($$1)) + 12|0);
        HEAP32[$82>>2] = $85;
        $87 = ((($s$6)) + 4|0);
        $88 = HEAP8[$83>>0]|0;
        $89 = $88&255;
        $90 = ((($$1)) + 16|0);
        HEAP32[$86>>2] = $89;
        $91 = (($$5) + -4)|0;
        $$old1 = ($91>>>0)>(4);
        if ($$old1) {
         $$1 = $90;$$5 = $91;$s$6 = $87;
        } else {
         $$lcssa96 = $87;$$lcssa97 = $90;$$lcssa98 = $91;
         label = 31;
         break;
        }
       }
       if ((label|0) == 31) {
        label = 0;
        $$pre$pre = HEAP8[$$lcssa96>>0]|0;
        $$2 = $$lcssa97;$$6 = $$lcssa98;$94 = $$pre$pre;$s$7 = $$lcssa96;
        break;
       }
       else if ((label|0) == 32) {
        label = 0;
        $92 = $$lcssa94&255;
        $$2 = $$1$lcssa;$$6 = $$5$lcssa;$94 = $92;$s$7 = $s$6$lcssa;
        break;
       }
      } else {
       $$2 = $$0219;$$6 = $$4718;$94 = $63;$s$7 = $s$520;
      }
     } else {
      $$2 = $$0219;$$6 = $$4718;$94 = $63;$s$7 = $s$520;
     }
    } while(0);
    $93 = $94&255;
    $95 = (($93) + -1)|0;
    $96 = ($95>>>0)<(127);
    if (!($96)) {
     $$2$lcssa = $$2;$$6$lcssa = $$6;$$lcssa102 = $93;$s$7$lcssa = $s$7;
     break;
    }
    $97 = ((($s$7)) + 1|0);
    $98 = ((($$2)) + 4|0);
    HEAP32[$$2>>2] = $93;
    $99 = (($$6) + -1)|0;
    $100 = ($99|0)==(0);
    if ($100) {
     $s$5$lcssa = $97;
     label = 26;
     break L7;
    } else {
     $$0219 = $98;$$4718 = $99;$s$520 = $97;
    }
   }
   $101 = (($$lcssa102) + -194)|0;
   $102 = ($101>>>0)>(50);
   if ($102) {
    $$434 = $$2$lcssa;$$833 = $$6$lcssa;$s$1035 = $s$7$lcssa;
    label = 48;
    break;
   }
   $103 = ((($s$7$lcssa)) + 1|0);
   $104 = (7248 + ($101<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $$3 = $$2$lcssa;$$7 = $$6$lcssa;$c$4 = $105;$s$8 = $103;
   label = 37;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0>>0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ($9>>>0)<(127);
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$s$0>>2]|0;
     $15 = (($14) + -16843009)|0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17|0)==(0);
     if ($18) {
      $$1415 = $$03;$s$116 = $s$0;
      while(1) {
       $19 = ((($s$116)) + 4|0);
       $20 = (($$1415) + -4)|0;
       $21 = HEAP32[$19>>2]|0;
       $22 = (($21) + -16843009)|0;
       $23 = $22 | $21;
       $24 = $23 & -2139062144;
       $25 = ($24|0)==(0);
       if ($25) {
        $$1415 = $20;$s$116 = $19;
       } else {
        $$14$lcssa = $20;$$in = $21;$s$1$lcssa = $19;
        break;
       }
      }
     } else {
      $$14$lcssa = $$03;$$in = $14;$s$1$lcssa = $s$0;
     }
     $26 = $$in&255;
     $$25 = $$14$lcssa;$28 = $26;$s$2 = $s$1$lcssa;
    } else {
     $$25 = $$03;$28 = $7;$s$2 = $s$0;
    }
   } else {
    $$25 = $$03;$28 = $7;$s$2 = $s$0;
   }
   $27 = $28&255;
   $29 = (($27) + -1)|0;
   $30 = ($29>>>0)<(127);
   if ($30) {
    $31 = ((($s$2)) + 1|0);
    $32 = (($$25) + -1)|0;
    $$03 = $32;$s$0 = $31;
    label = 7;
    continue;
   } else {
    $$25$lcssa = $$25;$$lcssa90 = $27;$s$2$lcssa = $s$2;
   }
   $33 = (($$lcssa90) + -194)|0;
   $34 = ($33>>>0)>(50);
   if ($34) {
    $$434 = $ws;$$833 = $$25$lcssa;$s$1035 = $s$2$lcssa;
    label = 48;
    break;
   }
   $35 = ((($s$2$lcssa)) + 1|0);
   $36 = (7248 + ($33<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $$36 = $$25$lcssa;$c$2 = $37;$s$3 = $35;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $38 = HEAP8[$s$3>>0]|0;
   $39 = $38&255;
   $40 = $39 >>> 3;
   $41 = (($40) + -16)|0;
   $42 = $c$2 >> 26;
   $43 = (($40) + ($42))|0;
   $44 = $41 | $43;
   $45 = ($44>>>0)>(7);
   if ($45) {
    label = 17;
    break;
   }
   $47 = ((($s$3)) + 1|0);
   $48 = $c$2 & 33554432;
   $49 = ($48|0)==(0);
   if ($49) {
    $s$4 = $47;
   } else {
    $50 = HEAP8[$47>>0]|0;
    $51 = $50 & -64;
    $52 = ($51<<24>>24)==(-128);
    if (!($52)) {
     label = 20;
     break;
    }
    $54 = ((($s$3)) + 2|0);
    $55 = $c$2 & 524288;
    $56 = ($55|0)==(0);
    if ($56) {
     $s$4 = $54;
    } else {
     $57 = HEAP8[$54>>0]|0;
     $58 = $57 & -64;
     $59 = ($58<<24>>24)==(-128);
     if (!($59)) {
      label = 23;
      break;
     }
     $61 = ((($s$3)) + 3|0);
     $s$4 = $61;
    }
   }
   $62 = (($$36) + -1)|0;
   $$03 = $62;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 37) {
   label = 0;
   $106 = HEAP8[$s$8>>0]|0;
   $107 = $106&255;
   $108 = $107 >>> 3;
   $109 = (($108) + -16)|0;
   $110 = $c$4 >> 26;
   $111 = (($108) + ($110))|0;
   $112 = $109 | $111;
   $113 = ($112>>>0)>(7);
   if ($113) {
    label = 38;
    break;
   }
   $115 = $c$4 << 6;
   $116 = ((($s$8)) + 1|0);
   $117 = (($107) + -128)|0;
   $118 = $117 | $115;
   $119 = ($118|0)<(0);
   if ($119) {
    $120 = HEAP8[$116>>0]|0;
    $121 = $120&255;
    $122 = $121 & 192;
    $123 = ($122|0)==(128);
    if (!($123)) {
     label = 41;
     break;
    }
    $125 = $118 << 6;
    $126 = ((($s$8)) + 2|0);
    $127 = (($121) + -128)|0;
    $128 = $127 | $125;
    $129 = ($128|0)<(0);
    if ($129) {
     $130 = HEAP8[$126>>0]|0;
     $131 = $130&255;
     $132 = $131 & 192;
     $133 = ($132|0)==(128);
     if (!($133)) {
      label = 44;
      break;
     }
     $135 = $128 << 6;
     $136 = ((($s$8)) + 3|0);
     $137 = (($131) + -128)|0;
     $138 = $137 | $135;
     $c$5 = $138;$s$9 = $136;
    } else {
     $c$5 = $128;$s$9 = $126;
    }
   } else {
    $c$5 = $118;$s$9 = $116;
   }
   $139 = ((($$3)) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $140 = (($$7) + -1)|0;
   $$02$ph = $139;$$47$ph = $140;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $46 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $46;
  label = 47;
 }
 else if ((label|0) == 20) {
  $53 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $53;
  label = 47;
 }
 else if ((label|0) == 23) {
  $60 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $60;
  label = 47;
 }
 else if ((label|0) == 26) {
  HEAP32[$src>>2] = $s$5$lcssa;
  $$0 = $wn;
 }
 else if ((label|0) == 38) {
  $114 = ((($s$8)) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $114;
  label = 47;
 }
 else if ((label|0) == 41) {
  $124 = ((($s$8)) + -1|0);
  $$48 = $$3;$s$109 = $124;
  label = 52;
 }
 else if ((label|0) == 44) {
  $134 = ((($s$8)) + -1|0);
  $$48 = $$3;$s$109 = $134;
  label = 52;
 }
 if ((label|0) == 47) {
  $141 = ($c$6|0)==(0);
  if ($141) {
   $$434 = $$4;$$833 = $$8;$s$1035 = $s$10;
   label = 48;
  } else {
   $$48 = $$4;$s$109 = $s$10;
   label = 52;
  }
 }
 if ((label|0) == 48) {
  $142 = HEAP8[$s$1035>>0]|0;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $144 = ($$434|0)==(0|0);
   if (!($144)) {
    HEAP32[$$434>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $145 = (($wn) - ($$833))|0;
   $$0 = $145;
  } else {
   $$48 = $$434;$s$109 = $s$1035;
   label = 52;
  }
 }
 if ((label|0) == 52) {
  $146 = (___errno_location()|0);
  HEAP32[$146>>2] = 84;
  $147 = ($$48|0)==(0|0);
  if ($147) {
   $$0 = -1;
  } else {
   HEAP32[$src>>2] = $s$109;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _mbstowcs($ws,$s,$wn) {
 $ws = $ws|0;
 $s = $s|0;
 $wn = $wn|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $s;
 $1 = (_mbsrtowcs($ws,$0,$wn,0)|0);
 STACKTOP = sp;return ($1|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dummy = 0, $dummy$wc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp;
 $0 = ($src|0)==(0|0);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = ($n|0)==(0);
   do {
    if (!($1)) {
     $2 = ($wc|0)==(0|0);
     $dummy$wc = $2 ? $dummy : $wc;
     $3 = HEAP8[$src>>0]|0;
     $4 = $3&255;
     $5 = ($3<<24>>24)>(-1);
     if ($5) {
      HEAP32[$dummy$wc>>2] = $4;
      $6 = ($3<<24>>24)!=(0);
      $7 = $6&1;
      $$0 = $7;
      break L1;
     }
     $8 = (($4) + -194)|0;
     $9 = ($8>>>0)>(50);
     if (!($9)) {
      $10 = ((($src)) + 1|0);
      $11 = (7248 + ($8<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = ($n>>>0)<(4);
      if ($13) {
       $14 = ($n*6)|0;
       $15 = (($14) + -6)|0;
       $16 = -2147483648 >>> $15;
       $17 = $12 & $16;
       $18 = ($17|0)==(0);
       if (!($18)) {
        break;
       }
      }
      $19 = HEAP8[$10>>0]|0;
      $20 = $19&255;
      $21 = $20 >>> 3;
      $22 = (($21) + -16)|0;
      $23 = $12 >> 26;
      $24 = (($21) + ($23))|0;
      $25 = $22 | $24;
      $26 = ($25>>>0)>(7);
      if (!($26)) {
       $27 = $12 << 6;
       $28 = (($20) + -128)|0;
       $29 = $28 | $27;
       $30 = ($29|0)<(0);
       if (!($30)) {
        HEAP32[$dummy$wc>>2] = $29;
        $$0 = 2;
        break L1;
       }
       $31 = ((($src)) + 2|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = $32&255;
       $34 = $33 & 192;
       $35 = ($34|0)==(128);
       if ($35) {
        $36 = $29 << 6;
        $37 = (($33) + -128)|0;
        $38 = $37 | $36;
        $39 = ($38|0)<(0);
        if (!($39)) {
         HEAP32[$dummy$wc>>2] = $38;
         $$0 = 3;
         break L1;
        }
        $40 = ((($src)) + 3|0);
        $41 = HEAP8[$40>>0]|0;
        $42 = $41&255;
        $43 = $42 & 192;
        $44 = ($43|0)==(128);
        if ($44) {
         $45 = $38 << 6;
         $46 = (($42) + -128)|0;
         $47 = $46 | $45;
         HEAP32[$dummy$wc>>2] = $47;
         $$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while(0);
   $48 = (___errno_location()|0);
   HEAP32[$48>>2] = 84;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$02$$0 = 0, $$021 = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$216 = 0, $$24 = 0, $$313 = 0, $$cast = 0, $$lcssa = 0, $$lcssa57 = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$019 = 0, $cnt$1 = 0, $cnt$214 = 0, $cnt$214$lcssa = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $or$cond = 0;
 var $or$cond17 = 0, $s$020 = 0, $s$020$lcssa56 = 0, $s$09 = 0, $s$1 = 0, $s$215 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 8|0;
 $ws = sp;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $1 = ($dst|0)!=(0|0);
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $$cast = $0;
 $2 = ($0|0)!=(0);
 $3 = ($n$|0)!=(0);
 $or$cond17 = $3 & $2;
 L1: do {
  if ($or$cond17) {
   $$021 = $wn;$$0218 = $n$;$38 = $$cast;$cnt$019 = 0;$s$020 = $dst$;
   while(1) {
    $4 = ($$021>>>0)>=($$0218>>>0);
    $5 = ($$021>>>0)>(32);
    $6 = $4 | $5;
    if (!($6)) {
     $$1 = $$021;$$24 = $$0218;$17 = $38;$cnt$1 = $cnt$019;$s$09 = $s$020;
     break L1;
    }
    $$02$$0 = $4 ? $$0218 : $$021;
    $7 = (($$021) - ($$02$$0))|0;
    $8 = (_wcsrtombs($s$020,$ws,$$02$$0,0)|0);
    $9 = ($8|0)==(-1);
    if ($9) {
     $$lcssa57 = $7;$s$020$lcssa56 = $s$020;
     break;
    }
    $10 = ($s$020|0)==($buf|0);
    $11 = (($s$020) + ($8)|0);
    $12 = $10 ? 0 : $8;
    $$13 = (($$0218) - ($12))|0;
    $s$1 = $10 ? $s$020 : $11;
    $13 = (($8) + ($cnt$019))|0;
    $14 = HEAP32[$ws>>2]|0;
    $15 = ($14|0)!=(0|0);
    $16 = ($$0218|0)!=($12|0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$021 = $7;$$0218 = $$13;$38 = $14;$cnt$019 = $13;$s$020 = $s$1;
    } else {
     $$1 = $7;$$24 = $$13;$17 = $14;$cnt$1 = $13;$s$09 = $s$1;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$ws>>2]|0;
   $$1 = $$lcssa57;$$24 = 0;$17 = $$pr$pre;$cnt$1 = -1;$s$09 = $s$020$lcssa56;
  } else {
   $$1 = $wn;$$24 = $n$;$17 = $$cast;$cnt$1 = 0;$s$09 = $dst$;
  }
 } while(0);
 $18 = ($17|0)==(0|0);
 L8: do {
  if ($18) {
   $cnt$3 = $cnt$1;
  } else {
   $19 = ($$24|0)!=(0);
   $20 = ($$1|0)!=(0);
   $21 = $19 & $20;
   if ($21) {
    $$216 = $$1;$$313 = $$24;$23 = $17;$cnt$214 = $cnt$1;$s$215 = $s$09;
    while(1) {
     $22 = HEAP32[$23>>2]|0;
     $24 = (_wcrtomb($s$215,$22,0)|0);
     $25 = (($24) + 1)|0;
     $26 = ($25>>>0)<(2);
     if ($26) {
      $$lcssa = $24;$cnt$214$lcssa = $cnt$214;
      break;
     }
     $28 = HEAP32[$ws>>2]|0;
     $29 = ((($28)) + 4|0);
     HEAP32[$ws>>2] = $29;
     $30 = (($$216) + -1)|0;
     $31 = (($s$215) + ($24)|0);
     $32 = (($$313) - ($24))|0;
     $33 = (($cnt$214) + 1)|0;
     $34 = ($$313|0)!=($24|0);
     $35 = ($30|0)!=(0);
     $36 = $34 & $35;
     if ($36) {
      $$216 = $30;$$313 = $32;$23 = $29;$cnt$214 = $33;$s$215 = $31;
     } else {
      $cnt$3 = $33;
      break L8;
     }
    }
    $27 = ($$lcssa|0)==(0);
    if ($27) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$214$lcssa;
    } else {
     $cnt$3 = -1;
    }
   } else {
    $cnt$3 = $cnt$1;
   }
  }
 } while(0);
 if ($1) {
  $37 = HEAP32[$ws>>2]|0;
  HEAP32[$wcs>>2] = $37;
 }
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01$lcssa = 0, $$0129 = 0, $$0129$lcssa = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$223 = 0, $$223$lcssa = 0, $$24$lcssa = 0, $$2428 = 0, $$2428$lcssa = 0, $$3 = 0, $$35 = 0, $$422 = 0, $$422$lcssa = 0, $$422$lcssa82 = 0, $$5 = 0, $$pn = 0, $$pre = 0;
 var $$pre43 = 0, $$pre44 = 0, $$pre45 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $0 = ($s|0)==(0|0);
 L1: do {
  if ($0) {
   $2 = HEAP32[$ws>>2]|0;
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0);
   if ($4) {
    $$0 = 0;
   } else {
    $$0218 = 0;$5 = $3;$ws2$019 = $2;
    while(1) {
     $6 = ($5>>>0)>(127);
     if ($6) {
      $7 = (_wcrtomb($buf,$5,0)|0);
      $8 = ($7|0)==(-1);
      if ($8) {
       $$0 = -1;
       break L1;
      } else {
       $$pn = $7;
      }
     } else {
      $$pn = 1;
     }
     $$13 = (($$pn) + ($$0218))|0;
     $9 = ((($ws2$019)) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ($10|0)==(0);
     if ($11) {
      $$0 = $$13;
      break;
     } else {
      $$0218 = $$13;$5 = $10;$ws2$019 = $9;
     }
    }
   }
  } else {
   $1 = ($n>>>0)>(3);
   L9: do {
    if ($1) {
     $$pre = HEAP32[$ws>>2]|0;
     $$0129 = $s;$$2428 = $n;$14 = $$pre;
     while(1) {
      $13 = HEAP32[$14>>2]|0;
      $15 = (($13) + -1)|0;
      $16 = ($15>>>0)>(126);
      if ($16) {
       $17 = ($13|0)==(0);
       if ($17) {
        $$0129$lcssa = $$0129;$$2428$lcssa = $$2428;
        break;
       }
       $19 = (_wcrtomb($$0129,$13,0)|0);
       $20 = ($19|0)==(-1);
       if ($20) {
        $$0 = -1;
        break L1;
       }
       $21 = (($$0129) + ($19)|0);
       $22 = (($$2428) - ($19))|0;
       $$1 = $21;$$35 = $22;$27 = $14;
      } else {
       $23 = $13&255;
       $24 = ((($$0129)) + 1|0);
       HEAP8[$$0129>>0] = $23;
       $25 = (($$2428) + -1)|0;
       $$pre43 = HEAP32[$ws>>2]|0;
       $$1 = $24;$$35 = $25;$27 = $$pre43;
      }
      $26 = ((($27)) + 4|0);
      HEAP32[$ws>>2] = $26;
      $28 = ($$35>>>0)>(3);
      if ($28) {
       $$0129 = $$1;$$2428 = $$35;$14 = $26;
      } else {
       $$01$lcssa = $$1;$$24$lcssa = $$35;
       break L9;
      }
     }
     HEAP8[$$0129$lcssa>>0] = 0;
     HEAP32[$ws>>2] = 0;
     $18 = (($n) - ($$2428$lcssa))|0;
     $$0 = $18;
     break L1;
    } else {
     $$01$lcssa = $s;$$24$lcssa = $n;
    }
   } while(0);
   $12 = ($$24$lcssa|0)==(0);
   if ($12) {
    $$0 = $n;
   } else {
    $$pre44 = HEAP32[$ws>>2]|0;
    $$223 = $$01$lcssa;$$422 = $$24$lcssa;$30 = $$pre44;
    while(1) {
     $29 = HEAP32[$30>>2]|0;
     $31 = (($29) + -1)|0;
     $32 = ($31>>>0)>(126);
     if ($32) {
      $33 = ($29|0)==(0);
      if ($33) {
       $$223$lcssa = $$223;$$422$lcssa = $$422;
       label = 19;
       break;
      }
      $35 = (_wcrtomb($buf,$29,0)|0);
      $36 = ($35|0)==(-1);
      if ($36) {
       $$0 = -1;
       break L1;
      }
      $37 = ($$422>>>0)<($35>>>0);
      if ($37) {
       $$422$lcssa82 = $$422;
       label = 22;
       break;
      }
      $39 = HEAP32[$30>>2]|0;
      (_wcrtomb($$223,$39,0)|0);
      $40 = (($$223) + ($35)|0);
      $41 = (($$422) - ($35))|0;
      $$3 = $40;$$5 = $41;$46 = $30;
     } else {
      $42 = $29&255;
      $43 = ((($$223)) + 1|0);
      HEAP8[$$223>>0] = $42;
      $44 = (($$422) + -1)|0;
      $$pre45 = HEAP32[$ws>>2]|0;
      $$3 = $43;$$5 = $44;$46 = $$pre45;
     }
     $45 = ((($46)) + 4|0);
     HEAP32[$ws>>2] = $45;
     $47 = ($$5|0)==(0);
     if ($47) {
      $$0 = $n;
      break L1;
     } else {
      $$223 = $$3;$$422 = $$5;$30 = $45;
     }
    }
    if ((label|0) == 19) {
     HEAP8[$$223$lcssa>>0] = 0;
     HEAP32[$ws>>2] = 0;
     $34 = (($n) - ($$422$lcssa))|0;
     $$0 = $34;
     break;
    }
    else if ((label|0) == 22) {
     $38 = (($n) - ($$422$lcssa82))|0;
     $$0 = $38;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _wcstombs($s,$ws,$n) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $ws;
 $1 = (_wcsrtombs($s,$0,$n,0)|0);
 STACKTOP = sp;return ($1|0);
}
function _wctob($c) {
 $c = $c|0;
 var $0 = 0, $c$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c>>>0)<(128);
 $c$ = $0 ? $c : -1;
 return ($c$|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _accept($fd,$addr,$len) {
 $fd = $fd|0;
 $addr = $addr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $fd;
 $1 = ((($0)) + 4|0);
 $2 = $addr;
 HEAP32[$1>>2] = $2;
 $3 = ((($0)) + 8|0);
 $4 = $len;
 HEAP32[$3>>2] = $4;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 16|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 20|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $8 = (___syscall102(102,($vararg_buffer|0))|0);
 $9 = (___syscall_ret($8)|0);
 STACKTOP = sp;return ($9|0);
}
function _accept4($fd,$addr,$len,$flg) {
 $fd = $fd|0;
 $addr = $addr|0;
 $len = $len|0;
 $flg = $flg|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 40|0;
 $1 = ($flg|0)==(0);
 L1: do {
  if ($1) {
   $2 = (_accept($fd,$addr,$len)|0);
   $$0 = $2;
  } else {
   HEAP32[$0>>2] = $fd;
   $3 = ((($0)) + 4|0);
   $4 = $addr;
   HEAP32[$3>>2] = $4;
   $5 = ((($0)) + 8|0);
   $6 = $len;
   HEAP32[$5>>2] = $6;
   $7 = ((($0)) + 12|0);
   HEAP32[$7>>2] = $flg;
   $8 = ((($0)) + 16|0);
   HEAP32[$8>>2] = 0;
   $9 = ((($0)) + 20|0);
   HEAP32[$9>>2] = 0;
   HEAP32[$vararg_buffer>>2] = 18;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $0;
   $10 = (___syscall102(102,($vararg_buffer|0))|0);
   $11 = (___syscall_ret($10)|0);
   $12 = ($11|0)>(-1);
   if ($12) {
    $$0 = $11;
   } else {
    $13 = (___errno_location()|0);
    $14 = HEAP32[$13>>2]|0;
    switch ($14|0) {
    case 22: case 38:  {
     break;
    }
    default: {
     $$0 = $11;
     break L1;
    }
    }
    $15 = (_accept($fd,$addr,$len)|0);
    $16 = ($15|0)<(0);
    if ($16) {
     $$0 = $15;
    } else {
     $17 = $flg & 524288;
     $18 = ($17|0)==(0);
     if (!($18)) {
      HEAP32[$vararg_buffer2>>2] = $15;
      $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
      HEAP32[$vararg_ptr5>>2] = 2;
      $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
      HEAP32[$vararg_ptr6>>2] = 1;
      (___syscall221(221,($vararg_buffer2|0))|0);
     }
     $19 = $flg & 2048;
     $20 = ($19|0)==(0);
     if ($20) {
      $$0 = $15;
     } else {
      HEAP32[$vararg_buffer7>>2] = $15;
      $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = 4;
      $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
      HEAP32[$vararg_ptr11>>2] = 2048;
      (___syscall221(221,($vararg_buffer7|0))|0);
      $$0 = $15;
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _bind($fd,$addr,$len) {
 $fd = $fd|0;
 $addr = $addr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $fd;
 $1 = ((($0)) + 4|0);
 $2 = $addr;
 HEAP32[$1>>2] = $2;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $len;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $7 = (___syscall102(102,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 STACKTOP = sp;return ($8|0);
}
function _connect($fd,$addr,$len) {
 $fd = $fd|0;
 $addr = $addr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $fd;
 $1 = ((($0)) + 4|0);
 $2 = $addr;
 HEAP32[$1>>2] = $2;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $len;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $7 = (___syscall102(102,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 STACKTOP = sp;return ($8|0);
}
function ___dn_comp($src,$dst,$space,$dnptrs,$lastdnptr) {
 $src = $src|0;
 $dst = $dst|0;
 $space = $space|0;
 $dnptrs = $dnptrs|0;
 $lastdnptr = $lastdnptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function ___dn_expand($base,$end,$src,$dest,$space) {
 $base = $base|0;
 $end = $end|0;
 $src = $src|0;
 $dest = $dest|0;
 $space = $space|0;
 var $$0 = 0, $$0212 = 0, $$0212$lcssa48 = 0, $$1 = 0, $$28 = 0, $$3 = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$014 = 0, $j$09 = 0, $len$013 = 0, $len$013$lcssa47 = 0, $len$1 = 0, $len$2 = 0, $len$3 = 0, $or$cond = 0, $p$011 = 0, $p$011$lcssa49 = 0, $p$17 = 0, $p$2 = 0, $scevgep = 0, $scevgep37 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($src|0)==($end|0);
 $1 = ($space|0)<(1);
 $or$cond = $0 | $1;
 L1: do {
  if ($or$cond) {
   $$0 = -1;
  } else {
   $2 = $end;
   $3 = $base;
   $4 = (($2) - ($3))|0;
   $5 = ($4|0)>(0);
   if ($5) {
    $6 = ($space|0)>(254);
    $7 = $6 ? 254 : $space;
    $8 = (($dest) + ($7)|0);
    $9 = $8;
    $10 = $src;
    $$0212 = $dest;$i$014 = 0;$len$013 = -1;$p$011 = $src;
    while(1) {
     $11 = HEAP8[$p$011>>0]|0;
     $12 = $11&255;
     $13 = $12 & 192;
     $14 = ($13|0)==(0);
     if ($14) {
      $28 = ($11<<24>>24)==(0);
      if ($28) {
       $$0212$lcssa48 = $$0212;$len$013$lcssa47 = $len$013;$p$011$lcssa49 = $p$011;
       break;
      }
      $29 = ($$0212|0)==($dest|0);
      if ($29) {
       $$1 = $dest;$33 = $11;
      } else {
       $30 = ((($$0212)) + 1|0);
       HEAP8[$$0212>>0] = 46;
       $$pre = HEAP8[$p$011>>0]|0;
       $$1 = $30;$33 = $$pre;
      }
      $31 = ((($p$011)) + 1|0);
      $32 = $33&255;
      $34 = $31;
      $35 = (($2) - ($34))|0;
      $36 = ($32|0)<($35|0);
      if (!($36)) {
       $$0 = -1;
       break L1;
      }
      $37 = $$1;
      $38 = (($9) - ($37))|0;
      $39 = ($32|0)<($38|0);
      if (!($39)) {
       $$0 = -1;
       break L1;
      }
      $40 = ($33<<24>>24)==(0);
      if ($40) {
       $$3 = $$1;$len$3 = $len$013;$p$2 = $31;
      } else {
       $$28 = $$1;$j$09 = $32;$p$17 = $31;
       while(1) {
        $41 = (($j$09) + -1)|0;
        $42 = ((($p$17)) + 1|0);
        $43 = HEAP8[$p$17>>0]|0;
        $44 = ((($$28)) + 1|0);
        HEAP8[$$28>>0] = $43;
        $45 = ($41|0)==(0);
        if ($45) {
         break;
        } else {
         $$28 = $44;$j$09 = $41;$p$17 = $42;
        }
       }
       $scevgep = (($$1) + ($32)|0);
       $$sum = (($32) + 1)|0;
       $scevgep37 = (($p$011) + ($$sum)|0);
       $$3 = $scevgep;$len$3 = $len$013;$p$2 = $scevgep37;
      }
     } else {
      $15 = ((($p$011)) + 1|0);
      $16 = ($15|0)==($end|0);
      if ($16) {
       $$0 = -1;
       break L1;
      }
      $17 = $12 << 8;
      $18 = $17 & 16128;
      $19 = HEAP8[$15>>0]|0;
      $20 = $19&255;
      $21 = $20 | $18;
      $22 = ($21|0)<($4|0);
      if (!($22)) {
       $$0 = -1;
       break L1;
      }
      $23 = ($len$013|0)<(0);
      $24 = ((($p$011)) + 2|0);
      $25 = $24;
      $26 = (($25) - ($10))|0;
      $len$1 = $23 ? $26 : $len$013;
      $27 = (($base) + ($21)|0);
      $$3 = $$0212;$len$3 = $len$1;$p$2 = $27;
     }
     $50 = (($i$014) + 2)|0;
     $51 = ($50|0)<($4|0);
     if ($51) {
      $$0212 = $$3;$i$014 = $50;$len$013 = $len$3;$p$011 = $p$2;
     } else {
      $$0 = -1;
      break L1;
     }
    }
    HEAP8[$$0212$lcssa48>>0] = 0;
    $46 = ($len$013$lcssa47|0)<(0);
    $47 = ((($p$011$lcssa49)) + 1|0);
    $48 = $47;
    $49 = (($48) - ($10))|0;
    $len$2 = $46 ? $49 : $len$013$lcssa47;
    $$0 = $len$2;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 return ($$0|0);
}
function _dn_skipname($s,$end) {
 $s = $s|0;
 $end = $end|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, $p$0$lcssa12 = 0, $p$0$lcssa13 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $p$0 = $s;
 while(1) {
  $0 = ($p$0>>>0)<($end>>>0);
  if (!($0)) {
   $$0 = -1;
   break;
  }
  $1 = HEAP8[$p$0>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $p$0$lcssa12 = $p$0;
   label = 4;
   break;
  }
  $7 = ($1&255)>(191);
  $8 = ((($p$0)) + 1|0);
  if ($7) {
   $$lcssa = $8;$p$0$lcssa13 = $p$0;
   label = 6;
   break;
  } else {
   $p$0 = $8;
  }
 }
 if ((label|0) == 4) {
  $3 = $p$0$lcssa12;
  $4 = $s;
  $5 = (1 - ($4))|0;
  $6 = (($5) + ($3))|0;
  $$0 = $6;
 }
 else if ((label|0) == 6) {
  $9 = ($$lcssa>>>0)<($end>>>0);
  if ($9) {
   $10 = $p$0$lcssa13;
   $11 = $s;
   $12 = (2 - ($11))|0;
   $13 = (($12) + ($10))|0;
   $$0 = $13;
  } else {
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _sethostent($x) {
 $x = $x|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gethostent() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function _endhostent() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _ether_aton_r($x,$p_a) {
 $x = $x|0;
 $p_a = $p_a|0;
 var $$0 = 0, $$013 = 0, $$1 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $ii$04 = 0, $y = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a = sp + 4|0;
 $y = sp;
 $$013 = $x;$ii$04 = 0;
 while(1) {
  $0 = ($ii$04|0)==(0);
  if ($0) {
   $$1 = $$013;
  } else {
   $1 = HEAP8[$$013>>0]|0;
   $2 = ($1<<24>>24)==(58);
   if (!($2)) {
    $$0 = 0;
    break;
   }
   $3 = ((($$013)) + 1|0);
   $$1 = $3;
  }
  $4 = (_strtoul($$1,$y,16)|0);
  $5 = ($4>>>0)>(255);
  if ($5) {
   $$0 = 0;
   break;
  }
  $6 = HEAP32[$y>>2]|0;
  $7 = $4&255;
  $8 = (($a) + ($ii$04)|0);
  HEAP8[$8>>0] = $7;
  $9 = (($ii$04) + 1)|0;
  $10 = ($9|0)<(6);
  if ($10) {
   $$013 = $6;$ii$04 = $9;
  } else {
   $$lcssa = $6;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  $11 = HEAP8[$$lcssa>>0]|0;
  $12 = ($11<<24>>24)==(0);
  if ($12) {
   ;HEAP8[$p_a>>0]=HEAP8[$a>>0]|0;HEAP8[$p_a+1>>0]=HEAP8[$a+1>>0]|0;HEAP8[$p_a+2>>0]=HEAP8[$a+2>>0]|0;HEAP8[$p_a+3>>0]=HEAP8[$a+3>>0]|0;HEAP8[$p_a+4>>0]=HEAP8[$a+4>>0]|0;HEAP8[$p_a+5>>0]=HEAP8[$a+5>>0]|0;
   $$0 = $p_a;
  } else {
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _ether_aton($x) {
 $x = $x|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ether_aton_r($x,175514)|0);
 return ($0|0);
}
function _ether_ntoa_r($p_a,$x) {
 $p_a = $p_a|0;
 $x = $x|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, $ii$02 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $$01 = $x;$ii$02 = 0;
 while(1) {
  $0 = ($ii$02|0)==(0);
  $1 = $0 ? 175520 : 175525;
  $2 = (($p_a) + ($ii$02)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  HEAP32[$vararg_buffer>>2] = $4;
  $5 = (_sprintf($$01,$1,$vararg_buffer)|0);
  $6 = (($$01) + ($5)|0);
  $7 = (($ii$02) + 1)|0;
  $exitcond = ($7|0)==(6);
  if ($exitcond) {
   break;
  } else {
   $$01 = $6;$ii$02 = $7;
  }
 }
 STACKTOP = sp;return ($x|0);
}
function _ether_ntoa($p_a) {
 $p_a = $p_a|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ether_ntoa_r($p_a,175531)|0);
 return ($0|0);
}
function _ether_line($l,$e,$hostname) {
 $l = $l|0;
 $e = $e|0;
 $hostname = $hostname|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function _ether_ntohost($hostname,$e) {
 $hostname = $hostname|0;
 $e = $e|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function _ether_hostton($hostname,$e) {
 $hostname = $hostname|0;
 $e = $e|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function _freeaddrinfo($p) {
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($p);
 return;
}
function _freeifaddrs($ifp) {
 $ifp = $ifp|0;
 var $0 = 0, $1 = 0, $2 = 0, $head$0$in1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ifp|0)==(0|0);
 if (!($0)) {
  $head$0$in1 = $ifp;
  while(1) {
   $1 = HEAP32[$head$0$in1>>2]|0;
   _free($head$0$in1);
   $2 = ($1|0)==(0|0);
   if ($2) {
    break;
   } else {
    $head$0$in1 = $1;
   }
  }
 }
 return;
}
function _getifaddrs($ifap) {
 $ifap = $ifap|0;
 var $$0 = 0, $$1 = 0, $$in = 0, $$in25 = 0, $$pre$phiZ2D = 0, $$pre15 = 0, $$pre16 = 0, $$pre17 = 0, $$pre17$pre$pre = 0, $$pre17$pre21 = 0, $$pre17$pre22 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $b$i = 0, $c$i = 0, $conf = 0, $d$i = 0, $e$i = 0, $head = 0, $head$0$in1$i = 0, $i$0 = 0, $i$110 = 0, $i$110$lcssa = 0, $last$0$lcssa = 0, $linebuf$i = 0, $list = 0, $name$i = 0, $or$cond = 0, $req = 0, $reqs = 0, $sa$i = 0, $scan$0$i = 0, $scan$07$i = 0;
 var $scan$08$i = 0, $scan$08$i$lcssa = 0, $storemerge49 = 0, $storemerge49$lcssa = 0, $v6conv$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1776|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $v6conv$i = sp + 1192|0;
 $linebuf$i = sp + 1256|0;
 $b$i = sp + 1184|0;
 $c$i = sp + 1180|0;
 $d$i = sp + 1176|0;
 $e$i = sp + 1172|0;
 $name$i = sp + 1232|0;
 $sa$i = sp + 1144|0;
 $list = sp + 1140|0;
 $head = sp + 1136|0;
 $reqs = sp + 112|0;
 $conf = sp + 104|0;
 $req = sp + 72|0;
 HEAP32[$list>>2] = 0;
 HEAP32[$head>>2] = 0;
 $0 = (_if_nameindex()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$1 = -1;
 } else {
  $i$0 = 0;
  while(1) {
   $2 = (($0) + ($i$0<<3)|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0);
   $5 = (((($0) + ($i$0<<3)|0)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   $or$cond = $4 & $7;
   if ($or$cond) {
    label = 5;
    break;
   }
   $8 = (_list_add($list,$head,$6)|0);
   $9 = ($8|0)==(0|0);
   $10 = (($i$0) + 1)|0;
   if ($9) {
    label = 4;
    break;
   } else {
    $i$0 = $10;
   }
  }
  L5: do {
   if ((label|0) == 4) {
    _if_freenameindex($0);
    label = 47;
   }
   else if ((label|0) == 5) {
    _if_freenameindex($0);
    $11 = (_socket(2,524290,0)|0);
    $12 = ($11|0)==(-1);
    if ($12) {
     label = 47;
    } else {
     HEAP32[$conf>>2] = 1024;
     $13 = ((($conf)) + 4|0);
     HEAP32[$13>>2] = $reqs;
     HEAP32[$vararg_buffer>>2] = $conf;
     $14 = (_ioctl($11,35090,$vararg_buffer)|0);
     $15 = ($14|0)==(-1);
     L8: do {
      if (!($15)) {
       $16 = HEAP32[$conf>>2]|0;
       $17 = $16 >>> 5;
       $18 = HEAP32[$list>>2]|0;
       HEAP32[$head>>2] = $18;
       $19 = ($18|0)==(0);
       if ($19) {
        (_close($11)|0);
        HEAP32[$head>>2] = 0;
        $148 = 0;$last$0$lcssa = 0;
       } else {
        $20 = ($17|0)==(0);
        $21 = ((($req)) + 16|0);
        $$in = $18;
        while(1) {
         $22 = $$in;
         L15: do {
          if ($20) {
           $$in25 = $$in;$35 = $22;
          } else {
           $23 = ((($22)) + 112|0);
           $i$110 = 0;
           while(1) {
            $24 = (($reqs) + ($i$110<<5)|0);
            $25 = (_strcmp($24,$23)|0);
            $26 = ($25|0)==(0);
            if ($26) {
             $i$110$lcssa = $i$110;
             break;
            }
            $32 = (($i$110) + 1)|0;
            $33 = ($32>>>0)<($17>>>0);
            if ($33) {
             $i$110 = $32;
            } else {
             $$in25 = $$in;$35 = $22;
             break L15;
            }
           }
           $27 = ((($22)) + 28|0);
           $28 = (((($reqs) + ($i$110$lcssa<<5)|0)) + 16|0);
           ;HEAP32[$27>>2]=HEAP32[$28>>2]|0;HEAP32[$27+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$27+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$27+12>>2]=HEAP32[$28+12>>2]|0;
           $29 = ((($22)) + 28|0);
           $30 = ((($22)) + 12|0);
           HEAP32[$30>>2] = $29;
           $$pre15 = HEAP32[$head>>2]|0;
           $31 = $$pre15;
           $$in25 = $31;$35 = $$pre15;
          }
         } while(0);
         $34 = ((($35)) + 112|0);
         HEAP32[$vararg_buffer1>>2] = $34;
         (_snprintf($req,16,176154,$vararg_buffer1)|0);
         HEAP32[$vararg_buffer4>>2] = $req;
         $36 = (_ioctl($11,35091,$vararg_buffer4)|0);
         $37 = ($36|0)==(-1);
         if ($37) {
          break L8;
         }
         $38 = $$in25;
         $39 = HEAP16[$21>>1]|0;
         $40 = $39 << 16 >> 16;
         $41 = ((($35)) + 8|0);
         HEAP32[$41>>2] = $40;
         $42 = ((($35)) + 12|0);
         $43 = HEAP32[$42>>2]|0;
         $44 = ($43|0)==(0|0);
         if ($44) {
          $66 = $38;
         } else {
          $45 = ((($35)) + 8|0);
          $46 = HEAP32[$45>>2]|0;
          $47 = $46 | 65536;
          HEAP32[$45>>2] = $47;
          HEAP32[$vararg_buffer7>>2] = $req;
          $48 = (_ioctl($11,35099,$vararg_buffer7)|0);
          $49 = ($48|0)==(-1);
          if ($49) {
           break L8;
          }
          $50 = ((($35)) + 56|0);
          ;HEAP32[$50>>2]=HEAP32[$21>>2]|0;HEAP32[$50+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$50+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$50+12>>2]=HEAP32[$21+12>>2]|0;
          $51 = ((($35)) + 56|0);
          $52 = ((($35)) + 16|0);
          HEAP32[$52>>2] = $51;
          $53 = HEAP32[$head>>2]|0;
          $54 = ((($53)) + 8|0);
          $55 = HEAP32[$54>>2]|0;
          $56 = $55 & 16;
          $57 = ($56|0)==(0);
          if ($57) {
           HEAP32[$vararg_buffer13>>2] = $req;
           $61 = (_ioctl($11,35097,$vararg_buffer13)|0);
           $62 = ($61|0)==(-1);
           if ($62) {
            break L8;
           }
           $63 = ((($53)) + 84|0);
           ;HEAP32[$63>>2]=HEAP32[$21>>2]|0;HEAP32[$63+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$63+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$63+12>>2]=HEAP32[$21+12>>2]|0;
           $$pre$phiZ2D = $63;
          } else {
           HEAP32[$vararg_buffer10>>2] = $req;
           $58 = (_ioctl($11,35095,$vararg_buffer10)|0);
           $59 = ($58|0)==(-1);
           if ($59) {
            break L8;
           }
           $60 = ((($53)) + 84|0);
           ;HEAP32[$60>>2]=HEAP32[$21>>2]|0;HEAP32[$60+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$60+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$60+12>>2]=HEAP32[$21+12>>2]|0;
           $$pre$phiZ2D = $60;
          }
          $64 = ((($53)) + 20|0);
          HEAP32[$64>>2] = $$pre$phiZ2D;
          $66 = $53;
         }
         $65 = HEAP32[$66>>2]|0;
         HEAP32[$head>>2] = $65;
         $67 = ($65|0)==(0);
         if ($67) {
          break;
         } else {
          $$in = $65;
         }
        }
        $$pre16 = HEAP32[$list>>2]|0;
        (_close($11)|0);
        HEAP32[$head>>2] = $$pre16;
        $68 = ($$pre16|0)==(0);
        if ($68) {
         $148 = 0;$last$0$lcssa = 0;
        } else {
         $storemerge49 = $$pre16;
         while(1) {
          $69 = $storemerge49;
          $70 = HEAP32[$69>>2]|0;
          HEAP32[$head>>2] = $70;
          $71 = ($70|0)==(0);
          if ($71) {
           $storemerge49$lcssa = $storemerge49;
           break;
          } else {
           $storemerge49 = $70;
          }
         }
         $72 = $storemerge49$lcssa;
         $148 = $$pre16;$last$0$lcssa = $72;
        }
       }
       HEAP32[$head>>2] = $last$0$lcssa;
       $73 = (_fopen(175549,175568)|0);
       $74 = ($73|0)==(0|0);
       if ($74) {
        $143 = $148;
       } else {
        $75 = (_fgets($linebuf$i,512,$73)|0);
        $76 = ($75|0)==(0|0);
        L40: do {
         if ($76) {
          $$pre17 = $148;
         } else {
          $77 = ((($sa$i)) + 8|0);
          $78 = ((($sa$i)) + 8|0);
          $79 = ((($v6conv$i)) + 4|0);
          $80 = ((($v6conv$i)) + 5|0);
          $81 = ((($v6conv$i)) + 9|0);
          $82 = ((($v6conv$i)) + 10|0);
          $83 = ((($v6conv$i)) + 14|0);
          $84 = ((($v6conv$i)) + 15|0);
          $85 = ((($v6conv$i)) + 19|0);
          $86 = ((($v6conv$i)) + 20|0);
          $87 = ((($v6conv$i)) + 24|0);
          $88 = ((($v6conv$i)) + 25|0);
          $89 = ((($v6conv$i)) + 29|0);
          $90 = ((($v6conv$i)) + 30|0);
          $91 = ((($v6conv$i)) + 34|0);
          $92 = ((($v6conv$i)) + 35|0);
          $93 = ((($v6conv$i)) + 39|0);
          $$pre17$pre22 = $148;$95 = $75;
          L42: while(1) {
           $94 = HEAPU8[$95>>0]|(HEAPU8[$95+1>>0]<<8)|(HEAPU8[$95+2>>0]<<16)|(HEAPU8[$95+3>>0]<<24);
           HEAP32[$v6conv$i>>2] = $94;
           HEAP8[$79>>0] = 58;
           $96 = ((($95)) + 4|0);
           $97 = HEAPU8[$96>>0]|(HEAPU8[$96+1>>0]<<8)|(HEAPU8[$96+2>>0]<<16)|(HEAPU8[$96+3>>0]<<24);
           HEAP8[$80>>0]=$97&255;HEAP8[$80+1>>0]=($97>>8)&255;HEAP8[$80+2>>0]=($97>>16)&255;HEAP8[$80+3>>0]=$97>>24;
           HEAP8[$81>>0] = 58;
           $98 = ((($95)) + 8|0);
           $99 = HEAPU8[$98>>0]|(HEAPU8[$98+1>>0]<<8)|(HEAPU8[$98+2>>0]<<16)|(HEAPU8[$98+3>>0]<<24);
           HEAP16[$82>>1]=$99&65535;HEAP16[$82+2>>1]=$99>>>16;
           HEAP8[$83>>0] = 58;
           $100 = ((($95)) + 12|0);
           $101 = HEAPU8[$100>>0]|(HEAPU8[$100+1>>0]<<8)|(HEAPU8[$100+2>>0]<<16)|(HEAPU8[$100+3>>0]<<24);
           HEAP8[$84>>0]=$101&255;HEAP8[$84+1>>0]=($101>>8)&255;HEAP8[$84+2>>0]=($101>>16)&255;HEAP8[$84+3>>0]=$101>>24;
           HEAP8[$85>>0] = 58;
           $102 = ((($95)) + 16|0);
           $103 = HEAPU8[$102>>0]|(HEAPU8[$102+1>>0]<<8)|(HEAPU8[$102+2>>0]<<16)|(HEAPU8[$102+3>>0]<<24);
           HEAP32[$86>>2] = $103;
           HEAP8[$87>>0] = 58;
           $104 = ((($95)) + 20|0);
           $105 = HEAPU8[$104>>0]|(HEAPU8[$104+1>>0]<<8)|(HEAPU8[$104+2>>0]<<16)|(HEAPU8[$104+3>>0]<<24);
           HEAP8[$88>>0]=$105&255;HEAP8[$88+1>>0]=($105>>8)&255;HEAP8[$88+2>>0]=($105>>16)&255;HEAP8[$88+3>>0]=$105>>24;
           HEAP8[$89>>0] = 58;
           $106 = ((($95)) + 24|0);
           $107 = HEAPU8[$106>>0]|(HEAPU8[$106+1>>0]<<8)|(HEAPU8[$106+2>>0]<<16)|(HEAPU8[$106+3>>0]<<24);
           HEAP16[$90>>1]=$107&65535;HEAP16[$90+2>>1]=$107>>>16;
           HEAP8[$91>>0] = 58;
           $108 = ((($95)) + 28|0);
           $109 = HEAPU8[$108>>0]|(HEAPU8[$108+1>>0]<<8)|(HEAPU8[$108+2>>0]<<16)|(HEAPU8[$108+3>>0]<<24);
           HEAP8[$92>>0]=$109&255;HEAP8[$92+1>>0]=($109>>8)&255;HEAP8[$92+2>>0]=($109>>16)&255;HEAP8[$92+3>>0]=$109>>24;
           HEAP8[$93>>0] = 0;
           $110 = ((($95)) + 33|0);
           HEAP32[$vararg_buffer16>>2] = $b$i;
           $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
           HEAP32[$vararg_ptr19>>2] = $c$i;
           $vararg_ptr20 = ((($vararg_buffer16)) + 8|0);
           HEAP32[$vararg_ptr20>>2] = $d$i;
           $vararg_ptr21 = ((($vararg_buffer16)) + 12|0);
           HEAP32[$vararg_ptr21>>2] = $e$i;
           $vararg_ptr22 = ((($vararg_buffer16)) + 16|0);
           HEAP32[$vararg_ptr22>>2] = $name$i;
           $111 = (_sscanf($110,175572,$vararg_buffer16)|0);
           $112 = ($111|0)==(5);
           L44: do {
            if ($112) {
             ;HEAP32[$sa$i>>2]=0|0;HEAP32[$sa$i+4>>2]=0|0;HEAP32[$sa$i+8>>2]=0|0;HEAP32[$sa$i+12>>2]=0|0;HEAP32[$sa$i+16>>2]=0|0;HEAP32[$sa$i+20>>2]=0|0;HEAP32[$sa$i+24>>2]=0|0;
             $113 = (_inet_pton(10,$v6conv$i,$77)|0);
             $114 = ($113|0)==(1);
             if (!($114)) {
              $140 = (___errno_location()|0);
              HEAP32[$140>>2] = 0;
              $$pre17$pre21 = $$pre17$pre22;
              break;
             }
             HEAP16[$sa$i>>1] = 10;
             $115 = (_list_add($list,$head,$name$i)|0);
             $116 = ($115|0)==(0|0);
             if ($116) {
              break L42;
             }
             $117 = ((($115)) + 28|0);
             ;HEAP32[$117>>2]=HEAP32[$sa$i>>2]|0;HEAP32[$117+4>>2]=HEAP32[$sa$i+4>>2]|0;HEAP32[$117+8>>2]=HEAP32[$sa$i+8>>2]|0;HEAP32[$117+12>>2]=HEAP32[$sa$i+12>>2]|0;HEAP32[$117+16>>2]=HEAP32[$sa$i+16>>2]|0;HEAP32[$117+20>>2]=HEAP32[$sa$i+20>>2]|0;HEAP32[$117+24>>2]=HEAP32[$sa$i+24>>2]|0;
             $118 = ((($115)) + 12|0);
             HEAP32[$118>>2] = $117;
             $119 = HEAP32[$c$i>>2]|0;
             $120 = $119 >>> 3;
             $121 = $119 & 7;
             $122 = (16 - ($120))|0;
             _memset(($78|0),-1,($120|0))|0;
             $123 = (($78) + ($120)|0);
             _memset(($123|0),0,($122|0))|0;
             $124 = ($121|0)==(0);
             if (!($124)) {
              $125 = (8 - ($121))|0;
              $126 = 255 << $125;
              $127 = $126&255;
              HEAP8[$123>>0] = $127;
             }
             $128 = ((($115)) + 56|0);
             ;HEAP32[$128>>2]=HEAP32[$sa$i>>2]|0;HEAP32[$128+4>>2]=HEAP32[$sa$i+4>>2]|0;HEAP32[$128+8>>2]=HEAP32[$sa$i+8>>2]|0;HEAP32[$128+12>>2]=HEAP32[$sa$i+12>>2]|0;HEAP32[$128+16>>2]=HEAP32[$sa$i+16>>2]|0;HEAP32[$128+20>>2]=HEAP32[$sa$i+20>>2]|0;HEAP32[$128+24>>2]=HEAP32[$sa$i+24>>2]|0;
             $129 = ((($115)) + 16|0);
             HEAP32[$129>>2] = $128;
             $scan$07$i = HEAP32[$list>>2]|0;
             $130 = ($scan$07$i|0)==(0|0);
             $131 = $scan$07$i;
             L53: do {
              if (!($130)) {
               $scan$08$i = $scan$07$i;
               while(1) {
                $132 = ((($scan$08$i)) + 112|0);
                $133 = (_strcmp($name$i,$132)|0);
                $134 = ($133|0)==(0);
                if ($134) {
                 $scan$08$i$lcssa = $scan$08$i;
                 break;
                }
                $scan$0$i = HEAP32[$scan$08$i>>2]|0;
                $135 = ($scan$0$i|0)==(0|0);
                if ($135) {
                 break L53;
                } else {
                 $scan$08$i = $scan$0$i;
                }
               }
               $136 = ((($scan$08$i$lcssa)) + 8|0);
               $137 = HEAP32[$136>>2]|0;
               $138 = ((($115)) + 8|0);
               HEAP32[$138>>2] = $137;
               $$pre17$pre21 = $131;
               break L44;
              }
             } while(0);
             $139 = ((($115)) + 8|0);
             HEAP32[$139>>2] = 0;
             $$pre17$pre21 = $131;
            } else {
             $$pre17$pre21 = $$pre17$pre22;
            }
           } while(0);
           $141 = (_fgets($linebuf$i,512,$73)|0);
           $142 = ($141|0)==(0|0);
           if ($142) {
            $$pre17 = $$pre17$pre21;
            break L40;
           } else {
            $$pre17$pre22 = $$pre17$pre21;$95 = $141;
           }
          }
          $$pre17$pre$pre = HEAP32[$list>>2]|0;
          $$pre17 = $$pre17$pre$pre;
         }
        } while(0);
        (_fclose($73)|0);
        $143 = $$pre17;
       }
       HEAP32[$ifap>>2] = $143;
       $$0 = 0;
       break L5;
      }
     } while(0);
     (_close($11)|0);
     label = 47;
    }
   }
  } while(0);
  if ((label|0) == 47) {
   $144 = HEAP32[$list>>2]|0;
   $145 = ($144|0)==(0|0);
   if ($145) {
    $$0 = -1;
   } else {
    $head$0$in1$i = $144;
    while(1) {
     $146 = HEAP32[$head$0$in1$i>>2]|0;
     _free($head$0$in1$i);
     $147 = ($146|0)==(0|0);
     if ($147) {
      $$0 = -1;
      break;
     } else {
      $head$0$in1$i = $146;
     }
    }
   }
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return ($$1|0);
}
function _getpeername($fd,$addr,$len) {
 $fd = $fd|0;
 $addr = $addr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $fd;
 $1 = ((($0)) + 4|0);
 $2 = $addr;
 HEAP32[$1>>2] = $2;
 $3 = ((($0)) + 8|0);
 $4 = $len;
 HEAP32[$3>>2] = $4;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 16|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 20|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 7;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $8 = (___syscall102(102,($vararg_buffer|0))|0);
 $9 = (___syscall_ret($8)|0);
 STACKTOP = sp;return ($9|0);
}
function _getservbyname($name,$prots) {
 $name = $name|0;
 $prots = $prots|0;
 var $0 = 0, $1 = 0, $getservbyname$se$ = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $res = sp;
 $0 = (_getservbyname_r($name,$prots,14884,14900,32,$res)|0);
 $1 = ($0|0)==(0);
 $getservbyname$se$ = $1 ? 14884 : 0;
 STACKTOP = sp;return ($getservbyname$se$|0);
}
function _getservbyname_r($name,$prots,$se,$buf,$buflen,$res) {
 $name = $name|0;
 $prots = $prots|0;
 $se = $se|0;
 $buf = $buf|0;
 $buflen = $buflen|0;
 $res = $res|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ai = 0, $hint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ai = sp + 32|0;
 $hint = sp;
 ;HEAP32[$hint>>2]=HEAP32[14932>>2]|0;HEAP32[$hint+4>>2]=HEAP32[14932+4>>2]|0;HEAP32[$hint+8>>2]=HEAP32[14932+8>>2]|0;HEAP32[$hint+12>>2]=HEAP32[14932+12>>2]|0;HEAP32[$hint+16>>2]=HEAP32[14932+16>>2]|0;HEAP32[$hint+20>>2]=HEAP32[14932+20>>2]|0;HEAP32[$hint+24>>2]=HEAP32[14932+24>>2]|0;HEAP32[$hint+28>>2]=HEAP32[14932+28>>2]|0;
 $0 = ($prots|0)==(0|0);
 L1: do {
  if ($0) {
   $1 = (_getservbyname_r($name,175587,$se,$buf,$buflen,$res)|0);
   $2 = ($1|0)==(0);
   if ($2) {
    $$0 = 0;
   } else {
    $3 = (_getservbyname_r($name,175591,$se,$buf,$buflen,$res)|0);
    $$0 = $3;
   }
  } else {
   $4 = $buf;
   $5 = $4 & 3;
   $6 = ($5|0)!=(0);
   $$ = $6 ? $5 : 4;
   $7 = (12 - ($$))|0;
   $8 = ($7>>>0)>($buflen>>>0);
   if ($8) {
    $$0 = 34;
   } else {
    $9 = (4 - ($$))|0;
    $10 = (($buf) + ($9)|0);
    $11 = (_strcmp($prots,175587)|0);
    $12 = ($11|0)==(0);
    if ($12) {
     $13 = ((($hint)) + 12|0);
     HEAP32[$13>>2] = 6;
    } else {
     $14 = (_strcmp($prots,175591)|0);
     $15 = ($14|0)==(0);
     if (!($15)) {
      $$0 = 22;
      break;
     }
     $16 = ((($hint)) + 12|0);
     HEAP32[$16>>2] = 17;
    }
    $17 = (_getaddrinfo((0|0),($name|0),($hint|0),($ai|0))|0);
    switch ($17|0) {
    case -11: case -10:  {
     $$0 = 12;
     break L1;
     break;
    }
    case 0:  {
     HEAP32[$se>>2] = $name;
     $18 = ((($se)) + 4|0);
     HEAP32[$18>>2] = $10;
     $19 = $name;
     HEAP32[$10>>2] = $19;
     $20 = HEAP32[$18>>2]|0;
     $21 = ((($20)) + 4|0);
     HEAP32[$21>>2] = 0;
     $22 = HEAP32[$ai>>2]|0;
     $23 = ((($22)) + 20|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($24)) + 2|0);
     $26 = HEAP16[$25>>1]|0;
     $27 = $26&65535;
     $28 = ((($se)) + 8|0);
     HEAP32[$28>>2] = $27;
     $29 = ((($se)) + 12|0);
     HEAP32[$29>>2] = $prots;
     _freeaddrinfo($22);
     HEAP32[$res>>2] = $se;
     $$0 = 0;
     break L1;
     break;
    }
    default: {
     $$0 = 2;
     break L1;
    }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _getservbyport($port,$prots) {
 $port = $port|0;
 $prots = $prots|0;
 var $0 = 0, $1 = 0, $getservbyport$se$ = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $res = sp;
 $0 = (_getservbyport_r($port,$prots,14964,14980,32,$res)|0);
 $1 = ($0|0)==(0);
 $getservbyport$se$ = $1 ? 14964 : 0;
 STACKTOP = sp;return ($getservbyport$se$|0);
}
function _getservbyport_r($port,$prots,$se,$buf,$buflen,$res) {
 $port = $port|0;
 $prots = $prots|0;
 $se = $se|0;
 $buf = $buf|0;
 $buflen = $buflen|0;
 $res = $res|0;
 var $$ = 0, $$0 = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sin = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sin = sp;
 HEAP16[$sin>>1] = 2;
 $0 = ((($sin)) + 2|0);
 $1 = $port&65535;
 HEAP16[$0>>1] = $1;
 $2 = ((($sin)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($sin)) + 8|0);
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ($prots|0)==(0|0);
 L1: do {
  if ($8) {
   $9 = (_getservbyport_r($port,175587,$se,$buf,$buflen,$res)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    $$0 = 0;
   } else {
    $11 = (_getservbyport_r($port,175591,$se,$buf,$buflen,$res)|0);
    $$0 = $11;
   }
  } else {
   $12 = $buf;
   $13 = $12 & 3;
   $14 = ($13|0)!=(0);
   $$ = $14 ? $13 : 4;
   $15 = (12 - ($$))|0;
   $16 = ($15>>>0)>($buflen>>>0);
   if ($16) {
    $$0 = 34;
   } else {
    $17 = (4 - ($$))|0;
    $18 = (($buf) + ($17)|0);
    $19 = (_strcmp($prots,175587)|0);
    $20 = ($19|0)==(0);
    if (!($20)) {
     $21 = (_strcmp($prots,175591)|0);
     $22 = ($21|0)==(0);
     if (!($22)) {
      $$0 = 22;
      break;
     }
    }
    $23 = ((($se)) + 8|0);
    HEAP32[$23>>2] = $port;
    $24 = ((($se)) + 12|0);
    HEAP32[$24>>2] = $prots;
    $25 = ((($se)) + 4|0);
    HEAP32[$25>>2] = $18;
    $$sum = (($17) + 8)|0;
    $26 = (($buf) + ($$sum)|0);
    $27 = (($buflen) + -8)|0;
    $28 = (($27) - ($17))|0;
    $$sum1 = (($17) + 4)|0;
    $29 = (($buf) + ($$sum1)|0);
    HEAP32[$29>>2] = 0;
    HEAP32[$se>>2] = $26;
    $30 = HEAP32[$25>>2]|0;
    HEAP32[$30>>2] = $26;
    $31 = (_strcmp($prots,175591)|0);
    $32 = ($31|0)!=(0);
    $33 = $32 ? 0 : 16;
    $34 = (_getnameinfo(($sin|0),16,(0|0),0,($26|0),($28|0),($33|0))|0);
    switch ($34|0) {
    case -11: case -10:  {
     $$0 = 12;
     break L1;
     break;
    }
    case 0:  {
     HEAP32[$res>>2] = $se;
     $$0 = 0;
     break L1;
     break;
    }
    default: {
     $$0 = 2;
     break L1;
    }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _getsockname($fd,$addr,$len) {
 $fd = $fd|0;
 $addr = $addr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $fd;
 $1 = ((($0)) + 4|0);
 $2 = $addr;
 HEAP32[$1>>2] = $2;
 $3 = ((($0)) + 8|0);
 $4 = $len;
 HEAP32[$3>>2] = $4;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 16|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 20|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $8 = (___syscall102(102,($vararg_buffer|0))|0);
 $9 = (___syscall_ret($8)|0);
 STACKTOP = sp;return ($9|0);
}
function _getsockopt($fd,$level,$optname,$optval,$optlen) {
 $fd = $fd|0;
 $level = $level|0;
 $optname = $optname|0;
 $optval = $optval|0;
 $optlen = $optlen|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $fd;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = $level;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = $optname;
 $3 = ((($0)) + 12|0);
 $4 = $optval;
 HEAP32[$3>>2] = $4;
 $5 = ((($0)) + 16|0);
 $6 = $optlen;
 HEAP32[$5>>2] = $6;
 $7 = ((($0)) + 20|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $8 = (___syscall102(102,($vararg_buffer|0))|0);
 $9 = (___syscall_ret($8)|0);
 STACKTOP = sp;return ($9|0);
}
function _herror($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[7488>>2]|0;
 $1 = ($msg|0)!=(0|0);
 $2 = $1 ? $msg : 180292;
 $3 = $1 ? 175595 : 180292;
 $4 = (___h_errno_location()|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_hstrerror($5)|0);
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $6;
 (_fprintf($0,175598,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _hstrerror($ecode) {
 $ecode = $ecode|0;
 var $$0 = 0, $$01 = 0, $$03 = 0, $$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s$0$lcssa = 0, $s$02 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $$01 = (($ecode) + -1)|0;
 $0 = ($$01|0)==(0);
 L1: do {
  if ($0) {
   $s$0$lcssa = 175605;
  } else {
   $$03 = $$01;$s$02 = 175605;
   while(1) {
    $2 = HEAP8[$s$02>>0]|0;
    $3 = ($2<<24>>24)==(0);
    if ($3) {
     $s$0$lcssa = $s$02;
     break L1;
    }
    $4 = ((($s$02)) + 1|0);
    $5 = $4;
    while(1) {
     $$pre = HEAP8[$5>>0]|0;
     $6 = ($$pre<<24>>24)==(0);
     $7 = ((($5)) + 1|0);
     if ($6) {
      $$lcssa = $7;
      break;
     } else {
      $5 = $7;
     }
    }
    $$0 = (($$03) + -1)|0;
    $1 = ($$0|0)==(0);
    if ($1) {
     $s$0$lcssa = $$lcssa;
     break;
    } else {
     $$03 = $$0;$s$02 = $$lcssa;
    }
   }
  }
 } while(0);
 $8 = HEAP8[$s$0$lcssa>>0]|0;
 $9 = ($8<<24>>24)!=(0);
 $10 = ((($s$0$lcssa)) + 1|0);
 $11 = $9 ? $s$0$lcssa : $10;
 return ($11|0);
}
function _htonl($n) {
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_llvm_bswap_i32(($n|0))|0);
 return ($0|0);
}
function _htons($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n&65535;
 $1 = $0 << 8;
 $2 = $0 >>> 8;
 $3 = $1 | $2;
 $4 = $3&65535;
 return ($4|0);
}
function ___h_errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7452|0);
}
function _if_freenameindex($idx) {
 $idx = $idx|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($idx);
 return;
}
function _if_indextoname($index,$name) {
 $index = $index|0;
 $name = $name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ifr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $ifr = sp + 16|0;
 $0 = (_socket(1,524290,0)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = ((($ifr)) + 16|0);
  HEAP32[$2>>2] = $index;
  HEAP32[$vararg_buffer>>2] = $ifr;
  $3 = (_ioctl($0,35088,$vararg_buffer)|0);
  HEAP32[$vararg_buffer1>>2] = $0;
  (___syscall6(6,($vararg_buffer1|0))|0);
  $4 = ($3|0)<(0);
  if ($4) {
   $$0 = 0;
  } else {
   $5 = (_strncpy($name,$ifr,16)|0);
   $$0 = $5;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _if_nameindex() {
 var $$0$i = 0, $$0$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conf$i = 0, $exitcond$i = 0, $i$0$lcssa$i = 0, $i$01$i = 0, $k$0$lcssa$i = 0;
 var $k$02$i = 0, $k$1$i = 0, $n$0 = 0, $p$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $conf$i = sp + 24|0;
 $0 = (_socket(1,524290,0)|0);
 $1 = ($0|0)>(-1);
 if ($1) {
  $2 = ((($conf$i)) + 4|0);
  $n$0 = 0;
  while(1) {
   $3 = ($n$0*40)|0;
   $4 = (_malloc($3)|0);
   $5 = ($4|0)==(0|0);
   do {
    if ($5) {
     $$0$i = 0;
     label = 14;
    } else {
     $6 = (($4) + ($n$0<<3)|0);
     HEAP32[$2>>2] = $6;
     $7 = $n$0 << 5;
     HEAP32[$conf$i>>2] = $7;
     HEAP32[$vararg_buffer>>2] = $conf$i;
     $8 = (_ioctl($0,35090,$vararg_buffer)|0);
     $9 = ($8|0)<(0);
     if ($9) {
      _free($4);
      $$0$i = 0;
      label = 14;
      break;
     }
     $10 = HEAP32[$conf$i>>2]|0;
     $11 = ($10|0)==($7|0);
     if ($11) {
      _free($4);
      break;
     }
     $12 = $10 >>> 5;
     $13 = ($12|0)==(0);
     if ($13) {
      $i$0$lcssa$i = 0;$k$0$lcssa$i = 0;
     } else {
      $i$01$i = 0;$k$02$i = 0;
      while(1) {
       $14 = HEAP32[$2>>2]|0;
       $15 = (($14) + ($i$01$i<<5)|0);
       HEAP32[$vararg_buffer1>>2] = $15;
       $16 = (_ioctl($0,35123,$vararg_buffer1)|0);
       $17 = ($16|0)<(0);
       if ($17) {
        $18 = (($k$02$i) + 1)|0;
        $k$1$i = $18;
       } else {
        $19 = HEAP32[$2>>2]|0;
        $20 = (((($19) + ($i$01$i<<5)|0)) + 16|0);
        $21 = HEAP32[$20>>2]|0;
        $22 = (($i$01$i) - ($k$02$i))|0;
        $23 = (($4) + ($22<<3)|0);
        HEAP32[$23>>2] = $21;
        $24 = (($19) + ($i$01$i<<5)|0);
        $25 = (((($4) + ($22<<3)|0)) + 4|0);
        HEAP32[$25>>2] = $24;
        $k$1$i = $k$02$i;
       }
       $26 = (($i$01$i) + 1)|0;
       $exitcond$i = ($26|0)==($12|0);
       if ($exitcond$i) {
        $i$0$lcssa$i = $12;$k$0$lcssa$i = $k$1$i;
        break;
       } else {
        $i$01$i = $26;$k$02$i = $k$1$i;
       }
      }
     }
     $27 = (($i$0$lcssa$i) - ($k$0$lcssa$i))|0;
     $28 = (((($4) + ($27<<3)|0)) + 4|0);
     HEAP32[$28>>2] = 0;
     $29 = (($4) + ($27<<3)|0);
     HEAP32[$29>>2] = 0;
     $$0$i = $4;
     label = 14;
    }
   } while(0);
   if ((label|0) == 14) {
    label = 0;
    $30 = ($$0$i|0)==((-1)|0);
    if (!($30)) {
     $$0$i$lcssa = $$0$i;
     break;
    }
   }
   $31 = (($n$0) + 1)|0;
   $n$0 = $31;
  }
  HEAP32[$vararg_buffer4>>2] = $0;
  (___syscall6(6,($vararg_buffer4|0))|0);
  $p$0 = $$0$i$lcssa;
 } else {
  $p$0 = 0;
 }
 $32 = (___errno_location()|0);
 HEAP32[$32>>2] = 105;
 STACKTOP = sp;return ($p$0|0);
}
function _if_nametoindex($name) {
 $name = $name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $ifr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $ifr = sp + 16|0;
 $0 = (_socket(1,524290,0)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  (_strncpy($ifr,$name,16)|0);
  HEAP32[$vararg_buffer>>2] = $ifr;
  $2 = (_ioctl($0,35123,$vararg_buffer)|0);
  HEAP32[$vararg_buffer1>>2] = $0;
  (___syscall6(6,($vararg_buffer1|0))|0);
  $3 = ($2|0)<(0);
  $4 = ((($ifr)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $3 ? 0 : $5;
  $$0 = $6;
 }
 STACKTOP = sp;return ($$0|0);
}
function _inet_network($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_inet_addr(($p|0))|0);
 $1 = (_ntohl($0)|0);
 return ($1|0);
}
function _inet_aton($cp,$inp) {
 $cp = $cp|0;
 $inp = $inp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $sin = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sin = sp;
 $0 = (___ipparse($sin,2,$cp)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = ((($sin)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  HEAP32[$inp>>2] = $3;
  $$0 = 1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _inet_makeaddr($n,$h) {
 $n = $n|0;
 $h = $h|0;
 var $$0 = 0, $$pn = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n>>>0)<(256);
 do {
  if ($0) {
   $1 = $n << 24;
   $$pn = $1;
  } else {
   $2 = ($n>>>0)<(65536);
   if ($2) {
    $3 = $n << 16;
    $$pn = $3;
    break;
   } else {
    $4 = $n << 8;
    $$pn = $4;
    break;
   }
  }
 } while(0);
 $$0 = $$pn | $h;
 return ($$0|0);
}
function _inet_lnaof($in) {
 $in = $in|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$in>>2]|0;
 $1 = ($0|0)>(-1);
 do {
  if ($1) {
   $2 = $0 & 16777215;
   $$0 = $2;
  } else {
   $3 = ($0>>>0)<(3221225472);
   if ($3) {
    $4 = $0 & 65535;
    $$0 = $4;
    break;
   } else {
    $5 = $0 & 255;
    $$0 = $5;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _inet_netof($in) {
 $in = $in|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$in>>2]|0;
 $1 = ($0|0)>(-1);
 do {
  if ($1) {
   $2 = $0 >>> 24;
   $$0 = $2;
  } else {
   $3 = ($0>>>0)<(3221225472);
   if ($3) {
    $4 = $0 >>> 16;
    $$0 = $4;
    break;
   } else {
    $5 = $0 >>> 8;
    $$0 = $5;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _inet_ntoa($in) {
 $in = $in|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$in>>2]|0;
 $1 = $0 & 255;
 $2 = $0 >>> 8;
 $3 = $2 & 255;
 $4 = $0 >>> 16;
 $5 = $4 & 255;
 $6 = $0 >>> 24;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $5;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 (_snprintf(175689,16,175705,$vararg_buffer)|0);
 STACKTOP = sp;return (175689|0);
}
function _inet_ntop($af,$a0,$s,$l) {
 $af = $af|0;
 $a0 = $a0|0;
 $s = $s|0;
 $l = $l|0;
 var $$0 = 0, $$max$0 = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $best$04 = 0, $best$1 = 0, $best$1$lcssa = 0, $buf = 0, $i$0$best$0 = 0, $i$02 = 0, $i$02$lcssa = 0, $max$03 = 0, $max$1 = 0, $max$1$lcssa = 0, $or$cond = 0;
 var $phitmp = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $buf = sp + 88|0;
 switch ($af|0) {
 case 2:  {
  $0 = HEAP8[$a0>>0]|0;
  $1 = $0&255;
  $2 = ((($a0)) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ((($a0)) + 2|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = ((($a0)) + 3|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $4;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $7;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $10;
  $11 = (_snprintf($s,$l,175705,$vararg_buffer)|0);
  $12 = ($11>>>0)<($l>>>0);
  if ($12) {
   $$0 = $s;
  } else {
   label = 15;
  }
  break;
 }
 case 10:  {
  $13 = (_memcmp($a0,175802,12)|0);
  $14 = ($13|0)==(0);
  $15 = HEAP8[$a0>>0]|0;
  $16 = $15&255;
  $17 = $16 << 8;
  $18 = ((($a0)) + 1|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $17 | $20;
  $22 = ((($a0)) + 2|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $24 << 8;
  $26 = ((($a0)) + 3|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = $25 | $28;
  $30 = ((($a0)) + 4|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $32 << 8;
  $34 = ((($a0)) + 5|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = $33 | $36;
  $38 = ((($a0)) + 6|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = $40 << 8;
  $42 = ((($a0)) + 7|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = $41 | $44;
  $46 = ((($a0)) + 8|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $48 << 8;
  $50 = ((($a0)) + 9|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = $49 | $52;
  $54 = ((($a0)) + 10|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = $56 << 8;
  $58 = ((($a0)) + 11|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = $57 | $60;
  $62 = ((($a0)) + 12|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = ((($a0)) + 13|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = ((($a0)) + 14|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = ((($a0)) + 15|0);
  $70 = HEAP8[$69>>0]|0;
  if ($14) {
   $78 = $66&255;
   $79 = $68&255;
   $80 = $70&255;
   HEAP32[$vararg_buffer14>>2] = $21;
   $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
   HEAP32[$vararg_ptr17>>2] = $29;
   $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
   HEAP32[$vararg_ptr18>>2] = $37;
   $vararg_ptr19 = ((($vararg_buffer14)) + 12|0);
   HEAP32[$vararg_ptr19>>2] = $45;
   $vararg_ptr20 = ((($vararg_buffer14)) + 16|0);
   HEAP32[$vararg_ptr20>>2] = $53;
   $vararg_ptr21 = ((($vararg_buffer14)) + 20|0);
   HEAP32[$vararg_ptr21>>2] = $61;
   $vararg_ptr22 = ((($vararg_buffer14)) + 24|0);
   HEAP32[$vararg_ptr22>>2] = $64;
   $vararg_ptr23 = ((($vararg_buffer14)) + 28|0);
   HEAP32[$vararg_ptr23>>2] = $78;
   $vararg_ptr24 = ((($vararg_buffer14)) + 32|0);
   HEAP32[$vararg_ptr24>>2] = $79;
   $vararg_ptr25 = ((($vararg_buffer14)) + 36|0);
   HEAP32[$vararg_ptr25>>2] = $80;
   (_snprintf($buf,100,175741,$vararg_buffer14)|0);
  } else {
   $71 = $64 << 8;
   $72 = $66&255;
   $73 = $72 | $71;
   $74 = $68&255;
   $75 = $74 << 8;
   $76 = $70&255;
   $77 = $75 | $76;
   HEAP32[$vararg_buffer4>>2] = $21;
   $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $29;
   $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
   HEAP32[$vararg_ptr8>>2] = $37;
   $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
   HEAP32[$vararg_ptr9>>2] = $45;
   $vararg_ptr10 = ((($vararg_buffer4)) + 16|0);
   HEAP32[$vararg_ptr10>>2] = $53;
   $vararg_ptr11 = ((($vararg_buffer4)) + 20|0);
   HEAP32[$vararg_ptr11>>2] = $61;
   $vararg_ptr12 = ((($vararg_buffer4)) + 24|0);
   HEAP32[$vararg_ptr12>>2] = $73;
   $vararg_ptr13 = ((($vararg_buffer4)) + 28|0);
   HEAP32[$vararg_ptr13>>2] = $77;
   (_snprintf($buf,100,175717,$vararg_buffer4)|0);
  }
  $81 = HEAP8[$buf>>0]|0;
  $82 = ($81<<24>>24)==(0);
  if (!($82)) {
   $84 = $81;$86 = $buf;$best$04 = 0;$i$02 = 0;$max$03 = 2;
   while(1) {
    $83 = ($i$02|0)==(0);
    $85 = ($84<<24>>24)==(58);
    $or$cond = $83 | $85;
    if ($or$cond) {
     $87 = (_strspn($86,175771)|0);
     $88 = ($87|0)>($max$03|0);
     $$max$0 = $88 ? $87 : $max$03;
     $i$0$best$0 = $88 ? $i$02 : $best$04;
     $best$1 = $i$0$best$0;$max$1 = $$max$0;
    } else {
     $best$1 = $best$04;$max$1 = $max$03;
    }
    $89 = (($i$02) + 1)|0;
    $90 = (($buf) + ($89)|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = ($91<<24>>24)==(0);
    if ($92) {
     $best$1$lcssa = $best$1;$i$02$lcssa = $i$02;$max$1$lcssa = $max$1;
     break;
    } else {
     $84 = $91;$86 = $90;$best$04 = $best$1;$i$02 = $89;$max$03 = $max$1;
    }
   }
   $93 = ($max$1$lcssa|0)>(2);
   if ($93) {
    $phitmp = (($i$02$lcssa) + 2)|0;
    $94 = (($best$1$lcssa) + 1)|0;
    $95 = (($buf) + ($94)|0);
    HEAP8[$95>>0] = 58;
    $96 = (($buf) + ($best$1$lcssa)|0);
    HEAP8[$96>>0] = 58;
    $$sum = (($best$1$lcssa) + 2)|0;
    $97 = (($buf) + ($$sum)|0);
    $$sum1 = (($best$1$lcssa) + ($max$1$lcssa))|0;
    $98 = (($buf) + ($$sum1)|0);
    $99 = (($phitmp) - ($max$1$lcssa))|0;
    $100 = (($99) - ($best$1$lcssa))|0;
    _memmove(($97|0),($98|0),($100|0))|0;
   }
  }
  $101 = (_strlen($buf)|0);
  $102 = ($101>>>0)<($l>>>0);
  if ($102) {
   (_strcpy($s,$buf)|0);
   $$0 = $s;
  } else {
   label = 15;
  }
  break;
 }
 default: {
  $103 = (___errno_location()|0);
  HEAP32[$103>>2] = 97;
  $$0 = 0;
 }
 }
 if ((label|0) == 15) {
  $104 = (___errno_location()|0);
  HEAP32[$104>>2] = 28;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _inet_pton($af,$s,$a0) {
 $af = $af|0;
 $s = $s|0;
 $a0 = $a0|0;
 var $$0 = 0, $$01545 = 0, $$2 = 0, $$2$lcssa125 = 0, $$3 = 0, $$4 = 0, $$lcssa132 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$pre = 0, $$pre73 = 0, $$sum = 0, $$sum16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $a$048 = 0, $brk$0 = 0, $brk$0$lcssa129 = 0, $brk$1 = 0, $brk$2 = 0, $exitcond = 0, $i$047 = 0, $i$1 = 0, $i$1$lcssa127 = 0, $i$2 = 0, $ip = 0, $isdigit = 0, $isdigit$1 = 0, $isdigit$2 = 0;
 var $isdigittmp = 0, $isdigittmp$1 = 0, $isdigittmp$2 = 0, $j$026 = 0, $j$027 = 0, $j$132 = 0, $j$151 = 0, $j$151$lcssa = 0, $j$349 = 0, $need_v4$0 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond14 = 0, $or$cond18 = 0, $or$cond4 = 0, $or$cond7 = 0, $v$029 = 0, $v$030 = 0, $v$134 = 0, $v$152 = 0;
 var $v$152$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ip = sp;
 L1: do {
  switch ($af|0) {
  case 2:  {
   $$01545 = $s;$i$047 = 0;
   while(1) {
    $0 = HEAP8[$$01545>>0]|0;
    $1 = $0 << 24 >> 24;
    $isdigittmp = (($1) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if (!($isdigit)) {
     $$0 = 0;
     break L1;
    }
    $2 = ((($$01545)) + 1|0);
    $3 = HEAP8[$2>>0]|0;
    $4 = $3 << 24 >> 24;
    $isdigittmp$1 = (($4) + -48)|0;
    $isdigit$1 = ($isdigittmp$1>>>0)<(10);
    if ($isdigit$1) {
     $84 = ($isdigittmp*10)|0;
     $85 = (($84) + -48)|0;
     $86 = (($85) + ($4))|0;
     $87 = ((($$01545)) + 2|0);
     $88 = HEAP8[$87>>0]|0;
     $89 = $88 << 24 >> 24;
     $isdigittmp$2 = (($89) + -48)|0;
     $isdigit$2 = ($isdigittmp$2>>>0)<(10);
     if ($isdigit$2) {
      $90 = ($86*10)|0;
      $91 = (($90) + -48)|0;
      $92 = (($91) + ($89))|0;
      $j$027 = 3;$v$030 = $92;
     } else {
      $j$027 = 2;$v$030 = $86;
     }
     $5 = ($0<<24>>24)==(48);
     $6 = ($v$030|0)>(255);
     $or$cond = $6 | $5;
     if ($or$cond) {
      $$0 = 0;
      break L1;
     } else {
      $j$026 = $j$027;$v$029 = $v$030;
     }
    } else {
     $j$026 = 1;$v$029 = $isdigittmp;
    }
    $7 = $v$029&255;
    $8 = (($a0) + ($i$047)|0);
    HEAP8[$8>>0] = $7;
    $9 = (($$01545) + ($j$026)|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(0);
    $12 = ($i$047|0)==(3);
    $or$cond4 = $12 & $11;
    if ($or$cond4) {
     $$0 = 1;
     break L1;
    }
    $13 = ($10<<24>>24)==(46);
    if (!($13)) {
     $$0 = 0;
     break L1;
    }
    $14 = (($j$026) + 1)|0;
    $15 = (($$01545) + ($14)|0);
    $16 = (($i$047) + 1)|0;
    $17 = ($16|0)<(4);
    if ($17) {
     $$01545 = $15;$i$047 = $16;
    } else {
     $$0 = 0;
     break;
    }
   }
   break;
  }
  case 10:  {
   $19 = HEAP8[$s>>0]|0;
   $20 = ($19<<24>>24)==(58);
   if ($20) {
    $21 = ((($s)) + 1|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ($22<<24>>24)==(58);
    if ($23) {
     $$2 = $21;$24 = 58;$brk$0 = -1;$i$1 = 0;
    } else {
     $$0 = 0;
     break L1;
    }
   } else {
    $$2 = $s;$24 = $19;$brk$0 = -1;$i$1 = 0;
   }
   L17: while(1) {
    $25 = ($24<<24>>24)==(58);
    $26 = ($brk$0|0)<(0);
    $or$cond7 = $26 & $25;
    if ($or$cond7) {
     $27 = $i$1 & 7;
     $28 = (($ip) + ($27<<1)|0);
     HEAP16[$28>>1] = 0;
     $29 = ((($$2)) + 1|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $$4 = $29;$brk$2 = $i$1;$i$2 = $i$1;$need_v4$0 = 0;
      break;
     }
     $32 = ($i$1|0)==(7);
     if ($32) {
      $$0 = 0;
      break L1;
     } else {
      $$3 = $29;$$pre = $30;$brk$1 = $i$1;
     }
    } else {
     $34 = $24;$j$151 = 0;$v$152 = 0;
     while(1) {
      $33 = $34 << 24 >> 24;
      $35 = (($33) + -48)|0;
      $36 = ($35>>>0)<(10);
      if ($36) {
       $44 = $35;
      } else {
       $37 = $33 | 32;
       $38 = (($37) + -97)|0;
       $39 = ($38>>>0)<(6);
       $40 = (($37) + -87)|0;
       $41 = ($40|0)>(-1);
       $or$cond18 = $39 & $41;
       if ($or$cond18) {
        $44 = $40;
       } else {
        $j$151$lcssa = $j$151;$v$152$lcssa = $v$152;
        label = 18;
        break;
       }
      }
      $42 = $v$152 << 4;
      $43 = (($44) + ($42))|0;
      $45 = (($j$151) + 1)|0;
      $46 = ($45|0)<(4);
      if (!($46)) {
       $j$132 = $45;$v$134 = $43;
       break;
      }
      $$phi$trans$insert = (($$2) + ($45)|0);
      $$pre73 = HEAP8[$$phi$trans$insert>>0]|0;
      $34 = $$pre73;$j$151 = $45;$v$152 = $43;
     }
     if ((label|0) == 18) {
      label = 0;
      $47 = ($j$151$lcssa|0)==(0);
      if ($47) {
       $$0 = 0;
       break L1;
      } else {
       $j$132 = $j$151$lcssa;$v$134 = $v$152$lcssa;
      }
     }
     $48 = $v$134&65535;
     $49 = $i$1 & 7;
     $50 = (($ip) + ($49<<1)|0);
     HEAP16[$50>>1] = $48;
     $51 = (($$2) + ($j$132)|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = ($52<<24>>24)==(0);
     if ($53) {
      $54 = ($brk$0|0)>(-1);
      $55 = ($i$1|0)==(7);
      $or$cond11 = $55 | $54;
      if ($or$cond11) {
       $$4 = $$2;$brk$2 = $brk$0;$i$2 = $i$1;$need_v4$0 = 0;
       break;
      }
     }
     $56 = ($i$1|0)==(7);
     if ($56) {
      $$0 = 0;
      break L1;
     }
     switch ($52<<24>>24) {
     case 46:  {
      $$2$lcssa125 = $$2;$$lcssa132 = $26;$brk$0$lcssa129 = $brk$0;$i$1$lcssa127 = $i$1;
      label = 23;
      break L17;
      break;
     }
     case 58:  {
      break;
     }
     default: {
      $$0 = 0;
      break L1;
     }
     }
     $59 = (($j$132) + 1)|0;
     $60 = (($$2) + ($59)|0);
     $$pre$pre = HEAP8[$60>>0]|0;
     $$3 = $60;$$pre = $$pre$pre;$brk$1 = $brk$0;
    }
    $61 = (($i$1) + 1)|0;
    $$2 = $$3;$24 = $$pre;$brk$0 = $brk$1;$i$1 = $61;
   }
   if ((label|0) == 23) {
    $57 = ($i$1$lcssa127|0)<(6);
    $or$cond14 = $57 & $$lcssa132;
    if ($or$cond14) {
     $$0 = 0;
     break L1;
    }
    $58 = (($i$1$lcssa127) + 1)|0;
    $$4 = $$2$lcssa125;$brk$2 = $brk$0$lcssa129;$i$2 = $58;$need_v4$0 = 1;
   }
   $62 = ($brk$2|0)>(-1);
   if ($62) {
    $63 = (($ip) + ($brk$2<<1)|0);
    $$sum = (7 - ($i$2))|0;
    $$sum16 = (($$sum) + ($brk$2))|0;
    $64 = (($ip) + ($$sum16<<1)|0);
    $65 = (($i$2) + 1)|0;
    $66 = (($65) - ($brk$2))|0;
    $67 = $66 << 1;
    _memmove(($64|0),($63|0),($67|0))|0;
    $68 = ($$sum|0)>(0);
    if ($68) {
     $69 = $i$2 << 1;
     $70 = (14 - ($69))|0;
     _memset(($63|0),0,($70|0))|0;
     $a$048 = $a0;$j$349 = 0;
    } else {
     $a$048 = $a0;$j$349 = 0;
    }
   } else {
    $a$048 = $a0;$j$349 = 0;
   }
   while(1) {
    $71 = (($ip) + ($j$349<<1)|0);
    $72 = HEAP16[$71>>1]|0;
    $73 = ($72&65535) >>> 8;
    $74 = $73&255;
    $75 = ((($a$048)) + 1|0);
    HEAP8[$a$048>>0] = $74;
    $76 = HEAP16[$71>>1]|0;
    $77 = $76&255;
    $78 = ((($a$048)) + 2|0);
    HEAP8[$75>>0] = $77;
    $79 = (($j$349) + 1)|0;
    $exitcond = ($79|0)==(8);
    if ($exitcond) {
     break;
    } else {
     $a$048 = $78;$j$349 = $79;
    }
   }
   $80 = ($need_v4$0|0)==(0);
   if (!($80)) {
    $81 = ((($a0)) + 12|0);
    $82 = (_inet_pton(2,$$4,$81)|0);
    $83 = ($82|0)<(1);
    if ($83) {
     $$0 = 0;
     break L1;
    }
   }
   $$0 = 1;
   break;
  }
  default: {
   $18 = (___errno_location()|0);
   HEAP32[$18>>2] = 97;
   $$0 = -1;
  }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _listen($fd,$backlog) {
 $fd = $fd|0;
 $backlog = $backlog|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $fd;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = $backlog;
 $2 = ((($0)) + 8|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 HEAP32[$vararg_buffer>>2] = 4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $3 = (___syscall102(102,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _getnetbyaddr($net,$type) {
 $net = $net|0;
 $type = $type|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function _getnetbyname($name) {
 $name = $name|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function _ntohl($n) {
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_llvm_bswap_i32(($n|0))|0);
 return ($0|0);
}
function _ntohs($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n&65535;
 $1 = $0 << 8;
 $2 = $0 >>> 8;
 $3 = $1 | $2;
 $4 = $3&65535;
 return ($4|0);
}
function _recv($fd,$buf,$len,$flags) {
 $fd = $fd|0;
 $buf = $buf|0;
 $len = $len|0;
 $flags = $flags|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_recvfrom($fd,$buf,$len,$flags,0,0)|0);
 return ($0|0);
}
function _recvfrom($fd,$buf,$len,$flags,$addr,$alen) {
 $fd = $fd|0;
 $buf = $buf|0;
 $len = $len|0;
 $flags = $flags|0;
 $addr = $addr|0;
 $alen = $alen|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $fd;
 $1 = ((($0)) + 4|0);
 $2 = $buf;
 HEAP32[$1>>2] = $2;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $len;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = $flags;
 $5 = ((($0)) + 16|0);
 $6 = $addr;
 HEAP32[$5>>2] = $6;
 $7 = ((($0)) + 20|0);
 $8 = $alen;
 HEAP32[$7>>2] = $8;
 HEAP32[$vararg_buffer>>2] = 12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $9 = (___syscall102(102,($vararg_buffer|0))|0);
 $10 = (___syscall_ret($9)|0);
 STACKTOP = sp;return ($10|0);
}
function _recvmsg($fd,$msg,$flags) {
 $fd = $fd|0;
 $msg = $msg|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $fd;
 $1 = ((($0)) + 4|0);
 $2 = $msg;
 HEAP32[$1>>2] = $2;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $flags;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 17;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $7 = (___syscall102(102,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 STACKTOP = sp;return ($8|0);
}
function _res_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___res_state() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (15012|0);
}
function _send($fd,$buf,$len,$flags) {
 $fd = $fd|0;
 $buf = $buf|0;
 $len = $len|0;
 $flags = $flags|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sendto($fd,$buf,$len,$flags,0,0)|0);
 return ($0|0);
}
function _sendmsg($fd,$msg,$flags) {
 $fd = $fd|0;
 $msg = $msg|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $fd;
 $1 = ((($0)) + 4|0);
 $2 = $msg;
 HEAP32[$1>>2] = $2;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $flags;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 16;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $7 = (___syscall102(102,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 STACKTOP = sp;return ($8|0);
}
function _sendto($fd,$buf,$len,$flags,$addr,$alen) {
 $fd = $fd|0;
 $buf = $buf|0;
 $len = $len|0;
 $flags = $flags|0;
 $addr = $addr|0;
 $alen = $alen|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $fd;
 $1 = ((($0)) + 4|0);
 $2 = $buf;
 HEAP32[$1>>2] = $2;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $len;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = $flags;
 $5 = ((($0)) + 16|0);
 $6 = $addr;
 HEAP32[$5>>2] = $6;
 $7 = ((($0)) + 20|0);
 HEAP32[$7>>2] = $alen;
 HEAP32[$vararg_buffer>>2] = 11;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $8 = (___syscall102(102,($vararg_buffer|0))|0);
 $9 = (___syscall_ret($8)|0);
 STACKTOP = sp;return ($9|0);
}
function _endservent() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _setservent($stayopen) {
 $stayopen = $stayopen|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _getservent() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function _setsockopt($fd,$level,$optname,$optval,$optlen) {
 $fd = $fd|0;
 $level = $level|0;
 $optname = $optname|0;
 $optval = $optval|0;
 $optlen = $optlen|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $fd;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = $level;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = $optname;
 $3 = ((($0)) + 12|0);
 $4 = $optval;
 HEAP32[$3>>2] = $4;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $optlen;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $7 = (___syscall102(102,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 STACKTOP = sp;return ($8|0);
}
function _shutdown($fd,$how) {
 $fd = $fd|0;
 $how = $how|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $fd;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = $how;
 $2 = ((($0)) + 8|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 HEAP32[$vararg_buffer>>2] = 13;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $3 = (___syscall102(102,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _sockatmark($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $ret = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 4|0;
 HEAP32[$vararg_buffer>>2] = $ret;
 $0 = (_ioctl($s,35077,$vararg_buffer)|0);
 $1 = ($0|0)<(0);
 $2 = HEAP32[$ret>>2]|0;
 $$0 = $1 ? -1 : $2;
 STACKTOP = sp;return ($$0|0);
}
function _socket($domain,$type,$protocol) {
 $domain = $domain|0;
 $type = $type|0;
 $protocol = $protocol|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 64|0;
 $1 = sp + 40|0;
 HEAP32[$0>>2] = $domain;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $type;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $protocol;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $7 = (___syscall102(102,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 L1: do {
  if ($9) {
   $10 = (___errno_location()|0);
   $11 = HEAP32[$10>>2]|0;
   switch ($11|0) {
   case 93: case 22:  {
    break;
   }
   default: {
    $$0 = $8;
    break L1;
   }
   }
   $12 = $type & 526336;
   $13 = ($12|0)==(0);
   if ($13) {
    $$0 = $8;
   } else {
    HEAP32[$1>>2] = $domain;
    $14 = ((($1)) + 4|0);
    $15 = $type & -526337;
    HEAP32[$14>>2] = $15;
    $16 = ((($1)) + 8|0);
    HEAP32[$16>>2] = $protocol;
    $17 = ((($1)) + 12|0);
    HEAP32[$17>>2] = 0;
    $18 = ((($1)) + 16|0);
    HEAP32[$18>>2] = 0;
    $19 = ((($1)) + 20|0);
    HEAP32[$19>>2] = 0;
    HEAP32[$vararg_buffer2>>2] = 1;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $1;
    $20 = (___syscall102(102,($vararg_buffer2|0))|0);
    $21 = (___syscall_ret($20)|0);
    $22 = ($21|0)<(0);
    if ($22) {
     $$0 = $21;
    } else {
     $23 = $type & 524288;
     $24 = ($23|0)==(0);
     if (!($24)) {
      HEAP32[$vararg_buffer6>>2] = 1;
      (_fcntl($21,2,$vararg_buffer6)|0);
     }
     $25 = $type & 2048;
     $26 = ($25|0)==(0);
     if ($26) {
      $$0 = $21;
     } else {
      $27 = (_fcntl($21,3,$vararg_buffer9)|0);
      $28 = $27 | 2048;
      HEAP32[$vararg_buffer11>>2] = $28;
      (_fcntl($21,4,$vararg_buffer11)|0);
      $$0 = $21;
     }
    }
   }
  } else {
   $$0 = $8;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _socketpair($domain,$type,$protocol,$fd) {
 $domain = $domain|0;
 $type = $type|0;
 $protocol = $protocol|0;
 $fd = $fd|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 HEAP32[$0>>2] = $domain;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = $type;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = $protocol;
 $3 = ((($0)) + 12|0);
 $4 = $fd;
 HEAP32[$3>>2] = $4;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 8;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $7 = (___syscall102(102,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 STACKTOP = sp;return ($8|0);
}
function ___dns_doqueries($dest,$name,$rr,$rrcnt) {
 $dest = $dest|0;
 $name = $name|0;
 $rr = $rr|0;
 $rrcnt = $rrcnt|0;
 var $$0 = 0, $$family$0 = 0, $$family$0$lcssa = 0, $$lcssa = 0, $$lcssa197 = 0, $$lcssa215 = 0, $$not = 0, $$pre = 0, $$sl$0 = 0, $$sl$0$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_buf = 0, $_f = 0, $brmerge = 0, $cs = 0, $errcode$0$ph = 0, $errcode$1$ph$lcssa = 0, $errcode$1$ph57 = 0, $errcode$2 = 0, $errcode$3 = 0, $errcode$4 = 0;
 var $errcode$4$got$3 = 0, $exitcond = 0, $exitcond116 = 0, $exitcond117 = 0, $exitcond157 = 0, $failed$0$ph = 0, $failed$1$ph$lcssa = 0, $failed$1$ph56 = 0, $failed$2 = 0, $family$0$ph84 = 0, $family$0$ph84208 = 0, $family$2 = 0, $fd$01012 = 0, $got$0$ph = 0, $got$1$ph$lcssa = 0, $got$1$ph55 = 0, $got$2 = 0, $got$3 = 0, $i$0$lcssa = 0, $i$085 = 0;
 var $i$163 = 0, $i$230 = 0, $i$3$lcssa = 0, $i$332 = 0, $j$0 = 0, $j$0$lcssa = 0, $line = 0, $nns$0$ph83 = 0, $nns$0$ph83211 = 0, $nns$2 = 0, $ns = 0, $or$cond = 0, $pfd = 0, $q = 0, $r$0$ph = 0, $r$1$ph$lcssa = 0, $r$1$ph54 = 0, $s$0 = 0, $s$0$lcssa = 0, $sa = 0;
 var $sl$0$ph82 = 0, $sl$0$ph82214 = 0, $sl$2 = 0, $ts = 0, $z$0$lcssa = 0, $z$066 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_f = sp + 144|0;
 $_buf = sp + 600|0;
 $line = sp + 536|0;
 $sa = sp + 116|0;
 $ns = sp + 32|0;
 $q = sp + 256|0;
 $ts = sp + 24|0;
 $pfd = sp + 16|0;
 $cs = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (_time((0|0))|0);
 ;HEAP32[$sa>>2]=HEAP32[15524>>2]|0;HEAP32[$sa+4>>2]=HEAP32[15524+4>>2]|0;HEAP32[$sa+8>>2]=HEAP32[15524+8>>2]|0;HEAP32[$sa+12>>2]=HEAP32[15524+12>>2]|0;HEAP32[$sa+16>>2]=HEAP32[15524+16>>2]|0;HEAP32[$sa+20>>2]=HEAP32[15524+20>>2]|0;HEAP32[$sa+24>>2]=HEAP32[15524+24>>2]|0;
 dest=$ns; stop=dest+84|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 _memset(($q|0),0,280)|0;
 (_pthread_setcancelstate(1,($cs|0))|0);
 $3 = (_strlen($name)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4>>>0)>(253);
 L1: do {
  if ($5) {
   $$0 = -2;
  } else {
   $6 = ((($q)) + 5|0);
   HEAP8[$6>>0] = 1;
   $7 = ((($q)) + 2|0);
   HEAP8[$7>>0] = 1;
   $8 = ((($q)) + 13|0);
   (_strcpy($8,$name)|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(0);
   if ($10) {
    $i$0$lcssa = 13;
   } else {
    $i$085 = 13;
    while(1) {
     $j$0 = $i$085;
     L6: while(1) {
      $11 = (($q) + ($j$0)|0);
      $12 = HEAP8[$11>>0]|0;
      switch ($12<<24>>24) {
      case 46: case 0:  {
       $j$0$lcssa = $j$0;
       break L6;
       break;
      }
      default: {
      }
      }
      $13 = (($j$0) + 1)|0;
      $j$0 = $13;
     }
     $14 = (($j$0$lcssa) - ($i$085))|0;
     $15 = (($14) + -1)|0;
     $16 = ($15>>>0)>(62);
     if ($16) {
      $$0 = -2;
      break L1;
     }
     $17 = $14&255;
     $18 = (($i$085) + -1)|0;
     $19 = (($q) + ($18)|0);
     HEAP8[$19>>0] = $17;
     $20 = (($j$0$lcssa) + 1)|0;
     $21 = (($q) + ($20)|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = ($22<<24>>24)==(0);
     if ($23) {
      $i$0$lcssa = $20;
      break;
     } else {
      $i$085 = $20;
     }
    }
   }
   $24 = (($i$0$lcssa) + 3)|0;
   $25 = (($q) + ($24)|0);
   HEAP8[$25>>0] = 1;
   $26 = (($i$0$lcssa) + 4)|0;
   (_clock_gettime(0,($ts|0))|0);
   $27 = ((($ts)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 >>> 16;
   $30 = (($29) + ($28))|0;
   $31 = $30 & 65535;
   $32 = (___fopen_rb_ca(175774,$_f,$_buf,256)|0);
   $33 = ($32|0)==(0|0);
   do {
    if ($33) {
     label = 22;
    } else {
     $34 = ((($line)) + 10|0);
     $35 = ((($line)) + 11|0);
     $family$0$ph84 = 2;$nns$0$ph83 = 0;$sl$0$ph82 = 16;
     L14: while(1) {
      $36 = (($ns) + (($nns$0$ph83*28)|0)|0);
      $37 = (_fgets($line,64,$32)|0);
      $38 = ($37|0)==(0|0);
      if ($38) {
       $family$0$ph84208 = $family$0$ph84;$nns$0$ph83211 = $nns$0$ph83;$sl$0$ph82214 = $sl$0$ph82;
       label = 21;
       break;
      }
      while(1) {
       $39 = (_strncmp($line,175791,10)|0);
       $40 = ($39|0)==(0);
       if ($40) {
        $41 = HEAP8[$34>>0]|0;
        $42 = $41 << 24 >> 24;
        $43 = (_isspace($42)|0);
        $44 = ($43|0)==(0);
        if (!($44)) {
         $s$0 = $35;
         while(1) {
          $45 = HEAP8[$s$0>>0]|0;
          $46 = $45 << 24 >> 24;
          $47 = (_isspace($46)|0);
          $48 = ($47|0)==(0);
          $49 = ((($s$0)) + 1|0);
          if ($48) {
           $s$0$lcssa = $s$0;
           break;
          } else {
           $s$0 = $49;
          }
         }
         $50 = HEAP8[$s$0$lcssa>>0]|0;
         $51 = ($50<<24>>24)==(0);
         L23: do {
          if ($51) {
           $z$0$lcssa = $s$0$lcssa;
          } else {
           $53 = $50;$z$066 = $s$0$lcssa;
           while(1) {
            $52 = $53 << 24 >> 24;
            $54 = (_isspace($52)|0);
            $55 = ($54|0)==(0);
            if (!($55)) {
             $z$0$lcssa = $z$066;
             break L23;
            }
            $56 = ((($z$066)) + 1|0);
            $57 = HEAP8[$56>>0]|0;
            $58 = ($57<<24>>24)==(0);
            if ($58) {
             $z$0$lcssa = $56;
             break;
            } else {
             $53 = $57;$z$066 = $56;
            }
           }
          }
         } while(0);
         HEAP8[$z$0$lcssa>>0] = 0;
         $59 = (___ipparse($36,0,$s$0$lcssa)|0);
         $60 = ($59|0)<(0);
         if (!($60)) {
          break;
         }
        }
       }
       $61 = (_fgets($line,64,$32)|0);
       $62 = ($61|0)==(0|0);
       if ($62) {
        $family$0$ph84208 = $family$0$ph84;$nns$0$ph83211 = $nns$0$ph83;$sl$0$ph82214 = $sl$0$ph82;
        label = 21;
        break L14;
       }
      }
      $63 = (_htons(53)|0);
      $64 = (((($ns) + (($nns$0$ph83*28)|0)|0)) + 2|0);
      HEAP16[$64>>1] = $63;
      $65 = (($nns$0$ph83) + 1)|0;
      $66 = (($ns) + (($nns$0$ph83*28)|0)|0);
      $67 = HEAP16[$66>>1]|0;
      $68 = ($67<<16>>16)==(10);
      $$sl$0 = $68 ? 28 : $sl$0$ph82;
      $$family$0 = $68 ? 10 : $family$0$ph84;
      $69 = ($65|0)<(3);
      if ($69) {
       $family$0$ph84 = $$family$0;$nns$0$ph83 = $65;$sl$0$ph82 = $$sl$0;
      } else {
       $$family$0$lcssa = $$family$0;$$lcssa215 = $65;$$sl$0$lcssa = $$sl$0;
       label = 20;
       break;
      }
     }
     if ((label|0) == 20) {
      (___fclose_ca($32)|0);
      $family$2 = $$family$0$lcssa;$nns$2 = $$lcssa215;$sl$2 = $$sl$0$lcssa;
      break;
     }
     else if ((label|0) == 21) {
      (___fclose_ca($32)|0);
      $70 = ($nns$0$ph83211|0)==(0);
      if ($70) {
       label = 22;
       break;
      } else {
       $family$2 = $family$0$ph84208;$nns$2 = $nns$0$ph83211;$sl$2 = $sl$0$ph82214;
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 22) {
    HEAP16[$ns>>1] = 2;
    $71 = (_htons(53)|0);
    $72 = ((($ns)) + 2|0);
    HEAP16[$72>>1] = $71;
    $73 = (_htonl(2130706433)|0);
    $74 = ((($ns)) + 4|0);
    HEAP32[$74>>2] = $73;
    $family$2 = 2;$nns$2 = 1;$sl$2 = 16;
   }
   $75 = $family$2&65535;
   HEAP16[$sa>>1] = $75;
   $76 = (_socket($family$2,526338,0)|0);
   $77 = ($76|0)<(0);
   if ($77) {
    $78 = (___errno_location()|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = ($79|0)==(97);
    $81 = ($family$2|0)==(10);
    $or$cond = $81 & $80;
    if (!($or$cond)) {
     $$0 = -11;
     break;
    }
    $82 = (_socket(2,526338,0)|0);
    $83 = ($82|0)<(0);
    if ($83) {
     $$0 = -11;
     break;
    } else {
     $fd$01012 = $82;
    }
   } else {
    $84 = ($family$2|0)==(10);
    if ($84) {
     HEAP32[$0>>2] = 0;
     (_setsockopt($76,41,26,$0,4)|0);
     $85 = ($nns$2|0)>(0);
     if ($85) {
      $i$163 = 0;
      while(1) {
       $86 = (($ns) + (($i$163*28)|0)|0);
       $87 = HEAP16[$86>>1]|0;
       $88 = ($87<<16>>16)==(2);
       if ($88) {
        $89 = (((($ns) + (($i$163*28)|0)|0)) + 8|0);
        $90 = (((($ns) + (($i$163*28)|0)|0)) + 20|0);
        $91 = (((($ns) + (($i$163*28)|0)|0)) + 4|0);
        $92 = HEAP32[$91>>2]|0;
        HEAP32[$90>>2] = $92;
        dest=$89; src=175802; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
        HEAP16[$86>>1] = 10;
        HEAP32[$91>>2] = 0;
        $93 = (((($ns) + (($i$163*28)|0)|0)) + 24|0);
        HEAP32[$93>>2] = 0;
       }
       $94 = (($i$163) + 1)|0;
       $exitcond117 = ($94|0)==($nns$2|0);
       if ($exitcond117) {
        $fd$01012 = $76;
        break;
       } else {
        $i$163 = $94;
       }
      }
     } else {
      $fd$01012 = $76;
     }
    } else {
     $fd$01012 = $76;
    }
   }
   $95 = $fd$01012;
   _pthread_cleanup_push((12|0),($95|0));
   $96 = HEAP32[$cs>>2]|0;
   (_pthread_setcancelstate(($96|0),(0|0))|0);
   $97 = (_bind($fd$01012,$sa,$sl$2)|0);
   $98 = ($97|0)<(0);
   L47: do {
    if ($98) {
     $errcode$4 = -11;$got$3 = 0;
    } else {
     HEAP32[$pfd>>2] = $fd$01012;
     $99 = ((($pfd)) + 4|0);
     HEAP16[$99>>1] = 1;
     $100 = ($rrcnt|0)>(0);
     $101 = ($nns$2|0)>(0);
     $102 = ((($q)) + 1|0);
     $103 = (($i$0$lcssa) + 1)|0;
     $104 = (($q) + ($103)|0);
     $$not = $101 ^ 1;
     $exitcond157 = ($nns$2|0)==(1);
     $errcode$0$ph = -3;$failed$0$ph = 0;$got$0$ph = 0;$r$0$ph = $dest;
     while(1) {
      while(1) {
       $105 = (_time((0|0))|0);
       $106 = (($105) - ($2))|0;
       $107 = ($106|0)<(5);
       if (!($107)) {
        $errcode$4 = $errcode$0$ph;$got$3 = $got$0$ph;
        break L47;
       }
       if ($100) {
        $i$230 = 0;
        while(1) {
         $108 = (($rr) + ($i$230<<2)|0);
         $109 = HEAP32[$108>>2]|0;
         $110 = ($109|0)==(0);
         $brmerge = $110 | $$not;
         if (!($brmerge)) {
          $111 = (($i$230) + ($31))|0;
          $112 = $111 >>> 8;
          $113 = $112&255;
          $114 = $111&255;
          HEAP8[$q>>0] = $113;
          HEAP8[$102>>0] = $114;
          $115 = $109&255;
          HEAP8[$104>>0] = $115;
          (_sendto($fd$01012,$q,$26,16384,$ns,$sl$2)|0);
          if (!($exitcond157)) {
           $118 = 1;
           while(1) {
            $$pre = HEAP32[$108>>2]|0;
            HEAP8[$q>>0] = $113;
            HEAP8[$102>>0] = $114;
            $116 = $$pre&255;
            HEAP8[$104>>0] = $116;
            $117 = (($ns) + (($118*28)|0)|0);
            (_sendto($fd$01012,$q,$26,16384,$117,$sl$2)|0);
            $119 = (($118) + 1)|0;
            $exitcond = ($119|0)==($nns$2|0);
            if ($exitcond) {
             break;
            } else {
             $118 = $119;
            }
           }
          }
         }
         $120 = (($i$230) + 1)|0;
         $exitcond116 = ($120|0)==($rrcnt|0);
         if ($exitcond116) {
          break;
         } else {
          $i$230 = $120;
         }
        }
       }
       $121 = (_poll($pfd,1,1000)|0);
       $122 = ($121|0)<(1);
       if (!($122)) {
        break;
       }
      }
      $123 = (($failed$0$ph) + ($got$0$ph))|0;
      $124 = ($123|0)<($rrcnt|0);
      L64: do {
       if ($124) {
        $159 = $123;$errcode$1$ph57 = $errcode$0$ph;$failed$1$ph56 = $failed$0$ph;$got$1$ph55 = $got$0$ph;$r$1$ph54 = $r$0$ph;
        while(1) {
         $125 = ((($r$1$ph54)) + 1|0);
         HEAP32[$1>>2] = $sl$2;
         $126 = (_recvfrom($fd$01012,$r$1$ph54,512,0,$sa,$1)|0);
         $127 = ($126|0)>(1);
         if (!($127)) {
          $$lcssa = $159;$errcode$1$ph$lcssa = $errcode$1$ph57;$failed$1$ph$lcssa = $failed$1$ph56;$got$1$ph$lcssa = $got$1$ph55;$r$1$ph$lcssa = $r$1$ph54;
          break L64;
         }
         while(1) {
          L69: do {
           if ($101) {
            $i$332 = 0;
            while(1) {
             $128 = (($ns) + (($i$332*28)|0)|0);
             $129 = (_memcmp($128,$sa,$sl$2)|0);
             $130 = ($129|0)==(0);
             if ($130) {
              $i$3$lcssa = $i$332;
              break L69;
             }
             $131 = (($i$332) + 1)|0;
             $132 = ($131|0)<($nns$2|0);
             if ($132) {
              $i$332 = $131;
             } else {
              $i$3$lcssa = $131;
              break;
             }
            }
           } else {
            $i$3$lcssa = 0;
           }
          } while(0);
          $133 = ($i$3$lcssa|0)==($nns$2|0);
          if (!($133)) {
           $136 = HEAP8[$r$1$ph54>>0]|0;
           $137 = $136&255;
           $138 = $137 << 8;
           $139 = HEAP8[$125>>0]|0;
           $140 = $139&255;
           $141 = $138 | $140;
           $142 = (($141) - ($30))|0;
           $143 = $142 & 65535;
           $144 = ($143>>>0)<($rrcnt>>>0);
           if ($144) {
            $145 = (($rr) + ($143<<2)|0);
            $146 = HEAP32[$145>>2]|0;
            $147 = ($146|0)==(0);
            if (!($147)) {
             $$lcssa197 = $145;
             break;
            }
           }
          }
          HEAP32[$1>>2] = $sl$2;
          $134 = (_recvfrom($fd$01012,$r$1$ph54,512,0,$sa,$1)|0);
          $135 = ($134|0)>(1);
          if (!($135)) {
           $$lcssa = $159;$errcode$1$ph$lcssa = $errcode$1$ph57;$failed$1$ph$lcssa = $failed$1$ph56;$got$1$ph$lcssa = $got$1$ph55;$r$1$ph$lcssa = $r$1$ph54;
           break L64;
          }
         }
         $148 = ((($r$1$ph54)) + 3|0);
         $149 = HEAP8[$148>>0]|0;
         $150 = $149&255;
         $151 = $150 & 15;
         switch ($151|0) {
         case 0:  {
          $152 = (($got$1$ph55) + 1)|0;
          $errcode$3 = $errcode$1$ph57;$failed$2 = $failed$1$ph56;$got$2 = $152;
          break;
         }
         case 3:  {
          $errcode$2 = -2;
          label = 53;
          break;
         }
         default: {
          $errcode$2 = -4;
          label = 53;
         }
         }
         if ((label|0) == 53) {
          label = 0;
          $153 = (($failed$1$ph56) + 1)|0;
          $errcode$3 = $errcode$2;$failed$2 = $153;$got$2 = $got$1$ph55;
         }
         HEAP32[$$lcssa197>>2] = 0;
         $154 = ((($r$1$ph54)) + 512|0);
         $155 = (($failed$2) + ($got$2))|0;
         $156 = ($155|0)<($rrcnt|0);
         if ($156) {
          $159 = $155;$errcode$1$ph57 = $errcode$3;$failed$1$ph56 = $failed$2;$got$1$ph55 = $got$2;$r$1$ph54 = $154;
         } else {
          $$lcssa = $155;$errcode$1$ph$lcssa = $errcode$3;$failed$1$ph$lcssa = $failed$2;$got$1$ph$lcssa = $got$2;$r$1$ph$lcssa = $154;
          break L64;
         }
        }
       } else {
        $$lcssa = $123;$errcode$1$ph$lcssa = $errcode$0$ph;$failed$1$ph$lcssa = $failed$0$ph;$got$1$ph$lcssa = $got$0$ph;$r$1$ph$lcssa = $r$0$ph;
       }
      } while(0);
      $157 = ($$lcssa|0)==($rrcnt|0);
      if ($157) {
       $errcode$4 = $errcode$1$ph$lcssa;$got$3 = $got$1$ph$lcssa;
       break;
      } else {
       $errcode$0$ph = $errcode$1$ph$lcssa;$failed$0$ph = $failed$1$ph$lcssa;$got$0$ph = $got$1$ph$lcssa;$r$0$ph = $r$1$ph$lcssa;
      }
     }
    }
   } while(0);
   _pthread_cleanup_pop(1);
   $158 = ($got$3|0)==(0);
   $errcode$4$got$3 = $158 ? $errcode$4 : $got$3;
   $$0 = $errcode$4$got$3;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___dns_query($r,$a,$family,$ptr) {
 $r = $r|0;
 $a = $a|0;
 $family = $family|0;
 $ptr = $ptr|0;
 var $$0 = 0, $$01$i = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $i$02$i = 0, $rr = 0, $rrcnt$0 = 0;
 var $scevgep$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 24|0;
 $rr = sp + 16|0;
 $0 = ($ptr|0)==(0);
 $1 = ($family|0)==(10);
 do {
  if ($0) {
   if ($1) {
    HEAP32[$rr>>2] = 28;
    $$0 = $a;$$pre$phiZ2D = $rr;$rrcnt$0 = 1;
    break;
   }
   HEAP32[$rr>>2] = 1;
   $30 = ($family|0)==(2);
   if ($30) {
    $$0 = $a;$$pre$phiZ2D = $rr;$rrcnt$0 = 1;
   } else {
    $31 = ((($rr)) + 4|0);
    HEAP32[$31>>2] = 28;
    $$0 = $a;$$pre$phiZ2D = $rr;$rrcnt$0 = 2;
   }
  } else {
   if ($1) {
    $$01$i = $buf;$i$02$i = 15;
    while(1) {
     $2 = (($a) + ($i$02$i)|0);
     $3 = HEAP8[$2>>0]|0;
     $4 = $3&255;
     $5 = $4 & 15;
     $6 = (175815 + ($5)|0);
     $7 = HEAP8[$6>>0]|0;
     $8 = ((($$01$i)) + 1|0);
     HEAP8[$$01$i>>0] = $7;
     $9 = ((($$01$i)) + 2|0);
     HEAP8[$8>>0] = 46;
     $10 = HEAP8[$2>>0]|0;
     $11 = $10&255;
     $12 = $11 >>> 4;
     $13 = (175815 + ($12)|0);
     $14 = HEAP8[$13>>0]|0;
     $15 = ((($$01$i)) + 3|0);
     HEAP8[$9>>0] = $14;
     $16 = ((($$01$i)) + 4|0);
     HEAP8[$15>>0] = 46;
     $17 = (($i$02$i) + -1)|0;
     $18 = ($i$02$i|0)>(0);
     if ($18) {
      $$01$i = $16;$i$02$i = $17;
     } else {
      break;
     }
    }
    $scevgep$i = ((($buf)) + 64|0);
    dest=$scevgep$i; src=175832; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   } else {
    $19 = ((($a)) + 3|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = $20&255;
    $22 = ((($a)) + 2|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ((($a)) + 1|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = $26&255;
    $28 = HEAP8[$a>>0]|0;
    $29 = $28&255;
    HEAP32[$vararg_buffer>>2] = $21;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $27;
    $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
    HEAP32[$vararg_ptr3>>2] = $29;
    (_sprintf($buf,175841,$vararg_buffer)|0);
   }
   HEAP32[$rr>>2] = 12;
   $$0 = $buf;$$pre$phiZ2D = $rr;$rrcnt$0 = 1;
  }
 } while(0);
 $32 = (___dns_doqueries($r,$$0,$$pre$phiZ2D,$rrcnt$0)|0);
 STACKTOP = sp;return ($32|0);
}
function ___dns_get_rr($dest,$stride,$maxlen,$limit,$r,$rr,$dec) {
 $dest = $dest|0;
 $stride = $stride|0;
 $maxlen = $maxlen|0;
 $limit = $limit|0;
 $r = $r|0;
 $rr = $rr|0;
 $dec = $dec|0;
 var $$0 = 0, $$0234 = 0, $$0333 = 0, $$1 = 0, $$14 = 0, $$2 = 0, $$25 = 0, $$in = 0, $$in56 = 0, $$old12 = 0, $$old15$pre$phiZZ2D = 0, $$old16 = 0, $$pre = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $found$036 = 0, $found$1 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond17 = 0, $or$cond19 = 0, $p$0$lcssa = 0, $p$054 = 0, $p$1$lcssa = 0, $p$147 = 0, $p$235 = 0, $p$3$lcssa = 0, $p$328 = 0, $tmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 $0 = ((($r)) + 3|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 15;
 $3 = ($2<<24>>24)==(0);
 L1: do {
  if ($3) {
   $4 = ((($r)) + 12|0);
   $5 = ((($r)) + 4|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6&255;
   $8 = $7 << 8;
   $9 = ((($r)) + 5|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $8 | $11;
   $13 = ((($r)) + 6|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&255;
   $16 = $15 << 8;
   $17 = ((($r)) + 7|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = $16 | $19;
   $21 = (($20) + ($12))|0;
   $22 = ($21|0)>(64);
   if ($22) {
    $$0 = -1;
   } else {
    $23 = ($12|0)==(0);
    if ($23) {
     $$pre = ((($r)) + 506|0);
     $$old15$pre$phiZZ2D = $$pre;$p$0$lcssa = $4;
    } else {
     $24 = $r;
     $25 = ((($r)) + 506|0);
     $$in = $12;$p$054 = $4;
     while(1) {
      $26 = (($$in) + -1)|0;
      $27 = $p$054;
      $28 = (($27) - ($24))|0;
      $29 = ($28|0)<(512);
      $30 = HEAP8[$p$054>>0]|0;
      L9: do {
       if ($29) {
        $36 = $30;$p$147 = $p$054;
        while(1) {
         $35 = $36&255;
         $37 = (($35) + -1)|0;
         $38 = ($37>>>0)<(127);
         if (!($38)) {
          $44 = $36;$p$1$lcssa = $p$147;
          break L9;
         }
         $39 = ((($p$147)) + 1|0);
         $40 = $39;
         $41 = (($40) - ($24))|0;
         $42 = ($41|0)<(512);
         $43 = HEAP8[$39>>0]|0;
         if ($42) {
          $36 = $43;$p$147 = $39;
         } else {
          $44 = $43;$p$1$lcssa = $39;
          break;
         }
        }
       } else {
        $44 = $30;$p$1$lcssa = $p$054;
       }
      } while(0);
      $45 = ($44&255)>(193);
      if ($45) {
       $$0 = -1;
       break L1;
      }
      $46 = ($44<<24>>24)==(-63);
      if ($46) {
       $47 = ((($p$1$lcssa)) + 1|0);
       $48 = HEAP8[$47>>0]|0;
       $49 = ($48<<24>>24)==(-1);
       $50 = ($p$1$lcssa>>>0)>($25>>>0);
       $or$cond13 = $50 | $49;
       if ($or$cond13) {
        $$0 = -1;
        break L1;
       }
      } else {
       $$old12 = ($p$1$lcssa>>>0)>($25>>>0);
       if ($$old12) {
        $$0 = -1;
        break L1;
       }
      }
      $51 = ($44<<24>>24)!=(0);
      $52 = $51 ? 6 : 5;
      $53 = (($p$1$lcssa) + ($52)|0);
      $54 = ($26|0)==(0);
      if ($54) {
       $$old15$pre$phiZZ2D = $25;$p$0$lcssa = $53;
       break;
      } else {
       $$in = $26;$p$054 = $53;
      }
     }
    }
    $31 = ($20|0)==(0);
    if ($31) {
     $$0 = 0;
    } else {
     $32 = $r;
     $33 = ((($r)) + 512|0);
     $34 = ($dec|0)!=(0);
     $$0234 = $dest;$$0333 = $limit;$$in56 = $20;$found$036 = 0;$p$235 = $p$0$lcssa;
     while(1) {
      $55 = (($$in56) + -1)|0;
      $56 = $p$235;
      $57 = (($56) - ($32))|0;
      $58 = ($57|0)<(512);
      $59 = HEAP8[$p$235>>0]|0;
      L23: do {
       if ($58) {
        $61 = $59;$p$328 = $p$235;
        while(1) {
         $60 = $61&255;
         $62 = (($60) + -1)|0;
         $63 = ($62>>>0)<(127);
         if (!($63)) {
          $69 = $61;$p$3$lcssa = $p$328;
          break L23;
         }
         $64 = ((($p$328)) + 1|0);
         $65 = $64;
         $66 = (($65) - ($32))|0;
         $67 = ($66|0)<(512);
         $68 = HEAP8[$64>>0]|0;
         if ($67) {
          $61 = $68;$p$328 = $64;
         } else {
          $69 = $68;$p$3$lcssa = $64;
          break;
         }
        }
       } else {
        $69 = $59;$p$3$lcssa = $p$235;
       }
      } while(0);
      $70 = ($69&255)>(193);
      if ($70) {
       $$0 = -1;
       break L1;
      }
      $71 = ($69<<24>>24)==(-63);
      if ($71) {
       $72 = ((($p$3$lcssa)) + 1|0);
       $73 = HEAP8[$72>>0]|0;
       $74 = ($73<<24>>24)==(-1);
       $75 = ($p$3$lcssa>>>0)>($$old15$pre$phiZZ2D>>>0);
       $or$cond17 = $75 | $74;
       if ($or$cond17) {
        $$0 = -1;
        break L1;
       }
      } else {
       $$old16 = ($p$3$lcssa>>>0)>($$old15$pre$phiZZ2D>>>0);
       if ($$old16) {
        $$0 = -1;
        break L1;
       }
      }
      $76 = ($69<<24>>24)!=(0);
      $77 = $76 ? 2 : 1;
      $$sum6 = $77 | 8;
      $78 = (($p$3$lcssa) + ($$sum6)|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = $79&255;
      $81 = $80 << 8;
      $$sum = (($77) + 9)|0;
      $82 = (($p$3$lcssa) + ($$sum)|0);
      $83 = HEAP8[$82>>0]|0;
      $84 = $83&255;
      $85 = $81 | $84;
      $$sum7 = (($85) + ($77))|0;
      $86 = (($p$3$lcssa) + ($$sum7)|0);
      $87 = ($86>>>0)>($33>>>0);
      if ($87) {
       $$0 = -1;
       break L1;
      }
      $$sum8 = (($77) + 1)|0;
      $88 = (($p$3$lcssa) + ($$sum8)|0);
      $89 = HEAP8[$88>>0]|0;
      $90 = $89&255;
      $91 = ($90|0)!=($rr|0);
      $92 = ($85>>>0)>($maxlen>>>0);
      $or$cond19 = $92 | $91;
      if ($or$cond19) {
       $$2 = $$0234;$$25 = $$0333;$found$1 = $found$036;
      } else {
       if ($34) {
        $$sum11 = (($77) + 10)|0;
        $93 = (($p$3$lcssa) + ($$sum11)|0);
        $94 = (___dn_expand($r,$33,$93,$tmp,256)|0);
        $95 = ($94|0)<(0);
        if ($95) {
         $$0 = -1;
         break L1;
        }
       }
       $96 = ($$0234|0)!=(0|0);
       $97 = ($$0333|0)!=(0);
       $or$cond = $97 & $96;
       if ($or$cond) {
        if ($34) {
         (_strcpy($$0234,$tmp)|0);
        } else {
         $$sum10 = (($77) + 10)|0;
         $98 = (($p$3$lcssa) + ($$sum10)|0);
         _memcpy(($$0234|0),($98|0),($85|0))|0;
        }
        $99 = (($$0234) + ($stride)|0);
        $100 = (($$0333) + -1)|0;
        $$1 = $99;$$14 = $100;
       } else {
        $$1 = $$0234;$$14 = $$0333;
       }
       $101 = (($found$036) + 1)|0;
       $$2 = $$1;$$25 = $$14;$found$1 = $101;
      }
      $102 = (($77) + 10)|0;
      $$sum9 = (($102) + ($85))|0;
      $103 = (($p$3$lcssa) + ($$sum9)|0);
      $104 = ($55|0)==(0);
      if ($104) {
       $$0 = $found$1;
       break;
      } else {
       $$0234 = $$2;$$0333 = $$25;$$in56 = $55;$found$036 = $found$1;$p$235 = $103;
      }
     }
    }
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___dns_count_addrs($r,$cnt) {
 $r = $r|0;
 $cnt = $cnt|0;
 var $$0 = 0, $$028 = 0, $$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $found$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($cnt|0)==(0);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $$028 = $r;$$in = $cnt;$found$09 = 0;
   while(1) {
    $1 = (($$in) + -1)|0;
    $2 = (___dns_get_rr(0,0,4,-1,$$028,1,0)|0);
    $3 = ($2|0)<(0);
    if ($3) {
     $$0 = $2;
     break L1;
    }
    $4 = (___dns_get_rr(0,0,16,-1,$$028,28,0)|0);
    $5 = ($4|0)<(0);
    if ($5) {
     $$0 = $4;
     break L1;
    }
    $6 = (($2) + ($found$09))|0;
    $7 = (($4) + ($6))|0;
    $8 = ((($$028)) + 512|0);
    $9 = ($1|0)==(0);
    if ($9) {
     $$0 = $7;
     break;
    } else {
     $$028 = $8;$$in = $1;$found$09 = $7;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function ___ipparse($dest,$family,$s0) {
 $dest = $dest|0;
 $family = $family|0;
 $s0 = $s0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert6 = 0, $$pre = 0, $$pre$phi8Z2D = 0, $$pre$phiZ2D = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $i$0$lcssa = 0, $i$04 = 0, $isdigit = 0, $isdigittmp = 0;
 var $s$03 = 0, $z = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a = sp + 8|0;
 $z = sp;
 dest=$a; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ($family|0)==(10);
 L1: do {
  if ($0) {
   label = 16;
  } else {
   $i$04 = 0;$s$03 = $s0;
   L2: while(1) {
    $1 = (_strtoul($s$03,$z,0)|0);
    $2 = (($a) + ($i$04<<2)|0);
    HEAP32[$2>>2] = $1;
    $3 = HEAP32[$z>>2]|0;
    $4 = ($3|0)==($s$03|0);
    if ($4) {
     label = 5;
     break;
    }
    $5 = HEAP8[$3>>0]|0;
    switch ($5<<24>>24) {
    case 46: case 0:  {
     break;
    }
    default: {
     label = 5;
     break L2;
    }
    }
    $6 = HEAP8[$s$03>>0]|0;
    $7 = $6 << 24 >> 24;
    $isdigittmp = (($7) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if (!($isdigit)) {
     label = 5;
     break;
    }
    $9 = ($5<<24>>24)==(0);
    if ($9) {
     $i$0$lcssa = $i$04;
     break;
    }
    $10 = ((($3)) + 1|0);
    $11 = (($i$04) + 1)|0;
    $12 = ($11|0)<(4);
    if ($12) {
     $i$04 = $11;$s$03 = $10;
    } else {
     $i$0$lcssa = $11;
     break;
    }
   }
   if ((label|0) == 5) {
    $8 = ($family|0)==(2);
    if ($8) {
     $$0 = -1;
     break;
    } else {
     label = 16;
     break;
    }
   }
   switch ($i$0$lcssa|0) {
   case 4:  {
    $$0 = -1;
    break L1;
    break;
   }
   case 0:  {
    $13 = HEAP32[$a>>2]|0;
    $14 = $13 & 16777215;
    $15 = ((($a)) + 4|0);
    HEAP32[$15>>2] = $14;
    $16 = $13 >>> 24;
    HEAP32[$a>>2] = $16;
    $$pre$phiZ2D = $15;$18 = $14;
    label = 12;
    break;
   }
   case 1:  {
    $$phi$trans$insert = ((($a)) + 4|0);
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$pre$phiZ2D = $$phi$trans$insert;$18 = $$pre;
    label = 12;
    break;
   }
   case 2:  {
    $$phi$trans$insert6 = ((($a)) + 8|0);
    $$pre7 = HEAP32[$$phi$trans$insert6>>2]|0;
    $$pre$phi8Z2D = $$phi$trans$insert6;$22 = $$pre7;
    label = 13;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 12) {
    $17 = $18 & 65535;
    $19 = ((($a)) + 8|0);
    HEAP32[$19>>2] = $17;
    $20 = $18 >>> 16;
    HEAP32[$$pre$phiZ2D>>2] = $20;
    $$pre$phi8Z2D = $19;$22 = $17;
    label = 13;
   }
   if ((label|0) == 13) {
    $21 = $22 & 255;
    $23 = ((($a)) + 12|0);
    HEAP32[$23>>2] = $21;
    $24 = $22 >>> 8;
    HEAP32[$$pre$phi8Z2D>>2] = $24;
   }
   HEAP16[$dest>>1] = 2;
   $25 = HEAP32[$a>>2]|0;
   $26 = ($25>>>0)>(255);
   if ($26) {
    $$0 = -1;
   } else {
    $27 = $25&255;
    $28 = ((($dest)) + 4|0);
    HEAP8[$28>>0] = $27;
    $29 = ((($a)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30>>>0)>(255);
    if ($31) {
     $$0 = -1;
    } else {
     $36 = $30&255;
     $37 = ((($dest)) + 5|0);
     HEAP8[$37>>0] = $36;
     $38 = ((($a)) + 8|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39>>>0)>(255);
     if ($40) {
      $$0 = -1;
     } else {
      $41 = $39&255;
      $42 = ((($dest)) + 6|0);
      HEAP8[$42>>0] = $41;
      $43 = ((($a)) + 12|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44>>>0)>(255);
      if ($45) {
       $$0 = -1;
      } else {
       $46 = $44&255;
       $47 = ((($dest)) + 7|0);
       HEAP8[$47>>0] = $46;
       $$0 = 0;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  HEAP16[$dest>>1] = 10;
  $32 = ((($dest)) + 8|0);
  $33 = (_inet_pton(10,$s0,$32)|0);
  $34 = ($33|0)<(1);
  $35 = $34 << 31 >> 31;
  $$0 = $35;
 }
 STACKTOP = sp;return ($$0|0);
}
function _erand48($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___rand48_step($s,(25326))|0);
 $1 = tempRet0;
 $2 = (_bitshift64Shl(($0|0),($1|0),4)|0);
 $3 = tempRet0;
 $4 = $3 | 1072693248;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $4;$5 = +HEAPF64[tempDoublePtr>>3];
 $6 = $5 + -1.0;
 return (+$6);
}
function _drand48() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___rand48_step(25320,(25326))|0);
 $1 = tempRet0;
 $2 = (_bitshift64Shl(($0|0),($1|0),4)|0);
 $3 = tempRet0;
 $4 = $3 | 1072693248;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $4;$5 = +HEAPF64[tempDoublePtr>>3];
 $6 = $5 + -1.0;
 return (+$6);
}
function _lcong48($p) {
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP16[25320>>1]=HEAP16[$p>>1]|0;HEAP16[25320+2>>1]=HEAP16[$p+2>>1]|0;HEAP16[25320+4>>1]=HEAP16[$p+4>>1]|0;HEAP16[25320+6>>1]=HEAP16[$p+6>>1]|0;HEAP16[25320+8>>1]=HEAP16[$p+8>>1]|0;HEAP16[25320+10>>1]=HEAP16[$p+10>>1]|0;HEAP16[25320+12>>1]=HEAP16[$p+12>>1]|0;
 return;
}
function _nrand48($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___rand48_step($s,(25326))|0);
 $1 = tempRet0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),17)|0);
 $3 = tempRet0;
 return ($2|0);
}
function _lrand48() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___rand48_step(25320,(25326))|0);
 $1 = tempRet0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),17)|0);
 $3 = tempRet0;
 return ($2|0);
}
function _jrand48($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___rand48_step($s,(25326))|0);
 $1 = tempRet0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),16)|0);
 $3 = tempRet0;
 return ($2|0);
}
function _mrand48() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___rand48_step(25320,(25326))|0);
 $1 = tempRet0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),16)|0);
 $3 = tempRet0;
 return ($2|0);
}
function _srand($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + -1)|0;
 $1 = 4936;
 $2 = $1;
 HEAP32[$2>>2] = $0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 4936;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 4936;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 return ($14|0);
}
function _srandom($seed) {
 $seed = $seed|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((15552|0));
 ___srandom($seed);
 ___unlock((15552|0));
 return;
}
function _initstate($seed,$state,$size) {
 $seed = $seed|0;
 $state = $state|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size>>>0)<(8);
 if ($0) {
  $$0 = 0;
 } else {
  ___lock((15552|0));
  $1 = HEAP32[15560>>2]|0;
  $2 = $1 << 16;
  $3 = HEAP32[15564>>2]|0;
  $4 = $3 << 8;
  $5 = $4 | $2;
  $6 = HEAP32[15568>>2]|0;
  $7 = $5 | $6;
  $8 = HEAP32[15572>>2]|0;
  $9 = ((($8)) + -4|0);
  HEAP32[$9>>2] = $7;
  $10 = ($size>>>0)<(32);
  do {
   if ($10) {
    HEAP32[15560>>2] = 0;
   } else {
    $11 = ($size>>>0)<(64);
    if ($11) {
     HEAP32[15560>>2] = 7;
     break;
    }
    $12 = ($size>>>0)<(128);
    if ($12) {
     HEAP32[15560>>2] = 15;
     break;
    }
    $13 = ($size>>>0)<(256);
    if ($13) {
     HEAP32[15560>>2] = 31;
     break;
    } else {
     HEAP32[15560>>2] = 63;
     break;
    }
   }
  } while(0);
  $14 = ((($state)) + 4|0);
  HEAP32[15572>>2] = $14;
  ___srandom($seed);
  $15 = HEAP32[15560>>2]|0;
  $16 = $15 << 16;
  $17 = HEAP32[15564>>2]|0;
  $18 = $17 << 8;
  $19 = $18 | $16;
  $20 = HEAP32[15568>>2]|0;
  $21 = $19 | $20;
  $22 = HEAP32[15572>>2]|0;
  $23 = ((($22)) + -4|0);
  HEAP32[$23>>2] = $21;
  ___unlock((15552|0));
  $$0 = $9;
 }
 return ($$0|0);
}
function _setstate($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((15552|0));
 $0 = HEAP32[15560>>2]|0;
 $1 = $0 << 16;
 $2 = HEAP32[15564>>2]|0;
 $3 = $2 << 8;
 $4 = $3 | $1;
 $5 = HEAP32[15568>>2]|0;
 $6 = $4 | $5;
 $7 = HEAP32[15572>>2]|0;
 $8 = ((($7)) + -4|0);
 HEAP32[$8>>2] = $6;
 $9 = ((($state)) + 4|0);
 HEAP32[15572>>2] = $9;
 $10 = HEAP32[$state>>2]|0;
 $11 = $10 >>> 16;
 HEAP32[15560>>2] = $11;
 $12 = HEAP32[$state>>2]|0;
 $13 = $12 >>> 8;
 $14 = $13 & 255;
 HEAP32[15564>>2] = $14;
 $15 = HEAP32[$state>>2]|0;
 $16 = $15 & 255;
 HEAP32[15568>>2] = $16;
 ___unlock((15552|0));
 return ($8|0);
}
function _random() {
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((15552|0));
 $0 = HEAP32[15560>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[15572>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $4 = Math_imul($3, 1103515245)|0;
  $5 = (($4) + 12345)|0;
  $6 = $5 & 2147483647;
  HEAP32[$2>>2] = $6;
  $k$0 = $6;
 } else {
  $7 = HEAP32[15568>>2]|0;
  $8 = HEAP32[15572>>2]|0;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[15564>>2]|0;
  $12 = (($8) + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($10))|0;
  HEAP32[$12>>2] = $14;
  $15 = HEAP32[15564>>2]|0;
  $16 = (($8) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 >>> 1;
  $19 = (($15) + 1)|0;
  $20 = HEAP32[15560>>2]|0;
  $21 = ($19|0)==($20|0);
  $$ = $21 ? 0 : $19;
  HEAP32[15564>>2] = $$;
  $22 = HEAP32[15568>>2]|0;
  $23 = (($22) + 1)|0;
  $24 = ($23|0)==($20|0);
  $$1 = $24 ? 0 : $23;
  HEAP32[15568>>2] = $$1;
  $k$0 = $18;
 }
 ___unlock((15552|0));
 return ($k$0|0);
}
function _rand_r($seed) {
 $seed = $seed|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$seed>>2]|0;
 $1 = Math_imul($0, 1103515245)|0;
 $2 = (($1) + 12345)|0;
 HEAP32[$seed>>2] = $2;
 $3 = $2 >>> 11;
 $4 = $3 ^ $2;
 $5 = $4 << 7;
 $6 = $5 & -1658038656;
 $7 = $6 ^ $4;
 $8 = $7 << 15;
 $9 = $8 & -272236544;
 $10 = $9 ^ $7;
 $11 = $10 >>> 18;
 $12 = $11 ^ $10;
 $13 = $12 >>> 1;
 return ($13|0);
}
function _seed48($s) {
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP16[146026>>1]=HEAP16[25320>>1]|0;HEAP16[146026+2>>1]=HEAP16[25320+2>>1]|0;HEAP16[146026+4>>1]=HEAP16[25320+4>>1]|0;
 ;HEAP16[25320>>1]=HEAP16[$s>>1]|0;HEAP16[25320+2>>1]=HEAP16[$s+2>>1]|0;HEAP16[25320+4>>1]=HEAP16[$s+4>>1]|0;
 return (146026|0);
}
function _srand48($seed) {
 $seed = $seed|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP16[$0>>1] = 13070;
 $1 = ((($0)) + 2|0);
 $2 = $seed&65535;
 HEAP16[$1>>1] = $2;
 $3 = ((($0)) + 4|0);
 $4 = $seed >>> 16;
 $5 = $4&65535;
 HEAP16[$3>>1] = $5;
 (_seed48($0)|0);
 STACKTOP = sp;return;
}
function ___rand48_step($xi,$lc) {
 $xi = $xi|0;
 $lc = $lc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[$xi>>1]|0;
 $1 = $0&65535;
 $2 = ((($xi)) + 2|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = $4 << 16;
 $6 = $5 | $1;
 $7 = ((($xi)) + 4|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = HEAP16[$lc>>1]|0;
 $11 = $10&65535;
 $12 = ((($lc)) + 2|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = $14 << 16;
 $16 = $15 | $11;
 $17 = ((($lc)) + 4|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 $20 = (___muldi3(($16|0),($19|0),($6|0),($9|0))|0);
 $21 = tempRet0;
 $22 = ((($lc)) + 6|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $25 = (_i64Add(($20|0),($21|0),($24|0),0)|0);
 $26 = tempRet0;
 $27 = $25&65535;
 HEAP16[$xi>>1] = $27;
 $28 = (_bitshift64Lshr(($25|0),($26|0),16)|0);
 $29 = tempRet0;
 $30 = $28&65535;
 HEAP16[$2>>1] = $30;
 $31 = $26&65535;
 HEAP16[$7>>1] = $31;
 $32 = $26 & 65535;
 tempRet0 = ($32);
 return ($25|0);
}
function _fnmatch($pat,$str,$flags) {
 $pat = $pat|0;
 $str = $str|0;
 $flags = $flags|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$lcssa = 0, $$mux = 0, $$not = 0, $$not4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, $inc = 0;
 var $or$cond = 0, $or$cond9 = 0, $p$0 = 0, $p$0$lcssa = 0, $s$0 = 0, $s$0$lcssa = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $inc = sp;
 $0 = $flags & 1;
 $1 = ($0|0)==(0);
 $2 = $flags & 8;
 $3 = ($2|0)==(0);
 L1: do {
  if ($1) {
   L3: do {
    if (!($3)) {
     $23 = $str;
     $s$1 = $str;
     while(1) {
      $24 = HEAP8[$s$1>>0]|0;
      switch ($24<<24>>24) {
      case 0:  {
       break L3;
       break;
      }
      case 47:  {
       $25 = $s$1;
       $26 = (($25) - ($23))|0;
       $27 = (_fnmatch_internal($pat,-1,$str,$26,$flags)|0);
       $28 = ($27|0)==(0);
       if ($28) {
        $$0 = 0;
        break L1;
       }
       break;
      }
      default: {
      }
      }
      $29 = ((($s$1)) + 1|0);
      $s$1 = $29;
     }
    }
   } while(0);
   $30 = (_fnmatch_internal($pat,-1,$str,-1,$flags)|0);
   $$0 = $30;
  } else {
   $$01 = $pat;$$02 = $str;
   while(1) {
    $s$0 = $$02;
    L13: while(1) {
     $4 = HEAP8[$s$0>>0]|0;
     switch ($4<<24>>24) {
     case 47: case 0:  {
      $s$0$lcssa = $s$0;
      break L13;
      break;
     }
     default: {
     }
     }
     $5 = ((($s$0)) + 1|0);
     $s$0 = $5;
    }
    $p$0 = $$01;
    L17: while(1) {
     $6 = (_pat_next($p$0,-1,$inc,$flags)|0);
     switch ($6|0) {
     case 0: case 47:  {
      $$lcssa = $6;$p$0$lcssa = $p$0;
      break L17;
      break;
     }
     default: {
     }
     }
     $7 = HEAP32[$inc>>2]|0;
     $8 = (($p$0) + ($7)|0);
     $p$0 = $8;
    }
    $9 = HEAP8[$s$0$lcssa>>0]|0;
    $10 = $9 << 24 >> 24;
    $11 = ($$lcssa|0)!=($10|0);
    $12 = ($9<<24>>24)==(0);
    $or$cond = $3 | $12;
    $or$cond9 = $11 & $or$cond;
    if ($or$cond9) {
     $$0 = 1;
     break L1;
    }
    $13 = $p$0$lcssa;
    $14 = $$01;
    $15 = (($13) - ($14))|0;
    $16 = $s$0$lcssa;
    $17 = $$02;
    $18 = (($16) - ($17))|0;
    $19 = (_fnmatch_internal($$01,$15,$$02,$18,$flags)|0);
    $$not = ($19|0)!=(0);
    $$not4 = ($$lcssa|0)==(0);
    $brmerge = $$not4 | $$not;
    $$mux = $$not&1;
    if ($brmerge) {
     $$0 = $$mux;
     break L1;
    }
    $20 = ((($s$0$lcssa)) + 1|0);
    $21 = HEAP32[$inc>>2]|0;
    $22 = (($p$0$lcssa) + ($21)|0);
    $$01 = $22;$$02 = $20;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _glob($pat,$flags,$errfunc,$g) {
 $pat = $pat|0;
 $flags = $flags|0;
 $errfunc = $errfunc|0;
 $g = $g|0;
 var $$0 = 0, $$in = 0, $$lcssa = 0, $$pre = 0, $$pre$phi313337Z2D = 0, $$pre$phi313338Z2D = 0, $$pre24 = 0, $$pre25 = 0, $$sink16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $cnt$017 = 0, $cnt$1 = 0, $d$0 = 0, $error$083435 = 0, $error$083436 = 0, $exitcond = 0;
 var $head = 0, $i$113 = 0, $ignore_err$errfunc = 0, $match$01$i = 0, $match$01$i2 = 0, $match$01$i5 = 0, $offs$0 = 0, $p$1 = 0, $pat$pn = 0, $tail = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $head = sp;
 $tail = sp + 8|0;
 $0 = $head;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 HEAP32[$tail>>2] = $head;
 $4 = $flags & 8;
 $5 = ($4|0)==(0);
 if ($5) {
  $18 = 0;
 } else {
  $6 = ((($g)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $18 = $7;
 }
 $8 = HEAP8[$pat>>0]|0;
 $9 = ($8<<24>>24)==(47);
 if ($9) {
  $pat$pn = $pat;
  while(1) {
   $10 = ((($pat$pn)) + 1|0);
   $$pre = HEAP8[$10>>0]|0;
   $11 = ($$pre<<24>>24)==(47);
   if ($11) {
    $pat$pn = $10;
   } else {
    $83 = $$pre;$d$0 = 175866;$p$1 = $10;
    break;
   }
  }
 } else {
  $83 = $8;$d$0 = 180292;$p$1 = $pat;
 }
 $12 = (_strlen($p$1)|0);
 $13 = ($12>>>0)>(4096);
 L8: do {
  if ($13) {
   $$0 = 1;
  } else {
   $14 = ($errfunc|0)==(0|0);
   $ignore_err$errfunc = $14 ? 13 : $errfunc;
   $15 = $flags & 32;
   $16 = ($15|0)!=(0);
   if ($16) {
    $20 = $83;
   } else {
    $17 = ((($g)) + 8|0);
    HEAP32[$17>>2] = $18;
    HEAP32[$g>>2] = 0;
    $19 = ((($g)) + 4|0);
    HEAP32[$19>>2] = 0;
    $$pre24 = HEAP8[$p$1>>0]|0;
    $20 = $$pre24;
   }
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    HEAP32[$tail>>2] = 0;
    $$pre$phi313338Z2D = $head;$84 = $tail;$error$083436 = 0;
    label = 16;
   } else {
    $22 = (_match_in_dir($d$0,$p$1,$flags,$ignore_err$errfunc,$tail)|0);
    $23 = ($22|0)==(1);
    if ($23) {
     $24 = HEAP32[$head>>2]|0;
     $25 = ($24|0)==(0|0);
     if ($25) {
      $$0 = 1;
      break;
     } else {
      $match$01$i = $24;
     }
     while(1) {
      $26 = HEAP32[$match$01$i>>2]|0;
      _free($match$01$i);
      $27 = ($26|0)==(0|0);
      if ($27) {
       $$0 = 1;
       break L8;
      } else {
       $match$01$i = $26;
      }
     }
    }
    $$pre25 = HEAP32[$head>>2]|0;
    HEAP32[$tail>>2] = $$pre25;
    $28 = ($$pre25|0)==(0);
    if ($28) {
     $$pre$phi313338Z2D = $head;$84 = $tail;$error$083436 = $22;
     label = 16;
    } else {
     $$sink16 = $$pre25;$cnt$017 = 0;
     while(1) {
      $29 = $$sink16;
      $30 = HEAP32[$29>>2]|0;
      HEAP32[$tail>>2] = $30;
      $31 = (($cnt$017) + 1)|0;
      $32 = ($30|0)==(0);
      if ($32) {
       $$lcssa = $31;
       break;
      } else {
       $$sink16 = $30;$cnt$017 = $31;
      }
     }
     $33 = ($$lcssa|0)==(0);
     if ($33) {
      $$pre$phi313338Z2D = $head;$84 = $tail;$error$083436 = $22;
      label = 16;
     } else {
      $$pre$phi313337Z2D = $head;$66 = $tail;$cnt$1 = $$lcssa;$error$083435 = $22;
     }
    }
   }
   if ((label|0) == 16) {
    $34 = $flags & 16;
    $35 = ($34|0)==(0);
    if ($35) {
     $$0 = 3;
     break;
    }
    HEAP32[$tail>>2] = $head;
    $36 = (_strlen($pat)|0);
    $37 = (_append($tail,$pat,$36,0)|0);
    $38 = ($37|0)==(0);
    if ($38) {
     $$pre$phi313337Z2D = $$pre$phi313338Z2D;$66 = $84;$cnt$1 = 1;$error$083435 = $error$083436;
    } else {
     $$0 = 1;
     break;
    }
   }
   do {
    if ($16) {
     $39 = ((($g)) + 4|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = HEAP32[$g>>2]|0;
     $42 = (($cnt$1) + ($18))|0;
     $43 = (($42) + ($41))|0;
     $44 = $43 << 2;
     $45 = (($44) + 4)|0;
     $46 = (_realloc($40,$45)|0);
     $47 = ($46|0)==(0|0);
     if (!($47)) {
      HEAP32[$39>>2] = $46;
      $52 = (($41) + ($18))|0;
      $offs$0 = $52;
      break;
     }
     $48 = HEAP32[$head>>2]|0;
     $49 = ($48|0)==(0|0);
     if ($49) {
      $$0 = 1;
      break L8;
     } else {
      $match$01$i2 = $48;
     }
     while(1) {
      $50 = HEAP32[$match$01$i2>>2]|0;
      _free($match$01$i2);
      $51 = ($50|0)==(0|0);
      if ($51) {
       $$0 = 1;
       break L8;
      } else {
       $match$01$i2 = $50;
      }
     }
    } else {
     $53 = (($cnt$1) + ($18))|0;
     $54 = $53 << 2;
     $55 = (($54) + 4)|0;
     $56 = (_malloc($55)|0);
     $57 = ((($g)) + 4|0);
     HEAP32[$57>>2] = $56;
     $58 = ($56|0)==(0|0);
     if ($58) {
      $61 = HEAP32[$head>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $$0 = 1;
       break L8;
      } else {
       $match$01$i5 = $61;
      }
      while(1) {
       $63 = HEAP32[$match$01$i5>>2]|0;
       _free($match$01$i5);
       $64 = ($63|0)==(0|0);
       if ($64) {
        $$0 = 1;
        break L8;
       } else {
        $match$01$i5 = $63;
       }
      }
     } else {
      $59 = ($18|0)==(0);
      if ($59) {
       $offs$0 = 0;
       break;
      }
      $60 = $18 << 2;
      _memset(($56|0),0,($60|0))|0;
      $offs$0 = $18;
      break;
     }
    }
   } while(0);
   $65 = HEAP32[$$pre$phi313337Z2D>>2]|0;
   HEAP32[$66>>2] = $65;
   $67 = ((($g)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $$in = $65;$i$113 = 0;
   while(1) {
    $69 = $$in;
    $70 = $$in;
    $71 = ((($69)) + 4|0);
    $72 = (($i$113) + ($offs$0))|0;
    $73 = (($68) + ($72<<2)|0);
    HEAP32[$73>>2] = $71;
    $74 = HEAP32[$70>>2]|0;
    HEAP32[$66>>2] = $74;
    $75 = (($i$113) + 1)|0;
    $exitcond = ($75|0)==($cnt$1|0);
    if ($exitcond) {
     break;
    } else {
     $$in = $74;$i$113 = $75;
    }
   }
   $76 = (($cnt$1) + ($offs$0))|0;
   $77 = (($68) + ($76<<2)|0);
   HEAP32[$77>>2] = 0;
   $78 = HEAP32[$g>>2]|0;
   $79 = (($78) + ($cnt$1))|0;
   HEAP32[$g>>2] = $79;
   $80 = $flags & 4;
   $81 = ($80|0)==(0);
   if ($81) {
    $82 = (($68) + ($offs$0<<2)|0);
    _qsort($82,$cnt$1,4,14);
    $$0 = $error$083435;
   } else {
    $$0 = $error$083435;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _globfree($g) {
 $g = $g|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$g>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $$pre = ((($g)) + 4|0);
  $$pre$phiZ2D = $$pre;
 } else {
  $2 = ((($g)) + 8|0);
  $3 = ((($g)) + 4|0);
  $i$01 = 0;
  while(1) {
   $4 = HEAP32[$2>>2]|0;
   $5 = (($4) + ($i$01))|0;
   $6 = HEAP32[$3>>2]|0;
   $7 = (($6) + ($5<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($8)) + -4|0);
   _free($9);
   $10 = (($i$01) + 1)|0;
   $11 = HEAP32[$g>>2]|0;
   $12 = ($10>>>0)<($11>>>0);
   if ($12) {
    $i$01 = $10;
   } else {
    $$pre$phiZ2D = $3;
    break;
   }
  }
 }
 $13 = HEAP32[$$pre$phiZ2D>>2]|0;
 _free($13);
 HEAP32[$g>>2] = 0;
 HEAP32[$$pre$phiZ2D>>2] = 0;
 return;
}
function _regcomp($preg,$regex,$cflags) {
 $preg = $preg|0;
 $regex = $regex|0;
 $cflags = $cflags|0;
 var $$$i = 0, $$0 = 0, $$0$i2 = 0, $$0$i24$ph = 0, $$be = 0, $$lcssa = 0, $$lcssa223 = 0, $$lcssa225 = 0, $$lcssa226 = 0, $$lcssa227 = 0, $$lcssa228 = 0, $$lcssa46 = 0, $$lobit = 0, $$lobit$not = 0, $$op = 0, $$pre = 0, $$pre$i = 0, $$pre$i23 = 0, $$pre$phi157$iZ2D = 0, $$pre$pre$i = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$0$lcssa = 0, $add$059 = 0, $assertions$i = 0, $copy$i = 0, $copy3$i = 0, $counts$0 = 0, $errcode$0 = 0, $i$158 = 0, $i$2 = 0, $i$3$lcssa = 0;
 var $i$356 = 0, $item$i$i = 0, $item$i$i$byval_copy = 0, $item$i$i18 = 0, $item$i$i18$byval_copy = 0, $item$i1$i = 0, $item$i1$i$byval_copy = 0, $item$i10$i = 0, $item$i10$i$byval_copy = 0, $item$i10$i10 = 0, $item$i10$i10$byval_copy = 0, $item$i11$i = 0, $item$i11$i$byval_copy = 0, $item$i11$i9 = 0, $item$i11$i9$byval_copy = 0, $item$i12$i = 0, $item$i12$i$byval_copy = 0, $item$i12$i8 = 0, $item$i12$i8$byval_copy = 0, $item$i13$i = 0;
 var $item$i13$i$byval_copy = 0, $item$i13$i7 = 0, $item$i13$i7$byval_copy = 0, $item$i14$i = 0, $item$i14$i$byval_copy = 0, $item$i14$i6 = 0, $item$i14$i6$byval_copy = 0, $item$i15$i = 0, $item$i15$i$byval_copy = 0, $item$i15$i5 = 0, $item$i15$i5$byval_copy = 0, $item$i16$i = 0, $item$i16$i$byval_copy = 0, $item$i16$i4 = 0, $item$i16$i4$byval_copy = 0, $item$i17$i = 0, $item$i17$i$byval_copy = 0, $item$i2$i = 0, $item$i2$i$byval_copy = 0, $item$i3$i = 0;
 var $item$i3$i$byval_copy = 0, $item$i3$i17 = 0, $item$i3$i17$byval_copy = 0, $item$i4$i = 0, $item$i4$i$byval_copy = 0, $item$i4$i16 = 0, $item$i4$i16$byval_copy = 0, $item$i5$i = 0, $item$i5$i$byval_copy = 0, $item$i5$i15 = 0, $item$i5$i15$byval_copy = 0, $item$i6$i = 0, $item$i6$i$byval_copy = 0, $item$i6$i14 = 0, $item$i6$i14$byval_copy = 0, $item$i7$i = 0, $item$i7$i$byval_copy = 0, $item$i7$i13 = 0, $item$i7$i13$byval_copy = 0, $item$i8$i = 0;
 var $item$i8$i$byval_copy = 0, $item$i8$i12 = 0, $item$i8$i12$byval_copy = 0, $item$i9$i = 0, $item$i9$i$byval_copy = 0, $item$i9$i11 = 0, $item$i9$i11$byval_copy = 0, $iter_depth$037$i$be = 0, $iter_depth$037$i76 = 0, $j$0 = 0, $j$135$i = 0, $max_pos$i = 0, $num_tags$i = 0, $offs$0 = 0, $or$cond = 0, $or$cond2$i = 0, $p$0 = 0, $parse_ctx = 0, $pos_add$i = 0, $pos_add_save$0$i$lcssa = 0;
 var $pos_add_save$2$i = 0, $pos_add_total$038$i$be = 0, $pos_add_total$038$i$lcssa = 0, $pos_add_total$038$i75 = 0, $seq1$0$i$lcssa = 0, $seq1$0$i67200 = 0, $seq1$1$i = 0, $seq1$2$i = 0, $seq1$217$i = 0, $seq2$i = 0, $status$0$be$i = 0, $status$0$lcssa$i = 0, $tag_directions$0 = 0, $tag_directions$1 = 0, $tnfa$0 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $item$i17$i$byval_copy = sp + 332|0;
 $item$i16$i4$byval_copy = sp + 328|0;
 $item$i15$i5$byval_copy = sp + 324|0;
 $item$i14$i6$byval_copy = sp + 320|0;
 $item$i13$i7$byval_copy = sp + 316|0;
 $item$i12$i8$byval_copy = sp + 312|0;
 $item$i11$i9$byval_copy = sp + 308|0;
 $item$i10$i10$byval_copy = sp + 304|0;
 $item$i9$i11$byval_copy = sp + 300|0;
 $item$i8$i12$byval_copy = sp + 296|0;
 $item$i7$i13$byval_copy = sp + 292|0;
 $item$i6$i14$byval_copy = sp + 288|0;
 $item$i5$i15$byval_copy = sp + 284|0;
 $item$i4$i16$byval_copy = sp + 280|0;
 $item$i3$i17$byval_copy = sp + 276|0;
 $item$i2$i$byval_copy = sp + 272|0;
 $item$i1$i$byval_copy = sp + 268|0;
 $item$i$i18$byval_copy = sp + 264|0;
 $item$i16$i$byval_copy = sp + 260|0;
 $item$i15$i$byval_copy = sp + 256|0;
 $item$i14$i$byval_copy = sp + 252|0;
 $item$i13$i$byval_copy = sp + 248|0;
 $item$i12$i$byval_copy = sp + 244|0;
 $item$i11$i$byval_copy = sp + 240|0;
 $item$i10$i$byval_copy = sp + 236|0;
 $item$i9$i$byval_copy = sp + 232|0;
 $item$i8$i$byval_copy = sp + 228|0;
 $item$i7$i$byval_copy = sp + 224|0;
 $item$i6$i$byval_copy = sp + 220|0;
 $item$i5$i$byval_copy = sp + 216|0;
 $item$i4$i$byval_copy = sp + 212|0;
 $item$i3$i$byval_copy = sp + 208|0;
 $item$i$i$byval_copy = sp + 204|0;
 $item$i17$i = sp + 200|0;
 $item$i16$i4 = sp + 196|0;
 $item$i15$i5 = sp + 192|0;
 $item$i14$i6 = sp + 188|0;
 $item$i13$i7 = sp + 184|0;
 $item$i12$i8 = sp + 180|0;
 $item$i11$i9 = sp + 176|0;
 $item$i10$i10 = sp + 172|0;
 $item$i9$i11 = sp + 168|0;
 $item$i8$i12 = sp + 164|0;
 $item$i7$i13 = sp + 160|0;
 $item$i6$i14 = sp + 156|0;
 $item$i5$i15 = sp + 152|0;
 $item$i4$i16 = sp + 148|0;
 $item$i3$i17 = sp + 144|0;
 $item$i2$i = sp + 140|0;
 $item$i1$i = sp + 136|0;
 $item$i$i18 = sp + 132|0;
 $num_tags$i = sp + 128|0;
 $assertions$i = sp + 124|0;
 $item$i16$i = sp + 120|0;
 $item$i15$i = sp + 116|0;
 $item$i14$i = sp + 112|0;
 $item$i13$i = sp + 108|0;
 $item$i12$i = sp + 104|0;
 $item$i11$i = sp + 100|0;
 $item$i10$i = sp + 96|0;
 $item$i9$i = sp + 92|0;
 $item$i8$i = sp + 88|0;
 $item$i7$i = sp + 84|0;
 $item$i6$i = sp + 80|0;
 $item$i5$i = sp + 76|0;
 $item$i4$i = sp + 72|0;
 $item$i3$i = sp + 68|0;
 $item$i$i = sp + 64|0;
 $pos_add$i = sp + 60|0;
 $max_pos$i = sp + 56|0;
 $seq2$i = sp + 52|0;
 $copy$i = sp + 48|0;
 $copy3$i = sp + 44|0;
 $parse_ctx = sp;
 $0 = (_malloc(20)|0);
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   $$0 = 12;
  } else {
   $2 = (_malloc(2048)|0);
   $3 = ((($0)) + 16|0);
   HEAP32[$3>>2] = $2;
   $4 = ($2|0)==(0|0);
   if ($4) {
    _free($0);
    $$0 = 12;
    break;
   }
   HEAP32[$0>>2] = 512;
   $5 = ((($0)) + 4|0);
   HEAP32[$5>>2] = 10240;
   $6 = ((($0)) + 8|0);
   HEAP32[$6>>2] = 128;
   $7 = ((($0)) + 12|0);
   HEAP32[$7>>2] = 0;
   $8 = (___tre_mem_new_impl(0,0)|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    $10 = HEAP32[$3>>2]|0;
    _free($10);
    _free($0);
    $$0 = 12;
    break;
   }
   dest=$parse_ctx; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   HEAP32[$parse_ctx>>2] = $8;
   $11 = ((($parse_ctx)) + 4|0);
   HEAP32[$11>>2] = $0;
   $12 = ((($parse_ctx)) + 12|0);
   HEAP32[$12>>2] = $regex;
   $13 = ((($parse_ctx)) + 36|0);
   HEAP32[$13>>2] = $cflags;
   $14 = ((($parse_ctx)) + 28|0);
   HEAP32[$14>>2] = -1;
   $15 = (_tre_parse($parse_ctx)|0);
   $16 = ($15|0)==(0);
   L9: do {
    if ($16) {
     $17 = ((($parse_ctx)) + 20|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($18) + -1)|0;
     HEAP32[$preg>>2] = $19;
     $20 = ((($parse_ctx)) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = HEAP32[$14>>2]|0;
     $23 = ($22|0)>(-1);
     if ($23) {
      $24 = ((($parse_ctx)) + 32|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($25|0)==(0);
      if (!($26)) {
       $counts$0 = 0;$errcode$0 = 2;$offs$0 = 0;$tnfa$0 = 0;
       break;
      }
     }
     $27 = ($22|0)>($19|0);
     if ($27) {
      $counts$0 = 0;$errcode$0 = 6;$offs$0 = 0;$tnfa$0 = 0;
     } else {
      $28 = (_calloc(1,68)|0);
      $29 = ($28|0)==(0|0);
      if ($29) {
       $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $28;
      } else {
       $$lobit = $22 >>> 31;
       $$lobit$not = $$lobit ^ 1;
       $30 = ((($28)) + 60|0);
       HEAP32[$30>>2] = $$lobit$not;
       $31 = ((($parse_ctx)) + 32|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = ((($28)) + 64|0);
       HEAP32[$33>>2] = $32;
       $34 = ((($28)) + 28|0);
       HEAP32[$34>>2] = $18;
       $35 = ($$lobit|0)!=(1);
       $36 = $cflags & 8;
       $37 = ($36|0)==(0);
       $or$cond = $37 | $35;
       if ($or$cond) {
        $38 = (_tre_add_tags(0,$0,$21,$28)|0);
        $39 = ($38|0)==(0);
        if (!($39)) {
         $counts$0 = 0;$errcode$0 = $38;$offs$0 = 0;$tnfa$0 = $28;
         break;
        }
        $40 = ((($28)) + 40|0);
        $41 = HEAP32[$40>>2]|0;
        $42 = ($41|0)>(0);
        if ($42) {
         $43 = $41 << 2;
         $44 = (($43) + 4)|0;
         $45 = (_malloc($44)|0);
         $46 = ($45|0)==(0|0);
         if ($46) {
          $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $28;
          break;
         }
         $47 = ((($28)) + 32|0);
         HEAP32[$47>>2] = $45;
         _memset(($45|0),-1,($44|0))|0;
         $tag_directions$0 = $45;
        } else {
         $tag_directions$0 = 0;
        }
        $48 = $41 << 1;
        $49 = $48 | 1;
        $50 = (_calloc($49,4)|0);
        $51 = ((($28)) + 36|0);
        HEAP32[$51>>2] = $50;
        $52 = ($50|0)==(0|0);
        if ($52) {
         $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $28;
         break;
        }
        $53 = HEAP32[$17>>2]|0;
        $54 = (_calloc($53,12)|0);
        $55 = ($54|0)==(0|0);
        if ($55) {
         $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $28;
         break;
        }
        $56 = ((($28)) + 16|0);
        HEAP32[$56>>2] = $54;
        $57 = (_tre_add_tags($8,$0,$21,$28)|0);
        $58 = ($57|0)==(0);
        if ($58) {
         $tag_directions$1 = $tag_directions$0;
        } else {
         $counts$0 = 0;$errcode$0 = $57;$offs$0 = 0;$tnfa$0 = $28;
         break;
        }
       } else {
        $tag_directions$1 = 0;
       }
       $59 = ((($parse_ctx)) + 24|0);
       $60 = HEAP32[$7>>2]|0;
       HEAP32[$pos_add$i>>2] = 0;
       HEAP32[$max_pos$i>>2] = 0;
       HEAP32[$item$i$i>>2] = $21;
       ;HEAP32[$item$i$i$byval_copy>>2]=HEAP32[$item$i$i>>2]|0;
       $61 = (_tre_stack_push($0,$item$i$i$byval_copy)|0);
       $62 = ($61|0)==(0);
       L26: do {
        if ($62) {
         HEAP32[$item$i3$i>>2] = 0;
         ;HEAP32[$item$i3$i$byval_copy>>2]=HEAP32[$item$i3$i>>2]|0;
         $63 = (_tre_stack_push($0,$item$i3$i$byval_copy)|0);
         $64 = ($63|0)==(0);
         if ($64) {
          $65 = HEAP32[$7>>2]|0;
          $66 = ($65|0)>($60|0);
          L29: do {
           if ($66) {
            $68 = $65;$87 = 0;$iter_depth$037$i76 = 0;$pos_add_total$038$i75 = 0;
            while(1) {
             $67 = (($68) + -1)|0;
             HEAP32[$7>>2] = $67;
             $69 = HEAP32[$3>>2]|0;
             $70 = (($69) + ($67<<2)|0);
             $71 = HEAP32[$70>>2]|0;
             $72 = (($68) + -2)|0;
             HEAP32[$7>>2] = $72;
             $73 = (($69) + ($72<<2)|0);
             $74 = HEAP32[$73>>2]|0;
             L32: do {
              switch ($71|0) {
              case 0:  {
               $78 = HEAP32[$74>>2]|0;
               switch ($78|0) {
               case 0:  {
                $79 = ((($74)) + 4|0);
                $80 = HEAP32[$79>>2]|0;
                $81 = HEAP32[$80>>2]|0;
                $82 = ($81|0)>(-1);
                $83 = ($81|0)==(-4);
                $or$cond2$i = $82 | $83;
                if (!($or$cond2$i)) {
                 $$be = $87;$iter_depth$037$i$be = $iter_depth$037$i76;$pos_add_total$038$i$be = $pos_add_total$038$i75;
                 break L32;
                }
                $84 = ((($80)) + 8|0);
                $85 = HEAP32[$84>>2]|0;
                $86 = (($85) + ($87))|0;
                HEAP32[$84>>2] = $86;
                $88 = HEAP32[$max_pos$i>>2]|0;
                $89 = ($86|0)>($88|0);
                if (!($89)) {
                 $$be = $87;$iter_depth$037$i$be = $iter_depth$037$i76;$pos_add_total$038$i$be = $pos_add_total$038$i75;
                 break L32;
                }
                HEAP32[$max_pos$i>>2] = $86;
                $$be = $87;$iter_depth$037$i$be = $iter_depth$037$i76;$pos_add_total$038$i$be = $pos_add_total$038$i75;
                break L32;
                break;
               }
               case 3:  {
                $90 = ((($74)) + 4|0);
                $91 = HEAP32[$90>>2]|0;
                $92 = ((($91)) + 4|0);
                $93 = HEAP32[$92>>2]|0;
                HEAP32[$item$i4$i>>2] = $93;
                ;HEAP32[$item$i4$i$byval_copy>>2]=HEAP32[$item$i4$i>>2]|0;
                $94 = (_tre_stack_push($0,$item$i4$i$byval_copy)|0);
                $95 = ($94|0)==(0);
                if (!($95)) {
                 $pos_add_total$038$i$lcssa = $pos_add_total$038$i75;$status$0$lcssa$i = $94;
                 break L29;
                }
                HEAP32[$item$i5$i>>2] = 0;
                ;HEAP32[$item$i5$i$byval_copy>>2]=HEAP32[$item$i5$i>>2]|0;
                $96 = (_tre_stack_push($0,$item$i5$i$byval_copy)|0);
                $97 = ($96|0)==(0);
                if (!($97)) {
                 $pos_add_total$038$i$lcssa = $pos_add_total$038$i75;$status$0$lcssa$i = $96;
                 break L29;
                }
                $98 = HEAP32[$91>>2]|0;
                HEAP32[$item$i6$i>>2] = $98;
                ;HEAP32[$item$i6$i$byval_copy>>2]=HEAP32[$item$i6$i>>2]|0;
                $99 = (_tre_stack_push($0,$item$i6$i$byval_copy)|0);
                $100 = ($99|0)==(0);
                if (!($100)) {
                 $pos_add_total$038$i$lcssa = $pos_add_total$038$i75;$status$0$lcssa$i = $99;
                 break L29;
                }
                HEAP32[$item$i7$i>>2] = 0;
                ;HEAP32[$item$i7$i$byval_copy>>2]=HEAP32[$item$i7$i>>2]|0;
                $101 = (_tre_stack_push($0,$item$i7$i$byval_copy)|0);
                $status$0$be$i = $101;
                break;
               }
               case 1:  {
                $102 = ((($74)) + 4|0);
                $103 = HEAP32[$102>>2]|0;
                $104 = ((($103)) + 4|0);
                $105 = HEAP32[$104>>2]|0;
                HEAP32[$item$i8$i>>2] = $105;
                ;HEAP32[$item$i8$i$byval_copy>>2]=HEAP32[$item$i8$i>>2]|0;
                $106 = (_tre_stack_push($0,$item$i8$i$byval_copy)|0);
                $107 = ($106|0)==(0);
                if (!($107)) {
                 $pos_add_total$038$i$lcssa = $pos_add_total$038$i75;$status$0$lcssa$i = $106;
                 break L29;
                }
                HEAP32[$item$i9$i>>2] = 0;
                ;HEAP32[$item$i9$i$byval_copy>>2]=HEAP32[$item$i9$i>>2]|0;
                $108 = (_tre_stack_push($0,$item$i9$i$byval_copy)|0);
                $109 = ($108|0)==(0);
                if (!($109)) {
                 $pos_add_total$038$i$lcssa = $pos_add_total$038$i75;$status$0$lcssa$i = $108;
                 break L29;
                }
                $110 = HEAP32[$103>>2]|0;
                HEAP32[$item$i10$i>>2] = $110;
                ;HEAP32[$item$i10$i$byval_copy>>2]=HEAP32[$item$i10$i>>2]|0;
                $111 = (_tre_stack_push($0,$item$i10$i$byval_copy)|0);
                $112 = ($111|0)==(0);
                if (!($112)) {
                 $pos_add_total$038$i$lcssa = $pos_add_total$038$i75;$status$0$lcssa$i = $111;
                 break L29;
                }
                HEAP32[$item$i11$i>>2] = 0;
                ;HEAP32[$item$i11$i$byval_copy>>2]=HEAP32[$item$i11$i>>2]|0;
                $113 = (_tre_stack_push($0,$item$i11$i$byval_copy)|0);
                $status$0$be$i = $113;
                break;
               }
               case 2:  {
                $114 = ((($74)) + 4|0);
                $115 = HEAP32[$114>>2]|0;
                HEAP32[$item$i12$i>>2] = $87;
                ;HEAP32[$item$i12$i$byval_copy>>2]=HEAP32[$item$i12$i>>2]|0;
                $116 = (_tre_stack_push($0,$item$i12$i$byval_copy)|0);
                $117 = ($116|0)==(0);
                if (!($117)) {
                 $pos_add_total$038$i$lcssa = $pos_add_total$038$i75;$status$0$lcssa$i = $116;
                 break L29;
                }
                HEAP32[$item$i13$i>>2] = $74;
                ;HEAP32[$item$i13$i$byval_copy>>2]=HEAP32[$item$i13$i>>2]|0;
                $118 = (_tre_stack_push($0,$item$i13$i$byval_copy)|0);
                $119 = ($118|0)==(0);
                if (!($119)) {
                 $pos_add_total$038$i$lcssa = $pos_add_total$038$i75;$status$0$lcssa$i = $118;
                 break L29;
                }
                HEAP32[$item$i14$i>>2] = 1;
                ;HEAP32[$item$i14$i$byval_copy>>2]=HEAP32[$item$i14$i>>2]|0;
                $120 = (_tre_stack_push($0,$item$i14$i$byval_copy)|0);
                $121 = ($120|0)==(0);
                if (!($121)) {
                 $pos_add_total$038$i$lcssa = $pos_add_total$038$i75;$status$0$lcssa$i = $120;
                 break L29;
                }
                $122 = HEAP32[$115>>2]|0;
                HEAP32[$item$i15$i>>2] = $122;
                ;HEAP32[$item$i15$i$byval_copy>>2]=HEAP32[$item$i15$i>>2]|0;
                $123 = (_tre_stack_push($0,$item$i15$i$byval_copy)|0);
                $124 = ($123|0)==(0);
                if (!($124)) {
                 $pos_add_total$038$i$lcssa = $pos_add_total$038$i75;$status$0$lcssa$i = $123;
                 break L29;
                }
                HEAP32[$item$i16$i>>2] = 0;
                ;HEAP32[$item$i16$i$byval_copy>>2]=HEAP32[$item$i16$i>>2]|0;
                $125 = (_tre_stack_push($0,$item$i16$i$byval_copy)|0);
                $126 = ($125|0)==(0);
                if (!($126)) {
                 $pos_add_total$038$i$lcssa = $pos_add_total$038$i75;$status$0$lcssa$i = $125;
                 break L29;
                }
                $127 = ((($115)) + 4|0);
                $128 = HEAP32[$127>>2]|0;
                $129 = ($128|0)>(1);
                if ($129) {
                 label = 44;
                } else {
                 $130 = ((($115)) + 8|0);
                 $131 = HEAP32[$130>>2]|0;
                 $132 = ($131|0)>(1);
                 if ($132) {
                  label = 44;
                 } else {
                  $528 = $87;
                 }
                }
                if ((label|0) == 44) {
                 label = 0;
                 HEAP32[$pos_add$i>>2] = 0;
                 $528 = 0;
                }
                $133 = (($iter_depth$037$i76) + 1)|0;
                $$be = $528;$iter_depth$037$i$be = $133;$pos_add_total$038$i$be = $pos_add_total$038$i75;
                break L32;
                break;
               }
               default: {
                $$be = $87;$iter_depth$037$i$be = $iter_depth$037$i76;$pos_add_total$038$i$be = $pos_add_total$038$i75;
                break L32;
               }
               }
               $77 = ($status$0$be$i|0)==(0);
               if ($77) {
                $$be = $87;$iter_depth$037$i$be = $iter_depth$037$i76;$pos_add_total$038$i$be = $pos_add_total$038$i75;
               } else {
                $pos_add_total$038$i$lcssa = $pos_add_total$038$i75;$status$0$lcssa$i = $status$0$be$i;
                break L29;
               }
               break;
              }
              case 1:  {
               $134 = ((($74)) + 4|0);
               $135 = HEAP32[$134>>2]|0;
               $136 = (($68) + -3)|0;
               HEAP32[$7>>2] = $136;
               $137 = (($69) + ($136<<2)|0);
               $138 = HEAP32[$137>>2]|0;
               HEAP32[$pos_add$i>>2] = $138;
               $139 = ((($135)) + 4|0);
               $140 = HEAP32[$139>>2]|0;
               $141 = ($140|0)>(1);
               if ($141) {
                HEAP32[$seq2$i>>2] = 0;
                $149 = $135;
                label = 50;
               } else {
                $142 = ((($135)) + 8|0);
                $143 = HEAP32[$142>>2]|0;
                $144 = ($143|0)>(1);
                if ($144) {
                 HEAP32[$seq2$i>>2] = 0;
                 $145 = ($140|0)>(0);
                 if ($145) {
                  $149 = $135;
                  label = 50;
                 } else {
                  $$lcssa46 = $140;$170 = $135;$pos_add_save$0$i$lcssa = $138;$seq1$0$i$lcssa = 0;
                  label = 56;
                 }
                } else {
                 $209 = $138;
                }
               }
               L63: do {
                if ((label|0) == 50) {
                 label = 0;
                 $146 = ($140|0)>(1);
                 $147 = $146 ? 1 : 2;
                 $148 = HEAP32[$149>>2]|0;
                 $150 = (_tre_copy_ast($8,$0,$148,$147,$pos_add$i,$tag_directions$1,$copy$i,$max_pos$i)|0);
                 $151 = ($150|0)==(0);
                 if ($151) {
                  $156 = 1;$529 = $138;$seq1$0$i67200 = 0;
                 } else {
                  $$0$i2 = $150;
                  break L26;
                 }
                 while(1) {
                  $152 = ($seq1$0$i67200|0)==(0|0);
                  $153 = HEAP32[$copy$i>>2]|0;
                  if ($152) {
                   $seq1$1$i = $153;
                  } else {
                   $154 = (_tre_ast_new_catenation($8,$seq1$0$i67200,$153)|0);
                   $seq1$1$i = $154;
                  }
                  $155 = ($seq1$1$i|0)==(0|0);
                  if ($155) {
                   $$0$i2 = 12;
                   break L26;
                  }
                  $$pre$i = HEAP32[$139>>2]|0;
                  $157 = ($156|0)<($$pre$i|0);
                  if (!($157)) {
                   $$lcssa46 = $$pre$i;$170 = $149;$pos_add_save$0$i$lcssa = $529;$seq1$0$i$lcssa = $seq1$1$i;
                   label = 56;
                   break L63;
                  }
                  $$pre = HEAP32[$pos_add$i>>2]|0;
                  $158 = (($156) + 1)|0;
                  $159 = ($158|0)<($$pre$i|0);
                  $160 = $159 ? 1 : 2;
                  $161 = HEAP32[$149>>2]|0;
                  $162 = (_tre_copy_ast($8,$0,$161,$160,$pos_add$i,$tag_directions$1,$copy$i,$max_pos$i)|0);
                  $163 = ($162|0)==(0);
                  if ($163) {
                   $156 = $158;$529 = $$pre;$seq1$0$i67200 = $seq1$1$i;
                  } else {
                   $$0$i2 = $162;
                   break L26;
                  }
                 }
                }
               } while(0);
               if ((label|0) == 56) {
                label = 0;
                $164 = ((($135)) + 8|0);
                $165 = HEAP32[$164>>2]|0;
                $166 = ($165|0)==(-1);
                do {
                 if ($166) {
                  $168 = HEAP32[$pos_add$i>>2]|0;
                  $169 = HEAP32[$170>>2]|0;
                  $171 = (_tre_copy_ast($8,$0,$169,0,$pos_add$i,0,$seq2$i,$max_pos$i)|0);
                  $172 = ($171|0)==(0);
                  if (!($172)) {
                   $$0$i2 = $171;
                   break L26;
                  }
                  $173 = HEAP32[$seq2$i>>2]|0;
                  $174 = (_tre_ast_new_iter($8,$173,0,-1,0)|0);
                  HEAP32[$seq2$i>>2] = $174;
                  $175 = ($174|0)==(0|0);
                  if ($175) {
                   $$0$i2 = 12;
                   break L26;
                  } else {
                   $200 = $174;$pos_add_save$2$i = $168;
                  }
                 } else {
                  $167 = ($$lcssa46|0)<($165|0);
                  if ($167) {
                   $183 = 0;$j$135$i = $$lcssa46;
                  } else {
                   $200 = 0;$pos_add_save$2$i = $pos_add_save$0$i$lcssa;
                   break;
                  }
                  while(1) {
                   $179 = HEAP32[$pos_add$i>>2]|0;
                   $180 = HEAP32[$170>>2]|0;
                   $181 = (_tre_copy_ast($8,$0,$180,0,$pos_add$i,0,$copy3$i,$max_pos$i)|0);
                   $182 = ($181|0)==(0);
                   if (!($182)) {
                    $$0$i2 = $181;
                    break L26;
                   }
                   $184 = ($183|0)==(0|0);
                   if ($184) {
                    $187 = HEAP32[$copy3$i>>2]|0;
                    HEAP32[$seq2$i>>2] = $187;
                    $188 = $187;
                    $189 = $188;
                   } else {
                    $185 = HEAP32[$copy3$i>>2]|0;
                    $186 = (_tre_ast_new_catenation($8,$185,$183)|0);
                    HEAP32[$seq2$i>>2] = $186;
                    $189 = $186;
                   }
                   $190 = ($189|0)==(0|0);
                   if ($190) {
                    $$0$i2 = 12;
                    break L26;
                   }
                   $191 = (_tre_ast_new_node($8,0,20)|0);
                   $192 = ($191|0)==(0|0);
                   if ($192) {
                    $$0$i2 = 12;
                    break L26;
                   }
                   $193 = ((($191)) + 4|0);
                   $194 = HEAP32[$193>>2]|0;
                   HEAP32[$194>>2] = -1;
                   $195 = ((($194)) + 4|0);
                   HEAP32[$195>>2] = -1;
                   $196 = ((($194)) + 8|0);
                   HEAP32[$196>>2] = -1;
                   $197 = (_tre_ast_new_union($8,$191,$189)|0);
                   HEAP32[$seq2$i>>2] = $197;
                   $198 = ($197|0)==(0|0);
                   $177 = (($j$135$i) + 1)|0;
                   if ($198) {
                    $$0$i2 = 12;
                    break L26;
                   }
                   $176 = HEAP32[$164>>2]|0;
                   $178 = ($177|0)<($176|0);
                   if ($178) {
                    $183 = $197;$j$135$i = $177;
                   } else {
                    $200 = $197;$pos_add_save$2$i = $179;
                    break;
                   }
                  }
                 }
                } while(0);
                HEAP32[$pos_add$i>>2] = $pos_add_save$2$i;
                $199 = ($seq1$0$i$lcssa|0)==(0|0);
                do {
                 if ($199) {
                  $seq1$2$i = $200;
                  label = 71;
                 } else {
                  $201 = ($200|0)==(0|0);
                  if ($201) {
                   $seq1$217$i = $seq1$0$i$lcssa;
                   break;
                  }
                  $202 = (_tre_ast_new_catenation($8,$seq1$0$i$lcssa,$200)|0);
                  $seq1$2$i = $202;
                  label = 71;
                 }
                } while(0);
                if ((label|0) == 71) {
                 label = 0;
                 $203 = ($seq1$2$i|0)==(0|0);
                 if ($203) {
                  $$0$i2 = 12;
                  break L26;
                 } else {
                  $seq1$217$i = $seq1$2$i;
                 }
                }
                $204 = ((($seq1$217$i)) + 4|0);
                $205 = HEAP32[$204>>2]|0;
                HEAP32[$134>>2] = $205;
                $206 = HEAP32[$seq1$217$i>>2]|0;
                HEAP32[$74>>2] = $206;
                $209 = $pos_add_save$2$i;
               }
               $207 = (($iter_depth$037$i76) + -1)|0;
               $208 = (($209) - ($138))|0;
               $210 = (($208) + ($pos_add_total$038$i75))|0;
               $211 = ($207|0)==(0);
               if ($211) {
                HEAP32[$pos_add$i>>2] = $210;
                $$be = $210;$iter_depth$037$i$be = 0;$pos_add_total$038$i$be = $210;
               } else {
                $$be = $209;$iter_depth$037$i$be = $207;$pos_add_total$038$i$be = $210;
               }
               break;
              }
              default: {
               $$be = $87;$iter_depth$037$i$be = $iter_depth$037$i76;$pos_add_total$038$i$be = $pos_add_total$038$i75;
              }
              }
             } while(0);
             $75 = HEAP32[$7>>2]|0;
             $76 = ($75|0)>($60|0);
             if ($76) {
              $68 = $75;$87 = $$be;$iter_depth$037$i76 = $iter_depth$037$i$be;$pos_add_total$038$i75 = $pos_add_total$038$i$be;
             } else {
              $pos_add_total$038$i$lcssa = $pos_add_total$038$i$be;$status$0$lcssa$i = 0;
              break L29;
             }
            }
           } else {
            $pos_add_total$038$i$lcssa = 0;$status$0$lcssa$i = 0;
           }
          } while(0);
          $212 = HEAP32[$59>>2]|0;
          $213 = (($212) + ($pos_add_total$038$i$lcssa))|0;
          $214 = HEAP32[$max_pos$i>>2]|0;
          $215 = ($214|0)>($213|0);
          $$$i = $215 ? $214 : $213;
          HEAP32[$59>>2] = $$$i;
          $$0$i2 = $status$0$lcssa$i;
         } else {
          $$0$i2 = $63;
         }
        } else {
         $$0$i2 = $61;
        }
       } while(0);
       $216 = ($$0$i2|0)==(0);
       if ($216) {
        $217 = HEAP32[$59>>2]|0;
        $218 = (($217) + 1)|0;
        HEAP32[$59>>2] = $218;
        $219 = (_tre_ast_new_node($8,0,20)|0);
        $220 = ($219|0)==(0|0);
        if ($220) {
         $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $28;
        } else {
         $221 = ((($219)) + 4|0);
         $222 = HEAP32[$221>>2]|0;
         HEAP32[$222>>2] = 0;
         $223 = ((($222)) + 4|0);
         HEAP32[$223>>2] = 0;
         $224 = ((($222)) + 8|0);
         HEAP32[$224>>2] = $217;
         $225 = (_tre_ast_new_catenation($8,$21,$219)|0);
         $226 = ($225|0)==(0|0);
         if ($226) {
          $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $28;
         } else {
          $227 = HEAP32[$7>>2]|0;
          HEAP32[$item$i$i18>>2] = $225;
          ;HEAP32[$item$i$i18$byval_copy>>2]=HEAP32[$item$i$i18>>2]|0;
          $228 = (_tre_stack_push($0,$item$i$i18$byval_copy)|0);
          $229 = ($228|0)==(0);
          L103: do {
           if ($229) {
            HEAP32[$item$i1$i>>2] = 0;
            ;HEAP32[$item$i1$i$byval_copy>>2]=HEAP32[$item$i1$i>>2]|0;
            $230 = (_tre_stack_push($0,$item$i1$i$byval_copy)|0);
            $231 = ($230|0)==(0);
            if ($231) {
             $232 = HEAP32[$7>>2]|0;
             $233 = ($232|0)>($227|0);
             L106: do {
              if ($233) {
               $235 = $232;
               L108: while(1) {
                $234 = (($235) + -1)|0;
                HEAP32[$7>>2] = $234;
                $236 = HEAP32[$3>>2]|0;
                $237 = (($236) + ($234<<2)|0);
                $238 = HEAP32[$237>>2]|0;
                $239 = (($235) + -2)|0;
                HEAP32[$7>>2] = $239;
                $240 = (($236) + ($239<<2)|0);
                $241 = HEAP32[$240>>2]|0;
                L110: do {
                 switch ($238|0) {
                 case 0:  {
                  $244 = HEAP32[$241>>2]|0;
                  switch ($244|0) {
                  case 0:  {
                   $245 = ((($241)) + 4|0);
                   $246 = HEAP32[$245>>2]|0;
                   $247 = HEAP32[$246>>2]|0;
                   $248 = ($247|0)==(-4);
                   if ($248) {
                    $249 = ((($241)) + 8|0);
                    HEAP32[$249>>2] = 0;
                    $250 = ((($246)) + 8|0);
                    $251 = HEAP32[$250>>2]|0;
                    $252 = (_tre_set_one($8,$251,0,1114111,0,0,-1)|0);
                    $253 = ((($241)) + 24|0);
                    HEAP32[$253>>2] = $252;
                    $254 = ($252|0)==(0|0);
                    if ($254) {
                     $$0$i24$ph = 12;
                     break L103;
                    }
                    $255 = HEAP32[$250>>2]|0;
                    $256 = ((($246)) + 4|0);
                    $257 = HEAP32[$256>>2]|0;
                    $258 = (_tre_set_one($8,$255,0,1114111,0,0,$257)|0);
                    $259 = ((($241)) + 28|0);
                    HEAP32[$259>>2] = $258;
                    $260 = ($258|0)==(0|0);
                    if ($260) {
                     $$0$i24$ph = 12;
                     break L103;
                    } else {
                     break L110;
                    }
                   }
                   $261 = ($247|0)<(0);
                   $262 = ((($241)) + 8|0);
                   if ($261) {
                    HEAP32[$262>>2] = 1;
                    $263 = (_tre_set_empty($8)|0);
                    $264 = ((($241)) + 24|0);
                    HEAP32[$264>>2] = $263;
                    $265 = ($263|0)==(0|0);
                    if ($265) {
                     $$0$i24$ph = 12;
                     break L103;
                    }
                    $266 = (_tre_set_empty($8)|0);
                    $267 = ((($241)) + 28|0);
                    HEAP32[$267>>2] = $266;
                    $268 = ($266|0)==(0|0);
                    if ($268) {
                     $$0$i24$ph = 12;
                     break L103;
                    } else {
                     break L110;
                    }
                   } else {
                    HEAP32[$262>>2] = 0;
                    $269 = ((($246)) + 8|0);
                    $270 = HEAP32[$269>>2]|0;
                    $271 = ((($246)) + 4|0);
                    $272 = HEAP32[$271>>2]|0;
                    $273 = (_tre_set_one($8,$270,$247,$272,0,0,-1)|0);
                    $274 = ((($241)) + 24|0);
                    HEAP32[$274>>2] = $273;
                    $275 = ($273|0)==(0|0);
                    if ($275) {
                     $$0$i24$ph = 12;
                     break L103;
                    }
                    $276 = HEAP32[$269>>2]|0;
                    $277 = HEAP32[$246>>2]|0;
                    $278 = HEAP32[$271>>2]|0;
                    $279 = ((($246)) + 12|0);
                    $280 = HEAP32[$279>>2]|0;
                    $281 = ((($246)) + 16|0);
                    $282 = HEAP32[$281>>2]|0;
                    $283 = (_tre_set_one($8,$276,$277,$278,$280,$282,-1)|0);
                    $284 = ((($241)) + 28|0);
                    HEAP32[$284>>2] = $283;
                    $285 = ($283|0)==(0|0);
                    if ($285) {
                     $$0$i24$ph = 12;
                     break L103;
                    } else {
                     break L110;
                    }
                   }
                   break;
                  }
                  case 3:  {
                   HEAP32[$item$i2$i>>2] = $241;
                   ;HEAP32[$item$i2$i$byval_copy>>2]=HEAP32[$item$i2$i>>2]|0;
                   $286 = (_tre_stack_push($0,$item$i2$i$byval_copy)|0);
                   $287 = ($286|0)==(0);
                   if (!($287)) {
                    $$0$i24$ph = $286;
                    break L103;
                   }
                   HEAP32[$item$i3$i17>>2] = 1;
                   ;HEAP32[$item$i3$i17$byval_copy>>2]=HEAP32[$item$i3$i17>>2]|0;
                   $288 = (_tre_stack_push($0,$item$i3$i17$byval_copy)|0);
                   $289 = ($288|0)==(0);
                   if (!($289)) {
                    $$0$i24$ph = $288;
                    break L103;
                   }
                   $290 = ((($241)) + 4|0);
                   $291 = HEAP32[$290>>2]|0;
                   $292 = ((($291)) + 4|0);
                   $293 = HEAP32[$292>>2]|0;
                   HEAP32[$item$i4$i16>>2] = $293;
                   ;HEAP32[$item$i4$i16$byval_copy>>2]=HEAP32[$item$i4$i16>>2]|0;
                   $294 = (_tre_stack_push($0,$item$i4$i16$byval_copy)|0);
                   $295 = ($294|0)==(0);
                   if (!($295)) {
                    $$0$i24$ph = $294;
                    break L103;
                   }
                   HEAP32[$item$i5$i15>>2] = 0;
                   ;HEAP32[$item$i5$i15$byval_copy>>2]=HEAP32[$item$i5$i15>>2]|0;
                   $296 = (_tre_stack_push($0,$item$i5$i15$byval_copy)|0);
                   $297 = ($296|0)==(0);
                   if (!($297)) {
                    $$0$i24$ph = $296;
                    break L103;
                   }
                   $298 = HEAP32[$290>>2]|0;
                   $299 = HEAP32[$298>>2]|0;
                   HEAP32[$item$i6$i14>>2] = $299;
                   ;HEAP32[$item$i6$i14$byval_copy>>2]=HEAP32[$item$i6$i14>>2]|0;
                   $300 = (_tre_stack_push($0,$item$i6$i14$byval_copy)|0);
                   $301 = ($300|0)==(0);
                   if (!($301)) {
                    $$0$i24$ph = $300;
                    break L103;
                   }
                   HEAP32[$item$i7$i13>>2] = 0;
                   ;HEAP32[$item$i7$i13$byval_copy>>2]=HEAP32[$item$i7$i13>>2]|0;
                   $302 = (_tre_stack_push($0,$item$i7$i13$byval_copy)|0);
                   $303 = ($302|0)==(0);
                   if ($303) {
                    break L110;
                   } else {
                    $$0$i24$ph = $302;
                    break L103;
                   }
                   break;
                  }
                  case 1:  {
                   HEAP32[$item$i8$i12>>2] = $241;
                   ;HEAP32[$item$i8$i12$byval_copy>>2]=HEAP32[$item$i8$i12>>2]|0;
                   $304 = (_tre_stack_push($0,$item$i8$i12$byval_copy)|0);
                   $305 = ($304|0)==(0);
                   if (!($305)) {
                    $$0$i24$ph = $304;
                    break L103;
                   }
                   HEAP32[$item$i9$i11>>2] = 2;
                   ;HEAP32[$item$i9$i11$byval_copy>>2]=HEAP32[$item$i9$i11>>2]|0;
                   $306 = (_tre_stack_push($0,$item$i9$i11$byval_copy)|0);
                   $307 = ($306|0)==(0);
                   if (!($307)) {
                    $$0$i24$ph = $306;
                    break L103;
                   }
                   $308 = ((($241)) + 4|0);
                   $309 = HEAP32[$308>>2]|0;
                   $310 = ((($309)) + 4|0);
                   $311 = HEAP32[$310>>2]|0;
                   HEAP32[$item$i10$i10>>2] = $311;
                   ;HEAP32[$item$i10$i10$byval_copy>>2]=HEAP32[$item$i10$i10>>2]|0;
                   $312 = (_tre_stack_push($0,$item$i10$i10$byval_copy)|0);
                   $313 = ($312|0)==(0);
                   if (!($313)) {
                    $$0$i24$ph = $312;
                    break L103;
                   }
                   HEAP32[$item$i11$i9>>2] = 0;
                   ;HEAP32[$item$i11$i9$byval_copy>>2]=HEAP32[$item$i11$i9>>2]|0;
                   $314 = (_tre_stack_push($0,$item$i11$i9$byval_copy)|0);
                   $315 = ($314|0)==(0);
                   if (!($315)) {
                    $$0$i24$ph = $314;
                    break L103;
                   }
                   $316 = HEAP32[$308>>2]|0;
                   $317 = HEAP32[$316>>2]|0;
                   HEAP32[$item$i12$i8>>2] = $317;
                   ;HEAP32[$item$i12$i8$byval_copy>>2]=HEAP32[$item$i12$i8>>2]|0;
                   $318 = (_tre_stack_push($0,$item$i12$i8$byval_copy)|0);
                   $319 = ($318|0)==(0);
                   if (!($319)) {
                    $$0$i24$ph = $318;
                    break L103;
                   }
                   HEAP32[$item$i13$i7>>2] = 0;
                   ;HEAP32[$item$i13$i7$byval_copy>>2]=HEAP32[$item$i13$i7>>2]|0;
                   $320 = (_tre_stack_push($0,$item$i13$i7$byval_copy)|0);
                   $321 = ($320|0)==(0);
                   if ($321) {
                    break L110;
                   } else {
                    $$0$i24$ph = $320;
                    break L103;
                   }
                   break;
                  }
                  case 2:  {
                   HEAP32[$item$i14$i6>>2] = $241;
                   ;HEAP32[$item$i14$i6$byval_copy>>2]=HEAP32[$item$i14$i6>>2]|0;
                   $322 = (_tre_stack_push($0,$item$i14$i6$byval_copy)|0);
                   $323 = ($322|0)==(0);
                   if (!($323)) {
                    $$0$i24$ph = $322;
                    break L103;
                   }
                   HEAP32[$item$i15$i5>>2] = 3;
                   ;HEAP32[$item$i15$i5$byval_copy>>2]=HEAP32[$item$i15$i5>>2]|0;
                   $324 = (_tre_stack_push($0,$item$i15$i5$byval_copy)|0);
                   $325 = ($324|0)==(0);
                   if (!($325)) {
                    $$0$i24$ph = $324;
                    break L103;
                   }
                   $326 = ((($241)) + 4|0);
                   $327 = HEAP32[$326>>2]|0;
                   $328 = HEAP32[$327>>2]|0;
                   HEAP32[$item$i16$i4>>2] = $328;
                   ;HEAP32[$item$i16$i4$byval_copy>>2]=HEAP32[$item$i16$i4>>2]|0;
                   $329 = (_tre_stack_push($0,$item$i16$i4$byval_copy)|0);
                   $330 = ($329|0)==(0);
                   if (!($330)) {
                    $$0$i24$ph = $329;
                    break L103;
                   }
                   HEAP32[$item$i17$i>>2] = 0;
                   ;HEAP32[$item$i17$i$byval_copy>>2]=HEAP32[$item$i17$i>>2]|0;
                   $331 = (_tre_stack_push($0,$item$i17$i$byval_copy)|0);
                   $332 = ($331|0)==(0);
                   if ($332) {
                    break L110;
                   } else {
                    $$0$i24$ph = $331;
                    break L103;
                   }
                   break;
                  }
                  default: {
                   break L110;
                  }
                  }
                  break;
                 }
                 case 1:  {
                  $333 = ((($241)) + 4|0);
                  $334 = HEAP32[$333>>2]|0;
                  $335 = HEAP32[$334>>2]|0;
                  $336 = ((($335)) + 8|0);
                  $337 = HEAP32[$336>>2]|0;
                  $338 = ($337|0)==(0);
                  $339 = ((($334)) + 4|0);
                  $340 = HEAP32[$339>>2]|0;
                  if ($338) {
                   $341 = ((($340)) + 8|0);
                   $342 = HEAP32[$341>>2]|0;
                   $343 = ($342|0)!=(0);
                   $345 = $343;
                  } else {
                   $345 = 1;
                  }
                  $344 = $345&1;
                  $346 = ((($241)) + 8|0);
                  HEAP32[$346>>2] = $344;
                  $347 = ((($335)) + 24|0);
                  $348 = HEAP32[$347>>2]|0;
                  $349 = ((($340)) + 24|0);
                  $350 = HEAP32[$349>>2]|0;
                  $351 = (_tre_set_union($8,$348,$350,0,0)|0);
                  $352 = ((($241)) + 24|0);
                  HEAP32[$352>>2] = $351;
                  $353 = ($351|0)==(0|0);
                  if ($353) {
                   $$0$i24$ph = 12;
                   break L103;
                  }
                  $354 = HEAP32[$334>>2]|0;
                  $355 = ((($354)) + 28|0);
                  $356 = HEAP32[$355>>2]|0;
                  $357 = HEAP32[$339>>2]|0;
                  $358 = ((($357)) + 28|0);
                  $359 = HEAP32[$358>>2]|0;
                  $360 = (_tre_set_union($8,$356,$359,0,0)|0);
                  $361 = ((($241)) + 28|0);
                  HEAP32[$361>>2] = $360;
                  $362 = ($360|0)==(0|0);
                  if ($362) {
                   $$0$i24$ph = 12;
                   break L103;
                  }
                  break;
                 }
                 case 3:  {
                  $363 = ((($241)) + 4|0);
                  $364 = HEAP32[$363>>2]|0;
                  $365 = ((($364)) + 4|0);
                  $366 = HEAP32[$365>>2]|0;
                  $367 = ($366|0)==(0);
                  $$pre$pre$i = HEAP32[$364>>2]|0;
                  do {
                   if ($367) {
                    label = 116;
                   } else {
                    $368 = ((($$pre$pre$i)) + 8|0);
                    $369 = HEAP32[$368>>2]|0;
                    $370 = ($369|0)==(0);
                    if (!($370)) {
                     label = 116;
                     break;
                    }
                    $372 = ((($241)) + 8|0);
                    HEAP32[$372>>2] = 0;
                   }
                  } while(0);
                  if ((label|0) == 116) {
                   label = 0;
                   $371 = ((($241)) + 8|0);
                   HEAP32[$371>>2] = 1;
                  }
                  $373 = ((($$pre$pre$i)) + 24|0);
                  $374 = HEAP32[$373>>2]|0;
                  $375 = ((($241)) + 24|0);
                  HEAP32[$375>>2] = $374;
                  $376 = ((($$pre$pre$i)) + 28|0);
                  $377 = HEAP32[$376>>2]|0;
                  $378 = ((($241)) + 28|0);
                  HEAP32[$378>>2] = $377;
                  break;
                 }
                 case 2:  {
                  $379 = ((($241)) + 4|0);
                  $380 = HEAP32[$379>>2]|0;
                  $381 = HEAP32[$380>>2]|0;
                  $382 = ((($381)) + 8|0);
                  $383 = HEAP32[$382>>2]|0;
                  $384 = ($383|0)==(0);
                  if ($384) {
                   $391 = 0;
                  } else {
                   $385 = ((($380)) + 4|0);
                   $386 = HEAP32[$385>>2]|0;
                   $387 = ((($386)) + 8|0);
                   $388 = HEAP32[$387>>2]|0;
                   $389 = ($388|0)!=(0);
                   $391 = $389;
                  }
                  $390 = $391&1;
                  $392 = ((($241)) + 8|0);
                  HEAP32[$392>>2] = $390;
                  $393 = HEAP32[$382>>2]|0;
                  $394 = ($393|0)==(0);
                  if ($394) {
                   $417 = ((($381)) + 24|0);
                   $418 = HEAP32[$417>>2]|0;
                   $419 = ((($241)) + 24|0);
                   HEAP32[$419>>2] = $418;
                   $$pre$i23 = ((($380)) + 4|0);
                   $$pre$phi157$iZ2D = $$pre$i23;
                  } else {
                   $395 = (_tre_match_empty($0,$381,0,0,$num_tags$i)|0);
                   $396 = ($395|0)==(0);
                   if (!($396)) {
                    $$0$i24$ph = $395;
                    break L103;
                   }
                   $397 = HEAP32[$num_tags$i>>2]|0;
                   $398 = $397 << 2;
                   $399 = (($398) + 4)|0;
                   $400 = (_malloc($399)|0);
                   $401 = ($400|0)==(0|0);
                   if ($401) {
                    $$0$i24$ph = 12;
                    break L103;
                   }
                   HEAP32[$400>>2] = -1;
                   HEAP32[$assertions$i>>2] = 0;
                   $402 = HEAP32[$380>>2]|0;
                   $403 = (_tre_match_empty($0,$402,$400,$assertions$i,0)|0);
                   $404 = ($403|0)==(0);
                   if (!($404)) {
                    $$lcssa225 = $400;$$lcssa226 = $403;
                    label = 125;
                    break L108;
                   }
                   $405 = ((($380)) + 4|0);
                   $406 = HEAP32[$405>>2]|0;
                   $407 = ((($406)) + 24|0);
                   $408 = HEAP32[$407>>2]|0;
                   $409 = HEAP32[$380>>2]|0;
                   $410 = ((($409)) + 24|0);
                   $411 = HEAP32[$410>>2]|0;
                   $412 = HEAP32[$assertions$i>>2]|0;
                   $413 = (_tre_set_union($8,$408,$411,$400,$412)|0);
                   $414 = ((($241)) + 24|0);
                   HEAP32[$414>>2] = $413;
                   _free($400);
                   $415 = HEAP32[$414>>2]|0;
                   $416 = ($415|0)==(0|0);
                   if ($416) {
                    $$0$i24$ph = 12;
                    break L103;
                   } else {
                    $$pre$phi157$iZ2D = $405;
                   }
                  }
                  $420 = HEAP32[$$pre$phi157$iZ2D>>2]|0;
                  $421 = ((($420)) + 8|0);
                  $422 = HEAP32[$421>>2]|0;
                  $423 = ($422|0)==(0);
                  if ($423) {
                   $445 = ((($420)) + 28|0);
                   $446 = HEAP32[$445>>2]|0;
                   $447 = ((($241)) + 28|0);
                   HEAP32[$447>>2] = $446;
                   break L110;
                  }
                  $424 = (_tre_match_empty($0,$420,0,0,$num_tags$i)|0);
                  $425 = ($424|0)==(0);
                  if (!($425)) {
                   $$0$i24$ph = $424;
                   break L103;
                  }
                  $426 = HEAP32[$num_tags$i>>2]|0;
                  $427 = $426 << 2;
                  $428 = (($427) + 4)|0;
                  $429 = (_malloc($428)|0);
                  $430 = ($429|0)==(0|0);
                  if ($430) {
                   $$0$i24$ph = 12;
                   break L103;
                  }
                  HEAP32[$429>>2] = -1;
                  HEAP32[$assertions$i>>2] = 0;
                  $431 = HEAP32[$$pre$phi157$iZ2D>>2]|0;
                  $432 = (_tre_match_empty($0,$431,$429,$assertions$i,0)|0);
                  $433 = ($432|0)==(0);
                  if (!($433)) {
                   $$lcssa227 = $429;$$lcssa228 = $432;
                   label = 132;
                   break L108;
                  }
                  $434 = HEAP32[$380>>2]|0;
                  $435 = ((($434)) + 28|0);
                  $436 = HEAP32[$435>>2]|0;
                  $437 = HEAP32[$$pre$phi157$iZ2D>>2]|0;
                  $438 = ((($437)) + 28|0);
                  $439 = HEAP32[$438>>2]|0;
                  $440 = HEAP32[$assertions$i>>2]|0;
                  $441 = (_tre_set_union($8,$436,$439,$429,$440)|0);
                  $442 = ((($241)) + 28|0);
                  HEAP32[$442>>2] = $441;
                  _free($429);
                  $443 = HEAP32[$442>>2]|0;
                  $444 = ($443|0)==(0|0);
                  if ($444) {
                   $$0$i24$ph = 12;
                   break L103;
                  }
                  break;
                 }
                 default: {
                 }
                 }
                } while(0);
                $242 = HEAP32[$7>>2]|0;
                $243 = ($242|0)>($227|0);
                if ($243) {
                 $235 = $242;
                } else {
                 break L106;
                }
               }
               if ((label|0) == 125) {
                _free($$lcssa225);
                $$0$i24$ph = $$lcssa226;
                break L103;
               }
               else if ((label|0) == 132) {
                _free($$lcssa227);
                $$0$i24$ph = $$lcssa228;
                break L103;
               }
              }
             } while(0);
             $448 = HEAP32[$59>>2]|0;
             $449 = $448 << 2;
             $450 = (_malloc($449)|0);
             $451 = ($450|0)==(0|0);
             if ($451) {
              $counts$0 = $450;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $28;
              break L9;
             }
             $452 = (_malloc($449)|0);
             $453 = ($452|0)==(0|0);
             if ($453) {
              $counts$0 = $450;$errcode$0 = 12;$offs$0 = $452;$tnfa$0 = $28;
              break L9;
             }
             $454 = ($448|0)>(0);
             if ($454) {
              $455 = ($448|0)>(1);
              $$op = $448 << 2;
              $456 = $455 ? $$op : 4;
              _memset(($450|0),0,($456|0))|0;
             }
             (_tre_ast_to_tnfa($225,0,$450,0)|0);
             $457 = HEAP32[$59>>2]|0;
             $458 = ($457|0)>(0);
             if ($458) {
              $add$059 = 0;$i$158 = 0;
              while(1) {
               $459 = (($452) + ($i$158<<2)|0);
               HEAP32[$459>>2] = $add$059;
               $460 = (($450) + ($i$158<<2)|0);
               $461 = HEAP32[$460>>2]|0;
               $462 = (($add$059) + 1)|0;
               $463 = (($462) + ($461))|0;
               HEAP32[$460>>2] = 0;
               $464 = (($i$158) + 1)|0;
               $465 = ($464|0)<($457|0);
               if ($465) {
                $add$059 = $463;$i$158 = $464;
               } else {
                $add$0$lcssa = $463;
                break;
               }
              }
             } else {
              $add$0$lcssa = 0;
             }
             $466 = (($add$0$lcssa) + 1)|0;
             $467 = (_calloc($466,32)|0);
             $468 = ($467|0)==(0|0);
             if ($468) {
              $counts$0 = $450;$errcode$0 = 12;$offs$0 = $452;$tnfa$0 = $28;
              break L9;
             }
             HEAP32[$28>>2] = $467;
             $469 = ((($28)) + 4|0);
             HEAP32[$469>>2] = $add$0$lcssa;
             $470 = (_tre_ast_to_tnfa($225,$467,$450,$452)|0);
             $471 = ($470|0)==(0);
             if (!($471)) {
              $counts$0 = $450;$errcode$0 = $470;$offs$0 = $452;$tnfa$0 = $28;
              break L9;
             }
             $472 = ((($28)) + 20|0);
             HEAP32[$472>>2] = 0;
             $473 = ((($225)) + 24|0);
             $474 = HEAP32[$473>>2]|0;
             $i$2 = 0;$p$0 = $474;
             while(1) {
              $475 = HEAP32[$p$0>>2]|0;
              $476 = ($475|0)>(-1);
              $477 = (($i$2) + 1)|0;
              $478 = ((($p$0)) + 32|0);
              if ($476) {
               $i$2 = $477;$p$0 = $478;
              } else {
               $$lcssa223 = $477;
               break;
              }
             }
             $479 = (_calloc($$lcssa223,32)|0);
             $480 = ($479|0)==(0|0);
             if ($480) {
              $counts$0 = $450;$errcode$0 = 12;$offs$0 = $452;$tnfa$0 = $28;
              break L9;
             }
             $481 = ((($28)) + 8|0);
             HEAP32[$481>>2] = $479;
             $482 = HEAP32[$473>>2]|0;
             $483 = HEAP32[$482>>2]|0;
             $484 = ($483|0)>(-1);
             if ($484) {
              $486 = $483;$493 = $482;$i$356 = 0;
              while(1) {
               $485 = (($452) + ($486<<2)|0);
               $487 = HEAP32[$485>>2]|0;
               $488 = (($467) + ($487<<5)|0);
               $489 = (((($479) + ($i$356<<5)|0)) + 8|0);
               HEAP32[$489>>2] = $488;
               $490 = (((($479) + ($i$356<<5)|0)) + 12|0);
               HEAP32[$490>>2] = $486;
               $491 = (((($479) + ($i$356<<5)|0)) + 16|0);
               HEAP32[$491>>2] = 0;
               $492 = ((($493)) + 12|0);
               $494 = HEAP32[$492>>2]|0;
               $495 = ($494|0)==(0|0);
               if (!($495)) {
                $j$0 = 0;
                while(1) {
                 $496 = (($494) + ($j$0<<2)|0);
                 $497 = HEAP32[$496>>2]|0;
                 $498 = ($497|0)>(-1);
                 $499 = (($j$0) + 1)|0;
                 if ($498) {
                  $j$0 = $499;
                 } else {
                  $$lcssa = $499;
                  break;
                 }
                }
                $500 = $$lcssa << 2;
                $501 = (_malloc($500)|0);
                HEAP32[$491>>2] = $501;
                $502 = ($501|0)==(0|0);
                if ($502) {
                 $counts$0 = $450;$errcode$0 = 12;$offs$0 = $452;$tnfa$0 = $28;
                 break L9;
                }
                $503 = HEAP32[$492>>2]|0;
                _memcpy(($501|0),($503|0),($500|0))|0;
               }
               $504 = ((($493)) + 16|0);
               $505 = HEAP32[$504>>2]|0;
               $506 = (((($479) + ($i$356<<5)|0)) + 20|0);
               HEAP32[$506>>2] = $505;
               $507 = (($i$356) + 1)|0;
               $508 = ((($493)) + 32|0);
               $509 = HEAP32[$508>>2]|0;
               $510 = ($509|0)>(-1);
               if ($510) {
                $486 = $509;$493 = $508;$i$356 = $507;
               } else {
                $i$3$lcssa = $507;
                break;
               }
              }
             } else {
              $i$3$lcssa = 0;
             }
             $511 = (((($479) + ($i$3$lcssa<<5)|0)) + 8|0);
             HEAP32[$511>>2] = 0;
             HEAP32[$469>>2] = $add$0$lcssa;
             $512 = ((($225)) + 28|0);
             $513 = HEAP32[$512>>2]|0;
             $514 = HEAP32[$513>>2]|0;
             $515 = (($452) + ($514<<2)|0);
             $516 = HEAP32[$515>>2]|0;
             $517 = (($467) + ($516<<5)|0);
             $518 = ((($28)) + 12|0);
             HEAP32[$518>>2] = $517;
             $519 = HEAP32[$59>>2]|0;
             $520 = ((($28)) + 52|0);
             HEAP32[$520>>2] = $519;
             $521 = ((($28)) + 56|0);
             HEAP32[$521>>2] = $cflags;
             ___tre_mem_destroy($8);
             $522 = HEAP32[$3>>2]|0;
             _free($522);
             _free($0);
             _free($450);
             _free($452);
             $523 = ((($preg)) + 4|0);
             HEAP32[$523>>2] = $28;
             $$0 = 0;
             break L1;
            } else {
             $$0$i24$ph = $230;
            }
           } else {
            $$0$i24$ph = $228;
           }
          } while(0);
          $counts$0 = 0;$errcode$0 = $$0$i24$ph;$offs$0 = 0;$tnfa$0 = $28;
         }
        }
       } else {
        $counts$0 = 0;$errcode$0 = $$0$i2;$offs$0 = 0;$tnfa$0 = $28;
       }
      }
     }
    } else {
     $counts$0 = 0;$errcode$0 = $15;$offs$0 = 0;$tnfa$0 = 0;
    }
   } while(0);
   ___tre_mem_destroy($8);
   $524 = HEAP32[$3>>2]|0;
   _free($524);
   _free($0);
   $525 = ($counts$0|0)==(0|0);
   if (!($525)) {
    _free($counts$0);
   }
   $526 = ($offs$0|0)==(0|0);
   if (!($526)) {
    _free($offs$0);
   }
   $527 = ((($preg)) + 4|0);
   HEAP32[$527>>2] = $tnfa$0;
   _regfree($preg);
   $$0 = $errcode$0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _regfree($preg) {
 $preg = $preg|0;
 var $$lcssa = 0, $$pre = 0, $$pre12 = 0, $$pre13 = 0, $$pre15 = 0, $$pre16 = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $i$07 = 0, $i$13 = 0, $trans$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($preg)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($1)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  $6 = HEAP32[$1>>2]|0;
  if ($5) {
   $$lcssa = $6;
  } else {
   $8 = $6;$i$07 = 0;
   while(1) {
    $7 = (((($8) + ($i$07<<5)|0)) + 8|0);
    $9 = HEAP32[$7>>2]|0;
    $10 = ($9|0)==(0|0);
    if ($10) {
     $59 = $8;
    } else {
     $11 = (((($8) + ($i$07<<5)|0)) + 16|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ($12|0)==(0|0);
     if ($13) {
      $15 = $8;
     } else {
      _free($12);
      $$pre = HEAP32[$1>>2]|0;
      $15 = $$pre;
     }
     $14 = (((($15) + ($i$07<<5)|0)) + 28|0);
     $16 = HEAP32[$14>>2]|0;
     $17 = ($16|0)==(0|0);
     if ($17) {
      $59 = $15;
     } else {
      _free($16);
      $$pre12 = HEAP32[$1>>2]|0;
      $59 = $$pre12;
     }
    }
    $18 = (($i$07) + 1)|0;
    $19 = HEAP32[$3>>2]|0;
    $20 = ($18>>>0)<($19>>>0);
    if ($20) {
     $8 = $59;$i$07 = $18;
    } else {
     $$lcssa = $59;
     break;
    }
   }
  }
  $21 = ($$lcssa|0)==(0|0);
  if (!($21)) {
   _free($$lcssa);
  }
  $22 = ((($1)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   $25 = ((($23)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0|0);
   if ($27) {
    $35 = $23;
   } else {
    $trans$04 = $23;
    while(1) {
     $28 = ((($trans$04)) + 16|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)==(0|0);
     if (!($30)) {
      _free($29);
     }
     $31 = ((($trans$04)) + 32|0);
     $32 = ((($trans$04)) + 40|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)==(0|0);
     if ($34) {
      break;
     } else {
      $trans$04 = $31;
     }
    }
    $$pre13 = HEAP32[$22>>2]|0;
    $35 = $$pre13;
   }
   _free($35);
  }
  $36 = ((($1)) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(0|0);
  if (!($38)) {
   $39 = ((($1)) + 28|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)==(0);
   if ($41) {
    $49 = $37;
   } else {
    $43 = $37;$60 = $40;$i$13 = 0;
    while(1) {
     $42 = (((($43) + (($i$13*12)|0)|0)) + 8|0);
     $44 = HEAP32[$42>>2]|0;
     $45 = ($44|0)==(0|0);
     if ($45) {
      $48 = $60;
     } else {
      _free($44);
      $$pre16 = HEAP32[$39>>2]|0;
      $48 = $$pre16;
     }
     $46 = (($i$13) + 1)|0;
     $47 = ($46>>>0)<($48>>>0);
     if (!($47)) {
      break;
     }
     $$pre15 = HEAP32[$36>>2]|0;
     $43 = $$pre15;$60 = $48;$i$13 = $46;
    }
    $$pre18 = HEAP32[$36>>2]|0;
    $49 = $$pre18;
   }
   _free($49);
  }
  $50 = ((($1)) + 32|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==(0|0);
  if (!($52)) {
   _free($51);
  }
  $53 = ((($1)) + 20|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)==(0|0);
  if (!($55)) {
   _free($54);
  }
  $56 = ((($1)) + 36|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)==(0|0);
  if (!($58)) {
   _free($57);
  }
  _free($1);
 }
 return;
}
function _regerror($e,$preg,$buf,$size) {
 $e = $e|0;
 $preg = $preg|0;
 $buf = $buf|0;
 $size = $size|0;
 var $$01 = 0, $$s$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s$0$lcssa = 0, $s$02 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($e|0)==(0);
 L1: do {
  if ($0) {
   $s$0$lcssa = 175868;
  } else {
   $$01 = $e;$s$02 = 175868;
   while(1) {
    $1 = HEAP8[$s$02>>0]|0;
    $2 = ($1<<24>>24)==(0);
    if ($2) {
     $s$0$lcssa = $s$02;
     break L1;
    }
    $3 = (($$01) + -1)|0;
    $4 = (_strlen($s$02)|0);
    $5 = (($4) + 1)|0;
    $6 = (($s$02) + ($5)|0);
    $7 = ($3|0)==(0);
    if ($7) {
     $s$0$lcssa = $6;
     break;
    } else {
     $$01 = $3;$s$02 = $6;
    }
   }
  }
 } while(0);
 $8 = HEAP8[$s$0$lcssa>>0]|0;
 $9 = ($8<<24>>24)==(0);
 $10 = ((($s$0$lcssa)) + 1|0);
 $$s$0 = $9 ? $10 : $s$0$lcssa;
 HEAP32[$vararg_buffer>>2] = $$s$0;
 $11 = (_snprintf($buf,$size,176154,$vararg_buffer)|0);
 $12 = (($11) + 1)|0;
 STACKTOP = sp;return ($12|0);
}
function _regexec($preg,$string,$nmatch,$pmatch,$eflags) {
 $preg = $preg|0;
 $string = $string|0;
 $nmatch = $nmatch|0;
 $pmatch = $pmatch|0;
 $eflags = $eflags|0;
 var $$$i = 0, $$$i4 = 0, $$0 = 0, $$0$i = 0, $$0$i51 = 0, $$57$i = 0, $$lcssa = 0, $$lcssa149 = 0, $$lcssa154 = 0, $$not$i = 0, $$not209$i = 0, $$old$i = 0, $$old$i18 = 0, $$old34$i = 0, $$old34$i36 = 0, $$old35$i = 0, $$old35$i37 = 0, $$old46$i = 0, $$old47$i = 0, $$old8$i = 0;
 var $$old8$i19 = 0, $$op$i = 0, $$pn$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i20 = 0, $$pre$phi193$iZ2D = 0, $$pre$phiZ2D = 0, $$pre177$i = 0, $$pre179$i = 0, $$pre180$i = 0, $$pre181$i = 0, $$pre182$i = 0, $$pre183$i = 0, $$pre185$i = 0, $$pre185$i29 = 0, $$pre186$i = 0, $$pre187$i = 0, $$pre187$i38 = 0, $$pre188$i = 0;
 var $$pre189$i = 0, $$pre189$i43 = 0, $$pre191$i = 0, $$sum$i = 0, $$sum$i5 = 0, $$sum$pn$i = 0, $$sum49$i = 0, $$sum50$i = 0, $$sum51$i = 0, $$sum52$i = 0, $$sum53$i = 0, $$sum54$i = 0, $$sum56$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0;
 var $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0;
 var $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0;
 var $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0;
 var $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0;
 var $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0;
 var $843 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge$i = 0, $brmerge$i15 = 0, $brmerge199$i = 0;
 var $brmerge202$i = 0, $brmerge203$i = 0, $brmerge206$i = 0, $brmerge210$i = 0, $brmerge211$i = 0, $brmerge212$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond175$i = 0, $exitcond177$i = 0, $exitcond179$i = 0, $exitcond88 = 0, $exitcond89 = 0, $i$0103$i = 0, $i$0160$i = 0, $i$1157$i = 0, $i$399$i = 0, $i$4111$i = 0, $i$5119$i = 0, $i$6126$i = 0;
 var $i$7124$i = 0, $i1$0108$i = 0, $i2$0170$i = 0, $i3$0132$i = 0, $i6$0128$i = 0, $match_eo$0$i = 0, $match_eo$0$i7 = 0, $match_eo$1$ph$i = 0, $match_eo$1$ph$lcssa$i = 0, $match_eo$1$ph103$i = 0, $match_eo$1$ph103$mux$i = 0, $match_eo$10$i = 0, $match_eo$10$lobit$i = 0, $match_eo$2$i = 0, $match_eo$2$i$lcssa = 0, $match_eo$2$i26 = 0, $match_eo$2$lobit$i = 0, $match_eo$3$i = 0, $match_eo$4$i = 0, $match_eo$5$lcssa$i = 0;
 var $match_eo$5149$i = 0, $match_eo$6$lcssa$i = 0, $match_eo$6129$i = 0, $match_eo$7$i = 0, $match_eo$9$i = 0, $new_match$0$i = 0, $new_match$1$ph$lcssa$i = 0, $new_match$1$ph105$i = 0, $new_match$1$ph105$mux$i = 0, $new_match$10$i = 0, $new_match$2$i = 0, $new_match$3$i = 0, $new_match$4$i = 0, $new_match$5$i = 0, $new_match$6$lcssa$i = 0, $new_match$6150$i = 0, $new_match$7$lcssa$i = 0, $new_match$7132$i = 0, $new_match$8$i = 0, $next_c$i = 0;
 var $next_c$i3 = 0, $next_state$0147$i = 0, $next_state$1$i = 0, $next_state$1$i$lcssa = 0, $next_tags$0115$i = 0, $next_tags$1$i = 0, $next_tags$1$i$lcssa = 0, $next_tags$2125$i = 0, $next_tags$3$i = 0, $next_tags$4$be$i = 0, $next_tags$4$lcssa$i = 0, $next_tags$4$ph$i = 0, $next_tags$4158$i = 0, $next_tags$5140$i = 0, $next_tags$6$i = 0, $next_tags$6$i$lcssa = 0, $next_tags$7154$i = 0, $next_tags$8$i = 0, $nmatch$ = 0, $num_tags$0$i = 0;
 var $or$cond = 0, $or$cond$i = 0, $or$cond$i11 = 0, $or$cond$not$i = 0, $or$cond$not$i14 = 0, $or$cond12$i = 0, $or$cond12$i21 = 0, $or$cond15$i = 0, $or$cond15$i22 = 0, $or$cond18$i = 0, $or$cond18$i24 = 0, $or$cond201$i = 0, $or$cond205$i = 0, $or$cond208$i = 0, $or$cond21$i = 0, $or$cond21$i28 = 0, $or$cond214$i = 0, $or$cond24$i = 0, $or$cond24$i31 = 0, $or$cond24$not$i = 0;
 var $or$cond24$not$i33 = 0, $or$cond27$i = 0, $or$cond27$i32 = 0, $or$cond3$i = 0, $or$cond3$i12 = 0, $or$cond33$i = 0, $or$cond33$i34 = 0, $or$cond36$i = 0, $or$cond36$i35 = 0, $or$cond39$i = 0, $or$cond39$i39 = 0, $or$cond42$i = 0, $or$cond42$i40 = 0, $or$cond45$i = 0, $or$cond45$i42 = 0, $or$cond48$i = 0, $or$cond48$i27 = 0, $or$cond7$i = 0, $or$cond7$i16 = 0, $or$cond9$i = 0;
 var $or$cond9$i17 = 0, $pmatch$0$i = 0, $pmatch$1$i = 0, $pos$0$i = 0, $pos$0$lcssa$i = 0, $pos$0$ph$i = 0, $pos$0162$i = 0, $pos$1$i = 0, $pos_add_next$0$i = 0, $pos_add_next$0$i6 = 0, $pos_add_next$1$i = 0, $pos_add_next$1$i8 = 0, $pos_add_next$2$i = 0, $pos_add_next$2$lcssa$i = 0, $pos_add_next$2$ph$i = 0, $pos_add_next$2160$i = 0, $pos_add_next$3$i = 0, $pos_add_next$5$i = 0, $pos_add_next$6$i = 0, $pos_start$0$i = 0;
 var $prev_c$0$i = 0, $prev_c$0$i10 = 0, $reach$0$i = 0, $reach$1$i = 0, $reach_i$0113$i = 0, $reach_i$1147$i = 0, $reach_next$0$i = 0, $reach_next$1$i = 0, $reach_next_i$0$i = 0, $reach_next_i$1$ph$lcssa$i = 0, $reach_next_i$1$ph101$i = 0, $reach_next_i$2$i = 0, $reach_next_i$3$lcssa$i = 0, $reach_next_i$3115$i = 0, $reach_next_i$4$i = 0, $reach_next_i$5$lcssa$i = 0, $reach_next_i$5148$i = 0, $reach_next_i$6$lcssa$i = 0, $reach_next_i$6128$i = 0, $reach_next_i$7$i = 0;
 var $ret$0$i = 0, $ret$0$i50 = 0, $stack$0$i = 0, $stack$1116$i = 0, $stack$2$i = 0, $stack$3$i = 0, $stack$3$i$lcssa = 0, $stack$4$lcssa$i = 0, $stack$4$ph$i = 0, $stack$4159$i = 0, $stack$5141$i = 0, $stack$6$i = 0, $stack$7$i = 0, $stack$7$i$lcssa = 0, $stack$8$i = 0, $state$0114$i = 0, $state$1$i = 0, $state$1$i$lcssa = 0, $state$2$ph$i = 0, $state$2157$i = 0;
 var $states_seen$0$ph$i = 0, $states_seen$1$i = 0, $status$0 = 0, $str_byte$0$i = 0, $str_byte$0$i9 = 0, $str_byte$1$ph$i = 0, $str_byte$1163$i = 0, $str_byte$2$i = 0, $tag_i$097$i = 0, $tag_i$1122$i = 0, $tags$0 = 0, $tags$0$i = 0, $tags$1$i = 0, $tmp$0112$i = 0, $tmp$i = 0, $tmp$i41 = 0, $tmp49$i = 0, $tmp5$0136$i71 = 0, $tmp55$i = 0, $tmp_buf$0161$i = 0;
 var $tmp_tags$0$i = 0, $tmp_tags$1$lcssa$i = 0, $tmp_tags$1151$i = 0, $tmp_tags$2$lcssa$i = 0, $tmp_tags$3$i = 0, $trans_i$0$ph107$i = 0, $trans_i$0118$i = 0, $trans_i$085$i = 0, $trans_i$085$i$lcssa151 = 0, $trans_i$085$i153 = 0, $trans_i$1138$i = 0, $trans_i$1144$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $next_c$i3 = sp + 4|0;
 $next_c$i = sp;
 $0 = ((($preg)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 8;
 $5 = ($4|0)==(0);
 $nmatch$ = $5 ? $nmatch : 0;
 $6 = ((($1)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(0);
 $9 = ($nmatch$|0)!=(0);
 $or$cond = $8 & $9;
 if ($or$cond) {
  $10 = $7 << 2;
  $11 = (_malloc($10)|0);
  $12 = ($11|0)==(0|0);
  if ($12) {
   $$0 = 12;
  } else {
   $tags$0 = $11;
   label = 3;
  }
 } else {
  $tags$0 = 0;
  label = 3;
 }
 if ((label|0) == 3) {
  $13 = ((($1)) + 60|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0);
  if ($15) {
   HEAP32[$next_c$i3>>2] = 0;
   $451 = $eflags & 1;
   $452 = $eflags & 2;
   $453 = HEAP32[$2>>2]|0;
   $454 = $453 & 4;
   $455 = ($tags$0|0)==(0|0);
   if ($455) {
    $num_tags$0$i = 0;
   } else {
    $456 = HEAP32[$6>>2]|0;
    $num_tags$0$i = $456;
   }
   $457 = $num_tags$0$i << 2;
   $458 = ((($1)) + 52|0);
   $459 = HEAP32[$458>>2]|0;
   $460 = $459 << 3;
   $461 = (($460) + 8)|0;
   $462 = Math_imul($457, $459)|0;
   $463 = (($461) + ($462))|0;
   $464 = $463 << 1;
   $465 = (($457) + 12)|0;
   $466 = (($465) + ($460))|0;
   $467 = (($466) + ($464))|0;
   $468 = (_malloc($467)|0);
   $469 = ($468|0)==(0|0);
   if ($469) {
    $$0$i51 = 12;$840 = 0;
   } else {
    _memset(($468|0),0,($467|0))|0;
    $470 = (($468) + ($457)|0);
    $471 = $470;
    $472 = $471 & 3;
    $473 = ($472|0)==(0);
    $474 = (4 - ($472))|0;
    $$$i4 = $473 ? 0 : $474;
    $$sum$i5 = (($$$i4) + ($457))|0;
    $475 = (($468) + ($$sum$i5)|0);
    $$sum49$i = (($$sum$i5) + ($461))|0;
    $476 = (($468) + ($$sum49$i)|0);
    $477 = $476;
    $478 = $477 & 3;
    $479 = ($478|0)==(0);
    $480 = (4 - ($478))|0;
    $481 = $479 ? 0 : $480;
    $$sum50$i = (($481) + ($$sum49$i))|0;
    $482 = (($468) + ($$sum50$i)|0);
    $$sum51$i = (($$sum50$i) + ($461))|0;
    $483 = (($468) + ($$sum51$i)|0);
    $484 = $483;
    $485 = $484 & 3;
    $486 = ($485|0)==(0);
    $487 = (4 - ($485))|0;
    $$57$i = $486 ? 0 : $487;
    $$sum52$i = (($$57$i) + ($$sum51$i))|0;
    $488 = (($468) + ($$sum52$i)|0);
    $$sum53$i = (($$sum52$i) + ($460))|0;
    $489 = (($468) + ($$sum53$i)|0);
    $490 = $489;
    $491 = $490 & 3;
    $492 = ($459|0)>(0);
    if ($492) {
     $493 = ($491|0)==(0);
     $494 = (4 - ($491))|0;
     $495 = $493 ? 0 : $494;
     $$sum54$i = (($495) + ($$sum53$i))|0;
     $496 = (($468) + ($$sum54$i)|0);
     $$sum56$i = $num_tags$0$i << 3;
     $i$0160$i = 0;$tmp_buf$0161$i = $496;
     while(1) {
      $497 = (((($482) + ($i$0160$i<<3)|0)) + 4|0);
      HEAP32[$497>>2] = $tmp_buf$0161$i;
      $498 = (($tmp_buf$0161$i) + ($457)|0);
      $499 = (((($475) + ($i$0160$i<<3)|0)) + 4|0);
      HEAP32[$499>>2] = $498;
      $500 = (($tmp_buf$0161$i) + ($$sum56$i)|0);
      $501 = (($i$0160$i) + 1)|0;
      $exitcond88 = ($501|0)==($459|0);
      if ($exitcond88) {
       $i$1157$i = 0;
       break;
      } else {
       $i$0160$i = $501;$tmp_buf$0161$i = $500;
      }
     }
     while(1) {
      $502 = (($488) + ($i$1157$i<<3)|0);
      HEAP32[$502>>2] = -1;
      $503 = (($i$1157$i) + 1)|0;
      $exitcond = ($503|0)==($459|0);
      if ($exitcond) {
       break;
      } else {
       $i$1157$i = $503;
      }
     }
    }
    $504 = (_mbtowc($next_c$i3,$string,4)|0);
    $505 = ($504|0)<(1);
    if ($505) {
     $506 = ($504|0)<(0);
     if ($506) {
      $841 = 0;$ret$0$i50 = 1;
     } else {
      $pos_add_next$0$i6 = 1;
      label = 198;
     }
    } else {
     $pos_add_next$0$i6 = $504;
     label = 198;
    }
    L21: do {
     if ((label|0) == 198) {
      $507 = (($string) + ($pos_add_next$0$i6)|0);
      $508 = ((($1)) + 8|0);
      $509 = ($454|0)!=(0);
      $510 = ($451|0)!=(0);
      $511 = ($num_tags$0$i|0)>(0);
      $512 = ((($1)) + 12|0);
      $513 = ((($1)) + 44|0);
      $514 = ((($1)) + 32|0);
      $515 = ((($1)) + 36|0);
      $516 = ($num_tags$0$i|0)==(0);
      $$not209$i = $511 ^ 1;
      $match_eo$0$i7 = -1;$new_match$0$i = 0;$pos$0$i = 0;$pos_add_next$1$i8 = $pos_add_next$0$i6;$prev_c$0$i10 = 0;$reach$0$i = $482;$reach_next$0$i = $475;$reach_next_i$0$i = $475;$str_byte$0$i9 = $507;$tmp_tags$0$i = $468;
      while(1) {
       $517 = ($match_eo$0$i7|0)<(0);
       if ($517) {
        $518 = HEAP32[$508>>2]|0;
        $519 = ((($518)) + 8|0);
        $520 = HEAP32[$519>>2]|0;
        $521 = ($520|0)==(0|0);
        L27: do {
         if ($521) {
          $match_eo$1$ph$lcssa$i = $match_eo$0$i7;$new_match$1$ph$lcssa$i = $new_match$0$i;$reach_next_i$1$ph$lcssa$i = $reach_next_i$0$i;
         } else {
          $522 = ($pos$0$i|0)!=(0);
          $523 = ($prev_c$0$i10|0)==(95);
          $524 = ($pos$0$i|0)==(0);
          $525 = ($pos$0$i|0)>(0);
          $or$cond$i11 = $510 | $525;
          $526 = ($prev_c$0$i10|0)==(10);
          $or$cond3$i12 = $509 & $526;
          $or$cond$not$i14 = $or$cond$i11 ^ 1;
          $842 = $519;$match_eo$1$ph103$i = $match_eo$0$i7;$new_match$1$ph105$i = $new_match$0$i;$reach_next_i$1$ph101$i = $reach_next_i$0$i;$trans_i$0$ph107$i = $518;
          while(1) {
           $843 = $842;$trans_i$085$i = $trans_i$0$ph107$i;
           L31: while(1) {
            $527 = ((($trans_i$085$i)) + 12|0);
            $528 = HEAP32[$527>>2]|0;
            $529 = (($488) + ($528<<3)|0);
            $530 = HEAP32[$529>>2]|0;
            $531 = ($530|0)<($pos$0$i|0);
            if (!($531)) {
             $match_eo$3$i = $match_eo$1$ph103$i;$new_match$3$i = $new_match$1$ph105$i;$reach_next_i$2$i = $reach_next_i$1$ph101$i;$trans_i$085$i153 = $trans_i$085$i;
             break;
            }
            $532 = ((($trans_i$085$i)) + 20|0);
            $533 = HEAP32[$532>>2]|0;
            $534 = ($533|0)==(0);
            if ($534) {
             $$lcssa149 = $843;$$lcssa154 = $527;$trans_i$085$i$lcssa151 = $trans_i$085$i;
             label = 233;
             break;
            }
            $535 = $533 & 1;
            $536 = ($535|0)==(0);
            $brmerge$i15 = $536 | $or$cond$not$i14;
            $brmerge206$i = $or$cond3$i12 | $brmerge$i15;
            L35: do {
             if ($brmerge206$i) {
              $537 = $533 & 2;
              $538 = ($537|0)==(0);
              if (!($538)) {
               $539 = HEAP32[$next_c$i3>>2]|0;
               $540 = $539 | $452;
               $541 = ($540|0)==(0);
               $542 = ($539|0)==(10);
               $or$cond7$i16 = $509 & $542;
               $or$cond208$i = $541 | $or$cond7$i16;
               if (!($or$cond208$i)) {
                break;
               }
              }
              $543 = $533 & 16;
              $544 = ($543|0)==(0);
              do {
               if (!($544)) {
                if ($523) {
                 break L35;
                }
                $545 = (_iswalnum($prev_c$0$i10)|0);
                $546 = ($545|0)==(0);
                if (!($546)) {
                 break L35;
                }
                $547 = HEAP32[$next_c$i3>>2]|0;
                $548 = ($547|0)==(95);
                if ($548) {
                 break;
                }
                $549 = (_iswalnum($547)|0);
                $550 = ($549|0)==(0);
                if ($550) {
                 break L35;
                }
               }
              } while(0);
              $551 = HEAP32[$532>>2]|0;
              $552 = $551 & 32;
              $553 = ($552|0)==(0);
              if ($553) {
               $562 = $551;
              } else {
               if ($523) {
                $$old$i18 = HEAP32[$next_c$i3>>2]|0;
                $$old8$i19 = ($$old$i18|0)==(95);
                if ($$old8$i19) {
                 break;
                } else {
                 $558 = $$old$i18;
                }
               } else {
                $554 = (_iswalnum($prev_c$0$i10)|0);
                $555 = ($554|0)==(0);
                $556 = HEAP32[$next_c$i3>>2]|0;
                $557 = ($556|0)==(95);
                $or$cond9$i17 = $555 | $557;
                if ($or$cond9$i17) {
                 break;
                } else {
                 $558 = $556;
                }
               }
               $559 = (_iswalnum($558)|0);
               $560 = ($559|0)==(0);
               if (!($560)) {
                break;
               }
               $$pre$i20 = HEAP32[$532>>2]|0;
               $562 = $$pre$i20;
              }
              $561 = $562 & 64;
              $563 = ($561|0)!=(0);
              $or$cond12$i21 = $522 & $563;
              $564 = HEAP32[$next_c$i3>>2]|0;
              $565 = ($564|0)!=(0);
              $or$cond15$i22 = $565 & $or$cond12$i21;
              do {
               if ($or$cond15$i22) {
                if ($523) {
                 $568 = $564;$572 = 1;
                } else {
                 $566 = (_iswalnum($prev_c$0$i10)|0);
                 $567 = ($566|0)!=(0);
                 $$pre182$i = HEAP32[$next_c$i3>>2]|0;
                 $568 = $$pre182$i;$572 = $567;
                }
                $569 = ($568|0)==(95);
                if ($569) {
                 if ($572) {
                  break L35;
                 } else {
                  break;
                 }
                } else {
                 $570 = (_iswalnum($568)|0);
                 $571 = ($570|0)!=(0);
                 $tmp55$i = $572 ^ $571;
                 if ($tmp55$i) {
                  break;
                 } else {
                  break L35;
                 }
                }
               }
              } while(0);
              $573 = HEAP32[$532>>2]|0;
              $574 = $573 & 128;
              $575 = ($574|0)==(0);
              if ($575) {
               $$lcssa149 = $843;$$lcssa154 = $527;$trans_i$085$i$lcssa151 = $trans_i$085$i;
               label = 233;
               break L31;
              }
              $576 = HEAP32[$next_c$i3>>2]|0;
              $577 = ($576|0)==(0);
              $or$cond18$i24 = $524 | $577;
              if ($or$cond18$i24) {
               break;
              }
              if ($523) {
               $580 = $576;$585 = 1;
              } else {
               $578 = (_iswalnum($prev_c$0$i10)|0);
               $579 = ($578|0)!=(0);
               $$pre183$i = HEAP32[$next_c$i3>>2]|0;
               $580 = $$pre183$i;$585 = $579;
              }
              $581 = ($580|0)==(95);
              if ($581) {
               if ($585) {
                $$lcssa149 = $843;$$lcssa154 = $527;$trans_i$085$i$lcssa151 = $trans_i$085$i;
                label = 233;
                break L31;
               } else {
                break;
               }
              } else {
               $582 = (_iswalnum($580)|0);
               $583 = ($582|0)!=(0);
               $584 = $585 ^ $583;
               if ($584) {
                break;
               } else {
                $$lcssa149 = $843;$$lcssa154 = $527;$trans_i$085$i$lcssa151 = $trans_i$085$i;
                label = 233;
                break L31;
               }
              }
             }
            } while(0);
            $586 = ((($trans_i$085$i)) + 32|0);
            $587 = ((($trans_i$085$i)) + 40|0);
            $588 = HEAP32[$587>>2]|0;
            $589 = ($588|0)==(0|0);
            if ($589) {
             $match_eo$1$ph$lcssa$i = $match_eo$1$ph103$i;$new_match$1$ph$lcssa$i = $new_match$1$ph105$i;$reach_next_i$1$ph$lcssa$i = $reach_next_i$1$ph101$i;
             break L27;
            } else {
             $843 = $587;$trans_i$085$i = $586;
            }
           }
           if ((label|0) == 233) {
            label = 0;
            $590 = HEAP32[$$lcssa149>>2]|0;
            HEAP32[$reach_next_i$1$ph101$i>>2] = $590;
            if ($511) {
             $591 = ((($reach_next_i$1$ph101$i)) + 4|0);
             $592 = HEAP32[$591>>2]|0;
             _memset(($592|0),-1,($457|0))|0;
            }
            $593 = ((($trans_i$085$i$lcssa151)) + 16|0);
            $594 = HEAP32[$593>>2]|0;
            $595 = ($594|0)==(0|0);
            do {
             if (!($595)) {
              $596 = HEAP32[$594>>2]|0;
              $597 = ($596|0)>(-1);
              if (!($597)) {
               break;
              }
              $598 = ((($reach_next_i$1$ph101$i)) + 4|0);
              $599 = $596;$tag_i$097$i = $594;
              while(1) {
               $600 = ($599|0)<($num_tags$0$i|0);
               if ($600) {
                $601 = HEAP32[$598>>2]|0;
                $602 = (($601) + ($599<<2)|0);
                HEAP32[$602>>2] = $pos$0$i;
               }
               $603 = ((($tag_i$097$i)) + 4|0);
               $604 = HEAP32[$603>>2]|0;
               $605 = ($604|0)>(-1);
               if ($605) {
                $599 = $604;$tag_i$097$i = $603;
               } else {
                break;
               }
              }
             }
            } while(0);
            $606 = HEAP32[$reach_next_i$1$ph101$i>>2]|0;
            $607 = HEAP32[$512>>2]|0;
            $$not$i = ($606|0)!=($607|0);
            $brmerge210$i = $$not$i | $$not209$i;
            if ($brmerge210$i) {
             $new_match$1$ph105$mux$i = $$not$i ? $new_match$1$ph105$i : 1;
             $match_eo$1$ph103$mux$i = $$not$i ? $match_eo$1$ph103$i : $pos$0$i;
             $$pre = ((($reach_next_i$1$ph101$i)) + 4|0);
             $$pre$phiZ2D = $$pre;$match_eo$2$i26 = $match_eo$1$ph103$mux$i;$new_match$2$i = $new_match$1$ph105$mux$i;
            } else {
             $608 = ((($reach_next_i$1$ph101$i)) + 4|0);
             $609 = HEAP32[$608>>2]|0;
             $i$399$i = 0;
             while(1) {
              $610 = (($609) + ($i$399$i<<2)|0);
              $611 = HEAP32[$610>>2]|0;
              $612 = (($tags$0) + ($i$399$i<<2)|0);
              HEAP32[$612>>2] = $611;
              $613 = (($i$399$i) + 1)|0;
              $exitcond$i = ($613|0)==($num_tags$0$i|0);
              if ($exitcond$i) {
               $$pre$phiZ2D = $608;$match_eo$2$i26 = $pos$0$i;$new_match$2$i = 1;
               break;
              } else {
               $i$399$i = $613;
              }
             }
            }
            $614 = HEAP32[$$lcssa154>>2]|0;
            $615 = (($488) + ($614<<3)|0);
            HEAP32[$615>>2] = $pos$0$i;
            $616 = (((($488) + ($614<<3)|0)) + 4|0);
            HEAP32[$616>>2] = $$pre$phiZ2D;
            $617 = ((($reach_next_i$1$ph101$i)) + 8|0);
            $match_eo$3$i = $match_eo$2$i26;$new_match$3$i = $new_match$2$i;$reach_next_i$2$i = $617;$trans_i$085$i153 = $trans_i$085$i$lcssa151;
           }
           $618 = ((($trans_i$085$i153)) + 32|0);
           $619 = ((($trans_i$085$i153)) + 40|0);
           $620 = HEAP32[$619>>2]|0;
           $621 = ($620|0)==(0|0);
           if ($621) {
            $match_eo$1$ph$lcssa$i = $match_eo$3$i;$new_match$1$ph$lcssa$i = $new_match$3$i;$reach_next_i$1$ph$lcssa$i = $reach_next_i$2$i;
            break;
           } else {
            $842 = $619;$match_eo$1$ph103$i = $match_eo$3$i;$new_match$1$ph105$i = $new_match$3$i;$reach_next_i$1$ph101$i = $reach_next_i$2$i;$trans_i$0$ph107$i = $618;
           }
          }
         }
        } while(0);
        HEAP32[$reach_next_i$1$ph$lcssa$i>>2] = 0;
        $$old46$i = HEAP32[$next_c$i3>>2]|0;
        $$old47$i = ($$old46$i|0)==(0);
        if ($$old47$i) {
         $match_eo$10$i = $match_eo$1$ph$lcssa$i;
         break;
        } else {
         $671 = $$old46$i;$match_eo$4$i = $match_eo$1$ph$lcssa$i;$new_match$4$i = $new_match$1$ph$lcssa$i;
        }
       } else {
        if ($516) {
         $match_eo$10$i = $match_eo$0$i7;
         break;
        }
        $622 = ($reach_next_i$0$i|0)!=($reach_next$0$i|0);
        $623 = HEAP32[$next_c$i3>>2]|0;
        $624 = ($623|0)!=(0);
        $or$cond48$i27 = $622 & $624;
        if ($or$cond48$i27) {
         $671 = $623;$match_eo$4$i = $match_eo$0$i7;$new_match$4$i = $new_match$0$i;
        } else {
         $match_eo$10$i = $match_eo$0$i7;
         break;
        }
       }
       $625 = (($pos$0$i) + ($pos_add_next$1$i8))|0;
       $626 = (_mbtowc($next_c$i3,$str_byte$0$i9,4)|0);
       $627 = ($626|0)<(1);
       if ($627) {
        $628 = ($626|0)<(0);
        if ($628) {
         $841 = 0;$ret$0$i50 = 1;
         break L21;
        } else {
         $pos_add_next$2$i = 1;
        }
       } else {
        $pos_add_next$2$i = $626;
       }
       $629 = (($str_byte$0$i9) + ($pos_add_next$2$i)|0);
       $630 = HEAP32[$513>>2]|0;
       $631 = ($630|0)!=(0);
       $632 = ($new_match$4$i|0)!=(0);
       $or$cond21$i28 = $632 & $631;
       if ($or$cond21$i28) {
        $633 = HEAP32[$reach_next$0$i>>2]|0;
        $634 = ($633|0)==(0|0);
        if ($634) {
         $reach_next_i$3$lcssa$i = $reach$0$i;
        } else {
         $635 = HEAP32[$515>>2]|0;
         $636 = HEAP32[$635>>2]|0;
         $637 = ($636|0)>(-1);
         $reach_i$0113$i = $reach_next$0$i;$reach_next_i$3115$i = $reach$0$i;
         while(1) {
          $638 = ((($reach_i$0113$i)) + 4|0);
          L106: do {
           if ($637) {
            $642 = $636;$i$4111$i = 0;
            while(1) {
             $639 = $i$4111$i | 1;
             $640 = (($635) + ($639<<2)|0);
             $641 = HEAP32[$640>>2]|0;
             $643 = ($642|0)<($num_tags$0$i|0);
             if (!($643)) {
              $reach_next_i$4$i = $reach_next_i$3115$i;
              break L106;
             }
             $644 = HEAP32[$638>>2]|0;
             $645 = (($644) + ($641<<2)|0);
             $646 = HEAP32[$645>>2]|0;
             $647 = (($tags$0) + ($641<<2)|0);
             $648 = HEAP32[$647>>2]|0;
             $649 = ($646|0)==($648|0);
             if ($649) {
              $650 = (($644) + ($642<<2)|0);
              $651 = HEAP32[$650>>2]|0;
              $652 = (($tags$0) + ($642<<2)|0);
              $653 = HEAP32[$652>>2]|0;
              $654 = ($651|0)<($653|0);
              if ($654) {
               $reach_next_i$4$i = $reach_next_i$3115$i;
               break L106;
              }
             }
             $655 = (($i$4111$i) + 2)|0;
             $656 = (($635) + ($655<<2)|0);
             $657 = HEAP32[$656>>2]|0;
             $658 = ($657|0)>(-1);
             if ($658) {
              $642 = $657;$i$4111$i = $655;
             } else {
              $$lcssa = $644;
              break;
             }
            }
            $659 = $$lcssa;
            $$pre$phi193$iZ2D = $638;$663 = $659;
            label = 262;
           } else {
            $$pre185$i29 = HEAP32[$638>>2]|0;
            $$pre$phi193$iZ2D = $638;$663 = $$pre185$i29;
            label = 262;
           }
          } while(0);
          if ((label|0) == 262) {
           label = 0;
           $660 = HEAP32[$reach_i$0113$i>>2]|0;
           HEAP32[$reach_next_i$3115$i>>2] = $660;
           $661 = ((($reach_next_i$3115$i)) + 4|0);
           $662 = HEAP32[$661>>2]|0;
           HEAP32[$661>>2] = $663;
           HEAP32[$$pre$phi193$iZ2D>>2] = $662;
           $664 = ((($reach_next_i$3115$i)) + 8|0);
           $reach_next_i$4$i = $664;
          }
          $665 = ((($reach_i$0113$i)) + 8|0);
          $666 = HEAP32[$665>>2]|0;
          $667 = ($666|0)==(0|0);
          if ($667) {
           $reach_next_i$3$lcssa$i = $reach_next_i$4$i;
           break;
          } else {
           $reach_i$0113$i = $665;$reach_next_i$3115$i = $reach_next_i$4$i;
          }
         }
        }
        HEAP32[$reach_next_i$3$lcssa$i>>2] = 0;
        $new_match$5$i = 0;$reach$1$i = $reach$0$i;$reach_next$1$i = $reach_next$0$i;
       } else {
        $new_match$5$i = $new_match$4$i;$reach$1$i = $reach_next$0$i;$reach_next$1$i = $reach$0$i;
       }
       $668 = HEAP32[$reach$1$i>>2]|0;
       $669 = ($668|0)==(0|0);
       if ($669) {
        $match_eo$5$lcssa$i = $match_eo$4$i;$new_match$6$lcssa$i = $new_match$5$i;$reach_next_i$5$lcssa$i = $reach_next$1$i;$tmp_tags$1$lcssa$i = $tmp_tags$0$i;
       } else {
        $670 = ($625|0)!=(0);
        $672 = ($671|0)==(95);
        $673 = ($625|0)==(0);
        $674 = ($625|0)>(0);
        $or$cond24$i31 = $510 | $674;
        $675 = ($671|0)==(10);
        $or$cond27$i32 = $509 & $675;
        $or$cond24$not$i33 = $or$cond24$i31 ^ 1;
        $677 = $668;$match_eo$5149$i = $match_eo$4$i;$new_match$6150$i = $new_match$5$i;$reach_i$1147$i = $reach$1$i;$reach_next_i$5148$i = $reach_next$1$i;$tmp_tags$1151$i = $tmp_tags$0$i;
        while(1) {
         $676 = ((($677)) + 8|0);
         $678 = HEAP32[$676>>2]|0;
         $679 = ($678|0)==(0|0);
         if ($679) {
          $match_eo$6$lcssa$i = $match_eo$5149$i;$new_match$7$lcssa$i = $new_match$6150$i;$reach_next_i$6$lcssa$i = $reach_next_i$5148$i;$tmp_tags$2$lcssa$i = $tmp_tags$1151$i;
         } else {
          $680 = ((($reach_i$1147$i)) + 4|0);
          $778 = $tmp_tags$1151$i;$797 = $676;$match_eo$6129$i = $match_eo$5149$i;$new_match$7132$i = $new_match$6150$i;$reach_next_i$6128$i = $reach_next_i$5148$i;$trans_i$1138$i = $677;
          while(1) {
           $681 = HEAP32[$trans_i$1138$i>>2]|0;
           $682 = ($681>>>0)>($671>>>0);
           L128: do {
            if ($682) {
             $match_eo$9$i = $match_eo$6129$i;$new_match$10$i = $new_match$7132$i;$reach_next_i$7$i = $reach_next_i$6128$i;$tmp_tags$3$i = $778;
            } else {
             $683 = ((($trans_i$1138$i)) + 4|0);
             $684 = HEAP32[$683>>2]|0;
             $685 = ($684>>>0)<($671>>>0);
             if ($685) {
              $match_eo$9$i = $match_eo$6129$i;$new_match$10$i = $new_match$7132$i;$reach_next_i$7$i = $reach_next_i$6128$i;$tmp_tags$3$i = $778;
              break;
             }
             $686 = ((($trans_i$1138$i)) + 20|0);
             $687 = HEAP32[$686>>2]|0;
             $688 = ($687|0)==(0);
             do {
              if (!($688)) {
               $689 = $687 & 1;
               $690 = ($689|0)==(0);
               $brmerge211$i = $690 | $or$cond24$not$i33;
               $brmerge212$i = $or$cond27$i32 | $brmerge211$i;
               if (!($brmerge212$i)) {
                $match_eo$9$i = $match_eo$6129$i;$new_match$10$i = $new_match$7132$i;$reach_next_i$7$i = $reach_next_i$6128$i;$tmp_tags$3$i = $778;
                break L128;
               }
               $691 = $687 & 2;
               $692 = ($691|0)==(0);
               if (!($692)) {
                $693 = HEAP32[$next_c$i3>>2]|0;
                $694 = $693 | $452;
                $695 = ($694|0)==(0);
                $696 = ($693|0)==(10);
                $or$cond33$i34 = $509 & $696;
                $or$cond214$i = $695 | $or$cond33$i34;
                if (!($or$cond214$i)) {
                 $match_eo$9$i = $match_eo$6129$i;$new_match$10$i = $new_match$7132$i;$reach_next_i$7$i = $reach_next_i$6128$i;$tmp_tags$3$i = $778;
                 break L128;
                }
               }
               $697 = $687 & 16;
               $698 = ($697|0)==(0);
               do {
                if (!($698)) {
                 if ($672) {
                  $match_eo$9$i = $match_eo$6129$i;$new_match$10$i = $new_match$7132$i;$reach_next_i$7$i = $reach_next_i$6128$i;$tmp_tags$3$i = $778;
                  break L128;
                 }
                 $699 = (_iswalnum($671)|0);
                 $700 = ($699|0)==(0);
                 if (!($700)) {
                  $match_eo$9$i = $match_eo$6129$i;$new_match$10$i = $new_match$7132$i;$reach_next_i$7$i = $reach_next_i$6128$i;$tmp_tags$3$i = $778;
                  break L128;
                 }
                 $701 = HEAP32[$next_c$i3>>2]|0;
                 $702 = ($701|0)==(95);
                 if ($702) {
                  break;
                 }
                 $703 = (_iswalnum($701)|0);
                 $704 = ($703|0)==(0);
                 if ($704) {
                  $match_eo$9$i = $match_eo$6129$i;$new_match$10$i = $new_match$7132$i;$reach_next_i$7$i = $reach_next_i$6128$i;$tmp_tags$3$i = $778;
                  break L128;
                 }
                }
               } while(0);
               $705 = HEAP32[$686>>2]|0;
               $706 = $705 & 32;
               $707 = ($706|0)==(0);
               if ($707) {
                $716 = $705;
               } else {
                if ($672) {
                 $$old34$i36 = HEAP32[$next_c$i3>>2]|0;
                 $$old35$i37 = ($$old34$i36|0)==(95);
                 if ($$old35$i37) {
                  $match_eo$9$i = $match_eo$6129$i;$new_match$10$i = $new_match$7132$i;$reach_next_i$7$i = $reach_next_i$6128$i;$tmp_tags$3$i = $778;
                  break L128;
                 } else {
                  $712 = $$old34$i36;
                 }
                } else {
                 $708 = (_iswalnum($671)|0);
                 $709 = ($708|0)==(0);
                 $710 = HEAP32[$next_c$i3>>2]|0;
                 $711 = ($710|0)==(95);
                 $or$cond36$i35 = $709 | $711;
                 if ($or$cond36$i35) {
                  $match_eo$9$i = $match_eo$6129$i;$new_match$10$i = $new_match$7132$i;$reach_next_i$7$i = $reach_next_i$6128$i;$tmp_tags$3$i = $778;
                  break L128;
                 } else {
                  $712 = $710;
                 }
                }
                $713 = (_iswalnum($712)|0);
                $714 = ($713|0)==(0);
                if (!($714)) {
                 $match_eo$9$i = $match_eo$6129$i;$new_match$10$i = $new_match$7132$i;$reach_next_i$7$i = $reach_next_i$6128$i;$tmp_tags$3$i = $778;
                 break L128;
                }
                $$pre187$i38 = HEAP32[$686>>2]|0;
                $716 = $$pre187$i38;
               }
               $715 = $716 & 64;
               $717 = ($715|0)!=(0);
               $or$cond39$i39 = $670 & $717;
               $718 = HEAP32[$next_c$i3>>2]|0;
               $719 = ($718|0)!=(0);
               $or$cond42$i40 = $719 & $or$cond39$i39;
               do {
                if ($or$cond42$i40) {
                 if ($672) {
                  $722 = $718;$726 = 1;
                 } else {
                  $720 = (_iswalnum($671)|0);
                  $721 = ($720|0)!=(0);
                  $$pre188$i = HEAP32[$next_c$i3>>2]|0;
                  $722 = $$pre188$i;$726 = $721;
                 }
                 $723 = ($722|0)==(95);
                 if ($723) {
                  if ($726) {
                   $match_eo$9$i = $match_eo$6129$i;$new_match$10$i = $new_match$7132$i;$reach_next_i$7$i = $reach_next_i$6128$i;$tmp_tags$3$i = $778;
                   break L128;
                  } else {
                   break;
                  }
                 } else {
                  $724 = (_iswalnum($722)|0);
                  $725 = ($724|0)!=(0);
                  $tmp$i41 = $726 ^ $725;
                  if ($tmp$i41) {
                   break;
                  } else {
                   $match_eo$9$i = $match_eo$6129$i;$new_match$10$i = $new_match$7132$i;$reach_next_i$7$i = $reach_next_i$6128$i;$tmp_tags$3$i = $778;
                   break L128;
                  }
                 }
                }
               } while(0);
               $727 = HEAP32[$686>>2]|0;
               $728 = $727 & 128;
               $729 = ($728|0)==(0);
               do {
                if (!($729)) {
                 $730 = HEAP32[$next_c$i3>>2]|0;
                 $731 = ($730|0)==(0);
                 $or$cond45$i42 = $673 | $731;
                 if ($or$cond45$i42) {
                  $match_eo$9$i = $match_eo$6129$i;$new_match$10$i = $new_match$7132$i;$reach_next_i$7$i = $reach_next_i$6128$i;$tmp_tags$3$i = $778;
                  break L128;
                 }
                 if ($672) {
                  $734 = $730;$739 = 1;
                 } else {
                  $732 = (_iswalnum($671)|0);
                  $733 = ($732|0)!=(0);
                  $$pre189$i43 = HEAP32[$next_c$i3>>2]|0;
                  $734 = $$pre189$i43;$739 = $733;
                 }
                 $735 = ($734|0)==(95);
                 if ($735) {
                  if ($739) {
                   break;
                  } else {
                   $match_eo$9$i = $match_eo$6129$i;$new_match$10$i = $new_match$7132$i;$reach_next_i$7$i = $reach_next_i$6128$i;$tmp_tags$3$i = $778;
                   break L128;
                  }
                 } else {
                  $736 = (_iswalnum($734)|0);
                  $737 = ($736|0)!=(0);
                  $738 = $739 ^ $737;
                  if ($738) {
                   $match_eo$9$i = $match_eo$6129$i;$new_match$10$i = $new_match$7132$i;$reach_next_i$7$i = $reach_next_i$6128$i;$tmp_tags$3$i = $778;
                   break L128;
                  } else {
                   break;
                  }
                 }
                }
               } while(0);
               $740 = HEAP32[$686>>2]|0;
               $741 = $740 & 4;
               $742 = ($741|0)==(0);
               do {
                if ($742) {
                 $751 = $740;
                } else {
                 $743 = HEAP32[$2>>2]|0;
                 $744 = $743 & 2;
                 $745 = ($744|0)==(0);
                 if (!($745)) {
                  $751 = $740;
                  break;
                 }
                 $746 = ((($trans_i$1138$i)) + 24|0);
                 $747 = HEAP32[$746>>2]|0;
                 $748 = (_iswctype($671,$747)|0);
                 $749 = ($748|0)==(0);
                 if ($749) {
                  $match_eo$9$i = $match_eo$6129$i;$new_match$10$i = $new_match$7132$i;$reach_next_i$7$i = $reach_next_i$6128$i;$tmp_tags$3$i = $778;
                  break L128;
                 }
                 $$pre191$i = HEAP32[$686>>2]|0;
                 $751 = $$pre191$i;
                }
               } while(0);
               $750 = $751 & 4;
               $752 = ($750|0)==(0);
               do {
                if (!($752)) {
                 $753 = HEAP32[$2>>2]|0;
                 $754 = $753 & 2;
                 $755 = ($754|0)==(0);
                 if ($755) {
                  break;
                 }
                 $756 = (_towlower($671)|0);
                 $757 = ((($trans_i$1138$i)) + 24|0);
                 $758 = HEAP32[$757>>2]|0;
                 $759 = (_iswctype($756,$758)|0);
                 $760 = ($759|0)==(0);
                 if (!($760)) {
                  break;
                 }
                 $761 = (_towupper($671)|0);
                 $762 = HEAP32[$757>>2]|0;
                 $763 = (_iswctype($761,$762)|0);
                 $764 = ($763|0)==(0);
                 if ($764) {
                  $match_eo$9$i = $match_eo$6129$i;$new_match$10$i = $new_match$7132$i;$reach_next_i$7$i = $reach_next_i$6128$i;$tmp_tags$3$i = $778;
                  break L128;
                 }
                }
               } while(0);
               $765 = HEAP32[$686>>2]|0;
               $766 = $765 & 8;
               $767 = ($766|0)==(0);
               if ($767) {
                break;
               }
               $768 = ((($trans_i$1138$i)) + 28|0);
               $769 = HEAP32[$768>>2]|0;
               $770 = HEAP32[$2>>2]|0;
               $771 = $770 & 2;
               $772 = (_tre_neg_char_classes_match($769,$671,$771)|0);
               $773 = ($772|0)==(0);
               if (!($773)) {
                $match_eo$9$i = $match_eo$6129$i;$new_match$10$i = $new_match$7132$i;$reach_next_i$7$i = $reach_next_i$6128$i;$tmp_tags$3$i = $778;
                break L128;
               }
              }
             } while(0);
             if ($511) {
              $774 = HEAP32[$680>>2]|0;
              $i$5119$i = 0;
              while(1) {
               $775 = (($774) + ($i$5119$i<<2)|0);
               $776 = HEAP32[$775>>2]|0;
               $777 = (($778) + ($i$5119$i<<2)|0);
               HEAP32[$777>>2] = $776;
               $779 = (($i$5119$i) + 1)|0;
               $exitcond175$i = ($779|0)==($num_tags$0$i|0);
               if ($exitcond175$i) {
                break;
               } else {
                $i$5119$i = $779;
               }
              }
             }
             $780 = ((($trans_i$1138$i)) + 16|0);
             $781 = HEAP32[$780>>2]|0;
             $782 = ($781|0)==(0|0);
             do {
              if (!($782)) {
               $783 = HEAP32[$781>>2]|0;
               $784 = ($783|0)>(-1);
               if ($784) {
                $785 = $783;$tag_i$1122$i = $781;
               } else {
                break;
               }
               while(1) {
                $786 = ($785|0)<($num_tags$0$i|0);
                if ($786) {
                 $787 = (($778) + ($785<<2)|0);
                 HEAP32[$787>>2] = $625;
                }
                $788 = ((($tag_i$1122$i)) + 4|0);
                $789 = HEAP32[$788>>2]|0;
                $790 = ($789|0)>(-1);
                if ($790) {
                 $785 = $789;$tag_i$1122$i = $788;
                } else {
                 break;
                }
               }
              }
             } while(0);
             $791 = ((($trans_i$1138$i)) + 12|0);
             $792 = HEAP32[$791>>2]|0;
             $793 = (($488) + ($792<<3)|0);
             $794 = HEAP32[$793>>2]|0;
             $795 = ($794|0)<($625|0);
             if (!($795)) {
              $813 = HEAP32[$514>>2]|0;
              $814 = (((($488) + ($792<<3)|0)) + 4|0);
              $815 = HEAP32[$814>>2]|0;
              $816 = HEAP32[$815>>2]|0;
              $817 = (_tre_tag_order($num_tags$0$i,$813,$778,$816)|0);
              $818 = ($817|0)==(0);
              if ($818) {
               $match_eo$9$i = $match_eo$6129$i;$new_match$10$i = $new_match$7132$i;$reach_next_i$7$i = $reach_next_i$6128$i;$tmp_tags$3$i = $778;
               break;
              }
              HEAP32[$815>>2] = $778;
              $819 = HEAP32[$797>>2]|0;
              $820 = HEAP32[$512>>2]|0;
              $821 = ($819|0)==($820|0);
              if (!($821)) {
               $match_eo$9$i = $match_eo$6129$i;$new_match$10$i = $new_match$7132$i;$reach_next_i$7$i = $reach_next_i$6128$i;$tmp_tags$3$i = $816;
               break;
              }
              if ($511) {
               $i$7124$i = 0;
              } else {
               $match_eo$9$i = $625;$new_match$10$i = 1;$reach_next_i$7$i = $reach_next_i$6128$i;$tmp_tags$3$i = $816;
               break;
              }
              while(1) {
               $822 = (($778) + ($i$7124$i<<2)|0);
               $823 = HEAP32[$822>>2]|0;
               $824 = (($tags$0) + ($i$7124$i<<2)|0);
               HEAP32[$824>>2] = $823;
               $825 = (($i$7124$i) + 1)|0;
               $exitcond177$i = ($825|0)==($num_tags$0$i|0);
               if ($exitcond177$i) {
                $match_eo$9$i = $625;$new_match$10$i = 1;$reach_next_i$7$i = $reach_next_i$6128$i;$tmp_tags$3$i = $816;
                break L128;
               } else {
                $i$7124$i = $825;
               }
              }
             }
             $796 = HEAP32[$797>>2]|0;
             HEAP32[$reach_next_i$6128$i>>2] = $796;
             $798 = ((($reach_next_i$6128$i)) + 4|0);
             $799 = HEAP32[$798>>2]|0;
             HEAP32[$798>>2] = $778;
             HEAP32[$793>>2] = $625;
             $800 = (((($488) + ($792<<3)|0)) + 4|0);
             HEAP32[$800>>2] = $798;
             $801 = $796;
             $802 = HEAP32[$512>>2]|0;
             $803 = ($801|0)==($802|0);
             do {
              if ($803) {
               $804 = ($match_eo$6129$i|0)==(-1);
               if ($804) {
                if ($511) {
                 $i$6126$i = 0;
                } else {
                 $match_eo$7$i = $625;$new_match$8$i = 1;
                 break;
                }
               } else {
                if (!($511)) {
                 $match_eo$7$i = $match_eo$6129$i;$new_match$8$i = $new_match$7132$i;
                 break;
                }
                $805 = HEAP32[$778>>2]|0;
                $806 = HEAP32[$tags$0>>2]|0;
                $807 = ($805|0)>($806|0);
                if ($807) {
                 $match_eo$7$i = $match_eo$6129$i;$new_match$8$i = $new_match$7132$i;
                 break;
                } else {
                 $i$6126$i = 0;
                }
               }
               while(1) {
                $808 = (($778) + ($i$6126$i<<2)|0);
                $809 = HEAP32[$808>>2]|0;
                $810 = (($tags$0) + ($i$6126$i<<2)|0);
                HEAP32[$810>>2] = $809;
                $811 = (($i$6126$i) + 1)|0;
                $exitcond179$i = ($811|0)==($num_tags$0$i|0);
                if ($exitcond179$i) {
                 $match_eo$7$i = $625;$new_match$8$i = 1;
                 break;
                } else {
                 $i$6126$i = $811;
                }
               }
              } else {
               $match_eo$7$i = $match_eo$6129$i;$new_match$8$i = $new_match$7132$i;
              }
             } while(0);
             $812 = ((($reach_next_i$6128$i)) + 8|0);
             $match_eo$9$i = $match_eo$7$i;$new_match$10$i = $new_match$8$i;$reach_next_i$7$i = $812;$tmp_tags$3$i = $799;
            }
           } while(0);
           $826 = ((($trans_i$1138$i)) + 32|0);
           $827 = ((($trans_i$1138$i)) + 40|0);
           $828 = HEAP32[$827>>2]|0;
           $829 = ($828|0)==(0|0);
           if ($829) {
            $match_eo$6$lcssa$i = $match_eo$9$i;$new_match$7$lcssa$i = $new_match$10$i;$reach_next_i$6$lcssa$i = $reach_next_i$7$i;$tmp_tags$2$lcssa$i = $tmp_tags$3$i;
            break;
           } else {
            $778 = $tmp_tags$3$i;$797 = $827;$match_eo$6129$i = $match_eo$9$i;$new_match$7132$i = $new_match$10$i;$reach_next_i$6128$i = $reach_next_i$7$i;$trans_i$1138$i = $826;
           }
          }
         }
         $830 = ((($reach_i$1147$i)) + 8|0);
         $831 = HEAP32[$830>>2]|0;
         $832 = ($831|0)==(0|0);
         if ($832) {
          $match_eo$5$lcssa$i = $match_eo$6$lcssa$i;$new_match$6$lcssa$i = $new_match$7$lcssa$i;$reach_next_i$5$lcssa$i = $reach_next_i$6$lcssa$i;$tmp_tags$1$lcssa$i = $tmp_tags$2$lcssa$i;
          break;
         } else {
          $677 = $831;$match_eo$5149$i = $match_eo$6$lcssa$i;$new_match$6150$i = $new_match$7$lcssa$i;$reach_i$1147$i = $830;$reach_next_i$5148$i = $reach_next_i$6$lcssa$i;$tmp_tags$1151$i = $tmp_tags$2$lcssa$i;
         }
        }
       }
       HEAP32[$reach_next_i$5$lcssa$i>>2] = 0;
       $match_eo$0$i7 = $match_eo$5$lcssa$i;$new_match$0$i = $new_match$6$lcssa$i;$pos$0$i = $625;$pos_add_next$1$i8 = $pos_add_next$2$i;$prev_c$0$i10 = $671;$reach$0$i = $reach$1$i;$reach_next$0$i = $reach_next$1$i;$reach_next_i$0$i = $reach_next_i$5$lcssa$i;$str_byte$0$i9 = $629;$tmp_tags$0$i = $tmp_tags$1$lcssa$i;
      }
      $match_eo$10$lobit$i = $match_eo$10$i >>> 31;
      $841 = $match_eo$10$i;$ret$0$i50 = $match_eo$10$lobit$i;
     }
    } while(0);
    _free($468);
    $$0$i51 = $ret$0$i50;$840 = $841;
   }
   $835 = $840;$status$0 = $$0$i51;
  } else {
   HEAP32[$next_c$i>>2] = 0;
   $16 = $eflags & 1;
   $17 = $eflags & 2;
   $18 = HEAP32[$2>>2]|0;
   $19 = $18 & 4;
   $20 = (___tre_mem_new_impl(0,0)|0);
   $21 = ($20|0)==(0|0);
   L218: do {
    if ($21) {
     $$0$i = 12;$837 = 0;
    } else {
     $22 = (___tre_mem_alloc_impl($20,0,0,0,32)|0);
     $23 = ($22|0)==(0|0);
     if ($23) {
      ___tre_mem_destroy($20);
      $$0$i = 12;$837 = 0;
      break;
     }
     $24 = ((($22)) + 24|0);
     HEAP32[$24>>2] = 0;
     $25 = ((($22)) + 28|0);
     HEAP32[$25>>2] = 0;
     $26 = HEAP32[$6>>2]|0;
     $27 = ($26|0)==(0);
     if ($27) {
      $tags$0$i = 0;
      label = 9;
     } else {
      $28 = $26 << 2;
      $29 = (_malloc($28)|0);
      $30 = ($29|0)==(0|0);
      if ($30) {
       $838 = 0;$pmatch$1$i = 0;$ret$0$i = 12;$states_seen$1$i = 0;$tags$1$i = $29;
      } else {
       $tags$0$i = $29;
       label = 9;
      }
     }
     L225: do {
      if ((label|0) == 9) {
       $31 = ((($1)) + 28|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = ($32|0)==(0);
       if ($33) {
        $pmatch$0$i = 0;
       } else {
        $34 = $32 << 3;
        $35 = (_malloc($34)|0);
        $36 = ($35|0)==(0|0);
        if ($36) {
         $838 = 0;$pmatch$1$i = $35;$ret$0$i = 12;$states_seen$1$i = 0;$tags$1$i = $tags$0$i;
         break;
        } else {
         $pmatch$0$i = $35;
        }
       }
       $37 = ((($1)) + 52|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = ($38|0)==(0);
       if ($39) {
        $states_seen$0$ph$i = 0;
       } else {
        $40 = $38 << 2;
        $41 = (_malloc($40)|0);
        $42 = ($41|0)==(0|0);
        if ($42) {
         $838 = 0;$pmatch$1$i = $pmatch$0$i;$ret$0$i = 12;$states_seen$1$i = $41;$tags$1$i = $tags$0$i;
         break;
        } else {
         $states_seen$0$ph$i = $41;
        }
       }
       $43 = ((($1)) + 8|0);
       $44 = ((($1)) + 12|0);
       $45 = ($tags$0|0)==(0|0);
       $46 = ($tags$0|0)!=(0|0);
       $47 = ((($1)) + 32|0);
       $48 = ($19|0)!=(0);
       $49 = ($16|0)!=(0);
       $50 = $26;$72 = 0;$match_eo$0$i = -1;$pos_add_next$0$i = 1;$pos_start$0$i = -1;$stack$0$i = $22;$str_byte$0$i = $string;
       L233: while(1) {
        $51 = ($50|0)>(0);
        if ($51) {
         $839 = $50;$i$0103$i = 0;
         while(1) {
          $56 = (($tags$0$i) + ($i$0103$i<<2)|0);
          HEAP32[$56>>2] = -1;
          if ($45) {
           $60 = $839;
          } else {
           $57 = (($tags$0) + ($i$0103$i<<2)|0);
           HEAP32[$57>>2] = -1;
           $$pre177$i = HEAP32[$6>>2]|0;
           $60 = $$pre177$i;
          }
          $58 = (($i$0103$i) + 1)|0;
          $59 = ($58|0)<($60|0);
          if ($59) {
           $839 = $60;$i$0103$i = $58;
          } else {
           break;
          }
         }
        }
        $52 = HEAP32[$37>>2]|0;
        $53 = ($52|0)>(0);
        if ($53) {
         $54 = ($52|0)>(1);
         $$op$i = $52 << 2;
         $55 = $54 ? $$op$i : 4;
         _memset(($states_seen$0$ph$i|0),0,($55|0))|0;
        }
        $61 = (($pos_add_next$0$i) + ($pos_start$0$i))|0;
        $62 = (_mbtowc($next_c$i,$str_byte$0$i,4)|0);
        $63 = ($62|0)<(1);
        if ($63) {
         $64 = ($62|0)<(0);
         if ($64) {
          $838 = 0;$pmatch$1$i = $pmatch$0$i;$ret$0$i = 1;$states_seen$1$i = $states_seen$0$ph$i;$tags$1$i = $tags$0$i;
          break L225;
         } else {
          $pos_add_next$1$i = 1;
         }
        } else {
         $pos_add_next$1$i = $62;
        }
        $65 = (($str_byte$0$i) + ($pos_add_next$1$i)|0);
        $66 = HEAP32[$next_c$i>>2]|0;
        $67 = HEAP32[$43>>2]|0;
        $68 = ((($67)) + 8|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = ($69|0)==(0|0);
        if ($70) {
         $match_eo$2$i = $match_eo$0$i;$next_tags$8$i = 0;$pos_add_next$6$i = $pos_add_next$1$i;$stack$8$i = $stack$0$i;
         label = 173;
        } else {
         $71 = ($61|0)!=(0);
         $73 = ($72|0)==(95);
         $74 = ($61|0)==(0);
         $75 = ($61|0)>(0);
         $or$cond$i = $49 | $75;
         $76 = ($72|0)==(10);
         $or$cond3$i = $48 & $76;
         $or$cond$not$i = $or$cond$i ^ 1;
         $133 = $68;$next_tags$0115$i = 0;$stack$1116$i = $stack$0$i;$state$0114$i = 0;$trans_i$0118$i = $67;
         while(1) {
          $77 = ((($trans_i$0118$i)) + 20|0);
          $78 = HEAP32[$77>>2]|0;
          $79 = ($78|0)==(0);
          L252: do {
           if ($79) {
            label = 52;
           } else {
            $80 = $78 & 1;
            $81 = ($80|0)==(0);
            $brmerge$i = $81 | $or$cond$not$i;
            $brmerge199$i = $or$cond3$i | $brmerge$i;
            if (!($brmerge199$i)) {
             $next_tags$1$i = $next_tags$0115$i;$stack$3$i = $stack$1116$i;$state$1$i = $state$0114$i;
             break;
            }
            $82 = $78 & 2;
            $83 = ($82|0)==(0);
            if (!($83)) {
             $84 = HEAP32[$next_c$i>>2]|0;
             $85 = $84 | $17;
             $86 = ($85|0)==(0);
             $87 = ($84|0)==(10);
             $or$cond7$i = $48 & $87;
             $or$cond201$i = $86 | $or$cond7$i;
             if (!($or$cond201$i)) {
              $next_tags$1$i = $next_tags$0115$i;$stack$3$i = $stack$1116$i;$state$1$i = $state$0114$i;
              break;
             }
            }
            $88 = $78 & 16;
            $89 = ($88|0)==(0);
            do {
             if (!($89)) {
              if ($73) {
               $next_tags$1$i = $next_tags$0115$i;$stack$3$i = $stack$1116$i;$state$1$i = $state$0114$i;
               break L252;
              }
              $90 = (_iswalnum($72)|0);
              $91 = ($90|0)==(0);
              if (!($91)) {
               $next_tags$1$i = $next_tags$0115$i;$stack$3$i = $stack$1116$i;$state$1$i = $state$0114$i;
               break L252;
              }
              $92 = HEAP32[$next_c$i>>2]|0;
              $93 = ($92|0)==(95);
              if ($93) {
               break;
              }
              $94 = (_iswalnum($92)|0);
              $95 = ($94|0)==(0);
              if ($95) {
               $next_tags$1$i = $next_tags$0115$i;$stack$3$i = $stack$1116$i;$state$1$i = $state$0114$i;
               break L252;
              }
             }
            } while(0);
            $96 = HEAP32[$77>>2]|0;
            $97 = $96 & 32;
            $98 = ($97|0)==(0);
            if ($98) {
             $107 = $96;
            } else {
             if ($73) {
              $$old$i = HEAP32[$next_c$i>>2]|0;
              $$old8$i = ($$old$i|0)==(95);
              if ($$old8$i) {
               $next_tags$1$i = $next_tags$0115$i;$stack$3$i = $stack$1116$i;$state$1$i = $state$0114$i;
               break;
              } else {
               $103 = $$old$i;
              }
             } else {
              $99 = (_iswalnum($72)|0);
              $100 = ($99|0)==(0);
              $101 = HEAP32[$next_c$i>>2]|0;
              $102 = ($101|0)==(95);
              $or$cond9$i = $100 | $102;
              if ($or$cond9$i) {
               $next_tags$1$i = $next_tags$0115$i;$stack$3$i = $stack$1116$i;$state$1$i = $state$0114$i;
               break;
              } else {
               $103 = $101;
              }
             }
             $104 = (_iswalnum($103)|0);
             $105 = ($104|0)==(0);
             if (!($105)) {
              $next_tags$1$i = $next_tags$0115$i;$stack$3$i = $stack$1116$i;$state$1$i = $state$0114$i;
              break;
             }
             $$pre179$i = HEAP32[$77>>2]|0;
             $107 = $$pre179$i;
            }
            $106 = $107 & 64;
            $108 = ($106|0)!=(0);
            $or$cond12$i = $71 & $108;
            $109 = HEAP32[$next_c$i>>2]|0;
            $110 = ($109|0)!=(0);
            $or$cond15$i = $110 & $or$cond12$i;
            do {
             if ($or$cond15$i) {
              if ($73) {
               $113 = $109;$117 = 1;
              } else {
               $111 = (_iswalnum($72)|0);
               $112 = ($111|0)!=(0);
               $$pre180$i = HEAP32[$next_c$i>>2]|0;
               $113 = $$pre180$i;$117 = $112;
              }
              $114 = ($113|0)==(95);
              if ($114) {
               if ($117) {
                $next_tags$1$i = $next_tags$0115$i;$stack$3$i = $stack$1116$i;$state$1$i = $state$0114$i;
                break L252;
               } else {
                break;
               }
              } else {
               $115 = (_iswalnum($113)|0);
               $116 = ($115|0)!=(0);
               $tmp49$i = $117 ^ $116;
               if ($tmp49$i) {
                break;
               } else {
                $next_tags$1$i = $next_tags$0115$i;$stack$3$i = $stack$1116$i;$state$1$i = $state$0114$i;
                break L252;
               }
              }
             }
            } while(0);
            $118 = HEAP32[$77>>2]|0;
            $119 = $118 & 128;
            $120 = ($119|0)==(0);
            if ($120) {
             label = 52;
             break;
            }
            $121 = HEAP32[$next_c$i>>2]|0;
            $122 = ($121|0)==(0);
            $or$cond18$i = $74 | $122;
            if ($or$cond18$i) {
             $next_tags$1$i = $next_tags$0115$i;$stack$3$i = $stack$1116$i;$state$1$i = $state$0114$i;
             break;
            }
            if ($73) {
             $125 = $121;$130 = 1;
            } else {
             $123 = (_iswalnum($72)|0);
             $124 = ($123|0)!=(0);
             $$pre181$i = HEAP32[$next_c$i>>2]|0;
             $125 = $$pre181$i;$130 = $124;
            }
            $126 = ($125|0)==(95);
            if ($126) {
             if ($130) {
              label = 52;
              break;
             } else {
              $next_tags$1$i = $next_tags$0115$i;$stack$3$i = $stack$1116$i;$state$1$i = $state$0114$i;
              break;
             }
            } else {
             $127 = (_iswalnum($125)|0);
             $128 = ($127|0)!=(0);
             $129 = $130 ^ $128;
             if ($129) {
              $next_tags$1$i = $next_tags$0115$i;$stack$3$i = $stack$1116$i;$state$1$i = $state$0114$i;
              break;
             } else {
              label = 52;
              break;
             }
            }
           }
          } while(0);
          do {
           if ((label|0) == 52) {
            label = 0;
            $131 = ($state$0114$i|0)==(0|0);
            if ($131) {
             $132 = HEAP32[$133>>2]|0;
             $134 = ((($trans_i$0118$i)) + 16|0);
             $135 = HEAP32[$134>>2]|0;
             $next_tags$1$i = $135;$stack$3$i = $stack$1116$i;$state$1$i = $132;
             break;
            }
            $136 = ((($stack$1116$i)) + 28|0);
            $137 = HEAP32[$136>>2]|0;
            $138 = ($137|0)==(0|0);
            if ($138) {
             $139 = (___tre_mem_alloc_impl($20,0,0,0,32)|0);
             $140 = ($139|0)==(0|0);
             if ($140) {
              label = 56;
              break L233;
             }
             $144 = ((($139)) + 24|0);
             HEAP32[$144>>2] = $stack$1116$i;
             $145 = ((($139)) + 28|0);
             HEAP32[$145>>2] = 0;
             $146 = HEAP32[$6>>2]|0;
             $147 = $146 << 2;
             $148 = (___tre_mem_alloc_impl($20,0,0,0,$147)|0);
             $149 = ((($139)) + 20|0);
             HEAP32[$149>>2] = $148;
             $150 = ($148|0)==(0|0);
             if ($150) {
              label = 63;
              break L233;
             }
             HEAP32[$136>>2] = $139;
             $stack$2$i = $139;
            } else {
             $stack$2$i = $137;
            }
            HEAP32[$stack$2$i>>2] = $61;
            $154 = ((($stack$2$i)) + 4|0);
            HEAP32[$154>>2] = $65;
            $155 = HEAP32[$133>>2]|0;
            $156 = ((($stack$2$i)) + 8|0);
            HEAP32[$156>>2] = $155;
            $157 = ((($trans_i$0118$i)) + 12|0);
            $158 = HEAP32[$157>>2]|0;
            $159 = ((($stack$2$i)) + 12|0);
            HEAP32[$159>>2] = $158;
            $160 = HEAP32[$next_c$i>>2]|0;
            $161 = ((($stack$2$i)) + 16|0);
            HEAP32[$161>>2] = $160;
            $162 = HEAP32[$6>>2]|0;
            $163 = ($162|0)>(0);
            if ($163) {
             $164 = ((($stack$2$i)) + 20|0);
             $165 = HEAP32[$164>>2]|0;
             $i1$0108$i = 0;
             while(1) {
              $166 = (($tags$0$i) + ($i1$0108$i<<2)|0);
              $167 = HEAP32[$166>>2]|0;
              $168 = (($165) + ($i1$0108$i<<2)|0);
              HEAP32[$168>>2] = $167;
              $169 = (($i1$0108$i) + 1)|0;
              $170 = HEAP32[$6>>2]|0;
              $171 = ($169|0)<($170|0);
              if ($171) {
               $i1$0108$i = $169;
              } else {
               break;
              }
             }
            }
            $172 = ((($trans_i$0118$i)) + 16|0);
            $173 = HEAP32[$172>>2]|0;
            $174 = ($173|0)==(0|0);
            if ($174) {
             $next_tags$1$i = $next_tags$0115$i;$stack$3$i = $stack$2$i;$state$1$i = $state$0114$i;
             break;
            }
            $175 = HEAP32[$173>>2]|0;
            $176 = ($175|0)>(-1);
            if (!($176)) {
             $next_tags$1$i = $next_tags$0115$i;$stack$3$i = $stack$2$i;$state$1$i = $state$0114$i;
             break;
            }
            $177 = ((($stack$2$i)) + 20|0);
            $178 = HEAP32[$177>>2]|0;
            $181 = $175;$tmp$0112$i = $173;
            while(1) {
             $179 = ((($tmp$0112$i)) + 4|0);
             $180 = (($178) + ($181<<2)|0);
             HEAP32[$180>>2] = $61;
             $182 = HEAP32[$179>>2]|0;
             $183 = ($182|0)>(-1);
             if ($183) {
              $181 = $182;$tmp$0112$i = $179;
             } else {
              $next_tags$1$i = $next_tags$0115$i;$stack$3$i = $stack$2$i;$state$1$i = $state$0114$i;
              break;
             }
            }
           }
          } while(0);
          $184 = ((($trans_i$0118$i)) + 32|0);
          $185 = ((($trans_i$0118$i)) + 40|0);
          $186 = HEAP32[$185>>2]|0;
          $187 = ($186|0)==(0|0);
          if ($187) {
           $next_tags$1$i$lcssa = $next_tags$1$i;$stack$3$i$lcssa = $stack$3$i;$state$1$i$lcssa = $state$1$i;
           break;
          } else {
           $133 = $185;$next_tags$0115$i = $next_tags$1$i;$stack$1116$i = $stack$3$i;$state$0114$i = $state$1$i;$trans_i$0118$i = $184;
          }
         }
         $188 = ($next_tags$1$i$lcssa|0)==(0|0);
         if ($188) {
          $next_tags$3$i = 0;
         } else {
          $189 = HEAP32[$next_tags$1$i$lcssa>>2]|0;
          $190 = ($189|0)>(-1);
          if ($190) {
           $192 = $189;$next_tags$2125$i = $next_tags$1$i$lcssa;
           while(1) {
            $191 = (($tags$0$i) + ($192<<2)|0);
            HEAP32[$191>>2] = $61;
            $193 = ((($next_tags$2125$i)) + 4|0);
            $194 = HEAP32[$193>>2]|0;
            $195 = ($194|0)>(-1);
            if ($195) {
             $192 = $194;$next_tags$2125$i = $193;
            } else {
             $next_tags$3$i = $193;
             break;
            }
           }
          } else {
           $next_tags$3$i = $next_tags$1$i$lcssa;
          }
         }
         $196 = ($state$1$i$lcssa|0)==(0|0);
         if ($196) {
          $match_eo$2$i = $match_eo$0$i;$next_tags$8$i = $next_tags$3$i;$pos_add_next$6$i = $pos_add_next$1$i;$stack$8$i = $stack$3$i$lcssa;
          label = 173;
         } else {
          $match_eo$1$ph$i = $match_eo$0$i;$next_tags$4$ph$i = $next_tags$3$i;$pos$0$ph$i = $61;$pos_add_next$2$ph$i = $pos_add_next$1$i;$stack$4$ph$i = $stack$3$i$lcssa;$state$2$ph$i = $state$1$i$lcssa;$str_byte$1$ph$i = $65;
         }
        }
        L315: while(1) {
         if ((label|0) == 173) {
          label = 0;
          $420 = ((($stack$8$i)) + 24|0);
          $421 = HEAP32[$420>>2]|0;
          $422 = ($421|0)==(0|0);
          if ($422) {
           break;
          }
          $423 = ((($stack$8$i)) + 8|0);
          $424 = HEAP32[$423>>2]|0;
          $425 = ((($424)) + 20|0);
          $426 = HEAP32[$425>>2]|0;
          $427 = $426 & 256;
          $428 = ($427|0)==(0);
          if (!($428)) {
           $429 = ((($stack$8$i)) + 12|0);
           $430 = HEAP32[$429>>2]|0;
           $431 = (($states_seen$0$ph$i) + ($430<<2)|0);
           HEAP32[$431>>2] = 0;
          }
          $432 = HEAP32[$stack$8$i>>2]|0;
          $433 = ((($stack$8$i)) + 4|0);
          $434 = HEAP32[$433>>2]|0;
          $435 = ((($stack$8$i)) + 16|0);
          $436 = HEAP32[$435>>2]|0;
          HEAP32[$next_c$i>>2] = $436;
          $437 = HEAP32[$6>>2]|0;
          $438 = ($437|0)>(0);
          if (!($438)) {
           $match_eo$1$ph$i = $match_eo$2$i;$next_tags$4$ph$i = $next_tags$8$i;$pos$0$ph$i = $432;$pos_add_next$2$ph$i = $pos_add_next$6$i;$stack$4$ph$i = $421;$state$2$ph$i = $424;$str_byte$1$ph$i = $434;
           continue;
          }
          $439 = ((($stack$8$i)) + 20|0);
          $440 = HEAP32[$439>>2]|0;
          $i6$0128$i = 0;
          while(1) {
           $441 = (($440) + ($i6$0128$i<<2)|0);
           $442 = HEAP32[$441>>2]|0;
           $443 = (($tags$0$i) + ($i6$0128$i<<2)|0);
           HEAP32[$443>>2] = $442;
           $444 = (($i6$0128$i) + 1)|0;
           $exitcond89 = ($444|0)==($437|0);
           if ($exitcond89) {
            $match_eo$1$ph$i = $match_eo$2$i;$next_tags$4$ph$i = $next_tags$8$i;$pos$0$ph$i = $432;$pos_add_next$2$ph$i = $pos_add_next$6$i;$stack$4$ph$i = $421;$state$2$ph$i = $424;$str_byte$1$ph$i = $434;
            continue L315;
           } else {
            $i6$0128$i = $444;
           }
          }
         }
         $197 = HEAP32[$44>>2]|0;
         $198 = ($state$2$ph$i|0)==($197|0);
         if ($198) {
          $next_tags$4$lcssa$i = $next_tags$4$ph$i;$pos$0$lcssa$i = $pos$0$ph$i;$pos_add_next$2$lcssa$i = $pos_add_next$2$ph$i;$stack$4$lcssa$i = $stack$4$ph$i;
         } else {
          $next_tags$4158$i = $next_tags$4$ph$i;$pos$0162$i = $pos$0$ph$i;$pos_add_next$2160$i = $pos_add_next$2$ph$i;$stack$4159$i = $stack$4$ph$i;$state$2157$i = $state$2$ph$i;$str_byte$1163$i = $str_byte$1$ph$i;
          while(1) {
           $213 = ((($state$2157$i)) + 8|0);
           $214 = HEAP32[$213>>2]|0;
           $215 = ($214|0)==(0|0);
           do {
            if ($215) {
             label = 97;
            } else {
             $216 = ((($state$2157$i)) + 20|0);
             $217 = HEAP32[$216>>2]|0;
             $218 = $217 & 256;
             $219 = ($218|0)==(0);
             if ($219) {
              label = 97;
              break;
             }
             $220 = ((($state$2157$i)) + 24|0);
             $221 = HEAP32[$220>>2]|0;
             $222 = (($221) + 1)|0;
             $223 = HEAP32[$2>>2]|0;
             $224 = $223 & -9;
             _tre_fill_pmatch($222,$pmatch$0$i,$224,$1,$tags$0$i,$pos$0162$i);
             $225 = (($pmatch$0$i) + ($221<<3)|0);
             $226 = HEAP32[$225>>2]|0;
             $227 = (((($pmatch$0$i) + ($221<<3)|0)) + 4|0);
             $228 = HEAP32[$227>>2]|0;
             $229 = (($228) - ($226))|0;
             $230 = (($string) + ($226)|0);
             $231 = ((($str_byte$1163$i)) + -1|0);
             $232 = (_strncmp($230,$231,$229)|0);
             $233 = ($232|0)==(0);
             if (!($233)) {
              $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4158$i;$pos_add_next$6$i = $pos_add_next$2160$i;$stack$8$i = $stack$4159$i;
              label = 173;
              continue L315;
             }
             $234 = ($228|0)==($226|0);
             $$$i = $234&1;
             $235 = ((($state$2157$i)) + 12|0);
             $236 = HEAP32[$235>>2]|0;
             $237 = (($states_seen$0$ph$i) + ($236<<2)|0);
             if ($234) {
              $238 = HEAP32[$237>>2]|0;
              $239 = ($238|0)==(0);
              if (!($239)) {
               $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4158$i;$pos_add_next$6$i = $pos_add_next$2160$i;$stack$8$i = $stack$4159$i;
               label = 173;
               continue L315;
              }
             }
             HEAP32[$237>>2] = $$$i;
             $240 = (($229) + -1)|0;
             $241 = (($str_byte$1163$i) + ($240)|0);
             $242 = (($240) + ($pos$0162$i))|0;
             $243 = HEAP32[$next_c$i>>2]|0;
             $244 = (_mbtowc($next_c$i,$241,4)|0);
             $245 = ($244|0)<(1);
             if ($245) {
              $246 = ($244|0)<(0);
              if ($246) {
               $838 = 0;$pmatch$1$i = $pmatch$0$i;$ret$0$i = 1;$states_seen$1$i = $states_seen$0$ph$i;$tags$1$i = $tags$0$i;
               break L225;
              } else {
               $pos_add_next$3$i = 1;
              }
             } else {
              $pos_add_next$3$i = $244;
             }
             $$sum$i = (($pos_add_next$3$i) + ($240))|0;
             $$pn$i = $242;$$sum$pn$i = $$sum$i;$pos_add_next$5$i = $pos_add_next$3$i;$prev_c$0$i = $243;
            }
           } while(0);
           do {
            if ((label|0) == 97) {
             label = 0;
             $247 = HEAP32[$next_c$i>>2]|0;
             $248 = ($247|0)==(0);
             if ($248) {
              $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4158$i;$pos_add_next$6$i = $pos_add_next$2160$i;$stack$8$i = $stack$4159$i;
              label = 173;
              continue L315;
             }
             $249 = (_mbtowc($next_c$i,$str_byte$1163$i,4)|0);
             $250 = ($249|0)<(1);
             if (!($250)) {
              $$pn$i = $pos$0162$i;$$sum$pn$i = $249;$pos_add_next$5$i = $249;$prev_c$0$i = $247;
              break;
             }
             $251 = ($249|0)<(0);
             if ($251) {
              $838 = 0;$pmatch$1$i = $pmatch$0$i;$ret$0$i = 1;$states_seen$1$i = $states_seen$0$ph$i;$tags$1$i = $tags$0$i;
              break L225;
             } else {
              $$pn$i = $pos$0162$i;$$sum$pn$i = 1;$pos_add_next$5$i = 1;$prev_c$0$i = $247;
             }
            }
           } while(0);
           $str_byte$2$i = (($str_byte$1163$i) + ($$sum$pn$i)|0);
           $pos$1$i = (($$pn$i) + ($pos_add_next$2160$i))|0;
           $252 = HEAP32[$213>>2]|0;
           $253 = ($252|0)==(0|0);
           if ($253) {
            $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4158$i;$pos_add_next$6$i = $pos_add_next$5$i;$stack$8$i = $stack$4159$i;
            label = 173;
            continue L315;
           }
           $254 = ($pos$1$i|0)!=(0);
           $255 = ($prev_c$0$i|0)==(95);
           $256 = ($pos$1$i|0)==(0);
           $257 = ($pos$1$i|0)>(0);
           $or$cond24$i = $49 | $257;
           $258 = ($prev_c$0$i|0)==(10);
           $or$cond27$i = $48 & $258;
           $or$cond24$not$i = $or$cond24$i ^ 1;
           $354 = $213;$next_state$0147$i = 0;$next_tags$5140$i = $next_tags$4158$i;$stack$5141$i = $stack$4159$i;$trans_i$1144$i = $state$2157$i;
           while(1) {
            $259 = HEAP32[$trans_i$1144$i>>2]|0;
            $260 = ($259>>>0)>($prev_c$0$i>>>0);
            L347: do {
             if ($260) {
              $next_state$1$i = $next_state$0147$i;$next_tags$6$i = $next_tags$5140$i;$stack$7$i = $stack$5141$i;
             } else {
              $261 = ((($trans_i$1144$i)) + 4|0);
              $262 = HEAP32[$261>>2]|0;
              $263 = ($262>>>0)<($prev_c$0$i>>>0);
              if ($263) {
               $next_state$1$i = $next_state$0147$i;$next_tags$6$i = $next_tags$5140$i;$stack$7$i = $stack$5141$i;
               break;
              }
              $264 = ((($trans_i$1144$i)) + 20|0);
              $265 = HEAP32[$264>>2]|0;
              $266 = ($265|0)==(0);
              do {
               if (!($266)) {
                $267 = $265 & 1;
                $268 = ($267|0)==(0);
                $brmerge202$i = $268 | $or$cond24$not$i;
                $brmerge203$i = $or$cond27$i | $brmerge202$i;
                if (!($brmerge203$i)) {
                 $next_state$1$i = $next_state$0147$i;$next_tags$6$i = $next_tags$5140$i;$stack$7$i = $stack$5141$i;
                 break L347;
                }
                $269 = $265 & 2;
                $270 = ($269|0)==(0);
                if (!($270)) {
                 $271 = HEAP32[$next_c$i>>2]|0;
                 $272 = $271 | $17;
                 $273 = ($272|0)==(0);
                 $274 = ($271|0)==(10);
                 $or$cond33$i = $48 & $274;
                 $or$cond205$i = $273 | $or$cond33$i;
                 if (!($or$cond205$i)) {
                  $next_state$1$i = $next_state$0147$i;$next_tags$6$i = $next_tags$5140$i;$stack$7$i = $stack$5141$i;
                  break L347;
                 }
                }
                $275 = $265 & 16;
                $276 = ($275|0)==(0);
                do {
                 if (!($276)) {
                  if ($255) {
                   $next_state$1$i = $next_state$0147$i;$next_tags$6$i = $next_tags$5140$i;$stack$7$i = $stack$5141$i;
                   break L347;
                  }
                  $277 = (_iswalnum($prev_c$0$i)|0);
                  $278 = ($277|0)==(0);
                  if (!($278)) {
                   $next_state$1$i = $next_state$0147$i;$next_tags$6$i = $next_tags$5140$i;$stack$7$i = $stack$5141$i;
                   break L347;
                  }
                  $279 = HEAP32[$next_c$i>>2]|0;
                  $280 = ($279|0)==(95);
                  if ($280) {
                   break;
                  }
                  $281 = (_iswalnum($279)|0);
                  $282 = ($281|0)==(0);
                  if ($282) {
                   $next_state$1$i = $next_state$0147$i;$next_tags$6$i = $next_tags$5140$i;$stack$7$i = $stack$5141$i;
                   break L347;
                  }
                 }
                } while(0);
                $283 = HEAP32[$264>>2]|0;
                $284 = $283 & 32;
                $285 = ($284|0)==(0);
                if ($285) {
                 $294 = $283;
                } else {
                 if ($255) {
                  $$old34$i = HEAP32[$next_c$i>>2]|0;
                  $$old35$i = ($$old34$i|0)==(95);
                  if ($$old35$i) {
                   $next_state$1$i = $next_state$0147$i;$next_tags$6$i = $next_tags$5140$i;$stack$7$i = $stack$5141$i;
                   break L347;
                  } else {
                   $290 = $$old34$i;
                  }
                 } else {
                  $286 = (_iswalnum($prev_c$0$i)|0);
                  $287 = ($286|0)==(0);
                  $288 = HEAP32[$next_c$i>>2]|0;
                  $289 = ($288|0)==(95);
                  $or$cond36$i = $287 | $289;
                  if ($or$cond36$i) {
                   $next_state$1$i = $next_state$0147$i;$next_tags$6$i = $next_tags$5140$i;$stack$7$i = $stack$5141$i;
                   break L347;
                  } else {
                   $290 = $288;
                  }
                 }
                 $291 = (_iswalnum($290)|0);
                 $292 = ($291|0)==(0);
                 if (!($292)) {
                  $next_state$1$i = $next_state$0147$i;$next_tags$6$i = $next_tags$5140$i;$stack$7$i = $stack$5141$i;
                  break L347;
                 }
                 $$pre185$i = HEAP32[$264>>2]|0;
                 $294 = $$pre185$i;
                }
                $293 = $294 & 64;
                $295 = ($293|0)!=(0);
                $or$cond39$i = $254 & $295;
                $296 = HEAP32[$next_c$i>>2]|0;
                $297 = ($296|0)!=(0);
                $or$cond42$i = $297 & $or$cond39$i;
                do {
                 if ($or$cond42$i) {
                  if ($255) {
                   $300 = $296;$304 = 1;
                  } else {
                   $298 = (_iswalnum($prev_c$0$i)|0);
                   $299 = ($298|0)!=(0);
                   $$pre186$i = HEAP32[$next_c$i>>2]|0;
                   $300 = $$pre186$i;$304 = $299;
                  }
                  $301 = ($300|0)==(95);
                  if ($301) {
                   if ($304) {
                    $next_state$1$i = $next_state$0147$i;$next_tags$6$i = $next_tags$5140$i;$stack$7$i = $stack$5141$i;
                    break L347;
                   } else {
                    break;
                   }
                  } else {
                   $302 = (_iswalnum($300)|0);
                   $303 = ($302|0)!=(0);
                   $tmp$i = $304 ^ $303;
                   if ($tmp$i) {
                    break;
                   } else {
                    $next_state$1$i = $next_state$0147$i;$next_tags$6$i = $next_tags$5140$i;$stack$7$i = $stack$5141$i;
                    break L347;
                   }
                  }
                 }
                } while(0);
                $305 = HEAP32[$264>>2]|0;
                $306 = $305 & 128;
                $307 = ($306|0)==(0);
                do {
                 if (!($307)) {
                  $308 = HEAP32[$next_c$i>>2]|0;
                  $309 = ($308|0)==(0);
                  $or$cond45$i = $256 | $309;
                  if ($or$cond45$i) {
                   $next_state$1$i = $next_state$0147$i;$next_tags$6$i = $next_tags$5140$i;$stack$7$i = $stack$5141$i;
                   break L347;
                  }
                  if ($255) {
                   $312 = $308;$317 = 1;
                  } else {
                   $310 = (_iswalnum($prev_c$0$i)|0);
                   $311 = ($310|0)!=(0);
                   $$pre187$i = HEAP32[$next_c$i>>2]|0;
                   $312 = $$pre187$i;$317 = $311;
                  }
                  $313 = ($312|0)==(95);
                  if ($313) {
                   if ($317) {
                    break;
                   } else {
                    $next_state$1$i = $next_state$0147$i;$next_tags$6$i = $next_tags$5140$i;$stack$7$i = $stack$5141$i;
                    break L347;
                   }
                  } else {
                   $314 = (_iswalnum($312)|0);
                   $315 = ($314|0)!=(0);
                   $316 = $317 ^ $315;
                   if ($316) {
                    $next_state$1$i = $next_state$0147$i;$next_tags$6$i = $next_tags$5140$i;$stack$7$i = $stack$5141$i;
                    break L347;
                   } else {
                    break;
                   }
                  }
                 }
                } while(0);
                $318 = HEAP32[$264>>2]|0;
                $319 = $318 & 4;
                $320 = ($319|0)==(0);
                do {
                 if ($320) {
                  $329 = $318;
                 } else {
                  $321 = HEAP32[$2>>2]|0;
                  $322 = $321 & 2;
                  $323 = ($322|0)==(0);
                  if (!($323)) {
                   $329 = $318;
                   break;
                  }
                  $324 = ((($trans_i$1144$i)) + 24|0);
                  $325 = HEAP32[$324>>2]|0;
                  $326 = (_iswctype($prev_c$0$i,$325)|0);
                  $327 = ($326|0)==(0);
                  if ($327) {
                   $next_state$1$i = $next_state$0147$i;$next_tags$6$i = $next_tags$5140$i;$stack$7$i = $stack$5141$i;
                   break L347;
                  }
                  $$pre189$i = HEAP32[$264>>2]|0;
                  $329 = $$pre189$i;
                 }
                } while(0);
                $328 = $329 & 4;
                $330 = ($328|0)==(0);
                do {
                 if (!($330)) {
                  $331 = HEAP32[$2>>2]|0;
                  $332 = $331 & 2;
                  $333 = ($332|0)==(0);
                  if ($333) {
                   break;
                  }
                  $334 = (_towlower($prev_c$0$i)|0);
                  $335 = ((($trans_i$1144$i)) + 24|0);
                  $336 = HEAP32[$335>>2]|0;
                  $337 = (_iswctype($334,$336)|0);
                  $338 = ($337|0)==(0);
                  if (!($338)) {
                   break;
                  }
                  $339 = (_towupper($prev_c$0$i)|0);
                  $340 = HEAP32[$335>>2]|0;
                  $341 = (_iswctype($339,$340)|0);
                  $342 = ($341|0)==(0);
                  if ($342) {
                   $next_state$1$i = $next_state$0147$i;$next_tags$6$i = $next_tags$5140$i;$stack$7$i = $stack$5141$i;
                   break L347;
                  }
                 }
                } while(0);
                $343 = HEAP32[$264>>2]|0;
                $344 = $343 & 8;
                $345 = ($344|0)==(0);
                if ($345) {
                 break;
                }
                $346 = ((($trans_i$1144$i)) + 28|0);
                $347 = HEAP32[$346>>2]|0;
                $348 = HEAP32[$2>>2]|0;
                $349 = $348 & 2;
                $350 = (_tre_neg_char_classes_match($347,$prev_c$0$i,$349)|0);
                $351 = ($350|0)==(0);
                if (!($351)) {
                 $next_state$1$i = $next_state$0147$i;$next_tags$6$i = $next_tags$5140$i;$stack$7$i = $stack$5141$i;
                 break L347;
                }
               }
              } while(0);
              $352 = ($next_state$0147$i|0)==(0|0);
              if ($352) {
               $353 = HEAP32[$354>>2]|0;
               $355 = ((($trans_i$1144$i)) + 16|0);
               $356 = HEAP32[$355>>2]|0;
               $next_state$1$i = $353;$next_tags$6$i = $356;$stack$7$i = $stack$5141$i;
               break;
              }
              $357 = ((($stack$5141$i)) + 28|0);
              $358 = HEAP32[$357>>2]|0;
              $359 = ($358|0)==(0|0);
              if ($359) {
               $360 = (___tre_mem_alloc_impl($20,0,0,0,32)|0);
               $361 = ($360|0)==(0|0);
               if ($361) {
                label = 146;
                break L233;
               }
               $365 = ((($360)) + 24|0);
               HEAP32[$365>>2] = $stack$5141$i;
               $366 = ((($360)) + 28|0);
               HEAP32[$366>>2] = 0;
               $367 = HEAP32[$6>>2]|0;
               $368 = $367 << 2;
               $369 = (___tre_mem_alloc_impl($20,0,0,0,$368)|0);
               $370 = ((($360)) + 20|0);
               HEAP32[$370>>2] = $369;
               $371 = ($369|0)==(0|0);
               if ($371) {
                label = 153;
                break L233;
               }
               HEAP32[$357>>2] = $360;
               $stack$6$i = $360;
              } else {
               $stack$6$i = $358;
              }
              HEAP32[$stack$6$i>>2] = $pos$1$i;
              $375 = ((($stack$6$i)) + 4|0);
              HEAP32[$375>>2] = $str_byte$2$i;
              $376 = HEAP32[$354>>2]|0;
              $377 = ((($stack$6$i)) + 8|0);
              HEAP32[$377>>2] = $376;
              $378 = ((($trans_i$1144$i)) + 12|0);
              $379 = HEAP32[$378>>2]|0;
              $380 = ((($stack$6$i)) + 12|0);
              HEAP32[$380>>2] = $379;
              $381 = HEAP32[$next_c$i>>2]|0;
              $382 = ((($stack$6$i)) + 16|0);
              HEAP32[$382>>2] = $381;
              $383 = HEAP32[$6>>2]|0;
              $384 = ($383|0)>(0);
              if ($384) {
               $385 = ((($stack$6$i)) + 20|0);
               $386 = HEAP32[$385>>2]|0;
               $i3$0132$i = 0;
               while(1) {
                $387 = (($tags$0$i) + ($i3$0132$i<<2)|0);
                $388 = HEAP32[$387>>2]|0;
                $389 = (($386) + ($i3$0132$i<<2)|0);
                HEAP32[$389>>2] = $388;
                $390 = (($i3$0132$i) + 1)|0;
                $391 = HEAP32[$6>>2]|0;
                $392 = ($390|0)<($391|0);
                if ($392) {
                 $i3$0132$i = $390;
                } else {
                 break;
                }
               }
              }
              $393 = ((($trans_i$1144$i)) + 16|0);
              $394 = HEAP32[$393>>2]|0;
              $395 = ($394|0)==(0|0);
              if ($395) {
               $next_state$1$i = $next_state$0147$i;$next_tags$6$i = $next_tags$5140$i;$stack$7$i = $stack$6$i;
               break;
              }
              $396 = HEAP32[$394>>2]|0;
              $397 = ($396|0)>(-1);
              if (!($397)) {
               $next_state$1$i = $next_state$0147$i;$next_tags$6$i = $next_tags$5140$i;$stack$7$i = $stack$6$i;
               break;
              }
              $398 = ((($stack$6$i)) + 20|0);
              $399 = HEAP32[$398>>2]|0;
              $401 = $396;$tmp5$0136$i71 = $394;
              while(1) {
               $400 = (($399) + ($401<<2)|0);
               HEAP32[$400>>2] = $pos$1$i;
               $402 = ((($tmp5$0136$i71)) + 4|0);
               $403 = HEAP32[$402>>2]|0;
               $404 = ($403|0)>(-1);
               if ($404) {
                $401 = $403;$tmp5$0136$i71 = $402;
               } else {
                $next_state$1$i = $next_state$0147$i;$next_tags$6$i = $next_tags$5140$i;$stack$7$i = $stack$6$i;
                break;
               }
              }
             }
            } while(0);
            $405 = ((($trans_i$1144$i)) + 32|0);
            $406 = ((($trans_i$1144$i)) + 40|0);
            $407 = HEAP32[$406>>2]|0;
            $408 = ($407|0)==(0|0);
            if ($408) {
             $next_state$1$i$lcssa = $next_state$1$i;$next_tags$6$i$lcssa = $next_tags$6$i;$stack$7$i$lcssa = $stack$7$i;
             break;
            } else {
             $354 = $406;$next_state$0147$i = $next_state$1$i;$next_tags$5140$i = $next_tags$6$i;$stack$5141$i = $stack$7$i;$trans_i$1144$i = $405;
            }
           }
           $409 = ($next_state$1$i$lcssa|0)==(0|0);
           if ($409) {
            $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$6$i$lcssa;$pos_add_next$6$i = $pos_add_next$5$i;$stack$8$i = $stack$7$i$lcssa;
            label = 173;
            continue L315;
           }
           $410 = ($next_tags$6$i$lcssa|0)==(0|0);
           do {
            if ($410) {
             $next_tags$4$be$i = 0;
            } else {
             $413 = HEAP32[$next_tags$6$i$lcssa>>2]|0;
             $414 = ($413|0)>(-1);
             if ($414) {
              $417 = $413;$next_tags$7154$i = $next_tags$6$i$lcssa;
             } else {
              $next_tags$4$be$i = $next_tags$6$i$lcssa;
              break;
             }
             while(1) {
              $415 = ((($next_tags$7154$i)) + 4|0);
              $416 = (($tags$0$i) + ($417<<2)|0);
              HEAP32[$416>>2] = $pos$1$i;
              $418 = HEAP32[$415>>2]|0;
              $419 = ($418|0)>(-1);
              if ($419) {
               $417 = $418;$next_tags$7154$i = $415;
              } else {
               $next_tags$4$be$i = $415;
               break;
              }
             }
            }
           } while(0);
           $411 = HEAP32[$44>>2]|0;
           $412 = ($next_state$1$i$lcssa|0)==($411|0);
           if ($412) {
            $next_tags$4$lcssa$i = $next_tags$4$be$i;$pos$0$lcssa$i = $pos$1$i;$pos_add_next$2$lcssa$i = $pos_add_next$5$i;$stack$4$lcssa$i = $stack$7$i$lcssa;
            break;
           } else {
            $next_tags$4158$i = $next_tags$4$be$i;$pos$0162$i = $pos$1$i;$pos_add_next$2160$i = $pos_add_next$5$i;$stack$4159$i = $stack$7$i$lcssa;$state$2157$i = $next_state$1$i$lcssa;$str_byte$1163$i = $str_byte$2$i;
           }
          }
         }
         $199 = ($match_eo$1$ph$i|0)<($pos$0$lcssa$i|0);
         if (!($199)) {
          $200 = ($match_eo$1$ph$i|0)==($pos$0$lcssa$i|0);
          $or$cond21$i = $46 & $200;
          if (!($or$cond21$i)) {
           $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4$lcssa$i;$pos_add_next$6$i = $pos_add_next$2$lcssa$i;$stack$8$i = $stack$4$lcssa$i;
           label = 173;
           continue;
          }
          $201 = HEAP32[$6>>2]|0;
          $202 = HEAP32[$47>>2]|0;
          $203 = (_tre_tag_order($201,$202,$tags$0$i,$tags$0)|0);
          $204 = ($203|0)==(0);
          if ($204) {
           $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4$lcssa$i;$pos_add_next$6$i = $pos_add_next$2$lcssa$i;$stack$8$i = $stack$4$lcssa$i;
           label = 173;
           continue;
          }
         }
         if ($45) {
          $match_eo$2$i = $pos$0$lcssa$i;$next_tags$8$i = $next_tags$4$lcssa$i;$pos_add_next$6$i = $pos_add_next$2$lcssa$i;$stack$8$i = $stack$4$lcssa$i;
          label = 173;
          continue;
         }
         $205 = HEAP32[$6>>2]|0;
         $206 = ($205|0)>(0);
         if ($206) {
          $i2$0170$i = 0;
         } else {
          $match_eo$2$i = $pos$0$lcssa$i;$next_tags$8$i = $next_tags$4$lcssa$i;$pos_add_next$6$i = $pos_add_next$2$lcssa$i;$stack$8$i = $stack$4$lcssa$i;
          label = 173;
          continue;
         }
         while(1) {
          $207 = (($tags$0$i) + ($i2$0170$i<<2)|0);
          $208 = HEAP32[$207>>2]|0;
          $209 = (($tags$0) + ($i2$0170$i<<2)|0);
          HEAP32[$209>>2] = $208;
          $210 = (($i2$0170$i) + 1)|0;
          $211 = HEAP32[$6>>2]|0;
          $212 = ($210|0)<($211|0);
          if ($212) {
           $i2$0170$i = $210;
          } else {
           $match_eo$2$i = $pos$0$lcssa$i;$next_tags$8$i = $next_tags$4$lcssa$i;$pos_add_next$6$i = $pos_add_next$2$lcssa$i;$stack$8$i = $stack$4$lcssa$i;
           label = 173;
           continue L315;
          }
         }
        }
        $445 = ($match_eo$2$i|0)>(-1);
        $446 = HEAP32[$next_c$i>>2]|0;
        $447 = ($446|0)==(0);
        $or$cond48$i = $445 | $447;
        if ($or$cond48$i) {
         $match_eo$2$i$lcssa = $match_eo$2$i;
         label = 181;
         break;
        }
        HEAP32[$next_c$i>>2] = $66;
        $$pre$i = HEAP32[$6>>2]|0;
        $50 = $$pre$i;$72 = $66;$match_eo$0$i = $match_eo$2$i;$pos_add_next$0$i = $pos_add_next$6$i;$pos_start$0$i = $61;$stack$0$i = $stack$8$i;$str_byte$0$i = $65;
       }
       if ((label|0) == 56) {
        ___tre_mem_destroy($20);
        $141 = ($tags$0$i|0)==(0|0);
        if (!($141)) {
         _free($tags$0$i);
        }
        $142 = ($pmatch$0$i|0)==(0|0);
        if (!($142)) {
         _free($pmatch$0$i);
        }
        $143 = ($states_seen$0$ph$i|0)==(0|0);
        if ($143) {
         $$0$i = 12;$837 = 0;
         break L218;
        }
        _free($states_seen$0$ph$i);
        $$0$i = 12;$837 = 0;
        break L218;
       }
       else if ((label|0) == 63) {
        ___tre_mem_destroy($20);
        $151 = ($tags$0$i|0)==(0|0);
        if (!($151)) {
         _free($tags$0$i);
        }
        $152 = ($pmatch$0$i|0)==(0|0);
        if (!($152)) {
         _free($pmatch$0$i);
        }
        $153 = ($states_seen$0$ph$i|0)==(0|0);
        if ($153) {
         $$0$i = 12;$837 = 0;
         break L218;
        }
        _free($states_seen$0$ph$i);
        $$0$i = 12;$837 = 0;
        break L218;
       }
       else if ((label|0) == 146) {
        ___tre_mem_destroy($20);
        $362 = ($tags$0$i|0)==(0|0);
        if (!($362)) {
         _free($tags$0$i);
        }
        $363 = ($pmatch$0$i|0)==(0|0);
        if (!($363)) {
         _free($pmatch$0$i);
        }
        $364 = ($states_seen$0$ph$i|0)==(0|0);
        if ($364) {
         $$0$i = 12;$837 = 0;
         break L218;
        }
        _free($states_seen$0$ph$i);
        $$0$i = 12;$837 = 0;
        break L218;
       }
       else if ((label|0) == 153) {
        ___tre_mem_destroy($20);
        $372 = ($tags$0$i|0)==(0|0);
        if (!($372)) {
         _free($tags$0$i);
        }
        $373 = ($pmatch$0$i|0)==(0|0);
        if (!($373)) {
         _free($pmatch$0$i);
        }
        $374 = ($states_seen$0$ph$i|0)==(0|0);
        if ($374) {
         $$0$i = 12;$837 = 0;
         break L218;
        }
        _free($states_seen$0$ph$i);
        $$0$i = 12;$837 = 0;
        break L218;
       }
       else if ((label|0) == 181) {
        $match_eo$2$lobit$i = $match_eo$2$i$lcssa >>> 31;
        $838 = $match_eo$2$i$lcssa;$pmatch$1$i = $pmatch$0$i;$ret$0$i = $match_eo$2$lobit$i;$states_seen$1$i = $states_seen$0$ph$i;$tags$1$i = $tags$0$i;
        break;
       }
      }
     } while(0);
     ___tre_mem_destroy($20);
     $448 = ($tags$1$i|0)==(0|0);
     if (!($448)) {
      _free($tags$1$i);
     }
     $449 = ($pmatch$1$i|0)==(0|0);
     if (!($449)) {
      _free($pmatch$1$i);
     }
     $450 = ($states_seen$1$i|0)==(0|0);
     if ($450) {
      $$0$i = $ret$0$i;$837 = $838;
     } else {
      _free($states_seen$1$i);
      $$0$i = $ret$0$i;$837 = $838;
     }
    }
   } while(0);
   $835 = $837;$status$0 = $$0$i;
  }
  $833 = ($status$0|0)==(0);
  if ($833) {
   $834 = HEAP32[$2>>2]|0;
   _tre_fill_pmatch($nmatch$,$pmatch,$834,$1,$tags$0,$835);
  }
  $836 = ($tags$0|0)==(0|0);
  if ($836) {
   $$0 = $status$0;
  } else {
   _free($tags$0);
   $$0 = $status$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___tre_mem_new_impl($provided,$provided_block) {
 $provided = $provided|0;
 $provided_block = $provided_block|0;
 var $0 = 0, $1 = 0, $mem$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($provided|0)==(0);
 if ($0) {
  $1 = (_calloc(1,24)|0);
  $mem$0$in = $1;
 } else {
  ;HEAP32[$provided_block>>2]=0|0;HEAP32[$provided_block+4>>2]=0|0;HEAP32[$provided_block+8>>2]=0|0;HEAP32[$provided_block+12>>2]=0|0;HEAP32[$provided_block+16>>2]=0|0;HEAP32[$provided_block+20>>2]=0|0;
  $mem$0$in = $provided_block;
 }
 return ($mem$0$in|0);
}
function ___tre_mem_destroy($mem) {
 $mem = $mem|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $l$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$mem>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $l$01 = $0;
  while(1) {
   $2 = HEAP32[$l$01>>2]|0;
   _free($2);
   $3 = ((($l$01)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   _free($l$01);
   $5 = ($4|0)==(0|0);
   if ($5) {
    break;
   } else {
    $l$01 = $4;
   }
  }
 }
 _free($mem);
 return;
}
function ___tre_mem_alloc_impl($mem,$provided,$provided_block,$zero,$size) {
 $mem = $mem|0;
 $provided = $provided|0;
 $provided_block = $provided_block|0;
 $zero = $zero|0;
 $size = $size|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($mem)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $3 = ((($mem)) + 12|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4>>>0)<($size>>>0);
   do {
    if ($5) {
     $6 = ($provided|0)==(0);
     if (!($6)) {
      $7 = ($provided_block|0)==(0|0);
      if ($7) {
       HEAP32[$0>>2] = 1;
       $$0 = 0;
       break L1;
      } else {
       $8 = ((($mem)) + 8|0);
       HEAP32[$8>>2] = $provided_block;
       HEAP32[$3>>2] = 1024;
       $$pre$phiZ2D = $8;$24 = $provided_block;$33 = 1024;
       break;
      }
     }
     $9 = $size << 3;
     $10 = ($9>>>0)>(1024);
     $$ = $10 ? $9 : 1024;
     $11 = (_malloc(8)|0);
     $12 = ($11|0)==(0|0);
     if ($12) {
      HEAP32[$0>>2] = 1;
      $$0 = 0;
      break L1;
     }
     $13 = (_malloc($$)|0);
     HEAP32[$11>>2] = $13;
     $14 = ($13|0)==(0|0);
     $15 = $13;
     if ($14) {
      _free($11);
      HEAP32[$0>>2] = 1;
      $$0 = 0;
      break L1;
     }
     $16 = ((($11)) + 4|0);
     HEAP32[$16>>2] = 0;
     $17 = ((($mem)) + 4|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18|0)==(0|0);
     if (!($19)) {
      $20 = ((($18)) + 4|0);
      HEAP32[$20>>2] = $11;
     }
     $21 = HEAP32[$mem>>2]|0;
     $22 = ($21|0)==(0|0);
     if ($22) {
      HEAP32[$mem>>2] = $11;
     }
     HEAP32[$17>>2] = $11;
     $23 = ((($mem)) + 8|0);
     HEAP32[$23>>2] = $15;
     HEAP32[$3>>2] = $$;
     $$pre$phiZ2D = $23;$24 = $13;$33 = $$;
    } else {
     $$phi$trans$insert = ((($mem)) + 8|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     $$pre$phiZ2D = $$phi$trans$insert;$24 = $$pre;$33 = $4;
    }
   } while(0);
   $25 = $24;
   $26 = (($25) + ($size))|0;
   $27 = $26 & 3;
   $28 = ($27|0)==(0);
   $29 = (4 - ($27))|0;
   $$1 = $28 ? 0 : $29;
   $30 = (($$1) + ($size))|0;
   $31 = (($24) + ($30)|0);
   HEAP32[$$pre$phiZ2D>>2] = $31;
   $32 = (($33) - ($30))|0;
   HEAP32[$3>>2] = $32;
   $34 = ($zero|0)==(0);
   if ($34) {
    $$0 = $24;
   } else {
    _memset(($24|0),0,($30|0))|0;
    $$0 = $24;
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 return ($$0|0);
}
function _poll($fds,$n,$timeout) {
 $fds = $fds|0;
 $n = $n|0;
 $timeout = $timeout|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fds;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $n;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $timeout;
 $0 = (___syscall168(168,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _pselect($n,$rfds,$wfds,$efds,$ts,$mask) {
 $n = $n|0;
 $rfds = $rfds|0;
 $wfds = $wfds|0;
 $efds = $efds|0;
 $ts = $ts|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $ts_tmp = 0, $ts_tmp$ = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $data = sp + 32|0;
 $ts_tmp = sp;
 $0 = $mask;
 HEAP32[$data>>2] = $0;
 $1 = ((($data)) + 4|0);
 HEAP32[$1>>2] = 8;
 $2 = ($ts|0)!=(0|0);
 if ($2) {
  $3 = $ts;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) + 4)|0;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = $ts_tmp;
  $10 = $9;
  HEAP32[$10>>2] = $5;
  $11 = (($9) + 4)|0;
  $12 = $11;
  HEAP32[$12>>2] = $8;
 }
 $ts_tmp$ = $2 ? $ts_tmp : 0;
 HEAP32[$vararg_buffer>>2] = $n;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $rfds;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $wfds;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $efds;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $ts_tmp$;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $data;
 $13 = (___syscall308(308,($vararg_buffer|0))|0);
 $14 = (___syscall_ret($13)|0);
 STACKTOP = sp;return ($14|0);
}
function _select($n,$rfds,$wfds,$efds,$tv) {
 $n = $n|0;
 $rfds = $rfds|0;
 $wfds = $wfds|0;
 $efds = $efds|0;
 $tv = $tv|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $n;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $rfds;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $wfds;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $efds;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $tv;
 $0 = (___syscall142(142,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _chmod($path,$mode) {
 $path = $path|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $mode;
 $0 = (___syscall15(15,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _fchmod($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $buf = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $buf = sp + 24|0;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $mode;
 $0 = (___syscall94(94,($vararg_buffer|0))|0);
 $1 = ($0|0)==(-9);
 if ($1) {
  HEAP32[$vararg_buffer2>>2] = $fd;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 1;
  $2 = (___syscall221(221,($vararg_buffer2|0))|0);
  $3 = ($2|0)<(0);
  if ($3) {
   label = 3;
  } else {
   ___procfdname($buf,$fd);
   HEAP32[$vararg_buffer6>>2] = $buf;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $mode;
   $5 = (___syscall15(15,($vararg_buffer6|0))|0);
   $6 = (___syscall_ret($5)|0);
   $$0 = $6;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $4 = (___syscall_ret($0)|0);
  $$0 = $4;
 }
 STACKTOP = sp;return ($$0|0);
}
function _fchmodat($fd,$path,$mode,$flag) {
 $fd = $fd|0;
 $path = $path|0;
 $mode = $mode|0;
 $flag = $flag|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $proc = 0, $ret$0 = 0, $st = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer15 = 0, $vararg_buffer21 = 0, $vararg_buffer26 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer26 = sp + 80|0;
 $vararg_buffer21 = sp + 64|0;
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $st = sp + 84|0;
 $proc = sp + 160|0;
 switch ($flag|0) {
 case 0:  {
  HEAP32[$vararg_buffer>>2] = $fd;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $path;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $mode;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = 0;
  $0 = (___syscall306(306,($vararg_buffer|0))|0);
  $1 = (___syscall_ret($0)|0);
  $$1 = $1;
  break;
 }
 case 256:  {
  HEAP32[$vararg_buffer4>>2] = $fd;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $path;
  $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = $st;
  $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
  HEAP32[$vararg_ptr9>>2] = 256;
  $3 = (___syscall300(300,($vararg_buffer4|0))|0);
  $4 = ($3|0)==(0);
  do {
   if ($4) {
    $6 = ((($st)) + 12|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = $7 & 61440;
    $9 = ($8|0)==(40960);
    if ($9) {
     $10 = (___syscall_ret(-95)|0);
     $$0 = $10;
     break;
    }
    HEAP32[$vararg_buffer10>>2] = $fd;
    $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
    HEAP32[$vararg_ptr13>>2] = $path;
    $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
    HEAP32[$vararg_ptr14>>2] = 2752768;
    $11 = (___syscall295(295,($vararg_buffer10|0))|0);
    $12 = ($11|0)<(0);
    if ($12) {
     $13 = ($11|0)==(-40);
     if ($13) {
      $14 = (___syscall_ret(-95)|0);
      $$0 = $14;
      break;
     } else {
      $15 = (___syscall_ret($11)|0);
      $$0 = $15;
      break;
     }
    }
    ___procfdname($proc,$11);
    HEAP32[$vararg_buffer15>>2] = -100;
    $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
    HEAP32[$vararg_ptr18>>2] = $proc;
    $vararg_ptr19 = ((($vararg_buffer15)) + 8|0);
    HEAP32[$vararg_ptr19>>2] = $st;
    $vararg_ptr20 = ((($vararg_buffer15)) + 12|0);
    HEAP32[$vararg_ptr20>>2] = 0;
    $16 = (___syscall300(300,($vararg_buffer15|0))|0);
    $17 = ($16|0)==(0);
    if ($17) {
     $18 = HEAP32[$6>>2]|0;
     $19 = $18 & 61440;
     $20 = ($19|0)==(40960);
     if ($20) {
      $ret$0 = -95;
     } else {
      HEAP32[$vararg_buffer21>>2] = -100;
      $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
      HEAP32[$vararg_ptr24>>2] = $proc;
      $vararg_ptr25 = ((($vararg_buffer21)) + 8|0);
      HEAP32[$vararg_ptr25>>2] = $mode;
      $21 = (___syscall306(306,($vararg_buffer21|0))|0);
      $ret$0 = $21;
     }
    } else {
     $ret$0 = $16;
    }
    HEAP32[$vararg_buffer26>>2] = $11;
    (___syscall6(6,($vararg_buffer26|0))|0);
    $22 = (___syscall_ret($ret$0)|0);
    $$0 = $22;
   } else {
    $5 = (___syscall_ret($3)|0);
    $$0 = $5;
   }
  } while(0);
  $$1 = $$0;
  break;
 }
 default: {
  $2 = (___syscall_ret(-22)|0);
  $$1 = $2;
 }
 }
 STACKTOP = sp;return ($$1|0);
}
function _fstat($fd,$st) {
 $fd = $fd|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $buf = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $buf = sp + 24|0;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $st;
 $0 = (___syscall197(197,($vararg_buffer|0))|0);
 $1 = ($0|0)==(-9);
 if ($1) {
  HEAP32[$vararg_buffer2>>2] = $fd;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 1;
  $2 = (___syscall221(221,($vararg_buffer2|0))|0);
  $3 = ($2|0)<(0);
  if ($3) {
   label = 3;
  } else {
   ___procfdname($buf,$fd);
   HEAP32[$vararg_buffer6>>2] = $buf;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $st;
   $5 = (___syscall195(195,($vararg_buffer6|0))|0);
   $6 = (___syscall_ret($5)|0);
   $$0 = $6;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $4 = (___syscall_ret($0)|0);
  $$0 = $4;
 }
 STACKTOP = sp;return ($$0|0);
}
function _fstatat($fd,$path,$buf,$flag) {
 $fd = $fd|0;
 $path = $path|0;
 $buf = $buf|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $path;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $buf;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $flag;
 $0 = (___syscall300(300,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _futimens($fd,$times) {
 $fd = $fd|0;
 $times = $times|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_utimensat($fd,0,$times,0)|0);
 return ($0|0);
}
function _futimesat($dirfd,$pathname,$times) {
 $dirfd = $dirfd|0;
 $pathname = $pathname|0;
 $times = $times|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $dirfd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $pathname;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $times;
 $0 = (___syscall299(299,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _lchmod($path,$mode) {
 $path = $path|0;
 $mode = $mode|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fchmodat(-100,$path,$mode,256)|0);
 return ($0|0);
}
function _lstat($path,$buf) {
 $path = $path|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $buf;
 $0 = (___syscall196(196,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _mkdir($path,$mode) {
 $path = $path|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $mode;
 $0 = (___syscall39(39,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _mkdirat($fd,$path,$mode) {
 $fd = $fd|0;
 $path = $path|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $path;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $mode;
 $0 = (___syscall296(296,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _mkfifo($path,$mode) {
 $path = $path|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode | 4096;
 $1 = (_mknod($path,$0,0)|0);
 return ($1|0);
}
function _mkfifoat($fd,$path,$mode) {
 $fd = $fd|0;
 $path = $path|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode | 4096;
 $1 = (_mknodat($fd,$path,$0,0)|0);
 return ($1|0);
}
function _mknod($path,$mode,$dev) {
 $path = $path|0;
 $mode = $mode|0;
 $dev = $dev|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $mode;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $dev;
 $0 = (___syscall14(14,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _mknodat($fd,$path,$mode,$dev) {
 $fd = $fd|0;
 $path = $path|0;
 $mode = $mode|0;
 $dev = $dev|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $path;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $mode;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $dev;
 $0 = (___syscall297(297,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _stat($path,$buf) {
 $path = $path|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $buf;
 $0 = (___syscall195(195,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function ___statfs($path,$buf) {
 $path = $path|0;
 $buf = $buf|0;
 var $$sroa$3 = 0, $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 64|0;
 $$sroa$3 = sp;
 dest=$$sroa$3; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$buf>>2] = 0;
 $0 = ((($buf)) + 4|0);
 dest=$0; src=$$sroa$3; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$vararg_buffer>>2] = $path;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 64;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $buf;
 $1 = (___syscall268(268,($vararg_buffer|0))|0);
 $2 = (___syscall_ret($1)|0);
 STACKTOP = sp;return ($2|0);
}
function ___fstatfs($fd,$buf) {
 $fd = $fd|0;
 $buf = $buf|0;
 var $$sroa$3 = 0, $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 64|0;
 $$sroa$3 = sp;
 dest=$$sroa$3; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$buf>>2] = 0;
 $0 = ((($buf)) + 4|0);
 dest=$0; src=$$sroa$3; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 64;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $buf;
 $1 = (___syscall269(269,($vararg_buffer|0))|0);
 $2 = (___syscall_ret($1)|0);
 STACKTOP = sp;return ($2|0);
}
function _statvfs($path,$buf) {
 $path = $path|0;
 $buf = $buf|0;
 var $$$i = 0, $$0 = 0, $$sroa$3$i = 0, $$sroa$3$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $kbuf = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 136|0;
 $$sroa$3$i1 = sp + 64|0;
 $$sroa$3$i = sp;
 $kbuf = sp + 152|0;
 dest=$$sroa$3$i; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$kbuf>>2] = 0;
 $0 = ((($kbuf)) + 4|0);
 dest=$0; src=$$sroa$3$i; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$vararg_buffer>>2] = $path;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 64;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $kbuf;
 $1 = (___syscall268(268,($vararg_buffer|0))|0);
 $2 = (___syscall_ret($1)|0);
 $3 = ($2|0)<(0);
 if ($3) {
  $$0 = -1;
 } else {
  dest=$$sroa$3$i1; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $4 = ((($buf)) + 4|0);
  dest=$4; src=$$sroa$3$i1; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $5 = HEAP32[$0>>2]|0;
  HEAP32[$buf>>2] = $5;
  $6 = ((($kbuf)) + 40|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  $$$i = $8 ? $5 : $7;
  HEAP32[$4>>2] = $$$i;
  $9 = ((($kbuf)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($buf)) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($kbuf)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($buf)) + 12|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($kbuf)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($buf)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($kbuf)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($buf)) + 20|0);
  HEAP32[$20>>2] = $19;
  $21 = ((($kbuf)) + 24|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($buf)) + 24|0);
  HEAP32[$23>>2] = $22;
  $24 = ((($buf)) + 28|0);
  HEAP32[$24>>2] = $22;
  $25 = ((($kbuf)) + 28|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($buf)) + 32|0);
  HEAP32[$27>>2] = $26;
  $28 = ((($kbuf)) + 44|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($buf)) + 40|0);
  HEAP32[$30>>2] = $29;
  $31 = ((($kbuf)) + 36|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($buf)) + 44|0);
  HEAP32[$33>>2] = $32;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _fstatvfs($fd,$buf) {
 $fd = $fd|0;
 $buf = $buf|0;
 var $$$i = 0, $$0 = 0, $$sroa$3$i = 0, $$sroa$3$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $kbuf = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 136|0;
 $$sroa$3$i1 = sp + 64|0;
 $$sroa$3$i = sp;
 $kbuf = sp + 152|0;
 dest=$$sroa$3$i; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$kbuf>>2] = 0;
 $0 = ((($kbuf)) + 4|0);
 dest=$0; src=$$sroa$3$i; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 64;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $kbuf;
 $1 = (___syscall269(269,($vararg_buffer|0))|0);
 $2 = (___syscall_ret($1)|0);
 $3 = ($2|0)<(0);
 if ($3) {
  $$0 = -1;
 } else {
  dest=$$sroa$3$i1; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $4 = ((($buf)) + 4|0);
  dest=$4; src=$$sroa$3$i1; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $5 = HEAP32[$0>>2]|0;
  HEAP32[$buf>>2] = $5;
  $6 = ((($kbuf)) + 40|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  $$$i = $8 ? $5 : $7;
  HEAP32[$4>>2] = $$$i;
  $9 = ((($kbuf)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($buf)) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($kbuf)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($buf)) + 12|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($kbuf)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($buf)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($kbuf)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($buf)) + 20|0);
  HEAP32[$20>>2] = $19;
  $21 = ((($kbuf)) + 24|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($buf)) + 24|0);
  HEAP32[$23>>2] = $22;
  $24 = ((($buf)) + 28|0);
  HEAP32[$24>>2] = $22;
  $25 = ((($kbuf)) + 28|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($buf)) + 32|0);
  HEAP32[$27>>2] = $26;
  $28 = ((($kbuf)) + 44|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($buf)) + 40|0);
  HEAP32[$30>>2] = $29;
  $31 = ((($kbuf)) + 36|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($buf)) + 44|0);
  HEAP32[$33>>2] = $32;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _umask($mode) {
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $mode;
 $0 = (___syscall60(60,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _utimensat($fd,$path,$times,$flags) {
 $fd = $fd|0;
 $path = $path|0;
 $times = $times|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $path;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $times;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $flags;
 $0 = (___syscall320(320,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function ___fxstat($ver,$fd,$buf) {
 $ver = $ver|0;
 $fd = $fd|0;
 $buf = $buf|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fstat($fd,$buf)|0);
 return ($0|0);
}
function ___fxstatat($ver,$fd,$path,$buf,$flag) {
 $ver = $ver|0;
 $fd = $fd|0;
 $path = $path|0;
 $buf = $buf|0;
 $flag = $flag|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fstatat($fd,$path,$buf,$flag)|0);
 return ($0|0);
}
function ___lxstat($ver,$path,$buf) {
 $ver = $ver|0;
 $path = $path|0;
 $buf = $buf|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lstat($path,$buf)|0);
 return ($0|0);
}
function ___xstat($ver,$path,$buf) {
 $ver = $ver|0;
 $path = $path|0;
 $buf = $buf|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stat($path,$buf)|0);
 return ($0|0);
}
function _asprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vasprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _clearerr($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $3 = (___lockfile($f)|0);
  $phitmp = ($3|0)==(0);
  $4 = HEAP32[$f>>2]|0;
  $5 = $4 & -49;
  HEAP32[$f>>2] = $5;
  if (!($phitmp)) {
   ___unlockfile($f);
  }
 } else {
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & -49;
  HEAP32[$f>>2] = $7;
 }
 return;
}
function _dprintf($fd,$fmt,$varargs) {
 $fd = $fd|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vdprintf($fd,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function __flushlbf() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_fflush(0)|0);
 return;
}
function ___fsetlocking($f,$type) {
 $f = $f|0;
 $type = $type|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___fwriting($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $1 = $0 & 4;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = ((($f)) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)!=(0|0);
  $7 = $5;
 } else {
  $7 = 1;
 }
 $6 = $7&1;
 return ($6|0);
}
function ___freading($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $1 = $0 & 8;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = ((($f)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)!=(0|0);
  $7 = $5;
 } else {
  $7 = 1;
 }
 $6 = $7&1;
 return ($6|0);
}
function ___freadable($f) {
 $f = $f|0;
 var $$lobit = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $1 = $0 >>> 2;
 $$lobit = $1 & 1;
 $2 = $$lobit ^ 1;
 return ($2|0);
}
function ___fwritable($f) {
 $f = $f|0;
 var $$lobit = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $1 = $0 >>> 3;
 $$lobit = $1 & 1;
 $2 = $$lobit ^ 1;
 return ($2|0);
}
function ___flbf($f) {
 $f = $f|0;
 var $$lobit = 0, $$not = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 75|0);
 $1 = HEAP8[$0>>0]|0;
 $$lobit = ($1&255) >>> 7;
 $2 = $$lobit&255;
 $$not = $2 ^ 1;
 return ($$not|0);
}
function ___fbufsize($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function ___fpending($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $10 = 0;
 } else {
  $3 = ((($f)) + 20|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($f)) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $4;
  $8 = $6;
  $9 = (($7) - ($8))|0;
  $10 = $9;
 }
 return ($10|0);
}
function ___fpurge($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($f)) + 28|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($f)) + 20|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($f)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($f)) + 4|0);
 HEAP32[$4>>2] = 0;
 return 0;
}
function ___freadahead($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 return ($6|0);
}
function ___freadptr($f,$sizep) {
 $f = $f|0;
 $sizep = $sizep|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = $1;
  $6 = $3;
  $7 = (($5) - ($6))|0;
  HEAP32[$sizep>>2] = $7;
  $$0 = $3;
 }
 return ($$0|0);
}
function ___freadptrinc($f,$inc) {
 $f = $f|0;
 $inc = $inc|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($inc)|0);
 HEAP32[$0>>2] = $2;
 return;
}
function ___fseterr($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $1 = $0 | 32;
 HEAP32[$f>>2] = $1;
 return;
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  (___lockfile($f)|0);
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((7196)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(7192)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(7192)>>2] = $14;
  }
  ___unlock(((7196)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 63]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function _feof($f) {
 $f = $f|0;
 var $$lobit = 0, $$lobit1 = 0, $$lobit2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 >>> 4;
  $$lobit = $7 & 1;
  if ($phitmp) {
   $$lobit2 = $$lobit;
  } else {
   ___unlockfile($f);
   $$lobit2 = $$lobit;
  }
 } else {
  $3 = HEAP32[$f>>2]|0;
  $4 = $3 >>> 4;
  $$lobit1 = $4 & 1;
  $$lobit2 = $$lobit1;
 }
 return ($$lobit2|0);
}
function _ferror($f) {
 $f = $f|0;
 var $$lobit = 0, $$lobit1 = 0, $$lobit2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 >>> 5;
  $$lobit = $7 & 1;
  if ($phitmp) {
   $$lobit2 = $$lobit;
  } else {
   ___unlockfile($f);
   $$lobit2 = $$lobit;
  }
 } else {
  $3 = HEAP32[$f>>2]|0;
  $4 = $3 >>> 5;
  $$lobit1 = $4 & 1;
  $$lobit2 = $$lobit1;
 }
 return ($$lobit2|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[7508>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[7508>>2]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((7196)|0));
   $$012 = HEAP32[(7192)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((7196)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fgetc($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $14 = ((($f)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($f)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($15>>>0)<($17>>>0);
   if ($18) {
    $19 = ((($15)) + 1|0);
    HEAP32[$14>>2] = $19;
    $20 = HEAP8[$15>>0]|0;
    $21 = $20&255;
    $23 = $21;
   } else {
    $22 = (___uflow($f)|0);
    $23 = $22;
   }
   ___unlockfile($f);
   $$0 = $23;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($f)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($6>>>0)<($8>>>0);
   if ($9) {
    $10 = ((($6)) + 1|0);
    HEAP32[$5>>2] = $10;
    $11 = HEAP8[$6>>0]|0;
    $12 = $11&255;
    $$0 = $12;
    break;
   } else {
    $13 = (___uflow($f)|0);
    $$0 = $13;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fgetln($f,$plen) {
 $f = $f|0;
 $plen = $plen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $29 = $4;
 } else {
  $29 = 0;
 }
 $5 = ((($f)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($f)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $14 = $12;
 } else {
  $13 = (___uflow($f)|0);
  $14 = $13;
 }
 (_ungetc($14,$f)|0);
 $15 = HEAP32[$5>>2]|0;
 $16 = HEAP32[$7>>2]|0;
 $17 = $16;
 $18 = $15;
 $19 = (($17) - ($18))|0;
 $20 = (_memchr($15,10,$19)|0);
 $21 = ($20|0)==(0|0);
 if ($21) {
  $25 = ((($f)) + 92|0);
  HEAP32[$0>>2] = 0;
  $26 = (_getline($25,$0,$f)|0);
  $27 = ($26|0)>(0);
  if ($27) {
   HEAP32[$plen>>2] = $26;
   $28 = HEAP32[$25>>2]|0;
   $ret$0 = $28;
  } else {
   $ret$0 = 0;
  }
 } else {
  $22 = ((($20)) + 1|0);
  $23 = $22;
  $24 = (($23) - ($18))|0;
  HEAP32[$plen>>2] = $24;
  HEAP32[$5>>2] = $22;
  $ret$0 = $15;
 }
 $30 = ($29|0)==(0);
 if (!($30)) {
  ___unlockfile($f);
 }
 STACKTOP = sp;return ($ret$0|0);
}
function _fgetpos($f,$pos) {
 $f = $f|0;
 $pos = $pos|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ftello($f)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  HEAP32[$pos>>2] = $0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fgets($s,$n,$f) {
 $s = $s|0;
 $n = $n|0;
 $f = $f|0;
 var $$0 = 0, $$048 = 0, $$05 = 0, $$lcssa14 = 0, $$old2 = 0, $$pre = 0, $$sum$pre$phiZZ2D = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond3 = 0, $p$0 = 0, $p$1 = 0, $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $3 = (___lockfile($f)|0);
  $12 = $3;
 } else {
  $12 = 0;
 }
 $4 = (($n) + -1)|0;
 $5 = ($n|0)<(2);
 if ($5) {
  $6 = ((($f)) + 74|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = (($8) + 255)|0;
  $10 = $9 | $8;
  $11 = $10&255;
  HEAP8[$6>>0] = $11;
  $13 = ($12|0)==(0);
  if (!($13)) {
   ___unlockfile($f);
  }
  $14 = ($4|0)==(0);
  if ($14) {
   HEAP8[$s>>0] = 0;
   $$0 = $s;
  } else {
   $$0 = 0;
  }
 } else {
  $$old2 = ($4|0)==(0);
  L11: do {
   if ($$old2) {
    $p$1 = $s;
    label = 18;
   } else {
    $15 = ((($f)) + 4|0);
    $16 = ((($f)) + 8|0);
    $$05 = $4;$p$0 = $s;
    while(1) {
     $17 = HEAP32[$15>>2]|0;
     $18 = HEAP32[$16>>2]|0;
     $19 = $18;
     $20 = $17;
     $21 = (($19) - ($20))|0;
     $22 = (_memchr($17,10,$21)|0);
     $23 = ($22|0)==(0|0);
     $24 = $22;
     $25 = (1 - ($20))|0;
     $26 = (($25) + ($24))|0;
     $27 = $23 ? $21 : $26;
     $28 = ($27>>>0)<($$05>>>0);
     $29 = $28 ? $27 : $$05;
     _memcpy(($p$0|0),($17|0),($29|0))|0;
     $30 = HEAP32[$15>>2]|0;
     $31 = (($30) + ($29)|0);
     HEAP32[$15>>2] = $31;
     $32 = (($p$0) + ($29)|0);
     $33 = (($$05) - ($29))|0;
     $or$cond = $23 & $28;
     if (!($or$cond)) {
      $p$1 = $32;
      label = 18;
      break L11;
     }
     $34 = HEAP32[$16>>2]|0;
     $35 = ($31>>>0)<($34>>>0);
     if ($35) {
      $$sum6 = (($29) + 1)|0;
      $36 = (($30) + ($$sum6)|0);
      HEAP32[$15>>2] = $36;
      $37 = HEAP8[$31>>0]|0;
      $38 = $37&255;
      $$sum$pre$phiZZ2D = $$sum6;$47 = $38;
     } else {
      $39 = (___uflow($f)|0);
      $40 = ($39|0)<(0);
      if ($40) {
       $$lcssa14 = $32;
       break;
      }
      $$pre = (($29) + 1)|0;
      $$sum$pre$phiZZ2D = $$pre;$47 = $39;
     }
     $45 = (($33) + -1)|0;
     $46 = $47&255;
     $48 = (($p$0) + ($$sum$pre$phiZZ2D)|0);
     HEAP8[$32>>0] = $46;
     $sext$mask = $47 & 255;
     $49 = ($sext$mask|0)!=(10);
     $50 = ($45|0)!=(0);
     $or$cond3 = $50 & $49;
     if ($or$cond3) {
      $$05 = $45;$p$0 = $48;
     } else {
      $p$1 = $48;
      label = 18;
      break L11;
     }
    }
    $41 = ($$lcssa14|0)==($s|0);
    if ($41) {
     $$048 = 0;
    } else {
     $42 = HEAP32[$f>>2]|0;
     $43 = $42 & 16;
     $44 = ($43|0)==(0);
     if ($44) {
      $$048 = 0;
     } else {
      $p$1 = $$lcssa14;
      label = 18;
     }
    }
   }
  } while(0);
  if ((label|0) == 18) {
   $51 = ($s|0)==(0|0);
   if ($51) {
    $$048 = 0;
   } else {
    HEAP8[$p$1>>0] = 0;
    $$048 = $s;
   }
  }
  $52 = ($12|0)==(0);
  if ($52) {
   $$0 = $$048;
  } else {
   ___unlockfile($f);
   $$0 = $$048;
  }
 }
 return ($$0|0);
}
function ___fgetwc_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $l$0 = 0, $st = 0, $wc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $st = sp;
 $wc = sp + 8|0;
 $b = sp + 12|0;
 $0 = $st;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = ((($f)) + 74|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = (($6) + 1)|0;
 $8 = $7 | $6;
 $9 = $8&255;
 HEAP8[$4>>0] = $9;
 $10 = ((($f)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($f)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)<($13>>>0);
 do {
  if ($14) {
   $15 = $13;
   $16 = $11;
   $17 = (($15) - ($16))|0;
   $18 = (_mbrtowc($wc,$11,$17,$st)|0);
   $19 = ($18>>>0)<(4294967294);
   if ($19) {
    $20 = ($18|0)==(0);
    $21 = $20&1;
    $22 = (($21) + ($18))|0;
    $23 = HEAP32[$10>>2]|0;
    $24 = (($23) + ($22)|0);
    HEAP32[$10>>2] = $24;
    $25 = HEAP32[$wc>>2]|0;
    $$0 = $25;
    break;
   }
   $26 = ($18|0)==(-1);
   if ($26) {
    $27 = HEAP32[$10>>2]|0;
    $28 = ((($27)) + 1|0);
    HEAP32[$10>>2] = $28;
    $$0 = -1;
   } else {
    $l$0 = -2;
    label = 6;
   }
  } else {
   $l$0 = -2;
   label = 6;
  }
 } while(0);
 L7: do {
  if ((label|0) == 6) {
   while(1) {
    label = 0;
    $29 = ($l$0|0)==(-2);
    if (!($29)) {
     label = 13;
     break;
    }
    $30 = HEAP32[$10>>2]|0;
    $31 = HEAP32[$12>>2]|0;
    $32 = ($30>>>0)<($31>>>0);
    if ($32) {
     $33 = ((($30)) + 1|0);
     HEAP32[$10>>2] = $33;
     $34 = HEAP8[$30>>0]|0;
     HEAP8[$b>>0] = $34;
    } else {
     $35 = (___uflow($f)|0);
     $36 = $35&255;
     HEAP8[$b>>0] = $36;
     $37 = ($35|0)<(0);
     if ($37) {
      break;
     }
    }
    $41 = (_mbrtowc($wc,$b,1,$st)|0);
    $42 = ($41|0)==(-1);
    if ($42) {
     $$0 = -1;
     break L7;
    } else {
     $l$0 = $41;
     label = 6;
    }
   }
   if ((label|0) == 13) {
    $43 = HEAP32[$wc>>2]|0;
    $$0 = $43;
    break;
   }
   $38 = (_mbsinit($st)|0);
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = (___errno_location()|0);
    HEAP32[$40>>2] = 84;
    $$0 = -1;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fgetwc($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___fgetwc_unlocked($f)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___fgetwc_unlocked($f)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _fgetws($s,$n,$f) {
 $s = $s|0;
 $n = $n|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$01$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $p$0 = 0, $p$1 = 0, $p$1$s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$0 = $s;
 } else {
  $1 = ((($f)) + 76|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)>(-1);
  if ($3) {
   $4 = (___lockfile($f)|0);
   $13 = $4;
  } else {
   $13 = 0;
  }
  $$01$in = $n;$p$0 = $s;
  while(1) {
   $$01 = (($$01$in) + -1)|0;
   $5 = ($$01|0)==(0);
   if ($5) {
    $p$1 = $p$0;
    break;
   }
   $6 = (___fgetwc_unlocked($f)|0);
   $7 = ($6|0)==(-1);
   if ($7) {
    $p$1 = $p$0;
    break;
   }
   $8 = ((($p$0)) + 4|0);
   HEAP32[$p$0>>2] = $6;
   $9 = ($6|0)==(10);
   if ($9) {
    $p$1 = $8;
    break;
   } else {
    $$01$in = $$01;$p$0 = $8;
   }
  }
  HEAP32[$p$1>>2] = 0;
  $10 = HEAP32[$f>>2]|0;
  $11 = $10 & 32;
  $12 = ($11|0)==(0);
  $p$1$s = $12 ? $p$1 : $s;
  $14 = ($13|0)==(0);
  if (!($14)) {
   ___unlockfile($f);
  }
  $15 = ($p$1$s|0)==($s|0);
  $16 = $15 ? 0 : $s;
  $$0 = $16;
 }
 return ($$0|0);
}
function _fileno($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $3 = (___lockfile($f)|0);
  $phitmp = ($3|0)==(0);
  if (!($phitmp)) {
   ___unlockfile($f);
  }
 }
 $4 = ((($f)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 return ($5|0);
}
function _flockfile($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ftrylockfile($f)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = ((($f)) + 76|0);
  $3 = ((($f)) + 80|0);
  while(1) {
   $4 = HEAP32[$2>>2]|0;
   $5 = ($4|0)==(0);
   if (!($5)) {
    ___wait(($2|0),($3|0),($4|0),1);
   }
   $6 = (_ftrylockfile($f)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    break;
   }
  }
 }
 return;
}
function _fmemopen($buf,$size,$mode) {
 $buf = $buf|0;
 $size = $size|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $buf$ = 0, $memchr = 0, $or$cond = 0, $size$op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = ($size|0)==(0);
 do {
  if ($2) {
   label = 3;
  } else {
   $3 = HEAP8[$mode>>0]|0;
   $4 = $3 << 24 >> 24;
   $memchr = (_memchr(176270,$4,4)|0);
   $5 = ($memchr|0)==(0|0);
   if ($5) {
    label = 3;
   } else {
    $7 = ($buf|0)==(0|0);
    $8 = ($size>>>0)>(4294966151);
    $or$cond = $7 & $8;
    if ($or$cond) {
     $9 = (___errno_location()|0);
     HEAP32[$9>>2] = 12;
     $$0 = 0;
     break;
    }
    $10 = ($buf|0)!=(0|0);
    $size$op = (($size) + 1164)|0;
    $11 = $10 ? 1164 : $size$op;
    $12 = (_calloc($11,1)|0);
    $13 = ($12|0)==(0|0);
    if ($13) {
     $$0 = 0;
    } else {
     $14 = ((($12)) + 112|0);
     $15 = ((($12)) + 84|0);
     HEAP32[$15>>2] = $14;
     $16 = ((($12)) + 60|0);
     HEAP32[$16>>2] = -1;
     $17 = ((($12)) + 75|0);
     HEAP8[$17>>0] = -1;
     $18 = ((($12)) + 140|0);
     $19 = ((($12)) + 44|0);
     HEAP32[$19>>2] = $18;
     $20 = ((($12)) + 48|0);
     HEAP32[$20>>2] = 1024;
     $21 = ((($12)) + 1164|0);
     $buf$ = $10 ? $buf : $21;
     $22 = ((($12)) + 124|0);
     HEAP32[$22>>2] = $buf$;
     $23 = ((($12)) + 120|0);
     HEAP32[$23>>2] = $size;
     $24 = ((($12)) + 128|0);
     HEAP32[$24>>2] = $4;
     if ($1) {
      $25 = ($3<<24>>24)==(114);
      $26 = $25 ? 8 : 4;
      HEAP32[$12>>2] = $26;
     }
     switch ($3<<24>>24) {
     case 114:  {
      $27 = ((($12)) + 116|0);
      HEAP32[$27>>2] = $size;
      break;
     }
     case 97:  {
      $28 = (_strnlen($buf$,$size)|0);
      HEAP32[$14>>2] = $28;
      $29 = ((($12)) + 116|0);
      HEAP32[$29>>2] = $28;
      break;
     }
     default: {
     }
     }
     $30 = ((($12)) + 32|0);
     HEAP32[$30>>2] = 15;
     $31 = ((($12)) + 36|0);
     HEAP32[$31>>2] = 16;
     $32 = ((($12)) + 40|0);
     HEAP32[$32>>2] = 17;
     $33 = ((($12)) + 12|0);
     HEAP32[$33>>2] = 18;
     $34 = HEAP32[(7172)>>2]|0;
     $35 = ($34|0)==(0);
     if ($35) {
      $36 = ((($12)) + 76|0);
      HEAP32[$36>>2] = -1;
     }
     ___lock(((7196)|0));
     $37 = HEAP32[(7192)>>2]|0;
     $38 = ((($12)) + 56|0);
     HEAP32[$38>>2] = $37;
     $39 = ($37|0)==(0);
     if (!($39)) {
      $40 = $37;
      $41 = ((($40)) + 52|0);
      HEAP32[$41>>2] = $12;
     }
     HEAP32[(7192)>>2] = $12;
     ___unlock(((7196)|0));
     $$0 = $12;
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(176270,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (___fmodeflags($mode)|0);
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer>>2] = $filename;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $6 = (___syscall5(5,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (___fdopen($7,$mode)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$vararg_buffer3>>2] = $7;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function _fputs($s,$f) {
 $s = $s|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (_fwrite($s,$0,1,$f)|0);
 $2 = (($1) + -1)|0;
 return ($2|0);
}
function ___fputwc_unlocked($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $mbc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mbc = sp;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 1)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $isascii = ($c>>>0)<(128);
 do {
  if ($isascii) {
   $6 = ((($f)) + 75|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7 << 24 >> 24;
   $9 = ($8|0)==($c|0);
   if (!($9)) {
    $10 = ((($f)) + 20|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($f)) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11>>>0)<($13>>>0);
    if ($14) {
     $15 = $c&255;
     $16 = ((($11)) + 1|0);
     HEAP32[$10>>2] = $16;
     HEAP8[$11>>0] = $15;
     $17 = $c & 255;
     $$0 = $17;
     break;
    }
   }
   $18 = (___overflow($f,$c)|0);
   $$0 = $18;
  } else {
   $19 = ((($f)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($20)) + 4|0);
   $22 = ((($f)) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($21>>>0)<($23>>>0);
   if ($24) {
    $25 = (_wctomb($20,$c)|0);
    $26 = ($25|0)<(0);
    if ($26) {
     $$0 = -1;
     break;
    }
    $27 = HEAP32[$19>>2]|0;
    $28 = (($27) + ($25)|0);
    HEAP32[$19>>2] = $28;
    $$0 = $c;
    break;
   }
   $29 = (_wctomb($mbc,$c)|0);
   $30 = ($29|0)<(0);
   if (!($30)) {
    $31 = (___fwritex($mbc,$29,$f)|0);
    $32 = ($31>>>0)<($29>>>0);
    if (!($32)) {
     $$0 = $c;
     break;
    }
   }
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fputwc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___fputwc_unlocked($c,$f)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___fputwc_unlocked($c,$f)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _fputws($ws,$f) {
 $ws = $ws|0;
 $f = $f|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $buf = 0, $l$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $buf = sp + 8|0;
 HEAP32[$0>>2] = $ws;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $18 = $4;
 } else {
  $18 = 0;
 }
 $5 = ((($f)) + 74|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($7) + 1)|0;
 $9 = $8 | $7;
 $10 = $9&255;
 HEAP8[$5>>0] = $10;
 $11 = ($ws|0)==(0|0);
 L4: do {
  if ($11) {
   $l$1 = 0;
   label = 9;
  } else {
   while(1) {
    $12 = (_wcsrtombs($buf,$0,1024,0)|0);
    $13 = (($12) + 1)|0;
    $14 = ($13>>>0)>(1);
    if (!($14)) {
     $l$1 = $12;
     label = 9;
     break L4;
    }
    $15 = (___fwritex($buf,$12,$f)|0);
    $16 = ($15>>>0)<($12>>>0);
    if ($16) {
     break;
    }
    $$pre = HEAP32[$0>>2]|0;
    $17 = ($$pre|0)==(0|0);
    if ($17) {
     $l$1 = $12;
     label = 9;
     break L4;
    }
   }
   $19 = ($18|0)==(0);
   if ($19) {
    $$0 = -1;
   } else {
    ___unlockfile($f);
    $$0 = -1;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $20 = ($18|0)==(0);
  if ($20) {
   $$0 = $l$1;
  } else {
   ___unlockfile($f);
   $$0 = $l$1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $dest$0$ph = 0, $dest$02 = 0, $l$0$ph = 0, $l$03 = 0, $l$03$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $31 = $4;
 } else {
  $31 = 0;
 }
 $5 = ((($f)) + 74|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($7) + 255)|0;
 $9 = $8 | $7;
 $10 = $9&255;
 HEAP8[$5>>0] = $10;
 $11 = ((($f)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($f)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = ($17>>>0)<($0>>>0);
  $$ = $19 ? $17 : $0;
  _memcpy(($destv|0),($14|0),($$|0))|0;
  $20 = (($14) + ($$)|0);
  HEAP32[$13>>2] = $20;
  $21 = (($destv) + ($$)|0);
  $22 = (($0) - ($$))|0;
  $dest$0$ph = $21;$l$0$ph = $22;
 } else {
  $dest$0$ph = $destv;$l$0$ph = $0;
 }
 $23 = ($l$0$ph|0)==(0);
 L7: do {
  if ($23) {
   label = 13;
  } else {
   $24 = ((($f)) + 32|0);
   $dest$02 = $dest$0$ph;$l$03 = $l$0$ph;
   while(1) {
    $25 = (___toread($f)|0);
    $26 = ($25|0)==(0);
    if (!($26)) {
     $l$03$lcssa = $l$03;
     break;
    }
    $27 = HEAP32[$24>>2]|0;
    $28 = (FUNCTION_TABLE_iiii[$27 & 63]($f,$dest$02,$l$03)|0);
    $29 = (($28) + 1)|0;
    $30 = ($29>>>0)<(2);
    if ($30) {
     $l$03$lcssa = $l$03;
     break;
    }
    $35 = (($l$03) - ($28))|0;
    $36 = (($dest$02) + ($28)|0);
    $37 = ($l$03|0)==($28|0);
    if ($37) {
     label = 13;
     break L7;
    } else {
     $dest$02 = $36;$l$03 = $35;
    }
   }
   $32 = ($31|0)==(0);
   if (!($32)) {
    ___unlockfile($f);
   }
   $33 = (($0) - ($l$03$lcssa))|0;
   $34 = (($33>>>0) / ($size>>>0))&-1;
   $$0 = $34;
  }
 } while(0);
 if ((label|0) == 13) {
  $38 = ($31|0)==(0);
  if ($38) {
   $$0 = $nmemb;
  } else {
   ___unlockfile($f);
   $$0 = $nmemb;
  }
 }
 return ($$0|0);
}
function _freopen($filename,$mode,$f) {
 $filename = $filename|0;
 $mode = $mode|0;
 $f = $f|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = (___fmodeflags($mode)|0);
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $40 = $4;
 } else {
  $40 = 0;
 }
 (_fflush($f)|0);
 $5 = ($filename|0)==(0|0);
 do {
  if ($5) {
   $6 = $0 & 524288;
   $7 = ($6|0)==(0);
   $$pre = ((($f)) + 60|0);
   if (!($7)) {
    $8 = HEAP32[$$pre>>2]|0;
    HEAP32[$vararg_buffer>>2] = $8;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
   }
   $9 = $0 & -524481;
   $10 = HEAP32[$$pre>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $10;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = 4;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $9;
   $11 = (___syscall221(221,($vararg_buffer3|0))|0);
   $12 = (___syscall_ret($11)|0);
   $13 = ($12|0)<(0);
   if ($13) {
    label = 15;
   } else {
    label = 12;
   }
  } else {
   $14 = (_fopen($filename,$mode)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    label = 15;
   } else {
    $16 = ((($14)) + 60|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ((($f)) + 60|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($17|0)==($19|0);
    if ($20) {
     HEAP32[$16>>2] = -1;
    } else {
     $21 = $0 & 524288;
     $22 = (___dup3($17,$19,$21)|0);
     $23 = ($22|0)<(0);
     if ($23) {
      (_fclose($14)|0);
      label = 15;
      break;
     }
    }
    $24 = HEAP32[$f>>2]|0;
    $25 = $24 & 1;
    $26 = HEAP32[$14>>2]|0;
    $27 = $25 | $26;
    HEAP32[$f>>2] = $27;
    $28 = ((($14)) + 32|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($f)) + 32|0);
    HEAP32[$30>>2] = $29;
    $31 = ((($14)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ((($f)) + 36|0);
    HEAP32[$33>>2] = $32;
    $34 = ((($14)) + 40|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ((($f)) + 40|0);
    HEAP32[$36>>2] = $35;
    $37 = ((($14)) + 12|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ((($f)) + 12|0);
    HEAP32[$39>>2] = $38;
    (_fclose($14)|0);
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 12) {
  $41 = ($40|0)==(0);
  if ($41) {
   $$0 = $f;
  } else {
   ___unlockfile($f);
   $$0 = $f;
  }
 }
 else if ((label|0) == 15) {
  (_fclose($f)|0);
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _fscanf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function ___fseeko_unlocked($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($whence|0)==(1);
 if ($0) {
  $1 = ((($f)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($f)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $2;
  $6 = $4;
  $7 = (($off) - ($5))|0;
  $8 = (($7) + ($6))|0;
  $$01 = $8;
 } else {
  $$01 = $off;
 }
 $9 = ((($f)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($f)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10>>>0)>($12>>>0);
 if ($13) {
  $14 = ((($f)) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  (FUNCTION_TABLE_iiii[$15 & 63]($f,0,0)|0);
  $16 = HEAP32[$9>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $18 = ((($f)) + 16|0);
  HEAP32[$18>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $19 = ((($f)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_iiii[$20 & 63]($f,$$01,$whence)|0);
  $22 = ($21|0)<(0);
  if ($22) {
   $$0 = -1;
  } else {
   $23 = ((($f)) + 8|0);
   HEAP32[$23>>2] = 0;
   $24 = ((($f)) + 4|0);
   HEAP32[$24>>2] = 0;
   $25 = HEAP32[$f>>2]|0;
   $26 = $25 & -17;
   HEAP32[$f>>2] = $26;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function ___fseeko($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___fseeko_unlocked($f,$off,$whence)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___fseeko_unlocked($f,$off,$whence)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _fseek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___fseeko($f,$off,$whence)|0);
 return ($0|0);
}
function _fsetpos($f,$pos) {
 $f = $f|0;
 $pos = $pos|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pos>>2]|0;
 $1 = (___fseeko($f,$0,0)|0);
 return ($1|0);
}
function ___ftello_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$f>>2]|0;
 $3 = $2 & 128;
 $4 = ($3|0)==(0);
 if ($4) {
  $10 = 1;
 } else {
  $5 = ((($f)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($f)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6>>>0)>($8>>>0);
  $phitmp = $9 ? 2 : 1;
  $10 = $phitmp;
 }
 $11 = (FUNCTION_TABLE_iiii[$1 & 63]($f,0,$10)|0);
 $12 = ($11|0)<(0);
 if ($12) {
  $$0 = $11;
 } else {
  $13 = ((($f)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($f)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $14;
  $18 = $16;
  $19 = ((($f)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($f)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $20;
  $24 = $22;
  $25 = (($11) - ($17))|0;
  $26 = (($25) + ($18))|0;
  $27 = (($26) + ($23))|0;
  $28 = (($27) - ($24))|0;
  $$0 = $28;
 }
 return ($$0|0);
}
function ___ftello($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___ftello_unlocked($f)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___ftello_unlocked($f)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _ftell($f) {
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ftello($f)|0);
 return ($0|0);
}
function _ftrylockfile($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 $1 = ((($0)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 do {
  if ($5) {
   $6 = ((($f)) + 68|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2147483647);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = (($7) + 1)|0;
    HEAP32[$6>>2] = $9;
    $$0 = 0;
   }
  } else {
   $10 = ($4|0)<(0);
   if ($10) {
    HEAP32[$3>>2] = 0;
   } else {
    $11 = ($4|0)==(0);
    if (!($11)) {
     $$0 = -1;
     break;
    }
   }
   $12 = HEAP32[$3>>2]|0;
   $13 = ($12|0)==(0);
   if ($13) {
    HEAP32[$3>>2] = $2;
   }
   $14 = ((($f)) + 68|0);
   HEAP32[$14>>2] = 1;
   $$0 = 0;
  }
 } while(0);
 return ($$0|0);
}
function _funlockfile($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[$0>>2] = $2;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($f);
 }
 return;
}
function _fwide($f,$mode) {
 $f = $f|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $3 = (___lockfile($f)|0);
  $14 = $3;
 } else {
  $14 = 0;
 }
 $4 = ((($f)) + 74|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $7 = $mode >> 31;
  $8 = (0 - ($mode))|0;
  $9 = $8 >>> 31;
  $10 = $7 | $9;
  $11 = $10&255;
  HEAP8[$4>>0] = $11;
  $13 = $11;
 } else {
  $13 = $5;
 }
 $12 = $13 << 24 >> 24;
 $15 = ($14|0)==(0);
 if (!($15)) {
  ___unlockfile($f);
 }
 return ($12|0);
}
function _fwprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfwprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___towrite($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$pre = HEAP32[$0>>2]|0;
   $7 = $$pre;
   label = 4;
  } else {
   $$0 = 0;
  }
 } else {
  $7 = $1;
  label = 4;
 }
 L4: do {
  if ((label|0) == 4) {
   $5 = ((($f)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $8 = $7;
   $9 = $6;
   $10 = (($8) - ($9))|0;
   $11 = ($10>>>0)<($l>>>0);
   if ($11) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 63]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L9: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
       break L9;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa10 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 63]($f,$s,$i$0$lcssa10)|0);
     $26 = ($25>>>0)<($i$0$lcssa10>>>0);
     if ($26) {
      $$0 = $i$0$lcssa10;
      break L4;
     }
     $27 = (($s) + ($i$0$lcssa10)|0);
     $28 = (($l) - ($i$0$lcssa10))|0;
     $$pre6 = HEAP32[$5>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    } else {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$5>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$5>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___fwritex($src,$0,$f)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($f);
   $7 = $6;
  }
 } else {
  $4 = (___fwritex($src,$0,$f)|0);
  $7 = $4;
 }
 $8 = ($7|0)==($0|0);
 if ($8) {
  $10 = $nmemb;
 } else {
  $9 = (($7>>>0) / ($size>>>0))&-1;
  $10 = $9;
 }
 return ($10|0);
}
function _fwscanf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfwscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _getc($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $14 = ((($f)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($f)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($15>>>0)<($17>>>0);
   if ($18) {
    $19 = ((($15)) + 1|0);
    HEAP32[$14>>2] = $19;
    $20 = HEAP8[$15>>0]|0;
    $21 = $20&255;
    $23 = $21;
   } else {
    $22 = (___uflow($f)|0);
    $23 = $22;
   }
   ___unlockfile($f);
   $$0 = $23;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($f)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($6>>>0)<($8>>>0);
   if ($9) {
    $10 = ((($6)) + 1|0);
    HEAP32[$5>>2] = $10;
    $11 = HEAP8[$6>>0]|0;
    $12 = $11&255;
    $$0 = $12;
    break;
   } else {
    $13 = (___uflow($f)|0);
    $$0 = $13;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _getchar() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7496>>2]|0;
 $1 = (_fgetc($0)|0);
 return ($1|0);
}
function _getchar_unlocked() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7496>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 if ($5) {
  $6 = ((($2)) + 1|0);
  HEAP32[$1>>2] = $6;
  $7 = HEAP8[$2>>0]|0;
  $8 = $7&255;
  $10 = $8;
 } else {
  $9 = (___uflow($0)|0);
  $10 = $9;
 }
 return ($10|0);
}
function _getc_unlocked($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___uflow($f)|0);
  $9 = $8;
 }
 return ($9|0);
}
function _getdelim($s,$n,$delim,$f) {
 $s = $s|0;
 $n = $n|0;
 $delim = $delim|0;
 $f = $f|0;
 var $$ = 0, $$0 = 0, $$lcssa14 = 0, $$pre = 0, $$pre6 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0, $or$cond = 0, $sext = 0, $tmp$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)!=(0|0);
 $1 = ($s|0)!=(0|0);
 $or$cond = $1 & $0;
 L1: do {
  if ($or$cond) {
   $3 = HEAP32[$s>>2]|0;
   $4 = ($3|0)==(0|0);
   if ($4) {
    HEAP32[$n>>2] = 0;
   }
   $5 = ((($f)) + 76|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)>(-1);
   if ($7) {
    $8 = (___lockfile($f)|0);
    $52 = $8;
   } else {
    $52 = 0;
   }
   $9 = ((($f)) + 4|0);
   $10 = ((($f)) + 8|0);
   $i$0 = 0;
   while(1) {
    $11 = HEAP32[$9>>2]|0;
    $12 = HEAP32[$10>>2]|0;
    $13 = $12;
    $14 = $11;
    $15 = (($13) - ($14))|0;
    $16 = (_memchr($11,$delim,$15)|0);
    $17 = ($16|0)!=(0|0);
    $18 = $16;
    $19 = (1 - ($14))|0;
    $20 = (($19) + ($18))|0;
    $21 = $17 ? $20 : $15;
    $22 = (($21) + ($i$0))|0;
    $23 = HEAP32[$n>>2]|0;
    $24 = ($22>>>0)<($23>>>0);
    if ($24) {
     $$pre = HEAP32[$s>>2]|0;
     $37 = $$pre;$38 = $11;
    } else {
     $25 = (2147483647 - ($i$0))|0;
     $26 = ($21>>>0)<($25>>>0);
     if (!($26)) {
      label = 25;
      break;
     }
     $27 = (($22) + 2)|0;
     $28 = ($27>>>0)<(1073741823);
     $29 = $28&1;
     $$ = $27 << $29;
     HEAP32[$n>>2] = $$;
     $30 = HEAP32[$s>>2]|0;
     $31 = (_realloc($30,$$)|0);
     $32 = ($31|0)==(0|0);
     if ($32) {
      HEAP32[$n>>2] = $27;
      $33 = HEAP32[$s>>2]|0;
      $34 = (_realloc($33,$27)|0);
      $35 = ($34|0)==(0|0);
      if ($35) {
       label = 25;
       break;
      } else {
       $tmp$0 = $34;
      }
     } else {
      $tmp$0 = $31;
     }
     HEAP32[$s>>2] = $tmp$0;
     $$pre6 = HEAP32[$9>>2]|0;
     $37 = $tmp$0;$38 = $$pre6;
    }
    $36 = (($37) + ($i$0)|0);
    _memcpy(($36|0),($38|0),($21|0))|0;
    $39 = HEAP32[$9>>2]|0;
    $40 = (($39) + ($21)|0);
    HEAP32[$9>>2] = $40;
    if ($17) {
     $i$1 = $22;
     break;
    }
    $41 = HEAP32[$10>>2]|0;
    $42 = ($40>>>0)<($41>>>0);
    if ($42) {
     $$sum = (($21) + 1)|0;
     $43 = (($39) + ($$sum)|0);
     HEAP32[$9>>2] = $43;
     $44 = HEAP8[$40>>0]|0;
     $45 = $44&255;
     $55 = $45;
    } else {
     $46 = (___uflow($f)|0);
     $47 = ($46|0)==(-1);
     if ($47) {
      $$lcssa14 = $22;
      label = 18;
      break;
     } else {
      $55 = $46;
     }
    }
    $54 = $55&255;
    $56 = (($22) + 1)|0;
    $57 = HEAP32[$s>>2]|0;
    $58 = (($57) + ($22)|0);
    HEAP8[$58>>0] = $54;
    $sext = $55 << 24;
    $59 = $sext >> 24;
    $60 = ($59|0)==($delim|0);
    if ($60) {
     $i$1 = $56;
     break;
    } else {
     $i$0 = $56;
    }
   }
   if ((label|0) == 25) {
    $64 = ($52|0)==(0);
    if (!($64)) {
     ___unlockfile($f);
    }
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 12;
    $$0 = -1;
    break;
   }
   do {
    if ((label|0) == 18) {
     $48 = ($$lcssa14|0)==(0);
     if (!($48)) {
      $49 = HEAP32[$f>>2]|0;
      $50 = $49 & 16;
      $51 = ($50|0)==(0);
      if (!($51)) {
       $i$1 = $$lcssa14;
       break;
      }
     }
     $53 = ($52|0)==(0);
     if ($53) {
      $$0 = -1;
      break L1;
     }
     ___unlockfile($f);
     $$0 = -1;
     break L1;
    }
   } while(0);
   $61 = HEAP32[$s>>2]|0;
   $62 = (($61) + ($i$1)|0);
   HEAP8[$62>>0] = 0;
   $63 = ($52|0)==(0);
   if ($63) {
    $$0 = $i$1;
   } else {
    ___unlockfile($f);
    $$0 = $i$1;
   }
  } else {
   $2 = (___errno_location()|0);
   HEAP32[$2>>2] = 22;
   $$0 = -1;
  }
 } while(0);
 return ($$0|0);
}
function _getline($s,$n,$f) {
 $s = $s|0;
 $n = $n|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_getdelim($s,$n,10,$f)|0);
 return ($0|0);
}
function _gets($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7496>>2]|0;
 $1 = (_fgets($s,2147483647,$0)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (_strlen($s)|0);
  $4 = (($3) + -1)|0;
  $5 = (($s) + ($4)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(10);
  if ($7) {
   HEAP8[$5>>0] = 0;
  }
 }
 return ($1|0);
}
function _getw($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x = sp;
 $0 = (_fread($x,4,1,$f)|0);
 $1 = ($0|0)!=(0);
 $2 = HEAP32[$x>>2]|0;
 $3 = $1 ? $2 : -1;
 STACKTOP = sp;return ($3|0);
}
function _getwc($f) {
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fgetwc($f)|0);
 return ($0|0);
}
function _getwchar() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7496>>2]|0;
 $1 = (_fgetwc($0)|0);
 return ($1|0);
}
function _open_memstream($bufp,$sizep) {
 $bufp = $bufp|0;
 $sizep = $sizep|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_malloc(1160)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  dest=$0; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $2 = ((($0)) + 112|0);
  $3 = ((($0)) + 84|0);
  HEAP32[$3>>2] = $2;
  HEAP32[$2>>2] = $bufp;
  $4 = ((($0)) + 116|0);
  HEAP32[$4>>2] = $sizep;
  $5 = ((($0)) + 120|0);
  ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;
  HEAP32[$0>>2] = 4;
  $6 = ((($0)) + 60|0);
  HEAP32[$6>>2] = -1;
  $7 = ((($0)) + 136|0);
  $8 = ((($0)) + 44|0);
  HEAP32[$8>>2] = $7;
  $9 = ((($0)) + 48|0);
  HEAP32[$9>>2] = 1024;
  $10 = ((($0)) + 75|0);
  HEAP8[$10>>0] = -1;
  $11 = ((($0)) + 36|0);
  HEAP32[$11>>2] = 19;
  $12 = ((($0)) + 40|0);
  HEAP32[$12>>2] = 20;
  $13 = ((($0)) + 12|0);
  HEAP32[$13>>2] = 21;
  $14 = HEAP32[(7172)>>2]|0;
  $15 = ($14|0)==(0);
  if ($15) {
   $16 = ((($0)) + 76|0);
   HEAP32[$16>>2] = -1;
  }
  ___lock(((7196)|0));
  $17 = HEAP32[(7192)>>2]|0;
  $18 = ((($0)) + 56|0);
  HEAP32[$18>>2] = $17;
  $19 = ($17|0)==(0);
  if (!($19)) {
   $20 = $17;
   $21 = ((($20)) + 52|0);
   HEAP32[$21>>2] = $0;
  }
  HEAP32[(7192)>>2] = $0;
  ___unlock(((7196)|0));
  $$0 = $0;
 }
 return ($$0|0);
}
function _open_wmemstream($bufp,$sizep) {
 $bufp = $bufp|0;
 $sizep = $sizep|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(144)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  _memset(($0|0),0,144)|0;
  $2 = ((($0)) + 112|0);
  $3 = ((($0)) + 84|0);
  HEAP32[$3>>2] = $2;
  HEAP32[$2>>2] = $bufp;
  $4 = ((($0)) + 116|0);
  HEAP32[$4>>2] = $sizep;
  $5 = ((($0)) + 120|0);
  ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;
  HEAP32[$0>>2] = 4;
  $6 = ((($0)) + 60|0);
  HEAP32[$6>>2] = -1;
  $7 = ((($0)) + 144|0);
  $8 = ((($0)) + 44|0);
  HEAP32[$8>>2] = $7;
  $9 = ((($0)) + 48|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($0)) + 75|0);
  HEAP8[$10>>0] = -1;
  $11 = ((($0)) + 36|0);
  HEAP32[$11>>2] = 22;
  $12 = ((($0)) + 40|0);
  HEAP32[$12>>2] = 23;
  $13 = ((($0)) + 12|0);
  HEAP32[$13>>2] = 24;
  $14 = HEAP32[(7172)>>2]|0;
  $15 = ($14|0)==(0);
  if ($15) {
   $16 = ((($0)) + 76|0);
   HEAP32[$16>>2] = -1;
  }
  ___lock(((7196)|0));
  $17 = HEAP32[(7192)>>2]|0;
  $18 = ((($0)) + 56|0);
  HEAP32[$18>>2] = $17;
  $19 = ($17|0)==(0);
  if (!($19)) {
   $20 = $17;
   $21 = ((($20)) + 52|0);
   HEAP32[$21>>2] = $0;
  }
  HEAP32[(7192)>>2] = $0;
  ___unlock(((7196)|0));
  $$0 = $0;
 }
 return ($$0|0);
}
function _pclose($f) {
 $f = $f|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $status = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $status = sp + 16|0;
 $0 = ((($f)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 (_fclose($f)|0);
 while(1) {
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $status;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 0;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = 0;
  $2 = (___syscall114(114,($vararg_buffer|0))|0);
  $3 = ($2|0)==(-4);
  if (!($3)) {
   $$lcssa = $2;
   break;
  }
 }
 $4 = ($$lcssa|0)<(0);
 if ($4) {
  $5 = (___syscall_ret($$lcssa)|0);
  $$0 = $5;
 } else {
  $6 = HEAP32[$status>>2]|0;
  $$0 = $6;
 }
 STACKTOP = sp;return ($$0|0);
}
function _perror($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7488>>2]|0;
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strerror($2)|0);
 $4 = ((($0)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(-1);
 if ($6) {
  $7 = (___lockfile($0)|0);
  $13 = $7;
 } else {
  $13 = 0;
 }
 $8 = ($msg|0)==(0|0);
 if (!($8)) {
  $9 = HEAP8[$msg>>0]|0;
  $10 = ($9<<24>>24)==(0);
  if (!($10)) {
   $11 = (_strlen($msg)|0);
   (_fwrite($msg,$11,1,$0)|0);
   (_fputc(58,$0)|0);
   (_fputc(32,$0)|0);
  }
 }
 $12 = (_strlen($3)|0);
 (_fwrite($3,$12,1,$0)|0);
 (_fputc(10,$0)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  ___unlockfile($0);
 }
 return;
}
function _popen($cmd,$mode) {
 $cmd = $cmd|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e$0 = 0, $e$1 = 0, $fa = 0, $op$0 = 0, $p = 0, $pid = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $p = sp + 152|0;
 $pid = sp + 148|0;
 $fa = sp + 72|0;
 $0 = sp + 56|0;
 $1 = HEAP8[$mode>>0]|0;
 switch ($1<<24>>24) {
 case 114:  {
  $op$0 = 0;
  label = 4;
  break;
 }
 case 119:  {
  $op$0 = 1;
  label = 4;
  break;
 }
 default: {
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = 22;
  $$0 = 0;
 }
 }
 do {
  if ((label|0) == 4) {
   $3 = (_pipe2($p,524288)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $5 = (($p) + ($op$0<<2)|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (FUNCTION_TABLE_iii[9 & 63]($6,$mode)|0);
    $8 = ($7|0)==(0|0);
    if ($8) {
     $9 = HEAP32[$p>>2]|0;
     HEAP32[$vararg_buffer>>2] = $9;
     (___syscall6(6,($vararg_buffer|0))|0);
     $10 = ((($p)) + 4|0);
     $11 = HEAP32[$10>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $11;
     (___syscall6(6,($vararg_buffer1|0))|0);
     $$0 = 0;
     break;
    }
    $12 = ((($7)) + 76|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)>(-1);
    if ($14) {
     $15 = (___lockfile($7)|0);
     $42 = $15;
    } else {
     $42 = 0;
    }
    $16 = $op$0 ^ 1;
    $17 = (($p) + ($16<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==($16|0);
    do {
     if ($19) {
      HEAP32[$vararg_buffer4>>2] = 0;
      $20 = (_fcntl($16,1030,$vararg_buffer4)|0);
      $21 = ($20|0)<(0);
      if ($21) {
       $22 = (___errno_location()|0);
       $23 = HEAP32[$22>>2]|0;
       $e$1 = $23;
       break;
      } else {
       $24 = HEAP32[$17>>2]|0;
       HEAP32[$vararg_buffer7>>2] = $24;
       (___syscall6(6,($vararg_buffer7|0))|0);
       HEAP32[$17>>2] = $20;
       label = 13;
       break;
      }
     } else {
      label = 13;
     }
    } while(0);
    if ((label|0) == 13) {
     $25 = (_posix_spawn_file_actions_init(($fa|0))|0);
     $26 = ($25|0)==(0);
     if ($26) {
      $27 = HEAP32[$17>>2]|0;
      $28 = (_posix_spawn_file_actions_adddup2(($fa|0),($27|0),($16|0))|0);
      $29 = ($28|0)==(0);
      if ($29) {
       HEAP32[$0>>2] = 176157;
       $30 = ((($0)) + 4|0);
       HEAP32[$30>>2] = 176160;
       $31 = ((($0)) + 8|0);
       HEAP32[$31>>2] = $cmd;
       $32 = ((($0)) + 12|0);
       HEAP32[$32>>2] = 0;
       $33 = HEAP32[___environ>>2]|0;
       $34 = (_posix_spawn(($pid|0),(176163|0),($fa|0),(0|0),($0|0),($33|0))|0);
       $35 = ($34|0)==(0);
       if ($35) {
        (_posix_spawn_file_actions_destroy(($fa|0))|0);
        $36 = HEAP32[$pid>>2]|0;
        $37 = ((($7)) + 64|0);
        HEAP32[$37>>2] = $36;
        $38 = (_strchr($mode,101)|0);
        $39 = ($38|0)==(0|0);
        if ($39) {
         $40 = HEAP32[$5>>2]|0;
         HEAP32[$vararg_buffer10>>2] = 0;
         (_fcntl($40,2,$vararg_buffer10)|0);
        }
        $41 = HEAP32[$17>>2]|0;
        HEAP32[$vararg_buffer13>>2] = $41;
        (___syscall6(6,($vararg_buffer13|0))|0);
        $43 = ($42|0)==(0);
        if ($43) {
         $$0 = $7;
         break;
        }
        ___unlockfile($7);
        $$0 = $7;
        break;
       } else {
        $e$0 = $34;
       }
      } else {
       $e$0 = 12;
      }
      (_posix_spawn_file_actions_destroy(($fa|0))|0);
      $e$1 = $e$0;
     } else {
      $e$1 = 12;
     }
    }
    (_fclose($7)|0);
    $44 = HEAP32[$17>>2]|0;
    HEAP32[$vararg_buffer16>>2] = $44;
    (___syscall6(6,($vararg_buffer16|0))|0);
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = $e$1;
    $$0 = 0;
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[7504>>2]|0;
 $1 = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($1|0);
}
function _putc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function _putchar($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7504>>2]|0;
 $1 = (_fputc($c,$0)|0);
 return ($1|0);
}
function _putchar_unlocked($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7504>>2]|0;
 $1 = ((($0)) + 75|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)==($c|0);
 if ($4) {
  label = 4;
 } else {
  $5 = ((($0)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($0)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6>>>0)<($8>>>0);
  if ($9) {
   $10 = $c&255;
   $11 = ((($6)) + 1|0);
   HEAP32[$5>>2] = $11;
   HEAP8[$6>>0] = $10;
   $12 = $c & 255;
   $14 = $12;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $13 = (___overflow($0,$c)|0);
  $14 = $13;
 }
 return ($14|0);
}
function _putc_unlocked($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 75|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = ($2|0)==($c|0);
 if ($3) {
  label = 4;
 } else {
  $4 = ((($f)) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($f)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5>>>0)<($7>>>0);
  if ($8) {
   $9 = $c&255;
   $10 = ((($5)) + 1|0);
   HEAP32[$4>>2] = $10;
   HEAP8[$5>>0] = $9;
   $11 = $c & 255;
   $13 = $11;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $12 = (___overflow($f,$c)|0);
  $13 = $12;
 }
 return ($13|0);
}
function _puts($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7504>>2]|0;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $19 = $4;
 } else {
  $19 = 0;
 }
 $5 = (_fputs($s,$0)|0);
 $6 = ($5|0)<(0);
 do {
  if ($6) {
   $18 = 1;
  } else {
   $7 = ((($0)) + 75|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = ($8<<24>>24)==(10);
   if (!($9)) {
    $10 = ((($0)) + 20|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($0)) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11>>>0)<($13>>>0);
    if ($14) {
     $15 = ((($11)) + 1|0);
     HEAP32[$10>>2] = $15;
     HEAP8[$11>>0] = 10;
     $18 = 0;
     break;
    }
   }
   $16 = (___overflow($0,10)|0);
   $phitmp = ($16|0)<(0);
   $18 = $phitmp;
  }
 } while(0);
 $17 = $18 << 31 >> 31;
 $20 = ($19|0)==(0);
 if (!($20)) {
  ___unlockfile($0);
 }
 return ($17|0);
}
function _putw($x,$f) {
 $x = $x|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $x;
 $1 = (_fwrite($0,4,1,$f)|0);
 $2 = (($1) + -1)|0;
 STACKTOP = sp;return ($2|0);
}
function _putwc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fputwc($c,$f)|0);
 return ($0|0);
}
function _putwchar($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7504>>2]|0;
 $1 = (_fputwc($c,$0)|0);
 return ($1|0);
}
function _remove($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $0 = (___syscall10(10,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $8 = 0;
 } else {
  $3 = (___errno_location()|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(21);
  if ($5) {
   HEAP32[$vararg_buffer1>>2] = $path;
   $6 = (___syscall40(40,($vararg_buffer1|0))|0);
   $7 = (___syscall_ret($6)|0);
   $8 = $7;
  } else {
   $8 = $1;
  }
 }
 STACKTOP = sp;return ($8|0);
}
function _rename($old,$new) {
 $old = $old|0;
 $new = $new|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $old;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $new;
 $0 = (___syscall38(38,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _rewind($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $3 = (___lockfile($f)|0);
  $phitmp = ($3|0)==(0);
  (___fseeko_unlocked($f,0,0)|0);
  $4 = HEAP32[$f>>2]|0;
  $5 = $4 & -33;
  HEAP32[$f>>2] = $5;
  if (!($phitmp)) {
   ___unlockfile($f);
  }
 } else {
  (___fseeko_unlocked($f,0,0)|0);
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & -33;
  HEAP32[$f>>2] = $7;
 }
 return;
}
function _scanf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vscanf($fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _setbuf($f,$buf) {
 $f = $f|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($buf|0)!=(0|0);
 $1 = $0 ? 0 : 2;
 (_setvbuf($f,$buf,$1,1024)|0);
 return;
}
function _setbuffer($f,$buf,$size) {
 $f = $f|0;
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($buf|0)!=(0|0);
 $1 = $0 ? 0 : 2;
 (_setvbuf($f,$buf,$1,$size)|0);
 return;
}
function _setlinebuf($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_setvbuf($f,0,1,0)|0);
 return;
}
function _setvbuf($f,$buf,$type,$size) {
 $f = $f|0;
 $buf = $buf|0;
 $type = $type|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 75|0);
 HEAP8[$0>>0] = -1;
 switch ($type|0) {
 case 2:  {
  $1 = ((($f)) + 48|0);
  HEAP32[$1>>2] = 0;
  break;
 }
 case 1:  {
  HEAP8[$0>>0] = 10;
  break;
 }
 default: {
 }
 }
 $2 = HEAP32[$f>>2]|0;
 $3 = $2 | 64;
 HEAP32[$f>>2] = $3;
 return 0;
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _swprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vswprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _swscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vswscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _tempnam($dir,$pfx) {
 $dir = $dir|0;
 $pfx = $pfx|0;
 var $$0 = 0, $$02 = 0, $$dir = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, $try$0 = 0, $try$1 = 0, $ts = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $s = sp + 32|0;
 $ts = sp + 24|0;
 $0 = (_getpid()|0);
 $1 = ($dir|0)==(0|0);
 $$dir = $1 ? 176214 : $dir;
 $2 = ($pfx|0)==(0|0);
 $$02 = $2 ? 176171 : $pfx;
 $3 = (_access($$dir,7)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = (_strlen($$dir)|0);
  $6 = (_strlen($$02)|0);
  $7 = (($5) + 44)|0;
  $8 = (($7) + ($6))|0;
  $9 = (_malloc($8)|0);
  HEAP32[$s>>2] = $9;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $$0 = 0;
  } else {
   $11 = ((($ts)) + 4|0);
   $12 = $s;
   $try$0 = 0;
   while(1) {
    (_clock_gettime(0,($ts|0))|0);
    $13 = HEAP32[$11>>2]|0;
    $14 = $13 ^ $12;
    $15 = HEAP32[$s>>2]|0;
    $16 = $15;
    $17 = $14 ^ $16;
    $18 = HEAP32[15576>>2]|0;HEAP32[15576>>2] = (($18+1)|0);
    HEAP32[$vararg_buffer>>2] = $$dir;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $$02;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $0;
    $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
    HEAP32[$vararg_ptr3>>2] = $18;
    $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
    HEAP32[$vararg_ptr4>>2] = $17;
    (_snprintf($15,$8,176176,$vararg_buffer)|0);
    $19 = HEAP32[$s>>2]|0;
    $20 = (_access($19,0)|0);
    $21 = ($20|0)==(0);
    if (!($21)) {
     $try$1 = $try$0;
     break;
    }
    $22 = (($try$0) + 1)|0;
    $23 = ($try$0|0)<(100);
    if ($23) {
     $try$0 = $22;
    } else {
     $try$1 = $22;
     break;
    }
   }
   $24 = ($try$1|0)>(99);
   $25 = HEAP32[$s>>2]|0;
   if ($24) {
    _free($25);
    $$0 = 0;
   } else {
    $$0 = $25;
   }
  }
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _tmpfile() {
 var $$0 = 0, $$lcssa = 0, $$lcssa7 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $buf = 0, $try$02 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $buf = sp + 20|0;
 $try$02 = 0;
 while(1) {
  $2 = (_tmpnam($buf)|0);
  $3 = ($2|0)==(0|0);
  if ($3) {
   $$0 = 0;
   break;
  }
  HEAP32[$vararg_buffer>>2] = $2;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 32962;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 384;
  $4 = (___syscall5(5,($vararg_buffer|0))|0);
  $5 = (___syscall_ret($4)|0);
  $6 = ($5|0)>(-1);
  $0 = (($try$02) + 1)|0;
  if ($6) {
   $$lcssa = $5;$$lcssa7 = $2;
   label = 5;
   break;
  }
  $1 = ($0|0)<(100);
  if ($1) {
   $try$02 = $0;
  } else {
   $$0 = 0;
   break;
  }
 }
 if ((label|0) == 5) {
  $7 = (___fdopen($$lcssa,176191)|0);
  HEAP32[$vararg_buffer3>>2] = $$lcssa7;
  (___syscall10(10,($vararg_buffer3|0))|0);
  $$0 = $7;
 }
 STACKTOP = sp;return ($$0|0);
}
function _tmpnam($s) {
 $s = $s|0;
 var $$0 = 0, $$s = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $try$0 = 0, $try$1 = 0, $ts = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 48|0;
 $ts = sp + 40|0;
 $1 = ($s|0)==(0|0);
 $$s = $1 ? 176194 : $s;
 HEAP32[$0>>2] = $$s;
 HEAP32[$vararg_buffer>>2] = 176214;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 7;
 $2 = (___syscall33(33,($vararg_buffer|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($ts)) + 4|0);
  $5 = $0;
  $try$0 = 0;
  while(1) {
   HEAP32[$vararg_buffer2>>2] = 0;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $ts;
   $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
   HEAP32[$vararg_ptr6>>2] = 0;
   (___syscall265(265,($vararg_buffer2|0))|0);
   $6 = HEAP32[$4>>2]|0;
   $7 = $6 ^ $5;
   $8 = HEAP32[$0>>2]|0;
   $9 = $8;
   $10 = $7 ^ $9;
   $11 = HEAP32[15580>>2]|0;HEAP32[15580>>2] = (($11+1)|0);
   HEAP32[$vararg_buffer7>>2] = $11;
   $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
   HEAP32[$vararg_ptr10>>2] = $10;
   (_snprintf($8,20,176219,$vararg_buffer7)|0);
   $12 = HEAP32[$0>>2]|0;
   HEAP32[$vararg_buffer11>>2] = $12;
   $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
   HEAP32[$vararg_ptr14>>2] = 0;
   $13 = (___syscall33(33,($vararg_buffer11|0))|0);
   $14 = ($13|0)==(0);
   if (!($14)) {
    $try$1 = $try$0;
    break;
   }
   $15 = (($try$0) + 1)|0;
   $16 = ($try$0|0)<(100);
   if ($16) {
    $try$0 = $15;
   } else {
    $try$1 = $15;
    break;
   }
  }
  $17 = ($try$1|0)>(99);
  $18 = HEAP32[$0>>2]|0;
  $19 = $17 ? 0 : $18;
  $$0 = $19;
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _ungetc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(-1);
 do {
  if ($0) {
   $$0 = -1;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if ($3) {
    $4 = (___lockfile($f)|0);
    $16 = $4;
   } else {
    $16 = 0;
   }
   $5 = ((($f)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = (___toread($f)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     label = 6;
    }
   } else {
    label = 6;
   }
   if ((label|0) == 6) {
    $10 = ((($f)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($f)) + 44|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($13)) + -8|0);
    $15 = ($11>>>0)>($14>>>0);
    if ($15) {
     $18 = $c&255;
     $19 = ((($11)) + -1|0);
     HEAP32[$10>>2] = $19;
     HEAP8[$19>>0] = $18;
     $20 = HEAP32[$f>>2]|0;
     $21 = $20 & -17;
     HEAP32[$f>>2] = $21;
     $22 = ($16|0)==(0);
     if ($22) {
      $$0 = $c;
      break;
     }
     ___unlockfile($f);
     $$0 = $c;
     break;
    }
   }
   $17 = ($16|0)==(0);
   if ($17) {
    $$0 = -1;
   } else {
    ___unlockfile($f);
    $$0 = -1;
   }
  }
 } while(0);
 return ($$0|0);
}
function _ungetwc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $l$0 = 0, $mbc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mbc = sp;
 $0 = ($c|0)==(-1);
 do {
  if ($0) {
   $$0 = -1;
  } else {
   $isascii = ($c>>>0)<(128);
   if ($isascii) {
    $l$0 = 1;
   } else {
    $1 = (_wctomb($mbc,$c)|0);
    $2 = ($1|0)<(0);
    if ($2) {
     $$0 = -1;
     break;
    } else {
     $l$0 = $1;
    }
   }
   $3 = ((($f)) + 76|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)>(-1);
   if ($5) {
    $6 = (___lockfile($f)|0);
    $24 = $6;
   } else {
    $24 = 0;
   }
   $7 = ((($f)) + 74|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($9) + 1)|0;
   $11 = $10 | $9;
   $12 = $11&255;
   HEAP8[$7>>0] = $12;
   $13 = ((($f)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    $16 = (___toread($f)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     label = 8;
    }
   } else {
    label = 8;
   }
   if ((label|0) == 8) {
    $18 = ((($f)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($f)) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $$sum = (($l$0) + -8)|0;
    $22 = (($21) + ($$sum)|0);
    $23 = ($19>>>0)<($22>>>0);
    if (!($23)) {
     if ($isascii) {
      $26 = $c&255;
      $27 = ((($19)) + -1|0);
      HEAP32[$18>>2] = $27;
      HEAP8[$27>>0] = $26;
     } else {
      $28 = (0 - ($l$0))|0;
      $29 = (($19) + ($28)|0);
      HEAP32[$18>>2] = $29;
      _memcpy(($29|0),($mbc|0),($l$0|0))|0;
     }
     $30 = HEAP32[$f>>2]|0;
     $31 = $30 & -17;
     HEAP32[$f>>2] = $31;
     $32 = ($24|0)==(0);
     if ($32) {
      $$0 = $c;
      break;
     }
     ___unlockfile($f);
     $$0 = $c;
     break;
    }
   }
   $25 = ($24|0)==(0);
   if ($25) {
    $$0 = -1;
   } else {
    ___unlockfile($f);
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp;
 $0 = (_malloc(240)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$ap>>2]|0;
   HEAP32[$ap2>>2] = $vacopy_currentptr;
   $2 = (_vsnprintf($0,240,$fmt,$ap2)|0);
   $3 = ($2>>>0)<(240);
   if ($3) {
    $4 = (($2) + 1)|0;
    $5 = (_realloc($0,$4)|0);
    $6 = ($5|0)!=(0|0);
    $7 = $6 ? $5 : $0;
    HEAP32[$s>>2] = $7;
    $$0 = $2;
    break;
   }
   _free($0);
   $8 = ($2|0)<(0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = (($2) + 1)|0;
    $10 = (_malloc($9)|0);
    HEAP32[$s>>2] = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = -1;
    } else {
     $12 = (_vsnprintf($10,$9,$fmt,$ap)|0);
     $$0 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _vdprintf($fd,$fmt,$ap) {
 $fd = $fd|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 25;
 $1 = ((($f)) + 44|0);
 HEAP32[$1>>2] = $fmt;
 $2 = ((($f)) + 48|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($f)) + 60|0);
 HEAP32[$3>>2] = $fd;
 $4 = ((($f)) + 75|0);
 HEAP8[$4>>0] = -1;
 $5 = ((($f)) + 76|0);
 HEAP32[$5>>2] = -1;
 $6 = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($6|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 63]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$9 = 0, $$lcssa = 0, $$lcssa38 = 0, $$lcssa384 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi182Z2D = 0, $$pre168 = 0, $$pre170 = 0, $$pre172 = 0, $$pre174 = 0, $$pre176 = 0, $$pre178 = 0, $$pre180 = 0, $$pre181 = 0;
 var $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0400 = 0, $alloc$1 = 0;
 var $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$0100 = 0, $dest$0 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0;
 var $factor16 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph20 = 0, $i$0$ph20$lcssa = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit7 = 0, $isdigit795 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $isdigittmp694 = 0, $k$0$ph = 0;
 var $k$1$ph = 0, $matches$0$ = 0, $matches$0104 = 0, $matches$0104$lcssa = 0, $matches$0104376 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond8 = 0, $p$0109 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0;
 var $p$396 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0108 = 0, $pos$1 = 0, $pos$2 = 0, $s$0107 = 0, $s$0107$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0;
 var $s$8 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0103 = 0, $wcs$0103$lcssa = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$097 = 0;
 var $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $333 = $4;
 } else {
  $333 = 0;
 }
 $5 = HEAP8[$fmt>>0]|0;
 $6 = ($5<<24>>24)==(0);
 L4: do {
  if ($6) {
   $matches$3 = 0;
  } else {
   $7 = ((($f)) + 4|0);
   $8 = ((($f)) + 100|0);
   $9 = ((($f)) + 108|0);
   $10 = ((($f)) + 8|0);
   $11 = ((($scanset)) + 10|0);
   $12 = ((($scanset)) + 33|0);
   $13 = ((($st)) + 4|0);
   $14 = ((($scanset)) + 46|0);
   $15 = ((($scanset)) + 94|0);
   $17 = $5;$matches$0104 = 0;$p$0109 = $fmt;$pos$0108 = 0;$s$0107 = 0;$wcs$0103 = 0;
   L6: while(1) {
    $16 = $17&255;
    $18 = (_isspace($16)|0);
    $19 = ($18|0)==(0);
    L8: do {
     if ($19) {
      $46 = HEAP8[$p$0109>>0]|0;
      $47 = ($46<<24>>24)==(37);
      L10: do {
       if ($47) {
        $48 = ((($p$0109)) + 1|0);
        $49 = HEAP8[$48>>0]|0;
        L12: do {
         switch ($49<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $70 = ((($p$0109)) + 2|0);
          $dest$0 = 0;$p$2 = $70;
          break;
         }
         default: {
          $71 = $49&255;
          $isdigittmp = (($71) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $72 = ((($p$0109)) + 2|0);
           $73 = HEAP8[$72>>0]|0;
           $74 = ($73<<24>>24)==(36);
           if ($74) {
            $vacopy_currentptr = HEAP32[$ap>>2]|0;
            HEAP32[$ap2$i>>2] = $vacopy_currentptr;
            $i$0$i = $isdigittmp;
            while(1) {
             $75 = ($i$0$i>>>0)>(1);
             $arglist_current = HEAP32[$ap2$i>>2]|0;
             $76 = $arglist_current;
             $77 = ((0) + 4|0);
             $expanded4 = $77;
             $expanded = (($expanded4) - 1)|0;
             $78 = (($76) + ($expanded))|0;
             $79 = ((0) + 4|0);
             $expanded8 = $79;
             $expanded7 = (($expanded8) - 1)|0;
             $expanded6 = $expanded7 ^ -1;
             $80 = $78 & $expanded6;
             $81 = $80;
             $82 = HEAP32[$81>>2]|0;
             $arglist_next = ((($81)) + 4|0);
             HEAP32[$ap2$i>>2] = $arglist_next;
             $83 = (($i$0$i) + -1)|0;
             if ($75) {
              $i$0$i = $83;
             } else {
              $$lcssa = $82;
              break;
             }
            }
            $84 = ((($p$0109)) + 3|0);
            $dest$0 = $$lcssa;$p$2 = $84;
            break L12;
           }
          }
          $arglist_current2 = HEAP32[$ap>>2]|0;
          $85 = $arglist_current2;
          $86 = ((0) + 4|0);
          $expanded11 = $86;
          $expanded10 = (($expanded11) - 1)|0;
          $87 = (($85) + ($expanded10))|0;
          $88 = ((0) + 4|0);
          $expanded15 = $88;
          $expanded14 = (($expanded15) - 1)|0;
          $expanded13 = $expanded14 ^ -1;
          $89 = $87 & $expanded13;
          $90 = $89;
          $91 = HEAP32[$90>>2]|0;
          $arglist_next3 = ((($90)) + 4|0);
          HEAP32[$ap>>2] = $arglist_next3;
          $dest$0 = $91;$p$2 = $48;
         }
         }
        } while(0);
        $92 = HEAP8[$p$2>>0]|0;
        $93 = $92&255;
        $isdigittmp694 = (($93) + -48)|0;
        $isdigit795 = ($isdigittmp694>>>0)<(10);
        if ($isdigit795) {
         $97 = $93;$p$396 = $p$2;$width$097 = 0;
         while(1) {
          $94 = ($width$097*10)|0;
          $95 = (($94) + -48)|0;
          $96 = (($95) + ($97))|0;
          $98 = ((($p$396)) + 1|0);
          $99 = HEAP8[$98>>0]|0;
          $100 = $99&255;
          $isdigittmp6 = (($100) + -48)|0;
          $isdigit7 = ($isdigittmp6>>>0)<(10);
          if ($isdigit7) {
           $97 = $100;$p$396 = $98;$width$097 = $96;
          } else {
           $$lcssa38 = $99;$p$3$lcssa = $98;$width$0$lcssa = $96;
           break;
          }
         }
        } else {
         $$lcssa38 = $92;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
        }
        $101 = ($$lcssa38<<24>>24)==(109);
        if ($101) {
         $102 = ($dest$0|0)!=(0|0);
         $103 = $102&1;
         $104 = ((($p$3$lcssa)) + 1|0);
         $$pre168 = HEAP8[$104>>0]|0;
         $107 = $$pre168;$alloc$0 = $103;$p$4 = $104;$s$1 = 0;$wcs$1 = 0;
        } else {
         $107 = $$lcssa38;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0107;$wcs$1 = $wcs$0103;
        }
        $105 = ((($p$4)) + 1|0);
        $106 = $107&255;
        switch ($106|0) {
        case 104:  {
         $108 = HEAP8[$105>>0]|0;
         $109 = ($108<<24>>24)==(104);
         $110 = ((($p$4)) + 2|0);
         $$9 = $109 ? $110 : $105;
         $$10 = $109 ? -2 : -1;
         $p$5 = $$9;$size$0 = $$10;
         break;
        }
        case 108:  {
         $111 = HEAP8[$105>>0]|0;
         $112 = ($111<<24>>24)==(108);
         $113 = ((($p$4)) + 2|0);
         $$11 = $112 ? $113 : $105;
         $$12 = $112 ? 3 : 1;
         $p$5 = $$11;$size$0 = $$12;
         break;
        }
        case 106:  {
         $p$5 = $105;$size$0 = 3;
         break;
        }
        case 116: case 122:  {
         $p$5 = $105;$size$0 = 1;
         break;
        }
        case 76:  {
         $p$5 = $105;$size$0 = 2;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $p$5 = $p$4;$size$0 = 0;
         break;
        }
        default: {
         $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
         label = 152;
         break L6;
        }
        }
        $114 = HEAP8[$p$5>>0]|0;
        $115 = $114&255;
        $116 = $115 & 47;
        $117 = ($116|0)==(3);
        $118 = $115 | 32;
        $$ = $117 ? $118 : $115;
        $$size$0 = $117 ? 1 : $size$0;
        switch ($$|0) {
        case 99:  {
         $119 = ($width$0$lcssa|0)<(1);
         $$width$0 = $119 ? 1 : $width$0$lcssa;
         $pos$1 = $pos$0108;$width$1 = $$width$0;
         break;
        }
        case 91:  {
         $pos$1 = $pos$0108;$width$1 = $width$0$lcssa;
         break;
        }
        case 110:  {
         $120 = ($pos$0108|0)<(0);
         $121 = $120 << 31 >> 31;
         $122 = ($dest$0|0)==(0|0);
         if ($122) {
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
         }
         switch ($$size$0|0) {
         case -2:  {
          $123 = $pos$0108&255;
          HEAP8[$dest$0>>0] = $123;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case -1:  {
          $124 = $pos$0108&65535;
          HEAP16[$dest$0>>1] = $124;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $pos$0108;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $pos$0108;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 3:  {
          $125 = $dest$0;
          $126 = $125;
          HEAP32[$126>>2] = $pos$0108;
          $127 = (($125) + 4)|0;
          $128 = $127;
          HEAP32[$128>>2] = $121;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         default: {
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
         }
         }
         break;
        }
        default: {
         ___shlim($f,0);
         while(1) {
          $129 = HEAP32[$7>>2]|0;
          $130 = HEAP32[$8>>2]|0;
          $131 = ($129>>>0)<($130>>>0);
          if ($131) {
           $132 = ((($129)) + 1|0);
           HEAP32[$7>>2] = $132;
           $133 = HEAP8[$129>>0]|0;
           $134 = $133&255;
           $136 = $134;
          } else {
           $135 = (___shgetc($f)|0);
           $136 = $135;
          }
          $137 = (_isspace($136)|0);
          $138 = ($137|0)==(0);
          if ($138) {
           break;
          }
         }
         $139 = HEAP32[$8>>2]|0;
         $140 = ($139|0)==(0|0);
         $$pre170 = HEAP32[$7>>2]|0;
         if ($140) {
          $144 = $$pre170;
         } else {
          $141 = ((($$pre170)) + -1|0);
          HEAP32[$7>>2] = $141;
          $144 = $141;
         }
         $142 = HEAP32[$9>>2]|0;
         $143 = HEAP32[$10>>2]|0;
         $145 = $144;
         $146 = $143;
         $147 = (($142) + ($pos$0108))|0;
         $148 = (($147) + ($145))|0;
         $149 = (($148) - ($146))|0;
         $pos$1 = $149;$width$1 = $width$0$lcssa;
        }
        }
        ___shlim($f,$width$1);
        $150 = HEAP32[$7>>2]|0;
        $151 = HEAP32[$8>>2]|0;
        $152 = ($150>>>0)<($151>>>0);
        if ($152) {
         $153 = ((($150)) + 1|0);
         HEAP32[$7>>2] = $153;
         $156 = $151;
        } else {
         $154 = (___shgetc($f)|0);
         $155 = ($154|0)<(0);
         if ($155) {
          $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
          label = 152;
          break L6;
         }
         $$pre172 = HEAP32[$8>>2]|0;
         $156 = $$pre172;
        }
        $157 = ($156|0)==(0|0);
        if (!($157)) {
         $158 = HEAP32[$7>>2]|0;
         $159 = ((($158)) + -1|0);
         HEAP32[$7>>2] = $159;
        }
        L67: do {
         switch ($$|0) {
         case 91: case 99: case 115:  {
          $160 = ($$|0)==(99);
          $161 = $$ & 239;
          $162 = ($161|0)==(99);
          L69: do {
           if ($162) {
            $163 = ($$|0)==(115);
            _memset(($scanset|0),-1,257)|0;
            HEAP8[$scanset>>0] = 0;
            if ($163) {
             HEAP8[$12>>0] = 0;
             ;HEAP8[$11>>0]=0|0;HEAP8[$11+1>>0]=0|0;HEAP8[$11+2>>0]=0|0;HEAP8[$11+3>>0]=0|0;HEAP8[$11+4>>0]=0|0;
             $p$9 = $p$5;
            } else {
             $p$9 = $p$5;
            }
           } else {
            $164 = ((($p$5)) + 1|0);
            $165 = HEAP8[$164>>0]|0;
            $166 = ($165<<24>>24)==(94);
            $167 = ((($p$5)) + 2|0);
            $invert$0 = $166&1;
            $168 = $166 ? $164 : $p$5;
            $p$6 = $166 ? $167 : $164;
            $169 = $166&1;
            _memset(($scanset|0),($169|0),257)|0;
            HEAP8[$scanset>>0] = 0;
            $170 = HEAP8[$p$6>>0]|0;
            switch ($170<<24>>24) {
            case 45:  {
             $171 = ((($168)) + 2|0);
             $172 = $invert$0 ^ 1;
             $173 = $172&255;
             HEAP8[$14>>0] = $173;
             $$pre$phi182Z2D = $173;$p$7$ph = $171;
             break;
            }
            case 93:  {
             $174 = ((($168)) + 2|0);
             $175 = $invert$0 ^ 1;
             $176 = $175&255;
             HEAP8[$15>>0] = $176;
             $$pre$phi182Z2D = $176;$p$7$ph = $174;
             break;
            }
            default: {
             $$pre180 = $invert$0 ^ 1;
             $$pre181 = $$pre180&255;
             $$pre$phi182Z2D = $$pre181;$p$7$ph = $p$6;
            }
            }
            $p$7 = $p$7$ph;
            while(1) {
             $177 = HEAP8[$p$7>>0]|0;
             L80: do {
              switch ($177<<24>>24) {
              case 0:  {
               $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
               label = 152;
               break L6;
               break;
              }
              case 93:  {
               $p$9 = $p$7;
               break L69;
               break;
              }
              case 45:  {
               $178 = ((($p$7)) + 1|0);
               $179 = HEAP8[$178>>0]|0;
               switch ($179<<24>>24) {
               case 93: case 0:  {
                $190 = 45;$p$8 = $p$7;
                break L80;
                break;
               }
               default: {
               }
               }
               $180 = ((($p$7)) + -1|0);
               $181 = HEAP8[$180>>0]|0;
               $182 = ($181&255)<($179&255);
               if ($182) {
                $183 = $181&255;
                $c$0100 = $183;
                while(1) {
                 $184 = (($c$0100) + 1)|0;
                 $185 = (($scanset) + ($184)|0);
                 HEAP8[$185>>0] = $$pre$phi182Z2D;
                 $186 = HEAP8[$178>>0]|0;
                 $187 = $186&255;
                 $188 = ($184|0)<($187|0);
                 if ($188) {
                  $c$0100 = $184;
                 } else {
                  $190 = $186;$p$8 = $178;
                  break;
                 }
                }
               } else {
                $190 = $179;$p$8 = $178;
               }
               break;
              }
              default: {
               $190 = $177;$p$8 = $p$7;
              }
              }
             } while(0);
             $189 = $190&255;
             $191 = (($189) + 1)|0;
             $192 = (($scanset) + ($191)|0);
             HEAP8[$192>>0] = $$pre$phi182Z2D;
             $193 = ((($p$8)) + 1|0);
             $p$7 = $193;
            }
           }
          } while(0);
          $194 = (($width$1) + 1)|0;
          $195 = $160 ? $194 : 31;
          $196 = ($$size$0|0)==(1);
          $197 = ($alloc$0|0)!=(0);
          L88: do {
           if ($196) {
            if ($197) {
             $198 = $195 << 2;
             $199 = (_malloc($198)|0);
             $200 = ($199|0)==(0|0);
             if ($200) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $199;
              label = 152;
              break L6;
             } else {
              $wcs$2 = $199;
             }
            } else {
             $wcs$2 = $dest$0;
            }
            HEAP32[$st>>2] = 0;
            HEAP32[$13>>2] = 0;
            $i$0$ph = 0;$k$0$ph = $195;$wcs$3$ph = $wcs$2;
            L94: while(1) {
             $201 = ($wcs$3$ph|0)==(0|0);
             $i$0$ph20 = $i$0$ph;
             while(1) {
              L98: while(1) {
               $202 = HEAP32[$7>>2]|0;
               $203 = HEAP32[$8>>2]|0;
               $204 = ($202>>>0)<($203>>>0);
               if ($204) {
                $205 = ((($202)) + 1|0);
                HEAP32[$7>>2] = $205;
                $206 = HEAP8[$202>>0]|0;
                $207 = $206&255;
                $210 = $207;
               } else {
                $208 = (___shgetc($f)|0);
                $210 = $208;
               }
               $209 = (($210) + 1)|0;
               $211 = (($scanset) + ($209)|0);
               $212 = HEAP8[$211>>0]|0;
               $213 = ($212<<24>>24)==(0);
               if ($213) {
                $i$0$ph20$lcssa = $i$0$ph20;$wcs$3$ph$lcssa = $wcs$3$ph;
                break L94;
               }
               $214 = $210&255;
               HEAP8[$0>>0] = $214;
               $215 = (_mbrtowc($wc,$0,1,$st)|0);
               switch ($215|0) {
               case -1:  {
                $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph;
                label = 152;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L98;
               }
               }
              }
              if ($201) {
               $i$1 = $i$0$ph20;
              } else {
               $216 = HEAP32[$wc>>2]|0;
               $217 = (($i$0$ph20) + 1)|0;
               $218 = (($wcs$3$ph) + ($i$0$ph20<<2)|0);
               HEAP32[$218>>2] = $216;
               $i$1 = $217;
              }
              $219 = ($i$1|0)==($k$0$ph|0);
              $or$cond = $197 & $219;
              if ($or$cond) {
               break;
              } else {
               $i$0$ph20 = $i$1;
              }
             }
             $factor = $k$0$ph << 1;
             $220 = $factor | 1;
             $221 = $220 << 2;
             $222 = (_realloc($wcs$3$ph,$221)|0);
             $223 = ($222|0)==(0|0);
             if ($223) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph;
              label = 152;
              break L6;
             }
             $i$0$ph$phi = $k$0$ph;$k$0$ph = $220;$wcs$3$ph = $222;$i$0$ph = $i$0$ph$phi;
            }
            $224 = (_mbsinit($st)|0);
            $225 = ($224|0)==(0);
            if ($225) {
             $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa;
             label = 152;
             break L6;
            } else {
             $i$4 = $i$0$ph20$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph$lcssa;
            }
           } else {
            if ($197) {
             $226 = (_malloc($195)|0);
             $227 = ($226|0)==(0|0);
             if ($227) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = 0;
              label = 152;
              break L6;
             } else {
              $i$2$ph = 0;$k$1$ph = $195;$s$2$ph = $226;
             }
             while(1) {
              $i$2 = $i$2$ph;
              while(1) {
               $228 = HEAP32[$7>>2]|0;
               $229 = HEAP32[$8>>2]|0;
               $230 = ($228>>>0)<($229>>>0);
               if ($230) {
                $231 = ((($228)) + 1|0);
                HEAP32[$7>>2] = $231;
                $232 = HEAP8[$228>>0]|0;
                $233 = $232&255;
                $236 = $233;
               } else {
                $234 = (___shgetc($f)|0);
                $236 = $234;
               }
               $235 = (($236) + 1)|0;
               $237 = (($scanset) + ($235)|0);
               $238 = HEAP8[$237>>0]|0;
               $239 = ($238<<24>>24)==(0);
               if ($239) {
                $i$4 = $i$2;$s$3 = $s$2$ph;$wcs$4 = 0;
                break L88;
               }
               $240 = $236&255;
               $241 = (($i$2) + 1)|0;
               $242 = (($s$2$ph) + ($i$2)|0);
               HEAP8[$242>>0] = $240;
               $243 = ($241|0)==($k$1$ph|0);
               if ($243) {
                break;
               } else {
                $i$2 = $241;
               }
              }
              $factor16 = $k$1$ph << 1;
              $244 = $factor16 | 1;
              $245 = (_realloc($s$2$ph,$244)|0);
              $246 = ($245|0)==(0|0);
              if ($246) {
               $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$2$ph;$wcs$7 = 0;
               label = 152;
               break L6;
              } else {
               $i$2$ph$phi = $k$1$ph;$k$1$ph = $244;$s$2$ph = $245;$i$2$ph = $i$2$ph$phi;
              }
             }
            }
            $247 = ($dest$0|0)==(0|0);
            if ($247) {
             $265 = $156;
             while(1) {
              $263 = HEAP32[$7>>2]|0;
              $264 = ($263>>>0)<($265>>>0);
              if ($264) {
               $266 = ((($263)) + 1|0);
               HEAP32[$7>>2] = $266;
               $267 = HEAP8[$263>>0]|0;
               $268 = $267&255;
               $271 = $268;
              } else {
               $269 = (___shgetc($f)|0);
               $271 = $269;
              }
              $270 = (($271) + 1)|0;
              $272 = (($scanset) + ($270)|0);
              $273 = HEAP8[$272>>0]|0;
              $274 = ($273<<24>>24)==(0);
              if ($274) {
               $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
               break L88;
              }
              $$pre176 = HEAP32[$8>>2]|0;
              $265 = $$pre176;
             }
            } else {
             $250 = $156;$i$3 = 0;
             while(1) {
              $248 = HEAP32[$7>>2]|0;
              $249 = ($248>>>0)<($250>>>0);
              if ($249) {
               $251 = ((($248)) + 1|0);
               HEAP32[$7>>2] = $251;
               $252 = HEAP8[$248>>0]|0;
               $253 = $252&255;
               $256 = $253;
              } else {
               $254 = (___shgetc($f)|0);
               $256 = $254;
              }
              $255 = (($256) + 1)|0;
              $257 = (($scanset) + ($255)|0);
              $258 = HEAP8[$257>>0]|0;
              $259 = ($258<<24>>24)==(0);
              if ($259) {
               $i$4 = $i$3;$s$3 = $dest$0;$wcs$4 = 0;
               break L88;
              }
              $260 = $256&255;
              $261 = (($i$3) + 1)|0;
              $262 = (($dest$0) + ($i$3)|0);
              HEAP8[$262>>0] = $260;
              $$pre174 = HEAP32[$8>>2]|0;
              $250 = $$pre174;$i$3 = $261;
             }
            }
           }
          } while(0);
          $275 = HEAP32[$8>>2]|0;
          $276 = ($275|0)==(0|0);
          $$pre178 = HEAP32[$7>>2]|0;
          if ($276) {
           $280 = $$pre178;
          } else {
           $277 = ((($$pre178)) + -1|0);
           HEAP32[$7>>2] = $277;
           $280 = $277;
          }
          $278 = HEAP32[$9>>2]|0;
          $279 = HEAP32[$10>>2]|0;
          $281 = $280;
          $282 = $279;
          $283 = (($281) - ($282))|0;
          $284 = (($283) + ($278))|0;
          $285 = ($284|0)==(0);
          if ($285) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$3;$wcs$9 = $wcs$4;
           break L6;
          }
          $$not = $160 ^ 1;
          $286 = ($284|0)==($width$1|0);
          $or$cond8 = $286 | $$not;
          if (!($or$cond8)) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$3;$wcs$9 = $wcs$4;
           break L6;
          }
          do {
           if ($197) {
            if ($196) {
             HEAP32[$dest$0>>2] = $wcs$4;
             break;
            } else {
             HEAP32[$dest$0>>2] = $s$3;
             break;
            }
           }
          } while(0);
          if ($160) {
           $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
          } else {
           $287 = ($wcs$4|0)==(0|0);
           if (!($287)) {
            $288 = (($wcs$4) + ($i$4<<2)|0);
            HEAP32[$288>>2] = 0;
           }
           $289 = ($s$3|0)==(0|0);
           if ($289) {
            $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
            break L67;
           }
           $290 = (($s$3) + ($i$4)|0);
           HEAP8[$290>>0] = 0;
           $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $base$0 = 16;
          label = 134;
          break;
         }
         case 111:  {
          $base$0 = 8;
          label = 134;
          break;
         }
         case 117: case 100:  {
          $base$0 = 10;
          label = 134;
          break;
         }
         case 105:  {
          $base$0 = 0;
          label = 134;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $310 = (+___floatscan($f,$$size$0,0));
          $311 = HEAP32[$9>>2]|0;
          $312 = HEAP32[$7>>2]|0;
          $313 = HEAP32[$10>>2]|0;
          $314 = $312;
          $315 = $313;
          $316 = (($315) - ($314))|0;
          $317 = ($311|0)==($316|0);
          if ($317) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$1;$wcs$9 = $wcs$1;
           break L6;
          }
          $318 = ($dest$0|0)==(0|0);
          if ($318) {
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case 0:  {
            $319 = $310;
            HEAPF32[$dest$0>>2] = $319;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           case 1:  {
            HEAPF64[$dest$0>>3] = $310;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           case 2:  {
            HEAPF64[$dest$0>>3] = $310;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           default: {
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
           }
           }
          }
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         }
         }
        } while(0);
        L168: do {
         if ((label|0) == 134) {
          label = 0;
          $291 = (___intscan($f,$base$0,0,-1,-1)|0);
          $292 = tempRet0;
          $293 = HEAP32[$9>>2]|0;
          $294 = HEAP32[$7>>2]|0;
          $295 = HEAP32[$10>>2]|0;
          $296 = $294;
          $297 = $295;
          $298 = (($297) - ($296))|0;
          $299 = ($293|0)==($298|0);
          if ($299) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$1;$wcs$9 = $wcs$1;
           break L6;
          }
          $300 = ($$|0)==(112);
          $301 = ($dest$0|0)!=(0|0);
          $or$cond3 = $301 & $300;
          if ($or$cond3) {
           $302 = $291;
           HEAP32[$dest$0>>2] = $302;
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
           break;
          }
          $303 = ($dest$0|0)==(0|0);
          if ($303) {
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case -2:  {
            $304 = $291&255;
            HEAP8[$dest$0>>0] = $304;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case -1:  {
            $305 = $291&65535;
            HEAP16[$dest$0>>1] = $305;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 0:  {
            HEAP32[$dest$0>>2] = $291;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 1:  {
            HEAP32[$dest$0>>2] = $291;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 3:  {
            $306 = $dest$0;
            $307 = $306;
            HEAP32[$307>>2] = $291;
            $308 = (($306) + 4)|0;
            $309 = $308;
            HEAP32[$309>>2] = $292;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           default: {
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
           }
           }
          }
         }
        } while(0);
        $320 = HEAP32[$9>>2]|0;
        $321 = HEAP32[$7>>2]|0;
        $322 = HEAP32[$10>>2]|0;
        $323 = $321;
        $324 = $322;
        $325 = (($320) + ($pos$1))|0;
        $326 = (($325) + ($323))|0;
        $327 = (($326) - ($324))|0;
        $not$ = ($dest$0|0)!=(0|0);
        $328 = $not$&1;
        $matches$0$ = (($328) + ($matches$0104))|0;
        $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $327;$s$5 = $s$4;$wcs$6 = $wcs$5;
        break L8;
       }
      } while(0);
      $50 = $47&1;
      $51 = (($p$0109) + ($50)|0);
      ___shlim($f,0);
      $52 = HEAP32[$7>>2]|0;
      $53 = HEAP32[$8>>2]|0;
      $54 = ($52>>>0)<($53>>>0);
      if ($54) {
       $55 = ((($52)) + 1|0);
       HEAP32[$7>>2] = $55;
       $56 = HEAP8[$52>>0]|0;
       $57 = $56&255;
       $61 = $57;
      } else {
       $58 = (___shgetc($f)|0);
       $61 = $58;
      }
      $59 = HEAP8[$51>>0]|0;
      $60 = $59&255;
      $62 = ($61|0)==($60|0);
      if (!($62)) {
       $$lcssa384 = $61;$matches$0104$lcssa = $matches$0104;$s$0107$lcssa = $s$0107;$wcs$0103$lcssa = $wcs$0103;
       label = 21;
       break L6;
      }
      $69 = (($pos$0108) + 1)|0;
      $matches$1 = $matches$0104;$p$11 = $51;$pos$2 = $69;$s$5 = $s$0107;$wcs$6 = $wcs$0103;
     } else {
      $p$1 = $p$0109;
      while(1) {
       $20 = ((($p$1)) + 1|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = $21&255;
       $23 = (_isspace($22)|0);
       $24 = ($23|0)==(0);
       if ($24) {
        $p$1$lcssa = $p$1;
        break;
       } else {
        $p$1 = $20;
       }
      }
      ___shlim($f,0);
      while(1) {
       $25 = HEAP32[$7>>2]|0;
       $26 = HEAP32[$8>>2]|0;
       $27 = ($25>>>0)<($26>>>0);
       if ($27) {
        $28 = ((($25)) + 1|0);
        HEAP32[$7>>2] = $28;
        $29 = HEAP8[$25>>0]|0;
        $30 = $29&255;
        $32 = $30;
       } else {
        $31 = (___shgetc($f)|0);
        $32 = $31;
       }
       $33 = (_isspace($32)|0);
       $34 = ($33|0)==(0);
       if ($34) {
        break;
       }
      }
      $35 = HEAP32[$8>>2]|0;
      $36 = ($35|0)==(0|0);
      $$pre = HEAP32[$7>>2]|0;
      if ($36) {
       $40 = $$pre;
      } else {
       $37 = ((($$pre)) + -1|0);
       HEAP32[$7>>2] = $37;
       $40 = $37;
      }
      $38 = HEAP32[$9>>2]|0;
      $39 = HEAP32[$10>>2]|0;
      $41 = $40;
      $42 = $39;
      $43 = (($38) + ($pos$0108))|0;
      $44 = (($43) + ($41))|0;
      $45 = (($44) - ($42))|0;
      $matches$1 = $matches$0104;$p$11 = $p$1$lcssa;$pos$2 = $45;$s$5 = $s$0107;$wcs$6 = $wcs$0103;
     }
    } while(0);
    $329 = ((($p$11)) + 1|0);
    $330 = HEAP8[$329>>0]|0;
    $331 = ($330<<24>>24)==(0);
    if ($331) {
     $matches$3 = $matches$1;
     break L4;
    } else {
     $17 = $330;$matches$0104 = $matches$1;$p$0109 = $329;$pos$0108 = $pos$2;$s$0107 = $s$5;$wcs$0103 = $wcs$6;
    }
   }
   if ((label|0) == 21) {
    $63 = HEAP32[$8>>2]|0;
    $64 = ($63|0)==(0|0);
    if (!($64)) {
     $65 = HEAP32[$7>>2]|0;
     $66 = ((($65)) + -1|0);
     HEAP32[$7>>2] = $66;
    }
    $67 = ($$lcssa384|0)>(-1);
    $68 = ($matches$0104$lcssa|0)!=(0);
    $or$cond5 = $68 | $67;
    if ($or$cond5) {
     $matches$3 = $matches$0104$lcssa;
     break;
    } else {
     $alloc$1 = 0;$s$7 = $s$0107$lcssa;$wcs$8 = $wcs$0103$lcssa;
     label = 153;
    }
   }
   else if ((label|0) == 152) {
    $$old4 = ($matches$0104376|0)==(0);
    if ($$old4) {
     $alloc$1 = $alloc$0400;$s$7 = $s$6;$wcs$8 = $wcs$7;
     label = 153;
    } else {
     $alloc$2 = $alloc$0400;$matches$2 = $matches$0104376;$s$8 = $s$6;$wcs$9 = $wcs$7;
    }
   }
   if ((label|0) == 153) {
    $alloc$2 = $alloc$1;$matches$2 = -1;$s$8 = $s$7;$wcs$9 = $wcs$8;
   }
   $332 = ($alloc$2|0)==(0);
   if ($332) {
    $matches$3 = $matches$2;
   } else {
    _free($s$8);
    _free($wcs$9);
    $matches$3 = $matches$2;
   }
  }
 } while(0);
 $334 = ($333|0)==(0);
 if (!($334)) {
  ___unlockfile($f);
 }
 STACKTOP = sp;return ($matches$3|0);
}
function _vfwprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $nl_arg = 0, $nl_type = 0, $phitmp = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 112|0;
 $nl_type = sp + 72|0;
 $nl_arg = sp;
 dest=$nl_type; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_wprintf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)!=(0);
   $20 = $phitmp;
  } else {
   $20 = 0;
  }
  $6 = ((($f)) + 74|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = (($8) + 1)|0;
  $10 = $9 | $8;
  $11 = $10&255;
  HEAP8[$6>>0] = $11;
  $12 = HEAP32[$f>>2]|0;
  $13 = $12 & 32;
  $14 = $12 & -33;
  HEAP32[$f>>2] = $14;
  $15 = (_wprintf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $16 = HEAP32[$f>>2]|0;
  $17 = $16 & 32;
  $18 = ($17|0)!=(0);
  $$ = $18 ? -1 : $15;
  $19 = $16 | $13;
  HEAP32[$f>>2] = $19;
  if ($20) {
   ___unlockfile($f);
  }
  $$0 = $$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfwscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0$i = 0, $$16 = 0, $$17 = 0, $$18 = 0, $$19 = 0, $$lcssa = 0, $$lcssa404 = 0, $$lcssa440 = 0, $$lcssa460 = 0, $$old10 = 0, $$p$6 = 0, $$pre = 0, $$pre187 = 0, $$size$0 = 0, $$width$0 = 0, $$width$015 = 0, $$width$2 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0470 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $c$1 = 0, $c$120 = 0, $c$4190 = 0, $cnt = 0, $dest$0 = 0, $expanded = 0;
 var $expanded12 = 0, $expanded14 = 0, $expanded15 = 0, $expanded16 = 0, $expanded18 = 0, $expanded19 = 0, $expanded21 = 0, $expanded22 = 0, $expanded23 = 0, $factor = 0, $factor29 = 0, $gotmatch$0109 = 0, $gotmatch$0109$lcssa409 = 0, $gotmatch$0109412 = 0, $gotmatch$0109413 = 0, $i$0$i = 0, $i$0105 = 0, $i$0105$lcssa419 = 0, $i$0105422 = 0, $i$0105423 = 0;
 var $i$058 = 0, $i$1 = 0, $invert$0 = 0, $invert$1 = 0, $j$02$i = 0, $k$0129 = 0, $k$1$ph = 0, $k$1107 = 0, $k$1107$lcssa414 = 0, $k$1107417 = 0, $k$1107418 = 0, $k$161 = 0, $k$2 = 0, $k$3 = 0, $k$4 = 0, $matches$0$ = 0, $matches$0122 = 0, $matches$0122$lcssa = 0, $matches$0122449 = 0, $matches$1 = 0;
 var $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond = 0, $or$cond11 = 0, $or$cond12 = 0, $or$cond14 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $p$0$i = 0, $p$0131 = 0, $p$1 = 0, $p$1$i = 0, $p$1$lcssa = 0, $p$10 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$397 = 0;
 var $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$8 = 0, $p$9 = 0, $pos$0128 = 0, $pos$1 = 0, $pos$1$lcssa = 0, $pos$2 = 0, $pos$3 = 0, $pos$321 = 0, $pos$424 = 0, $pos$5103 = 0, $pos$5103$lcssa424 = 0, $pos$5103427 = 0, $pos$5103428 = 0, $pos$555 = 0, $pos$6 = 0, $pos$7 = 0;
 var $s$0120 = 0, $s$0120$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$2100 = 0, $s$2100$lcssa434 = 0, $s$2100437 = 0, $s$2100438 = 0, $s$249 = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $set$0 = 0, $size$0 = 0, $tmp = 0, $vacopy_currentptr = 0, $vararg_buffer = 0;
 var $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $wcs$0121 = 0, $wcs$0121$lcssa = 0, $wcs$1 = 0, $wcs$2$ph = 0, $wcs$2101 = 0, $wcs$2101$lcssa429 = 0, $wcs$2101432 = 0, $wcs$2101433 = 0, $wcs$252 = 0, $wcs$3 = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0;
 var $wcs$8 = 0, $width$0$lcssa = 0, $width$098 = 0, $width$2 = 0, $width$4111 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer = sp;
 $ap2$i = sp + 128|0;
 $cnt = sp + 120|0;
 $tmp = sp + 144|0;
 $0 = sp + 32|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $285 = $4;
 } else {
  $285 = 0;
 }
 $5 = ((($f)) + 74|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($7) + 1)|0;
 $9 = $8 | $7;
 $10 = $9&255;
 HEAP8[$5>>0] = $10;
 $11 = HEAP32[$fmt>>2]|0;
 $12 = ($11|0)==(0);
 L4: do {
  if ($12) {
   $matches$3 = 0;
  } else {
   $13 = ((($f)) + 4|0);
   $14 = ((($f)) + 8|0);
   $15 = ((($0)) + 4|0);
   $16 = ((($0)) + 8|0);
   $17 = ((($0)) + 12|0);
   $18 = ((($0)) + 16|0);
   $19 = ((($0)) + 20|0);
   $20 = ((($0)) + 24|0);
   $21 = ((($0)) + 28|0);
   $22 = ((($0)) + 32|0);
   $23 = ((($0)) + 36|0);
   $24 = ((($0)) + 40|0);
   $25 = ((($0)) + 44|0);
   $26 = ((($0)) + 48|0);
   $27 = ((($0)) + 52|0);
   $28 = ((($0)) + 56|0);
   $29 = ((($0)) + 60|0);
   $30 = ((($0)) + 64|0);
   $31 = ((($0)) + 68|0);
   $32 = ((($0)) + 72|0);
   $33 = ((($0)) + 76|0);
   $34 = ((($0)) + 80|0);
   $35 = ((($0)) + 84|0);
   $36 = $11;$k$0129 = 0;$matches$0122 = 0;$p$0131 = $fmt;$pos$0128 = 0;$s$0120 = 0;$wcs$0121 = 0;
   L6: while(1) {
    $37 = (_iswspace($36)|0);
    $38 = ($37|0)==(0);
    L8: do {
     if ($38) {
      $61 = HEAP32[$p$0131>>2]|0;
      $62 = ($61|0)==(37);
      L10: do {
       if ($62) {
        $63 = ((($p$0131)) + 4|0);
        $64 = HEAP32[$63>>2]|0;
        L12: do {
         switch ($64|0) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $87 = ((($p$0131)) + 8|0);
          $dest$0 = 0;$p$2 = $87;
          break;
         }
         default: {
          $88 = (_iswdigit($64)|0);
          $89 = ($88|0)==(0);
          if (!($89)) {
           $90 = ((($p$0131)) + 8|0);
           $91 = HEAP32[$90>>2]|0;
           $92 = ($91|0)==(36);
           if ($92) {
            $93 = HEAP32[$63>>2]|0;
            $94 = (($93) + -48)|0;
            $vacopy_currentptr = HEAP32[$ap>>2]|0;
            HEAP32[$ap2$i>>2] = $vacopy_currentptr;
            $i$0$i = $94;
            while(1) {
             $95 = ($i$0$i>>>0)>(1);
             $arglist_current = HEAP32[$ap2$i>>2]|0;
             $96 = $arglist_current;
             $97 = ((0) + 4|0);
             $expanded12 = $97;
             $expanded = (($expanded12) - 1)|0;
             $98 = (($96) + ($expanded))|0;
             $99 = ((0) + 4|0);
             $expanded16 = $99;
             $expanded15 = (($expanded16) - 1)|0;
             $expanded14 = $expanded15 ^ -1;
             $100 = $98 & $expanded14;
             $101 = $100;
             $102 = HEAP32[$101>>2]|0;
             $arglist_next = ((($101)) + 4|0);
             HEAP32[$ap2$i>>2] = $arglist_next;
             $103 = (($i$0$i) + -1)|0;
             if ($95) {
              $i$0$i = $103;
             } else {
              $$lcssa404 = $102;
              break;
             }
            }
            $104 = ((($p$0131)) + 12|0);
            $dest$0 = $$lcssa404;$p$2 = $104;
            break L12;
           }
          }
          $arglist_current2 = HEAP32[$ap>>2]|0;
          $105 = $arglist_current2;
          $106 = ((0) + 4|0);
          $expanded19 = $106;
          $expanded18 = (($expanded19) - 1)|0;
          $107 = (($105) + ($expanded18))|0;
          $108 = ((0) + 4|0);
          $expanded23 = $108;
          $expanded22 = (($expanded23) - 1)|0;
          $expanded21 = $expanded22 ^ -1;
          $109 = $107 & $expanded21;
          $110 = $109;
          $111 = HEAP32[$110>>2]|0;
          $arglist_next3 = ((($110)) + 4|0);
          HEAP32[$ap>>2] = $arglist_next3;
          $dest$0 = $111;$p$2 = $63;
         }
         }
        } while(0);
        $112 = HEAP32[$p$2>>2]|0;
        $113 = (_iswdigit($112)|0);
        $114 = ($113|0)==(0);
        if ($114) {
         $p$3$lcssa = $p$2;$width$0$lcssa = 0;
        } else {
         $p$397 = $p$2;$width$098 = 0;
         while(1) {
          $115 = ($width$098*10)|0;
          $116 = HEAP32[$p$397>>2]|0;
          $117 = (($115) + -48)|0;
          $118 = (($117) + ($116))|0;
          $119 = ((($p$397)) + 4|0);
          $120 = HEAP32[$119>>2]|0;
          $121 = (_iswdigit($120)|0);
          $122 = ($121|0)==(0);
          if ($122) {
           $p$3$lcssa = $119;$width$0$lcssa = $118;
           break;
          } else {
           $p$397 = $119;$width$098 = $118;
          }
         }
        }
        $123 = HEAP32[$p$3$lcssa>>2]|0;
        $124 = ($123|0)==(109);
        if ($124) {
         $125 = ($dest$0|0)!=(0|0);
         $126 = $125&1;
         $127 = ((($p$3$lcssa)) + 4|0);
         $$pre = HEAP32[$127>>2]|0;
         $129 = $$pre;$alloc$0 = $126;$p$4 = $127;$s$1 = 0;$wcs$1 = 0;
        } else {
         $129 = $123;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0120;$wcs$1 = $wcs$0121;
        }
        $128 = ((($p$4)) + 4|0);
        switch ($129|0) {
        case 104:  {
         $130 = HEAP32[$128>>2]|0;
         $131 = ($130|0)==(104);
         $132 = ((($p$4)) + 8|0);
         $$16 = $131 ? $132 : $128;
         $$17 = $131 ? -2 : -1;
         $p$5 = $$16;$size$0 = $$17;
         break;
        }
        case 108:  {
         $133 = HEAP32[$128>>2]|0;
         $134 = ($133|0)==(108);
         $135 = ((($p$4)) + 8|0);
         $$18 = $134 ? $135 : $128;
         $$19 = $134 ? 3 : 1;
         $p$5 = $$18;$size$0 = $$19;
         break;
        }
        case 106:  {
         $p$5 = $128;$size$0 = 3;
         break;
        }
        case 116: case 122:  {
         $p$5 = $128;$size$0 = 1;
         break;
        }
        case 76:  {
         $p$5 = $128;$size$0 = 2;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $p$5 = $p$4;$size$0 = 0;
         break;
        }
        default: {
         $alloc$0470 = $alloc$0;$matches$0122449 = $matches$0122;$s$6 = $s$1;$wcs$6 = $wcs$1;
         label = 123;
         break L6;
        }
        }
        $136 = HEAP32[$p$5>>2]|0;
        $137 = $136 & 47;
        $138 = ($137|0)==(3);
        $139 = $136 | 32;
        $$ = $138 ? $139 : $136;
        $$size$0 = $138 ? 1 : $size$0;
        switch ($$|0) {
        case 110:  {
         $pos$424 = $pos$0128;
         break;
        }
        case 91:  {
         label = 52;
         break;
        }
        default: {
         $140 = ($139|0)==(99);
         if ($140) {
          label = 52;
         } else {
          $pos$2 = $pos$0128;
          while(1) {
           $141 = HEAP32[$13>>2]|0;
           $142 = HEAP32[$14>>2]|0;
           $143 = ($141>>>0)<($142>>>0);
           if ($143) {
            $144 = HEAP8[$141>>0]|0;
            $145 = ($144<<24>>24)>(-1);
            if ($145) {
             $146 = ((($141)) + 1|0);
             HEAP32[$13>>2] = $146;
             $147 = HEAP8[$141>>0]|0;
             $148 = $147&255;
             $150 = $148;
            } else {
             label = 50;
            }
           } else {
            label = 50;
           }
           if ((label|0) == 50) {
            label = 0;
            $149 = (_getwc($f)|0);
            $150 = $149;
           }
           $151 = (_iswspace($150)|0);
           $152 = ($151|0)==(0);
           $153 = (($pos$2) + 1)|0;
           if ($152) {
            $c$1 = $150;$pos$3 = $pos$2;
            label = 56;
            break;
           } else {
            $pos$2 = $153;
           }
          }
         }
        }
        }
        do {
         if ((label|0) == 52) {
          label = 0;
          $154 = HEAP32[$13>>2]|0;
          $155 = HEAP32[$14>>2]|0;
          $156 = ($154>>>0)<($155>>>0);
          if ($156) {
           $157 = HEAP8[$154>>0]|0;
           $158 = ($157<<24>>24)>(-1);
           if ($158) {
            $159 = ((($154)) + 1|0);
            HEAP32[$13>>2] = $159;
            $160 = HEAP8[$154>>0]|0;
            $161 = $160&255;
            $164 = $155;$c$120 = $161;$pos$321 = $pos$0128;
            label = 58;
            break;
           }
          }
          $162 = (_getwc($f)|0);
          $c$1 = $162;$pos$3 = $pos$0128;
          label = 56;
         }
        } while(0);
        if ((label|0) == 56) {
         label = 0;
         $163 = ($c$1|0)<(0);
         if ($163) {
          $alloc$0470 = $alloc$0;$matches$0122449 = $matches$0122;$s$6 = $s$1;$wcs$6 = $wcs$1;
          label = 123;
          break L6;
         }
         $$pre187 = HEAP32[$14>>2]|0;
         $164 = $$pre187;$c$120 = $c$1;$pos$321 = $pos$3;
         label = 58;
        }
        L56: do {
         if ((label|0) == 58) {
          label = 0;
          $165 = ($164|0)!=(0|0);
          $166 = ($c$120>>>0)<(128);
          $or$cond5 = $166 & $165;
          if ($or$cond5) {
           $167 = HEAP32[$13>>2]|0;
           $168 = ((($167)) + -1|0);
           HEAP32[$13>>2] = $168;
          } else {
           (_ungetwc($c$120,$f)|0);
          }
          switch ($$|0) {
          case 110:  {
           $pos$424 = $pos$321;
           break L56;
           break;
          }
          case 91: case 99: case 115:  {
           $178 = ($$|0)==(99);
           L64: do {
            if ($178) {
             $179 = ($width$0$lcssa|0)<(1);
             $$width$0 = $179 ? 1 : $width$0$lcssa;
             $invert$1 = 1;$p$8 = $p$5;$set$0 = 15584;$width$2 = $$width$0;
            } else {
             $180 = ($$|0)==(115);
             if ($180) {
              HEAP32[$0>>2] = 32;
              HEAP32[$15>>2] = 9;
              HEAP32[$16>>2] = 10;
              HEAP32[$17>>2] = 13;
              HEAP32[$18>>2] = 11;
              HEAP32[$19>>2] = 12;
              HEAP32[$20>>2] = 133;
              HEAP32[$21>>2] = 8192;
              HEAP32[$22>>2] = 8193;
              HEAP32[$23>>2] = 8194;
              HEAP32[$24>>2] = 8195;
              HEAP32[$25>>2] = 8196;
              HEAP32[$26>>2] = 8197;
              HEAP32[$27>>2] = 8198;
              HEAP32[$28>>2] = 8200;
              HEAP32[$29>>2] = 8201;
              HEAP32[$30>>2] = 8202;
              HEAP32[$31>>2] = 8232;
              HEAP32[$32>>2] = 8233;
              HEAP32[$33>>2] = 8287;
              HEAP32[$34>>2] = 12288;
              HEAP32[$35>>2] = 0;
              $invert$1 = 1;$p$8 = $p$5;$set$0 = $0;$width$2 = $width$0$lcssa;
              break;
             }
             $181 = ((($p$5)) + 4|0);
             $182 = HEAP32[$181>>2]|0;
             $183 = ($182|0)==(94);
             $184 = ((($p$5)) + 8|0);
             $invert$0 = $183&1;
             $185 = $183 ? $181 : $p$5;
             $p$6 = $183 ? $184 : $181;
             $186 = HEAP32[$p$6>>2]|0;
             $187 = ($186|0)==(93);
             $188 = ((($185)) + 8|0);
             $$p$6 = $187 ? $188 : $p$6;
             $p$7 = $$p$6;
             while(1) {
              $189 = HEAP32[$p$7>>2]|0;
              switch ($189|0) {
              case 0:  {
               $alloc$0470 = $alloc$0;$matches$0122449 = $matches$0122;$s$6 = $s$1;$wcs$6 = $wcs$1;
               label = 123;
               break L6;
               break;
              }
              case 93:  {
               $invert$1 = $invert$0;$p$8 = $p$7;$set$0 = $p$6;$width$2 = $width$0$lcssa;
               break L64;
               break;
              }
              default: {
              }
              }
              $190 = ((($p$7)) + 4|0);
              $p$7 = $190;
             }
            }
           } while(0);
           $191 = ($$size$0|0)==(0);
           $192 = $191 ? $dest$0 : 0;
           $193 = ($$size$0|0)==(1);
           $194 = $193 ? $dest$0 : 0;
           $195 = ($width$2|0)<(1);
           $$width$2 = $195 ? -1 : $width$2;
           $196 = ($alloc$0|0)!=(0);
           do {
            if ($196) {
             $197 = (($$width$2) + 1)|0;
             $198 = $178 ? $197 : 31;
             if ($193) {
              $199 = $198 << 2;
              $200 = (_malloc($199)|0);
              $201 = ($200|0)==(0|0);
              if ($201) {
               $alloc$0470 = $alloc$0;$matches$0122449 = $matches$0122;$s$6 = $192;$wcs$6 = $200;
               label = 123;
               break L6;
              } else {
               $k$1$ph = $198;$s$2$ph = $192;$wcs$2$ph = $200;
               break;
              }
             } else {
              $202 = (_malloc($198)|0);
              $203 = ($202|0)==(0|0);
              if ($203) {
               $alloc$0470 = $alloc$0;$matches$0122449 = $matches$0122;$s$6 = 0;$wcs$6 = $194;
               label = 123;
               break L6;
              } else {
               $k$1$ph = $198;$s$2$ph = $202;$wcs$2$ph = $194;
               break;
              }
             }
            } else {
             $k$1$ph = $k$0129;$s$2$ph = $192;$wcs$2$ph = $194;
            }
           } while(0);
           $204 = ($$width$2|0)==(0);
           L80: do {
            if ($204) {
             $i$058 = 0;$k$161 = $k$1$ph;$pos$555 = $pos$321;$s$249 = $s$2$ph;$wcs$252 = $wcs$2$ph;
            } else {
             $205 = ((($set$0)) + 4|0);
             $gotmatch$0109 = 0;$i$0105 = 0;$k$1107 = $k$1$ph;$pos$5103 = $pos$321;$s$2100 = $s$2$ph;$wcs$2101 = $wcs$2$ph;$width$4111 = $$width$2;
             while(1) {
              $206 = HEAP32[$13>>2]|0;
              $207 = HEAP32[$14>>2]|0;
              $208 = ($206>>>0)<($207>>>0);
              do {
               if ($208) {
                $209 = HEAP8[$206>>0]|0;
                $210 = ($209<<24>>24)>(-1);
                if (!($210)) {
                 label = 85;
                 break;
                }
                $211 = ((($206)) + 1|0);
                HEAP32[$13>>2] = $211;
                $212 = HEAP8[$206>>0]|0;
                $213 = $212&255;
                $217 = $213;
               } else {
                label = 85;
               }
              } while(0);
              if ((label|0) == 85) {
               label = 0;
               $214 = (_getwc($f)|0);
               $215 = ($214|0)<(0);
               if ($215) {
                $c$4190 = $214;$gotmatch$0109413 = $gotmatch$0109;$i$0105423 = $i$0105;$k$1107418 = $k$1107;$pos$5103428 = $pos$5103;$s$2100438 = $s$2100;$wcs$2101433 = $wcs$2101;
                label = 107;
                break;
               } else {
                $217 = $214;
               }
              }
              $216 = HEAP32[$set$0>>2]|0;
              switch ($216|0) {
              case 45:  {
               $218 = ($217|0)==(45);
               if ($218) {
                $$0$i = 1;
               } else {
                $p$0$i = $205;
                label = 89;
               }
               break;
              }
              case 93:  {
               $219 = ($217|0)==(93);
               if ($219) {
                $$0$i = 1;
               } else {
                $p$0$i = $205;
                label = 89;
               }
               break;
              }
              default: {
               $p$0$i = $set$0;
               label = 89;
              }
              }
              L93: do {
               if ((label|0) == 89) {
                while(1) {
                 label = 0;
                 $220 = HEAP32[$p$0$i>>2]|0;
                 L96: do {
                  switch ($220|0) {
                  case 93: case 0:  {
                   $$0$i = 0;
                   break L93;
                   break;
                  }
                  case 45:  {
                   $221 = ((($p$0$i)) + 4|0);
                   $222 = HEAP32[$221>>2]|0;
                   switch ($222|0) {
                   case 93: case 0:  {
                    $229 = 45;$p$1$i = $p$0$i;
                    break L96;
                    break;
                   }
                   default: {
                   }
                   }
                   $223 = ((($p$0$i)) + -4|0);
                   $224 = HEAP32[$223>>2]|0;
                   $225 = ($224|0)<($222|0);
                   if ($225) {
                    $j$02$i = $224;
                   } else {
                    $229 = $222;$p$1$i = $221;
                    break L96;
                   }
                   while(1) {
                    $228 = ($j$02$i|0)==($217|0);
                    $226 = (($j$02$i) + 1)|0;
                    if ($228) {
                     $$0$i = 1;
                     break L93;
                    }
                    $227 = ($226|0)<($222|0);
                    if ($227) {
                     $j$02$i = $226;
                    } else {
                     $229 = $222;$p$1$i = $221;
                     break;
                    }
                   }
                   break;
                  }
                  default: {
                   $229 = $220;$p$1$i = $p$0$i;
                  }
                  }
                 } while(0);
                 $230 = ($229|0)==($217|0);
                 $231 = ((($p$1$i)) + 4|0);
                 if ($230) {
                  $$0$i = 1;
                  break L93;
                 } else {
                  $p$0$i = $231;
                  label = 89;
                 }
                }
               }
              } while(0);
              $232 = ($$0$i|0)==($invert$1|0);
              if ($232) {
               $$lcssa440 = $217;$gotmatch$0109$lcssa409 = $gotmatch$0109;$i$0105$lcssa419 = $i$0105;$k$1107$lcssa414 = $k$1107;$pos$5103$lcssa424 = $pos$5103;$s$2100$lcssa434 = $s$2100;$wcs$2101$lcssa429 = $wcs$2101;
               label = 105;
               break;
              }
              $233 = ($wcs$2101|0)==(0|0);
              do {
               if ($233) {
                if ($193) {
                 $i$1 = $i$0105;$k$2 = $k$1107;$s$3 = $s$2100;$wcs$3 = 0;
                 break;
                }
                $241 = ($s$2100|0)==(0|0);
                $242 = (($s$2100) + ($i$0105)|0);
                $243 = $241 ? $tmp : $242;
                $244 = (_wctomb($243,$217)|0);
                $245 = ($244|0)<(0);
                if ($245) {
                 $alloc$0470 = $alloc$0;$matches$0122449 = $matches$0122;$s$6 = $s$2100;$wcs$6 = 0;
                 label = 123;
                 break L6;
                }
                $246 = (($244) + ($i$0105))|0;
                $247 = (($k$1107) + -4)|0;
                $248 = ($246>>>0)>($247>>>0);
                $or$cond14 = $196 & $248;
                if (!($or$cond14)) {
                 $i$1 = $246;$k$2 = $k$1107;$s$3 = $s$2100;$wcs$3 = 0;
                 break;
                }
                $factor29 = $k$1107 << 1;
                $249 = $factor29 | 1;
                $250 = (_realloc($s$2100,$249)|0);
                $251 = ($250|0)==(0|0);
                if ($251) {
                 $alloc$0470 = $alloc$0;$matches$0122449 = $matches$0122;$s$6 = $s$2100;$wcs$6 = 0;
                 label = 123;
                 break L6;
                } else {
                 $i$1 = $246;$k$2 = $249;$s$3 = $250;$wcs$3 = 0;
                }
               } else {
                $234 = (($i$0105) + 1)|0;
                $235 = (($wcs$2101) + ($i$0105<<2)|0);
                HEAP32[$235>>2] = $217;
                $236 = ($234|0)==($k$1107|0);
                $or$cond12 = $196 & $236;
                if (!($or$cond12)) {
                 $i$1 = $234;$k$2 = $k$1107;$s$3 = $s$2100;$wcs$3 = $wcs$2101;
                 break;
                }
                $factor = $k$1107 << 1;
                $237 = $factor | 1;
                $238 = $237 << 2;
                $239 = (_realloc($wcs$2101,$238)|0);
                $240 = ($239|0)==(0|0);
                if ($240) {
                 $alloc$0470 = $alloc$0;$matches$0122449 = $matches$0122;$s$6 = $s$2100;$wcs$6 = $wcs$2101;
                 label = 123;
                 break L6;
                }
                $i$1 = $k$1107;$k$2 = $237;$s$3 = $s$2100;$wcs$3 = $239;
               }
              } while(0);
              $252 = (($pos$5103) + 1)|0;
              $253 = ($width$4111|0)>(0);
              $254 = $253&1;
              $255 = (($width$4111) - ($254))|0;
              $256 = ($width$4111|0)==($254|0);
              if ($256) {
               $i$058 = $i$1;$k$161 = $k$2;$pos$555 = $252;$s$249 = $s$3;$wcs$252 = $wcs$3;
               break L80;
              } else {
               $gotmatch$0109 = 1;$i$0105 = $i$1;$k$1107 = $k$2;$pos$5103 = $252;$s$2100 = $s$3;$wcs$2101 = $wcs$3;$width$4111 = $255;
              }
             }
             if ((label|0) == 105) {
              label = 0;
              $257 = HEAP32[$14>>2]|0;
              $258 = ($257|0)!=(0|0);
              $259 = ($$lcssa440>>>0)<(128);
              $or$cond7 = $259 & $258;
              if ($or$cond7) {
               $260 = HEAP32[$13>>2]|0;
               $261 = ((($260)) + -1|0);
               HEAP32[$13>>2] = $261;
               $gotmatch$0109412 = $gotmatch$0109$lcssa409;$i$0105422 = $i$0105$lcssa419;$k$1107417 = $k$1107$lcssa414;$pos$5103427 = $pos$5103$lcssa424;$s$2100437 = $s$2100$lcssa434;$wcs$2101432 = $wcs$2101$lcssa429;
              } else {
               $c$4190 = $$lcssa440;$gotmatch$0109413 = $gotmatch$0109$lcssa409;$i$0105423 = $i$0105$lcssa419;$k$1107418 = $k$1107$lcssa414;$pos$5103428 = $pos$5103$lcssa424;$s$2100438 = $s$2100$lcssa434;$wcs$2101433 = $wcs$2101$lcssa429;
               label = 107;
              }
             }
             if ((label|0) == 107) {
              label = 0;
              (_ungetwc($c$4190,$f)|0);
              $gotmatch$0109412 = $gotmatch$0109413;$i$0105422 = $i$0105423;$k$1107417 = $k$1107418;$pos$5103427 = $pos$5103428;$s$2100437 = $s$2100438;$wcs$2101432 = $wcs$2101433;
             }
             $262 = ($$|0)!=(99);
             $263 = ($gotmatch$0109412|0)!=(0);
             $or$cond9 = $262 & $263;
             if ($or$cond9) {
              $i$058 = $i$0105422;$k$161 = $k$1107417;$pos$555 = $pos$5103427;$s$249 = $s$2100437;$wcs$252 = $wcs$2101432;
             } else {
              $alloc$2 = $alloc$0;$matches$2 = $matches$0122;$s$8 = $s$2100437;$wcs$8 = $wcs$2101432;
              break L6;
             }
            }
           } while(0);
           do {
            if ($196) {
             if ($193) {
              HEAP32[$dest$0>>2] = $wcs$252;
              break;
             } else {
              HEAP32[$dest$0>>2] = $s$249;
              break;
             }
            }
           } while(0);
           if ($178) {
            $k$3 = $k$161;$p$9 = $p$8;$pos$6 = $pos$555;$s$4 = $s$249;$wcs$4 = $wcs$252;
           } else {
            $264 = ($wcs$252|0)==(0|0);
            if (!($264)) {
             $265 = (($wcs$252) + ($i$058<<2)|0);
             HEAP32[$265>>2] = 0;
            }
            $266 = ($s$249|0)==(0|0);
            if ($266) {
             $k$3 = $k$161;$p$9 = $p$8;$pos$6 = $pos$555;$s$4 = 0;$wcs$4 = $wcs$252;
            } else {
             $267 = (($s$249) + ($i$058)|0);
             HEAP8[$267>>0] = 0;
             $k$3 = $k$161;$p$9 = $p$8;$pos$6 = $pos$555;$s$4 = $s$249;$wcs$4 = $wcs$252;
            }
           }
           break;
          }
          case 112: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
           $268 = ($width$0$lcssa|0)>(0);
           $$width$015 = $268 ? $width$0$lcssa : 0;
           $269 = ($dest$0|0)!=(0|0);
           $270 = $269&1;
           $271 = (2 - ($270))|0;
           $272 = (($$size$0) + 2)|0;
           $273 = (176231 + (($272*3)|0)|0);
           HEAP32[$vararg_buffer>>2] = $271;
           $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
           HEAP32[$vararg_ptr4>>2] = 176267;
           $vararg_ptr5 = ((($vararg_buffer)) + 8|0);
           HEAP32[$vararg_ptr5>>2] = $$width$015;
           $vararg_ptr6 = ((($vararg_buffer)) + 12|0);
           HEAP32[$vararg_ptr6>>2] = $273;
           $vararg_ptr7 = ((($vararg_buffer)) + 16|0);
           HEAP32[$vararg_ptr7>>2] = $$;
           (_snprintf($tmp,22,176249,$vararg_buffer)|0);
           HEAP32[$cnt>>2] = 0;
           $274 = $269 ? $dest$0 : $cnt;
           HEAP32[$vararg_buffer8>>2] = $274;
           $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
           HEAP32[$vararg_ptr11>>2] = $cnt;
           $275 = (_fscanf($f,$tmp,$vararg_buffer8)|0);
           $276 = ($275|0)==(-1);
           if ($276) {
            $alloc$0470 = $alloc$0;$matches$0122449 = $matches$0122;$s$6 = $s$1;$wcs$6 = $wcs$1;
            label = 123;
            break L6;
           }
           $277 = HEAP32[$cnt>>2]|0;
           $278 = ($277|0)==(0);
           if ($278) {
            $alloc$2 = $alloc$0;$matches$2 = $matches$0122;$s$8 = $s$1;$wcs$8 = $wcs$1;
            break L6;
           }
           $279 = (($277) + ($pos$321))|0;
           $k$3 = $k$0129;$p$9 = $p$5;$pos$6 = $279;$s$4 = $s$1;$wcs$4 = $wcs$1;
           break;
          }
          default: {
           $alloc$0470 = $alloc$0;$matches$0122449 = $matches$0122;$s$6 = $s$1;$wcs$6 = $wcs$1;
           label = 123;
           break L6;
          }
          }
          $not$ = ($dest$0|0)!=(0|0);
          $280 = $not$&1;
          $matches$0$ = (($280) + ($matches$0122))|0;
          $k$4 = $k$3;$matches$1 = $matches$0$;$p$10 = $p$9;$pos$7 = $pos$6;$s$5 = $s$4;$wcs$5 = $wcs$4;
          break L8;
         }
        } while(0);
        $169 = ($pos$424|0)<(0);
        $170 = $169 << 31 >> 31;
        $171 = ($dest$0|0)==(0|0);
        if ($171) {
         $k$4 = $k$0129;$matches$1 = $matches$0122;$p$10 = $p$5;$pos$7 = $pos$424;$s$5 = $s$1;$wcs$5 = $wcs$1;
         break L8;
        }
        switch ($$size$0|0) {
        case -2:  {
         $172 = $pos$424&255;
         HEAP8[$dest$0>>0] = $172;
         $k$4 = $k$0129;$matches$1 = $matches$0122;$p$10 = $p$5;$pos$7 = $pos$424;$s$5 = $s$1;$wcs$5 = $wcs$1;
         break L8;
         break;
        }
        case -1:  {
         $173 = $pos$424&65535;
         HEAP16[$dest$0>>1] = $173;
         $k$4 = $k$0129;$matches$1 = $matches$0122;$p$10 = $p$5;$pos$7 = $pos$424;$s$5 = $s$1;$wcs$5 = $wcs$1;
         break L8;
         break;
        }
        case 0:  {
         HEAP32[$dest$0>>2] = $pos$424;
         $k$4 = $k$0129;$matches$1 = $matches$0122;$p$10 = $p$5;$pos$7 = $pos$424;$s$5 = $s$1;$wcs$5 = $wcs$1;
         break L8;
         break;
        }
        case 1:  {
         HEAP32[$dest$0>>2] = $pos$424;
         $k$4 = $k$0129;$matches$1 = $matches$0122;$p$10 = $p$5;$pos$7 = $pos$424;$s$5 = $s$1;$wcs$5 = $wcs$1;
         break L8;
         break;
        }
        case 3:  {
         $174 = $dest$0;
         $175 = $174;
         HEAP32[$175>>2] = $pos$424;
         $176 = (($174) + 4)|0;
         $177 = $176;
         HEAP32[$177>>2] = $170;
         $k$4 = $k$0129;$matches$1 = $matches$0122;$p$10 = $p$5;$pos$7 = $pos$424;$s$5 = $s$1;$wcs$5 = $wcs$1;
         break L8;
         break;
        }
        default: {
         $k$4 = $k$0129;$matches$1 = $matches$0122;$p$10 = $p$5;$pos$7 = $pos$424;$s$5 = $s$1;$wcs$5 = $wcs$1;
         break L8;
        }
        }
       }
      } while(0);
      $65 = $62&1;
      $66 = (($p$0131) + ($65<<2)|0);
      $67 = HEAP32[$13>>2]|0;
      $68 = HEAP32[$14>>2]|0;
      $69 = ($67>>>0)<($68>>>0);
      if ($69) {
       $70 = HEAP8[$67>>0]|0;
       $71 = ($70<<24>>24)>(-1);
       if ($71) {
        $72 = ((($67)) + 1|0);
        HEAP32[$13>>2] = $72;
        $73 = HEAP8[$67>>0]|0;
        $74 = $73&255;
        $77 = $74;
       } else {
        label = 21;
       }
      } else {
       label = 21;
      }
      if ((label|0) == 21) {
       label = 0;
       $75 = (_getwc($f)|0);
       $77 = $75;
      }
      $76 = HEAP32[$66>>2]|0;
      $78 = ($77|0)==($76|0);
      if (!($78)) {
       $$lcssa460 = $77;$matches$0122$lcssa = $matches$0122;$s$0120$lcssa = $s$0120;$wcs$0121$lcssa = $wcs$0121;
       label = 23;
       break L6;
      }
      $86 = (($pos$0128) + 1)|0;
      $k$4 = $k$0129;$matches$1 = $matches$0122;$p$10 = $66;$pos$7 = $86;$s$5 = $s$0120;$wcs$5 = $wcs$0121;
     } else {
      $p$1 = $p$0131;
      while(1) {
       $39 = ((($p$1)) + 4|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = (_iswspace($40)|0);
       $42 = ($41|0)==(0);
       if ($42) {
        $p$1$lcssa = $p$1;
        break;
       } else {
        $p$1 = $39;
       }
      }
      $pos$1 = $pos$0128;
      while(1) {
       $43 = HEAP32[$13>>2]|0;
       $44 = HEAP32[$14>>2]|0;
       $45 = ($43>>>0)<($44>>>0);
       if ($45) {
        $46 = HEAP8[$43>>0]|0;
        $47 = ($46<<24>>24)>(-1);
        if ($47) {
         $48 = ((($43)) + 1|0);
         HEAP32[$13>>2] = $48;
         $49 = HEAP8[$43>>0]|0;
         $50 = $49&255;
         $52 = $50;
        } else {
         label = 11;
        }
       } else {
        label = 11;
       }
       if ((label|0) == 11) {
        label = 0;
        $51 = (_getwc($f)|0);
        $52 = $51;
       }
       $53 = (_iswspace($52)|0);
       $54 = ($53|0)==(0);
       $55 = (($pos$1) + 1)|0;
       if ($54) {
        $$lcssa = $52;$pos$1$lcssa = $pos$1;
        break;
       } else {
        $pos$1 = $55;
       }
      }
      $56 = HEAP32[$14>>2]|0;
      $57 = ($56|0)!=(0|0);
      $58 = ($$lcssa>>>0)<(128);
      $or$cond = $58 & $57;
      if ($or$cond) {
       $59 = HEAP32[$13>>2]|0;
       $60 = ((($59)) + -1|0);
       HEAP32[$13>>2] = $60;
       $k$4 = $k$0129;$matches$1 = $matches$0122;$p$10 = $p$1$lcssa;$pos$7 = $pos$1$lcssa;$s$5 = $s$0120;$wcs$5 = $wcs$0121;
       break;
      } else {
       (_ungetwc($$lcssa,$f)|0);
       $k$4 = $k$0129;$matches$1 = $matches$0122;$p$10 = $p$1$lcssa;$pos$7 = $pos$1$lcssa;$s$5 = $s$0120;$wcs$5 = $wcs$0121;
       break;
      }
     }
    } while(0);
    $281 = ((($p$10)) + 4|0);
    $282 = HEAP32[$281>>2]|0;
    $283 = ($282|0)==(0);
    if ($283) {
     $matches$3 = $matches$1;
     break L4;
    } else {
     $36 = $282;$k$0129 = $k$4;$matches$0122 = $matches$1;$p$0131 = $281;$pos$0128 = $pos$7;$s$0120 = $s$5;$wcs$0121 = $wcs$5;
    }
   }
   if ((label|0) == 23) {
    $79 = HEAP32[$14>>2]|0;
    $80 = ($79|0)!=(0|0);
    $81 = ($$lcssa460>>>0)<(128);
    $or$cond3 = $81 & $80;
    if ($or$cond3) {
     $82 = HEAP32[$13>>2]|0;
     $83 = ((($82)) + -1|0);
     HEAP32[$13>>2] = $83;
    } else {
     (_ungetwc($$lcssa460,$f)|0);
    }
    $84 = ($$lcssa460|0)>(-1);
    $85 = ($matches$0122$lcssa|0)!=(0);
    $or$cond11 = $85 | $84;
    if ($or$cond11) {
     $matches$3 = $matches$0122$lcssa;
     break;
    } else {
     $alloc$1 = 0;$s$7 = $s$0120$lcssa;$wcs$7 = $wcs$0121$lcssa;
     label = 124;
    }
   }
   else if ((label|0) == 123) {
    $$old10 = ($matches$0122449|0)==(0);
    if ($$old10) {
     $alloc$1 = $alloc$0470;$s$7 = $s$6;$wcs$7 = $wcs$6;
     label = 124;
    } else {
     $alloc$2 = $alloc$0470;$matches$2 = $matches$0122449;$s$8 = $s$6;$wcs$8 = $wcs$6;
    }
   }
   if ((label|0) == 124) {
    $alloc$2 = $alloc$1;$matches$2 = -1;$s$8 = $s$7;$wcs$8 = $wcs$7;
   }
   $284 = ($alloc$2|0)==(0);
   if ($284) {
    $matches$3 = $matches$2;
   } else {
    _free($s$8);
    _free($wcs$8);
    $matches$3 = $matches$2;
   }
  }
 } while(0);
 $286 = ($285|0)==(0);
 if (!($286)) {
  ___unlockfile($f);
 }
 STACKTOP = sp;return ($matches$3|0);
}
function _vprintf($fmt,$ap) {
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7504>>2]|0;
 $1 = (_vfprintf($0,$fmt,$ap)|0);
 return ($1|0);
}
function _vscanf($fmt,$ap) {
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7496>>2]|0;
 $1 = (_vfscanf($0,$fmt,$ap)|0);
 return ($1|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=15588; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 4;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = $$01;
  $5 = (-2 - ($4))|0;
  $6 = ($$02>>>0)>($5>>>0);
  $$$02 = $6 ? $5 : $$02;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $$$02;
  $8 = ((($f)) + 20|0);
  HEAP32[$8>>2] = $$01;
  $9 = ((($f)) + 44|0);
  HEAP32[$9>>2] = $$01;
  $10 = (($$01) + ($$$02)|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($f)) + 28|0);
  HEAP32[$12>>2] = $10;
  $13 = (_vfprintf($f,$fmt,$ap)|0);
  $14 = ($$$02|0)==(0);
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8>>2]|0;
   $16 = HEAP32[$11>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17 << 31 >> 31;
   $19 = (($15) + ($18)|0);
   HEAP8[$19>>0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 32|0);
 HEAP32[$0>>2] = 26;
 $1 = ((($f)) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ((($f)) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = ((($f)) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function _vswprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $c = 0, $f = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp + 8|0;
 $buf = sp + 120|0;
 $c = sp;
 HEAP32[$c>>2] = $s;
 $0 = ((($c)) + 4|0);
 $1 = (($n) + -1)|0;
 HEAP32[$0>>2] = $1;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $2 = ((($f)) + 75|0);
 HEAP8[$2>>0] = -1;
 $3 = ((($f)) + 36|0);
 HEAP32[$3>>2] = 27;
 $4 = ((($f)) + 48|0);
 HEAP32[$4>>2] = 256;
 $5 = ((($f)) + 44|0);
 HEAP32[$5>>2] = $buf;
 $6 = ((($f)) + 76|0);
 HEAP32[$6>>2] = -1;
 $7 = ((($f)) + 84|0);
 HEAP32[$7>>2] = $c;
 $8 = ($n|0)==(0);
 do {
  if ($8) {
   $$0 = -1;
  } else {
   $9 = ($n|0)<(0);
   if ($9) {
    $10 = (___errno_location()|0);
    HEAP32[$10>>2] = 75;
    $$0 = -1;
    break;
   } else {
    $11 = (_vfwprintf($f,$fmt,$ap)|0);
    (_sw_write($f,0,0)|0);
    $12 = ($11>>>0)>=($n>>>0);
    $13 = $12 ? -1 : $11;
    $$0 = $13;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _vswscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $buf = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 112|0;
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 32|0);
 HEAP32[$0>>2] = 28;
 $1 = ((($f)) + 44|0);
 HEAP32[$1>>2] = $buf;
 $2 = ((($f)) + 48|0);
 HEAP32[$2>>2] = 256;
 $3 = ((($f)) + 76|0);
 HEAP32[$3>>2] = -1;
 $4 = ((($f)) + 84|0);
 HEAP32[$4>>2] = $s;
 $5 = (_vfwscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($5|0);
}
function _vwprintf($fmt,$ap) {
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7504>>2]|0;
 $1 = (_vfwprintf($0,$fmt,$ap)|0);
 return ($1|0);
}
function _vwscanf($fmt,$ap) {
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7496>>2]|0;
 $1 = (_vfwscanf($0,$fmt,$ap)|0);
 return ($1|0);
}
function _wprintf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vwprintf($fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _wscanf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vwscanf($fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function ___fclose_ca($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (FUNCTION_TABLE_ii[$1 & 63]($f)|0);
 return ($2|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio = sp + 52|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(176270,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (_malloc(1144)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $6 = (_strchr($mode,43)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ($0<<24>>24)==(114);
    $9 = $8 ? 8 : 4;
    HEAP32[$4>>2] = $9;
   }
   $10 = (_strchr($mode,101)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $12 = $$pre;
   }
   $13 = ($12<<24>>24)==(97);
   if ($13) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $14 = (___syscall221(221,($vararg_buffer3|0))|0);
    $15 = $14 & 1024;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $17;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = $18 | 128;
    HEAP32[$4>>2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4>>2]|0;
    $26 = $$pre1;
   }
   $20 = ((($4)) + 60|0);
   HEAP32[$20>>2] = $fd;
   $21 = ((($4)) + 120|0);
   $22 = ((($4)) + 44|0);
   HEAP32[$22>>2] = $21;
   $23 = ((($4)) + 48|0);
   HEAP32[$23>>2] = 1024;
   $24 = ((($4)) + 75|0);
   HEAP8[$24>>0] = -1;
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   if ($27) {
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $tio;
    $28 = (___syscall54(54,($vararg_buffer12|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     HEAP8[$24>>0] = 10;
    }
   }
   $30 = ((($4)) + 32|0);
   HEAP32[$30>>2] = 5;
   $31 = ((($4)) + 36|0);
   HEAP32[$31>>2] = 3;
   $32 = ((($4)) + 40|0);
   HEAP32[$32>>2] = 4;
   $33 = ((($4)) + 12|0);
   HEAP32[$33>>2] = 2;
   $34 = HEAP32[(7172)>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($4)) + 76|0);
    HEAP32[$36>>2] = -1;
   }
   ___lock(((7196)|0));
   $37 = HEAP32[(7192)>>2]|0;
   $38 = ((($4)) + 56|0);
   HEAP32[$38>>2] = $37;
   $39 = ($37|0)==(0);
   if (!($39)) {
    $40 = $37;
    $41 = ((($40)) + 52|0);
    HEAP32[$41>>2] = $4;
   }
   HEAP32[(7192)>>2] = $4;
   ___unlock(((7196)|0));
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
 var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = HEAP8[$mode>>0]|0;
 $not$ = ($2<<24>>24)!=(114);
 $$ = $not$&1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (_strchr($mode,120)|0);
 $4 = ($3|0)==(0|0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (_strchr($mode,101)|0);
 $7 = ($6|0)==(0|0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = ($2<<24>>24)==(114);
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = ($2<<24>>24)==(119);
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = ($2<<24>>24)==(97);
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 return ($$flags$4|0);
}
function ___fopen_rb_ca($filename,$f,$buf,$len) {
 $filename = $filename|0;
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$vararg_buffer>>2] = $filename;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 557056;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 0;
 $0 = (___syscall5(5,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 $2 = ((($f)) + 60|0);
 HEAP32[$2>>2] = $1;
 $3 = ($1|0)<(0);
 if ($3) {
  $$0 = 0;
 } else {
  HEAP32[$f>>2] = 9;
  $4 = ((($buf)) + 8|0);
  $5 = ((($f)) + 44|0);
  HEAP32[$5>>2] = $4;
  $6 = (($len) + -8)|0;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $6;
  $8 = ((($f)) + 32|0);
  HEAP32[$8>>2] = 5;
  $9 = ((($f)) + 40|0);
  HEAP32[$9>>2] = 4;
  $10 = ((($f)) + 12|0);
  HEAP32[$10>>2] = 2;
  $11 = ((($f)) + 76|0);
  HEAP32[$11>>2] = -1;
  $$0 = $f;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 63]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___stdio_exit() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f$0 = 0, $f$01 = 0, $f$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ___lock(((7196)|0));
 $f$01 = HEAP32[(7192)>>2]|0;
 $0 = ($f$01|0)==(0|0);
 if (!($0)) {
  $f$02 = $f$01;
  while(1) {
   _close_file($f$02);
   $1 = ((($f$02)) + 56|0);
   $f$0 = HEAP32[$1>>2]|0;
   $2 = ($f$0|0)==(0|0);
   if ($2) {
    break;
   } else {
    $f$02 = $f$0;
   }
  }
 }
 $3 = HEAP32[7500>>2]|0;
 _close_file($3);
 $4 = HEAP32[7508>>2]|0;
 _close_file($4);
 return;
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[7168>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((29|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $32 = $30;
   $33 = (($32) + ($29)|0);
   $34 = ((($f)) + 8|0);
   HEAP32[$34>>2] = $33;
   $35 = HEAP32[$1>>2]|0;
   $36 = ($35|0)==(0);
   if ($36) {
    $$0 = $len;
   } else {
    $37 = ((($32)) + 1|0);
    HEAP32[$31>>2] = $37;
    $38 = HEAP8[$32>>0]|0;
    $39 = (($len) + -1)|0;
    $40 = (($buf) + ($39)|0);
    HEAP8[$40>>0] = $38;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0;
 var $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($5) - ($1))|0;
 HEAP32[$2>>2] = $6;
 $7 = ((($iovs)) + 8|0);
 HEAP32[$7>>2] = $buf;
 $8 = ((($iovs)) + 12|0);
 HEAP32[$8>>2] = $len;
 $9 = (($6) + ($len))|0;
 $10 = ((($f)) + 60|0);
 $11 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $9;
 while(1) {
  $12 = HEAP32[7168>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $17 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $17;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $18 = (___syscall146(146,($vararg_buffer3|0))|0);
   $19 = (___syscall_ret($18)|0);
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push((30|0),($f|0));
   $14 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $15 = (___syscall146(146,($vararg_buffer|0))|0);
   $16 = (___syscall_ret($15)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $16;
  }
  $20 = ($rem$0|0)==($cnt$0|0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0|0)<(0);
  if ($27) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = (($rem$0) - ($cnt$0))|0;
  $36 = ((($iov$0)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($cnt$0>>>0)>($37>>>0);
  if ($38) {
   $39 = HEAP32[$11>>2]|0;
   HEAP32[$0>>2] = $39;
   HEAP32[$3>>2] = $39;
   $40 = (($cnt$0) - ($37))|0;
   $41 = ((($iov$0)) + 8|0);
   $42 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $50 = $$pre;$cnt$1 = $40;$iov$1 = $41;$iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0|0)==(2);
   if ($43) {
    $44 = HEAP32[$0>>2]|0;
    $45 = (($44) + ($cnt$0)|0);
    HEAP32[$0>>2] = $45;
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = HEAP32[$iov$1>>2]|0;
  $47 = (($46) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $47;
  $48 = ((($iov$1)) + 4|0);
  $49 = (($50) - ($cnt$1))|0;
  HEAP32[$48>>2] = $49;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $35;
 }
 if ((label|0) == 6) {
  $21 = HEAP32[$11>>2]|0;
  $22 = ((($f)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23)|0);
  $25 = ((($f)) + 16|0);
  HEAP32[$25>>2] = $24;
  $26 = $21;
  HEAP32[$0>>2] = $26;
  HEAP32[$3>>2] = $26;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $28 = ((($f)) + 16|0);
  HEAP32[$28>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $29 = HEAP32[$f>>2]|0;
  $30 = $29 | 32;
  HEAP32[$f>>2] = $30;
  $31 = ($iovcnt$0$lcssa12|0)==(2);
  if ($31) {
   $$0 = 0;
  } else {
   $32 = ((($iov$0$lcssa11)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($len) - ($33))|0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 3;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 $5 = $3;
 $6 = $1;
 $7 = (($5) - ($6))|0;
 $k$0 = $4 ? $2 : $7;
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = ((($f)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = ((($f)) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 return ($k$0$len|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 63]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function ___toread_needs_stdio_exit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_v[31 & 31]();
 return;
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___towrite_needs_stdio_exit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_v[31 & 31]();
 return;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 63]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _atof($s) {
 $s = $s|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtod($s,0));
 return (+$0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit2 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp5 = 0, $n$0$lcssa = 0, $n$04 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = ((($$0)) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa9 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 switch ($6|0) {
 case 45:  {
  $neg$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $neg$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa9>>0]|0;
  $$1$ph = $$lcssa9;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $isdigittmp1 = (($7) + -48)|0;
 $isdigit2 = ($isdigittmp1>>>0)<(10);
 if ($isdigit2) {
  $$13 = $$1$ph;$isdigittmp5 = $isdigittmp1;$n$04 = 0;
  while(1) {
   $9 = ($n$04*10)|0;
   $10 = ((($$13)) + 1|0);
   $11 = (($9) - ($isdigittmp5))|0;
   $12 = HEAP8[$10>>0]|0;
   $13 = $12 << 24 >> 24;
   $isdigittmp = (($13) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$13 = $10;$isdigittmp5 = $isdigittmp;$n$04 = $11;
   } else {
    $n$0$lcssa = $11;
    break;
   }
  }
 } else {
  $n$0$lcssa = 0;
 }
 $14 = ($neg$1$ph|0)!=(0);
 $15 = (0 - ($n$0$lcssa))|0;
 $16 = $14 ? $n$0$lcssa : $15;
 return ($16|0);
}
function _atol($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit2 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp5 = 0, $n$0$lcssa = 0, $n$04 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = ((($$0)) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa9 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 switch ($6|0) {
 case 45:  {
  $neg$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $neg$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa9>>0]|0;
  $$1$ph = $$lcssa9;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $isdigittmp1 = (($7) + -48)|0;
 $isdigit2 = ($isdigittmp1>>>0)<(10);
 if ($isdigit2) {
  $$13 = $$1$ph;$isdigittmp5 = $isdigittmp1;$n$04 = 0;
  while(1) {
   $9 = ($n$04*10)|0;
   $10 = ((($$13)) + 1|0);
   $11 = (($9) - ($isdigittmp5))|0;
   $12 = HEAP8[$10>>0]|0;
   $13 = $12 << 24 >> 24;
   $isdigittmp = (($13) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$13 = $10;$isdigittmp5 = $isdigittmp;$n$04 = $11;
   } else {
    $n$0$lcssa = $11;
    break;
   }
  }
 } else {
  $n$0$lcssa = 0;
 }
 $14 = ($neg$1$ph|0)!=(0);
 $15 = (0 - ($n$0$lcssa))|0;
 $16 = $14 ? $n$0$lcssa : $15;
 return ($16|0);
}
function _atoll($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit2 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp5 = 0, $neg$0 = 0, $neg$1$ph = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = ((($$0)) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa9 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 switch ($6|0) {
 case 45:  {
  $neg$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $neg$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa9>>0]|0;
  $$1$ph = $$lcssa9;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $isdigittmp1 = (($7) + -48)|0;
 $isdigit2 = ($isdigittmp1>>>0)<(10);
 if ($isdigit2) {
  $$13 = $$1$ph;$10 = 0;$9 = 0;$isdigittmp5 = $isdigittmp1;
  while(1) {
   $11 = (___muldi3(($9|0),($10|0),10,0)|0);
   $12 = tempRet0;
   $13 = ((($$13)) + 1|0);
   $14 = ($isdigittmp5|0)<(0);
   $15 = $14 << 31 >> 31;
   $16 = (_i64Subtract(($11|0),($12|0),($isdigittmp5|0),($15|0))|0);
   $17 = tempRet0;
   $18 = HEAP8[$13>>0]|0;
   $19 = $18 << 24 >> 24;
   $isdigittmp = (($19) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$13 = $13;$10 = $17;$9 = $16;$isdigittmp5 = $isdigittmp;
   } else {
    $21 = $16;$22 = $17;
    break;
   }
  }
 } else {
  $21 = 0;$22 = 0;
 }
 $20 = ($neg$1$ph|0)!=(0);
 $23 = (_i64Subtract(0,0,($21|0),($22|0))|0);
 $24 = tempRet0;
 $25 = $20 ? $21 : $23;
 $26 = $20 ? $22 : $24;
 tempRet0 = ($26);
 return ($25|0);
}
function _bsearch($key,$base,$nel,$width,$cmp) {
 $key = $key|0;
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$ = 0, $$0 = 0, $$01$ = 0, $$014 = 0, $$023 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nel|0)==(0);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $$014 = $base;$$023 = $nel;
   while(1) {
    $1 = $$023 >>> 1;
    $2 = Math_imul($1, $width)|0;
    $3 = (($$014) + ($2)|0);
    $4 = (FUNCTION_TABLE_iii[$cmp & 63]($key,$3)|0);
    $5 = ($4|0)==(0);
    if ($5) {
     $$0 = $3;
     break L1;
    }
    $6 = ($$023|0)==(1);
    if ($6) {
     $$0 = 0;
     break L1;
    }
    $7 = ($4|0)<(0);
    $8 = (($$023) - ($1))|0;
    $$ = $7 ? $1 : $8;
    $$01$ = $7 ? $$014 : $3;
    $9 = ($$|0)==(0);
    if ($9) {
     $$0 = 0;
     break;
    } else {
     $$014 = $$01$;$$023 = $$;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _div($agg$result,$num,$den) {
 $agg$result = $agg$result|0;
 $num = $num|0;
 $den = $den|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($num|0) / ($den|0))&-1;
 HEAP32[$agg$result>>2] = $0;
 $1 = ((($agg$result)) + 4|0);
 $2 = (($num|0) % ($den|0))&-1;
 HEAP32[$1>>2] = $2;
 return;
}
function _ecvt($x,$n,$dp,$sign) {
 $x = +$x;
 $n = $n|0;
 $dp = $dp|0;
 $sign = $sign|0;
 var $$lcssa = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$01 = 0, $j$02 = 0, $tmp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tmp = sp + 16|0;
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(15);
 $2 = $1 ? 14 : $0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
 HEAPF64[$vararg_ptr1>>3] = $x;
 (_sprintf($tmp,176274,$vararg_buffer)|0);
 $3 = HEAP8[$tmp>>0]|0;
 $4 = ($3<<24>>24)==(45);
 $5 = $4&1;
 HEAP32[$sign>>2] = $5;
 $6 = (($tmp) + ($5)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(101);
 if ($8) {
  $$lcssa = 176279;$i$0$lcssa = $5;
 } else {
  $10 = 176279;$9 = $7;$i$01 = $5;$j$02 = 0;
  while(1) {
   HEAP8[$10>>0] = $9;
   $11 = (($i$01) + 1)|0;
   $12 = ($9<<24>>24)!=(46);
   $13 = $12&1;
   $14 = (($13) + ($j$02))|0;
   $15 = (($tmp) + ($11)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)==(101);
   $18 = (176279 + ($14)|0);
   if ($17) {
    $$lcssa = $18;$i$0$lcssa = $11;
    break;
   } else {
    $10 = $18;$9 = $16;$i$01 = $11;$j$02 = $14;
   }
  }
 }
 HEAP8[$$lcssa>>0] = 0;
 $$sum = (($i$0$lcssa) + 1)|0;
 $19 = (($tmp) + ($$sum)|0);
 $20 = (_atoi($19)|0);
 $21 = (($20) + 1)|0;
 HEAP32[$dp>>2] = $21;
 STACKTOP = sp;return (176279|0);
}
function _fcvt($x,$n,$dp,$sign) {
 $x = +$x;
 $n = $n|0;
 $dp = $dp|0;
 $sign = $sign|0;
 var $$0 = 0, $$n = 0, $$sum = 0, $$sum23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $lz$0 = 0, $n$op = 0, $tmp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1520|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tmp = sp + 16|0;
 $0 = ($n>>>0)>(1400);
 $$n = $0 ? 1400 : $n;
 HEAP32[$vararg_buffer>>2] = $$n;
 $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
 HEAPF64[$vararg_ptr1>>3] = $x;
 (_sprintf($tmp,176295,$vararg_buffer)|0);
 $1 = HEAP8[$tmp>>0]|0;
 $2 = ($1<<24>>24)==(45);
 $3 = $2&1;
 $4 = (($tmp) + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(48);
 if ($6) {
  $$sum23 = $3 | 2;
  $7 = (($tmp) + ($$sum23)|0);
  $8 = (_strspn($7,179617)|0);
  $lz$0 = $8;
 } else {
  $9 = (_strcspn($4,180290)|0);
  $10 = (0 - ($9))|0;
  $lz$0 = $10;
 }
 $11 = ($$n|0)>($lz$0|0);
 if ($11) {
  $14 = (($$n) - ($lz$0))|0;
  $15 = (_ecvt($x,$14,$dp,$sign)|0);
  $$0 = $15;
 } else {
  HEAP32[$sign>>2] = $3;
  HEAP32[$dp>>2] = 1;
  $12 = ($$n>>>0)>(14);
  $n$op = (14 - ($n))|0;
  $$sum = $12 ? 0 : $n$op;
  $13 = (176300 + ($$sum)|0);
  $$0 = $13;
 }
 STACKTOP = sp;return ($$0|0);
}
function _gcvt($x,$n,$b) {
 $x = +$x;
 $n = $n|0;
 $b = $b|0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $n;
 $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
 HEAPF64[$vararg_ptr1>>3] = $x;
 (_sprintf($b,176316,$vararg_buffer)|0);
 STACKTOP = sp;return ($b|0);
}
function _imaxabs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(0);
 $3 = ($0>>>0)>(0);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 $7 = (_i64Subtract(0,0,($0|0),($1|0))|0);
 $8 = tempRet0;
 $9 = $6 ? $0 : $7;
 $10 = $6 ? $1 : $8;
 tempRet0 = ($10);
 return ($9|0);
}
function _imaxdiv($agg$result,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (___divdi3(($0|0),($1|0),($2|0),($3|0))|0);
 $5 = tempRet0;
 $6 = $agg$result;
 $7 = $6;
 HEAP32[$7>>2] = $4;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = ((($agg$result)) + 8|0);
 $11 = (___remdi3(($0|0),($1|0),($2|0),($3|0))|0);
 $12 = tempRet0;
 $13 = $10;
 $14 = $13;
 HEAP32[$14>>2] = $11;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = $12;
 return;
}
function _labs($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)>(0);
 $1 = (0 - ($a))|0;
 $2 = $0 ? $a : $1;
 return ($2|0);
}
function _ldiv($agg$result,$num,$den) {
 $agg$result = $agg$result|0;
 $num = $num|0;
 $den = $den|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($num|0) / ($den|0))&-1;
 HEAP32[$agg$result>>2] = $0;
 $1 = ((($agg$result)) + 4|0);
 $2 = (($num|0) % ($den|0))&-1;
 HEAP32[$1>>2] = $2;
 return;
}
function _llabs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(0);
 $3 = ($0>>>0)>(0);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 $7 = (_i64Subtract(0,0,($0|0),($1|0))|0);
 $8 = tempRet0;
 $9 = $6 ? $0 : $7;
 $10 = $6 ? $1 : $8;
 tempRet0 = ($10);
 return ($9|0);
}
function _lldiv($agg$result,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (___divdi3(($0|0),($1|0),($2|0),($3|0))|0);
 $5 = tempRet0;
 $6 = $agg$result;
 $7 = $6;
 HEAP32[$7>>2] = $4;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = ((($agg$result)) + 8|0);
 $11 = (___remdi3(($0|0),($1|0),($2|0),($3|0))|0);
 $12 = tempRet0;
 $13 = $10;
 $14 = $13;
 HEAP32[$14>>2] = $11;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = $12;
 return;
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$0$i = 0, $$0$i30 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$lcssa = 0, $$lcssa57 = 0, $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i11 = 0, $$pre$i20 = 0, $$pre$i5 = 0, $$pre$i8 = 0, $$pre1$i = 0, $$pre1$i12 = 0, $$pre1$i27$pre = 0, $$pre1$i6 = 0, $$pre1$i9 = 0, $$sum = 0, $$sum2 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $8$phi = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $head$0$lcssa = 0, $head$036 = 0;
 var $head$1$be = 0, $head$153 = 0, $i$0 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $or$cond48 = 0, $or$cond4852 = 0, $or$cond51 = 0, $p = 0, $pshift$0$lcssa = 0, $pshift$037 = 0, $pshift$1 = 0, $pshift$2$be = 0, $pshift$254 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $lp = sp + 8|0;
 $p = sp;
 $0 = Math_imul($width, $nel)|0;
 $1 = $p;
 $2 = $1;
 HEAP32[$2>>2] = 1;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = ($0|0)==(0);
 if (!($5)) {
  $$sum = (($0) - ($width))|0;
  $6 = ((($lp)) + 4|0);
  HEAP32[$6>>2] = $width;
  HEAP32[$lp>>2] = $width;
  $10 = $width;$8 = $width;$i$0 = 2;
  while(1) {
   $7 = (($8) + ($width))|0;
   $9 = (($7) + ($10))|0;
   $11 = (($lp) + ($i$0<<2)|0);
   HEAP32[$11>>2] = $9;
   $12 = ($9>>>0)<($0>>>0);
   $13 = (($i$0) + 1)|0;
   if ($12) {
    $8$phi = $10;$10 = $9;$i$0 = $13;$8 = $8$phi;
   } else {
    break;
   }
  }
  $14 = (0 - ($width))|0;
  $15 = (($base) + ($$sum)|0);
  $16 = ($$sum|0)>(0);
  $$phi$trans$insert$i = ((($p)) + 4|0);
  if ($16) {
   $17 = $15;
   $19 = 1;$head$036 = $base;$pshift$037 = 1;
   while(1) {
    $18 = $19 & 3;
    $20 = ($18|0)==(3);
    do {
     if ($20) {
      _sift($head$036,$width,$cmp,$pshift$037,$lp);
      $$pre$i = HEAP32[$p>>2]|0;
      $$pre1$i = HEAP32[$$phi$trans$insert$i>>2]|0;
      $21 = $$pre$i >>> 2;
      $22 = $$pre1$i << 30;
      $23 = $22 | $21;
      HEAP32[$p>>2] = $23;
      $24 = $$pre1$i >>> 2;
      HEAP32[$$phi$trans$insert$i>>2] = $24;
      $25 = (($pshift$037) + 2)|0;
      $48 = $23;$pshift$1 = $25;
     } else {
      $26 = (($pshift$037) + -1)|0;
      $27 = (($lp) + ($26<<2)|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = $head$036;
      $30 = (($17) - ($29))|0;
      $31 = ($28>>>0)<($30>>>0);
      if ($31) {
       _sift($head$036,$width,$cmp,$pshift$037,$lp);
      } else {
       _trinkle($head$036,$width,$cmp,$p,$pshift$037,0,$lp);
      }
      $32 = ($pshift$037|0)==(1);
      if ($32) {
       $$pre$i5 = HEAP32[$$phi$trans$insert$i>>2]|0;
       $$pre1$i6 = HEAP32[$p>>2]|0;
       $33 = $$pre$i5 << 1;
       $34 = $$pre1$i6 >>> 31;
       $35 = $34 | $33;
       HEAP32[$$phi$trans$insert$i>>2] = $35;
       $36 = $$pre1$i6 << 1;
       HEAP32[$p>>2] = $36;
       $48 = $36;$pshift$1 = 0;
       break;
      }
      $37 = ($26>>>0)>(31);
      if ($37) {
       $38 = (($pshift$037) + -33)|0;
       $39 = HEAP32[$p>>2]|0;
       HEAP32[$$phi$trans$insert$i>>2] = $39;
       HEAP32[$p>>2] = 0;
       $$0$i = $38;$41 = $39;$44 = 0;
      } else {
       $$pre$i11 = HEAP32[$$phi$trans$insert$i>>2]|0;
       $$pre1$i12 = HEAP32[$p>>2]|0;
       $$0$i = $26;$41 = $$pre$i11;$44 = $$pre1$i12;
      }
      $40 = $41 << $$0$i;
      $42 = (32 - ($$0$i))|0;
      $43 = $44 >>> $42;
      $45 = $43 | $40;
      HEAP32[$$phi$trans$insert$i>>2] = $45;
      $46 = $44 << $$0$i;
      HEAP32[$p>>2] = $46;
      $48 = $46;$pshift$1 = 1;
     }
    } while(0);
    $47 = $48 | 1;
    HEAP32[$p>>2] = $47;
    $49 = (($head$036) + ($width)|0);
    $50 = ($49>>>0)<($15>>>0);
    if ($50) {
     $19 = $47;$head$036 = $49;$pshift$037 = $pshift$1;
    } else {
     $head$0$lcssa = $49;$pshift$0$lcssa = $pshift$1;
     break;
    }
   }
  } else {
   $head$0$lcssa = $base;$pshift$0$lcssa = 1;
  }
  _trinkle($head$0$lcssa,$width,$cmp,$p,$pshift$0$lcssa,0,$lp);
  $51 = ((($p)) + 4|0);
  $52 = ($pshift$0$lcssa|0)==(1);
  $53 = HEAP32[$p>>2]|0;
  $54 = ($53|0)==(1);
  $or$cond51 = $52 & $54;
  $55 = HEAP32[$51>>2]|0;
  $56 = ($55|0)==(0);
  $or$cond4852 = $or$cond51 & $56;
  if (!($or$cond4852)) {
   $59 = $53;$head$153 = $head$0$lcssa;$pshift$254 = $pshift$0$lcssa;
   while(1) {
    $57 = ($pshift$254|0)<(2);
    if ($57) {
     $58 = (($59) + -1)|0;
     $60 = ($58|0)==(0);
     do {
      if ($60) {
       $81 = 32;
       label = 30;
      } else {
       $61 = $58 & 1;
       $62 = ($61|0)==(0);
       if ($62) {
        $$02$i$i = $58;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $63 = (($nTrailingZeros$03$i$i) + 1)|0;
         $64 = $$02$i$i >>> 1;
         $65 = $64 & 1;
         $66 = ($65|0)==(0);
         if ($66) {
          $$02$i$i = $64;$nTrailingZeros$03$i$i = $63;
         } else {
          $$lcssa = $63;
          break;
         }
        }
        $67 = ($$lcssa|0)==(0);
        if ($67) {
         label = 24;
        } else {
         $78 = $$lcssa;
        }
       } else {
        label = 24;
       }
       if ((label|0) == 24) {
        label = 0;
        $68 = HEAP32[$$phi$trans$insert$i>>2]|0;
        $69 = ($68|0)==(0);
        if ($69) {
         $81 = 64;
         label = 30;
         break;
        }
        $70 = $68 & 1;
        $71 = ($70|0)==(0);
        if ($71) {
         $$02$i3$i = $68;$nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i30 = 0;$84 = $59;$87 = $68;$91 = 0;
         break;
        }
        while(1) {
         $72 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $73 = $$02$i3$i >>> 1;
         $74 = $73 & 1;
         $75 = ($74|0)==(0);
         if ($75) {
          $$02$i3$i = $73;$nTrailingZeros$03$i2$i = $72;
         } else {
          $$lcssa57 = $72;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
          break;
         }
        }
        $76 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
        $77 = ($$lcssa57|0)==(0);
        if ($77) {
         $$0$i30 = 0;$84 = $59;$87 = $68;$91 = 0;
         break;
        } else {
         $78 = $76;
        }
       }
       $79 = ($78>>>0)>(31);
       if ($79) {
        $81 = $78;
        label = 30;
       } else {
        $$pre1$i27$pre = HEAP32[$$phi$trans$insert$i>>2]|0;
        $$0$i30 = $78;$84 = $59;$87 = $$pre1$i27$pre;$91 = $78;
       }
      }
     } while(0);
     if ((label|0) == 30) {
      label = 0;
      $80 = (($81) + -32)|0;
      $82 = HEAP32[$$phi$trans$insert$i>>2]|0;
      HEAP32[$p>>2] = $82;
      HEAP32[$$phi$trans$insert$i>>2] = 0;
      $$0$i30 = $80;$84 = $82;$87 = 0;$91 = $81;
     }
     $83 = $84 >>> $$0$i30;
     $85 = (32 - ($$0$i30))|0;
     $86 = $87 << $85;
     $88 = $86 | $83;
     HEAP32[$p>>2] = $88;
     $89 = $87 >>> $$0$i30;
     HEAP32[$$phi$trans$insert$i>>2] = $89;
     $90 = (($91) + ($pshift$254))|0;
     $$pre = (($head$153) + ($14)|0);
     $head$1$be = $$pre;$pshift$2$be = $90;
    } else {
     $$pre$i20 = HEAP32[$$phi$trans$insert$i>>2]|0;
     $92 = $$pre$i20 << 2;
     $93 = $59 >>> 30;
     $94 = $93 | $92;
     $95 = (($pshift$254) + -2)|0;
     $96 = $59 << 1;
     $97 = $96 & 2147483646;
     $98 = $93 << 31;
     $99 = $97 | $98;
     $100 = $99 ^ 3;
     HEAP32[$p>>2] = $100;
     $101 = $94 >>> 1;
     HEAP32[$$phi$trans$insert$i>>2] = $101;
     $102 = (($lp) + ($95<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $sum = (($103) + ($width))|0;
     $$sum2 = (0 - ($sum))|0;
     $104 = (($head$153) + ($$sum2)|0);
     $105 = (($pshift$254) + -1)|0;
     _trinkle($104,$width,$cmp,$p,$105,1,$lp);
     $$pre$i8 = HEAP32[$$phi$trans$insert$i>>2]|0;
     $$pre1$i9 = HEAP32[$p>>2]|0;
     $106 = $$pre$i8 << 1;
     $107 = $$pre1$i9 >>> 31;
     $108 = $107 | $106;
     HEAP32[$$phi$trans$insert$i>>2] = $108;
     $109 = $$pre1$i9 << 1;
     $110 = $109 | 1;
     HEAP32[$p>>2] = $110;
     $111 = (($head$153) + ($14)|0);
     _trinkle($111,$width,$cmp,$p,$95,1,$lp);
     $head$1$be = $111;$pshift$2$be = $95;
    }
    $112 = ($pshift$2$be|0)==(1);
    $113 = HEAP32[$p>>2]|0;
    $114 = ($113|0)==(1);
    $or$cond = $112 & $114;
    $115 = HEAP32[$51>>2]|0;
    $116 = ($115|0)==(0);
    $or$cond48 = $or$cond & $116;
    if ($or$cond48) {
     break;
    } else {
     $59 = $113;$head$153 = $head$1$be;$pshift$254 = $pshift$2$be;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _strtof($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtox($s,$p,0));
 $1 = $0;
 return (+$1);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtox($s,$p,1));
 return (+$0);
}
function _strtold($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtox($s,$p,2));
 return (+$0);
}
function _strtof_l($s,$p,$l) {
 $s = $s|0;
 $p = $p|0;
 $l = $l|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtox($s,$p,0));
 $1 = $0;
 return (+$1);
}
function _strtod_l($s,$p,$l) {
 $s = $s|0;
 $p = $p|0;
 $l = $l|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtox($s,$p,1));
 return (+$0);
}
function _strtold_l($s,$p,$l) {
 $s = $s|0;
 $p = $p|0;
 $l = $l|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtox($s,$p,2));
 return (+$0);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox555($s,$p,$base,-1,-1)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox555($s,$p,$base,0,-2147483648)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtoul($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox555($s,$p,$base,-1,0)|0);
 $1 = tempRet0;
 return ($0|0);
}
function _strtol($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox555($s,$p,$base,-2147483648,0)|0);
 $1 = tempRet0;
 return ($0|0);
}
function _strtoimax($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox555($s,$p,$base,0,-2147483648)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtoumax($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox555($s,$p,$base,-1,-1)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _wcstof($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_wcstox($s,$p,0));
 $1 = $0;
 return (+$1);
}
function _wcstod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_wcstox($s,$p,1));
 return (+$0);
}
function _wcstold($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_wcstox($s,$p,2));
 return (+$0);
}
function _wcstoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcstox558($s,$p,$base,-1,-1)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _wcstoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcstox558($s,$p,$base,0,-2147483648)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _wcstoul($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcstox558($s,$p,$base,-1,0)|0);
 $1 = tempRet0;
 return ($0|0);
}
function _wcstol($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcstox558($s,$p,$base,-2147483648,0)|0);
 $1 = tempRet0;
 return ($0|0);
}
function _wcstoimax($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcstox558($s,$p,$base,0,-2147483648)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _wcstoumax($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcstox558($s,$p,$base,-1,-1)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _bcmp($s1,$s2,$n) {
 $s1 = $s1|0;
 $s2 = $s2|0;
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_memcmp($s1,$s2,$n)|0);
 return ($0|0);
}
function _bcopy($s1,$s2,$n) {
 $s1 = $s1|0;
 $s2 = $s2|0;
 $n = $n|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _memmove(($s2|0),($s1|0),($n|0))|0;
 return;
}
function _bzero($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _memset(($s|0),0,($n|0))|0;
 return;
}
function _index($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($s,$c)|0);
 return ($0|0);
}
function _memccpy($dest,$src,$c,$n) {
 $dest = $dest|0;
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$04$lcssa = 0, $$0425 = 0, $$1$lcssa = 0, $$113 = 0, $$2$ph = 0, $$26 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d$0$lcssa = 0, $d$026 = 0, $d$1$ph = 0, $d$17 = 0, $d$2 = 0, $or$cond = 0, $or$cond24 = 0, $s$0$lcssa = 0;
 var $s$027 = 0, $s$1$ph = 0, $s$18 = 0, $s$2 = 0, $wd$0$lcssa = 0, $wd$014 = 0, $ws$0$lcssa = 0, $ws$015 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $dest;
 $3 = $1 ^ $2;
 $4 = $3 & 3;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = $1 & 3;
   $7 = ($6|0)!=(0);
   $8 = ($n|0)!=(0);
   $or$cond24 = $8 & $7;
   if ($or$cond24) {
    $9 = $c&255;
    $$0425 = $n;$d$026 = $dest;$s$027 = $src;
    while(1) {
     $10 = HEAP8[$s$027>>0]|0;
     HEAP8[$d$026>>0] = $10;
     $11 = ($10<<24>>24)==($9<<24>>24);
     if ($11) {
      $d$2 = $d$026;$s$2 = $s$027;
      break L1;
     }
     $12 = (($$0425) + -1)|0;
     $13 = ((($s$027)) + 1|0);
     $14 = ((($d$026)) + 1|0);
     $15 = $13;
     $16 = $15 & 3;
     $17 = ($16|0)!=(0);
     $18 = ($12|0)!=(0);
     $or$cond = $18 & $17;
     if ($or$cond) {
      $$0425 = $12;$d$026 = $14;$s$027 = $13;
     } else {
      $$04$lcssa = $12;$$lcssa = $17;$d$0$lcssa = $14;$s$0$lcssa = $13;
      break;
     }
    }
   } else {
    $$04$lcssa = $n;$$lcssa = $7;$d$0$lcssa = $dest;$s$0$lcssa = $src;
   }
   if ($$lcssa) {
    $d$2 = $d$0$lcssa;$s$2 = $s$0$lcssa;
   } else {
    $19 = Math_imul($0, 16843009)|0;
    $20 = ($$04$lcssa>>>0)>(3);
    L10: do {
     if ($20) {
      $$113 = $$04$lcssa;$wd$014 = $d$0$lcssa;$ws$015 = $s$0$lcssa;
      while(1) {
       $21 = HEAP32[$ws$015>>2]|0;
       $22 = $21 ^ $19;
       $23 = (($22) + -16843009)|0;
       $24 = $22 & -2139062144;
       $25 = $24 ^ -2139062144;
       $26 = $25 & $23;
       $27 = ($26|0)==(0);
       if (!($27)) {
        $$1$lcssa = $$113;$wd$0$lcssa = $wd$014;$ws$0$lcssa = $ws$015;
        break L10;
       }
       HEAP32[$wd$014>>2] = $21;
       $28 = (($$113) + -4)|0;
       $29 = ((($ws$015)) + 4|0);
       $30 = ((($wd$014)) + 4|0);
       $31 = ($28>>>0)>(3);
       if ($31) {
        $$113 = $28;$wd$014 = $30;$ws$015 = $29;
       } else {
        $$1$lcssa = $28;$wd$0$lcssa = $30;$ws$0$lcssa = $29;
        break;
       }
      }
     } else {
      $$1$lcssa = $$04$lcssa;$wd$0$lcssa = $d$0$lcssa;$ws$0$lcssa = $s$0$lcssa;
     }
    } while(0);
    $$2$ph = $$1$lcssa;$d$1$ph = $wd$0$lcssa;$s$1$ph = $ws$0$lcssa;
    label = 11;
   }
  } else {
   $$2$ph = $n;$d$1$ph = $dest;$s$1$ph = $src;
   label = 11;
  }
 } while(0);
 L15: do {
  if ((label|0) == 11) {
   $32 = ($$2$ph|0)==(0);
   if ($32) {
    $d$2 = $d$1$ph;$s$2 = $s$1$ph;
   } else {
    $33 = $c&255;
    $$26 = $$2$ph;$d$17 = $d$1$ph;$s$18 = $s$1$ph;
    while(1) {
     $34 = HEAP8[$s$18>>0]|0;
     HEAP8[$d$17>>0] = $34;
     $35 = ($34<<24>>24)==($33<<24>>24);
     if ($35) {
      $d$2 = $d$17;$s$2 = $s$18;
      break L15;
     }
     $36 = (($$26) + -1)|0;
     $37 = ((($s$18)) + 1|0);
     $38 = ((($d$17)) + 1|0);
     $39 = ($36|0)==(0);
     if ($39) {
      $d$2 = $38;$s$2 = $37;
      break;
     } else {
      $$26 = $36;$d$17 = $38;$s$18 = $37;
     }
    }
   }
  }
 } while(0);
 $40 = HEAP8[$s$2>>0]|0;
 $41 = $c&255;
 $42 = ($40<<24>>24)==($41<<24>>24);
 $43 = ((($d$2)) + 1|0);
 $$0 = $42 ? $43 : 0;
 return ($$0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function _memmem($h0,$k,$n0,$l) {
 $h0 = $h0|0;
 $k = $k|0;
 $n0 = $n0|0;
 $l = $l|0;
 var $$0 = 0, $$0$i3 = 0, $$014$i = 0, $$015$i = 0, $$015$i$lcssa = 0, $$015$i8 = 0, $$015$i8$lcssa = 0, $$02$i = 0, $$023$i = 0, $$024$i = 0, $$024$i9 = 0, $$026$i = 0, $$03$be$i = 0, $$0334$i = 0, $$lcssa = 0, $$lcssa268 = 0, $$lcssa271 = 0, $$lcssa285 = 0, $$lcssa288 = 0, $$lcssa291 = 0;
 var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $233$phi = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $byteset$i = 0, $div$i = 0, $div4$i = 0, $div4$i210 = 0, $exitcond$i = 0, $exitcond$i211 = 0, $hw$0$in5$i = 0, $hw$06$i = 0, $hw$06$i7 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa122$i = 0, $ip$0$ph74$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph53$i = 0, $jp$0$ph14$ph68$i = 0;
 var $jp$0$ph1463$i = 0, $jp$0$ph1463$i$lcssa = 0, $jp$0$ph1463$i$lcssa$lcssa = 0, $jp$0$ph75$i = 0, $jp$1$ph10$ph47$i = 0, $jp$1$ph1042$i = 0, $jp$1$ph1042$i$lcssa = 0, $jp$1$ph1042$i$lcssa$lcssa = 0, $jp$1$ph54$i = 0, $k$057$i = 0, $k$137$i = 0, $k$2$i = 0, $k$333$i = 0, $k$333$i$lcssa = 0, $k$4$i = 0, $mem$0$be$i = 0, $mem$035$i = 0, $mem0$0$i = 0, $or$cond = 0, $or$cond$i = 0;
 var $or$cond5$i = 0, $p$0$ph$ph$lcssa32$i = 0, $p$0$ph$ph$lcssa32126$i = 0, $p$0$ph$ph69$i = 0, $p$1$p$0$i = 0, $p$1$ph$ph$lcssa23$i = 0, $p$1$ph$ph48$i = 0, $p$3$i = 0, $shift$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = ($l|0)==(0);
 L1: do {
  if ($0) {
   $$0 = $h0;
  } else {
   $1 = ($k>>>0)<($l>>>0);
   if ($1) {
    $$0 = 0;
   } else {
    $2 = HEAP8[$n0>>0]|0;
    $3 = $2&255;
    $4 = (_memchr($h0,$3,$k)|0);
    $5 = ($4|0)==(0|0);
    $6 = ($l|0)==(1);
    $or$cond = $6 | $5;
    if ($or$cond) {
     $$0 = $4;
    } else {
     $7 = $4;
     $8 = $h0;
     $9 = (($8) - ($7))|0;
     $10 = (($9) + ($k))|0;
     switch ($l|0) {
     case 2:  {
      $11 = $3 << 8;
      $12 = ((($n0)) + 1|0);
      $13 = HEAP8[$12>>0]|0;
      $14 = $13&255;
      $15 = $14 | $11;
      $16 = ((($4)) + 1|0);
      $$023$i = (($10) + -1)|0;
      $17 = ($$023$i|0)==(0);
      if ($17) {
       $$0 = 0;
       break L1;
      }
      $18 = HEAP8[$4>>0]|0;
      $19 = $18&255;
      $20 = $19 << 8;
      $21 = HEAP8[$16>>0]|0;
      $22 = $21&255;
      $23 = $20 | $22;
      $$014$i = $16;$$026$i = $$023$i;$233 = $4;$hw$0$in5$i = $23;
      while(1) {
       $24 = $hw$0$in5$i & 65535;
       $25 = ($24|0)==($15|0);
       if ($25) {
        $$0 = $233;
        break L1;
       }
       $26 = $24 << 8;
       $27 = ((($$014$i)) + 1|0);
       $28 = HEAP8[$27>>0]|0;
       $29 = $28&255;
       $30 = $29 | $26;
       $$02$i = (($$026$i) + -1)|0;
       $31 = ($$02$i|0)==(0);
       if ($31) {
        $$0 = 0;
        break;
       } else {
        $233$phi = $$014$i;$$014$i = $27;$$026$i = $$02$i;$hw$0$in5$i = $30;$233 = $233$phi;
       }
      }
      break;
     }
     case 3:  {
      $32 = $3 << 24;
      $33 = ((($n0)) + 1|0);
      $34 = HEAP8[$33>>0]|0;
      $35 = $34&255;
      $36 = $35 << 16;
      $37 = $36 | $32;
      $38 = ((($n0)) + 2|0);
      $39 = HEAP8[$38>>0]|0;
      $40 = $39&255;
      $41 = $40 << 8;
      $42 = $37 | $41;
      $43 = ((($4)) + 2|0);
      $44 = (($10) + -2)|0;
      $45 = ($44|0)==(0);
      if ($45) {
       $$0 = 0;
       break L1;
      }
      $46 = ((($4)) + 1|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = $47&255;
      $49 = $48 << 16;
      $50 = HEAP8[$4>>0]|0;
      $51 = $50&255;
      $52 = $51 << 24;
      $53 = $52 | $49;
      $54 = HEAP8[$43>>0]|0;
      $55 = $54&255;
      $56 = $55 << 8;
      $57 = $53 | $56;
      $$015$i = $43;$$024$i = $44;$hw$06$i = $57;
      while(1) {
       $58 = ($hw$06$i|0)==($42|0);
       if ($58) {
        $$015$i$lcssa = $$015$i;
        break;
       }
       $60 = (($$024$i) + -1)|0;
       $61 = ((($$015$i)) + 1|0);
       $62 = HEAP8[$61>>0]|0;
       $63 = $62&255;
       $64 = $63 | $hw$06$i;
       $65 = $64 << 8;
       $66 = ($60|0)==(0);
       if ($66) {
        $$0 = 0;
        break L1;
       } else {
        $$015$i = $61;$$024$i = $60;$hw$06$i = $65;
       }
      }
      $59 = ((($$015$i$lcssa)) + -2|0);
      $$0 = $59;
      break L1;
      break;
     }
     case 4:  {
      $67 = $3 << 24;
      $68 = ((($n0)) + 1|0);
      $69 = HEAP8[$68>>0]|0;
      $70 = $69&255;
      $71 = $70 << 16;
      $72 = $71 | $67;
      $73 = ((($n0)) + 2|0);
      $74 = HEAP8[$73>>0]|0;
      $75 = $74&255;
      $76 = $75 << 8;
      $77 = $72 | $76;
      $78 = ((($n0)) + 3|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = $79&255;
      $81 = $77 | $80;
      $82 = ((($4)) + 3|0);
      $83 = (($10) + -3)|0;
      $84 = ($83|0)==(0);
      if ($84) {
       $$0 = 0;
       break L1;
      }
      $85 = ((($4)) + 1|0);
      $86 = HEAP8[$85>>0]|0;
      $87 = $86&255;
      $88 = $87 << 16;
      $89 = HEAP8[$4>>0]|0;
      $90 = $89&255;
      $91 = $90 << 24;
      $92 = $91 | $88;
      $93 = ((($4)) + 2|0);
      $94 = HEAP8[$93>>0]|0;
      $95 = $94&255;
      $96 = $95 << 8;
      $97 = $92 | $96;
      $98 = HEAP8[$82>>0]|0;
      $99 = $98&255;
      $100 = $97 | $99;
      $$015$i8 = $82;$$024$i9 = $83;$hw$06$i7 = $100;
      while(1) {
       $101 = ($hw$06$i7|0)==($81|0);
       if ($101) {
        $$015$i8$lcssa = $$015$i8;
        break;
       }
       $103 = (($$024$i9) + -1)|0;
       $104 = $hw$06$i7 << 8;
       $105 = ((($$015$i8)) + 1|0);
       $106 = HEAP8[$105>>0]|0;
       $107 = $106&255;
       $108 = $107 | $104;
       $109 = ($103|0)==(0);
       if ($109) {
        $$0 = 0;
        break L1;
       } else {
        $$015$i8 = $105;$$024$i9 = $103;$hw$06$i7 = $108;
       }
      }
      $102 = ((($$015$i8$lcssa)) + -3|0);
      $$0 = $102;
      break L1;
      break;
     }
     default: {
      $110 = (($4) + ($10)|0);
      ;HEAP32[$byteset$i>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
      $111 = $2 & 31;
      $112 = $111&255;
      $113 = 1 << $112;
      $div4$i210 = ($2&255) >>> 5;
      $114 = $div4$i210&255;
      $115 = (($byteset$i) + ($114<<2)|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = $113 | $116;
      HEAP32[$115>>2] = $117;
      $118 = $2&255;
      $119 = (($shift$i) + ($118<<2)|0);
      HEAP32[$119>>2] = 1;
      $exitcond$i211 = ($l|0)==(1);
      if (!($exitcond$i211)) {
       $121 = 1;
       while(1) {
        $$phi$trans$insert = (($n0) + ($121)|0);
        $$pre = HEAP8[$$phi$trans$insert>>0]|0;
        $122 = $$pre & 31;
        $123 = $122&255;
        $124 = 1 << $123;
        $div4$i = ($$pre&255) >>> 5;
        $125 = $div4$i&255;
        $126 = (($byteset$i) + ($125<<2)|0);
        $127 = HEAP32[$126>>2]|0;
        $128 = $124 | $127;
        HEAP32[$126>>2] = $128;
        $129 = (($121) + 1)|0;
        $130 = $$pre&255;
        $131 = (($shift$i) + ($130<<2)|0);
        HEAP32[$131>>2] = $129;
        $exitcond$i = ($129|0)==($l|0);
        if ($exitcond$i) {
         break;
        } else {
         $121 = $129;
        }
       }
      }
      $120 = ($l>>>0)>(1);
      L11: do {
       if ($120) {
        $234 = 1;$ip$0$ph74$i = -1;$jp$0$ph75$i = 0;
        L12: while(1) {
         $237 = $234;$jp$0$ph14$ph68$i = $jp$0$ph75$i;$p$0$ph$ph69$i = 1;
         while(1) {
          $236 = $237;$jp$0$ph1463$i = $jp$0$ph14$ph68$i;
          L16: while(1) {
           $139 = $236;$k$057$i = 1;
           while(1) {
            $135 = (($k$057$i) + ($ip$0$ph74$i))|0;
            $136 = (($n0) + ($135)|0);
            $137 = HEAP8[$136>>0]|0;
            $138 = (($n0) + ($139)|0);
            $140 = HEAP8[$138>>0]|0;
            $141 = ($137<<24>>24)==($140<<24>>24);
            if (!($141)) {
             $$lcssa285 = $139;$$lcssa288 = $137;$$lcssa291 = $140;$jp$0$ph1463$i$lcssa = $jp$0$ph1463$i;
             break L16;
            }
            $142 = ($k$057$i|0)==($p$0$ph$ph69$i|0);
            $133 = (($k$057$i) + 1)|0;
            if ($142) {
             break;
            }
            $132 = (($133) + ($jp$0$ph1463$i))|0;
            $134 = ($132>>>0)<($l>>>0);
            if ($134) {
             $139 = $132;$k$057$i = $133;
            } else {
             $ip$0$ph$lcssa$i = $ip$0$ph74$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph69$i;
             break L12;
            }
           }
           $143 = (($jp$0$ph1463$i) + ($p$0$ph$ph69$i))|0;
           $144 = (($143) + 1)|0;
           $145 = ($144>>>0)<($l>>>0);
           if ($145) {
            $236 = $144;$jp$0$ph1463$i = $143;
           } else {
            $ip$0$ph$lcssa$i = $ip$0$ph74$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph69$i;
            break L12;
           }
          }
          $146 = ($$lcssa288&255)>($$lcssa291&255);
          $147 = (($$lcssa285) - ($ip$0$ph74$i))|0;
          if (!($146)) {
           $jp$0$ph1463$i$lcssa$lcssa = $jp$0$ph1463$i$lcssa;
           break;
          }
          $151 = (($$lcssa285) + 1)|0;
          $152 = ($151>>>0)<($l>>>0);
          if ($152) {
           $237 = $151;$jp$0$ph14$ph68$i = $$lcssa285;$p$0$ph$ph69$i = $147;
          } else {
           $ip$0$ph$lcssa$i = $ip$0$ph74$i;$p$0$ph$ph$lcssa32$i = $147;
           break L12;
          }
         }
         $148 = (($jp$0$ph1463$i$lcssa$lcssa) + 1)|0;
         $149 = (($jp$0$ph1463$i$lcssa$lcssa) + 2)|0;
         $150 = ($149>>>0)<($l>>>0);
         if ($150) {
          $234 = $149;$ip$0$ph74$i = $jp$0$ph1463$i$lcssa$lcssa;$jp$0$ph75$i = $148;
         } else {
          $ip$0$ph$lcssa$i = $jp$0$ph1463$i$lcssa$lcssa;$p$0$ph$ph$lcssa32$i = 1;
          break;
         }
        }
        $235 = 1;$ip$1$ph53$i = -1;$jp$1$ph54$i = 0;
        while(1) {
         $239 = $235;$jp$1$ph10$ph47$i = $jp$1$ph54$i;$p$1$ph$ph48$i = 1;
         while(1) {
          $238 = $239;$jp$1$ph1042$i = $jp$1$ph10$ph47$i;
          L31: while(1) {
           $160 = $238;$k$137$i = 1;
           while(1) {
            $156 = (($k$137$i) + ($ip$1$ph53$i))|0;
            $157 = (($n0) + ($156)|0);
            $158 = HEAP8[$157>>0]|0;
            $159 = (($n0) + ($160)|0);
            $161 = HEAP8[$159>>0]|0;
            $162 = ($158<<24>>24)==($161<<24>>24);
            if (!($162)) {
             $$lcssa = $160;$$lcssa268 = $158;$$lcssa271 = $161;$jp$1$ph1042$i$lcssa = $jp$1$ph1042$i;
             break L31;
            }
            $163 = ($k$137$i|0)==($p$1$ph$ph48$i|0);
            $154 = (($k$137$i) + 1)|0;
            if ($163) {
             break;
            }
            $153 = (($154) + ($jp$1$ph1042$i))|0;
            $155 = ($153>>>0)<($l>>>0);
            if ($155) {
             $160 = $153;$k$137$i = $154;
            } else {
             $ip$0$ph$lcssa122$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph53$i;$p$0$ph$ph$lcssa32126$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph48$i;
             break L11;
            }
           }
           $164 = (($jp$1$ph1042$i) + ($p$1$ph$ph48$i))|0;
           $165 = (($164) + 1)|0;
           $166 = ($165>>>0)<($l>>>0);
           if ($166) {
            $238 = $165;$jp$1$ph1042$i = $164;
           } else {
            $ip$0$ph$lcssa122$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph53$i;$p$0$ph$ph$lcssa32126$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph48$i;
            break L11;
           }
          }
          $167 = ($$lcssa268&255)<($$lcssa271&255);
          $168 = (($$lcssa) - ($ip$1$ph53$i))|0;
          if (!($167)) {
           $jp$1$ph1042$i$lcssa$lcssa = $jp$1$ph1042$i$lcssa;
           break;
          }
          $172 = (($$lcssa) + 1)|0;
          $173 = ($172>>>0)<($l>>>0);
          if ($173) {
           $239 = $172;$jp$1$ph10$ph47$i = $$lcssa;$p$1$ph$ph48$i = $168;
          } else {
           $ip$0$ph$lcssa122$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph53$i;$p$0$ph$ph$lcssa32126$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $168;
           break L11;
          }
         }
         $169 = (($jp$1$ph1042$i$lcssa$lcssa) + 1)|0;
         $170 = (($jp$1$ph1042$i$lcssa$lcssa) + 2)|0;
         $171 = ($170>>>0)<($l>>>0);
         if ($171) {
          $235 = $170;$ip$1$ph53$i = $jp$1$ph1042$i$lcssa$lcssa;$jp$1$ph54$i = $169;
         } else {
          $ip$0$ph$lcssa122$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $jp$1$ph1042$i$lcssa$lcssa;$p$0$ph$ph$lcssa32126$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = 1;
          break;
         }
        }
       } else {
        $ip$0$ph$lcssa122$i = -1;$ip$1$ph$lcssa$i = -1;$p$0$ph$ph$lcssa32126$i = 1;$p$1$ph$ph$lcssa23$i = 1;
       }
      } while(0);
      $174 = (($ip$1$ph$lcssa$i) + 1)|0;
      $175 = (($ip$0$ph$lcssa122$i) + 1)|0;
      $176 = ($174>>>0)>($175>>>0);
      $p$1$p$0$i = $176 ? $p$1$ph$ph$lcssa23$i : $p$0$ph$ph$lcssa32126$i;
      $ip$1$ip$0$i = $176 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa122$i;
      $177 = (($n0) + ($p$1$p$0$i)|0);
      $178 = (($ip$1$ip$0$i) + 1)|0;
      $179 = (_memcmp($n0,$177,$178)|0);
      $180 = ($179|0)==(0);
      if ($180) {
       $185 = (($l) - ($p$1$p$0$i))|0;
       $mem0$0$i = $185;$p$3$i = $p$1$p$0$i;
      } else {
       $181 = (($l) - ($ip$1$ip$0$i))|0;
       $182 = (($181) + -1)|0;
       $183 = ($ip$1$ip$0$i>>>0)>($182>>>0);
       $ip$1$ip$0$$i = $183 ? $ip$1$ip$0$i : $182;
       $184 = (($ip$1$ip$0$$i) + 1)|0;
       $mem0$0$i = 0;$p$3$i = $184;
      }
      $186 = $110;
      $187 = ($10>>>0)<($l>>>0);
      L46: do {
       if ($187) {
        $$0$i3 = 0;
       } else {
        $188 = (($l) + -1)|0;
        $189 = ($mem0$0$i|0)!=(0);
        $190 = (($l) - ($p$3$i))|0;
        $$0334$i = $4;$mem$035$i = 0;
        while(1) {
         $191 = (($$0334$i) + ($188)|0);
         $192 = HEAP8[$191>>0]|0;
         $div$i = ($192&255) >>> 5;
         $193 = $div$i&255;
         $194 = (($byteset$i) + ($193<<2)|0);
         $195 = HEAP32[$194>>2]|0;
         $196 = $192 & 31;
         $197 = $196&255;
         $198 = 1 << $197;
         $199 = $198 & $195;
         $200 = ($199|0)==(0);
         L50: do {
          if ($200) {
           $212 = (($$0334$i) + ($l)|0);
           $$03$be$i = $212;$mem$0$be$i = 0;
          } else {
           $201 = $192&255;
           $202 = (($shift$i) + ($201<<2)|0);
           $203 = HEAP32[$202>>2]|0;
           $204 = (($l) - ($203))|0;
           $205 = ($203|0)==($l|0);
           if (!($205)) {
            $206 = ($mem$035$i|0)!=(0);
            $or$cond$i = $189 & $206;
            $207 = ($204>>>0)<($p$3$i>>>0);
            $or$cond5$i = $or$cond$i & $207;
            $k$2$i = $or$cond5$i ? $190 : $204;
            $208 = (($$0334$i) + ($k$2$i)|0);
            $$03$be$i = $208;$mem$0$be$i = 0;
            break;
           }
           $213 = ($178>>>0)>($mem$035$i>>>0);
           $214 = $213 ? $178 : $mem$035$i;
           $215 = ($214>>>0)<($l>>>0);
           L56: do {
            if ($215) {
             $k$333$i = $214;
             while(1) {
              $216 = (($n0) + ($k$333$i)|0);
              $217 = HEAP8[$216>>0]|0;
              $218 = (($$0334$i) + ($k$333$i)|0);
              $219 = HEAP8[$218>>0]|0;
              $220 = ($217<<24>>24)==($219<<24>>24);
              if (!($220)) {
               $k$333$i$lcssa = $k$333$i;
               break;
              }
              $221 = (($k$333$i) + 1)|0;
              $222 = ($221>>>0)<($l>>>0);
              if ($222) {
               $k$333$i = $221;
              } else {
               $k$4$i = $178;
               break L56;
              }
             }
             $223 = (($k$333$i$lcssa) - ($ip$1$ip$0$i))|0;
             $224 = (($$0334$i) + ($223)|0);
             $$03$be$i = $224;$mem$0$be$i = 0;
             break L50;
            } else {
             $k$4$i = $178;
            }
           } while(0);
           while(1) {
            $225 = ($k$4$i>>>0)>($mem$035$i>>>0);
            if (!($225)) {
             $$0$i3 = $$0334$i;
             break L46;
            }
            $226 = (($k$4$i) + -1)|0;
            $227 = (($n0) + ($226)|0);
            $228 = HEAP8[$227>>0]|0;
            $229 = (($$0334$i) + ($226)|0);
            $230 = HEAP8[$229>>0]|0;
            $231 = ($228<<24>>24)==($230<<24>>24);
            if ($231) {
             $k$4$i = $226;
            } else {
             break;
            }
           }
           $232 = (($$0334$i) + ($p$3$i)|0);
           $$03$be$i = $232;$mem$0$be$i = $mem0$0$i;
          }
         } while(0);
         $209 = $$03$be$i;
         $210 = (($186) - ($209))|0;
         $211 = ($210>>>0)<($l>>>0);
         if ($211) {
          $$0$i3 = 0;
          break;
         } else {
          $$0334$i = $$03$be$i;$mem$035$i = $mem$0$be$i;
         }
        }
       }
      } while(0);
      $$0 = $$0$i3;
      break L1;
     }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _mempcpy($dest,$src,$n) {
 $dest = $dest|0;
 $src = $src|0;
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _memcpy(($dest|0),($src|0),($n|0))|0;
 $0 = (($dest) + ($n)|0);
 return ($0|0);
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   break;
  } else {
   $$01 = $1;
  }
 }
 return ($$0|0);
}
function _rindex($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strrchr($s,$c)|0);
 return ($0|0);
}
function ___stpcpy($d,$s) {
 $d = $d|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$0115 = 0, $$016 = 0, $$03 = 0, $$1$ph = 0, $$12$ph = 0, $$128 = 0, $$19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $wd$0$lcssa = 0, $wd$010 = 0, $ws$0$lcssa = 0, $ws$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$0$lcssa = $s;$$01$lcssa = $d;
   } else {
    $$0115 = $d;$$016 = $s;
    while(1) {
     $7 = HEAP8[$$016>>0]|0;
     HEAP8[$$0115>>0] = $7;
     $8 = ($7<<24>>24)==(0);
     if ($8) {
      $$03 = $$0115;
      break L1;
     }
     $9 = ((($$016)) + 1|0);
     $10 = ((($$0115)) + 1|0);
     $11 = $9;
     $12 = $11 & 3;
     $13 = ($12|0)==(0);
     if ($13) {
      $$0$lcssa = $9;$$01$lcssa = $10;
      break;
     } else {
      $$0115 = $10;$$016 = $9;
     }
    }
   }
   $14 = HEAP32[$$0$lcssa>>2]|0;
   $15 = (($14) + -16843009)|0;
   $16 = $14 & -2139062144;
   $17 = $16 ^ -2139062144;
   $18 = $17 & $15;
   $19 = ($18|0)==(0);
   if ($19) {
    $22 = $14;$wd$010 = $$01$lcssa;$ws$011 = $$0$lcssa;
    while(1) {
     $20 = ((($ws$011)) + 4|0);
     $21 = ((($wd$010)) + 4|0);
     HEAP32[$wd$010>>2] = $22;
     $23 = HEAP32[$20>>2]|0;
     $24 = (($23) + -16843009)|0;
     $25 = $23 & -2139062144;
     $26 = $25 ^ -2139062144;
     $27 = $26 & $24;
     $28 = ($27|0)==(0);
     if ($28) {
      $22 = $23;$wd$010 = $21;$ws$011 = $20;
     } else {
      $wd$0$lcssa = $21;$ws$0$lcssa = $20;
      break;
     }
    }
   } else {
    $wd$0$lcssa = $$01$lcssa;$ws$0$lcssa = $$0$lcssa;
   }
   $$1$ph = $ws$0$lcssa;$$12$ph = $wd$0$lcssa;
   label = 8;
  } else {
   $$1$ph = $s;$$12$ph = $d;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $29 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$12$ph>>0] = $29;
  $30 = ($29<<24>>24)==(0);
  if ($30) {
   $$03 = $$12$ph;
  } else {
   $$128 = $$12$ph;$$19 = $$1$ph;
   while(1) {
    $31 = ((($$19)) + 1|0);
    $32 = ((($$128)) + 1|0);
    $33 = HEAP8[$31>>0]|0;
    HEAP8[$32>>0] = $33;
    $34 = ($33<<24>>24)==(0);
    if ($34) {
     $$03 = $32;
     break;
    } else {
     $$128 = $32;$$19 = $31;
    }
   }
  }
 }
 return ($$03|0);
}
function ___stpncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa60 = 0, $$031 = 0, $$04$lcssa = 0, $$04$lcssa61 = 0, $$0430 = 0, $$06$lcssa = 0, $$06$lcssa62 = 0, $$0629 = 0, $$1$lcssa = 0, $$117 = 0, $$15$ph = 0, $$1511 = 0, $$17$ph = 0, $$1710 = 0, $$2$ph = 0, $$212 = 0, $$28 = 0, $$3 = 0, $$lcssa = 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $wd$0$lcssa = 0;
 var $wd$018 = 0, $ws$0$lcssa = 0, $ws$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5|0)!=(0);
   $7 = ($n|0)!=(0);
   $or$cond28 = $7 & $6;
   L3: do {
    if ($or$cond28) {
     $$031 = $n;$$0430 = $s;$$0629 = $d;
     while(1) {
      $8 = HEAP8[$$0430>>0]|0;
      HEAP8[$$0629>>0] = $8;
      $9 = ($8<<24>>24)==(0);
      if ($9) {
       $$0$lcssa60 = $$031;$$04$lcssa61 = $$0430;$$06$lcssa62 = $$0629;
       break L3;
      }
      $10 = (($$031) + -1)|0;
      $11 = ((($$0430)) + 1|0);
      $12 = ((($$0629)) + 1|0);
      $13 = $11;
      $14 = $13 & 3;
      $15 = ($14|0)!=(0);
      $16 = ($10|0)!=(0);
      $or$cond = $16 & $15;
      if ($or$cond) {
       $$031 = $10;$$0430 = $11;$$0629 = $12;
      } else {
       $$0$lcssa = $10;$$04$lcssa = $11;$$06$lcssa = $12;$$lcssa = $16;
       label = 5;
       break;
      }
     }
    } else {
     $$0$lcssa = $n;$$04$lcssa = $s;$$06$lcssa = $d;$$lcssa = $7;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($$lcssa) {
     $$0$lcssa60 = $$0$lcssa;$$04$lcssa61 = $$04$lcssa;$$06$lcssa62 = $$06$lcssa;
    } else {
     $$28 = $$06$lcssa;$$3 = 0;
     break;
    }
   }
   $17 = HEAP8[$$04$lcssa61>>0]|0;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $$28 = $$06$lcssa62;$$3 = $$0$lcssa60;
   } else {
    $19 = ($$0$lcssa60>>>0)>(3);
    L11: do {
     if ($19) {
      $$117 = $$0$lcssa60;$wd$018 = $$06$lcssa62;$ws$019 = $$04$lcssa61;
      while(1) {
       $20 = HEAP32[$ws$019>>2]|0;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$117;$wd$0$lcssa = $wd$018;$ws$0$lcssa = $ws$019;
        break L11;
       }
       HEAP32[$wd$018>>2] = $20;
       $26 = (($$117) + -4)|0;
       $27 = ((($ws$019)) + 4|0);
       $28 = ((($wd$018)) + 4|0);
       $29 = ($26>>>0)>(3);
       if ($29) {
        $$117 = $26;$wd$018 = $28;$ws$019 = $27;
       } else {
        $$1$lcssa = $26;$wd$0$lcssa = $28;$ws$0$lcssa = $27;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa60;$wd$0$lcssa = $$06$lcssa62;$ws$0$lcssa = $$04$lcssa61;
     }
    } while(0);
    $$15$ph = $ws$0$lcssa;$$17$ph = $wd$0$lcssa;$$2$ph = $$1$lcssa;
    label = 11;
   }
  } else {
   $$15$ph = $s;$$17$ph = $d;$$2$ph = $n;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $30 = ($$2$ph|0)==(0);
   if ($30) {
    $$28 = $$17$ph;$$3 = 0;
   } else {
    $$1511 = $$15$ph;$$1710 = $$17$ph;$$212 = $$2$ph;
    while(1) {
     $31 = HEAP8[$$1511>>0]|0;
     HEAP8[$$1710>>0] = $31;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$28 = $$1710;$$3 = $$212;
      break L16;
     }
     $33 = (($$212) + -1)|0;
     $34 = ((($$1511)) + 1|0);
     $35 = ((($$1710)) + 1|0);
     $36 = ($33|0)==(0);
     if ($36) {
      $$28 = $35;$$3 = 0;
      break;
     } else {
      $$1511 = $34;$$1710 = $35;$$212 = $33;
     }
    }
   }
  }
 } while(0);
 _memset(($$28|0),0,($$3|0))|0;
 return ($$28|0);
}
function _strcasecmp($_l,$_r) {
 $_l = $_l|0;
 $_r = $_r|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $l$03$lcssa24 = 0, $r$0$lcssa = 0, $r$04 = 0, $r$04$lcssa23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$_l>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $19 = 0;$r$0$lcssa = $_r;
  } else {
   $2 = $0&255;
   $5 = $0;$7 = $2;$l$03 = $_l;$r$04 = $_r;
   while(1) {
    $3 = HEAP8[$r$04>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $19 = $5;$r$0$lcssa = $r$04;
     break L1;
    }
    $6 = ($5<<24>>24)==($3<<24>>24);
    if (!($6)) {
     $8 = (_tolower($7)|0);
     $9 = HEAP8[$r$04>>0]|0;
     $10 = $9&255;
     $11 = (_tolower($10)|0);
     $12 = ($8|0)==($11|0);
     if (!($12)) {
      $l$03$lcssa24 = $l$03;$r$04$lcssa23 = $r$04;
      break;
     }
    }
    $13 = ((($l$03)) + 1|0);
    $14 = ((($r$04)) + 1|0);
    $15 = HEAP8[$13>>0]|0;
    $16 = $15&255;
    $17 = ($15<<24>>24)==(0);
    if ($17) {
     $19 = 0;$r$0$lcssa = $14;
     break L1;
    } else {
     $5 = $15;$7 = $16;$l$03 = $13;$r$04 = $14;
    }
   }
   $$pre = HEAP8[$l$03$lcssa24>>0]|0;
   $19 = $$pre;$r$0$lcssa = $r$04$lcssa23;
  }
 } while(0);
 $18 = $19&255;
 $20 = (_tolower($18)|0);
 $21 = HEAP8[$r$0$lcssa>>0]|0;
 $22 = $21&255;
 $23 = (_tolower($22)|0);
 $24 = (($20) - ($23))|0;
 return ($24|0);
}
function _strcasestr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($n)|0);
 $1 = HEAP8[$h>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L1: do {
  if ($2) {
   $$0 = 0;
  } else {
   $$012 = $h;
   while(1) {
    $3 = (_strncasecmp($$012,$n,$0)|0);
    $4 = ($3|0)==(0);
    if ($4) {
     $$0 = $$012;
     break L1;
    }
    $5 = ((($$012)) + 1|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $$0 = 0;
     break;
    } else {
     $$012 = $5;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strcat($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($dest)|0);
 $1 = (($dest) + ($0)|0);
 (_strcpy($1,$src)|0);
 return ($dest|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strcpy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($dest,$src)|0);
 return ($dest|0);
}
function _strcspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$027 = 0, $$03$lcssa = 0, $$035 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  label = 3;
 } else {
  $2 = ((($c)) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   label = 3;
  } else {
   ;HEAP32[$byteset>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
   $$027 = $c;$13 = $0;
   while(1) {
    $12 = $13 & 31;
    $14 = $12&255;
    $15 = 1 << $14;
    $div4 = ($13&255) >>> 5;
    $16 = $div4&255;
    $17 = (($byteset) + ($16<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18 | $15;
    HEAP32[$17>>2] = $19;
    $20 = ((($$027)) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     break;
    } else {
     $$027 = $20;$13 = $21;
    }
   }
   $10 = HEAP8[$s>>0]|0;
   $11 = ($10<<24>>24)==(0);
   L7: do {
    if ($11) {
     $$03$lcssa = $s;
    } else {
     $$035 = $s;$23 = $10;
     while(1) {
      $div = ($23&255) >>> 5;
      $24 = $div&255;
      $25 = (($byteset) + ($24<<2)|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = $23 & 31;
      $28 = $27&255;
      $29 = 1 << $28;
      $30 = $26 & $29;
      $31 = ($30|0)==(0);
      if (!($31)) {
       $$03$lcssa = $$035;
       break L7;
      }
      $32 = ((($$035)) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if ($34) {
       $$03$lcssa = $32;
       break;
      } else {
       $$035 = $32;$23 = $33;
      }
     }
    }
   } while(0);
   $35 = $$03$lcssa;
   $36 = $s;
   $37 = (($35) - ($36))|0;
   $$0 = $37;
  }
 }
 if ((label|0) == 3) {
  $5 = $0 << 24 >> 24;
  $6 = (___strchrnul($s,$5)|0);
  $7 = $6;
  $8 = $s;
  $9 = (($7) - ($8))|0;
  $$0 = $9;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
 } else {
  _memcpy(($2|0),($s|0),($1|0))|0;
  $$0 = $2;
 }
 return ($$0|0);
}
function _strerror_r($err,$buf,$buflen) {
 $err = $err|0;
 $buf = $buf|0;
 $buflen = $buflen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strerror($err)|0);
 $1 = (_strlen($0)|0);
 $2 = ($1>>>0)<($buflen>>>0);
 if ($2) {
  $6 = (($1) + 1)|0;
  _memcpy(($buf|0),($0|0),($6|0))|0;
  $$0 = 0;
 } else {
  $3 = ($buflen|0)==(0);
  if ($3) {
   $$0 = 34;
  } else {
   $4 = (($buflen) + -1)|0;
   _memcpy(($buf|0),($0|0),($4|0))|0;
   $5 = (($buf) + ($4)|0);
   HEAP8[$5>>0] = 0;
   $$0 = 34;
  }
 }
 return ($$0|0);
}
function _strlcat($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0 = 0, $$pn = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strnlen($d,$n)|0);
 $1 = ($0|0)==($n|0);
 if ($1) {
  $2 = (_strlen($s)|0);
  $$pn = $2;
 } else {
  $3 = (($d) + ($0)|0);
  $4 = (($n) - ($0))|0;
  $5 = (_strlcpy($3,$s,$4)|0);
  $$pn = $5;
 }
 $$0 = (($$pn) + ($0))|0;
 return ($$0|0);
}
function _strlcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa62 = 0, $$032 = 0, $$04$lcssa = 0, $$04$lcssa63 = 0, $$0431 = 0, $$07$lcssa = 0, $$07$lcssa64 = 0, $$0730 = 0, $$1$lcssa = 0, $$1$ph = 0, $$113 = 0, $$15$lcssa = 0, $$1518 = 0, $$18$lcssa = 0, $$18$ph = 0, $$1811 = 0, $$2 = 0, $$26$ph = 0, $$2612 = 0;
 var $$29 = 0, $$lcssa = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond29 = 0, $wd$0$lcssa = 0, $wd$019 = 0, $ws$0$lcssa = 0, $ws$020 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n) + -1)|0;
 $1 = ($n|0)==(0);
 if ($1) {
  $$pre = $d;
  $$2 = $d;$$29 = $s;$$pre$phiZ2D = $$pre;
 } else {
  $2 = $s;
  $3 = $d;
  $4 = $2 ^ $3;
  $5 = $4 & 3;
  $6 = ($5|0)==(0);
  do {
   if ($6) {
    $7 = $2 & 3;
    $8 = ($7|0)!=(0);
    $9 = ($0|0)!=(0);
    $or$cond29 = $9 & $8;
    L6: do {
     if ($or$cond29) {
      $$032 = $d;$$0431 = $0;$$0730 = $s;
      while(1) {
       $10 = HEAP8[$$0730>>0]|0;
       HEAP8[$$032>>0] = $10;
       $11 = ($10<<24>>24)==(0);
       if ($11) {
        $$0$lcssa62 = $$032;$$04$lcssa63 = $$0431;$$07$lcssa64 = $$0730;
        break L6;
       }
       $12 = (($$0431) + -1)|0;
       $13 = ((($$0730)) + 1|0);
       $14 = ((($$032)) + 1|0);
       $15 = $13;
       $16 = $15 & 3;
       $17 = ($16|0)!=(0);
       $18 = ($12|0)!=(0);
       $or$cond = $18 & $17;
       if ($or$cond) {
        $$032 = $14;$$0431 = $12;$$0730 = $13;
       } else {
        $$0$lcssa = $14;$$04$lcssa = $12;$$07$lcssa = $13;$$lcssa = $18;
        label = 7;
        break;
       }
      }
     } else {
      $$0$lcssa = $d;$$04$lcssa = $0;$$07$lcssa = $s;$$lcssa = $9;
      label = 7;
     }
    } while(0);
    if ((label|0) == 7) {
     if ($$lcssa) {
      $$0$lcssa62 = $$0$lcssa;$$04$lcssa63 = $$04$lcssa;$$07$lcssa64 = $$07$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa;$$18$lcssa = $$07$lcssa;
      break;
     }
    }
    $19 = HEAP8[$$07$lcssa64>>0]|0;
    $20 = ($19<<24>>24)==(0);
    if ($20) {
     $$1$ph = $$0$lcssa62;$$18$ph = $$07$lcssa64;$$26$ph = $$04$lcssa63;
     label = 13;
    } else {
     $21 = ($$04$lcssa63>>>0)>(3);
     L14: do {
      if ($21) {
       $$1518 = $$04$lcssa63;$wd$019 = $$0$lcssa62;$ws$020 = $$07$lcssa64;
       while(1) {
        $22 = HEAP32[$ws$020>>2]|0;
        $23 = (($22) + -16843009)|0;
        $24 = $22 & -2139062144;
        $25 = $24 ^ -2139062144;
        $26 = $25 & $23;
        $27 = ($26|0)==(0);
        if (!($27)) {
         $$15$lcssa = $$1518;$wd$0$lcssa = $wd$019;$ws$0$lcssa = $ws$020;
         break L14;
        }
        HEAP32[$wd$019>>2] = $22;
        $28 = (($$1518) + -4)|0;
        $29 = ((($ws$020)) + 4|0);
        $30 = ((($wd$019)) + 4|0);
        $31 = ($28>>>0)>(3);
        if ($31) {
         $$1518 = $28;$wd$019 = $30;$ws$020 = $29;
        } else {
         $$15$lcssa = $28;$wd$0$lcssa = $30;$ws$0$lcssa = $29;
         break;
        }
       }
      } else {
       $$15$lcssa = $$04$lcssa63;$wd$0$lcssa = $$0$lcssa62;$ws$0$lcssa = $$07$lcssa64;
      }
     } while(0);
     $$1$ph = $wd$0$lcssa;$$18$ph = $ws$0$lcssa;$$26$ph = $$15$lcssa;
     label = 13;
    }
   } else {
    $$1$ph = $d;$$18$ph = $s;$$26$ph = $0;
    label = 13;
   }
  } while(0);
  L19: do {
   if ((label|0) == 13) {
    $32 = ($$26$ph|0)==(0);
    if ($32) {
     $$1$lcssa = $$1$ph;$$18$lcssa = $$18$ph;
    } else {
     $$113 = $$1$ph;$$1811 = $$18$ph;$$2612 = $$26$ph;
     while(1) {
      $33 = HEAP8[$$1811>>0]|0;
      HEAP8[$$113>>0] = $33;
      $34 = ($33<<24>>24)==(0);
      if ($34) {
       $$1$lcssa = $$113;$$18$lcssa = $$1811;
       break L19;
      }
      $35 = (($$2612) + -1)|0;
      $36 = ((($$1811)) + 1|0);
      $37 = ((($$113)) + 1|0);
      $38 = ($35|0)==(0);
      if ($38) {
       $$1$lcssa = $37;$$18$lcssa = $36;
       break;
      } else {
       $$113 = $37;$$1811 = $36;$$2612 = $35;
      }
     }
    }
   }
  } while(0);
  HEAP8[$$1$lcssa>>0] = 0;
  $$2 = $$1$lcssa;$$29 = $$18$lcssa;$$pre$phiZ2D = $3;
 }
 $39 = $$2;
 $40 = (($39) - ($$pre$phiZ2D))|0;
 $41 = (_strlen($$29)|0);
 $42 = (($40) + ($41))|0;
 return ($42|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _strncasecmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$04 = 0, $$08 = 0, $$08$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $l$06$lcssa28 = 0, $or$cond = 0, $r$0$lcssa = 0, $r$07 = 0, $r$07$lcssa27 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$04 = 0;
 } else {
  $1 = HEAP8[$_l>>0]|0;
  $2 = ($1<<24>>24)==(0);
  L3: do {
   if ($2) {
    $21 = 0;$r$0$lcssa = $_r;
   } else {
    $3 = $1&255;
    $$08$in = $n;$7 = $1;$9 = $3;$l$06 = $_l;$r$07 = $_r;
    while(1) {
     $$08 = (($$08$in) + -1)|0;
     $4 = HEAP8[$r$07>>0]|0;
     $5 = ($4<<24>>24)!=(0);
     $6 = ($$08|0)!=(0);
     $or$cond = $6 & $5;
     if (!($or$cond)) {
      $21 = $7;$r$0$lcssa = $r$07;
      break L3;
     }
     $8 = ($7<<24>>24)==($4<<24>>24);
     if (!($8)) {
      $10 = (_tolower($9)|0);
      $11 = HEAP8[$r$07>>0]|0;
      $12 = $11&255;
      $13 = (_tolower($12)|0);
      $14 = ($10|0)==($13|0);
      if (!($14)) {
       $l$06$lcssa28 = $l$06;$r$07$lcssa27 = $r$07;
       break;
      }
     }
     $15 = ((($l$06)) + 1|0);
     $16 = ((($r$07)) + 1|0);
     $17 = HEAP8[$15>>0]|0;
     $18 = $17&255;
     $19 = ($17<<24>>24)==(0);
     if ($19) {
      $21 = 0;$r$0$lcssa = $16;
      break L3;
     } else {
      $$08$in = $$08;$7 = $17;$9 = $18;$l$06 = $15;$r$07 = $16;
     }
    }
    $$pre = HEAP8[$l$06$lcssa28>>0]|0;
    $21 = $$pre;$r$0$lcssa = $r$07$lcssa27;
   }
  } while(0);
  $20 = $21&255;
  $22 = (_tolower($20)|0);
  $23 = HEAP8[$r$0$lcssa>>0]|0;
  $24 = $23&255;
  $25 = (_tolower($24)|0);
  $26 = (($22) - ($25))|0;
  $$04 = $26;
 }
 return ($$04|0);
}
function _strncat($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($d)|0);
 $1 = (($d) + ($0)|0);
 $2 = ($n|0)==(0);
 L1: do {
  if ($2) {
   $$0$lcssa = $1;
  } else {
   $$014 = $n;$$023 = $s;$$05 = $1;
   while(1) {
    $3 = HEAP8[$$023>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$0$lcssa = $$05;
     break L1;
    }
    $5 = (($$014) + -1)|0;
    $6 = ((($$023)) + 1|0);
    $7 = ((($$05)) + 1|0);
    HEAP8[$$05>>0] = $3;
    $8 = ($5|0)==(0);
    if ($8) {
     $$0$lcssa = $7;
     break;
    } else {
     $$014 = $5;$$023 = $6;$$05 = $7;
    }
   }
  }
 } while(0);
 HEAP8[$$0$lcssa>>0] = 0;
 return ($d|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
 } else {
  $1 = HEAP8[$_l>>0]|0;
  $2 = ($1<<24>>24)==(0);
  L3: do {
   if ($2) {
    $13 = 0;$r$0$lcssa = $_r;
   } else {
    $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
    while(1) {
     $$08 = (($$08$in) + -1)|0;
     $3 = HEAP8[$r$07>>0]|0;
     $4 = ($3<<24>>24)!=(0);
     $5 = ($$08|0)!=(0);
     $or$cond = $5 & $4;
     $7 = ($6<<24>>24)==($3<<24>>24);
     $or$cond4 = $7 & $or$cond;
     if (!($or$cond4)) {
      $13 = $6;$r$0$lcssa = $r$07;
      break L3;
     }
     $8 = ((($l$06)) + 1|0);
     $9 = ((($r$07)) + 1|0);
     $10 = HEAP8[$8>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if ($11) {
      $13 = 0;$r$0$lcssa = $9;
      break;
     } else {
      $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
     }
    }
   }
  } while(0);
  $12 = $13&255;
  $14 = HEAP8[$r$0$lcssa>>0]|0;
  $15 = $14&255;
  $16 = (($12) - ($15))|0;
  $$03 = $16;
 }
 return ($$03|0);
}
function _strncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($d,$s,$n)|0);
 return ($d|0);
}
function _strndup($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strnlen($s,$n)|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
 } else {
  _memcpy(($2|0),($s|0),($0|0))|0;
  $4 = (($2) + ($0)|0);
  HEAP8[$4>>0] = 0;
  $$0 = $2;
 }
 return ($$0|0);
}
function _strnlen($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_memchr($s,0,$n)|0);
 $1 = ($0|0)==(0|0);
 $2 = $0;
 $3 = $s;
 $4 = (($2) - ($3))|0;
 $5 = $1 ? $n : $4;
 return ($5|0);
}
function _strpbrk($s,$b) {
 $s = $s|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcspn($s,$b)|0);
 $1 = (($s) + ($0)|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 $4 = $3 ? $1 : 0;
 return ($4|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 return ($2|0);
}
function _strsep($str,$sep) {
 $str = $str|0;
 $sep = $sep|0;
 var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $end$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$str>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (_strcspn($0,$sep)|0);
  $3 = (($0) + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if ($5) {
   $end$0 = 0;
  } else {
   $$sum = (($2) + 1)|0;
   $6 = (($0) + ($$sum)|0);
   HEAP8[$3>>0] = 0;
   $end$0 = $6;
  }
  HEAP32[$str>>2] = $end$0;
  $$0 = $0;
 }
 return ($$0|0);
}
function _strsignal($signum) {
 $signum = $signum|0;
 var $$in = 0, $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($signum) + -1)|0;
 $1 = ($0>>>0)>(63);
 $2 = ($signum|0)==(0);
 $3 = $1 | $2;
 if ($3) {
  $s$0$lcssa = 176321;
 } else {
  $$in = $signum;$s$01 = 176321;
  while(1) {
   $s$1 = $s$01;
   while(1) {
    $6 = HEAP8[$s$1>>0]|0;
    $7 = ($6<<24>>24)==(0);
    $8 = ((($s$1)) + 1|0);
    if ($7) {
     $$lcssa = $8;
     break;
    } else {
     $s$1 = $8;
    }
   }
   $4 = (($$in) + -1)|0;
   $5 = ($4|0)==(0);
   if ($5) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $$in = $4;$s$01 = $$lcssa;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function _strspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$028 = 0, $$03 = 0, $$03$lcssa = 0, $$1$lcssa = 0, $$16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 ;HEAP32[$byteset>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $$0 = 0;
  } else {
   $2 = ((($c)) + 1|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $$03 = $s;
    while(1) {
     $5 = HEAP8[$$03>>0]|0;
     $6 = ($5<<24>>24)==($0<<24>>24);
     $7 = ((($$03)) + 1|0);
     if ($6) {
      $$03 = $7;
     } else {
      $$03$lcssa = $$03;
      break;
     }
    }
    $8 = $$03$lcssa;
    $9 = $s;
    $10 = (($8) - ($9))|0;
    $$0 = $10;
    break;
   } else {
    $$028 = $c;$14 = $0;
   }
   while(1) {
    $13 = $14 & 31;
    $15 = $13&255;
    $16 = 1 << $15;
    $div4 = ($14&255) >>> 5;
    $17 = $div4&255;
    $18 = (($byteset) + ($17<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $19 | $16;
    HEAP32[$18>>2] = $20;
    $21 = ((($$028)) + 1|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ($22<<24>>24)==(0);
    if ($23) {
     break;
    } else {
     $$028 = $21;$14 = $22;
    }
   }
   $11 = HEAP8[$s>>0]|0;
   $12 = ($11<<24>>24)==(0);
   L10: do {
    if ($12) {
     $$1$lcssa = $s;
    } else {
     $$16 = $s;$24 = $11;
     while(1) {
      $div = ($24&255) >>> 5;
      $25 = $div&255;
      $26 = (($byteset) + ($25<<2)|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = $24 & 31;
      $29 = $28&255;
      $30 = 1 << $29;
      $31 = $27 & $30;
      $32 = ($31|0)==(0);
      if ($32) {
       $$1$lcssa = $$16;
       break L10;
      }
      $33 = ((($$16)) + 1|0);
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)==(0);
      if ($35) {
       $$1$lcssa = $33;
       break;
      } else {
       $$16 = $33;$24 = $34;
      }
     }
    }
   } while(0);
   $36 = $$1$lcssa;
   $37 = $s;
   $38 = (($36) - ($37))|0;
   $$0 = $38;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i11 = 0, $$01$i = 0, $$02$i = 0, $$02$i7 = 0, $$03$i = 0, $$lcssa$i = 0, $$lcssa$i10 = 0, $$lcssa$i4 = 0, $$lcssa281 = 0, $$lcssa284 = 0, $$lcssa287 = 0, $$lcssa301 = 0, $$lcssa304 = 0, $$lcssa307 = 0, $$lcssa322 = 0, $$pr$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $233$phi = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $byteset$i = 0, $div$i = 0, $div4$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i6 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa143$i = 0, $ip$0$ph76$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph55$i = 0, $jp$0$ph13$ph70$i = 0, $jp$0$ph1365$i = 0, $jp$0$ph1365$i$lcssa = 0, $jp$0$ph1365$i$lcssa$lcssa = 0, $jp$0$ph77$i = 0, $jp$1$ph56$i = 0, $jp$1$ph9$ph49$i = 0;
 var $jp$1$ph944$i = 0, $jp$1$ph944$i$lcssa = 0, $jp$1$ph944$i$lcssa$lcssa = 0, $k$059$i = 0, $k$139$i = 0, $k$2$i = 0, $k$338$i = 0, $k$338$i$lcssa = 0, $k$4$i = 0, $l$080$i = 0, $l$080$i$lcssa321 = 0, $mem$0$i = 0, $mem0$0$i = 0, $or$cond$i = 0, $or$cond$i2 = 0, $or$cond$i8 = 0, $or$cond5$i = 0, $p$0$ph$ph$lcssa32$i = 0, $p$0$ph$ph$lcssa32147$i = 0, $p$0$ph$ph71$i = 0;
 var $p$1$p$0$i = 0, $p$1$ph$ph$lcssa23$i = 0, $p$1$ph$ph50$i = 0, $p$3$i = 0, $shift$i = 0, $z$0$i = 0, $z$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $$0 = $h;
  } else {
   $2 = $0 << 24 >> 24;
   $3 = (_strchr($h,$2)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    $$0 = 0;
   } else {
    $5 = ((($n)) + 1|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $$0 = $3;
    } else {
     $8 = ((($3)) + 1|0);
     $9 = HEAP8[$8>>0]|0;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$0 = 0;
     } else {
      $11 = ((($n)) + 2|0);
      $12 = HEAP8[$11>>0]|0;
      $13 = ($12<<24>>24)==(0);
      if ($13) {
       $14 = $0&255;
       $15 = $14 << 8;
       $16 = $6&255;
       $17 = $16 | $15;
       $18 = HEAP8[$3>>0]|0;
       $19 = $18&255;
       $20 = $19 << 8;
       $21 = $9&255;
       $22 = $20 | $21;
       $$01$i = $8;$232 = $9;$233 = $3;$hw$0$in2$i = $22;
       while(1) {
        $23 = $hw$0$in2$i & 65535;
        $24 = ($23|0)==($17|0);
        if ($24) {
         $$lcssa$i = $233;$31 = $232;
         break;
        }
        $25 = $23 << 8;
        $26 = ((($$01$i)) + 1|0);
        $27 = HEAP8[$26>>0]|0;
        $28 = $27&255;
        $29 = $28 | $25;
        $30 = ($27<<24>>24)==(0);
        if ($30) {
         $$lcssa$i = $$01$i;$31 = 0;
         break;
        } else {
         $233$phi = $$01$i;$$01$i = $26;$232 = $27;$hw$0$in2$i = $29;$233 = $233$phi;
        }
       }
       $32 = ($31<<24>>24)!=(0);
       $33 = $32 ? $$lcssa$i : 0;
       $$0 = $33;
       break;
      }
      $34 = ((($3)) + 2|0);
      $35 = HEAP8[$34>>0]|0;
      $36 = ($35<<24>>24)==(0);
      if ($36) {
       $$0 = 0;
      } else {
       $37 = ((($n)) + 3|0);
       $38 = HEAP8[$37>>0]|0;
       $39 = ($38<<24>>24)==(0);
       if ($39) {
        $40 = $0&255;
        $41 = $40 << 24;
        $42 = $6&255;
        $43 = $42 << 16;
        $44 = $43 | $41;
        $45 = $12&255;
        $46 = $45 << 8;
        $47 = $44 | $46;
        $48 = HEAP8[$3>>0]|0;
        $49 = $48&255;
        $50 = $49 << 24;
        $51 = $9&255;
        $52 = $51 << 16;
        $53 = $35&255;
        $54 = $53 << 8;
        $55 = $54 | $52;
        $56 = $55 | $50;
        $57 = ($56|0)==($47|0);
        if ($57) {
         $$0$lcssa$i = $34;$$lcssa$i4 = $35;
        } else {
         $$02$i = $34;$hw$03$i = $56;
         while(1) {
          $58 = ((($$02$i)) + 1|0);
          $59 = HEAP8[$58>>0]|0;
          $60 = $59&255;
          $61 = $60 | $hw$03$i;
          $62 = $61 << 8;
          $63 = ($59<<24>>24)==(0);
          $64 = ($62|0)==($47|0);
          $or$cond$i2 = $63 | $64;
          if ($or$cond$i2) {
           $$0$lcssa$i = $58;$$lcssa$i4 = $59;
           break;
          } else {
           $$02$i = $58;$hw$03$i = $62;
          }
         }
        }
        $65 = ($$lcssa$i4<<24>>24)!=(0);
        $66 = ((($$0$lcssa$i)) + -2|0);
        $67 = $65 ? $66 : 0;
        $$0 = $67;
        break;
       }
       $68 = ((($3)) + 3|0);
       $69 = HEAP8[$68>>0]|0;
       $70 = ($69<<24>>24)==(0);
       if ($70) {
        $$0 = 0;
       } else {
        $71 = ((($n)) + 4|0);
        $72 = HEAP8[$71>>0]|0;
        $73 = ($72<<24>>24)==(0);
        if ($73) {
         $74 = $0&255;
         $75 = $74 << 24;
         $76 = $6&255;
         $77 = $76 << 16;
         $78 = $77 | $75;
         $79 = $12&255;
         $80 = $79 << 8;
         $81 = $78 | $80;
         $82 = $38&255;
         $83 = $81 | $82;
         $84 = HEAP8[$3>>0]|0;
         $85 = $84&255;
         $86 = $85 << 24;
         $87 = $9&255;
         $88 = $87 << 16;
         $89 = $35&255;
         $90 = $89 << 8;
         $91 = $69&255;
         $92 = $90 | $88;
         $93 = $92 | $91;
         $94 = $93 | $86;
         $95 = ($94|0)==($83|0);
         if ($95) {
          $$0$lcssa$i11 = $68;$$lcssa$i10 = $69;
         } else {
          $$02$i7 = $68;$hw$03$i6 = $94;
          while(1) {
           $96 = $hw$03$i6 << 8;
           $97 = ((($$02$i7)) + 1|0);
           $98 = HEAP8[$97>>0]|0;
           $99 = $98&255;
           $100 = $99 | $96;
           $101 = ($98<<24>>24)==(0);
           $102 = ($100|0)==($83|0);
           $or$cond$i8 = $101 | $102;
           if ($or$cond$i8) {
            $$0$lcssa$i11 = $97;$$lcssa$i10 = $98;
            break;
           } else {
            $$02$i7 = $97;$hw$03$i6 = $100;
           }
          }
         }
         $103 = ($$lcssa$i10<<24>>24)!=(0);
         $104 = ((($$0$lcssa$i11)) + -3|0);
         $105 = $103 ? $104 : 0;
         $$0 = $105;
         break;
        }
        ;HEAP32[$byteset$i>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
        $110 = $0;$l$080$i = 0;
        while(1) {
         $106 = (($3) + ($l$080$i)|0);
         $107 = HEAP8[$106>>0]|0;
         $108 = ($107<<24>>24)==(0);
         if ($108) {
          $$0$i = 0;
          break;
         }
         $109 = $110 & 31;
         $111 = $109&255;
         $112 = 1 << $111;
         $div4$i = ($110&255) >>> 5;
         $113 = $div4$i&255;
         $114 = (($byteset$i) + ($113<<2)|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = $115 | $112;
         HEAP32[$114>>2] = $116;
         $117 = (($l$080$i) + 1)|0;
         $118 = $110&255;
         $119 = (($shift$i) + ($118<<2)|0);
         HEAP32[$119>>2] = $117;
         $120 = (($n) + ($117)|0);
         $121 = HEAP8[$120>>0]|0;
         $122 = ($121<<24>>24)==(0);
         if ($122) {
          $$lcssa322 = $117;$l$080$i$lcssa321 = $l$080$i;
          label = 23;
          break;
         } else {
          $110 = $121;$l$080$i = $117;
         }
        }
        L32: do {
         if ((label|0) == 23) {
          $123 = ($$lcssa322>>>0)>(1);
          L34: do {
           if ($123) {
            $234 = 1;$ip$0$ph76$i = -1;$jp$0$ph77$i = 0;
            L35: while(1) {
             $235 = $234;$jp$0$ph13$ph70$i = $jp$0$ph77$i;$p$0$ph$ph71$i = 1;
             while(1) {
              $236 = $235;$jp$0$ph1365$i = $jp$0$ph13$ph70$i;
              L39: while(1) {
               $133 = $236;$k$059$i = 1;
               while(1) {
                $129 = (($k$059$i) + ($ip$0$ph76$i))|0;
                $130 = (($n) + ($129)|0);
                $131 = HEAP8[$130>>0]|0;
                $132 = (($n) + ($133)|0);
                $134 = HEAP8[$132>>0]|0;
                $135 = ($131<<24>>24)==($134<<24>>24);
                if (!($135)) {
                 $$lcssa301 = $133;$$lcssa304 = $131;$$lcssa307 = $134;$jp$0$ph1365$i$lcssa = $jp$0$ph1365$i;
                 break L39;
                }
                $136 = ($k$059$i|0)==($p$0$ph$ph71$i|0);
                $127 = (($k$059$i) + 1)|0;
                if ($136) {
                 break;
                }
                $126 = (($127) + ($jp$0$ph1365$i))|0;
                $128 = ($126>>>0)<($$lcssa322>>>0);
                if ($128) {
                 $133 = $126;$k$059$i = $127;
                } else {
                 $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
                 break L35;
                }
               }
               $137 = (($jp$0$ph1365$i) + ($p$0$ph$ph71$i))|0;
               $138 = (($137) + 1)|0;
               $139 = ($138>>>0)<($$lcssa322>>>0);
               if ($139) {
                $236 = $138;$jp$0$ph1365$i = $137;
               } else {
                $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
                break L35;
               }
              }
              $140 = ($$lcssa304&255)>($$lcssa307&255);
              $141 = (($$lcssa301) - ($ip$0$ph76$i))|0;
              if (!($140)) {
               $jp$0$ph1365$i$lcssa$lcssa = $jp$0$ph1365$i$lcssa;
               break;
              }
              $124 = (($$lcssa301) + 1)|0;
              $125 = ($124>>>0)<($$lcssa322>>>0);
              if ($125) {
               $235 = $124;$jp$0$ph13$ph70$i = $$lcssa301;$p$0$ph$ph71$i = $141;
              } else {
               $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $141;
               break L35;
              }
             }
             $142 = (($jp$0$ph1365$i$lcssa$lcssa) + 1)|0;
             $143 = (($jp$0$ph1365$i$lcssa$lcssa) + 2)|0;
             $144 = ($143>>>0)<($$lcssa322>>>0);
             if ($144) {
              $234 = $143;$ip$0$ph76$i = $jp$0$ph1365$i$lcssa$lcssa;$jp$0$ph77$i = $142;
             } else {
              $ip$0$ph$lcssa$i = $jp$0$ph1365$i$lcssa$lcssa;$p$0$ph$ph$lcssa32$i = 1;
              break;
             }
            }
            $237 = 1;$ip$1$ph55$i = -1;$jp$1$ph56$i = 0;
            while(1) {
             $239 = $237;$jp$1$ph9$ph49$i = $jp$1$ph56$i;$p$1$ph$ph50$i = 1;
             while(1) {
              $238 = $239;$jp$1$ph944$i = $jp$1$ph9$ph49$i;
              L54: while(1) {
               $152 = $238;$k$139$i = 1;
               while(1) {
                $148 = (($k$139$i) + ($ip$1$ph55$i))|0;
                $149 = (($n) + ($148)|0);
                $150 = HEAP8[$149>>0]|0;
                $151 = (($n) + ($152)|0);
                $153 = HEAP8[$151>>0]|0;
                $154 = ($150<<24>>24)==($153<<24>>24);
                if (!($154)) {
                 $$lcssa281 = $152;$$lcssa284 = $150;$$lcssa287 = $153;$jp$1$ph944$i$lcssa = $jp$1$ph944$i;
                 break L54;
                }
                $155 = ($k$139$i|0)==($p$1$ph$ph50$i|0);
                $146 = (($k$139$i) + 1)|0;
                if ($155) {
                 break;
                }
                $145 = (($146) + ($jp$1$ph944$i))|0;
                $147 = ($145>>>0)<($$lcssa322>>>0);
                if ($147) {
                 $152 = $145;$k$139$i = $146;
                } else {
                 $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
                 break L34;
                }
               }
               $156 = (($jp$1$ph944$i) + ($p$1$ph$ph50$i))|0;
               $157 = (($156) + 1)|0;
               $158 = ($157>>>0)<($$lcssa322>>>0);
               if ($158) {
                $238 = $157;$jp$1$ph944$i = $156;
               } else {
                $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
                break L34;
               }
              }
              $159 = ($$lcssa284&255)<($$lcssa287&255);
              $160 = (($$lcssa281) - ($ip$1$ph55$i))|0;
              if (!($159)) {
               $jp$1$ph944$i$lcssa$lcssa = $jp$1$ph944$i$lcssa;
               break;
              }
              $164 = (($$lcssa281) + 1)|0;
              $165 = ($164>>>0)<($$lcssa322>>>0);
              if ($165) {
               $239 = $164;$jp$1$ph9$ph49$i = $$lcssa281;$p$1$ph$ph50$i = $160;
              } else {
               $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $160;
               break L34;
              }
             }
             $161 = (($jp$1$ph944$i$lcssa$lcssa) + 1)|0;
             $162 = (($jp$1$ph944$i$lcssa$lcssa) + 2)|0;
             $163 = ($162>>>0)<($$lcssa322>>>0);
             if ($163) {
              $237 = $162;$ip$1$ph55$i = $jp$1$ph944$i$lcssa$lcssa;$jp$1$ph56$i = $161;
             } else {
              $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $jp$1$ph944$i$lcssa$lcssa;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = 1;
              break;
             }
            }
           } else {
            $ip$0$ph$lcssa143$i = -1;$ip$1$ph$lcssa$i = -1;$p$0$ph$ph$lcssa32147$i = 1;$p$1$ph$ph$lcssa23$i = 1;
           }
          } while(0);
          $166 = (($ip$1$ph$lcssa$i) + 1)|0;
          $167 = (($ip$0$ph$lcssa143$i) + 1)|0;
          $168 = ($166>>>0)>($167>>>0);
          $p$1$p$0$i = $168 ? $p$1$ph$ph$lcssa23$i : $p$0$ph$ph$lcssa32147$i;
          $ip$1$ip$0$i = $168 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa143$i;
          $169 = (($n) + ($p$1$p$0$i)|0);
          $170 = (($ip$1$ip$0$i) + 1)|0;
          $171 = (_memcmp($n,$169,$170)|0);
          $172 = ($171|0)==(0);
          if ($172) {
           $177 = (($$lcssa322) - ($p$1$p$0$i))|0;
           $mem0$0$i = $177;$p$3$i = $p$1$p$0$i;
          } else {
           $173 = (($$lcssa322) - ($ip$1$ip$0$i))|0;
           $174 = (($173) + -1)|0;
           $175 = ($ip$1$ip$0$i>>>0)>($174>>>0);
           $ip$1$ip$0$$i = $175 ? $ip$1$ip$0$i : $174;
           $176 = (($ip$1$ip$0$$i) + 1)|0;
           $mem0$0$i = 0;$p$3$i = $176;
          }
          $178 = $$lcssa322 | 63;
          $179 = ($mem0$0$i|0)!=(0);
          $180 = (($$lcssa322) - ($p$3$i))|0;
          $$03$i = $3;$mem$0$i = 0;$z$0$i = $3;
          L69: while(1) {
           $181 = $z$0$i;
           $182 = $$03$i;
           $183 = (($181) - ($182))|0;
           $184 = ($183>>>0)<($$lcssa322>>>0);
           do {
            if ($184) {
             $185 = (_memchr($z$0$i,0,$178)|0);
             $186 = ($185|0)==(0|0);
             if ($186) {
              $190 = (($z$0$i) + ($178)|0);
              $z$1$i = $190;
              break;
             } else {
              $187 = $185;
              $188 = (($187) - ($182))|0;
              $189 = ($188>>>0)<($$lcssa322>>>0);
              if ($189) {
               $$0$i = 0;
               break L32;
              } else {
               $z$1$i = $185;
               break;
              }
             }
            } else {
             $z$1$i = $z$0$i;
            }
           } while(0);
           $191 = (($$03$i) + ($l$080$i$lcssa321)|0);
           $192 = HEAP8[$191>>0]|0;
           $div$i = ($192&255) >>> 5;
           $193 = $div$i&255;
           $194 = (($byteset$i) + ($193<<2)|0);
           $195 = HEAP32[$194>>2]|0;
           $196 = $192 & 31;
           $197 = $196&255;
           $198 = 1 << $197;
           $199 = $198 & $195;
           $200 = ($199|0)==(0);
           if ($200) {
            $209 = (($$03$i) + ($$lcssa322)|0);
            $$03$i = $209;$mem$0$i = 0;$z$0$i = $z$1$i;
            continue;
           }
           $201 = $192&255;
           $202 = (($shift$i) + ($201<<2)|0);
           $203 = HEAP32[$202>>2]|0;
           $204 = (($$lcssa322) - ($203))|0;
           $205 = ($$lcssa322|0)==($203|0);
           if (!($205)) {
            $206 = ($mem$0$i|0)!=(0);
            $or$cond$i = $179 & $206;
            $207 = ($204>>>0)<($p$3$i>>>0);
            $or$cond5$i = $or$cond$i & $207;
            $k$2$i = $or$cond5$i ? $180 : $204;
            $208 = (($$03$i) + ($k$2$i)|0);
            $$03$i = $208;$mem$0$i = 0;$z$0$i = $z$1$i;
            continue;
           }
           $210 = ($170>>>0)>($mem$0$i>>>0);
           $211 = $210 ? $170 : $mem$0$i;
           $212 = (($n) + ($211)|0);
           $213 = HEAP8[$212>>0]|0;
           $214 = ($213<<24>>24)==(0);
           L83: do {
            if ($214) {
             $k$4$i = $170;
            } else {
             $$pr$i = $213;$k$338$i = $211;
             while(1) {
              $215 = (($$03$i) + ($k$338$i)|0);
              $216 = HEAP8[$215>>0]|0;
              $217 = ($$pr$i<<24>>24)==($216<<24>>24);
              if (!($217)) {
               $k$338$i$lcssa = $k$338$i;
               break;
              }
              $218 = (($k$338$i) + 1)|0;
              $219 = (($n) + ($218)|0);
              $220 = HEAP8[$219>>0]|0;
              $221 = ($220<<24>>24)==(0);
              if ($221) {
               $k$4$i = $170;
               break L83;
              } else {
               $$pr$i = $220;$k$338$i = $218;
              }
             }
             $222 = (($k$338$i$lcssa) - ($ip$1$ip$0$i))|0;
             $223 = (($$03$i) + ($222)|0);
             $$03$i = $223;$mem$0$i = 0;$z$0$i = $z$1$i;
             continue L69;
            }
           } while(0);
           while(1) {
            $224 = ($k$4$i>>>0)>($mem$0$i>>>0);
            if (!($224)) {
             $$0$i = $$03$i;
             break L32;
            }
            $225 = (($k$4$i) + -1)|0;
            $226 = (($n) + ($225)|0);
            $227 = HEAP8[$226>>0]|0;
            $228 = (($$03$i) + ($225)|0);
            $229 = HEAP8[$228>>0]|0;
            $230 = ($227<<24>>24)==($229<<24>>24);
            if ($230) {
             $k$4$i = $225;
            } else {
             break;
            }
           }
           $231 = (($$03$i) + ($p$3$i)|0);
           $$03$i = $231;$mem$0$i = $mem0$0$i;$z$0$i = $z$1$i;
          }
         }
        } while(0);
        $$0 = $$0$i;
       }
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strtok($s,$sep) {
 $s = $s|0;
 $sep = $sep|0;
 var $$0 = 0, $$01 = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $1 = HEAP32[15700>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
  } else {
   $$01 = $1;
   label = 3;
  }
 } else {
  $$01 = $s;
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $3 = (_strspn($$01,$sep)|0);
   $4 = (($$01) + ($3)|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    HEAP32[15700>>2] = 0;
    $$0 = 0;
    break;
   }
   $7 = (_strcspn($4,$sep)|0);
   $$sum = (($7) + ($3))|0;
   $8 = (($$01) + ($$sum)|0);
   HEAP32[15700>>2] = $8;
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(0);
   if ($10) {
    HEAP32[15700>>2] = 0;
    $$0 = $4;
    break;
   } else {
    $$sum2 = (($$sum) + 1)|0;
    $11 = (($$01) + ($$sum2)|0);
    HEAP32[15700>>2] = $11;
    HEAP8[$8>>0] = 0;
    $$0 = $4;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _strtok_r($s,$sep,$p) {
 $s = $s|0;
 $sep = $sep|0;
 $p = $p|0;
 var $$0 = 0, $$01 = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $1 = HEAP32[$p>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
  } else {
   $$01 = $1;
   label = 3;
  }
 } else {
  $$01 = $s;
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $3 = (_strspn($$01,$sep)|0);
   $4 = (($$01) + ($3)|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    HEAP32[$p>>2] = 0;
    $$0 = 0;
    break;
   }
   $7 = (_strcspn($4,$sep)|0);
   $$sum = (($7) + ($3))|0;
   $8 = (($$01) + ($$sum)|0);
   HEAP32[$p>>2] = $8;
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(0);
   if ($10) {
    HEAP32[$p>>2] = 0;
    $$0 = $4;
    break;
   } else {
    $$sum2 = (($$sum) + 1)|0;
    $11 = (($$01) + ($$sum2)|0);
    HEAP32[$p>>2] = $11;
    HEAP8[$8>>0] = 0;
    $$0 = $4;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _strverscmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$ = 0, $$0$lcssa39 = 0, $$0$lcssa40 = 0, $$02$lcssa41 = 0, $$02$lcssa42 = 0, $$0222 = 0, $$023 = 0, $$03 = 0, $$haszero$0 = 0, $$haszero$012 = 0, $$haszero$014 = 0, $$lcssa60 = 0, $$lcssa61 = 0, $$lcssa62 = 0, $$lcssa63 = 0, $$phi$trans$insert = 0, $$phi$trans$insert35 = 0, $$pre = 0, $$pre36 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $haszero$024 = 0, $haszero$1 = 0, $haszero$1$lcssa = 0, $haszero$2 = 0;
 var $isdigit = 0, $isdigit11 = 0, $isdigit5 = 0, $isdigit7 = 0, $isdigit752 = 0, $isdigit9 = 0, $isdigit950 = 0, $isdigittmp = 0, $isdigittmp10 = 0, $isdigittmp4 = 0, $isdigittmp6 = 0, $isdigittmp651 = 0, $isdigittmp8 = 0, $isdigittmp849 = 0, $lenl$0$lcssa = 0, $lenr$0$lcssa = 0, $or$cond = 0, $or$cond13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)==($1<<24>>24);
 L1: do {
  if ($2) {
   $3 = $0 << 24 >> 24;
   $$0222 = $l;$$023 = $r;$4 = $0;$6 = $3;$haszero$024 = 1;
   while(1) {
    switch ($4<<24>>24) {
    case 0:  {
     $$03 = 0;
     break L1;
     break;
    }
    case 48:  {
     $5 = ($haszero$024|0)==(1);
     $$haszero$0 = $5 ? 0 : $haszero$024;
     $haszero$1 = $$haszero$0;
     break;
    }
    default: {
     $isdigittmp10 = (($6) + -48)|0;
     $isdigit11 = ($isdigittmp10>>>0)<(10);
     if ($isdigit11) {
      $7 = ($haszero$024|0)==(1);
      $$haszero$012 = $7 ? 2 : $haszero$024;
      $haszero$1 = $$haszero$012;
     } else {
      $haszero$1 = 1;
     }
    }
    }
    $8 = ((($$0222)) + 1|0);
    $9 = ((($$023)) + 1|0);
    $10 = HEAP8[$8>>0]|0;
    $11 = $10 << 24 >> 24;
    $12 = HEAP8[$9>>0]|0;
    $13 = ($10<<24>>24)==($12<<24>>24);
    if ($13) {
     $$0222 = $8;$$023 = $9;$4 = $10;$6 = $11;$haszero$024 = $haszero$1;
    } else {
     $$lcssa60 = $8;$$lcssa61 = $9;$$lcssa62 = $10;$$lcssa63 = $12;$haszero$1$lcssa = $haszero$1;
     break;
    }
   }
   $14 = ($haszero$1$lcssa|0)==(1);
   if ($14) {
    $$0$lcssa40 = $$lcssa61;$$02$lcssa42 = $$lcssa60;$15 = $$lcssa62;$17 = $$lcssa63;
    label = 9;
   } else {
    $$0$lcssa39 = $$lcssa61;$$02$lcssa41 = $$lcssa60;$21 = $$lcssa62;$23 = $$lcssa63;$haszero$2 = $haszero$1$lcssa;
    label = 10;
   }
  } else {
   $$0$lcssa40 = $r;$$02$lcssa42 = $l;$15 = $0;$17 = $1;
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  $16 = ($15<<24>>24)==(48);
  $18 = ($17<<24>>24)==(48);
  $or$cond13 = $16 | $18;
  $19 = $or$cond13&1;
  $$haszero$014 = $19 ^ 1;
  $$0$lcssa39 = $$0$lcssa40;$$02$lcssa41 = $$02$lcssa42;$21 = $15;$23 = $17;$haszero$2 = $$haszero$014;
  label = 10;
 }
 do {
  if ((label|0) == 10) {
   $20 = $21 << 24 >> 24;
   $isdigittmp = (($20) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   $22 = $23 << 24 >> 24;
   if ($isdigit) {
    $isdigittmp4 = (($22) + -48)|0;
    $isdigit5 = ($isdigittmp4>>>0)<(10);
    $24 = ($haszero$2|0)!=(0);
    $or$cond = $24 & $isdigit5;
    if ($or$cond) {
     $25 = $21 << 24 >> 24;
     $isdigittmp651 = (($25) + -48)|0;
     $isdigit752 = ($isdigittmp651>>>0)<(10);
     if ($isdigit752) {
      $27 = 1;
      while(1) {
       $$phi$trans$insert = (($$02$lcssa41) + ($27)|0);
       $$pre = HEAP8[$$phi$trans$insert>>0]|0;
       $28 = $$pre << 24 >> 24;
       $isdigittmp6 = (($28) + -48)|0;
       $isdigit7 = ($isdigittmp6>>>0)<(10);
       $29 = (($27) + 1)|0;
       if ($isdigit7) {
        $27 = $29;
       } else {
        $lenl$0$lcssa = $27;
        break;
       }
      }
     } else {
      $lenl$0$lcssa = 0;
     }
     $26 = $23 << 24 >> 24;
     $isdigittmp849 = (($26) + -48)|0;
     $isdigit950 = ($isdigittmp849>>>0)<(10);
     if ($isdigit950) {
      $30 = 1;
      while(1) {
       $$phi$trans$insert35 = (($$0$lcssa39) + ($30)|0);
       $$pre36 = HEAP8[$$phi$trans$insert35>>0]|0;
       $31 = $$pre36 << 24 >> 24;
       $isdigittmp8 = (($31) + -48)|0;
       $isdigit9 = ($isdigittmp8>>>0)<(10);
       $32 = (($30) + 1)|0;
       if ($isdigit9) {
        $30 = $32;
       } else {
        $lenr$0$lcssa = $30;
        break;
       }
      }
     } else {
      $lenr$0$lcssa = 0;
     }
     $33 = ($lenl$0$lcssa|0)==($lenr$0$lcssa|0);
     if ($33) {
      $34 = (($20) - ($22))|0;
      $$03 = $34;
      break;
     } else {
      $35 = ($lenl$0$lcssa>>>0)>($lenr$0$lcssa>>>0);
      $$ = $35 ? 1 : -1;
      $$03 = $$;
      break;
     }
    }
   }
   $36 = (($20) - ($22))|0;
   $$03 = $36;
  }
 } while(0);
 return ($$03|0);
}
function _swab($_src,$_dest,$n) {
 $_src = $_src|0;
 $_dest = $_dest|0;
 $n = $n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $dest$03 = 0, $src$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1);
 if ($0) {
  $$01 = $n;$dest$03 = $_dest;$src$02 = $_src;
  while(1) {
   $1 = ((($src$02)) + 1|0);
   $2 = HEAP8[$1>>0]|0;
   HEAP8[$dest$03>>0] = $2;
   $3 = HEAP8[$src$02>>0]|0;
   $4 = ((($dest$03)) + 1|0);
   HEAP8[$4>>0] = $3;
   $5 = ((($dest$03)) + 2|0);
   $6 = ((($src$02)) + 2|0);
   $7 = (($$01) + -2)|0;
   $8 = ($7|0)>(1);
   if ($8) {
    $$01 = $7;$dest$03 = $5;$src$02 = $6;
   } else {
    break;
   }
  }
 }
 return;
}
function _wcpcpy($d,$s) {
 $d = $d|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcscpy($d,$s)|0);
 $1 = (_wcslen($s)|0);
 $2 = (($0) + ($1<<2)|0);
 return ($2|0);
}
function _wcpncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcsncpy($d,$s,$n)|0);
 $1 = (_wcsnlen($s,$n)|0);
 $2 = (($0) + ($1<<2)|0);
 return ($2|0);
}
function _wcscasecmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcsncasecmp($l,$r,-1)|0);
 return ($0|0);
}
function _wcscasecmp_l($l,$r,$locale) {
 $l = $l|0;
 $r = $r|0;
 $locale = $locale|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcscasecmp($l,$r)|0);
 return ($0|0);
}
function _wcscat($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($dest)|0);
 $1 = (($dest) + ($0<<2)|0);
 (_wcscpy($1,$src)|0);
 return ($dest|0);
}
function _wcschr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$01 = 0, $$01$lcssa = 0, $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(0);
 if ($0) {
  $1 = (_wcslen($s)|0);
  $2 = (($s) + ($1<<2)|0);
  $$0 = $2;
 } else {
  $$01 = $s;
  while(1) {
   $3 = HEAP32[$$01>>2]|0;
   $4 = ($3|0)==(0);
   $5 = ($3|0)==($c|0);
   $or$cond = $4 | $5;
   $6 = ((($$01)) + 4|0);
   if ($or$cond) {
    $$01$lcssa = $$01;$$lcssa = $3;
    break;
   } else {
    $$01 = $6;
   }
  }
  $7 = ($$lcssa|0)!=(0);
  $8 = $7 ? $$01$lcssa : 0;
  $$0 = $8;
 }
 return ($$0|0);
}
function _wcscmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$027 = 0, $$08 = 0, $$lcssa = 0, $$lcssa4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond36 = 0;
 var $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 $1 = HEAP32[$r>>2]|0;
 $2 = ($0|0)!=($1|0);
 $3 = ($0|0)==(0);
 $or$cond5 = $3 | $2;
 $4 = ($1|0)==(0);
 $or$cond36 = $4 | $or$cond5;
 if ($or$cond36) {
  $$lcssa = $0;$$lcssa4 = $1;
 } else {
  $$027 = $l;$$08 = $r;
  while(1) {
   $5 = ((($$027)) + 4|0);
   $6 = ((($$08)) + 4|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = HEAP32[$6>>2]|0;
   $9 = ($7|0)!=($8|0);
   $10 = ($7|0)==(0);
   $or$cond = $10 | $9;
   $11 = ($8|0)==(0);
   $or$cond3 = $11 | $or$cond;
   if ($or$cond3) {
    $$lcssa = $7;$$lcssa4 = $8;
    break;
   } else {
    $$027 = $5;$$08 = $6;
   }
  }
 }
 $12 = (($$lcssa) - ($$lcssa4))|0;
 return ($12|0);
}
function _wcscpy($d,$s) {
 $d = $d|0;
 $s = $s|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $d;$$01 = $s;
 while(1) {
  $0 = ((($$01)) + 4|0);
  $1 = HEAP32[$$01>>2]|0;
  $2 = ((($$0)) + 4|0);
  HEAP32[$$0>>2] = $1;
  $3 = ($1|0)==(0);
  if ($3) {
   break;
  } else {
   $$0 = $2;$$01 = $0;
  }
 }
 return ($d|0);
}
function _wcscspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$01$lcssa = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$c>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (_wcslen($s)|0);
   $$0 = $2;
  } else {
   $3 = ((($c)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0);
   if ($5) {
    $8 = (_wcschr($s,$0)|0);
    $9 = ($8|0)==(0|0);
    if ($9) {
     $14 = (_wcslen($s)|0);
     $$0 = $14;
     break;
    } else {
     $10 = $8;
     $11 = $s;
     $12 = (($10) - ($11))|0;
     $13 = $12 >> 2;
     $$0 = $13;
     break;
    }
   }
   $6 = HEAP32[$s>>2]|0;
   $7 = ($6|0)==(0);
   L10: do {
    if ($7) {
     $$01$lcssa = $s;
    } else {
     $$012 = $s;$15 = $6;
     while(1) {
      $16 = (_wcschr($c,$15)|0);
      $17 = ($16|0)==(0|0);
      if (!($17)) {
       $$01$lcssa = $$012;
       break L10;
      }
      $18 = ((($$012)) + 4|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = ($19|0)==(0);
      if ($20) {
       $$01$lcssa = $18;
       break;
      } else {
       $$012 = $18;$15 = $19;
      }
     }
    }
   } while(0);
   $21 = $$01$lcssa;
   $22 = $s;
   $23 = (($21) - ($22))|0;
   $24 = $23 >> 2;
   $$0 = $24;
  }
 } while(0);
 return ($$0|0);
}
function _wcsdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = $1 << 2;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = (_wmemcpy($3,$s,$1)|0);
  $$0 = $5;
 }
 return ($$0|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = ((($$0)) + 4|0);
  if ($1) {
   $$0$lcssa = $$0;
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0$lcssa;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 return ($6|0);
}
function _wcsncasecmp($l,$r,$n) {
 $l = $l|0;
 $r = $r|0;
 $n = $n|0;
 var $$010 = 0, $$010$in = 0, $$04$lcssa = 0, $$049 = 0, $$049$lcssa29 = 0, $$058 = 0, $$058$lcssa30 = 0, $$06 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$06 = 0;
 } else {
  $1 = HEAP32[$l>>2]|0;
  $2 = ($1|0)==(0);
  L3: do {
   if ($2) {
    $$04$lcssa = $r;$16 = 0;
   } else {
    $$010$in = $n;$$049 = $r;$$058 = $l;$6 = $1;
    while(1) {
     $$010 = (($$010$in) + -1)|0;
     $3 = HEAP32[$$049>>2]|0;
     $4 = ($3|0)!=(0);
     $5 = ($$010|0)!=(0);
     $or$cond = $5 & $4;
     if (!($or$cond)) {
      $$04$lcssa = $$049;$16 = $6;
      break L3;
     }
     $7 = ($6|0)==($3|0);
     if (!($7)) {
      $8 = (_towlower($6)|0);
      $9 = HEAP32[$$049>>2]|0;
      $10 = (_towlower($9)|0);
      $11 = ($8|0)==($10|0);
      if (!($11)) {
       $$049$lcssa29 = $$049;$$058$lcssa30 = $$058;
       break;
      }
     }
     $12 = ((($$058)) + 4|0);
     $13 = ((($$049)) + 4|0);
     $14 = HEAP32[$12>>2]|0;
     $15 = ($14|0)==(0);
     if ($15) {
      $$04$lcssa = $13;$16 = 0;
      break L3;
     } else {
      $$010$in = $$010;$$049 = $13;$$058 = $12;$6 = $14;
     }
    }
    $$pre = HEAP32[$$058$lcssa30>>2]|0;
    $$04$lcssa = $$049$lcssa29;$16 = $$pre;
   }
  } while(0);
  $17 = (_towlower($16)|0);
  $18 = HEAP32[$$04$lcssa>>2]|0;
  $19 = (_towlower($18)|0);
  $20 = (($17) - ($19))|0;
  $$06 = $20;
 }
 return ($$06|0);
}
function _wcsncasecmp_l($l,$r,$n,$locale) {
 $l = $l|0;
 $r = $r|0;
 $n = $n|0;
 $locale = $locale|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcsncasecmp($l,$r,$n)|0);
 return ($0|0);
}
function _wcsncat($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($d)|0);
 $1 = (($d) + ($0<<2)|0);
 $2 = ($n|0)==(0);
 L1: do {
  if ($2) {
   $$0$lcssa = $1;
  } else {
   $$014 = $n;$$023 = $s;$$05 = $1;
   while(1) {
    $3 = HEAP32[$$023>>2]|0;
    $4 = ($3|0)==(0);
    if ($4) {
     $$0$lcssa = $$05;
     break L1;
    }
    $5 = (($$014) + -1)|0;
    $6 = ((($$023)) + 4|0);
    $7 = ((($$05)) + 4|0);
    HEAP32[$$05>>2] = $3;
    $8 = ($5|0)==(0);
    if ($8) {
     $$0$lcssa = $7;
     break;
    } else {
     $$014 = $5;$$023 = $6;$$05 = $7;
    }
   }
  }
 } while(0);
 HEAP32[$$0$lcssa>>2] = 0;
 return ($d|0);
}
function _wcsncmp($l,$r,$n) {
 $l = $l|0;
 $r = $r|0;
 $n = $n|0;
 var $$010 = 0, $$039 = 0, $$048 = 0, $$lcssa = 0, $$lcssa24 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$010 = $n;$$039 = $r;$$048 = $l;
   while(1) {
    $1 = HEAP32[$$048>>2]|0;
    $2 = HEAP32[$$039>>2]|0;
    $3 = ($1|0)!=($2|0);
    $4 = ($1|0)==(0);
    $or$cond = $4 | $3;
    $5 = ($2|0)==(0);
    $or$cond5 = $5 | $or$cond;
    if ($or$cond5) {
     $$lcssa = $1;$$lcssa24 = $2;
     break;
    }
    $6 = (($$010) + -1)|0;
    $7 = ((($$048)) + 4|0);
    $8 = ((($$039)) + 4|0);
    $9 = ($6|0)==(0);
    if ($9) {
     $11 = 0;
     break L1;
    } else {
     $$010 = $6;$$039 = $8;$$048 = $7;
    }
   }
   $10 = (($$lcssa) - ($$lcssa24))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function _wcsncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $$0$lcssa = $d;$$01$lcssa = 0;
  } else {
   $$014 = $n;$$023 = $s;$$05 = $d;
   while(1) {
    $1 = HEAP32[$$023>>2]|0;
    $2 = ($1|0)==(0);
    if ($2) {
     $$0$lcssa = $$05;$$01$lcssa = $$014;
     break L1;
    }
    $3 = (($$014) + -1)|0;
    $4 = ((($$023)) + 4|0);
    $5 = ((($$05)) + 4|0);
    HEAP32[$$05>>2] = $1;
    $6 = ($3|0)==(0);
    if ($6) {
     $$0$lcssa = $5;$$01$lcssa = 0;
     break;
    } else {
     $$014 = $3;$$023 = $4;$$05 = $5;
    }
   }
  }
 } while(0);
 (_wmemset($$0$lcssa,0,$$01$lcssa)|0);
 return ($d|0);
}
function _wcsnlen($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wmemchr($s,0,$n)|0);
 $1 = ($0|0)==(0|0);
 $2 = $0;
 $3 = $s;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 $$0 = $1 ? $n : $5;
 return ($$0|0);
}
function _wcspbrk($s,$b) {
 $s = $s|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcscspn($s,$b)|0);
 $1 = (($s) + ($0<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3 ? $1 : 0;
 return ($4|0);
}
function _wcsrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($s)|0);
 $1 = ($0|0)>(-1);
 L1: do {
  if ($1) {
   $2 = (($s) + ($0<<2)|0);
   $p$01 = $2;
   while(1) {
    $3 = HEAP32[$p$01>>2]|0;
    $4 = ($3|0)==($c|0);
    if ($4) {
     $$lcssa = $p$01;
     break L1;
    }
    $5 = ((($p$01)) + -4|0);
    $6 = ($5>>>0)<($s>>>0);
    if ($6) {
     $$lcssa = 0;
     break;
    } else {
     $p$01 = $5;
    }
   }
  } else {
   $$lcssa = 0;
  }
 } while(0);
 return ($$lcssa|0);
}
function _wcsspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$s>>2]|0;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $$0$lcssa = $s;
  } else {
   $$01 = $s;$2 = $0;
   while(1) {
    $3 = (_wcschr($c,$2)|0);
    $4 = ($3|0)==(0|0);
    if ($4) {
     $$0$lcssa = $$01;
     break L1;
    }
    $5 = ((($$01)) + 4|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==(0);
    if ($7) {
     $$0$lcssa = $5;
     break;
    } else {
     $$01 = $5;$2 = $6;
    }
   }
  }
 } while(0);
 $8 = $$0$lcssa;
 $9 = $s;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 2;
 return ($11|0);
}
function _wcsstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$0 = 0, $$03$be$i = 0, $$03$i = 0, $$lcssa = 0, $$lcssa247 = 0, $$lcssa250 = 0, $$lcssa264 = 0, $$lcssa267 = 0, $$lcssa270 = 0, $$lcssa284 = 0, $$pn$i = 0, $$pr4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa136$i = 0, $ip$0$ph72$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph51$i = 0, $jp$0$ph10$ph66$i = 0, $jp$0$ph1061$i = 0, $jp$0$ph1061$i$lcssa = 0, $jp$0$ph1061$i$lcssa$lcssa = 0, $jp$0$ph73$i = 0, $jp$1$ph52$i = 0, $jp$1$ph8$ph45$i = 0, $jp$1$ph840$i = 0;
 var $jp$1$ph840$i$lcssa = 0, $jp$1$ph840$i$lcssa$lcssa = 0, $k$055$i = 0, $k$135$i = 0, $k$234$i = 0, $k$234$i$lcssa = 0, $k$3$i = 0, $l$076$i = 0, $mem$0$be$i = 0, $mem$0$i = 0, $mem0$0$i = 0, $p$0$ph$ph$lcssa29$i = 0, $p$0$ph$ph$lcssa29140$i = 0, $p$0$ph$ph67$i = 0, $p$1$p$0$i = 0, $p$1$ph$ph$lcssa20$i = 0, $p$1$ph$ph46$i = 0, $p$3$i = 0, $z$0$i = 0, $z$1$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$n>>2]|0;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $$0 = $h;
  } else {
   $2 = HEAP32[$h>>2]|0;
   $3 = ($2|0)==(0);
   if ($3) {
    $$0 = 0;
   } else {
    $4 = (_wcschr($h,$0)|0);
    $5 = ($4|0)==(0|0);
    if ($5) {
     $$0 = 0;
    } else {
     $6 = ((($n)) + 4|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = ($7|0)==(0);
     if ($8) {
      $$0 = $4;
     } else {
      $9 = ((($4)) + 4|0);
      $10 = HEAP32[$9>>2]|0;
      $11 = ($10|0)==(0);
      if ($11) {
       $$0 = 0;
      } else {
       $l$076$i = 0;
       while(1) {
        $12 = (($4) + ($l$076$i<<2)|0);
        $13 = HEAP32[$12>>2]|0;
        $14 = ($13|0)==(0);
        if ($14) {
         $$0 = 0;
         break L1;
        }
        $15 = (($l$076$i) + 1)|0;
        $16 = (($n) + ($15<<2)|0);
        $17 = HEAP32[$16>>2]|0;
        $18 = ($17|0)==(0);
        if ($18) {
         $$lcssa284 = $15;
         break;
        } else {
         $l$076$i = $15;
        }
       }
       $19 = ($$lcssa284>>>0)>(1);
       L10: do {
        if ($19) {
         $107 = 1;$ip$0$ph72$i = -1;$jp$0$ph73$i = 0;
         L11: while(1) {
          $108 = $107;$jp$0$ph10$ph66$i = $jp$0$ph73$i;$p$0$ph$ph67$i = 1;
          while(1) {
           $109 = $108;$jp$0$ph1061$i = $jp$0$ph10$ph66$i;
           L15: while(1) {
            $29 = $109;$k$055$i = 1;
            while(1) {
             $25 = (($k$055$i) + ($ip$0$ph72$i))|0;
             $26 = (($n) + ($25<<2)|0);
             $27 = HEAP32[$26>>2]|0;
             $28 = (($n) + ($29<<2)|0);
             $30 = HEAP32[$28>>2]|0;
             $31 = ($27|0)==($30|0);
             if (!($31)) {
              $$lcssa264 = $29;$$lcssa267 = $27;$$lcssa270 = $30;$jp$0$ph1061$i$lcssa = $jp$0$ph1061$i;
              break L15;
             }
             $32 = ($k$055$i|0)==($p$0$ph$ph67$i|0);
             $23 = (($k$055$i) + 1)|0;
             if ($32) {
              break;
             }
             $22 = (($23) + ($jp$0$ph1061$i))|0;
             $24 = ($22>>>0)<($$lcssa284>>>0);
             if ($24) {
              $29 = $22;$k$055$i = $23;
             } else {
              $ip$0$ph$lcssa$i = $ip$0$ph72$i;$p$0$ph$ph$lcssa29$i = $p$0$ph$ph67$i;
              break L11;
             }
            }
            $33 = (($jp$0$ph1061$i) + ($p$0$ph$ph67$i))|0;
            $34 = (($33) + 1)|0;
            $35 = ($34>>>0)<($$lcssa284>>>0);
            if ($35) {
             $109 = $34;$jp$0$ph1061$i = $33;
            } else {
             $ip$0$ph$lcssa$i = $ip$0$ph72$i;$p$0$ph$ph$lcssa29$i = $p$0$ph$ph67$i;
             break L11;
            }
           }
           $36 = ($$lcssa267|0)>($$lcssa270|0);
           $37 = (($$lcssa264) - ($ip$0$ph72$i))|0;
           if (!($36)) {
            $jp$0$ph1061$i$lcssa$lcssa = $jp$0$ph1061$i$lcssa;
            break;
           }
           $20 = (($$lcssa264) + 1)|0;
           $21 = ($20>>>0)<($$lcssa284>>>0);
           if ($21) {
            $108 = $20;$jp$0$ph10$ph66$i = $$lcssa264;$p$0$ph$ph67$i = $37;
           } else {
            $ip$0$ph$lcssa$i = $ip$0$ph72$i;$p$0$ph$ph$lcssa29$i = $37;
            break L11;
           }
          }
          $38 = (($jp$0$ph1061$i$lcssa$lcssa) + 1)|0;
          $39 = (($jp$0$ph1061$i$lcssa$lcssa) + 2)|0;
          $40 = ($39>>>0)<($$lcssa284>>>0);
          if ($40) {
           $107 = $39;$ip$0$ph72$i = $jp$0$ph1061$i$lcssa$lcssa;$jp$0$ph73$i = $38;
          } else {
           $ip$0$ph$lcssa$i = $jp$0$ph1061$i$lcssa$lcssa;$p$0$ph$ph$lcssa29$i = 1;
           break;
          }
         }
         $110 = 1;$ip$1$ph51$i = -1;$jp$1$ph52$i = 0;
         while(1) {
          $112 = $110;$jp$1$ph8$ph45$i = $jp$1$ph52$i;$p$1$ph$ph46$i = 1;
          while(1) {
           $111 = $112;$jp$1$ph840$i = $jp$1$ph8$ph45$i;
           L30: while(1) {
            $48 = $111;$k$135$i = 1;
            while(1) {
             $44 = (($k$135$i) + ($ip$1$ph51$i))|0;
             $45 = (($n) + ($44<<2)|0);
             $46 = HEAP32[$45>>2]|0;
             $47 = (($n) + ($48<<2)|0);
             $49 = HEAP32[$47>>2]|0;
             $50 = ($46|0)==($49|0);
             if (!($50)) {
              $$lcssa = $48;$$lcssa247 = $46;$$lcssa250 = $49;$jp$1$ph840$i$lcssa = $jp$1$ph840$i;
              break L30;
             }
             $51 = ($k$135$i|0)==($p$1$ph$ph46$i|0);
             $42 = (($k$135$i) + 1)|0;
             if ($51) {
              break;
             }
             $41 = (($42) + ($jp$1$ph840$i))|0;
             $43 = ($41>>>0)<($$lcssa284>>>0);
             if ($43) {
              $48 = $41;$k$135$i = $42;
             } else {
              $ip$0$ph$lcssa136$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph51$i;$p$0$ph$ph$lcssa29140$i = $p$0$ph$ph$lcssa29$i;$p$1$ph$ph$lcssa20$i = $p$1$ph$ph46$i;
              break L10;
             }
            }
            $52 = (($jp$1$ph840$i) + ($p$1$ph$ph46$i))|0;
            $53 = (($52) + 1)|0;
            $54 = ($53>>>0)<($$lcssa284>>>0);
            if ($54) {
             $111 = $53;$jp$1$ph840$i = $52;
            } else {
             $ip$0$ph$lcssa136$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph51$i;$p$0$ph$ph$lcssa29140$i = $p$0$ph$ph$lcssa29$i;$p$1$ph$ph$lcssa20$i = $p$1$ph$ph46$i;
             break L10;
            }
           }
           $55 = ($$lcssa247|0)<($$lcssa250|0);
           $56 = (($$lcssa) - ($ip$1$ph51$i))|0;
           if (!($55)) {
            $jp$1$ph840$i$lcssa$lcssa = $jp$1$ph840$i$lcssa;
            break;
           }
           $60 = (($$lcssa) + 1)|0;
           $61 = ($60>>>0)<($$lcssa284>>>0);
           if ($61) {
            $112 = $60;$jp$1$ph8$ph45$i = $$lcssa;$p$1$ph$ph46$i = $56;
           } else {
            $ip$0$ph$lcssa136$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph51$i;$p$0$ph$ph$lcssa29140$i = $p$0$ph$ph$lcssa29$i;$p$1$ph$ph$lcssa20$i = $56;
            break L10;
           }
          }
          $57 = (($jp$1$ph840$i$lcssa$lcssa) + 1)|0;
          $58 = (($jp$1$ph840$i$lcssa$lcssa) + 2)|0;
          $59 = ($58>>>0)<($$lcssa284>>>0);
          if ($59) {
           $110 = $58;$ip$1$ph51$i = $jp$1$ph840$i$lcssa$lcssa;$jp$1$ph52$i = $57;
          } else {
           $ip$0$ph$lcssa136$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $jp$1$ph840$i$lcssa$lcssa;$p$0$ph$ph$lcssa29140$i = $p$0$ph$ph$lcssa29$i;$p$1$ph$ph$lcssa20$i = 1;
           break;
          }
         }
        } else {
         $ip$0$ph$lcssa136$i = -1;$ip$1$ph$lcssa$i = -1;$p$0$ph$ph$lcssa29140$i = 1;$p$1$ph$ph$lcssa20$i = 1;
        }
       } while(0);
       $62 = (($ip$1$ph$lcssa$i) + 1)|0;
       $63 = (($ip$0$ph$lcssa136$i) + 1)|0;
       $64 = ($62>>>0)>($63>>>0);
       $p$1$p$0$i = $64 ? $p$1$ph$ph$lcssa20$i : $p$0$ph$ph$lcssa29140$i;
       $ip$1$ip$0$i = $64 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa136$i;
       $65 = (($n) + ($p$1$p$0$i<<2)|0);
       $66 = (($ip$1$ip$0$i) + 1)|0;
       $67 = (_wmemcmp($n,$65,$66)|0);
       $68 = ($67|0)==(0);
       if ($68) {
        $73 = (($$lcssa284) - ($p$1$p$0$i))|0;
        $mem0$0$i = $73;$p$3$i = $p$1$p$0$i;
       } else {
        $69 = (($$lcssa284) - ($ip$1$ip$0$i))|0;
        $70 = (($69) + -1)|0;
        $71 = ($ip$1$ip$0$i>>>0)>($70>>>0);
        $ip$1$ip$0$$i = $71 ? $ip$1$ip$0$i : $70;
        $72 = (($ip$1$ip$0$$i) + 1)|0;
        $mem0$0$i = 0;$p$3$i = $72;
       }
       $74 = $$lcssa284 | 63;
       $$03$i = $4;$mem$0$i = 0;$z$0$i = $4;
       while(1) {
        $75 = $z$0$i;
        $76 = $$03$i;
        $77 = (($75) - ($76))|0;
        $78 = $77 >> 2;
        $79 = ($78>>>0)<($$lcssa284>>>0);
        do {
         if ($79) {
          $80 = (_wmemchr($z$0$i,0,$74)|0);
          $81 = ($80|0)==(0|0);
          if ($81) {
           $86 = (($z$0$i) + ($74<<2)|0);
           $z$1$i = $86;
           break;
          } else {
           $82 = $80;
           $83 = (($82) - ($76))|0;
           $84 = $83 >> 2;
           $85 = ($84>>>0)<($$lcssa284>>>0);
           if ($85) {
            $$0 = 0;
            break L1;
           } else {
            $z$1$i = $80;
            break;
           }
          }
         } else {
          $z$1$i = $z$0$i;
         }
        } while(0);
        $87 = ($66>>>0)>($mem$0$i>>>0);
        $88 = $87 ? $66 : $mem$0$i;
        $89 = (($n) + ($88<<2)|0);
        $90 = HEAP32[$89>>2]|0;
        $91 = ($90|0)==(0);
        L53: do {
         if ($91) {
          $k$3$i = $66;
          label = 43;
         } else {
          $$pr4$i = $90;$k$234$i = $88;
          while(1) {
           $92 = (($$03$i) + ($k$234$i<<2)|0);
           $93 = HEAP32[$92>>2]|0;
           $94 = ($$pr4$i|0)==($93|0);
           if (!($94)) {
            $k$234$i$lcssa = $k$234$i;
            break;
           }
           $95 = (($k$234$i) + 1)|0;
           $96 = (($n) + ($95<<2)|0);
           $97 = HEAP32[$96>>2]|0;
           $98 = ($97|0)==(0);
           if ($98) {
            $k$3$i = $66;
            label = 43;
            break L53;
           } else {
            $$pr4$i = $97;$k$234$i = $95;
           }
          }
          $99 = (($k$234$i$lcssa) - ($ip$1$ip$0$i))|0;
          $$pn$i = $99;$mem$0$be$i = 0;
         }
        } while(0);
        if ((label|0) == 43) {
         while(1) {
          label = 0;
          $100 = ($k$3$i>>>0)>($mem$0$i>>>0);
          if (!($100)) {
           $$0 = $$03$i;
           break L1;
          }
          $101 = (($k$3$i) + -1)|0;
          $102 = (($n) + ($101<<2)|0);
          $103 = HEAP32[$102>>2]|0;
          $104 = (($$03$i) + ($101<<2)|0);
          $105 = HEAP32[$104>>2]|0;
          $106 = ($103|0)==($105|0);
          if ($106) {
           $k$3$i = $101;
           label = 43;
          } else {
           $$pn$i = $p$3$i;$mem$0$be$i = $mem0$0$i;
           break;
          }
         }
        }
        $$03$be$i = (($$03$i) + ($$pn$i<<2)|0);
        $$03$i = $$03$be$i;$mem$0$i = $mem$0$be$i;$z$0$i = $z$1$i;
       }
      }
     }
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _wcstok($s,$sep,$p) {
 $s = $s|0;
 $sep = $sep|0;
 $p = $p|0;
 var $$0 = 0, $$01 = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $1 = HEAP32[$p>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
  } else {
   $$01 = $1;
   label = 3;
  }
 } else {
  $$01 = $s;
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $3 = (_wcsspn($$01,$sep)|0);
   $4 = (($$01) + ($3<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$p>>2] = 0;
    $$0 = 0;
    break;
   }
   $7 = (_wcscspn($4,$sep)|0);
   $$sum = (($7) + ($3))|0;
   $8 = (($$01) + ($$sum<<2)|0);
   HEAP32[$p>>2] = $8;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0);
   if ($10) {
    HEAP32[$p>>2] = 0;
    $$0 = $4;
    break;
   } else {
    $$sum2 = (($$sum) + 1)|0;
    $11 = (($$01) + ($$sum2<<2)|0);
    HEAP32[$p>>2] = $11;
    HEAP32[$8>>2] = 0;
    $$0 = $4;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wcswcs($haystack,$needle) {
 $haystack = $haystack|0;
 $needle = $needle|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcsstr($haystack,$needle)|0);
 return ($0|0);
}
function _wmemchr($s,$c,$n) {
 $s = $s|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $$lcssa = 0;
  } else {
   $$012 = $s;$$03 = $n;
   while(1) {
    $1 = HEAP32[$$012>>2]|0;
    $2 = ($1|0)==($c|0);
    if ($2) {
     $$lcssa = $$012;
     break L1;
    }
    $3 = (($$03) + -1)|0;
    $4 = ((($$012)) + 4|0);
    $5 = ($3|0)==(0);
    if ($5) {
     $$lcssa = 0;
     break;
    } else {
     $$012 = $4;$$03 = $3;
    }
   }
  }
 } while(0);
 return ($$lcssa|0);
}
function _wmemcmp($l,$r,$n) {
 $l = $l|0;
 $r = $r|0;
 $n = $n|0;
 var $$016 = 0, $$025 = 0, $$07 = 0, $$lcssa = 0, $$lcssa21 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $9 = 0;
  } else {
   $$016 = $r;$$025 = $l;$$07 = $n;
   while(1) {
    $1 = HEAP32[$$025>>2]|0;
    $2 = HEAP32[$$016>>2]|0;
    $3 = ($1|0)==($2|0);
    if (!($3)) {
     $$lcssa = $1;$$lcssa21 = $2;
     break;
    }
    $4 = (($$07) + -1)|0;
    $5 = ((($$025)) + 4|0);
    $6 = ((($$016)) + 4|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $9 = 0;
     break L1;
    } else {
     $$016 = $6;$$025 = $5;$$07 = $4;
    }
   }
   $8 = (($$lcssa) - ($$lcssa21))|0;
   $9 = $8;
  }
 } while(0);
 return ($9|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$014 = $n;$$023 = $s;$$05 = $d;
  while(1) {
   $1 = (($$014) + -1)|0;
   $2 = ((($$023)) + 4|0);
   $3 = HEAP32[$$023>>2]|0;
   $4 = ((($$05)) + 4|0);
   HEAP32[$$05>>2] = $3;
   $5 = ($1|0)==(0);
   if ($5) {
    break;
   } else {
    $$014 = $1;$$023 = $2;$$05 = $4;
   }
  }
 }
 return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)<($n>>>0);
 $5 = ($n|0)==(0);
 if ($4) {
  if (!($5)) {
   $$in = $n;
   while(1) {
    $6 = (($$in) + -1)|0;
    $7 = (($s) + ($6<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($d) + ($6<<2)|0);
    HEAP32[$9>>2] = $8;
    $10 = ($6|0)==(0);
    if ($10) {
     break;
    } else {
     $$in = $6;
    }
   }
  }
 } else {
  if (!($5)) {
   $$025 = $s;$$07 = $d;$$16 = $n;
   while(1) {
    $11 = (($$16) + -1)|0;
    $12 = ((($$025)) + 4|0);
    $13 = HEAP32[$$025>>2]|0;
    $14 = ((($$07)) + 4|0);
    HEAP32[$$07>>2] = $13;
    $15 = ($11|0)==(0);
    if ($15) {
     break;
    } else {
     $$025 = $12;$$07 = $14;$$16 = $11;
    }
   }
  }
 }
 return ($d|0);
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$012 = $n;$$03 = $d;
  while(1) {
   $1 = (($$012) + -1)|0;
   $2 = ((($$03)) + 4|0);
   HEAP32[$$03>>2] = $c;
   $3 = ($1|0)==(0);
   if ($3) {
    break;
   } else {
    $$012 = $1;$$03 = $2;
   }
  }
 }
 return ($d|0);
}
function _mkdtemp($template) {
 $template = $template|0;
 var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $retries$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($template)|0);
 $1 = ($0>>>0)<(6);
 L1: do {
  if ($1) {
   label = 3;
  } else {
   $$sum = (($0) + -6)|0;
   $2 = (($template) + ($$sum)|0);
   $3 = (_memcmp($2,176992,6)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $retries$0 = 100;
    while(1) {
     (___randname($2)|0);
     $6 = (_mkdir($template,448)|0);
     $7 = ($6|0)==(0);
     if ($7) {
      $$0 = $template;
      break L1;
     }
     $8 = (($retries$0) + -1)|0;
     $9 = ($8|0)==(0);
     if ($9) {
      break;
     }
     $10 = (___errno_location()|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ($11|0)==(17);
     if ($12) {
      $retries$0 = $8;
     } else {
      break;
     }
    }
    ;HEAP8[$2>>0]=HEAP8[176992>>0]|0;HEAP8[$2+1>>0]=HEAP8[176992+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[176992+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[176992+3>>0]|0;HEAP8[$2+4>>0]=HEAP8[176992+4>>0]|0;HEAP8[$2+5>>0]=HEAP8[176992+5>>0]|0;
    $$0 = 0;
   } else {
    label = 3;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 }
 return ($$0|0);
}
function _mkostemp($template,$flags) {
 $template = $template|0;
 $flags = $flags|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___mkostemps($template,0,$flags)|0);
 return ($0|0);
}
function ___mkostemps($template,$len,$flags) {
 $template = $template|0;
 $len = $len|0;
 $flags = $flags|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $retries$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_strlen($template)|0);
 $1 = ($0>>>0)<(6);
 $2 = (($0) + -6)|0;
 $3 = ($2>>>0)<($len>>>0);
 $or$cond = $1 | $3;
 L1: do {
  if ($or$cond) {
   label = 4;
  } else {
   $$sum = (-6 - ($len))|0;
   $$sum1 = (($$sum) + ($0))|0;
   $4 = (($template) + ($$sum1)|0);
   $5 = (_memcmp($4,176992,6)|0);
   $6 = ($5|0)==(0);
   if ($6) {
    $7 = $flags | 194;
    $retries$0 = 100;
    while(1) {
     (___randname($4)|0);
     HEAP32[$vararg_buffer>>2] = 384;
     $9 = (_open($template,$7,$vararg_buffer)|0);
     $10 = ($9|0)>(-1);
     if ($10) {
      $$0 = $9;
      break L1;
     }
     $11 = (($retries$0) + -1)|0;
     $12 = ($11|0)==(0);
     if ($12) {
      break;
     }
     $13 = (___errno_location()|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==(17);
     if ($15) {
      $retries$0 = $11;
     } else {
      break;
     }
    }
    ;HEAP8[$4>>0]=HEAP8[176992>>0]|0;HEAP8[$4+1>>0]=HEAP8[176992+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[176992+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[176992+3>>0]|0;HEAP8[$4+4>>0]=HEAP8[176992+4>>0]|0;HEAP8[$4+5>>0]=HEAP8[176992+5>>0]|0;
    $$0 = -1;
   } else {
    label = 4;
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $8 = (___errno_location()|0);
  HEAP32[$8>>2] = 22;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _mkstemp($template) {
 $template = $template|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___mkostemps($template,0,0)|0);
 return ($0|0);
}
function _mkstemps($template,$len) {
 $template = $template|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___mkostemps($template,$len,0)|0);
 return ($0|0);
}
function _mktemp($template) {
 $template = $template|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $retries$0 = 0, $st = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $st = sp;
 $0 = (_strlen($template)|0);
 $1 = ($0>>>0)<(6);
 do {
  if ($1) {
   label = 3;
  } else {
   $$sum = (($0) + -6)|0;
   $2 = (($template) + ($$sum)|0);
   $3 = (_memcmp($2,176992,6)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $retries$0 = 100;
    while(1) {
     (___randname($2)|0);
     $6 = (_stat($template,$st)|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      break;
     }
     $11 = (($retries$0) + -1)|0;
     $12 = ($11|0)==(0);
     if ($12) {
      label = 8;
      break;
     } else {
      $retries$0 = $11;
     }
    }
    if ((label|0) == 8) {
     HEAP8[$template>>0] = 0;
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 17;
     break;
    }
    $8 = (___errno_location()|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==(2);
    if (!($10)) {
     HEAP8[$template>>0] = 0;
    }
   } else {
    label = 3;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  HEAP8[$template>>0] = 0;
 }
 STACKTOP = sp;return ($template|0);
}
function ___randname($template) {
 $template = $template|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $r$02 = 0;
 var $ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ts = sp;
 (___clock_gettime(0,($ts|0))|0);
 $0 = ((($ts)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1*65537)|0;
 $3 = $ts;
 $4 = $3 >>> 4;
 $5 = $template;
 $6 = (($4) + ($5))|0;
 $7 = $2 ^ $6;
 $i$01 = 0;$r$02 = $7;
 while(1) {
  $8 = $r$02 & 15;
  $9 = (($8) + 65)|0;
  $10 = $r$02 << 1;
  $11 = $10 & 32;
  $12 = $9 | $11;
  $13 = $12&255;
  $14 = (($template) + ($i$01)|0);
  HEAP8[$14>>0] = $13;
  $15 = (($i$01) + 1)|0;
  $16 = $r$02 >>> 5;
  $exitcond = ($15|0)==(6);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $15;$r$02 = $16;
  }
 }
 STACKTOP = sp;return ($template|0);
}
function _cfgetospeed($tio) {
 $tio = $tio|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($tio)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 4111;
 return ($2|0);
}
function _cfgetispeed($tio) {
 $tio = $tio|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($tio)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 4111;
 return ($2|0);
}
function _cfmakeraw($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$t>>2]|0;
 $1 = $0 & -1516;
 HEAP32[$t>>2] = $1;
 $2 = ((($t)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -2;
 HEAP32[$2>>2] = $4;
 $5 = ((($t)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & -32844;
 HEAP32[$5>>2] = $7;
 $8 = ((($t)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & -305;
 $11 = $10 | 48;
 HEAP32[$8>>2] = $11;
 $12 = ((($t)) + 23|0);
 HEAP8[$12>>0] = 1;
 $13 = ((($t)) + 22|0);
 HEAP8[$13>>0] = 0;
 return;
}
function _cfsetospeed($tio,$speed) {
 $tio = $tio|0;
 $speed = $speed|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $speed & -4112;
 $1 = ($0|0)==(0);
 if ($1) {
  $3 = ((($tio)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 & -4112;
  $6 = $5 | $speed;
  HEAP32[$3>>2] = $6;
  $$0 = 0;
 } else {
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = 22;
  $$0 = -1;
 }
 return ($$0|0);
}
function _cfsetispeed($tio,$speed) {
 $tio = $tio|0;
 $speed = $speed|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($speed|0)==(0);
 do {
  if ($0) {
   $8 = 0;
  } else {
   $1 = $speed & -4112;
   $2 = ($1|0)==(0);
   if ($2) {
    $4 = ((($tio)) + 8|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = $5 & -4112;
    $7 = $6 | $speed;
    HEAP32[$4>>2] = $7;
    $8 = 0;
    break;
   } else {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 22;
    $8 = -1;
    break;
   }
  }
 } while(0);
 return ($8|0);
}
function _tcdrain($fd) {
 $fd = $fd|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 21513;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 1;
 $0 = (___syscall54(54,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _tcflow($fd,$action) {
 $fd = $fd|0;
 $action = $action|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $action;
 $0 = (_ioctl($fd,21514,$vararg_buffer)|0);
 STACKTOP = sp;return ($0|0);
}
function _tcflush($fd,$queue) {
 $fd = $fd|0;
 $queue = $queue|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $queue;
 $0 = (_ioctl($fd,21515,$vararg_buffer)|0);
 STACKTOP = sp;return ($0|0);
}
function _tcgetattr($fd,$tio) {
 $fd = $fd|0;
 $tio = $tio|0;
 var $$ = 0, $0 = 0, $not$ = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $tio;
 $0 = (_ioctl($fd,21505,$vararg_buffer)|0);
 $not$ = ($0|0)!=(0);
 $$ = $not$ << 31 >> 31;
 STACKTOP = sp;return ($$|0);
}
function _tcgetsid($fd) {
 $fd = $fd|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $sid = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $sid = sp + 4|0;
 HEAP32[$vararg_buffer>>2] = $sid;
 $0 = (_ioctl($fd,21545,$vararg_buffer)|0);
 $1 = ($0|0)<(0);
 $2 = HEAP32[$sid>>2]|0;
 $$0 = $1 ? -1 : $2;
 STACKTOP = sp;return ($$0|0);
}
function _tcsendbreak($fd,$dur) {
 $fd = $fd|0;
 $dur = $dur|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = 0;
 $0 = (_ioctl($fd,21513,$vararg_buffer)|0);
 STACKTOP = sp;return ($0|0);
}
function _tcsetattr($fd,$act,$tio) {
 $fd = $fd|0;
 $act = $act|0;
 $tio = $tio|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($act>>>0)>(2);
 if ($0) {
  $1 = (___errno_location()|0);
  HEAP32[$1>>2] = 22;
  $$0 = -1;
 } else {
  $2 = (($act) + 21506)|0;
  HEAP32[$vararg_buffer>>2] = $tio;
  $3 = (_ioctl($fd,$2,$vararg_buffer)|0);
  $$0 = $3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _access($filename,$amode) {
 $filename = $filename|0;
 $amode = $amode|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $filename;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $amode;
 $0 = (___syscall33(33,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _acct($filename) {
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $filename;
 $0 = (___syscall51(51,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _chdir($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $0 = (___syscall12(12,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _chown($path,$uid,$gid) {
 $path = $path|0;
 $uid = $uid|0;
 $gid = $gid|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $uid;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $gid;
 $0 = (___syscall212(212,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _close($fd) {
 $fd = $fd|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $0 = (___syscall6(6,($vararg_buffer|0))|0);
 $1 = ($0|0)==(-4);
 $$ = $1 ? -115 : $0;
 $2 = (___syscall_ret($$)|0);
 STACKTOP = sp;return ($2|0);
}
function _ctermid($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $s$ = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($s|0)!=(0|0);
 $s$ = $0 ? $s : 176999;
 HEAP8[$s$>>0] = 0;
 $1 = (_open(177019,524545,$vararg_buffer)|0);
 $2 = ($1|0)>(-1);
 if ($2) {
  (_ttyname_r($1,$s$,20)|0);
  HEAP32[$vararg_buffer1>>2] = $1;
  (___syscall6(6,($vararg_buffer1|0))|0);
 }
 STACKTOP = sp;return ($s$|0);
}
function _dup($fd) {
 $fd = $fd|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $0 = (___syscall41(41,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _dup2($old,$new) {
 $old = $old|0;
 $new = $new|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 while(1) {
  HEAP32[$vararg_buffer>>2] = $old;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $new;
  $0 = (___syscall63(63,($vararg_buffer|0))|0);
  $1 = ($0|0)==(-16);
  if (!($1)) {
   $$lcssa = $0;
   break;
  }
 }
 $2 = (___syscall_ret($$lcssa)|0);
 STACKTOP = sp;return ($2|0);
}
function ___dup3($old,$new,$flags) {
 $old = $old|0;
 $new = $new|0;
 $flags = $flags|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa12 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = ($old|0)==($new|0);
 L1: do {
  if ($0) {
   $1 = (___syscall_ret(-22)|0);
   $$0 = $1;
  } else {
   $2 = $flags & 524288;
   $3 = ($2|0)!=(0);
   L4: do {
    if ($3) {
     L5: while(1) {
      HEAP32[$vararg_buffer>>2] = $old;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $new;
      $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
      HEAP32[$vararg_ptr2>>2] = $flags;
      $4 = (___syscall330(330,($vararg_buffer|0))|0);
      switch ($4|0) {
      case -38:  {
       break L4;
       break;
      }
      case -16:  {
       break;
      }
      default: {
       $$lcssa12 = $4;
       break L5;
      }
      }
     }
     $5 = (___syscall_ret($$lcssa12)|0);
     $$0 = $5;
     break L1;
    }
   } while(0);
   while(1) {
    HEAP32[$vararg_buffer3>>2] = $old;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $new;
    $6 = (___syscall63(63,($vararg_buffer3|0))|0);
    $7 = ($6|0)==(-16);
    if (!($7)) {
     $$lcssa = $6;
     break;
    }
   }
   if ($3) {
    HEAP32[$vararg_buffer7>>2] = $new;
    $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
    HEAP32[$vararg_ptr10>>2] = 2;
    $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
    HEAP32[$vararg_ptr11>>2] = 1;
    (___syscall221(221,($vararg_buffer7|0))|0);
   }
   $8 = (___syscall_ret($$lcssa)|0);
   $$0 = $8;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _faccessat($fd,$filename,$amode,$flag) {
 $fd = $fd|0;
 $filename = $filename|0;
 $amode = $amode|0;
 $flag = $flag|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $ret$0 = 0, $set = 0, $stack = 0, $status = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1216|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $stack = sp + 184|0;
 $set = sp + 56|0;
 $c = sp + 44|0;
 $status = sp + 40|0;
 L1: do {
  switch ($flag|0) {
  case 0:  {
   label = 4;
   break;
  }
  case 512:  {
   $0 = (_getuid()|0);
   $1 = (_geteuid()|0);
   $2 = ($0|0)==($1|0);
   if ($2) {
    $3 = (_getgid()|0);
    $4 = (_getegid()|0);
    $5 = ($3|0)==($4|0);
    if ($5) {
     label = 4;
     break L1;
    }
   }
   HEAP32[$c>>2] = $fd;
   $9 = ((($c)) + 4|0);
   HEAP32[$9>>2] = $filename;
   $10 = ((($c)) + 8|0);
   HEAP32[$10>>2] = $amode;
   ___block_all_sigs(($set|0));
   $11 = ((($stack)) + 1024|0);
   $12 = (___clone((32|0),($11|0),0,($c|0),($vararg_buffer4|0))|0);
   $13 = ($12|0)>(0);
   L7: do {
    if ($13) {
     while(1) {
      HEAP32[$vararg_buffer6>>2] = $12;
      $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
      HEAP32[$vararg_ptr9>>2] = $status;
      $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
      HEAP32[$vararg_ptr10>>2] = -2147483648;
      $vararg_ptr11 = ((($vararg_buffer6)) + 12|0);
      HEAP32[$vararg_ptr11>>2] = 0;
      (___syscall114(114,($vararg_buffer6|0))|0);
      $14 = HEAP32[$status>>2]|0;
      $15 = $14 & 127;
      $16 = ($15|0)==(0);
      if ($16) {
       $$lcssa = $14;
       break;
      }
      $17 = $14 & 65535;
      $18 = (($17) + -1)|0;
      $19 = ($18>>>0)>(254);
      if (!($19)) {
       $ret$0 = -16;
       break L7;
      }
     }
     $20 = $$lcssa >>> 8;
     $21 = $20 & 255;
     $22 = (15704 + ($21<<2)|0);
     $23 = HEAP32[$22>>2]|0;
     $ret$0 = $23;
    } else {
     $ret$0 = -16;
    }
   } while(0);
   ___restore_sigs(($set|0));
   $24 = (___syscall_ret($ret$0)|0);
   $$0 = $24;
   break;
  }
  default: {
   $8 = (___syscall_ret(-22)|0);
   $$0 = $8;
  }
  }
 } while(0);
 if ((label|0) == 4) {
  HEAP32[$vararg_buffer>>2] = $fd;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $filename;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $amode;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $flag;
  $6 = (___syscall307(307,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $$0 = $7;
 }
 STACKTOP = sp;return ($$0|0);
}
function _fchdir($fd) {
 $fd = $fd|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $buf = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $buf = sp + 20|0;
 HEAP32[$vararg_buffer>>2] = $fd;
 $0 = (___syscall133(133,($vararg_buffer|0))|0);
 $1 = ($0|0)==(-9);
 if ($1) {
  HEAP32[$vararg_buffer1>>2] = $fd;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 1;
  $2 = (___syscall221(221,($vararg_buffer1|0))|0);
  $3 = ($2|0)<(0);
  if ($3) {
   label = 3;
  } else {
   ___procfdname($buf,$fd);
   HEAP32[$vararg_buffer5>>2] = $buf;
   $5 = (___syscall12(12,($vararg_buffer5|0))|0);
   $6 = (___syscall_ret($5)|0);
   $$0 = $6;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $4 = (___syscall_ret($0)|0);
  $$0 = $4;
 }
 STACKTOP = sp;return ($$0|0);
}
function _fchown($fd,$uid,$gid) {
 $fd = $fd|0;
 $uid = $uid|0;
 $gid = $gid|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $buf = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $buf = sp + 36|0;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $uid;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $gid;
 $0 = (___syscall207(207,($vararg_buffer|0))|0);
 $1 = ($0|0)==(-9);
 if ($1) {
  HEAP32[$vararg_buffer3>>2] = $fd;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 1;
  $2 = (___syscall221(221,($vararg_buffer3|0))|0);
  $3 = ($2|0)<(0);
  if ($3) {
   label = 3;
  } else {
   ___procfdname($buf,$fd);
   HEAP32[$vararg_buffer7>>2] = $buf;
   $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
   HEAP32[$vararg_ptr10>>2] = $uid;
   $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
   HEAP32[$vararg_ptr11>>2] = $gid;
   $5 = (___syscall212(212,($vararg_buffer7|0))|0);
   $6 = (___syscall_ret($5)|0);
   $$0 = $6;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $4 = (___syscall_ret($0)|0);
  $$0 = $4;
 }
 STACKTOP = sp;return ($$0|0);
}
function _fchownat($fd,$path,$uid,$gid,$flag) {
 $fd = $fd|0;
 $path = $path|0;
 $uid = $uid|0;
 $gid = $gid|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $path;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $uid;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $gid;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $flag;
 $0 = (___syscall298(298,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _fdatasync($fd) {
 $fd = $fd|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $0 = (___syscall148(148,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _fsync($fd) {
 $fd = $fd|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $0 = (___syscall118(118,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _ftruncate($fd,$length) {
 $fd = $fd|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($length|0)<(0);
 $1 = $0 << 31 >> 31;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $length;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $1;
 $2 = (___syscall194(194,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _getcwd($buf,$size) {
 $buf = $buf|0;
 $size = $size|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $tmp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tmp = sp + 8|0;
 $0 = ($buf|0)==(0|0);
 if ($0) {
  $$0 = 4096;$$01 = $tmp;
  label = 4;
 } else {
  $1 = ($size|0)==(0);
  if ($1) {
   $2 = (___errno_location()|0);
   HEAP32[$2>>2] = 22;
   $$02 = 0;
  } else {
   $$0 = $size;$$01 = $buf;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  HEAP32[$vararg_buffer>>2] = $$01;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $$0;
  $3 = (___syscall183(183,($vararg_buffer|0))|0);
  $4 = (___syscall_ret($3)|0);
  $5 = ($4|0)<(0);
  if ($5) {
   $$02 = 0;
  } else {
   $6 = ($$01|0)==($tmp|0);
   if ($6) {
    $7 = (FUNCTION_TABLE_ii[7 & 63]($tmp)|0);
    $$02 = $7;
   } else {
    $$02 = $$01;
   }
  }
 }
 STACKTOP = sp;return ($$02|0);
}
function _getegid() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (___syscall202(202,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _geteuid() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (___syscall201(201,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _getgid() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (___syscall200(200,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _getgroups($count,$list) {
 $count = $count|0;
 $list = $list|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $count;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $list;
 $0 = (___syscall205(205,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _gethostname($name,$len) {
 $name = $name|0;
 $len = $len|0;
 var $$01 = 0, $$len = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$02 = 0, $uts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uts = sp;
 $0 = (_uname($uts)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = ($len>>>0)>(65);
  $$len = $2 ? 65 : $len;
  $3 = ($$len|0)==(0);
  L3: do {
   if ($3) {
    $i$0$lcssa = 0;
   } else {
    $i$02 = 0;
    while(1) {
     $4 = (((($uts)) + 65|0) + ($i$02)|0);
     $5 = HEAP8[$4>>0]|0;
     $6 = (($name) + ($i$02)|0);
     HEAP8[$6>>0] = $5;
     $7 = ($5<<24>>24)==(0);
     if ($7) {
      $i$0$lcssa = $i$02;
      break L3;
     }
     $8 = (($i$02) + 1)|0;
     $9 = ($8>>>0)<($$len>>>0);
     if ($9) {
      $i$02 = $8;
     } else {
      $i$0$lcssa = $8;
      break;
     }
    }
   }
  } while(0);
  $10 = ($i$0$lcssa|0)==($$len|0);
  if ($10) {
   $11 = (($$len) + -1)|0;
   $12 = (($name) + ($11)|0);
   HEAP8[$12>>0] = 0;
   $$01 = 0;
  } else {
   $$01 = 0;
  }
 } else {
  $$01 = -1;
 }
 STACKTOP = sp;return ($$01|0);
}
function _getlogin() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_getenv((177028|0))|0);
 return ($0|0);
}
function _getlogin_r($name,$size) {
 $name = $name|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_getlogin()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 6;
 } else {
  $2 = (_strlen($0)|0);
  $3 = ($2>>>0)<($size>>>0);
  if ($3) {
   (_strcpy($name,$0)|0);
   $$0 = 0;
  } else {
   $$0 = 34;
  }
 }
 return ($$0|0);
}
function _getpgid($pid) {
 $pid = $pid|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $pid;
 $0 = (___syscall132(132,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _getpgrp() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (___syscall65(65,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _getpid() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (___syscall20(20,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _getppid() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (___syscall64(64,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _getsid($pid) {
 $pid = $pid|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $pid;
 $0 = (___syscall147(147,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _getuid() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (___syscall199(199,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _isatty($fd) {
 $fd = $fd|0;
 var $0 = 0, $1 = 0, $2 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp;
 $0 = (_tcgetattr($fd,$t)|0);
 $1 = ($0|0)==(0);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _lchown($path,$uid,$gid) {
 $path = $path|0;
 $uid = $uid|0;
 $gid = $gid|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $uid;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $gid;
 $0 = (___syscall198(198,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _link($existing,$new) {
 $existing = $existing|0;
 $new = $new|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $existing;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $new;
 $0 = (___syscall9(9,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _linkat($fd1,$existing,$fd2,$new,$flag) {
 $fd1 = $fd1|0;
 $existing = $existing|0;
 $fd2 = $fd2|0;
 $new = $new|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $existing;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $fd2;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $new;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $flag;
 $0 = (___syscall303(303,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _lseek($fd,$offset,$whence) {
 $fd = $fd|0;
 $offset = $offset|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $result = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $result = sp + 20|0;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $offset;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $result;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $0 = (___syscall140(140,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 $2 = ($1|0)!=(0);
 $3 = HEAP32[$result>>2]|0;
 $4 = $2 ? -1 : $3;
 STACKTOP = sp;return ($4|0);
}
function _nice($inc) {
 $inc = $inc|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $inc;
 $0 = (___syscall34(34,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _pause() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (___syscall29(29,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _pipe($fd) {
 $fd = $fd|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $0 = (___syscall42(42,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _pipe2($fd,$flag) {
 $fd = $fd|0;
 $flag = $flag|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0;
 var $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($flag|0)==(0);
 do {
  if ($0) {
   $1 = (_pipe($fd)|0);
   $$0 = $1;
  } else {
   HEAP32[$vararg_buffer>>2] = $fd;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $flag;
   $2 = (___syscall331(331,($vararg_buffer|0))|0);
   $3 = ($2|0)==(-38);
   if (!($3)) {
    $4 = (___syscall_ret($2)|0);
    $$0 = $4;
    break;
   }
   $5 = (_pipe($fd)|0);
   $6 = ($5|0)==(0);
   if ($6) {
    $7 = $flag & 524288;
    $8 = ($7|0)==(0);
    if (!($8)) {
     $9 = HEAP32[$fd>>2]|0;
     HEAP32[$vararg_buffer2>>2] = $9;
     $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
     HEAP32[$vararg_ptr5>>2] = 2;
     $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
     HEAP32[$vararg_ptr6>>2] = 1;
     (___syscall221(221,($vararg_buffer2|0))|0);
     $10 = ((($fd)) + 4|0);
     $11 = HEAP32[$10>>2]|0;
     HEAP32[$vararg_buffer7>>2] = $11;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 2;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = 1;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $12 = $flag & 2048;
    $13 = ($12|0)==(0);
    if ($13) {
     $$0 = 0;
    } else {
     $14 = HEAP32[$fd>>2]|0;
     HEAP32[$vararg_buffer12>>2] = $14;
     $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
     HEAP32[$vararg_ptr15>>2] = 4;
     $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
     HEAP32[$vararg_ptr16>>2] = 2048;
     (___syscall221(221,($vararg_buffer12|0))|0);
     $15 = ((($fd)) + 4|0);
     $16 = HEAP32[$15>>2]|0;
     HEAP32[$vararg_buffer17>>2] = $16;
     $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
     HEAP32[$vararg_ptr20>>2] = 4;
     $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
     HEAP32[$vararg_ptr21>>2] = 2048;
     (___syscall221(221,($vararg_buffer17|0))|0);
     $$0 = 0;
    }
   } else {
    $$0 = $5;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _posix_close($fd,$flags) {
 $fd = $fd|0;
 $flags = $flags|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_close($fd)|0);
 return ($0|0);
}
function _pread($fd,$buf,$size,$ofs) {
 $fd = $fd|0;
 $buf = $buf|0;
 $size = $size|0;
 $ofs = $ofs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($ofs|0)<(0);
 $1 = $0 << 31 >> 31;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $buf;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $size;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 0;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $ofs;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $1;
 $2 = (___syscall180(180,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _preadv($fd,$iov,$count,$ofs) {
 $fd = $fd|0;
 $iov = $iov|0;
 $count = $count|0;
 $ofs = $ofs|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $iov;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $count;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ofs;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = 0;
 $0 = (___syscall333(333,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _pwrite($fd,$buf,$size,$ofs) {
 $fd = $fd|0;
 $buf = $buf|0;
 $size = $size|0;
 $ofs = $ofs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($ofs|0)<(0);
 $1 = $0 << 31 >> 31;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $buf;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $size;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 0;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $ofs;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $1;
 $2 = (___syscall181(181,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _pwritev($fd,$iov,$count,$ofs) {
 $fd = $fd|0;
 $iov = $iov|0;
 $count = $count|0;
 $ofs = $ofs|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $iov;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $count;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ofs;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = 0;
 $0 = (___syscall334(334,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _read($fd,$buf,$count) {
 $fd = $fd|0;
 $buf = $buf|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $buf;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $count;
 $0 = (___syscall3(3,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _readlink($path,$buf,$bufsize) {
 $path = $path|0;
 $buf = $buf|0;
 $bufsize = $bufsize|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $buf;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $bufsize;
 $0 = (___syscall85(85,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _readlinkat($fd,$path,$buf,$bufsize) {
 $fd = $fd|0;
 $path = $path|0;
 $buf = $buf|0;
 $bufsize = $bufsize|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $path;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $buf;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $bufsize;
 $0 = (___syscall305(305,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _readv($fd,$iov,$count) {
 $fd = $fd|0;
 $iov = $iov|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $iov;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $count;
 $0 = (___syscall145(145,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _renameat($oldfd,$old,$newfd,$new) {
 $oldfd = $oldfd|0;
 $old = $old|0;
 $newfd = $newfd|0;
 $new = $new|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $oldfd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $old;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $newfd;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $new;
 $0 = (___syscall302(302,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _rmdir($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $0 = (___syscall40(40,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _setegid($egid) {
 $egid = $egid|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___setxid(210,-1,$egid,-1)|0);
 return ($0|0);
}
function _seteuid($euid) {
 $euid = $euid|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___setxid(208,-1,$euid,-1)|0);
 return ($0|0);
}
function _setgid($gid) {
 $gid = $gid|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___setxid(214,$gid,0,0)|0);
 return ($0|0);
}
function _setpgid($pid,$pgid) {
 $pid = $pid|0;
 $pgid = $pgid|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $pid;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $pgid;
 $0 = (___syscall57(57,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _setpgrp() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_setpgid(0,0)|0);
 return ($0|0);
}
function _setregid($rgid,$egid) {
 $rgid = $rgid|0;
 $egid = $egid|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___setxid(204,$rgid,$egid,0)|0);
 return ($0|0);
}
function _setresgid($rgid,$egid,$sgid) {
 $rgid = $rgid|0;
 $egid = $egid|0;
 $sgid = $sgid|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___setxid(210,$rgid,$egid,$sgid)|0);
 return ($0|0);
}
function _setresuid($ruid,$euid,$suid) {
 $ruid = $ruid|0;
 $euid = $euid|0;
 $suid = $suid|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___setxid(208,$ruid,$euid,$suid)|0);
 return ($0|0);
}
function _setreuid($ruid,$euid) {
 $ruid = $ruid|0;
 $euid = $euid|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___setxid(203,$ruid,$euid,0)|0);
 return ($0|0);
}
function _setsid() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (___syscall66(66,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _setuid($uid) {
 $uid = $uid|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___setxid(213,$uid,0,0)|0);
 return ($0|0);
}
function ___setxid($nr,$id,$eid,$sid) {
 $nr = $nr|0;
 $id = $id|0;
 $eid = $eid|0;
 $sid = $sid|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 HEAP32[$c>>2] = $id;
 $0 = ((($c)) + 4|0);
 HEAP32[$0>>2] = $eid;
 $1 = ((($c)) + 8|0);
 HEAP32[$1>>2] = $sid;
 $2 = ((($c)) + 12|0);
 HEAP32[$2>>2] = $nr;
 $3 = ((($c)) + 16|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($c)) + 20|0);
 HEAP32[$4>>2] = 0;
 switch ($nr|0) {
 case 208: case 203: case 213:  {
  HEAP32[$3>>2] = 1;
  break;
 }
 default: {
 }
 }
 ___synccall(33,$c);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 0;
 } else {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = $5;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _sleep($seconds) {
 $seconds = $seconds|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $tv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tv = sp;
 HEAP32[$tv>>2] = $seconds;
 $0 = ((($tv)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (_nanosleep(($tv|0),($tv|0))|0);
 $2 = ($1|0)==(0);
 $3 = HEAP32[$tv>>2]|0;
 $$0 = $2 ? 0 : $3;
 STACKTOP = sp;return ($$0|0);
}
function _symlink($existing,$new) {
 $existing = $existing|0;
 $new = $new|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $existing;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $new;
 $0 = (___syscall83(83,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _symlinkat($existing,$fd,$new) {
 $existing = $existing|0;
 $fd = $fd|0;
 $new = $new|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $existing;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $fd;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $new;
 $0 = (___syscall304(304,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _sync() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 (___syscall36(36,($vararg_buffer|0))|0);
 STACKTOP = sp;return;
}
function _tcgetpgrp($fd) {
 $fd = $fd|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $pgrp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $pgrp = sp + 4|0;
 HEAP32[$vararg_buffer>>2] = $pgrp;
 $0 = (_ioctl($fd,21519,$vararg_buffer)|0);
 $1 = ($0|0)<(0);
 $2 = HEAP32[$pgrp>>2]|0;
 $$0 = $1 ? -1 : $2;
 STACKTOP = sp;return ($$0|0);
}
function _tcsetpgrp($fd,$pgrp) {
 $fd = $fd|0;
 $pgrp = $pgrp|0;
 var $0 = 0, $pgrp_int = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $pgrp_int = sp + 4|0;
 HEAP32[$pgrp_int>>2] = $pgrp;
 HEAP32[$vararg_buffer>>2] = $pgrp_int;
 $0 = (_ioctl($fd,21520,$vararg_buffer)|0);
 STACKTOP = sp;return ($0|0);
}
function _truncate($path,$length) {
 $path = $path|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($length|0)<(0);
 $1 = $0 << 31 >> 31;
 HEAP32[$vararg_buffer>>2] = $path;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $length;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $1;
 $2 = (___syscall193(193,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _ttyname($fd) {
 $fd = $fd|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ttyname_r($fd,177036,32)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 177036;
 } else {
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _ttyname_r($fd,$name,$size) {
 $fd = $fd|0;
 $name = $name|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $procname = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $procname = sp;
 $0 = (_isatty($fd)|0);
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $$0 = 25;
  } else {
   ___procfdname($procname,$fd);
   $2 = (_readlink($procname,$name,$size)|0);
   $3 = ($2|0)<(0);
   if ($3) {
    $4 = (___errno_location()|0);
    $5 = HEAP32[$4>>2]|0;
    $$0 = $5;
    break;
   }
   $6 = ($2|0)==($size|0);
   if ($6) {
    $$0 = 34;
   } else {
    $7 = (($name) + ($2)|0);
    HEAP8[$7>>0] = 0;
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ualarm($value,$interval) {
 $value = $value|0;
 $interval = $interval|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $it = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $it = sp;
 HEAP32[$it>>2] = 0;
 $0 = ((($it)) + 4|0);
 HEAP32[$0>>2] = $interval;
 $1 = ((($it)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($it)) + 12|0);
 HEAP32[$2>>2] = $value;
 (_setitimer(0,($it|0),($it|0))|0);
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3*1000000)|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = (($4) + ($5))|0;
 STACKTOP = sp;return ($6|0);
}
function _unlink($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $0 = (___syscall10(10,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _unlinkat($fd,$path,$flag) {
 $fd = $fd|0;
 $path = $path|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $path;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $flag;
 $0 = (___syscall301(301,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _write($fd,$buf,$count) {
 $fd = $fd|0;
 $buf = $buf|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $buf;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $count;
 $0 = (___syscall4(4,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _writev($fd,$iov,$count) {
 $fd = $fd|0;
 $iov = $iov|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $iov;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $count;
 $0 = (___syscall146(146,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function __exit($status) {
 $status = $status|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __Exit(($status|0));
 // unreachable;
}
function _BF_crypt($key,$setting,$output,$min) {
 $key = $key|0;
 $setting = $setting|0;
 $output = $output|0;
 $min = $min|0;
 var $$0 = 0, $$0$i3 = 0, $$01$i = 0, $$lcssa = 0, $$lcssa69 = 0, $$lcssa72 = 0, $$lcssa74 = 0, $$lcssa76 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $LR = 0, $count$0 = 0, $data = 0, $dptr$0$i = 0, $dptr$0$i2 = 0;
 var $i$023 = 0, $i$124 = 0, $i$222 = 0, $ptr$025 = 0, $sptr$0$i = 0, $sptr$0$i1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp + 8|0;
 $LR = sp;
 $0 = HEAP8[$setting>>0]|0;
 $1 = ($0<<24>>24)==(36);
 L1: do {
  if ($1) {
   $2 = ((($setting)) + 1|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(50);
   if ($4) {
    $5 = ((($setting)) + 2|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = $6 << 24 >> 24;
    $8 = (($7) + -97)|0;
    $9 = ($8>>>0)>(25);
    if ($9) {
     $$0 = 0;
    } else {
     $10 = 25165825 >>> $8;
     $11 = $10 & 1;
     $12 = ($11|0)==(0);
     if ($12) {
      $$0 = 0;
     } else {
      $13 = ((($setting)) + 3|0);
      $14 = HEAP8[$13>>0]|0;
      $15 = ($14<<24>>24)==(36);
      if ($15) {
       $16 = ((($setting)) + 4|0);
       $17 = HEAP8[$16>>0]|0;
       $18 = $17 << 24 >> 24;
       $19 = (($18) + -48)|0;
       $20 = ($19>>>0)>(1);
       if ($20) {
        $$0 = 0;
       } else {
        $21 = ((($setting)) + 5|0);
        $22 = HEAP8[$21>>0]|0;
        $23 = $22 << 24 >> 24;
        $24 = (($23) + -48)|0;
        $25 = ($24>>>0)>(9);
        if ($25) {
         $$0 = 0;
        } else {
         $26 = ((($setting)) + 6|0);
         $27 = HEAP8[$26>>0]|0;
         $28 = ($27<<24>>24)==(36);
         if ($28) {
          $29 = ($19*10)|0;
          $30 = (($24) + ($29))|0;
          $31 = 1 << $30;
          $32 = ($31>>>0)<($min>>>0);
          if ($32) {
           $$0 = 0;
          } else {
           $33 = ((($data)) + 4240|0);
           $34 = ((($setting)) + 7|0);
           $35 = ((($data)) + 4256|0);
           $dptr$0$i = $33;$sptr$0$i = $34;
           while(1) {
            $36 = ((($sptr$0$i)) + 1|0);
            $37 = HEAP8[$sptr$0$i>>0]|0;
            $38 = $37&255;
            $39 = (($38) + -32)|0;
            $40 = ($39>>>0)>(95);
            if ($40) {
             $$0 = 0;
             break L1;
            }
            $41 = (180519 + ($39)|0);
            $42 = HEAP8[$41>>0]|0;
            $43 = $42&255;
            $44 = ($42&255)>(63);
            if ($44) {
             $$0 = 0;
             break L1;
            }
            $45 = ((($sptr$0$i)) + 2|0);
            $46 = HEAP8[$36>>0]|0;
            $47 = $46&255;
            $48 = (($47) + -32)|0;
            $49 = ($48>>>0)>(95);
            if ($49) {
             $$0 = 0;
             break L1;
            }
            $50 = (180519 + ($48)|0);
            $51 = HEAP8[$50>>0]|0;
            $52 = $51&255;
            $53 = ($51&255)>(63);
            if ($53) {
             $$0 = 0;
             break L1;
            }
            $54 = $43 << 2;
            $55 = $52 >>> 4;
            $56 = $55 & 3;
            $57 = $56 | $54;
            $58 = $57&255;
            $59 = ((($dptr$0$i)) + 1|0);
            HEAP8[$dptr$0$i>>0] = $58;
            $60 = ($59>>>0)<($35>>>0);
            if (!($60)) {
             break;
            }
            $61 = ((($sptr$0$i)) + 3|0);
            $62 = HEAP8[$45>>0]|0;
            $63 = $62&255;
            $64 = (($63) + -32)|0;
            $65 = ($64>>>0)>(95);
            if ($65) {
             $$0 = 0;
             break L1;
            }
            $66 = (180519 + ($64)|0);
            $67 = HEAP8[$66>>0]|0;
            $68 = $67&255;
            $69 = ($67&255)>(63);
            if ($69) {
             $$0 = 0;
             break L1;
            }
            $70 = $52 << 4;
            $71 = $68 >>> 2;
            $72 = $71 & 15;
            $73 = $72 | $70;
            $74 = $73&255;
            $75 = ((($dptr$0$i)) + 2|0);
            HEAP8[$59>>0] = $74;
            $76 = ($75>>>0)<($35>>>0);
            if (!($76)) {
             break;
            }
            $77 = ((($sptr$0$i)) + 4|0);
            $78 = HEAP8[$61>>0]|0;
            $79 = $78&255;
            $80 = (($79) + -32)|0;
            $81 = ($80>>>0)>(95);
            if ($81) {
             $$0 = 0;
             break L1;
            }
            $82 = (180519 + ($80)|0);
            $83 = HEAP8[$82>>0]|0;
            $84 = ($83&255)>(63);
            if ($84) {
             $$0 = 0;
             break L1;
            }
            $85 = $83&255;
            $86 = $68 << 6;
            $87 = $85 | $86;
            $88 = $87&255;
            $89 = ((($dptr$0$i)) + 3|0);
            HEAP8[$75>>0] = $88;
            $90 = ($89>>>0)<($35>>>0);
            if ($90) {
             $dptr$0$i = $89;$sptr$0$i = $77;
            } else {
             break;
            }
           }
           $91 = HEAP32[$33>>2]|0;
           $92 = $91 << 16;
           $93 = $91 >>> 16;
           $94 = $92 | $93;
           $95 = $94 << 8;
           $96 = $95 & -16711936;
           $97 = $94 >>> 8;
           $98 = $97 & 16711935;
           $99 = $96 | $98;
           $100 = ((($data)) + 4244|0);
           HEAP32[$33>>2] = $99;
           $101 = HEAP32[$100>>2]|0;
           $102 = $101 << 16;
           $103 = $101 >>> 16;
           $104 = $102 | $103;
           $105 = $104 << 8;
           $106 = $105 & -16711936;
           $107 = $104 >>> 8;
           $108 = $107 & 16711935;
           $109 = $106 | $108;
           $110 = ((($data)) + 4248|0);
           HEAP32[$100>>2] = $109;
           $111 = HEAP32[$110>>2]|0;
           $112 = $111 << 16;
           $113 = $111 >>> 16;
           $114 = $112 | $113;
           $115 = $114 << 8;
           $116 = $115 & -16711936;
           $117 = $114 >>> 8;
           $118 = $117 & 16711935;
           $119 = $116 | $118;
           $120 = ((($data)) + 4252|0);
           HEAP32[$110>>2] = $119;
           $121 = HEAP32[$120>>2]|0;
           $122 = $121 << 16;
           $123 = $121 >>> 16;
           $124 = $122 | $123;
           $125 = $124 << 8;
           $126 = $125 & -16711936;
           $127 = $124 >>> 8;
           $128 = $127 & 16711935;
           $129 = $126 | $128;
           HEAP32[$120>>2] = $129;
           $130 = ((($data)) + 4168|0);
           $131 = HEAP8[$5>>0]|0;
           $132 = $131 << 24 >> 24;
           $133 = (($132) + -97)|0;
           $134 = (180615 + ($133)|0);
           $135 = HEAP8[$134>>0]|0;
           _BF_set_key($key,$130,$data,$135);
           $136 = ((($data)) + 72|0);
           _memcpy(($136|0),((20640)|0),4096)|0;
           $137 = HEAP32[$33>>2]|0;
           $138 = ((($data)) + 4244|0);
           $139 = HEAP32[$138>>2]|0;
           $140 = (_BF_encrypt($data,$137,$139,$data,$data)|0);
           $141 = ((($data)) + 8|0);
           $142 = ((($data)) + 4248|0);
           $143 = ((($data)) + 4252|0);
           $150 = $140;$153 = $141;$ptr$025 = $data;
           while(1) {
            $146 = ((($ptr$025)) + 4|0);
            $147 = HEAP32[$146>>2]|0;
            $148 = HEAP32[$142>>2]|0;
            $149 = $148 ^ $150;
            $151 = HEAP32[$143>>2]|0;
            $152 = $151 ^ $147;
            $154 = (_BF_encrypt($data,$149,$152,$153,$153)|0);
            $155 = ((($ptr$025)) + 12|0);
            $156 = HEAP32[$155>>2]|0;
            $157 = ((($ptr$025)) + 16|0);
            $158 = HEAP32[$33>>2]|0;
            $159 = $158 ^ $154;
            $160 = HEAP32[$138>>2]|0;
            $161 = $160 ^ $156;
            $162 = (_BF_encrypt($data,$159,$161,$157,$157)|0);
            $163 = ((($ptr$025)) + 24|0);
            $164 = ($163>>>0)<($130>>>0);
            if ($164) {
             $150 = $162;$153 = $163;$ptr$025 = $157;
            } else {
             break;
            }
           }
           $144 = ((($data)) + 64|0);
           $145 = ((($data)) + 68|0);
           $count$0 = $31;
           while(1) {
            $i$023 = 0;
            while(1) {
             $165 = (((($data)) + 4168|0) + ($i$023<<2)|0);
             $166 = HEAP32[$165>>2]|0;
             $167 = (($data) + ($i$023<<2)|0);
             $168 = HEAP32[$167>>2]|0;
             $169 = $168 ^ $166;
             HEAP32[$167>>2] = $169;
             $170 = $i$023 | 1;
             $171 = (((($data)) + 4168|0) + ($170<<2)|0);
             $172 = HEAP32[$171>>2]|0;
             $173 = (($data) + ($170<<2)|0);
             $174 = HEAP32[$173>>2]|0;
             $175 = $174 ^ $172;
             HEAP32[$173>>2] = $175;
             $176 = (($i$023) + 2)|0;
             $177 = ($176|0)<(18);
             if ($177) {
              $i$023 = $176;
             } else {
              break;
             }
            }
            (_BF_encrypt($data,0,0,$data,$130)|0);
            $178 = HEAP32[$33>>2]|0;
            $179 = HEAP32[$138>>2]|0;
            $180 = HEAP32[$142>>2]|0;
            $181 = HEAP32[$143>>2]|0;
            $i$124 = 0;
            while(1) {
             $182 = (($data) + ($i$124<<2)|0);
             $183 = HEAP32[$182>>2]|0;
             $184 = $183 ^ $178;
             HEAP32[$182>>2] = $184;
             $185 = $i$124 | 1;
             $186 = (($data) + ($185<<2)|0);
             $187 = HEAP32[$186>>2]|0;
             $188 = $187 ^ $179;
             HEAP32[$186>>2] = $188;
             $189 = $i$124 | 2;
             $190 = (($data) + ($189<<2)|0);
             $191 = HEAP32[$190>>2]|0;
             $192 = $191 ^ $180;
             HEAP32[$190>>2] = $192;
             $193 = $i$124 | 3;
             $194 = (($data) + ($193<<2)|0);
             $195 = HEAP32[$194>>2]|0;
             $196 = $195 ^ $181;
             HEAP32[$194>>2] = $196;
             $197 = (($i$124) + 4)|0;
             $198 = ($197|0)<(16);
             if ($198) {
              $i$124 = $197;
             } else {
              break;
             }
            }
            $199 = HEAP32[$144>>2]|0;
            $200 = $199 ^ $178;
            HEAP32[$144>>2] = $200;
            $201 = HEAP32[$145>>2]|0;
            $202 = $201 ^ $179;
            HEAP32[$145>>2] = $202;
            (_BF_encrypt($data,0,0,$data,$130)|0);
            $203 = (($count$0) + -1)|0;
            $204 = ($203|0)==(0);
            if ($204) {
             break;
            } else {
             $count$0 = $203;
            }
           }
           $205 = ((($LR)) + 4|0);
           $i$222 = 0;
           while(1) {
            $206 = (24736 + ($i$222<<2)|0);
            $207 = HEAP32[$206>>2]|0;
            $208 = $i$222 | 1;
            $209 = (24736 + ($208<<2)|0);
            $210 = HEAP32[$209>>2]|0;
            HEAP32[$205>>2] = $210;
            $211 = (_BF_encrypt($data,$207,$210,$LR,$LR)|0);
            $212 = $211;$215 = 63;
            while(1) {
             $$pre = HEAP32[$205>>2]|0;
             $213 = (_BF_encrypt($data,$212,$$pre,$LR,$LR)|0);
             $214 = (($215) + -1)|0;
             $216 = ($214|0)==(0);
             if ($216) {
              $$lcssa76 = $213;
              break;
             } else {
              $212 = $213;$215 = $214;
             }
            }
            $217 = (((($data)) + 4240|0) + ($i$222<<2)|0);
            HEAP32[$217>>2] = $$lcssa76;
            $218 = HEAP32[$205>>2]|0;
            $219 = (((($data)) + 4240|0) + ($208<<2)|0);
            HEAP32[$219>>2] = $218;
            $220 = (($i$222) + 2)|0;
            $221 = ($220|0)<(6);
            if ($221) {
             $i$222 = $220;
            } else {
             break;
            }
           }
           dest=$output; src=$setting; stop=dest+28|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
           $222 = ((($setting)) + 28|0);
           $223 = HEAP8[$222>>0]|0;
           $224 = $223 << 24 >> 24;
           $225 = (($224) + -32)|0;
           $226 = (180519 + ($225)|0);
           $227 = HEAP8[$226>>0]|0;
           $228 = $227&255;
           $229 = $228 & 48;
           $230 = (180641 + ($229)|0);
           $231 = HEAP8[$230>>0]|0;
           $232 = ((($output)) + 28|0);
           HEAP8[$232>>0] = $231;
           $$0$i3 = $33;$$01$i = 6;
           while(1) {
            $233 = HEAP32[$$0$i3>>2]|0;
            $234 = $233 << 16;
            $235 = $233 >>> 16;
            $236 = $234 | $235;
            $237 = $236 << 8;
            $238 = $237 & -16711936;
            $239 = $236 >>> 8;
            $240 = $239 & 16711935;
            $241 = $238 | $240;
            $242 = ((($$0$i3)) + 4|0);
            HEAP32[$$0$i3>>2] = $241;
            $243 = (($$01$i) + -1)|0;
            $244 = ($243|0)==(0);
            if ($244) {
             break;
            } else {
             $$0$i3 = $242;$$01$i = $243;
            }
           }
           $245 = ((($output)) + 29|0);
           $246 = ((($33)) + 23|0);
           $dptr$0$i2 = $245;$sptr$0$i1 = $33;
           while(1) {
            $247 = ((($sptr$0$i1)) + 1|0);
            $248 = HEAP8[$sptr$0$i1>>0]|0;
            $249 = $248&255;
            $250 = $249 >>> 2;
            $251 = (180641 + ($250)|0);
            $252 = HEAP8[$251>>0]|0;
            $253 = ((($dptr$0$i2)) + 1|0);
            HEAP8[$dptr$0$i2>>0] = $252;
            $254 = $249 << 4;
            $255 = $254 & 48;
            $256 = ($247>>>0)<($246>>>0);
            if (!($256)) {
             $$lcssa = $253;$$lcssa69 = $255;
             label = 38;
             break;
            }
            $259 = ((($sptr$0$i1)) + 2|0);
            $260 = HEAP8[$247>>0]|0;
            $261 = $260&255;
            $262 = $261 >>> 4;
            $263 = $262 | $255;
            $264 = (180641 + ($263)|0);
            $265 = HEAP8[$264>>0]|0;
            $266 = ((($dptr$0$i2)) + 2|0);
            HEAP8[$253>>0] = $265;
            $267 = $261 << 2;
            $268 = $267 & 60;
            $269 = ($259>>>0)<($246>>>0);
            if (!($269)) {
             $$lcssa72 = $266;$$lcssa74 = $268;
             label = 40;
             break;
            }
            $272 = ((($sptr$0$i1)) + 3|0);
            $273 = HEAP8[$259>>0]|0;
            $274 = $273&255;
            $275 = $274 >>> 6;
            $276 = $275 | $268;
            $277 = (180641 + ($276)|0);
            $278 = HEAP8[$277>>0]|0;
            $279 = ((($dptr$0$i2)) + 3|0);
            HEAP8[$266>>0] = $278;
            $280 = $274 & 63;
            $281 = (180641 + ($280)|0);
            $282 = HEAP8[$281>>0]|0;
            $283 = ((($dptr$0$i2)) + 4|0);
            HEAP8[$279>>0] = $282;
            $284 = ($272>>>0)<($246>>>0);
            if ($284) {
             $dptr$0$i2 = $283;$sptr$0$i1 = $272;
            } else {
             break;
            }
           }
           if ((label|0) == 38) {
            $257 = (180641 + ($$lcssa69)|0);
            $258 = HEAP8[$257>>0]|0;
            HEAP8[$$lcssa>>0] = $258;
           }
           else if ((label|0) == 40) {
            $270 = (180641 + ($$lcssa74)|0);
            $271 = HEAP8[$270>>0]|0;
            HEAP8[$$lcssa72>>0] = $271;
           }
           $285 = ((($output)) + 60|0);
           HEAP8[$285>>0] = 0;
           $$0 = $output;
          }
         } else {
          $$0 = 0;
         }
        }
       }
      } else {
       $$0 = 0;
      }
     }
    }
   } else {
    $$0 = 0;
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _BF_set_key($key,$expanded,$initial,$flags) {
 $key = $key|0;
 $expanded = $expanded|0;
 $initial = $initial|0;
 $flags = $flags|0;
 var $$lcssa = 0, $$lcssa16 = 0, $$lcssa17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $diff$0$masked = 0, $diff$07 = 0, $exitcond = 0, $exitcond9 = 0, $i$04 = 0, $j$01 = 0, $ptr$05 = 0, $ptr$12 = 0, $ptr$2 = 0, $ptr$2$lcssa = 0, $sign$06 = 0, $sign$13 = 0, $sign$2 = 0, $sign$2$lcssa = 0, $sign$2$lcssa$lcssa = 0, $tmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 $0 = $flags&255;
 $1 = $0 & 1;
 $2 = $0 << 15;
 $3 = ((($tmp)) + 4|0);
 $4 = (($tmp) + ($1<<2)|0);
 $diff$07 = 0;$i$04 = 0;$ptr$05 = $key;$sign$06 = 0;
 while(1) {
  HEAP32[$3>>2] = 0;
  HEAP32[$tmp>>2] = 0;
  $11 = 0;$6 = 0;$j$01 = 0;$ptr$12 = $ptr$05;$sign$13 = $sign$06;
  while(1) {
   $5 = $6 << 8;
   HEAP32[$tmp>>2] = $5;
   $7 = HEAP8[$ptr$12>>0]|0;
   $8 = $7&255;
   $9 = $8 | $5;
   HEAP32[$tmp>>2] = $9;
   $10 = $11 << 8;
   HEAP32[$3>>2] = $10;
   $12 = HEAP8[$ptr$12>>0]|0;
   $13 = $12 << 24 >> 24;
   $14 = $13 | $10;
   HEAP32[$3>>2] = $14;
   $15 = ($j$01|0)==(0);
   $16 = $13 & 128;
   $17 = $15 ? 0 : $16;
   $sign$2 = $17 | $sign$13;
   $18 = HEAP8[$ptr$12>>0]|0;
   $19 = ($18<<24>>24)==(0);
   $20 = ((($ptr$12)) + 1|0);
   $ptr$2 = $19 ? $key : $20;
   $21 = (($j$01) + 1)|0;
   $exitcond = ($21|0)==(4);
   if ($exitcond) {
    $$lcssa = $9;$$lcssa16 = $14;$ptr$2$lcssa = $ptr$2;$sign$2$lcssa = $sign$2;
    break;
   } else {
    $11 = $14;$6 = $9;$j$01 = $21;$ptr$12 = $ptr$2;$sign$13 = $sign$2;
   }
  }
  $22 = $$lcssa16 ^ $$lcssa;
  $23 = $22 | $diff$07;
  $24 = HEAP32[$4>>2]|0;
  $25 = (($expanded) + ($i$04<<2)|0);
  HEAP32[$25>>2] = $24;
  $26 = (20568 + ($i$04<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $24 ^ $27;
  $29 = (($initial) + ($i$04<<2)|0);
  HEAP32[$29>>2] = $28;
  $30 = (($i$04) + 1)|0;
  $exitcond9 = ($30|0)==(18);
  if ($exitcond9) {
   $$lcssa17 = $23;$sign$2$lcssa$lcssa = $sign$2$lcssa;
   break;
  } else {
   $diff$07 = $23;$i$04 = $30;$ptr$05 = $ptr$2$lcssa;$sign$06 = $sign$2$lcssa;
  }
 }
 $31 = $2 & 65536;
 $32 = $$lcssa17 >>> 16;
 $diff$0$masked = $$lcssa17 & 65535;
 $33 = $diff$0$masked | $32;
 $34 = $sign$2$lcssa$lcssa << 9;
 $35 = (-65536 - ($33))|0;
 $36 = $31 & $34;
 $37 = $36 & $35;
 $38 = HEAP32[$initial>>2]|0;
 $39 = $38 ^ $37;
 HEAP32[$initial>>2] = $39;
 STACKTOP = sp;return;
}
function __crypt_extended_r_uut($_key,$_setting,$output) {
 $_key = $_key|0;
 $_setting = $_setting|0;
 $output = $output|0;
 var $$$i = 0, $$$i13 = 0, $$$i17 = 0, $$$i21 = 0, $$$v$i = 0, $$$v$i12 = 0, $$$v$i16 = 0, $$$v$i20 = 0, $$0 = 0, $$lcssa = 0, $$lcssa48 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum2 = 0, $$sum34 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0;
 var $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$037 = 0, $count$1 = 0, $ekey = 0, $exitcond$i = 0, $i$038 = 0, $i$04$i = 0, $i$136 = 0, $key$0$ = 0, $key$0$$lcssa = 0, $key$040 = 0, $key$134 = 0, $key$2$lcssa = 0, $key$233 = 0, $keybuf = 0;
 var $l_out$i = 0, $obit$01$i = 0, $p$0 = 0, $q$039 = 0, $q$132 = 0, $r0 = 0, $r1 = 0, $r_out$i = 0, $retval$0$i = 0, $retval$0$i14 = 0, $retval$0$i18 = 0, $retval$0$i22 = 0, $salt$035 = 0, $salt$1 = 0, $saltbit$02$i = 0, $saltbits$0$$i = 0, $saltbits$0$$i$lcssa = 0, $saltbits$03$i = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $l_out$i = sp + 140|0;
 $r_out$i = sp + 136|0;
 $ekey = sp + 8|0;
 $keybuf = sp + 144|0;
 $r0 = sp + 4|0;
 $r1 = sp;
 $0 = ((($keybuf)) + 7|0);
 $key$040 = $_key;$q$039 = $keybuf;
 while(1) {
  $1 = HEAP8[$key$040>>0]|0;
  $2 = $1&255;
  $3 = $2 << 1;
  $4 = $3&255;
  $5 = ((($q$039)) + 1|0);
  HEAP8[$q$039>>0] = $4;
  $6 = HEAP8[$key$040>>0]|0;
  $7 = ($6<<24>>24)==(0);
  $8 = ((($key$040)) + 1|0);
  $key$0$ = $7 ? $key$040 : $8;
  $9 = ($5>>>0)>($0>>>0);
  if ($9) {
   $key$0$$lcssa = $key$0$;
   break;
  } else {
   $key$040 = $key$0$;$q$039 = $5;
  }
 }
 ___des_setkey($keybuf,$ekey);
 $10 = HEAP8[$_setting>>0]|0;
 L4: do {
  switch ($10<<24>>24) {
  case 95:  {
   $count$037 = 0;$i$038 = 1;
   while(1) {
    $11 = (($_setting) + ($i$038)|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12&255;
    $14 = ($12<<24>>24)>(-1);
    $15 = $13 | -256;
    $16 = $14 ? $13 : $15;
    $17 = (($16) + -46)|0;
    $18 = ($16|0)>(64);
    if ($18) {
     $19 = ($16|0)>(96);
     $$$v$i = $19 ? -59 : -53;
     $$$i = (($$$v$i) + ($16))|0;
     $retval$0$i = $$$i;
    } else {
     $retval$0$i = $17;
    }
    $20 = $retval$0$i & 63;
    $21 = (180454 + ($20)|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ($22<<24>>24)==($12<<24>>24);
    if (!($23)) {
     $$0 = 0;
     break L4;
    }
    $24 = ($i$038*6)|0;
    $25 = (($24) + -6)|0;
    $26 = $20 << $25;
    $27 = $26 | $count$037;
    $28 = (($i$038) + 1)|0;
    $29 = ($28>>>0)<(5);
    if ($29) {
     $count$037 = $27;$i$038 = $28;
    } else {
     $$lcssa48 = $27;
     break;
    }
   }
   $30 = ($$lcssa48|0)==(0);
   if ($30) {
    $$0 = 0;
   } else {
    $i$136 = 5;$salt$035 = 0;
    while(1) {
     $39 = (($_setting) + ($i$136)|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = $40&255;
     $42 = ($40<<24>>24)>(-1);
     $43 = $41 | -256;
     $44 = $42 ? $41 : $43;
     $45 = (($44) + -46)|0;
     $46 = ($44|0)>(64);
     if ($46) {
      $47 = ($44|0)>(96);
      $$$v$i12 = $47 ? -59 : -53;
      $$$i13 = (($$$v$i12) + ($44))|0;
      $retval$0$i14 = $$$i13;
     } else {
      $retval$0$i14 = $45;
     }
     $48 = $retval$0$i14 & 63;
     $49 = (180454 + ($48)|0);
     $50 = HEAP8[$49>>0]|0;
     $51 = ($50<<24>>24)==($40<<24>>24);
     if (!($51)) {
      $$0 = 0;
      break L4;
     }
     $52 = ($i$136*6)|0;
     $53 = (($52) + -30)|0;
     $54 = $48 << $53;
     $55 = $54 | $salt$035;
     $56 = (($i$136) + 1)|0;
     $57 = ($56>>>0)<(9);
     if ($57) {
      $i$136 = $56;$salt$035 = $55;
     } else {
      $$lcssa = $55;
      break;
     }
    }
    $31 = HEAP8[$key$0$$lcssa>>0]|0;
    $32 = ($31<<24>>24)==(0);
    if (!($32)) {
     $33 = ((($keybuf)) + 3|0);
     $34 = ((($keybuf)) + 2|0);
     $35 = ((($keybuf)) + 1|0);
     $36 = ((($keybuf)) + 6|0);
     $37 = ((($keybuf)) + 5|0);
     $38 = ((($keybuf)) + 4|0);
     $key$134 = $key$0$$lcssa;
     while(1) {
      $58 = HEAP8[$33>>0]|0;
      $59 = $58&255;
      $60 = HEAP8[$34>>0]|0;
      $61 = $60&255;
      $62 = $61 << 8;
      $63 = $62 | $59;
      $64 = HEAP8[$35>>0]|0;
      $65 = $64&255;
      $66 = $65 << 16;
      $67 = $63 | $66;
      $68 = HEAP8[$keybuf>>0]|0;
      $69 = $68&255;
      $70 = $69 << 24;
      $71 = $67 | $70;
      $72 = HEAP8[$0>>0]|0;
      $73 = $72&255;
      $74 = HEAP8[$36>>0]|0;
      $75 = $74&255;
      $76 = $75 << 8;
      $77 = $76 | $73;
      $78 = HEAP8[$37>>0]|0;
      $79 = $78&255;
      $80 = $79 << 16;
      $81 = $77 | $80;
      $82 = HEAP8[$38>>0]|0;
      $83 = $82&255;
      $84 = $83 << 24;
      $85 = $81 | $84;
      ___do_des($71,$85,$l_out$i,$r_out$i,1,0,$ekey);
      $86 = HEAP32[$l_out$i>>2]|0;
      $87 = $86 >>> 24;
      $88 = $87&255;
      HEAP8[$keybuf>>0] = $88;
      $89 = $86 >>> 16;
      $90 = $89&255;
      HEAP8[$35>>0] = $90;
      $91 = $86 >>> 8;
      $92 = $91&255;
      HEAP8[$34>>0] = $92;
      $93 = $86&255;
      HEAP8[$33>>0] = $93;
      $94 = HEAP32[$r_out$i>>2]|0;
      $95 = $94 >>> 24;
      $96 = $95&255;
      HEAP8[$38>>0] = $96;
      $97 = $94 >>> 16;
      $98 = $97&255;
      HEAP8[$37>>0] = $98;
      $99 = $94 >>> 8;
      $100 = $99&255;
      HEAP8[$36>>0] = $100;
      $101 = $94&255;
      HEAP8[$0>>0] = $101;
      $key$233 = $key$134;$q$132 = $keybuf;
      while(1) {
       $102 = HEAP8[$key$233>>0]|0;
       $103 = ($102<<24>>24)==(0);
       if ($103) {
        $key$2$lcssa = $key$233;
        break;
       }
       $104 = $102&255;
       $105 = ((($key$233)) + 1|0);
       $106 = $104 << 1;
       $107 = ((($q$132)) + 1|0);
       $108 = HEAP8[$q$132>>0]|0;
       $109 = $108&255;
       $110 = $109 ^ $106;
       $111 = $110&255;
       HEAP8[$q$132>>0] = $111;
       $112 = ($107>>>0)>($0>>>0);
       if ($112) {
        $key$2$lcssa = $105;
        break;
       } else {
        $key$233 = $105;$q$132 = $107;
       }
      }
      ___des_setkey($keybuf,$ekey);
      $113 = HEAP8[$key$2$lcssa>>0]|0;
      $114 = ($113<<24>>24)==(0);
      if ($114) {
       break;
      } else {
       $key$134 = $key$2$lcssa;
      }
     }
    }
    dest=$output; src=$_setting; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $115 = ((($output)) + 9|0);
    HEAP8[$115>>0] = 0;
    $150 = 9;$count$1 = $$lcssa48;$p$0 = $115;$salt$1 = $$lcssa;
    label = 26;
   }
   break;
  }
  case 58: case 10: case 0:  {
   $$0 = 0;
   break;
  }
  default: {
   $116 = ((($_setting)) + 1|0);
   $117 = HEAP8[$116>>0]|0;
   switch ($117<<24>>24) {
   case 58: case 10: case 0:  {
    $$0 = 0;
    break L4;
    break;
   }
   default: {
   }
   }
   $118 = $117&255;
   $119 = ($117<<24>>24)>(-1);
   $120 = $118 | -256;
   $121 = $119 ? $118 : $120;
   $122 = (($121) + -46)|0;
   $123 = ($121|0)>(64);
   if ($123) {
    $124 = ($121|0)>(96);
    $$$v$i20 = $124 ? -59 : -53;
    $$$i21 = (($$$v$i20) + ($121))|0;
    $retval$0$i22 = $$$i21;
   } else {
    $retval$0$i22 = $122;
   }
   $125 = $retval$0$i22 << 6;
   $126 = $125 & 4032;
   $127 = $10&255;
   $128 = ($10<<24>>24)>(-1);
   $129 = $127 | -256;
   $130 = $128 ? $127 : $129;
   $131 = (($130) + -46)|0;
   $132 = ($130|0)>(64);
   if ($132) {
    $133 = ($130|0)>(96);
    $$$v$i16 = $133 ? -59 : -53;
    $$$i17 = (($$$v$i16) + ($130))|0;
    $retval$0$i18 = $$$i17;
   } else {
    $retval$0$i18 = $131;
   }
   $134 = $retval$0$i18 & 63;
   $135 = $134 | $126;
   HEAP8[$output>>0] = $10;
   $136 = HEAP8[$116>>0]|0;
   $137 = ((($output)) + 1|0);
   HEAP8[$137>>0] = $136;
   $138 = ((($output)) + 2|0);
   $150 = 2;$count$1 = 25;$p$0 = $138;$salt$1 = $135;
   label = 26;
  }
  }
 } while(0);
 if ((label|0) == 26) {
  $i$04$i = 0;$obit$01$i = 8388608;$saltbit$02$i = 1;$saltbits$03$i = 0;
  while(1) {
   $139 = $saltbit$02$i & $salt$1;
   $140 = ($139|0)==(0);
   $141 = $140 ? 0 : $obit$01$i;
   $saltbits$0$$i = $141 | $saltbits$03$i;
   $142 = $saltbit$02$i << 1;
   $143 = $obit$01$i >>> 1;
   $144 = (($i$04$i) + 1)|0;
   $exitcond$i = ($144|0)==(24);
   if ($exitcond$i) {
    $saltbits$0$$i$lcssa = $saltbits$0$$i;
    break;
   } else {
    $i$04$i = $144;$obit$01$i = $143;$saltbit$02$i = $142;$saltbits$03$i = $saltbits$0$$i;
   }
  }
  ___do_des(0,0,$r0,$r1,$count$1,$saltbits$0$$i$lcssa,$ekey);
  $145 = HEAP32[$r0>>2]|0;
  $146 = $145 >>> 8;
  $147 = $145 >>> 26;
  $148 = (180454 + ($147)|0);
  $149 = HEAP8[$148>>0]|0;
  $$sum = (($150) + 1)|0;
  $151 = (($output) + ($$sum)|0);
  HEAP8[$p$0>>0] = $149;
  $152 = $145 >>> 20;
  $153 = $152 & 63;
  $154 = (180454 + ($153)|0);
  $155 = HEAP8[$154>>0]|0;
  $$sum1 = (($150) + 2)|0;
  $156 = (($output) + ($$sum1)|0);
  HEAP8[$151>>0] = $155;
  $157 = $145 >>> 14;
  $158 = $157 & 63;
  $159 = (180454 + ($158)|0);
  $160 = HEAP8[$159>>0]|0;
  $$sum2 = (($150) + 3)|0;
  $161 = (($output) + ($$sum2)|0);
  HEAP8[$156>>0] = $160;
  $162 = $146 & 63;
  $163 = (180454 + ($162)|0);
  $164 = HEAP8[$163>>0]|0;
  $$sum34 = $150 | 4;
  $165 = (($output) + ($$sum34)|0);
  HEAP8[$161>>0] = $164;
  $166 = $145 << 16;
  $167 = HEAP32[$r1>>2]|0;
  $168 = $167 >>> 16;
  $169 = $168 | $166;
  $170 = $145 >>> 2;
  $171 = $170 & 63;
  $172 = (180454 + ($171)|0);
  $173 = HEAP8[$172>>0]|0;
  $$sum5 = (($$sum34) + 1)|0;
  $174 = (($output) + ($$sum5)|0);
  HEAP8[$165>>0] = $173;
  $175 = $169 >>> 12;
  $176 = $175 & 63;
  $177 = (180454 + ($176)|0);
  $178 = HEAP8[$177>>0]|0;
  $$sum6 = (($$sum34) + 2)|0;
  $179 = (($output) + ($$sum6)|0);
  HEAP8[$174>>0] = $178;
  $180 = $167 >>> 22;
  $181 = $180 & 63;
  $182 = (180454 + ($181)|0);
  $183 = HEAP8[$182>>0]|0;
  $$sum7 = (($$sum34) + 3)|0;
  $184 = (($output) + ($$sum7)|0);
  HEAP8[$179>>0] = $183;
  $185 = $168 & 63;
  $186 = (180454 + ($185)|0);
  $187 = HEAP8[$186>>0]|0;
  $$sum8 = (($$sum34) + 4)|0;
  $188 = (($output) + ($$sum8)|0);
  HEAP8[$184>>0] = $187;
  $189 = $167 << 2;
  $190 = $167 >>> 10;
  $191 = $190 & 63;
  $192 = (180454 + ($191)|0);
  $193 = HEAP8[$192>>0]|0;
  $$sum9 = (($$sum34) + 5)|0;
  $194 = (($output) + ($$sum9)|0);
  HEAP8[$188>>0] = $193;
  $195 = $167 >>> 4;
  $196 = $195 & 63;
  $197 = (180454 + ($196)|0);
  $198 = HEAP8[$197>>0]|0;
  $$sum10 = (($$sum34) + 6)|0;
  $199 = (($output) + ($$sum10)|0);
  HEAP8[$194>>0] = $198;
  $200 = $189 & 60;
  $201 = (180454 + ($200)|0);
  $202 = HEAP8[$201>>0]|0;
  $$sum11 = (($$sum34) + 7)|0;
  $203 = (($output) + ($$sum11)|0);
  HEAP8[$199>>0] = $202;
  HEAP8[$203>>0] = 0;
  $$0 = $output;
 }
 STACKTOP = sp;return ($$0|0);
}
function _md5crypt($key,$setting,$output) {
 $key = $key|0;
 $setting = $setting|0;
 $output = $output|0;
 var $$0 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctx = 0, $exitcond = 0, $exitcond20 = 0, $i$0$lcssa = 0, $i$1$lcssa = 0, $i$113 = 0, $i$212 = 0, $i$311 = 0, $i$49 = 0;
 var $md = 0, $p$010 = 0, $scevgep = 0, $scevgep$i = 0, $scevgep$i7 = 0, $scevgep$sum = 0, $scevgep19$sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ctx = sp;
 $md = sp + 88|0;
 $0 = (_strnlen($key,30001)|0);
 $1 = ($0>>>0)>(30000);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (_strncmp($setting,180435,3)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   $4 = ((($setting)) + 3|0);
   $5 = HEAP8[$4>>0]|0;
   L4: do {
    switch ($5<<24>>24) {
    case 36: case 0:  {
     $i$0$lcssa = 0;
     break;
    }
    default: {
     $6 = ((($setting)) + 4|0);
     $7 = HEAP8[$6>>0]|0;
     switch ($7<<24>>24) {
     case 36: case 0:  {
      $i$0$lcssa = 1;
      break L4;
      break;
     }
     default: {
     }
     }
     $97 = ((($setting)) + 5|0);
     $98 = HEAP8[$97>>0]|0;
     switch ($98<<24>>24) {
     case 36: case 0:  {
      $i$0$lcssa = 2;
      break L4;
      break;
     }
     default: {
     }
     }
     $99 = ((($setting)) + 6|0);
     $100 = HEAP8[$99>>0]|0;
     switch ($100<<24>>24) {
     case 36: case 0:  {
      $i$0$lcssa = 3;
      break L4;
      break;
     }
     default: {
     }
     }
     $101 = ((($setting)) + 7|0);
     $102 = HEAP8[$101>>0]|0;
     switch ($102<<24>>24) {
     case 36: case 0:  {
      $i$0$lcssa = 4;
      break L4;
      break;
     }
     default: {
     }
     }
     $103 = ((($setting)) + 8|0);
     $104 = HEAP8[$103>>0]|0;
     switch ($104<<24>>24) {
     case 36: case 0:  {
      $i$0$lcssa = 5;
      break L4;
      break;
     }
     default: {
     }
     }
     $105 = ((($setting)) + 9|0);
     $106 = HEAP8[$105>>0]|0;
     switch ($106<<24>>24) {
     case 36: case 0:  {
      $i$0$lcssa = 6;
      break L4;
      break;
     }
     default: {
     }
     }
     $107 = ((($setting)) + 10|0);
     $108 = HEAP8[$107>>0]|0;
     switch ($108<<24>>24) {
     case 36: case 0:  {
      $i$0$lcssa = 7;
      break L4;
      break;
     }
     default: {
     }
     }
     $i$0$lcssa = 8;
    }
    }
   } while(0);
   $8 = $ctx;
   $9 = $8;
   HEAP32[$9>>2] = 0;
   $10 = (($8) + 4)|0;
   $11 = $10;
   HEAP32[$11>>2] = 0;
   $12 = ((($ctx)) + 8|0);
   HEAP32[$12>>2] = 1732584193;
   $13 = ((($ctx)) + 12|0);
   HEAP32[$13>>2] = -271733879;
   $14 = ((($ctx)) + 16|0);
   HEAP32[$14>>2] = -1732584194;
   $15 = ((($ctx)) + 20|0);
   HEAP32[$15>>2] = 271733878;
   _md5_update($ctx,$key,$0);
   _md5_update($ctx,$4,$i$0$lcssa);
   _md5_update($ctx,$key,$0);
   _md5_sum($ctx,$md);
   $16 = $ctx;
   $17 = $16;
   HEAP32[$17>>2] = 0;
   $18 = (($16) + 4)|0;
   $19 = $18;
   HEAP32[$19>>2] = 0;
   HEAP32[$12>>2] = 1732584193;
   HEAP32[$13>>2] = -271733879;
   HEAP32[$14>>2] = -1732584194;
   HEAP32[$15>>2] = 271733878;
   _md5_update($ctx,$key,$0);
   $20 = (($i$0$lcssa) + 3)|0;
   _md5_update($ctx,$setting,$20);
   $21 = ($0>>>0)>(16);
   if ($21) {
    $22 = (($0) + -17)|0;
    $23 = $22 & -16;
    $i$113 = $0;
    while(1) {
     _md5_update($ctx,$md,16);
     $24 = (($i$113) + -16)|0;
     $25 = ($24>>>0)>(16);
     if ($25) {
      $i$113 = $24;
     } else {
      break;
     }
    }
    $26 = (($0) + -16)|0;
    $27 = (($26) - ($23))|0;
    $i$1$lcssa = $27;
   } else {
    $i$1$lcssa = $0;
   }
   _md5_update($ctx,$md,$i$1$lcssa);
   HEAP8[$md>>0] = 0;
   $28 = ($0|0)==(0);
   if (!($28)) {
    $i$212 = $0;
    while(1) {
     $29 = $i$212 & 1;
     $30 = ($29|0)==(0);
     if ($30) {
      _md5_update($ctx,$key,1);
     } else {
      _md5_update($ctx,$md,1);
     }
     $31 = $i$212 >>> 1;
     $32 = ($31|0)==(0);
     if ($32) {
      break;
     } else {
      $i$212 = $31;
     }
    }
   }
   _md5_sum($ctx,$md);
   $i$311 = 0;
   while(1) {
    $33 = $ctx;
    $34 = $33;
    HEAP32[$34>>2] = 0;
    $35 = (($33) + 4)|0;
    $36 = $35;
    HEAP32[$36>>2] = 0;
    HEAP32[$12>>2] = 1732584193;
    HEAP32[$13>>2] = -271733879;
    HEAP32[$14>>2] = -1732584194;
    HEAP32[$15>>2] = 271733878;
    $37 = $i$311 & 1;
    $38 = ($37|0)!=(0);
    if ($38) {
     _md5_update($ctx,$key,$0);
    } else {
     _md5_update($ctx,$md,16);
    }
    $39 = (($i$311>>>0) % 3)&-1;
    $40 = ($39|0)==(0);
    if (!($40)) {
     _md5_update($ctx,$4,$i$0$lcssa);
    }
    $41 = (($i$311>>>0) % 7)&-1;
    $42 = ($41|0)==(0);
    if (!($42)) {
     _md5_update($ctx,$key,$0);
    }
    if ($38) {
     _md5_update($ctx,$md,16);
    } else {
     _md5_update($ctx,$key,$0);
    }
    _md5_sum($ctx,$md);
    $43 = (($i$311) + 1)|0;
    $exitcond20 = ($43|0)==(1000);
    if ($exitcond20) {
     break;
    } else {
     $i$311 = $43;
    }
   }
   _memcpy(($output|0),($setting|0),($20|0))|0;
   $44 = (($output) + ($20)|0);
   $$sum2 = (($i$0$lcssa) + 4)|0;
   $45 = (($output) + ($$sum2)|0);
   HEAP8[$44>>0] = 36;
   $46 = (($i$0$lcssa) + 24)|0;
   $i$49 = 0;$p$010 = $45;
   while(1) {
    $47 = (180439 + (($i$49*3)|0)|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48&255;
    $50 = (($md) + ($49)|0);
    $51 = HEAP8[$50>>0]|0;
    $52 = $51&255;
    $53 = $52 << 16;
    $54 = (((180439 + (($i$49*3)|0)|0)) + 1|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = (($md) + ($56)|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = $58&255;
    $60 = $59 << 8;
    $61 = $60 | $53;
    $62 = (((180439 + (($i$49*3)|0)|0)) + 2|0);
    $63 = HEAP8[$62>>0]|0;
    $64 = $63&255;
    $65 = (($md) + ($64)|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $68 = $60 | $67;
    $69 = $67 & 63;
    $70 = (180454 + ($69)|0);
    $71 = HEAP8[$70>>0]|0;
    $72 = ((($p$010)) + 1|0);
    HEAP8[$p$010>>0] = $71;
    $73 = $68 >>> 6;
    $74 = $73 & 63;
    $75 = (180454 + ($74)|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = ((($p$010)) + 2|0);
    HEAP8[$72>>0] = $76;
    $78 = $61 >>> 12;
    $79 = $78 & 63;
    $80 = (180454 + ($79)|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = ((($p$010)) + 3|0);
    HEAP8[$77>>0] = $81;
    $83 = $52 >>> 2;
    $84 = (180454 + ($83)|0);
    $85 = HEAP8[$84>>0]|0;
    HEAP8[$82>>0] = $85;
    $scevgep$i7 = ((($p$010)) + 4|0);
    $86 = (($i$49) + 1)|0;
    $exitcond = ($86|0)==(5);
    if ($exitcond) {
     break;
    } else {
     $i$49 = $86;$p$010 = $scevgep$i7;
    }
   }
   $scevgep = (($output) + ($46)|0);
   $87 = ((($md)) + 11|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = $89 & 63;
   $91 = (180454 + ($90)|0);
   $92 = HEAP8[$91>>0]|0;
   $scevgep$sum = (($i$0$lcssa) + 25)|0;
   $93 = (($output) + ($scevgep$sum)|0);
   HEAP8[$scevgep>>0] = $92;
   $94 = $89 >>> 6;
   $95 = (180454 + ($94)|0);
   $96 = HEAP8[$95>>0]|0;
   HEAP8[$93>>0] = $96;
   $scevgep19$sum = (($i$0$lcssa) + 26)|0;
   $scevgep$i = (($output) + ($scevgep19$sum)|0);
   HEAP8[$scevgep$i>>0] = 0;
   $$0 = $output;
  } else {
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sha256crypt($key,$setting,$output) {
 $key = $key|0;
 $setting = $setting|0;
 $output = $output|0;
 var $$ = 0, $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctx = 0, $end = 0, $exitcond = 0;
 var $exitcond23 = 0, $exitcond24 = 0, $exitcond25 = 0, $i$0$lcssa = 0, $i$019 = 0, $i$116 = 0, $i$212 = 0, $i$311 = 0, $i$410 = 0, $i$58 = 0, $isdigit = 0, $isdigittmp = 0, $kmd = 0, $md = 0, $p$09 = 0, $r$0 = 0, $r$1 = 0, $rounds = 0, $salt$0 = 0, $scevgep = 0;
 var $scevgep$i = 0, $scevgep$i5 = 0, $scevgep$sum = 0, $scevgep22$sum = 0, $smd = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 112|0;
 $vararg_buffer = sp + 104|0;
 $ctx = sp;
 $md = sp + 216|0;
 $kmd = sp + 184|0;
 $smd = sp + 152|0;
 $rounds = sp + 128|0;
 $end = sp + 124|0;
 dest=$rounds; stop=dest+20|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $0 = (_strnlen($key,257)|0);
 $1 = ($0>>>0)>(256);
 L1: do {
  if ($1) {
   $$0 = 0;
  } else {
   $2 = (_strncmp($setting,180371,3)|0);
   $3 = ($2|0)==(0);
   if ($3) {
    $4 = ((($setting)) + 3|0);
    $5 = (_strncmp($4,180375,7)|0);
    $6 = ($5|0)==(0);
    if ($6) {
     $7 = ((($setting)) + 10|0);
     $8 = HEAP8[$7>>0]|0;
     $9 = $8 << 24 >> 24;
     $isdigittmp = (($9) + -48)|0;
     $isdigit = ($isdigittmp>>>0)<(10);
     if (!($isdigit)) {
      $$0 = 0;
      break;
     }
     $10 = (_strtoul($7,$end,10)|0);
     $11 = HEAP32[$end>>2]|0;
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(36);
     if (!($13)) {
      $$0 = 0;
      break;
     }
     $14 = ((($11)) + 1|0);
     $15 = ($10>>>0)<(1000);
     $16 = ($10>>>0)>(9999999);
     $$ = $16 ? 9999999 : $10;
     $r$0 = $15 ? 1000 : $$;
     HEAP32[$vararg_buffer>>2] = $r$0;
     (_sprintf($rounds,180383,$vararg_buffer)|0);
     $r$1 = $r$0;$salt$0 = $14;
    } else {
     $r$1 = 5000;$salt$0 = $4;
    }
    $i$019 = 0;
    L9: while(1) {
     $17 = (($salt$0) + ($i$019)|0);
     $18 = HEAP8[$17>>0]|0;
     switch ($18<<24>>24) {
     case 58: case 10:  {
      $$0 = 0;
      break L1;
      break;
     }
     case 0: case 36:  {
      $i$0$lcssa = $i$019;
      break L9;
      break;
     }
     default: {
     }
     }
     $19 = (($i$019) + 1)|0;
     $20 = ($19>>>0)<(16);
     if ($20) {
      $i$019 = $19;
     } else {
      $i$0$lcssa = $19;
      break;
     }
    }
    $21 = $ctx;
    $22 = $21;
    HEAP32[$22>>2] = 0;
    $23 = (($21) + 4)|0;
    $24 = $23;
    HEAP32[$24>>2] = 0;
    $25 = ((($ctx)) + 8|0);
    HEAP32[$25>>2] = 1779033703;
    $26 = ((($ctx)) + 12|0);
    HEAP32[$26>>2] = -1150833019;
    $27 = ((($ctx)) + 16|0);
    HEAP32[$27>>2] = 1013904242;
    $28 = ((($ctx)) + 20|0);
    HEAP32[$28>>2] = -1521486534;
    $29 = ((($ctx)) + 24|0);
    HEAP32[$29>>2] = 1359893119;
    $30 = ((($ctx)) + 28|0);
    HEAP32[$30>>2] = -1694144372;
    $31 = ((($ctx)) + 32|0);
    HEAP32[$31>>2] = 528734635;
    $32 = ((($ctx)) + 36|0);
    HEAP32[$32>>2] = 1541459225;
    _sha256_update($ctx,$key,$0);
    _sha256_update($ctx,$salt$0,$i$0$lcssa);
    _sha256_update($ctx,$key,$0);
    _sha256_sum($ctx,$md);
    $33 = $ctx;
    $34 = $33;
    HEAP32[$34>>2] = 0;
    $35 = (($33) + 4)|0;
    $36 = $35;
    HEAP32[$36>>2] = 0;
    HEAP32[$25>>2] = 1779033703;
    HEAP32[$26>>2] = -1150833019;
    HEAP32[$27>>2] = 1013904242;
    HEAP32[$28>>2] = -1521486534;
    HEAP32[$29>>2] = 1359893119;
    HEAP32[$30>>2] = -1694144372;
    HEAP32[$31>>2] = 528734635;
    HEAP32[$32>>2] = 1541459225;
    _sha256_update($ctx,$key,$0);
    _sha256_update($ctx,$salt$0,$i$0$lcssa);
    _hashmd($ctx,$0,$md);
    $37 = ($0|0)==(0);
    if ($37) {
     _sha256_sum($ctx,$md);
     $47 = $ctx;
     $48 = $47;
     HEAP32[$48>>2] = 0;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = 0;
     HEAP32[$25>>2] = 1779033703;
     HEAP32[$26>>2] = -1150833019;
     HEAP32[$27>>2] = 1013904242;
     HEAP32[$28>>2] = -1521486534;
     HEAP32[$29>>2] = 1359893119;
     HEAP32[$30>>2] = -1694144372;
     HEAP32[$31>>2] = 528734635;
     HEAP32[$32>>2] = 1541459225;
    } else {
     $i$116 = $0;
     while(1) {
      $38 = $i$116 & 1;
      $39 = ($38|0)==(0);
      if ($39) {
       _sha256_update($ctx,$key,$0);
      } else {
       _sha256_update($ctx,$md,32);
      }
      $40 = $i$116 >>> 1;
      $41 = ($40|0)==(0);
      if ($41) {
       break;
      } else {
       $i$116 = $40;
      }
     }
     _sha256_sum($ctx,$md);
     $42 = $ctx;
     $43 = $42;
     HEAP32[$43>>2] = 0;
     $44 = (($42) + 4)|0;
     $45 = $44;
     HEAP32[$45>>2] = 0;
     HEAP32[$25>>2] = 1779033703;
     HEAP32[$26>>2] = -1150833019;
     HEAP32[$27>>2] = 1013904242;
     HEAP32[$28>>2] = -1521486534;
     HEAP32[$29>>2] = 1359893119;
     HEAP32[$30>>2] = -1694144372;
     HEAP32[$31>>2] = 528734635;
     HEAP32[$32>>2] = 1541459225;
     if (!($37)) {
      $i$212 = 0;
      while(1) {
       _sha256_update($ctx,$key,$0);
       $46 = (($i$212) + 1)|0;
       $exitcond25 = ($46|0)==($0|0);
       if ($exitcond25) {
        break;
       } else {
        $i$212 = $46;
       }
      }
     }
    }
    _sha256_sum($ctx,$kmd);
    $51 = $ctx;
    $52 = $51;
    HEAP32[$52>>2] = 0;
    $53 = (($51) + 4)|0;
    $54 = $53;
    HEAP32[$54>>2] = 0;
    HEAP32[$25>>2] = 1779033703;
    HEAP32[$26>>2] = -1150833019;
    HEAP32[$27>>2] = 1013904242;
    HEAP32[$28>>2] = -1521486534;
    HEAP32[$29>>2] = 1359893119;
    HEAP32[$30>>2] = -1694144372;
    HEAP32[$31>>2] = 528734635;
    HEAP32[$32>>2] = 1541459225;
    $55 = HEAP8[$md>>0]|0;
    $56 = $55&255;
    $57 = (($56) + 15)|0;
    $i$311 = 0;
    while(1) {
     _sha256_update($ctx,$salt$0,$i$0$lcssa);
     $58 = (($i$311) + 1)|0;
     $exitcond24 = ($i$311|0)==($57|0);
     if ($exitcond24) {
      break;
     } else {
      $i$311 = $58;
     }
    }
    _sha256_sum($ctx,$smd);
    $59 = ($r$1|0)==(0);
    if (!($59)) {
     $i$410 = 0;
     while(1) {
      $60 = $ctx;
      $61 = $60;
      HEAP32[$61>>2] = 0;
      $62 = (($60) + 4)|0;
      $63 = $62;
      HEAP32[$63>>2] = 0;
      HEAP32[$25>>2] = 1779033703;
      HEAP32[$26>>2] = -1150833019;
      HEAP32[$27>>2] = 1013904242;
      HEAP32[$28>>2] = -1521486534;
      HEAP32[$29>>2] = 1359893119;
      HEAP32[$30>>2] = -1694144372;
      HEAP32[$31>>2] = 528734635;
      HEAP32[$32>>2] = 1541459225;
      $64 = $i$410 & 1;
      $65 = ($64|0)!=(0);
      if ($65) {
       _hashmd($ctx,$0,$kmd);
      } else {
       _sha256_update($ctx,$md,32);
      }
      $66 = (($i$410>>>0) % 3)&-1;
      $67 = ($66|0)==(0);
      if (!($67)) {
       _sha256_update($ctx,$smd,$i$0$lcssa);
      }
      $68 = (($i$410>>>0) % 7)&-1;
      $69 = ($68|0)==(0);
      if (!($69)) {
       _hashmd($ctx,$0,$kmd);
      }
      if ($65) {
       _sha256_update($ctx,$md,32);
      } else {
       _hashmd($ctx,$0,$kmd);
      }
      _sha256_sum($ctx,$md);
      $70 = (($i$410) + 1)|0;
      $exitcond23 = ($70|0)==($r$1|0);
      if ($exitcond23) {
       break;
      } else {
       $i$410 = $70;
      }
     }
    }
    HEAP32[$vararg_buffer1>>2] = $rounds;
    $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = $i$0$lcssa;
    $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
    HEAP32[$vararg_ptr5>>2] = $salt$0;
    $71 = (_sprintf($output,180394,$vararg_buffer1)|0);
    $72 = (($output) + ($71)|0);
    $73 = (($71) + 40)|0;
    $i$58 = 0;$p$09 = $72;
    while(1) {
     $74 = (180405 + (($i$58*3)|0)|0);
     $75 = HEAP8[$74>>0]|0;
     $76 = $75&255;
     $77 = (($md) + ($76)|0);
     $78 = HEAP8[$77>>0]|0;
     $79 = $78&255;
     $80 = $79 << 16;
     $81 = (((180405 + (($i$58*3)|0)|0)) + 1|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = (($md) + ($83)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = $86 << 8;
     $88 = $87 | $80;
     $89 = (((180405 + (($i$58*3)|0)|0)) + 2|0);
     $90 = HEAP8[$89>>0]|0;
     $91 = $90&255;
     $92 = (($md) + ($91)|0);
     $93 = HEAP8[$92>>0]|0;
     $94 = $93&255;
     $95 = $87 | $94;
     $96 = $94 & 63;
     $97 = (180454 + ($96)|0);
     $98 = HEAP8[$97>>0]|0;
     $99 = ((($p$09)) + 1|0);
     HEAP8[$p$09>>0] = $98;
     $100 = $95 >>> 6;
     $101 = $100 & 63;
     $102 = (180454 + ($101)|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = ((($p$09)) + 2|0);
     HEAP8[$99>>0] = $103;
     $105 = $88 >>> 12;
     $106 = $105 & 63;
     $107 = (180454 + ($106)|0);
     $108 = HEAP8[$107>>0]|0;
     $109 = ((($p$09)) + 3|0);
     HEAP8[$104>>0] = $108;
     $110 = $79 >>> 2;
     $111 = (180454 + ($110)|0);
     $112 = HEAP8[$111>>0]|0;
     HEAP8[$109>>0] = $112;
     $scevgep$i5 = ((($p$09)) + 4|0);
     $113 = (($i$58) + 1)|0;
     $exitcond = ($113|0)==(10);
     if ($exitcond) {
      break;
     } else {
      $i$58 = $113;$p$09 = $scevgep$i5;
     }
    }
    $scevgep = (($output) + ($73)|0);
    $114 = ((($md)) + 31|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = $115&255;
    $117 = $116 << 8;
    $118 = ((($md)) + 30|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = $119&255;
    $121 = $117 | $120;
    $122 = $120 & 63;
    $123 = (180454 + ($122)|0);
    $124 = HEAP8[$123>>0]|0;
    $scevgep$sum = (($71) + 41)|0;
    $125 = (($output) + ($scevgep$sum)|0);
    HEAP8[$scevgep>>0] = $124;
    $126 = $121 >>> 6;
    $127 = $126 & 63;
    $128 = (180454 + ($127)|0);
    $129 = HEAP8[$128>>0]|0;
    $$sum = (($71) + 42)|0;
    $130 = (($output) + ($$sum)|0);
    HEAP8[$125>>0] = $129;
    $131 = $116 >>> 4;
    $132 = (180454 + ($131)|0);
    $133 = HEAP8[$132>>0]|0;
    HEAP8[$130>>0] = $133;
    $scevgep22$sum = (($71) + 43)|0;
    $scevgep$i = (($output) + ($scevgep22$sum)|0);
    HEAP8[$scevgep$i>>0] = 0;
    $$0 = $output;
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sha512crypt($key,$setting,$output) {
 $key = $key|0;
 $setting = $setting|0;
 $output = $output|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $ctx = 0, $end = 0, $exitcond = 0, $exitcond28 = 0, $exitcond29 = 0, $exitcond30 = 0, $i$023 = 0, $i$023$lcssa = 0, $i$1$lcssa = 0, $i$122 = 0, $i$219 = 0, $i$315 = 0, $i$414 = 0, $i$513 = 0, $i$611 = 0, $isdigit = 0, $isdigittmp = 0, $kmd = 0, $md = 0;
 var $p$012 = 0, $r$0 = 0, $r$1 = 0, $rounds = 0, $salt$0 = 0, $scevgep = 0, $scevgep$i = 0, $scevgep$i6 = 0, $scevgep$sum = 0, $scevgep27$sum = 0, $smd = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 208|0;
 $vararg_buffer = sp + 200|0;
 $ctx = sp;
 $md = sp + 376|0;
 $kmd = sp + 312|0;
 $smd = sp + 248|0;
 $rounds = sp + 224|0;
 $end = sp + 220|0;
 dest=$rounds; stop=dest+20|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $i$023 = 0;
 while(1) {
  $0 = (($key) + ($i$023)|0);
  $1 = HEAP8[$0>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $i$023$lcssa = $i$023;
   label = 4;
   break;
  }
  $3 = (($i$023) + 1)|0;
  $4 = ($3>>>0)<(257);
  if ($4) {
   $i$023 = $3;
  } else {
   $$0 = 0;
   break;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $5 = (_strncmp($setting,180293,3)|0);
   $6 = ($5|0)==(0);
   if ($6) {
    $7 = ((($setting)) + 3|0);
    $8 = (_strncmp($7,180375,7)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     $10 = ((($setting)) + 10|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = $11 << 24 >> 24;
     $isdigittmp = (($12) + -48)|0;
     $isdigit = ($isdigittmp>>>0)<(10);
     if (!($isdigit)) {
      $$0 = 0;
      break;
     }
     $13 = (_strtoul($10,$end,10)|0);
     $14 = HEAP32[$end>>2]|0;
     $15 = HEAP8[$14>>0]|0;
     $16 = ($15<<24>>24)==(36);
     if (!($16)) {
      $$0 = 0;
      break;
     }
     $17 = ((($14)) + 1|0);
     $18 = ($13>>>0)<(1000);
     $19 = ($13>>>0)>(9999999);
     $$ = $19 ? 9999999 : $13;
     $r$0 = $18 ? 1000 : $$;
     HEAP32[$vararg_buffer>>2] = $r$0;
     (_sprintf($rounds,180383,$vararg_buffer)|0);
     $r$1 = $r$0;$salt$0 = $17;
    } else {
     $r$1 = 5000;$salt$0 = $7;
    }
    $i$122 = 0;
    L12: while(1) {
     $20 = (($salt$0) + ($i$122)|0);
     $21 = HEAP8[$20>>0]|0;
     switch ($21<<24>>24) {
     case 58: case 10:  {
      $$0 = 0;
      break L4;
      break;
     }
     case 0: case 36:  {
      $i$1$lcssa = $i$122;
      break L12;
      break;
     }
     default: {
     }
     }
     $22 = (($i$122) + 1)|0;
     $23 = ($22>>>0)<(16);
     if ($23) {
      $i$122 = $22;
     } else {
      $i$1$lcssa = $22;
      break;
     }
    }
    $24 = $ctx;
    $25 = $24;
    HEAP32[$25>>2] = 0;
    $26 = (($24) + 4)|0;
    $27 = $26;
    HEAP32[$27>>2] = 0;
    $28 = ((($ctx)) + 8|0);
    $29 = $28;
    $30 = $29;
    HEAP32[$30>>2] = -205731576;
    $31 = (($29) + 4)|0;
    $32 = $31;
    HEAP32[$32>>2] = 1779033703;
    $33 = ((($ctx)) + 16|0);
    $34 = $33;
    $35 = $34;
    HEAP32[$35>>2] = -2067093701;
    $36 = (($34) + 4)|0;
    $37 = $36;
    HEAP32[$37>>2] = -1150833019;
    $38 = ((($ctx)) + 24|0);
    $39 = $38;
    $40 = $39;
    HEAP32[$40>>2] = -23791573;
    $41 = (($39) + 4)|0;
    $42 = $41;
    HEAP32[$42>>2] = 1013904242;
    $43 = ((($ctx)) + 32|0);
    $44 = $43;
    $45 = $44;
    HEAP32[$45>>2] = 1595750129;
    $46 = (($44) + 4)|0;
    $47 = $46;
    HEAP32[$47>>2] = -1521486534;
    $48 = ((($ctx)) + 40|0);
    $49 = $48;
    $50 = $49;
    HEAP32[$50>>2] = -1377402159;
    $51 = (($49) + 4)|0;
    $52 = $51;
    HEAP32[$52>>2] = 1359893119;
    $53 = ((($ctx)) + 48|0);
    $54 = $53;
    $55 = $54;
    HEAP32[$55>>2] = 725511199;
    $56 = (($54) + 4)|0;
    $57 = $56;
    HEAP32[$57>>2] = -1694144372;
    $58 = ((($ctx)) + 56|0);
    $59 = $58;
    $60 = $59;
    HEAP32[$60>>2] = -79577749;
    $61 = (($59) + 4)|0;
    $62 = $61;
    HEAP32[$62>>2] = 528734635;
    $63 = ((($ctx)) + 64|0);
    $64 = $63;
    $65 = $64;
    HEAP32[$65>>2] = 327033209;
    $66 = (($64) + 4)|0;
    $67 = $66;
    HEAP32[$67>>2] = 1541459225;
    _sha512_update($ctx,$key,$i$023$lcssa);
    _sha512_update($ctx,$salt$0,$i$1$lcssa);
    _sha512_update($ctx,$key,$i$023$lcssa);
    _sha512_sum($ctx,$md);
    $68 = $ctx;
    $69 = $68;
    HEAP32[$69>>2] = 0;
    $70 = (($68) + 4)|0;
    $71 = $70;
    HEAP32[$71>>2] = 0;
    $72 = $28;
    $73 = $72;
    HEAP32[$73>>2] = -205731576;
    $74 = (($72) + 4)|0;
    $75 = $74;
    HEAP32[$75>>2] = 1779033703;
    $76 = $33;
    $77 = $76;
    HEAP32[$77>>2] = -2067093701;
    $78 = (($76) + 4)|0;
    $79 = $78;
    HEAP32[$79>>2] = -1150833019;
    $80 = $38;
    $81 = $80;
    HEAP32[$81>>2] = -23791573;
    $82 = (($80) + 4)|0;
    $83 = $82;
    HEAP32[$83>>2] = 1013904242;
    $84 = $43;
    $85 = $84;
    HEAP32[$85>>2] = 1595750129;
    $86 = (($84) + 4)|0;
    $87 = $86;
    HEAP32[$87>>2] = -1521486534;
    $88 = $48;
    $89 = $88;
    HEAP32[$89>>2] = -1377402159;
    $90 = (($88) + 4)|0;
    $91 = $90;
    HEAP32[$91>>2] = 1359893119;
    $92 = $53;
    $93 = $92;
    HEAP32[$93>>2] = 725511199;
    $94 = (($92) + 4)|0;
    $95 = $94;
    HEAP32[$95>>2] = -1694144372;
    $96 = $58;
    $97 = $96;
    HEAP32[$97>>2] = -79577749;
    $98 = (($96) + 4)|0;
    $99 = $98;
    HEAP32[$99>>2] = 528734635;
    $100 = $63;
    $101 = $100;
    HEAP32[$101>>2] = 327033209;
    $102 = (($100) + 4)|0;
    $103 = $102;
    HEAP32[$103>>2] = 1541459225;
    _sha512_update($ctx,$key,$i$023$lcssa);
    _sha512_update($ctx,$salt$0,$i$1$lcssa);
    _hashmd52($ctx,$i$023$lcssa,$md);
    $104 = ($i$023$lcssa|0)==(0);
    if ($104) {
     _sha512_sum($ctx,$md);
     $146 = $ctx;
     $147 = $146;
     HEAP32[$147>>2] = 0;
     $148 = (($146) + 4)|0;
     $149 = $148;
     HEAP32[$149>>2] = 0;
     $150 = $28;
     $151 = $150;
     HEAP32[$151>>2] = -205731576;
     $152 = (($150) + 4)|0;
     $153 = $152;
     HEAP32[$153>>2] = 1779033703;
     $154 = $33;
     $155 = $154;
     HEAP32[$155>>2] = -2067093701;
     $156 = (($154) + 4)|0;
     $157 = $156;
     HEAP32[$157>>2] = -1150833019;
     $158 = $38;
     $159 = $158;
     HEAP32[$159>>2] = -23791573;
     $160 = (($158) + 4)|0;
     $161 = $160;
     HEAP32[$161>>2] = 1013904242;
     $162 = $43;
     $163 = $162;
     HEAP32[$163>>2] = 1595750129;
     $164 = (($162) + 4)|0;
     $165 = $164;
     HEAP32[$165>>2] = -1521486534;
     $166 = $48;
     $167 = $166;
     HEAP32[$167>>2] = -1377402159;
     $168 = (($166) + 4)|0;
     $169 = $168;
     HEAP32[$169>>2] = 1359893119;
     $170 = $53;
     $171 = $170;
     HEAP32[$171>>2] = 725511199;
     $172 = (($170) + 4)|0;
     $173 = $172;
     HEAP32[$173>>2] = -1694144372;
     $174 = $58;
     $175 = $174;
     HEAP32[$175>>2] = -79577749;
     $176 = (($174) + 4)|0;
     $177 = $176;
     HEAP32[$177>>2] = 528734635;
     $178 = $63;
     $179 = $178;
     HEAP32[$179>>2] = 327033209;
     $180 = (($178) + 4)|0;
     $181 = $180;
     HEAP32[$181>>2] = 1541459225;
    } else {
     $i$219 = $i$023$lcssa;
     while(1) {
      $105 = $i$219 & 1;
      $106 = ($105|0)==(0);
      if ($106) {
       _sha512_update($ctx,$key,$i$023$lcssa);
      } else {
       _sha512_update($ctx,$md,64);
      }
      $107 = $i$219 >>> 1;
      $108 = ($107|0)==(0);
      if ($108) {
       break;
      } else {
       $i$219 = $107;
      }
     }
     _sha512_sum($ctx,$md);
     $109 = $ctx;
     $110 = $109;
     HEAP32[$110>>2] = 0;
     $111 = (($109) + 4)|0;
     $112 = $111;
     HEAP32[$112>>2] = 0;
     $113 = $28;
     $114 = $113;
     HEAP32[$114>>2] = -205731576;
     $115 = (($113) + 4)|0;
     $116 = $115;
     HEAP32[$116>>2] = 1779033703;
     $117 = $33;
     $118 = $117;
     HEAP32[$118>>2] = -2067093701;
     $119 = (($117) + 4)|0;
     $120 = $119;
     HEAP32[$120>>2] = -1150833019;
     $121 = $38;
     $122 = $121;
     HEAP32[$122>>2] = -23791573;
     $123 = (($121) + 4)|0;
     $124 = $123;
     HEAP32[$124>>2] = 1013904242;
     $125 = $43;
     $126 = $125;
     HEAP32[$126>>2] = 1595750129;
     $127 = (($125) + 4)|0;
     $128 = $127;
     HEAP32[$128>>2] = -1521486534;
     $129 = $48;
     $130 = $129;
     HEAP32[$130>>2] = -1377402159;
     $131 = (($129) + 4)|0;
     $132 = $131;
     HEAP32[$132>>2] = 1359893119;
     $133 = $53;
     $134 = $133;
     HEAP32[$134>>2] = 725511199;
     $135 = (($133) + 4)|0;
     $136 = $135;
     HEAP32[$136>>2] = -1694144372;
     $137 = $58;
     $138 = $137;
     HEAP32[$138>>2] = -79577749;
     $139 = (($137) + 4)|0;
     $140 = $139;
     HEAP32[$140>>2] = 528734635;
     $141 = $63;
     $142 = $141;
     HEAP32[$142>>2] = 327033209;
     $143 = (($141) + 4)|0;
     $144 = $143;
     HEAP32[$144>>2] = 1541459225;
     if (!($104)) {
      $i$315 = 0;
      while(1) {
       _sha512_update($ctx,$key,$i$023$lcssa);
       $145 = (($i$315) + 1)|0;
       $exitcond30 = ($145|0)==($i$023$lcssa|0);
       if ($exitcond30) {
        break;
       } else {
        $i$315 = $145;
       }
      }
     }
    }
    _sha512_sum($ctx,$kmd);
    $182 = $ctx;
    $183 = $182;
    HEAP32[$183>>2] = 0;
    $184 = (($182) + 4)|0;
    $185 = $184;
    HEAP32[$185>>2] = 0;
    $186 = $28;
    $187 = $186;
    HEAP32[$187>>2] = -205731576;
    $188 = (($186) + 4)|0;
    $189 = $188;
    HEAP32[$189>>2] = 1779033703;
    $190 = $33;
    $191 = $190;
    HEAP32[$191>>2] = -2067093701;
    $192 = (($190) + 4)|0;
    $193 = $192;
    HEAP32[$193>>2] = -1150833019;
    $194 = $38;
    $195 = $194;
    HEAP32[$195>>2] = -23791573;
    $196 = (($194) + 4)|0;
    $197 = $196;
    HEAP32[$197>>2] = 1013904242;
    $198 = $43;
    $199 = $198;
    HEAP32[$199>>2] = 1595750129;
    $200 = (($198) + 4)|0;
    $201 = $200;
    HEAP32[$201>>2] = -1521486534;
    $202 = $48;
    $203 = $202;
    HEAP32[$203>>2] = -1377402159;
    $204 = (($202) + 4)|0;
    $205 = $204;
    HEAP32[$205>>2] = 1359893119;
    $206 = $53;
    $207 = $206;
    HEAP32[$207>>2] = 725511199;
    $208 = (($206) + 4)|0;
    $209 = $208;
    HEAP32[$209>>2] = -1694144372;
    $210 = $58;
    $211 = $210;
    HEAP32[$211>>2] = -79577749;
    $212 = (($210) + 4)|0;
    $213 = $212;
    HEAP32[$213>>2] = 528734635;
    $214 = $63;
    $215 = $214;
    HEAP32[$215>>2] = 327033209;
    $216 = (($214) + 4)|0;
    $217 = $216;
    HEAP32[$217>>2] = 1541459225;
    $218 = HEAP8[$md>>0]|0;
    $219 = $218&255;
    $220 = (($219) + 15)|0;
    $i$414 = 0;
    while(1) {
     _sha512_update($ctx,$salt$0,$i$1$lcssa);
     $221 = (($i$414) + 1)|0;
     $exitcond29 = ($i$414|0)==($220|0);
     if ($exitcond29) {
      break;
     } else {
      $i$414 = $221;
     }
    }
    _sha512_sum($ctx,$smd);
    $222 = ($r$1|0)==(0);
    if (!($222)) {
     $i$513 = 0;
     while(1) {
      $223 = $ctx;
      $224 = $223;
      HEAP32[$224>>2] = 0;
      $225 = (($223) + 4)|0;
      $226 = $225;
      HEAP32[$226>>2] = 0;
      $227 = $28;
      $228 = $227;
      HEAP32[$228>>2] = -205731576;
      $229 = (($227) + 4)|0;
      $230 = $229;
      HEAP32[$230>>2] = 1779033703;
      $231 = $33;
      $232 = $231;
      HEAP32[$232>>2] = -2067093701;
      $233 = (($231) + 4)|0;
      $234 = $233;
      HEAP32[$234>>2] = -1150833019;
      $235 = $38;
      $236 = $235;
      HEAP32[$236>>2] = -23791573;
      $237 = (($235) + 4)|0;
      $238 = $237;
      HEAP32[$238>>2] = 1013904242;
      $239 = $43;
      $240 = $239;
      HEAP32[$240>>2] = 1595750129;
      $241 = (($239) + 4)|0;
      $242 = $241;
      HEAP32[$242>>2] = -1521486534;
      $243 = $48;
      $244 = $243;
      HEAP32[$244>>2] = -1377402159;
      $245 = (($243) + 4)|0;
      $246 = $245;
      HEAP32[$246>>2] = 1359893119;
      $247 = $53;
      $248 = $247;
      HEAP32[$248>>2] = 725511199;
      $249 = (($247) + 4)|0;
      $250 = $249;
      HEAP32[$250>>2] = -1694144372;
      $251 = $58;
      $252 = $251;
      HEAP32[$252>>2] = -79577749;
      $253 = (($251) + 4)|0;
      $254 = $253;
      HEAP32[$254>>2] = 528734635;
      $255 = $63;
      $256 = $255;
      HEAP32[$256>>2] = 327033209;
      $257 = (($255) + 4)|0;
      $258 = $257;
      HEAP32[$258>>2] = 1541459225;
      $259 = $i$513 & 1;
      $260 = ($259|0)!=(0);
      if ($260) {
       _hashmd52($ctx,$i$023$lcssa,$kmd);
      } else {
       _sha512_update($ctx,$md,64);
      }
      $261 = (($i$513>>>0) % 3)&-1;
      $262 = ($261|0)==(0);
      if (!($262)) {
       _sha512_update($ctx,$smd,$i$1$lcssa);
      }
      $263 = (($i$513>>>0) % 7)&-1;
      $264 = ($263|0)==(0);
      if (!($264)) {
       _hashmd52($ctx,$i$023$lcssa,$kmd);
      }
      if ($260) {
       _sha512_update($ctx,$md,64);
      } else {
       _hashmd52($ctx,$i$023$lcssa,$kmd);
      }
      _sha512_sum($ctx,$md);
      $265 = (($i$513) + 1)|0;
      $exitcond28 = ($265|0)==($r$1|0);
      if ($exitcond28) {
       break;
      } else {
       $i$513 = $265;
      }
     }
    }
    HEAP32[$vararg_buffer1>>2] = $rounds;
    $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = $i$1$lcssa;
    $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
    HEAP32[$vararg_ptr5>>2] = $salt$0;
    $266 = (_sprintf($output,180297,$vararg_buffer1)|0);
    $267 = (($output) + ($266)|0);
    $268 = (($266) + 84)|0;
    $i$611 = 0;$p$012 = $267;
    while(1) {
     $269 = (180308 + (($i$611*3)|0)|0);
     $270 = HEAP8[$269>>0]|0;
     $271 = $270&255;
     $272 = (($md) + ($271)|0);
     $273 = HEAP8[$272>>0]|0;
     $274 = $273&255;
     $275 = $274 << 16;
     $276 = (((180308 + (($i$611*3)|0)|0)) + 1|0);
     $277 = HEAP8[$276>>0]|0;
     $278 = $277&255;
     $279 = (($md) + ($278)|0);
     $280 = HEAP8[$279>>0]|0;
     $281 = $280&255;
     $282 = $281 << 8;
     $283 = $282 | $275;
     $284 = (((180308 + (($i$611*3)|0)|0)) + 2|0);
     $285 = HEAP8[$284>>0]|0;
     $286 = $285&255;
     $287 = (($md) + ($286)|0);
     $288 = HEAP8[$287>>0]|0;
     $289 = $288&255;
     $290 = $282 | $289;
     $291 = $289 & 63;
     $292 = (180454 + ($291)|0);
     $293 = HEAP8[$292>>0]|0;
     $294 = ((($p$012)) + 1|0);
     HEAP8[$p$012>>0] = $293;
     $295 = $290 >>> 6;
     $296 = $295 & 63;
     $297 = (180454 + ($296)|0);
     $298 = HEAP8[$297>>0]|0;
     $299 = ((($p$012)) + 2|0);
     HEAP8[$294>>0] = $298;
     $300 = $283 >>> 12;
     $301 = $300 & 63;
     $302 = (180454 + ($301)|0);
     $303 = HEAP8[$302>>0]|0;
     $304 = ((($p$012)) + 3|0);
     HEAP8[$299>>0] = $303;
     $305 = $274 >>> 2;
     $306 = (180454 + ($305)|0);
     $307 = HEAP8[$306>>0]|0;
     HEAP8[$304>>0] = $307;
     $scevgep$i6 = ((($p$012)) + 4|0);
     $308 = (($i$611) + 1)|0;
     $exitcond = ($308|0)==(21);
     if ($exitcond) {
      break;
     } else {
      $i$611 = $308;$p$012 = $scevgep$i6;
     }
    }
    $scevgep = (($output) + ($268)|0);
    $309 = ((($md)) + 63|0);
    $310 = HEAP8[$309>>0]|0;
    $311 = $310&255;
    $312 = $311 & 63;
    $313 = (180454 + ($312)|0);
    $314 = HEAP8[$313>>0]|0;
    $scevgep$sum = (($266) + 85)|0;
    $315 = (($output) + ($scevgep$sum)|0);
    HEAP8[$scevgep>>0] = $314;
    $316 = $311 >>> 6;
    $317 = (180454 + ($316)|0);
    $318 = HEAP8[$317>>0]|0;
    HEAP8[$315>>0] = $318;
    $scevgep27$sum = (($266) + 86)|0;
    $scevgep$i = (($output) + ($scevgep27$sum)|0);
    HEAP8[$scevgep$i>>0] = 0;
    $$0 = $output;
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___towcase($wc,$lower) {
 $wc = $wc|0;
 $lower = $lower|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa52 = 0, $$neg19 = 0, $$neg19$lcssa = 0, $$neg22 = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$028 = 0, $i$127 = 0, $i$127$lcssa = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $lower << 1;
 $1 = (($0) + -1)|0;
 $2 = (($lower) + -1)|0;
 $3 = (_iswalpha($wc)|0);
 $4 = ($3|0)==(0);
 $5 = (($wc) + -1536)|0;
 $6 = ($5>>>0)<(2560);
 $or$cond9 = $6 | $4;
 $7 = (($wc) + -11776)|0;
 $8 = ($7>>>0)<(30784);
 $or$cond11 = $8 | $or$cond9;
 $9 = (($wc) + -43008)|0;
 $10 = ($9>>>0)<(22272);
 $or$cond13 = $10 | $or$cond11;
 L1: do {
  if ($or$cond13) {
   $$0 = $wc;
  } else {
   $11 = ($lower|0)!=(0);
   $12 = (($wc) + -4256)|0;
   $13 = ($12>>>0)<(46);
   $or$cond15 = $11 & $13;
   if ($or$cond15) {
    $14 = ($wc|0)>(4293);
    if ($14) {
     switch ($wc|0) {
     case 4295: case 4301:  {
      break;
     }
     default: {
      $$0 = $wc;
      break L1;
     }
     }
    }
    $15 = (($wc) + 7264)|0;
    $$0 = $15;
    break;
   }
   $$not = $11 ^ 1;
   $16 = (($wc) + -11520)|0;
   $17 = ($16>>>0)<(38);
   $or$cond = $17 & $$not;
   if ($or$cond) {
    $18 = ($wc|0)>(11557);
    if ($18) {
     switch ($wc|0) {
     case 11559: case 11565:  {
      break;
     }
     default: {
      $$0 = $wc;
      break L1;
     }
     }
    }
    $19 = (($wc) + -7264)|0;
    $$0 = $19;
    break;
   } else {
    $i$028 = 0;
   }
   while(1) {
    $26 = (((147304 + ($i$028<<2)|0)) + 3|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = (147304 + ($i$028<<2)|0);
    $29 = HEAP16[$28>>1]|0;
    $30 = $29&65535;
    $31 = (((147304 + ($i$028<<2)|0)) + 2|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32 << 24 >> 24;
    $34 = $33 & $2;
    $$neg19 = (($wc) - ($30))|0;
    $35 = (($$neg19) - ($34))|0;
    $36 = $27&255;
    $37 = ($35>>>0)<($36>>>0);
    $20 = (($i$028) + 1)|0;
    if ($37) {
     $$lcssa = $32;$$lcssa52 = $33;$$neg19$lcssa = $$neg19;
     label = 13;
     break;
    }
    $21 = ($20|0)==(61);
    if ($21) {
     break;
    } else {
     $i$028 = $20;
    }
   }
   if ((label|0) == 13) {
    $38 = ($$lcssa<<24>>24)==(1);
    if ($38) {
     $39 = (($lower) + ($wc))|0;
     $40 = $$neg19$lcssa & 1;
     $41 = (($39) - ($40))|0;
     $$0 = $41;
     break;
    } else {
     $42 = Math_imul($$lcssa52, $1)|0;
     $43 = (($42) + ($wc))|0;
     $$0 = $43;
     break;
    }
   }
   $22 = (1 - ($lower))|0;
   $23 = (146812 + ($22<<1)|0);
   $24 = HEAP16[$23>>1]|0;
   $25 = ($24<<16>>16)==(0);
   L23: do {
    if (!($25)) {
     $45 = $24;$i$127 = 0;
     while(1) {
      $44 = $45&65535;
      $46 = ($44|0)==($wc|0);
      if ($46) {
       $i$127$lcssa = $i$127;
       break;
      }
      $50 = (($i$127) + 1)|0;
      $51 = ((146812 + ($50<<2)|0) + ($22<<1)|0);
      $52 = HEAP16[$51>>1]|0;
      $53 = ($52<<16>>16)==(0);
      if ($53) {
       break L23;
      } else {
       $45 = $52;$i$127 = $50;
      }
     }
     $47 = ((146812 + ($i$127$lcssa<<2)|0) + ($lower<<1)|0);
     $48 = HEAP16[$47>>1]|0;
     $49 = $48&65535;
     $$0 = $49;
     break L1;
    }
   } while(0);
   $54 = ($lower*40)|0;
   $$neg22 = (($wc) + -66600)|0;
   $55 = (($$neg22) + ($54))|0;
   $56 = ($55>>>0)<(40);
   if ($56) {
    $57 = (($wc) + -40)|0;
    $58 = ($lower*80)|0;
    $59 = (($57) + ($58))|0;
    $$0 = $59;
   } else {
    $$0 = $wc;
   }
  }
 } while(0);
 return ($$0|0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 switch ($9|0) {
 case 43: case 45:  {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
  break;
 }
 default: {
  $c$0 = $9;$neg$0 = 0;
 }
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $98 = -2147483648;$99 = 0;
  } else {
   $31 = HEAP32[$0>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$0>>2] = $32;
   $98 = -2147483648;$99 = 0;
  }
 } else {
  $c$112 = $c$0;$x$013 = 0;
  while(1) {
   $33 = ($x$013*10)|0;
   $34 = (($c$112) + -48)|0;
   $35 = (($34) + ($33))|0;
   $36 = HEAP32[$0>>2]|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $39 = ((($36)) + 1|0);
    HEAP32[$0>>2] = $39;
    $40 = HEAP8[$36>>0]|0;
    $41 = $40&255;
    $c$1$be = $41;
   } else {
    $42 = (___shgetc($f)|0);
    $c$1$be = $42;
   }
   $43 = (($c$1$be) + -48)|0;
   $44 = ($43>>>0)<(10);
   $45 = ($35|0)<(214748364);
   $46 = $44 & $45;
   if ($46) {
    $c$112 = $c$1$be;$x$013 = $35;
   } else {
    $$lcssa22 = $35;$c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $47 = ($$lcssa22|0)<(0);
  $48 = $47 << 31 >> 31;
  $49 = (($c$1$be$lcssa) + -48)|0;
  $50 = ($49>>>0)<(10);
  if ($50) {
   $53 = $$lcssa22;$54 = $48;$c$27 = $c$1$be$lcssa;
   while(1) {
    $55 = (___muldi3(($53|0),($54|0),10,0)|0);
    $56 = tempRet0;
    $57 = ($c$27|0)<(0);
    $58 = $57 << 31 >> 31;
    $59 = (_i64Add(($c$27|0),($58|0),-48,-1)|0);
    $60 = tempRet0;
    $61 = (_i64Add(($59|0),($60|0),($55|0),($56|0))|0);
    $62 = tempRet0;
    $63 = HEAP32[$0>>2]|0;
    $64 = HEAP32[$2>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$0>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $c$2$be = $68;
    } else {
     $69 = (___shgetc($f)|0);
     $c$2$be = $69;
    }
    $70 = (($c$2$be) + -48)|0;
    $71 = ($70>>>0)<(10);
    $72 = ($62|0)<(21474836);
    $73 = ($61>>>0)<(2061584302);
    $74 = ($62|0)==(21474836);
    $75 = $74 & $73;
    $76 = $72 | $75;
    $77 = $71 & $76;
    if ($77) {
     $53 = $61;$54 = $62;$c$27 = $c$2$be;
    } else {
     $92 = $61;$93 = $62;$c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;$93 = $48;$c$2$lcssa = $c$1$be$lcssa;
  }
  $51 = (($c$2$lcssa) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   while(1) {
    $78 = HEAP32[$0>>2]|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = ($78>>>0)<($79>>>0);
    if ($80) {
     $81 = ((($78)) + 1|0);
     HEAP32[$0>>2] = $81;
     $82 = HEAP8[$78>>0]|0;
     $83 = $82&255;
     $c$3$be = $83;
    } else {
     $84 = (___shgetc($f)|0);
     $c$3$be = $84;
    }
    $85 = (($c$3$be) + -48)|0;
    $86 = ($85>>>0)<(10);
    if (!($86)) {
     break;
    }
   }
  }
  $87 = HEAP32[$2>>2]|0;
  $88 = ($87|0)==(0|0);
  if (!($88)) {
   $89 = HEAP32[$0>>2]|0;
   $90 = ((($89)) + -1|0);
   HEAP32[$0>>2] = $90;
  }
  $91 = ($neg$0|0)!=(0);
  $94 = (_i64Subtract(0,0,($92|0),($93|0))|0);
  $95 = tempRet0;
  $96 = $91 ? $94 : $92;
  $97 = $91 ? $95 : $93;
  $98 = $97;$99 = $96;
 }
 tempRet0 = ($98);
 return ($99|0);
}
function _find_charmap($name) {
 $name = $name|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$0111$i = 0, $$012$i = 0, $$1$lcssa$i = 0, $$18$i = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $s$0$be = 0, $s$05 = 0, $s$05$lcssa = 0, $s$1$lcssa = 0, $s$14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$name>>0]|0;
 $1 = ($0<<24>>24)==(0);
 $s$05 = 170542;
 while(1) {
  L3: do {
   if ($1) {
    $$0$lcssa$i = $s$05;$26 = 0;
    label = 9;
   } else {
    $$0111$i = $name;$$012$i = $s$05;$5 = $0;
    while(1) {
     $2 = HEAP8[$$012$i>>0]|0;
     $3 = ($2<<24>>24)==(0);
     if ($3) {
      $$0$lcssa$i = $$012$i;$26 = $5;
      label = 9;
      break L3;
     }
     $4 = $5&255;
     $$18$i = $$0111$i;$55 = $5;$7 = $4;
     while(1) {
      $6 = $7 | 32;
      $8 = (($6) + -97)|0;
      $9 = ($8>>>0)>(26);
      $10 = (($7) + -48)|0;
      $11 = ($10>>>0)>(10);
      $or$cond$i = $11 & $9;
      if (!($or$cond$i)) {
       $$1$lcssa$i = $$18$i;$17 = $55;
       break;
      }
      $12 = ((($$18$i)) + 1|0);
      $13 = HEAP8[$12>>0]|0;
      $14 = $13&255;
      $15 = ($13<<24>>24)==(0);
      if ($15) {
       $$1$lcssa$i = $12;$17 = 0;
       break;
      } else {
       $$18$i = $12;$55 = $13;$7 = $14;
      }
     }
     $16 = $17&255;
     $18 = $16 | 32;
     $19 = $2&255;
     $20 = ($18|0)==($19|0);
     if (!($20)) {
      break L3;
     }
     $21 = ((($$1$lcssa$i)) + 1|0);
     $22 = ((($$012$i)) + 1|0);
     $23 = HEAP8[$21>>0]|0;
     $24 = ($23<<24>>24)==(0);
     if ($24) {
      $$0$lcssa$i = $22;$26 = 0;
      label = 9;
      break;
     } else {
      $$0111$i = $21;$$012$i = $22;$5 = $23;
     }
    }
   }
  } while(0);
  if ((label|0) == 9) {
   label = 0;
   $25 = HEAP8[$$0$lcssa$i>>0]|0;
   $27 = ($26<<24>>24)==($25<<24>>24);
   if ($27) {
    $s$05$lcssa = $s$05;
    label = 10;
    break;
   }
  }
  $38 = (_strlen($s$05)|0);
  $39 = (($38) + 1)|0;
  $40 = (($s$05) + ($39)|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = ($41<<24>>24)==(0);
  do {
   if ($42) {
    $$sum = (($38) + 2)|0;
    $43 = (($s$05) + ($$sum)|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = ($44&255)>(128);
    if ($45) {
     $$sum2 = (($38) + 3)|0;
     $46 = (($s$05) + ($$sum2)|0);
     $s$0$be = $46;
     break;
    } else {
     $49 = $44&255;
     $50 = (128 - ($49))|0;
     $51 = $50 >>> 2;
     $52 = ($51*5)|0;
     $53 = (($38) + 3)|0;
     $$sum1 = (($53) + ($52))|0;
     $54 = (($s$05) + ($$sum1)|0);
     $s$0$be = $54;
     break;
    }
   } else {
    $s$0$be = $40;
   }
  } while(0);
  $47 = HEAP8[$s$0$be>>0]|0;
  $48 = ($47<<24>>24)==(0);
  if ($48) {
   $$0 = -1;
   break;
  } else {
   $s$05 = $s$0$be;
  }
 }
 if ((label|0) == 10) {
  $28 = HEAP8[$s$05$lcssa>>0]|0;
  $29 = ($28<<24>>24)==(0);
  if ($29) {
   $s$1$lcssa = $s$05$lcssa;
  } else {
   $s$14 = $s$05$lcssa;
   while(1) {
    $30 = (_strlen($s$14)|0);
    $31 = (($30) + 1)|0;
    $32 = (($s$14) + ($31)|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = ($33<<24>>24)==(0);
    if ($34) {
     $s$1$lcssa = $32;
     break;
    } else {
     $s$14 = $32;
    }
   }
  }
  $35 = ((($s$1$lcssa)) + 1|0);
  $36 = $35;
  $37 = (($36) - (170542))|0;
  $$0 = $37;
 }
 return ($$0|0);
}
function _vstrfmon_l($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $$01$be = 0, $$01$lcssa = 0, $$0137 = 0, $$02$be = 0, $$0236 = 0, $$03$be = 0, $$0335 = 0, $$1 = 0, $$1$pn = 0, $$2 = 0, $$2$lcssa = 0, $$3 = 0, $$4$lcssa = 0, $$412 = 0, $$5 = 0, $$517 = 0, $$521 = 0, $$6 = 0, $$7 = 0;
 var $$726 = 0, $$730 = 0, $$8 = 0, $$lcssa = 0, $$lcssa76 = 0, $$lcssa77 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded3 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $fw$0$lcssa = 0, $fw$013 = 0, $isdigit = 0, $isdigit11 = 0, $isdigit2 = 0, $isdigit228 = 0, $isdigit4 = 0, $isdigit419 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp10 = 0, $isdigittmp127 = 0, $isdigittmp131 = 0;
 var $isdigittmp14 = 0, $isdigittmp3 = 0, $isdigittmp318 = 0, $isdigittmp322 = 0, $left$0 = 0, $left$0$lcssa = 0, $left$1 = 0, $lp$020 = 0, $lp$1 = 0, $or$cond = 0, $rp$029 = 0, $rp$1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $w$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $$01$lcssa = $s;
   label = 21;
  } else {
   $$0137 = $s;$$0236 = $n;$$0335 = $fmt;
   L2: while(1) {
    $1 = HEAP8[$$0335>>0]|0;
    switch ($1<<24>>24) {
    case 0:  {
     $$01$lcssa = $$0137;
     label = 21;
     break L1;
     break;
    }
    case 37:  {
     $6 = ((($$0335)) + 1|0);
     $7 = HEAP8[$6>>0]|0;
     $8 = ($7<<24>>24)==(37);
     if ($8) {
      $$1 = $6;$3 = 37;
      label = 3;
     } else {
      $$2 = $6;$10 = $7;$12 = $$0335;$left$0 = 0;
      L6: while(1) {
       $9 = $10 << 24 >> 24;
       switch ($9|0) {
       case 61:  {
        $11 = ((($12)) + 2|0);
        $$3 = $11;$left$1 = $left$0;
        break;
       }
       case 33: case 43: case 40: case 94:  {
        $$3 = $$2;$left$1 = $left$0;
        break;
       }
       case 45:  {
        $$3 = $$2;$left$1 = 1;
        break;
       }
       default: {
        $$2$lcssa = $$2;$$lcssa76 = $10;$$lcssa77 = $9;$left$0$lcssa = $left$0;
        break L6;
       }
       }
       $13 = ((($$3)) + 1|0);
       $$pre = HEAP8[$13>>0]|0;
       $$2 = $13;$10 = $$pre;$12 = $$3;$left$0 = $left$1;
      }
      $isdigittmp10 = (($$lcssa77) + -48)|0;
      $isdigit11 = ($isdigittmp10>>>0)<(10);
      if ($isdigit11) {
       $$412 = $$2$lcssa;$fw$013 = 0;$isdigittmp14 = $isdigittmp10;
       while(1) {
        $14 = ($fw$013*10)|0;
        $15 = (($isdigittmp14) + ($14))|0;
        $16 = ((($$412)) + 1|0);
        $17 = HEAP8[$16>>0]|0;
        $18 = $17 << 24 >> 24;
        $isdigittmp = (($18) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $$412 = $16;$fw$013 = $15;$isdigittmp14 = $isdigittmp;
        } else {
         $$4$lcssa = $16;$$lcssa = $17;$fw$0$lcssa = $15;
         break;
        }
       }
      } else {
       $$4$lcssa = $$2$lcssa;$$lcssa = $$lcssa76;$fw$0$lcssa = 0;
      }
      $19 = ($$lcssa<<24>>24)==(35);
      if ($19) {
       $$517 = ((($$4$lcssa)) + 1|0);
       $20 = HEAP8[$$517>>0]|0;
       $21 = $20 << 24 >> 24;
       $isdigittmp318 = (($21) + -48)|0;
       $isdigit419 = ($isdigittmp318>>>0)<(10);
       if ($isdigit419) {
        $$521 = $$517;$isdigittmp322 = $isdigittmp318;$lp$020 = 0;
        while(1) {
         $22 = ($lp$020*10)|0;
         $23 = (($isdigittmp322) + ($22))|0;
         $$5 = ((($$521)) + 1|0);
         $24 = HEAP8[$$5>>0]|0;
         $25 = $24 << 24 >> 24;
         $isdigittmp3 = (($25) + -48)|0;
         $isdigit4 = ($isdigittmp3>>>0)<(10);
         if ($isdigit4) {
          $$521 = $$5;$isdigittmp322 = $isdigittmp3;$lp$020 = $23;
         } else {
          $$6 = $$5;$26 = $24;$lp$1 = $23;
          break;
         }
        }
       } else {
        $$6 = $$517;$26 = $20;$lp$1 = 0;
       }
      } else {
       $$6 = $$4$lcssa;$26 = $$lcssa;$lp$1 = 0;
      }
      $27 = ($26<<24>>24)==(46);
      if ($27) {
       $$726 = ((($$6)) + 1|0);
       $28 = HEAP8[$$726>>0]|0;
       $29 = $28 << 24 >> 24;
       $isdigittmp127 = (($29) + -48)|0;
       $isdigit228 = ($isdigittmp127>>>0)<(10);
       if ($isdigit228) {
        $$730 = $$726;$isdigittmp131 = $isdigittmp127;$rp$029 = 0;
        while(1) {
         $30 = ($rp$029*10)|0;
         $31 = (($isdigittmp131) + ($30))|0;
         $$7 = ((($$730)) + 1|0);
         $32 = HEAP8[$$7>>0]|0;
         $33 = $32 << 24 >> 24;
         $isdigittmp1 = (($33) + -48)|0;
         $isdigit2 = ($isdigittmp1>>>0)<(10);
         if ($isdigit2) {
          $$730 = $$7;$isdigittmp131 = $isdigittmp1;$rp$029 = $31;
         } else {
          $$8 = $$7;$rp$1 = $31;
          break;
         }
        }
       } else {
        $$8 = $$726;$rp$1 = 0;
       }
      } else {
       $$8 = $$6;$rp$1 = 2;
      }
      $34 = (($lp$1) + 1)|0;
      $35 = (($34) + ($rp$1))|0;
      $36 = ($left$0$lcssa|0)==(0);
      $37 = ($fw$0$lcssa|0)>($35|0);
      $or$cond = $36 & $37;
      $w$0 = $or$cond ? $fw$0$lcssa : $35;
      $arglist_current = HEAP32[$ap>>2]|0;
      $38 = $arglist_current;
      $39 = ((0) + 8|0);
      $expanded3 = $39;
      $expanded = (($expanded3) - 1)|0;
      $40 = (($38) + ($expanded))|0;
      $41 = ((0) + 8|0);
      $expanded7 = $41;
      $expanded6 = (($expanded7) - 1)|0;
      $expanded5 = $expanded6 ^ -1;
      $42 = $40 & $expanded5;
      $43 = $42;
      $44 = +HEAPF64[$43>>3];
      $arglist_next = ((($43)) + 8|0);
      HEAP32[$ap>>2] = $arglist_next;
      HEAP32[$vararg_buffer>>2] = $w$0;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $rp$1;
      $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
      HEAPF64[$vararg_ptr2>>3] = $44;
      $45 = (_snprintf($$0137,$$0236,180284,$vararg_buffer)|0);
      $46 = ($$0236>>>0)>($45>>>0);
      if (!($46)) {
       break L2;
      }
      $48 = (($$0137) + ($45)|0);
      $49 = (($$0236) - ($45))|0;
      $$01$be = $48;$$02$be = $49;$$1$pn = $$8;
     }
     break;
    }
    default: {
     $$1 = $$0335;$3 = $1;
     label = 3;
    }
    }
    if ((label|0) == 3) {
     label = 0;
     $2 = ((($$0137)) + 1|0);
     HEAP8[$$0137>>0] = $3;
     $4 = (($$0236) + -1)|0;
     $$01$be = $2;$$02$be = $4;$$1$pn = $$1;
    }
    $$03$be = ((($$1$pn)) + 1|0);
    $5 = ($$02$be|0)==(0);
    if ($5) {
     $$01$lcssa = $$01$be;
     label = 21;
     break L1;
    } else {
     $$0137 = $$01$be;$$0236 = $$02$be;$$0335 = $$03$be;
    }
   }
   $47 = (___errno_location()|0);
   HEAP32[$47>>2] = 7;
   $$0 = -1;
  }
 } while(0);
 if ((label|0) == 21) {
  $50 = $$01$lcssa;
  $51 = $s;
  $52 = (($50) - ($51))|0;
  $$0 = $52;
 }
 STACKTOP = sp;return ($$0|0);
}
function _erfc2($ix,$x) {
 $ix = $ix|0;
 $x = +$x;
 var $$0 = 0.0, $$pn = 0.0, $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0;
 var $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0;
 var $R$0 = 0.0, $S$0 = 0.0, $S$0$in = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ix>>>0)<(1072955392);
 $1 = (+Math_abs((+$x)));
 if ($0) {
  $2 = $1 + -1.0;
  $3 = $2 * 0.0021663755948687908;
  $4 = 0.035478304325618236 - $3;
  $5 = $2 * $4;
  $6 = $5 + -0.11089469428239668;
  $7 = $2 * $6;
  $8 = $7 + 0.31834661990116175;
  $9 = $2 * $8;
  $10 = $9 + -0.37220787603570132;
  $11 = $2 * $10;
  $12 = $11 + 0.41485611868374833;
  $13 = $2 * $12;
  $14 = $13 + -0.0023621185607526594;
  $15 = $2 * 0.011984499846799107;
  $16 = $15 + 0.013637083912029051;
  $17 = $2 * $16;
  $18 = $17 + 0.12617121980876164;
  $19 = $2 * $18;
  $20 = $19 + 0.071828654414196266;
  $21 = $2 * $20;
  $22 = $21 + 0.54039791770217105;
  $23 = $2 * $22;
  $24 = $23 + 0.10642088040084423;
  $25 = $2 * $24;
  $26 = $25 + 1.0;
  $27 = $14 / $26;
  $28 = 0.15493708848953247 - $27;
  $$0 = $28;
 } else {
  $29 = $1 * $1;
  $30 = 1.0 / $29;
  $31 = ($ix>>>0)<(1074191213);
  if ($31) {
   $32 = $30 * 9.8143293441691454;
   $33 = -81.287435506306593 - $32;
   $34 = $30 * $33;
   $35 = $34 + -184.60509290671104;
   $36 = $30 * $35;
   $37 = $36 + -162.39666946257347;
   $38 = $30 * $37;
   $39 = $38 + -62.375332450326006;
   $40 = $30 * $39;
   $41 = $40 + -10.558626225323291;
   $42 = $30 * $41;
   $43 = $42 + -0.69385857270718176;
   $44 = $30 * $43;
   $45 = $44 + -0.0098649440348471482;
   $46 = $30 * 0.060424415214858099;
   $47 = 6.5702497703192817 - $46;
   $48 = $30 * $47;
   $49 = $48 + 108.63500554177944;
   $50 = $30 * $49;
   $51 = $50 + 429.00814002756783;
   $52 = $30 * $51;
   $53 = $52 + 645.38727173326788;
   $54 = $30 * $53;
   $55 = $54 + 434.56587747522923;
   $56 = $30 * $55;
   $57 = $56 + 137.65775414351904;
   $58 = $30 * $57;
   $59 = $58 + 19.651271667439257;
   $$pn = $59;$R$0 = $45;
  } else {
   $60 = $30 * 483.5191916086514;
   $61 = -1025.0951316110772 - $60;
   $62 = $30 * $61;
   $63 = $62 + -637.56644336838963;
   $64 = $30 * $63;
   $65 = $64 + -160.63638485582192;
   $66 = $30 * $65;
   $67 = $66 + -17.757954917754752;
   $68 = $30 * $67;
   $69 = $68 + -0.79928323768052301;
   $70 = $30 * $69;
   $71 = $70 + -0.0098649429247000992;
   $72 = $30 * 22.440952446585818;
   $73 = 474.52854120695537 - $72;
   $74 = $30 * $73;
   $75 = $74 + 2553.0504064331644;
   $76 = $30 * $75;
   $77 = $76 + 3199.8582195085955;
   $78 = $30 * $77;
   $79 = $78 + 1536.729586084437;
   $80 = $30 * $79;
   $81 = $80 + 325.79251299657392;
   $82 = $30 * $81;
   $83 = $82 + 30.338060743482458;
   $$pn = $83;$R$0 = $71;
  }
  $S$0$in = $30 * $$pn;
  $S$0 = $S$0$in + 1.0;
  HEAPF64[tempDoublePtr>>3] = $1;$84 = HEAP32[tempDoublePtr>>2]|0;
  $85 = HEAP32[tempDoublePtr+4>>2]|0;
  HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $85;$86 = +HEAPF64[tempDoublePtr>>3];
  $87 = $86 * $86;
  $88 = -0.5625 - $87;
  $89 = (+Math_exp((+$88)));
  $90 = $86 - $1;
  $91 = $1 + $86;
  $92 = $90 * $91;
  $93 = $R$0 / $S$0;
  $94 = $92 + $93;
  $95 = (+Math_exp((+$94)));
  $96 = $89 * $95;
  $97 = $96 / $1;
  $$0 = $97;
 }
 return (+$$0);
}
function _erfc2144($ix,$x) {
 $ix = $ix|0;
 $x = +$x;
 var $$0 = 0.0, $$pn = 0.0, $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0;
 var $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0;
 var $R$0 = 0.0, $S$0 = 0.0, $S$0$in = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ix>>>0)<(1067450368);
 $1 = (+Math_abs((+$x)));
 if ($0) {
  $2 = $1 + -1.0;
  $3 = $2 * 0.0021663755178451538;
  $4 = 0.035478305071592331 - $3;
  $5 = $2 * $4;
  $6 = $5 + -0.11089469492435455;
  $7 = $2 * $6;
  $8 = $7 + 0.31834661960601807;
  $9 = $2 * $8;
  $10 = $9 + -0.3722078800201416;
  $11 = $2 * $10;
  $12 = $11 + 0.41485610604286194;
  $13 = $2 * $12;
  $14 = $13 + -0.0023621185682713985;
  $15 = $2 * 0.011984500102698803;
  $16 = $15 + 0.01363708358258009;
  $17 = $2 * $16;
  $18 = $17 + 0.12617121636867523;
  $19 = $2 * $18;
  $20 = $19 + 0.071828655898571014;
  $21 = $2 * $20;
  $22 = $21 + 0.54039794206619263;
  $23 = $2 * $22;
  $24 = $23 + 0.10642088204622269;
  $25 = $2 * $24;
  $26 = $25 + 1.0;
  $27 = $14 / $26;
  $28 = 0.15493708848953247 - $27;
  $$0 = $28;
 } else {
  $29 = $1 * $1;
  $30 = 1.0 / $29;
  $31 = ($ix>>>0)<(1077336941);
  if ($31) {
   $32 = $30 * 9.8143291473388671;
   $33 = -81.287437438964844 - $32;
   $34 = $30 * $33;
   $35 = $34 + -184.60508728027344;
   $36 = $30 * $35;
   $37 = $36 + -162.39666748046875;
   $38 = $30 * $37;
   $39 = $38 + -62.375331878662109;
   $40 = $30 * $39;
   $41 = $40 + -10.558626174926758;
   $42 = $30 * $41;
   $43 = $42 + -0.6938585638999939;
   $44 = $30 * $43;
   $45 = $44 + -0.0098649440333247185;
   $46 = $30 * 0.060424413532018661;
   $47 = 6.5702495574951172 - $46;
   $48 = $30 * $47;
   $49 = $48 + 108.63500213623047;
   $50 = $30 * $49;
   $51 = $50 + 429.00814819335938;
   $52 = $30 * $51;
   $53 = $52 + 645.38726806640625;
   $54 = $30 * $53;
   $55 = $54 + 434.56588745117188;
   $56 = $30 * $55;
   $57 = $56 + 137.65776062011719;
   $58 = $30 * $57;
   $59 = $58 + 19.651271820068359;
   $$pn = $59;$R$0 = $45;
  } else {
   $60 = $30 * 483.51919555664063;
   $61 = -1025.0950927734375 - $60;
   $62 = $30 * $61;
   $63 = $62 + -637.56646728515625;
   $64 = $30 * $63;
   $65 = $64 + -160.63638305664063;
   $66 = $30 * $65;
   $67 = $66 + -17.757955551147461;
   $68 = $30 * $67;
   $69 = $68 + -0.79928326606750488;
   $70 = $30 * $69;
   $71 = $70 + -0.0098649431020021439;
   $72 = $30 * 22.440952301025391;
   $73 = 474.52853393554688 - $72;
   $74 = $30 * $73;
   $75 = $74 + 2553.05029296875;
   $76 = $30 * $75;
   $77 = $76 + 3199.858154296875;
   $78 = $30 * $77;
   $79 = $78 + 1536.7296142578125;
   $80 = $30 * $79;
   $81 = $80 + 325.79251098632813;
   $82 = $30 * $81;
   $83 = $82 + 30.33806037902832;
   $$pn = $83;$R$0 = $71;
  }
  $S$0$in = $30 * $$pn;
  $S$0 = $S$0$in + 1.0;
  $84 = (HEAPF32[tempDoublePtr>>2]=$1,HEAP32[tempDoublePtr>>2]|0);
  $85 = $84 & -8192;
  $86 = (HEAP32[tempDoublePtr>>2]=$85,+HEAPF32[tempDoublePtr>>2]);
  $87 = $86 * $86;
  $88 = -0.5625 - $87;
  $89 = (+Math_exp((+$88)));
  $90 = $86 - $1;
  $91 = $1 + $86;
  $92 = $90 * $91;
  $93 = $R$0 / $S$0;
  $94 = $92 + $93;
  $95 = (+Math_exp((+$94)));
  $96 = $89 * $95;
  $97 = $96 / $1;
  $$0 = $97;
 }
 return (+$$0);
}
function _common($ix,$x,$y0) {
 $ix = $ix|0;
 $x = +$x;
 $y0 = $y0|0;
 var $$ = 0.0, $$$i = 0, $$$i1 = 0, $$1$i = 0, $$1$i2 = 0, $$ss$0 = 0.0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0;
 var $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0;
 var $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0;
 var $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0.0;
 var $93 = 0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0, $cc$0 = 0.0, $cc$1 = 0.0, $p$0$i = 0, $p$0$i4 = 0, $q$0$i = 0, $q$0$i3 = 0, $ss$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+Math_sin((+$x)));
 $1 = (+Math_cos((+$x)));
 $2 = ($y0|0)!=(0);
 $3 = -$1;
 $$ = $2 ? $3 : $1;
 $4 = $0 + $$;
 $5 = ($ix>>>0)<(2145386496);
 if ($5) {
  $6 = $0 - $$;
  $7 = $x * 2.0;
  $8 = (+Math_cos((+$7)));
  $9 = -$8;
  $10 = $0 * $$;
  $11 = $10 < 0.0;
  $12 = $9 / $6;
  $13 = $9 / $4;
  $ss$0 = $11 ? $6 : $13;
  $cc$0 = $11 ? $12 : $4;
  $14 = ($ix>>>0)<(1207959552);
  if ($14) {
   $15 = -$ss$0;
   $$ss$0 = $2 ? $15 : $ss$0;
   HEAPF64[tempDoublePtr>>3] = $x;$16 = HEAP32[tempDoublePtr>>2]|0;
   $17 = HEAP32[tempDoublePtr+4>>2]|0;
   $18 = $17 & 2147483647;
   $19 = ($18>>>0)>(1075838975);
   if ($19) {
    $p$0$i = 5952;$q$0$i = 5872;
   } else {
    $20 = ($18>>>0)>(1074933386);
    if ($20) {
     $p$0$i = 6000;$q$0$i = 5912;
    } else {
     $21 = ($18>>>0)>(1074191212);
     $$$i = $21 ? 5696 : 5736;
     $$1$i = $21 ? 5776 : 5824;
     $p$0$i = $$1$i;$q$0$i = $$$i;
    }
   }
   $22 = $x * $x;
   $23 = 1.0 / $22;
   $24 = +HEAPF64[$p$0$i>>3];
   $25 = ((($p$0$i)) + 8|0);
   $26 = +HEAPF64[$25>>3];
   $27 = ((($p$0$i)) + 16|0);
   $28 = +HEAPF64[$27>>3];
   $29 = ((($p$0$i)) + 24|0);
   $30 = +HEAPF64[$29>>3];
   $31 = ((($p$0$i)) + 32|0);
   $32 = +HEAPF64[$31>>3];
   $33 = ((($p$0$i)) + 40|0);
   $34 = +HEAPF64[$33>>3];
   $35 = $23 * $34;
   $36 = $32 + $35;
   $37 = $23 * $36;
   $38 = $30 + $37;
   $39 = $23 * $38;
   $40 = $28 + $39;
   $41 = $23 * $40;
   $42 = $26 + $41;
   $43 = $23 * $42;
   $44 = $24 + $43;
   $45 = +HEAPF64[$q$0$i>>3];
   $46 = ((($q$0$i)) + 8|0);
   $47 = +HEAPF64[$46>>3];
   $48 = ((($q$0$i)) + 16|0);
   $49 = +HEAPF64[$48>>3];
   $50 = ((($q$0$i)) + 24|0);
   $51 = +HEAPF64[$50>>3];
   $52 = ((($q$0$i)) + 32|0);
   $53 = +HEAPF64[$52>>3];
   $54 = $23 * $53;
   $55 = $51 + $54;
   $56 = $23 * $55;
   $57 = $49 + $56;
   $58 = $23 * $57;
   $59 = $47 + $58;
   $60 = $23 * $59;
   $61 = $45 + $60;
   $62 = $23 * $61;
   $63 = $62 + 1.0;
   $64 = $44 / $63;
   $65 = $64 + 1.0;
   $66 = $cc$0 * $65;
   if ($19) {
    $p$0$i4 = 6336;$q$0$i3 = 6240;
   } else {
    $67 = ($18>>>0)>(1074933386);
    if ($67) {
     $p$0$i4 = 6384;$q$0$i3 = 6288;
    } else {
     $68 = ($18>>>0)>(1074191212);
     $$$i1 = $68 ? 6048 : 6096;
     $$1$i2 = $68 ? 6144 : 6192;
     $p$0$i4 = $$1$i2;$q$0$i3 = $$$i1;
    }
   }
   $69 = +HEAPF64[$p$0$i4>>3];
   $70 = ((($p$0$i4)) + 8|0);
   $71 = +HEAPF64[$70>>3];
   $72 = ((($p$0$i4)) + 16|0);
   $73 = +HEAPF64[$72>>3];
   $74 = ((($p$0$i4)) + 24|0);
   $75 = +HEAPF64[$74>>3];
   $76 = ((($p$0$i4)) + 32|0);
   $77 = +HEAPF64[$76>>3];
   $78 = ((($p$0$i4)) + 40|0);
   $79 = +HEAPF64[$78>>3];
   $80 = $23 * $79;
   $81 = $77 + $80;
   $82 = $23 * $81;
   $83 = $75 + $82;
   $84 = $23 * $83;
   $85 = $73 + $84;
   $86 = $23 * $85;
   $87 = $71 + $86;
   $88 = $23 * $87;
   $89 = $69 + $88;
   $90 = +HEAPF64[$q$0$i3>>3];
   $91 = ((($q$0$i3)) + 8|0);
   $92 = +HEAPF64[$91>>3];
   $93 = ((($q$0$i3)) + 16|0);
   $94 = +HEAPF64[$93>>3];
   $95 = ((($q$0$i3)) + 24|0);
   $96 = +HEAPF64[$95>>3];
   $97 = ((($q$0$i3)) + 32|0);
   $98 = +HEAPF64[$97>>3];
   $99 = ((($q$0$i3)) + 40|0);
   $100 = +HEAPF64[$99>>3];
   $101 = $23 * $100;
   $102 = $98 + $101;
   $103 = $23 * $102;
   $104 = $96 + $103;
   $105 = $23 * $104;
   $106 = $94 + $105;
   $107 = $23 * $106;
   $108 = $92 + $107;
   $109 = $23 * $108;
   $110 = $90 + $109;
   $111 = $23 * $110;
   $112 = $111 + 1.0;
   $113 = $89 / $112;
   $114 = $113 + -0.125;
   $115 = $114 / $x;
   $116 = $$ss$0 * $115;
   $117 = $66 - $116;
   $cc$1 = $117;
  } else {
   $cc$1 = $cc$0;
  }
 } else {
  $cc$1 = $4;
 }
 $118 = $cc$1 * 0.56418958354775628;
 $119 = (+Math_sqrt((+$x)));
 $120 = $118 / $119;
 return (+$120);
}
function _common165($ix,$x,$y0) {
 $ix = $ix|0;
 $x = +$x;
 $y0 = $y0|0;
 var $$ = 0.0, $$$i = 0, $$$i1 = 0, $$1$i = 0, $$1$i2 = 0, $$ss$0 = 0.0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0;
 var $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0;
 var $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0;
 var $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0;
 var $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0;
 var $94 = 0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, $cc$0 = 0.0, $cc$1 = 0.0, $p$0$i = 0, $p$0$i4 = 0, $q$0$i = 0, $q$0$i3 = 0, $ss$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+Math_sin((+$x)));
 $1 = (+Math_cos((+$x)));
 $2 = ($y0|0)!=(0);
 $3 = -$1;
 $$ = $2 ? $3 : $1;
 $4 = $0 + $$;
 $5 = ($ix>>>0)<(2130706432);
 if ($5) {
  $6 = $0 - $$;
  $7 = $x * 2.0;
  $8 = (+Math_cos((+$7)));
  $9 = -$8;
  $10 = $0 * $$;
  $11 = $10 < 0.0;
  $12 = $9 / $6;
  $13 = $9 / $4;
  $ss$0 = $11 ? $6 : $13;
  $cc$0 = $11 ? $12 : $4;
  $14 = ($ix>>>0)<(1484783616);
  if ($14) {
   $15 = -$ss$0;
   $$ss$0 = $2 ? $15 : $ss$0;
   $16 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
   $17 = $16 & 2147483647;
   $18 = ($17>>>0)>(1090519039);
   if ($18) {
    $p$0$i = 16744;$q$0$i = 16704;
   } else {
    $19 = ($17>>>0)>(1089936471);
    if ($19) {
     $p$0$i = 16768;$q$0$i = 16724;
    } else {
     $20 = ($17>>>0)>(1077336935);
     $$$i = $20 ? 16616 : 16636;
     $$1$i = $20 ? 16656 : 16680;
     $p$0$i = $$1$i;$q$0$i = $$$i;
    }
   }
   $21 = $x * $x;
   $22 = 1.0 / $21;
   $23 = +HEAPF32[$p$0$i>>2];
   $24 = ((($p$0$i)) + 4|0);
   $25 = +HEAPF32[$24>>2];
   $26 = ((($p$0$i)) + 8|0);
   $27 = +HEAPF32[$26>>2];
   $28 = ((($p$0$i)) + 12|0);
   $29 = +HEAPF32[$28>>2];
   $30 = ((($p$0$i)) + 16|0);
   $31 = +HEAPF32[$30>>2];
   $32 = ((($p$0$i)) + 20|0);
   $33 = +HEAPF32[$32>>2];
   $34 = $22 * $33;
   $35 = $31 + $34;
   $36 = $22 * $35;
   $37 = $29 + $36;
   $38 = $22 * $37;
   $39 = $27 + $38;
   $40 = $22 * $39;
   $41 = $25 + $40;
   $42 = $22 * $41;
   $43 = $23 + $42;
   $44 = +HEAPF32[$q$0$i>>2];
   $45 = ((($q$0$i)) + 4|0);
   $46 = +HEAPF32[$45>>2];
   $47 = ((($q$0$i)) + 8|0);
   $48 = +HEAPF32[$47>>2];
   $49 = ((($q$0$i)) + 12|0);
   $50 = +HEAPF32[$49>>2];
   $51 = ((($q$0$i)) + 16|0);
   $52 = +HEAPF32[$51>>2];
   $53 = $22 * $52;
   $54 = $50 + $53;
   $55 = $22 * $54;
   $56 = $48 + $55;
   $57 = $22 * $56;
   $58 = $46 + $57;
   $59 = $22 * $58;
   $60 = $44 + $59;
   $61 = $22 * $60;
   $62 = $61 + 1.0;
   $63 = $43 / $62;
   $64 = $63 + 1.0;
   $65 = $cc$0 * $64;
   if ($18) {
    $p$0$i4 = 16936;$q$0$i3 = 16888;
   } else {
    $66 = ($17>>>0)>(1089936471);
    if ($66) {
     $p$0$i4 = 16960;$q$0$i3 = 16912;
    } else {
     $67 = ($17>>>0)>(1077336935);
     $$$i1 = $67 ? 16792 : 16816;
     $$1$i2 = $67 ? 16840 : 16864;
     $p$0$i4 = $$1$i2;$q$0$i3 = $$$i1;
    }
   }
   $68 = +HEAPF32[$p$0$i4>>2];
   $69 = ((($p$0$i4)) + 4|0);
   $70 = +HEAPF32[$69>>2];
   $71 = ((($p$0$i4)) + 8|0);
   $72 = +HEAPF32[$71>>2];
   $73 = ((($p$0$i4)) + 12|0);
   $74 = +HEAPF32[$73>>2];
   $75 = ((($p$0$i4)) + 16|0);
   $76 = +HEAPF32[$75>>2];
   $77 = ((($p$0$i4)) + 20|0);
   $78 = +HEAPF32[$77>>2];
   $79 = $22 * $78;
   $80 = $76 + $79;
   $81 = $22 * $80;
   $82 = $74 + $81;
   $83 = $22 * $82;
   $84 = $72 + $83;
   $85 = $22 * $84;
   $86 = $70 + $85;
   $87 = $22 * $86;
   $88 = $68 + $87;
   $89 = +HEAPF32[$q$0$i3>>2];
   $90 = ((($q$0$i3)) + 4|0);
   $91 = +HEAPF32[$90>>2];
   $92 = ((($q$0$i3)) + 8|0);
   $93 = +HEAPF32[$92>>2];
   $94 = ((($q$0$i3)) + 12|0);
   $95 = +HEAPF32[$94>>2];
   $96 = ((($q$0$i3)) + 16|0);
   $97 = +HEAPF32[$96>>2];
   $98 = ((($q$0$i3)) + 20|0);
   $99 = +HEAPF32[$98>>2];
   $100 = $22 * $99;
   $101 = $97 + $100;
   $102 = $22 * $101;
   $103 = $95 + $102;
   $104 = $22 * $103;
   $105 = $93 + $104;
   $106 = $22 * $105;
   $107 = $91 + $106;
   $108 = $22 * $107;
   $109 = $89 + $108;
   $110 = $22 * $109;
   $111 = $110 + 1.0;
   $112 = $88 / $111;
   $113 = $112 + -0.125;
   $114 = $113 / $x;
   $115 = $$ss$0 * $114;
   $116 = $65 - $115;
   $cc$1 = $116;
  } else {
   $cc$1 = $cc$0;
  }
 } else {
  $cc$1 = $4;
 }
 $117 = $cc$1 * 0.564189612865448;
 $118 = (+Math_sqrt((+$x)));
 $119 = $117 / $118;
 return (+$119);
}
function _common182($ix,$x,$y1,$sign) {
 $ix = $ix|0;
 $x = +$x;
 $y1 = $y1|0;
 $sign = $sign|0;
 var $$ = 0.0, $$$i = 0, $$$i1 = 0, $$1$i = 0, $$1$i2 = 0, $$ss$0 = 0.0, $0 = 0.0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0;
 var $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0;
 var $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0;
 var $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0;
 var $91 = 0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0, $cc$0 = 0.0, $cc$1 = 0.0, $cc$1$ = 0.0, $p$0$i = 0, $p$0$i4 = 0, $q$0$i = 0, $q$0$i3 = 0, $ss$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+Math_sin((+$x)));
 $1 = ($y1|0)!=(0);
 $2 = -$0;
 $$ = $1 ? $2 : $0;
 $3 = (+Math_cos((+$x)));
 $4 = $$ - $3;
 $5 = ($ix>>>0)<(2145386496);
 if ($5) {
  $6 = -$$;
  $7 = $6 - $3;
  $8 = $x * 2.0;
  $9 = (+Math_cos((+$8)));
  $10 = $$ * $3;
  $11 = $10 > 0.0;
  $12 = $9 / $7;
  $13 = $9 / $4;
  $ss$0 = $11 ? $7 : $13;
  $cc$0 = $11 ? $12 : $4;
  $14 = ($ix>>>0)<(1207959552);
  if ($14) {
   $15 = -$ss$0;
   $$ss$0 = $1 ? $15 : $ss$0;
   HEAPF64[tempDoublePtr>>3] = $x;$16 = HEAP32[tempDoublePtr>>2]|0;
   $17 = HEAP32[tempDoublePtr+4>>2]|0;
   $18 = $17 & 2147483647;
   $19 = ($18>>>0)>(1075838975);
   if ($19) {
    $p$0$i = 5216;$q$0$i = 5136;
   } else {
    $20 = ($18>>>0)>(1074933386);
    if ($20) {
     $p$0$i = 5264;$q$0$i = 5176;
    } else {
     $21 = ($18>>>0)>(1074191212);
     $$$i = $21 ? 4960 : 5000;
     $$1$i = $21 ? 5040 : 5088;
     $p$0$i = $$1$i;$q$0$i = $$$i;
    }
   }
   $22 = $x * $x;
   $23 = 1.0 / $22;
   $24 = +HEAPF64[$p$0$i>>3];
   $25 = ((($p$0$i)) + 8|0);
   $26 = +HEAPF64[$25>>3];
   $27 = ((($p$0$i)) + 16|0);
   $28 = +HEAPF64[$27>>3];
   $29 = ((($p$0$i)) + 24|0);
   $30 = +HEAPF64[$29>>3];
   $31 = ((($p$0$i)) + 32|0);
   $32 = +HEAPF64[$31>>3];
   $33 = ((($p$0$i)) + 40|0);
   $34 = +HEAPF64[$33>>3];
   $35 = $23 * $34;
   $36 = $32 + $35;
   $37 = $23 * $36;
   $38 = $30 + $37;
   $39 = $23 * $38;
   $40 = $28 + $39;
   $41 = $23 * $40;
   $42 = $26 + $41;
   $43 = $23 * $42;
   $44 = $24 + $43;
   $45 = +HEAPF64[$q$0$i>>3];
   $46 = ((($q$0$i)) + 8|0);
   $47 = +HEAPF64[$46>>3];
   $48 = ((($q$0$i)) + 16|0);
   $49 = +HEAPF64[$48>>3];
   $50 = ((($q$0$i)) + 24|0);
   $51 = +HEAPF64[$50>>3];
   $52 = ((($q$0$i)) + 32|0);
   $53 = +HEAPF64[$52>>3];
   $54 = $23 * $53;
   $55 = $51 + $54;
   $56 = $23 * $55;
   $57 = $49 + $56;
   $58 = $23 * $57;
   $59 = $47 + $58;
   $60 = $23 * $59;
   $61 = $45 + $60;
   $62 = $23 * $61;
   $63 = $62 + 1.0;
   $64 = $44 / $63;
   $65 = $64 + 1.0;
   $66 = $cc$0 * $65;
   if ($19) {
    $p$0$i4 = 5600;$q$0$i3 = 5504;
   } else {
    $67 = ($18>>>0)>(1074933386);
    if ($67) {
     $p$0$i4 = 5648;$q$0$i3 = 5552;
    } else {
     $68 = ($18>>>0)>(1074191212);
     $$$i1 = $68 ? 5312 : 5360;
     $$1$i2 = $68 ? 5408 : 5456;
     $p$0$i4 = $$1$i2;$q$0$i3 = $$$i1;
    }
   }
   $69 = +HEAPF64[$p$0$i4>>3];
   $70 = ((($p$0$i4)) + 8|0);
   $71 = +HEAPF64[$70>>3];
   $72 = ((($p$0$i4)) + 16|0);
   $73 = +HEAPF64[$72>>3];
   $74 = ((($p$0$i4)) + 24|0);
   $75 = +HEAPF64[$74>>3];
   $76 = ((($p$0$i4)) + 32|0);
   $77 = +HEAPF64[$76>>3];
   $78 = ((($p$0$i4)) + 40|0);
   $79 = +HEAPF64[$78>>3];
   $80 = $23 * $79;
   $81 = $77 + $80;
   $82 = $23 * $81;
   $83 = $75 + $82;
   $84 = $23 * $83;
   $85 = $73 + $84;
   $86 = $23 * $85;
   $87 = $71 + $86;
   $88 = $23 * $87;
   $89 = $69 + $88;
   $90 = +HEAPF64[$q$0$i3>>3];
   $91 = ((($q$0$i3)) + 8|0);
   $92 = +HEAPF64[$91>>3];
   $93 = ((($q$0$i3)) + 16|0);
   $94 = +HEAPF64[$93>>3];
   $95 = ((($q$0$i3)) + 24|0);
   $96 = +HEAPF64[$95>>3];
   $97 = ((($q$0$i3)) + 32|0);
   $98 = +HEAPF64[$97>>3];
   $99 = ((($q$0$i3)) + 40|0);
   $100 = +HEAPF64[$99>>3];
   $101 = $23 * $100;
   $102 = $98 + $101;
   $103 = $23 * $102;
   $104 = $96 + $103;
   $105 = $23 * $104;
   $106 = $94 + $105;
   $107 = $23 * $106;
   $108 = $92 + $107;
   $109 = $23 * $108;
   $110 = $90 + $109;
   $111 = $23 * $110;
   $112 = $111 + 1.0;
   $113 = $89 / $112;
   $114 = $113 + 0.375;
   $115 = $114 / $x;
   $116 = $$ss$0 * $115;
   $117 = $66 - $116;
   $cc$1 = $117;
  } else {
   $cc$1 = $cc$0;
  }
 } else {
  $cc$1 = $4;
 }
 $118 = ($sign|0)==(0);
 $119 = -$cc$1;
 $cc$1$ = $118 ? $cc$1 : $119;
 $120 = $cc$1$ * 0.56418958354775628;
 $121 = (+Math_sqrt((+$x)));
 $122 = $120 / $121;
 return (+$122);
}
function _common183($ix,$x,$y1,$sign) {
 $ix = $ix|0;
 $x = +$x;
 $y1 = $y1|0;
 $sign = $sign|0;
 var $$ = 0.0, $$$i = 0, $$1$i = 0, $$ss$0 = 0.0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0;
 var $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $13 = 0.0, $14 = 0;
 var $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0;
 var $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0;
 var $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0;
 var $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, $cc$0 = 0.0, $cc$1 = 0.0, $cc$1$ = 0.0, $p$0$i = 0, $p$0$i2 = 0, $q$0$i = 0, $q$0$i1 = 0;
 var $ss$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+Math_sin((+$x)));
 $1 = $0;
 $2 = ($y1|0)!=(0);
 $3 = -$1;
 $$ = $2 ? $3 : $1;
 $4 = (+Math_cos((+$x)));
 $5 = $4;
 $6 = $$ - $5;
 $7 = ($ix>>>0)<(2130706432);
 if ($7) {
  $8 = -$$;
  $9 = $8 - $5;
  $10 = $x * 2.0;
  $11 = (+Math_cos((+$10)));
  $12 = $11;
  $13 = $$ * $5;
  $14 = $13 > 0.0;
  $15 = $12 / $9;
  $16 = $12 / $6;
  $ss$0 = $14 ? $9 : $16;
  $cc$0 = $14 ? $15 : $6;
  $17 = ($ix>>>0)<(1484783616);
  if ($17) {
   $18 = -$ss$0;
   $$ss$0 = $2 ? $18 : $ss$0;
   $19 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(1090519039);
   if ($21) {
    $p$0$i = 16472;$q$0$i = 16432;
   } else {
    $22 = ($20>>>0)>(1089936471);
    if ($22) {
     $p$0$i = 16496;$q$0$i = 16452;
    } else {
     $23 = ($20>>>0)>(1077336935);
     $$$i = $23 ? 16344 : 16364;
     $$1$i = $23 ? 16384 : 16408;
     $p$0$i = $$1$i;$q$0$i = $$$i;
    }
   }
   $24 = $x * $x;
   $25 = 1.0 / $24;
   $26 = +HEAPF32[$p$0$i>>2];
   $27 = ((($p$0$i)) + 4|0);
   $28 = +HEAPF32[$27>>2];
   $29 = ((($p$0$i)) + 8|0);
   $30 = +HEAPF32[$29>>2];
   $31 = ((($p$0$i)) + 12|0);
   $32 = +HEAPF32[$31>>2];
   $33 = ((($p$0$i)) + 16|0);
   $34 = +HEAPF32[$33>>2];
   $35 = ((($p$0$i)) + 20|0);
   $36 = +HEAPF32[$35>>2];
   $37 = $25 * $36;
   $38 = $34 + $37;
   $39 = $25 * $38;
   $40 = $32 + $39;
   $41 = $25 * $40;
   $42 = $30 + $41;
   $43 = $25 * $42;
   $44 = $28 + $43;
   $45 = $25 * $44;
   $46 = $26 + $45;
   $47 = +HEAPF32[$q$0$i>>2];
   $48 = ((($q$0$i)) + 4|0);
   $49 = +HEAPF32[$48>>2];
   $50 = ((($q$0$i)) + 8|0);
   $51 = +HEAPF32[$50>>2];
   $52 = ((($q$0$i)) + 12|0);
   $53 = +HEAPF32[$52>>2];
   $54 = ((($q$0$i)) + 16|0);
   $55 = +HEAPF32[$54>>2];
   $56 = $25 * $55;
   $57 = $53 + $56;
   $58 = $25 * $57;
   $59 = $51 + $58;
   $60 = $25 * $59;
   $61 = $49 + $60;
   $62 = $25 * $61;
   $63 = $47 + $62;
   $64 = $25 * $63;
   $65 = $64 + 1.0;
   $66 = $46 / $65;
   $67 = $66 + 1.0;
   $68 = $67;
   $69 = $cc$0 * $68;
   $70 = $19 & 2145386496;
   $71 = ($70>>>0)>(1075838975);
   $q$0$i1 = $71 ? 16520 : 16544;
   $p$0$i2 = $71 ? 16568 : 16592;
   $72 = +HEAPF32[$p$0$i2>>2];
   $73 = ((($p$0$i2)) + 4|0);
   $74 = +HEAPF32[$73>>2];
   $75 = ((($p$0$i2)) + 8|0);
   $76 = +HEAPF32[$75>>2];
   $77 = ((($p$0$i2)) + 12|0);
   $78 = +HEAPF32[$77>>2];
   $79 = ((($p$0$i2)) + 16|0);
   $80 = +HEAPF32[$79>>2];
   $81 = ((($p$0$i2)) + 20|0);
   $82 = +HEAPF32[$81>>2];
   $83 = $25 * $82;
   $84 = $80 + $83;
   $85 = $25 * $84;
   $86 = $78 + $85;
   $87 = $25 * $86;
   $88 = $76 + $87;
   $89 = $25 * $88;
   $90 = $74 + $89;
   $91 = $25 * $90;
   $92 = $72 + $91;
   $93 = +HEAPF32[$q$0$i1>>2];
   $94 = ((($q$0$i1)) + 4|0);
   $95 = +HEAPF32[$94>>2];
   $96 = ((($q$0$i1)) + 8|0);
   $97 = +HEAPF32[$96>>2];
   $98 = ((($q$0$i1)) + 12|0);
   $99 = +HEAPF32[$98>>2];
   $100 = ((($q$0$i1)) + 16|0);
   $101 = +HEAPF32[$100>>2];
   $102 = ((($q$0$i1)) + 20|0);
   $103 = +HEAPF32[$102>>2];
   $104 = $25 * $103;
   $105 = $101 + $104;
   $106 = $25 * $105;
   $107 = $99 + $106;
   $108 = $25 * $107;
   $109 = $97 + $108;
   $110 = $25 * $109;
   $111 = $95 + $110;
   $112 = $25 * $111;
   $113 = $93 + $112;
   $114 = $25 * $113;
   $115 = $114 + 1.0;
   $116 = $92 / $115;
   $117 = $116 + 0.375;
   $118 = $117 / $x;
   $119 = $118;
   $120 = $$ss$0 * $119;
   $121 = $69 - $120;
   $cc$1 = $121;
  } else {
   $cc$1 = $cc$0;
  }
 } else {
  $cc$1 = $6;
 }
 $122 = ($sign|0)==(0);
 $123 = -$cc$1;
 $cc$1$ = $122 ? $cc$1 : $123;
 $124 = $cc$1$ * 0.564189612865448;
 $125 = (+Math_sqrt((+$x)));
 $126 = $125;
 $127 = $124 / $126;
 $128 = $127;
 return (+$128);
}
function ___getopt_long($argc,$argv,$optstring,$longopts,$idx,$longonly) {
 $argc = $argc|0;
 $argv = $argv|0;
 $optstring = $optstring|0;
 $longopts = $longopts|0;
 $idx = $idx|0;
 $longonly = $longonly|0;
 var $$ = 0, $$0 = 0, $$lcssa57 = 0, $$phi$trans$insert = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$018 = 0, $i$018$lcssa = 0, $i$018$lcssa53 = 0, $i$01855 = 0, $name$016 = 0, $opt$017 = 0, $opt$04 = 0, $opt$04$lcssa56 = 0, $or$cond = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7224>>2]|0;
 $1 = ($0|0)==(0);
 $2 = HEAP32[7232>>2]|0;
 $3 = ($2|0)!=(0);
 $or$cond = $1 | $3;
 if ($or$cond) {
  HEAP32[7232>>2] = 0;
  HEAP32[7236>>2] = 0;
  HEAP32[7224>>2] = 1;
  $4 = 1;
 } else {
  $4 = $0;
 }
 $5 = ($4|0)<($argc|0);
 L4: do {
  if ($5) {
   $6 = (($argv) + ($4<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = HEAP8[$7>>0]|0;
    $10 = ($9<<24>>24)==(45);
    if ($10) {
     $11 = ($longonly|0)==(0);
     $$phi$trans$insert = ((($7)) + 1|0);
     $$pre = HEAP8[$$phi$trans$insert>>0]|0;
     if ($11) {
      $phitmp = ($$pre<<24>>24)==(45);
      if ($phitmp) {
       $13 = ((($7)) + 2|0);
       $14 = HEAP8[$13>>0]|0;
       $15 = ($14<<24>>24)==(0);
       if (!($15)) {
        $18 = 45;
        label = 10;
       }
      }
     } else {
      $12 = ($$pre<<24>>24)==(0);
      if (!($12)) {
       $18 = $$pre;
       label = 10;
      }
     }
     if ((label|0) == 10) {
      $16 = HEAP32[$longopts>>2]|0;
      $17 = ($16|0)==(0|0);
      $19 = ($18<<24>>24)==(45);
      L14: do {
       if (!($17)) {
        $20 = ((($7)) + 2|0);
        $$ = $19 ? $20 : $$phi$trans$insert;
        $22 = $16;$i$018 = 0;
        L16: while(1) {
         $21 = HEAP8[$22>>0]|0;
         $23 = ($21<<24>>24)==(0);
         L18: do {
          if ($23) {
           $opt$04 = $$;
           label = 15;
          } else {
           $$pr = $21;$name$016 = $22;$opt$017 = $$;
           while(1) {
            $24 = HEAP8[$opt$017>>0]|0;
            $25 = ($$pr<<24>>24)==($24<<24>>24);
            if (!($25)) {
             break L18;
            }
            $26 = ((($name$016)) + 1|0);
            $27 = ((($opt$017)) + 1|0);
            $28 = HEAP8[$26>>0]|0;
            $29 = ($28<<24>>24)==(0);
            if ($29) {
             $opt$04 = $27;
             label = 15;
             break;
            } else {
             $$pr = $28;$name$016 = $26;$opt$017 = $27;
            }
           }
          }
         } while(0);
         L22: do {
          if ((label|0) == 15) {
           label = 0;
           $30 = HEAP8[$opt$04>>0]|0;
           switch ($30<<24>>24) {
           case 61: case 0:  {
            break;
           }
           default: {
            break L22;
           }
           }
           $31 = ($30<<24>>24)==(61);
           $32 = (((($longopts) + ($i$018<<4)|0)) + 4|0);
           $33 = HEAP32[$32>>2]|0;
           if (!($31)) {
            $$lcssa57 = $33;$i$018$lcssa = $i$018;
            label = 19;
            break L16;
           }
           $34 = ($33|0)==(0);
           if (!($34)) {
            $i$018$lcssa53 = $i$018;$opt$04$lcssa56 = $opt$04;
            label = 18;
            break L16;
           }
          }
         } while(0);
         $49 = (($i$018) + 1)|0;
         $50 = (($longopts) + ($49<<4)|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = ($51|0)==(0|0);
         if ($52) {
          break L14;
         } else {
          $22 = $51;$i$018 = $49;
         }
        }
        do {
         if ((label|0) == 18) {
          $35 = ((($opt$04$lcssa56)) + 1|0);
          HEAP32[7244>>2] = $35;
          $42 = $4;$i$01855 = $i$018$lcssa53;
         }
         else if ((label|0) == 19) {
          $36 = ($$lcssa57|0)==(1);
          if ($36) {
           $37 = (($4) + 1)|0;
           HEAP32[7224>>2] = $37;
           $38 = (($argv) + ($37<<2)|0);
           $39 = HEAP32[$38>>2]|0;
           HEAP32[7244>>2] = $39;
           $40 = ($39|0)==(0|0);
           if ($40) {
            $$0 = 58;
            break L4;
           } else {
            $42 = $37;$i$01855 = $i$018$lcssa;
            break;
           }
          } else {
           HEAP32[7244>>2] = 0;
           $42 = $4;$i$01855 = $i$018$lcssa;
           break;
          }
         }
        } while(0);
        $41 = (($42) + 1)|0;
        HEAP32[7224>>2] = $41;
        $43 = ($idx|0)==(0|0);
        if (!($43)) {
         HEAP32[$idx>>2] = $i$01855;
        }
        $44 = (((($longopts) + ($i$01855<<4)|0)) + 8|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = ($45|0)==(0|0);
        $47 = (((($longopts) + ($i$01855<<4)|0)) + 12|0);
        $48 = HEAP32[$47>>2]|0;
        if ($46) {
         $$0 = $48;
         break L4;
        }
        HEAP32[$45>>2] = $48;
        $$0 = 0;
        break L4;
       }
      } while(0);
      if ($19) {
       $53 = (($4) + 1)|0;
       HEAP32[7224>>2] = $53;
       $$0 = 63;
       break;
      }
     }
     $54 = (_getopt($argc,$argv,$optstring)|0);
     $$0 = $54;
    } else {
     $$0 = -1;
    }
   }
  } else {
   $$0 = -1;
  }
 } while(0);
 return ($$0|0);
}
function _do_nftw($path,$fn,$fd_limit,$flags,$h) {
 $path = $path|0;
 $fn = $fn|0;
 $fd_limit = $fd_limit|0;
 $flags = $flags|0;
 $h = $h|0;
 var $$0 = 0, $$069 = 0, $$lcssa = 0, $$pre$phi14Z2D = 0, $$pre13 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $lev = 0, $new = 0, $or$cond = 0, $or$cond5 = 0, $st = 0, $switch$split2D = 0;
 var $type$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $st = sp + 28|0;
 $new = sp + 8|0;
 $lev = sp;
 $0 = (_strlen($path)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  label = 3;
 } else {
  $2 = (($0) + -1)|0;
  $3 = (($path) + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(47);
  if ($5) {
   $83 = $2;
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $83 = $0;
 }
 $6 = $flags & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $10 = (_stat($path,$st)|0);
  $11 = ($10|0)<(0);
  if ($11) {
   $12 = (___errno_location()|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(2);
   if ($14) {
    $15 = (_lstat($path,$st)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     $type$0 = 7;
     label = 15;
    } else {
     $$pre$phi14Z2D = $12;
     label = 10;
    }
   } else {
    $$pre$phi14Z2D = $12;
    label = 10;
   }
  } else {
   label = 11;
  }
 } else {
  $8 = (_lstat($path,$st)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   label = 11;
  } else {
   $$pre13 = (___errno_location()|0);
   $$pre$phi14Z2D = $$pre13;
   label = 10;
  }
 }
 L12: do {
  if ((label|0) == 10) {
   $17 = HEAP32[$$pre$phi14Z2D>>2]|0;
   $18 = ($17|0)==(13);
   if ($18) {
    $type$0 = 4;
    label = 15;
   } else {
    $$0 = -1;
   }
  }
  else if ((label|0) == 11) {
   $19 = ((($st)) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $20 & 61440;
   $switch$split2D = ($21|0)<(40960);
   if (!($switch$split2D)) {
    switch ($21|0) {
    case 40960:  {
     break;
    }
    default: {
     $type$0 = 1;
     label = 15;
     break L12;
    }
    }
    $27 = $6 << 1;
    $28 = $27 ^ 7;
    $type$0 = $28;
    label = 15;
    break;
   }
   switch ($21|0) {
   case 16384:  {
    break;
   }
   default: {
    $type$0 = 1;
    label = 15;
    break L12;
   }
   }
   $22 = (_access($path,4)|0);
   $23 = ($22|0)<(0);
   if ($23) {
    $type$0 = 3;
    label = 15;
   } else {
    $24 = $flags >>> 1;
    $25 = $24 & 4;
    $26 = $25 | 2;
    $type$0 = $26;
    label = 15;
   }
  }
 } while(0);
 L21: do {
  if ((label|0) == 15) {
   $29 = $flags & 2;
   $30 = ($29|0)!=(0);
   $31 = ($h|0)!=(0|0);
   $or$cond = $30 & $31;
   $32 = HEAP32[$st>>2]|0;
   if ($or$cond) {
    $33 = ((($h)) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($32|0)==($34|0);
    if (!($35)) {
     $$0 = 0;
     break;
    }
   }
   HEAP32[$new>>2] = $h;
   $36 = ((($new)) + 4|0);
   HEAP32[$36>>2] = $32;
   $37 = ((($st)) + 72|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($new)) + 8|0);
   HEAP32[$39>>2] = $38;
   if ($31) {
    $40 = ((($h)) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) + 1)|0;
    $43 = ((($new)) + 12|0);
    HEAP32[$43>>2] = $42;
    $44 = (($0) + 1)|0;
    $45 = ((($new)) + 16|0);
    HEAP32[$45>>2] = $44;
    $46 = ((($lev)) + 4|0);
    HEAP32[$46>>2] = $42;
    $47 = ((($h)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $58 = $48;
   } else {
    $49 = ((($new)) + 12|0);
    HEAP32[$49>>2] = 0;
    $50 = (($0) + 1)|0;
    $51 = ((($new)) + 16|0);
    HEAP32[$51>>2] = $50;
    $52 = ((($lev)) + 4|0);
    HEAP32[$52>>2] = 0;
    $53 = (_strrchr($path,47)|0);
    $54 = ($53|0)==(0|0);
    if ($54) {
     $58 = 0;
    } else {
     $55 = $53;
     $56 = $path;
     $57 = (($55) - ($56))|0;
     $58 = $57;
    }
   }
   HEAP32[$lev>>2] = $58;
   $59 = $flags & 8;
   $60 = ($59|0)!=(0);
   if (!($60)) {
    $61 = (FUNCTION_TABLE_iiiii[$fn & 0]($path,$st,$type$0,$lev)|0);
    $62 = ($61|0)==(0);
    if (!($62)) {
     $$0 = $61;
     break;
    }
   }
   $63 = ($h|0)==(0|0);
   if (!($63)) {
    $64 = HEAP32[$st>>2]|0;
    $65 = HEAP32[$37>>2]|0;
    $$069 = $h;
    while(1) {
     $66 = ((($$069)) + 4|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==($64|0);
     if ($68) {
      $69 = ((($$069)) + 8|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($70|0)==($65|0);
      if ($71) {
       $$0 = 0;
       break L21;
      }
     }
     $72 = HEAP32[$$069>>2]|0;
     $73 = ($72|0)==(0|0);
     if ($73) {
      break;
     } else {
      $$069 = $72;
     }
    }
   }
   $74 = $type$0 & 3;
   $75 = ($74|0)==(2);
   $76 = ($fd_limit|0)!=(0);
   $or$cond5 = $76 & $75;
   do {
    if ($or$cond5) {
     $77 = (_opendir($path)|0);
     $78 = ($77|0)==(0|0);
     if ($78) {
      $102 = (___errno_location()|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($103|0)==(13);
      if ($104) {
       break;
      } else {
       $$0 = -1;
       break L21;
      }
     }
     $79 = (_readdir($77)|0);
     $80 = ($79|0)==(0|0);
     L47: do {
      if (!($80)) {
       $81 = (4096 - ($0))|0;
       $82 = (($path) + ($83)|0);
       $$sum = (($83) + 1)|0;
       $84 = (($path) + ($$sum)|0);
       $85 = (($fd_limit) + -1)|0;
       $87 = $79;
       while(1) {
        $86 = ((($87)) + 11|0);
        $88 = HEAP8[$86>>0]|0;
        $89 = ($88<<24>>24)==(46);
        L51: do {
         if ($89) {
          $90 = ((($87)) + 12|0);
          $91 = HEAP8[$90>>0]|0;
          switch ($91<<24>>24) {
          case 0:  {
           break L51;
           break;
          }
          case 46:  {
           break;
          }
          default: {
           label = 35;
           break L51;
          }
          }
          $92 = ((($87)) + 13|0);
          $93 = HEAP8[$92>>0]|0;
          $94 = ($93<<24>>24)==(0);
          if (!($94)) {
           label = 35;
          }
         } else {
          label = 35;
         }
        } while(0);
        if ((label|0) == 35) {
         label = 0;
         $95 = (_strlen($86)|0);
         $96 = ($95>>>0)<($81>>>0);
         if (!($96)) {
          label = 36;
          break;
         }
         HEAP8[$82>>0] = 47;
         (_strcpy($84,$86)|0);
         $98 = (_do_nftw($path,$fn,$85,$flags,$new)|0);
         $99 = ($98|0)==(0);
         if (!($99)) {
          $$lcssa = $98;
          label = 39;
          break;
         }
        }
        $100 = (_readdir($77)|0);
        $101 = ($100|0)==(0|0);
        if ($101) {
         break L47;
        } else {
         $87 = $100;
        }
       }
       if ((label|0) == 36) {
        $97 = (___errno_location()|0);
        HEAP32[$97>>2] = 36;
        (_closedir($77)|0);
        $$0 = -1;
        break L21;
       }
       else if ((label|0) == 39) {
        (_closedir($77)|0);
        $$0 = $$lcssa;
        break L21;
       }
      }
     } while(0);
     (_closedir($77)|0);
    }
   } while(0);
   $105 = (($path) + ($0)|0);
   HEAP8[$105>>0] = 0;
   if ($60) {
    $106 = (FUNCTION_TABLE_iiiii[$fn & 0]($path,$st,$type$0,$lev)|0);
    $107 = ($106|0)==(0);
    if (!($107)) {
     $$0 = $106;
     break;
    }
   }
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _do_setrlimit($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = ((($p)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$p>>2]|0;
  $6 = (___setrlimit($4,$5)|0);
  $7 = (0 - ($6))|0;
  HEAP32[$0>>2] = $7;
 }
 return;
}
function ___openlog() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_socket(1,524290,0)|0);
 $1 = ($0|0)<(0);
 do {
  if (!($1)) {
   $2 = (_connect($0,146032,12)|0);
   $3 = ($2|0)<(0);
   if ($3) {
    (_close($0)|0);
    break;
   } else {
    HEAP32[14864>>2] = $0;
    break;
   }
  }
 } while(0);
 return;
}
function _reap($pid) {
 $pid = $pid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $status = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $status = sp;
 while(1) {
  $0 = (_waitpid(($pid|0),($status|0),0)|0);
  $1 = ($0|0)<(0);
  if ($1) {
   $2 = (___errno_location()|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(4);
   if ($4) {
    continue;
   } else {
    break;
   }
  } else {
   $5 = HEAP32[$status>>2]|0;
   $6 = $5 & 127;
   $7 = ($6|0)==(0);
   if ($7) {
    break;
   } else {
    continue;
   }
  }
 }
 STACKTOP = sp;return;
}
function _list_add($list,$head,$ifname) {
 $list = $list|0;
 $head = $head|0;
 $ifname = $ifname|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,132)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = ((($0)) + 112|0);
  (_strcpy($2,$ifname)|0);
  $3 = ((($0)) + 4|0);
  HEAP32[$3>>2] = $2;
  $4 = HEAP32[$head>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   HEAP32[$4>>2] = $0;
  }
  HEAP32[$head>>2] = $0;
  $6 = HEAP32[$list>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   HEAP32[$list>>2] = $0;
  }
 }
 return ($0|0);
}
function _cleanup($p) {
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $p;
 (_close($0)|0);
 return;
}
function ___srandom($seed) {
 $seed = $seed|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $k$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[15560>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[15572>>2]|0;
  HEAP32[$2>>2] = $seed;
 } else {
  $3 = ($0|0)==(31);
  $4 = ($0|0)==(7);
  $5 = $3 | $4;
  $6 = $5 ? 3 : 1;
  HEAP32[15564>>2] = $6;
  HEAP32[15568>>2] = 0;
  $7 = ($0|0)>(0);
  if ($7) {
   $8 = HEAP32[15572>>2]|0;
   $10 = 0;$9 = $seed;$k$01 = 0;
   while(1) {
    $11 = (___muldi3(($9|0),($10|0),1284865837,1481765933)|0);
    $12 = tempRet0;
    $13 = (_i64Add(($11|0),($12|0),1,0)|0);
    $14 = tempRet0;
    $15 = (($8) + ($k$01<<2)|0);
    HEAP32[$15>>2] = $14;
    $16 = (($k$01) + 1)|0;
    $17 = HEAP32[15560>>2]|0;
    $18 = ($16|0)<($17|0);
    if ($18) {
     $10 = $14;$9 = $13;$k$01 = $16;
    } else {
     $20 = $8;
     break;
    }
   }
  } else {
   $$pre = HEAP32[15572>>2]|0;
   $20 = $$pre;
  }
  $19 = HEAP32[$20>>2]|0;
  $21 = $19 | 1;
  HEAP32[$20>>2] = $21;
 }
 return;
}
function _pat_next($pat,$m,$step,$flags) {
 $pat = $pat|0;
 $m = $m|0;
 $step = $step|0;
 $flags = $flags|0;
 var $$ = 0, $$0 = 0, $$02 = 0, $$5 = 0, $$k$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $esc$0 = 0, $k$0 = 0, $k$1$ph = 0, $k$114 = 0, $k$2$lcssa = 0, $k$2$ph = 0, $k$29 = 0, $k$3 = 0, $k$4 = 0, $not$ = 0, $or$cond = 0, $or$cond4 = 0, $wc = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wc = sp;
 $0 = ($m|0)==(0);
 L1: do {
  if ($0) {
   label = 3;
  } else {
   $1 = HEAP8[$pat>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    label = 3;
   } else {
    HEAP32[$step>>2] = 1;
    $3 = HEAP8[$pat>>0]|0;
    switch ($3<<24>>24) {
    case 42:  {
     $$0 = -5;
     break L1;
     break;
    }
    case 92:  {
     $4 = ((($pat)) + 1|0);
     $5 = HEAP8[$4>>0]|0;
     $6 = ($5<<24>>24)!=(0);
     $7 = $flags & 2;
     $8 = ($7|0)==(0);
     $or$cond = $8 & $6;
     if ($or$cond) {
      HEAP32[$step>>2] = 2;
      $$pre = HEAP8[$4>>0]|0;
      $$02 = $4;$53 = $$pre;$esc$0 = 1;
      label = 31;
     } else {
      $60 = 92;
     }
     break;
    }
    case 91:  {
     $9 = ($m>>>0)>(1);
     L8: do {
      if ($9) {
       $10 = ((($pat)) + 1|0);
       $11 = HEAP8[$10>>0]|0;
       switch ($11<<24>>24) {
       case 33: case 94:  {
        break;
       }
       default: {
        $k$0 = 1;
        break L8;
       }
       }
       $k$0 = 2;
      } else {
       $k$0 = 1;
      }
     } while(0);
     $12 = ($k$0>>>0)<($m>>>0);
     if ($12) {
      $13 = (($pat) + ($k$0)|0);
      $14 = HEAP8[$13>>0]|0;
      $15 = ($14<<24>>24)==(93);
      $16 = $15&1;
      $$k$0 = (($16) + ($k$0))|0;
      $k$1$ph = $$k$0;
     } else {
      $k$1$ph = $k$0;
     }
     $17 = ($k$1$ph>>>0)<($m>>>0);
     L15: do {
      if ($17) {
       $k$114 = $k$1$ph;
       while(1) {
        $18 = (($pat) + ($k$114)|0);
        $19 = HEAP8[$18>>0]|0;
        switch ($19<<24>>24) {
        case 93: case 0:  {
         $k$4 = $k$114;
         label = 26;
         break L15;
         break;
        }
        default: {
        }
        }
        $20 = (($k$114) + 1)|0;
        $21 = ($20>>>0)<($m>>>0);
        L19: do {
         if ($21) {
          $22 = (($pat) + ($20)|0);
          $23 = HEAP8[$22>>0]|0;
          $24 = ($23<<24>>24)!=(0);
          $25 = ($19<<24>>24)==(91);
          $or$cond4 = $25 & $24;
          if ($or$cond4) {
           switch ($23<<24>>24) {
           case 61: case 46: case 58:  {
            break;
           }
           default: {
            $k$3 = $k$114;
            break L19;
           }
           }
           $26 = (($k$114) + 2)|0;
           $27 = ($26>>>0)<($m>>>0);
           if ($27) {
            $28 = (($pat) + ($26)|0);
            $29 = HEAP8[$28>>0]|0;
            $30 = ($29<<24>>24)==(0);
            $31 = (($k$114) + 3)|0;
            $$ = $30 ? $26 : $31;
            $k$2$ph = $$;
           } else {
            $k$2$ph = $26;
           }
           $32 = ($k$2$ph>>>0)<($m>>>0);
           L26: do {
            if ($32) {
             $k$29 = $k$2$ph;
             while(1) {
              $33 = (($pat) + ($k$29)|0);
              $34 = HEAP8[$33>>0]|0;
              $35 = ($34<<24>>24)==(0);
              if ($35) {
               $k$2$lcssa = $k$29;
               break L26;
              }
              $36 = (($k$29) + -1)|0;
              $37 = (($pat) + ($36)|0);
              $38 = HEAP8[$37>>0]|0;
              $39 = ($34<<24>>24)!=(93);
              $not$ = ($38<<24>>24)!=($23<<24>>24);
              $$5 = $39 | $not$;
              if (!($$5)) {
               $k$2$lcssa = $k$29;
               break L26;
              }
              $40 = (($k$29) + 1)|0;
              $41 = ($40>>>0)<($m>>>0);
              if ($41) {
               $k$29 = $40;
              } else {
               $k$2$lcssa = $40;
               break;
              }
             }
            } else {
             $k$2$lcssa = $k$2$ph;
            }
           } while(0);
           $42 = ($k$2$lcssa|0)==($m|0);
           if ($42) {
            break L15;
           }
           $43 = (($pat) + ($k$2$lcssa)|0);
           $44 = HEAP8[$43>>0]|0;
           $45 = ($44<<24>>24)==(0);
           if ($45) {
            $k$4 = $k$2$lcssa;
            label = 26;
            break L15;
           } else {
            $k$3 = $k$2$lcssa;
           }
          } else {
           $k$3 = $k$114;
          }
         } else {
          $k$3 = $k$114;
         }
        } while(0);
        $46 = (($k$3) + 1)|0;
        $47 = ($46>>>0)<($m>>>0);
        if ($47) {
         $k$114 = $46;
        } else {
         $k$4 = $46;
         label = 26;
         break L15;
        }
       }
      } else {
       $k$4 = $k$1$ph;
       label = 26;
      }
     } while(0);
     if ((label|0) == 26) {
      $48 = ($k$4|0)==($m|0);
      if (!($48)) {
       $49 = (($pat) + ($k$4)|0);
       $50 = HEAP8[$49>>0]|0;
       $51 = ($50<<24>>24)==(0);
       if (!($51)) {
        $52 = (($k$4) + 1)|0;
        HEAP32[$step>>2] = $52;
        $$0 = -3;
        break L1;
       }
      }
     }
     HEAP32[$step>>2] = 1;
     $$0 = 91;
     break L1;
     break;
    }
    case 63:  {
     $$0 = -4;
     break L1;
     break;
    }
    default: {
     $$02 = $pat;$53 = $3;$esc$0 = 0;
     label = 31;
    }
    }
    if ((label|0) == 31) {
     $54 = ($53<<24>>24)<(0);
     if ($54) {
      $55 = (_mbtowc($wc,$$02,$m)|0);
      $56 = ($55|0)<(0);
      if ($56) {
       HEAP32[$step>>2] = 0;
       $$0 = -2;
       break;
      } else {
       $57 = (($55) + ($esc$0))|0;
       HEAP32[$step>>2] = $57;
       $58 = HEAP32[$wc>>2]|0;
       $$0 = $58;
       break;
      }
     } else {
      $60 = $53;
     }
    }
    $59 = $60 << 24 >> 24;
    $$0 = $59;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  HEAP32[$step>>2] = 0;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _fnmatch_internal($pat,$m,$str,$n,$flags) {
 $pat = $pat|0;
 $m = $m|0;
 $str = $str|0;
 $n = $n|0;
 $flags = $flags|0;
 var $$0 = 0, $$01 = 0, $$01$lcssa187 = 0, $$02 = 0, $$02$lcssa185 = 0, $$03 = 0, $$03$lcssa183 = 0, $$06 = 0, $$06$lcssa181 = 0, $$1$ph52 = 0, $$14$ph51 = 0, $$1450$be = 0, $$1450148 = 0, $$25$pn = 0, $$3 = 0, $$lcssa = 0, $$lcssa191 = 0, $$lcssa28 = 0, $$lcssa31 = 0, $$phi$trans$insert = 0;
 var $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond150 = 0, $p$063 = 0, $p$153 = 0, $p$153$phi = 0, $p$245 = 0, $p$245$phi = 0, $pinc = 0, $ptail$0$lcssa = 0, $ptail$064 = 0, $ptail$1 = 0, $s$0$lcssa = 0;
 var $s$057 = 0, $s$1151 = 0, $s$1151$phi = 0, $s$2 = 0, $s$354 = 0, $s$4$lcssa = 0, $s$446 = 0, $sinc = 0, $tailcnt$0$lcssa = 0, $tailcnt$065 = 0, $tailcnt$1 = 0, $tailcnt$258 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pinc = sp + 4|0;
 $sinc = sp;
 $0 = $flags & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $$01 = $pat;$$02 = $n;$$03 = $str;$$06 = $m;
  label = 4;
 } else {
  $2 = HEAP8[$str>>0]|0;
  $3 = ($2<<24>>24)==(46);
  if ($3) {
   $4 = HEAP8[$pat>>0]|0;
   $5 = ($4<<24>>24)==(46);
   if ($5) {
    $$01 = $pat;$$02 = $n;$$03 = $str;$$06 = $m;
    label = 4;
   } else {
    $$0 = 1;
   }
  } else {
   $$01 = $pat;$$02 = $n;$$03 = $str;$$06 = $m;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   L5: while(1) {
    label = 0;
    $6 = (_pat_next($$01,$$06,$pinc,$flags)|0);
    switch ($6|0) {
    case -2:  {
     $$0 = 1;
     break L4;
     break;
    }
    case -5:  {
     $$01$lcssa187 = $$01;$$02$lcssa185 = $$02;$$03$lcssa183 = $$03;$$06$lcssa181 = $$06;
     break L5;
     break;
    }
    default: {
    }
    }
    $13 = (_str_next($$03,$$02,$sinc)|0);
    $14 = ($13|0)<(1);
    if ($14) {
     $$lcssa191 = $6;
     label = 8;
     break;
    }
    $16 = HEAP32[$sinc>>2]|0;
    $17 = (($$03) + ($16)|0);
    $18 = (($$02) - ($16))|0;
    switch ($6|0) {
    case -3:  {
     $19 = (_match_bracket($$01,$13)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      $$0 = 1;
      break L4;
     }
     break;
    }
    case -4:  {
     break;
    }
    default: {
     $21 = ($13|0)==($6|0);
     if (!($21)) {
      $$0 = 1;
      break L4;
     }
    }
    }
    $22 = HEAP32[$pinc>>2]|0;
    $23 = (($$01) + ($22)|0);
    $24 = (($$06) - ($22))|0;
    $$01 = $23;$$02 = $18;$$03 = $17;$$06 = $24;
    label = 4;
   }
   if ((label|0) == 8) {
    $not$ = ($$lcssa191|0)!=(0);
    $15 = $not$&1;
    $$0 = $15;
    break;
   }
   $7 = ((($$01$lcssa187)) + 1|0);
   $8 = (($$06$lcssa181) + -1)|0;
   $9 = (_strnlen($7,$8)|0);
   $$sum = (($9) + 1)|0;
   $10 = (($$01$lcssa187) + ($$sum)|0);
   $11 = ($$sum|0)>(1);
   L16: do {
    if ($11) {
     $12 = $10;
     $p$063 = $7;$ptail$064 = $7;$tailcnt$065 = 0;
     while(1) {
      $25 = $p$063;
      $26 = (($12) - ($25))|0;
      $27 = (_pat_next($p$063,$26,$pinc,$flags)|0);
      switch ($27|0) {
      case -2:  {
       $$0 = 1;
       break L4;
       break;
      }
      case -5:  {
       $28 = ((($p$063)) + 1|0);
       $ptail$1 = $28;$tailcnt$1 = 0;
       break;
      }
      default: {
       $29 = (($tailcnt$065) + 1)|0;
       $ptail$1 = $ptail$064;$tailcnt$1 = $29;
      }
      }
      $30 = HEAP32[$pinc>>2]|0;
      $31 = (($p$063) + ($30)|0);
      $32 = ($31>>>0)<($10>>>0);
      if ($32) {
       $p$063 = $31;$ptail$064 = $ptail$1;$tailcnt$065 = $tailcnt$1;
      } else {
       $ptail$0$lcssa = $ptail$1;$tailcnt$0$lcssa = $tailcnt$1;
       break L16;
      }
     }
    } else {
     $ptail$0$lcssa = $7;$tailcnt$0$lcssa = 0;
    }
   } while(0);
   $33 = (_strnlen($$03$lcssa183,$$02$lcssa185)|0);
   $34 = (($$03$lcssa183) + ($33)|0);
   $35 = ($33>>>0)<($tailcnt$0$lcssa>>>0);
   if ($35) {
    $$0 = 1;
   } else {
    $36 = ($33|0)>(0);
    $37 = ($tailcnt$0$lcssa|0)!=(0);
    $38 = $36 & $37;
    if ($38) {
     $s$057 = $34;$tailcnt$258 = $tailcnt$0$lcssa;
     while(1) {
      $39 = ((($s$057)) + -1|0);
      $40 = HEAP8[$39>>0]|0;
      $41 = ($40<<24>>24)>(-1);
      if ($41) {
       $s$2 = $39;
      } else {
       $42 = ((($s$057)) + -1|0);
       $43 = $40 & -64;
       $44 = ($43<<24>>24)==(-128);
       $45 = ($42>>>0)>($$03$lcssa183>>>0);
       $or$cond150 = $45 & $44;
       if ($or$cond150) {
        $47 = $42;$s$1151 = $s$057;
        while(1) {
         $$phi$trans$insert = ((($s$1151)) + -2|0);
         $$pre = HEAP8[$$phi$trans$insert>>0]|0;
         $46 = ((($47)) + -1|0);
         $48 = $$pre & -64;
         $49 = ($48<<24>>24)==(-128);
         $50 = ($46>>>0)>($$03$lcssa183>>>0);
         $or$cond = $50 & $49;
         if ($or$cond) {
          $s$1151$phi = $47;$47 = $46;$s$1151 = $s$1151$phi;
         } else {
          $s$2 = $46;
          break;
         }
        }
       } else {
        $s$2 = $42;
       }
      }
      $51 = (($tailcnt$258) + -1)|0;
      $52 = ($s$2>>>0)>($$03$lcssa183>>>0);
      $53 = ($51|0)!=(0);
      $54 = $52 & $53;
      if ($54) {
       $s$057 = $s$2;$tailcnt$258 = $51;
      } else {
       $$lcssa31 = $53;$s$0$lcssa = $s$2;
       break;
      }
     }
    } else {
     $$lcssa31 = $37;$s$0$lcssa = $34;
    }
    if ($$lcssa31) {
     $$0 = 1;
    } else {
     $55 = $10;
     $56 = $ptail$0$lcssa;
     $57 = (($55) - ($56))|0;
     $58 = (_pat_next($ptail$0$lcssa,$57,$pinc,$flags)|0);
     $59 = HEAP32[$pinc>>2]|0;
     $60 = $34;
     $61 = $s$0$lcssa;
     $62 = (($60) - ($61))|0;
     $63 = (_str_next($s$0$lcssa,$62,$sinc)|0);
     $64 = ($63|0)<(1);
     L36: do {
      if ($64) {
       $$lcssa28 = $58;
      } else {
       $65 = (($ptail$0$lcssa) + ($59)|0);
       $70 = $58;$71 = $63;$75 = $65;$p$153 = $ptail$0$lcssa;$s$354 = $s$0$lcssa;
       while(1) {
        $68 = HEAP32[$sinc>>2]|0;
        $69 = (($s$354) + ($68)|0);
        switch ($70|0) {
        case -3:  {
         $72 = (_match_bracket($p$153,$71)|0);
         $73 = ($72|0)==(0);
         if ($73) {
          $$0 = 1;
          break L4;
         }
         break;
        }
        case -4:  {
         break;
        }
        default: {
         $74 = ($71|0)==($70|0);
         if (!($74)) {
          $$0 = 1;
          break L4;
         }
        }
        }
        $76 = $75;
        $77 = (($55) - ($76))|0;
        $78 = (_pat_next($75,$77,$pinc,$flags)|0);
        $79 = HEAP32[$pinc>>2]|0;
        $80 = (($75) + ($79)|0);
        $81 = $69;
        $82 = (($60) - ($81))|0;
        $83 = (_str_next($69,$82,$sinc)|0);
        $84 = ($83|0)<(1);
        if ($84) {
         $$lcssa28 = $78;
         break L36;
        } else {
         $p$153$phi = $75;$70 = $78;$71 = $83;$75 = $80;$s$354 = $69;$p$153 = $p$153$phi;
        }
       }
      }
     } while(0);
     $66 = ($$lcssa28|0)==(0);
     if ($66) {
      $67 = ($7>>>0)<($ptail$0$lcssa>>>0);
      if ($67) {
       $$1$ph52 = $7;$$14$ph51 = $$03$lcssa183;
       while(1) {
        $86 = $$1$ph52;
        $87 = (($56) - ($86))|0;
        $88 = (_pat_next($$1$ph52,$87,$pinc,$flags)|0);
        $89 = HEAP32[$pinc>>2]|0;
        $90 = (($$1$ph52) + ($89)|0);
        $91 = ($88|0)==(-5);
        L48: do {
         if ($91) {
          $$lcssa = $90;$s$4$lcssa = $$14$ph51;
         } else {
          $$1450148 = $$14$ph51;$123 = $90;$124 = $88;
          while(1) {
           $102 = $123;$96 = $124;$p$245 = $$1$ph52;$s$446 = $$1450148;
           L51: while(1) {
            $92 = $s$446;
            $93 = (($61) - ($92))|0;
            $94 = (_str_next($s$446,$93,$sinc)|0);
            $95 = ($94|0)==(0);
            if ($95) {
             $$0 = 1;
             break L4;
            }
            switch ($96|0) {
            case -3:  {
             $97 = (_match_bracket($p$245,$94)|0);
             $98 = ($97|0)==(0);
             if ($98) {
              break L51;
             }
             break;
            }
            case -4:  {
             break;
            }
            default: {
             $99 = ($94|0)==($96|0);
             if (!($99)) {
              break L51;
             }
            }
            }
            $100 = HEAP32[$sinc>>2]|0;
            $101 = (($s$446) + ($100)|0);
            $103 = $102;
            $104 = (($56) - ($103))|0;
            $105 = (_pat_next($102,$104,$pinc,$flags)|0);
            $106 = HEAP32[$pinc>>2]|0;
            $107 = (($102) + ($106)|0);
            $108 = ($105|0)==(-5);
            if ($108) {
             $$lcssa = $107;$s$4$lcssa = $101;
             break L48;
            } else {
             $p$245$phi = $102;$102 = $107;$96 = $105;$s$446 = $101;$p$245 = $p$245$phi;
            }
           }
           $109 = $$1450148;
           $110 = (($61) - ($109))|0;
           $111 = (_str_next($$1450148,$110,$sinc)|0);
           $112 = ($111|0)>(0);
           if ($112) {
            $113 = HEAP32[$sinc>>2]|0;
            $114 = (($$1450148) + ($113)|0);
            $$1450$be = $114;
           } else {
            $$25$pn = $$1450148;
            while(1) {
             $$3 = ((($$25$pn)) + 1|0);
             $119 = $$3;
             $120 = (($61) - ($119))|0;
             $121 = (_str_next($$3,$120,$sinc)|0);
             $122 = ($121|0)<(0);
             if ($122) {
              $$25$pn = $$3;
             } else {
              $$1450$be = $$3;
              break;
             }
            }
           }
           $115 = (_pat_next($$1$ph52,$87,$pinc,$flags)|0);
           $116 = HEAP32[$pinc>>2]|0;
           $117 = (($$1$ph52) + ($116)|0);
           $118 = ($115|0)==(-5);
           if ($118) {
            $$lcssa = $117;$s$4$lcssa = $$1450$be;
            break;
           } else {
            $$1450148 = $$1450$be;$123 = $117;$124 = $115;
           }
          }
         }
        } while(0);
        $85 = ($$lcssa>>>0)<($ptail$0$lcssa>>>0);
        if ($85) {
         $$1$ph52 = $$lcssa;$$14$ph51 = $s$4$lcssa;
        } else {
         $$0 = 0;
         break;
        }
       }
      } else {
       $$0 = 0;
      }
     } else {
      $$0 = 1;
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ignore_err($path,$err) {
 $path = $path|0;
 $err = $err|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _match_in_dir($d,$p,$flags,$errfunc,$tail) {
 $d = $d|0;
 $p = $p|0;
 $flags = $flags|0;
 $errfunc = $errfunc|0;
 $tail = $tail|0;
 var $$ = 0, $$0$i = 0, $$012$i = 0, $$03 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$8 = 0, $$alloca_mul = 0, $$alloca_mul1 = 0, $$lcssa = 0, $$lcssa14 = 0, $$lcssa46 = 0, $$lcssa47 = 0, $$lcssa49 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bracket$03$i = 0, $bracket$1$i = 0, $de = 0, $de_buf = 0, $l$0 = 0, $mark$0 = 0, $name$0 = 0, $not$ = 0, $not$11 = 0, $not$20 = 0, $p2$0 = 0, $p2$1 = 0, $st = 0, $st1 = 0, $switch$split2D = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $de_buf = sp + 156|0;
 $de = sp + 152|0;
 $st = sp + 76|0;
 $st1 = sp;
 $0 = (_strlen($p)|0);
 $1 = (($0) + 1)|0;
 $$alloca_mul = $1;
 $2 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $3 = (_strlen($d)|0);
 $4 = $flags & 64;
 $5 = $4 >>> 5;
 $6 = $flags >>> 5;
 $7 = $6 & 4;
 $8 = $7 | $5;
 $9 = $8 ^ 4;
 $10 = (_strchr($p,47)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$03 = $p;$p2$1 = 0;
 } else {
  (_strcpy($2,$p)|0);
  $12 = $10;
  $13 = $p;
  $14 = (($12) - ($13))|0;
  $15 = (($2) + ($14)|0);
  HEAP8[$15>>0] = 0;
  $p2$0 = $10;
  while(1) {
   $16 = HEAP8[$p2$0>>0]|0;
   $17 = ($16<<24>>24)==(47);
   $18 = ((($p2$0)) + 1|0);
   if ($17) {
    $p2$0 = $18;
   } else {
    $$03 = $2;$p2$1 = $p2$0;
    break;
   }
  }
 }
 $19 = HEAP8[$$03>>0]|0;
 $20 = ($19<<24>>24)==(0);
 L6: do {
  if ($20) {
   $$0$i = 1;
  } else {
   $21 = ($4|0)==(0);
   $$012$i = $$03;$23 = $19;$bracket$03$i = 0;
   while(1) {
    $22 = $23 << 24 >> 24;
    switch ($22|0) {
    case 42: case 63:  {
     $$0$i = 0;
     break L6;
     break;
    }
    case 92:  {
     if ($21) {
      $$0$i = 0;
      break L6;
     } else {
      $bracket$1$i = $bracket$03$i;
     }
     break;
    }
    case 91:  {
     $bracket$1$i = 1;
     break;
    }
    case 93:  {
     $24 = ($bracket$03$i|0)==(0);
     if ($24) {
      $bracket$1$i = 0;
     } else {
      $$0$i = 0;
      break L6;
     }
     break;
    }
    default: {
     $bracket$1$i = $bracket$03$i;
    }
    }
    $25 = ((($$012$i)) + 1|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = ($26<<24>>24)==(0);
    if ($27) {
     $$0$i = 1;
     break L6;
    } else {
     $$012$i = $25;$23 = $26;$bracket$03$i = $bracket$1$i;
    }
   }
  }
 } while(0);
 $28 = HEAP8[$d>>0]|0;
 $29 = ($28<<24>>24)==(47);
 if ($29) {
  $30 = ((($d)) + 1|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = ($31<<24>>24)==(0);
  $$ = $32 ? 0 : $3;
  $l$0 = $$;
 } else {
  $l$0 = $3;
 }
 $33 = ($28<<24>>24)!=(0);
 $34 = $33 ? $d : 180290;
 $35 = (_opendir($34)|0);
 $36 = (___errno_location()|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35|0)==(0|0);
 L19: do {
  if ($38) {
   switch ($37|0) {
   case 20:  {
    $$3 = 0;
    break L19;
    break;
   }
   case 13:  {
    $39 = HEAP8[$$03>>0]|0;
    $40 = ($39<<24>>24)==(0);
    if ($40) {
     $41 = (_stat($d,$st)|0);
     $42 = ($41|0)==(0);
     if ($42) {
      $43 = ((($st)) + 12|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = $44 & 61440;
      $46 = ($45|0)==(16384);
      if ($46) {
       $47 = (_append($tail,$d,$l$0,$l$0)|0);
       $not$11 = ($47|0)!=(0);
       $$4 = $not$11&1;
       $$3 = $$4;
       break L19;
      }
     }
    }
    break;
   }
   default: {
   }
   }
   $48 = (FUNCTION_TABLE_iii[$errfunc & 63]($d,$37)|0);
   $49 = $flags & 1;
   $50 = $48 | $49;
   $51 = ($50|0)==(0);
   $$8 = $51 ? 0 : 2;
   $$3 = $$8;
  } else {
   $52 = HEAP8[$$03>>0]|0;
   $53 = ($52<<24>>24)==(0);
   if ($53) {
    $66 = (_append($tail,$d,$l$0,$l$0)|0);
    $67 = ($66|0)!=(0);
    $68 = $67&1;
    (_closedir($35)|0);
    $$3 = $68;
    break;
   }
   $54 = (_readdir_r($35,$de_buf,$de)|0);
   $55 = ($54|0)!=(0);
   $56 = HEAP32[$de>>2]|0;
   $57 = ($56|0)!=(0|0);
   $not$20 = $55 ^ 1;
   $58 = $57 & $not$20;
   L33: do {
    if ($58) {
     $59 = (($l$0) + 2)|0;
     $60 = ($$0$i|0)==(0);
     $61 = ($p2$1|0)!=(0|0);
     $62 = $flags & 2;
     $63 = ($62|0)==(0);
     $64 = (($l$0) + 1)|0;
     $65 = ((($st1)) + 12|0);
     $70 = $56;
     L35: while(1) {
      $69 = ((($70)) + 8|0);
      $71 = HEAP16[$69>>1]|0;
      $72 = $71&65535;
      $73 = (($59) + ($72))|0;
      $74 = (_llvm_stacksave()|0);
      $$alloca_mul1 = $73;
      $75 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul1)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
      $76 = HEAP32[$de>>2]|0;
      $77 = ((($76)) + 11|0);
      if ($60) {
       $78 = (_fnmatch($$03,$77,$9)|0);
       $79 = ($78|0)==(0);
       if ($79) {
        label = 28;
       }
      } else {
       $80 = (_strcmp($$03,$77)|0);
       $81 = ($80|0)==(0);
       if ($81) {
        label = 28;
       }
      }
      L40: do {
       if ((label|0) == 28) {
        label = 0;
        L42: do {
         if ($61) {
          $82 = HEAP32[$de>>2]|0;
          $83 = ((($82)) + 10|0);
          $84 = HEAP8[$83>>0]|0;
          $85 = ($84<<24>>24)==(0);
          if (!($85)) {
           $86 = $84&255;
           $87 = $86 << 12;
           $88 = $87 & 61440;
           $switch$split2D = ($88|0)<(40960);
           if ($switch$split2D) {
            switch ($88|0) {
            case 16384:  {
             break L42;
             break;
            }
            default: {
             break L40;
            }
            }
           } else {
            switch ($88|0) {
            case 40960:  {
             break L42;
             break;
            }
            default: {
             break L40;
            }
            }
           }
          }
         }
        } while(0);
        $89 = HEAP8[$d>>0]|0;
        $90 = ($89<<24>>24)==(0);
        if ($90) {
         $95 = HEAP32[$de>>2]|0;
         $96 = ((($95)) + 11|0);
         $name$0 = $96;
        } else {
         _memcpy(($75|0),($d|0),($l$0|0))|0;
         $91 = (($75) + ($l$0)|0);
         HEAP8[$91>>0] = 47;
         $92 = (($75) + ($64)|0);
         $93 = HEAP32[$de>>2]|0;
         $94 = ((($93)) + 11|0);
         (_strcpy($92,$94)|0);
         $name$0 = $75;
        }
        if ($61) {
         $97 = (_match_in_dir($name$0,$p2$1,$flags,$errfunc,$tail)|0);
         $98 = ($97|0)==(0);
         if ($98) {
          break;
         } else {
          $$lcssa47 = $74;$$lcssa49 = $97;
          label = 36;
          break L35;
         }
        }
        do {
         if ($63) {
          $mark$0 = 0;
         } else {
          $99 = HEAP32[$de>>2]|0;
          $100 = ((($99)) + 10|0);
          $101 = HEAP8[$100>>0]|0;
          $102 = ($101<<24>>24)==(0);
          if (!($102)) {
           $103 = $101&255;
           $104 = $103 << 12;
           $105 = $104 & 61440;
           $106 = ($105|0)==(40960);
           if (!($106)) {
            $107 = ($105|0)==(16384);
            $108 = $107&1;
            $mark$0 = $108;
            break;
           }
          }
          (_stat($name$0,$st1)|0);
          $109 = HEAP32[$65>>2]|0;
          $110 = $109 & 61440;
          $111 = ($110|0)==(16384);
          $112 = $111&1;
          $mark$0 = $112;
         }
        } while(0);
        $113 = HEAP32[$de>>2]|0;
        $114 = ((($113)) + 8|0);
        $115 = HEAP16[$114>>1]|0;
        $116 = $115&65535;
        $117 = (($64) + ($116))|0;
        $118 = (_append($tail,$name$0,$117,$mark$0)|0);
        $119 = ($118|0)==(0);
        if (!($119)) {
         $$lcssa46 = $74;
         label = 43;
         break L35;
        }
       }
      } while(0);
      _llvm_stackrestore(($74|0));
      $120 = (_readdir_r($35,$de_buf,$de)|0);
      $121 = ($120|0)!=(0);
      $122 = HEAP32[$de>>2]|0;
      $123 = ($122|0)!=(0|0);
      $not$ = $121 ^ 1;
      $124 = $123 & $not$;
      if ($124) {
       $70 = $122;
      } else {
       $$lcssa = $120;$$lcssa14 = $121;
       break L33;
      }
     }
     if ((label|0) == 36) {
      (_closedir($35)|0);
      $$2 = $$lcssa49;$125 = $$lcssa47;
     }
     else if ((label|0) == 43) {
      (_closedir($35)|0);
      $$2 = 1;$125 = $$lcssa46;
     }
     _llvm_stackrestore(($125|0));
     $$3 = $$2;
     break L19;
    } else {
     $$lcssa = $54;$$lcssa14 = $55;
    }
   } while(0);
   (_closedir($35)|0);
   if ($$lcssa14) {
    $126 = (FUNCTION_TABLE_iii[$errfunc & 63]($d,$$lcssa)|0);
    $127 = $flags & 1;
    $128 = $126 | $127;
    $129 = ($128|0)==(0);
    if (!($129)) {
     $$3 = 2;
     break;
    }
   }
   $$3 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function _append($tail,$name,$len,$mark) {
 $tail = $tail|0;
 $name = $name|0;
 $len = $len|0;
 $mark = $mark|0;
 var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $endptr = 0, $strlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($len) + 9)|0;
 $1 = (_malloc($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = -1;
 } else {
  $3 = HEAP32[$tail>>2]|0;
  HEAP32[$3>>2] = $1;
  HEAP32[$1>>2] = 0;
  $4 = ((($1)) + 4|0);
  (_strcpy($4,$name)|0);
  $5 = ($mark|0)==(0);
  if (!($5)) {
   $strlen = (_strlen($4)|0);
   $$sum = (($strlen) + 4)|0;
   $endptr = (($1) + ($$sum)|0);
   HEAP8[$endptr>>0]=47&255;HEAP8[$endptr+1>>0]=47>>8;
  }
  HEAP32[$tail>>2] = $1;
  $$0 = 0;
 }
 return ($$0|0);
}
function _sort($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = HEAP32[$b>>2]|0;
 $2 = (_strcmp($0,$1)|0);
 return ($2|0);
}
function _tre_parse($ctx) {
 $ctx = $ctx|0;
 var $$ = 0, $$$i$i = 0, $$0$i46 = 0, $$0$i48 = 0, $$0$i50 = 0, $$0$i52 = 0, $$0$i54 = 0, $$0$i56 = 0, $$14$i$i = 0, $$16 = 0, $$181 = 0, $$2 = 0, $$be = 0, $$in = 0, $$in$i = 0, $$in136 = 0, $$in17$i = 0, $$in1726$i = 0, $$in79 = 0, $$in80 = 0;
 var $$in81 = 0, $$lcssa$i = 0, $$lcssa100 = 0, $$lcssa113 = 0, $$lcssa223 = 0, $$lcssa235 = 0, $$max$0$i = 0, $$min$0$i = 0, $$mux = 0, $$not = 0, $$not124 = 0, $$not17 = 0, $$off$i = 0, $$old11$i$i = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$phiZ2D = 0, $$pre155 = 0, $$pre156 = 0, $$pre158 = 0;
 var $$pre45$i = 0, $$status$0 = 0, $$status$0$i = 0, $$sum$i$i = 0, $$sum13$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $ccurr$0$lcssa$i$i = 0, $ccurr$036$i$i = 0, $ccurr$1$lcssa$i$i = 0, $ccurr$143$i$i = 0, $class$0$i$i = 0, $class$1$i$i = 0, $class$16779$i$i = 0, $class$16780$i$i = 0, $clen$0 = 0, $clen$0$i$i = 0, $clen$1$i$i = 0, $curr_max$027$i = 0, $curr_max$1$i = 0, $curr_max$12$i = 0;
 var $curr_min$0$lcssa$i = 0, $curr_min$028$i = 0, $curr_min$1$i = 0, $curr_min$13$i = 0, $depth$0$be = 0, $depth$0$lcssa = 0, $depth$0126 = 0, $endptr$0$i$i = 0, $i$0$lcssa = 0, $i$01$i = 0, $i$0123 = 0, $i$i$i = 0, $item$i = 0, $item$i$byval_copy = 0, $item$i18 = 0, $item$i18$byval_copy = 0, $item$i19 = 0, $item$i19$byval_copy = 0, $item$i20 = 0, $item$i20$byval_copy = 0;
 var $item$i21 = 0, $item$i21$byval_copy = 0, $item$i22 = 0, $item$i22$byval_copy = 0, $item$i23 = 0, $item$i23$byval_copy = 0, $item$i24 = 0, $item$i24$byval_copy = 0, $item$i25 = 0, $item$i25$byval_copy = 0, $item$i26 = 0, $item$i26$byval_copy = 0, $item$i27 = 0, $item$i27$byval_copy = 0, $item$i28 = 0, $item$i28$byval_copy = 0, $item$i29 = 0, $item$i29$byval_copy = 0, $item$i32 = 0, $item$i32$byval_copy = 0;
 var $item$i33 = 0, $item$i33$byval_copy = 0, $item$i34 = 0, $item$i34$byval_copy = 0, $item$i35 = 0, $item$i35$byval_copy = 0, $item$i36 = 0, $item$i36$byval_copy = 0, $item$i38 = 0, $item$i38$byval_copy = 0, $item$i39 = 0, $item$i39$byval_copy = 0, $item$i40 = 0, $item$i40$byval_copy = 0, $item$i41 = 0, $item$i41$byval_copy = 0, $item$i66 = 0, $item$i66$byval_copy = 0, $items$i = 0, $j$025$i = 0;
 var $l$0$i = 0, $l$1$i = 0, $max$0$i = 0, $max$0$i$i = 0, $max$027$i = 0, $max$06975$i$i = 0, $max$06976$i$i = 0, $max_i$i$i = 0, $min$0$i = 0, $min$0$i$i = 0, $min$06877$i$i = 0, $min$06878$i$i = 0, $min$1$i$i = 0, $min$2$i$i = 0, $min$2$lcssa$i$i = 0, $min$235$i$i = 0, $min$237$i$i = 0, $min$3$lcssa$i$i = 0, $min$342$i$i = 0, $min$4$i$i = 0;
 var $neg_classes$i = 0, $negate$0$i = 0, $node$0$lcssa$i = 0, $node$029$i = 0, $node$1$i = 0, $node$2$i = 0, $not$$i$i = 0, $notrhs = 0, $num$0$op$i$i = 0, $num$0$op$i11$i = 0, $num$0$op$op$i$i = 0, $num$0$op$op$i12$i = 0, $num$01$i$i = 0, $num$01$i10$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i43 = 0, $or$cond11 = 0, $or$cond11125 = 0;
 var $or$cond15$i$i = 0, $or$cond16$i$i = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $r$02$i$i = 0, $r$02$i9$i = 0, $re$1$i$i = 0, $re$1$i$i$lcssa225 = 0, $re$2$i$i = 0, $re$3$i$i = 0, $re$37073$i$i = 0, $re$37074$i$i = 0, $re$4$i$i = 0, $rep_max$0 = 0, $status$0$be = 0, $status$0$lcssa = 0, $status$0$lcssa$i = 0, $status$1$$i$i = 0, $status$10$i$i = 0;
 var $status$2$i = 0, $status$2$i$i = 0, $status$3$i$i = 0, $status$4$i$i = 0, $status$5$i = 0, $status$5$i$i = 0, $status$6$i$i = 0, $status$7$i$i = 0, $status$7$i$i$lcssa = 0, $status$8$i$i = 0, $storemerge = 0, $storemerge$i = 0, $storemerge13$lcssa = 0, $subctx = 0, $tmp = 0, $tmp4 = 0, $tmp_str$i$i = 0, $wc = 0, $wc$i$i = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $item$i66$byval_copy = sp + 500|0;
 $item$i41$byval_copy = sp + 496|0;
 $item$i40$byval_copy = sp + 492|0;
 $item$i39$byval_copy = sp + 488|0;
 $item$i38$byval_copy = sp + 484|0;
 $item$i36$byval_copy = sp + 480|0;
 $item$i35$byval_copy = sp + 476|0;
 $item$i34$byval_copy = sp + 472|0;
 $item$i33$byval_copy = sp + 468|0;
 $item$i32$byval_copy = sp + 464|0;
 $item$i29$byval_copy = sp + 460|0;
 $item$i28$byval_copy = sp + 456|0;
 $item$i27$byval_copy = sp + 452|0;
 $item$i26$byval_copy = sp + 448|0;
 $item$i25$byval_copy = sp + 444|0;
 $item$i24$byval_copy = sp + 440|0;
 $item$i23$byval_copy = sp + 436|0;
 $item$i22$byval_copy = sp + 432|0;
 $item$i21$byval_copy = sp + 428|0;
 $item$i20$byval_copy = sp + 424|0;
 $item$i19$byval_copy = sp + 420|0;
 $item$i18$byval_copy = sp + 416|0;
 $item$i$byval_copy = sp + 412|0;
 $item$i66 = sp + 408|0;
 $i$i$i = sp + 404|0;
 $max_i$i$i = sp + 400|0;
 $wc$i$i = sp + 396|0;
 $tmp_str$i$i = sp + 544|0;
 $items$i = sp + 392|0;
 $neg_classes$i = sp + 136|0;
 $item$i41 = sp + 132|0;
 $item$i40 = sp + 128|0;
 $item$i39 = sp + 124|0;
 $item$i38 = sp + 120|0;
 $item$i36 = sp + 116|0;
 $item$i35 = sp + 112|0;
 $item$i34 = sp + 108|0;
 $item$i33 = sp + 104|0;
 $item$i32 = sp + 100|0;
 $item$i29 = sp + 96|0;
 $item$i28 = sp + 92|0;
 $item$i27 = sp + 88|0;
 $item$i26 = sp + 84|0;
 $item$i25 = sp + 80|0;
 $item$i24 = sp + 76|0;
 $item$i23 = sp + 72|0;
 $item$i22 = sp + 68|0;
 $item$i21 = sp + 64|0;
 $item$i20 = sp + 60|0;
 $item$i19 = sp + 56|0;
 $item$i18 = sp + 52|0;
 $item$i = sp + 48|0;
 $wc = sp + 44|0;
 $subctx = sp;
 $tmp = sp + 536|0;
 $tmp4 = sp + 504|0;
 $0 = ((($ctx)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($ctx)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = ((($ctx)) + 20|0);
  $8 = HEAP32[$7>>2]|0;
  HEAP32[$item$i>>2] = $8;
  ;HEAP32[$item$i$byval_copy>>2]=HEAP32[$item$i>>2]|0;
  (_tre_stack_push($1,$item$i$byval_copy)|0);
  HEAP32[$item$i18>>2] = 2;
  ;HEAP32[$item$i18$byval_copy>>2]=HEAP32[$item$i18>>2]|0;
  (_tre_stack_push($1,$item$i18$byval_copy)|0);
  $9 = HEAP32[$7>>2]|0;
  $10 = (($9) + 1)|0;
  HEAP32[$7>>2] = $10;
 }
 HEAP32[$item$i19>>2] = 0;
 ;HEAP32[$item$i19$byval_copy>>2]=HEAP32[$item$i19>>2]|0;
 $11 = (_tre_stack_push($1,$item$i19$byval_copy)|0);
 $12 = ((($ctx)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($ctx)) + 16|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$2>>2]|0;
 $16 = ($15|0)>($3|0);
 $17 = ($11|0)==(0);
 $18 = $17 & $16;
 $$not124 = $18 ^ 1;
 $19 = ($11|0)!=(0);
 $or$cond11125 = $19 | $$not124;
 L4: do {
  if ($or$cond11125) {
   $$lcssa100 = 0;$$lcssa113 = $17;$depth$0$lcssa = 0;$status$0$lcssa = $11;
   label = 229;
  } else {
   $20 = ((($1)) + 16|0);
   $21 = ((($ctx)) + 36|0);
   $22 = ((($ctx)) + 24|0);
   $23 = ((($ctx)) + 20|0);
   $24 = ((($ctx)) + 28|0);
   $25 = ((($tmp)) + 1|0);
   $26 = ((($subctx)) + 12|0);
   $27 = ((($subctx)) + 40|0);
   $28 = ((($subctx)) + 24|0);
   $29 = ((($subctx)) + 8|0);
   $31 = $15;$73 = 0;$depth$0126 = 0;
   L6: while(1) {
    $30 = (($31) + -1)|0;
    HEAP32[$2>>2] = $30;
    $32 = HEAP32[$20>>2]|0;
    $33 = (($32) + ($30<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    L8: do {
     switch ($34|0) {
     case 0:  {
      $40 = HEAP32[$21>>2]|0;
      $41 = $40 & 1;
      $42 = ($41|0)==(0);
      if (!($42)) {
       HEAP32[$item$i20>>2] = 7;
       ;HEAP32[$item$i20$byval_copy>>2]=HEAP32[$item$i20>>2]|0;
       $43 = (_tre_stack_push($1,$item$i20$byval_copy)|0);
       $44 = ($43|0)==(0);
       if (!($44)) {
        $$be = $73;$depth$0$be = $depth$0126;$status$0$be = $43;
        break L8;
       }
      }
      HEAP32[$item$i21>>2] = 3;
      ;HEAP32[$item$i21$byval_copy>>2]=HEAP32[$item$i21>>2]|0;
      $45 = (_tre_stack_push($1,$item$i21$byval_copy)|0);
      $$be = $73;$depth$0$be = $depth$0126;$status$0$be = $45;
      break;
     }
     case 3:  {
      HEAP32[$item$i22>>2] = 5;
      ;HEAP32[$item$i22$byval_copy>>2]=HEAP32[$item$i22>>2]|0;
      $46 = (_tre_stack_push($1,$item$i22$byval_copy)|0);
      $47 = ($46|0)==(0);
      if ($47) {
       HEAP32[$item$i23>>2] = 4;
       ;HEAP32[$item$i23$byval_copy>>2]=HEAP32[$item$i23>>2]|0;
       $48 = (_tre_stack_push($1,$item$i23$byval_copy)|0);
       $$be = $73;$depth$0$be = $depth$0126;$status$0$be = $48;
      } else {
       $$be = $73;$depth$0$be = $depth$0126;$status$0$be = $46;
      }
      break;
     }
     case 4:  {
      HEAP32[$item$i24>>2] = 9;
      ;HEAP32[$item$i24$byval_copy>>2]=HEAP32[$item$i24>>2]|0;
      $49 = (_tre_stack_push($1,$item$i24$byval_copy)|0);
      $50 = ($49|0)==(0);
      if ($50) {
       HEAP32[$item$i25>>2] = 1;
       ;HEAP32[$item$i25$byval_copy>>2]=HEAP32[$item$i25>>2]|0;
       $51 = (_tre_stack_push($1,$item$i25$byval_copy)|0);
       $$be = $73;$depth$0$be = $depth$0126;$status$0$be = $51;
      } else {
       $$be = $73;$depth$0$be = $depth$0126;$status$0$be = $49;
      }
      break;
     }
     case 5:  {
      $52 = HEAP32[$12>>2]|0;
      $53 = HEAP8[$52>>0]|0;
      $54 = ($53<<24>>24)==(0);
      if ($54) {
       $$be = $73;$depth$0$be = $depth$0126;$status$0$be = 0;
      } else {
       $55 = HEAP32[$21>>2]|0;
       $56 = $55 & 1;
       $57 = ($56|0)!=(0);
       $58 = ($53<<24>>24)==(124);
       $or$cond = $58 & $57;
       if ($or$cond) {
        $$be = $73;$depth$0$be = $depth$0126;$status$0$be = 0;
       } else {
        $59 = ($53<<24>>24)==(41);
        $or$cond3 = $59 & $57;
        $60 = ($depth$0126|0)>(0);
        $or$cond5 = $60 & $or$cond3;
        do {
         if (!($or$cond5)) {
          $61 = ($56|0)==(0);
          $62 = ($53<<24>>24)==(92);
          $or$cond7 = $62 & $61;
          if ($or$cond7) {
           $63 = ((($52)) + 1|0);
           $64 = HEAP8[$63>>0]|0;
           $65 = ($64<<24>>24)==(41);
           if ($65) {
            break;
           }
          }
          HEAP32[$item$i26>>2] = 5;
          ;HEAP32[$item$i26$byval_copy>>2]=HEAP32[$item$i26>>2]|0;
          $71 = (_tre_stack_push($1,$item$i26$byval_copy)|0);
          $72 = ($71|0)==(0);
          if (!($72)) {
           $$be = $73;$depth$0$be = $depth$0126;$status$0$be = $71;
           break L8;
          }
          $74 = $73;
          HEAP32[$item$i27>>2] = $74;
          ;HEAP32[$item$i27$byval_copy>>2]=HEAP32[$item$i27>>2]|0;
          $75 = (_tre_stack_push($1,$item$i27$byval_copy)|0);
          $76 = ($75|0)==(0);
          if (!($76)) {
           $$be = $73;$depth$0$be = $depth$0126;$status$0$be = $75;
           break L8;
          }
          HEAP32[$item$i28>>2] = 6;
          ;HEAP32[$item$i28$byval_copy>>2]=HEAP32[$item$i28>>2]|0;
          $77 = (_tre_stack_push($1,$item$i28$byval_copy)|0);
          $78 = ($77|0)==(0);
          if (!($78)) {
           $$be = $73;$depth$0$be = $depth$0126;$status$0$be = $77;
           break L8;
          }
          HEAP32[$item$i29>>2] = 4;
          ;HEAP32[$item$i29$byval_copy>>2]=HEAP32[$item$i29>>2]|0;
          $79 = (_tre_stack_push($1,$item$i29$byval_copy)|0);
          $$be = $73;$depth$0$be = $depth$0126;$status$0$be = $79;
          break L8;
         }
        } while(0);
        $66 = $56 | $depth$0126;
        $67 = ($66|0)==(0);
        $$status$0 = $67 ? 8 : 0;
        $68 = (($depth$0126) + -1)|0;
        $69 = ($56|0)==(0);
        if ($69) {
         $70 = ((($52)) + 2|0);
         HEAP32[$12>>2] = $70;
         $$be = $73;$depth$0$be = $68;$status$0$be = $$status$0;
        } else {
         $$be = $73;$depth$0$be = $68;$status$0$be = $$status$0;
        }
       }
      }
      break;
     }
     case 6:  {
      $80 = (($31) + -2)|0;
      HEAP32[$2>>2] = $80;
      $81 = (($32) + ($80<<2)|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = HEAP32[$ctx>>2]|0;
      $84 = $73;
      $85 = (_tre_ast_new_catenation($83,$82,$84)|0);
      $86 = ($85|0)==(0|0);
      if ($86) {
       $$2 = 12;
       break L4;
      }
      $87 = $85;
      $$be = $87;$depth$0$be = $depth$0126;$status$0$be = 0;
      break;
     }
     case 7:  {
      $88 = HEAP32[$12>>2]|0;
      $89 = HEAP8[$88>>0]|0;
      $90 = $89 << 24 >> 24;
      switch ($90|0) {
      case 124:  {
       break;
      }
      case 41:  {
       $102 = ((($88)) + 1|0);
       HEAP32[$12>>2] = $102;
       $$be = $73;$depth$0$be = $depth$0126;$status$0$be = 0;
       break L8;
       break;
      }
      default: {
       $$be = $73;$depth$0$be = $depth$0126;$status$0$be = 0;
       break L8;
      }
      }
      HEAP32[$item$i32>>2] = 7;
      ;HEAP32[$item$i32$byval_copy>>2]=HEAP32[$item$i32>>2]|0;
      $91 = (_tre_stack_push($1,$item$i32$byval_copy)|0);
      $92 = ($91|0)==(0);
      if ($92) {
       $93 = $73;
       HEAP32[$item$i33>>2] = $93;
       ;HEAP32[$item$i33$byval_copy>>2]=HEAP32[$item$i33>>2]|0;
       $94 = (_tre_stack_push($1,$item$i33$byval_copy)|0);
       $95 = ($94|0)==(0);
       if ($95) {
        HEAP32[$item$i34>>2] = 8;
        ;HEAP32[$item$i34$byval_copy>>2]=HEAP32[$item$i34>>2]|0;
        $96 = (_tre_stack_push($1,$item$i34$byval_copy)|0);
        $97 = ($96|0)==(0);
        if ($97) {
         HEAP32[$item$i35>>2] = 3;
         ;HEAP32[$item$i35$byval_copy>>2]=HEAP32[$item$i35>>2]|0;
         $98 = (_tre_stack_push($1,$item$i35$byval_copy)|0);
         $99 = ($98|0)==(0);
         if ($99) {
          $100 = HEAP32[$12>>2]|0;
          $101 = ((($100)) + 1|0);
          HEAP32[$12>>2] = $101;
          $$be = $73;$depth$0$be = $depth$0126;$status$0$be = 0;
         } else {
          $$be = $73;$depth$0$be = $depth$0126;$status$0$be = $98;
         }
        } else {
         $$be = $73;$depth$0$be = $depth$0126;$status$0$be = $96;
        }
       } else {
        $$be = $73;$depth$0$be = $depth$0126;$status$0$be = $94;
       }
      } else {
       $$be = $73;$depth$0$be = $depth$0126;$status$0$be = $91;
      }
      break;
     }
     case 8:  {
      $103 = (($31) + -2)|0;
      HEAP32[$2>>2] = $103;
      $104 = (($32) + ($103<<2)|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = HEAP32[$ctx>>2]|0;
      $107 = $73;
      $108 = (_tre_ast_new_union($106,$105,$107)|0);
      $109 = ($108|0)==(0|0);
      if ($109) {
       $$2 = 12;
       break L4;
      }
      $110 = $108;
      $$be = $110;$depth$0$be = $depth$0126;$status$0$be = 0;
      break;
     }
     case 9:  {
      $111 = HEAP32[$12>>2]|0;
      $112 = HEAP8[$111>>0]|0;
      $113 = $112 << 24 >> 24;
      switch ($113|0) {
      case 63: case 43:  {
       $114 = HEAP32[$21>>2]|0;
       $115 = $114 & 1;
       $116 = ($115|0)==(0);
       if ($116) {
        $$be = $73;$depth$0$be = $depth$0126;$status$0$be = 0;
        break L8;
       } else {
        label = 38;
       }
       break;
      }
      case 42:  {
       label = 38;
       break;
      }
      case 92:  {
       $126 = HEAP32[$21>>2]|0;
       $127 = $126 & 1;
       $128 = ($127|0)==(0);
       if (!($128)) {
        $$be = $73;$depth$0$be = $depth$0126;$status$0$be = 0;
        break L8;
       }
       $129 = ((($111)) + 1|0);
       $130 = HEAP8[$129>>0]|0;
       $131 = ($130<<24>>24)==(123);
       if (!($131)) {
        $$be = $73;$depth$0$be = $depth$0126;$status$0$be = 0;
        break L8;
       }
       HEAP32[$12>>2] = $129;
       $136 = $129;$175 = $126;
       break;
      }
      case 123:  {
       $132 = HEAP32[$21>>2]|0;
       $133 = $132 & 1;
       $134 = ($133|0)==(0);
       if ($134) {
        $$be = $73;$depth$0$be = $depth$0126;$status$0$be = 0;
        break L8;
       } else {
        $136 = $111;$175 = $132;
       }
       break;
      }
      default: {
       $$be = $73;$depth$0$be = $depth$0126;$status$0$be = 0;
       break L8;
      }
      }
      if ((label|0) == 38) {
       label = 0;
       $117 = ($112<<24>>24)==(43);
       $$ = $117&1;
       $118 = ($112<<24>>24)==(63);
       $rep_max$0 = $118 ? 1 : -1;
       $119 = ((($111)) + 1|0);
       HEAP32[$12>>2] = $119;
       $120 = HEAP32[$ctx>>2]|0;
       $121 = $73;
       $122 = (_tre_ast_new_iter($120,$121,$$,$rep_max$0,0)|0);
       $123 = ($122|0)==(0|0);
       if ($123) {
        $$2 = 12;
        break L4;
       }
       $124 = $122;
       HEAP32[$item$i36>>2] = 9;
       ;HEAP32[$item$i36$byval_copy>>2]=HEAP32[$item$i36>>2]|0;
       $125 = (_tre_stack_push($1,$item$i36$byval_copy)|0);
       $$be = $124;$depth$0$be = $depth$0126;$status$0$be = $125;
       break L8;
      }
      $135 = ((($136)) + 1|0);
      HEAP32[$12>>2] = $135;
      $137 = HEAP8[$135>>0]|0;
      $$off$i = (($137) + -48)<<24>>24;
      $138 = ($$off$i&255)<(10);
      if ($138) {
       $139 = $137 << 24 >> 24;
       $140 = (($139) + -48)|0;
       $141 = ($140>>>0)<(10);
       if ($141) {
        $145 = $139;$num$01$i$i = -1;$r$02$i$i = $135;
       } else {
        $$2 = 10;
        break L4;
       }
       while(1) {
        $142 = ($num$01$i$i|0)<(0);
        $num$0$op$i$i = ($num$01$i$i*10)|0;
        $num$0$op$op$i$i = (($num$0$op$i$i) + -48)|0;
        $143 = $142 ? -48 : $num$0$op$op$i$i;
        $144 = (($143) + ($145))|0;
        $146 = ((($r$02$i$i)) + 1|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147 << 24 >> 24;
        $149 = (($148) + -48)|0;
        $150 = ($149>>>0)<(10);
        if ($150) {
         $145 = $148;$num$01$i$i = $144;$r$02$i$i = $146;
        } else {
         $$in$i = $146;$151 = $147;$154 = $r$02$i$i;$min$0$i = $144;
         break;
        }
       }
      } else {
       $$in$i = $135;$151 = $137;$154 = $136;$min$0$i = -1;
      }
      $152 = ($151<<24>>24)==(44);
      if ($152) {
       $153 = ((($154)) + 2|0);
       $155 = HEAP8[$153>>0]|0;
       $156 = $155 << 24 >> 24;
       $157 = (($156) + -48)|0;
       $158 = ($157>>>0)<(10);
       if ($158) {
        $162 = $156;$num$01$i10$i = -1;$r$02$i9$i = $153;
        while(1) {
         $159 = ($num$01$i10$i|0)<(0);
         $num$0$op$i11$i = ($num$01$i10$i*10)|0;
         $num$0$op$op$i12$i = (($num$0$op$i11$i) + -48)|0;
         $160 = $159 ? -48 : $num$0$op$op$i12$i;
         $161 = (($160) + ($162))|0;
         $163 = ((($r$02$i9$i)) + 1|0);
         $164 = HEAP8[$163>>0]|0;
         $165 = $164 << 24 >> 24;
         $166 = (($165) + -48)|0;
         $167 = ($166>>>0)<(10);
         if ($167) {
          $162 = $165;$num$01$i10$i = $161;$r$02$i9$i = $163;
         } else {
          $$in17$i = $163;$695 = $164;$max$0$i = $161;
          label = 50;
          break;
         }
        }
       } else {
        $$in1726$i = $153;$171 = $155;$max$027$i = -1;
       }
      } else {
       $$in17$i = $$in$i;$695 = $151;$max$0$i = $min$0$i;
       label = 50;
      }
      if ((label|0) == 50) {
       label = 0;
       $168 = ($max$0$i|0)>(-1);
       if ($168) {
        $169 = ($min$0$i|0)>($max$0$i|0);
        $170 = ($max$0$i|0)>(255);
        $or$cond$i = $169 | $170;
        if ($or$cond$i) {
         $$2 = 10;
         break L4;
        } else {
         $$in1726$i = $$in17$i;$171 = $695;$max$027$i = $max$0$i;
        }
       } else {
        $$in1726$i = $$in17$i;$171 = $695;$max$027$i = $max$0$i;
       }
      }
      $172 = ($171<<24>>24)==(0);
      if ($172) {
       $$2 = 9;
       break L4;
      }
      $173 = ($$in1726$i|0)==($135|0);
      if ($173) {
       $$2 = 10;
       break L4;
      }
      $174 = $175 & 1;
      $176 = ($174|0)==(0);
      if ($176) {
       $179 = ($171<<24>>24)==(92);
       if (!($179)) {
        $$2 = 10;
        break L4;
       }
       $180 = ((($$in1726$i)) + 1|0);
       $181 = HEAP8[$180>>0]|0;
       $182 = ($181<<24>>24)==(125);
       if (!($182)) {
        $$2 = 10;
        break L4;
       }
       $183 = ((($$in1726$i)) + 2|0);
       $storemerge$i = $183;
      } else {
       $177 = ($171<<24>>24)==(125);
       if (!($177)) {
        $$2 = 10;
        break L4;
       }
       $178 = ((($$in1726$i)) + 1|0);
       $storemerge$i = $178;
      }
      $184 = $storemerge$i;
      $185 = $max$027$i | $min$0$i;
      $186 = ($185|0)==(0);
      if ($186) {
       $187 = HEAP32[$ctx>>2]|0;
       $188 = (_tre_ast_new_node($187,0,20)|0);
       $189 = ($188|0)==(0|0);
       if ($189) {
        $$2 = 12;
        break L4;
       }
       $190 = ((($188)) + 4|0);
       $191 = HEAP32[$190>>2]|0;
       HEAP32[$191>>2] = -1;
       $192 = ((($191)) + 4|0);
       HEAP32[$192>>2] = -1;
       $193 = ((($191)) + 8|0);
       HEAP32[$193>>2] = -1;
       $$in81 = $188;
      } else {
       $194 = $max$027$i & $min$0$i;
       $195 = ($194|0)<(0);
       $$min$0$i = $195 ? 1 : $min$0$i;
       $$max$0$i = $195 ? 1 : $max$027$i;
       $196 = HEAP32[$ctx>>2]|0;
       $197 = $73;
       $198 = (_tre_ast_new_iter($196,$197,$$min$0$i,$$max$0$i,0)|0);
       $199 = ($198|0)==(0|0);
       if ($199) {
        $$2 = 12;
        break L4;
       } else {
        $$in81 = $198;
       }
      }
      $200 = $$in81;
      HEAP32[$12>>2] = $184;
      HEAP32[$item$i38>>2] = 9;
      ;HEAP32[$item$i38$byval_copy>>2]=HEAP32[$item$i38>>2]|0;
      $201 = (_tre_stack_push($1,$item$i38$byval_copy)|0);
      $$be = $200;$depth$0$be = $depth$0126;$status$0$be = $201;
      break;
     }
     case 1:  {
      $202 = HEAP32[$12>>2]|0;
      $203 = HEAP8[$202>>0]|0;
      $204 = $203 << 24 >> 24;
      L81: do {
       switch ($204|0) {
       case 40:  {
        $205 = HEAP32[$21>>2]|0;
        $206 = $205 & 1;
        $207 = ($206|0)==(0);
        if ($207) {
         $610 = $202;
        } else {
         $210 = $202;
         label = 67;
        }
        break;
       }
       case 91:  {
        $220 = ((($202)) + 1|0);
        HEAP32[$12>>2] = $220;
        $221 = (_malloc(128)|0);
        HEAP32[$items$i>>2] = $221;
        $222 = ($221|0)==(0|0);
        if ($222) {
         label = 72;
         break L6;
        }
        $223 = HEAP8[$220>>0]|0;
        $224 = ($223<<24>>24)==(94);
        if ($224) {
         $225 = ((($202)) + 2|0);
         HEAP32[$12>>2] = $225;
         $696 = $225;$negate$0$i = 1;
        } else {
         $696 = $220;$negate$0$i = 0;
        }
        HEAP32[$i$i$i>>2] = 0;
        HEAP32[$max_i$i$i>>2] = 32;
        $269 = 0;$re$1$i$i = $696;
        L88: while(1) {
         $226 = HEAP8[$re$1$i$i>>0]|0;
         switch ($226<<24>>24) {
         case 0:  {
          $327 = $269;$re$4$i$i = $re$1$i$i;$status$10$i$i = 7;
          break L88;
          break;
         }
         case 93:  {
          $227 = HEAP32[$12>>2]|0;
          $228 = ($re$1$i$i>>>0)>($227>>>0);
          if ($228) {
           $$lcssa223 = $269;$re$1$i$i$lcssa225 = $re$1$i$i;
           label = 79;
           break L88;
          }
          break;
         }
         default: {
         }
         }
         $230 = (_mbtowc($wc$i$i,$re$1$i$i,-1)|0);
         $231 = ($230|0)<(0);
         if ($231) {
          HEAP32[$wc$i$i>>2] = -1;
          $clen$0$i$i = 1;
         } else {
          $clen$0$i$i = $230;
         }
         $232 = (($re$1$i$i) + ($clen$0$i$i)|0);
         $233 = HEAP8[$232>>0]|0;
         $234 = ($233<<24>>24)==(45);
         if ($234) {
          $$sum$i$i = (($clen$0$i$i) + 1)|0;
          $235 = (($re$1$i$i) + ($$sum$i$i)|0);
          $236 = HEAP8[$235>>0]|0;
          $237 = ($236<<24>>24)==(93);
          if ($237) {
           label = 88;
          } else {
           $238 = HEAP32[$wc$i$i>>2]|0;
           $239 = (_mbtowc($wc$i$i,$235,-1)|0);
           $240 = ($239|0)<(0);
           if ($240) {
            HEAP32[$wc$i$i>>2] = -1;
            $243 = -1;$clen$1$i$i = 1;
           } else {
            $$pre$i$i = HEAP32[$wc$i$i>>2]|0;
            $243 = $$pre$i$i;$clen$1$i$i = $239;
           }
           $$sum13$i$i = (($clen$1$i$i) + ($$sum$i$i))|0;
           $241 = (($re$1$i$i) + ($$sum13$i$i)|0);
           $242 = ($238>>>0)>($243>>>0);
           if ($242) {
            $327 = $269;$re$4$i$i = $241;$status$10$i$i = 11;
            break;
           } else {
            $class$16779$i$i = 0;$max$06976$i$i = $243;$min$06877$i$i = $238;$re$37073$i$i = $241;
            label = 102;
           }
          }
         } else {
          label = 88;
         }
         if ((label|0) == 88) {
          label = 0;
          $244 = HEAP8[$re$1$i$i>>0]|0;
          L105: do {
           switch ($244<<24>>24) {
           case 91:  {
            $245 = ((($re$1$i$i)) + 1|0);
            $246 = HEAP8[$245>>0]|0;
            switch ($246<<24>>24) {
            case 61: case 46:  {
             $327 = $269;$re$4$i$i = $re$1$i$i;$status$10$i$i = 3;
             break L88;
             break;
            }
            case 58:  {
             break;
            }
            default: {
             $status$4$i$i = 0;
             label = 97;
             break L105;
            }
            }
            $247 = ((($re$1$i$i)) + 2|0);
            $endptr$0$i$i = $247;
            while(1) {
             $248 = HEAP8[$endptr$0$i$i>>0]|0;
             $249 = ($248<<24>>24)==(0);
             $250 = ($248<<24>>24)!=(58);
             $not$$i$i = $249 ^ 1;
             $$$i$i = $250 & $not$$i$i;
             $251 = ((($endptr$0$i$i)) + 1|0);
             if ($$$i$i) {
              $endptr$0$i$i = $251;
             } else {
              break;
             }
            }
            if ($249) {
             $class$0$i$i = 0;$re$2$i$i = $re$1$i$i;$status$3$i$i = 4;
            } else {
             $252 = $endptr$0$i$i;
             $253 = $re$1$i$i;
             $254 = (($252) - ($253))|0;
             $255 = (($254) + -2)|0;
             $256 = ($255|0)>(63);
             $$14$i$i = $256 ? 63 : $255;
             (_strncpy($tmp_str$i$i,$247,$$14$i$i)|0);
             $257 = (($tmp_str$i$i) + ($$14$i$i)|0);
             HEAP8[$257>>0] = 0;
             $258 = (_wctype($tmp_str$i$i)|0);
             $259 = ($258|0)==(0);
             $status$2$i$i = $259 ? 4 : 0;
             $260 = ((($endptr$0$i$i)) + 2|0);
             $class$0$i$i = $258;$re$2$i$i = $260;$status$3$i$i = $status$2$i$i;
            }
            $class$1$i$i = $class$0$i$i;$max$0$i$i = 1114111;$min$0$i$i = 0;$re$3$i$i = $re$2$i$i;$status$5$i$i = $status$3$i$i;
            break;
           }
           case 45:  {
            $261 = ((($re$1$i$i)) + 1|0);
            $262 = HEAP8[$261>>0]|0;
            $263 = ($262<<24>>24)==(93);
            if ($263) {
             $status$4$i$i = 0;
             label = 97;
            } else {
             $264 = HEAP32[$12>>2]|0;
             $265 = ($264|0)==($re$1$i$i|0);
             $status$1$$i$i = $265 ? 0 : 11;
             $status$4$i$i = $status$1$$i$i;
             label = 97;
            }
            break;
           }
           default: {
            $status$4$i$i = 0;
            label = 97;
           }
           }
          } while(0);
          if ((label|0) == 97) {
           label = 0;
           $266 = HEAP32[$wc$i$i>>2]|0;
           $class$1$i$i = 0;$max$0$i$i = $266;$min$0$i$i = $266;$re$3$i$i = $232;$status$5$i$i = $status$4$i$i;
          }
          $267 = ($status$5$i$i|0)==(0);
          if (!($267)) {
           $327 = $269;$re$4$i$i = $re$3$i$i;$status$10$i$i = $status$5$i$i;
           break;
          }
          $268 = ($class$1$i$i|0)!=(0);
          $or$cond$i$i = $negate$0$i & $268;
          if ($or$cond$i$i) {
           $270 = ($269|0)>(63);
           if ($270) {
            $697 = $269;$class$16780$i$i = $class$1$i$i;$max$06975$i$i = $max$0$i$i;$min$06878$i$i = $min$0$i$i;$re$37074$i$i = $re$3$i$i;$status$6$i$i = 12;
           } else {
            $271 = (($269) + 1)|0;
            $272 = (($neg_classes$i) + ($269<<2)|0);
            HEAP32[$272>>2] = $class$1$i$i;
            $697 = $271;$class$16780$i$i = $class$1$i$i;$max$06975$i$i = $max$0$i$i;$min$06878$i$i = $min$0$i$i;$re$37074$i$i = $re$3$i$i;$status$6$i$i = 0;
           }
          } else {
           $class$16779$i$i = $class$1$i$i;$max$06976$i$i = $max$0$i$i;$min$06877$i$i = $min$0$i$i;$re$37073$i$i = $re$3$i$i;
           label = 102;
          }
         }
         if ((label|0) == 102) {
          label = 0;
          $273 = HEAP32[$ctx>>2]|0;
          $274 = (_tre_new_item($273,$min$06877$i$i,$max$06976$i$i,$i$i$i,$max_i$i$i,$items$i)|0);
          $275 = ($274|0)==(0);
          if (!($275)) {
           $327 = $269;$re$4$i$i = $re$37073$i$i;$status$10$i$i = $274;
           break;
          }
          $276 = HEAP32[$i$i$i>>2]|0;
          $277 = (($276) + -1)|0;
          $278 = HEAP32[$items$i>>2]|0;
          $279 = (($278) + ($277<<2)|0);
          $280 = HEAP32[$279>>2]|0;
          $281 = ((($280)) + 4|0);
          $282 = HEAP32[$281>>2]|0;
          $283 = ((($282)) + 12|0);
          HEAP32[$283>>2] = $class$16779$i$i;
          $697 = $269;$class$16780$i$i = $class$16779$i$i;$max$06975$i$i = $max$06976$i$i;$min$06878$i$i = $min$06877$i$i;$re$37074$i$i = $re$37073$i$i;$status$6$i$i = 0;
         }
         $284 = HEAP32[$21>>2]|0;
         $285 = $284 & 2;
         $286 = ($285|0)==(0);
         $287 = $status$6$i$i | $class$16780$i$i;
         $288 = ($287|0)!=(0);
         $289 = $288 | $286;
         if ($289) {
          $$old11$i$i = ($status$6$i$i|0)==(0);
          if ($$old11$i$i) {
           $269 = $697;$re$1$i$i = $re$37074$i$i;
           continue;
          } else {
           $327 = $697;$re$4$i$i = $re$37074$i$i;$status$10$i$i = $status$6$i$i;
           break;
          }
         } else {
          $min$1$i$i = $min$06878$i$i;$status$7$i$i = $status$6$i$i;
         }
         while(1) {
          $290 = ($min$1$i$i>>>0)>($max$06975$i$i>>>0);
          if ($290) {
           $status$7$i$i$lcssa = $status$7$i$i;
           break;
          }
          $291 = (_iswlower($min$1$i$i)|0);
          $292 = ($291|0)==(0);
          if ($292) {
           $305 = (_iswupper($min$1$i$i)|0);
           $306 = ($305|0)==(0);
           $307 = (($min$1$i$i) + 1)|0;
           if ($306) {
            $min$4$i$i = $307;$status$8$i$i = $status$7$i$i;
           } else {
            $308 = (_towlower($min$1$i$i)|0);
            $309 = (_iswupper($307)|0);
            $310 = ($309|0)==(0);
            L134: do {
             if ($310) {
              $ccurr$1$lcssa$i$i = $308;$min$3$lcssa$i$i = $307;
             } else {
              $ccurr$143$i$i = $308;$min$342$i$i = $307;
              while(1) {
               $311 = (_towlower($min$342$i$i)|0);
               $312 = (($ccurr$143$i$i) + 1)|0;
               $313 = ($311|0)!=($312|0);
               $314 = ($min$342$i$i>>>0)>($max$06975$i$i>>>0);
               $or$cond16$i$i = $314 | $313;
               if ($or$cond16$i$i) {
                $ccurr$1$lcssa$i$i = $ccurr$143$i$i;$min$3$lcssa$i$i = $min$342$i$i;
                break L134;
               }
               $315 = (($min$342$i$i) + 1)|0;
               $316 = (_towlower($min$342$i$i)|0);
               $317 = (_iswupper($315)|0);
               $318 = ($317|0)==(0);
               if ($318) {
                $ccurr$1$lcssa$i$i = $316;$min$3$lcssa$i$i = $315;
                break;
               } else {
                $ccurr$143$i$i = $316;$min$342$i$i = $315;
               }
              }
             }
            } while(0);
            $319 = HEAP32[$ctx>>2]|0;
            $320 = (_tre_new_item($319,$308,$ccurr$1$lcssa$i$i,$i$i$i,$max_i$i$i,$items$i)|0);
            $min$4$i$i = $min$3$lcssa$i$i;$status$8$i$i = $320;
           }
          } else {
           $293 = (_towupper($min$1$i$i)|0);
           $min$235$i$i = (($min$1$i$i) + 1)|0;
           $294 = (_iswlower($min$235$i$i)|0);
           $295 = ($294|0)==(0);
           L140: do {
            if ($295) {
             $ccurr$0$lcssa$i$i = $293;$min$2$lcssa$i$i = $min$235$i$i;
            } else {
             $ccurr$036$i$i = $293;$min$237$i$i = $min$235$i$i;
             while(1) {
              $296 = (_towupper($min$237$i$i)|0);
              $297 = (($ccurr$036$i$i) + 1)|0;
              $298 = ($296|0)!=($297|0);
              $299 = ($min$237$i$i>>>0)>($max$06975$i$i>>>0);
              $or$cond15$i$i = $299 | $298;
              if ($or$cond15$i$i) {
               $ccurr$0$lcssa$i$i = $ccurr$036$i$i;$min$2$lcssa$i$i = $min$237$i$i;
               break L140;
              }
              $300 = (_towupper($min$237$i$i)|0);
              $min$2$i$i = (($min$237$i$i) + 1)|0;
              $301 = (_iswlower($min$2$i$i)|0);
              $302 = ($301|0)==(0);
              if ($302) {
               $ccurr$0$lcssa$i$i = $300;$min$2$lcssa$i$i = $min$2$i$i;
               break;
              } else {
               $ccurr$036$i$i = $300;$min$237$i$i = $min$2$i$i;
              }
             }
            }
           } while(0);
           $303 = HEAP32[$ctx>>2]|0;
           $304 = (_tre_new_item($303,$293,$ccurr$0$lcssa$i$i,$i$i$i,$max_i$i$i,$items$i)|0);
           $min$4$i$i = $min$2$lcssa$i$i;$status$8$i$i = $304;
          }
          $321 = ($status$8$i$i|0)==(0);
          if ($321) {
           $min$1$i$i = $min$4$i$i;$status$7$i$i = 0;
          } else {
           $327 = $697;$re$4$i$i = $re$37074$i$i;$status$10$i$i = $status$8$i$i;
           break L88;
          }
         }
         $322 = ($status$7$i$i$lcssa|0)==(0);
         if ($322) {
          $269 = $697;$re$1$i$i = $re$37074$i$i;
         } else {
          $327 = $697;$re$4$i$i = $re$37074$i$i;$status$10$i$i = $status$7$i$i$lcssa;
          break;
         }
        }
        if ((label|0) == 79) {
         label = 0;
         $229 = ((($re$1$i$i$lcssa225)) + 1|0);
         $327 = $$lcssa223;$re$4$i$i = $229;$status$10$i$i = 0;
        }
        $323 = HEAP32[$i$i$i>>2]|0;
        HEAP32[$12>>2] = $re$4$i$i;
        $324 = ($status$10$i$i|0)==(0);
        L150: do {
         if ($324) {
          if ($negate$0$i) {
           $325 = HEAP32[$items$i>>2]|0;
           _qsort($325,$323,4,34);
          }
          $326 = ($323|0)>(0);
          if ($326) {
           $328 = ($327|0)>(0);
           $329 = $327 << 2;
           $330 = (($329) + 4)|0;
           $$pre156 = HEAP32[$items$i>>2]|0;
           $332 = $$pre156;$curr_max$027$i = 0;$curr_min$028$i = 0;$j$025$i = 0;$node$029$i = 0;
           while(1) {
            $331 = (($332) + ($j$025$i<<2)|0);
            $333 = HEAP32[$331>>2]|0;
            $334 = ((($333)) + 4|0);
            $335 = HEAP32[$334>>2]|0;
            $336 = HEAP32[$335>>2]|0;
            $337 = ((($335)) + 4|0);
            $338 = HEAP32[$337>>2]|0;
            do {
             if ($negate$0$i) {
              $339 = ($336|0)<($curr_max$027$i|0);
              if ($339) {
               $340 = (($338) + 1)|0;
               $341 = ($340|0)>=($curr_max$027$i|0);
               $342 = $341 ? $340 : $curr_max$027$i;
               $698 = $332;$curr_max$12$i = $342;$curr_min$13$i = $curr_min$028$i;$node$1$i = $node$029$i;$status$2$i = 0;
               break;
              }
              $343 = ($336|0)>($curr_min$028$i|0);
              if ($343) {
               $344 = (($336) + -1)|0;
               HEAP32[$335>>2] = $curr_min$028$i;
               HEAP32[$337>>2] = $344;
               $l$0$i = $335;
              } else {
               $l$0$i = 0;
              }
              $345 = (($338) + 1)|0;
              $curr_max$1$i = $345;$curr_min$1$i = $345;$l$1$i = $l$0$i;
              label = 129;
             } else {
              $curr_max$1$i = $curr_max$027$i;$curr_min$1$i = $curr_min$028$i;$l$1$i = $335;
              label = 129;
             }
            } while(0);
            do {
             if ((label|0) == 129) {
              label = 0;
              $346 = ($l$1$i|0)==(0|0);
              if ($346) {
               $698 = $332;$curr_max$12$i = $curr_max$1$i;$curr_min$13$i = $curr_min$1$i;$node$1$i = $node$029$i;$status$2$i = 0;
              } else {
               $347 = HEAP32[$22>>2]|0;
               $348 = ((($l$1$i)) + 8|0);
               HEAP32[$348>>2] = $347;
               if ($328) {
                $349 = HEAP32[$ctx>>2]|0;
                $350 = (___tre_mem_alloc_impl($349,0,0,0,$330)|0);
                $351 = ((($l$1$i)) + 16|0);
                HEAP32[$351>>2] = $350;
                $352 = ($350|0)==(0|0);
                if ($352) {
                 $node$2$i = $node$029$i;$status$5$i = 12;
                 break L150;
                }
                _memcpy(($350|0),($neg_classes$i|0),($329|0))|0;
                $$pre$i = HEAP32[$351>>2]|0;
                $353 = (($$pre$i) + ($327<<2)|0);
                HEAP32[$353>>2] = 0;
               } else {
                $354 = ((($l$1$i)) + 16|0);
                HEAP32[$354>>2] = 0;
               }
               $355 = ($node$029$i|0)==(0|0);
               if ($355) {
                $356 = HEAP32[$items$i>>2]|0;
                $357 = (($356) + ($j$025$i<<2)|0);
                $358 = HEAP32[$357>>2]|0;
                $698 = $356;$curr_max$12$i = $curr_max$1$i;$curr_min$13$i = $curr_min$1$i;$node$1$i = $358;$status$2$i = 0;
                break;
               } else {
                $359 = HEAP32[$ctx>>2]|0;
                $360 = HEAP32[$items$i>>2]|0;
                $361 = (($360) + ($j$025$i<<2)|0);
                $362 = HEAP32[$361>>2]|0;
                $363 = (_tre_ast_new_union($359,$node$029$i,$362)|0);
                $364 = ($363|0)==(0|0);
                $$status$0$i = $364 ? 12 : 0;
                $698 = $360;$curr_max$12$i = $curr_max$1$i;$curr_min$13$i = $curr_min$1$i;$node$1$i = $363;$status$2$i = $$status$0$i;
                break;
               }
              }
             }
            } while(0);
            $365 = (($j$025$i) + 1)|0;
            $366 = ($365|0)<($323|0);
            $367 = ($status$2$i|0)==(0);
            $368 = $366 & $367;
            if ($368) {
             $332 = $698;$curr_max$027$i = $curr_max$12$i;$curr_min$028$i = $curr_min$13$i;$j$025$i = $365;$node$029$i = $node$1$i;
            } else {
             $curr_min$0$lcssa$i = $curr_min$13$i;$node$0$lcssa$i = $node$1$i;$status$0$lcssa$i = $status$2$i;
             break;
            }
           }
          } else {
           $curr_min$0$lcssa$i = 0;$node$0$lcssa$i = 0;$status$0$lcssa$i = 0;
          }
          $369 = ($status$0$lcssa$i|0)==(0);
          $or$cond$i43 = $negate$0$i & $369;
          if ($or$cond$i43) {
           $370 = HEAP32[$ctx>>2]|0;
           $371 = HEAP32[$22>>2]|0;
           $372 = (_tre_ast_new_node($370,0,20)|0);
           $373 = ($372|0)==(0|0);
           if ($373) {
            $node$2$i = $node$0$lcssa$i;$status$5$i = 12;
           } else {
            $374 = ((($372)) + 4|0);
            $375 = HEAP32[$374>>2]|0;
            HEAP32[$375>>2] = $curr_min$0$lcssa$i;
            $376 = ((($375)) + 4|0);
            HEAP32[$376>>2] = 1114111;
            $377 = ((($375)) + 8|0);
            HEAP32[$377>>2] = $371;
            $378 = ($327|0)>(0);
            if ($378) {
             $379 = HEAP32[$ctx>>2]|0;
             $380 = $327 << 2;
             $381 = (($380) + 4)|0;
             $382 = (___tre_mem_alloc_impl($379,0,0,0,$381)|0);
             $383 = ((($375)) + 16|0);
             HEAP32[$383>>2] = $382;
             $384 = ($382|0)==(0|0);
             if ($384) {
              $node$2$i = $node$0$lcssa$i;$status$5$i = 12;
              break;
             }
             _memcpy(($382|0),($neg_classes$i|0),($380|0))|0;
             $$pre45$i = HEAP32[$383>>2]|0;
             $385 = (($$pre45$i) + ($327<<2)|0);
             HEAP32[$385>>2] = 0;
            } else {
             $386 = ((($375)) + 16|0);
             HEAP32[$386>>2] = 0;
            }
            $387 = ($node$0$lcssa$i|0)==(0|0);
            if ($387) {
             $node$2$i = $372;$status$5$i = 0;
            } else {
             $388 = HEAP32[$ctx>>2]|0;
             $389 = (_tre_ast_new_union($388,$node$0$lcssa$i,$372)|0);
             $390 = ($389|0)==(0|0);
             $$181 = $390 ? 12 : 0;
             $node$2$i = $389;$status$5$i = $$181;
            }
           }
          } else {
           $node$2$i = $node$0$lcssa$i;$status$5$i = $status$0$lcssa$i;
          }
         } else {
          $node$2$i = 0;$status$5$i = $status$10$i$i;
         }
        } while(0);
        $391 = HEAP32[$items$i>>2]|0;
        _free($391);
        $392 = HEAP32[$22>>2]|0;
        $393 = (($392) + 1)|0;
        HEAP32[$22>>2] = $393;
        $394 = $node$2$i;
        $395 = ($status$5$i|0)==(0);
        if ($395) {
         $$be = $394;$depth$0$be = $depth$0126;$status$0$be = 0;
         break L8;
        } else {
         $$2 = $status$5$i;
         break L4;
        }
        break;
       }
       case 92:  {
        $396 = HEAP32[$21>>2]|0;
        $397 = $396 & 1;
        $398 = ($397|0)==(0);
        $399 = ((($202)) + 1|0);
        $400 = HEAP8[$399>>0]|0;
        do {
         if ($398) {
          $401 = ($400<<24>>24)==(40);
          if ($401) {
           HEAP32[$12>>2] = $399;
           $210 = $399;
           label = 67;
           break L81;
          } else {
           $402 = ((($202)) + 1|0);
           $403 = HEAP8[$402>>0]|0;
           $404 = ($403<<24>>24)==(41);
           if ($404) {
            label = 210;
            break L81;
           } else {
            $$pre$phiZ2D = $402;$405 = $403;
            break;
           }
          }
         } else {
          $$pre$phiZ2D = $399;$405 = $400;
         }
        } while(0);
        $406 = ($405<<24>>24)==(0);
        if ($406) {
         $$2 = 5;
         break L4;
        } else {
         $699 = (16116);$i$01$i = 0;
        }
        while(1) {
         $410 = (16112 + ($i$01$i<<3)|0);
         $411 = HEAP8[$410>>0]|0;
         $412 = ($411<<24>>24)==($405<<24>>24);
         $408 = (($i$01$i) + 1)|0;
         if ($412) {
          $$lcssa$i = $699;
          break;
         }
         $407 = (((16112 + ($408<<3)|0)) + 4|0);
         $409 = ($408|0)==(12);
         if ($409) {
          $$lcssa$i = $407;
          break;
         } else {
          $699 = $407;$i$01$i = $408;
         }
        }
        $413 = HEAP32[$$lcssa$i>>2]|0;
        $414 = ($413|0)==(0|0);
        if (!($414)) {
         dest=$subctx; src=$ctx; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
         HEAP32[$26>>2] = $413;
         HEAP32[$27>>2] = 1;
         $415 = (_tre_parse($subctx)|0);
         $416 = ($415|0)==(0);
         if (!($416)) {
          $$lcssa235 = $415;
          label = 156;
          break L6;
         }
         $417 = HEAP32[$12>>2]|0;
         $418 = ((($417)) + 2|0);
         HEAP32[$12>>2] = $418;
         $419 = HEAP32[$28>>2]|0;
         HEAP32[$22>>2] = $419;
         $420 = HEAP32[$29>>2]|0;
         $$be = $420;$depth$0$be = $depth$0126;$status$0$be = 0;
         break L8;
        }
        if ($406) {
         $$2 = 5;
         break L4;
        }
        HEAP32[$12>>2] = $$pre$phiZ2D;
        $421 = HEAP8[$$pre$phiZ2D>>0]|0;
        $422 = $421 << 24 >> 24;
        L205: do {
         switch ($422|0) {
         case 98:  {
          $423 = HEAP32[$ctx>>2]|0;
          $424 = (_tre_ast_new_node($423,0,20)|0);
          $425 = ($424|0)==(0|0);
          if ($425) {
           $$0$i46 = 0;
          } else {
           $426 = ((($424)) + 4|0);
           $427 = HEAP32[$426>>2]|0;
           HEAP32[$427>>2] = -2;
           $428 = ((($427)) + 4|0);
           HEAP32[$428>>2] = 64;
           $429 = ((($427)) + 8|0);
           HEAP32[$429>>2] = -1;
           $$0$i46 = $424;
          }
          $430 = HEAP32[$12>>2]|0;
          $431 = ((($430)) + 1|0);
          HEAP32[$12>>2] = $431;
          $$in80 = $$0$i46;
          break;
         }
         case 66:  {
          $432 = HEAP32[$ctx>>2]|0;
          $433 = (_tre_ast_new_node($432,0,20)|0);
          $434 = ($433|0)==(0|0);
          if ($434) {
           $$0$i48 = 0;
          } else {
           $435 = ((($433)) + 4|0);
           $436 = HEAP32[$435>>2]|0;
           HEAP32[$436>>2] = -2;
           $437 = ((($436)) + 4|0);
           HEAP32[$437>>2] = 128;
           $438 = ((($436)) + 8|0);
           HEAP32[$438>>2] = -1;
           $$0$i48 = $433;
          }
          $439 = HEAP32[$12>>2]|0;
          $440 = ((($439)) + 1|0);
          HEAP32[$12>>2] = $440;
          $$in80 = $$0$i48;
          break;
         }
         case 60:  {
          $441 = HEAP32[$ctx>>2]|0;
          $442 = (_tre_ast_new_node($441,0,20)|0);
          $443 = ($442|0)==(0|0);
          if ($443) {
           $$0$i50 = 0;
          } else {
           $444 = ((($442)) + 4|0);
           $445 = HEAP32[$444>>2]|0;
           HEAP32[$445>>2] = -2;
           $446 = ((($445)) + 4|0);
           HEAP32[$446>>2] = 16;
           $447 = ((($445)) + 8|0);
           HEAP32[$447>>2] = -1;
           $$0$i50 = $442;
          }
          $448 = HEAP32[$12>>2]|0;
          $449 = ((($448)) + 1|0);
          HEAP32[$12>>2] = $449;
          $$in80 = $$0$i50;
          break;
         }
         case 62:  {
          $450 = HEAP32[$ctx>>2]|0;
          $451 = (_tre_ast_new_node($450,0,20)|0);
          $452 = ($451|0)==(0|0);
          if ($452) {
           $$0$i52 = 0;
          } else {
           $453 = ((($451)) + 4|0);
           $454 = HEAP32[$453>>2]|0;
           HEAP32[$454>>2] = -2;
           $455 = ((($454)) + 4|0);
           HEAP32[$455>>2] = 32;
           $456 = ((($454)) + 8|0);
           HEAP32[$456>>2] = -1;
           $$0$i52 = $451;
          }
          $457 = HEAP32[$12>>2]|0;
          $458 = ((($457)) + 1|0);
          HEAP32[$12>>2] = $458;
          $$in80 = $$0$i52;
          break;
         }
         case 120:  {
          $459 = ((($202)) + 2|0);
          HEAP32[$12>>2] = $459;
          $460 = HEAP8[$459>>0]|0;
          $461 = ($460<<24>>24)==(123);
          if ($461) {
           $486 = ((($202)) + 3|0);
           HEAP32[$12>>2] = $486;
           $$in136 = $486;$i$0123 = 0;
           L228: while(1) {
            $487 = HEAP8[$$in136>>0]|0;
            switch ($487<<24>>24) {
            case 0: case 125:  {
             $i$0$lcssa = $i$0123;$storemerge13$lcssa = $$in136;
             break L228;
             break;
            }
            default: {
            }
            }
            $488 = $487 << 24 >> 24;
            $489 = (_iswxdigit($488)|0);
            $490 = ($489|0)==(0);
            if ($490) {
             $$2 = 9;
             break L4;
            }
            $491 = HEAP32[$12>>2]|0;
            $492 = HEAP8[$491>>0]|0;
            $493 = (($tmp4) + ($i$0123)|0);
            HEAP8[$493>>0] = $492;
            $494 = (($i$0123) + 1)|0;
            $495 = ((($491)) + 1|0);
            HEAP32[$12>>2] = $495;
            $notrhs = ($494>>>0)>(31);
            if ($notrhs) {
             $i$0$lcssa = $494;$storemerge13$lcssa = $495;
             break;
            } else {
             $$in136 = $495;$i$0123 = $494;
            }
           }
           $496 = ((($storemerge13$lcssa)) + 1|0);
           HEAP32[$12>>2] = $496;
           $497 = (($tmp4) + ($i$0$lcssa)|0);
           HEAP8[$497>>0] = 0;
           $498 = (_strtol($tmp4,0,16)|0);
           $499 = HEAP32[$ctx>>2]|0;
           $500 = HEAP32[$22>>2]|0;
           $501 = (_tre_ast_new_node($499,0,20)|0);
           $502 = ($501|0)==(0|0);
           if ($502) {
            $$0$i56 = 0;
           } else {
            $503 = ((($501)) + 4|0);
            $504 = HEAP32[$503>>2]|0;
            HEAP32[$504>>2] = $498;
            $505 = ((($504)) + 4|0);
            HEAP32[$505>>2] = $498;
            $506 = ((($504)) + 8|0);
            HEAP32[$506>>2] = $500;
            $$0$i56 = $501;
           }
           $507 = HEAP32[$22>>2]|0;
           $508 = (($507) + 1)|0;
           HEAP32[$22>>2] = $508;
           $$in80 = $$0$i56;
           break L205;
          } else {
           ;HEAP8[$tmp>>0]=0|0;HEAP8[$tmp+1>>0]=0|0;HEAP8[$tmp+2>>0]=0|0;
           $462 = $460 << 24 >> 24;
           $463 = (_iswxdigit($462)|0);
           $464 = ($463|0)==(0);
           $$pre155 = HEAP32[$12>>2]|0;
           if ($464) {
            $468 = $$pre155;
           } else {
            $465 = HEAP8[$$pre155>>0]|0;
            HEAP8[$tmp>>0] = $465;
            $466 = ((($$pre155)) + 1|0);
            HEAP32[$12>>2] = $466;
            $468 = $466;
           }
           $467 = HEAP8[$468>>0]|0;
           $469 = $467 << 24 >> 24;
           $470 = (_iswxdigit($469)|0);
           $471 = ($470|0)==(0);
           if (!($471)) {
            $472 = HEAP32[$12>>2]|0;
            $473 = HEAP8[$472>>0]|0;
            HEAP8[$25>>0] = $473;
            $474 = ((($472)) + 1|0);
            HEAP32[$12>>2] = $474;
           }
           $475 = (_strtol($tmp,0,16)|0);
           $476 = HEAP32[$ctx>>2]|0;
           $477 = HEAP32[$22>>2]|0;
           $478 = (_tre_ast_new_node($476,0,20)|0);
           $479 = ($478|0)==(0|0);
           if ($479) {
            $$0$i54 = 0;
           } else {
            $480 = ((($478)) + 4|0);
            $481 = HEAP32[$480>>2]|0;
            HEAP32[$481>>2] = $475;
            $482 = ((($481)) + 4|0);
            HEAP32[$482>>2] = $475;
            $483 = ((($481)) + 8|0);
            HEAP32[$483>>2] = $477;
            $$0$i54 = $478;
           }
           $484 = HEAP32[$22>>2]|0;
           $485 = (($484) + 1)|0;
           HEAP32[$22>>2] = $485;
           $$in80 = $$0$i54;
           break L205;
          }
          break;
         }
         default: {
          $509 = (_iswdigit($422)|0);
          $510 = ($509|0)==(0);
          $$pre158 = HEAP32[$12>>2]|0;
          if ($510) {
           $610 = $$pre158;
           break L81;
          }
          $511 = HEAP8[$$pre158>>0]|0;
          $512 = $511 << 24 >> 24;
          $513 = (($512) + -48)|0;
          $514 = HEAP32[$ctx>>2]|0;
          $515 = HEAP32[$22>>2]|0;
          $516 = (_tre_ast_new_node($514,0,20)|0);
          $517 = ($516|0)==(0|0);
          if ($517) {
           $$2 = 12;
           break L4;
          }
          $518 = ((($516)) + 4|0);
          $519 = HEAP32[$518>>2]|0;
          HEAP32[$519>>2] = -4;
          $520 = ((($519)) + 4|0);
          HEAP32[$520>>2] = $513;
          $521 = ((($519)) + 8|0);
          HEAP32[$521>>2] = $515;
          $522 = HEAP32[$22>>2]|0;
          $523 = (($522) + 1)|0;
          HEAP32[$22>>2] = $523;
          $524 = HEAP32[$24>>2]|0;
          $525 = ($513|0)<($524|0);
          $$16 = $525 ? $524 : $513;
          HEAP32[$24>>2] = $$16;
          $526 = HEAP32[$12>>2]|0;
          $527 = ((($526)) + 1|0);
          HEAP32[$12>>2] = $527;
          $528 = $516;
          $$be = $528;$depth$0$be = $depth$0126;$status$0$be = 0;
          break L8;
         }
         }
        } while(0);
        $529 = $$in80;
        $530 = ($$in80|0)==(0|0);
        if ($530) {
         $$2 = 12;
         break L4;
        } else {
         $$be = $529;$depth$0$be = $depth$0126;$status$0$be = 0;
         break L8;
        }
        break;
       }
       case 46:  {
        $531 = HEAP32[$21>>2]|0;
        $532 = $531 & 4;
        $533 = ($532|0)==(0);
        $534 = HEAP32[$ctx>>2]|0;
        $535 = HEAP32[$22>>2]|0;
        $536 = (_tre_ast_new_node($534,0,20)|0);
        $537 = ($536|0)==(0|0);
        if ($533) {
         if ($537) {
          $$2 = 12;
          break L4;
         }
         $556 = ((($536)) + 4|0);
         $557 = HEAP32[$556>>2]|0;
         HEAP32[$557>>2] = 0;
         $558 = ((($557)) + 4|0);
         HEAP32[$558>>2] = 1114111;
         $559 = ((($557)) + 8|0);
         HEAP32[$559>>2] = $535;
         $560 = HEAP32[$22>>2]|0;
         $561 = (($560) + 1)|0;
         $$in79 = $536;$storemerge = $561;
        } else {
         if ($537) {
          $$2 = 12;
          break L4;
         }
         $538 = ((($536)) + 4|0);
         $539 = HEAP32[$538>>2]|0;
         HEAP32[$539>>2] = 0;
         $540 = ((($539)) + 4|0);
         HEAP32[$540>>2] = 9;
         $541 = ((($539)) + 8|0);
         HEAP32[$541>>2] = $535;
         $542 = HEAP32[$ctx>>2]|0;
         $543 = HEAP32[$22>>2]|0;
         $544 = (_tre_ast_new_node($542,0,20)|0);
         $545 = ($544|0)==(0|0);
         if ($545) {
          $$2 = 12;
          break L4;
         }
         $546 = (($543) + 1)|0;
         $547 = ((($544)) + 4|0);
         $548 = HEAP32[$547>>2]|0;
         HEAP32[$548>>2] = 11;
         $549 = ((($548)) + 4|0);
         HEAP32[$549>>2] = 1114111;
         $550 = ((($548)) + 8|0);
         HEAP32[$550>>2] = $546;
         $551 = HEAP32[$ctx>>2]|0;
         $552 = (_tre_ast_new_union($551,$536,$544)|0);
         $553 = ($552|0)==(0|0);
         if ($553) {
          $$2 = 12;
          break L4;
         }
         $554 = HEAP32[$22>>2]|0;
         $555 = (($554) + 2)|0;
         $$in79 = $552;$storemerge = $555;
        }
        $562 = $$in79;
        HEAP32[$22>>2] = $storemerge;
        $563 = HEAP32[$12>>2]|0;
        $564 = ((($563)) + 1|0);
        HEAP32[$12>>2] = $564;
        $$be = $562;$depth$0$be = $depth$0126;$status$0$be = 0;
        break L8;
        break;
       }
       case 94:  {
        $565 = HEAP32[$21>>2]|0;
        $566 = $565 & 1;
        $567 = ($566|0)==(0);
        if ($567) {
         $568 = HEAP32[$14>>2]|0;
         $569 = ($202|0)==($568|0);
         if (!($569)) {
          $610 = $202;
          break L81;
         }
         HEAP32[$item$i66>>2] = 5;
         ;HEAP32[$item$i66$byval_copy>>2]=HEAP32[$item$i66>>2]|0;
         $570 = (_tre_stack_push($1,$item$i66$byval_copy)|0);
         $571 = ($570|0)==(0);
         if (!($571)) {
          $$be = $73;$depth$0$be = $depth$0126;$status$0$be = $570;
          break L8;
         }
        }
        $572 = HEAP32[$ctx>>2]|0;
        $573 = (_tre_ast_new_node($572,0,20)|0);
        $574 = ($573|0)==(0|0);
        if ($574) {
         $$2 = 12;
         break L4;
        }
        $575 = ((($573)) + 4|0);
        $576 = HEAP32[$575>>2]|0;
        HEAP32[$576>>2] = -2;
        $577 = ((($576)) + 4|0);
        HEAP32[$577>>2] = 1;
        $578 = ((($576)) + 8|0);
        HEAP32[$578>>2] = -1;
        $579 = $573;
        $580 = HEAP32[$12>>2]|0;
        $581 = ((($580)) + 1|0);
        HEAP32[$12>>2] = $581;
        $$be = $579;$depth$0$be = $depth$0126;$status$0$be = 0;
        break L8;
        break;
       }
       case 36:  {
        $582 = HEAP32[$21>>2]|0;
        $583 = $582 & 1;
        $584 = ($583|0)==(0);
        if ($584) {
         $585 = ((($202)) + 1|0);
         $586 = HEAP8[$585>>0]|0;
         $587 = ($586<<24>>24)==(0);
         if (!($587)) {
          $610 = $202;
          break L81;
         }
        }
        $588 = HEAP32[$ctx>>2]|0;
        $589 = (_tre_ast_new_node($588,0,20)|0);
        $590 = ($589|0)==(0|0);
        if ($590) {
         $$2 = 12;
         break L4;
        }
        $591 = ((($589)) + 4|0);
        $592 = HEAP32[$591>>2]|0;
        HEAP32[$592>>2] = -2;
        $593 = ((($592)) + 4|0);
        HEAP32[$593>>2] = 2;
        $594 = ((($592)) + 8|0);
        HEAP32[$594>>2] = -1;
        $595 = $589;
        $596 = HEAP32[$12>>2]|0;
        $597 = ((($596)) + 1|0);
        HEAP32[$12>>2] = $597;
        $$be = $595;$depth$0$be = $depth$0126;$status$0$be = 0;
        break L8;
        break;
       }
       case 41:  {
        $598 = ($depth$0126|0)==(0);
        if ($598) {
         $610 = $202;
        } else {
         label = 209;
        }
        break;
       }
       case 63: case 43: case 123: case 124: case 42:  {
        label = 209;
        break;
       }
       case 0:  {
        label = 210;
        break;
       }
       default: {
        $610 = $202;
       }
       }
      } while(0);
      if ((label|0) == 67) {
       label = 0;
       $208 = (($depth$0126) + 1)|0;
       $209 = ((($210)) + 1|0);
       HEAP32[$12>>2] = $209;
       $211 = HEAP32[$23>>2]|0;
       HEAP32[$item$i39>>2] = $211;
       ;HEAP32[$item$i39$byval_copy>>2]=HEAP32[$item$i39>>2]|0;
       $212 = (_tre_stack_push($1,$item$i39$byval_copy)|0);
       $213 = ($212|0)==(0);
       if (!($213)) {
        $$be = $73;$depth$0$be = $208;$status$0$be = $212;
        break L8;
       }
       HEAP32[$item$i40>>2] = 2;
       ;HEAP32[$item$i40$byval_copy>>2]=HEAP32[$item$i40>>2]|0;
       $214 = (_tre_stack_push($1,$item$i40$byval_copy)|0);
       $215 = ($214|0)==(0);
       if (!($215)) {
        $$be = $73;$depth$0$be = $208;$status$0$be = $214;
        break L8;
       }
       HEAP32[$item$i41>>2] = 0;
       ;HEAP32[$item$i41$byval_copy>>2]=HEAP32[$item$i41>>2]|0;
       $216 = (_tre_stack_push($1,$item$i41$byval_copy)|0);
       $217 = ($216|0)==(0);
       if (!($217)) {
        $$be = $73;$depth$0$be = $208;$status$0$be = $216;
        break L8;
       }
       $218 = HEAP32[$23>>2]|0;
       $219 = (($218) + 1)|0;
       HEAP32[$23>>2] = $219;
       $$be = $73;$depth$0$be = $208;$status$0$be = 0;
       break L8;
      }
      else if ((label|0) == 209) {
       label = 0;
       $599 = HEAP32[$21>>2]|0;
       $600 = $599 & 1;
       $601 = ($600|0)==(0);
       if ($601) {
        $610 = $202;
       } else {
        label = 210;
       }
      }
      if ((label|0) == 210) {
       label = 0;
       $602 = HEAP32[$ctx>>2]|0;
       $603 = (_tre_ast_new_node($602,0,20)|0);
       $604 = ($603|0)==(0|0);
       if ($604) {
        $$2 = 12;
        break L4;
       }
       $605 = ((($603)) + 4|0);
       $606 = HEAP32[$605>>2]|0;
       HEAP32[$606>>2] = -1;
       $607 = ((($606)) + 4|0);
       HEAP32[$607>>2] = -1;
       $608 = ((($606)) + 8|0);
       HEAP32[$608>>2] = -1;
       $609 = $603;
       $$be = $609;$depth$0$be = $depth$0126;$status$0$be = 0;
       break L8;
      }
      $611 = (_mbtowc($wc,$610,-1)|0);
      $612 = ($611|0)<(0);
      if ($612) {
       HEAP32[$wc>>2] = -1;
       $clen$0 = 1;
      } else {
       $clen$0 = $611;
      }
      $613 = HEAP32[$21>>2]|0;
      $614 = $613 & 2;
      $615 = ($614|0)==(0);
      do {
       if ($615) {
        label = 220;
       } else {
        $616 = HEAP32[$wc>>2]|0;
        $617 = (_iswupper($616)|0);
        $618 = ($617|0)==(0);
        if ($618) {
         $619 = HEAP32[$wc>>2]|0;
         $620 = (_iswlower($619)|0);
         $621 = ($620|0)==(0);
         if ($621) {
          label = 220;
          break;
         }
        }
        $622 = HEAP32[$ctx>>2]|0;
        $623 = HEAP32[$wc>>2]|0;
        $624 = (_towupper($623)|0);
        $625 = HEAP32[$wc>>2]|0;
        $626 = (_towupper($625)|0);
        $627 = HEAP32[$22>>2]|0;
        $628 = (_tre_ast_new_node($622,0,20)|0);
        $629 = ($628|0)==(0|0);
        if ($629) {
         $$2 = 12;
         break L4;
        }
        $630 = ((($628)) + 4|0);
        $631 = HEAP32[$630>>2]|0;
        HEAP32[$631>>2] = $624;
        $632 = ((($631)) + 4|0);
        HEAP32[$632>>2] = $626;
        $633 = ((($631)) + 8|0);
        HEAP32[$633>>2] = $627;
        $634 = HEAP32[$ctx>>2]|0;
        $635 = HEAP32[$wc>>2]|0;
        $636 = (_towlower($635)|0);
        $637 = HEAP32[$wc>>2]|0;
        $638 = (_towlower($637)|0);
        $639 = HEAP32[$22>>2]|0;
        $640 = (_tre_ast_new_node($634,0,20)|0);
        $641 = ($640|0)==(0|0);
        if ($641) {
         $$2 = 12;
         break L4;
        }
        $642 = ((($640)) + 4|0);
        $643 = HEAP32[$642>>2]|0;
        HEAP32[$643>>2] = $636;
        $644 = ((($643)) + 4|0);
        HEAP32[$644>>2] = $638;
        $645 = ((($643)) + 8|0);
        HEAP32[$645>>2] = $639;
        $646 = HEAP32[$ctx>>2]|0;
        $647 = (_tre_ast_new_union($646,$628,$640)|0);
        $648 = ($647|0)==(0|0);
        if ($648) {
         $$2 = 12;
         break L4;
        } else {
         $$in = $647;
        }
       }
      } while(0);
      if ((label|0) == 220) {
       label = 0;
       $649 = HEAP32[$ctx>>2]|0;
       $650 = HEAP32[$wc>>2]|0;
       $651 = HEAP32[$22>>2]|0;
       $652 = (_tre_ast_new_node($649,0,20)|0);
       $653 = ($652|0)==(0|0);
       if ($653) {
        $$2 = 12;
        break L4;
       }
       $654 = ((($652)) + 4|0);
       $655 = HEAP32[$654>>2]|0;
       HEAP32[$655>>2] = $650;
       $656 = ((($655)) + 4|0);
       HEAP32[$656>>2] = $650;
       $657 = ((($655)) + 8|0);
       HEAP32[$657>>2] = $651;
       $$in = $652;
      }
      $658 = $$in;
      $659 = HEAP32[$22>>2]|0;
      $660 = (($659) + 1)|0;
      HEAP32[$22>>2] = $660;
      $661 = HEAP32[$12>>2]|0;
      $662 = (($661) + ($clen$0)|0);
      HEAP32[$12>>2] = $662;
      $$be = $658;$depth$0$be = $depth$0126;$status$0$be = 0;
      break;
     }
     case 2:  {
      $663 = (($31) + -2)|0;
      HEAP32[$2>>2] = $663;
      $664 = (($32) + ($663<<2)|0);
      $665 = HEAP32[$664>>2]|0;
      $666 = $73;
      $667 = ((($666)) + 12|0);
      $668 = HEAP32[$667>>2]|0;
      $669 = ($668|0)>(-1);
      if ($669) {
       $670 = HEAP32[$ctx>>2]|0;
       $671 = (_tre_ast_new_node($670,0,20)|0);
       $672 = ($671|0)==(0|0);
       if ($672) {
        $$2 = 12;
        break L4;
       }
       $673 = ((($671)) + 4|0);
       $674 = HEAP32[$673>>2]|0;
       HEAP32[$674>>2] = -1;
       $675 = ((($674)) + 4|0);
       HEAP32[$675>>2] = -1;
       $676 = ((($674)) + 8|0);
       HEAP32[$676>>2] = -1;
       $677 = HEAP32[$ctx>>2]|0;
       $678 = (_tre_ast_new_catenation($677,$671,$666)|0);
       $679 = ($678|0)==(0|0);
       if ($679) {
        $$2 = 12;
        break L4;
       }
       $680 = ((($666)) + 16|0);
       $681 = HEAP32[$680>>2]|0;
       $682 = ((($678)) + 16|0);
       HEAP32[$682>>2] = $681;
       $683 = $678;
       $684 = $683;
      } else {
       $684 = $73;
      }
      $685 = $684;
      $686 = ((($685)) + 12|0);
      HEAP32[$686>>2] = $665;
      $687 = ((($685)) + 16|0);
      $688 = HEAP32[$687>>2]|0;
      $689 = (($688) + 1)|0;
      HEAP32[$687>>2] = $689;
      $$be = $684;$depth$0$be = $depth$0126;$status$0$be = 0;
      break;
     }
     case 10:  {
      $690 = (($31) + -2)|0;
      HEAP32[$2>>2] = $690;
      $691 = (($32) + ($690<<2)|0);
      $692 = HEAP32[$691>>2]|0;
      HEAP32[$21>>2] = $692;
      $$be = $73;$depth$0$be = $depth$0126;$status$0$be = 0;
      break;
     }
     default: {
      $$be = $73;$depth$0$be = $depth$0126;$status$0$be = 0;
     }
     }
    } while(0);
    $35 = HEAP32[$2>>2]|0;
    $36 = ($35|0)>($3|0);
    $37 = ($status$0$be|0)==(0);
    $38 = $37 & $36;
    $$not = $38 ^ 1;
    $39 = ($status$0$be|0)!=(0);
    $or$cond11 = $39 | $$not;
    if ($or$cond11) {
     $$lcssa100 = $$be;$$lcssa113 = $37;$depth$0$lcssa = $depth$0$be;$status$0$lcssa = $status$0$be;
     label = 229;
     break L4;
    } else {
     $31 = $35;$73 = $$be;$depth$0126 = $depth$0$be;
    }
   }
   if ((label|0) == 72) {
    $$2 = 12;
    break;
   }
   else if ((label|0) == 156) {
    $$2 = $$lcssa235;
    break;
   }
  }
 } while(0);
 if ((label|0) == 229) {
  $693 = ($depth$0$lcssa|0)>(0);
  $$not17 = $$lcssa113 ^ 1;
  $brmerge = $693 | $$not17;
  $$mux = $693 ? 8 : $status$0$lcssa;
  if ($brmerge) {
   $$2 = $$mux;
  } else {
   $694 = ((($ctx)) + 8|0);
   HEAP32[$694>>2] = $$lcssa100;
   $$2 = $status$0$lcssa;
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function _tre_add_tags($mem,$stack,$tree,$tnfa) {
 $mem = $mem|0;
 $stack = $stack|0;
 $tree = $tree|0;
 $tnfa = $tnfa|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $$lcssa149 = 0, $$lcssa150 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa154 = 0, $$lcssa155 = 0, $$lcssa156 = 0, $$lcssa157 = 0, $$lcssa158 = 0, $$lcssa159 = 0, $$lcssa160 = 0, $$lcssa161 = 0, $$lcssa162 = 0, $$lcssa48 = 0, $$lobit = 0, $$lobit$not = 0, $$next_tag$0 = 0;
 var $$phi$trans$insert = 0, $$pre = 0, $$tag$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $direction$0$ = 0, $direction$0$be = 0, $direction$059 = 0, $direction$1 = 0, $i$0 = 0, $i1$0 = 0, $i1$1 = 0, $i1$1$lcssa = 0, $i12$0 = 0, $i12$0$lcssa = 0, $i3$0 = 0, $i3$1 = 0;
 var $i3$1$lcssa = 0, $i3$257 = 0, $i4$0 = 0, $i4$0$lcssa = 0, $i5$0 = 0, $i5$0$lcssa = 0, $i8$0 = 0, $i8$0$lcssa = 0, $i9$0 = 0, $item$i = 0, $item$i$byval_copy = 0, $item$i10 = 0, $item$i10$byval_copy = 0, $item$i11 = 0, $item$i11$byval_copy = 0, $item$i12 = 0, $item$i12$byval_copy = 0, $item$i13 = 0, $item$i13$byval_copy = 0, $item$i14 = 0;
 var $item$i14$byval_copy = 0, $item$i15 = 0, $item$i15$byval_copy = 0, $item$i16 = 0, $item$i16$byval_copy = 0, $item$i17 = 0, $item$i17$byval_copy = 0, $item$i18 = 0, $item$i18$byval_copy = 0, $item$i19 = 0, $item$i19$byval_copy = 0, $item$i20 = 0, $item$i20$byval_copy = 0, $item$i21 = 0, $item$i21$byval_copy = 0, $item$i22 = 0, $item$i22$byval_copy = 0, $item$i23 = 0, $item$i23$byval_copy = 0, $item$i24 = 0;
 var $item$i24$byval_copy = 0, $item$i25 = 0, $item$i25$byval_copy = 0, $item$i26 = 0, $item$i26$byval_copy = 0, $item$i27 = 0, $item$i27$byval_copy = 0, $item$i28 = 0, $item$i28$byval_copy = 0, $item$i29 = 0, $item$i29$byval_copy = 0, $item$i30 = 0, $item$i30$byval_copy = 0, $item$i31 = 0, $item$i31$byval_copy = 0, $item$i32 = 0, $item$i32$byval_copy = 0, $item$i33 = 0, $item$i33$byval_copy = 0, $item$i34 = 0;
 var $item$i34$byval_copy = 0, $item$i35 = 0, $item$i35$byval_copy = 0, $item$i36 = 0, $item$i36$byval_copy = 0, $item$i5 = 0, $item$i5$byval_copy = 0, $item$i6 = 0, $item$i6$byval_copy = 0, $item$i7 = 0, $item$i7$byval_copy = 0, $item$i8 = 0, $item$i8$byval_copy = 0, $item$i9 = 0, $item$i9$byval_copy = 0, $left_tag$0 = 0, $minimal_tag$0$ = 0, $minimal_tag$0$be = 0, $minimal_tag$0$lcssa = 0, $minimal_tag$062 = 0;
 var $minimal_tag$1 = 0, $minimal_tag$2 = 0, $minimal_tag$3 = 0, $minimal_tag$4 = 0, $minimal_tag$6 = 0, $minimal_tag$7 = 0, $minimal_tag$8 = 0, $minimal_tag$9 = 0, $next_tag$0$ = 0, $next_tag$0$be = 0, $next_tag$065 = 0, $next_tag$1 = 0, $next_tag$3 = 0, $next_tag$4 = 0, $num_minimals$0$be = 0, $num_minimals$0$lcssa = 0, $num_minimals$071 = 0, $num_minimals$1 = 0, $num_minimals$10 = 0, $num_minimals$2 = 0;
 var $num_minimals$3 = 0, $num_minimals$4 = 0, $num_minimals$6 = 0, $num_minimals$7 = 0, $num_minimals$8 = 0, $num_minimals$9 = 0, $num_tags$0$be = 0, $num_tags$0$lcssa = 0, $num_tags$074 = 0, $num_tags$2 = 0, $num_tags$3 = 0, $or$cond3 = 0, $or$cond358 = 0, $or$cond4 = 0, $regset$0$be = 0, $regset$0$lcssa = 0, $regset$077 = 0, $regset$1 = 0, $reserved_tag$0 = 0, $right_tag$0 = 0;
 var $status$0$be = 0, $status$0$lcssa = 0, $status$2 = 0, $status$3 = 0, $status$5 = 0, $status$6 = 0, $status$7 = 0, $status$8 = 0, $tag$0$be = 0, $tag$0$lcssa = 0, $tag$068 = 0, $tag$2 = 0, $tag$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $item$i36$byval_copy = sp + 260|0;
 $item$i35$byval_copy = sp + 256|0;
 $item$i34$byval_copy = sp + 252|0;
 $item$i33$byval_copy = sp + 248|0;
 $item$i32$byval_copy = sp + 244|0;
 $item$i31$byval_copy = sp + 240|0;
 $item$i30$byval_copy = sp + 236|0;
 $item$i29$byval_copy = sp + 232|0;
 $item$i28$byval_copy = sp + 228|0;
 $item$i27$byval_copy = sp + 224|0;
 $item$i26$byval_copy = sp + 220|0;
 $item$i25$byval_copy = sp + 216|0;
 $item$i24$byval_copy = sp + 212|0;
 $item$i23$byval_copy = sp + 208|0;
 $item$i22$byval_copy = sp + 204|0;
 $item$i21$byval_copy = sp + 200|0;
 $item$i20$byval_copy = sp + 196|0;
 $item$i19$byval_copy = sp + 192|0;
 $item$i18$byval_copy = sp + 188|0;
 $item$i17$byval_copy = sp + 184|0;
 $item$i16$byval_copy = sp + 180|0;
 $item$i15$byval_copy = sp + 176|0;
 $item$i14$byval_copy = sp + 172|0;
 $item$i13$byval_copy = sp + 168|0;
 $item$i12$byval_copy = sp + 164|0;
 $item$i11$byval_copy = sp + 160|0;
 $item$i10$byval_copy = sp + 156|0;
 $item$i9$byval_copy = sp + 152|0;
 $item$i8$byval_copy = sp + 148|0;
 $item$i7$byval_copy = sp + 144|0;
 $item$i6$byval_copy = sp + 140|0;
 $item$i5$byval_copy = sp + 136|0;
 $item$i$byval_copy = sp + 132|0;
 $item$i36 = sp + 128|0;
 $item$i35 = sp + 124|0;
 $item$i34 = sp + 120|0;
 $item$i33 = sp + 116|0;
 $item$i32 = sp + 112|0;
 $item$i31 = sp + 108|0;
 $item$i30 = sp + 104|0;
 $item$i29 = sp + 100|0;
 $item$i28 = sp + 96|0;
 $item$i27 = sp + 92|0;
 $item$i26 = sp + 88|0;
 $item$i25 = sp + 84|0;
 $item$i24 = sp + 80|0;
 $item$i23 = sp + 76|0;
 $item$i22 = sp + 72|0;
 $item$i21 = sp + 68|0;
 $item$i20 = sp + 64|0;
 $item$i19 = sp + 60|0;
 $item$i18 = sp + 56|0;
 $item$i17 = sp + 52|0;
 $item$i16 = sp + 48|0;
 $item$i15 = sp + 44|0;
 $item$i14 = sp + 40|0;
 $item$i13 = sp + 36|0;
 $item$i12 = sp + 32|0;
 $item$i11 = sp + 28|0;
 $item$i10 = sp + 24|0;
 $item$i9 = sp + 20|0;
 $item$i8 = sp + 16|0;
 $item$i7 = sp + 12|0;
 $item$i6 = sp + 8|0;
 $item$i5 = sp + 4|0;
 $item$i = sp;
 $0 = ((($stack)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($mem|0)==(0|0);
 $3 = ($tnfa|0)==(0|0);
 $4 = $2 | $3;
 if (!($4)) {
  $5 = ((($tnfa)) + 48|0);
  HEAP32[$5>>2] = 0;
  $6 = ((($tnfa)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$7>>2] = -1;
 }
 $8 = ((($tnfa)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 << 3;
 $11 = (($10) + 8)|0;
 $12 = (_malloc($11)|0);
 $13 = ($12|0)==(0|0);
 do {
  if ($13) {
   $$0 = 12;
  } else {
   HEAP32[$12>>2] = -1;
   $14 = $9 << 2;
   $15 = (($14) + 4)|0;
   $16 = (_malloc($15)|0);
   $17 = ($16|0)==(0|0);
   if ($17) {
    _free($12);
    $$0 = 12;
    break;
   }
   HEAP32[$16>>2] = -1;
   $i$0 = 0;
   while(1) {
    $18 = ($i$0>>>0)>($9>>>0);
    $19 = (($i$0) + 1)|0;
    if ($18) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   HEAP32[$item$i>>2] = $tree;
   ;HEAP32[$item$i$byval_copy>>2]=HEAP32[$item$i>>2]|0;
   (_tre_stack_push($stack,$item$i$byval_copy)|0);
   HEAP32[$item$i5>>2] = 0;
   ;HEAP32[$item$i5$byval_copy>>2]=HEAP32[$item$i5>>2]|0;
   $20 = (_tre_stack_push($stack,$item$i5$byval_copy)|0);
   $21 = HEAP32[$0>>2]|0;
   $22 = ($21|0)<=($1|0);
   $23 = ($20|0)!=(0);
   $or$cond358 = $23 | $22;
   L12: do {
    if ($or$cond358) {
     $minimal_tag$0$lcssa = -1;$num_minimals$0$lcssa = 0;$num_tags$0$lcssa = 0;$regset$0$lcssa = $12;$status$0$lcssa = $20;$tag$0$lcssa = 0;
    } else {
     $24 = ((($stack)) + 16|0);
     $25 = ((($tnfa)) + 32|0);
     $26 = ((($tnfa)) + 36|0);
     $27 = ((($tnfa)) + 16|0);
     $29 = $21;$direction$059 = 0;$minimal_tag$062 = -1;$next_tag$065 = 1;$num_minimals$071 = 0;$num_tags$074 = 0;$regset$077 = $12;$tag$068 = 0;
     while(1) {
      $28 = (($29) + -1)|0;
      HEAP32[$0>>2] = $28;
      $30 = HEAP32[$24>>2]|0;
      $31 = (($30) + ($28<<2)|0);
      $32 = HEAP32[$31>>2]|0;
      L16: do {
       switch ($32|0) {
       case 6:  {
        $36 = (($29) + -2)|0;
        HEAP32[$0>>2] = $36;
        $37 = (($30) + ($36<<2)|0);
        $38 = HEAP32[$37>>2]|0;
        $i1$0 = 0;
        while(1) {
         $39 = (($regset$077) + ($i1$0<<2)|0);
         $40 = HEAP32[$39>>2]|0;
         $41 = ($40|0)>(-1);
         $42 = (($i1$0) + 1)|0;
         if ($41) {
          $i1$0 = $42;
         } else {
          $$lcssa161 = $39;$$lcssa162 = $42;
          break;
         }
        }
        $43 = $38 << 1;
        $44 = $43 | 1;
        HEAP32[$$lcssa161>>2] = $44;
        $45 = (($regset$077) + ($$lcssa162<<2)|0);
        HEAP32[$45>>2] = -1;
        $i1$1 = 0;
        while(1) {
         $46 = (($16) + ($i1$1<<2)|0);
         $47 = HEAP32[$46>>2]|0;
         $48 = ($47|0)>(-1);
         $49 = (($i1$1) + 1)|0;
         if ($48) {
          $i1$1 = $49;
         } else {
          $i1$1$lcssa = $i1$1;
          break;
         }
        }
        $50 = (($i1$1$lcssa) + -1)|0;
        $51 = (($16) + ($50<<2)|0);
        HEAP32[$51>>2] = -1;
        $direction$0$be = $direction$059;$minimal_tag$0$be = $minimal_tag$062;$next_tag$0$be = $next_tag$065;$num_minimals$0$be = $num_minimals$071;$num_tags$0$be = $num_tags$074;$regset$0$be = $regset$077;$status$0$be = 0;$tag$0$be = $tag$068;
        break;
       }
       case 0:  {
        $52 = (($29) + -2)|0;
        HEAP32[$0>>2] = $52;
        $53 = (($30) + ($52<<2)|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = ((($54)) + 12|0);
        $56 = HEAP32[$55>>2]|0;
        $57 = ($56|0)>(-1);
        if ($57) {
         $i3$0 = 0;
         while(1) {
          $58 = (($regset$077) + ($i3$0<<2)|0);
          $59 = HEAP32[$58>>2]|0;
          $60 = ($59|0)>(-1);
          $61 = (($i3$0) + 1)|0;
          if ($60) {
           $i3$0 = $61;
          } else {
           $$lcssa150 = $58;$$lcssa151 = $61;
           break;
          }
         }
         $62 = $56 << 1;
         HEAP32[$$lcssa150>>2] = $62;
         $63 = (($regset$077) + ($$lcssa151<<2)|0);
         HEAP32[$63>>2] = -1;
         if (!($4)) {
          $i3$1 = 0;
          while(1) {
           $64 = (($16) + ($i3$1<<2)|0);
           $65 = HEAP32[$64>>2]|0;
           $66 = ($65|0)>(-1);
           $67 = (($i3$1) + 1)|0;
           if ($66) {
            $i3$1 = $67;
           } else {
            $i3$1$lcssa = $i3$1;
            break;
           }
          }
          $68 = HEAP32[$27>>2]|0;
          $69 = (((($68) + (($56*12)|0)|0)) + 8|0);
          HEAP32[$69>>2] = 0;
          $70 = ($i3$1$lcssa|0)>(0);
          if ($70) {
           $71 = $i3$1$lcssa << 2;
           $72 = (($71) + 4)|0;
           $73 = (_malloc($72)|0);
           $74 = ($73|0)==(0|0);
           if ($74) {
            $minimal_tag$0$lcssa = $minimal_tag$062;$num_minimals$0$lcssa = $num_minimals$071;$num_tags$0$lcssa = $num_tags$074;$regset$0$lcssa = $regset$077;$status$0$lcssa = 12;$tag$0$lcssa = $tag$068;
            break L12;
           }
           HEAP32[$69>>2] = $73;
           $75 = HEAP32[$16>>2]|0;
           $76 = ($75|0)>(-1);
           if ($76) {
            $77 = $75;$78 = $73;$i3$257 = 0;
            while(1) {
             HEAP32[$78>>2] = $77;
             $79 = (($i3$257) + 1)|0;
             $80 = (($16) + ($79<<2)|0);
             $81 = HEAP32[$80>>2]|0;
             $82 = ($81|0)>(-1);
             $83 = (($73) + ($79<<2)|0);
             if ($82) {
              $77 = $81;$78 = $83;$i3$257 = $79;
             } else {
              $$lcssa48 = $83;
              break;
             }
            }
           } else {
            $$lcssa48 = $73;
           }
           HEAP32[$$lcssa48>>2] = -1;
          }
         }
         $84 = HEAP32[$55>>2]|0;
         HEAP32[$item$i6>>2] = $84;
         ;HEAP32[$item$i6$byval_copy>>2]=HEAP32[$item$i6>>2]|0;
         $85 = (_tre_stack_push($stack,$item$i6$byval_copy)|0);
         $86 = ($85|0)==(0);
         if (!($86)) {
          $minimal_tag$0$lcssa = $minimal_tag$062;$num_minimals$0$lcssa = $num_minimals$071;$num_tags$0$lcssa = $num_tags$074;$regset$0$lcssa = $regset$077;$status$0$lcssa = $85;$tag$0$lcssa = $tag$068;
          break L12;
         }
         HEAP32[$item$i7>>2] = 6;
         ;HEAP32[$item$i7$byval_copy>>2]=HEAP32[$item$i7>>2]|0;
         $87 = (_tre_stack_push($stack,$item$i7$byval_copy)|0);
         $88 = ($87|0)==(0);
         if (!($88)) {
          $minimal_tag$0$lcssa = $minimal_tag$062;$num_minimals$0$lcssa = $num_minimals$071;$num_tags$0$lcssa = $num_tags$074;$regset$0$lcssa = $regset$077;$status$0$lcssa = $87;$tag$0$lcssa = $tag$068;
          break L12;
         }
        }
        $89 = HEAP32[$54>>2]|0;
        L42: do {
         switch ($89|0) {
         case 0:  {
          $90 = ((($54)) + 4|0);
          $91 = HEAP32[$90>>2]|0;
          $92 = HEAP32[$91>>2]|0;
          $93 = ($92|0)>(-1);
          $94 = ($92|0)==(-4);
          $or$cond4 = $93 | $94;
          if ($or$cond4) {
           $95 = HEAP32[$regset$077>>2]|0;
           $96 = ($95|0)>(-1);
           if ($96) {
            if ($4) {
             $110 = ((($54)) + 20|0);
             HEAP32[$110>>2] = 1;
             $minimal_tag$2 = $minimal_tag$062;$num_minimals$2 = $num_minimals$071;$status$2 = 0;
            } else {
             $97 = (_tre_add_tag_left($mem,$54,$tag$068)|0);
             $98 = HEAP32[$25>>2]|0;
             $99 = (($98) + ($tag$068<<2)|0);
             HEAP32[$99>>2] = $direction$059;
             $100 = ($minimal_tag$062|0)>(-1);
             if ($100) {
              $101 = HEAP32[$26>>2]|0;
              $i4$0 = 0;
              while(1) {
               $102 = (($101) + ($i4$0<<2)|0);
               $103 = HEAP32[$102>>2]|0;
               $104 = ($103|0)>(-1);
               $105 = (($i4$0) + 1)|0;
               if ($104) {
                $i4$0 = $105;
               } else {
                $$lcssa157 = $102;$$lcssa158 = $105;$i4$0$lcssa = $i4$0;
                break;
               }
              }
              HEAP32[$$lcssa157>>2] = $tag$068;
              $106 = (($101) + ($$lcssa158<<2)|0);
              HEAP32[$106>>2] = $minimal_tag$062;
              $107 = (($i4$0$lcssa) + 2)|0;
              $108 = (($101) + ($107<<2)|0);
              HEAP32[$108>>2] = -1;
              $109 = (($num_minimals$071) + 1)|0;
              $minimal_tag$1 = -1;$num_minimals$1 = $109;
             } else {
              $minimal_tag$1 = $minimal_tag$062;$num_minimals$1 = $num_minimals$071;
             }
             _tre_purge_regset($regset$077,$tnfa,$tag$068);
             $minimal_tag$2 = $minimal_tag$1;$num_minimals$2 = $num_minimals$1;$status$2 = $97;
            }
            HEAP32[$regset$077>>2] = -1;
            $111 = (($num_tags$074) + 1)|0;
            $112 = (($next_tag$065) + 1)|0;
            $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$2;$next_tag$4 = $112;$num_minimals$9 = $num_minimals$2;$num_tags$3 = $111;$status$7 = $status$2;$tag$3 = $next_tag$065;
           } else {
            $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = 0;$tag$3 = $tag$068;
           }
          } else {
           $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = 0;$tag$3 = $tag$068;
          }
          break;
         }
         case 1:  {
          $113 = ((($54)) + 4|0);
          $114 = HEAP32[$113>>2]|0;
          $115 = HEAP32[$114>>2]|0;
          $116 = ((($114)) + 4|0);
          $117 = HEAP32[$116>>2]|0;
          HEAP32[$item$i8>>2] = $54;
          ;HEAP32[$item$i8$byval_copy>>2]=HEAP32[$item$i8>>2]|0;
          $118 = (_tre_stack_push($stack,$item$i8$byval_copy)|0);
          $119 = ($118|0)==(0);
          if ($119) {
           HEAP32[$item$i9>>2] = 5;
           ;HEAP32[$item$i9$byval_copy>>2]=HEAP32[$item$i9>>2]|0;
           $120 = (_tre_stack_push($stack,$item$i9$byval_copy)|0);
           $121 = ($120|0)==(0);
           if ($121) {
            HEAP32[$item$i10>>2] = $117;
            ;HEAP32[$item$i10$byval_copy>>2]=HEAP32[$item$i10>>2]|0;
            $122 = (_tre_stack_push($stack,$item$i10$byval_copy)|0);
            $123 = ($122|0)==(0);
            if ($123) {
             HEAP32[$item$i11>>2] = 0;
             ;HEAP32[$item$i11$byval_copy>>2]=HEAP32[$item$i11>>2]|0;
             $124 = (_tre_stack_push($stack,$item$i11$byval_copy)|0);
             $125 = ($124|0)==(0);
             if ($125) {
              $126 = ((($115)) + 20|0);
              $127 = HEAP32[$126>>2]|0;
              $128 = (($127) + ($next_tag$065))|0;
              HEAP32[$item$i12>>2] = $128;
              ;HEAP32[$item$i12$byval_copy>>2]=HEAP32[$item$i12>>2]|0;
              $129 = (_tre_stack_push($stack,$item$i12$byval_copy)|0);
              $130 = ($129|0)==(0);
              if ($130) {
               $131 = HEAP32[$126>>2]|0;
               $132 = ($131|0)>(0);
               if ($132) {
                $133 = ((($117)) + 20|0);
                $134 = HEAP32[$133>>2]|0;
                $135 = ($134|0)>(0);
                $next_tag$0$ = $135 ? $next_tag$065 : -1;
                $136 = $135&1;
                $$next_tag$0 = (($136) + ($next_tag$065))|0;
                $next_tag$1 = $$next_tag$0;$reserved_tag$0 = $next_tag$0$;
               } else {
                $next_tag$1 = $next_tag$065;$reserved_tag$0 = -1;
               }
               HEAP32[$item$i13>>2] = $reserved_tag$0;
               ;HEAP32[$item$i13$byval_copy>>2]=HEAP32[$item$i13>>2]|0;
               $137 = (_tre_stack_push($stack,$item$i13$byval_copy)|0);
               $138 = ($137|0)==(0);
               if ($138) {
                HEAP32[$item$i14>>2] = 4;
                ;HEAP32[$item$i14$byval_copy>>2]=HEAP32[$item$i14>>2]|0;
                $139 = (_tre_stack_push($stack,$item$i14$byval_copy)|0);
                $140 = ($139|0)==(0);
                if ($140) {
                 HEAP32[$item$i15>>2] = $115;
                 ;HEAP32[$item$i15$byval_copy>>2]=HEAP32[$item$i15>>2]|0;
                 $141 = (_tre_stack_push($stack,$item$i15$byval_copy)|0);
                 $142 = ($141|0)==(0);
                 if ($142) {
                  HEAP32[$item$i16>>2] = 0;
                  ;HEAP32[$item$i16$byval_copy>>2]=HEAP32[$item$i16>>2]|0;
                  $143 = (_tre_stack_push($stack,$item$i16$byval_copy)|0);
                  $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$1;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $143;$tag$3 = $tag$068;
                 } else {
                  $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$1;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $141;$tag$3 = $tag$068;
                 }
                } else {
                 $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$1;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $139;$tag$3 = $tag$068;
                }
               } else {
                $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$1;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $137;$tag$3 = $tag$068;
               }
              } else {
               $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $129;$tag$3 = $tag$068;
              }
             } else {
              $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $124;$tag$3 = $tag$068;
             }
            } else {
             $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $122;$tag$3 = $tag$068;
            }
           } else {
            $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $120;$tag$3 = $tag$068;
           }
          } else {
           $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $118;$tag$3 = $tag$068;
          }
          break;
         }
         case 2:  {
          $144 = ((($54)) + 4|0);
          $145 = HEAP32[$144>>2]|0;
          if ($4) {
           $146 = HEAP32[$regset$077>>2]|0;
           $147 = ($146|0)>(-1);
           if ($147) {
            $153 = 1;
           } else {
            $148 = ((($145)) + 12|0);
            $149 = HEAP8[$148>>0]|0;
            $150 = $149 & 1;
            $151 = ($150<<24>>24)!=(0);
            $153 = $151;
           }
           $152 = $153&1;
           HEAP32[$item$i17>>2] = $152;
           ;HEAP32[$item$i17$byval_copy>>2]=HEAP32[$item$i17>>2]|0;
           $154 = (_tre_stack_push($stack,$item$i17$byval_copy)|0);
           $155 = ($154|0)==(0);
           if (!($155)) {
            $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $154;$tag$3 = $tag$068;
            break L42;
           }
          } else {
           HEAP32[$item$i18>>2] = $tag$068;
           ;HEAP32[$item$i18$byval_copy>>2]=HEAP32[$item$i18>>2]|0;
           $156 = (_tre_stack_push($stack,$item$i18$byval_copy)|0);
           $157 = ($156|0)==(0);
           if (!($157)) {
            $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $156;$tag$3 = $tag$068;
            break L42;
           }
           $158 = ((($145)) + 12|0);
           $159 = HEAP8[$158>>0]|0;
           $160 = $159 & 1;
           $161 = $160&255;
           HEAP32[$item$i19>>2] = $161;
           ;HEAP32[$item$i19$byval_copy>>2]=HEAP32[$item$i19>>2]|0;
           $162 = (_tre_stack_push($stack,$item$i19$byval_copy)|0);
           $163 = ($162|0)==(0);
           if (!($163)) {
            $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $162;$tag$3 = $tag$068;
            break L42;
           }
          }
          HEAP32[$item$i20>>2] = $54;
          ;HEAP32[$item$i20$byval_copy>>2]=HEAP32[$item$i20>>2]|0;
          $164 = (_tre_stack_push($stack,$item$i20$byval_copy)|0);
          $165 = ($164|0)==(0);
          if ($165) {
           HEAP32[$item$i21>>2] = 1;
           ;HEAP32[$item$i21$byval_copy>>2]=HEAP32[$item$i21>>2]|0;
           $166 = (_tre_stack_push($stack,$item$i21$byval_copy)|0);
           $167 = ($166|0)==(0);
           if ($167) {
            $168 = HEAP32[$145>>2]|0;
            HEAP32[$item$i22>>2] = $168;
            ;HEAP32[$item$i22$byval_copy>>2]=HEAP32[$item$i22>>2]|0;
            $169 = (_tre_stack_push($stack,$item$i22$byval_copy)|0);
            $170 = ($169|0)==(0);
            if ($170) {
             HEAP32[$item$i23>>2] = 0;
             ;HEAP32[$item$i23$byval_copy>>2]=HEAP32[$item$i23>>2]|0;
             $171 = (_tre_stack_push($stack,$item$i23$byval_copy)|0);
             $172 = ($171|0)==(0);
             if ($172) {
              $173 = HEAP32[$regset$077>>2]|0;
              $174 = ($173|0)>(-1);
              if (!($174)) {
               $175 = ((($145)) + 12|0);
               $176 = HEAP8[$175>>0]|0;
               $177 = $176 & 1;
               $178 = ($177<<24>>24)==(0);
               if ($178) {
                $direction$1 = 0;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = 0;$tag$3 = $tag$068;
                break L42;
               }
              }
              if ($4) {
               $minimal_tag$4 = $minimal_tag$062;$num_minimals$4 = $num_minimals$071;$status$3 = 0;
              } else {
               $179 = (_tre_add_tag_left($mem,$54,$tag$068)|0);
               $180 = ((($145)) + 12|0);
               $181 = HEAP8[$180>>0]|0;
               $182 = $181 & 1;
               $183 = ($182<<24>>24)==(0);
               $184 = HEAP32[$25>>2]|0;
               $185 = (($184) + ($tag$068<<2)|0);
               $direction$0$ = $183 ? $direction$059 : 1;
               HEAP32[$185>>2] = $direction$0$;
               $186 = ($minimal_tag$062|0)>(-1);
               if ($186) {
                $187 = HEAP32[$26>>2]|0;
                $i5$0 = 0;
                while(1) {
                 $188 = (($187) + ($i5$0<<2)|0);
                 $189 = HEAP32[$188>>2]|0;
                 $190 = ($189|0)>(-1);
                 $191 = (($i5$0) + 1)|0;
                 if ($190) {
                  $i5$0 = $191;
                 } else {
                  $$lcssa155 = $188;$$lcssa156 = $191;$i5$0$lcssa = $i5$0;
                  break;
                 }
                }
                HEAP32[$$lcssa155>>2] = $tag$068;
                $192 = (($187) + ($$lcssa156<<2)|0);
                HEAP32[$192>>2] = $minimal_tag$062;
                $193 = (($i5$0$lcssa) + 2)|0;
                $194 = (($187) + ($193<<2)|0);
                HEAP32[$194>>2] = -1;
                $195 = (($num_minimals$071) + 1)|0;
                $minimal_tag$3 = -1;$num_minimals$3 = $195;
               } else {
                $minimal_tag$3 = $minimal_tag$062;$num_minimals$3 = $num_minimals$071;
               }
               _tre_purge_regset($regset$077,$tnfa,$tag$068);
               $minimal_tag$4 = $minimal_tag$3;$num_minimals$4 = $num_minimals$3;$status$3 = $179;
              }
              HEAP32[$regset$077>>2] = -1;
              $196 = (($num_tags$074) + 1)|0;
              $197 = (($next_tag$065) + 1)|0;
              $direction$1 = 0;$minimal_tag$9 = $minimal_tag$4;$next_tag$4 = $197;$num_minimals$9 = $num_minimals$4;$num_tags$3 = $196;$status$7 = $status$3;$tag$3 = $next_tag$065;
             } else {
              $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $171;$tag$3 = $tag$068;
             }
            } else {
             $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $169;$tag$3 = $tag$068;
            }
           } else {
            $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $166;$tag$3 = $tag$068;
           }
          } else {
           $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $164;$tag$3 = $tag$068;
          }
          break;
         }
         case 3:  {
          $198 = ((($54)) + 4|0);
          $199 = HEAP32[$198>>2]|0;
          $200 = HEAP32[$199>>2]|0;
          $201 = ((($199)) + 4|0);
          $202 = HEAP32[$201>>2]|0;
          $203 = HEAP32[$regset$077>>2]|0;
          $204 = ($203|0)>(-1);
          $205 = (($next_tag$065) + 1)|0;
          $right_tag$0 = $204 ? $205 : $next_tag$065;
          HEAP32[$item$i24>>2] = $right_tag$0;
          ;HEAP32[$item$i24$byval_copy>>2]=HEAP32[$item$i24>>2]|0;
          $206 = (_tre_stack_push($stack,$item$i24$byval_copy)|0);
          $207 = ($206|0)==(0);
          if ($207) {
           $left_tag$0 = $204 ? $next_tag$065 : $tag$068;
           HEAP32[$item$i25>>2] = $left_tag$0;
           ;HEAP32[$item$i25$byval_copy>>2]=HEAP32[$item$i25>>2]|0;
           $208 = (_tre_stack_push($stack,$item$i25$byval_copy)|0);
           $209 = ($208|0)==(0);
           if ($209) {
            HEAP32[$item$i26>>2] = $regset$077;
            ;HEAP32[$item$i26$byval_copy>>2]=HEAP32[$item$i26>>2]|0;
            $210 = (_tre_stack_push($stack,$item$i26$byval_copy)|0);
            $211 = ($210|0)==(0);
            if ($211) {
             $212 = HEAP32[$regset$077>>2]|0;
             $$lobit = $212 >>> 31;
             $$lobit$not = $$lobit ^ 1;
             HEAP32[$item$i27>>2] = $$lobit$not;
             ;HEAP32[$item$i27$byval_copy>>2]=HEAP32[$item$i27>>2]|0;
             $213 = (_tre_stack_push($stack,$item$i27$byval_copy)|0);
             $214 = ($213|0)==(0);
             if ($214) {
              HEAP32[$item$i28>>2] = $54;
              ;HEAP32[$item$i28$byval_copy>>2]=HEAP32[$item$i28>>2]|0;
              $215 = (_tre_stack_push($stack,$item$i28$byval_copy)|0);
              $216 = ($215|0)==(0);
              if ($216) {
               HEAP32[$item$i29>>2] = $202;
               ;HEAP32[$item$i29$byval_copy>>2]=HEAP32[$item$i29>>2]|0;
               $217 = (_tre_stack_push($stack,$item$i29$byval_copy)|0);
               $218 = ($217|0)==(0);
               if ($218) {
                HEAP32[$item$i30>>2] = $200;
                ;HEAP32[$item$i30$byval_copy>>2]=HEAP32[$item$i30>>2]|0;
                $219 = (_tre_stack_push($stack,$item$i30$byval_copy)|0);
                $220 = ($219|0)==(0);
                if ($220) {
                 HEAP32[$item$i31>>2] = 3;
                 ;HEAP32[$item$i31$byval_copy>>2]=HEAP32[$item$i31>>2]|0;
                 $221 = (_tre_stack_push($stack,$item$i31$byval_copy)|0);
                 $222 = ($221|0)==(0);
                 if ($222) {
                  HEAP32[$item$i32>>2] = $202;
                  ;HEAP32[$item$i32$byval_copy>>2]=HEAP32[$item$i32>>2]|0;
                  $223 = (_tre_stack_push($stack,$item$i32$byval_copy)|0);
                  $224 = ($223|0)==(0);
                  if ($224) {
                   HEAP32[$item$i33>>2] = 0;
                   ;HEAP32[$item$i33$byval_copy>>2]=HEAP32[$item$i33>>2]|0;
                   $225 = (_tre_stack_push($stack,$item$i33$byval_copy)|0);
                   $226 = ($225|0)==(0);
                   if ($226) {
                    HEAP32[$item$i34>>2] = 2;
                    ;HEAP32[$item$i34$byval_copy>>2]=HEAP32[$item$i34>>2]|0;
                    $227 = (_tre_stack_push($stack,$item$i34$byval_copy)|0);
                    $228 = ($227|0)==(0);
                    if (!($228)) {
                     $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $227;$tag$3 = $tag$068;
                     break L42;
                    }
                    HEAP32[$item$i35>>2] = $200;
                    ;HEAP32[$item$i35$byval_copy>>2]=HEAP32[$item$i35>>2]|0;
                    $229 = (_tre_stack_push($stack,$item$i35$byval_copy)|0);
                    $230 = ($229|0)==(0);
                    if (!($230)) {
                     $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $229;$tag$3 = $tag$068;
                     break L42;
                    }
                    HEAP32[$item$i36>>2] = 0;
                    ;HEAP32[$item$i36$byval_copy>>2]=HEAP32[$item$i36>>2]|0;
                    $231 = (_tre_stack_push($stack,$item$i36$byval_copy)|0);
                    $232 = ($231|0)==(0);
                    if (!($232)) {
                     $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $231;$tag$3 = $tag$068;
                     break L42;
                    }
                    $233 = HEAP32[$regset$077>>2]|0;
                    $234 = ($233|0)>(-1);
                    if ($234) {
                     if ($4) {
                      $minimal_tag$7 = $minimal_tag$062;$num_minimals$7 = $num_minimals$071;$status$5 = 0;
                     } else {
                      $235 = (_tre_add_tag_left($mem,$54,$tag$068)|0);
                      $236 = HEAP32[$25>>2]|0;
                      $237 = (($236) + ($tag$068<<2)|0);
                      HEAP32[$237>>2] = $direction$059;
                      $238 = ($minimal_tag$062|0)>(-1);
                      if ($238) {
                       $239 = HEAP32[$26>>2]|0;
                       $i8$0 = 0;
                       while(1) {
                        $240 = (($239) + ($i8$0<<2)|0);
                        $241 = HEAP32[$240>>2]|0;
                        $242 = ($241|0)>(-1);
                        $243 = (($i8$0) + 1)|0;
                        if ($242) {
                         $i8$0 = $243;
                        } else {
                         $$lcssa153 = $240;$$lcssa154 = $243;$i8$0$lcssa = $i8$0;
                         break;
                        }
                       }
                       HEAP32[$$lcssa153>>2] = $tag$068;
                       $244 = (($239) + ($$lcssa154<<2)|0);
                       HEAP32[$244>>2] = $minimal_tag$062;
                       $245 = (($i8$0$lcssa) + 2)|0;
                       $246 = (($239) + ($245<<2)|0);
                       HEAP32[$246>>2] = -1;
                       $247 = (($num_minimals$071) + 1)|0;
                       $minimal_tag$6 = -1;$num_minimals$6 = $247;
                      } else {
                       $minimal_tag$6 = $minimal_tag$062;$num_minimals$6 = $num_minimals$071;
                      }
                      _tre_purge_regset($regset$077,$tnfa,$tag$068);
                      $minimal_tag$7 = $minimal_tag$6;$num_minimals$7 = $num_minimals$6;$status$5 = $235;
                     }
                     HEAP32[$regset$077>>2] = -1;
                     $248 = (($num_tags$074) + 1)|0;
                     $minimal_tag$8 = $minimal_tag$7;$next_tag$3 = $205;$num_minimals$8 = $num_minimals$7;$num_tags$2 = $248;$status$6 = $status$5;$tag$2 = $next_tag$065;
                    } else {
                     $minimal_tag$8 = $minimal_tag$062;$next_tag$3 = $next_tag$065;$num_minimals$8 = $num_minimals$071;$num_tags$2 = $num_tags$074;$status$6 = 0;$tag$2 = $tag$068;
                    }
                    $249 = ((($54)) + 16|0);
                    $250 = HEAP32[$249>>2]|0;
                    $251 = ($250|0)>(0);
                    if (!($251)) {
                     $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$8;$next_tag$4 = $next_tag$3;$num_minimals$9 = $num_minimals$8;$num_tags$3 = $num_tags$2;$status$7 = $status$6;$tag$3 = $tag$2;
                     break L42;
                    }
                    $252 = (($next_tag$3) + 1)|0;
                    $253 = (($next_tag$3) + 2)|0;
                    $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$8;$next_tag$4 = $253;$num_minimals$9 = $num_minimals$8;$num_tags$3 = $num_tags$2;$status$7 = $status$6;$tag$3 = $252;
                   } else {
                    $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $225;$tag$3 = $tag$068;
                   }
                  } else {
                   $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $223;$tag$3 = $tag$068;
                  }
                 } else {
                  $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $221;$tag$3 = $tag$068;
                 }
                } else {
                 $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $219;$tag$3 = $tag$068;
                }
               } else {
                $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $217;$tag$3 = $tag$068;
               }
              } else {
               $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $215;$tag$3 = $tag$068;
              }
             } else {
              $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $213;$tag$3 = $tag$068;
             }
            } else {
             $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $210;$tag$3 = $tag$068;
            }
           } else {
            $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $208;$tag$3 = $tag$068;
           }
          } else {
           $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = $206;$tag$3 = $tag$068;
          }
          break;
         }
         default: {
          $direction$1 = $direction$059;$minimal_tag$9 = $minimal_tag$062;$next_tag$4 = $next_tag$065;$num_minimals$9 = $num_minimals$071;$num_tags$3 = $num_tags$074;$status$7 = 0;$tag$3 = $tag$068;
         }
         }
        } while(0);
        $254 = HEAP32[$55>>2]|0;
        $255 = ($254|0)>(-1);
        if ($255) {
         $i9$0 = 0;
         while(1) {
          $256 = (($16) + ($i9$0<<2)|0);
          $257 = HEAP32[$256>>2]|0;
          $258 = ($257|0)>(-1);
          $259 = (($i9$0) + 1)|0;
          if ($258) {
           $i9$0 = $259;
          } else {
           $$lcssa159 = $256;$$lcssa160 = $259;
           break;
          }
         }
         HEAP32[$$lcssa159>>2] = $254;
         $260 = (($16) + ($$lcssa160<<2)|0);
         HEAP32[$260>>2] = -1;
         $direction$0$be = $direction$1;$minimal_tag$0$be = $minimal_tag$9;$next_tag$0$be = $next_tag$4;$num_minimals$0$be = $num_minimals$9;$num_tags$0$be = $num_tags$3;$regset$0$be = $regset$077;$status$0$be = $status$7;$tag$0$be = $tag$3;
        } else {
         $direction$0$be = $direction$1;$minimal_tag$0$be = $minimal_tag$9;$next_tag$0$be = $next_tag$4;$num_minimals$0$be = $num_minimals$9;$num_tags$0$be = $num_tags$3;$regset$0$be = $regset$077;$status$0$be = $status$7;$tag$0$be = $tag$3;
        }
        break;
       }
       case 1:  {
        $261 = (($29) + -2)|0;
        HEAP32[$0>>2] = $261;
        $262 = (($30) + ($261<<2)|0);
        $263 = HEAP32[$262>>2]|0;
        if ($4) {
         $264 = ((($263)) + 4|0);
         $265 = HEAP32[$264>>2]|0;
         $266 = HEAP32[$265>>2]|0;
         $267 = ((($266)) + 20|0);
         $268 = HEAP32[$267>>2]|0;
         $269 = (($29) + -3)|0;
         HEAP32[$0>>2] = $269;
         $270 = (($30) + ($269<<2)|0);
         $271 = HEAP32[$270>>2]|0;
         $272 = (($271) + ($268))|0;
         $273 = ((($263)) + 20|0);
         HEAP32[$273>>2] = $272;
         $direction$0$be = $direction$059;$minimal_tag$0$be = -1;$next_tag$0$be = $next_tag$065;$num_minimals$0$be = $num_minimals$071;$num_tags$0$be = $num_tags$074;$regset$0$be = $regset$077;$status$0$be = 0;$tag$0$be = $tag$068;
         break L16;
        } else {
         $274 = (($29) + -3)|0;
         HEAP32[$0>>2] = $274;
         $275 = (($30) + ($274<<2)|0);
         $276 = HEAP32[$275>>2]|0;
         $277 = (($29) + -4)|0;
         HEAP32[$0>>2] = $277;
         $278 = (($30) + ($277<<2)|0);
         $279 = HEAP32[$278>>2]|0;
         $280 = ($276|0)==(0);
         $minimal_tag$0$ = $280 ? $minimal_tag$062 : $279;
         $$ = $280&1;
         $direction$0$be = $$;$minimal_tag$0$be = $minimal_tag$0$;$next_tag$0$be = $next_tag$065;$num_minimals$0$be = $num_minimals$071;$num_tags$0$be = $num_tags$074;$regset$0$be = $regset$077;$status$0$be = 0;$tag$0$be = $tag$068;
         break L16;
        }
        break;
       }
       case 4:  {
        $281 = (($29) + -2)|0;
        HEAP32[$0>>2] = $281;
        $282 = (($30) + ($281<<2)|0);
        $283 = HEAP32[$282>>2]|0;
        $284 = (($29) + -3)|0;
        HEAP32[$0>>2] = $284;
        $285 = (($30) + ($284<<2)|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = ($283|0)>(-1);
        $$tag$0 = $287 ? $283 : $tag$068;
        $direction$0$be = $direction$059;$minimal_tag$0$be = $minimal_tag$062;$next_tag$0$be = $286;$num_minimals$0$be = $num_minimals$071;$num_tags$0$be = $num_tags$074;$regset$0$be = $regset$077;$status$0$be = 0;$tag$0$be = $$tag$0;
        break;
       }
       case 5:  {
        $288 = (($29) + -2)|0;
        HEAP32[$0>>2] = $288;
        $289 = (($30) + ($288<<2)|0);
        $290 = HEAP32[$289>>2]|0;
        if ($4) {
         $291 = ((($290)) + 4|0);
         $292 = HEAP32[$291>>2]|0;
         $293 = HEAP32[$292>>2]|0;
         $294 = ((($293)) + 20|0);
         $295 = HEAP32[$294>>2]|0;
         $296 = ((($292)) + 4|0);
         $297 = HEAP32[$296>>2]|0;
         $298 = ((($297)) + 20|0);
         $299 = HEAP32[$298>>2]|0;
         $300 = (($299) + ($295))|0;
         $301 = ((($290)) + 20|0);
         HEAP32[$301>>2] = $300;
         $direction$0$be = $direction$059;$minimal_tag$0$be = $minimal_tag$062;$next_tag$0$be = $next_tag$065;$num_minimals$0$be = $num_minimals$071;$num_tags$0$be = $num_tags$074;$regset$0$be = $regset$077;$status$0$be = 0;$tag$0$be = $tag$068;
        } else {
         $direction$0$be = $direction$059;$minimal_tag$0$be = $minimal_tag$062;$next_tag$0$be = $next_tag$065;$num_minimals$0$be = $num_minimals$071;$num_tags$0$be = $num_tags$074;$regset$0$be = $regset$077;$status$0$be = 0;$tag$0$be = $tag$068;
        }
        break;
       }
       case 2:  {
        $regset$1 = $regset$077;
        while(1) {
         $302 = HEAP32[$regset$1>>2]|0;
         $303 = ($302|0)>(-1);
         $304 = ((($regset$1)) + 4|0);
         if ($303) {
          $regset$1 = $304;
         } else {
          $direction$0$be = $direction$059;$minimal_tag$0$be = $minimal_tag$062;$next_tag$0$be = $next_tag$065;$num_minimals$0$be = $num_minimals$071;$num_tags$0$be = $num_tags$074;$regset$0$be = $regset$1;$status$0$be = 0;$tag$0$be = $tag$068;
          break;
         }
        }
        break;
       }
       case 3:  {
        $305 = (($29) + -2)|0;
        $306 = (($30) + ($305<<2)|0);
        $307 = HEAP32[$306>>2]|0;
        $308 = (($29) + -3)|0;
        $309 = (($30) + ($308<<2)|0);
        $310 = HEAP32[$309>>2]|0;
        $311 = (($29) + -4)|0;
        $312 = (($30) + ($311<<2)|0);
        $313 = HEAP32[$312>>2]|0;
        $314 = (($29) + -5)|0;
        HEAP32[$0>>2] = $314;
        if ($4) {
         $315 = (($30) + ($314<<2)|0);
         $316 = HEAP32[$315>>2]|0;
         $317 = ((($313)) + 4|0);
         $318 = HEAP32[$317>>2]|0;
         $319 = HEAP32[$318>>2]|0;
         $320 = ((($319)) + 20|0);
         $321 = HEAP32[$320>>2]|0;
         $322 = ((($318)) + 4|0);
         $323 = HEAP32[$322>>2]|0;
         $324 = ((($323)) + 20|0);
         $325 = HEAP32[$324>>2]|0;
         $326 = ((($313)) + 16|0);
         $327 = HEAP32[$326>>2]|0;
         $328 = ($327|0)>(0);
         $329 = $328 ? 2 : 0;
         $330 = (($321) + ($316))|0;
         $331 = (($330) + ($325))|0;
         $332 = (($331) + ($329))|0;
         $333 = ((($313)) + 20|0);
         HEAP32[$333>>2] = $332;
         $343 = $327;
        } else {
         $$phi$trans$insert = ((($313)) + 16|0);
         $$pre = HEAP32[$$phi$trans$insert>>2]|0;
         $343 = $$pre;
        }
        $334 = (($29) + -6)|0;
        $335 = (($30) + ($334<<2)|0);
        $336 = HEAP32[$335>>2]|0;
        $337 = (($29) + -7)|0;
        HEAP32[$0>>2] = $337;
        $338 = (($30) + ($337<<2)|0);
        $339 = HEAP32[$338>>2]|0;
        $340 = (($29) + -8)|0;
        HEAP32[$0>>2] = $340;
        $341 = (($30) + ($340<<2)|0);
        $342 = HEAP32[$341>>2]|0;
        $344 = ($343|0)>(0);
        if ($344) {
         if ($4) {
          $status$8 = 0;
         } else {
          (_tre_add_tag_right($mem,$307,$339)|0);
          $345 = HEAP32[$25>>2]|0;
          $346 = (($345) + ($339<<2)|0);
          HEAP32[$346>>2] = 1;
          $347 = (_tre_add_tag_right($mem,$310,$342)|0);
          $348 = HEAP32[$25>>2]|0;
          $349 = (($348) + ($342<<2)|0);
          HEAP32[$349>>2] = 1;
          $status$8 = $347;
         }
         $350 = (($num_tags$074) + 2)|0;
         $direction$0$be = 1;$minimal_tag$0$be = $minimal_tag$062;$next_tag$0$be = $next_tag$065;$num_minimals$0$be = $num_minimals$071;$num_tags$0$be = $350;$regset$0$be = $336;$status$0$be = $status$8;$tag$0$be = $tag$068;
        } else {
         $direction$0$be = 1;$minimal_tag$0$be = $minimal_tag$062;$next_tag$0$be = $next_tag$065;$num_minimals$0$be = $num_minimals$071;$num_tags$0$be = $num_tags$074;$regset$0$be = $336;$status$0$be = 0;$tag$0$be = $tag$068;
        }
        break;
       }
       default: {
        $direction$0$be = $direction$059;$minimal_tag$0$be = $minimal_tag$062;$next_tag$0$be = $next_tag$065;$num_minimals$0$be = $num_minimals$071;$num_tags$0$be = $num_tags$074;$regset$0$be = $regset$077;$status$0$be = 0;$tag$0$be = $tag$068;
       }
       }
      } while(0);
      $33 = HEAP32[$0>>2]|0;
      $34 = ($33|0)<=($1|0);
      $35 = ($status$0$be|0)!=(0);
      $or$cond3 = $35 | $34;
      if ($or$cond3) {
       $minimal_tag$0$lcssa = $minimal_tag$0$be;$num_minimals$0$lcssa = $num_minimals$0$be;$num_tags$0$lcssa = $num_tags$0$be;$regset$0$lcssa = $regset$0$be;$status$0$lcssa = $status$0$be;$tag$0$lcssa = $tag$0$be;
       break L12;
      } else {
       $29 = $33;$direction$059 = $direction$0$be;$minimal_tag$062 = $minimal_tag$0$be;$next_tag$065 = $next_tag$0$be;$num_minimals$071 = $num_minimals$0$be;$num_tags$074 = $num_tags$0$be;$regset$077 = $regset$0$be;$tag$068 = $tag$0$be;
      }
     }
    }
   } while(0);
   if ($4) {
    $num_minimals$10 = $num_minimals$0$lcssa;
   } else {
    _tre_purge_regset($regset$0$lcssa,$tnfa,$tag$0$lcssa);
    $351 = ($minimal_tag$0$lcssa|0)>(-1);
    if ($351) {
     $352 = ((($tnfa)) + 36|0);
     $353 = HEAP32[$352>>2]|0;
     $i12$0 = 0;
     while(1) {
      $354 = (($353) + ($i12$0<<2)|0);
      $355 = HEAP32[$354>>2]|0;
      $356 = ($355|0)>(-1);
      $357 = (($i12$0) + 1)|0;
      if ($356) {
       $i12$0 = $357;
      } else {
       $$lcssa = $354;$$lcssa149 = $357;$i12$0$lcssa = $i12$0;
       break;
      }
     }
     HEAP32[$$lcssa>>2] = $tag$0$lcssa;
     $358 = (($353) + ($$lcssa149<<2)|0);
     HEAP32[$358>>2] = $minimal_tag$0$lcssa;
     $359 = (($i12$0$lcssa) + 2)|0;
     $360 = (($353) + ($359<<2)|0);
     HEAP32[$360>>2] = -1;
     $361 = (($num_minimals$0$lcssa) + 1)|0;
     $num_minimals$10 = $361;
    } else {
     $num_minimals$10 = $num_minimals$0$lcssa;
    }
   }
   $362 = ((($tnfa)) + 48|0);
   HEAP32[$362>>2] = $num_tags$0$lcssa;
   $363 = ((($tnfa)) + 40|0);
   HEAP32[$363>>2] = $num_tags$0$lcssa;
   $364 = ((($tnfa)) + 44|0);
   HEAP32[$364>>2] = $num_minimals$10;
   _free($12);
   _free($16);
   $$0 = $status$0$lcssa;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _tre_stack_push($s,$value) {
 $s = $s|0;
 $value = $value|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $value$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $value$byval_copy = sp;
 $0 = ((($s)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$s>>2]|0;
 $3 = ($1|0)<($2|0);
 if ($3) {
  $4 = ((($s)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($1<<2)|0);
  $7 = HEAP32[$value>>2]|0;
  HEAP32[$6>>2] = $7;
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + 1)|0;
  HEAP32[$0>>2] = $9;
  $$0 = 0;
 } else {
  $10 = ((($s)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($2|0)<($11|0);
  if ($12) {
   $13 = ((($s)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + ($2))|0;
   $16 = ($15|0)>($11|0);
   $$ = $16 ? $11 : $15;
   $17 = ((($s)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $$ << 2;
   $20 = (_realloc($18,$19)|0);
   $21 = ($20|0)==(0|0);
   if ($21) {
    $$0 = 12;
   } else {
    HEAP32[$s>>2] = $$;
    HEAP32[$17>>2] = $20;
    ;HEAP32[$value$byval_copy>>2]=HEAP32[$value>>2]|0;
    (_tre_stack_push($s,$value$byval_copy)|0);
    $$0 = 0;
   }
  } else {
   $$0 = 12;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _tre_copy_ast($mem,$stack,$ast,$flags,$pos_add,$tag_directions,$copy,$max_pos) {
 $mem = $mem|0;
 $stack = $stack|0;
 $ast = $ast|0;
 $flags = $flags|0;
 $pos_add = $pos_add|0;
 $tag_directions = $tag_directions|0;
 $copy = $copy|0;
 $max_pos = $max_pos|0;
 var $$lcssa = 0, $$lcssa118 = 0, $$lcssa124 = 0, $$lcssa125 = 0, $$lcssa126 = 0, $$lcssa127 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $first_tag$0$be = 0, $first_tag$023$ph = 0, $first_tag$1 = 0, $item$i = 0, $item$i$byval_copy = 0, $item$i10 = 0;
 var $item$i10$byval_copy = 0, $item$i11 = 0, $item$i11$byval_copy = 0, $item$i12 = 0, $item$i12$byval_copy = 0, $item$i13 = 0, $item$i13$byval_copy = 0, $item$i14 = 0, $item$i14$byval_copy = 0, $item$i15 = 0, $item$i15$byval_copy = 0, $item$i16 = 0, $item$i16$byval_copy = 0, $item$i17 = 0, $item$i17$byval_copy = 0, $item$i18 = 0, $item$i18$byval_copy = 0, $item$i19 = 0, $item$i19$byval_copy = 0, $item$i20 = 0;
 var $item$i20$byval_copy = 0, $item$i21 = 0, $item$i21$byval_copy = 0, $item$i7 = 0, $item$i7$byval_copy = 0, $item$i8 = 0, $item$i8$byval_copy = 0, $item$i9 = 0, $item$i9$byval_copy = 0, $max$0 = 0, $min$0 = 0, $num_copied$0$be = 0, $num_copied$0$lcssa = 0, $num_copied$024$ph = 0, $num_copied$1 = 0, $or$cond = 0, $or$cond4 = 0, $or$cond6 = 0, $pos$0 = 0, $result$0$be = 0;
 var $result$022$ph = 0, $result$022$ph38$be = 0, $result$022$ph3886 = 0, $result$022$ph3886$lcssa = 0, $result$022$ph3886$lcssa128 = 0, $result$022$ph3886$lcssa129 = 0, $status$0$be = 0, $status$0$lcssa = 0, $status$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $item$i8$byval_copy = sp + 124|0;
 $item$i9$byval_copy = sp + 120|0;
 $item$i10$byval_copy = sp + 116|0;
 $item$i11$byval_copy = sp + 112|0;
 $item$i21$byval_copy = sp + 108|0;
 $item$i20$byval_copy = sp + 104|0;
 $item$i19$byval_copy = sp + 100|0;
 $item$i18$byval_copy = sp + 96|0;
 $item$i17$byval_copy = sp + 92|0;
 $item$i16$byval_copy = sp + 88|0;
 $item$i15$byval_copy = sp + 84|0;
 $item$i14$byval_copy = sp + 80|0;
 $item$i13$byval_copy = sp + 76|0;
 $item$i12$byval_copy = sp + 72|0;
 $item$i7$byval_copy = sp + 68|0;
 $item$i$byval_copy = sp + 64|0;
 $item$i21 = sp + 60|0;
 $item$i20 = sp + 56|0;
 $item$i19 = sp + 52|0;
 $item$i18 = sp + 48|0;
 $item$i17 = sp + 44|0;
 $item$i16 = sp + 40|0;
 $item$i15 = sp + 36|0;
 $item$i14 = sp + 32|0;
 $item$i13 = sp + 28|0;
 $item$i12 = sp + 24|0;
 $item$i11 = sp + 20|0;
 $item$i10 = sp + 16|0;
 $item$i9 = sp + 12|0;
 $item$i8 = sp + 8|0;
 $item$i7 = sp + 4|0;
 $item$i = sp;
 $0 = ((($stack)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$item$i>>2] = $ast;
 ;HEAP32[$item$i$byval_copy>>2]=HEAP32[$item$i>>2]|0;
 (_tre_stack_push($stack,$item$i$byval_copy)|0);
 HEAP32[$item$i7>>2] = 0;
 ;HEAP32[$item$i7$byval_copy>>2]=HEAP32[$item$i7>>2]|0;
 $2 = (_tre_stack_push($stack,$item$i7$byval_copy)|0);
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $4 = ((($stack)) + 16|0);
   $5 = $flags & 1;
   $6 = ($5|0)==(0);
   $7 = $flags & 2;
   $8 = ($7|0)!=(0);
   $first_tag$023$ph = 1;$num_copied$024$ph = 0;$result$022$ph = $copy;
   while(1) {
    $9 = HEAP32[$0>>2]|0;
    $10 = ($9|0)>($1|0);
    if ($10) {
     $127 = $9;$result$022$ph3886 = $result$022$ph;
    } else {
     $num_copied$0$lcssa = $num_copied$024$ph;$status$0$lcssa = 0;
     break L1;
    }
    L5: while(1) {
     $11 = HEAP32[$4>>2]|0;
     $13 = $127;
     L7: while(1) {
      $12 = (($13) + -1)|0;
      HEAP32[$0>>2] = $12;
      $14 = (($11) + ($12<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      switch ($15|0) {
      case 1:  {
       $$lcssa = $13;$$lcssa118 = $11;
       label = 7;
       break L7;
       break;
      }
      case 0:  {
       $23 = (($13) + -2)|0;
       HEAP32[$0>>2] = $23;
       $24 = (($11) + ($23<<2)|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = HEAP32[$25>>2]|0;
       switch ($26|0) {
       case 0:  {
        $$lcssa124 = $25;$result$022$ph3886$lcssa = $result$022$ph3886;
        label = 10;
        break L5;
        break;
       }
       case 3:  {
        $$lcssa125 = $25;$result$022$ph3886$lcssa128 = $result$022$ph3886;
        label = 21;
        break L5;
        break;
       }
       case 1:  {
        $$lcssa126 = $25;$result$022$ph3886$lcssa129 = $result$022$ph3886;
        label = 28;
        break L5;
        break;
       }
       case 2:  {
        $$lcssa127 = $25;
        label = 35;
        break L7;
        break;
       }
       default: {
       }
       }
       break;
      }
      default: {
      }
      }
      $16 = HEAP32[$0>>2]|0;
      $17 = ($16|0)>($1|0);
      if ($17) {
       $13 = $16;
      } else {
       $num_copied$0$lcssa = $num_copied$024$ph;$status$0$lcssa = 0;
       break L1;
      }
     }
     if ((label|0) == 7) {
      label = 0;
      $18 = (($$lcssa) + -2)|0;
      HEAP32[$0>>2] = $18;
      $19 = (($$lcssa118) + ($18<<2)|0);
      $20 = HEAP32[$19>>2]|0;
      $result$022$ph38$be = $20;
     }
     else if ((label|0) == 35) {
      label = 0;
      $104 = ((($$lcssa127)) + 4|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = HEAP32[$105>>2]|0;
      HEAP32[$item$i9>>2] = $106;
      ;HEAP32[$item$i9$byval_copy>>2]=HEAP32[$item$i9>>2]|0;
      $107 = (_tre_stack_push($stack,$item$i9$byval_copy)|0);
      $108 = ($107|0)==(0);
      if (!($108)) {
       $num_copied$0$lcssa = $num_copied$024$ph;$status$0$lcssa = $107;
       break L1;
      }
      HEAP32[$item$i8>>2] = 0;
      ;HEAP32[$item$i8$byval_copy>>2]=HEAP32[$item$i8>>2]|0;
      $109 = (_tre_stack_push($stack,$item$i8$byval_copy)|0);
      $110 = ($109|0)==(0);
      if (!($110)) {
       $num_copied$0$lcssa = $num_copied$024$ph;$status$0$lcssa = $109;
       break L1;
      }
      $111 = HEAP32[$105>>2]|0;
      $112 = ((($105)) + 4|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ((($105)) + 8|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ((($105)) + 12|0);
      $117 = HEAP8[$116>>0]|0;
      $118 = $117 & 1;
      $119 = $118&255;
      $120 = (_tre_ast_new_iter($mem,$111,$113,$115,$119)|0);
      HEAP32[$result$022$ph3886>>2] = $120;
      $121 = ($120|0)==(0|0);
      if ($121) {
       $num_copied$0$lcssa = $num_copied$024$ph;$status$0$lcssa = 12;
       break L1;
      }
      $122 = ((($120)) + 4|0);
      $123 = HEAP32[$122>>2]|0;
      $result$022$ph38$be = $123;
     }
     $21 = HEAP32[$0>>2]|0;
     $22 = ($21|0)>($1|0);
     if ($22) {
      $127 = $21;$result$022$ph3886 = $result$022$ph38$be;
     } else {
      $num_copied$0$lcssa = $num_copied$024$ph;$status$0$lcssa = 0;
      break L1;
     }
    }
    if ((label|0) == 10) {
     label = 0;
     $27 = ((($$lcssa124)) + 4|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ((($28)) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = HEAP32[$28>>2]|0;
     $32 = ((($28)) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($31|0)>(-1);
     $35 = ($31|0)==(-4);
     $or$cond4 = $34 | $35;
     if ($or$cond4) {
      $36 = HEAP32[$pos_add>>2]|0;
      $37 = (($36) + ($30))|0;
      $38 = (($num_copied$024$ph) + 1)|0;
      $first_tag$1 = $first_tag$023$ph;$max$0 = $33;$min$0 = $31;$num_copied$1 = $38;$pos$0 = $37;
     } else {
      $39 = ($31|0)!=(-3);
      $or$cond6 = $6 | $39;
      if ($or$cond6) {
       $40 = ($31|0)==(-3);
       if ($40) {
        $41 = ($first_tag$023$ph|0)!=(0);
        $or$cond = $8 & $41;
        if ($or$cond) {
         $42 = (($tag_directions) + ($33<<2)|0);
         HEAP32[$42>>2] = 1;
         $first_tag$1 = 0;$max$0 = $33;$min$0 = -3;$num_copied$1 = $num_copied$024$ph;$pos$0 = $30;
        } else {
         $first_tag$1 = $first_tag$023$ph;$max$0 = $33;$min$0 = -3;$num_copied$1 = $num_copied$024$ph;$pos$0 = $30;
        }
       } else {
        $first_tag$1 = $first_tag$023$ph;$max$0 = $33;$min$0 = $31;$num_copied$1 = $num_copied$024$ph;$pos$0 = $30;
       }
      } else {
       $first_tag$1 = $first_tag$023$ph;$max$0 = -1;$min$0 = -1;$num_copied$1 = $num_copied$024$ph;$pos$0 = -1;
      }
     }
     $43 = (_tre_ast_new_node($mem,0,20)|0);
     $44 = ($43|0)==(0|0);
     if ($44) {
      HEAP32[$result$022$ph3886$lcssa>>2] = 0;
      $status$1 = 12;
     } else {
      $45 = ((($43)) + 4|0);
      $46 = HEAP32[$45>>2]|0;
      HEAP32[$46>>2] = $min$0;
      $47 = ((($46)) + 4|0);
      HEAP32[$47>>2] = $max$0;
      $48 = ((($46)) + 8|0);
      HEAP32[$48>>2] = $pos$0;
      HEAP32[$result$022$ph3886$lcssa>>2] = $43;
      $49 = HEAP32[$45>>2]|0;
      $50 = ((($28)) + 12|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ((($49)) + 12|0);
      HEAP32[$52>>2] = $51;
      $53 = ((($28)) + 16|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = ((($49)) + 16|0);
      HEAP32[$55>>2] = $54;
      $status$1 = 0;
     }
     $56 = HEAP32[$max_pos>>2]|0;
     $57 = ($pos$0|0)>($56|0);
     if ($57) {
      HEAP32[$max_pos>>2] = $pos$0;
      $first_tag$0$be = $first_tag$1;$num_copied$0$be = $num_copied$1;$result$0$be = $result$022$ph3886$lcssa;$status$0$be = $status$1;
     } else {
      $first_tag$0$be = $first_tag$1;$num_copied$0$be = $num_copied$1;$result$0$be = $result$022$ph3886$lcssa;$status$0$be = $status$1;
     }
    }
    else if ((label|0) == 21) {
     label = 0;
     $58 = ((($$lcssa125)) + 4|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = HEAP32[$59>>2]|0;
     $61 = ((($59)) + 4|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (_tre_ast_new_union($mem,$60,$62)|0);
     HEAP32[$result$022$ph3886$lcssa128>>2] = $63;
     $64 = ($63|0)==(0|0);
     if ($64) {
      $num_copied$0$lcssa = $num_copied$024$ph;$status$0$lcssa = 12;
      break L1;
     }
     $65 = ((($63)) + 4|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = HEAP32[$61>>2]|0;
     HEAP32[$item$i12>>2] = $67;
     ;HEAP32[$item$i12$byval_copy>>2]=HEAP32[$item$i12>>2]|0;
     $68 = (_tre_stack_push($stack,$item$i12$byval_copy)|0);
     $69 = ($68|0)==(0);
     if (!($69)) {
      $num_copied$0$lcssa = $num_copied$024$ph;$status$0$lcssa = $68;
      break L1;
     }
     HEAP32[$item$i13>>2] = 0;
     ;HEAP32[$item$i13$byval_copy>>2]=HEAP32[$item$i13>>2]|0;
     $70 = (_tre_stack_push($stack,$item$i13$byval_copy)|0);
     $71 = ($70|0)==(0);
     if (!($71)) {
      $num_copied$0$lcssa = $num_copied$024$ph;$status$0$lcssa = $70;
      break L1;
     }
     $72 = ((($66)) + 4|0);
     HEAP32[$item$i14>>2] = $72;
     ;HEAP32[$item$i14$byval_copy>>2]=HEAP32[$item$i14>>2]|0;
     $73 = (_tre_stack_push($stack,$item$i14$byval_copy)|0);
     $74 = ($73|0)==(0);
     if (!($74)) {
      $num_copied$0$lcssa = $num_copied$024$ph;$status$0$lcssa = $73;
      break L1;
     }
     HEAP32[$item$i15>>2] = 1;
     ;HEAP32[$item$i15$byval_copy>>2]=HEAP32[$item$i15>>2]|0;
     $75 = (_tre_stack_push($stack,$item$i15$byval_copy)|0);
     $76 = ($75|0)==(0);
     if (!($76)) {
      $num_copied$0$lcssa = $num_copied$024$ph;$status$0$lcssa = $75;
      break L1;
     }
     $77 = HEAP32[$59>>2]|0;
     HEAP32[$item$i16>>2] = $77;
     ;HEAP32[$item$i16$byval_copy>>2]=HEAP32[$item$i16>>2]|0;
     $78 = (_tre_stack_push($stack,$item$i16$byval_copy)|0);
     $79 = ($78|0)==(0);
     if (!($79)) {
      $num_copied$0$lcssa = $num_copied$024$ph;$status$0$lcssa = $78;
      break L1;
     }
     HEAP32[$item$i17>>2] = 0;
     ;HEAP32[$item$i17$byval_copy>>2]=HEAP32[$item$i17>>2]|0;
     $80 = (_tre_stack_push($stack,$item$i17$byval_copy)|0);
     $first_tag$0$be = $first_tag$023$ph;$num_copied$0$be = $num_copied$024$ph;$result$0$be = $66;$status$0$be = $80;
    }
    else if ((label|0) == 28) {
     label = 0;
     $81 = ((($$lcssa126)) + 4|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = HEAP32[$82>>2]|0;
     $84 = ((($82)) + 4|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (_tre_ast_new_catenation($mem,$83,$85)|0);
     HEAP32[$result$022$ph3886$lcssa129>>2] = $86;
     $87 = ($86|0)==(0|0);
     if ($87) {
      $num_copied$0$lcssa = $num_copied$024$ph;$status$0$lcssa = 12;
      break L1;
     }
     $88 = ((($86)) + 4|0);
     $89 = HEAP32[$88>>2]|0;
     HEAP32[$89>>2] = 0;
     $90 = ((($89)) + 4|0);
     HEAP32[$90>>2] = 0;
     $91 = HEAP32[$84>>2]|0;
     HEAP32[$item$i18>>2] = $91;
     ;HEAP32[$item$i18$byval_copy>>2]=HEAP32[$item$i18>>2]|0;
     $92 = (_tre_stack_push($stack,$item$i18$byval_copy)|0);
     $93 = ($92|0)==(0);
     if (!($93)) {
      $num_copied$0$lcssa = $num_copied$024$ph;$status$0$lcssa = $92;
      break L1;
     }
     HEAP32[$item$i19>>2] = 0;
     ;HEAP32[$item$i19$byval_copy>>2]=HEAP32[$item$i19>>2]|0;
     $94 = (_tre_stack_push($stack,$item$i19$byval_copy)|0);
     $95 = ($94|0)==(0);
     if (!($95)) {
      $num_copied$0$lcssa = $num_copied$024$ph;$status$0$lcssa = $94;
      break L1;
     }
     HEAP32[$item$i20>>2] = $90;
     ;HEAP32[$item$i20$byval_copy>>2]=HEAP32[$item$i20>>2]|0;
     $96 = (_tre_stack_push($stack,$item$i20$byval_copy)|0);
     $97 = ($96|0)==(0);
     if (!($97)) {
      $num_copied$0$lcssa = $num_copied$024$ph;$status$0$lcssa = $96;
      break L1;
     }
     HEAP32[$item$i21>>2] = 1;
     ;HEAP32[$item$i21$byval_copy>>2]=HEAP32[$item$i21>>2]|0;
     $98 = (_tre_stack_push($stack,$item$i21$byval_copy)|0);
     $99 = ($98|0)==(0);
     if (!($99)) {
      $num_copied$0$lcssa = $num_copied$024$ph;$status$0$lcssa = $98;
      break L1;
     }
     $100 = HEAP32[$82>>2]|0;
     HEAP32[$item$i11>>2] = $100;
     ;HEAP32[$item$i11$byval_copy>>2]=HEAP32[$item$i11>>2]|0;
     $101 = (_tre_stack_push($stack,$item$i11$byval_copy)|0);
     $102 = ($101|0)==(0);
     if (!($102)) {
      $num_copied$0$lcssa = $num_copied$024$ph;$status$0$lcssa = $101;
      break L1;
     }
     HEAP32[$item$i10>>2] = 0;
     ;HEAP32[$item$i10$byval_copy>>2]=HEAP32[$item$i10>>2]|0;
     $103 = (_tre_stack_push($stack,$item$i10$byval_copy)|0);
     $first_tag$0$be = $first_tag$023$ph;$num_copied$0$be = $num_copied$024$ph;$result$0$be = $89;$status$0$be = $103;
    }
    $124 = ($status$0$be|0)==(0);
    if ($124) {
     $first_tag$023$ph = $first_tag$0$be;$num_copied$024$ph = $num_copied$0$be;$result$022$ph = $result$0$be;
    } else {
     $num_copied$0$lcssa = $num_copied$0$be;$status$0$lcssa = $status$0$be;
     break;
    }
   }
  } else {
   $num_copied$0$lcssa = 0;$status$0$lcssa = $2;
  }
 } while(0);
 $125 = HEAP32[$pos_add>>2]|0;
 $126 = (($125) + ($num_copied$0$lcssa))|0;
 HEAP32[$pos_add>>2] = $126;
 STACKTOP = sp;return ($status$0$lcssa|0);
}
function _tre_ast_new_catenation($mem,$left,$right) {
 $mem = $mem|0;
 $left = $left|0;
 $right = $right|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_tre_ast_new_node($mem,1,8)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = ((($0)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  HEAP32[$3>>2] = $left;
  $4 = ((($3)) + 4|0);
  HEAP32[$4>>2] = $right;
  $5 = ((($left)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($right)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($6))|0;
  $10 = ((($0)) + 16|0);
  HEAP32[$10>>2] = $9;
  $$0 = $0;
 }
 return ($$0|0);
}
function _tre_ast_new_iter($mem,$arg,$min,$max,$minimal) {
 $mem = $mem|0;
 $arg = $arg|0;
 $min = $min|0;
 $max = $max|0;
 $minimal = $minimal|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_tre_ast_new_node($mem,2,16)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = ((($0)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  HEAP32[$3>>2] = $arg;
  $4 = ((($3)) + 4|0);
  HEAP32[$4>>2] = $min;
  $5 = ((($3)) + 8|0);
  HEAP32[$5>>2] = $max;
  $6 = ((($3)) + 12|0);
  $7 = $minimal&255;
  $8 = HEAP8[$6>>0]|0;
  $9 = $7 & 1;
  $10 = $8 & -2;
  $11 = $10 | $9;
  HEAP8[$6>>0] = $11;
  $12 = ((($arg)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($0)) + 16|0);
  HEAP32[$14>>2] = $13;
  $$0 = $0;
 }
 return ($$0|0);
}
function _tre_ast_new_node($mem,$type,$size) {
 $mem = $mem|0;
 $type = $type|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___tre_mem_alloc_impl($mem,0,0,1,32)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (___tre_mem_alloc_impl($mem,0,0,1,$size)|0);
  $3 = ((($0)) + 4|0);
  HEAP32[$3>>2] = $2;
  $4 = ($2|0)==(0|0);
  if ($4) {
   $$0 = 0;
  } else {
   HEAP32[$0>>2] = $type;
   $5 = ((($0)) + 8|0);
   HEAP32[$5>>2] = -1;
   $6 = ((($0)) + 12|0);
   HEAP32[$6>>2] = -1;
   $$0 = $0;
  }
 }
 return ($$0|0);
}
function _tre_ast_new_union($mem,$left,$right) {
 $mem = $mem|0;
 $left = $left|0;
 $right = $right|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_tre_ast_new_node($mem,3,8)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = ((($0)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  HEAP32[$3>>2] = $left;
  $4 = ((($3)) + 4|0);
  HEAP32[$4>>2] = $right;
  $5 = ((($left)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($right)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($6))|0;
  $10 = ((($0)) + 16|0);
  HEAP32[$10>>2] = $9;
  $$0 = $0;
 }
 return ($$0|0);
}
function _tre_set_one($mem,$position,$code_min,$code_max,$class,$neg_classes,$backref) {
 $mem = $mem|0;
 $position = $position|0;
 $code_min = $code_min|0;
 $code_max = $code_max|0;
 $class = $class|0;
 $neg_classes = $neg_classes|0;
 $backref = $backref|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___tre_mem_alloc_impl($mem,0,0,1,64)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  HEAP32[$0>>2] = $position;
  $2 = ((($0)) + 4|0);
  HEAP32[$2>>2] = $code_min;
  $3 = ((($0)) + 8|0);
  HEAP32[$3>>2] = $code_max;
  $4 = ((($0)) + 20|0);
  HEAP32[$4>>2] = $class;
  $5 = ((($0)) + 24|0);
  HEAP32[$5>>2] = $neg_classes;
  $6 = ((($0)) + 28|0);
  HEAP32[$6>>2] = $backref;
  $7 = ((($0)) + 32|0);
  HEAP32[$7>>2] = -1;
  $8 = ((($0)) + 36|0);
  HEAP32[$8>>2] = -1;
  $9 = ((($0)) + 40|0);
  HEAP32[$9>>2] = -1;
  $$0 = $0;
 }
 return ($$0|0);
}
function _tre_set_empty($mem) {
 $mem = $mem|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___tre_mem_alloc_impl($mem,0,0,1,32)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  HEAP32[$0>>2] = -1;
  $2 = ((($0)) + 4|0);
  HEAP32[$2>>2] = -1;
  $3 = ((($0)) + 8|0);
  HEAP32[$3>>2] = -1;
  $$0 = $0;
 }
 return ($$0|0);
}
function _tre_set_union($mem,$set1,$set2,$tags,$assertions) {
 $mem = $mem|0;
 $set1 = $set1|0;
 $set2 = $set2|0;
 $tags = $tags|0;
 $assertions = $assertions|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond52 = 0, $exitcond53 = 0, $i$0$lcssa = 0, $i$019 = 0, $i$1$lcssa = 0, $i$127 = 0, $i$2 = 0, $i$2$lcssa = 0, $j$0$lcssa = 0, $j$024 = 0, $j$1$lcssa = 0, $j$114 = 0, $num_tags$0$lcssa = 0, $num_tags$035 = 0;
 var $or$cond = 0, $s1$0 = 0, $s1$0$lcssa = 0, $s1$1$lcssa = 0, $s1$131 = 0, $s2$0 = 0, $s2$0$lcssa = 0, $s2$115 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($tags|0)==(0|0);
 if ($0) {
  $num_tags$0$lcssa = 0;
 } else {
  $num_tags$035 = 0;
  while(1) {
   $1 = (($tags) + ($num_tags$035<<2)|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   $4 = (($num_tags$035) + 1)|0;
   if ($3) {
    $num_tags$035 = $4;
   } else {
    $num_tags$0$lcssa = $num_tags$035;
    break;
   }
  }
 }
 $s1$0 = 0;
 while(1) {
  $5 = (($set1) + ($s1$0<<5)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)>(-1);
  $8 = (($s1$0) + 1)|0;
  if ($7) {
   $s1$0 = $8;
  } else {
   $s1$0$lcssa = $s1$0;
   break;
  }
 }
 $s2$0 = 0;
 while(1) {
  $9 = (($set2) + ($s2$0<<5)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  $12 = (($s2$0) + 1)|0;
  if ($11) {
   $s2$0 = $12;
  } else {
   $s2$0$lcssa = $s2$0;
   break;
  }
 }
 $13 = (($s2$0$lcssa) + ($s1$0$lcssa))|0;
 $14 = $13 << 5;
 $15 = (($14) + 32)|0;
 $16 = (___tre_mem_alloc_impl($mem,0,0,1,$15)|0);
 $17 = ($16|0)==(0|0);
 L11: do {
  if ($17) {
   $$0 = 0;
  } else {
   $18 = HEAP32[$set1>>2]|0;
   $19 = ($18|0)>(-1);
   if ($19) {
    $20 = ($num_tags$0$lcssa|0)>(0);
    $25 = $18;$s1$131 = 0;
    while(1) {
     $24 = (($16) + ($s1$131<<5)|0);
     HEAP32[$24>>2] = $25;
     $26 = (((($set1) + ($s1$131<<5)|0)) + 4|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (((($16) + ($s1$131<<5)|0)) + 4|0);
     HEAP32[$28>>2] = $27;
     $29 = (((($set1) + ($s1$131<<5)|0)) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (((($16) + ($s1$131<<5)|0)) + 8|0);
     HEAP32[$31>>2] = $30;
     $32 = (((($set1) + ($s1$131<<5)|0)) + 16|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = $33 | $assertions;
     $35 = (((($16) + ($s1$131<<5)|0)) + 16|0);
     HEAP32[$35>>2] = $34;
     $36 = (((($set1) + ($s1$131<<5)|0)) + 20|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (((($16) + ($s1$131<<5)|0)) + 20|0);
     HEAP32[$38>>2] = $37;
     $39 = (((($set1) + ($s1$131<<5)|0)) + 24|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = (((($16) + ($s1$131<<5)|0)) + 24|0);
     HEAP32[$41>>2] = $40;
     $42 = (((($set1) + ($s1$131<<5)|0)) + 28|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = (((($16) + ($s1$131<<5)|0)) + 28|0);
     HEAP32[$44>>2] = $43;
     $45 = (((($set1) + ($s1$131<<5)|0)) + 12|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ($46|0)==(0|0);
     $or$cond = $0 & $47;
     if ($or$cond) {
      $48 = (((($16) + ($s1$131<<5)|0)) + 12|0);
      HEAP32[$48>>2] = 0;
     } else {
      if ($47) {
       $i$0$lcssa = 0;
      } else {
       $i$019 = 0;
       while(1) {
        $49 = (($46) + ($i$019<<2)|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = ($50|0)>(-1);
        $52 = (($i$019) + 1)|0;
        if ($51) {
         $i$019 = $52;
        } else {
         $i$0$lcssa = $i$019;
         break;
        }
       }
      }
      $53 = (($i$0$lcssa) + ($num_tags$0$lcssa))|0;
      $54 = $53 << 2;
      $55 = (($54) + 4)|0;
      $56 = (___tre_mem_alloc_impl($mem,0,0,0,$55)|0);
      $57 = ($56|0)==(0|0);
      if ($57) {
       $$0 = 0;
       break L11;
      }
      $58 = ($i$0$lcssa|0)>(0);
      if ($58) {
       $59 = HEAP32[$45>>2]|0;
       $j$024 = 0;
       while(1) {
        $60 = (($59) + ($j$024<<2)|0);
        $61 = HEAP32[$60>>2]|0;
        $62 = (($56) + ($j$024<<2)|0);
        HEAP32[$62>>2] = $61;
        $63 = (($j$024) + 1)|0;
        $exitcond52 = ($63|0)==($i$0$lcssa|0);
        if ($exitcond52) {
         $j$0$lcssa = $i$0$lcssa;
         break;
        } else {
         $j$024 = $63;
        }
       }
      } else {
       $j$0$lcssa = 0;
      }
      if ($20) {
       $i$127 = 0;
       while(1) {
        $64 = (($tags) + ($i$127<<2)|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = (($i$127) + ($j$0$lcssa))|0;
        $67 = (($56) + ($66<<2)|0);
        HEAP32[$67>>2] = $65;
        $68 = (($i$127) + 1)|0;
        $exitcond53 = ($68|0)==($num_tags$0$lcssa|0);
        if ($exitcond53) {
         $i$1$lcssa = $num_tags$0$lcssa;
         break;
        } else {
         $i$127 = $68;
        }
       }
      } else {
       $i$1$lcssa = 0;
      }
      $69 = (($i$1$lcssa) + ($j$0$lcssa))|0;
      $70 = (($56) + ($69<<2)|0);
      HEAP32[$70>>2] = -1;
      $71 = (((($16) + ($s1$131<<5)|0)) + 12|0);
      HEAP32[$71>>2] = $56;
     }
     $72 = (($s1$131) + 1)|0;
     $73 = (($set1) + ($72<<5)|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ($74|0)>(-1);
     if ($75) {
      $25 = $74;$s1$131 = $72;
     } else {
      $s1$1$lcssa = $72;
      break;
     }
    }
   } else {
    $s1$1$lcssa = 0;
   }
   $21 = HEAP32[$set2>>2]|0;
   $22 = ($21|0)>(-1);
   $23 = (($16) + ($s1$1$lcssa<<5)|0);
   if ($22) {
    $76 = $21;$77 = $23;$81 = $s1$1$lcssa;$s2$115 = 0;
    while(1) {
     HEAP32[$77>>2] = $76;
     $78 = (((($set2) + ($s2$115<<5)|0)) + 4|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (((($16) + ($81<<5)|0)) + 4|0);
     HEAP32[$80>>2] = $79;
     $82 = (((($set2) + ($s2$115<<5)|0)) + 8|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = (((($16) + ($81<<5)|0)) + 8|0);
     HEAP32[$84>>2] = $83;
     $85 = (((($set2) + ($s2$115<<5)|0)) + 16|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (((($16) + ($81<<5)|0)) + 16|0);
     HEAP32[$87>>2] = $86;
     $88 = (((($set2) + ($s2$115<<5)|0)) + 20|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = (((($16) + ($81<<5)|0)) + 20|0);
     HEAP32[$90>>2] = $89;
     $91 = (((($set2) + ($s2$115<<5)|0)) + 24|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = (((($16) + ($81<<5)|0)) + 24|0);
     HEAP32[$93>>2] = $92;
     $94 = (((($set2) + ($s2$115<<5)|0)) + 28|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = (((($16) + ($81<<5)|0)) + 28|0);
     HEAP32[$96>>2] = $95;
     $97 = (((($set2) + ($s2$115<<5)|0)) + 12|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = ($98|0)==(0|0);
     if ($99) {
      $100 = (((($16) + ($81<<5)|0)) + 12|0);
      HEAP32[$100>>2] = 0;
     } else {
      $i$2 = 0;
      while(1) {
       $101 = (($98) + ($i$2<<2)|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = ($102|0)>(-1);
       $104 = (($i$2) + 1)|0;
       if ($103) {
        $i$2 = $104;
       } else {
        $i$2$lcssa = $i$2;
        break;
       }
      }
      $105 = $i$2$lcssa << 2;
      $106 = (($105) + 4)|0;
      $107 = (___tre_mem_alloc_impl($mem,0,0,0,$106)|0);
      $108 = ($107|0)==(0|0);
      if ($108) {
       $$0 = 0;
       break L11;
      }
      $109 = ($i$2$lcssa|0)>(0);
      if ($109) {
       $110 = HEAP32[$97>>2]|0;
       $j$114 = 0;
       while(1) {
        $111 = (($110) + ($j$114<<2)|0);
        $112 = HEAP32[$111>>2]|0;
        $113 = (($107) + ($j$114<<2)|0);
        HEAP32[$113>>2] = $112;
        $114 = (($j$114) + 1)|0;
        $exitcond = ($114|0)==($i$2$lcssa|0);
        if ($exitcond) {
         $j$1$lcssa = $i$2$lcssa;
         break;
        } else {
         $j$114 = $114;
        }
       }
      } else {
       $j$1$lcssa = 0;
      }
      $115 = (($107) + ($j$1$lcssa<<2)|0);
      HEAP32[$115>>2] = -1;
      $116 = (((($16) + ($81<<5)|0)) + 12|0);
      HEAP32[$116>>2] = $107;
     }
     $117 = (($s2$115) + 1)|0;
     $118 = (($set2) + ($117<<5)|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = ($119|0)>(-1);
     $121 = (($117) + ($s1$1$lcssa))|0;
     $122 = (($16) + ($121<<5)|0);
     if ($120) {
      $76 = $119;$77 = $122;$81 = $121;$s2$115 = $117;
     } else {
      $$lcssa = $122;
      break;
     }
    }
   } else {
    $$lcssa = $23;
   }
   HEAP32[$$lcssa>>2] = -1;
   $$0 = $16;
  }
 } while(0);
 return ($$0|0);
}
function _tre_match_empty($stack,$node,$tags,$assertions,$num_tags_seen) {
 $stack = $stack|0;
 $node = $node|0;
 $tags = $tags|0;
 $assertions = $assertions|0;
 $num_tags_seen = $num_tags_seen|0;
 var $$lcssa = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $i$07 = 0, $i$09 = 0, $i$09$lcssa = 0, $item$i = 0, $item$i$byval_copy = 0, $item$i1 = 0, $item$i1$byval_copy = 0;
 var $item$i2 = 0, $item$i2$byval_copy = 0, $item$i3 = 0, $item$i3$byval_copy = 0, $item$i4 = 0, $item$i4$byval_copy = 0, $item$i5 = 0, $item$i5$byval_copy = 0, $status$0$be = 0, $status$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $item$i$byval_copy = sp + 44|0;
 $item$i2$byval_copy = sp + 40|0;
 $item$i3$byval_copy = sp + 36|0;
 $item$i5$byval_copy = sp + 32|0;
 $item$i4$byval_copy = sp + 28|0;
 $item$i1$byval_copy = sp + 24|0;
 $item$i5 = sp + 20|0;
 $item$i4 = sp + 16|0;
 $item$i3 = sp + 12|0;
 $item$i2 = sp + 8|0;
 $item$i1 = sp + 4|0;
 $item$i = sp;
 $0 = ((($stack)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($num_tags_seen|0)!=(0|0);
 if ($2) {
  HEAP32[$num_tags_seen>>2] = 0;
 }
 HEAP32[$item$i1>>2] = $node;
 ;HEAP32[$item$i1$byval_copy>>2]=HEAP32[$item$i1>>2]|0;
 $3 = (_tre_stack_push($stack,$item$i1$byval_copy)|0);
 $4 = ($3|0)==(0);
 L4: do {
  if ($4) {
   $5 = ((($stack)) + 16|0);
   $6 = ($tags|0)==(0|0);
   $7 = ($assertions|0)==(0|0);
   $8 = HEAP32[$0>>2]|0;
   $9 = ($8|0)>($1|0);
   if ($9) {
    $11 = $8;
    while(1) {
     $10 = (($11) + -1)|0;
     HEAP32[$0>>2] = $10;
     $12 = HEAP32[$5>>2]|0;
     $13 = (($12) + ($10<<2)|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     L8: do {
      switch ($15|0) {
      case 0:  {
       $19 = ((($14)) + 4|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = HEAP32[$20>>2]|0;
       switch ($21|0) {
       case -3:  {
        break;
       }
       case -2:  {
        if ($7) {
         break L8;
        }
        $38 = ((($20)) + 4|0);
        $39 = HEAP32[$38>>2]|0;
        $40 = HEAP32[$assertions>>2]|0;
        $41 = $40 | $39;
        HEAP32[$assertions>>2] = $41;
        break L8;
        break;
       }
       default: {
        break L8;
       }
       }
       $22 = ((($20)) + 4|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = ($23|0)>(-1);
       if ($24) {
        L15: do {
         if (!($6)) {
          $25 = HEAP32[$tags>>2]|0;
          $26 = ($25|0)>(-1);
          L17: do {
           if ($26) {
            $$pr = $25;$70 = $tags;$i$09 = 0;
            while(1) {
             $27 = ($$pr|0)==($23|0);
             if ($27) {
              $$lcssa = $70;$i$09$lcssa = $i$09;
              break;
             }
             $28 = (($i$09) + 1)|0;
             $29 = (($tags) + ($28<<2)|0);
             $30 = HEAP32[$29>>2]|0;
             $31 = ($30|0)>(-1);
             if ($31) {
              $$pr = $30;$70 = $29;$i$09 = $28;
             } else {
              $33 = $29;$i$07 = $28;
              break L17;
             }
            }
            $32 = ($23|0)<(0);
            if ($32) {
             $33 = $$lcssa;$i$07 = $i$09$lcssa;
            } else {
             break L15;
            }
           } else {
            $33 = $tags;$i$07 = 0;
           }
          } while(0);
          HEAP32[$33>>2] = $23;
          $34 = (($i$07) + 1)|0;
          $35 = (($tags) + ($34<<2)|0);
          HEAP32[$35>>2] = -1;
         }
        } while(0);
        if ($2) {
         $36 = HEAP32[$num_tags_seen>>2]|0;
         $37 = (($36) + 1)|0;
         HEAP32[$num_tags_seen>>2] = $37;
        }
       }
       break;
      }
      case 3:  {
       $42 = ((($14)) + 4|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = HEAP32[$43>>2]|0;
       $45 = ((($44)) + 8|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = ($46|0)==(0);
       if (!($47)) {
        HEAP32[$item$i4>>2] = $44;
        ;HEAP32[$item$i4$byval_copy>>2]=HEAP32[$item$i4>>2]|0;
        $48 = (_tre_stack_push($stack,$item$i4$byval_copy)|0);
        $status$0$be = $48;
        label = 6;
        break L8;
       }
       $49 = ((($43)) + 4|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = ((($50)) + 8|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = ($52|0)==(0);
       if (!($53)) {
        HEAP32[$item$i5>>2] = $50;
        ;HEAP32[$item$i5$byval_copy>>2]=HEAP32[$item$i5>>2]|0;
        $54 = (_tre_stack_push($stack,$item$i5$byval_copy)|0);
        $status$0$be = $54;
        label = 6;
       }
       break;
      }
      case 1:  {
       $55 = ((($14)) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = HEAP32[$56>>2]|0;
       HEAP32[$item$i3>>2] = $57;
       ;HEAP32[$item$i3$byval_copy>>2]=HEAP32[$item$i3>>2]|0;
       $58 = (_tre_stack_push($stack,$item$i3$byval_copy)|0);
       $59 = ($58|0)==(0);
       if (!($59)) {
        $status$0$lcssa = $58;
        break L4;
       }
       $60 = ((($56)) + 4|0);
       $61 = HEAP32[$60>>2]|0;
       HEAP32[$item$i2>>2] = $61;
       ;HEAP32[$item$i2$byval_copy>>2]=HEAP32[$item$i2>>2]|0;
       $62 = (_tre_stack_push($stack,$item$i2$byval_copy)|0);
       $status$0$be = $62;
       label = 6;
       break;
      }
      case 2:  {
       $63 = ((($14)) + 4|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = HEAP32[$64>>2]|0;
       $66 = ((($65)) + 8|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ($67|0)==(0);
       if (!($68)) {
        HEAP32[$item$i>>2] = $65;
        ;HEAP32[$item$i$byval_copy>>2]=HEAP32[$item$i>>2]|0;
        $69 = (_tre_stack_push($stack,$item$i$byval_copy)|0);
        $status$0$be = $69;
        label = 6;
       }
       break;
      }
      default: {
      }
      }
     } while(0);
     if ((label|0) == 6) {
      label = 0;
      $16 = ($status$0$be|0)==(0);
      if (!($16)) {
       $status$0$lcssa = $status$0$be;
       break L4;
      }
     }
     $17 = HEAP32[$0>>2]|0;
     $18 = ($17|0)>($1|0);
     if ($18) {
      $11 = $17;
     } else {
      $status$0$lcssa = 0;
      break L4;
     }
    }
   } else {
    $status$0$lcssa = 0;
   }
  } else {
   $status$0$lcssa = $3;
  }
 } while(0);
 STACKTOP = sp;return ($status$0$lcssa|0);
}
function _tre_ast_to_tnfa($node,$transitions,$counts,$offs) {
 $node = $node|0;
 $transitions = $transitions|0;
 $counts = $counts|0;
 $offs = $offs|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node$tr = 0, $node$tr$be = 0, $node$tr$be$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $node$tr = $node;
 L1: while(1) {
  $0 = HEAP32[$node$tr>>2]|0;
  switch ($0|0) {
  case 2:  {
   $21 = ((($node$tr)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($22)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(-1);
   if ($25) {
    $26 = HEAP32[$22>>2]|0;
    $27 = ((($26)) + 28|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ((($26)) + 24|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (_tre_make_trans($28,$30,$transitions,$counts,$offs)|0);
    $32 = ($31|0)==(0);
    if ($32) {
     $node$tr$be$in = $22;
    } else {
     $$0 = $31;
     break L1;
    }
   } else {
    $node$tr$be$in = $22;
   }
   break;
  }
  case 3:  {
   $1 = ((($node$tr)) + 4|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = HEAP32[$2>>2]|0;
   $4 = (_tre_ast_to_tnfa($3,$transitions,$counts,$offs)|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    $$0 = $4;
    break L1;
   }
   $6 = ((($2)) + 4|0);
   $node$tr$be$in = $6;
   break;
  }
  case 1:  {
   $7 = ((($node$tr)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($9)) + 28|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($8)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($13)) + 24|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (_tre_make_trans($11,$15,$transitions,$counts,$offs)|0);
   $17 = ($16|0)==(0);
   if (!($17)) {
    $$0 = $16;
    break L1;
   }
   $18 = HEAP32[$8>>2]|0;
   $19 = (_tre_ast_to_tnfa($18,$transitions,$counts,$offs)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $node$tr$be$in = $12;
   } else {
    $$0 = $19;
    break L1;
   }
   break;
  }
  default: {
   $$0 = 0;
   break L1;
  }
  }
  $node$tr$be = HEAP32[$node$tr$be$in>>2]|0;
  $node$tr = $node$tr$be;
 }
 return ($$0|0);
}
function _tre_tag_order($num_tags,$tag_directions,$t1,$t2) {
 $num_tags = $num_tags|0;
 $tag_directions = $tag_directions|0;
 $t1 = $t1|0;
 $t2 = $t2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($num_tags|0)>(0);
 L1: do {
  if ($0) {
   $i$01 = 0;
   while(1) {
    $1 = (($tag_directions) + ($i$01<<2)|0);
    $2 = HEAP32[$1>>2]|0;
    $3 = ($2|0)==(0);
    $4 = (($t1) + ($i$01<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (($t2) + ($i$01<<2)|0);
    $7 = HEAP32[$6>>2]|0;
    if ($3) {
     $8 = ($5|0)<($7|0);
     if ($8) {
      $$0 = 1;
      break L1;
     }
     $9 = ($5|0)>($7|0);
     if ($9) {
      $$0 = 0;
      break L1;
     }
    } else {
     $10 = ($5|0)>($7|0);
     if ($10) {
      $$0 = 1;
      break L1;
     }
     $11 = ($5|0)<($7|0);
     if ($11) {
      $$0 = 0;
      break L1;
     }
    }
    $12 = (($i$01) + 1)|0;
    $13 = ($12|0)<($num_tags|0);
    if ($13) {
     $i$01 = $12;
    } else {
     $$0 = 0;
     break;
    }
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 return ($$0|0);
}
function _tre_fill_pmatch($nmatch,$pmatch,$cflags,$tnfa,$tags,$match_eo) {
 $nmatch = $nmatch|0;
 $pmatch = $pmatch|0;
 $cflags = $cflags|0;
 $tnfa = $tnfa|0;
 $tags = $tags|0;
 $match_eo = $match_eo|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$012 = 0, $i$19 = 0, $i$2$ph = 0, $i$25 = 0, $j$06 = 0, $or$cond = 0, $or$cond19 = 0, $or$cond3 = 0, $or$cond311 = 0, $or$cond4 = 0, $or$cond48 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($match_eo|0)>(-1);
 $1 = $cflags & 8;
 $2 = ($1|0)==(0);
 $or$cond = $2 & $0;
 if ($or$cond) {
  $4 = ((($tnfa)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($tnfa)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  $9 = ($nmatch|0)!=(0);
  $or$cond311 = $9 & $8;
  if ($or$cond311) {
   $10 = ((($tnfa)) + 48|0);
   $i$012 = 0;
   while(1) {
    $13 = (($5) + (($i$012*12)|0)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$10>>2]|0;
    $16 = ($14|0)==($15|0);
    if ($16) {
     $20 = $match_eo;
    } else {
     $17 = (($tags) + ($14<<2)|0);
     $18 = HEAP32[$17>>2]|0;
     $20 = $18;
    }
    $19 = (($pmatch) + ($i$012<<3)|0);
    HEAP32[$19>>2] = $20;
    $21 = (((($5) + (($i$012*12)|0)|0)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[$10>>2]|0;
    $24 = ($22|0)==($23|0);
    if ($24) {
     $28 = $match_eo;
    } else {
     $25 = (($tags) + ($22<<2)|0);
     $26 = HEAP32[$25>>2]|0;
     $28 = $26;
    }
    $27 = (((($pmatch) + ($i$012<<3)|0)) + 4|0);
    HEAP32[$27>>2] = $28;
    $29 = ($20|0)==(-1);
    $30 = ($28|0)==(-1);
    $or$cond19 = $29 | $30;
    if ($or$cond19) {
     HEAP32[$27>>2] = -1;
     HEAP32[$19>>2] = -1;
    }
    $31 = (($i$012) + 1)|0;
    $32 = HEAP32[$6>>2]|0;
    $33 = ($31>>>0)<($32>>>0);
    $34 = ($31>>>0)<($nmatch>>>0);
    $or$cond3 = $34 & $33;
    if ($or$cond3) {
     $i$012 = $31;
    } else {
     $11 = $32;
     break;
    }
   }
  } else {
   $11 = $7;
  }
  $12 = ($11|0)!=(0);
  $or$cond48 = $9 & $12;
  if ($or$cond48) {
   $i$19 = 0;
   while(1) {
    $35 = (((($pmatch) + ($i$19<<3)|0)) + 4|0);
    $36 = (((($5) + (($i$19*12)|0)|0)) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(0|0);
    if (!($38)) {
     $39 = HEAP32[$37>>2]|0;
     $40 = ($39|0)>(-1);
     if ($40) {
      $41 = (($pmatch) + ($i$19<<3)|0);
      $$pre = HEAP32[$41>>2]|0;
      $43 = $39;$45 = $$pre;$j$06 = 0;
      while(1) {
       $42 = (($pmatch) + ($43<<3)|0);
       $44 = HEAP32[$42>>2]|0;
       $46 = ($45|0)<($44|0);
       if ($46) {
        label = 18;
       } else {
        $47 = HEAP32[$35>>2]|0;
        $48 = (((($pmatch) + ($43<<3)|0)) + 4|0);
        $49 = HEAP32[$48>>2]|0;
        $50 = ($47|0)>($49|0);
        if ($50) {
         label = 18;
        } else {
         $61 = $45;
        }
       }
       if ((label|0) == 18) {
        label = 0;
        HEAP32[$35>>2] = -1;
        HEAP32[$41>>2] = -1;
        $61 = -1;
       }
       $51 = (($j$06) + 1)|0;
       $52 = (($37) + ($51<<2)|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = ($53|0)>(-1);
       if ($54) {
        $43 = $53;$45 = $61;$j$06 = $51;
       } else {
        break;
       }
      }
     }
    }
    $55 = (($i$19) + 1)|0;
    $56 = ($55>>>0)<($11>>>0);
    $57 = ($55>>>0)<($nmatch>>>0);
    $or$cond4 = $57 & $56;
    if ($or$cond4) {
     $i$19 = $55;
    } else {
     $i$2$ph = $55;
     break;
    }
   }
  } else {
   $i$2$ph = 0;
  }
 } else {
  $i$2$ph = 0;
 }
 $3 = ($i$2$ph>>>0)<($nmatch>>>0);
 if ($3) {
  $i$25 = $i$2$ph;
  while(1) {
   $58 = (($pmatch) + ($i$25<<3)|0);
   HEAP32[$58>>2] = -1;
   $59 = (((($pmatch) + ($i$25<<3)|0)) + 4|0);
   HEAP32[$59>>2] = -1;
   $60 = (($i$25) + 1)|0;
   $exitcond = ($60|0)==($nmatch|0);
   if ($exitcond) {
    break;
   } else {
    $i$25 = $60;
   }
  }
 }
 return;
}
function _tre_neg_char_classes_match($classes,$wc,$icase) {
 $classes = $classes|0;
 $wc = $wc|0;
 $icase = $icase|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$classes>>2]|0;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $$0 = 0;
  } else {
   $2 = ($icase|0)==(0);
   $$012 = $classes;$3 = $0;
   while(1) {
    if ($2) {
     $4 = (_iswctype($wc,$3)|0);
     $5 = ($4|0)==(0);
     if (!($5)) {
      $$0 = 1;
      break L1;
     }
    } else {
     $6 = (_towupper($wc)|0);
     $7 = HEAP32[$$012>>2]|0;
     $8 = (_iswctype($6,$7)|0);
     $9 = ($8|0)==(0);
     if (!($9)) {
      $$0 = 1;
      break L1;
     }
     $10 = (_towlower($wc)|0);
     $11 = HEAP32[$$012>>2]|0;
     $12 = (_iswctype($10,$11)|0);
     $13 = ($12|0)==(0);
     if (!($13)) {
      $$0 = 1;
      break L1;
     }
    }
    $14 = ((($$012)) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(0);
    if ($16) {
     $$0 = 0;
     break;
    } else {
     $$012 = $14;$3 = $15;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 63]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 63]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _mread($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = ($3>>>0)<($4>>>0);
 $$ = $6 ? 0 : $5;
 $7 = ($$>>>0)<($len>>>0);
 if ($7) {
  $8 = HEAP32[$f>>2]|0;
  $9 = $8 | 16;
  HEAP32[$f>>2] = $9;
  $$0 = $$;
 } else {
  $$0 = $len;
 }
 $10 = ((($1)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($4)|0);
 _memcpy(($buf|0),($12|0),($$0|0))|0;
 $13 = HEAP32[$1>>2]|0;
 $14 = (($13) + ($$0))|0;
 HEAP32[$1>>2] = $14;
 $15 = (($$) - ($$0))|0;
 $16 = ((($f)) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($15>>>0)>($17>>>0);
 $$1 = $18 ? $17 : $15;
 $19 = ((($f)) + 44|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($f)) + 4|0);
 HEAP32[$21>>2] = $20;
 $22 = $20;
 $23 = (($22) + ($$1)|0);
 $24 = ((($f)) + 8|0);
 HEAP32[$24>>2] = $23;
 $25 = HEAP32[$10>>2]|0;
 $26 = (($25) + ($14)|0);
 _memcpy(($22|0),($26|0),($$1|0))|0;
 $27 = HEAP32[$1>>2]|0;
 $28 = (($27) + ($$1))|0;
 HEAP32[$1>>2] = $28;
 return ($$0|0);
}
function _mwrite($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$len = 0, $$pre = 0, $$pre$phi3Z2D = 0, $$pre$phiZ2D = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($f)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = ($3|0)==($5|0);
 if ($9) {
  label = 3;
 } else {
  HEAP32[$2>>2] = $5;
  $10 = (_mwrite($f,$5,$8)|0);
  $11 = ($10>>>0)<($8>>>0);
  if ($11) {
   $$0 = 0;
  } else {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $12 = ((($1)) + 16|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(97);
   if ($14) {
    $15 = ((($1)) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    HEAP32[$1>>2] = $16;
    $$pre$phi3Z2D = $15;$$pre$phiZ2D = $1;$20 = $16;
   } else {
    $$pre = HEAP32[$1>>2]|0;
    $$pre2 = ((($1)) + 4|0);
    $$pre$phi3Z2D = $$pre2;$$pre$phiZ2D = $1;$20 = $$pre;
   }
   $17 = ((($1)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) - ($20))|0;
   $21 = ($19>>>0)<($len>>>0);
   $$len = $21 ? $19 : $len;
   $22 = ((($1)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + ($20)|0);
   _memcpy(($24|0),($buf|0),($$len|0))|0;
   $25 = HEAP32[$$pre$phiZ2D>>2]|0;
   $26 = (($25) + ($$len))|0;
   HEAP32[$$pre$phiZ2D>>2] = $26;
   $27 = HEAP32[$$pre$phi3Z2D>>2]|0;
   $28 = ($26>>>0)>($27>>>0);
   if ($28) {
    HEAP32[$$pre$phi3Z2D>>2] = $26;
    $29 = HEAP32[$17>>2]|0;
    $30 = ($26>>>0)<($29>>>0);
    if ($30) {
     $31 = HEAP32[$22>>2]|0;
     $32 = (($31) + ($26)|0);
     HEAP8[$32>>0] = 0;
     $$0 = $$len;
     break;
    }
    $33 = HEAP32[$f>>2]|0;
    $34 = $33 & 4;
    $35 = ($34|0)==(0);
    $36 = ($29|0)==(0);
    $or$cond = $36 | $35;
    if ($or$cond) {
     $$0 = $$len;
    } else {
     $37 = (($29) + -1)|0;
     $38 = HEAP32[$22>>2]|0;
     $39 = (($38) + ($37)|0);
     HEAP8[$39>>0] = 0;
     $$0 = $$len;
    }
   } else {
    $$0 = $$len;
   }
  }
 } while(0);
 return ($$0|0);
}
function _mseek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($f)) + 84|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($whence>>>0)>(2);
 if ($3) {
  label = 2;
 } else {
  HEAP32[$0>>2] = 0;
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$2>>2]|0;
  HEAP32[$5>>2] = $6;
  $7 = ((($0)) + 8|0);
  $8 = ((($2)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$7>>2] = $9;
  $10 = (($0) + ($whence<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (0 - ($11))|0;
  $13 = ($off|0)<($12|0);
  if ($13) {
   label = 2;
  } else {
   $14 = ((($2)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($15) - ($11))|0;
   $17 = ($16|0)<($off|0);
   if ($17) {
    label = 2;
   } else {
    $18 = (($11) + ($off))|0;
    HEAP32[$2>>2] = $18;
    $$0 = $18;
   }
  }
 }
 if ((label|0) == 2) {
  $4 = (___errno_location()|0);
  HEAP32[$4>>2] = 22;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _mclose($m) {
 $m = $m|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _ms_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($f)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = ($3|0)==($5|0);
 if ($9) {
  label = 3;
 } else {
  HEAP32[$2>>2] = $5;
  $10 = (_ms_write($f,$5,$8)|0);
  $11 = ($10>>>0)<($8>>>0);
  if ($11) {
   $$0 = 0;
  } else {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $12 = ((($1)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + ($len))|0;
   $15 = ((($1)) + 20|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14>>>0)<($16>>>0);
   if ($17) {
    $$pre1 = ((($1)) + 12|0);
    $$pre$phiZ2D = $$pre1;$33 = $13;
   } else {
    $18 = $16 << 1;
    $19 = (($14) + 1)|0;
    $20 = $19 | $18;
    $21 = $20 | 1;
    $22 = ((($1)) + 12|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (_realloc($23,$21)|0);
    $25 = ($24|0)==(0|0);
    if ($25) {
     $$0 = 0;
     break;
    }
    HEAP32[$22>>2] = $24;
    $26 = HEAP32[$1>>2]|0;
    HEAP32[$26>>2] = $24;
    $27 = HEAP32[$22>>2]|0;
    $28 = HEAP32[$15>>2]|0;
    $29 = (($27) + ($28)|0);
    $30 = (($21) - ($28))|0;
    _memset(($29|0),0,($30|0))|0;
    HEAP32[$15>>2] = $21;
    $$pre = HEAP32[$12>>2]|0;
    $$pre$phiZ2D = $22;$33 = $$pre;
   }
   $31 = HEAP32[$$pre$phiZ2D>>2]|0;
   $32 = (($31) + ($33)|0);
   _memcpy(($32|0),($buf|0),($len|0))|0;
   $34 = HEAP32[$12>>2]|0;
   $35 = (($34) + ($len))|0;
   HEAP32[$12>>2] = $35;
   $36 = ((($1)) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($35>>>0)<($37>>>0);
   if (!($38)) {
    HEAP32[$36>>2] = $35;
   }
   $39 = ((($1)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   HEAP32[$40>>2] = $35;
   $$0 = $len;
  }
 } while(0);
 return ($$0|0);
}
function _ms_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($f)) + 84|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($whence>>>0)>(2);
 if ($3) {
  label = 2;
 } else {
  HEAP32[$0>>2] = 0;
  $5 = ((($0)) + 4|0);
  $6 = ((($2)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$5>>2] = $7;
  $8 = ((($0)) + 8|0);
  $9 = ((($2)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  HEAP32[$8>>2] = $10;
  $11 = (($0) + ($whence<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (0 - ($12))|0;
  $14 = ($off|0)<($13|0);
  $15 = (2147483647 - ($12))|0;
  $16 = ($15|0)<($off|0);
  $or$cond = $14 | $16;
  if ($or$cond) {
   label = 2;
  } else {
   $17 = (($12) + ($off))|0;
   HEAP32[$6>>2] = $17;
   $$0 = $17;
  }
 }
 if ((label|0) == 2) {
  $4 = (___errno_location()|0);
  HEAP32[$4>>2] = 22;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _ms_close($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _wms_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $buf;
 $1 = ((($f)) + 84|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($len))|0;
 $6 = ((($2)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)<($7>>>0);
 if ($8) {
  $$pre1 = ((($2)) + 12|0);
  $$pre$phiZ2D = $$pre1;$27 = $4;$29 = $7;
  label = 6;
 } else {
  $9 = $7 << 1;
  $10 = (($5) + 1)|0;
  $11 = $10 | $9;
  $12 = $11 | 1;
  $13 = ($12>>>0)>(536870911);
  if ($13) {
   $$0 = 0;
  } else {
   $14 = ((($2)) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $12 << 2;
   $17 = (_realloc($15,$16)|0);
   $18 = ($17|0)==(0|0);
   if ($18) {
    $$0 = 0;
   } else {
    HEAP32[$14>>2] = $17;
    $19 = HEAP32[$2>>2]|0;
    HEAP32[$19>>2] = $17;
    $20 = HEAP32[$14>>2]|0;
    $21 = HEAP32[$6>>2]|0;
    $22 = (($20) + ($21<<2)|0);
    $23 = (($12) - ($21))|0;
    $24 = $23 << 2;
    _memset(($22|0),0,($24|0))|0;
    HEAP32[$6>>2] = $12;
    $$pre = HEAP32[$3>>2]|0;
    $$pre$phiZ2D = $14;$27 = $$pre;$29 = $12;
    label = 6;
   }
  }
 }
 if ((label|0) == 6) {
  $25 = HEAP32[$$pre$phiZ2D>>2]|0;
  $26 = (($25) + ($27<<2)|0);
  $28 = (($29) - ($27))|0;
  $30 = ((($2)) + 24|0);
  $31 = (_mbsnrtowcs($26,$0,$len,$28,$30)|0);
  $32 = ($31|0)==(-1);
  if ($32) {
   $$0 = 0;
  } else {
   $33 = HEAP32[$3>>2]|0;
   $34 = (($33) + ($31))|0;
   HEAP32[$3>>2] = $34;
   $35 = ((($2)) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($34>>>0)<($36>>>0);
   if (!($37)) {
    HEAP32[$35>>2] = $34;
   }
   $38 = ((($2)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   HEAP32[$39>>2] = $34;
   $$0 = $len;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _wms_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($f)) + 84|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($whence>>>0)>(2);
 if ($3) {
  label = 2;
 } else {
  HEAP32[$0>>2] = 0;
  $5 = ((($0)) + 4|0);
  $6 = ((($2)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$5>>2] = $7;
  $8 = ((($0)) + 8|0);
  $9 = ((($2)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  HEAP32[$8>>2] = $10;
  $11 = (($0) + ($whence<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (0 - ($12))|0;
  $14 = ($off|0)<($13|0);
  $15 = (536870911 - ($12))|0;
  $16 = ($15|0)<($off|0);
  $or$cond = $14 | $16;
  if ($or$cond) {
   label = 2;
  } else {
   $17 = ((($2)) + 24|0);
   $18 = $17;
   $19 = $18;
   HEAP32[$19>>2] = 0;
   $20 = (($18) + 4)|0;
   $21 = $20;
   HEAP32[$21>>2] = 0;
   $22 = (($12) + ($off))|0;
   HEAP32[$6>>2] = $22;
   $$0 = $22;
  }
 }
 if ((label|0) == 2) {
  $4 = (___errno_location()|0);
  HEAP32[$4>>2] = 22;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wms_close($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _wrap_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___stdio_write($f,$buf,$len)|0);
 return ($0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = 0.0, $$31$i = 0;
 var $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41276$i = 0, $$5$lcssa$i = 0, $$51 = 0, $$587$i = 0, $$a$3$i = 0, $$a$3185$i = 0, $$a$3186$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa159$i = 0, $$lcssa318 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0, $$lcssa326 = 0, $$lcssa327 = 0;
 var $$lcssa329 = 0, $$lcssa339 = 0, $$lcssa342 = 0.0, $$lcssa344 = 0, $$neg52$i = 0, $$neg53$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr47$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi184$iZ2D = 0, $$pre179$i = 0, $$pre182$i = 0, $$pre183$i = 0, $$pre193 = 0;
 var $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0;
 var $599 = 0.0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1147$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3134$i = 0, $a$5$lcssa$i = 0, $a$5109$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0140$i = 0, $carry3$0128$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0139$i = 0, $d$0141$i = 0, $d$1127$i = 0, $d$2$lcssa$i = 0, $d$2108$i = 0, $d$3$i = 0, $d$482$i = 0, $d$575$i = 0, $d$686$i = 0, $e$0123$i = 0;
 var $e$1$i = 0, $e$2104$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$193$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0109 = 0, $fl$062 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt39$lcssa = 0, $fmt39101 = 0, $fmt40 = 0, $fmt41 = 0, $fmt42 = 0, $fmt44 = 0, $fmt44$lcssa321 = 0, $fmt45 = 0, $i$0$lcssa = 0, $i$0$lcssa200 = 0, $i$0114 = 0, $i$0122$i = 0;
 var $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116$i = 0, $i$1125 = 0, $i$2100 = 0, $i$2100$lcssa = 0, $i$2103$i = 0, $i$398 = 0, $i$399$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0;
 var $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0115$i = 0, $j$0117$i = 0, $j$1100$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1113 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0;
 var $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond240 = 0, $or$cond29$i = 0, $or$cond3$not$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0;
 var $p$4198 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$169$i = 0, $round$068$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0;
 var $s7$079$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$070$i = 0, $s9$0$i = 0, $s9$183$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa322 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge860 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0115 = 0, $ws$1126 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0102 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1146$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3133$i = 0, $z$4$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = ((($ebuf0$i)) + 12|0);
 $6 = ((($ebuf0$i)) + 11|0);
 $7 = $buf$i;
 $8 = $5;
 $9 = (($8) - ($7))|0;
 $10 = (-2 - ($7))|0;
 $11 = (($8) + 2)|0;
 $12 = ((($big$i)) + 288|0);
 $13 = ((($buf$i)) + 9|0);
 $14 = $13;
 $15 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$fmt41 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$fmt41>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 245;
   break;
  } else {
   $23 = $21;$fmt40 = $fmt41;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $fmt39101 = $fmt40;$z$0102 = $fmt40;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $fmt39$lcssa = $fmt40;$z$0$lcssa = $fmt40;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($fmt40)) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$fmt40 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = ((($fmt39101)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt39$lcssa = $fmt39101;$z$0$lcssa = $z$0102;
      break L12;
     }
     $28 = ((($z$0102)) + 1|0);
     $29 = ((($fmt39101)) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt39101 = $29;$z$0102 = $28;
      label = 9;
     } else {
      $fmt39$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt41;
  $34 = (($32) - ($33))|0;
  if ($0) {
   $35 = HEAP32[$f>>2]|0;
   $36 = $35 & 32;
   $37 = ($36|0)==(0);
   if ($37) {
    (___fwritex($fmt41,$34,$f)|0);
   }
  }
  $38 = ($z$0$lcssa|0)==($fmt41|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$fmt41 = $fmt39$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $39 = ((($fmt39$lcssa)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($fmt39$lcssa)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($fmt39$lcssa)) + 3|0);
   $$51 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre193 = HEAP8[$$51>>0]|0;
   $47 = $$pre193;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$51;
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L25: do {
   if ($49) {
    $51 = $46;$56 = $47;$fl$0109 = 0;$storemerge8108 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $65 = $56;$fl$062 = $fl$0109;$storemerge860 = $storemerge8108;
      break L25;
     }
     $55 = $56 << 24 >> 24;
     $57 = (($55) + -32)|0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0109;
     $60 = ((($storemerge8108)) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63|0)==(32);
     if ($64) {
      $51 = $62;$56 = $61;$fl$0109 = $59;$storemerge8108 = $60;
     } else {
      $65 = $61;$fl$062 = $59;$storemerge860 = $60;
      break;
     }
    }
   } else {
    $65 = $47;$fl$062 = 0;$storemerge860 = $storemerge;
   }
  } while(0);
  $66 = ($65<<24>>24)==(42);
  do {
   if ($66) {
    $67 = ((($storemerge860)) + 1|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = (($69) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $70 = ((($storemerge860)) + 2|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(36);
     if ($72) {
      $73 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$73>>2] = 10;
      $74 = HEAP8[$67>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = (($75) + -48)|0;
      $77 = (($nl_arg) + ($76<<3)|0);
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($storemerge860)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $85 = ($l10n$1|0)==(0);
     if (!($85)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$062;$fmt42 = $67;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $86 = $arglist_current;
     $87 = ((0) + 4|0);
     $expanded4 = $87;
     $expanded = (($expanded4) - 1)|0;
     $88 = (($86) + ($expanded))|0;
     $89 = ((0) + 4|0);
     $expanded8 = $89;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $90 = $88 & $expanded6;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
    }
    $93 = ($w$0|0)<(0);
    if ($93) {
     $94 = $fl$062 | 8192;
     $95 = (0 - ($w$0))|0;
     $fl$1 = $94;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $95;
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $96 = $65 << 24 >> 24;
    $isdigittmp1$i = (($96) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $100 = $storemerge860;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $97 = ($i$03$i*10)|0;
      $98 = (($97) + ($isdigittmp4$i))|0;
      $99 = ((($100)) + 1|0);
      $101 = HEAP8[$99>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = (($102) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $98;$$lcssa318 = $99;
       break;
      }
     }
     $103 = ($$lcssa|0)<(0);
     if ($103) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$062;$fmt42 = $$lcssa318;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge860;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $104 = HEAP8[$fmt42>>0]|0;
  $105 = ($104<<24>>24)==(46);
  L46: do {
   if ($105) {
    $106 = ((($fmt42)) + 1|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = ($107<<24>>24)==(42);
    if (!($108)) {
     $135 = $107 << 24 >> 24;
     $isdigittmp1$i22 = (($135) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $139 = $106;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $fmt45 = $106;$p$0 = 0;
      break;
     }
     while(1) {
      $136 = ($i$03$i25*10)|0;
      $137 = (($136) + ($isdigittmp4$i24))|0;
      $138 = ((($139)) + 1|0);
      $140 = HEAP8[$138>>0]|0;
      $141 = $140 << 24 >> 24;
      $isdigittmp$i26 = (($141) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $139 = $138;$i$03$i25 = $137;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $fmt45 = $138;$p$0 = $137;
       break L46;
      }
     }
    }
    $109 = ((($fmt42)) + 2|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110 << 24 >> 24;
    $isdigittmp9 = (($111) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $112 = ((($fmt42)) + 3|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = ($113<<24>>24)==(36);
     if ($114) {
      $115 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$115>>2] = 10;
      $116 = HEAP8[$109>>0]|0;
      $117 = $116 << 24 >> 24;
      $118 = (($117) + -48)|0;
      $119 = (($nl_arg) + ($118<<3)|0);
      $120 = $119;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ((($fmt42)) + 4|0);
      $fmt45 = $126;$p$0 = $122;
      break;
     }
    }
    $127 = ($l10n$3|0)==(0);
    if (!($127)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $128 = $arglist_current2;
     $129 = ((0) + 4|0);
     $expanded11 = $129;
     $expanded10 = (($expanded11) - 1)|0;
     $130 = (($128) + ($expanded10))|0;
     $131 = ((0) + 4|0);
     $expanded15 = $131;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $132 = $130 & $expanded13;
     $133 = $132;
     $134 = HEAP32[$133>>2]|0;
     $arglist_next3 = ((($133)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt45 = $109;$p$0 = $134;
    } else {
     $fmt45 = $109;$p$0 = 0;
    }
   } else {
    $fmt45 = $fmt42;$p$0 = -1;
   }
  } while(0);
  $fmt44 = $fmt45;$st$0 = 0;
  while(1) {
   $142 = HEAP8[$fmt44>>0]|0;
   $143 = $142 << 24 >> 24;
   $144 = (($143) + -65)|0;
   $145 = ($144>>>0)>(57);
   if ($145) {
    $$0 = -1;
    break L1;
   }
   $146 = ((($fmt44)) + 1|0);
   $147 = ((179663 + (($st$0*58)|0)|0) + ($144)|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = (($149) + -1)|0;
   $151 = ($150>>>0)<(8);
   if ($151) {
    $fmt44 = $146;$st$0 = $149;
   } else {
    $$lcssa323 = $146;$$lcssa324 = $148;$$lcssa325 = $149;$fmt44$lcssa321 = $fmt44;$st$0$lcssa322 = $st$0;
    break;
   }
  }
  $152 = ($$lcssa324<<24>>24)==(0);
  if ($152) {
   $$0 = -1;
   break;
  }
  $153 = ($$lcssa324<<24>>24)==(19);
  $154 = ($argpos$0|0)>(-1);
  do {
   if ($153) {
    if ($154) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($154) {
     $155 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$155>>2] = $$lcssa325;
     $156 = (($nl_arg) + ($argpos$0<<3)|0);
     $157 = $156;
     $158 = $157;
     $159 = HEAP32[$158>>2]|0;
     $160 = (($157) + 4)|0;
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $163 = $arg;
     $164 = $163;
     HEAP32[$164>>2] = $159;
     $165 = (($163) + 4)|0;
     $166 = $165;
     HEAP32[$166>>2] = $162;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa325,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $167 = HEAP8[$fmt44$lcssa321>>0]|0;
  $168 = $167 << 24 >> 24;
  $169 = ($st$0$lcssa322|0)!=(0);
  $170 = $168 & 15;
  $171 = ($170|0)==(3);
  $or$cond15 = $169 & $171;
  $172 = $168 & -33;
  $t$0 = $or$cond15 ? $172 : $168;
  $173 = $fl$1 & 8192;
  $174 = ($173|0)==(0);
  $175 = $fl$1 & -65537;
  $fl$1$ = $174 ? $fl$1 : $175;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa322|0) {
    case 0:  {
     $182 = HEAP32[$arg>>2]|0;
     HEAP32[$182>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $184 = ($cnt$1|0)<(0);
     $185 = $184 << 31 >> 31;
     $186 = HEAP32[$arg>>2]|0;
     $187 = $186;
     $188 = $187;
     HEAP32[$188>>2] = $cnt$1;
     $189 = (($187) + 4)|0;
     $190 = $189;
     HEAP32[$190>>2] = $185;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $191 = $cnt$1&65535;
     $192 = HEAP32[$arg>>2]|0;
     HEAP16[$192>>1] = $191;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $193 = $cnt$1&255;
     $194 = HEAP32[$arg>>2]|0;
     HEAP8[$194>>0] = $193;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $195 = HEAP32[$arg>>2]|0;
     HEAP32[$195>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $196 = ($cnt$1|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$arg>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $cnt$1;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $203 = ($p$0>>>0)>(8);
    $204 = $203 ? $p$0 : 8;
    $205 = $fl$1$ | 8;
    $fl$3 = $205;$p$1 = $204;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $243 = $arg;
    $244 = $243;
    $245 = HEAP32[$244>>2]|0;
    $246 = (($243) + 4)|0;
    $247 = $246;
    $248 = HEAP32[$247>>2]|0;
    $249 = ($245|0)==(0);
    $250 = ($248|0)==(0);
    $251 = $249 & $250;
    if ($251) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$253 = $245;$257 = $248;
     while(1) {
      $252 = $253 & 7;
      $254 = $252 | 48;
      $255 = $254&255;
      $256 = ((($$03$i33)) + -1|0);
      HEAP8[$256>>0] = $255;
      $258 = (_bitshift64Lshr(($253|0),($257|0),3)|0);
      $259 = tempRet0;
      $260 = ($258|0)==(0);
      $261 = ($259|0)==(0);
      $262 = $260 & $261;
      if ($262) {
       $$0$lcssa$i = $256;
       break;
      } else {
       $$03$i33 = $256;$253 = $258;$257 = $259;
      }
     }
    }
    $263 = $fl$1$ & 8;
    $264 = ($263|0)==(0);
    if ($264) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 180143;
     label = 77;
    } else {
     $265 = $$0$lcssa$i;
     $266 = (($2) - ($265))|0;
     $267 = (($266) + 1)|0;
     $268 = ($p$0|0)<($267|0);
     $$p$0 = $268 ? $267 : $p$0;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $$p$0;$pl$1 = 0;$prefix$1 = 180143;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $269 = $arg;
    $270 = $269;
    $271 = HEAP32[$270>>2]|0;
    $272 = (($269) + 4)|0;
    $273 = $272;
    $274 = HEAP32[$273>>2]|0;
    $275 = ($274|0)<(0);
    if ($275) {
     $276 = (_i64Subtract(0,0,($271|0),($274|0))|0);
     $277 = tempRet0;
     $278 = $arg;
     $279 = $278;
     HEAP32[$279>>2] = $276;
     $280 = (($278) + 4)|0;
     $281 = $280;
     HEAP32[$281>>2] = $277;
     $286 = $276;$287 = $277;$pl$0 = 1;$prefix$0 = 180143;
     label = 76;
     break L75;
    }
    $282 = $fl$1$ & 2048;
    $283 = ($282|0)==(0);
    if ($283) {
     $284 = $fl$1$ & 1;
     $285 = ($284|0)==(0);
     $$ = $285 ? 180143 : (180145);
     $286 = $271;$287 = $274;$pl$0 = $284;$prefix$0 = $$;
     label = 76;
    } else {
     $286 = $271;$287 = $274;$pl$0 = 1;$prefix$0 = (180144);
     label = 76;
    }
    break;
   }
   case 117:  {
    $176 = $arg;
    $177 = $176;
    $178 = HEAP32[$177>>2]|0;
    $179 = (($176) + 4)|0;
    $180 = $179;
    $181 = HEAP32[$180>>2]|0;
    $286 = $178;$287 = $181;$pl$0 = 0;$prefix$0 = 180143;
    label = 76;
    break;
   }
   case 99:  {
    $307 = $arg;
    $308 = $307;
    $309 = HEAP32[$308>>2]|0;
    $310 = (($307) + 4)|0;
    $311 = $310;
    $312 = HEAP32[$311>>2]|0;
    $313 = $309&255;
    HEAP8[$3>>0] = $313;
    $a$2 = $3;$fl$6 = $175;$p$5 = 1;$pl$2 = 0;$prefix$2 = 180143;$z$2 = $1;
    break;
   }
   case 109:  {
    $314 = (___errno_location()|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = (_strerror($315)|0);
    $a$1 = $316;
    label = 82;
    break;
   }
   case 115:  {
    $317 = HEAP32[$arg>>2]|0;
    $318 = ($317|0)!=(0|0);
    $319 = $318 ? $317 : 180153;
    $a$1 = $319;
    label = 82;
    break;
   }
   case 67:  {
    $326 = $arg;
    $327 = $326;
    $328 = HEAP32[$327>>2]|0;
    $329 = (($326) + 4)|0;
    $330 = $329;
    $331 = HEAP32[$330>>2]|0;
    HEAP32[$wc>>2] = $328;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $p$4198 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $p$4198 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $359 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $359;$360 = HEAP32[tempDoublePtr>>2]|0;
    $361 = HEAP32[tempDoublePtr+4>>2]|0;
    $362 = ($361|0)<(0);
    if ($362) {
     $363 = -$359;
     $$07$i = $363;$pl$0$i = 1;$prefix$0$i = 180160;
    } else {
     $364 = $fl$1$ & 2048;
     $365 = ($364|0)==(0);
     if ($365) {
      $366 = $fl$1$ & 1;
      $367 = ($366|0)==(0);
      $$$i = $367 ? (180161) : (180166);
      $$07$i = $359;$pl$0$i = $366;$prefix$0$i = $$$i;
     } else {
      $$07$i = $359;$pl$0$i = 1;$prefix$0$i = (180163);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$368 = HEAP32[tempDoublePtr>>2]|0;
    $369 = HEAP32[tempDoublePtr+4>>2]|0;
    $370 = $369 & 2146435072;
    $371 = ($370>>>0)<(2146435072);
    $372 = (0)<(0);
    $373 = ($370|0)==(2146435072);
    $374 = $373 & $372;
    $375 = $371 | $374;
    do {
     if ($375) {
      $391 = (+_frexpl($$07$i,$e2$i));
      $392 = $391 * 2.0;
      $393 = $392 != 0.0;
      if ($393) {
       $394 = HEAP32[$e2$i>>2]|0;
       $395 = (($394) + -1)|0;
       HEAP32[$e2$i>>2] = $395;
      }
      $396 = $t$0 | 32;
      $397 = ($396|0)==(97);
      if ($397) {
       $398 = $t$0 & 32;
       $399 = ($398|0)==(0);
       $400 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $399 ? $prefix$0$i : $400;
       $401 = $pl$0$i | 2;
       $402 = ($p$0>>>0)>(11);
       $403 = (12 - ($p$0))|0;
       $404 = ($403|0)==(0);
       $405 = $402 | $404;
       do {
        if ($405) {
         $$1$i = $392;
        } else {
         $re$169$i = $403;$round$068$i = 8.0;
         while(1) {
          $406 = (($re$169$i) + -1)|0;
          $407 = $round$068$i * 16.0;
          $408 = ($406|0)==(0);
          if ($408) {
           $$lcssa342 = $407;
           break;
          } else {
           $re$169$i = $406;$round$068$i = $407;
          }
         }
         $409 = HEAP8[$prefix$0$$i>>0]|0;
         $410 = ($409<<24>>24)==(45);
         if ($410) {
          $411 = -$392;
          $412 = $411 - $$lcssa342;
          $413 = $$lcssa342 + $412;
          $414 = -$413;
          $$1$i = $414;
          break;
         } else {
          $415 = $392 + $$lcssa342;
          $416 = $415 - $$lcssa342;
          $$1$i = $416;
          break;
         }
        }
       } while(0);
       $417 = HEAP32[$e2$i>>2]|0;
       $418 = ($417|0)<(0);
       $419 = (0 - ($417))|0;
       $420 = $418 ? $419 : $417;
       $421 = ($420|0)<(0);
       $422 = $421 << 31 >> 31;
       $423 = (_fmt_u($420,$422,$5)|0);
       $424 = ($423|0)==($5|0);
       if ($424) {
        HEAP8[$6>>0] = 48;
        $estr$0$i = $6;
       } else {
        $estr$0$i = $423;
       }
       $425 = $417 >> 31;
       $426 = $425 & 2;
       $427 = (($426) + 43)|0;
       $428 = $427&255;
       $429 = ((($estr$0$i)) + -1|0);
       HEAP8[$429>>0] = $428;
       $430 = (($t$0) + 15)|0;
       $431 = $430&255;
       $432 = ((($estr$0$i)) + -2|0);
       HEAP8[$432>>0] = $431;
       $notrhs$i = ($p$0|0)<(1);
       $433 = $fl$1$ & 8;
       $434 = ($433|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $435 = (~~(($$2$i)));
        $436 = (180127 + ($435)|0);
        $437 = HEAP8[$436>>0]|0;
        $438 = $437&255;
        $439 = $438 | $398;
        $440 = $439&255;
        $441 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $440;
        $442 = (+($435|0));
        $443 = $$2$i - $442;
        $444 = $443 * 16.0;
        $445 = $441;
        $446 = (($445) - ($7))|0;
        $447 = ($446|0)==(1);
        do {
         if ($447) {
          $notlhs$i = $444 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $434 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $441;
           break;
          }
          $448 = ((($s$0$i)) + 2|0);
          HEAP8[$441>>0] = 46;
          $s$1$i = $448;
         } else {
          $s$1$i = $441;
         }
        } while(0);
        $449 = $444 != 0.0;
        if ($449) {
         $$2$i = $444;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $450 = ($p$0|0)!=(0);
       $$pre182$i = $s$1$i$lcssa;
       $451 = (($10) + ($$pre182$i))|0;
       $452 = ($451|0)<($p$0|0);
       $or$cond240 = $450 & $452;
       $453 = $432;
       $454 = (($11) + ($p$0))|0;
       $455 = (($454) - ($453))|0;
       $456 = $432;
       $457 = (($9) - ($456))|0;
       $458 = (($457) + ($$pre182$i))|0;
       $l$0$i = $or$cond240 ? $455 : $458;
       $459 = (($l$0$i) + ($401))|0;
       _pad($f,32,$w$1,$459,$fl$1$);
       $460 = HEAP32[$f>>2]|0;
       $461 = $460 & 32;
       $462 = ($461|0)==(0);
       if ($462) {
        (___fwritex($prefix$0$$i,$401,$f)|0);
       }
       $463 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$459,$463);
       $464 = (($$pre182$i) - ($7))|0;
       $465 = HEAP32[$f>>2]|0;
       $466 = $465 & 32;
       $467 = ($466|0)==(0);
       if ($467) {
        (___fwritex($buf$i,$464,$f)|0);
       }
       $468 = $432;
       $469 = (($8) - ($468))|0;
       $sum = (($464) + ($469))|0;
       $470 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$470,0,0);
       $471 = HEAP32[$f>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($432,$469,$f)|0);
       }
       $474 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$459,$474);
       $475 = ($459|0)<($w$1|0);
       $w$$i = $475 ? $w$1 : $459;
       $$0$i = $w$$i;
       break;
      }
      $476 = ($p$0|0)<(0);
      $$p$i = $476 ? 6 : $p$0;
      if ($393) {
       $477 = $392 * 268435456.0;
       $478 = HEAP32[$e2$i>>2]|0;
       $479 = (($478) + -28)|0;
       HEAP32[$e2$i>>2] = $479;
       $$3$i = $477;$480 = $479;
      } else {
       $$pre179$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $392;$480 = $$pre179$i;
      }
      $481 = ($480|0)<(0);
      $$31$i = $481 ? $big$i : $12;
      $482 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $483 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $483;
       $484 = ((($z$0$i)) + 4|0);
       $485 = (+($483>>>0));
       $486 = $$4$i - $485;
       $487 = $486 * 1.0E+9;
       $488 = $487 != 0.0;
       if ($488) {
        $$4$i = $487;$z$0$i = $484;
       } else {
        $$lcssa326 = $484;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $489 = ($$pr$i|0)>(0);
      if ($489) {
       $490 = $$pr$i;$a$1147$i = $$31$i;$z$1146$i = $$lcssa326;
       while(1) {
        $491 = ($490|0)>(29);
        $492 = $491 ? 29 : $490;
        $d$0139$i = ((($z$1146$i)) + -4|0);
        $493 = ($d$0139$i>>>0)<($a$1147$i>>>0);
        do {
         if ($493) {
          $a$2$ph$i = $a$1147$i;
         } else {
          $carry$0140$i = 0;$d$0141$i = $d$0139$i;
          while(1) {
           $494 = HEAP32[$d$0141$i>>2]|0;
           $495 = (_bitshift64Shl(($494|0),0,($492|0))|0);
           $496 = tempRet0;
           $497 = (_i64Add(($495|0),($496|0),($carry$0140$i|0),0)|0);
           $498 = tempRet0;
           $499 = (___uremdi3(($497|0),($498|0),1000000000,0)|0);
           $500 = tempRet0;
           HEAP32[$d$0141$i>>2] = $499;
           $501 = (___udivdi3(($497|0),($498|0),1000000000,0)|0);
           $502 = tempRet0;
           $d$0$i = ((($d$0141$i)) + -4|0);
           $503 = ($d$0$i>>>0)<($a$1147$i>>>0);
           if ($503) {
            $$lcssa327 = $501;
            break;
           } else {
            $carry$0140$i = $501;$d$0141$i = $d$0$i;
           }
          }
          $504 = ($$lcssa327|0)==(0);
          if ($504) {
           $a$2$ph$i = $a$1147$i;
           break;
          }
          $505 = ((($a$1147$i)) + -4|0);
          HEAP32[$505>>2] = $$lcssa327;
          $a$2$ph$i = $505;
         }
        } while(0);
        $z$2$i = $z$1146$i;
        while(1) {
         $506 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($506)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $507 = ((($z$2$i)) + -4|0);
         $508 = HEAP32[$507>>2]|0;
         $509 = ($508|0)==(0);
         if ($509) {
          $z$2$i = $507;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $510 = HEAP32[$e2$i>>2]|0;
        $511 = (($510) - ($492))|0;
        HEAP32[$e2$i>>2] = $511;
        $512 = ($511|0)>(0);
        if ($512) {
         $490 = $511;$a$1147$i = $a$2$ph$i;$z$1146$i = $z$2$i$lcssa;
        } else {
         $$pr47$i = $511;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr47$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa326;
      }
      $513 = ($$pr47$i|0)<(0);
      if ($513) {
       $514 = (($$p$i) + 25)|0;
       $515 = (($514|0) / 9)&-1;
       $516 = (($515) + 1)|0;
       $517 = ($396|0)==(102);
       $519 = $$pr47$i;$a$3134$i = $a$1$lcssa$i;$z$3133$i = $z$1$lcssa$i;
       while(1) {
        $518 = (0 - ($519))|0;
        $520 = ($518|0)>(9);
        $521 = $520 ? 9 : $518;
        $522 = ($a$3134$i>>>0)<($z$3133$i>>>0);
        do {
         if ($522) {
          $526 = 1 << $521;
          $527 = (($526) + -1)|0;
          $528 = 1000000000 >>> $521;
          $carry3$0128$i = 0;$d$1127$i = $a$3134$i;
          while(1) {
           $529 = HEAP32[$d$1127$i>>2]|0;
           $530 = $529 & $527;
           $531 = $529 >>> $521;
           $532 = (($531) + ($carry3$0128$i))|0;
           HEAP32[$d$1127$i>>2] = $532;
           $533 = Math_imul($530, $528)|0;
           $534 = ((($d$1127$i)) + 4|0);
           $535 = ($534>>>0)<($z$3133$i>>>0);
           if ($535) {
            $carry3$0128$i = $533;$d$1127$i = $534;
           } else {
            $$lcssa329 = $533;
            break;
           }
          }
          $536 = HEAP32[$a$3134$i>>2]|0;
          $537 = ($536|0)==(0);
          $538 = ((($a$3134$i)) + 4|0);
          $$a$3$i = $537 ? $538 : $a$3134$i;
          $539 = ($$lcssa329|0)==(0);
          if ($539) {
           $$a$3186$i = $$a$3$i;$z$4$i = $z$3133$i;
           break;
          }
          $540 = ((($z$3133$i)) + 4|0);
          HEAP32[$z$3133$i>>2] = $$lcssa329;
          $$a$3186$i = $$a$3$i;$z$4$i = $540;
         } else {
          $523 = HEAP32[$a$3134$i>>2]|0;
          $524 = ($523|0)==(0);
          $525 = ((($a$3134$i)) + 4|0);
          $$a$3185$i = $524 ? $525 : $a$3134$i;
          $$a$3186$i = $$a$3185$i;$z$4$i = $z$3133$i;
         }
        } while(0);
        $541 = $517 ? $$31$i : $$a$3186$i;
        $542 = $z$4$i;
        $543 = $541;
        $544 = (($542) - ($543))|0;
        $545 = $544 >> 2;
        $546 = ($545|0)>($516|0);
        $547 = (($541) + ($516<<2)|0);
        $$z$4$i = $546 ? $547 : $z$4$i;
        $548 = HEAP32[$e2$i>>2]|0;
        $549 = (($548) + ($521))|0;
        HEAP32[$e2$i>>2] = $549;
        $550 = ($549|0)<(0);
        if ($550) {
         $519 = $549;$a$3134$i = $$a$3186$i;$z$3133$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3186$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $551 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($551) {
        $552 = $a$3$lcssa$i;
        $553 = (($482) - ($552))|0;
        $554 = $553 >> 2;
        $555 = ($554*9)|0;
        $556 = HEAP32[$a$3$lcssa$i>>2]|0;
        $557 = ($556>>>0)<(10);
        if ($557) {
         $e$1$i = $555;
         break;
        } else {
         $e$0123$i = $555;$i$0122$i = 10;
        }
        while(1) {
         $558 = ($i$0122$i*10)|0;
         $559 = (($e$0123$i) + 1)|0;
         $560 = ($556>>>0)<($558>>>0);
         if ($560) {
          $e$1$i = $559;
          break;
         } else {
          $e$0123$i = $559;$i$0122$i = $558;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $561 = ($396|0)!=(102);
      $562 = $561 ? $e$1$i : 0;
      $563 = (($$p$i) - ($562))|0;
      $564 = ($396|0)==(103);
      $565 = ($$p$i|0)!=(0);
      $566 = $565 & $564;
      $$neg52$i = $566 << 31 >> 31;
      $567 = (($563) + ($$neg52$i))|0;
      $568 = $z$3$lcssa$i;
      $569 = (($568) - ($482))|0;
      $570 = $569 >> 2;
      $571 = ($570*9)|0;
      $572 = (($571) + -9)|0;
      $573 = ($567|0)<($572|0);
      if ($573) {
       $574 = (($567) + 9216)|0;
       $575 = (($574|0) / 9)&-1;
       $$sum$i = (($575) + -1023)|0;
       $576 = (($$31$i) + ($$sum$i<<2)|0);
       $577 = (($574|0) % 9)&-1;
       $j$0115$i = (($577) + 1)|0;
       $578 = ($j$0115$i|0)<(9);
       if ($578) {
        $i$1116$i = 10;$j$0117$i = $j$0115$i;
        while(1) {
         $579 = ($i$1116$i*10)|0;
         $j$0$i = (($j$0117$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $579;
          break;
         } else {
          $i$1116$i = $579;$j$0117$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $580 = HEAP32[$576>>2]|0;
       $581 = (($580>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $582 = ($581|0)==(0);
       if ($582) {
        $$sum15$i = (($575) + -1022)|0;
        $583 = (($$31$i) + ($$sum15$i<<2)|0);
        $584 = ($583|0)==($z$3$lcssa$i|0);
        if ($584) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
        } else {
         label = 163;
        }
       } else {
        label = 163;
       }
       do {
        if ((label|0) == 163) {
         label = 0;
         $585 = (($580>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $586 = $585 & 1;
         $587 = ($586|0)==(0);
         $$20$i = $587 ? 9007199254740992.0 : 9007199254740994.0;
         $588 = (($i$1$lcssa$i|0) / 2)&-1;
         $589 = ($581>>>0)<($588>>>0);
         do {
          if ($589) {
           $small$0$i = 0.5;
          } else {
           $590 = ($581|0)==($588|0);
           if ($590) {
            $$sum16$i = (($575) + -1022)|0;
            $591 = (($$31$i) + ($$sum16$i<<2)|0);
            $592 = ($591|0)==($z$3$lcssa$i|0);
            if ($592) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $593 = ($pl$0$i|0)==(0);
         do {
          if ($593) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $594 = HEAP8[$prefix$0$i>>0]|0;
           $595 = ($594<<24>>24)==(45);
           if (!($595)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $596 = -$$20$i;
           $597 = -$small$0$i;
           $round6$1$i = $596;$small$1$i = $597;
          }
         } while(0);
         $598 = (($580) - ($581))|0;
         HEAP32[$576>>2] = $598;
         $599 = $round6$1$i + $small$1$i;
         $600 = $599 != $round6$1$i;
         if (!($600)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
          break;
         }
         $601 = (($598) + ($i$1$lcssa$i))|0;
         HEAP32[$576>>2] = $601;
         $602 = ($601>>>0)>(999999999);
         if ($602) {
          $a$5109$i = $a$3$lcssa$i;$d$2108$i = $576;
          while(1) {
           $603 = ((($d$2108$i)) + -4|0);
           HEAP32[$d$2108$i>>2] = 0;
           $604 = ($603>>>0)<($a$5109$i>>>0);
           if ($604) {
            $605 = ((($a$5109$i)) + -4|0);
            HEAP32[$605>>2] = 0;
            $a$6$i = $605;
           } else {
            $a$6$i = $a$5109$i;
           }
           $606 = HEAP32[$603>>2]|0;
           $607 = (($606) + 1)|0;
           HEAP32[$603>>2] = $607;
           $608 = ($607>>>0)>(999999999);
           if ($608) {
            $a$5109$i = $a$6$i;$d$2108$i = $603;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $603;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $576;
         }
         $609 = $a$5$lcssa$i;
         $610 = (($482) - ($609))|0;
         $611 = $610 >> 2;
         $612 = ($611*9)|0;
         $613 = HEAP32[$a$5$lcssa$i>>2]|0;
         $614 = ($613>>>0)<(10);
         if ($614) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $612;
          break;
         } else {
          $e$2104$i = $612;$i$2103$i = 10;
         }
         while(1) {
          $615 = ($i$2103$i*10)|0;
          $616 = (($e$2104$i) + 1)|0;
          $617 = ($613>>>0)<($615>>>0);
          if ($617) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $616;
           break;
          } else {
           $e$2104$i = $616;$i$2103$i = $615;
          }
         }
        }
       } while(0);
       $618 = ((($d$3$i)) + 4|0);
       $619 = ($z$3$lcssa$i>>>0)>($618>>>0);
       $$z$3$i = $619 ? $618 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $620 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $621 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($621)) {
        $$lcssa159$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $622 = ((($z$6$i)) + -4|0);
       $623 = HEAP32[$622>>2]|0;
       $624 = ($623|0)==(0);
       if ($624) {
        $z$6$i = $622;
       } else {
        $$lcssa159$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($564) {
        $625 = $565&1;
        $626 = $625 ^ 1;
        $$p$$i = (($626) + ($$p$i))|0;
        $627 = ($$p$$i|0)>($e$4$ph$i|0);
        $628 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $627 & $628;
        if ($or$cond6$i) {
         $629 = (($t$0) + -1)|0;
         $$neg53$i = (($$p$$i) + -1)|0;
         $630 = (($$neg53$i) - ($e$4$ph$i))|0;
         $$013$i = $629;$$210$i = $630;
        } else {
         $631 = (($t$0) + -2)|0;
         $632 = (($$p$$i) + -1)|0;
         $$013$i = $631;$$210$i = $632;
        }
        $633 = $fl$1$ & 8;
        $634 = ($633|0)==(0);
        if (!($634)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi184$iZ2D = $633;
         break;
        }
        do {
         if ($$lcssa159$i) {
          $635 = ((($z$6$i$lcssa)) + -4|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636|0)==(0);
          if ($637) {
           $j$2$i = 9;
           break;
          }
          $638 = (($636>>>0) % 10)&-1;
          $639 = ($638|0)==(0);
          if ($639) {
           $i$399$i = 10;$j$1100$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $640 = ($i$399$i*10)|0;
           $641 = (($j$1100$i) + 1)|0;
           $642 = (($636>>>0) % ($640>>>0))&-1;
           $643 = ($642|0)==(0);
           if ($643) {
            $i$399$i = $640;$j$1100$i = $641;
           } else {
            $j$2$i = $641;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $644 = $$013$i | 32;
        $645 = ($644|0)==(102);
        $646 = $z$6$i$lcssa;
        $647 = (($646) - ($482))|0;
        $648 = $647 >> 2;
        $649 = ($648*9)|0;
        $650 = (($649) + -9)|0;
        if ($645) {
         $651 = (($650) - ($j$2$i))|0;
         $652 = ($651|0)<(0);
         $$21$i = $652 ? 0 : $651;
         $653 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $653 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi184$iZ2D = 0;
         break;
        } else {
         $654 = (($650) + ($e$4$ph$i))|0;
         $655 = (($654) - ($j$2$i))|0;
         $656 = ($655|0)<(0);
         $$23$i = $656 ? 0 : $655;
         $657 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $657 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi184$iZ2D = 0;
         break;
        }
       } else {
        $$pre183$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi184$iZ2D = $$pre183$i;
       }
      } while(0);
      $658 = $$311$i | $$pre$phi184$iZ2D;
      $659 = ($658|0)!=(0);
      $660 = $659&1;
      $661 = $$114$i | 32;
      $662 = ($661|0)==(102);
      if ($662) {
       $663 = ($e$4$ph$i|0)>(0);
       $664 = $663 ? $e$4$ph$i : 0;
       $$pn$i = $664;$estr$2$i = 0;
      } else {
       $665 = ($e$4$ph$i|0)<(0);
       $666 = $665 ? $620 : $e$4$ph$i;
       $667 = ($666|0)<(0);
       $668 = $667 << 31 >> 31;
       $669 = (_fmt_u($666,$668,$5)|0);
       $670 = $669;
       $671 = (($8) - ($670))|0;
       $672 = ($671|0)<(2);
       if ($672) {
        $estr$193$i = $669;
        while(1) {
         $673 = ((($estr$193$i)) + -1|0);
         HEAP8[$673>>0] = 48;
         $674 = $673;
         $675 = (($8) - ($674))|0;
         $676 = ($675|0)<(2);
         if ($676) {
          $estr$193$i = $673;
         } else {
          $estr$1$lcssa$i = $673;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $669;
       }
       $677 = $e$4$ph$i >> 31;
       $678 = $677 & 2;
       $679 = (($678) + 43)|0;
       $680 = $679&255;
       $681 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$681>>0] = $680;
       $682 = $$114$i&255;
       $683 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$683>>0] = $682;
       $684 = $683;
       $685 = (($8) - ($684))|0;
       $$pn$i = $685;$estr$2$i = $683;
      }
      $686 = (($pl$0$i) + 1)|0;
      $687 = (($686) + ($$311$i))|0;
      $l$1$i = (($687) + ($660))|0;
      $688 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$688,$fl$1$);
      $689 = HEAP32[$f>>2]|0;
      $690 = $689 & 32;
      $691 = ($690|0)==(0);
      if ($691) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $692 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$688,$692);
      do {
       if ($662) {
        $693 = ($a$8$ph$i>>>0)>($$31$i>>>0);
        $r$0$a$8$i = $693 ? $$31$i : $a$8$ph$i;
        $d$482$i = $r$0$a$8$i;
        while(1) {
         $694 = HEAP32[$d$482$i>>2]|0;
         $695 = (_fmt_u($694,0,$13)|0);
         $696 = ($d$482$i|0)==($r$0$a$8$i|0);
         do {
          if ($696) {
           $700 = ($695|0)==($13|0);
           if (!($700)) {
            $s7$1$i = $695;
            break;
           }
           HEAP8[$15>>0] = 48;
           $s7$1$i = $15;
          } else {
           $697 = ($695>>>0)>($buf$i>>>0);
           if ($697) {
            $s7$079$i = $695;
           } else {
            $s7$1$i = $695;
            break;
           }
           while(1) {
            $698 = ((($s7$079$i)) + -1|0);
            HEAP8[$698>>0] = 48;
            $699 = ($698>>>0)>($buf$i>>>0);
            if ($699) {
             $s7$079$i = $698;
            } else {
             $s7$1$i = $698;
             break;
            }
           }
          }
         } while(0);
         $701 = HEAP32[$f>>2]|0;
         $702 = $701 & 32;
         $703 = ($702|0)==(0);
         if ($703) {
          $704 = $s7$1$i;
          $705 = (($14) - ($704))|0;
          (___fwritex($s7$1$i,$705,$f)|0);
         }
         $706 = ((($d$482$i)) + 4|0);
         $707 = ($706>>>0)>($$31$i>>>0);
         if ($707) {
          $$lcssa339 = $706;
          break;
         } else {
          $d$482$i = $706;
         }
        }
        $708 = ($658|0)==(0);
        do {
         if (!($708)) {
          $709 = HEAP32[$f>>2]|0;
          $710 = $709 & 32;
          $711 = ($710|0)==(0);
          if (!($711)) {
           break;
          }
          (___fwritex(180290,1,$f)|0);
         }
        } while(0);
        $712 = ($$lcssa339>>>0)<($z$6$i$lcssa>>>0);
        $713 = ($$311$i|0)>(0);
        $714 = $713 & $712;
        if ($714) {
         $$41276$i = $$311$i;$d$575$i = $$lcssa339;
         while(1) {
          $715 = HEAP32[$d$575$i>>2]|0;
          $716 = (_fmt_u($715,0,$13)|0);
          $717 = ($716>>>0)>($buf$i>>>0);
          if ($717) {
           $s8$070$i = $716;
           while(1) {
            $718 = ((($s8$070$i)) + -1|0);
            HEAP8[$718>>0] = 48;
            $719 = ($718>>>0)>($buf$i>>>0);
            if ($719) {
             $s8$070$i = $718;
            } else {
             $s8$0$lcssa$i = $718;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $716;
          }
          $720 = HEAP32[$f>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if ($722) {
           $723 = ($$41276$i|0)>(9);
           $724 = $723 ? 9 : $$41276$i;
           (___fwritex($s8$0$lcssa$i,$724,$f)|0);
          }
          $725 = ((($d$575$i)) + 4|0);
          $726 = (($$41276$i) + -9)|0;
          $727 = ($725>>>0)<($z$6$i$lcssa>>>0);
          $728 = ($$41276$i|0)>(9);
          $729 = $728 & $727;
          if ($729) {
           $$41276$i = $726;$d$575$i = $725;
          } else {
           $$412$lcssa$i = $726;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $730 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$730,9,0);
       } else {
        $731 = ((($a$8$ph$i)) + 4|0);
        $z$6$$i = $$lcssa159$i ? $z$6$i$lcssa : $731;
        $732 = ($$311$i|0)>(-1);
        if ($732) {
         $733 = ($$pre$phi184$iZ2D|0)==(0);
         $$587$i = $$311$i;$d$686$i = $a$8$ph$i;
         while(1) {
          $734 = HEAP32[$d$686$i>>2]|0;
          $735 = (_fmt_u($734,0,$13)|0);
          $736 = ($735|0)==($13|0);
          if ($736) {
           HEAP8[$15>>0] = 48;
           $s9$0$i = $15;
          } else {
           $s9$0$i = $735;
          }
          $737 = ($d$686$i|0)==($a$8$ph$i|0);
          do {
           if ($737) {
            $741 = ((($s9$0$i)) + 1|0);
            $742 = HEAP32[$f>>2]|0;
            $743 = $742 & 32;
            $744 = ($743|0)==(0);
            if ($744) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $745 = ($$587$i|0)<(1);
            $or$cond29$i = $733 & $745;
            if ($or$cond29$i) {
             $s9$2$i = $741;
             break;
            }
            $746 = HEAP32[$f>>2]|0;
            $747 = $746 & 32;
            $748 = ($747|0)==(0);
            if (!($748)) {
             $s9$2$i = $741;
             break;
            }
            (___fwritex(180290,1,$f)|0);
            $s9$2$i = $741;
           } else {
            $738 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($738) {
             $s9$183$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $739 = ((($s9$183$i)) + -1|0);
             HEAP8[$739>>0] = 48;
             $740 = ($739>>>0)>($buf$i>>>0);
             if ($740) {
              $s9$183$i = $739;
             } else {
              $s9$2$i = $739;
              break;
             }
            }
           }
          } while(0);
          $749 = $s9$2$i;
          $750 = (($14) - ($749))|0;
          $751 = HEAP32[$f>>2]|0;
          $752 = $751 & 32;
          $753 = ($752|0)==(0);
          if ($753) {
           $754 = ($$587$i|0)>($750|0);
           $755 = $754 ? $750 : $$587$i;
           (___fwritex($s9$2$i,$755,$f)|0);
          }
          $756 = (($$587$i) - ($750))|0;
          $757 = ((($d$686$i)) + 4|0);
          $758 = ($757>>>0)<($z$6$$i>>>0);
          $759 = ($756|0)>(-1);
          $760 = $758 & $759;
          if ($760) {
           $$587$i = $756;$d$686$i = $757;
          } else {
           $$5$lcssa$i = $756;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $761 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$761,18,0);
        $762 = HEAP32[$f>>2]|0;
        $763 = $762 & 32;
        $764 = ($763|0)==(0);
        if (!($764)) {
         break;
        }
        $765 = $estr$2$i;
        $766 = (($8) - ($765))|0;
        (___fwritex($estr$2$i,$766,$f)|0);
       }
      } while(0);
      $767 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$688,$767);
      $768 = ($688|0)<($w$1|0);
      $w$30$i = $768 ? $w$1 : $688;
      $$0$i = $w$30$i;
     } else {
      $376 = $t$0 & 32;
      $377 = ($376|0)!=(0);
      $378 = $377 ? 180179 : 180183;
      $379 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $380 = $377 ? 180187 : 180191;
      $pl$1$i = $379 ? 0 : $pl$0$i;
      $s1$0$i = $379 ? $380 : $378;
      $381 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$381,$175);
      $382 = HEAP32[$f>>2]|0;
      $383 = $382 & 32;
      $384 = ($383|0)==(0);
      if ($384) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $386 = $$pre$i;
      } else {
       $386 = $382;
      }
      $385 = $386 & 32;
      $387 = ($385|0)==(0);
      if ($387) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $388 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$381,$388);
      $389 = ($381|0)<($w$1|0);
      $390 = $389 ? $w$1 : $381;
      $$0$i = $390;
     }
    } while(0);
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $a$2 = $fmt41;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 180143;$z$2 = $1;
   }
   }
  } while(0);
  L313: do {
   if ((label|0) == 64) {
    label = 0;
    $206 = $arg;
    $207 = $206;
    $208 = HEAP32[$207>>2]|0;
    $209 = (($206) + 4)|0;
    $210 = $209;
    $211 = HEAP32[$210>>2]|0;
    $212 = $t$1 & 32;
    $213 = ($208|0)==(0);
    $214 = ($211|0)==(0);
    $215 = $213 & $214;
    if ($215) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 180143;
     label = 77;
    } else {
     $$012$i = $1;$217 = $208;$224 = $211;
     while(1) {
      $216 = $217 & 15;
      $218 = (180127 + ($216)|0);
      $219 = HEAP8[$218>>0]|0;
      $220 = $219&255;
      $221 = $220 | $212;
      $222 = $221&255;
      $223 = ((($$012$i)) + -1|0);
      HEAP8[$223>>0] = $222;
      $225 = (_bitshift64Lshr(($217|0),($224|0),4)|0);
      $226 = tempRet0;
      $227 = ($225|0)==(0);
      $228 = ($226|0)==(0);
      $229 = $227 & $228;
      if ($229) {
       $$lcssa344 = $223;
       break;
      } else {
       $$012$i = $223;$217 = $225;$224 = $226;
      }
     }
     $230 = $arg;
     $231 = $230;
     $232 = HEAP32[$231>>2]|0;
     $233 = (($230) + 4)|0;
     $234 = $233;
     $235 = HEAP32[$234>>2]|0;
     $236 = ($232|0)==(0);
     $237 = ($235|0)==(0);
     $238 = $236 & $237;
     $239 = $fl$3 & 8;
     $240 = ($239|0)==(0);
     $or$cond17 = $240 | $238;
     if ($or$cond17) {
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 180143;
      label = 77;
     } else {
      $241 = $t$1 >> 4;
      $242 = (180143 + ($241)|0);
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $288 = (_fmt_u($286,$287,$1)|0);
    $a$0 = $288;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $320 = (_memchr($a$1,0,$p$0)|0);
    $321 = ($320|0)==(0|0);
    $322 = $320;
    $323 = $a$1;
    $324 = (($322) - ($323))|0;
    $325 = (($a$1) + ($p$0)|0);
    $z$1 = $321 ? $325 : $320;
    $p$3 = $321 ? $p$0 : $324;
    $a$2 = $a$1;$fl$6 = $175;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 180143;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $333 = HEAP32[$arg>>2]|0;
    $i$0114 = 0;$l$1113 = 0;$ws$0115 = $333;
    while(1) {
     $334 = HEAP32[$ws$0115>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0114;$l$2 = $l$1113;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4198) - ($i$0114))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0114;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0115)) + 4|0);
     $341 = (($336) + ($i$0114))|0;
     $342 = ($p$4198>>>0)>($341>>>0);
     if ($342) {
      $i$0114 = $341;$l$1113 = $336;$ws$0115 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $345 = HEAP32[$arg>>2]|0;
     $i$1125 = 0;$ws$1126 = $345;
     while(1) {
      $346 = HEAP32[$ws$1126>>2]|0;
      $347 = ($346|0)==(0);
      if ($347) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $348 = ((($ws$1126)) + 4|0);
      $349 = (_wctomb($mb,$346)|0);
      $350 = (($349) + ($i$1125))|0;
      $351 = ($350|0)>($i$0$lcssa|0);
      if ($351) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $352 = HEAP32[$f>>2]|0;
      $353 = $352 & 32;
      $354 = ($353|0)==(0);
      if ($354) {
       (___fwritex($mb,$349,$f)|0);
      }
      $355 = ($350>>>0)<($i$0$lcssa>>>0);
      if ($355) {
       $i$1125 = $350;$ws$1126 = $348;
      } else {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 98) {
   label = 0;
   $356 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa200,$356);
   $357 = ($w$1|0)>($i$0$lcssa200|0);
   $358 = $357 ? $w$1 : $i$0$lcssa200;
   $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $358;$l10n$0 = $l10n$3;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $289 = ($p$2|0)>(-1);
   $290 = $fl$4 & -65537;
   $$fl$4 = $289 ? $290 : $fl$4;
   $291 = $arg;
   $292 = $291;
   $293 = HEAP32[$292>>2]|0;
   $294 = (($291) + 4)|0;
   $295 = $294;
   $296 = HEAP32[$295>>2]|0;
   $297 = ($293|0)!=(0);
   $298 = ($296|0)!=(0);
   $299 = $297 | $298;
   $300 = ($p$2|0)!=(0);
   $or$cond = $300 | $299;
   if ($or$cond) {
    $301 = $a$0;
    $302 = (($2) - ($301))|0;
    $303 = $299&1;
    $304 = $303 ^ 1;
    $305 = (($304) + ($302))|0;
    $306 = ($p$2|0)>($305|0);
    $p$2$ = $306 ? $p$2 : $305;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $769 = $z$2;
  $770 = $a$2;
  $771 = (($769) - ($770))|0;
  $772 = ($p$5|0)<($771|0);
  $$p$5 = $772 ? $771 : $p$5;
  $773 = (($pl$2) + ($$p$5))|0;
  $774 = ($w$1|0)<($773|0);
  $w$2 = $774 ? $773 : $w$1;
  _pad($f,32,$w$2,$773,$fl$6);
  $775 = HEAP32[$f>>2]|0;
  $776 = $775 & 32;
  $777 = ($776|0)==(0);
  if ($777) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $778 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$773,$778);
  _pad($f,48,$$p$5,$771,0);
  $779 = HEAP32[$f>>2]|0;
  $780 = $779 & 32;
  $781 = ($780|0)==(0);
  if ($781) {
   (___fwritex($a$2,$771,$f)|0);
  }
  $782 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$773,$782);
  $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 L348: do {
  if ((label|0) == 245) {
   $783 = ($f|0)==(0|0);
   if ($783) {
    $784 = ($l10n$0$lcssa|0)==(0);
    if ($784) {
     $$0 = 0;
    } else {
     $i$2100 = 1;
     while(1) {
      $785 = (($nl_type) + ($i$2100<<2)|0);
      $786 = HEAP32[$785>>2]|0;
      $787 = ($786|0)==(0);
      if ($787) {
       $i$2100$lcssa = $i$2100;
       break;
      }
      $789 = (($nl_arg) + ($i$2100<<3)|0);
      _pop_arg($789,$786,$ap);
      $790 = (($i$2100) + 1)|0;
      $791 = ($790|0)<(10);
      if ($791) {
       $i$2100 = $790;
      } else {
       $$0 = 1;
       break L348;
      }
     }
     $788 = ($i$2100$lcssa|0)<(10);
     if ($788) {
      $i$398 = $i$2100$lcssa;
      while(1) {
       $794 = (($nl_type) + ($i$398<<2)|0);
       $795 = HEAP32[$794>>2]|0;
       $796 = ($795|0)==(0);
       $792 = (($i$398) + 1)|0;
       if (!($796)) {
        $$0 = -1;
        break L348;
       }
       $793 = ($792|0)<(10);
       if ($793) {
        $i$398 = $792;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _wprintf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa126 = 0, $$lcssa127 = 0, $$lcssa128 = 0, $$lcssa130 = 0, $$lobit = 0, $$lobit5 = 0, $$lobit6 = 0, $$lobit7 = 0, $$p$0 = 0, $$pre = 0, $$pre63 = 0, $$pre65 = 0, $$pre66 = 0, $$pre66$pre = 0, $$pre67 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0.0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $argpos$0 = 0, $bs$036 = 0, $bs$140 = 0, $charfmt = 0, $cnt$0 = 0;
 var $cnt$1 = 0, $cnt$1$lcssa = 0, $expanded = 0, $expanded36 = 0, $expanded38 = 0, $expanded39 = 0, $expanded40 = 0, $expanded42 = 0, $expanded43 = 0, $expanded45 = 0, $expanded46 = 0, $expanded47 = 0, $fl$016 = 0, $fl$032 = 0, $fl$1 = 0, $i$231 = 0, $i$231$lcssa = 0, $i$329 = 0, $isdigit = 0, $isdigittmp = 0;
 var $l$0 = 0, $l$1$w$1 = 0, $l$123 = 0, $l$135 = 0, $l$135$lcssa = 0, $l$239 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $or$cond = 0, $p$0 = 0, $p$1 = 0, $p$1$w$1 = 0, $s = 0, $st$0 = 0, $st$0$lcssa125 = 0, $storemerge = 0;
 var $storemerge8 = 0, $t$0 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer26 = 0, $vararg_buffer31 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr34 = 0;
 var $vararg_ptr35 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $w$0 = 0, $w$1 = 0, $wc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer31 = sp + 88|0;
 $vararg_buffer26 = sp + 72|0;
 $vararg_buffer17 = sp + 40|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $s = sp + 108|0;
 $arg = sp;
 $charfmt = sp + 112|0;
 $wc = sp + 104|0;
 HEAP32[$s>>2] = $fmt;
 $0 = ($f|0)!=(0|0);
 $cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $1 = ($cnt$0|0)>(-1);
  do {
   if ($1) {
    $2 = (2147483647 - ($cnt$0))|0;
    $3 = ($l$0|0)>($2|0);
    if (!($3)) {
     $8 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $8;
     break;
    }
    $4 = HEAP32[$f>>2]|0;
    $5 = $4 & 32;
    $6 = ($5|0)==(0);
    if ($6) {
     $7 = (___errno_location()|0);
     HEAP32[$7>>2] = 75;
     $cnt$1 = -1;
    } else {
     $cnt$1 = -1;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $9 = HEAP32[$s>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if ($11) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 82;
   break;
  } else {
   $12 = $10;$14 = $9;
  }
  L10: while(1) {
   switch ($12|0) {
   case 37: case 0:  {
    $$lcssa = $14;
    break L10;
    break;
   }
   default: {
   }
   }
   $13 = ((($14)) + 4|0);
   HEAP32[$s>>2] = $13;
   $$pre = HEAP32[$13>>2]|0;
   $12 = $$pre;$14 = $13;
  }
  $15 = (_wcsspn($$lcssa,16104)|0);
  $16 = $15 >>> 1;
  $17 = HEAP32[$s>>2]|0;
  $18 = (($17) + ($16<<2)|0);
  $19 = $16 << 1;
  $20 = (($17) + ($19<<2)|0);
  HEAP32[$s>>2] = $20;
  $21 = $18;
  $22 = $9;
  $23 = (($21) - ($22))|0;
  $24 = $23 >> 2;
  if ($0) {
   _out($f,$9,$24);
  }
  $25 = ($24|0)==(0);
  if (!($25)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$l$0 = $24;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $26 = HEAP32[$s>>2]|0;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (_iswdigit($28)|0);
  $30 = ($29|0)==(0);
  $$pre63 = HEAP32[$s>>2]|0;
  if ($30) {
   label = 16;
  } else {
   $31 = ((($$pre63)) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(36);
   if ($33) {
    $34 = ((($$pre63)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (($35) + -48)|0;
    $37 = ((($$pre63)) + 12|0);
    $argpos$0 = $36;$l10n$1 = 1;$storemerge = $37;
   } else {
    label = 16;
   }
  }
  if ((label|0) == 16) {
   label = 0;
   $38 = ((($$pre63)) + 4|0);
   $argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
  }
  HEAP32[$s>>2] = $storemerge;
  $39 = HEAP32[$storemerge>>2]|0;
  $40 = $39 & -32;
  $41 = ($40|0)==(32);
  L24: do {
   if ($41) {
    $43 = $39;$49 = $storemerge;$fl$032 = 0;
    while(1) {
     $42 = (($43) + -32)|0;
     $44 = 1 << $42;
     $45 = $44 & 75913;
     $46 = ($45|0)==(0);
     if ($46) {
      $53 = $43;$56 = $49;$fl$016 = $fl$032;
      break L24;
     }
     $47 = $44 | $fl$032;
     $48 = ((($49)) + 4|0);
     HEAP32[$s>>2] = $48;
     $50 = HEAP32[$48>>2]|0;
     $51 = $50 & -32;
     $52 = ($51|0)==(32);
     if ($52) {
      $43 = $50;$49 = $48;$fl$032 = $47;
     } else {
      $53 = $50;$56 = $48;$fl$016 = $47;
      break;
     }
    }
   } else {
    $53 = $39;$56 = $storemerge;$fl$016 = 0;
   }
  } while(0);
  $54 = ($53|0)==(42);
  if ($54) {
   $55 = ((($56)) + 4|0);
   $57 = HEAP32[$55>>2]|0;
   $58 = (_iswdigit($57)|0);
   $59 = ($58|0)==(0);
   if ($59) {
    label = 24;
   } else {
    $60 = HEAP32[$s>>2]|0;
    $61 = ((($60)) + 8|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)==(36);
    if ($63) {
     $64 = ((($60)) + 4|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (($65) + -48)|0;
     $67 = (($nl_type) + ($66<<2)|0);
     HEAP32[$67>>2] = 10;
     $68 = HEAP32[$64>>2]|0;
     $69 = (($68) + -48)|0;
     $70 = (($nl_arg) + ($69<<3)|0);
     $71 = $70;
     $72 = $71;
     $73 = HEAP32[$72>>2]|0;
     $74 = (($71) + 4)|0;
     $75 = $74;
     $76 = HEAP32[$75>>2]|0;
     $77 = ((($60)) + 12|0);
     $l10n$2 = 1;$storemerge8 = $77;$w$0 = $73;
    } else {
     label = 24;
    }
   }
   if ((label|0) == 24) {
    label = 0;
    $78 = ($l10n$1|0)==(0);
    if (!($78)) {
     $$0 = -1;
     break;
    }
    if ($0) {
     $arglist_current = HEAP32[$ap>>2]|0;
     $79 = $arglist_current;
     $80 = ((0) + 4|0);
     $expanded36 = $80;
     $expanded = (($expanded36) - 1)|0;
     $81 = (($79) + ($expanded))|0;
     $82 = ((0) + 4|0);
     $expanded40 = $82;
     $expanded39 = (($expanded40) - 1)|0;
     $expanded38 = $expanded39 ^ -1;
     $83 = $81 & $expanded38;
     $84 = $83;
     $85 = HEAP32[$84>>2]|0;
     $arglist_next = ((($84)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $271 = $85;
    } else {
     $271 = 0;
    }
    $86 = HEAP32[$s>>2]|0;
    $87 = ((($86)) + 4|0);
    $l10n$2 = 0;$storemerge8 = $87;$w$0 = $271;
   }
   HEAP32[$s>>2] = $storemerge8;
   $88 = ($w$0|0)<(0);
   if ($88) {
    $89 = $fl$016 | 8192;
    $90 = (0 - ($w$0))|0;
    $94 = $storemerge8;$fl$1 = $89;$l10n$3 = $l10n$2;$w$1 = $90;
   } else {
    $94 = $storemerge8;$fl$1 = $fl$016;$l10n$3 = $l10n$2;$w$1 = $w$0;
   }
  } else {
   $91 = (_getint($s)|0);
   $92 = ($91|0)<(0);
   if ($92) {
    $$0 = -1;
    break;
   }
   $$pre65 = HEAP32[$s>>2]|0;
   $94 = $$pre65;$fl$1 = $fl$016;$l10n$3 = $l10n$1;$w$1 = $91;
  }
  $93 = HEAP32[$94>>2]|0;
  $95 = ($93|0)==(46);
  do {
   if ($95) {
    $96 = ((($94)) + 4|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(42);
    if (!($98)) {
     $123 = ((($94)) + 4|0);
     HEAP32[$s>>2] = $123;
     $124 = (_getint($s)|0);
     $$pre66$pre = HEAP32[$s>>2]|0;
     $$pre66 = $$pre66$pre;$p$0 = $124;
     break;
    }
    $99 = ((($94)) + 8|0);
    $100 = HEAP32[$99>>2]|0;
    $isdigittmp = (($100) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if ($isdigit) {
     $101 = ((($94)) + 12|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = ($102|0)==(36);
     if ($103) {
      $104 = (($nl_type) + ($isdigittmp<<2)|0);
      HEAP32[$104>>2] = 10;
      $105 = HEAP32[$99>>2]|0;
      $106 = (($105) + -48)|0;
      $107 = (($nl_arg) + ($106<<3)|0);
      $108 = $107;
      $109 = $108;
      $110 = HEAP32[$109>>2]|0;
      $111 = (($108) + 4)|0;
      $112 = $111;
      $113 = HEAP32[$112>>2]|0;
      $114 = ((($94)) + 16|0);
      HEAP32[$s>>2] = $114;
      $$pre66 = $114;$p$0 = $110;
      break;
     }
    }
    $115 = ($l10n$3|0)==(0);
    if (!($115)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $116 = $arglist_current2;
     $117 = ((0) + 4|0);
     $expanded43 = $117;
     $expanded42 = (($expanded43) - 1)|0;
     $118 = (($116) + ($expanded42))|0;
     $119 = ((0) + 4|0);
     $expanded47 = $119;
     $expanded46 = (($expanded47) - 1)|0;
     $expanded45 = $expanded46 ^ -1;
     $120 = $118 & $expanded45;
     $121 = $120;
     $122 = HEAP32[$121>>2]|0;
     $arglist_next3 = ((($121)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $272 = $122;
    } else {
     $272 = 0;
    }
    HEAP32[$s>>2] = $99;
    $$pre66 = $99;$p$0 = $272;
   } else {
    $$pre66 = $94;$p$0 = -1;
   }
  } while(0);
  $126 = $$pre66;$st$0 = 0;
  while(1) {
   $125 = HEAP32[$126>>2]|0;
   $127 = (($125) + -65)|0;
   $128 = ($127>>>0)>(57);
   if ($128) {
    $$0 = -1;
    break L1;
   }
   $129 = ((($126)) + 4|0);
   HEAP32[$s>>2] = $129;
   $130 = ((179140 + (($st$0*58)|0)|0) + ($127)|0);
   $131 = HEAP8[$130>>0]|0;
   $132 = $131&255;
   $133 = (($132) + -1)|0;
   $134 = ($133>>>0)<(8);
   if ($134) {
    $126 = $129;$st$0 = $132;
   } else {
    $$lcssa126 = $129;$$lcssa127 = $131;$$lcssa128 = $132;$st$0$lcssa125 = $st$0;
    break;
   }
  }
  $135 = ($$lcssa127<<24>>24)==(0);
  if ($135) {
   $$0 = -1;
   break;
  }
  $136 = ($$lcssa127<<24>>24)==(19);
  $137 = ($argpos$0|0)>(-1);
  do {
   if ($136) {
    if ($137) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($137) {
     $138 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$138>>2] = $$lcssa128;
     $139 = (($nl_arg) + ($argpos$0<<3)|0);
     $140 = $139;
     $141 = $140;
     $142 = HEAP32[$141>>2]|0;
     $143 = (($140) + 4)|0;
     $144 = $143;
     $145 = HEAP32[$144>>2]|0;
     $146 = $arg;
     $147 = $146;
     HEAP32[$147>>2] = $142;
     $148 = (($146) + 4)|0;
     $149 = $148;
     HEAP32[$149>>2] = $145;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg474($arg,$$lcssa128,$ap);
    $$pre67 = HEAP32[$s>>2]|0;
    $151 = $$pre67;
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if ($0) {
    $151 = $$lcssa126;
   } else {
    $cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $150 = ((($151)) + -4|0);
  $152 = HEAP32[$150>>2]|0;
  $153 = ($st$0$lcssa125|0)!=(0);
  $154 = $152 & 15;
  $155 = ($154|0)==(3);
  $or$cond = $153 & $155;
  $156 = $152 & -33;
  $t$0 = $or$cond ? $156 : $152;
  switch ($t$0|0) {
  case 110:  {
   switch ($st$0$lcssa125|0) {
   case 0:  {
    $157 = HEAP32[$arg>>2]|0;
    HEAP32[$157>>2] = $cnt$1;
    $cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 1:  {
    $158 = HEAP32[$arg>>2]|0;
    HEAP32[$158>>2] = $cnt$1;
    $cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 2:  {
    $159 = ($cnt$1|0)<(0);
    $160 = $159 << 31 >> 31;
    $161 = HEAP32[$arg>>2]|0;
    $162 = $161;
    $163 = $162;
    HEAP32[$163>>2] = $cnt$1;
    $164 = (($162) + 4)|0;
    $165 = $164;
    HEAP32[$165>>2] = $160;
    $cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 3:  {
    $166 = $cnt$1&65535;
    $167 = HEAP32[$arg>>2]|0;
    HEAP16[$167>>1] = $166;
    $cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 4:  {
    $168 = $cnt$1&255;
    $169 = HEAP32[$arg>>2]|0;
    HEAP8[$169>>0] = $168;
    $cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 6:  {
    $170 = HEAP32[$arg>>2]|0;
    HEAP32[$170>>2] = $cnt$1;
    $cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 7:  {
    $171 = ($cnt$1|0)<(0);
    $172 = $171 << 31 >> 31;
    $173 = HEAP32[$arg>>2]|0;
    $174 = $173;
    $175 = $174;
    HEAP32[$175>>2] = $cnt$1;
    $176 = (($174) + 4)|0;
    $177 = $176;
    HEAP32[$177>>2] = $172;
    $cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
    continue L1;
   }
   }
   break;
  }
  case 99:  {
   $178 = $arg;
   $179 = $178;
   $180 = HEAP32[$179>>2]|0;
   $181 = (($178) + 4)|0;
   $182 = $181;
   $183 = HEAP32[$182>>2]|0;
   $184 = (_btowc($180)|0);
   (_fputwc($184,$f)|0);
   $cnt$0 = $cnt$1;$l$0 = 1;$l10n$0 = $l10n$3;
   continue L1;
   break;
  }
  case 67:  {
   $185 = $arg;
   $186 = $185;
   $187 = HEAP32[$186>>2]|0;
   $188 = (($185) + 4)|0;
   $189 = $188;
   $190 = HEAP32[$189>>2]|0;
   (_fputwc($187,$f)|0);
   $cnt$0 = $cnt$1;$l$0 = 1;$l10n$0 = $l10n$3;
   continue L1;
   break;
  }
  case 83:  {
   $191 = HEAP32[$arg>>2]|0;
   $192 = (_wmemchr($191,0,$p$0)|0);
   $193 = ($192|0)==(0|0);
   $194 = $192;
   $195 = $191;
   $196 = (($194) - ($195))|0;
   $197 = $196 >> 2;
   $p$1 = $193 ? $p$0 : $197;
   $198 = ($w$1|0)<($p$1|0);
   $p$1$w$1 = $198 ? $p$1 : $w$1;
   $199 = $fl$1 & 8192;
   $200 = ($199|0)==(0);
   if ($200) {
    $201 = (($p$1$w$1) - ($p$1))|0;
    HEAP32[$vararg_buffer>>2] = $201;
    $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = 180292;
    (_fprintf($f,179604,$vararg_buffer)|0);
    _out($f,$191,$p$1);
    $cnt$0 = $cnt$1;$l$0 = $p$1$w$1;$l10n$0 = $l10n$3;
    continue L1;
   } else {
    _out($f,$191,$p$1);
    $202 = (($p$1$w$1) - ($p$1))|0;
    HEAP32[$vararg_buffer5>>2] = $202;
    $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
    HEAP32[$vararg_ptr8>>2] = 180292;
    (_fprintf($f,179604,$vararg_buffer5)|0);
    $cnt$0 = $cnt$1;$l$0 = $p$1$w$1;$l10n$0 = $l10n$3;
    continue L1;
   }
   break;
  }
  case 115:  {
   $203 = ($p$0|0)<(0);
   $$p$0 = $203 ? 2147483647 : $p$0;
   $204 = ($$p$0|0)>(0);
   L95: do {
    if ($204) {
     $205 = HEAP32[$arg>>2]|0;
     $bs$036 = $205;$l$135 = 0;
     while(1) {
      $206 = (_mbtowc($wc,$bs$036,4)|0);
      $207 = ($206|0)>(0);
      if (!($207)) {
       $$lcssa130 = $206;$l$135$lcssa = $l$135;
       break;
      }
      $208 = (($bs$036) + ($206)|0);
      $209 = (($l$135) + 1)|0;
      $210 = ($209|0)<($$p$0|0);
      if ($210) {
       $bs$036 = $208;$l$135 = $209;
      } else {
       $l$123 = $209;
       break L95;
      }
     }
     $211 = ($$lcssa130|0)<(0);
     if ($211) {
      $$0 = -1;
      break L1;
     } else {
      $l$123 = $l$135$lcssa;
     }
    } else {
     $l$123 = 0;
    }
   } while(0);
   $212 = ($w$1|0)<($l$123|0);
   $l$1$w$1 = $212 ? $l$123 : $w$1;
   $213 = $fl$1 & 8192;
   $214 = ($213|0)!=(0);
   if (!($214)) {
    $215 = (($l$1$w$1) - ($l$123))|0;
    HEAP32[$vararg_buffer9>>2] = $215;
    $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
    HEAP32[$vararg_ptr12>>2] = 180292;
    (_fprintf($f,179604,$vararg_buffer9)|0);
   }
   $216 = ($l$123|0)==(0);
   if (!($216)) {
    $217 = HEAP32[$arg>>2]|0;
    $bs$140 = $217;$l$239 = $l$123;
    while(1) {
     $218 = (($l$239) + -1)|0;
     $219 = (_mbtowc($wc,$bs$140,4)|0);
     $220 = (($bs$140) + ($219)|0);
     $221 = HEAP32[$wc>>2]|0;
     (_fputwc($221,$f)|0);
     $222 = ($218|0)==(0);
     if ($222) {
      break;
     } else {
      $bs$140 = $220;$l$239 = $218;
     }
    }
   }
   if (!($214)) {
    $cnt$0 = $cnt$1;$l$0 = $l$1$w$1;$l10n$0 = $l10n$3;
    continue L1;
   }
   $223 = (($l$1$w$1) - ($l$123))|0;
   HEAP32[$vararg_buffer13>>2] = $223;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = 180292;
   (_fprintf($f,179604,$vararg_buffer13)|0);
   $cnt$0 = $cnt$1;$l$0 = $l$1$w$1;$l10n$0 = $l10n$3;
   continue L1;
   break;
  }
  default: {
   $224 = $fl$1 >>> 3;
   $$lobit = $224 & 1;
   $225 = $$lobit ^ 1;
   $226 = (179609 + ($225)|0);
   $227 = $fl$1 >>> 11;
   $$lobit5 = $227 & 1;
   $228 = $$lobit5 ^ 1;
   $229 = (179611 + ($228)|0);
   $230 = $fl$1 >>> 13;
   $$lobit6 = $230 & 1;
   $231 = $$lobit6 ^ 1;
   $232 = (179613 + ($231)|0);
   $233 = $fl$1 & 1;
   $234 = $233 ^ 1;
   $235 = (179615 + ($234)|0);
   $236 = $fl$1 >>> 16;
   $$lobit7 = $236 & 1;
   $237 = $$lobit7 ^ 1;
   $238 = (179617 + ($237)|0);
   $239 = $t$0 | 32;
   $240 = (($239) + -97)|0;
   $241 = (179619 + ($240)|0);
   $242 = HEAP8[$241>>0]|0;
   $243 = $242 << 24 >> 24;
   HEAP32[$vararg_buffer17>>2] = $226;
   $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
   HEAP32[$vararg_ptr20>>2] = $229;
   $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
   HEAP32[$vararg_ptr21>>2] = $232;
   $vararg_ptr22 = ((($vararg_buffer17)) + 12|0);
   HEAP32[$vararg_ptr22>>2] = $235;
   $vararg_ptr23 = ((($vararg_buffer17)) + 16|0);
   HEAP32[$vararg_ptr23>>2] = $238;
   $vararg_ptr24 = ((($vararg_buffer17)) + 20|0);
   HEAP32[$vararg_ptr24>>2] = $243;
   $vararg_ptr25 = ((($vararg_buffer17)) + 24|0);
   HEAP32[$vararg_ptr25>>2] = $t$0;
   (_snprintf($charfmt,16,179643,$vararg_buffer17)|0);
   switch ($239|0) {
   case 103: case 102: case 101: case 97:  {
    $244 = +HEAPF64[$arg>>3];
    HEAP32[$vararg_buffer26>>2] = $w$1;
    $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
    HEAP32[$vararg_ptr29>>2] = $p$0;
    $vararg_ptr30 = ((($vararg_buffer26)) + 8|0);
    HEAPF64[$vararg_ptr30>>3] = $244;
    $245 = (_fprintf($f,$charfmt,$vararg_buffer26)|0);
    $cnt$0 = $cnt$1;$l$0 = $245;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 112: case 120: case 117: case 111: case 105: case 100:  {
    $246 = $arg;
    $247 = $246;
    $248 = HEAP32[$247>>2]|0;
    $249 = (($246) + 4)|0;
    $250 = $249;
    $251 = HEAP32[$250>>2]|0;
    HEAP32[$vararg_buffer31>>2] = $w$1;
    $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
    HEAP32[$vararg_ptr34>>2] = $p$0;
    $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
    $252 = $vararg_ptr35;
    $253 = $252;
    HEAP32[$253>>2] = $248;
    $254 = (($252) + 4)|0;
    $255 = $254;
    HEAP32[$255>>2] = $251;
    $256 = (_fprintf($f,$charfmt,$vararg_buffer31)|0);
    $cnt$0 = $cnt$1;$l$0 = $256;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
    continue L1;
   }
   }
  }
  }
 }
 L111: do {
  if ((label|0) == 82) {
   $257 = ($f|0)==(0|0);
   if ($257) {
    $258 = ($l10n$0$lcssa|0)==(0);
    if ($258) {
     $$0 = 0;
    } else {
     $i$231 = 1;
     while(1) {
      $259 = (($nl_type) + ($i$231<<2)|0);
      $260 = HEAP32[$259>>2]|0;
      $261 = ($260|0)==(0);
      if ($261) {
       $i$231$lcssa = $i$231;
       break;
      }
      $263 = (($nl_arg) + ($i$231<<3)|0);
      _pop_arg474($263,$260,$ap);
      $264 = (($i$231) + 1)|0;
      $265 = ($264|0)<(10);
      if ($265) {
       $i$231 = $264;
      } else {
       $$0 = 1;
       break L111;
      }
     }
     $262 = ($i$231$lcssa|0)<(10);
     if ($262) {
      $i$329 = $i$231$lcssa;
      while(1) {
       $268 = (($nl_type) + ($i$329<<2)|0);
       $269 = HEAP32[$268>>2]|0;
       $270 = ($269|0)==(0);
       $266 = (($i$329) + 1)|0;
       if (!($270)) {
        $$0 = -1;
        break L111;
       }
       $267 = ($266|0)<(10);
       if ($267) {
        $i$329 = $266;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 return ($0|0);
}
function _sw_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$0 = 0, $$026 = 0, $$035 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$1 = 0, $or$cond = 0, $or$cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($s|0);
 if ($4) {
  label = 3;
 } else {
  $5 = ((($f)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6;
  $8 = $3;
  $9 = (($7) - ($8))|0;
  $10 = (_sw_write($f,$3,$9)|0);
  $11 = ($10|0)==(-1);
  if ($11) {
   $$0 = -1;
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $12 = ((($1)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0);
  $15 = ($l|0)!=(0);
  $or$cond4 = $15 & $14;
  L5: do {
   if ($or$cond4) {
    $$pre = HEAP32[$1>>2]|0;
    $$026 = $s;$$035 = $l;$16 = $$pre;
    while(1) {
     $17 = (_mbtowc($16,$$026,$$035)|0);
     $18 = ($17|0)>(-1);
     if (!($18)) {
      $i$1 = $17;
      break L5;
     }
     $19 = (($$026) + ($17)|0);
     $20 = (($$035) - ($17))|0;
     $21 = HEAP32[$12>>2]|0;
     $22 = (($21) + -1)|0;
     HEAP32[$12>>2] = $22;
     $23 = HEAP32[$1>>2]|0;
     $24 = ((($23)) + 4|0);
     HEAP32[$1>>2] = $24;
     $25 = ($22|0)!=(0);
     $26 = ($$035|0)!=($17|0);
     $or$cond = $26 & $25;
     if ($or$cond) {
      $$026 = $19;$$035 = $20;$16 = $24;
     } else {
      $i$1 = $17;
      break;
     }
    }
   } else {
    $i$1 = 0;
   }
  } while(0);
  $27 = HEAP32[$1>>2]|0;
  HEAP32[$27>>2] = 0;
  $28 = ($i$1|0)<(0);
  $29 = $28 ? $i$1 : $l;
  $$0 = $29;
 }
 return ($$0|0);
}
function _wstring_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $src = sp;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$src>>2] = $1;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $$0 = 0;
  } else {
   $3 = ((($f)) + 44|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ((($f)) + 48|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (_wcsrtombs($4,$src,$6,0)|0);
   $8 = ($7|0)==(-1);
   if ($8) {
    $9 = ((($f)) + 8|0);
    HEAP32[$9>>2] = 0;
    $10 = ((($f)) + 4|0);
    HEAP32[$10>>2] = 0;
    $$0 = 0;
    break;
   }
   $11 = HEAP32[$3>>2]|0;
   $12 = ((($f)) + 4|0);
   HEAP32[$12>>2] = $11;
   $13 = $11;
   $14 = (($13) + ($7)|0);
   $15 = ((($f)) + 8|0);
   HEAP32[$15>>2] = $14;
   $16 = HEAP32[$src>>2]|0;
   HEAP32[$0>>2] = $16;
   $17 = ($len|0)!=(0);
   $18 = ($7|0)!=(0);
   $or$cond = $17 & $18;
   if ($or$cond) {
    $19 = ((($13)) + 1|0);
    HEAP32[$12>>2] = $19;
    $20 = HEAP8[$13>>0]|0;
    HEAP8[$buf>>0] = $20;
    $$0 = 1;
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _close_file($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 if (!($0)) {
  $1 = ((($f)) + 76|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)>(-1);
  if ($3) {
   (___lockfile($f)|0);
  }
  $4 = ((($f)) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($f)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5>>>0)>($7>>>0);
  if ($8) {
   $9 = ((($f)) + 36|0);
   $10 = HEAP32[$9>>2]|0;
   (FUNCTION_TABLE_iiii[$10 & 63]($f,0,0)|0);
  }
  $11 = ((($f)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($f)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($12>>>0)<($14>>>0);
  if ($15) {
   $16 = ((($f)) + 40|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $12;
   $19 = $14;
   $20 = (($18) - ($19))|0;
   (FUNCTION_TABLE_iiii[$17 & 63]($f,$20,1)|0);
  }
 }
 return;
}
function _cleanup521($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _cleanup526($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _sift($head,$width,$cmp,$pshift,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pshift = $pshift|0;
 $lp = $lp|0;
 var $$0$be = 0, $$01$be = 0, $$012 = 0, $$03 = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa = 0, $i$04 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = ($pshift|0)>(1);
 L1: do {
  if ($0) {
   $1 = (0 - ($width))|0;
   $$012 = $pshift;$$03 = $head;$7 = $head;$i$04 = 1;
   while(1) {
    $2 = (($$03) + ($1)|0);
    $3 = (($$012) + -2)|0;
    $4 = (($lp) + ($3<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $sum = (($5) + ($width))|0;
    $$sum = (0 - ($sum))|0;
    $6 = (($$03) + ($$sum)|0);
    $8 = (FUNCTION_TABLE_iii[$cmp & 63]($7,$6)|0);
    $9 = ($8|0)>(-1);
    if ($9) {
     $10 = (FUNCTION_TABLE_iii[$cmp & 63]($7,$2)|0);
     $11 = ($10|0)>(-1);
     if ($11) {
      $i$0$lcssa = $i$04;
      break L1;
     }
    }
    $12 = (FUNCTION_TABLE_iii[$cmp & 63]($6,$2)|0);
    $13 = ($12|0)>(-1);
    $14 = (($i$04) + 1)|0;
    $15 = (($ar) + ($i$04<<2)|0);
    if ($13) {
     HEAP32[$15>>2] = $6;
     $16 = (($$012) + -1)|0;
     $$0$be = $6;$$01$be = $16;
    } else {
     HEAP32[$15>>2] = $2;
     $$0$be = $2;$$01$be = $3;
    }
    $17 = ($$01$be|0)>(1);
    if (!($17)) {
     $i$0$lcssa = $14;
     break L1;
    }
    $$pre = HEAP32[$ar>>2]|0;
    $$012 = $$01$be;$$03 = $$0$be;$7 = $$pre;$i$04 = $14;
   }
  } else {
   $i$0$lcssa = 1;
  }
 } while(0);
 _cycle($width,$ar,$i$0$lcssa);
 STACKTOP = sp;return;
}
function _trinkle($head,$width,$cmp,$pp,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp = $pp|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$0$i = 0, $$0$lcssa = 0, $$0$lcssa49 = 0, $$01162 = 0, $$01162$phi = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$lcssa51 = 0, $$02964 = 0, $$03$lcssa = 0, $$03865 = 0, $$lcssa = 0, $$lcssa75 = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa = 0, $i$0$lcssa50 = 0, $i$01063 = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $phitmp = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ar = sp;
 $0 = HEAP32[$pp>>2]|0;
 $1 = ((($pp)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$ar>>2] = $head;
 $3 = (0 - ($width))|0;
 $4 = ($0|0)!=(1);
 $5 = ($2|0)!=(0);
 $6 = $5 | $4;
 L1: do {
  if ($6) {
   $7 = (($lp) + ($pshift<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (0 - ($8))|0;
   $10 = (($head) + ($9)|0);
   $11 = (FUNCTION_TABLE_iii[$cmp & 63]($10,$head)|0);
   $12 = ($11|0)<(1);
   if ($12) {
    $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
    label = 19;
   } else {
    $phitmp = ($trusty|0)==(0);
    $$01162 = $head;$$02964 = $pshift;$$03865 = $phitmp;$18 = $10;$27 = $0;$36 = $2;$i$01063 = 1;
    while(1) {
     $13 = ($$02964|0)>(1);
     $or$cond = $$03865 & $13;
     if ($or$cond) {
      $14 = (($$01162) + ($3)|0);
      $15 = (($$02964) + -2)|0;
      $16 = (($lp) + ($15<<2)|0);
      $17 = HEAP32[$16>>2]|0;
      $19 = (FUNCTION_TABLE_iii[$cmp & 63]($14,$18)|0);
      $20 = ($19|0)>(-1);
      if ($20) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       label = 20;
       break L1;
      }
      $sum = (($17) + ($width))|0;
      $$sum = (0 - ($sum))|0;
      $21 = (($$01162) + ($$sum)|0);
      $22 = (FUNCTION_TABLE_iii[$cmp & 63]($21,$18)|0);
      $23 = ($22|0)>(-1);
      if ($23) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       label = 20;
       break L1;
      }
     }
     $24 = (($i$01063) + 1)|0;
     $25 = (($ar) + ($i$01063<<2)|0);
     HEAP32[$25>>2] = $18;
     $26 = (($27) + -1)|0;
     $28 = ($26|0)==(0);
     do {
      if ($28) {
       $49 = 32;
       label = 16;
      } else {
       $29 = $26 & 1;
       $30 = ($29|0)==(0);
       if ($30) {
        $$02$i$i = $26;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $31 = (($nTrailingZeros$03$i$i) + 1)|0;
         $32 = $$02$i$i >>> 1;
         $33 = $32 & 1;
         $34 = ($33|0)==(0);
         if ($34) {
          $$02$i$i = $32;$nTrailingZeros$03$i$i = $31;
         } else {
          $$lcssa = $31;
          break;
         }
        }
        $35 = ($$lcssa|0)==(0);
        if ($35) {
         label = 11;
        } else {
         $46 = $$lcssa;
        }
       } else {
        label = 11;
       }
       if ((label|0) == 11) {
        label = 0;
        $37 = ($36|0)==(0);
        if ($37) {
         $49 = 64;
         label = 16;
         break;
        }
        $38 = $36 & 1;
        $39 = ($38|0)==(0);
        if ($39) {
         $$02$i3$i = $36;$nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i = 0;$51 = $27;$54 = $36;$58 = 0;
         break;
        }
        while(1) {
         $40 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $41 = $$02$i3$i >>> 1;
         $42 = $41 & 1;
         $43 = ($42|0)==(0);
         if ($43) {
          $$02$i3$i = $41;$nTrailingZeros$03$i2$i = $40;
         } else {
          $$lcssa75 = $40;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
          break;
         }
        }
        $44 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
        $45 = ($$lcssa75|0)==(0);
        if ($45) {
         $$0$i = 0;$51 = $27;$54 = $36;$58 = 0;
         break;
        } else {
         $46 = $44;
        }
       }
       $47 = ($46>>>0)>(31);
       if ($47) {
        $49 = $46;
        label = 16;
       } else {
        $$0$i = $46;$51 = $27;$54 = $36;$58 = $46;
       }
      }
     } while(0);
     if ((label|0) == 16) {
      label = 0;
      $48 = (($49) + -32)|0;
      $$0$i = $48;$51 = $36;$54 = 0;$58 = $49;
     }
     $50 = $51 >>> $$0$i;
     $52 = (32 - ($$0$i))|0;
     $53 = $54 << $52;
     $55 = $53 | $50;
     $56 = $54 >>> $$0$i;
     $57 = (($58) + ($$02964))|0;
     $59 = ($55|0)!=(1);
     $60 = ($56|0)!=(0);
     $61 = $60 | $59;
     if (!($61)) {
      $$0$lcssa49 = $18;$$02$lcssa51 = $57;$i$0$lcssa50 = $24;
      label = 20;
      break L1;
     }
     $$pre = HEAP32[$ar>>2]|0;
     $62 = (($lp) + ($57<<2)|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (0 - ($63))|0;
     $65 = (($18) + ($64)|0);
     $66 = (FUNCTION_TABLE_iii[$cmp & 63]($65,$$pre)|0);
     $67 = ($66|0)<(1);
     if ($67) {
      $$0$lcssa = $18;$$02$lcssa = $57;$$03$lcssa = 0;$i$0$lcssa = $24;
      label = 19;
      break;
     } else {
      $$01162$phi = $18;$$02964 = $57;$$03865 = 1;$18 = $65;$27 = $55;$36 = $56;$i$01063 = $24;$$01162 = $$01162$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
   label = 19;
  }
 } while(0);
 if ((label|0) == 19) {
  $68 = ($$03$lcssa|0)==(0);
  if ($68) {
   $$0$lcssa49 = $$0$lcssa;$$02$lcssa51 = $$02$lcssa;$i$0$lcssa50 = $i$0$lcssa;
   label = 20;
  }
 }
 if ((label|0) == 20) {
  _cycle($width,$ar,$i$0$lcssa50);
  _sift($$0$lcssa49,$width,$cmp,$$02$lcssa51,$lp);
 }
 STACKTOP = sp;return;
}
function _strtox($s,$p,$prec) {
 $s = $s|0;
 $p = $p|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f)) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = ((($f)) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f,0);
 $4 = (+___floatscan($f,$prec,1));
 $5 = ((($f)) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if (!($13)) {
  $14 = ($12|0)!=(0);
  $15 = (($s) + ($12)|0);
  $16 = $14 ? $15 : $s;
  HEAP32[$p>>2] = $16;
 }
 STACKTOP = sp;return (+$4);
}
function _strtox555($s,$p,$base,$0,$1) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 HEAP32[$f>>2] = 0;
 $2 = ((($f)) + 4|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 44|0);
 HEAP32[$3>>2] = $s;
 $4 = ($s|0)<(0|0);
 $5 = ((($s)) + 2147483647|0);
 $$sink = $4 ? (-1) : $5;
 $6 = ((($f)) + 8|0);
 HEAP32[$6>>2] = $$sink;
 $7 = ((($f)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($f,0);
 $8 = (___intscan($f,$base,1,$0,$1)|0);
 $9 = tempRet0;
 $10 = ($p|0)==(0|0);
 if (!($10)) {
  $11 = ((($f)) + 108|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = HEAP32[$6>>2]|0;
  $15 = $13;
  $16 = $14;
  $17 = (($15) + ($12))|0;
  $18 = (($17) - ($16))|0;
  $19 = (($s) + ($18)|0);
  HEAP32[$p>>2] = $19;
 }
 tempRet0 = ($9);
 STACKTOP = sp;return ($8|0);
}
function _wcstox($s,$p,$prec) {
 $s = $s|0;
 $p = $p|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $f = 0, $t$0 = 0, $t$0$lcssa = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 112|0;
 $f = sp;
 $0 = ((($f)) + 8|0);
 $1 = ((($f)) + 4|0);
 $2 = ((($buf)) + 4|0);
 $3 = ((($f)) + 44|0);
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$3>>2] = $2;
 $4 = ((($f)) + 48|0);
 HEAP32[$4>>2] = 60;
 $5 = ((($f)) + 76|0);
 HEAP32[$5>>2] = -1;
 $6 = ((($f)) + 32|0);
 HEAP32[$6>>2] = 35;
 $t$0 = $s;
 while(1) {
  $7 = HEAP32[$t$0>>2]|0;
  $8 = (_iswspace($7)|0);
  $9 = ($8|0)==(0);
  $10 = ((($t$0)) + 4|0);
  if ($9) {
   $t$0$lcssa = $t$0;
   break;
  } else {
   $t$0 = $10;
  }
 }
 $11 = ((($f)) + 84|0);
 HEAP32[$11>>2] = $t$0$lcssa;
 ___shlim($f,0);
 $12 = (+___floatscan($f,$prec,1));
 $13 = ($p|0)==(0|0);
 if (!($13)) {
  $14 = ((($f)) + 108|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$1>>2]|0;
  $17 = HEAP32[$0>>2]|0;
  $18 = $16;
  $19 = $17;
  $20 = (($18) - ($19))|0;
  $21 = (($20) + ($15))|0;
  $22 = ($21|0)==(0);
  $23 = (($t$0$lcssa) + ($21<<2)|0);
  $24 = $22 ? $s : $23;
  HEAP32[$p>>2] = $24;
 }
 STACKTOP = sp;return (+$12);
}
function _wcstox558($s,$p,$base,$0,$1) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $f = 0, $t$0 = 0, $t$0$lcssa = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 112|0;
 $f = sp;
 $2 = ((($f)) + 8|0);
 $3 = ((($f)) + 4|0);
 $4 = ((($buf)) + 4|0);
 $5 = ((($f)) + 44|0);
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$5>>2] = $4;
 $6 = ((($f)) + 48|0);
 HEAP32[$6>>2] = 60;
 $7 = ((($f)) + 76|0);
 HEAP32[$7>>2] = -1;
 $8 = ((($f)) + 32|0);
 HEAP32[$8>>2] = 36;
 $t$0 = $s;
 while(1) {
  $9 = HEAP32[$t$0>>2]|0;
  $10 = (_iswspace($9)|0);
  $11 = ($10|0)==(0);
  $12 = ((($t$0)) + 4|0);
  if ($11) {
   $t$0$lcssa = $t$0;
   break;
  } else {
   $t$0 = $12;
  }
 }
 $13 = ((($f)) + 84|0);
 HEAP32[$13>>2] = $t$0$lcssa;
 ___shlim($f,0);
 $14 = (___intscan($f,$base,1,$0,$1)|0);
 $15 = tempRet0;
 $16 = ($p|0)==(0|0);
 if (!($16)) {
  $17 = ((($f)) + 108|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$3>>2]|0;
  $20 = HEAP32[$2>>2]|0;
  $21 = $19;
  $22 = $20;
  $23 = (($21) - ($22))|0;
  $24 = (($23) + ($18))|0;
  $25 = ($24|0)==(0);
  $26 = (($t$0$lcssa) + ($24<<2)|0);
  $27 = $25 ? $s : $26;
  HEAP32[$p>>2] = $27;
 }
 tempRet0 = ($15);
 STACKTOP = sp;return ($14|0);
}
function _checker($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$01 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr3 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (___syscall(202,($vararg_buffer|0))|0);
 HEAP32[$vararg_buffer1>>2] = $0;
 $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr3>>2] = -1;
 $1 = (___syscall204(204,($vararg_buffer1|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (___syscall(201,($vararg_buffer4|0))|0);
  HEAP32[$vararg_buffer6>>2] = $3;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = -1;
  $4 = (___syscall203(203,($vararg_buffer6|0))|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer10>>2] = 1;
  (___syscall1(1,($vararg_buffer10|0))|0);
 }
 $6 = HEAP32[$p>>2]|0;
 $7 = ((($p)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($p)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$vararg_buffer13>>2] = $6;
 $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
 HEAP32[$vararg_ptr16>>2] = $8;
 $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
 HEAP32[$vararg_ptr17>>2] = $10;
 $vararg_ptr18 = ((($vararg_buffer13)) + 12|0);
 HEAP32[$vararg_ptr18>>2] = 0;
 $11 = (___syscall307(307,($vararg_buffer13|0))|0);
 $i$01 = 0;
 while(1) {
  $12 = (15704 + ($i$01<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11|0)==($13|0);
  if ($14) {
   $i$0$lcssa = $i$01;
   break;
  }
  $15 = (($i$01) + 1)|0;
  $16 = ($15>>>0)<(13);
  if ($16) {
   $i$01 = $15;
  } else {
   $i$0$lcssa = $15;
   break;
  }
 }
 STACKTOP = sp;return ($i$0$lcssa|0);
}
function _do_setxid($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $inf = 0, $old = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $inf = sp + 16|0;
 $old = sp;
 $0 = ((($p)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 do {
  if ($2) {
   $3 = ((($p)) + 16|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0);
   if (!($5)) {
    $6 = HEAP32[$p>>2]|0;
    $7 = ($6|0)>(-1);
    if ($7) {
     $8 = (_getuid()|0);
     $9 = ($6|0)==($8|0);
     if (!($9)) {
      ;HEAP32[$inf>>2]=HEAP32[4944>>2]|0;HEAP32[$inf+4>>2]=HEAP32[4944+4>>2]|0;HEAP32[$inf+8>>2]=HEAP32[4944+8>>2]|0;HEAP32[$inf+12>>2]=HEAP32[4944+12>>2]|0;
      (_getrlimit(6,$old)|0);
      $10 = (___setrlimit(6,$inf)|0);
      $11 = (0 - ($10))|0;
      HEAP32[$0>>2] = $11;
      $12 = ($10|0)==(0);
      if (!($12)) {
       $13 = HEAP32[(7184)>>2]|0;
       $14 = ($13|0)==(0);
       if (!($14)) {
        break;
       }
      }
      HEAP32[$0>>2] = 1;
      (___setrlimit(6,$old)|0);
      break;
     }
    }
   }
   HEAP32[$0>>2] = 1;
  }
 } while(0);
 STACKTOP = sp;return;
}
function _dummy1($x) {
 $x = $x|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _dummy0() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _do_read559($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$ = 0, $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$03 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $$ = $3 ? $1 : 16096;
 $4 = ((($f)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 $$pre = ((($f)) + 44|0);
 L1: do {
  if ($6) {
   $i$0$lcssa = 0;
  } else {
   $i$03 = 0;
   while(1) {
    $7 = (($$) + ($i$03<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==(0);
    if ($9) {
     $i$0$lcssa = $i$03;
     break L1;
    }
    $10 = ($8|0)<(128);
    $11 = $8&255;
    $12 = $10 ? $11 : 64;
    $13 = HEAP32[$$pre>>2]|0;
    $14 = (($13) + ($i$03)|0);
    HEAP8[$14>>0] = $12;
    $15 = (($i$03) + 1)|0;
    $16 = HEAP32[$4>>2]|0;
    $17 = ($15>>>0)<($16>>>0);
    if ($17) {
     $i$03 = $15;
    } else {
     $i$0$lcssa = $15;
     break;
    }
   }
  }
 } while(0);
 $18 = HEAP32[$$pre>>2]|0;
 $19 = ((($f)) + 4|0);
 HEAP32[$19>>2] = $18;
 $20 = $18;
 $21 = (($20) + ($i$0$lcssa)|0);
 $22 = ((($f)) + 8|0);
 HEAP32[$22>>2] = $21;
 $23 = (($$) + ($i$0$lcssa<<2)|0);
 HEAP32[$0>>2] = $23;
 $24 = ($i$0$lcssa|0)!=(0);
 $25 = ($len|0)!=(0);
 $or$cond = $25 & $24;
 if ($or$cond) {
  $26 = ((($20)) + 1|0);
  HEAP32[$19>>2] = $26;
  $27 = HEAP8[$20>>0]|0;
  HEAP8[$buf>>0] = $27;
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function _do_read556($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$ = 0, $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$03 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $$ = $3 ? $1 : 16096;
 $4 = ((($f)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 $$pre = ((($f)) + 44|0);
 L1: do {
  if ($6) {
   $i$0$lcssa = 0;
  } else {
   $i$03 = 0;
   while(1) {
    $7 = (($$) + ($i$03<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==(0);
    if ($9) {
     $i$0$lcssa = $i$03;
     break L1;
    }
    $10 = ($8|0)<(128);
    $11 = $8&255;
    $12 = $10 ? $11 : 64;
    $13 = HEAP32[$$pre>>2]|0;
    $14 = (($13) + ($i$03)|0);
    HEAP8[$14>>0] = $12;
    $15 = (($i$03) + 1)|0;
    $16 = HEAP32[$4>>2]|0;
    $17 = ($15>>>0)<($16>>>0);
    if ($17) {
     $i$03 = $15;
    } else {
     $i$0$lcssa = $15;
     break;
    }
   }
  }
 } while(0);
 $18 = HEAP32[$$pre>>2]|0;
 $19 = ((($f)) + 4|0);
 HEAP32[$19>>2] = $18;
 $20 = $18;
 $21 = (($20) + ($i$0$lcssa)|0);
 $22 = ((($f)) + 8|0);
 HEAP32[$22>>2] = $21;
 $23 = (($$) + ($i$0$lcssa<<2)|0);
 HEAP32[$0>>2] = $23;
 $24 = ($i$0$lcssa|0)!=(0);
 $25 = ($len|0)!=(0);
 $or$cond = $25 & $24;
 if ($or$cond) {
  $26 = ((($20)) + 1|0);
  HEAP32[$19>>2] = $26;
  $27 = HEAP8[$20>>0]|0;
  HEAP8[$buf>>0] = $27;
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function _cycle($width,$ar,$n) {
 $width = $width|0;
 $ar = $ar|0;
 $n = $n|0;
 var $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0;
 var $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 $0 = ($n|0)<(2);
 L1: do {
  if (!($0)) {
   $1 = (($ar) + ($n<<2)|0);
   HEAP32[$1>>2] = $tmp;
   $2 = ($width|0)==(0);
   if (!($2)) {
    $$02 = $width;$6 = $tmp;
    while(1) {
     $3 = ($$02>>>0)>(256);
     $4 = $3 ? 256 : $$02;
     $5 = HEAP32[$ar>>2]|0;
     _memcpy(($6|0),($5|0),($4|0))|0;
     $i$01 = 0;
     while(1) {
      $7 = (($ar) + ($i$01<<2)|0);
      $8 = HEAP32[$7>>2]|0;
      $9 = (($i$01) + 1)|0;
      $10 = (($ar) + ($9<<2)|0);
      $11 = HEAP32[$10>>2]|0;
      _memcpy(($8|0),($11|0),($4|0))|0;
      $12 = HEAP32[$7>>2]|0;
      $13 = (($12) + ($4)|0);
      HEAP32[$7>>2] = $13;
      $exitcond = ($9|0)==($n|0);
      if ($exitcond) {
       break;
      } else {
       $i$01 = $9;
      }
     }
     $14 = ($$02|0)==($4|0);
     if ($14) {
      break L1;
     }
     $15 = (($$02) - ($4))|0;
     $$pre = HEAP32[$1>>2]|0;
     $$02 = $15;$6 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function _out($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$012 = 0, $$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($l|0)==(0);
 L1: do {
  if (!($0)) {
   $$012 = $s;$$in = $l;
   while(1) {
    $1 = (($$in) + -1)|0;
    $2 = HEAP32[$f>>2]|0;
    $3 = $2 & 32;
    $4 = ($3|0)==(0);
    if (!($4)) {
     break L1;
    }
    $5 = ((($$012)) + 4|0);
    $6 = HEAP32[$$012>>2]|0;
    (_fputwc($6,$f)|0);
    $7 = ($1|0)==(0);
    if ($7) {
     break;
    } else {
     $$012 = $5;$$in = $1;
    }
   }
  }
 } while(0);
 return;
}
function _getint($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$s>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_iswdigit($1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $i$0$lcssa = 0;
 } else {
  $i$01 = 0;
  while(1) {
   $4 = ($i$01*10)|0;
   $5 = HEAP32[$s>>2]|0;
   $6 = HEAP32[$5>>2]|0;
   $7 = (($4) + -48)|0;
   $8 = (($7) + ($6))|0;
   $9 = ((($5)) + 4|0);
   HEAP32[$s>>2] = $9;
   $10 = HEAP32[$9>>2]|0;
   $11 = (_iswdigit($10)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    $i$0$lcssa = $8;
    break;
   } else {
    $i$01 = $8;
   }
  }
 }
 return ($i$0$lcssa|0);
}
function _pop_arg474($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa20 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _tre_make_trans($p1,$p2,$transitions,$counts,$offs) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 $transitions = $transitions|0;
 $counts = $counts|0;
 $offs = $offs|0;
 var $$0 = 0, $$02$ph44 = 0, $$0228 = 0, $$0228$lcssa = 0, $$lcssa = 0, $$lcssa25 = 0, $$lcssa88 = 0, $$lcssa89 = 0, $$pre57 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $i$0 = 0, $i$131 = 0, $i$2 = 0, $i$3 = 0, $i$434 = 0, $i$5 = 0, $j$0 = 0, $j$1 = 0, $j$239 = 0, $k$037 = 0, $l$041 = 0, $l$1 = 0, $l$2 = 0, $prev_p2_pos$0$ph45 = 0, $trans$0 = 0, $trans$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($transitions|0)==(0|0);
 $1 = HEAP32[$p1>>2]|0;
 $2 = ($1|0)>(-1);
 L1: do {
  if ($0) {
   if ($2) {
    $3 = ((($p2)) + 32|0);
    $133 = $1;$138 = $p1;$147 = $p1;
    while(1) {
     $130 = HEAP32[$p2>>2]|0;
     $131 = ($130|0)>(-1);
     if ($131) {
      $132 = (($counts) + ($133<<2)|0);
      $134 = HEAP32[$132>>2]|0;
      $135 = (($134) + 1)|0;
      HEAP32[$132>>2] = $135;
      $136 = HEAP32[$3>>2]|0;
      $137 = ($136|0)>(-1);
      if ($137) {
       $143 = $3;
       while(1) {
        $$pre57 = HEAP32[$138>>2]|0;
        $139 = (($counts) + ($$pre57<<2)|0);
        $140 = HEAP32[$139>>2]|0;
        $141 = (($140) + 1)|0;
        HEAP32[$139>>2] = $141;
        $142 = ((($143)) + 32|0);
        $144 = HEAP32[$142>>2]|0;
        $145 = ($144|0)>(-1);
        if ($145) {
         $143 = $142;
        } else {
         break;
        }
       }
      }
     }
     $146 = ((($147)) + 32|0);
     $148 = HEAP32[$146>>2]|0;
     $149 = ($148|0)>(-1);
     if ($149) {
      $133 = $148;$138 = $146;$147 = $146;
     } else {
      $$0 = 0;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  } else {
   if ($2) {
    $20 = $p1;$7 = $p1;
    while(1) {
     $4 = HEAP32[$p2>>2]|0;
     $5 = ($4|0)>(-1);
     L15: do {
      if ($5) {
       $6 = ((($7)) + 4|0);
       $8 = ((($7)) + 8|0);
       $9 = ((($7)) + 16|0);
       $10 = ((($7)) + 20|0);
       $11 = ((($7)) + 24|0);
       $12 = ((($7)) + 28|0);
       $13 = ((($7)) + 12|0);
       $$02$ph44 = $p2;$150 = $4;$prev_p2_pos$0$ph45 = -1;
       while(1) {
        $$0228 = $$02$ph44;$14 = $150;
        while(1) {
         $15 = ($14|0)==($prev_p2_pos$0$ph45|0);
         if (!($15)) {
          $$0228$lcssa = $$0228;$$lcssa = $14;
          break;
         }
         $16 = ((($$0228)) + 32|0);
         $17 = HEAP32[$16>>2]|0;
         $18 = ($17|0)>(-1);
         if ($18) {
          $$0228 = $16;$14 = $17;
         } else {
          break L15;
         }
        }
        $19 = HEAP32[$20>>2]|0;
        $21 = (($offs) + ($19<<2)|0);
        $22 = HEAP32[$21>>2]|0;
        $23 = (($transitions) + ($22<<5)|0);
        $trans$0 = $23;
        while(1) {
         $24 = ((($trans$0)) + 8|0);
         $25 = HEAP32[$24>>2]|0;
         $26 = ($25|0)==(0|0);
         $27 = ((($trans$0)) + 32|0);
         if ($26) {
          $$lcssa88 = $24;$trans$0$lcssa = $trans$0;
          break;
         } else {
          $trans$0 = $27;
         }
        }
        $28 = ((($trans$0$lcssa)) + 40|0);
        HEAP32[$28>>2] = 0;
        $29 = HEAP32[$6>>2]|0;
        HEAP32[$trans$0$lcssa>>2] = $29;
        $30 = HEAP32[$8>>2]|0;
        $31 = ((($trans$0$lcssa)) + 4|0);
        HEAP32[$31>>2] = $30;
        $32 = (($offs) + ($$lcssa<<2)|0);
        $33 = HEAP32[$32>>2]|0;
        $34 = (($transitions) + ($33<<5)|0);
        HEAP32[$$lcssa88>>2] = $34;
        $35 = ((($trans$0$lcssa)) + 12|0);
        HEAP32[$35>>2] = $$lcssa;
        $36 = HEAP32[$9>>2]|0;
        $37 = ((($$0228$lcssa)) + 16|0);
        $38 = HEAP32[$37>>2]|0;
        $39 = $38 | $36;
        $40 = HEAP32[$10>>2]|0;
        $41 = ($40|0)!=(0);
        $42 = $41 ? 4 : 0;
        $43 = $39 | $42;
        $44 = HEAP32[$11>>2]|0;
        $45 = ($44|0)!=(0|0);
        $46 = $45 ? 8 : 0;
        $47 = $43 | $46;
        $48 = ((($trans$0$lcssa)) + 20|0);
        HEAP32[$48>>2] = $47;
        $49 = HEAP32[$12>>2]|0;
        $50 = ($49|0)>(-1);
        if ($50) {
         $51 = $47 | 256;
         HEAP32[$48>>2] = $51;
         $$sink = $49;
        } else {
         $$sink = $40;
        }
        $52 = ((($trans$0$lcssa)) + 24|0);
        HEAP32[$52>>2] = $$sink;
        $53 = HEAP32[$11>>2]|0;
        $54 = ($53|0)==(0|0);
        if ($54) {
         $73 = ((($trans$0$lcssa)) + 28|0);
         HEAP32[$73>>2] = 0;
        } else {
         $i$0 = 0;
         while(1) {
          $55 = (($53) + ($i$0<<2)|0);
          $56 = HEAP32[$55>>2]|0;
          $57 = ($56|0)==(0);
          $58 = (($i$0) + 1)|0;
          if ($57) {
           $$lcssa89 = $58;
           break;
          } else {
           $i$0 = $58;
          }
         }
         $59 = $$lcssa89 << 2;
         $60 = (_malloc($59)|0);
         $61 = ((($trans$0$lcssa)) + 28|0);
         HEAP32[$61>>2] = $60;
         $62 = ($60|0)==(0|0);
         if ($62) {
          $$0 = 12;
          break L1;
         }
         $63 = HEAP32[$11>>2]|0;
         $64 = HEAP32[$63>>2]|0;
         $65 = ($64|0)==(0);
         if ($65) {
          $$lcssa25 = $60;
         } else {
          $66 = $64;$67 = $60;$i$131 = 0;
          while(1) {
           HEAP32[$67>>2] = $66;
           $68 = (($i$131) + 1)|0;
           $69 = (($63) + ($68<<2)|0);
           $70 = HEAP32[$69>>2]|0;
           $71 = ($70|0)==(0);
           $72 = (($60) + ($68<<2)|0);
           if ($71) {
            $$lcssa25 = $72;
            break;
           } else {
            $66 = $70;$67 = $72;$i$131 = $68;
           }
          }
         }
         HEAP32[$$lcssa25>>2] = 0;
        }
        $74 = HEAP32[$13>>2]|0;
        $75 = ($74|0)==(0|0);
        if ($75) {
         $i$3 = 0;
        } else {
         $i$2 = 0;
         while(1) {
          $76 = (($74) + ($i$2<<2)|0);
          $77 = HEAP32[$76>>2]|0;
          $78 = ($77|0)>(-1);
          $79 = (($i$2) + 1)|0;
          if ($78) {
           $i$2 = $79;
          } else {
           $i$3 = $i$2;
           break;
          }
         }
        }
        $80 = ((($$0228$lcssa)) + 12|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = ($81|0)==(0|0);
        if ($82) {
         $j$1 = 0;
        } else {
         $j$0 = 0;
         while(1) {
          $83 = (($81) + ($j$0<<2)|0);
          $84 = HEAP32[$83>>2]|0;
          $85 = ($84|0)>(-1);
          $86 = (($j$0) + 1)|0;
          if ($85) {
           $j$0 = $86;
          } else {
           $j$1 = $j$0;
           break;
          }
         }
        }
        $87 = ((($trans$0$lcssa)) + 16|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = ($88|0)==(0|0);
        if (!($89)) {
         _free($88);
        }
        HEAP32[$87>>2] = 0;
        $90 = (($j$1) + ($i$3))|0;
        $91 = ($90|0)>(0);
        if ($91) {
         $92 = $90 << 2;
         $93 = (($92) + 4)|0;
         $94 = (_malloc($93)|0);
         HEAP32[$87>>2] = $94;
         $95 = ($94|0)==(0|0);
         if ($95) {
          $$0 = 12;
          break L1;
         }
         $96 = HEAP32[$13>>2]|0;
         $97 = ($96|0)==(0|0);
         if ($97) {
          $i$5 = 0;
         } else {
          $98 = HEAP32[$96>>2]|0;
          $99 = ($98|0)>(-1);
          if ($99) {
           $101 = $98;$i$434 = 0;
           while(1) {
            $100 = (($94) + ($i$434<<2)|0);
            HEAP32[$100>>2] = $101;
            $102 = (($i$434) + 1)|0;
            $103 = (($96) + ($102<<2)|0);
            $104 = HEAP32[$103>>2]|0;
            $105 = ($104|0)>(-1);
            if ($105) {
             $101 = $104;$i$434 = $102;
            } else {
             $i$5 = $102;
             break;
            }
           }
          } else {
           $i$5 = 0;
          }
         }
         $106 = HEAP32[$80>>2]|0;
         $107 = ($106|0)==(0|0);
         if ($107) {
          $l$2 = $i$5;
         } else {
          $108 = HEAP32[$106>>2]|0;
          $109 = ($108|0)>(-1);
          if ($109) {
           $110 = ($i$5|0)>(0);
           $116 = $108;$j$239 = 0;$l$041 = $i$5;
           while(1) {
            L64: do {
             if ($110) {
              $k$037 = 0;
              while(1) {
               $113 = (($94) + ($k$037<<2)|0);
               $114 = HEAP32[$113>>2]|0;
               $115 = ($114|0)==($116|0);
               $111 = (($k$037) + 1)|0;
               if ($115) {
                $l$1 = $l$041;
                break L64;
               }
               $112 = ($111|0)<($i$5|0);
               if ($112) {
                $k$037 = $111;
               } else {
                label = 39;
                break;
               }
              }
             } else {
              label = 39;
             }
            } while(0);
            if ((label|0) == 39) {
             label = 0;
             $117 = (($l$041) + 1)|0;
             $118 = (($94) + ($l$041<<2)|0);
             HEAP32[$118>>2] = $116;
             $l$1 = $117;
            }
            $119 = (($j$239) + 1)|0;
            $120 = (($106) + ($119<<2)|0);
            $121 = HEAP32[$120>>2]|0;
            $122 = ($121|0)>(-1);
            if ($122) {
             $116 = $121;$j$239 = $119;$l$041 = $l$1;
            } else {
             $l$2 = $l$1;
             break;
            }
           }
          } else {
           $l$2 = $i$5;
          }
         }
         $123 = (($94) + ($l$2<<2)|0);
         HEAP32[$123>>2] = -1;
        }
        $124 = ((($$0228$lcssa)) + 32|0);
        $125 = HEAP32[$124>>2]|0;
        $126 = ($125|0)>(-1);
        if ($126) {
         $$02$ph44 = $124;$150 = $125;$prev_p2_pos$0$ph45 = $$lcssa;
        } else {
         break;
        }
       }
      }
     } while(0);
     $127 = ((($7)) + 32|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($128|0)>(-1);
     if ($129) {
      $20 = $127;$7 = $127;
     } else {
      $$0 = 0;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function _tre_add_tag_left($mem,$node,$tag_id) {
 $mem = $mem|0;
 $node = $node|0;
 $tag_id = $tag_id|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___tre_mem_alloc_impl($mem,0,0,0,8)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = 12;
  } else {
   $2 = (_tre_ast_new_node($mem,0,20)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    HEAP32[$0>>2] = 0;
    $$0 = 12;
    break;
   }
   $4 = ((($2)) + 4|0);
   $5 = HEAP32[$4>>2]|0;
   HEAP32[$5>>2] = -3;
   $6 = ((($5)) + 4|0);
   HEAP32[$6>>2] = $tag_id;
   $7 = ((($5)) + 8|0);
   HEAP32[$7>>2] = -1;
   HEAP32[$0>>2] = $2;
   $8 = (___tre_mem_alloc_impl($mem,0,0,0,32)|0);
   $9 = ((($0)) + 4|0);
   HEAP32[$9>>2] = $8;
   $10 = ($8|0)==(0|0);
   if ($10) {
    $$0 = 12;
   } else {
    $11 = ((($node)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($8)) + 4|0);
    HEAP32[$13>>2] = $12;
    $14 = HEAP32[$node>>2]|0;
    HEAP32[$8>>2] = $14;
    $15 = ((($8)) + 8|0);
    HEAP32[$15>>2] = -1;
    $16 = ((($8)) + 12|0);
    HEAP32[$16>>2] = -1;
    $17 = ((($8)) + 24|0);
    HEAP32[$17>>2] = 0;
    $18 = ((($8)) + 28|0);
    HEAP32[$18>>2] = 0;
    $19 = ((($8)) + 20|0);
    HEAP32[$19>>2] = 0;
    HEAP32[$11>>2] = $0;
    HEAP32[$node>>2] = 1;
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function _tre_purge_regset($regset,$tnfa,$tag) {
 $regset = $regset|0;
 $tnfa = $tnfa|0;
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$regset>>2]|0;
 $1 = ($0|0)>(-1);
 if ($1) {
  $2 = ((($tnfa)) + 16|0);
  $3 = HEAP32[$2>>2]|0;
  $5 = $0;$i$01 = 0;
  while(1) {
   $4 = (($5|0) / 2)&-1;
   $6 = $5 & 1;
   $7 = ($6|0)==(0);
   if ($7) {
    $8 = (($3) + (($4*12)|0)|0);
    HEAP32[$8>>2] = $tag;
   } else {
    $9 = (((($3) + (($4*12)|0)|0)) + 4|0);
    HEAP32[$9>>2] = $tag;
   }
   $10 = (($i$01) + 1)|0;
   $11 = (($regset) + ($10<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)>(-1);
   if ($13) {
    $5 = $12;$i$01 = $10;
   } else {
    break;
   }
  }
 }
 HEAP32[$regset>>2] = -1;
 return;
}
function _tre_add_tag_right($mem,$node,$tag_id) {
 $mem = $mem|0;
 $node = $node|0;
 $tag_id = $tag_id|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___tre_mem_alloc_impl($mem,0,0,0,8)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = 12;
  } else {
   $2 = (_tre_ast_new_node($mem,0,20)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $4 = ((($0)) + 4|0);
    HEAP32[$4>>2] = 0;
    $$0 = 12;
    break;
   }
   $5 = ((($2)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   HEAP32[$6>>2] = -3;
   $7 = ((($6)) + 4|0);
   HEAP32[$7>>2] = $tag_id;
   $8 = ((($6)) + 8|0);
   HEAP32[$8>>2] = -1;
   $9 = ((($0)) + 4|0);
   HEAP32[$9>>2] = $2;
   $10 = (___tre_mem_alloc_impl($mem,0,0,0,32)|0);
   HEAP32[$0>>2] = $10;
   $11 = ($10|0)==(0|0);
   if ($11) {
    $$0 = 12;
   } else {
    $12 = ((($node)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($10)) + 4|0);
    HEAP32[$14>>2] = $13;
    $15 = HEAP32[$node>>2]|0;
    HEAP32[$10>>2] = $15;
    $16 = ((($10)) + 8|0);
    HEAP32[$16>>2] = -1;
    $17 = ((($10)) + 12|0);
    HEAP32[$17>>2] = -1;
    $18 = ((($10)) + 24|0);
    HEAP32[$18>>2] = 0;
    $19 = ((($10)) + 28|0);
    HEAP32[$19>>2] = 0;
    $20 = ((($10)) + 20|0);
    HEAP32[$20>>2] = 0;
    HEAP32[$12>>2] = $0;
    HEAP32[$node>>2] = 1;
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function _tre_new_item($mem,$min,$max,$i,$max_i,$items) {
 $mem = $mem|0;
 $min = $min|0;
 $max = $max|0;
 $i = $i|0;
 $max_i = $max_i|0;
 $items = $items|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $array$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$items>>2]|0;
 $1 = HEAP32[$i>>2]|0;
 $2 = HEAP32[$max_i>>2]|0;
 $3 = ($1|0)<($2|0);
 if ($3) {
  $array$0 = $0;
  label = 5;
 } else {
  $4 = ($2|0)>(1024);
  if ($4) {
   $$0 = 12;
  } else {
   $5 = $2 << 1;
   HEAP32[$max_i>>2] = $5;
   $6 = $2 << 3;
   $7 = (_realloc($0,$6)|0);
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$0 = 12;
   } else {
    HEAP32[$items>>2] = $7;
    $array$0 = $7;
    label = 5;
   }
  }
 }
 if ((label|0) == 5) {
  $9 = (_tre_ast_new_node($mem,0,20)|0);
  $10 = ($9|0)==(0|0);
  if ($10) {
   $$0$i = 0;
  } else {
   $11 = ((($9)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   HEAP32[$12>>2] = $min;
   $13 = ((($12)) + 4|0);
   HEAP32[$13>>2] = $max;
   $14 = ((($12)) + 8|0);
   HEAP32[$14>>2] = -1;
   $$0$i = $9;
  }
  $15 = HEAP32[$i>>2]|0;
  $16 = (($array$0) + ($15<<2)|0);
  HEAP32[$16>>2] = $$0$i;
  $17 = ($$0$i|0)==(0|0);
  $18 = $17 ? 12 : 0;
  $19 = (($15) + 1)|0;
  HEAP32[$i>>2] = $19;
  $$0 = $18;
 }
 return ($$0|0);
}
function _tre_compare_items($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = HEAP32[$b>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$3>>2]|0;
 $7 = HEAP32[$5>>2]|0;
 $8 = ($6|0)<($7|0);
 $9 = ($6|0)>($7|0);
 $$ = $9&1;
 $$0 = $8 ? -1 : $$;
 return ($$0|0);
}
function _str_next($str,$n,$step) {
 $str = $str|0;
 $n = $n|0;
 $step = $step|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $wc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wc = sp;
 $0 = ($n|0)==(0);
 do {
  if ($0) {
   HEAP32[$step>>2] = 0;
   $$0 = 0;
  } else {
   $1 = HEAP8[$str>>0]|0;
   $2 = ($1<<24>>24)<(0);
   if (!($2)) {
    HEAP32[$step>>2] = 1;
    $6 = HEAP8[$str>>0]|0;
    $7 = $6 << 24 >> 24;
    $$0 = $7;
    break;
   }
   $3 = (_mbtowc($wc,$str,$n)|0);
   $4 = ($3|0)<(0);
   if ($4) {
    HEAP32[$step>>2] = 1;
    $$0 = -1;
    break;
   } else {
    HEAP32[$step>>2] = $3;
    $5 = HEAP32[$wc>>2]|0;
    $$0 = $5;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _match_bracket($p,$k) {
 $p = $p|0;
 $k = $k|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$3$lcssa = 0, $$4 = 0, $$5 = 0, $$lcssa = 0, $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $inv$0 = 0, $wc = 0, $wc2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wc = sp + 4|0;
 $wc2 = sp;
 $buf = sp + 8|0;
 $0 = ((($p)) + 1|0);
 $1 = HEAP8[$0>>0]|0;
 switch ($1<<24>>24) {
 case 33: case 94:  {
  $2 = ((($p)) + 2|0);
  $$pre = HEAP8[$2>>0]|0;
  $$01 = $2;$3 = $$pre;$7 = $0;$inv$0 = 1;
  break;
 }
 default: {
  $$01 = $0;$3 = $1;$7 = $p;$inv$0 = 0;
 }
 }
 L4: do {
  switch ($3<<24>>24) {
  case 93:  {
   $4 = ($k|0)==(93);
   if ($4) {
    $5 = $inv$0 ^ 1;
    $$0 = $5;
    break L4;
   } else {
    $6 = ((($7)) + 2|0);
    $$1 = $6;
    label = 10;
    break L4;
   }
   break;
  }
  case 45:  {
   $8 = ($k|0)==(45);
   if ($8) {
    $9 = $inv$0 ^ 1;
    $$0 = $9;
    break L4;
   } else {
    $10 = ((($7)) + 2|0);
    $$1 = $10;
    label = 10;
    break L4;
   }
   break;
  }
  default: {
   $$1 = $$01;
   label = 10;
  }
  }
 } while(0);
 L13: do {
  if ((label|0) == 10) {
   $11 = ((($$1)) + -1|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12 << 24 >> 24;
   HEAP32[$wc>>2] = $13;
   $$2 = $$1;
   L15: while(1) {
    $14 = HEAP8[$$2>>0]|0;
    L17: do {
     switch ($14<<24>>24) {
     case 93:  {
      $$0 = $inv$0;
      break L13;
      break;
     }
     case 45:  {
      $15 = ((($$2)) + 1|0);
      $16 = HEAP8[$15>>0]|0;
      $17 = ($16<<24>>24)==(93);
      if ($17) {
       label = 28;
      } else {
       $18 = (_mbtowc($wc2,$15,4)|0);
       $19 = ($18|0)<(0);
       if ($19) {
        $$0 = 0;
        break L13;
       }
       $20 = HEAP32[$wc>>2]|0;
       $21 = HEAP32[$wc2>>2]|0;
       $22 = ($21|0)<($20|0);
       if (!($22)) {
        $23 = (($k) - ($20))|0;
        $24 = (($21) - ($20))|0;
        $25 = ($23>>>0)>($24>>>0);
        if (!($25)) {
         label = 16;
         break L15;
        }
       }
       $27 = (($18) + -1)|0;
       $28 = (($$2) + ($27)|0);
       $$5 = $28;
      }
      break;
     }
     case 91:  {
      $29 = ((($$2)) + 1|0);
      $30 = HEAP8[$29>>0]|0;
      switch ($30<<24>>24) {
      case 61: case 46: case 58:  {
       break;
      }
      default: {
       label = 28;
       break L17;
      }
      }
      $31 = ((($$2)) + 3|0);
      $$3 = $31;
      while(1) {
       $32 = ((($$3)) + -1|0);
       $33 = HEAP8[$32>>0]|0;
       $34 = ($33<<24>>24)==($30<<24>>24);
       if ($34) {
        $35 = HEAP8[$$3>>0]|0;
        $36 = ($35<<24>>24)==(93);
        if ($36) {
         $$3$lcssa = $$3;$$lcssa = $32;
         break;
        }
       }
       $37 = ((($$3)) + 1|0);
       $$3 = $37;
      }
      $38 = ((($$2)) + 2|0);
      $39 = ($30<<24>>24)==(58);
      if ($39) {
       $40 = $$lcssa;
       $41 = $38;
       $42 = (($40) - ($41))|0;
       $43 = ($42|0)<(16);
       if ($43) {
        _memcpy(($buf|0),($38|0),($42|0))|0;
        $44 = (($buf) + ($42)|0);
        HEAP8[$44>>0] = 0;
        $45 = (_wctype($buf)|0);
        $46 = (_iswctype($k,$45)|0);
        $47 = ($46|0)==(0);
        if ($47) {
         $$5 = $$3$lcssa;
        } else {
         label = 26;
         break L15;
        }
       } else {
        $$5 = $$3$lcssa;
       }
      } else {
       $$5 = $$3$lcssa;
      }
      break;
     }
     default: {
      $49 = ($14<<24>>24)>(-1);
      if ($49) {
       label = 28;
      } else {
       $51 = (_mbtowc($wc,$$2,4)|0);
       $52 = ($51|0)<(0);
       if ($52) {
        $$0 = 0;
        break L13;
       }
       $53 = (($51) + -1)|0;
       $54 = (($$2) + ($53)|0);
       $$pre2 = HEAP32[$wc>>2]|0;
       $$4 = $54;$55 = $$pre2;
       label = 31;
      }
     }
     }
    } while(0);
    if ((label|0) == 28) {
     label = 0;
     $50 = $14&255;
     HEAP32[$wc>>2] = $50;
     $$4 = $$2;$55 = $50;
     label = 31;
    }
    if ((label|0) == 31) {
     label = 0;
     $56 = ($55|0)==($k|0);
     if ($56) {
      label = 32;
      break;
     } else {
      $$5 = $$4;
     }
    }
    $58 = ((($$5)) + 1|0);
    $$2 = $58;
   }
   if ((label|0) == 16) {
    $26 = $inv$0 ^ 1;
    $$0 = $26;
    break;
   }
   else if ((label|0) == 26) {
    $48 = $inv$0 ^ 1;
    $$0 = $48;
    break;
   }
   else if ((label|0) == 32) {
    $57 = $inv$0 ^ 1;
    $$0 = $57;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sha512_update($s,$m,$len) {
 $s = $s|0;
 $m = $m|0;
 $len = $len|0;
 var $$0$lcssa = 0, $$0$ph = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0$lcssa = 0, $p$0$ph = 0, $p$01 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $2 & 127;
 $7 = (_i64Add(($2|0),($5|0),($len|0),0)|0);
 $8 = tempRet0;
 $9 = $s;
 $10 = $9;
 HEAP32[$10>>2] = $7;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $8;
 $13 = ($6|0)==(0);
 do {
  if ($13) {
   $$0$ph = $len;$p$0$ph = $m;
   label = 5;
  } else {
   $14 = (128 - ($6))|0;
   $15 = ($14>>>0)>($len>>>0);
   $16 = (((($s)) + 72|0) + ($6)|0);
   if ($15) {
    _memcpy(($16|0),($m|0),($len|0))|0;
    break;
   } else {
    $17 = ((($s)) + 72|0);
    _memcpy(($16|0),($m|0),($14|0))|0;
    $18 = (($len) - ($14))|0;
    $19 = (($m) + ($14)|0);
    _processblock55($s,$17);
    $$0$ph = $18;$p$0$ph = $19;
    label = 5;
    break;
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $20 = ($$0$ph>>>0)>(127);
  if ($20) {
   $21 = (($$0$ph) + -128)|0;
   $22 = $21 & -128;
   $23 = (($22) + 128)|0;
   $scevgep = (($p$0$ph) + ($23)|0);
   $$02 = $$0$ph;$p$01 = $p$0$ph;
   while(1) {
    _processblock55($s,$p$01);
    $24 = (($$02) + -128)|0;
    $25 = ((($p$01)) + 128|0);
    $26 = ($24>>>0)>(127);
    if ($26) {
     $$02 = $24;$p$01 = $25;
    } else {
     break;
    }
   }
   $27 = (($21) - ($22))|0;
   $$0$lcssa = $27;$p$0$lcssa = $scevgep;
  } else {
   $$0$lcssa = $$0$ph;$p$0$lcssa = $p$0$ph;
  }
  $28 = ((($s)) + 72|0);
  _memcpy(($28|0),($p$0$lcssa|0),($$0$lcssa|0))|0;
 }
 return;
}
function _sha512_sum($s,$md) {
 $s = $s|0;
 $md = $md|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $i$01 = 0, $r$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $2 & 127;
 $7 = (($6) + 1)|0;
 $8 = (((($s)) + 72|0) + ($6)|0);
 HEAP8[$8>>0] = -128;
 $9 = ($7>>>0)>(112);
 $10 = ((($s)) + 72|0);
 if ($9) {
  $11 = (((($s)) + 72|0) + ($7)|0);
  $12 = $6 ^ 127;
  _memset(($11|0),0,($12|0))|0;
  _processblock55($s,$10);
  $r$0$i = 0;
 } else {
  $r$0$i = $7;
 }
 $13 = (((($s)) + 72|0) + ($r$0$i)|0);
 $14 = (120 - ($r$0$i))|0;
 _memset(($13|0),0,($14|0))|0;
 $15 = $s;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (_bitshift64Shl(($17|0),($20|0),3)|0);
 $22 = tempRet0;
 $23 = $s;
 $24 = $23;
 HEAP32[$24>>2] = $21;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = $22;
 $27 = (_bitshift64Lshr(($17|0),($20|0),53)|0);
 $28 = tempRet0;
 $29 = $27&255;
 $30 = ((($s)) + 192|0);
 HEAP8[$30>>0] = $29;
 $31 = (_bitshift64Lshr(($17|0),($20|0),45)|0);
 $32 = tempRet0;
 $33 = $31&255;
 $34 = ((($s)) + 193|0);
 HEAP8[$34>>0] = $33;
 $35 = (_bitshift64Lshr(($17|0),($20|0),37)|0);
 $36 = tempRet0;
 $37 = $35&255;
 $38 = ((($s)) + 194|0);
 HEAP8[$38>>0] = $37;
 $39 = (_bitshift64Lshr(($17|0),($20|0),29)|0);
 $40 = tempRet0;
 $41 = $39&255;
 $42 = ((($s)) + 195|0);
 HEAP8[$42>>0] = $41;
 $43 = (_bitshift64Lshr(($17|0),($20|0),21)|0);
 $44 = tempRet0;
 $45 = $43&255;
 $46 = ((($s)) + 196|0);
 HEAP8[$46>>0] = $45;
 $47 = (_bitshift64Lshr(($17|0),($20|0),13)|0);
 $48 = tempRet0;
 $49 = $47&255;
 $50 = ((($s)) + 197|0);
 HEAP8[$50>>0] = $49;
 $51 = (_bitshift64Lshr(($17|0),($20|0),5)|0);
 $52 = tempRet0;
 $53 = $51&255;
 $54 = ((($s)) + 198|0);
 HEAP8[$54>>0] = $53;
 $55 = $21&255;
 $56 = ((($s)) + 199|0);
 HEAP8[$56>>0] = $55;
 _processblock55($s,$10);
 $i$01 = 0;
 while(1) {
  $57 = (((($s)) + 8|0) + ($i$01<<3)|0);
  $58 = $57;
  $59 = $58;
  $60 = HEAP32[$59>>2]|0;
  $61 = (($58) + 4)|0;
  $62 = $61;
  $63 = HEAP32[$62>>2]|0;
  $64 = (_bitshift64Lshr(($60|0),($63|0),56)|0);
  $65 = tempRet0;
  $66 = $64&255;
  $67 = $i$01 << 3;
  $68 = (($md) + ($67)|0);
  HEAP8[$68>>0] = $66;
  $69 = $57;
  $70 = $69;
  $71 = HEAP32[$70>>2]|0;
  $72 = (($69) + 4)|0;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  $75 = (_bitshift64Lshr(($71|0),($74|0),48)|0);
  $76 = tempRet0;
  $77 = $75&255;
  $78 = $67 | 1;
  $79 = (($md) + ($78)|0);
  HEAP8[$79>>0] = $77;
  $80 = $57;
  $81 = $80;
  $82 = HEAP32[$81>>2]|0;
  $83 = (($80) + 4)|0;
  $84 = $83;
  $85 = HEAP32[$84>>2]|0;
  $86 = (_bitshift64Lshr(($82|0),($85|0),40)|0);
  $87 = tempRet0;
  $88 = $86&255;
  $89 = $67 | 2;
  $90 = (($md) + ($89)|0);
  HEAP8[$90>>0] = $88;
  $91 = $57;
  $92 = $91;
  $93 = HEAP32[$92>>2]|0;
  $94 = (($91) + 4)|0;
  $95 = $94;
  $96 = HEAP32[$95>>2]|0;
  $97 = $96&255;
  $98 = $67 | 3;
  $99 = (($md) + ($98)|0);
  HEAP8[$99>>0] = $97;
  $100 = $57;
  $101 = $100;
  $102 = HEAP32[$101>>2]|0;
  $103 = (($100) + 4)|0;
  $104 = $103;
  $105 = HEAP32[$104>>2]|0;
  $106 = (_bitshift64Lshr(($102|0),($105|0),24)|0);
  $107 = tempRet0;
  $108 = $106&255;
  $109 = $67 | 4;
  $110 = (($md) + ($109)|0);
  HEAP8[$110>>0] = $108;
  $111 = $57;
  $112 = $111;
  $113 = HEAP32[$112>>2]|0;
  $114 = (($111) + 4)|0;
  $115 = $114;
  $116 = HEAP32[$115>>2]|0;
  $117 = (_bitshift64Lshr(($113|0),($116|0),16)|0);
  $118 = tempRet0;
  $119 = $117&255;
  $120 = $67 | 5;
  $121 = (($md) + ($120)|0);
  HEAP8[$121>>0] = $119;
  $122 = $57;
  $123 = $122;
  $124 = HEAP32[$123>>2]|0;
  $125 = (($122) + 4)|0;
  $126 = $125;
  $127 = HEAP32[$126>>2]|0;
  $128 = (_bitshift64Lshr(($124|0),($127|0),8)|0);
  $129 = tempRet0;
  $130 = $128&255;
  $131 = $67 | 6;
  $132 = (($md) + ($131)|0);
  HEAP8[$132>>0] = $130;
  $133 = $57;
  $134 = $133;
  $135 = HEAP32[$134>>2]|0;
  $136 = (($133) + 4)|0;
  $137 = $136;
  $138 = HEAP32[$137>>2]|0;
  $139 = $135&255;
  $140 = $67 | 7;
  $141 = (($md) + ($140)|0);
  HEAP8[$141>>0] = $139;
  $142 = (($i$01) + 1)|0;
  $exitcond = ($142|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $142;
  }
 }
 return;
}
function _hashmd52($s,$n,$md) {
 $s = $s|0;
 $n = $n|0;
 $md = $md|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i$0$lcssa = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n>>>0)>(64);
 if ($0) {
  $1 = (($n) + -65)|0;
  $2 = $1 & -64;
  $i$01 = $n;
  while(1) {
   _sha512_update($s,$md,64);
   $3 = (($i$01) + -64)|0;
   $4 = ($3>>>0)>(64);
   if ($4) {
    $i$01 = $3;
   } else {
    break;
   }
  }
  $5 = (($n) + -64)|0;
  $6 = (($5) - ($2))|0;
  $i$0$lcssa = $6;
 } else {
  $i$0$lcssa = $n;
 }
 _sha512_update($s,$md,$i$0$lcssa);
 return;
}
function _processblock55($s,$buf) {
 $s = $s|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $222$phi = 0;
 var $223 = 0, $223$phi = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $227$phi = 0, $228 = 0, $228$phi = 0, $229 = 0, $23 = 0, $230 = 0, $230$phi = 0, $231 = 0, $231$phi = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $281$phi = 0, $282 = 0, $283 = 0, $283$phi = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $287$phi = 0, $288 = 0;
 var $289 = 0, $289$phi = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $294$phi = 0, $295 = 0, $295$phi = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $W = 0, $exitcond = 0, $exitcond14 = 0;
 var $exitcond15 = 0, $i$011 = 0, $i$110 = 0, $i$29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $W = sp;
 $i$011 = 0;
 while(1) {
  $6 = $i$011 << 3;
  $7 = (($buf) + ($6)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = (_bitshift64Shl(($9|0),0,56)|0);
  $11 = tempRet0;
  $12 = (($W) + ($i$011<<3)|0);
  $13 = $6 | 1;
  $14 = (($buf) + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (_bitshift64Shl(($16|0),0,48)|0);
  $18 = tempRet0;
  $19 = $17 | $10;
  $20 = $18 | $11;
  $21 = $6 | 2;
  $22 = (($buf) + ($21)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (_bitshift64Shl(($24|0),0,40)|0);
  $26 = tempRet0;
  $27 = $19 | $25;
  $28 = $20 | $26;
  $29 = $6 | 3;
  $30 = (($buf) + ($29)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $28 | $32;
  $34 = $6 | 4;
  $35 = (($buf) + ($34)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = (_bitshift64Shl(($37|0),0,24)|0);
  $39 = tempRet0;
  $40 = $27 | $38;
  $41 = $33 | $39;
  $42 = $6 | 5;
  $43 = (($buf) + ($42)|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = (_bitshift64Shl(($45|0),0,16)|0);
  $47 = tempRet0;
  $48 = $40 | $46;
  $49 = $41 | $47;
  $50 = $6 | 6;
  $51 = (($buf) + ($50)|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = (_bitshift64Shl(($53|0),0,8)|0);
  $55 = tempRet0;
  $56 = $48 | $54;
  $57 = $49 | $55;
  $58 = $6 | 7;
  $59 = (($buf) + ($58)|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = $56 | $61;
  $63 = $12;
  $64 = $63;
  HEAP32[$64>>2] = $62;
  $65 = (($63) + 4)|0;
  $66 = $65;
  HEAP32[$66>>2] = $57;
  $67 = (($i$011) + 1)|0;
  $exitcond15 = ($67|0)==(16);
  if ($exitcond15) {
   break;
  } else {
   $i$011 = $67;
  }
 }
 $0 = $W;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $128 = $2;$129 = $5;$i$110 = 16;
 while(1) {
  $68 = (($i$110) + -2)|0;
  $69 = (($W) + ($68<<3)|0);
  $70 = $69;
  $71 = $70;
  $72 = HEAP32[$71>>2]|0;
  $73 = (($70) + 4)|0;
  $74 = $73;
  $75 = HEAP32[$74>>2]|0;
  $76 = (_bitshift64Lshr(($72|0),($75|0),19)|0);
  $77 = tempRet0;
  $78 = (_bitshift64Shl(($72|0),($75|0),45)|0);
  $79 = tempRet0;
  $80 = $78 | $76;
  $81 = $79 | $77;
  $82 = (_bitshift64Lshr(($72|0),($75|0),61)|0);
  $83 = tempRet0;
  $84 = (_bitshift64Shl(($72|0),($75|0),3)|0);
  $85 = tempRet0;
  $86 = $84 | $82;
  $87 = $85 | $83;
  $88 = (_bitshift64Lshr(($72|0),($75|0),6)|0);
  $89 = tempRet0;
  $90 = $86 ^ $88;
  $91 = $87 ^ $89;
  $92 = $90 ^ $80;
  $93 = $91 ^ $81;
  $94 = (($i$110) + -7)|0;
  $95 = (($W) + ($94<<3)|0);
  $96 = $95;
  $97 = $96;
  $98 = HEAP32[$97>>2]|0;
  $99 = (($96) + 4)|0;
  $100 = $99;
  $101 = HEAP32[$100>>2]|0;
  $102 = (($i$110) + -15)|0;
  $103 = (($W) + ($102<<3)|0);
  $104 = $103;
  $105 = $104;
  $106 = HEAP32[$105>>2]|0;
  $107 = (($104) + 4)|0;
  $108 = $107;
  $109 = HEAP32[$108>>2]|0;
  $110 = (_bitshift64Lshr(($106|0),($109|0),1)|0);
  $111 = tempRet0;
  $112 = (_bitshift64Shl(($106|0),($109|0),63)|0);
  $113 = tempRet0;
  $114 = $112 | $110;
  $115 = $113 | $111;
  $116 = (_bitshift64Lshr(($106|0),($109|0),8)|0);
  $117 = tempRet0;
  $118 = (_bitshift64Shl(($106|0),($109|0),56)|0);
  $119 = tempRet0;
  $120 = $118 | $116;
  $121 = $119 | $117;
  $122 = (_bitshift64Lshr(($106|0),($109|0),7)|0);
  $123 = tempRet0;
  $124 = $120 ^ $122;
  $125 = $121 ^ $123;
  $126 = $124 ^ $114;
  $127 = $125 ^ $115;
  $130 = (_i64Add(($128|0),($129|0),($98|0),($101|0))|0);
  $131 = tempRet0;
  $132 = (_i64Add(($130|0),($131|0),($92|0),($93|0))|0);
  $133 = tempRet0;
  $134 = (_i64Add(($132|0),($133|0),($126|0),($127|0))|0);
  $135 = tempRet0;
  $136 = (($W) + ($i$110<<3)|0);
  $137 = $136;
  $138 = $137;
  HEAP32[$138>>2] = $134;
  $139 = (($137) + 4)|0;
  $140 = $139;
  HEAP32[$140>>2] = $135;
  $141 = (($i$110) + 1)|0;
  $exitcond14 = ($141|0)==(80);
  if ($exitcond14) {
   break;
  } else {
   $128 = $106;$129 = $109;$i$110 = $141;
  }
 }
 $142 = ((($s)) + 8|0);
 $143 = $142;
 $144 = $143;
 $145 = HEAP32[$144>>2]|0;
 $146 = (($143) + 4)|0;
 $147 = $146;
 $148 = HEAP32[$147>>2]|0;
 $149 = ((($s)) + 16|0);
 $150 = $149;
 $151 = $150;
 $152 = HEAP32[$151>>2]|0;
 $153 = (($150) + 4)|0;
 $154 = $153;
 $155 = HEAP32[$154>>2]|0;
 $156 = ((($s)) + 24|0);
 $157 = $156;
 $158 = $157;
 $159 = HEAP32[$158>>2]|0;
 $160 = (($157) + 4)|0;
 $161 = $160;
 $162 = HEAP32[$161>>2]|0;
 $163 = ((($s)) + 32|0);
 $164 = $163;
 $165 = $164;
 $166 = HEAP32[$165>>2]|0;
 $167 = (($164) + 4)|0;
 $168 = $167;
 $169 = HEAP32[$168>>2]|0;
 $170 = ((($s)) + 40|0);
 $171 = $170;
 $172 = $171;
 $173 = HEAP32[$172>>2]|0;
 $174 = (($171) + 4)|0;
 $175 = $174;
 $176 = HEAP32[$175>>2]|0;
 $177 = ((($s)) + 48|0);
 $178 = $177;
 $179 = $178;
 $180 = HEAP32[$179>>2]|0;
 $181 = (($178) + 4)|0;
 $182 = $181;
 $183 = HEAP32[$182>>2]|0;
 $184 = ((($s)) + 56|0);
 $185 = $184;
 $186 = $185;
 $187 = HEAP32[$186>>2]|0;
 $188 = (($185) + 4)|0;
 $189 = $188;
 $190 = HEAP32[$189>>2]|0;
 $191 = ((($s)) + 64|0);
 $192 = $191;
 $193 = $192;
 $194 = HEAP32[$193>>2]|0;
 $195 = (($192) + 4)|0;
 $196 = $195;
 $197 = HEAP32[$196>>2]|0;
 $198 = $173;$199 = $176;$222 = $194;$223 = $197;$227 = $187;$228 = $180;$230 = $190;$231 = $183;$256 = $145;$257 = $148;$281 = $152;$283 = $155;$287 = $159;$289 = $162;$294 = $166;$295 = $169;$i$29 = 0;
 while(1) {
  $200 = (_bitshift64Lshr(($198|0),($199|0),14)|0);
  $201 = tempRet0;
  $202 = (_bitshift64Shl(($198|0),($199|0),50)|0);
  $203 = tempRet0;
  $204 = $202 | $200;
  $205 = $203 | $201;
  $206 = (_bitshift64Lshr(($198|0),($199|0),18)|0);
  $207 = tempRet0;
  $208 = (_bitshift64Shl(($198|0),($199|0),46)|0);
  $209 = tempRet0;
  $210 = $208 | $206;
  $211 = $209 | $207;
  $212 = $204 ^ $210;
  $213 = $205 ^ $211;
  $214 = (_bitshift64Lshr(($198|0),($199|0),41)|0);
  $215 = tempRet0;
  $216 = (_bitshift64Shl(($198|0),($199|0),23)|0);
  $217 = tempRet0;
  $218 = $216 | $214;
  $219 = $217 | $215;
  $220 = $212 ^ $218;
  $221 = $213 ^ $219;
  $224 = (_i64Add(($220|0),($221|0),($222|0),($223|0))|0);
  $225 = tempRet0;
  $226 = $227 ^ $228;
  $229 = $230 ^ $231;
  $232 = $226 & $198;
  $233 = $229 & $199;
  $234 = $232 ^ $227;
  $235 = $233 ^ $230;
  $236 = (_i64Add(($224|0),($225|0),($234|0),($235|0))|0);
  $237 = tempRet0;
  $238 = (6432 + ($i$29<<3)|0);
  $239 = $238;
  $240 = $239;
  $241 = HEAP32[$240>>2]|0;
  $242 = (($239) + 4)|0;
  $243 = $242;
  $244 = HEAP32[$243>>2]|0;
  $245 = (_i64Add(($236|0),($237|0),($241|0),($244|0))|0);
  $246 = tempRet0;
  $247 = (($W) + ($i$29<<3)|0);
  $248 = $247;
  $249 = $248;
  $250 = HEAP32[$249>>2]|0;
  $251 = (($248) + 4)|0;
  $252 = $251;
  $253 = HEAP32[$252>>2]|0;
  $254 = (_i64Add(($245|0),($246|0),($250|0),($253|0))|0);
  $255 = tempRet0;
  $258 = (_bitshift64Lshr(($256|0),($257|0),28)|0);
  $259 = tempRet0;
  $260 = (_bitshift64Shl(($256|0),($257|0),36)|0);
  $261 = tempRet0;
  $262 = $260 | $258;
  $263 = $261 | $259;
  $264 = (_bitshift64Lshr(($256|0),($257|0),34)|0);
  $265 = tempRet0;
  $266 = (_bitshift64Shl(($256|0),($257|0),30)|0);
  $267 = tempRet0;
  $268 = $266 | $264;
  $269 = $267 | $265;
  $270 = $262 ^ $268;
  $271 = $263 ^ $269;
  $272 = (_bitshift64Lshr(($256|0),($257|0),39)|0);
  $273 = tempRet0;
  $274 = (_bitshift64Shl(($256|0),($257|0),25)|0);
  $275 = tempRet0;
  $276 = $274 | $272;
  $277 = $275 | $273;
  $278 = $270 ^ $276;
  $279 = $271 ^ $277;
  $280 = $281 & $256;
  $282 = $283 & $257;
  $284 = $281 | $256;
  $285 = $283 | $257;
  $286 = $287 & $284;
  $288 = $289 & $285;
  $290 = $286 | $280;
  $291 = $288 | $282;
  $292 = (_i64Add(($278|0),($279|0),($290|0),($291|0))|0);
  $293 = tempRet0;
  $296 = (_i64Add(($254|0),($255|0),($294|0),($295|0))|0);
  $297 = tempRet0;
  $298 = (_i64Add(($292|0),($293|0),($254|0),($255|0))|0);
  $299 = tempRet0;
  $300 = (($i$29) + 1)|0;
  $exitcond = ($300|0)==(80);
  if ($exitcond) {
   $301 = $298;$302 = $299;$309 = $256;$310 = $257;$317 = $281;$318 = $283;$325 = $287;$326 = $289;$333 = $296;$334 = $297;$341 = $198;$342 = $199;$349 = $228;$350 = $231;$357 = $227;$358 = $230;
   break;
  } else {
   $295$phi = $289;$294$phi = $287;$289$phi = $283;$287$phi = $281;$283$phi = $257;$281$phi = $256;$231$phi = $199;$230$phi = $231;$228$phi = $198;$227$phi = $228;$223$phi = $230;$222$phi = $227;$198 = $296;$199 = $297;$256 = $298;$257 = $299;$i$29 = $300;$295 = $295$phi;$294 = $294$phi;$289 = $289$phi;$287 = $287$phi;$283 = $283$phi;$281 = $281$phi;$231 = $231$phi;$230 = $230$phi;$228 = $228$phi;$227 = $227$phi;$223 = $223$phi;$222 = $222$phi;
  }
 }
 $303 = (_i64Add(($145|0),($148|0),($301|0),($302|0))|0);
 $304 = tempRet0;
 $305 = $142;
 $306 = $305;
 HEAP32[$306>>2] = $303;
 $307 = (($305) + 4)|0;
 $308 = $307;
 HEAP32[$308>>2] = $304;
 $311 = (_i64Add(($152|0),($155|0),($309|0),($310|0))|0);
 $312 = tempRet0;
 $313 = $149;
 $314 = $313;
 HEAP32[$314>>2] = $311;
 $315 = (($313) + 4)|0;
 $316 = $315;
 HEAP32[$316>>2] = $312;
 $319 = (_i64Add(($159|0),($162|0),($317|0),($318|0))|0);
 $320 = tempRet0;
 $321 = $156;
 $322 = $321;
 HEAP32[$322>>2] = $319;
 $323 = (($321) + 4)|0;
 $324 = $323;
 HEAP32[$324>>2] = $320;
 $327 = (_i64Add(($166|0),($169|0),($325|0),($326|0))|0);
 $328 = tempRet0;
 $329 = $163;
 $330 = $329;
 HEAP32[$330>>2] = $327;
 $331 = (($329) + 4)|0;
 $332 = $331;
 HEAP32[$332>>2] = $328;
 $335 = (_i64Add(($173|0),($176|0),($333|0),($334|0))|0);
 $336 = tempRet0;
 $337 = $170;
 $338 = $337;
 HEAP32[$338>>2] = $335;
 $339 = (($337) + 4)|0;
 $340 = $339;
 HEAP32[$340>>2] = $336;
 $343 = (_i64Add(($180|0),($183|0),($341|0),($342|0))|0);
 $344 = tempRet0;
 $345 = $177;
 $346 = $345;
 HEAP32[$346>>2] = $343;
 $347 = (($345) + 4)|0;
 $348 = $347;
 HEAP32[$348>>2] = $344;
 $351 = (_i64Add(($187|0),($190|0),($349|0),($350|0))|0);
 $352 = tempRet0;
 $353 = $184;
 $354 = $353;
 HEAP32[$354>>2] = $351;
 $355 = (($353) + 4)|0;
 $356 = $355;
 HEAP32[$356>>2] = $352;
 $359 = (_i64Add(($194|0),($197|0),($357|0),($358|0))|0);
 $360 = tempRet0;
 $361 = $191;
 $362 = $361;
 HEAP32[$362>>2] = $359;
 $363 = (($361) + 4)|0;
 $364 = $363;
 HEAP32[$364>>2] = $360;
 STACKTOP = sp;return;
}
function _sha256_update($s,$m,$len) {
 $s = $s|0;
 $m = $m|0;
 $len = $len|0;
 var $$0$lcssa = 0, $$0$ph = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0$lcssa = 0, $p$0$ph = 0, $p$01 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $2 & 63;
 $7 = (_i64Add(($2|0),($5|0),($len|0),0)|0);
 $8 = tempRet0;
 $9 = $s;
 $10 = $9;
 HEAP32[$10>>2] = $7;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $8;
 $13 = ($6|0)==(0);
 do {
  if ($13) {
   $$0$ph = $len;$p$0$ph = $m;
   label = 5;
  } else {
   $14 = (64 - ($6))|0;
   $15 = ($14>>>0)>($len>>>0);
   $16 = (((($s)) + 40|0) + ($6)|0);
   if ($15) {
    _memcpy(($16|0),($m|0),($len|0))|0;
    break;
   } else {
    $17 = ((($s)) + 40|0);
    _memcpy(($16|0),($m|0),($14|0))|0;
    $18 = (($len) - ($14))|0;
    $19 = (($m) + ($14)|0);
    _processblock45($s,$17);
    $$0$ph = $18;$p$0$ph = $19;
    label = 5;
    break;
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $20 = ($$0$ph>>>0)>(63);
  if ($20) {
   $21 = (($$0$ph) + -64)|0;
   $22 = $21 & -64;
   $23 = (($22) + 64)|0;
   $scevgep = (($p$0$ph) + ($23)|0);
   $$02 = $$0$ph;$p$01 = $p$0$ph;
   while(1) {
    _processblock45($s,$p$01);
    $24 = (($$02) + -64)|0;
    $25 = ((($p$01)) + 64|0);
    $26 = ($24>>>0)>(63);
    if ($26) {
     $$02 = $24;$p$01 = $25;
    } else {
     break;
    }
   }
   $27 = (($21) - ($22))|0;
   $$0$lcssa = $27;$p$0$lcssa = $scevgep;
  } else {
   $$0$lcssa = $$0$ph;$p$0$lcssa = $p$0$ph;
  }
  $28 = ((($s)) + 40|0);
  _memcpy(($28|0),($p$0$lcssa|0),($$0$lcssa|0))|0;
 }
 return;
}
function _sha256_sum($s,$md) {
 $s = $s|0;
 $md = $md|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0;
 var $r$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $2 & 63;
 $7 = (($6) + 1)|0;
 $8 = (((($s)) + 40|0) + ($6)|0);
 HEAP8[$8>>0] = -128;
 $9 = ($7>>>0)>(56);
 $10 = ((($s)) + 40|0);
 if ($9) {
  $11 = (((($s)) + 40|0) + ($7)|0);
  $12 = $6 ^ 63;
  _memset(($11|0),0,($12|0))|0;
  _processblock45($s,$10);
  $r$0$i = 0;
 } else {
  $r$0$i = $7;
 }
 $13 = (((($s)) + 40|0) + ($r$0$i)|0);
 $14 = (56 - ($r$0$i))|0;
 _memset(($13|0),0,($14|0))|0;
 $15 = $s;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (_bitshift64Shl(($17|0),($20|0),3)|0);
 $22 = tempRet0;
 $23 = $s;
 $24 = $23;
 HEAP32[$24>>2] = $21;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = $22;
 $27 = (_bitshift64Lshr(($17|0),($20|0),53)|0);
 $28 = tempRet0;
 $29 = $27&255;
 $30 = ((($s)) + 96|0);
 HEAP8[$30>>0] = $29;
 $31 = (_bitshift64Lshr(($17|0),($20|0),45)|0);
 $32 = tempRet0;
 $33 = $31&255;
 $34 = ((($s)) + 97|0);
 HEAP8[$34>>0] = $33;
 $35 = (_bitshift64Lshr(($17|0),($20|0),37)|0);
 $36 = tempRet0;
 $37 = $35&255;
 $38 = ((($s)) + 98|0);
 HEAP8[$38>>0] = $37;
 $39 = (_bitshift64Lshr(($17|0),($20|0),29)|0);
 $40 = tempRet0;
 $41 = $39&255;
 $42 = ((($s)) + 99|0);
 HEAP8[$42>>0] = $41;
 $43 = (_bitshift64Lshr(($17|0),($20|0),21)|0);
 $44 = tempRet0;
 $45 = $43&255;
 $46 = ((($s)) + 100|0);
 HEAP8[$46>>0] = $45;
 $47 = (_bitshift64Lshr(($17|0),($20|0),13)|0);
 $48 = tempRet0;
 $49 = $47&255;
 $50 = ((($s)) + 101|0);
 HEAP8[$50>>0] = $49;
 $51 = (_bitshift64Lshr(($17|0),($20|0),5)|0);
 $52 = tempRet0;
 $53 = $51&255;
 $54 = ((($s)) + 102|0);
 HEAP8[$54>>0] = $53;
 $55 = $21&255;
 $56 = ((($s)) + 103|0);
 HEAP8[$56>>0] = $55;
 _processblock45($s,$10);
 $i$01 = 0;
 while(1) {
  $57 = (((($s)) + 8|0) + ($i$01<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $58 >>> 24;
  $60 = $59&255;
  $61 = $i$01 << 2;
  $62 = (($md) + ($61)|0);
  HEAP8[$62>>0] = $60;
  $63 = HEAP32[$57>>2]|0;
  $64 = $63 >>> 16;
  $65 = $64&255;
  $66 = $61 | 1;
  $67 = (($md) + ($66)|0);
  HEAP8[$67>>0] = $65;
  $68 = HEAP32[$57>>2]|0;
  $69 = $68 >>> 8;
  $70 = $69&255;
  $71 = $61 | 2;
  $72 = (($md) + ($71)|0);
  HEAP8[$72>>0] = $70;
  $73 = HEAP32[$57>>2]|0;
  $74 = $73&255;
  $75 = $61 | 3;
  $76 = (($md) + ($75)|0);
  HEAP8[$76>>0] = $74;
  $77 = (($i$01) + 1)|0;
  $exitcond = ($77|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $77;
  }
 }
 return;
}
function _hashmd($s,$n,$md) {
 $s = $s|0;
 $n = $n|0;
 $md = $md|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i$0$lcssa = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n>>>0)>(32);
 if ($0) {
  $1 = (($n) + -33)|0;
  $2 = $1 & -32;
  $i$01 = $n;
  while(1) {
   _sha256_update($s,$md,32);
   $3 = (($i$01) + -32)|0;
   $4 = ($3>>>0)>(32);
   if ($4) {
    $i$01 = $3;
   } else {
    break;
   }
  }
  $5 = (($n) + -32)|0;
  $6 = (($5) - ($2))|0;
  $i$0$lcssa = $6;
 } else {
  $i$0$lcssa = $n;
 }
 _sha256_update($s,$md,$i$0$lcssa);
 return;
}
function _processblock45($s,$buf) {
 $s = $s|0;
 $buf = $buf|0;
 var $$lcssa = 0, $$lcssa19 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $W = 0, $a$01 = 0, $a$01$lcssa = 0, $b$02 = 0, $b$02$lcssa = 0, $b$02$phi = 0, $c$03 = 0, $c$03$lcssa = 0, $c$03$phi = 0, $d$04 = 0, $d$04$phi = 0, $e$05 = 0, $e$05$lcssa = 0, $exitcond = 0, $exitcond14 = 0;
 var $exitcond15 = 0, $f$06 = 0, $f$06$lcssa = 0, $f$06$phi = 0, $g$07 = 0, $g$07$lcssa = 0, $g$07$phi = 0, $h$08 = 0, $h$08$phi = 0, $i$011 = 0, $i$110 = 0, $i$29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $W = sp;
 $i$011 = 0;
 while(1) {
  $0 = $i$011 << 2;
  $1 = (($buf) + ($0)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = $3 << 24;
  $5 = (($W) + ($i$011<<2)|0);
  $6 = $0 | 1;
  $7 = (($buf) + ($6)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = $9 << 16;
  $11 = $10 | $4;
  $12 = $0 | 2;
  $13 = (($buf) + ($12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $15 << 8;
  $17 = $11 | $16;
  $18 = $0 | 3;
  $19 = (($buf) + ($18)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $17 | $21;
  HEAP32[$5>>2] = $22;
  $23 = (($i$011) + 1)|0;
  $exitcond15 = ($23|0)==(16);
  if ($exitcond15) {
   break;
  } else {
   $i$011 = $23;
  }
 }
 $$pre = HEAP32[$W>>2]|0;
 $52 = $$pre;$i$110 = 16;
 while(1) {
  $24 = (($i$110) + -2)|0;
  $25 = (($W) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 >>> 17;
  $28 = $26 << 15;
  $29 = $28 | $27;
  $30 = $26 >>> 19;
  $31 = $26 << 13;
  $32 = $31 | $30;
  $33 = $26 >>> 10;
  $34 = $32 ^ $33;
  $35 = $34 ^ $29;
  $36 = (($i$110) + -7)|0;
  $37 = (($W) + ($36<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($i$110) + -15)|0;
  $40 = (($W) + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 >>> 7;
  $43 = $41 << 25;
  $44 = $43 | $42;
  $45 = $41 >>> 18;
  $46 = $41 << 14;
  $47 = $46 | $45;
  $48 = $41 >>> 3;
  $49 = $47 ^ $48;
  $50 = $49 ^ $44;
  $51 = (($52) + ($38))|0;
  $53 = (($51) + ($35))|0;
  $54 = (($53) + ($50))|0;
  $55 = (($W) + ($i$110<<2)|0);
  HEAP32[$55>>2] = $54;
  $56 = (($i$110) + 1)|0;
  $exitcond14 = ($56|0)==(64);
  if ($exitcond14) {
   break;
  } else {
   $52 = $41;$i$110 = $56;
  }
 }
 $57 = ((($s)) + 8|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($s)) + 12|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($s)) + 16|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ((($s)) + 20|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($s)) + 24|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ((($s)) + 28|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ((($s)) + 32|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ((($s)) + 36|0);
 $72 = HEAP32[$71>>2]|0;
 $a$01 = $58;$b$02 = $60;$c$03 = $62;$d$04 = $64;$e$05 = $66;$f$06 = $68;$g$07 = $70;$h$08 = $72;$i$29 = 0;
 while(1) {
  $73 = $e$05 >>> 6;
  $74 = $e$05 << 26;
  $75 = $74 | $73;
  $76 = $e$05 >>> 11;
  $77 = $e$05 << 21;
  $78 = $77 | $76;
  $79 = $75 ^ $78;
  $80 = $e$05 >>> 25;
  $81 = $e$05 << 7;
  $82 = $81 | $80;
  $83 = $79 ^ $82;
  $84 = (($83) + ($h$08))|0;
  $85 = $g$07 ^ $f$06;
  $86 = $85 & $e$05;
  $87 = $86 ^ $g$07;
  $88 = (($84) + ($87))|0;
  $89 = (20056 + ($i$29<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($88) + ($90))|0;
  $92 = (($W) + ($i$29<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($91) + ($93))|0;
  $95 = $a$01 >>> 2;
  $96 = $a$01 << 30;
  $97 = $96 | $95;
  $98 = $a$01 >>> 13;
  $99 = $a$01 << 19;
  $100 = $99 | $98;
  $101 = $97 ^ $100;
  $102 = $a$01 >>> 22;
  $103 = $a$01 << 10;
  $104 = $103 | $102;
  $105 = $101 ^ $104;
  $106 = $b$02 & $a$01;
  $107 = $b$02 | $a$01;
  $108 = $c$03 & $107;
  $109 = $108 | $106;
  $110 = (($105) + ($109))|0;
  $111 = (($94) + ($d$04))|0;
  $112 = (($110) + ($94))|0;
  $113 = (($i$29) + 1)|0;
  $exitcond = ($113|0)==(64);
  if ($exitcond) {
   $$lcssa = $111;$$lcssa19 = $112;$a$01$lcssa = $a$01;$b$02$lcssa = $b$02;$c$03$lcssa = $c$03;$e$05$lcssa = $e$05;$f$06$lcssa = $f$06;$g$07$lcssa = $g$07;
   break;
  } else {
   $h$08$phi = $g$07;$g$07$phi = $f$06;$f$06$phi = $e$05;$d$04$phi = $c$03;$c$03$phi = $b$02;$b$02$phi = $a$01;$a$01 = $112;$e$05 = $111;$i$29 = $113;$h$08 = $h$08$phi;$g$07 = $g$07$phi;$f$06 = $f$06$phi;$d$04 = $d$04$phi;$c$03 = $c$03$phi;$b$02 = $b$02$phi;
  }
 }
 $114 = (($58) + ($$lcssa19))|0;
 HEAP32[$57>>2] = $114;
 $115 = (($60) + ($a$01$lcssa))|0;
 HEAP32[$59>>2] = $115;
 $116 = (($62) + ($b$02$lcssa))|0;
 HEAP32[$61>>2] = $116;
 $117 = (($64) + ($c$03$lcssa))|0;
 HEAP32[$63>>2] = $117;
 $118 = (($66) + ($$lcssa))|0;
 HEAP32[$65>>2] = $118;
 $119 = (($68) + ($e$05$lcssa))|0;
 HEAP32[$67>>2] = $119;
 $120 = (($70) + ($f$06$lcssa))|0;
 HEAP32[$69>>2] = $120;
 $121 = (($72) + ($g$07$lcssa))|0;
 HEAP32[$71>>2] = $121;
 STACKTOP = sp;return;
}
function _md5_update($s,$m,$len) {
 $s = $s|0;
 $m = $m|0;
 $len = $len|0;
 var $$0$lcssa = 0, $$0$ph = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0$lcssa = 0, $p$0$ph = 0, $p$01 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $2 & 63;
 $7 = (_i64Add(($2|0),($5|0),($len|0),0)|0);
 $8 = tempRet0;
 $9 = $s;
 $10 = $9;
 HEAP32[$10>>2] = $7;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $8;
 $13 = ($6|0)==(0);
 do {
  if ($13) {
   $$0$ph = $len;$p$0$ph = $m;
   label = 5;
  } else {
   $14 = (64 - ($6))|0;
   $15 = ($14>>>0)>($len>>>0);
   $16 = (((($s)) + 24|0) + ($6)|0);
   if ($15) {
    _memcpy(($16|0),($m|0),($len|0))|0;
    break;
   } else {
    $17 = ((($s)) + 24|0);
    _memcpy(($16|0),($m|0),($14|0))|0;
    $18 = (($len) - ($14))|0;
    $19 = (($m) + ($14)|0);
    _processblock($s,$17);
    $$0$ph = $18;$p$0$ph = $19;
    label = 5;
    break;
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $20 = ($$0$ph>>>0)>(63);
  if ($20) {
   $21 = (($$0$ph) + -64)|0;
   $22 = $21 & -64;
   $23 = (($22) + 64)|0;
   $scevgep = (($p$0$ph) + ($23)|0);
   $$02 = $$0$ph;$p$01 = $p$0$ph;
   while(1) {
    _processblock($s,$p$01);
    $24 = (($$02) + -64)|0;
    $25 = ((($p$01)) + 64|0);
    $26 = ($24>>>0)>(63);
    if ($26) {
     $$02 = $24;$p$01 = $25;
    } else {
     break;
    }
   }
   $27 = (($21) - ($22))|0;
   $$0$lcssa = $27;$p$0$lcssa = $scevgep;
  } else {
   $$0$lcssa = $$0$ph;$p$0$lcssa = $p$0$ph;
  }
  $28 = ((($s)) + 24|0);
  _memcpy(($28|0),($p$0$lcssa|0),($$0$lcssa|0))|0;
 }
 return;
}
function _md5_sum($s,$md) {
 $s = $s|0;
 $md = $md|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0;
 var $r$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $2 & 63;
 $7 = (($6) + 1)|0;
 $8 = (((($s)) + 24|0) + ($6)|0);
 HEAP8[$8>>0] = -128;
 $9 = ($7>>>0)>(56);
 $10 = ((($s)) + 24|0);
 if ($9) {
  $11 = (((($s)) + 24|0) + ($7)|0);
  $12 = $6 ^ 63;
  _memset(($11|0),0,($12|0))|0;
  _processblock($s,$10);
  $r$0$i = 0;
 } else {
  $r$0$i = $7;
 }
 $13 = (((($s)) + 24|0) + ($r$0$i)|0);
 $14 = (56 - ($r$0$i))|0;
 _memset(($13|0),0,($14|0))|0;
 $15 = $s;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (_bitshift64Shl(($17|0),($20|0),3)|0);
 $22 = tempRet0;
 $23 = $s;
 $24 = $23;
 HEAP32[$24>>2] = $21;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = $22;
 $27 = $21&255;
 $28 = ((($s)) + 80|0);
 HEAP8[$28>>0] = $27;
 $29 = (_bitshift64Lshr(($17|0),($20|0),5)|0);
 $30 = tempRet0;
 $31 = $29&255;
 $32 = ((($s)) + 81|0);
 HEAP8[$32>>0] = $31;
 $33 = (_bitshift64Lshr(($17|0),($20|0),13)|0);
 $34 = tempRet0;
 $35 = $33&255;
 $36 = ((($s)) + 82|0);
 HEAP8[$36>>0] = $35;
 $37 = (_bitshift64Lshr(($17|0),($20|0),21)|0);
 $38 = tempRet0;
 $39 = $37&255;
 $40 = ((($s)) + 83|0);
 HEAP8[$40>>0] = $39;
 $41 = (_bitshift64Lshr(($17|0),($20|0),29)|0);
 $42 = tempRet0;
 $43 = $41&255;
 $44 = ((($s)) + 84|0);
 HEAP8[$44>>0] = $43;
 $45 = (_bitshift64Lshr(($17|0),($20|0),37)|0);
 $46 = tempRet0;
 $47 = $45&255;
 $48 = ((($s)) + 85|0);
 HEAP8[$48>>0] = $47;
 $49 = (_bitshift64Lshr(($17|0),($20|0),45)|0);
 $50 = tempRet0;
 $51 = $49&255;
 $52 = ((($s)) + 86|0);
 HEAP8[$52>>0] = $51;
 $53 = (_bitshift64Lshr(($17|0),($20|0),53)|0);
 $54 = tempRet0;
 $55 = $53&255;
 $56 = ((($s)) + 87|0);
 HEAP8[$56>>0] = $55;
 _processblock($s,$10);
 $i$01 = 0;
 while(1) {
  $57 = (((($s)) + 8|0) + ($i$01<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $58&255;
  $60 = $i$01 << 2;
  $61 = (($md) + ($60)|0);
  HEAP8[$61>>0] = $59;
  $62 = HEAP32[$57>>2]|0;
  $63 = $62 >>> 8;
  $64 = $63&255;
  $65 = $60 | 1;
  $66 = (($md) + ($65)|0);
  HEAP8[$66>>0] = $64;
  $67 = HEAP32[$57>>2]|0;
  $68 = $67 >>> 16;
  $69 = $68&255;
  $70 = $60 | 2;
  $71 = (($md) + ($70)|0);
  HEAP8[$71>>0] = $69;
  $72 = HEAP32[$57>>2]|0;
  $73 = $72 >>> 24;
  $74 = $73&255;
  $75 = $60 | 3;
  $76 = (($md) + ($75)|0);
  HEAP8[$76>>0] = $74;
  $77 = (($i$01) + 1)|0;
  $exitcond = ($77|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $77;
  }
 }
 return;
}
function _processblock($s,$buf) {
 $s = $s|0;
 $buf = $buf|0;
 var $$lcssa = 0, $$lcssa102 = 0, $$lcssa103 = 0, $$lcssa104 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $W = 0, $a$034 = 0, $a$123 = 0, $a$212 = 0, $a$34 = 0, $b$035 = 0, $b$124 = 0, $b$213 = 0, $b$35 = 0;
 var $c$036 = 0, $c$125 = 0, $c$214 = 0, $c$36 = 0, $d$037 = 0, $d$126 = 0, $d$215 = 0, $d$37 = 0, $exitcond = 0, $i$038 = 0, $i$133 = 0, $i$222 = 0, $i$311 = 0, $i$43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $W = sp;
 $i$038 = 0;
 while(1) {
  $0 = $i$038 << 2;
  $1 = (($buf) + ($0)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = (($W) + ($i$038<<2)|0);
  $5 = $0 | 1;
  $6 = (($buf) + ($5)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = $8 << 8;
  $10 = $9 | $3;
  $11 = $0 | 2;
  $12 = (($buf) + ($11)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $14 << 16;
  $16 = $10 | $15;
  $17 = $0 | 3;
  $18 = (($buf) + ($17)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $20 << 24;
  $22 = $16 | $21;
  HEAP32[$4>>2] = $22;
  $23 = (($i$038) + 1)|0;
  $exitcond = ($23|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $i$038 = $23;
  }
 }
 $24 = ((($s)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($s)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($s)) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($s)) + 20|0);
 $31 = HEAP32[$30>>2]|0;
 $a$034 = $25;$b$035 = $27;$c$036 = $29;$d$037 = $31;$i$133 = 0;
 while(1) {
  $32 = $d$037 ^ $c$036;
  $33 = $32 & $b$035;
  $34 = $33 ^ $d$037;
  $35 = (($W) + ($i$133<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (20312 + ($i$133<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($34) + ($a$034))|0;
  $40 = (($39) + ($36))|0;
  $41 = (($40) + ($38))|0;
  $42 = $41 << 7;
  $43 = $41 >>> 25;
  $44 = $43 | $42;
  $45 = (($44) + ($b$035))|0;
  $46 = $i$133 | 1;
  $47 = $c$036 ^ $b$035;
  $48 = $45 & $47;
  $49 = $48 ^ $c$036;
  $50 = (($W) + ($46<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (20312 + ($46<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($51) + ($d$037))|0;
  $55 = (($54) + ($53))|0;
  $56 = (($55) + ($49))|0;
  $57 = $56 << 12;
  $58 = $56 >>> 20;
  $59 = $58 | $57;
  $60 = (($59) + ($45))|0;
  $61 = $i$133 | 2;
  $62 = $45 ^ $b$035;
  $63 = $60 & $62;
  $64 = $63 ^ $b$035;
  $65 = (($W) + ($61<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (20312 + ($61<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($66) + ($c$036))|0;
  $70 = (($69) + ($68))|0;
  $71 = (($70) + ($64))|0;
  $72 = $71 << 17;
  $73 = $71 >>> 15;
  $74 = $73 | $72;
  $75 = (($74) + ($60))|0;
  $76 = $i$133 | 3;
  $77 = $60 ^ $45;
  $78 = $75 & $77;
  $79 = $78 ^ $45;
  $80 = (($W) + ($76<<2)|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (20312 + ($76<<2)|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($81) + ($b$035))|0;
  $85 = (($84) + ($83))|0;
  $86 = (($85) + ($79))|0;
  $87 = $86 << 22;
  $88 = $86 >>> 10;
  $89 = $88 | $87;
  $90 = (($89) + ($75))|0;
  $91 = (($i$133) + 4)|0;
  $92 = ($91>>>0)<(16);
  if ($92) {
   $a$034 = $45;$b$035 = $90;$c$036 = $75;$d$037 = $60;$i$133 = $91;
  } else {
   $a$123 = $45;$b$124 = $90;$c$125 = $75;$d$126 = $60;$i$222 = 16;
   break;
  }
 }
 while(1) {
  $93 = $c$125 ^ $b$124;
  $94 = $d$126 & $93;
  $95 = $94 ^ $c$125;
  $96 = ($i$222*5)|0;
  $97 = $96 & 12;
  $98 = $97 | 1;
  $99 = (($W) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (20312 + ($i$222<<2)|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (($95) + ($a$123))|0;
  $104 = (($103) + ($100))|0;
  $105 = (($104) + ($102))|0;
  $106 = $105 << 5;
  $107 = $105 >>> 27;
  $108 = $107 | $106;
  $109 = (($108) + ($b$124))|0;
  $110 = $i$222 | 1;
  $111 = $109 ^ $b$124;
  $112 = $111 & $c$125;
  $113 = $112 ^ $b$124;
  $114 = ($110*5)|0;
  $115 = (($114) + 1)|0;
  $116 = $115 & 15;
  $117 = (($W) + ($116<<2)|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (20312 + ($110<<2)|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($118) + ($d$126))|0;
  $122 = (($121) + ($120))|0;
  $123 = (($122) + ($113))|0;
  $124 = $123 << 9;
  $125 = $123 >>> 23;
  $126 = $125 | $124;
  $127 = (($126) + ($109))|0;
  $128 = $i$222 | 2;
  $129 = $127 ^ $109;
  $130 = $129 & $b$124;
  $131 = $130 ^ $109;
  $132 = ($128*5)|0;
  $133 = $132 & 14;
  $134 = $133 | 1;
  $135 = (($W) + ($134<<2)|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (20312 + ($128<<2)|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($136) + ($c$125))|0;
  $140 = (($139) + ($138))|0;
  $141 = (($140) + ($131))|0;
  $142 = $141 << 14;
  $143 = $141 >>> 18;
  $144 = $143 | $142;
  $145 = (($144) + ($127))|0;
  $146 = $i$222 | 3;
  $147 = $145 ^ $127;
  $148 = $147 & $109;
  $149 = $148 ^ $127;
  $150 = ($146*5)|0;
  $151 = (($150) + 1)|0;
  $152 = $151 & 15;
  $153 = (($W) + ($152<<2)|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (20312 + ($146<<2)|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = (($154) + ($b$124))|0;
  $158 = (($157) + ($156))|0;
  $159 = (($158) + ($149))|0;
  $160 = $159 << 20;
  $161 = $159 >>> 12;
  $162 = $161 | $160;
  $163 = (($162) + ($145))|0;
  $164 = (($i$222) + 4)|0;
  $165 = ($164>>>0)<(32);
  if ($165) {
   $a$123 = $109;$b$124 = $163;$c$125 = $145;$d$126 = $127;$i$222 = $164;
  } else {
   $a$212 = $109;$b$213 = $163;$c$214 = $145;$d$215 = $127;$i$311 = 32;
   break;
  }
 }
 while(1) {
  $166 = $c$214 ^ $b$213;
  $167 = $166 ^ $d$215;
  $168 = ($i$311*3)|0;
  $169 = (($168) + 5)|0;
  $170 = $169 & 13;
  $171 = (($W) + ($170<<2)|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (20312 + ($i$311<<2)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = (($167) + ($a$212))|0;
  $176 = (($175) + ($172))|0;
  $177 = (($176) + ($174))|0;
  $178 = $177 << 4;
  $179 = $177 >>> 28;
  $180 = $179 | $178;
  $181 = (($180) + ($b$213))|0;
  $182 = $i$311 | 1;
  $183 = $166 ^ $181;
  $184 = ($182*3)|0;
  $185 = (($184) + 5)|0;
  $186 = $185 & 15;
  $187 = (($W) + ($186<<2)|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = (20312 + ($182<<2)|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = (($188) + ($d$215))|0;
  $192 = (($191) + ($190))|0;
  $193 = (($192) + ($183))|0;
  $194 = $193 << 11;
  $195 = $193 >>> 21;
  $196 = $195 | $194;
  $197 = (($196) + ($181))|0;
  $198 = $i$311 | 2;
  $199 = $181 ^ $b$213;
  $200 = $199 ^ $197;
  $201 = ($198*3)|0;
  $202 = (($201) + 5)|0;
  $203 = $202 & 15;
  $204 = (($W) + ($203<<2)|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = (20312 + ($198<<2)|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = (($205) + ($c$214))|0;
  $209 = (($208) + ($207))|0;
  $210 = (($209) + ($200))|0;
  $211 = $210 << 16;
  $212 = $210 >>> 16;
  $213 = $212 | $211;
  $214 = (($213) + ($197))|0;
  $215 = $i$311 | 3;
  $216 = $197 ^ $181;
  $217 = $216 ^ $214;
  $218 = ($215*3)|0;
  $219 = (($218) + 5)|0;
  $220 = $219 & 15;
  $221 = (($W) + ($220<<2)|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = (20312 + ($215<<2)|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = (($222) + ($b$213))|0;
  $226 = (($225) + ($224))|0;
  $227 = (($226) + ($217))|0;
  $228 = $227 << 23;
  $229 = $227 >>> 9;
  $230 = $229 | $228;
  $231 = (($230) + ($214))|0;
  $232 = (($i$311) + 4)|0;
  $233 = ($232>>>0)<(48);
  if ($233) {
   $a$212 = $181;$b$213 = $231;$c$214 = $214;$d$215 = $197;$i$311 = $232;
  } else {
   $a$34 = $181;$b$35 = $231;$c$36 = $214;$d$37 = $197;$i$43 = 48;
   break;
  }
 }
 while(1) {
  $234 = $d$37 ^ -1;
  $235 = $b$35 | $234;
  $236 = $235 ^ $c$36;
  $237 = ($i$43*7)|0;
  $238 = $237 & 12;
  $239 = (($W) + ($238<<2)|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = (20312 + ($i$43<<2)|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = (($236) + ($a$34))|0;
  $244 = (($243) + ($240))|0;
  $245 = (($244) + ($242))|0;
  $246 = $245 << 6;
  $247 = $245 >>> 26;
  $248 = $247 | $246;
  $249 = (($248) + ($b$35))|0;
  $250 = $i$43 | 1;
  $251 = $c$36 ^ -1;
  $252 = $249 | $251;
  $253 = $252 ^ $b$35;
  $254 = ($250*7)|0;
  $255 = $254 & 15;
  $256 = (($W) + ($255<<2)|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = (20312 + ($250<<2)|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = (($257) + ($d$37))|0;
  $261 = (($260) + ($259))|0;
  $262 = (($261) + ($253))|0;
  $263 = $262 << 10;
  $264 = $262 >>> 22;
  $265 = $264 | $263;
  $266 = (($265) + ($249))|0;
  $267 = $i$43 | 2;
  $268 = $b$35 ^ -1;
  $269 = $266 | $268;
  $270 = $269 ^ $249;
  $271 = ($267*7)|0;
  $272 = $271 & 14;
  $273 = (($W) + ($272<<2)|0);
  $274 = HEAP32[$273>>2]|0;
  $275 = (20312 + ($267<<2)|0);
  $276 = HEAP32[$275>>2]|0;
  $277 = (($274) + ($c$36))|0;
  $278 = (($277) + ($276))|0;
  $279 = (($278) + ($270))|0;
  $280 = $279 << 15;
  $281 = $279 >>> 17;
  $282 = $281 | $280;
  $283 = (($282) + ($266))|0;
  $284 = $i$43 | 3;
  $285 = $249 ^ -1;
  $286 = $283 | $285;
  $287 = $286 ^ $266;
  $288 = ($284*7)|0;
  $289 = $288 & 15;
  $290 = (($W) + ($289<<2)|0);
  $291 = HEAP32[$290>>2]|0;
  $292 = (20312 + ($284<<2)|0);
  $293 = HEAP32[$292>>2]|0;
  $294 = (($291) + ($b$35))|0;
  $295 = (($294) + ($293))|0;
  $296 = (($295) + ($287))|0;
  $297 = $296 << 21;
  $298 = $296 >>> 11;
  $299 = $298 | $297;
  $300 = (($299) + ($283))|0;
  $301 = (($i$43) + 4)|0;
  $302 = ($301>>>0)<(64);
  if ($302) {
   $a$34 = $249;$b$35 = $300;$c$36 = $283;$d$37 = $266;$i$43 = $301;
  } else {
   $$lcssa = $249;$$lcssa102 = $266;$$lcssa103 = $283;$$lcssa104 = $300;
   break;
  }
 }
 $303 = (($25) + ($$lcssa))|0;
 HEAP32[$24>>2] = $303;
 $304 = (($27) + ($$lcssa104))|0;
 HEAP32[$26>>2] = $304;
 $305 = (($29) + ($$lcssa103))|0;
 HEAP32[$28>>2] = $305;
 $306 = (($31) + ($$lcssa102))|0;
 HEAP32[$30>>2] = $306;
 STACKTOP = sp;return;
}
function _BF_encrypt($ctx,$L,$R,$start,$end) {
 $ctx = $ctx|0;
 $L = $L|0;
 $R = $R|0;
 $start = $start|0;
 $end = $end|0;
 var $$0 = 0, $$01 = 0, $$123 = 0, $$14 = 0, $$lcssa = 0, $$lcssa14 = 0, $$lcssa15 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$05 = 0, $ptr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 68|0);
 $$0 = $L;$$01 = $R;$ptr$0 = $start;
 while(1) {
  $1 = HEAP32[$ctx>>2]|0;
  $2 = $1 ^ $$0;
  $$123 = $$01;$$14 = $2;$i$05 = 0;
  while(1) {
   $3 = $$14 & 255;
   $4 = $$14 >>> 8;
   $5 = $4 & 255;
   $6 = $$14 >>> 16;
   $7 = $6 & 255;
   $8 = $$14 >>> 24;
   $9 = (((($ctx)) + 3144|0) + ($3<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (((($ctx)) + 2120|0) + ($5<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (((($ctx)) + 1096|0) + ($7<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (((($ctx)) + 72|0) + ($8<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + ($14))|0;
   $18 = $17 ^ $12;
   $19 = $i$05 | 1;
   $20 = (($ctx) + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $21 ^ $$123;
   $23 = (($18) + ($10))|0;
   $24 = $22 ^ $23;
   $25 = $24 & 255;
   $26 = $24 >>> 8;
   $27 = $26 & 255;
   $28 = $24 >>> 16;
   $29 = $28 & 255;
   $30 = $24 >>> 24;
   $31 = (((($ctx)) + 3144|0) + ($25<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (((($ctx)) + 2120|0) + ($27<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (((($ctx)) + 1096|0) + ($29<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (((($ctx)) + 72|0) + ($30<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + ($36))|0;
   $40 = $39 ^ $34;
   $41 = (($19) + 1)|0;
   $42 = (($ctx) + ($41<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $43 ^ $$14;
   $45 = (($40) + ($32))|0;
   $46 = $44 ^ $45;
   $47 = (($i$05) + 2)|0;
   $48 = ($47|0)<(16);
   if ($48) {
    $$123 = $24;$$14 = $46;$i$05 = $47;
   } else {
    $$lcssa = $24;$$lcssa14 = $46;
    break;
   }
  }
  $49 = HEAP32[$0>>2]|0;
  $50 = $49 ^ $$lcssa;
  $51 = ((($ptr$0)) + 4|0);
  HEAP32[$ptr$0>>2] = $50;
  $52 = ((($ptr$0)) + 8|0);
  HEAP32[$51>>2] = $$lcssa14;
  $53 = ($52>>>0)<($end>>>0);
  if ($53) {
   $$0 = $50;$$01 = $$lcssa14;$ptr$0 = $52;
  } else {
   $$lcssa15 = $50;
   break;
  }
 }
 return ($$lcssa15|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[24760>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (24800 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (24800 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[24760>>2] = $22;
     } else {
      $23 = HEAP32[(24776)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(24768)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (24800 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (24800 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[24760>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[(24776)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(24768)>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(24780)>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = (24800 + ($92<<2)|0);
      $94 = HEAP32[24760>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[24760>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (24800 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (24800 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(24776)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(24768)>>2] = $81;
     HEAP32[(24780)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(24764)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (25064 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(24776)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (25064 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(24764)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(24764)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(24776)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(24776)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(24776)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(24768)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(24780)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (24800 + ($229<<2)|0);
       $231 = HEAP32[24760>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[24760>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (24800 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (24800 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(24776)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(24768)>>2] = $rsize$0$i$lcssa;
      HEAP32[(24780)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(24764)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (25064 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (25064 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(24768)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(24776)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (25064 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(24764)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(24764)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(24776)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(24776)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(24776)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (24800 + ($424<<2)|0);
          $426 = HEAP32[24760>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[24760>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (24800 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (24800 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(24776)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (25064 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(24764)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(24764)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(24776)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(24776)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(24768)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(24780)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(24780)>>2] = $514;
   HEAP32[(24768)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(24768)>>2] = 0;
   HEAP32[(24780)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(24772)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(24772)>>2] = $528;
  $529 = HEAP32[(24784)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(24784)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[25232>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(25240)>>2] = $538;
    HEAP32[(25236)>>2] = $538;
    HEAP32[(25244)>>2] = -1;
    HEAP32[(25248)>>2] = -1;
    HEAP32[(25252)>>2] = 0;
    HEAP32[(25204)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[25232>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(25240)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(25200)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(25192)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(25204)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(24784)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (25208);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(24772)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(25236)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(25192)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(25200)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(25240)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(25204)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(25204)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(25192)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(25192)>>2] = $632;
  $633 = HEAP32[(25196)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(25196)>>2] = $632;
  }
  $635 = HEAP32[(24784)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(24776)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(24776)>>2] = $tbase$255$i;
    }
    HEAP32[(25208)>>2] = $tbase$255$i;
    HEAP32[(25212)>>2] = $tsize$254$i;
    HEAP32[(25220)>>2] = 0;
    $640 = HEAP32[25232>>2]|0;
    HEAP32[(24796)>>2] = $640;
    HEAP32[(24792)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (24800 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (24800 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (24800 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(24784)>>2] = $654;
    HEAP32[(24772)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(25248)>>2]|0;
    HEAP32[(24788)>>2] = $659;
   } else {
    $sp$084$i = (25208);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(24772)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(24784)>>2] = $684;
       HEAP32[(24772)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(25248)>>2]|0;
       HEAP32[(24788)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(24776)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(24776)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (25208);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (25208);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(24772)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(24772)>>2] = $730;
        HEAP32[(24784)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(24780)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(24768)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(24768)>>2] = $736;
         HEAP32[(24780)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L332: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (24800 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[24760>>2]|0;
            $763 = $762 & $761;
            HEAP32[24760>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (25064 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(24764)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(24764)>>2] = $806;
             break L332;
            } else {
             $807 = HEAP32[(24776)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L332;
             }
            }
           } while(0);
           $814 = HEAP32[(24776)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(24776)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (24800 + ($840<<2)|0);
         $842 = HEAP32[24760>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[24760>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (24800 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (24800 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(24776)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (25064 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(24764)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(24764)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L418: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(24776)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(24776)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (25208);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(24784)>>2] = $953;
    HEAP32[(24772)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(25248)>>2]|0;
    HEAP32[(24788)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(25208)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(25208)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(25208)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(25208)+12>>2]|0;
    HEAP32[(25208)>>2] = $tbase$255$i;
    HEAP32[(25212)>>2] = $tsize$254$i;
    HEAP32[(25220)>>2] = 0;
    HEAP32[(25216)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (24800 + ($977<<2)|0);
      $979 = HEAP32[24760>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[24760>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (24800 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (24800 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(24776)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (25064 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(24764)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(24764)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(24776)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(24776)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(24772)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(24772)>>2] = $1062;
   $1063 = HEAP32[(24784)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(24784)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(24776)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(24780)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(24768)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (24800 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[24760>>2]|0;
     $36 = $35 & $34;
     HEAP32[24760>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (25064 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(24764)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(24764)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(24776)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(24776)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(24776)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(24784)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(24772)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(24772)>>2] = $120;
   HEAP32[(24784)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(24780)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(24780)>>2] = 0;
   HEAP32[(24768)>>2] = 0;
   return;
  }
  $125 = HEAP32[(24780)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(24768)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(24768)>>2] = $128;
   HEAP32[(24780)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (24800 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(24776)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[24760>>2]|0;
     $152 = $151 & $150;
     HEAP32[24760>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(24776)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(24776)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(24776)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (25064 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(24764)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(24764)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(24776)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(24776)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(24776)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(24780)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(24768)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (24800 + ($233<<2)|0);
  $235 = HEAP32[24760>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[24760>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (24800 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (24800 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(24776)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (25064 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(24764)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(24764)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(24776)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(24776)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(24792)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(24792)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (25216);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(24792)>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = ((($6)) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _realloc_in_place($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $oldmem$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  return (0|0);
 }
 $1 = ($bytes>>>0)>(4294967231);
 if (!($1)) {
  $3 = ($bytes>>>0)<(11);
  $4 = (($bytes) + 11)|0;
  $5 = $4 & -8;
  $6 = $3 ? 16 : $5;
  $7 = ((($oldmem)) + -8|0);
  $8 = (_try_realloc_chunk($7,$6)|0);
  $9 = ($8|0)==($7|0);
  $oldmem$ = $9 ? $oldmem : 0;
  return ($oldmem$|0);
 }
 $2 = (___errno_location()|0);
 HEAP32[$2>>2] = 12;
 return (0|0);
}
function _memalign($alignment,$bytes) {
 $alignment = $alignment|0;
 $bytes = $bytes|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($alignment>>>0)<(9);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $$0 = $1;
  return ($$0|0);
 } else {
  $2 = (_internal_memalign($alignment,$bytes)|0);
  $$0 = $2;
  return ($$0|0);
 }
 return (0)|0;
}
function _posix_memalign($pp,$alignment,$bytes) {
 $pp = $pp|0;
 $alignment = $alignment|0;
 $bytes = $bytes|0;
 var $$0 = 0, $$alignment = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($alignment|0)==(8);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = $alignment >>> 2;
   $3 = $alignment & 3;
   $4 = ($3|0)!=(0);
   $5 = ($2|0)==(0);
   $or$cond = $4 | $5;
   if ($or$cond) {
    $$0 = 22;
    return ($$0|0);
   }
   $6 = (($2) + 1073741823)|0;
   $7 = $6 & $2;
   $8 = ($7|0)==(0);
   if (!($8)) {
    $$0 = 22;
    return ($$0|0);
   }
   $9 = (-64 - ($alignment))|0;
   $10 = ($9>>>0)<($bytes>>>0);
   if ($10) {
    $$0 = 12;
    return ($$0|0);
   } else {
    $11 = ($alignment>>>0)<(16);
    $$alignment = $11 ? 16 : $alignment;
    $12 = (_internal_memalign($$alignment,$bytes)|0);
    $mem$0 = $12;
    break;
   }
  }
 } while(0);
 $13 = ($mem$0|0)==(0|0);
 if ($13) {
  $$0 = 12;
  return ($$0|0);
 }
 HEAP32[$pp>>2] = $mem$0;
 $$0 = 0;
 return ($$0|0);
}
function _valloc($bytes) {
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[25232>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $9 = HEAP32[(25236)>>2]|0;
  $10 = (_memalign($9,$bytes)|0);
  return ($10|0);
 }
 $2 = (_sysconf(30)|0);
 $3 = (($2) + -1)|0;
 $4 = $3 & $2;
 $5 = ($4|0)==(0);
 if (!($5)) {
  _abort();
  // unreachable;
 }
 HEAP32[(25240)>>2] = $2;
 HEAP32[(25236)>>2] = $2;
 HEAP32[(25244)>>2] = -1;
 HEAP32[(25248)>>2] = -1;
 HEAP32[(25252)>>2] = 0;
 HEAP32[(25204)>>2] = 0;
 $6 = (_time((0|0))|0);
 $7 = $6 & -16;
 $8 = $7 ^ 1431655768;
 HEAP32[25232>>2] = $8;
 $9 = HEAP32[(25236)>>2]|0;
 $10 = (_memalign($9,$bytes)|0);
 return ($10|0);
}
function _pvalloc($bytes) {
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[25232>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (_sysconf(30)|0);
   $3 = (($2) + -1)|0;
   $4 = $3 & $2;
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[(25240)>>2] = $2;
    HEAP32[(25236)>>2] = $2;
    HEAP32[(25244)>>2] = -1;
    HEAP32[(25248)>>2] = -1;
    HEAP32[(25252)>>2] = 0;
    HEAP32[(25204)>>2] = 0;
    $6 = (_time((0|0))|0);
    $7 = $6 & -16;
    $8 = $7 ^ 1431655768;
    HEAP32[25232>>2] = $8;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $9 = HEAP32[(25236)>>2]|0;
 $10 = (($bytes) + -1)|0;
 $11 = (($10) + ($9))|0;
 $12 = (0 - ($9))|0;
 $13 = $11 & $12;
 $14 = (_memalign($9,$13)|0);
 return ($14|0);
}
function _independent_calloc($n_elements,$elem_size,$chunks) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 $chunks = $chunks|0;
 var $0 = 0, $sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sz = sp;
 HEAP32[$sz>>2] = $elem_size;
 $0 = (_ialloc($n_elements,$sz,3,$chunks)|0);
 STACKTOP = sp;return ($0|0);
}
function _independent_comalloc($n_elements,$sizes,$chunks) {
 $n_elements = $n_elements|0;
 $sizes = $sizes|0;
 $chunks = $chunks|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ialloc($n_elements,$sizes,0,$chunks)|0);
 return ($0|0);
}
function _bulk_free($array,$nelem) {
 $array = $array|0;
 $nelem = $nelem|0;
 var $$pre$i = 0, $$pre$phi$iZ2D = 0, $$sum$i = 0, $$sum1$i = 0, $$sum23$i = 0, $$sum5$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$06$i = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($array) + ($nelem<<2)|0);
 $1 = ($nelem|0)==(0);
 if ($1) {
  return 0;
 } else {
  $a$06$i = $array;
 }
 L3: while(1) {
  $2 = HEAP32[$a$06$i>>2]|0;
  $3 = ($2|0)==(0|0);
  do {
   if ($3) {
    $$pre$i = ((($a$06$i)) + 4|0);
    $$pre$phi$iZ2D = $$pre$i;
   } else {
    $4 = ((($2)) + -8|0);
    $5 = ((($2)) + -4|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = $6 & -8;
    HEAP32[$a$06$i>>2] = 0;
    $8 = HEAP32[(24776)>>2]|0;
    $9 = ($4>>>0)<($8>>>0);
    $10 = $6 & 3;
    $11 = ($10|0)==(1);
    $or$cond$i = $9 | $11;
    if ($or$cond$i) {
     label = 9;
     break L3;
    }
    $12 = ((($a$06$i)) + 4|0);
    $13 = (($6) + -8)|0;
    $$sum$i = $13 & -8;
    $14 = ($12|0)==($0|0);
    if (!($14)) {
     $15 = HEAP32[$12>>2]|0;
     $$sum1$i = (($$sum$i) + 8)|0;
     $16 = (($2) + ($$sum1$i)|0);
     $17 = ($15|0)==($16|0);
     if ($17) {
      $$sum23$i = $$sum$i | 4;
      $18 = (($2) + ($$sum23$i)|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = $19 & -8;
      $21 = (($20) + ($7))|0;
      $22 = $6 & 1;
      $23 = $22 | $21;
      $24 = $23 | 2;
      HEAP32[$5>>2] = $24;
      $$sum5$i = (($21) + -4)|0;
      $25 = (($2) + ($$sum5$i)|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = $26 | 1;
      HEAP32[$25>>2] = $27;
      HEAP32[$12>>2] = $2;
      $$pre$phi$iZ2D = $12;
      break;
     }
    }
    _dispose_chunk($4,$7);
    $$pre$phi$iZ2D = $12;
   }
  } while(0);
  $28 = ($$pre$phi$iZ2D|0)==($0|0);
  if ($28) {
   label = 11;
   break;
  } else {
   $a$06$i = $$pre$phi$iZ2D;
  }
 }
 if ((label|0) == 9) {
  _abort();
  // unreachable;
 }
 else if ((label|0) == 11) {
  return 0;
 }
 return (0)|0;
}
function _malloc_trim($pad) {
 $pad = $pad|0;
 var $$$i = 0, $$lcssa = 0, $$lcssa6 = 0, $$sum$i$i = 0, $$sum2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $released$2$i = 0;
 var $sp$0$i$i = 0, $sp$0$i$i$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[25232>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (_sysconf(30)|0);
   $3 = (($2) + -1)|0;
   $4 = $3 & $2;
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[(25240)>>2] = $2;
    HEAP32[(25236)>>2] = $2;
    HEAP32[(25244)>>2] = -1;
    HEAP32[(25248)>>2] = -1;
    HEAP32[(25252)>>2] = 0;
    HEAP32[(25204)>>2] = 0;
    $6 = (_time((0|0))|0);
    $7 = $6 & -16;
    $8 = $7 ^ 1431655768;
    HEAP32[25232>>2] = $8;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $9 = ($pad>>>0)<(4294967232);
 if (!($9)) {
  $released$2$i = 0;
  return ($released$2$i|0);
 }
 $10 = HEAP32[(24784)>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $released$2$i = 0;
  return ($released$2$i|0);
 }
 $12 = (($pad) + 40)|0;
 $13 = HEAP32[(24772)>>2]|0;
 $14 = ($13>>>0)>($12>>>0);
 if ($14) {
  $15 = HEAP32[(25240)>>2]|0;
  $16 = (-41 - ($pad))|0;
  $17 = (($16) + ($13))|0;
  $18 = (($17) + ($15))|0;
  $19 = (($18>>>0) / ($15>>>0))&-1;
  $sp$0$i$i = (25208);
  while(1) {
   $20 = HEAP32[$sp$0$i$i>>2]|0;
   $21 = ($20>>>0)>($10>>>0);
   if (!($21)) {
    $22 = ((($sp$0$i$i)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (($20) + ($23)|0);
    $25 = ($24>>>0)>($10>>>0);
    if ($25) {
     $$lcssa = $sp$0$i$i;$$lcssa6 = $22;$sp$0$i$i$lcssa = $sp$0$i$i;
     break;
    }
   }
   $26 = ((($sp$0$i$i)) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $sp$0$i$i = $27;
  }
  $28 = (($19) + -1)|0;
  $29 = Math_imul($28, $15)|0;
  $30 = ((($sp$0$i$i$lcssa)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 & 8;
  $33 = ($32|0)==(0);
  if ($33) {
   $34 = (_sbrk(0)|0);
   $35 = HEAP32[$$lcssa>>2]|0;
   $36 = HEAP32[$$lcssa6>>2]|0;
   $37 = (($35) + ($36)|0);
   $38 = ($34|0)==($37|0);
   if ($38) {
    $39 = ($29>>>0)>(2147483646);
    $40 = (-2147483648 - ($15))|0;
    $$$i = $39 ? $40 : $29;
    $41 = (0 - ($$$i))|0;
    $42 = (_sbrk(($41|0))|0);
    $43 = (_sbrk(0)|0);
    $44 = ($42|0)!=((-1)|0);
    $45 = ($43>>>0)<($34>>>0);
    $or$cond$i = $44 & $45;
    if ($or$cond$i) {
     $46 = $34;
     $47 = $43;
     $48 = (($46) - ($47))|0;
     $49 = ($34|0)==($43|0);
     if (!($49)) {
      $50 = HEAP32[$$lcssa6>>2]|0;
      $51 = (($50) - ($48))|0;
      HEAP32[$$lcssa6>>2] = $51;
      $52 = HEAP32[(25192)>>2]|0;
      $53 = (($52) - ($48))|0;
      HEAP32[(25192)>>2] = $53;
      $54 = HEAP32[(24784)>>2]|0;
      $55 = HEAP32[(24772)>>2]|0;
      $56 = (($55) - ($48))|0;
      $57 = ((($54)) + 8|0);
      $58 = $57;
      $59 = $58 & 7;
      $60 = ($59|0)==(0);
      $61 = (0 - ($58))|0;
      $62 = $61 & 7;
      $63 = $60 ? 0 : $62;
      $64 = (($54) + ($63)|0);
      $65 = (($56) - ($63))|0;
      HEAP32[(24784)>>2] = $64;
      HEAP32[(24772)>>2] = $65;
      $66 = $65 | 1;
      $$sum$i$i = (($63) + 4)|0;
      $67 = (($54) + ($$sum$i$i)|0);
      HEAP32[$67>>2] = $66;
      $$sum2$i$i = (($56) + 4)|0;
      $68 = (($54) + ($$sum2$i$i)|0);
      HEAP32[$68>>2] = 40;
      $69 = HEAP32[(25248)>>2]|0;
      HEAP32[(24788)>>2] = $69;
      $released$2$i = 1;
      return ($released$2$i|0);
     }
    }
   }
  }
 }
 $70 = HEAP32[(24772)>>2]|0;
 $71 = HEAP32[(24788)>>2]|0;
 $72 = ($70>>>0)>($71>>>0);
 if (!($72)) {
  $released$2$i = 0;
  return ($released$2$i|0);
 }
 HEAP32[(24788)>>2] = -1;
 $released$2$i = 0;
 return ($released$2$i|0);
}
function _malloc_footprint() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(25192)>>2]|0;
 return ($0|0);
}
function _malloc_max_footprint() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(25196)>>2]|0;
 return ($0|0);
}
function _malloc_footprint_limit() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(25200)>>2]|0;
 $1 = ($0|0)==(0);
 $2 = $1 ? -1 : $0;
 return ($2|0);
}
function _malloc_set_footprint_limit($bytes) {
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes|0)==(-1);
 if ($0) {
  $result$0 = 0;
 } else {
  $1 = HEAP32[(25240)>>2]|0;
  $2 = (($bytes) + -1)|0;
  $3 = (($2) + ($1))|0;
  $4 = (0 - ($1))|0;
  $5 = $3 & $4;
  $result$0 = $5;
 }
 HEAP32[(25200)>>2] = $result$0;
 return ($result$0|0);
}
function _mallinfo($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mfree$017$i = 0, $mfree$1$lcssa$i = 0, $mfree$1$lcssa$i$lcssa = 0;
 var $mfree$13$i = 0, $mfree$2$i = 0, $nfree$016$i = 0, $nfree$1$lcssa$i = 0, $nfree$1$lcssa$i$lcssa = 0, $nfree$12$i = 0, $nfree$2$i = 0, $nm$sroa$0$0$i = 0, $nm$sroa$10$0$i = 0, $nm$sroa$5$0$i = 0, $nm$sroa$63$0$i = 0, $nm$sroa$7$0$i = 0, $nm$sroa$84$0$i = 0, $nm$sroa$9$0$i = 0, $or$cond$i = 0, $q$0$in5$i = 0, $s$019$i = 0, $sum$018$i = 0, $sum$1$lcssa$i = 0, $sum$1$lcssa$i$lcssa = 0;
 var $sum$14$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[25232>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (_sysconf(30)|0);
   $3 = (($2) + -1)|0;
   $4 = $3 & $2;
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[(25240)>>2] = $2;
    HEAP32[(25236)>>2] = $2;
    HEAP32[(25244)>>2] = -1;
    HEAP32[(25248)>>2] = -1;
    HEAP32[(25252)>>2] = 0;
    HEAP32[(25204)>>2] = 0;
    $6 = (_time((0|0))|0);
    $7 = $6 & -16;
    $8 = $7 ^ 1431655768;
    HEAP32[25232>>2] = $8;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $9 = HEAP32[(24784)>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $nm$sroa$0$0$i = 0;$nm$sroa$10$0$i = 0;$nm$sroa$5$0$i = 0;$nm$sroa$63$0$i = 0;$nm$sroa$7$0$i = 0;$nm$sroa$84$0$i = 0;$nm$sroa$9$0$i = 0;
 } else {
  $11 = HEAP32[(24772)>>2]|0;
  $12 = (($11) + 40)|0;
  $mfree$017$i = $12;$nfree$016$i = 1;$s$019$i = (25208);$sum$018$i = $12;
  while(1) {
   $13 = HEAP32[$s$019$i>>2]|0;
   $14 = ((($13)) + 8|0);
   $15 = $14;
   $16 = $15 & 7;
   $17 = ($16|0)==(0);
   $18 = (0 - ($15))|0;
   $19 = $18 & 7;
   $20 = $17 ? 0 : $19;
   $21 = (($13) + ($20)|0);
   $22 = ((($s$019$i)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($13) + ($23)|0);
   $mfree$13$i = $mfree$017$i;$nfree$12$i = $nfree$016$i;$q$0$in5$i = $21;$sum$14$i = $sum$018$i;
   while(1) {
    $25 = ($q$0$in5$i>>>0)>=($24>>>0);
    $26 = ($q$0$in5$i|0)==($9|0);
    $or$cond$i = $25 | $26;
    if ($or$cond$i) {
     $mfree$1$lcssa$i = $mfree$13$i;$nfree$1$lcssa$i = $nfree$12$i;$sum$1$lcssa$i = $sum$14$i;
     break;
    }
    $27 = ((($q$0$in5$i)) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)==(7);
    if ($29) {
     $mfree$1$lcssa$i = $mfree$13$i;$nfree$1$lcssa$i = $nfree$12$i;$sum$1$lcssa$i = $sum$14$i;
     break;
    }
    $30 = $28 & -8;
    $31 = (($30) + ($sum$14$i))|0;
    $32 = $28 & 3;
    $33 = ($32|0)==(1);
    $34 = $33&1;
    $nfree$2$i = (($34) + ($nfree$12$i))|0;
    $35 = $33 ? $30 : 0;
    $mfree$2$i = (($35) + ($mfree$13$i))|0;
    $36 = (($q$0$in5$i) + ($30)|0);
    $37 = ($36>>>0)<($13>>>0);
    if ($37) {
     $mfree$1$lcssa$i = $mfree$2$i;$nfree$1$lcssa$i = $nfree$2$i;$sum$1$lcssa$i = $31;
     break;
    } else {
     $mfree$13$i = $mfree$2$i;$nfree$12$i = $nfree$2$i;$q$0$in5$i = $36;$sum$14$i = $31;
    }
   }
   $38 = ((($s$019$i)) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(0|0);
   if ($40) {
    $mfree$1$lcssa$i$lcssa = $mfree$1$lcssa$i;$nfree$1$lcssa$i$lcssa = $nfree$1$lcssa$i;$sum$1$lcssa$i$lcssa = $sum$1$lcssa$i;
    break;
   } else {
    $mfree$017$i = $mfree$1$lcssa$i;$nfree$016$i = $nfree$1$lcssa$i;$s$019$i = $39;$sum$018$i = $sum$1$lcssa$i;
   }
  }
  $41 = HEAP32[(25192)>>2]|0;
  $42 = (($41) - ($sum$1$lcssa$i$lcssa))|0;
  $43 = HEAP32[(25196)>>2]|0;
  $44 = (($41) - ($mfree$1$lcssa$i$lcssa))|0;
  $nm$sroa$0$0$i = $sum$1$lcssa$i$lcssa;$nm$sroa$10$0$i = $11;$nm$sroa$5$0$i = $nfree$1$lcssa$i$lcssa;$nm$sroa$63$0$i = $42;$nm$sroa$7$0$i = $43;$nm$sroa$84$0$i = $44;$nm$sroa$9$0$i = $mfree$1$lcssa$i$lcssa;
 }
 HEAP32[$agg$result>>2] = $nm$sroa$0$0$i;
 $45 = ((($agg$result)) + 4|0);
 HEAP32[$45>>2] = $nm$sroa$5$0$i;
 $46 = ((($agg$result)) + 8|0);
 $47 = $46;
 $48 = $47;
 HEAP32[$48>>2] = 0;
 $49 = (($47) + 4)|0;
 $50 = $49;
 HEAP32[$50>>2] = 0;
 $51 = ((($agg$result)) + 16|0);
 HEAP32[$51>>2] = $nm$sroa$63$0$i;
 $52 = ((($agg$result)) + 20|0);
 HEAP32[$52>>2] = $nm$sroa$7$0$i;
 $53 = ((($agg$result)) + 24|0);
 HEAP32[$53>>2] = 0;
 $54 = ((($agg$result)) + 28|0);
 HEAP32[$54>>2] = $nm$sroa$84$0$i;
 $55 = ((($agg$result)) + 32|0);
 HEAP32[$55>>2] = $nm$sroa$9$0$i;
 $56 = ((($agg$result)) + 36|0);
 HEAP32[$56>>2] = $nm$sroa$10$0$i;
 return;
}
function _malloc_stats() {
 var $$neg2$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $fp$0$i = 0, $maxfp$0$i = 0, $or$cond$i = 0, $q$0$in4$i = 0, $s$010$i = 0, $used$09$i = 0, $used$1$lcssa$i = 0, $used$13$i = 0, $used$2$i = 0, $used$3$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[25232>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (_sysconf(30)|0);
   $3 = (($2) + -1)|0;
   $4 = $3 & $2;
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[(25240)>>2] = $2;
    HEAP32[(25236)>>2] = $2;
    HEAP32[(25244)>>2] = -1;
    HEAP32[(25248)>>2] = -1;
    HEAP32[(25252)>>2] = 0;
    HEAP32[(25204)>>2] = 0;
    $6 = (_time((0|0))|0);
    $7 = $6 & -16;
    $8 = $7 ^ 1431655768;
    HEAP32[25232>>2] = $8;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $9 = HEAP32[(24784)>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $fp$0$i = 0;$maxfp$0$i = 0;$used$3$i = 0;
  $41 = HEAP32[7488>>2]|0;
  HEAP32[$vararg_buffer>>2] = $maxfp$0$i;
  (_fprintf($41,180706,$vararg_buffer)|0);
  HEAP32[$vararg_buffer1>>2] = $fp$0$i;
  (_fprintf($41,180732,$vararg_buffer1)|0);
  HEAP32[$vararg_buffer4>>2] = $used$3$i;
  (_fprintf($41,180758,$vararg_buffer4)|0);
  STACKTOP = sp;return;
 }
 $11 = HEAP32[(25196)>>2]|0;
 $12 = HEAP32[(25192)>>2]|0;
 $13 = HEAP32[(24772)>>2]|0;
 $$neg2$i = (($12) + -40)|0;
 $14 = (($$neg2$i) - ($13))|0;
 $s$010$i = (25208);$used$09$i = $14;
 while(1) {
  $15 = HEAP32[$s$010$i>>2]|0;
  $16 = ((($15)) + 8|0);
  $17 = $16;
  $18 = $17 & 7;
  $19 = ($18|0)==(0);
  $20 = (0 - ($17))|0;
  $21 = $20 & 7;
  $22 = $19 ? 0 : $21;
  $23 = (($15) + ($22)|0);
  $24 = ((($s$010$i)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($15) + ($25)|0);
  $q$0$in4$i = $23;$used$13$i = $used$09$i;
  while(1) {
   $27 = ($q$0$in4$i>>>0)>=($26>>>0);
   $28 = ($q$0$in4$i|0)==($9|0);
   $or$cond$i = $27 | $28;
   if ($or$cond$i) {
    $used$1$lcssa$i = $used$13$i;
    break;
   }
   $29 = ((($q$0$in4$i)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(7);
   if ($31) {
    $used$1$lcssa$i = $used$13$i;
    break;
   }
   $32 = $30 & 3;
   $33 = ($32|0)==(1);
   $34 = $30 & -8;
   $35 = $33 ? $34 : 0;
   $used$2$i = (($used$13$i) - ($35))|0;
   $36 = (($q$0$in4$i) + ($34)|0);
   $37 = ($36>>>0)<($15>>>0);
   if ($37) {
    $used$1$lcssa$i = $used$2$i;
    break;
   } else {
    $q$0$in4$i = $36;$used$13$i = $used$2$i;
   }
  }
  $38 = ((($s$010$i)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(0|0);
  if ($40) {
   $fp$0$i = $12;$maxfp$0$i = $11;$used$3$i = $used$1$lcssa$i;
   break;
  } else {
   $s$010$i = $39;$used$09$i = $used$1$lcssa$i;
  }
 }
 $41 = HEAP32[7488>>2]|0;
 HEAP32[$vararg_buffer>>2] = $maxfp$0$i;
 (_fprintf($41,180706,$vararg_buffer)|0);
 HEAP32[$vararg_buffer1>>2] = $fp$0$i;
 (_fprintf($41,180732,$vararg_buffer1)|0);
 HEAP32[$vararg_buffer4>>2] = $used$3$i;
 (_fprintf($41,180758,$vararg_buffer4)|0);
 STACKTOP = sp;return;
}
function _mallopt($param_number,$value) {
 $param_number = $param_number|0;
 $value = $value|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[25232>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (_sysconf(30)|0);
   $3 = (($2) + -1)|0;
   $4 = $3 & $2;
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[(25240)>>2] = $2;
    HEAP32[(25236)>>2] = $2;
    HEAP32[(25244)>>2] = -1;
    HEAP32[(25248)>>2] = -1;
    HEAP32[(25252)>>2] = 0;
    HEAP32[(25204)>>2] = 0;
    $6 = (_time((0|0))|0);
    $7 = $6 & -16;
    $8 = $7 ^ 1431655768;
    HEAP32[25232>>2] = $8;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 switch ($param_number|0) {
 case -1:  {
  HEAP32[(25248)>>2] = $value;
  $$0$i = 1;
  return ($$0$i|0);
  break;
 }
 case -2:  {
  $9 = HEAP32[(25236)>>2]|0;
  $10 = ($9>>>0)>($value>>>0);
  if ($10) {
   $$0$i = 0;
   return ($$0$i|0);
  }
  $11 = (($value) + -1)|0;
  $12 = $11 & $value;
  $13 = ($12|0)==(0);
  if (!($13)) {
   $$0$i = 0;
   return ($$0$i|0);
  }
  HEAP32[(25240)>>2] = $value;
  $$0$i = 1;
  return ($$0$i|0);
  break;
 }
 case -3:  {
  HEAP32[(25244)>>2] = $value;
  $$0$i = 1;
  return ($$0$i|0);
  break;
 }
 default: {
  $$0$i = 0;
  return ($$0$i|0);
 }
 }
 return (0)|0;
}
function _malloc_usable_size($mem) {
 $mem = $mem|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($mem)) + -4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 3;
 $4 = ($3|0)==(1);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = $2 & -8;
 $6 = ($3|0)==(0);
 $7 = $6 ? 8 : 4;
 $8 = (($5) - ($7))|0;
 $$0 = $8;
 return ($$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(24776)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(25240)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[(24784)>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[(24772)>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[(24784)>>2] = $36;
  HEAP32[(24772)>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[(24780)>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[(24768)>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[(24768)>>2] = $storemerge21;
  HEAP32[(24780)>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = (24800 + ($77<<2)|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = ((($74)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[24760>>2]|0;
    $88 = $87 & $86;
    HEAP32[24760>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = ((($76)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($76)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = ((($74)) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = ((($R$0)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = ((($R$0)) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = ((($101)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = ((($98)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (25064 + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[(24764)>>2]|0;
      $131 = $130 & $129;
      HEAP32[(24764)>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[(24776)>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = ((($96)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = ((($96)) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[(24776)>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = ((($R$1)) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = ((($R$1)) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = ((($143)) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[(24776)>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = ((($R$1)) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = ((($149)) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _internal_memalign($alignment,$bytes) {
 $alignment = $alignment|0;
 $bytes = $bytes|0;
 var $$1 = 0, $$alignment = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $8 = 0, $9 = 0, $a$0 = 0, $mem$0 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($alignment>>>0)<(16);
 $$alignment = $0 ? 16 : $alignment;
 $1 = (($$alignment) + -1)|0;
 $2 = $1 & $$alignment;
 $3 = ($2|0)==(0);
 if ($3) {
  $$1 = $$alignment;
 } else {
  $a$0 = 16;
  while(1) {
   $4 = ($a$0>>>0)<($$alignment>>>0);
   $5 = $a$0 << 1;
   if ($4) {
    $a$0 = $5;
   } else {
    $$1 = $a$0;
    break;
   }
  }
 }
 $6 = (-64 - ($$1))|0;
 $7 = ($6>>>0)>($bytes>>>0);
 if (!($7)) {
  $8 = (___errno_location()|0);
  HEAP32[$8>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $9 = ($bytes>>>0)<(11);
 $10 = (($bytes) + 11)|0;
 $11 = $10 & -8;
 $12 = $9 ? 16 : $11;
 $13 = (($12) + 12)|0;
 $14 = (($13) + ($$1))|0;
 $15 = (_malloc($14)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $17 = ((($15)) + -8|0);
 $18 = $15;
 $19 = (($$1) + -1)|0;
 $20 = $18 & $19;
 $21 = ($20|0)==(0);
 do {
  if ($21) {
   $p$0 = $17;
  } else {
   $22 = (($15) + ($19)|0);
   $23 = $22;
   $24 = (0 - ($$1))|0;
   $25 = $23 & $24;
   $26 = $25;
   $27 = ((($26)) + -8|0);
   $28 = $27;
   $29 = $17;
   $30 = (($28) - ($29))|0;
   $31 = ($30>>>0)>(15);
   $$sum3 = (($$1) + -8)|0;
   $32 = (($26) + ($$sum3)|0);
   $33 = $31 ? $27 : $32;
   $34 = $33;
   $35 = (($34) - ($29))|0;
   $36 = ((($15)) + -4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $37 & -8;
   $39 = (($38) - ($35))|0;
   $40 = $37 & 3;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = HEAP32[$17>>2]|0;
    $43 = (($42) + ($35))|0;
    HEAP32[$33>>2] = $43;
    $44 = ((($33)) + 4|0);
    HEAP32[$44>>2] = $39;
    $p$0 = $33;
    break;
   } else {
    $45 = ((($33)) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $46 & 1;
    $48 = $39 | $47;
    $49 = $48 | 2;
    HEAP32[$45>>2] = $49;
    $$sum4 = (($39) + 4)|0;
    $50 = (($33) + ($$sum4)|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $51 | 1;
    HEAP32[$50>>2] = $52;
    $53 = HEAP32[$36>>2]|0;
    $54 = $53 & 1;
    $55 = $35 | $54;
    $56 = $55 | 2;
    HEAP32[$36>>2] = $56;
    $57 = HEAP32[$45>>2]|0;
    $58 = $57 | 1;
    HEAP32[$45>>2] = $58;
    _dispose_chunk($17,$35);
    $p$0 = $33;
    break;
   }
  }
 } while(0);
 $59 = ((($p$0)) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $60 & 3;
 $62 = ($61|0)==(0);
 if (!($62)) {
  $63 = $60 & -8;
  $64 = (($12) + 16)|0;
  $65 = ($63>>>0)>($64>>>0);
  if ($65) {
   $66 = (($63) - ($12))|0;
   $67 = (($p$0) + ($12)|0);
   $68 = $60 & 1;
   $69 = $12 | $68;
   $70 = $69 | 2;
   HEAP32[$59>>2] = $70;
   $$sum1 = $12 | 4;
   $71 = (($p$0) + ($$sum1)|0);
   $72 = $66 | 3;
   HEAP32[$71>>2] = $72;
   $$sum2 = $63 | 4;
   $73 = (($p$0) + ($$sum2)|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $74 | 1;
   HEAP32[$73>>2] = $75;
   _dispose_chunk($67,$66);
  }
 }
 $76 = ((($p$0)) + 8|0);
 $mem$0 = $76;
 return ($mem$0|0);
}
function _ialloc($n_elements,$sizes,$opts,$chunks) {
 $n_elements = $n_elements|0;
 $sizes = $sizes|0;
 $opts = $opts|0;
 $chunks = $chunks|0;
 var $$0 = 0, $$sum = 0, $$sum11 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $array_size$0 = 0, $contents_size$07 = 0, $contents_size$1 = 0, $element_size$0 = 0, $i$08 = 0, $i$15 = 0, $i$15$us = 0, $marray$0 = 0, $marray$1 = 0, $p$0$in$lcssa = 0, $p$0$in3 = 0, $p$0$in3$us = 0, $remainder_size$0 = 0, $remainder_size$1$lcssa = 0;
 var $remainder_size$14$us = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[25232>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (_sysconf(30)|0);
   $3 = (($2) + -1)|0;
   $4 = $3 & $2;
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[(25240)>>2] = $2;
    HEAP32[(25236)>>2] = $2;
    HEAP32[(25244)>>2] = -1;
    HEAP32[(25248)>>2] = -1;
    HEAP32[(25252)>>2] = 0;
    HEAP32[(25204)>>2] = 0;
    $6 = (_time((0|0))|0);
    $7 = $6 & -16;
    $8 = $7 ^ 1431655768;
    HEAP32[25232>>2] = $8;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $9 = ($chunks|0)==(0|0);
 $10 = ($n_elements|0)==(0);
 do {
  if ($9) {
   if (!($10)) {
    $12 = $n_elements << 2;
    $13 = ($12>>>0)<(11);
    $14 = (($12) + 11)|0;
    $15 = $14 & -8;
    $16 = $13 ? 16 : $15;
    $array_size$0 = $16;$marray$0 = 0;
    break;
   }
   $11 = (_malloc(0)|0);
   $$0 = $11;
   return ($$0|0);
  } else {
   if ($10) {
    $$0 = $chunks;
    return ($$0|0);
   } else {
    $array_size$0 = 0;$marray$0 = $chunks;
   }
  }
 } while(0);
 $17 = $opts & 1;
 $18 = ($17|0)==(0);
 if ($18) {
  $contents_size$07 = 0;$i$08 = 0;
  while(1) {
   $25 = (($sizes) + ($i$08<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26>>>0)<(11);
   $28 = (($26) + 11)|0;
   $29 = $28 & -8;
   $30 = $27 ? 16 : $29;
   $31 = (($30) + ($contents_size$07))|0;
   $32 = (($i$08) + 1)|0;
   $33 = ($32|0)==($n_elements|0);
   if ($33) {
    $contents_size$1 = $31;$element_size$0 = 0;
    break;
   } else {
    $contents_size$07 = $31;$i$08 = $32;
   }
  }
 } else {
  $19 = HEAP32[$sizes>>2]|0;
  $20 = ($19>>>0)<(11);
  $21 = (($19) + 11)|0;
  $22 = $21 & -8;
  $23 = $20 ? 16 : $22;
  $24 = Math_imul($23, $n_elements)|0;
  $contents_size$1 = $24;$element_size$0 = $23;
 }
 $34 = (($array_size$0) + -4)|0;
 $35 = (($34) + ($contents_size$1))|0;
 $36 = (_malloc($35)|0);
 $37 = ($36|0)==(0|0);
 if ($37) {
  $$0 = 0;
  return ($$0|0);
 }
 $38 = ((($36)) + -8|0);
 $39 = ((($36)) + -4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $40 & -8;
 $42 = $opts & 2;
 $43 = ($42|0)==(0);
 if (!($43)) {
  $44 = (-4 - ($array_size$0))|0;
  $45 = (($44) + ($41))|0;
  _memset(($36|0),0,($45|0))|0;
 }
 $46 = ($marray$0|0)==(0|0);
 if ($46) {
  $47 = (($41) - ($contents_size$1))|0;
  $48 = (($36) + ($contents_size$1)|0);
  $49 = $47 | 3;
  $$sum2 = (($contents_size$1) + -4)|0;
  $50 = (($36) + ($$sum2)|0);
  HEAP32[$50>>2] = $49;
  $marray$1 = $48;$remainder_size$0 = $contents_size$1;
 } else {
  $marray$1 = $marray$0;$remainder_size$0 = $41;
 }
 HEAP32[$marray$1>>2] = $36;
 $51 = (($n_elements) + -1)|0;
 $52 = ($51|0)==(0);
 L30: do {
  if ($52) {
   $p$0$in$lcssa = $38;$remainder_size$1$lcssa = $remainder_size$0;
  } else {
   $53 = ($element_size$0|0)==(0);
   if ($53) {
    $i$15$us = 0;$p$0$in3$us = $38;$remainder_size$14$us = $remainder_size$0;
    while(1) {
     $59 = (($sizes) + ($i$15$us<<2)|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60>>>0)<(11);
     $62 = (($60) + 11)|0;
     $63 = $62 & -8;
     $64 = $61 ? 16 : $63;
     $65 = (($remainder_size$14$us) - ($64))|0;
     $66 = $64 | 3;
     $67 = ((($p$0$in3$us)) + 4|0);
     HEAP32[$67>>2] = $66;
     $68 = (($p$0$in3$us) + ($64)|0);
     $69 = (($i$15$us) + 1)|0;
     $$sum11 = (($64) + 8)|0;
     $70 = (($p$0$in3$us) + ($$sum11)|0);
     $71 = (($marray$1) + ($69<<2)|0);
     HEAP32[$71>>2] = $70;
     $72 = ($69|0)==($51|0);
     if ($72) {
      $p$0$in$lcssa = $68;$remainder_size$1$lcssa = $65;
      break L30;
     } else {
      $i$15$us = $69;$p$0$in3$us = $68;$remainder_size$14$us = $65;
     }
    }
   }
   $54 = Math_imul($element_size$0, $51)|0;
   $55 = (($54) + -8)|0;
   $56 = (1 - ($n_elements))|0;
   $57 = Math_imul($element_size$0, $56)|0;
   $58 = $element_size$0 | 3;
   $$sum = (($element_size$0) + 8)|0;
   $i$15 = 0;$p$0$in3 = $38;
   while(1) {
    $73 = ((($p$0$in3)) + 4|0);
    HEAP32[$73>>2] = $58;
    $74 = (($p$0$in3) + ($element_size$0)|0);
    $75 = (($i$15) + 1)|0;
    $76 = (($p$0$in3) + ($$sum)|0);
    $77 = (($marray$1) + ($75<<2)|0);
    HEAP32[$77>>2] = $76;
    $78 = ($75|0)==($51|0);
    if ($78) {
     break;
    } else {
     $i$15 = $75;$p$0$in3 = $74;
    }
   }
   $scevgep = (($36) + ($55)|0);
   $79 = (($remainder_size$0) + ($57))|0;
   $p$0$in$lcssa = $scevgep;$remainder_size$1$lcssa = $79;
  }
 } while(0);
 $80 = $remainder_size$1$lcssa | 3;
 $81 = ((($p$0$in$lcssa)) + 4|0);
 HEAP32[$81>>2] = $80;
 $$0 = $marray$1;
 return ($$0|0);
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(24776)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(24780)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[(24768)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (24800 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[24760>>2]|0;
     $32 = $31 & $30;
     HEAP32[24760>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre51 = ((($20)) + 8|0);
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi52Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = ((($R$0)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = ((($R$0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (25064 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(24764)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(24764)>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(24776)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[(24776)>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$1)) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$1)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[(24776)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$1)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[(24776)>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[(24784)>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[(24772)>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[(24772)>>2] = $115;
   HEAP32[(24784)>>2] = $$0;
   $116 = $115 | 1;
   $117 = ((($$0)) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[(24780)>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[(24780)>>2] = 0;
   HEAP32[(24768)>>2] = 0;
   return;
  }
  $120 = HEAP32[(24780)>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(24768)>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[(24768)>>2] = $123;
   HEAP32[(24780)>>2] = $$0;
   $124 = $123 | 1;
   $125 = ((($$0)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = (24800 + ($135<<2)|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($132)) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[24760>>2]|0;
     $146 = $145 & $144;
     HEAP32[24760>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre49 = ((($134)) + 8|0);
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($134)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = ((($132)) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi50Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = ((($R7$0)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = ((($R7$0)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = ((($159)) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = ((($156)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (25064 + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond39 = ($R7$1|0)==(0|0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[(24764)>>2]|0;
       $189 = $188 & $187;
       HEAP32[(24764)>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[(24776)>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = ((($154)) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = ((($154)) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[(24776)>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($R7$1)) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($R7$1)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(24776)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($R7$1)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = ((($$0)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[(24780)>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[(24768)>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = ((($$0)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (24800 + ($224<<2)|0);
  $226 = HEAP32[24760>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[24760>>2] = $230;
   $$pre = (($224) + 2)|0;
   $$pre48 = (24800 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre48;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = (24800 + ($$sum7<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(24776)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = ((($F16$0)) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = ((($$0)) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = ((($$0)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = (25064 + ($I19$0<<2)|0);
 $264 = ((($$0)) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = ((($$0)) + 16|0);
 $266 = ((($$0)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(24764)>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(24764)>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = ((($$0)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$0)) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = ((($$0)) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ((($275)) + 4|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & -8;
 $279 = ($278|0)==($$1|0);
 L191: do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0|0)==(31);
   $281 = $I19$0 >>> 1;
   $282 = (25 - ($281))|0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;$T$042 = $275;
   while(1) {
    $291 = $K20$043 >>> 31;
    $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = ((($287)) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;$T$042 = $287;
    }
   }
   $294 = HEAP32[(24776)>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = ((($$0)) + 24|0);
   HEAP32[$296>>2] = $T$042$lcssa;
   $297 = ((($$0)) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = ((($$0)) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = ((($T$0$lcssa)) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[(24776)>>2]|0;
 $302 = ($300>>>0)>=($301>>>0);
 $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = $302 & $not$;
 if (!($303)) {
  _abort();
  // unreachable;
 }
 $304 = ((($300)) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = ((($$0)) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = ((($$0)) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = ((($$0)) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function runPostSets() {
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&63](a1|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&63](a1|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&31]();
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&0](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&63](a1|0,a2|0)|0;
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0) {
 p0 = p0|0; nullFunc_vi(1);
}
function b2(p0) {
 p0 = p0|0; nullFunc_ii(2);return 0;
}
function b3() {
 ; nullFunc_v(3);
}
function b4(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(4);return 0;
}
function b5(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(5);return 0;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,_sn_write,b0,___stdio_write,___stdio_seek,___stdio_read,___stdout_write,b0,b0,b0,b0,b0,b0,b0,b0,_mread,_mwrite,_mseek,b0,_ms_write,_ms_seek,b0,_wms_write,_wms_seek,b0,_wrap_write,_do_read,_sw_write,_wstring_read
,b0,b0,b0,b0,b0,b0,_do_read556,_do_read559,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_vi = [b1,b1,b1,b1,b1,b1,b1,b1,_do_setrlimit,b1,_dummy1,b1,_cleanup,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,_cleanup521,_cleanup526,b1,b1,_do_setxid,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_ii = [b2,b2,___stdio_close,b2,b2,b2,b2,___strdup,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_mclose,b2,b2,_ms_close,b2,b2,_wms_close,b2,b2,b2,b2
,b2,b2,b2,_checker,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_v = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_dummy0,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,___stdio_exit];
var FUNCTION_TABLE_iiiii = [b4];
var FUNCTION_TABLE_iii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,___fdopen,b5,b5,b5,_ignore_err,_sort,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,_tre_compare_items,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];

  return { _i64Subtract: _i64Subtract, _fflush: _fflush, _controller_handle: _controller_handle, _controller_init: _controller_init, _memmove: _memmove, _memset: _memset, _malloc: _malloc, _i64Add: _i64Add, _memcpy: _memcpy, _llvm_bswap_i32: _llvm_bswap_i32, _bitshift64Lshr: _bitshift64Lshr, _free: _free, _bitshift64Shl: _bitshift64Shl, ___errno_location: ___errno_location, _controller_10msec_timer: _controller_10msec_timer, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi, dynCall_ii: dynCall_ii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_iii: dynCall_iii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__controller_handle = asm["_controller_handle"]; asm["_controller_handle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__controller_handle.apply(null, arguments);
};

var real__controller_init = asm["_controller_init"]; asm["_controller_init"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__controller_init.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__controller_10msec_timer = asm["_controller_10msec_timer"]; asm["_controller_10msec_timer"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__controller_10msec_timer.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _controller_handle = Module["_controller_handle"] = asm["_controller_handle"];
var _controller_init = Module["_controller_init"] = asm["_controller_init"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _free = Module["_free"] = asm["_free"];
var _controller_10msec_timer = Module["_controller_10msec_timer"] = asm["_controller_10msec_timer"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



