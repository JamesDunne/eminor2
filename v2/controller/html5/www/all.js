//----------------------------------------------------------------------
//
// ECMAScript 5 Polyfills
//
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// ES5 15.2 Object Objects
//----------------------------------------------------------------------

//
// ES5 15.2.3 Properties of the Object Constructor
//

// ES5 15.2.3.2 Object.getPrototypeOf ( O )
// From http://ejohn.org/blog/objectgetprototypeof/
// NOTE: won't work for typical function T() {}; T.prototype = {}; new T; case
// since the constructor property is destroyed.
if (!Object.getPrototypeOf) {
  Object.getPrototypeOf = function (o) {
    if (o !== Object(o)) { throw new TypeError("Object.getPrototypeOf called on non-object"); }
    return o.__proto__ || o.constructor.prototype || Object.prototype;
  };
}

//    // ES5 15.2.3.3 Object.getOwnPropertyDescriptor ( O, P )
//    if (typeof Object.getOwnPropertyDescriptor !== "function") {
//        Object.getOwnPropertyDescriptor = function (o, name) {
//            if (o !== Object(o)) { throw new TypeError(); }
//            if (o.hasOwnProperty(name)) {
//                return {
//                    value: o[name],
//                    enumerable: true,
//                    writable: true,
//                    configurable: true
//                };
//            }
//        };
//    }

// ES5 15.2.3.4 Object.getOwnPropertyNames ( O )
if (typeof Object.getOwnPropertyNames !== "function") {
  Object.getOwnPropertyNames = function (o) {
    if (o !== Object(o)) { throw new TypeError("Object.getOwnPropertyNames called on non-object"); }
    var props = [], p;
    for (p in o) {
      if (Object.prototype.hasOwnProperty.call(o, p)) {
        props.push(p);
      }
    }
    return props;
  };
}

// ES5 15.2.3.5 Object.create ( O [, Properties] )
if (typeof Object.create !== "function") {
  Object.create = function (prototype, properties) {
    "use strict";
    if (typeof prototype !== "object") { throw new TypeError(); }
    /** @constructor */
    function Ctor() {}
    Ctor.prototype = prototype;
    var o = new Ctor();
    if (prototype) { o.constructor = Ctor; }
    if (arguments.length > 1) {
      if (properties !== Object(properties)) { throw new TypeError(); }
      Object.defineProperties(o, properties);
    }
    return o;
  };
}

// ES 15.2.3.6 Object.defineProperty ( O, P, Attributes )
// Partial support for most common case - getters, setters, and values
(function() {
  if (!Object.defineProperty ||
      !(function () { try { Object.defineProperty({}, 'x', {}); return true; } catch (e) { return false; } } ())) {
    var orig = Object.defineProperty;
    Object.defineProperty = function (o, prop, desc) {
      "use strict";

      // In IE8 try built-in implementation for defining properties on DOM prototypes.
      if (orig) { try { return orig(o, prop, desc); } catch (e) {} }

      if (o !== Object(o)) { throw new TypeError("Object.defineProperty called on non-object"); }
      if (Object.prototype.__defineGetter__ && ('get' in desc)) {
        Object.prototype.__defineGetter__.call(o, prop, desc.get);
      }
      if (Object.prototype.__defineSetter__ && ('set' in desc)) {
        Object.prototype.__defineSetter__.call(o, prop, desc.set);
      }
      if ('value' in desc) {
        o[prop] = desc.value;
      }
      return o;
    };
  }
}());

// ES 15.2.3.7 Object.defineProperties ( O, Properties )
if (typeof Object.defineProperties !== "function") {
  Object.defineProperties = function (o, properties) {
    "use strict";
    if (o !== Object(o)) { throw new TypeError("Object.defineProperties called on non-object"); }
    var name;
    for (name in properties) {
      if (Object.prototype.hasOwnProperty.call(properties, name)) {
        Object.defineProperty(o, name, properties[name]);
      }
    }
    return o;
  };
}


// ES5 15.2.3.14 Object.keys ( O )
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/keys
if (!Object.keys) {
  Object.keys = function (o) {
    if (o !== Object(o)) { throw new TypeError('Object.keys called on non-object'); }
    var ret = [], p;
    for (p in o) {
      if (Object.prototype.hasOwnProperty.call(o, p)) {
        ret.push(p);
      }
    }
    return ret;
  };
}

//----------------------------------------------------------------------
// ES5 15.3 Function Objects
//----------------------------------------------------------------------

//
// ES5 15.3.4 Properties of the Function Prototype Object
//

// ES5 15.3.4.5 Function.prototype.bind ( thisArg [, arg1 [, arg2, ... ]] )
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind
if (!Function.prototype.bind) {
  Function.prototype.bind = function (o) {
    if (typeof this !== 'function') { throw new TypeError("Bind must be called on a function"); }
    var slice = [].slice,
        args = slice.call(arguments, 1),
        self = this,
        bound = function () {
          return self.apply(this instanceof nop ? this : (o || {}),
                            args.concat(slice.call(arguments)));
        };

    /** @constructor */
    function nop() {}
    nop.prototype = self.prototype;

    bound.prototype = new nop();

    return bound;
  };
}


//----------------------------------------------------------------------
// ES5 15.4 Array Objects
//----------------------------------------------------------------------

//
// ES5 15.4.3 Properties of the Array Constructor
//


// ES5 15.4.3.2 Array.isArray ( arg )
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
Array.isArray = Array.isArray || function (o) { return Boolean(o && Object.prototype.toString.call(Object(o)) === '[object Array]'); };


//
// ES5 15.4.4 Properties of the Array Prototype Object
//

// ES5 15.4.4.14 Array.prototype.indexOf ( searchElement [ , fromIndex ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
if (!Array.prototype.indexOf) {
  Array.prototype.indexOf = function (searchElement /*, fromIndex */) {
    "use strict";

    if (this === void 0 || this === null) { throw new TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (len === 0) { return -1; }

    var n = 0;
    if (arguments.length > 0) {
      n = Number(arguments[1]);
      if (isNaN(n)) {
        n = 0;
      } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
        n = (n > 0 || -1) * Math.floor(Math.abs(n));
      }
    }

    if (n >= len) { return -1; }

    var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);

    for (; k < len; k++) {
      if (k in t && t[k] === searchElement) {
        return k;
      }
    }
    return -1;
  };
}

// ES5 15.4.4.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf
if (!Array.prototype.lastIndexOf) {
  Array.prototype.lastIndexOf = function (searchElement /*, fromIndex*/) {
    "use strict";

    if (this === void 0 || this === null) { throw new TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (len === 0) { return -1; }

    var n = len;
    if (arguments.length > 1) {
      n = Number(arguments[1]);
      if (n !== n) {
        n = 0;
      } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
        n = (n > 0 || -1) * Math.floor(Math.abs(n));
      }
    }

    var k = n >= 0 ? Math.min(n, len - 1) : len - Math.abs(n);

    for (; k >= 0; k--) {
      if (k in t && t[k] === searchElement) {
        return k;
      }
    }
    return -1;
  };
}

// ES5 15.4.4.16 Array.prototype.every ( callbackfn [ , thisArg ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every
if (!Array.prototype.every) {
  Array.prototype.every = function (fun /*, thisp */) {
    "use strict";

    if (this === void 0 || this === null) { throw new TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof fun !== "function") { throw new TypeError(); }

    var thisp = arguments[1], i;
    for (i = 0; i < len; i++) {
      if (i in t && !fun.call(thisp, t[i], i, t)) {
        return false;
      }
    }

    return true;
  };
}

// ES5 15.4.4.17 Array.prototype.some ( callbackfn [ , thisArg ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some
if (!Array.prototype.some) {
  Array.prototype.some = function (fun /*, thisp */) {
    "use strict";

    if (this === void 0 || this === null) { throw new TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof fun !== "function") { throw new TypeError(); }

    var thisp = arguments[1], i;
    for (i = 0; i < len; i++) {
      if (i in t && fun.call(thisp, t[i], i, t)) {
        return true;
      }
    }

    return false;
  };
}

// ES5 15.4.4.18 Array.prototype.forEach ( callbackfn [ , thisArg ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach
if (!Array.prototype.forEach) {
  Array.prototype.forEach = function (fun /*, thisp */) {
    "use strict";

    if (this === void 0 || this === null) { throw new TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof fun !== "function") { throw new TypeError(); }

    var thisp = arguments[1], i;
    for (i = 0; i < len; i++) {
      if (i in t) {
        fun.call(thisp, t[i], i, t);
      }
    }
  };
}


// ES5 15.4.4.19 Array.prototype.map ( callbackfn [ , thisArg ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Map
if (!Array.prototype.map) {
  Array.prototype.map = function (fun /*, thisp */) {
    "use strict";

    if (this === void 0 || this === null) { throw new TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof fun !== "function") { throw new TypeError(); }

    var res = []; res.length = len;
    var thisp = arguments[1], i;
    for (i = 0; i < len; i++) {
      if (i in t) {
        res[i] = fun.call(thisp, t[i], i, t);
      }
    }

    return res;
  };
}

// ES5 15.4.4.20 Array.prototype.filter ( callbackfn [ , thisArg ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Filter
if (!Array.prototype.filter) {
  Array.prototype.filter = function (fun /*, thisp */) {
    "use strict";

    if (this === void 0 || this === null) { throw new TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof fun !== "function") { throw new TypeError(); }

    var res = [];
    var thisp = arguments[1], i;
    for (i = 0; i < len; i++) {
      if (i in t) {
        var val = t[i]; // in case fun mutates this
        if (fun.call(thisp, val, i, t)) {
          res.push(val);
        }
      }
    }

    return res;
  };
}


// ES5 15.4.4.21 Array.prototype.reduce ( callbackfn [ , initialValue ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Reduce
if (!Array.prototype.reduce) {
  Array.prototype.reduce = function (fun /*, initialValue */) {
    "use strict";

    if (this === void 0 || this === null) { throw new TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof fun !== "function") { throw new TypeError(); }

    // no value to return if no initial value and an empty array
    if (len === 0 && arguments.length === 1) { throw new TypeError(); }

    var k = 0;
    var accumulator;
    if (arguments.length >= 2) {
      accumulator = arguments[1];
    } else {
      do {
        if (k in t) {
          accumulator = t[k++];
          break;
        }

        // if array contains no values, no initial value to return
        if (++k >= len) { throw new TypeError(); }
      }
      while (true);
    }

    while (k < len) {
      if (k in t) {
        accumulator = fun.call(undefined, accumulator, t[k], k, t);
      }
      k++;
    }

    return accumulator;
  };
}


// ES5 15.4.4.22 Array.prototype.reduceRight ( callbackfn [, initialValue ] )
// From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/ReduceRight
if (!Array.prototype.reduceRight) {
  Array.prototype.reduceRight = function (callbackfn /*, initialValue */) {
    "use strict";

    if (this === void 0 || this === null) { throw new TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof callbackfn !== "function") { throw new TypeError(); }

    // no value to return if no initial value, empty array
    if (len === 0 && arguments.length === 1) { throw new TypeError(); }

    var k = len - 1;
    var accumulator;
    if (arguments.length >= 2) {
      accumulator = arguments[1];
    } else {
      do {
        if (k in this) {
          accumulator = this[k--];
          break;
        }

        // if array contains no values, no initial value to return
        if (--k < 0) { throw new TypeError(); }
      }
      while (true);
    }

    while (k >= 0) {
      if (k in t) {
        accumulator = callbackfn.call(undefined, accumulator, t[k], k, t);
      }
      k--;
    }

    return accumulator;
  };
}


//----------------------------------------------------------------------
// ES5 15.5 String Objects
//----------------------------------------------------------------------

//
// ES5 15.5.4 Properties of the String Prototype Object
//


// ES5 15.5.4.20 String.prototype.trim()
if (!String.prototype.trim) {
  String.prototype.trim = function () {
    return String(this).replace(/^\s+/, '').replace(/\s+$/, '');
  };
}



//----------------------------------------------------------------------
// ES5 15.9 Date Objects
//----------------------------------------------------------------------


//
// ES 15.9.4 Properties of the Date Constructor
//

// ES5 15.9.4.4 Date.now ( )
// From https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Date/now
if (!Date.now) {
  Date.now = function now() {
    return Number(new Date());
  };
}


//
// ES5 15.9.5 Properties of the Date Prototype Object
//

// ES5 15.9.4.43 Date.prototype.toISOString ( )
// Inspired by http://www.json.org/json2.js
if (!Date.prototype.toISOString) {
  Date.prototype.toISOString = function () {
    function pad2(n) { return ('00' + n).slice(-2); }
    function pad3(n) { return ('000' + n).slice(-3); }

    return this.getUTCFullYear() + '-' +
      pad2(this.getUTCMonth() + 1) + '-' +
      pad2(this.getUTCDate()) + 'T' +
      pad2(this.getUTCHours()) + ':' +
      pad2(this.getUTCMinutes()) + ':' +
      pad2(this.getUTCSeconds()) + '.' +
      pad3(this.getUTCMilliseconds()) + 'Z';
  };
}
//----------------------------------------------------------------------
//
// Browser Polyfills
//
// This assumes ES5 or ES3 + es5.js
//
//----------------------------------------------------------------------

if ('window' in this && 'document' in this) {

  //----------------------------------------------------------------------
  //
  // Web Standards Polyfills
  //
  //----------------------------------------------------------------------

  //
  // document.head (HTML5)
  //
  document.head = document.head || document.getElementsByTagName('head')[0];

  //
  // XMLHttpRequest (http://www.w3.org/TR/XMLHttpRequest/)
  //
  window.XMLHttpRequest = window.XMLHttpRequest || function () {
    /*global ActiveXObject*/
    try { return new ActiveXObject("Msxml2.XMLHTTP.6.0"); } catch (e1) { }
    try { return new ActiveXObject("Msxml2.XMLHTTP.3.0"); } catch (e2) { }
    try { return new ActiveXObject("Msxml2.XMLHTTP"); } catch (e3) { }
    throw new Error("This browser does not support XMLHttpRequest.");
  };
  XMLHttpRequest.UNSENT = 0;
  XMLHttpRequest.OPENED = 1;
  XMLHttpRequest.HEADERS_RECEIVED = 2;
  XMLHttpRequest.LOADING = 3;
  XMLHttpRequest.DONE = 4;

  //----------------------------------------------------------------------
  //
  // Performance
  //
  //----------------------------------------------------------------------

  // requestAnimationFrame
  // http://www.w3.org/TR/animation-timing/
  (function() {
    var TARGET_FPS = 60,
        requests = Object.create(null),
        raf_handle = 1,
        timeout_handle = -1;

    function isVisible(element) {
      return element.offsetWidth > 0 && element.offsetHeight > 0;
    }

    function onFrameTimer() {
      var cur_requests = requests;

      requests = Object.create(null);
      timeout_handle = -1;

      Object.keys(cur_requests).forEach(function(id) {
        var request = cur_requests[id];
        if (!request.element || isVisible(request.element)) {
          request.callback(Date.now());
        }
      });
    }

    function requestAnimationFrame(callback, element) {
      var cb_handle = raf_handle++;
      requests[cb_handle] = {callback: callback, element: element};

      if (timeout_handle === -1) {
        timeout_handle = window.setTimeout(onFrameTimer, 1000 / TARGET_FPS);
      }

      return cb_handle;
    }

    function cancelAnimationFrame(handle) {
      delete requests[handle];

      if (Object.keys(requests).length === 0) {
        window.clearTimeout(timeout_handle);
        timeout_handle = -1;
      }
    }

    window.requestAnimationFrame =
      window.requestAnimationFrame ||
      window.webkitRequestAnimationFrame ||
      window.mozRequestAnimationFrame ||
      window.oRequestAnimationFrame ||
      window.msRequestAnimationFrame ||
      requestAnimationFrame;

    // NOTE: Older versions of the spec called this "cancelRequestAnimationFrame"
    window.cancelAnimationFrame = window.cancelRequestAnimationFrame =
      window.cancelAnimationFrame || window.cancelRequestAnimationFrame ||
      window.webkitCancelAnimationFrame || window.webkitCancelRequestAnimationFrame ||
      window.mozCancelAnimationFrame || window.mozCancelRequestAnimationFrame ||
      window.oCancelAnimationFrame || window.oCancelRequestAnimationFrame ||
      window.msCancelAnimationFrame || window.msCancelRequestAnimationFrame ||
      cancelAnimationFrame;
  }());

  // setImmediate
  // https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/setImmediate/Overview.html
  (function () {
    function setImmediate(callback, args) {
      var params = [].slice.call(arguments, 1), i;
      return window.setTimeout(function() {
        callback.apply(null, params);
      }, 0);
    }

    function clearImmediate(handle) {
      window.clearTimeout(handle);
    }

    window.setImmediate =
      window.setImmediate ||
      window.msSetImmediate ||
      setImmediate;

    window.clearImmediate =
      window.clearImmediate ||
      window.msClearImmediate ||
      clearImmediate;
  } ());

  //----------------------------------------------------------------------
  //
  // DOM
  //
  //----------------------------------------------------------------------

  //
  // Selectors API Level 1 (http://www.w3.org/TR/selectors-api/)
  // http://ajaxian.com/archives/creating-a-queryselector-for-ie-that-runs-at-native-speed
  //
  if (!document.querySelectorAll) {
    document.querySelectorAll = function (selectors) {
      var style = document.createElement('style'), elements = [], element;
      document.documentElement.firstChild.appendChild(style);
      document._qsa = [];

      style.styleSheet.cssText = selectors + '{x-qsa:expression(document._qsa && document._qsa.push(this))}';
      window.scrollBy(0, 0);
      style.parentNode.removeChild(style);

      while (document._qsa.length) {
        element = document._qsa.shift();
        element.style.removeAttribute('x-qsa');
        elements.push(element);
      }
      document._qsa = null;
      return elements;
    };
  }

  if (!document.querySelector) {
    document.querySelector = function (selectors) {
      var elements = document.querySelectorAll(selectors);
      return (elements.length) ? elements[0] : null;
    };
  }

  if (!document.getElementsByClassName) {
    document.getElementsByClassName = function (classNames) {
      classNames = String(classNames).replace(/^|\s+/g, '.');
      return document.querySelectorAll(classNames);
    };
  }

  // Fix for IE8-'s Element.getBoundingClientRect()
  if ('TextRectangle' in this && !('width' in TextRectangle.prototype)) {
    Object.defineProperties(TextRectangle.prototype, {
      'width': { get: function() { return this.right - this.left; } },
      'height': { get: function() { return this.bottom - this.top; } }
    });
  }

  //
  // DOM Enumerations (http://www.w3.org/TR/DOM-Level-2-Core/)
  //
  window.Node = window.Node || function Node() { throw new TypeError("Illegal constructor"); };
  Node.ELEMENT_NODE = 1;
  Node.ATTRIBUTE_NODE = 2;
  Node.TEXT_NODE = 3;
  Node.CDATA_SECTION_NODE = 4;
  Node.ENTITY_REFERENCE_NODE = 5;
  Node.ENTITY_NODE = 6;
  Node.PROCESSING_INSTRUCTION_NODE = 7;
  Node.COMMENT_NODE = 8;
  Node.DOCUMENT_NODE = 9;
  Node.DOCUMENT_TYPE_NODE = 10;
  Node.DOCUMENT_FRAGMENT_NODE = 11;
  Node.NOTATION_NODE = 12;

  window.DOMException = window.DOMException || function DOMException() { throw new TypeError("Illegal constructor"); };
  DOMException.INDEX_SIZE_ERR = 1;
  DOMException.DOMSTRING_SIZE_ERR = 2;
  DOMException.HIERARCHY_REQUEST_ERR = 3;
  DOMException.WRONG_DOCUMENT_ERR = 4;
  DOMException.INVALID_CHARACTER_ERR = 5;
  DOMException.NO_DATA_ALLOWED_ERR = 6;
  DOMException.NO_MODIFICATION_ALLOWED_ERR = 7;
  DOMException.NOT_FOUND_ERR = 8;
  DOMException.NOT_SUPPORTED_ERR = 9;
  DOMException.INUSE_ATTRIBUTE_ERR = 10;
  DOMException.INVALID_STATE_ERR = 11;
  DOMException.SYNTAX_ERR = 12;
  DOMException.INVALID_MODIFICATION_ERR = 13;
  DOMException.NAMESPACE_ERR = 14;
  DOMException.INVALID_ACCESS_ERR = 15;

  //
  // Events and EventTargets
  //

  (function(){
    if (!('Element' in window) || Element.prototype.addEventListener || !Object.defineProperty)
      return;

    // interface Event

    // PhaseType (const unsigned short)
    Event.CAPTURING_PHASE = 1;
    Event.AT_TARGET       = 2;
    Event.BUBBLING_PHASE  = 3;

    Object.defineProperty(Event.prototype, 'CAPTURING_PHASE', { get: function() { return 1; } });
    Object.defineProperty(Event.prototype, 'AT_TARGET',       { get: function() { return 2; } });
    Object.defineProperty(Event.prototype, 'BUBBLING_HASE',   { get: function() { return 3; } });

    Object.defineProperty(Event.prototype, 'target', {
      get: function() {
        return this.srcElement;
      }
    });

    Object.defineProperty(Event.prototype, 'currentTarget', {
      get: function() {
        return this._currentTarget;
      }
    });

    Object.defineProperty(Event.prototype, 'eventPhase', {
      get: function() {
        return (this.srcElement === this.currentTarget) ? Event.AT_TARGET : Event.BUBBLING_PHASE;
      }
    });

    Object.defineProperty(Event.prototype, 'bubbles', {
      get: function() {
        switch (this.type) {
          // Mouse
        case 'click':
        case 'dblclick':
        case 'mousedown':
        case 'mouseup':
        case 'mouseover':
        case 'mousemove':
        case 'mouseout':
        case 'mousewheel':
          // Keyboard
        case 'keydown':
        case 'keypress':
        case 'keyup':
          // Frame/Object
        case 'resize':
        case 'scroll':
          // Form
        case 'select':
        case 'change':
        case 'submit':
        case 'reset':
          return true;
        }
        return false;
      }
    });

    Object.defineProperty(Event.prototype, 'cancelable', {
      get: function() {
        switch (this.type) {
          // Mouse
        case 'click':
        case 'dblclick':
        case 'mousedown':
        case 'mouseup':
        case 'mouseover':
        case 'mouseout':
        case 'mousewheel':
          // Keyboard
        case 'keydown':
        case 'keypress':
        case 'keyup':
          // Form
        case 'submit':
          return true;
        }
        return false;
      }
    });

    Object.defineProperty(Event.prototype, 'timeStamp', {
      get: function() {
        return this._timeStamp;
      }
    });

    Event.prototype.stopPropagation = function() {
      this.cancelBubble = true;
    };

    Event.prototype.preventDefault = function() {
      this.returnValue = false;
    };

    Object.defineProperty(Event.prototype, 'defaultPrevented', {
      get: function() {
        return this.returnValue === false;
      }
    });


    // interface EventTarget

    function addEventListener(type, listener, useCapture) {
      if (type === 'DOMContentLoaded') type = 'load';
      var target = this;
      var f = function(e) {
        e._timeStamp = Number(new Date);
        e._currentTarget = target;
        listener.call(this, e);
        e._currentTarget = null;
      };
      this['_' + type + listener] = f;
      this.attachEvent('on' + type, f);
    }

    function removeEventListener(type, listener, useCapture) {
      if (type === 'DOMContentLoaded') type = 'load';
      var f = this['_' + type + listener];
      if (f) {
        this.detachEvent('on' + type, f);
        this['_' + type + listener] = null;
      }
    }

    var p1 = Window.prototype, p2 = HTMLDocument.prototype, p3 = Element.prototype;
    p1.addEventListener    = p2.addEventListener    = p3.addEventListener    = addEventListener;
    p1.removeEventListener = p2.removeEventListener = p3.removeEventListener = removeEventListener;

  }());

  // Shim for DOM Events for IE7-
  // http://www.quirksmode.org/blog/archives/2005/10/_and_the_winner_1.html
  // Use addEvent(object, event, handler) instead of object.addEventListener(event, handler)

  window.addEvent = function (obj, type, fn) {
    if (obj.addEventListener) {
      obj.addEventListener(type, fn, false);
    } else if (obj.attachEvent) {
      obj["e" + type + fn] = fn;
      obj[type + fn] = function () {
        var e = window.event;
        e.currentTarget = obj;
        e.preventDefault = function () { e.returnValue = false; };
        e.stopPropagation = function () { e.cancelBubble = true; };
        e.target = e.srcElement;
        e.timeStamp = Number(new Date);
        obj["e" + type + fn].call(this, e);
      };
      obj.attachEvent("on" + type, obj[type + fn]);
    }
  };

  window.removeEvent = function (obj, type, fn) {
    if (obj.removeEventListener) {
      obj.removeEventListener(type, fn, false);
    } else if (obj.detachEvent) {
      obj.detachEvent("on" + type, obj[type + fn]);
      obj[type + fn] = null;
      obj["e" + type + fn] = null;
    }
  };

  //----------------------------------------------------------------------
  //
  // DOMTokenList - classList and relList shims
  //
  //----------------------------------------------------------------------

  // Shim for http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#dom-classlist
  // Use getClassList(elem) instead of elem.classList() if IE7- support is needed
  // Use getRelList(elem) instead of elem.relList() if IE7- support is needed

  (function () {

    /** @constructor */
    function DOMTokenListShim(o, p) {
      function split(s) { return s.length ? s.split(/\s+/g) : []; }

      // NOTE: This does not exactly match the spec.
      function removeTokenFromString(token, string) {
        var tokens = split(string),
            index = tokens.indexOf(token);
        if (index !== -1) {
          tokens.splice(index, 1);
        }
        return tokens.join(' ');
      }

      Object.defineProperties(
        this,
        {
          length: {
            get: function () { return split(o[p]).length; }
          },

          item: {
            value: function (idx) {
              var tokens = split(o[p]);
              return 0 <= idx && idx < tokens.length ? tokens[idx] : null;
            }
          },

          contains: {
            value: function (token) {
              token = String(token);
              if (token.length === 0) { throw new SyntaxError(); }
              if (/\s/.test(token)) { throw new Error("InvalidCharacterError"); }
              var tokens = split(o[p]);

              return tokens.indexOf(token) !== -1;
            }
          },

          add: {
            value: function (tokens___) {
              tokens = Array.prototype.slice.call(arguments).map(String);
              if (tokens.some(function(token) { return token.length === 0; })) {
                throw new SyntaxError();
              }
              if (tokens.some(function(token) { return /\s/.test(token); })) {
                throw new Error("InvalidCharacterError");
              }

              try {
                var underlying_string = o[p];
                var token_list = split(underlying_string);
                tokens = tokens.filter(function(token) { return token_list.indexOf(token) === -1; });
                if (tokens.length === 0) {
                  return;
                }
                if (underlying_string.length !== 0 && !/\s$/.test(underlying_string)) {
                  underlying_string += ' ';
                }
                underlying_string += tokens.join(' ');
                o[p] = underlying_string;
              } finally {
                var length = split(o[p]).length;
                if (this.length !== length) { this.length = length; }
              }
            }
          },

          remove: {
            value: function (tokens___) {
              tokens = Array.prototype.slice.call(arguments).map(String);
              if (tokens.some(function(token) { return token.length === 0; })) {
                throw new SyntaxError();
              }
              if (tokens.some(function(token) { return /\s/.test(token); })) {
                throw new Error("InvalidCharacterError");
              }

              try {
                var underlying_string = o[p];
                tokens.forEach(function(token) {
                  underlying_string = removeTokenFromString(token, underlying_string);
                });
                o[p] = underlying_string;
              } finally {
                var length = split(o[p]).length;
                if (this.length !== length) { this.length = length; }
              }
            }
          },

          toggle: {
            value: function (token, force) {
              try {
                token = String(token);
                if (token.length === 0) { throw new SyntaxError(); }
                if (/\s/.test(token)) { throw new Error("InvalidCharacterError"); }
                var tokens = split(o[p]),
                    index = tokens.indexOf(token);

                if (index !== -1 && (!force || force === (void 0))) {
                  o[p] = removeTokenFromString(token, o[p]);
                  return false;
                }
                if (index !== -1 && force) {
                  return true;
                }
                var underlying_string = o[p];
                if (underlying_string.length !== 0 && !/\s$/.test(underlying_string)) {
                  underlying_string += ' ';
                }
                underlying_string += token;
                o[p] = underlying_string;
                return true;
              } finally {
                var length = split(o[p]).length;
                if (this.length !== length) { this.length = length; }
              }
            }
          },

          toString: {
            value: function () {
              return o[p];
            }
          }
        });
      if (!('length' in this)) {
        // In case getters are not supported
        this.length = split(o[p]).length;
      } else {
        // If they are, shim in index getters (up to 100)
        for (var i = 0; i < 100; ++i) {
          Object.defineProperty(this, String(i), {
            get: (function(n) { return function () { return this.item(n); }; }(i))
          });
        }
      }
    }

    function addToElementPrototype(p, f) {
      if ('Element' in window && Element.prototype && Object.defineProperty) {
        Object.defineProperty(Element.prototype, p, { get: f });
      }
    }

    if ('classList' in document.createElement('span')) {
      window.getClassList = function (elem) { return elem.classList; };
    } else {
      window.getClassList = function (elem) { return new DOMTokenListShim(elem, 'className'); };
      addToElementPrototype('classList', function() { return new DOMTokenListShim(this, 'className'); } );
    }

    if ('relList' in document.createElement('link')) {
      window.getRelList = function (elem) { return elem.relList; };
    } else {
      window.getRelList = function (elem) { return new DOMTokenListShim(elem, 'rel'); };
      addToElementPrototype('relList', function() { return new DOMTokenListShim(this, 'rel'); } );
    }
  }());

  if (!('dataset' in document.createElement('span')) &&
      'Element' in window && Element.prototype && Object.defineProperty) {
    Object.defineProperty(Element.prototype, 'dataset', { get: function() {
      var result = Object.create(null);
      for (var i = 0; i < this.attributes.length; ++i) {
        var attr = this.attributes[i];
        if (attr.specified && attr.name.substring(0, 5) === 'data-') {
          (function(element, name) {
            Object.defineProperty(result, name, {
              get: function() {
                return element.getAttribute('data-' + name);
              },
              set: function(value) {
                element.setAttribute('data-' + name, value);
              }});
          }(this, attr.name.substring(5)));
        }
      }
        return result;
    }});
  }
}

//
// Base64 utility methods (HTML5)
//
(function (global) {
  var B64_ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  global.atob = global.atob || function (input) {
    input = String(input);
    var position = 0,
        output = [],
        buffer = 0, bits = 0, n;

    input = input.replace(/\s/g, '');
    if ((input.length % 4) === 0) { input = input.replace(/=+$/, ''); }
    if ((input.length % 4) === 1) { throw new Error("InvalidCharacterError"); }
    if (/[^+/0-9A-Za-z]/.test(input)) { throw new Error("InvalidCharacterError"); }

    while (position < input.length) {
      n = B64_ALPHABET.indexOf(input.charAt(position));
      buffer = (buffer << 6) | n;
      bits += 6;

      if (bits === 24) {
        output.push(String.fromCharCode((buffer >> 16) & 0xFF));
        output.push(String.fromCharCode((buffer >>  8) & 0xFF));
        output.push(String.fromCharCode(buffer & 0xFF));
        bits = 0;
        buffer = 0;
      }
      position += 1;
    }

    if (bits === 12) {
      buffer = buffer >> 4;
      output.push(String.fromCharCode(buffer & 0xFF));
    } else if (bits === 18) {
      buffer = buffer >> 2;
      output.push(String.fromCharCode((buffer >> 8) & 0xFF));
      output.push(String.fromCharCode(buffer & 0xFF));
    }

    return output.join('');
  };

  global.btoa = global.btoa || function (input) {
    input = String(input);
    var position = 0,
        out = [],
        o1, o2, o3,
        e1, e2, e3, e4;

    if (/[^\x00-\xFF]/.test(input)) { throw new Error("InvalidCharacterError"); }

    while (position < input.length) {
      o1 = input.charCodeAt(position++);
      o2 = input.charCodeAt(position++);
      o3 = input.charCodeAt(position++);

      // 111111 112222 222233 333333
      e1 = o1 >> 2;
      e2 = ((o1 & 0x3) << 4) | (o2 >> 4);
      e3 = ((o2 & 0xf) << 2) | (o3 >> 6);
      e4 = o3 & 0x3f;

      if (position === input.length + 2) {
        e3 = 64; e4 = 64;
      }
      else if (position === input.length + 1) {
        e4 = 64;
      }

      out.push(B64_ALPHABET.charAt(e1),
               B64_ALPHABET.charAt(e2),
               B64_ALPHABET.charAt(e3),
               B64_ALPHABET.charAt(e4));
    }

    return out.join('');
  };
} (this));


//----------------------------------------------------------------------
//
// Non-standard JavaScript (Mozilla) functions
//
//----------------------------------------------------------------------

(function () {
  // JavaScript 1.8.1
  String.prototype.trimLeft = String.prototype.trimLeft || function () {
    return String(this).replace(/^\s+/, '');
  };

  // JavaScript 1.8.1
  String.prototype.trimRight = String.prototype.trimRight || function () {
    return String(this).replace(/\s+$/, '');
  };

  // JavaScript 1.?
  var ESCAPES = {
    //'\x00': '\\0', Special case in FF3.6, removed by FF10
    '\b': '\\b',
    '\t': '\\t',
    '\n': '\\n',
    '\f': '\\f',
    '\r': '\\r',
    '"' : '\\"',
    '\\': '\\\\'
  };
  String.prototype.quote = String.prototype.quote || function() {
    return '"' + String(this).replace(/[\x00-\x1F"\\\x7F-\uFFFF]/g, function(c) {
      if (Object.prototype.hasOwnProperty.call(ESCAPES, c)) {
        return ESCAPES[c];
      } else if (c.charCodeAt(0) <= 0xFF) {
        return '\\x' + ('00' + c.charCodeAt(0).toString(16).toUpperCase()).slice(-2);
      } else {
        return '\\u' + ('0000' + c.charCodeAt(0).toString(16).toUpperCase()).slice(-4);
      }
    }) + '"';
  };
}());
/*
 Copyright (c) 2010, Linden Research, Inc.
 Copyright (c) 2012, Joshua Bell

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 $/LicenseInfo$
 */

// Original can be found at:
//   https://bitbucket.org/lindenlab/llsd
// Modifications by Joshua Bell inexorabletash@gmail.com
//   https://github.com/inexorabletash/polyfill

// ES3/ES5 implementation of the Krhonos Typed Array Specification
//   Ref: http://www.khronos.org/registry/typedarray/specs/latest/
//   Date: 2011-02-01
//
// Variations:
//  * Allows typed_array.get/set() as alias for subscripts (typed_array[])


(function(global) {
  "use strict";
  var undefined = (void 0); // Paranoia

  // Beyond this value, index getters/setters (i.e. array[0], array[1]) are so slow to
  // create, and consume so much memory, that the browser appears frozen.
  var MAX_ARRAY_LENGTH = 1e5;

  // Approximations of internal ECMAScript conversion functions
  var ECMAScript = (function() {
    // Stash a copy in case other scripts modify these
    var opts = Object.prototype.toString,
        ophop = Object.prototype.hasOwnProperty;

    return {
      // Class returns internal [[Class]] property, used to avoid cross-frame instanceof issues:
      Class: function(v) { return opts.call(v).replace(/^\[object *|\]$/g, ''); },
      HasProperty: function(o, p) { return p in o; },
      HasOwnProperty: function(o, p) { return ophop.call(o, p); },
      IsCallable: function(o) { return typeof o === 'function'; },
      ToInt32: function(v) { return v >> 0; },
      ToUint32: function(v) { return v >>> 0; }
    };
  }());

  // Snapshot intrinsics
  var LN2 = Math.LN2,
      abs = Math.abs,
      floor = Math.floor,
      log = Math.log,
      min = Math.min,
      pow = Math.pow,
      round = Math.round;

  // ES5: lock down object properties
  function configureProperties(obj) {
    if (Object.getOwnPropertyNames && Object.defineProperty) {
      var props = Object.getOwnPropertyNames(obj), i;
      for (i = 0; i < props.length; i += 1) {
        Object.defineProperty(obj, props[i], {
          value: obj[props[i]],
          writable: false,
          enumerable: false,
          configurable: false
        });
      }
    }
  }

  // emulate ES5 getter/setter API using legacy APIs
  // http://blogs.msdn.com/b/ie/archive/2010/09/07/transitioning-existing-code-to-the-es5-getter-setter-apis.aspx
  // (second clause tests for Object.defineProperty() in IE<9 that only supports extending DOM prototypes, but
  // note that IE<9 does not support __defineGetter__ or __defineSetter__ so it just renders the method harmless)
  if (!Object.defineProperty ||
       !(function() { try { Object.defineProperty({}, 'x', {}); return true; } catch (e) { return false; } }())) {
    Object.defineProperty = function(o, p, desc) {
      if (!o === Object(o)) throw new TypeError("Object.defineProperty called on non-object");
      if (ECMAScript.HasProperty(desc, 'get') && Object.prototype.__defineGetter__) { Object.prototype.__defineGetter__.call(o, p, desc.get); }
      if (ECMAScript.HasProperty(desc, 'set') && Object.prototype.__defineSetter__) { Object.prototype.__defineSetter__.call(o, p, desc.set); }
      if (ECMAScript.HasProperty(desc, 'value')) { o[p] = desc.value; }
      return o;
    };
  }

  if (!Object.getOwnPropertyNames) {
    Object.getOwnPropertyNames = function getOwnPropertyNames(o) {
      if (o !== Object(o)) throw new TypeError("Object.getOwnPropertyNames called on non-object");
      var props = [], p;
      for (p in o) {
        if (ECMAScript.HasOwnProperty(o, p)) {
          props.push(p);
        }
      }
      return props;
    };
  }

  // ES5: Make obj[index] an alias for obj._getter(index)/obj._setter(index, value)
  // for index in 0 ... obj.length
  function makeArrayAccessors(obj) {
    if (!Object.defineProperty) { return; }

    if (obj.length > MAX_ARRAY_LENGTH) throw new RangeError("Array too large for polyfill");

    function makeArrayAccessor(index) {
      Object.defineProperty(obj, index, {
        'get': function() { return obj._getter(index); },
        'set': function(v) { obj._setter(index, v); },
        enumerable: true,
        configurable: false
      });
    }

    var i;
    for (i = 0; i < obj.length; i += 1) {
      makeArrayAccessor(i);
    }
  }

  // Internal conversion functions:
  //    pack<Type>()   - take a number (interpreted as Type), output a byte array
  //    unpack<Type>() - take a byte array, output a Type-like number

  function as_signed(value, bits) { var s = 32 - bits; return (value << s) >> s; }
  function as_unsigned(value, bits) { var s = 32 - bits; return (value << s) >>> s; }

  function packI8(n) { return [n & 0xff]; }
  function unpackI8(bytes) { return as_signed(bytes[0], 8); }

  function packU8(n) { return [n & 0xff]; }
  function unpackU8(bytes) { return as_unsigned(bytes[0], 8); }

  function packU8Clamped(n) { n = round(Number(n)); return [n < 0 ? 0 : n > 0xff ? 0xff : n & 0xff]; }

  function packI16(n) { return [(n >> 8) & 0xff, n & 0xff]; }
  function unpackI16(bytes) { return as_signed(bytes[0] << 8 | bytes[1], 16); }

  function packU16(n) { return [(n >> 8) & 0xff, n & 0xff]; }
  function unpackU16(bytes) { return as_unsigned(bytes[0] << 8 | bytes[1], 16); }

  function packI32(n) { return [(n >> 24) & 0xff, (n >> 16) & 0xff, (n >> 8) & 0xff, n & 0xff]; }
  function unpackI32(bytes) { return as_signed(bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], 32); }

  function packU32(n) { return [(n >> 24) & 0xff, (n >> 16) & 0xff, (n >> 8) & 0xff, n & 0xff]; }
  function unpackU32(bytes) { return as_unsigned(bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], 32); }

  function packIEEE754(v, ebits, fbits) {

    var bias = (1 << (ebits - 1)) - 1,
        s, e, f, ln,
        i, bits, str, bytes;

    function roundToEven(n) {
      var w = floor(n), f = n - w;
      if (f < 0.5)
        return w;
      if (f > 0.5)
        return w + 1;
      return w % 2 ? w + 1 : w;
    }

    // Compute sign, exponent, fraction
    if (v !== v) {
      // NaN
      // http://dev.w3.org/2006/webapi/WebIDL/#es-type-mapping
      e = (1 << ebits) - 1; f = pow(2, fbits - 1); s = 0;
    } else if (v === Infinity || v === -Infinity) {
      e = (1 << ebits) - 1; f = 0; s = (v < 0) ? 1 : 0;
    } else if (v === 0) {
      e = 0; f = 0; s = (1 / v === -Infinity) ? 1 : 0;
    } else {
      s = v < 0;
      v = abs(v);

      if (v >= pow(2, 1 - bias)) {
        e = min(floor(log(v) / LN2), 1023);
        f = roundToEven(v / pow(2, e) * pow(2, fbits));
        if (f / pow(2, fbits) >= 2) {
          e = e + 1;
          f = 1;
        }
        if (e > bias) {
          // Overflow
          e = (1 << ebits) - 1;
          f = 0;
        } else {
          // Normalized
          e = e + bias;
          f = f - pow(2, fbits);
        }
      } else {
        // Denormalized
        e = 0;
        f = roundToEven(v / pow(2, 1 - bias - fbits));
      }
    }

    // Pack sign, exponent, fraction
    bits = [];
    for (i = fbits; i; i -= 1) { bits.push(f % 2 ? 1 : 0); f = floor(f / 2); }
    for (i = ebits; i; i -= 1) { bits.push(e % 2 ? 1 : 0); e = floor(e / 2); }
    bits.push(s ? 1 : 0);
    bits.reverse();
    str = bits.join('');

    // Bits to bytes
    bytes = [];
    while (str.length) {
      bytes.push(parseInt(str.substring(0, 8), 2));
      str = str.substring(8);
    }
    return bytes;
  }

  function unpackIEEE754(bytes, ebits, fbits) {

    // Bytes to bits
    var bits = [], i, j, b, str,
        bias, s, e, f;

    for (i = bytes.length; i; i -= 1) {
      b = bytes[i - 1];
      for (j = 8; j; j -= 1) {
        bits.push(b % 2 ? 1 : 0); b = b >> 1;
      }
    }
    bits.reverse();
    str = bits.join('');

    // Unpack sign, exponent, fraction
    bias = (1 << (ebits - 1)) - 1;
    s = parseInt(str.substring(0, 1), 2) ? -1 : 1;
    e = parseInt(str.substring(1, 1 + ebits), 2);
    f = parseInt(str.substring(1 + ebits), 2);

    // Produce number
    if (e === (1 << ebits) - 1) {
      return f !== 0 ? NaN : s * Infinity;
    } else if (e > 0) {
      // Normalized
      return s * pow(2, e - bias) * (1 + f / pow(2, fbits));
    } else if (f !== 0) {
      // Denormalized
      return s * pow(2, -(bias - 1)) * (f / pow(2, fbits));
    } else {
      return s < 0 ? -0 : 0;
    }
  }

  function unpackF64(b) { return unpackIEEE754(b, 11, 52); }
  function packF64(v) { return packIEEE754(v, 11, 52); }
  function unpackF32(b) { return unpackIEEE754(b, 8, 23); }
  function packF32(v) { return packIEEE754(v, 8, 23); }


  //
  // 3 The ArrayBuffer Type
  //

  (function() {

    /** @constructor */
    var ArrayBuffer = function ArrayBuffer(length) {
      length = ECMAScript.ToInt32(length);
      if (length < 0) throw new RangeError('ArrayBuffer size is not a small enough positive integer.');

      this.byteLength = length;
      this._bytes = [];
      this._bytes.length = length;

      var i;
      for (i = 0; i < this.byteLength; i += 1) {
        this._bytes[i] = 0;
      }

      configureProperties(this);
    };

    global.ArrayBuffer = global.ArrayBuffer || ArrayBuffer;

    //
    // 4 The ArrayBufferView Type
    //

    // NOTE: this constructor is not exported
    /** @constructor */
    var ArrayBufferView = function ArrayBufferView() {
      //this.buffer = null;
      //this.byteOffset = 0;
      //this.byteLength = 0;
    };

    //
    // 5 The Typed Array View Types
    //

    function makeConstructor(bytesPerElement, pack, unpack) {
      // Each TypedArray type requires a distinct constructor instance with
      // identical logic, which this produces.

      var ctor;
      ctor = function(buffer, byteOffset, length) {
        var array, sequence, i, s;

        if (!arguments.length || typeof arguments[0] === 'number') {
          // Constructor(unsigned long length)
          this.length = ECMAScript.ToInt32(arguments[0]);
          if (length < 0) throw new RangeError('ArrayBufferView size is not a small enough positive integer.');

          this.byteLength = this.length * this.BYTES_PER_ELEMENT;
          this.buffer = new ArrayBuffer(this.byteLength);
          this.byteOffset = 0;
        } else if (typeof arguments[0] === 'object' && arguments[0].constructor === ctor) {
          // Constructor(TypedArray array)
          array = arguments[0];

          this.length = array.length;
          this.byteLength = this.length * this.BYTES_PER_ELEMENT;
          this.buffer = new ArrayBuffer(this.byteLength);
          this.byteOffset = 0;

          for (i = 0; i < this.length; i += 1) {
            this._setter(i, array._getter(i));
          }
        } else if (typeof arguments[0] === 'object' &&
                   !(arguments[0] instanceof ArrayBuffer || ECMAScript.Class(arguments[0]) === 'ArrayBuffer')) {
          // Constructor(sequence<type> array)
          sequence = arguments[0];

          this.length = ECMAScript.ToUint32(sequence.length);
          this.byteLength = this.length * this.BYTES_PER_ELEMENT;
          this.buffer = new ArrayBuffer(this.byteLength);
          this.byteOffset = 0;

          for (i = 0; i < this.length; i += 1) {
            s = sequence[i];
            this._setter(i, Number(s));
          }
        } else if (typeof arguments[0] === 'object' &&
                   (arguments[0] instanceof ArrayBuffer || ECMAScript.Class(arguments[0]) === 'ArrayBuffer')) {
          // Constructor(ArrayBuffer buffer,
          //             optional unsigned long byteOffset, optional unsigned long length)
          this.buffer = buffer;

          this.byteOffset = ECMAScript.ToUint32(byteOffset);
          if (this.byteOffset > this.buffer.byteLength) {
            throw new RangeError("byteOffset out of range");
          }

          if (this.byteOffset % this.BYTES_PER_ELEMENT) {
            // The given byteOffset must be a multiple of the element
            // size of the specific type, otherwise an exception is raised.
            throw new RangeError("ArrayBuffer length minus the byteOffset is not a multiple of the element size.");
          }

          if (arguments.length < 3) {
            this.byteLength = this.buffer.byteLength - this.byteOffset;

            if (this.byteLength % this.BYTES_PER_ELEMENT) {
              throw new RangeError("length of buffer minus byteOffset not a multiple of the element size");
            }
            this.length = this.byteLength / this.BYTES_PER_ELEMENT;
          } else {
            this.length = ECMAScript.ToUint32(length);
            this.byteLength = this.length * this.BYTES_PER_ELEMENT;
          }

          if ((this.byteOffset + this.byteLength) > this.buffer.byteLength) {
            throw new RangeError("byteOffset and length reference an area beyond the end of the buffer");
          }
        } else {
          throw new TypeError("Unexpected argument type(s)");
        }

        this.constructor = ctor;

        configureProperties(this);
        makeArrayAccessors(this);
      };

      ctor.prototype = new ArrayBufferView();
      ctor.prototype.BYTES_PER_ELEMENT = bytesPerElement;
      ctor.prototype._pack = pack;
      ctor.prototype._unpack = unpack;
      ctor.BYTES_PER_ELEMENT = bytesPerElement;

      // getter type (unsigned long index);
      ctor.prototype._getter = function(index) {
        if (arguments.length < 1) throw new SyntaxError("Not enough arguments");

        index = ECMAScript.ToUint32(index);
        if (index >= this.length) {
          return undefined;
        }

        var bytes = [], i, o;
        for (i = 0, o = this.byteOffset + index * this.BYTES_PER_ELEMENT;
             i < this.BYTES_PER_ELEMENT;
             i += 1, o += 1) {
          bytes.push(this.buffer._bytes[o]);
        }
        return this._unpack(bytes);
      };

      // NONSTANDARD: convenience alias for getter: type get(unsigned long index);
      ctor.prototype.get = ctor.prototype._getter;

      // setter void (unsigned long index, type value);
      ctor.prototype._setter = function(index, value) {
        if (arguments.length < 2) throw new SyntaxError("Not enough arguments");

        index = ECMAScript.ToUint32(index);
        if (index >= this.length) {
          return undefined;
        }

        var bytes = this._pack(value), i, o;
        for (i = 0, o = this.byteOffset + index * this.BYTES_PER_ELEMENT;
             i < this.BYTES_PER_ELEMENT;
             i += 1, o += 1) {
          this.buffer._bytes[o] = bytes[i];
        }
      };

      // void set(TypedArray array, optional unsigned long offset);
      // void set(sequence<type> array, optional unsigned long offset);
      ctor.prototype.set = function(index, value) {
        if (arguments.length < 1) throw new SyntaxError("Not enough arguments");
        var array, sequence, offset, len,
            i, s, d,
            byteOffset, byteLength, tmp;

        if (typeof arguments[0] === 'object' && arguments[0].constructor === this.constructor) {
          // void set(TypedArray array, optional unsigned long offset);
          array = arguments[0];
          offset = ECMAScript.ToUint32(arguments[1]);

          if (offset + array.length > this.length) {
            throw new RangeError("Offset plus length of array is out of range");
          }

          byteOffset = this.byteOffset + offset * this.BYTES_PER_ELEMENT;
          byteLength = array.length * this.BYTES_PER_ELEMENT;

          if (array.buffer === this.buffer) {
            tmp = [];
            for (i = 0, s = array.byteOffset; i < byteLength; i += 1, s += 1) {
              tmp[i] = array.buffer._bytes[s];
            }
            for (i = 0, d = byteOffset; i < byteLength; i += 1, d += 1) {
              this.buffer._bytes[d] = tmp[i];
            }
          } else {
            for (i = 0, s = array.byteOffset, d = byteOffset;
                 i < byteLength; i += 1, s += 1, d += 1) {
              this.buffer._bytes[d] = array.buffer._bytes[s];
            }
          }
        } else if (typeof arguments[0] === 'object' && typeof arguments[0].length !== 'undefined') {
          // void set(sequence<type> array, optional unsigned long offset);
          sequence = arguments[0];
          len = ECMAScript.ToUint32(sequence.length);
          offset = ECMAScript.ToUint32(arguments[1]);

          if (offset + len > this.length) {
            throw new RangeError("Offset plus length of array is out of range");
          }

          for (i = 0; i < len; i += 1) {
            s = sequence[i];
            this._setter(offset + i, Number(s));
          }
        } else {
          throw new TypeError("Unexpected argument type(s)");
        }
      };

      // TypedArray subarray(long begin, optional long end);
      ctor.prototype.subarray = function(start, end) {
        function clamp(v, min, max) { return v < min ? min : v > max ? max : v; }

        start = ECMAScript.ToInt32(start);
        end = ECMAScript.ToInt32(end);

        if (arguments.length < 1) { start = 0; }
        if (arguments.length < 2) { end = this.length; }

        if (start < 0) { start = this.length + start; }
        if (end < 0) { end = this.length + end; }

        start = clamp(start, 0, this.length);
        end = clamp(end, 0, this.length);

        var len = end - start;
        if (len < 0) {
          len = 0;
        }

        return new this.constructor(
          this.buffer, this.byteOffset + start * this.BYTES_PER_ELEMENT, len);
      };

      return ctor;
    }

    var Int8Array = makeConstructor(1, packI8, unpackI8);
    var Uint8Array = makeConstructor(1, packU8, unpackU8);
    var Uint8ClampedArray = makeConstructor(1, packU8Clamped, unpackU8);
    var Int16Array = makeConstructor(2, packI16, unpackI16);
    var Uint16Array = makeConstructor(2, packU16, unpackU16);
    var Int32Array = makeConstructor(4, packI32, unpackI32);
    var Uint32Array = makeConstructor(4, packU32, unpackU32);
    var Float32Array = makeConstructor(4, packF32, unpackF32);
    var Float64Array = makeConstructor(8, packF64, unpackF64);

    global.Int8Array = global.Int8Array || Int8Array;
    global.Uint8Array = global.Uint8Array || Uint8Array;
    global.Uint8ClampedArray = global.Uint8ClampedArray || Uint8ClampedArray;
    global.Int16Array = global.Int16Array || Int16Array;
    global.Uint16Array = global.Uint16Array || Uint16Array;
    global.Int32Array = global.Int32Array || Int32Array;
    global.Uint32Array = global.Uint32Array || Uint32Array;
    global.Float32Array = global.Float32Array || Float32Array;
    global.Float64Array = global.Float64Array || Float64Array;
  }());

  //
  // 6 The DataView View Type
  //

  (function() {
    function r(array, index) {
      return ECMAScript.IsCallable(array.get) ? array.get(index) : array[index];
    }

    var IS_BIG_ENDIAN = (function() {
      var u16array = new Uint16Array([0x1234]),
          u8array = new Uint8Array(u16array.buffer);
      return r(u8array, 0) === 0x12;
    }());

    // Constructor(ArrayBuffer buffer,
    //             optional unsigned long byteOffset,
    //             optional unsigned long byteLength)
    /** @constructor */
    var DataView = function DataView(buffer, byteOffset, byteLength) {
      if (arguments.length === 0) {
        buffer = new ArrayBuffer(0);
      } else if (!(buffer instanceof ArrayBuffer || ECMAScript.Class(buffer) === 'ArrayBuffer')) {
        throw new TypeError("TypeError");
      }

      this.buffer = buffer || new ArrayBuffer(0);

      this.byteOffset = ECMAScript.ToUint32(byteOffset);
      if (this.byteOffset > this.buffer.byteLength) {
        throw new RangeError("byteOffset out of range");
      }

      if (arguments.length < 3) {
        this.byteLength = this.buffer.byteLength - this.byteOffset;
      } else {
        this.byteLength = ECMAScript.ToUint32(byteLength);
      }

      if ((this.byteOffset + this.byteLength) > this.buffer.byteLength) {
        throw new RangeError("byteOffset and length reference an area beyond the end of the buffer");
      }

      configureProperties(this);
    };

    function makeGetter(arrayType) {
      return function(byteOffset, littleEndian) {

        byteOffset = ECMAScript.ToUint32(byteOffset);

        if (byteOffset + arrayType.BYTES_PER_ELEMENT > this.byteLength) {
          throw new RangeError("Array index out of range");
        }
        byteOffset += this.byteOffset;

        var uint8Array = new Uint8Array(this.buffer, byteOffset, arrayType.BYTES_PER_ELEMENT),
            bytes = [], i;
        for (i = 0; i < arrayType.BYTES_PER_ELEMENT; i += 1) {
          bytes.push(r(uint8Array, i));
        }

        if (Boolean(littleEndian) === Boolean(IS_BIG_ENDIAN)) {
          bytes.reverse();
        }

        return r(new arrayType(new Uint8Array(bytes).buffer), 0);
      };
    }

    DataView.prototype.getUint8 = makeGetter(Uint8Array);
    DataView.prototype.getInt8 = makeGetter(Int8Array);
    DataView.prototype.getUint16 = makeGetter(Uint16Array);
    DataView.prototype.getInt16 = makeGetter(Int16Array);
    DataView.prototype.getUint32 = makeGetter(Uint32Array);
    DataView.prototype.getInt32 = makeGetter(Int32Array);
    DataView.prototype.getFloat32 = makeGetter(Float32Array);
    DataView.prototype.getFloat64 = makeGetter(Float64Array);

    function makeSetter(arrayType) {
      return function(byteOffset, value, littleEndian) {

        byteOffset = ECMAScript.ToUint32(byteOffset);
        if (byteOffset + arrayType.BYTES_PER_ELEMENT > this.byteLength) {
          throw new RangeError("Array index out of range");
        }

        // Get bytes
        var typeArray = new arrayType([value]),
            byteArray = new Uint8Array(typeArray.buffer),
            bytes = [], i, byteView;

        for (i = 0; i < arrayType.BYTES_PER_ELEMENT; i += 1) {
          bytes.push(r(byteArray, i));
        }

        // Flip if necessary
        if (Boolean(littleEndian) === Boolean(IS_BIG_ENDIAN)) {
          bytes.reverse();
        }

        // Write them
        byteView = new Uint8Array(this.buffer, byteOffset, arrayType.BYTES_PER_ELEMENT);
        byteView.set(bytes);
      };
    }

    DataView.prototype.setUint8 = makeSetter(Uint8Array);
    DataView.prototype.setInt8 = makeSetter(Int8Array);
    DataView.prototype.setUint16 = makeSetter(Uint16Array);
    DataView.prototype.setInt16 = makeSetter(Int16Array);
    DataView.prototype.setUint32 = makeSetter(Uint32Array);
    DataView.prototype.setInt32 = makeSetter(Int32Array);
    DataView.prototype.setFloat32 = makeSetter(Float32Array);
    DataView.prototype.setFloat64 = makeSetter(Float64Array);

    global.DataView = global.DataView || DataView;

  }());

}(this));
// Storage polyfill by Remy Sharp
// https://gist.github.com/350433
// Needed for IE7-

// Dependencies:
//  JSON (use json2.js if necessary)

// Tweaks by Joshua Bell (inexorabletash@gmail.com)
//  * URI-encode item keys
//  * Use String() for stringifying
//  * added length

if (!window.localStorage || !window.sessionStorage) (function() {

    var Storage = function(type) {
        function createCookie(name, value, days) {
            var date, expires;

            if (days) {
                date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toGMTString();
            } else {
                expires = "";
            }
            document.cookie = name + "=" + value + expires + "; path=/";
        }

        function readCookie(name) {
            var nameEQ = name + "=",
                ca = document.cookie.split(';'),
                i, c;

            for (i = 0; i < ca.length; i++) {
                c = ca[i];
                while (c.charAt(0) == ' ') {
                    c = c.substring(1, c.length);
                }

                if (c.indexOf(nameEQ) == 0) {
                    return c.substring(nameEQ.length, c.length);
                }
            }
            return null;
        }

        function setData(data) {
            data = JSON.stringify(data);
            if (type == 'session') {
                window.name = data;
            } else {
                createCookie('localStorage', data, 365);
            }
        }

        function clearData() {
            if (type == 'session') {
                window.name = '';
            } else {
                createCookie('localStorage', '', 365);
            }
        }

        function getData() {
            var data = type == 'session' ? window.name : readCookie('localStorage');
            return data ? JSON.parse(data) : {};
        }


        // initialise if there's already data
        var data = getData();

        function numKeys() {
            var n = 0;
            for (var k in data) {
                if (data.hasOwnProperty(k)) {
                    n += 1;
                }
            }
            return n;
        }

        return {
            clear: function() {
                data = {};
                clearData();
                this.length = numKeys();
            },
            getItem: function(key) {
                key = encodeURIComponent(key);
                return data[key] === undefined ? null : data[key];
            },
            key: function(i) {
                // not perfect, but works
                var ctr = 0;
                for (var k in data) {
                    if (ctr == i) return decodeURIComponent(k);
                    else ctr++;
                }
                return null;
            },
            removeItem: function(key) {
                key = encodeURIComponent(key);
                delete data[key];
                setData(data);
                this.length = numKeys();
            },
            setItem: function(key, value) {
                key = encodeURIComponent(key);
                data[key] = String(value);
                setData(data);
                this.length = numKeys();
            },
            length: 0
        };
    };

    if (!window.localStorage) window.localStorage = new Storage('local');
    if (!window.sessionStorage) window.sessionStorage = new Storage('session');

})();
// Depends on ECMAScript 5 or appropriate polyfill for:
//  Array.prototype.map, JSON.stringify

(function () {
  var MAX_LINES = 1000,
      CONSOLE_CSS = "#SHIMCONSOLE { visibility: hidden; position: fixed; z-index: 9999; left: 0; right: 0; bottom: 0; height: 200px; border-top: solid 1px #808080; overflow: auto; word-wrap: break-word; padding: 5px; background-color: #eeeeee; color: #000000; font-family: monospace; font-size: 10pt; font-weight: normal; font-style: normal; }"
        + "#SHIMCONSOLE .SHIMCONSOLE_GROUP { margin-left: 20px; }"
        + "#SHIMCONSOLE .SHIMCONSOLE_ERROR { color: #ff0000; }"
        + "#SHIMCONSOLE .SHIMCONSOLE_WARN { color: #ff8000; }",
      FORMAT_REGEXP = /([^%]|%([\-+0]*)(\d+)?(\.\d+)?([%sdilfox]))/g;

  function Console() {

    // Add stylesheet
    (function () {
      var style = document.createElement('style');
      (document.getElementsByTagName('HEAD')[0] || document.documentElement).appendChild(style);
      if ('styleSheet' in style) {
        style.styleSheet.cssText = CONSOLE_CSS;
      } else {
        style.appendChild(document.createTextNode(CONSOLE_CSS));
      }
    }());

    var display;
    var counts = {};
    var times = {};
    var groups = [];

    display = document.createElement('div');
    display.id = 'SHIMCONSOLE';
    (document.body || document.documentElement).appendChild(display);

    function format(o) {
      var span = document.createElement('span'), text, color, classOf;
      switch (typeof o) {
      case 'undefined':
        text = String(o);
        color = 'gray';
        break;
      case 'boolean':
        text = String(o);
        color = 'green';
        break;
      case 'number':
        text = String(o);
        color = 'blue';
        break;
      case 'string':
        text = o;
        break;
      default: // object and null
        if (!o) {
          text = String(o);
          color = 'gray';
        } else {
          classOf = Object.prototype.toString.call(o);
          if (classOf === '[object Array]' || classOf === '[object Object]') {
            try {
              text = JSON.stringify(o);
            } catch (e) {
              // Cyclic, use fallback
              text = classOf;
            }
          } else {
            text = String(o);
          }
        }
      }

      span.appendChild(document.createTextNode(text));
      if (color) {
        span.style.color = color;
      }
      return span;
    }

    function show(args, type, prefix) {
      if (!args.length) {
        return;
      }
      var line = document.createElement('div');
      line.className = 'SHIMCONSOLE_' + type;

      line.style.whiteSpace = 'pre';

      if (prefix) {
          line.appendChild(document.createTextNode(prefix));
      }

      function trunc(n) {
        return n < 0 ? Math.ceil(n) : Math.floor(n);
      }
      function repl(str, unit, flags, width, precision, specifier) {
        if (unit.charAt(0) != '%' || !args.length) {
          return unit;
        } else if (specifier === '%') {
          return '%';
        }
        var arg = args.shift();
        switch (specifier) {
        case 's': return String(arg);
        case 'd':
        case 'i':
        case 'l': return String(trunc(Number(arg)));
        case 'f': return String(Number(arg));
        default:
        case 'o':
          try {
            return JSON.stringify(arg);
          } catch (e) {
            return String(arg);
          }
        }
        return void 0;
      }

      if (typeof args[0] === 'string') {
        line.appendChild(document.createTextNode(args.shift().replace(FORMAT_REGEXP, repl)));
        line.appendChild(document.createTextNode(' '));
      }

      // pretty-print remaining arguments
      while (args.length) {
        line.appendChild(format(args.shift()));
        line.appendChild(document.createTextNode(' '));
      }
      var parent = groups.length ? groups[groups.length - 1] : display;
      parent.appendChild(line);

      while (display.children.length > MAX_LINES) {
        display.removeChild(display.firstChild);
      }
      display.scrollTop = display.scrollHeight;
      display.style.visibility = 'visible';
    }

    function toArray(a) {
      var result = [], i;
      for (i = 0; i < a.length; i += 1) {
        result[i] = a[i];
      }
      return result;
    }

    this.log = function log(messageObject) { show(toArray(arguments), 'LOG'); };
    this.debug = function debug(messageObject) { show(toArray(arguments), 'DEBUG'); };
    this.info = function info(messageObject) { show(toArray(arguments), 'INFO'); };
    this.warn = function warn(messageObject) { show(toArray(arguments), 'WARN', 'Warning: '); };
    this.error = function error(messageObject) { show(toArray(arguments), 'ERROR', 'Error: '); };

    this.assert = function assert(a, messageObject) {
      if (!a) {
        var args = toArray(arguments);
        args.shift();
        show(args, 'ERROR', 'Assertion failed: ');
      }
    };

    this.count = function count(name) {
      name = (name || '');
      if (!(('$' + name) in counts)) {
        counts['$' + name] = 0;
      }
      counts['$' + name] += 1;
      show([name + ": " + counts['$' + name]], 'INFO');
    };

    this.time = function time(name) {
      name = (name || '');
      times['$' + name] = Number(new Date);
    };
    this.timeEnd = function timeEnd(name) {
      name = (name || '');
      if (('$' + name) in times) {
        show([name + ": " + (Number(new Date) - times['$' + name]) + "ms"], 'INFO');
        delete times['$' + name];
      }
    };

    this.group = function group(name) {
      name = (name || '');
      show(['>' + name], 'INFO');
      var div = document.createElement('div');
      div.className = 'SHIMCONSOLE_GROUP';
      var parent = groups.length ? groups[groups.length - 1] : display;
      parent.appendChild(div);
      groups.push(div);
    };
    this.groupEnd = function groupEnd() {
      groups.pop();
    };

    this.dir = function dir(name) {
      show([name], 'INFO');
    };
    this.dirxml = this.dir;

    this.trace = function trace() {
      try {
        this.wont.work = 0;
      } catch (e) {
        if (e.stack) {
          show([e.stack.replace(/^[^\n]*\n/, 'Stack trace:\n')], 'INFO');
        }
      }
    };

    this.clear = function clear() {
      while (display.children.length) {
        display.removeChild(display.firstChild);
      }
    };
  }

  window.console = window.console || new Console();
}());
/**
 * Copyright 2013 Craig Campbell
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Rainbow is a simple code syntax highlighter
 *
 * @preserve @version 1.2
 * @url rainbowco.de
 */
window['Rainbow'] = (function() {

    /**
     * array of replacements to process at the end
     *
     * @type {Object}
     */
    var replacements = {},

        /**
         * an array of start and end positions of blocks to be replaced
         *
         * @type {Object}
         */
        replacement_positions = {},

        /**
         * an array of the language patterns specified for each language
         *
         * @type {Object}
         */
        language_patterns = {},

        /**
         * an array of languages and whether they should bypass the default patterns
         *
         * @type {Object}
         */
        bypass_defaults = {},

        /**
         * processing level
         *
         * replacements are stored at this level so if there is a sub block of code
         * (for example php inside of html) it runs at a different level
         *
         * @type {number}
         */
        CURRENT_LEVEL = 0,

        /**
         * constant used to refer to the default language
         *
         * @type {number}
         */
        DEFAULT_LANGUAGE = 0,

        /**
         * used as counters so we can selectively call setTimeout
         * after processing a certain number of matches/replacements
         *
         * @type {number}
         */
        match_counter = 0,

        /**
         * @type {number}
         */
        replacement_counter = 0,

        /**
         * @type {null|string}
         */
        global_class,

        /**
         * @type {null|Function}
         */
        onHighlight;

    /**
     * cross browser get attribute for an element
     *
     * @see http://stackoverflow.com/questions/3755227/cross-browser-javascript-getattribute-method
     *
     * @param {Node} el
     * @param {string} attr     attribute you are trying to get
     * @returns {string|number}
     */
    function _attr(el, attr, attrs, i) {
        var result = (el.getAttribute && el.getAttribute(attr)) || 0;

        if (!result) {
            attrs = el.attributes;

            for (i = 0; i < attrs.length; ++i) {
                if (attrs[i].nodeName === attr) {
                    return attrs[i].nodeValue;
                }
            }
        }

        return result;
    }

    /**
     * adds a class to a given code block
     *
     * @param {Element} el
     * @param {string} class_name   class name to add
     * @returns void
     */
    function _addClass(el, class_name) {
        el.className += el.className ? ' ' + class_name : class_name;
    }

    /**
     * checks if a block has a given class
     *
     * @param {Element} el
     * @param {string} class_name   class name to check for
     * @returns {boolean}
     */
    function _hasClass(el, class_name) {
        return (' ' + el.className + ' ').indexOf(' ' + class_name + ' ') > -1;
    }

    /**
     * gets the language for this block of code
     *
     * @param {Element} block
     * @returns {string|null}
     */
    function _getLanguageForBlock(block) {

        // if this doesn't have a language but the parent does then use that
        // this means if for example you have: <pre data-language="php">
        // with a bunch of <code> blocks inside then you do not have
        // to specify the language for each block
        var language = _attr(block, 'data-language') || _attr(block.parentNode, 'data-language');

        // this adds support for specifying language via a css class
        // you can use the Google Code Prettify style: <pre class="lang-php">
        // or the HTML5 style: <pre><code class="language-php">
        if (!language) {
            var pattern = /\blang(?:uage)?-(\w+)/,
                match = block.className.match(pattern) || block.parentNode.className.match(pattern);

            if (match) {
                language = match[1];
            }
        }

        return language;
    }

    /**
     * makes sure html entities are always used for tags
     *
     * @param {string} code
     * @returns {string}
     */
    function _htmlEntities(code) {
        return code.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/&(?![\w\#]+;)/g, '&amp;');
    }

    /**
     * determines if a new match intersects with an existing one
     *
     * @param {number} start1    start position of existing match
     * @param {number} end1      end position of existing match
     * @param {number} start2    start position of new match
     * @param {number} end2      end position of new match
     * @returns {boolean}
     */
    function _intersects(start1, end1, start2, end2) {
        if (start2 >= start1 && start2 < end1) {
            return true;
        }

        return end2 > start1 && end2 < end1;
    }

    /**
     * determines if two different matches have complete overlap with each other
     *
     * @param {number} start1   start position of existing match
     * @param {number} end1     end position of existing match
     * @param {number} start2   start position of new match
     * @param {number} end2     end position of new match
     * @returns {boolean}
     */
    function _hasCompleteOverlap(start1, end1, start2, end2) {

        // if the starting and end positions are exactly the same
        // then the first one should stay and this one should be ignored
        if (start2 == start1 && end2 == end1) {
            return false;
        }

        return start2 <= start1 && end2 >= end1;
    }

    /**
     * determines if the match passed in falls inside of an existing match
     * this prevents a regex pattern from matching inside of a bigger pattern
     *
     * @param {number} start - start position of new match
     * @param {number} end - end position of new match
     * @returns {boolean}
     */
    function _matchIsInsideOtherMatch(start, end) {
        for (var key in replacement_positions[CURRENT_LEVEL]) {
            key = parseInt(key, 10);

            // if this block completely overlaps with another block
            // then we should remove the other block and return false
            if (_hasCompleteOverlap(key, replacement_positions[CURRENT_LEVEL][key], start, end)) {
                delete replacement_positions[CURRENT_LEVEL][key];
                delete replacements[CURRENT_LEVEL][key];
            }

            if (_intersects(key, replacement_positions[CURRENT_LEVEL][key], start, end)) {
                return true;
            }
        }

        return false;
    }

    /**
     * takes a string of code and wraps it in a span tag based on the name
     *
     * @param {string} name     name of the pattern (ie keyword.regex)
     * @param {string} code     block of code to wrap
     * @returns {string}
     */
    function _wrapCodeInSpan(name, code) {
        return '<span class="' + name.replace(/\./g, ' ') + (global_class ? ' ' + global_class : '') + '">' + code + '</span>';
    }

    /**
     * finds out the position of group match for a regular expression
     *
     * @see http://stackoverflow.com/questions/1985594/how-to-find-index-of-groups-in-match
     *
     * @param {Object} match
     * @param {number} group_number
     * @returns {number}
     */
    function _indexOfGroup(match, group_number) {
        var index = 0,
            i;

        for (i = 1; i < group_number; ++i) {
            if (match[i]) {
                index += match[i].length;
            }
        }

        return index;
    }

    /**
     * matches a regex pattern against a block of code
     * finds all matches that should be processed and stores the positions
     * of where they should be replaced within the string
     *
     * this is where pretty much all the work is done but it should not
     * be called directly
     *
     * @param {RegExp} pattern
     * @param {string} code
     * @returns void
     */
    function _processPattern(regex, pattern, code, callback)
    {
        if (typeof regex === "undefined" || regex === null) {
            //console.warn("undefined regular expression")
            return callback();
        }
        var match = regex.exec(code);

        if (!match) {
            return callback();
        }

        ++match_counter;

        // treat match 0 the same way as name
        if (!pattern['name'] && typeof pattern['matches'][0] == 'string') {
            pattern['name'] = pattern['matches'][0];
            delete pattern['matches'][0];
        }

        var replacement = match[0],
            start_pos = match.index,
            end_pos = match[0].length + start_pos,

            /**
             * callback to process the next match of this pattern
             */
            processNext = function() {
                var nextCall = function() {
                    _processPattern(regex, pattern, code, callback);
                };

                // every 100 items we process let's call set timeout
                // to let the ui breathe a little
                return match_counter % 100 > 0 ? nextCall() : setTimeout(nextCall, 0);
            };

        // if this is not a child match and it falls inside of another
        // match that already happened we should skip it and continue processing
        if (_matchIsInsideOtherMatch(start_pos, end_pos)) {
            return processNext();
        }

        /**
         * callback for when a match was successfully processed
         *
         * @param {string} replacement
         * @returns void
         */
        var onMatchSuccess = function(replacement) {
                // if this match has a name then wrap it in a span tag
                if (pattern['name']) {
                    replacement = _wrapCodeInSpan(pattern['name'], replacement);
                }

                // console.log('LEVEL', CURRENT_LEVEL, 'replace', match[0], 'with', replacement, 'at position', start_pos, 'to', end_pos);

                // store what needs to be replaced with what at this position
                if (!replacements[CURRENT_LEVEL]) {
                    replacements[CURRENT_LEVEL] = {};
                    replacement_positions[CURRENT_LEVEL] = {};
                }

                replacements[CURRENT_LEVEL][start_pos] = {
                    'replace': match[0],
                    'with': replacement
                };

                // store the range of this match so we can use it for comparisons
                // with other matches later
                replacement_positions[CURRENT_LEVEL][start_pos] = end_pos;

                // process the next match
                processNext();
            },

            // if this pattern has sub matches for different groups in the regex
            // then we should process them one at a time by rerunning them through
            // this function to generate the new replacement
            //
            // we run through them backwards because the match position of earlier
            // matches will not change depending on what gets replaced in later
            // matches
            group_keys = keys(pattern['matches']),

            /**
             * callback for processing a sub group
             *
             * @param {number} i
             * @param {Array} group_keys
             * @param {Function} callback
             */
            processGroup = function(i, group_keys, callback) {
                if (i >= group_keys.length) {
                    return callback(replacement);
                }

                var processNextGroup = function() {
                        processGroup(++i, group_keys, callback);
                    },
                    block = match[group_keys[i]];

                // if there is no match here then move on
                if (!block) {
                    return processNextGroup();
                }

                var group = pattern['matches'][group_keys[i]],
                    language = group['language'],

                    /**
                     * process group is what group we should use to actually process
                     * this match group
                     *
                     * for example if the subgroup pattern looks like this
                     * 2: {
                     *     'name': 'keyword',
                     *     'pattern': /true/g
                     * }
                     *
                     * then we use that as is, but if it looks like this
                     *
                     * 2: {
                     *     'name': 'keyword',
                     *     'matches': {
                     *          'name': 'special',
                     *          'pattern': /whatever/g
                     *      }
                     * }
                     *
                     * we treat the 'matches' part as the pattern and keep
                     * the name around to wrap it with later
                     */
                    process_group = group['name'] && group['matches'] ? group['matches'] : group,

                    /**
                     * takes the code block matched at this group, replaces it
                     * with the highlighted block, and optionally wraps it with
                     * a span with a name
                     *
                     * @param {string} block
                     * @param {string} replace_block
                     * @param {string|null} match_name
                     */
                    _replaceAndContinue = function(block, replace_block, match_name) {
                        replacement = _replaceAtPosition(_indexOfGroup(match, group_keys[i]), block, match_name ? _wrapCodeInSpan(match_name, replace_block) : replace_block, replacement);
                        processNextGroup();
                    };

                // if this is a sublanguage go and process the block using that language
                if (language) {
                    return _highlightBlockForLanguage(block, language, function(code) {
                        _replaceAndContinue(block, code);
                    });
                }

                // if this is a string then this match is directly mapped to selector
                // so all we have to do is wrap it in a span and continue
                if (typeof group === 'string') {
                    return _replaceAndContinue(block, block, group);
                }

                // the process group can be a single pattern or an array of patterns
                // _processCodeWithPatterns always expects an array so we convert it here
                _processCodeWithPatterns(block, process_group.length ? process_group : [process_group], function(code) {
                    _replaceAndContinue(block, code, group['matches'] ? group['name'] : 0);
                });
            };

        processGroup(0, group_keys, onMatchSuccess);
    }

    /**
     * should a language bypass the default patterns?
     *
     * if you call Rainbow.extend() and pass true as the third argument
     * it will bypass the defaults
     */
    function _bypassDefaultPatterns(language)
    {
        return bypass_defaults[language];
    }

    /**
     * returns a list of regex patterns for this language
     *
     * @param {string} language
     * @returns {Array}
     */
    function _getPatternsForLanguage(language) {
        var patterns = language_patterns[language] || [],
            default_patterns = language_patterns[DEFAULT_LANGUAGE] || [];

        return _bypassDefaultPatterns(language) ? patterns : patterns.concat(default_patterns);
    }

    /**
     * substring replace call to replace part of a string at a certain position
     *
     * @param {number} position         the position where the replacement should happen
     * @param {string} replace          the text we want to replace
     * @param {string} replace_with     the text we want to replace it with
     * @param {string} code             the code we are doing the replacing in
     * @returns {string}
     */
    function _replaceAtPosition(position, replace, replace_with, code) {
        var sub_string = code.substr(position);
        return code.substr(0, position) + sub_string.replace(replace, replace_with);
    }

   /**
     * sorts an object by index descending
     *
     * @param {Object} object
     * @return {Array}
     */
    function keys(object) {
        var locations = [],
            replacement,
            pos;

        for(var location in object) {
            if (object.hasOwnProperty(location)) {
                locations.push(location);
            }
        }

        // numeric descending
        return locations.sort(function(a, b) {
            return b - a;
        });
    }

    /**
     * processes a block of code using specified patterns
     *
     * @param {string} code
     * @param {Array} patterns
     * @returns void
     */
    function _processCodeWithPatterns(code, patterns, callback)
    {
        // we have to increase the level here so that the
        // replacements will not conflict with each other when
        // processing sub blocks of code
        ++CURRENT_LEVEL;

        // patterns are processed one at a time through this function
        function _workOnPatterns(patterns, i)
        {
            // still have patterns to process, keep going
            if (i < patterns.length) {
                return _processPattern(patterns[i]['pattern'], patterns[i], code, function() {
                    _workOnPatterns(patterns, ++i);
                });
            }

            // we are done processing the patterns
            // process the replacements and update the DOM
            _processReplacements(code, function(code) {

                // when we are done processing replacements
                // we are done at this level so we can go back down
                delete replacements[CURRENT_LEVEL];
                delete replacement_positions[CURRENT_LEVEL];
                --CURRENT_LEVEL;
                callback(code);
            });
        }

        _workOnPatterns(patterns, 0);
    }

    /**
     * process replacements in the string of code to actually update the markup
     *
     * @param {string} code         the code to process replacements in
     * @param {Function} onComplete   what to do when we are done processing
     * @returns void
     */
    function _processReplacements(code, onComplete) {

        /**
         * processes a single replacement
         *
         * @param {string} code
         * @param {Array} positions
         * @param {number} i
         * @param {Function} onComplete
         * @returns void
         */
        function _processReplacement(code, positions, i, onComplete) {
            if (i < positions.length) {
                ++replacement_counter;
                var pos = positions[i],
                    replacement = replacements[CURRENT_LEVEL][pos];
                code = _replaceAtPosition(pos, replacement['replace'], replacement['with'], code);

                // process next function
                var next = function() {
                    _processReplacement(code, positions, ++i, onComplete);
                };

                // use a timeout every 250 to not freeze up the UI
                return replacement_counter % 250 > 0 ? next() : setTimeout(next, 0);
            }

            onComplete(code);
        }

        var string_positions = keys(replacements[CURRENT_LEVEL]);
        _processReplacement(code, string_positions, 0, onComplete);
    }

    /**
     * takes a string of code and highlights it according to the language specified
     *
     * @param {string} code
     * @param {string} language
     * @param {Function} onComplete
     * @returns void
     */
    function _highlightBlockForLanguage(code, language, onComplete) {
        var patterns = _getPatternsForLanguage(language);
        _processCodeWithPatterns(_htmlEntities(code), patterns, onComplete);
    }

    /**
     * highlight an individual code block
     *
     * @param {Array} code_blocks
     * @param {number} i
     * @returns void
     */
    function _highlightCodeBlock(code_blocks, i, onComplete) {
        if (i < code_blocks.length) {
            var block = code_blocks[i],
                language = _getLanguageForBlock(block);

            if (!_hasClass(block, 'rainbow') && language) {
                language = language.toLowerCase();

                _addClass(block, 'rainbow');

                return _highlightBlockForLanguage(block.innerHTML, language, function(code) {
                    block.innerHTML = code;

                    // reset the replacement arrays
                    replacements = {};
                    replacement_positions = {};

                    // if you have a listener attached tell it that this block is now highlighted
                    if (onHighlight) {
                        onHighlight(block, language);
                    }

                    // process the next block
                    setTimeout(function() {
                        _highlightCodeBlock(code_blocks, ++i, onComplete);
                    }, 0);
                });
            }
            return _highlightCodeBlock(code_blocks, ++i, onComplete);
        }

        if (onComplete) {
            onComplete();
        }
    }

    /**
     * start highlighting all the code blocks
     *
     * @returns void
     */
    function _highlight(node, onComplete) {

        // the first argument can be an Event or a DOM Element
        // I was originally checking instanceof Event but that makes it break
        // when using mootools
        //
        // @see https://github.com/ccampbell/rainbow/issues/32
        //
        node = node && typeof node.getElementsByTagName == 'function' ? node : document;

        var pre_blocks = node.getElementsByTagName('pre'),
            code_blocks = node.getElementsByTagName('code'),
            i,
            final_pre_blocks = [],
            final_code_blocks = [];

        // first loop through all pre blocks to find which ones to highlight
        // also strip whitespace
        for (i = 0; i < pre_blocks.length; ++i) {

            // strip whitespace around code tags when they are inside of a pre tag
            // this makes the themes look better because you can't accidentally
            // add extra linebreaks at the start and end
            //
            // when the pre tag contains a code tag then strip any extra whitespace
            // for example
            // <pre>
            //      <code>var foo = true;</code>
            // </pre>
            //
            // will become
            // <pre><code>var foo = true;</code></pre>
            //
            // if you want to preserve whitespace you can use a pre tag on its own
            // without a code tag inside of it
            if (pre_blocks[i].getElementsByTagName('code').length) {
                pre_blocks[i].innerHTML = pre_blocks[i].innerHTML.replace(/^\s+/, '').replace(/\s+$/, '');
                continue;
            }

            // if the pre block has no code blocks then we are going to want to
            // process it directly
            final_pre_blocks.push(pre_blocks[i]);
        }

        // @see http://stackoverflow.com/questions/2735067/how-to-convert-a-dom-node-list-to-an-array-in-javascript
        // we are going to process all <code> blocks
        for (i = 0; i < code_blocks.length; ++i) {
            final_code_blocks.push(code_blocks[i]);
        }

        _highlightCodeBlock(final_code_blocks.concat(final_pre_blocks), 0, onComplete);
    }

    /**
     * public methods
     */
    return {

        /**
         * extends the language pattern matches
         *
         * @param {*} language     name of language
         * @param {*} patterns      array of patterns to add on
         * @param {boolean|null} bypass      if true this will bypass the default language patterns
         */
        extend: function(language, patterns, bypass) {

            // if there is only one argument then we assume that we want to
            // extend the default language rules
            if (arguments.length == 1) {
                patterns = language;
                language = DEFAULT_LANGUAGE;
            }

            bypass_defaults[language] = bypass;
            language_patterns[language] = patterns.concat(language_patterns[language] || []);
        },

        /**
         * call back to let you do stuff in your app after a piece of code has been highlighted
         *
         * @param {Function} callback
         */
        onHighlight: function(callback) {
            onHighlight = callback;
        },

        /**
         * method to set a global class that will be applied to all spans
         *
         * @param {string} class_name
         */
        addClass: function(class_name) {
            global_class = class_name;
        },

        /**
         * starts the magic rainbow
         *
         * @returns void
         */
        color: function() {

            // if you want to straight up highlight a string you can pass the string of code,
            // the language, and a callback function
            if (typeof arguments[0] == 'string') {
                return _highlightBlockForLanguage(arguments[0], arguments[1], arguments[2]);
            }

            // if you pass a callback function then we rerun the color function
            // on all the code and call the callback function on complete
            if (typeof arguments[0] == 'function') {
                return _highlight(0, arguments[0]);
            }

            // otherwise we use whatever node you passed in with an optional
            // callback function as the second parameter
            _highlight(arguments[0], arguments[1]);
        }
    };
}) ();

/**
 * adds event listener to start highlighting
 */
(function() {
    if (document.addEventListener) {
        return document.addEventListener('DOMContentLoaded', Rainbow.color, false);
    }
    window.attachEvent('onload', Rainbow.color);
}) ();

// When using Google closure compiler in advanced mode some methods
// get renamed.  This keeps a public reference to these methods so they can
// still be referenced from outside this library.
Rainbow["onHighlight"] = Rainbow.onHighlight;
Rainbow["addClass"] = Rainbow.addClass;
/**
 * C patterns
 *
 * @author Daniel Holden
 * @author Craig Campbell
 * @version 1.0.7
 */
Rainbow.extend('c', [
    {
        'name': 'meta.preprocessor',
        'matches': {
            1: [
                {
                    'matches': {
                        1: 'keyword.define',
                        2: 'entity.name'
                    },
                    'pattern': /(\w+)\s(\w+)\b/g
                },
                {
                    'name': 'keyword.define',
                    'pattern': /endif/g
                },
                {
                    'name': 'constant.numeric',
                    'pattern': /\d+/g
                },
                {
                    'matches': {
                        1: 'keyword.include',
                        2: 'string'
                    },
                    'pattern': /(include)\s(.*?)$/g
                }
            ]
        },
        'pattern': /\#([\S\s]*?)$/gm
    },
    {
        'name': 'keyword',
        'pattern': /\b(do|goto|typedef)\b/g
    },
    {
        'name': 'entity.label',
        'pattern': /\w+:/g
    },
    {
        'matches': {
            1: 'storage.type',
            3: 'storage.type',
            4: 'entity.name.function'
        },
        'pattern': /\b((un)?signed|const)? ?(void|char|short|int|long|float|double)\*? +((\w+)(?= ?\())?/g
    },
    {
        'matches': {
            2: 'entity.name.function'
        },
        'pattern': /(\w|\*) +((\w+)(?= ?\())/g
    },
    {
        'name': 'storage.modifier',
        'pattern': /\b(static|extern|auto|register|volatile|inline)\b/g
    },
    {
        'name': 'support.type',
        'pattern': /\b(struct|union|enum)\b/g
    }
]);
/**
 * Generic language patterns
 *
 * @author Craig Campbell
 * @version 1.0.11
 */
Rainbow.extend([
    {
        'matches': {
            1: [
                {
                    'name': 'keyword.operator',
                    'pattern': /\=|\+/g
                },
                {
                    'name': 'keyword.dot',
                    'pattern': /\./g
                }
            ],
            2: {
                'name': 'string',
                'matches': {
                    'name': 'constant.character.escape',
                    'pattern': /\\('|"){1}/g
                }
            }
        },
        'pattern': /(\(|\s|\[|\=|:|\+|\.)(('|")([^\\\1]|\\.)*?(\3))/gm
    },
    {
        'name': 'comment',
        'pattern': /\/\*[\s\S]*?\*\/|(\/\/|\#)[\s\S]*?$/gm
    },
    {
        'name': 'constant.numeric',
        'pattern': /\b(\d+(\.\d+)?(e(\+|\-)?\d+)?(f|d)?|0x[\da-f]+)\b/gi
    },
    {
        'matches': {
            1: 'keyword'
        },
        'pattern': /\b(and|array|as|b(ool(ean)?|reak)|c(ase|atch|har|lass|on(st|tinue))|d(ef|elete|o(uble)?)|e(cho|lse(if)?|xit|xtends|xcept)|f(inally|loat|or(each)?|unction)|global|if|import|int(eger)?|long|new|object|or|pr(int|ivate|otected)|public|return|self|st(ring|ruct|atic)|switch|th(en|is|row)|try|(un)?signed|var|void|while)(?=\(|\b)/gi
    },
    {
        'name': 'constant.language',
        'pattern': /true|false|null/g
    },
    {
        'name': 'keyword.operator',
        'pattern': /\+|\!|\-|&(gt|lt|amp);|\||\*|\=/g
    },
    {
        'matches': {
            1: 'function.call'
        },
        'pattern': /(\w+?)(?=\()/g
    },
    {
        'matches': {
            1: 'storage.function',
            2: 'entity.name.function'
        },
        'pattern': /(function)\s(.*?)(?=\()/g
    }
]);
// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof eminorv2 !== 'undefined' ? eminorv2 : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 189680;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "data:application/octet-stream;base64,Iq4o15gvikLNZe8jkUQ3cS87TezP+8C1vNuJgaXbtek4tUjzW8JWORnQBbbxEfFZm08Zr6SCP5IYgW3a1V4cq0ICA6OYqgfYvm9wRQFbgxKMsuROvoUxJOK0/9XDfQxVb4l78nRdvnKxlhY7/rHegDUSxyWnBtyblCZpz3Txm8HSSvGewWmb5OMlTziGR77vtdWMi8adwQ9lnKx3zKEMJHUCK1lvLOktg+SmbqqEdErU+0G93KmwXLVTEYPaiPl2q99m7lJRPpgQMrQtbcYxqD8h+5jIJwOw5A7vvsd/Wb/Cj6g98wvgxiWnCpNHkafVb4ID4FFjygZwbg4KZykpFPwv0kaFCrcnJskmXDghGy7tKsRa/G0sTd+zlZ0TDThT3mOvi1RzCmWosnc8uwpqduau7UcuycKBOzWCFIUscpJkA/FMoei/ogEwQrxLZhqokZf40HCLS8IwvlQGo1FsxxhS79YZ6JLREKllVSQGmdYqIHFXhTUO9LjRuzJwoGoQyNDSuBbBpBlTq0FRCGw3Hpnrjt9Md0gnqEib4bW8sDRjWsnFswwcOcuKQeNKqthOc+Njd0/KnFujuLLW828uaPyy713ugo90YC8XQ29jpXhyq/ChFHjIhOw5ZBoIAseMKB5jI/r/vpDpvYLe62xQpBV5xrL3o/m+K1Ny4/J4ccacYSbqzj4nygfCwCHHuIbRHuvgzdZ92up40W7uf0999bpvF3KqZ/AGppjIosV9YwquDfm+BJg/ERtHHBM1C3EbhH0EI/V32yiTJMdAe6vKMry+yRUKvp48TA0QnMRnHUO2Qj7LvtTFTCp+ZfycKX9Z7PrWOqtvy18XWEdKjBlEbAAAAED7Ifk/AAAAAC1EdD4AAACAmEb4PAAAAGBRzHg7AAAAgIMb8DkAAABAICV6OAAAAIAiguM2AAAAAB3zaTUWVueerwPSPJsroYabhAY9gnZJaMIlPD0R6i2BmZdxPZVkeeF//aU9u73X2d982z2V1iboCy4RPjqMMOKOeUU+SK+8mvLXej6N7bWg98awPvFo44i1+OQ+LUMc6+I2Gj/8qfHSTWJQP3sUrkfheoQ/mpmZmZmZuT8AAAAAAADwPwAAAAAAACRAAAAAAAAAWUAAAAAAAECPQAAAAAAAiMNAAAAAAABq+EAAAAAAgIQuQQAAAADQEmNBAAAAAITXl0EAAAAAZc3NQQAAACBfoAJCAAAA6HZIN0IAAACilBptQgAAQOWcMKJCAACQHsS81kIAADQm9WsMQ109f2aeoOY/AAAAAACIOT1EF3X6UrDmPwAAAAAAANg8/tkLdRLA5j8AAAAAAHgovb921N3cz+Y/AAAAAADAHj0pGmU8st/mPwAAAAAAANi84zpZmJLv5j8AAAAAAAC8vIaTUfl9/+Y/AAAAAADYL72jLfRmdA/nPwAAAAAAiCy9w1/s6HUf5z8AAAAAAMATPQXP6oaCL+c/AAAAAAAwOL1SgaVImj/nPwAAAAAAwAC9/MzXNb1P5z8AAAAAAIgvPfFnQlbrX+c/AAAAAADgAz1IbauxJHDnPwAAAAAA0Ce9OF3eT2mA5z8AAAAAAADdvAAdrDi5kOc/AAAAAAAA4zx4AetzFKHnPwAAAAAAAO28YNB2CXux5z8AAAAAAEAgPTPBMAHtwec/AAAAAAAAoDw2hv9iatLnPwAAAAAAkCa9O07PNvPi5z8AAAAAAOACvejDkYSH8+c/AAAAAABYJL1OGz5UJwToPwAAAAAAADM9GgfRrdIU6D8AAAAAAAAPPX7NTJmJJeg/AAAAAADAIb3QQrkeTDboPwAAAAAA0Ck9tcojRhpH6D8AAAAAABBHPbxbnxf0V+g/AAAAAABgIj2vkUSb2WjoPwAAAAAAxDK9laMx2cp56D8AAAAAAAAjvbhlitnHiug/AAAAAACAKr0AWHik0JvoPwAAAAAAAO28I6IqQuWs6D8AAAAAACgzPfoZ1roFvug/AAAAAAC0Qj2DQ7UWMs/oPwAAAAAA0C69TGYIXmrg6D8AAAAAAFAgvQd4FZmu8eg/AAAAAAAoKD0OLCjQ/gLpPwAAAAAAsBy9lv+RC1sU6T8AAAAAAOAFvfkvqlPDJek/AAAAAABA9TxKxs2wNzfpPwAAAAAAIBc9rphfK7hI6T8AAAAAAAAJvctSyMtEWuk/AAAAAABoJT0hb3aa3WvpPwAAAAAA0Da9Kk7en4J96T8AAAAAAAABvaMjeuQzj+k/AAAAAAAALT0EBspw8aDpPwAAAAAApDi9if9TTbuy6T8AAAAAAFw1PVvxo4KRxOk/AAAAAAC4Jj3FuEsZdNbpPwAAAAAAAOy8jiPjGWPo6T8AAAAAANAXPQLzB41e+uk/AAAAAABAFj1N5V17ZgzqPwAAAAAAAPW89riO7Xoe6j8AAAAAAOAJPScuSuybMOo/AAAAAADYKj1dCkaAyULqPwAAAAAA8Bq9myU+sgNV6j8AAAAAAGALPRNi9IpKZ+o/AAAAAACIOD2nszATnnnqPwAAAAAAIBE9jS7BU/6L6j8AAAAAAMAGPdL8eVVrnuo/AAAAAAC4Kb24bzUh5bDqPwAAAAAAcCs9gfPTv2vD6j8AAAAAAADZPIAnPDr/1eo/AAAAAAAA5Dyj0lqZn+jqPwAAAAAAkCy9Z/Mi5kz76j8AAAAAAFAWPZC3jSkHDus/AAAAAADULz2piZpsziDrPwAAAAAAcBI9SxpPuKIz6z8AAAAAAEdNPedHtxWERus/AAAAAAA4OL06WeWNclnrPwAAAAAAAJg8asXxKW5s6z8AAAAAANAKPVBe+/J2f+s/AAAAAACA3jyySSfyjJLrPwAAAAAAwAS9AwahMLCl6z8AAAAAAHANvWZvmrfguOs/AAAAAACQDT3/wUuQHszrPwAAAAAAoAI9b6Hzw2nf6z8AAAAAAHgfvbgd11vC8us/AAAAAACgEL3pskFhKAbsPwAAAAAAQBG94FKF3ZsZ7D8AAAAAAOALPe5k+tkcLew/AAAAAABACb0v0P9fq0DsPwAAAAAA0A69Ff36eEdU7D8AAAAAAGY5PcvQVy7xZ+w/AAAAAAAQGr22wYiJqHvsPwAAAACARVi9M+cGlG2P7D8AAAAAAEgavd/EUVdAo+w/AAAAAAAAyzyUkO/cILfsPwAAAAAAQAE9iRZtLg/L7D8AAAAAACDwPBLEXVUL3+w/AAAAAABg8zw7q1tbFfPsPwAAAAAAkAa9vIkHSi0H7T8AAAAAAKAJPfrICCtTG+0/AAAAAADgFb2Fig0Ihy/tPwAAAAAAKB09A6LK6shD7T8AAAAAAKABPZGk+9wYWO0/AAAAAAAA3zyh5mLodmztPwAAAAAAoAO9ToPJFuOA7T8AAAAAANgMvZBg/3Fdle0/AAAAAADA9DyuMtsD5qntPwAAAAAAkP88JYM61ny+7T8AAAAAAIDpPEW0AfMh0+0/AAAAAAAg9by/BRxk1eftPwAAAAAAcB297Jp7M5f87T8AAAAAABQWvV59GWtnEe4/AAAAAABICz3no/UURibuPwAAAAAAzkA9XO4WOzM77j8AAAAAAGgMPbQ/i+cuUO4/AAAAAAAwCb1obWckOWXuPwAAAAAAAOW8REzH+1F67j8AAAAAAPgHvSa3zXd5j+4/AAAAAABw87zokKSir6TuPwAAAAAA0OU85Mp8hvS57j8AAAAAABoWPQ1oji1Iz+4/AAAAAABQ9TwUhRiiquTuPwAAAAAAQMY8E1ph7hv67j8AAAAAAIDuvAZBthycD+8/AAAAAACI+rxjuWs3KyXvPwAAAAAAkCy9dXLdSMk67z8AAAAAAACqPCRFblt2UO8/AAAAAADw9Lz9RIh5MmbvPwAAAAAAgMo8OL6crf177z8AAAAAALz6PII8JALYke8/AAAAAABg1LyOkJ6BwafvPwAAAAAADAu9EdWSNrq97z8AAAAAAODAvJRxjyvC0+8/AAAAAIDeEL3uIypr2envPwAAAAAAQ+48AAAAAAAA8D8AAAAAAAAAAL68WvoaC/A/AAAAAABAs7wDM/upPRbwPwAAAAAAFxK9ggI7FGgh8D8AAAAAAEC6PGyAdz6aLPA/AAAAAACY7zzKuxEu1DfwPwAAAAAAQMe8iX9u6BVD8D8AAAAAADDYPGdU9nJfTvA/AAAAAAA/Gr1ahRXTsFnwPwAAAAAAhAK9lR88Dgpl8D8AAAAAAGDxPBr33SlrcPA/AAAAAAAkFT0tqHIr1HvwPwAAAAAAoOm80Jt1GEWH8D8AAAAAAEDmPMgHZva9kvA/AAAAAAB4AL2D88bKPp7wPwAAAAAAAJi8MDkfm8ep8D8AAAAAAKD/PPyI+WxYtfA/AAAAAADI+ryKbORF8cDwPwAAAAAAwNk8FkhyK5LM8D8AAAAAACAFPdhdOSM72PA/AAAAAADQ+rzz0dMy7OPwPwAAAAAArBs9pqnfX6Xv8D8AAAAAAOgEvfDS/q9m+/A/AAAAAAAwDb1LI9coMAfxPwAAAAAAUPE8W1sS0AET8T8AAAAAAADsPPkqXqvbHvE/AAAAAAC8Fj3VMWzAvSrxPwAAAAAAQOg8fQTyFKg28T8AAAAAANAOvektqa6aQvE/AAAAAADg6Dw4MU+TlU7xPwAAAAAAQOs8cY6lyJha8T8AAAAAADAFPd/DcVSkZvE/AAAAAAA4Az0RUn08uHLxPwAAAAAA1Cg9n7uVhtR+8T8AAAAAANAFvZONjDj5ivE/AAAAAACIHL1mXTdYJpfxPwAAAAAA8BE9p8tv61uj8T8AAAAAAEgQPeOHE/iZr/E/AAAAAAA5R71UXQSE4LvxPwAAAAAA5CQ9QxwolS/I8T8AAAAAACAKvbK5aDGH1PE/AAAAAACA4zwxQLRe5+DxPwAAAAAAwOo8ONn8IlDt8T8AAAAAAJABPffNOITB+fE/AAAAAAB4G72PjWKIOwbyPwAAAAAAlC09Hqh4Nb4S8j8AAAAAAADYPEHdfZFJH/I/AAAAAAA0Kz0jE3mi3SvyPwAAAAAA+Bk952F1bno48j8AAAAAAMgZvScUgvsfRfI/AAAAAAAwAj0CprJPzlHyPwAAAAAASBO9sM4ecYVe8j8AAAAAAHASPRZ94mVFa/I/AAAAAADQET0P4B00DnjyPwAAAAAA7jE9PmP14d+E8j8AAAAAAMAUvTC7kXW6kfI/AAAAAADYE70J3x/1nZ7yPwAAAAAAsAg9mw7RZoqr8j8AAAAAAHwivTra2tB/uPI/AAAAAAA0Kj35Gnc5fsXyPwAAAAAAgBC92QLkpoXS8j8AAAAAANAOvXkVZB+W3/I/AAAAAAAg9LzPLj6pr+zyPwAAAAAAmCS9Ioi9StL58j8AAAAAADAWvSW2MQr+BvM/AAAAAAA2Mr0Lpe7tMhTzPwAAAACA33C9uNdM/HAh8z8AAAAAAEgivaLpqDu4LvM/AAAAAACYJb1mF2SyCDzzPwAAAAAA0B49J/rjZmJJ8z8AAAAAAADcvA+fkl/FVvM/AAAAAADYML25iN6iMWTzPwAAAAAAyCI9Oao6N6dx8z8AAAAAAGAgPf50HiMmf/M/AAAAAABgFr042AVtrozzPwAAAAAA4Aq9wz5xG0Ca8z8AAAAAAHJEvSCg5TTbp/M/AAAAAAAgCD2Vbuy/f7XzPwAAAAAAgD498qgTwy3D8z8AAAAAAIDvPCLh7UTl0PM/AAAAAACgF727NBJMpt7zPwAAAAAAMCY9zE4c33Ds8z8AAAAAAKZIvYx+rARF+vM/AAAAAADcPL27oGfDIgj0PwAAAAAAuCU9lS73IQoW9D8AAAAAAMAePUZGCSf7I/Q/AAAAAABgE70gqVDZ9TH0PwAAAAAAmCM967mEP/o/9D8AAAAAAAD6PBmJYWAITvQ/AAAAAADA9rwB0qdCIFz0PwAAAAAAwAu9FgAd7UFq9D8AAAAAAIASvSYzi2ZtePQ/AAAAAADgMD0APMG1oob0PwAAAAAAQC29BK+S4eGU9D8AAAAAACAMPXLT1/Aqo/Q/AAAAAABQHr0BuG3qfbH0PwAAAAAAgAc94Sk21dq/9D8AAAAAAIATvTLBF7hBzvQ/AAAAAACAAD3b3f2Zstz0PwAAAAAAcCw9lqvYgS3r9D8AAAAAAOAcvQItnXay+fQ/AAAAAAAgGT3BMUV/QQj1PwAAAAAAwAi9KmbPotoW9T8AAAAAAAD6vOpRP+h9JfU/AAAAAAAISj3aTp1WKzT1PwAAAAAA2Ca9Gqz29OJC9T8AAAAAAEQyvduUXcqkUfU/AAAAAAA8SD1rEendcGD1PwAAAAAAsCQ93im1Nkdv9T8AAAAAAFpBPQ7E4tsnfvU/AAAAAADgKb1vx5fUEo31PwAAAAAACCO9TAv/Jwic9T8AAAAAAOxNPSdUSN0Hq/U/AAAAAAAAxLz0eqj7Ebr1PwAAAAAACDA9C0ZZiibJ9T8AAAAAAMgmvT+OmZBF2PU/AAAAAACaRj3hIK0Vb+f1PwAAAAAAQBu9yuvcIKP29T8AAAAAAHAXPbjcdrnhBfY/AAAAAAD4Jj0V983mKhX2PwAAAAAAAAE9MVU6sH4k9j8AAAAAANAVvbUpGR3dM/Y/AAAAAADQEr0Tw8w0RkP2PwAAAAAAgOq8+o68/rlS9j8AAAAAAGAovZczVYI4YvY/AAAAAAD+cT2OMgjHwXH2PwAAAAAAIDe9fqlM1FWB9j8AAAAAAIDmPHGUnrH0kPY/AAAAAAB4Kb3NO39mnqDmP4cB63MUoec/26AqQuWs6D+Q8KOCkcTpP63TWpmf6Oo/nFKF3ZsZ7D+HpPvcGFjtP9qQpKKvpO4/AAAAAAAA8D8PiflsWLXwP3tRfTy4cvE/OGJ1bno48j8VtzEK/gbzPyI0Ekym3vM/Jyo21dq/9D8pVEjdB6v1P4LL3moDzTI+QgiNDu6/sj/1nBRh/MAKQN2uLZaYT0VAH/1e4ttZZUDgIfqBfNdkQNtr91Q7MYQ+ND6IPsW+sj+cdyfnl/j/P+Vv+aq//SxAStz7KY6qP0C0S4FxsUAwQKZD478iYUhAs05UhoMthkBj/E3kS/CsQChqx9dsPLlAwLFP2aqoo0AP9Bwg66diwO16wPeWXT5AQEvR5JHVcEAiv7MiRWaKQBTCXJx8l4tAZRMADlOVakAxKbP4aj4VwLw5WzbVeGRAYwVrTliiv0A/jNNUUmYBQUMrpYPagyhBPQveKGumKUHFMJUsbf0UwUMVXvuzsVRAzsAh2qA7oEBtHll70mfSQHIj4JfjtetAoFR6HxiR4UAJxtu+V+q0wAAAAAAAAAAALP7///+/sj/WNLNbUoknQCUYMBVjbYFAbfQYPplNwUBmFZAO1BLiQNmMzCmPPbQ9TLBy0f+/sj/TPZW5sFcXQOmIhwqS42BAgcTInfkMkECm48ZT6RefQIaq4W8D4SW+S+LA9/b/sb90gKSuskUDwBROuUxK9zXARRoKQiIKTcAP2JKorHI/wG0CJ+kW03e+Qh5eSWL/sb9DqCSKOTb3v/Onr+3zih7AA2MkxeZiJsAP54+vgd4JwNN9B4SS7UFADnxKRjmYdkDWYRBtbqaSQH6bw7j8n5FAgZA3/JayZUBZWYuQZTg2QI+H6A6eBmFAmwfqQobncED/+rY6AzxjQAkYOUSzUC1AUWepBzMiXUA4aVlQffOtQF+wtm670uNAvamfjw+B/EDcSSxPd0HnQN7FmAyBYE5AZCh+XAJtkEBgHb6P+Fq3QDj6dvq4zMJAZOgLxx3MokAAAAAAAAAAADL9/////7G/eadPtNApIMBj6Bl7AhFwwPzKTc1uaqPAPWTMNguFtMDMleRHsRipvcb7mub//7G/v2sM+XCjEMCDF31aL+tQwGPMQmezs3TA14ujKO+mdcBPyI/Tqc81vlTtrlHrP7q//9kCM8JwEsDaFl3CcexMwF/VGEfTh2zA9htcX7lma8DSJsZEJvGHvhCwSJGOPrq/2k67aYQEBsB/kGjB4qkzwKpKEN6jKUXAUm7POTZfNcDkZ9PMI9VHQD7uMcDrDoVAmnyORE5oqkCmVB2muqu1QEvf1A16vJ1AHzEKKXDmYMD/ZK54iog9QLocgtton29A96BJzgWsh0ApwNRIJRuHQNTYPjxefmNAa+gb54bWE8DlzVvepixkQBmE2NBikb5AmF63sJpXAEEZnIZyU/YlQVytGXfSVyRBGKqlDmn5EcGyEVr/slFUQDn4e+cxH59AKc5kDR8P0UCX0bqqbVfoQEs2fM8ES9tABKD//C5vssAAAAAAAAAAAPP9////P7q/93lnopFFMMB2teRT0LyHwBV0+EDnJMfAapzQZdCm58CYoKEaQ/q2ve9/Wcv/P7q/S60DyuYcIMCwuadsbfVmwE9zMWnGdJXAnaf9iONopMDdnq2nIfwpPnvRIVv1/70/iq1e6Lx2D0Ap0aadSI9BQDcYLE2Fw1ZA5T6ojo9HSED0RFX21Ol8PoMNdr5C/70/wK6P+bfyAkBkqXF/N3woQOKOfxeosTFA/sF0pUlLFECcBjShSWVBQF+n8QczDHVAI9U3UHxbkEDpMS6jfdaLQFPtLnxt8llA3OzVir1vNUDVLPkUk1JfQNnbotXYCG1AqYQY2nprXUCSUU70sbogQKxsZY5FjVxATydNltyFrEB/u8WXhgviQLsXj7Is1PdALQt6aREV3kA9Y6+o6qNNQAFnBhs2+45A+7YGV0TptEAVu6W4sKS+QFFebwMwgJdAAAAAAAAAAADO/P////+9P85/fzWdeipAkKUuZdTAeUDMMqWjfUWuQN2CJ8N66r5Afcrh2mcGrT1DAMHi//+9P+MVY24ENhtA7QImRbkTW0BJ1lLQFi2AQLcMfru4hYBAAAAAAAAA8D8AAAAAAADwPwAAAAAAAABAAAAAAAAAGEAAAAAAAAA4QAAAAAAAAF5AAAAAAACAhkAAAAAAALCzQAAAAAAAsONAAAAAAAAmFkEAAAAAgK9LQQAAAACoCINBAAAAAPyMvEEAAADAjDL3QQAAACg7TDRCAACAdXcHc0IAAIB1dwezQgAA2OzuN/RCAABzyuy+NkMAkGgwuQJ7QwBaQb6z4cBDIMa16TsoBkRs8FlhUndORJ6kwUNR6hVCV0z1dXD8I0IatoqBMqEgQhom6CK1sBBC6KGls8F/9kE/89P1GHTVQSpfuXsMq61BmMxd+Xb4fUFM9IBQ6fFFQeuHhx9CtgZBBNhYCKyHv0BSO7x7YFpqQAUn9h+TDQRAAAAAAAAAAAAAAAAAqAiDQQAAAIBpvZxBAAAAsKb9oUEAAABwcRiZQQAAAJC27oVBAAAA4HFxaUEAAAAAex9EQQAAAAC80BVBAAAAAIDn30AAAAAAABSeQAAAAAAAgFBAAAAAAAAA8D+AQAAAqBsAABQAAABDLlVURi04AAAAAAAAAAAAAAAAAN4SBJUAAAAA////////////////jBsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAACAADAAwAAwAQAAMAFAADABgAAwAcAAMAIAADACQAAwAoAAMALAADADAAAwA0AAMAOAADADwAAwBAAAMARAADAEgAAwBMAAMAUAADAFQAAwBYAAMAXAADAGAAAwBkAAMAaAADAGwAAwBwAAMAdAADAHgAAwB8AAMAAAACzAQAAwwIAAMMDAADDBAAAwwUAAMMGAADDBwAAwwgAAMMJAADDCgAAwwsAAMMMAADDDQAA0w4AAMMPAADDAAAMuwEADMMCAAzDAwAMwwQADNMAAAAAAAAAAAAAAAAAAAABAIAAAA8AAAAAeAAACwAAAAAEAAAKAAAAAAIAAAkAAAAAAQAACAAAAIAAAAAHAAAAQAAAAAYAAAAgAAAABQAAABAAAAAEAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8HQAABQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAMAAABI2gIAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAA//////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwdAADAHQAACQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAMAAABQ2gIAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAdAABEHgAABQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAMAAABY3gIAAAQAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAACv////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEQeAAAAAAAAAAABAAAAAAAAAAEAAAAAAQAAAQEAAAABAAABAQAAAAAAAAEAAAAAAAAAAQAAAAABAAABAQAAAAEAAAEBAAAAAAEAAAAAAAAAAQAAAAABAAABAQAAAAEAAAEBAAAAAAAAAQAAAAAAAAABAAAAAAEAAAEBAAAAAQAAAQEAAAAAAAAAAAIAAAAAAAAAAgAAAAACAAACAgAAAAIAAAICAAAAAAAAAgAAAAAAAAACAAAAAAIAAAICAAAAAgAAAgIAAAAAAgAAAAAAAAACAAAAAAIAAAICAAAAAgAAAgIAAAAAAAACAAAAAAAAAAIAAAAAAgAAAgIAAAACAAACAgAAAAAAAAAABAAAAAAAAAAEAAAAAAQAAAQEAAAABAAABAQAAAAAAAAEAAAAAAAAAAQAAAAABAAABAQAAAAEAAAEBAAAAAAEAAAAAAAAAAQAAAAABAAABAQAAAAEAAAEBAAAAAAAAAQAAAAAAAAABAAAAAAEAAAEBAAAAAQAAAQEAAAAAAAAAAAIAAAAAAAAAAgAAAAACAAACAgAAAAIAAAICAAAAAAAAAgAAAAAAAAACAAAAAAIAAAICAAAAAgAAAgIAAAAAAgAAAAAAAAACAAAAAAIAAAICAAAAAgAAAgIAAAAAAAACAAAAAAAAAAIAAAAAAgAAAgIAAAACAAACAgAAAAAAAAAABAAAAAAAAAAEAAAAAAQAAAQEAAAABAAABAQAAAAAAAAEAAAAAAAAAAQAAAAABAAABAQAAAAEAAAEBAAAAAAEAAAAAAAAAAQAAAAABAAABAQAAAAEAAAEBAAAAAAAAAQAAAAAAAAABAAAAAAEAAAEBAAAAAQAAAQEAAAAAAAAAAAIAAAAAAAAAAgAAAAACAAACAgAAAAIAAAICAAAAAAAAAgAAAAAAAAACAAAAAAIAAAICAAAAAgAAAgIAAAAAAgAAAAAAAAACAAAAAAIAAAICAAAAAgAAAgIAAAAAAAACAAAAAAAAAAIAAAAAAgAAAgIAAAACAAACAgAAAAAAAAAABAAAAAAAAAAEAAAAAAQAAAQEAAAABAAABAQAAAAAAAAEAAAAAAAAAAQAAAAABAAABAQAAAAEAAAEBAAAAAAEAAAAAAAAAAQAAAAABAAABAQAAAAEAAAEBAAAAAAAAAQAAAAAAAAABAAAAAAEAAAEBAAAAAQAAAQEAAAAAAAAAAAIAAAAAAAAAAgAAAAACAAACAgAAAAIAAAICAAAAAAAAAgAAAAAAAAACAAAAAAIAAAICAAAAAgAAAgIAAAAAAgAAAAAAAAACAAAAAAIAAAICAAAAAgAAAgIAAAAAAAACAAAAAAAAAAIAAAAAAgAAAgIAAAACAAACAgAAAAAAAAAAAAAAAAAEAAAABAAAAAAAAAAAAAAABAAAAAQAAAAABAAAAAQAAAQEAAAEBAAAAAQAAAAEAAAEBAAABAQAAAAAAAAAAAQAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAEAAAABAAABAQAAAQEAAAABAAAAAQAAAQEAAAEBAAAAAAAAAAAAAAAAAgAAAAIAAAAAAAAAAAAAAAIAAAACAAAAAAIAAAACAAACAgAAAgIAAAACAAAAAgAAAgIAAAICAAAAAAAAAAACAAAAAgAAAAAAAAAAAAAAAgAAAAIAAAAAAgAAAAIAAAICAAACAgAAAAIAAAACAAACAgAAAgIAAAAAAAAAAAAAAAAEAAAABAAAAAAAAAAAAAAABAAAAAQAAAAABAAAAAQAAAQEAAAEBAAAAAQAAAAEAAAEBAAABAQAAAAAAAAAAAQAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAEAAAABAAABAQAAAQEAAAABAAAAAQAAAQEAAAEBAAAAAAAAAAAAAAAAAgAAAAIAAAAAAAAAAAAAAAIAAAACAAAAAAIAAAACAAACAgAAAgIAAAACAAAAAgAAAgIAAAICAAAAAAAAAAACAAAAAgAAAAAAAAAAAAAAAgAAAAIAAAAAAgAAAAIAAAICAAACAgAAAAIAAAACAAACAgAAAgIAAAAAAAAAAAAAAAAEAAAABAAAAAAAAAAAAAAABAAAAAQAAAAABAAAAAQAAAQEAAAEBAAAAAQAAAAEAAAEBAAABAQAAAAAAAAAAAQAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAEAAAABAAABAQAAAQEAAAABAAAAAQAAAQEAAAEBAAAAAAAAAAAAAAAAAgAAAAIAAAAAAAAAAAAAAAIAAAACAAAAAAIAAAACAAACAgAAAgIAAAACAAAAAgAAAgIAAAICAAAAAAAAAAACAAAAAgAAAAAAAAAAAAAAAgAAAAIAAAAAAgAAAAIAAAICAAACAgAAAAIAAAACAAACAgAAAgIAAAAAAAAAAAAAAAAEAAAABAAAAAAAAAAAAAAABAAAAAQAAAAABAAAAAQAAAQEAAAEBAAAAAQAAAAEAAAEBAAABAQAAAAAAAAAAAQAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAEAAAABAAABAQAAAQEAAAABAAAAAQAAAQEAAAEBAAAAAAAAAAAAAAAAAgAAAAIAAAAAAAAAAAAAAAIAAAACAAAAAAIAAAACAAACAgAAAgIAAAACAAAAAgAAAgIAAAICAAAAAAAAAAACAAAAAgAAAAAAAAAAAAAAAgAAAAIAAAAAAgAAAAIAAAICAAACAgAAAAIAAAACAAACAgAAAgIAAAACCgAAAAAAAAIAAAAKCgAACgIAAAoIAAAIAAAAAgAAAAAIAAACCgAACgoAAAAIAAAICgAACgIAAAACAAAIAAAACAgAAAAKAAAACgAAAggAAAIIAAACAgAAAgIAAAgKAAAKAAAACAIAAAgCAAAKAAAAAAAAAAgIAAAKCAAAAAIAAAIAAAAKCgAACAAAAAICAAACCgAAAAIAAAACAAAACAAACgIAAAIAAAACCAAACAIAAAAIAAAIAAAACAoAAAoIAAAKCgAACgAAAAICAAAICgAACAIAAAgIAAAKCAAAAgoAAAgIAAAACgAAAAoAAAAAAAAKAAAAAggAAAAAAAAKAgAAQQAhAAEAAQABAAAAQQAgAAAAIABAAAAAQAAhAEEAAQBAAAEAQQAhAAEAIQAAAAEAAQABAAAAIABAAAAAQAAhAAEAIABAACAAQQABAAAAAAAAAAEAAQAAAEEAIAAAACEAQAAgAEAAAQAAAAAAAQAgAEEAAAABACEAAAAhAEEAAAAAAAAAQQAgAEAAIQAAACAAQQABAAAAIQABACEAAQAAAAAAIQABAAEAQAAAAEEAIQBBACAAQAAAAAEAAAAAAAEAQQAAAAEAIQAAACAAQAABAEAAIABBAAEAQAABAEAAIAABACAAAAAAAAEAAQBBAAAAAAABAEAAIQBBACEAAQAgABAEAAAABAQQAAAAABAABBAABAAQAAAAABAEBAAABAAQEAAEABAAABAQAAAQAAAEABAEBBAQAAQAAAAEEBAEAAAAAAAQEAAAAAAEBBAABAAAAAQEAAAABBAQAAQQEAQEABAEABAABAQAAAAEABAEABAQAAAAEAQEEAAEAAAAAAAQAAQEEAAAABAQAAQAEAQAAAAABAAABAQQAAQAEAAAAAAABAAAEAAEABAEBBAABAAQEAAAEAAEAAAAAAAAEAAEEBAEABAAAAQAAAAAEBAEBBAQAAAAEAQEAAAEBAAQAAAQAAAEEBAEABAQBAAAAAAEEBAEBAAQAAAAEAAEEAAEBAAAQQIBAEACAQBAAgEAAAABAEEAAQABAgAAAQIAAEACAAAAAAAAQQAAAEEAAQBBAgEAAAIAAAAAAQABAAAAAQIAAAACAABAAAAAAQAAAEECAQAAAAAAAQAAAEACAQBAAAEAAQIAAAACAQBAAAEAAQAAAEAAAQBBAAEAQQIBAAACAQABAAAAAQIAAEEAAQBBAgEAAAIAAAAAAAAAAAAAQQABAEAAAQABAAEAAQIAAAACAABBAgEAQAIBAEACAQAAAAEAQQIBAAACAAAAAgAAQAAAAAECAABAAgEAQQABAAECAABAAgEAQAAAAAEAAABBAgEAAAAAAAEAAABAAAEAQQACAAAAAgAAEAQAABAGAAAAhAAAEAIAAAAAAAAAgAAAEAYAABCAAAAQAgAAAAYAABCCAAAAhAAAEIYAABAAAAAAgAAAAAQAABCAAAAQgAAAAAIAAACCAAAQhgAAEIYAAAAEAAAQhgAAAIAAAAAAAAAAhgAAEAQAAAAEAAAAhgAAEAAAABACAAAAhgAAAAAAAAAEAAAAgAAAEAYAAACGAAAQggAAAAQAAACAAAAQhgAAEAYAABCCAAAAAAAAAAQAABCGAAAQhgAAEAAAAACGAAAQhAAAEAQAAAAAAAAQgAAAAIYAABACAAAABgAAAIAAABAAAAAAAAAAEIIAABAGAAAAgCAAAEAAAIBAAIAAACCAgEAAAIBAIAAAACCAgEAAAIAAAIAAQCCAgAAAAIAAIAAAQCAAgAAAgABAAAAAQCCAAAAAAAAAIACAACCAAEAAgAAAAICAACCAAEAgAAAAIACAQCAAgEAAAAAAIICAAACAgEAggAAAAICAAACAgEAAAABAAIAAQCAAAAAgAIBAAICAACCAgEAAAIAAIIAAACAAAEAAAIAAAIAAQAAAAEAggAAAIAAAQCCAgEAAgIAAAACAQCCAgAAAgIBAAAAAACAAgEAgAAAAAIAAAAAAgEAggIAAAIAAACAAgAAggABAAAAAAACAgEAAAABAIACAACCAAEAAAEAABABACAQQAAgAAAAAABAAAAQQAAgEEEAAABBACAQQQAgAAEAAAAAAAAQAAAgEAAAAAAAACAQAQAgEEAAAABAACAQQQAAEAEAAABAACAQAAAgAAEAIABBACAQAQAAAAEAIABAAAAQQAAAEEEAIABBAAAQAAAAAAAAIABBAAAAAAAgAEEAAAABAAAQQAAgEEAAIBABACAQAQAgEAAAABABAAAAAAAgAEAAIAABAAAAQQAgEEAAABBBAAAAQQAgEEAAABAAACAQQQAgAAEAIABBAAAAAAAAEAAAABBBACAAAAAAEEEAAAABACAAQAAAEAAAIABAACAAQAAAEAEAAgCAAIAAgAAAAAAgAgCAIIAAAACCAIAAggAAAAAAAACCAAAgAAAAIIIAgCCAAIAgAACAIIIAgCAAAIAAAgAAAAAAACCCAAAAgACAAIIAgAAAAIAgAgAAIAIAACCAAIAgggCAAAAAAAAAAAAAAgAAIIIAAACAAIAAggCAIAAAACACAIAgAAAAIAAAgCCAAIAAAgAAAAIAACCAAIAAAgCAIAAAgACCAAAAAgAAAIAAACCCAAAggAAAAIAAACACAIAAgAAAAAIAgCCCAAAgAgAAAIAAACCAAIAAggCAAIAAAAACAIAggACAIAAAgCACAIAAAgCAAAIAACAAAAAAgACAIIAAAAAAAAAEAAAEAAAABAQABAAAAAQABAAEBAAABAQEBAAAAAQAAAQEAAQABAAEBAQEAAAEBAAEBAQEAAQEBAQAAAAAAAAAAQAAAQAAAAEBAAEAAAABAAEAAQEAAAEBAQEAAAABAAABAQABAAEAAQEBAQAAAQEAAQEBAQABAQEBAAAAAAAAAABAAABAAAAAQEAAQAAAAEAAQABAQAAAQEBAQAAAAEAAAEBAAEAAQABAQEBAAABAQABAQEBAAEBAQEAAAAAAAAAAEAAAEAAAABAQABAAAAAQABAAEBAAABAQEBAAAAAQAAAQEAAQABAAEBAQEAAAEBAAEBAQEAAQEBAQAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAgAAAAIAAAICAAIAAgACAgICAAACAgACAgICAAICAgIAAAAAAAAAAIAAAIAAAACAgACAAAAAgACAAICAAACAgICAAAAAgAAAgIAAgACAAICAgIAAAICAAICAgIAAgICAgAAAAAAAAAAgAAAgAAAAICAAIAAAACAAIAAgIAAAICAgIAAAACAAACAgACAAIAAgICAgAAAgIAAgICAgACAgICAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAgAAAAIAAAICAAIAAgACAgICAAACAgACAgICAAICAgIAAAAAAAAAABAAAAAQAAAAABAAAAAQAAAQEAAAEBAAAAAAEAAAABAAEAAQABAAEAAAEBAAABAQABAQEAAQEBAAAAAAAAAAAAAgAAAAIAAAAAAgAAAAIAAAICAAACAgAAAAACAAAAAgACAAIAAgACAAACAgAAAgIAAgICAAICAgAAAAAAAAAAAAQAAAAEAAAAAAQAAAAEAAAEBAAABAQAAAAABAAAAAQABAAEAAQABAAABAQAAAQEAAQEBAAEBAQAAAAAAAAAAAAIAAAACAAAAAAIAAAACAAACAgAAAgIAAAAAAgAAAAIAAgACAAIAAgAAAgIAAAICAAICAgACAgIAAAAAAAAEAAAAAAQAAAQEAAAAAAQABAAEAAAEBAAEBAQAAAAABAQAAAQABAAEBAQABAAABAQEAAQEAAQEBAQEBAQAAAAACAAAAAAIAAAICAAAAAAIAAgACAAACAgACAgIAAAAAAgIAAAIAAgACAgIAAgAAAgICAAICAAICAgICAgIAAAAABAAAAAAEAAAEBAAAAAAEAAQABAAABAQABAQEAAAAAAQEAAAEAAQABAQEAAQAAAQEBAAEBAAEBAQEBAQEAAAAAAgAAAAACAAACAgAAAAACAAIAAgAAAgIAAgICAAAAAAICAAACAAIAAgICAAIAAAICAgACAgACAgICAgICAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAAEAAAABAAABAAAAAQAAAAEBAAABAQABAAAAAQAAAAEAAQABAAEAAQEAAAEBAAABAQEAAQEBAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAAAgAAAAIAAAIAAAACAAAAAgIAAAICAAIAAAACAAAAAgACAAIAAgACAgAAAgIAAAICAgACAgIAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAAEAAAABAAABAAAAAQAAAAEBAAABAQABAAAAAQAAAAEAAQABAAEAAQEAAAEBAAABAQEAAQEBAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAAAgAAAAIAAAIAAAACAAAAAgIAAAICAAIAAAACAAAAAgACAAIAAgACAgAAAgIAAAICAgACAgIAAAAAAAAAAAAAAAAABAAAAAQAAAQAAAAEAAAABAQAAAQEAAQAAAAEAAAABAAEAAQABAAEBAAABAQAAAQEBAAEBAQAAAAAAAAAAAAAAAgAAAAIAAAIAAAACAAAAAgIAAAICAAIAAAACAAAAAgACAAIAAgACAgAAAgIAAAICAgACAgIAAAAAAAAAAAAAAAQAAAAEAAAEAAAABAAAAAQEAAAEBAAEAAAABAAAAAQABAAEAAQABAQAAAQEAAAEBAQABAQEAAAAAAAAAAAAAAAIAAAACAAACAAAAAgAAAAICAAACAgACAAAAAgAAAAIAAgACAAIAAgIAAAICAAACAgIAAgICAAAAAAAAAIAAQAAAAEAAgAAAAgAAAAKAAEACAABAAoAAAAAAAAQAAAAAAAAABAAAEAAAABAEAAAQAAAAEAQAAAAAAAAAABAACAAAAAgAEAAAIAAAACAQAAggAAAIIBAAAAAAAAAABAAAAgAAAAIEAAAAAAAAAAQAAAIAAAACBAAAAAAAAAAIAAAAAIAAAAiAAIAAAACACAAAgACAAIAIgAAAAAAAAAAAAAAEAAAABAABAAAAAQAAAAEABAABAAQAAAAAAAAQAAAAAgAAABIAAAAAAAAAEAAAAAIAAAASAAAAAAAAAAAQAAAgAAAAIBAAAgAAAAIAEAACIAAAAiAQAAAAAAAEAAAAABAAAAQQAAAAAAEABAABAAAQAQAEEAEAAABAAAQAQAAAEEAABBBAAAAAQQAEAEEAABBBAAQQQQAAAAAAAAAgAACAAAAAgCAAAACAAAAAoAAAgIAAAICgAAAACAAAACgAAIAIAACAKAAAAIgAAACoAACAiAAAgKgAAAAAAAAIAAABAAAAAQgAAAABAAAACQAAAQEAAAEJAAAAAAAAAAgAAAEAAAABCAAAAAEAAAAJAAABAQAAAQkAAAAAAAAAAABAAgAAAAIAAEAgAAAAIAAAQCIAAAAiAABAAAAAAAAAAEACAAAAAgAAQCAAAAAgAABAIgAAACIAAEAAAAAAAAAAACAAAAAgAAAAAAgAAAAIAAAgCAAAIAgAAABAAAAAQAAAIEAAACBAAAAASAAAAEgAACBIAAAgSAAAAAAAAAQAAAAAACAABAAgAAAAAEAEAABAAAAgQAQAIEAAAIAABACAAAAAoAAEAKAAAACAQAQAgEAAAKBABACgQAAAAAAAAQAAAAQAAAAFAAAAAAIAAAECAAAEAgAABQIACAAAAAgBAAAIBAAACAUAAAgAAgAIAQIACAQCAAgFAggAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmC+KQpFEN3HP+8C1pdu16VvCVjnxEfFZpII/ktVeHKuYqgfYAVuDEr6FMSTDfQxVdF2+cv6x3oCnBtybdPGbwcFpm+SGR77vxp3BD8yhDCRvLOktqoR0StypsFzaiPl2UlE+mG3GMajIJwOwx39Zv/ML4MZHkafVUWPKBmcpKRSFCrcnOCEbLvxtLE0TDThTVHMKZbsKanYuycKBhSxykqHov6JLZhqocItLwqNRbMcZ6JLRJAaZ1oU1DvRwoGoQFsGkGQhsNx5Md0gntbywNLMMHDlKqthOT8qcW/NvLmjugo90b2OleBR4yIQIAseM+v++kOtsUKT3o/m+8nhxxohqPyTTCKOFLooZE0RzcAMiOAmk0DGfKZj6LgiJbE7s5iEoRXcT0DjPZlS+bAzpNLcprMDdUHzJtdWEPxcJR7XZ1RaSG/t5iaYLMdGstd+Y23L9L7ffGtDtr+G4ln4makWQfLqZfyzxR5mhJPdskbPi8gEIFvyOhdggaWNpTldxo/5YpH49k/SPdJUNWLaOcljNi3HuShWCHaRUe7VZWsI51TCcE2DyKiOw0cXwhWAoGHlByu8427iw3HmODhg6YIsOnmw+ih6wwXcV1ydLMb3aL694YFxgVfMlVeaUq1WqYphIV0AU6GNqOcpVthCrKjRczLTO6EERr4ZUoZPpcnwRFO6zKrxvY13FqSv2MRh0Fj5czh6Th5szutavXM8kbIFTMnp3hpUomEiPO6+5S2sb6L/EkyEoZswJ2GGRqSH7YKx8SDKA7F1dXYTvsXWF6QIjJtyIG2XrgT6JI8WsltPzb20POUL0g4JECy4EIISkSvDIaV6bH55CaMYhmmzp9mGcDGfwiNOr0qBRamgvVNgopw+WozNRq2wL727kO3oTUPA7upgq+34dZfGhdgGvOT5ZymaIDkOCGYbujLSfb0XDpYR9vl6LO9h1b+BzIMGFn0QaQKZqwVZiqtNOBnc/NnLf/hs9AptCJNfQN0gSCtDT6g/bm8DxSclyUwd7G5mA2HnUJffe6PYaUP7jO0x5tr3gbJe6BsAEtk+pwcRgn0DCnlxeYyRqGa9v+2i1U2w+67I5E2/sUjsfUfxtLJUwm0RFgcwJvV6vBNDjvv1KM94HKA9ms0suGVeoy8APdMhFOV8L0tv707m9wHlVCjJgGsYAodZ5cixA/iWfZ8yjH/v46aWO+CIy298WdTwVa2H9yB5QL6tSBa36tT0yYIcj/Uh7MVOC3wA+u1dcnqCMb8ouVoca22kX3/aoQtXD/34oxjJnrHNVT4ywJ1tpyFjKu12j/+GgEfC4mD36ELiDIf1stfxKW9PRLXnkU5plRfi2vEmO0pCX+0va8t3hM37LpEET+2LoxuTO2sog7wFMdzb+nn7QtB/xK03a25WYkZCucY6t6qDVk2vQ0Y7Q4CXHry9bPI63lHWO++L2j2QrEvISuIiIHPANkKBerU8cw49okfHP0a3BqLMYIi8vdxcOvv4tdeqhHwKLD8yg5eh0b7XW86wYmeKJzuBPqLS34BP9gTvEfNmordJmol8WBXeVgBRzzJN3FBohZSCt5ob6tXf1QlTHzzWd+wyvzeugiT570xtB1kl+Hq4tDiUAXrNxILsAaCKv4LhXmzZkJB65CfAdkWNVqqbfWYlDwXh/U1rZolt9IMW55QJ2AyaDqc+VYmgZyBFBSnNOyi1Hs0qpFHtSAFEbFSlTmj9XD9bkxpu8dqRgKwB05oG1b7oIH+kbV2vslvIV2Q0qIWVjtrb5uecuBTT/ZFaFxV0tsFOhj5+pmUe6CGoHhW7pcHpLRCmztS4JddsjJhnEsKZurX3fp0m4YO6cZrLtj3GMquz/F5ppbFJkVuGescKlAjYZKUwJdUATWaA+OhjkmphUP2WdQlvW5I9r1j/3mQec0qH1MOjv5jgtTcFdJfCGIN1MJutwhMbpgmNezB4CP2toCcnvuj4UGJc8oXBqa4Q1f2iG4qBSBVOctzcHUKochAc+XK7ef+xEfY648hZXN9o6sA0MUPAEHxzw/7MAAhr1DK6ydLU8WHqDJb0hCdz5E5HR9i+pfHNHMpQBR/UigeXlOtzawjc0drXIp93zmkZhRKkOA9APPsfI7EEedaSZzTjiLw7qO6G7gDIxsz4YOItUTgi5bU8DDUJvvwQK9pASuCx5fJckcrB5Vq+Jr7wfd5reEAiT2RKui7MuP8/cH3ISVSRxay7m3RpQh82EnxhHWHoX2gh0vJqfvIx9S+k67Hrs+h2F22ZDCWPSw2TERxgc7wjZFTI3O0PdFrrCJENNoRJRxGUqAgCUUN3kOhOe+N9xVU4xENZ3rIGbGRFf8VY1BGvHo9c7GBE8CaUkWe3mj/L6+/GXLL+6nm48FR5wReOGsW/p6gpeDoazKj5aHOcfd/oGPU653GUpDx3nmdaJPoAlyGZSeMlMLmqzEJy6DhXGeOrilFM8/KX0LQoep0738j0rHTYPJjkZYHnCGQinI1K2EhP3bv6t62Yfw+qVRbzjg8h7ptE3f7Eo/4wB790yw6VabL6FIVhlApiraA+lzu47lS/brX3vKoQvblsotiEVcGEHKXVH3ewQFZ9hMKjME5a9Yese/jQDz2MDqpBcc7U5onBMC56e1RTeqsu8hszupyxiYKtcq5xuhPOyrx6LZMrwvRm5aSOgULtaZTJaaECztCo81emeMfe4IcAZC1SbmaBfh36Z95WofT1imog3+Hct45dfk+0RgRJoFimINQ7WH+bHod/elpm6WHilhPVXY3IiG//Dg5uWRsIa6wqzzVQwLlPkSNmPKDG8be/y61jq/8Y0Ye0o/nM8fO7ZFEpd47dk6BRdEELgEz4gtuLuReqrqqMVT2zb0E/L+kL0Qse1u2rvHTtPZQUhzUGeeR7Yx02FhmpHS+RQYoE98qFiz0YmjVugg4j8o7bHwcMkFX+SdMtpC4qER4WyklYAv1sJnUgZrXSxYhQADoIjKo1CWOr1VQw+9K0dYXA/I5LwcjNBfpON8exf1ts7ImxZN958YHTuy6fyhUBuMnfOhIAHpp5Q+BlV2O/oNZfZYaqnaanCBgzF/KsEWtzKC4AuekSehDRFwwVn1f3Jnh4O09tz282IVRB52l9nQENn42U0xMXYOD5xnvgoPSD/bfHnIT4VSj2wjyuf4+b3rYPbaFo96fdAgZQcJkz2NClplPcgFUH31AJ2Lmv0vGgAotRxJAjUavQgM7fUt0OvYQBQLvY5HkZFJJd0TyEUQIiLvx38lU2vkbWW0930cEUvoGbsCby/hZe9A9BtrH8EhcsxsyfrlkE5/VXmRyXamgrKqyV4UCj0KQRT2oYsCvtttuliFNxoAGlI16TADmjujaEnov4/T4yth+gG4Iy1ttb0enwezqrsXzfTmaN4zkIqa0A1nv4guYXz2avXOe6LThI79/rJHVYYbUsxZqMmspfj6nT6bjoyQ1vd9+dBaPsgeMpO9Qr7l7P+2KxWQEUnlUi6OjpTVYeNgyC3qWv+S5WW0LxnqFVYmhWhYympzDPb4ZlWSiqm+SUxPxx+9F58MSmQAuj4/XAvJwRcFbuA4ywoBUgVwZUibcbkPxPBSNyGD8fuyfkHDx8EQaR5R0AXbohd61FfMtHAm9WPwbzyZDURQTR4eyVgnCpgo+j43xtsYx/CtBIOnjLhAtFPZq8VgdHK4JUja+GSPjNiCyQ7Irm+7g6isoWZDbrmjAxy3ij3oi1FeBLQ/ZS3lWIIfWTw9cznb6NJVPpIfYcn/Z3DHo0+80FjRwp0/y6Zq25vOjf9+PRg3BKo+N3roUzhG5kNa27bEFV7xjcsZ2071GUnBOjQ3McNKfGj/wDMkg85tQvtD2n7n3tmnH3bzgvPkaCjXhXZiC8TuyStW1G/eZR769Y7drMuOTd5WRHMl+ImgC0xLvSnrUJoOytqxsxMdRIc8S54N0ISaudRkrfmu6EGUGP7SxgQaxr67coR2L0lPcnD4eJZFkJEhhMSCm7sDNkq6qvVTmevZF+ohtqI6b++/sPkZFeAvJ2GwPfw+Ht4YE1gA2BGg/3RsB849gSuRXfM/DbXM2tCg3GrHvCHQYCwX14APL5XoHckrui9mUJGVWEuWL+P9FhOov3d8jjvdPTCvYmHw/lmU3SOs8hV8nW0udn8RmEm63qE3x2LeQ5qhOKVX5GOWW5GcFe0IJFV1YxM3gLJ4awLudAFgrtIYqgRnql0dbYZf7cJ3KngoQktZjNGMsQCH1rojL7wCSWgmUoQ/m4dHT25Gt+kpQsP8oahafFoKIPat9z+BjlXm87ioVJ/zU8BXhFQ+oMGp8S1AqAn0OYNJ4z4mkGGP3cGTGDDtQaoYSh6F/DghvXAqlhgAGJ93DDXnuYRY+o4I5TdwlM0FsLCVu7Lu962vJChffzrdh1ZzgnkBW+IAXxLPQpyOSR8knxfcuOGuZ1NcrRbwRr8uJ7TeFVU7bWl/AjTfD3YxA+tTV7vUB745mGx2RSFojwTUWznx9VvxE7hVs6/KjY3yMbdNDKa1xKCY5KO+g5n4ABgQDfOOTrP9frTN3fCqxstxVqeZ7BcQjejT0AngtO+m7yZnY4R1RVzD79+HC3We8QAx2sbjLdFkKEhvrFusrRuNmovq0hXeW6UvNJ2o8bIwkll7vgPU33ejUYdCnPVxk3QTNu7OSlQRrqp6CaVrATjXr7w1fqhmlEtauKM72Mi7oaauMKJwPYuJEOqAx6lpNDynLphwINNaumbUBXlj9ZbZLr5oiYo4To6p4aVqUvpYlXv0+8vx9r3UvdpbwQ/WQr6dxWp5IABhrCHreYJm5PlPjta/ZDpl9c0ntm38CxRiysCOqzVln2mfQHWPs/RKC19fM8lnx+buPKtcrTWWkz1iFpxrCng5qUZ4P2ssEeb+pPtjcTT6MxXOygpZtX4KC4TeZEBX3hVYHXtRA6W94xe0+PUbQUVum30iCVhoQO98GQFFZ7rw6JXkDzsGieXKgc6qZttPxv1IWMe+2ac9Rnz3CYo2TN19f1VsYI0VgO7PLqKEXdRKPjZCsJnUcyrX5KtzFEX6E2O3DA4YlidN5H5IJPCkHrqzns++2TOIVEyvk93fuO2qEY9KcNpU95IgOYTZBAIrqIksm3d/S2FaWYhBwkKRpqz3cBFZM/ebFiuyCAc3fe+W0CNWBt/AdLMu+O0a35qot1F/1k6RAo1PtXNtLyozupyu4Rk+q4SZo1Hbzy/Y+Sb0p5dL1Qbd8KucGNO9o0NDnRXE1vncRZy+F19U68Iy0BAzOK0TmpG0jSErxUBKASw4R06mJW0n7gGSKBuzoI7P2+CqyA1Sx0aAfgnciexYBVh3D+T5yt5Oru9JUU04TmIoEt5zlG3yTIvybofoH7IHOD20ce8wxEBz8eq6KFJh5Aamr1P1Mve2tA42grVKsM5A2c2kcZ8MfmNTyux4LdZnvc6u/VD/xnV8pxF2ScsIpe/KvzmFXH8kQ8lFZSbYZPl+uucts5ZZKjC0ai6El4HwbYMagXjZVDSEEKkA8sObuzgO9uYFr6gmExk6XgyMpUfn9+S0+ArNKDTHvJxiUF0ChuMNKNLIHG+xdgydsONnzXfLi+Zm0dvC+Yd8eMPVNpM5ZHY2h7PeWLOb34+zWaxGBYFHSz9xdKPhJki+/ZX8yP1I3YypjE1qJMCzcxWYoHwrLXrdVqXNhZuzHPSiJJilt7QSbmBG5BQTBRWxnG9x8bmChR6MgbQ4UWae/LD/VOqyQAPqGLivyW79tK9NQVpEnEiAgSyfM/Ltiucds3APhFT0+NAFmC9qzjwrUclnCA4unbORvfFoa93YGB1IE7+y4XYjeiKsPmqen6q+UxcwkgZjIr7AuRqwwH54evWafjUkKDeXKYtJQk/n+YIwjJhTrdb4nfO49+PV+ZywzpocHJPQm5hZWxvaGVTcmVkRHlyY3RidW94pGrXVrfH6NtwICTuzr3Brw989SrGh0cTRjCoAZVG/diYgGmv90SLsVv//77XXIkiEZBrk3GY/Y5DeaYhCLRJYiUe9kCzQMBRWl4mqse26V0QL9ZTFEQCgeah2Mj70+fmzeEh1gc3w4cN1fTtFFpFBenjqfij7/zZAm9nikwqjUI5+v+B9nGHImGdbQw45f1E6r6kqc/eS2BLu/ZwvL++xn6bKPonoeqFMO/UBR2IBDnQ1Nnlmdvm+HyiH2VWrMREIin0l/8qQ6cjlKs5oJP8w1lbZZLMDI999O//0V2EhU9+qG/g5iz+FEMBo6ERCE6CflP3NfI6vbvS1yqR04brumEAAJxOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAHAAAACAAAAAkAAAAKAAAACwAAAAwAAAANAAAADgAAAA8AAAAQAAAAEQAAABIAAAATAAAAFAAAABUAAAAWAAAAFwAAABgAAAAZAAAAGgAAABsAAAAcAAAAHQAAAB4AAAAfAAAAIAAAACEAAAAiAAAAIwAAACQAAAAlAAAAJgAAACcAAAAoAAAAKQAAACoAAAArAAAALAAAAC0AAAAuAAAALwAAADAAAAAxAAAAMgAAADMAAAA0AAAANQAAADYAAAA3AAAAOAAAADkAAAA6AAAAOwAAADwAAAA9AAAAPgAAAD8AAABAAAAAYQAAAGIAAABjAAAAZAAAAGUAAABmAAAAZwAAAGgAAABpAAAAagAAAGsAAABsAAAAbQAAAG4AAABvAAAAcAAAAHEAAAByAAAAcwAAAHQAAAB1AAAAdgAAAHcAAAB4AAAAeQAAAHoAAABbAAAAXAAAAF0AAABeAAAAXwAAAGAAAABhAAAAYgAAAGMAAABkAAAAZQAAAGYAAABnAAAAaAAAAGkAAABqAAAAawAAAGwAAABtAAAAbgAAAG8AAABwAAAAcQAAAHIAAABzAAAAdAAAAHUAAAB2AAAAdwAAAHgAAAB5AAAAegAAAHsAAAB8AAAAfgwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAA4AAAAPAAAAEAAAABEAAAASAAAAEwAAABQAAAAVAAAAFgAAABcAAAAYAAAAGQAAABoAAAAbAAAAHAAAAB0AAAAeAAAAHwAAACAAAAAhAAAAIgAAACMAAAAkAAAAJQAAACYAAAAnAAAAKAAAACkAAAAqAAAAKwAAACwAAAAtAAAALgAAAC8AAAAwAAAAMQAAADIAAAAzAAAANAAAADUAAAA2AAAANwAAADgAAAA5AAAAOgAAADsAAAA8AAAAPQAAAD4AAAA/AAAAQAAAAEEAAABCAAAAQwAAAEQAAABFAAAARgAAAEcAAABIAAAASQAAAEoAAABLAAAATAAAAE0AAABOAAAATwAAAFAAAABRAAAAUgAAAFMAAABUAAAAVQAAAFYAAABXAAAAWAAAAFkAAABaAAAAWwAAAFwAAABdAAAAXgAAAF8AAABgAAAAQQAAAEIAAABDAAAARAAAAEUAAABGAAAARwAAAEgAAABJAAAASgAAAEsAAABMAAAATQAAAE4AAABPAAAAUAAAAFEAAABSAAAAUwAAAFQAAABVAAAAVgAAAFcAAABYAAAAWQAAAFoAAAB7AAAAfAAAAH0AAAB+AAAAfwkAAAAKAAAADQAAAAsAAAAMAAAAhQAAAAAgAAABIAAAAiAAAAMgAAAEIAAABSAAAAYgAAAIIAAACSAAAAogAAAoIAAAKSAAAF8gAAAAMAAAAAAAAAoAAABkAAAA6AMAABAnAACghgEAQEIPAICWmAAA4fUFX3CJAP8JLw+8zwIAneQCAJ3kAgCd5AIAneQCAJ3kAgCd5AIAneQCAJ3kAgCd5AIAf39/f39/f39/f39/f38AAAMAAAAEAAAABAAAAAYAAACD+aIARE5uAPwpFQDRVycA3TT1AGLbwAA8mZUAQZBDAGNR/gC73qsAt2HFADpuJADSTUIASQbgAAnqLgAcktEA6x3+ACmxHADoPqcA9TWCAES7LgCc6YQAtCZwAEF+XwDWkTkAU4M5AJz0OQCLX4QAKPm9APgfOwDe/5cAD5gFABEv7wAKWosAbR9tAM9+NgAJyycARk+3AJ5mPwAt6l8Auid1AOXrxwA9e/EA9zkHAJJSigD7a+oAH7FfAAhdjQAwA1YAe/xGAPCrawAgvM8ANvSaAOOpHQBeYZEACBvmAIWZZQCgFF8AjUBoAIDY/wAnc00ABgYxAMpWFQDJqHMAe+JgAGuMwACVv9YzvTeGNazFJzcXt9E4bxKDOgrXIzzNzMw9AACAPwAAIEEAAMhCAAB6RABAHEYAUMNHACR0SYCWGEsbaJYxcP+VPeMHVkDFfCpC384qQ+S7JkPbiSE0KvaVPb/E/z/97WdBcVT9QYwFgkEWCUNCHGwxRF+CZ0Vn48lFV0UdRVk/FcO47PJBj6yGQykyU0Tlu1xEmKpUQ1jzqcCqxiNDwhL9RZMyC0jUHkRJWTNNSWnrp8igjaVCB90BRZQ+k0Ydr11HwYgMR75Sp8UAAAAAAACWPZNKPEEZawtEymwKRqCWEEd57KEt//+VPYa9ukCQHAdDzWeAREu/+EQbCC+xuP+PvZUtGsBSuq/BElFowmWV+8G3mL6zEvuPvcyxub+fV/TANhczwQ30TsCUbA9CysG0Q3MzlUTm/4xEuJQtQy3DsUHwNAhDMjyHQxrgGUOahWpBmBHpQuubb0XblR5HfAjkR7oLOkcIBHNCE2iDRMTXukXIZRZG7mAWRQAAAAAAAJC9hk4BwRSIgMN2UxvFWiikxYrFSK3//4+9iBuFwHtZh8KbnaXDeTetwzdlIUMXi/RF1rwCSJyyL0mUviJJSMuPyFRE7EFH+3xDLmA9RCrZOETy8htDN7SewAAAAAAAANK9jSyCwYPmPcQ6JznGgzY9xzKJP7R19NG9IyQwwBZPncEfTSnCsvmqwQ3hTzGr/+8957V7QEV6DEIqHLZCfDxCQqhO5zMW+u89wJUXQLzhQ0FBjY1BTVqiQE0qC0KYYahD49uCRO2zXkRsk89C7H2rQZmU+kLHRmhD11vrQpDVBUEsauRC5S5kRTVcEEdmob5Hi6jwRlUfbUKx2XdEI0qnRYYl9UWAAbxEAAAAAAAA8D3q1FNBowbOQ+0rckXWU/dFPzNoLf//7z0jsNlAyp3YQrdoAUTGLQREcsgCAHjIAgCByAIAhsgCAI3IAgAAAAAA/wAAAP////8IAAAABAAAAAEAAAAQAAAAHAAAAAoAAAABAAAAAgAAABwAAAAfAAAAgF0AAAMAAAAAAAAALfRRWM+MscBG9rXLKTEDxwRbcDC0Xf0geH+LmthZKVBoSImrp1YDbP+3zYg/1He0K6WjcPG65Kj8QYP92W/hinovLXSWBx8NCV4Ddixw90ClLKdvV0GoqnTfoFhkA0rHxDxTrq9fGAQVseNtKIarDKS/Q/DpUIE5VxZSN3QAAAC6ywIAbgAAALzLAgByAAAAvssCAGYAAADAywIAYQAAAMLLAgBlAAAAxMsCAHcAAADGywIAVwAAANPLAgBzAAAA4csCAFMAAADtywIAZAAAAPrLAgBEAAAABswCAAAAAAAAAAAAJQAAAAAAAABAAAAAAAAAAAAAAADz////2P///9z////+////7P///+L////3////6v///+b////y////+/////T////w//////8E9UP0B/SB82DzRPMp8xfzBvOV8obyePJw8mLyVfJJ8kLyNvIx8iXyIPIV8hDyBfIB8pbxkvGI8YTxgPF28XLxaPFl8WHxWPFU8VHxSPFE8UHxOPE18TLxKfEm8SPxIPEX8RTxEfEJ8QbxA/EA8ZjwlfCS8JDwh/CF8ILwefB38HTwcvBw8GfwZfBi8GDwV/BV8FPwUPBI8EbwQ/BB8DnwN/A08DLwMPAo8CXwI/Ah8BnwF/AU8BLwEPAI8AbwBPAB8AAAAgAEAAYACAAQABIAFQAXABkAIQAjACUAJwApADEAMwA1ADcAOQBBAEMARQBHAEkAUQBTAFUAVwBgAP//BPVD9Af0gfNg80TzKfMX8wbzlfKG8njycPJi8lXySfJC8jbyMfIl8iDyFfIQ8gXyAfKW8ZLxiPGE8YDxdvFy8WjxZfFh8VjxVPFR8UjxRPFB8TjxNfEy8SnxJvEj8SDxF/EU8RHxCfEG8QPxAPGY8JXwkvCQ8IfwhfCC8Hnwd/B08HLwcPBn8GXwYvBg8FfwVfBT8FDwSPBG8EPwQfA58DfwNPAy8DDwKPAl8CPwIfAZ8BfwFPAS8BDwCPAG8ATwAfAAAAIABAAGAAgAEAASABUAFwAZACEAIwAlACcAKQAxADMANQA3ADkAQQBDAEUARwBJAFEAUwBVAFcAYAAAAAAAAABt5uzeBQALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAIAAgACAAIAAgACAAIAAgADIAIgAiACIAIgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAWAEwATABMAEwATABMAEwATABMAEwATABMAEwATABMAI2AjYCNgI2AjYCNgI2AjYCNgI2ATABMAEwATABMAEwATACNUI1QjVCNUI1QjVCMUIxQjFCMUIxQjFCMUIxQjFCMUIxQjFCMUIxQjFCMUIxQjFCMUIxQTABMAEwATABMAEwAjWCNYI1gjWCNYI1gjGCMYIxgjGCMYIxgjGCMYIxgjGCMYIxgjGCMYIxgjGCMYIxgjGCMYEwATABMAEwAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEkAMQFTAH8BMAFpAHgB/wCBAVMCggGDAYQBhQGGAVQChwGIAYkBVgKKAVcCiwGMAY4B3QGPAVkCkAFbApEBkgGTAWAClAFjApYBaQKXAWgCmAGZAZwBbwKdAXICnwF1AqYBgAKnAagBqQGDAqwBrQGuAYgCrwGwAbEBigKyAYsCtwGSArgBuQG8Ab0BxAHGAcQBxQHFAcYBxwHJAccByAHIAckBygHMAcoBywHLAcwB8QHzAfEB8gHyAfMB9AH1AfYBlQH3Ab8BIAKeAYYDrAOIA60DiQOuA4oDrwOMA8wDjgPNA48DzgOZA0UDmQO+H6MDwgP3A/gD+gP7A2Aemx6eHt8AWR9RH1sfUx9dH1UfXx9XH7wfsx/MH8Mf7B/lH/wf8x86AmUsOwI8Aj0CmgE+AmYsQQJCAkMCgAFEAokCRQKMAvQDuAP5A/ID/QN7A/4DfAP/A30DwATPBCYhyQMqIWsAKyHlADIhTiGDIYQhYCxhLGIsawJjLH0dZCx9Am0sUQJuLHECbyxQAnAsUgJyLHMsdSx2LH4sPwJ/LEAC8izzLH2neR2Lp4ynjadlAqqnZgLHECctzRAtLXYDdwOcA7UAkgPQA5gD0QOmA9UDoAPWA5oD8AOhA/EDlQP1A88D1wMAAAAAQQAgGsAAIB8AAQEvMgEBBTkBAQ9KAQEteQEBBXADAQORAyARowMgCQAEUBAQBCAgYAQBIYoEATXBBAEN0AQBPxQFARMxBTAmoAEBBbMBAQPNAQEP3gEBEfgBASciAgER2AMBFwAeAZWgHgFfCB/4CBgf+AYoH/gIOB/4CEgf+AZoH/gIiB/4CJgf+AioH/gIuB/4AroftgLIH6oE2B/4AtofnALoH/gC6h+QAvgfgAL6H4ICRgIBCRAFAQNgIRAQACwwL2csAQWALAFj6ywBA0CmAS2ApgEXIqcBDTKnAT15pwEDfqcBCZCnAQOgpwEJIf8gGgAAAAAAMAEwAjAM/w7/+zAa/xv/H/8B/5swnDC0AED/qAA+/+P/P//9MP4wnTCeMAMw3U4FMAYwBzD8MBUgECAP/1wAHDAWIFz/JiAlIBggGSAcIB0gCP8J/xQwFTA7/z3/W/9d/wgwCTAKMAswDDANMA4wDzAQMBEwC/8SIrEA1wD3AB3/YCIc/x7/ZiJnIh4iNCJCJkAmsAAyIDMgAyHl/wT/ogCjAAX/A/8G/wr/IP+nAAYmBSbLJc8lziXHJcYloSWgJbMlsiW9JbwlOyASMJIhkCGRIZMhEzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCILIoYihyKCIoMiKiIpIgAAAAAAAAAAAAAAAAAAAAAnIigirADSIdQhACIDIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgIqUiEiMCIgciYSJSImoiayIaIj0iHSI1IisiLCIAAAAAAAAAAAAAAAAAACshMCBvJm0maiYgICEgtgAAAAAAAAAAAO8lAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEP8R/xL/E/8U/xX/Fv8X/xj/Gf8AAAAAAAAAAAAAAAAAACH/Iv8j/yT/Jf8m/yf/KP8p/yr/K/8s/y3/Lv8v/zD/Mf8y/zP/NP81/zb/N/84/zn/Ov8AAAAAAAAAAAAAAABB/0L/Q/9E/0X/Rv9H/0j/Sf9K/0v/TP9N/07/T/9Q/1H/Uv9T/1T/Vf9W/1f/WP9Z/1r/AAAAAAAAAABBMEIwQzBEMEUwRjBHMEgwSTBKMEswTDBNME4wTzBQMFEwUjBTMFQwVTBWMFcwWDBZMFowWzBcMF0wXjBfMGAwYTBiMGMwZDBlMGYwZzBoMGkwajBrMGwwbTBuMG8wcDBxMHIwczB0MHUwdjB3MHgweTB6MHswfDB9MH4wfzCAMIEwgjCDMIQwhTCGMIcwiDCJMIowizCMMI0wjjCPMJAwkTCSMJMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKEwojCjMKQwpTCmMKcwqDCpMKowqzCsMK0wrjCvMLAwsTCyMLMwtDC1MLYwtzC4MLkwujC7MLwwvTC+ML8wwDDBMMIwwzDEMMUwxjDHMMgwyTDKMMswzDDNMM4wzzDQMNEw0jDTMNQw1TDWMNcw2DDZMNow2zDcMN0w3jDfMOAw4TDiMOMw5DDlMOYw5zDoMOkw6jDrMOww7TDuMO8w8DDxMPIw8zD0MPUw9jAAAAAAAAAAAAAAAAAAAAAAkQOSA5MDlAOVA5YDlwOYA5kDmgObA5wDnQOeA58DoAOhA6MDpAOlA6YDpwOoA6kDAAAAAAAAAAAAAAAAAAAAALEDsgOzA7QDtQO2A7cDuAO5A7oDuwO8A70DvgO/A8ADwQPDA8QDxQPGA8cDyAPJAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQBBEEEgQTBBQEFQQBBBYEFwQYBBkEGgQbBBwEHQQeBB8EIAQhBCIEIwQkBCUEJgQnBCgEKQQqBCsELAQtBC4ELwQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwBDEEMgQzBDQENQRRBDYENwQ4BDkEOgQ7BDwEPQQ+BD8EQARBBEIEQwREBEUERgRHBEgESQRKBEsETARNBE4ETwQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlAiUMJRAlGCUUJRwlLCUkJTQlPCUBJQMlDyUTJRslFyUjJTMlKyU7JUslICUvJSglNyU/JR0lMCUlJTglQicThZVA1o/lsBUG2EoY/ZZIpB1hByDUHqqYOFjJW7tZWaEpoL1m5NoJ1ehZXFim1vQWXuG9Jhifb59jpsWYp98t4iJW7VeCWOXZkhox5WNl09n5U4KT01PnU9JUPJWN1nUWQFaCVzfYA9hcGETZgVpunBPdXB1+3mtfe99w4AOhGOIAotVkHqQO1OVTqVO31eygMGQ73gATvFYom44kDJ6KIOLgi+cQVFwU71U4VTgVvtZFV/ymOtt5IAthWKWcJaglvuXC1TzU4dbz3C9f8KP6JZvU1ydunoRTpN4/IEmbhhWBFUdaxqFO5zlWalTZm3cdI+VQlaRTkuQ8pZPgwyZ4VO2VTBbcV8gZvNmBGg4bPNsKW1bdMh2Tno0mPGCW4hgiu2Ssm2rdcp2xZmmYAGLio2ylY5prVOGURJXMFhEWbRb9l4oYKlj9GO/bBRvjnAUcVlx1XE/cwF+doLRgpeFYJBbkhudaVi8ZVpsJXX5US5ZZVmAX9xfvGL6ZSpqJ2u0a4tzwX9WiSydDp3EnqFclmx7gwRRS1y2YcaBdmhhcllO+k94U2lgKW5PevOXC04WU+5OVU89T6FPc0+gUu9TCVYPWcFatlvhW9F5h2acZ7ZnTGuzbGtwwnONeb55PHqHe7GC24IEg3eD74PTg2aHsoopVqiM5o9OkB6XiobET+hcEWJZcjt15YG9gv6GwIzFlhOZ1ZnLThpP44neVkpYylj7XutfKmCUYGJg0GESYtBiOWVBm2ZmsGh3bXBwTHWGdnV9pYL5h4uVjpadjPFRvlIWWbNUs1sWXWhhgmmvbY14y4RXiHKKp5O4mmxtqJnZhqNX/2fOhg6Sg1KHVgRU017hYrlkPGg4aLtrcnO6eGt6monSiWuNA4/tkKOVlJZpl2Zbs1x9aU2YTpibYyB7K2p/arZoDZxfb3JSnVVwYOxiO20HbtFuW4QQiUSPFE45nPZTG2k6aoSXKmhcUcN6soTckYyTW1YonSJoBYMxhKV8CFLFguZ0fk6DT6BR0lsKUthS51L7XZpVKljmWYxbmFvbW3JeeV6jYB9hY2G+YdtjYmXRZ1No+mg+a1NrV2wib5dvRW+wdBh143YLd/96oXshfOl9Nn/wf52AZoKeg7OJzIqrjISQUZSTlZGVopVlltOXKJkYgjhOK1S4XMxdqXNMdjx3qVzrfwuNwZYRmFSYWJgBTw5PcVOcVWhW+ldHWQlbxFuQXAxefl7MX+5jOmfXZeJlH2fLaMRoX2owXsVrF2x9bH91SHljWwB6AH29X4+JGIq0jHeNzI4dj+KYDpo8m4BOfVAAUZNZnFsvYoBi7GQ6a6BykXVHeal/+4e8inCLrGPKg6CXCVQDVKtVVGhYanCKJ3h1Z82edFOiWxqBUIYGkBhORU7HThFPylM4VK5bE18lYFFlPWdCbHJs42x4cAN0dnquegh7Gn3+fGZ952VbcrtTRVzoXdJi4GIZYyBuWoYxit2N+JIBb6Z5WpuoTqtOrE6bT6BP0VBHUfZ6cVH2UVRTIVN/U+tTrFWDWOFcN19KXy9gUGBtYB9jWWVLasFswnLtcu93+IAFgQiCToX3kOGT/5dXmVqa8E7dUS1cgWZtaUBc8mZ1aYlzUGiBfMVQ5FJHV/5dJpOkZSNrPWs0dIF5vXlLe8p9uYLMg3+IX4k5i9GP0ZEfVICSXU42UOVTOlPXcpZz6Xfmgq+OxpnImdKZd1EaYV6GsFV6enZQ01tHkIWWMk7baueRUVxIXJhjn3qTbHSXYY+qeopxiJaCfBdocH5RaGyT8lIbVKuFE4qkf82O4ZBmU4iIQXnCT75QEVJEUVNVLVfqc4tXUVliX4RfdWB2YWdhqWGyYzpkbGVvZkJoE25mdT16+3xMfZl9S35rfw6DSoPNhgiKY4pmi/2OGpiPnbiCzo/om4dSH2KDZMBvmZZBaJFQIGt6bFRvdHpQfUCII4oIZ/ZOOVAmUGVQfFE4UmNSp1UPVwVYzFr6XrJh+GHzYnJjHGkpan1yrHIucxR4b3h5fQx3qYCLiRmL4ozSjmOQdZN6llWYE5p4nkNRn1OzU3teJl8bbpBuhHP+c0N9N4IAivqKUJZOTgtQ5FN8VPpW0VlkW/Fdq14nXzhiRWWvZ1Zu0HLKfLSIoYDhgPCDToaHiuiNN5LHlmeYE5+UTpJODU9IU0lUPlQvWoxfoV+fYKdojmpadIF4noqkineLkJFeTsmbpE58T69PGVAWUElRbFGfUrlS/lKaU+NTEVQOVIlVUVeiV31ZVFtdW49b5V3nXfddeF6DXppet14YX1JgTGGXYthip2M7ZQJmQ2b0Zm1nIWiXaMtpX2wqbWltL26dbjJ1h3ZseD964HwFfRh9Xn2xfRWAA4CvgLGAVIGPgSqCUoNMiGGIG4uijPyMypB1kXGSP3j8kqSVTZYFmJmZ2Jo7nVtSq1L3UwhU1Vj3YuBvaoxfj7meS1E7UkpU/VZAeneRYJ3SnkRzCW9wgRF1/V/aYKia23K8j2RrA5jKTvBWZFe+WFpaaGDHYQ9mBmY5aLFo923VdTp9boJCm5tOUE/JUwZVb13mXe5d+2eZbHN0AnhQipaT34hQV6deK2O1UKxQjVEAZ8lUXli7WbBbaV9NYqFjPWhzawhufXDHkYByFXgmeG15jmUwfdyDwYgJj5uWZFIoV1Bnan+hjLRRQlcqljpYimm0gLJUDl38V5V4+p1cT0pSi1Q+ZChmFGf1Z4R6VnsifS+TXGitmzl7GVOKUTdS31v2Yq5k5mQtZ7prqYXRlpB21ptMYwaTq5u/dlJmCU6YUMJTcVzoYJJkY2VfaOZxynMjdZd7gn6VhoOL24x4kRCZrGWrZotr1U7UTjpPf086UvhT8lPjVdtW61jLWclZ/1lQW01cAl4rXtdfHWAHYy9lXFuvZb1l6GWdZ2Jre2sPbEVzSXnBefh8GX0rfaKAAoHzgZaJXoppimaKjIruiseM3IzMlvyYb2uLTjxPjU9QUVdb+ltIYQFjQmYha8tuu2w+cr101HXBeDp5DIAzgOqBlISej1Bsf54PX1iLK536eviOjVvrlgNO8VP3VzFZyVqkW4lgf24Gb7516oyfWwCF4HtyUPRnnYJhXEqFHn4OgplRBFxoY2aNnGVucT55F30FgB2Lyo5ukMeGqpAfUPpSOlxTZ3xwNXJMkciRK5PlgsJbMV/5YDtO1lOIW0tiMWeKa+ly4HMuemuBo41SkZaZElHXU2pU/1uIYzlqrH0Al9pWzlNoVJdbMVzeXe5PAWH+YjJtwHnLeUJ9TX7Sf+2BH4KQhEaIcomQi3SOL48xkEuRbJHGlpyRwE5PT0VRQVOTXw5i1GdBbAtuY3Mmfs2Rg5LUUxlZv1vRbV15Ln6bfH5Yn3H6UVOI8I/KT/tcJWasd+N6HIL/mcZRql/sZW9piWvzbZZuZG/+dhR94V11kIeRBpjmUR1SQGKRZtlmGm62XtJ9cn/4Zq+F94X4iqlS2VNzWY9ekF9VYOSSZJa3UB9R3VIgU0dT7FPoVEZVMVUXVmhZvlk8WrVbBlwPXBFcGlyEXope4F5wX39ihGLbYoxjd2MHZgxmLWZ2Zn5nomgfajVqvGyIbQluWG48cSZxZ3HHdQF3XXgBeWV58HngehF7p3w5fZaA1oOLhEmFXYjziB+KPIpUinOKYYzejKSRZpJ+kxiUnJaYlwpOCE4eTldOl1FwUs5XNFjMWCJbOF7FYP5kYWdWZ0RttnJzdWN6uIRyi7iRIJMxVvRX/pjtYg1plmvtcVR+d4ByguaJ35hVh7GPO1w4T+FPtU8HVSBa3VvpW8NfTmEvY7BlS2buaJtpeG3xbTN1uXUfd1555nkzfeOBr4KqhaqJOoqrjpuPMpDdkQeXuk7BTgNSdVjsWAtcGnU9XE6BCorFj2OWbZcle8+KCJhikfNWqFMXkDlUglclXqhjNGyKcGF3i3zgf3CIQpBUkRCTGJOPll50xJoHXWldcGWiZ6iN25ZuY0lnGWnFgxeYwJb+iIRvemT4WxZOLHBddS9mxFE2UuJS01mBXydgEGI/ZXRlH2Z0ZvJoFmhjawVucnIfddt2vnxWgPBY/Yh/iaCKk4rLih2QkpFSl1mXiWUOegaBu5YtXtxgGmKlZRRmkGfzd016TXw+fgqBrIxkjeGNX46peAdS2WKlY0JkmGItioN6wHusiuqWdn0MgkmH2U5IUUNTYFOjWwJcFlzdXSZiR2KwZBNoNGjJbEVtF23TZ1xvTnF9cctlf3qte9p9Sn6of3qBG4I5gqaFborOjPWNeJB3kK2SkZKDla6bTVKEVThvNnFoUYV5VX6zgc58TFZRWKhcqmP+Zv1mWmnZco91jnUOeVZ533mXfCB9RH0HhjSKO5ZhkCCf51B1UsxT4lMJUKpV7lhPWT1yi1tkXB1T42DzYFxjg2M/Y7tjzWTpZflm413Naf1pFW/lcYlO6XX4dpN633zPfZx9YYBJg1iDbIS8hPuFxYhwjQGQbZCXkxyXEprPUJdYjmHTgTWFCI0gkMNPdFBHUnNTb2BJY19nLG6zjR+Q109eXMqMz2WafVJTloh2UcNjWFtrWwpcDWRRZ1yQ1k4aWSpZcGxRij5VFVilWfBgU2LBZzWCVWlAlsSZKJpTTwZY/lsQgLFcL16FXyBgS2E0Yv9m8Gzebs6Af4HUgouIuIwAkC6Qipbbntub407wUydZLHuNkUyY+Z3dbidwU1NEVYVbWGKeYtNiomzvbyJ0F4o4lMFv/oo4g+dR+IbqU+lTRk9UkLCPalkxgf1d6nq/j9poN4z4ckicPWqwijlOWFMGVmZXxWKiY+ZlTmvhbVturXDtd+96qnu7fT2AxoDLhpWKW5PjVsdYPl+tZZZmgGq1azd1x4okUOV3MFcbX2VgemZgbPR1Gnpuf/SBGIdFkLOZyXtcdfl6UXvEhBCQ6XmSejaD4VpAdy1O8k6ZW+BfvWI8ZvFn6GxrhneIO4pOkfOS0JkXaiZwKnPngleEr4wBTkZRy1GLVfVbFl4zXoFeFF81X2tftF/yYRFjomYdZ25vUnI6dTp3dIA5gXiBdoe/ityKhY3zjZqSd5UCmOWcxVJXY/R2FWeIbM1zw4yuk3OWJW2cWA5pzGn9j5qT23UakFpYAmi0Y/tpQ08sb9hnu48mhbR9VJM/aXBvalf3WCxbLH0qcgpU45G0na1OTk9cUHVQQ1KejEhUJFiaWx1elV6tXvdeH1+MYLViOmPQY69oQGyHeI55C3rgfUeCAormikSOE5C4kC2R2JEOn+VsWGTiZHVl9G6Edht7aZDRk7pu8lS5X6RkTY/tj0SSeFFrWClZVVyXXvttj34cdbyM4o5bmLlwHU+/a7FvMHX7lk5REFQ1WFdYrFlgXJJfl2VcZyFue3bfg+2MFJD9kE2TJXg6eKpSpl4fV3RZEmASUFpRrFHNUQBSEFVUWFhYV1mVW/Zci128YJViLWRxZ0NovGjfaNd22G1vbpttb3DIcVNf2HV3eUl7VHtSe9Z8cX0wUmOEaYXkhQ6KBItGjA+OA5APkBmUdpYtmDCa2JXNUNVSDFQCWA5cp2GeZB5ts3flevSABIRTkIWS4FwHnT9Tl1+zX5xteXJjd7955HvSa+xyrYoDaGFq+FGBejRpSlz2nOuCxVtJkR5weFZvXMdgZmWMbFqMQZATmFFUx2YNkkhZo5CFUU1O6lGZhQ6LWHB6Y0uTYmm0mQR+d3VXU2Bp347jll1sjE48XBBf6Y8CU9GMiYB5hv9e5WVzTmVRglk/XO6X+06KWc1fjYrhb7B5YnnnW3GEK3OxcXRe9V97Y5pkw3GYfENO/F5LTtxXolapYMNvDX39gDOBv4Gyj5eJpIb0XYpirWSHiXdn4mw+bTZ0NHhGWnV/rYKsmfNPw17dYpJjV2VvZ8N2THLMgLqAKY9NkQ1Q+VeSWoVoc2lkcf1yt4zyWOCMapYZkH+H5HnndymEL09lUlpTzWLPZ8psfXaUe5V8NoKEheuP3WYgbwZyG36rg8GZpp79UbF7cni4e4eASHvoamFejIBRdWB1a1FikoxuenaXkeqaEE9wf5xiT3ullemcelZZWOSGvJY0TyRSSlPNU9tTBl4sZJFlf2c+bE5sSHKvcu1zVHVBfiyC6YWpjMR7xpFpcRKY75g9Y2lmanXkdtB4Q4XuhipTUVMmVINZh158X7JgSWJ5YqtikGXUa8xssnWudpF42HnLfXd/pYCriLmKu4x/kF6X25gLajh8mVA+XK5fh2fYazV0CXeOfzufymcXejlTi3XtmmZfnYHxg5iAPF/FX2J1Rns8kGdo61mbWhB9fnYsi/VPal8ZajdsAm/idGh5aIhVinmM317PY8V10nnXgiiT8pKchO2GLZzBVGxfjGVcbRVwp4zTjDuYT2X2dA1O2E7gVytZZlrMW6hRA16cXhZgdmJ3ZadlbmZubTZyJntQgZqBmYJci6CM5ox0jRyWRJauT6tkZmsegmGEaoXokAFcU2momHqEV4UPT29SqV9FXg1nj3l5gQeJhon1bRdfVWK4bM9OaXKSmwZSO1R0VrNYpGFuYhpxblmJfN58G33wlodlXoAZTnVPdVFAWGNec14KX8RnJk49hYmVW5ZzfAGY+1DBWFZ2p3glUqV3EYWGe09QCVlHcsd76H26j9SPTZC/T8lSKVoBX62X3U8XguqSA1dVY2lrK3XciBSPQnrfUpNYVWEKYq5mzWs/fOmDI1D4TwVTRlQxWElZnVvwXO9cKV2WXrFiZ2M+ZbllC2fVbOFs+XAyeCt+3oCzggyE7IQChxKJKopKjKaQ0pL9mPOcbJ1PTqFOjVBWUkpXqFk9Xthf2V8/YrRmG2fQZ9JoklEhfaqAqIEAi4yMv4x+kjKWIFQsmBdT1VBcU6hYsmQ0Z2dyZndGeuaRw1KhbIZrAFhMXlRZLGf7f+FRxnZpZOh4VJu7nstXuVknZppnzmvpVNlpVV6cgZVnqpv+Z1KcXWimTuNPyFO5Yitnq2zEj61PbX6/ngdOYmGAbitvE4VzVCpnRZvzXZV7rFzGWxyHSm7RhBR6CIGZWY18EWwgd9lSIlkhcV9y23cnl2GdC2l/WhhapVENVH1UDmbfdvePmJL0nOpZXXLFbk1RyWi/fex9Ype6nnhkIWoCg4RZX1vbaxtz8nayfReAmYQyUShn2Z7udmJn/1IFmSRcO2J+fLCMT1W2YAt9gJUBU19OtlEcWTpyNoDOkSVf4neEU3lfBH2shTOKjY5Wl/NnroVTlAlhCGG5bFJ27Yo4jy9VUU8qUcdSy1OlW31eoGCCYdZjCWfaZ2dujG02czdzMXVQedWImIpKkJGQ9ZDElo2HFVmITllPDk6Jij+PEJitUHxellm5W7he2mP6Y8Fk3GZKadhpC222bpRxKHWveop/AIBJhMmEgYkhiwqOZZB9lgqZfmGRYjJrg2x0bcx//H/AbYV/uof4iGVnsYM8mPeWG21hfT2EapFxTnVTUF0Ea+tvzYUthqeJKVIPVGVcTmeoaAZ0g3Tidc+I4YjMkeKWeJaLX4dzy3pOhKBjZXWJUkFtnG4JdFl1a3iSfIaW3HqNn7ZPbmHFZVyGhk6uTtpQIU7MUe5bmWWBaLxtH3NCdq13HHrnfG+C0op8kM+RdZYYmJtS0X0rUJhTl2fLbdBxM3TogSqPo5ZXnJ+eYHRBWJltL31emORONk+LT7dRsVK6XRxgsnM8edOCNJK3lvaWCpeXnmKfpmZ0axdSo1LIcMKIyV5LYJBhI29JcT589H1vgO6EI5Ask0JUb5vTaolwwozvjTKXtFJBWspeBF8XZ3xplGlqbQ9vYnL8cu17AYB+gEuHzpBtUZOehHmLgDKT1ootUIxUcYpqa8SMB4HRYKBn8p2ZTphOEJxrisGFaIUAaX5ul3hVgQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADF8QThVOKk4xTjZOPE4/TkJOVk5YToJOhU5rjIpOEoINX45Onk6fTqBOok6wTrNOtk7OTs1OxE7GTsJO107eTu1O3073TglPWk8wT1tPXU9XT0dPdk+IT49PmE97T2lPcE+RT29Phk+WTxhR1E/fT85P2E/bT9FP2k/QT+RP5U8aUChQFFAqUCVQBVAcT/ZPIVApUCxQ/k/vTxFQBlBDUEdQA2dVUFBQSFBaUFZQbFB4UIBQmlCFULRQslDJUMpQs1DCUNZQ3lDlUO1Q41DuUPlQ9VAJUQFRAlEWURVRFFEaUSFROlE3UTxRO1E/UUBRUlFMUVRRYlH4emlRalFuUYBRglHYVoxRiVGPUZFRk1GVUZZRpFGmUaJRqVGqUatRs1GxUbJRsFG1Ub1RxVHJUdtR4FFVhulR7VHwUfVR/lEEUgtSFFIOUidSKlIuUjNSOVJPUkRSS1JMUl5SVFJqUnRSaVJzUn9SfVKNUpRSklJxUohSkVKoj6ePrFKtUrxStVLBUs1S11LeUuNS5lLtmOBS81L1UvhS+VIGUwhTOHUNUxBTD1MVUxpTI1MvUzFTM1M4U0BTRlNFUxdOSVNNU9ZRXlNpU25TGFl7U3dTglOWU6BTplOlU65TsFO2U8NTEnzZlt9T/Gbuce5T6FPtU/pTAVQ9VEBULFQtVDxULlQ2VClUHVROVI9UdVSOVF9UcVR3VHBUklR7VIBUdlSEVJBUhlTHVKJUuFSlVKxUxFTIVKhUq1TCVKRUvlS8VNhU5VTmVA9VFFX9VO5U7VT6VOJUOVVAVWNVTFUuVVxVRVVWVVdVOFUzVV1VmVWAVa9UilWfVXtVflWYVZ5VrlV8VYNVqVWHVahV2lXFVd9VxFXcVeRV1FUUVvdVFlb+Vf1VG1b5VU5WUFbfcTRWNlYyVjhWa1ZkVi9WbFZqVoZWgFaKVqBWlFaPVqVWrla2VrRWwla8VsFWw1bAVshWzlbRVtNW11buVvlWAFf/VgRXCVcIVwtXDVcTVxhXFlfHVRxXJlc3VzhXTlc7V0BXT1dpV8BXiFdhV39XiVeTV6BXs1ekV6pXsFfDV8ZX1FfSV9NXCljWV+NXC1gZWB1YclghWGJYS1hwWMBrUlg9WHlYhVi5WJ9Yq1i6WN5Yu1i4WK5YxVjTWNFY11jZWNhY5VjcWORY31jvWPpY+Vj7WPxY/VgCWQpZEFkbWaZoJVksWS1ZMlk4WT5Z0npVWVBZTllaWVhZYllgWWdZbFlpWXhZgVmdWV5Pq0+jWbJZxlnoWdxZjVnZWdpZJVofWhFaHFoJWhpaQFpsWklaNVo2WmJaalqaWrxavlrLWsJavVrjWtda5lrpWtZa+lr7WgxbC1sWWzJb0FoqWzZbPltDW0VbQFtRW1VbWltbW2VbaVtwW3NbdVt4W4hleluAW4Nbplu4W8Nbx1vJW9Rb0FvkW+Zb4lveW+Vb61vwW/Zb81sFXAdcCFwNXBNcIFwiXChcOFw5XEFcRlxOXFNcUFxPXHFbbFxuXGJOdlx5XIxckVyUXJtZq1y7XLZcvFy3XMVcvlzHXNlc6Vz9XPpc7VyMXepcC10VXRddXF0fXRtdEV0UXSJdGl0ZXRhdTF1SXU5dS11sXXNddl2HXYRdgl2iXZ1drF2uXb1dkF23XbxdyV3NXdNd0l3WXdtd613yXfVdC14aXhleEV4bXjZeN15EXkNeQF5OXldeVF5fXmJeZF5HXnVedl56Xryef16gXsFewl7IXtBez17WXuNe3V7aXtte4l7hXuhe6V7sXvFe817wXvRe+F7+XgNfCV9dX1xfC18RXxZfKV8tXzhfQV9IX0xfTl8vX1FfVl9XX1lfYV9tX3Nfd1+DX4Jff1+KX4hfkV+HX55fmV+YX6BfqF+tX7xf1l/7X+Rf+F/xX91fs2D/XyFgYGAZYBBgKWAOYDFgG2AVYCtgJmAPYDpgWmBBYGpgd2BfYEpgRmBNYGNgQ2BkYEJgbGBrYFlggWCNYOdgg2CaYIRgm2CWYJdgkmCnYItg4WC4YOBg02C0YPBfvWDGYLVg2GBNYRVhBmH2YPdgAGH0YPpgA2EhYftg8WANYQ5hR2E+YShhJ2FKYT9hPGEsYTRhPWFCYURhc2F3YVhhWWFaYWthdGFvYWVhcWFfYV1hU2F1YZlhlmGHYaxhlGGaYYphkWGrYa5hzGHKYclh92HIYcNhxmG6YctheX/NYeZh42H2Yfph9GH/Yf1h/GH+YQBiCGIJYg1iDGIUYhtiHmIhYipiLmIwYjJiM2JBYk5iXmJjYltiYGJoYnxigmKJYn5ikmKTYpZi1GKDYpRi12LRYrtiz2L/YsZi1GTIYtxizGLKYsJix2KbYsliDGPuYvFiJ2MCYwhj72L1YlBjPmNNYxxkT2OWY45jgGOrY3Zjo2OPY4ljn2O1Y2tjaWO+Y+ljwGPGY+NjyWPSY/ZjxGMWZDRkBmQTZCZkNmQdZRdkKGQPZGdkb2R2ZE5kKmWVZJNkpWSpZIhkvGTaZNJkxWTHZLtk2GTCZPFk52QJguBk4WSsYuNk72QsZfZk9GTyZPpkAGX9ZBhlHGUFZSRlI2UrZTRlNWU3ZTZlOGVLdUhlVmVVZU1lWGVeZV1lcmV4ZYJlg2WKi5tln2WrZbdlw2XGZcFlxGXMZdJl22XZZeBl4WXxZXJnCmYDZvtlc2c1ZjZmNGYcZk9mRGZJZkFmXmZdZmRmZ2ZoZl9mYmZwZoNmiGaOZolmhGaYZp1mwWa5Zslmvma8ZsRmuGbWZtpm4GY/ZuZm6WbwZvVm92YPZxZnHmcmZydnOJcuZz9nNmdBZzhnN2dGZ15nYGdZZ2NnZGeJZ3BnqWd8Z2pnjGeLZ6ZnoWeFZ7dn72e0Z+xns2fpZ7hn5GfeZ91n4mfuZ7lnzmfGZ+dnnGoeaEZoKWhAaE1oMmhOaLNoK2hZaGNod2h/aJ9oj2itaJRonWibaINormq5aHRotWigaLpoD2mNaH5oAWnKaAhp2GgiaSZp4WgMac1o1GjnaNVoNmkSaQRp12jjaCVp+WjgaO9oKGkqaRppI2khacZoeWl3aVxpeGlraVRpfmluaTlpdGk9aVlpMGlhaV5pXWmBaWppsmmuadBpv2nBadNpvmnOaehbymndabtpw2mnaS5qkWmgaZxplWm0ad5p6GkCahtq/2kKa/lp8mnnaQVqsWkeau1pFGrraQpqEmrBaiNqE2pEagxqcmo2anhqR2piallqZmpIajhqImqQao1qoGqEaqJqo2qXaheGu2rDasJquGqzaqxq3mrRat9qqmraaupq+2oFaxaG+moSaxZrMZsfazhrN2vcdjlr7phHa0NrSWtQa1lrVGtba19rYWt4a3lrf2uAa4Rrg2uNa5hrlWuea6Rrqmura69rsmuxa7Nrt2u8a8Zry2vTa99r7Gvra/Nr72u+nghsE2wUbBtsJGwjbF5sVWxibGpsgmyNbJpsgWybbH5saGxzbJJskGzEbPFs02y9bNdsxWzdbK5ssWy+bLps22zvbNls6mwfbU2INm0rbT1tOG0ZbTVtM20SbQxtY22TbWRtWm15bVltjm2VbeRvhW35bRVuCm61bcdt5m24bcZt7G3ebcxt6G3SbcVt+m3ZbeRt1W3qbe5tLW5ubi5uGW5ybl9uPm4jbmtuK252bk1uH25DbjpuTm4kbv9uHW44boJuqm6Ybslut27Tbr1ur27EbrJu1G7Vbo9upW7Cbp9uQW8Rb0xw7G74bv5uP2/ybjFv724yb8xuPm8Tb/duhm96b3hvgW+Ab29vW2/zb21vgm98b1hvjm+Rb8JvZm+zb6NvoW+kb7lvxm+qb99v1W/sb9Rv2G/xb+5v228JcAtw+m8RcAFwD3D+bxtwGnB0bx1wGHAfcDBwPnAycFFwY3CZcJJwr3DxcKxwuHCzcK5w33DLcN1w2XAJcf1wHHEZcWVxVXGIcWZxYnFMcVZxbHGPcftxhHGVcahxrHHXcblxvnHScclx1HHOceBx7HHncfVx/HH5cf9xDXIQchtyKHItcixyMHIycjtyPHI/ckByRnJLclhydHJ+coJygXKHcpJylnKicqdyuXKycsNyxnLEcs5y0nLicuBy4XL5cvdyD1AXcwpzHHMWcx1zNHMvcylzJXM+c05zT3PYnldzanNoc3BzeHN1c3tzenPIc7NzznO7c8Bz5XPuc95zonQFdG90JXT4czJ0OnRVdD90X3RZdEF0XHRpdHB0Y3RqdHZ0fnSLdJ50p3TKdM901HTxc+B043TndOl07nTydPB08XT4dPd0BHUDdQV1DHUOdQ11FXUTdR51JnUsdTx1RHVNdUp1SXVbdUZ1WnVpdWR1Z3VrdW11eHV2dYZ1h3V0dYp1iXWCdZR1mnWddaV1o3XCdbN1w3W1db11uHW8dbF1zXXKddJ12XXjdd51/nX/dfx1AXbwdfp18nXzdQt2DXYJdh92J3YgdiF2InYkdjR2MHY7dkd2SHZGdlx2WHZhdmJ2aHZpdmp2Z3ZsdnB2cnZ2dnh2fHaAdoN2iHaLdo52lnaTdpl2mnawdrR2uHa5drp2wnbNdtZ20nbeduF25Xbndup2L4b7dgh3B3cEdyl3JHcedyV3Jncbdzd3OHdHd1p3aHdrd1t3ZXd/d353eXeOd4t3kXegd553sHe2d7l3v3e8d713u3fHd81313fad9x343fud/x3DHgSeCZ5IHgqeUV4jnh0eIZ4fHiaeIx4o3i1eKp4r3jReMZ4y3jUeL54vHjFeMp47HjneNp4/Xj0eAd5EnkReRl5LHkreUB5YHlXeV95WnlVeVN5enl/eYp5nXmneUufqnmuebN5uXm6ecl51Xnneex54XnjeQh6DXoYehl6IHofeoB5MXo7ej56N3pDeld6SXphemJ6aXqdn3B6eXp9eoh6l3qVeph6lnqpesh6sHq2esV6xHq/eoOQx3rKes16z3rVetN62Xraet164XrieuZ67XrwegJ7D3sKewZ7M3sYexl7Hns1eyh7NntQe3p7BHtNewt7THtFe3V7ZXt0e2d7cHtxe2x7bnude5h7n3uNe5x7mnuLe5J7j3tde5l7y3vBe8x7z3u0e8Z73XvpexF8FHzme+V7YHwAfAd8E3zze/d7F3wNfPZ7I3wnfCp8H3w3fCt8PXxMfEN8VHxPfEB8UHxYfF98ZHxWfGV8bHx1fIN8kHykfK18onyrfKF8qHyzfLJ8sXyufLl8vXzAfMV8wnzYfNJ83HzifDub73zyfPR89nz6fAZ9An0cfRV9Cn1FfUt9Ln0yfT99NX1GfXN9Vn1OfXJ9aH1ufU99Y32TfYl9W32PfX19m326fa59o321fcd9vX2rfT1+on2vfdx9uH2ffbB92H3dfeR93n37ffJ94X0Ffgp+I34hfhJ+MX4ffgl+C34ifkZ+Zn47fjV+OX5Dfjd+Mn46fmd+XX5Wfl5+WX5afnl+an5pfnx+e36DftV9fX6uj39+iH6Jfox+kn6QfpN+lH6Wfo5+m36cfjh/On9Ff0x/TX9Of1B/UX9Vf1R/WH9ff2B/aH9pf2d/eH+Cf4Z/g3+If4d/jH+Uf55/nX+af6N/r3+yf7l/rn+2f7h/cYvFf8Z/yn/Vf9R/4X/mf+l/83/5f9yYBoAEgAuAEoAYgBmAHIAhgCiAP4A7gEqARoBSgFiAWoBfgGKAaIBzgHKAcIB2gHmAfYB/gISAhoCFgJuAk4CagK2AkFGsgNuA5YDZgN2AxIDagNaACYHvgPGAG4EpgSOBL4FLgYuWRoE+gVOBUYH8gHGBboFlgWaBdIGDgYiBioGAgYKBoIGVgaSBo4FfgZOBqYGwgbWBvoG4gb2BwIHCgbqByYHNgdGB2YHYgciB2oHfgeCB54H6gfuB/oEBggKCBYIHggqCDYIQghaCKYIrgjiCM4JAglmCWIJdglqCX4JkgmKCaIJqgmuCLoJxgneCeIJ+go2CkoKrgp+Cu4KsguGC44LfgtKC9ILzgvqCk4MDg/uC+YLeggaD3IIJg9mCNYM0gxaDMoMxg0CDOYNQg0WDL4MrgxeDGIOFg5qDqoOfg6KDloMjg46Dh4OKg3yDtYNzg3WDoIOJg6iD9IMThOuDzoP9gwOE2IMLhMGD94MHhOCD8oMNhCKEIIS9gziEBoX7g22EKoQ8hFqFhIR3hGuErYRuhIKEaYRGhCyEb4R5hDWEyoRihLmEv4SfhNmEzYS7hNqE0ITBhMaE1oShhCGF/4T0hBeFGIUshR+FFYUUhfyEQIVjhViFSIVBhQKGS4VVhYCFpIWIhZGFioWohW2FlIWbheqFh4WchXeFfoWQhcmFuoXPhbmF0IXVhd2F5YXchfmFCoYThguG/oX6hQaGIoYahjCGP4ZNhlVOVIZfhmeGcYaThqOGqYaqhouGjIa2hq+GxIbGhrCGyYYjiKuG1IbehumG7IbfhtuG74YShwaHCIcAhwOH+4YRhwmHDYf5hgqHNIc/hzeHO4clhymHGodgh1+HeIdMh06HdIdXh2iHbodZh1OHY4dqhwWIooefh4KHr4fLh72HwIfQh9aWq4fEh7OHx4fGh7uH74fyh+CHD4gNiP6H9of3hw6I0ocRiBaIFYgiiCGIMYg2iDmIJ4g7iESIQohSiFmIXohiiGuIgYh+iJ6IdYh9iLWIcoiCiJeIkoiuiJmIooiNiKSIsIi/iLGIw4jEiNSI2IjZiN2I+YgCifyI9IjoiPKIBIkMiQqJE4lDiR6JJYkqiSuJQYlEiTuJNok4iUyJHYlgiV6JZolkiW2JaolviXSJd4l+iYOJiImKiZOJmImhiamJpomsia+Jsom6ib2Jv4nAidqJ3IndieeJ9In4iQOKFooQigyKG4odiiWKNopBiluKUopGikiKfIptimyKYoqFioKKhIqoiqGKkYqliqaKmoqjisSKzYrCitqK64rziueK5IrxihSL4IriiveK3orbigyLB4sai+GKFosQixeLIIszi6uXJosriz6LKItBi0yLT4tOi0mLVotbi1qLa4tfi2yLb4t0i32LgIuMi46LkouTi5aLmYuaizqMQYw/jEiMTIxOjFCMVYxijGyMeIx6jIKMiYyFjIqMjYyOjJSMfIyYjB1irYyqjL2MsoyzjK6MtozIjMGM5IzjjNqM/Yz6jPuMBI0FjQqNB40PjQ2NEI1OnxONzYwUjRaNZ41tjXGNc42BjZmNwo2+jbqNz43ajdaNzI3bjcuN6o3rjd+N4438jQiOCY7/jR2OHo4Qjh+OQo41jjCONI5KjkeOSY5MjlCOSI5ZjmSOYI4qjmOOVY52jnKOfI6BjoeOhY6EjouOio6TjpGOlI6ZjqqOoY6sjrCOxo6xjr6OxY7IjsuO247jjvyO+47rjv6OCo8FjxWPEo8ZjxOPHI8fjxuPDI8mjzOPO485j0WPQo8+j0yPSY9Gj06PV49cj2KPY49kj5yPn4+jj62Pr4+3j9qP5Y/ij+qP74+HkPSPBZD5j/qPEZAVkCGQDZAekBaQC5AnkDaQNZA5kPiPT5BQkFGQUpAOkEmQPpBWkFiQXpBokG+QdpColnKQgpB9kIGQgJCKkImQj5CokK+QsZC1kOKQ5JBIYtuQApESkRmRMpEwkUqRVpFYkWORZZFpkXORcpGLkYmRgpGikauRr5GqkbWRtJG6kcCRwZHJkcuR0JHWkd+R4ZHbkfyR9ZH2kR6S/5EUkiySFZIRkl6SV5JFkkmSZJJIkpWSP5JLklCSnJKWkpOSm5Jaks+SuZK3kumSD5P6kkSTLpMZkyKTGpMjkzqTNZM7k1yTYJN8k26TVpOwk6yTrZOUk7mT1pPXk+iT5ZPYk8OT3ZPQk8iT5JMalBSUE5QDlAeUEJQ2lCuUNZQhlDqUQZRSlESUW5RglGKUXpRqlCmScJR1lHeUfZRalHyUfpSBlH+UgpWHlYqVlJWWlZiVmZWglaiVp5WtlbyVu5W5lb6VypX2b8OVzZXMldWV1JXWldyV4ZXlleKVIZYoli6WL5ZClkyWT5ZLlneWXJZell2WX5ZmlnKWbJaNlpiWlZaXlqqWp5axlrKWsJa0lraWuJa5ls6Wy5bJls2WTYnclg2X1Zb5lgSXBpcIlxOXDpcRlw+XFpcZlySXKpcwlzmXPZc+l0SXRpdIl0KXSZdcl2CXZJdml2iX0lJrl3GXeZeFl3yXgZd6l4aXi5ePl5CXnJeol6aXo5ezl7SXw5fGl8iXy5fcl+2XT5/yl9969pf1lw+YDJg4mCSYIZg3mD2YRphPmEuYa5hvmHCYcZh0mHOYqpivmLGYtpjEmMOYxpjpmOuYA5kJmRKZFJkYmSGZHZkemSSZIJksmS6ZPZk+mUKZSZlFmVCZS5lRmVKZTJlVmZeZmJmlma2Zrpm8md+Z25ndmdiZ0Zntme6Z8ZnymfuZ+JkBmg+aBZrimRmaK5o3mkWaQppAmkOaPppVmk2aW5pXml+aYpplmmSaaZprmmqarZqwmryawJrPmtGa05rUmt6a35rimuOa5prvmuua7pr0mvGa95r7mgabGJsamx+bIpsjmyWbJ5somymbKpsumy+bMptEm0ObT5tNm06bUZtYm3Sbk5uDm5GblpuXm5+boJuom7SbwJvKm7mbxpvPm9Gb0pvjm+Kb5JvUm+GbOpzym/Gb8JsVnBScCZwTnAycBpwInBKcCpwEnC6cG5wlnCScIZwwnEecMpxGnD6cWpxgnGecdpx4nOec7JzwnAmdCJ3rnAOdBp0qnSadr50jnR+dRJ0VnRKdQZ0/nT6dRp1InV2dXp1knVGdUJ1ZnXKdiZ2Hnaudb516nZqdpJ2pnbKdxJ3BnbuduJ26ncadz53Cndmd0534nead7Z3vnf2dGp4bnh6edZ55nn2egZ6InouejJ6SnpWekZ6dnqWeqZ64nqqerZ5hl8yezp7PntCe1J7cnt6e3Z7gnuWe6J7vnvSe9p73nvme+578nv2eB58In7d2FZ8hnyyfPp9Kn1KfVJ9jn1+fYJ9hn2afZ59sn2qfd59yn3aflZ+cn6CfL1jHaVmQZHTcUZlxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACTgROBU4GTg9OEk4XTh9OIE4hTiNOJk4pTi5OL04xTjNONU43TjxOQE5BTkJORE5GTkpOUU5VTldOWk5bTmJOY05kTmVOZ05oTmpOa05sTm1Obk5vTnJOdE51TnZOd054TnlOek57TnxOfU5/ToBOgU6CToNOhE6FTodOik6QTpZOl06ZTpxOnU6eTqNOqk6vTrBOsU60TrZOt064TrlOvE69Tr5OyE7MTs9O0E7STtpO207cTuBO4k7mTudO6U7tTu5O707xTvRO+E75TvpO/E7+TgBPAk8DTwRPBU8GTwdPCE8LTwxPEk8TTxRPFU8WTxxPHU8hTyNPKE8pTyxPLU8uTzFPM081TzdPOU87Tz5PP09AT0FPQk9ET0VPR09IT0lPSk9LT0xPUk9UT1ZPYU9iT2ZPaE9qT2tPbU9uT3FPck91T3dPeE95T3pPfU+AT4FPgk+FT4ZPh0+KT4xPjk+QT5JPk0+VT5ZPmE+ZT5pPnE+eT59PoU+iT6RPq0+tT7BPsU+yT7NPtE+2T7dPuE+5T7pPu0+8T71Pvk/AT8FPwk/GT8dPyE/JT8tPzE/NT9JP00/UT9VP1k/ZT9tP4E/iT+RP5U/nT+tP7E/wT/JP9E/1T/ZP90/5T/tP/E/9T/9PAFABUAJQA1AEUAVQBlAHUAhQCVAKUAtQDlAQUBFQE1AVUBZQF1AbUB1QHlAgUCJQI1AkUCdQK1AvUDBQMVAyUDNQNFA1UDZQN1A4UDlQO1A9UD9QQFBBUEJQRFBFUEZQSVBKUEtQTVBQUFFQUlBTUFRQVlBXUFhQWVBbUF1QXlBfUGBQYVBiUGNQZFBmUGdQaFBpUGpQa1BtUG5Qb1BwUHFQclBzUHRQdVB4UHlQelB8UH1QgVCCUINQhFCGUIdQiVCKUItQjFCOUI9QkFCRUJJQk1CUUJVQllCXUJhQmVCaUJtQnFCdUJ5Qn1CgUKFQolCkUKZQqlCrUK1QrlCvULBQsVCzULRQtVC2ULdQuFC5ULxQvVC+UL9QwFDBUMJQw1DEUMVQxlDHUMhQyVDKUMtQzFDNUM5Q0FDRUNJQ01DUUNVQ11DYUNlQ21DcUN1Q3lDfUOBQ4VDiUONQ5FDlUOhQ6VDqUOtQ71DwUPFQ8lD0UPZQ91D4UPlQ+lD8UP1Q/lD/UABRAVECUQNRBFEFUQhRCVEKUQxRDVEOUQ9REFERURNRFFEVURZRF1EYURlRGlEbURxRHVEeUR9RIFEiUSNRJFElUSZRJ1EoUSlRKlErUSxRLVEuUS9RMFExUTJRM1E0UTVRNlE3UThROVE6UTtRPFE9UT5RQlFHUUpRTFFOUU9RUFFSUVNRV1FYUVlRW1FdUV5RX1FgUWFRY1FkUWZRZ1FpUWpRb1FyUXpRflF/UYNRhFGGUYdRilGLUY5Rj1GQUZFRk1GUUZhRmlGdUZ5Rn1GhUaNRplGnUahRqVGqUa1RrlG0UbhRuVG6Ub5Rv1HBUcJRw1HFUchRylHNUc5R0FHSUdNR1FHVUdZR11HYUdlR2lHcUd5R31HiUeNR5VHmUedR6FHpUepR7FHuUfFR8lH0UfdR/lEEUgVSCVILUgxSD1IQUhNSFFIVUhxSHlIfUiFSIlIjUiVSJlInUipSLFIvUjFSMlI0UjVSPFI+UkRSRVJGUkdSSFJJUktSTlJPUlJSU1JVUldSWFJZUlpSW1JdUl9SYFJiUmNSZFJmUmhSa1JsUm1SblJwUnFSc1J0UnVSdlJ3UnhSeVJ6UntSfFJ+UoBSg1KEUoVShlKHUolSilKLUoxSjVKOUo9SkVKSUpRSlVKWUpdSmFKZUppSnFKkUqVSplKnUq5Sr1KwUrRStVK2UrdSuFK5UrpSu1K8Ur1SwFLBUsJSxFLFUsZSyFLKUsxSzVLOUs9S0VLTUtRS1VLXUtlS2lLbUtxS3VLeUuBS4VLiUuNS5VLmUudS6FLpUupS61LsUu1S7lLvUvFS8lLzUvRS9VL2UvdS+FL7UvxS/VIBUwJTA1MEUwdTCVMKUwtTDFMOUxFTElMTUxRTGFMbUxxTHlMfUyJTJFMlUydTKFMpUytTLFMtUy9TMFMxUzJTM1M0UzVTNlM3UzhTPFM9U0BTQlNEU0ZTS1NMU01TUFNUU1hTWVNbU11TZVNoU2pTbFNtU3JTdlN5U3tTfFN9U35TgFOBU4NTh1OIU4pTjlOPU5BTkVOSU5NTlFOWU5dTmVObU5xTnlOgU6FTpFOnU6pTq1OsU61Tr1OwU7FTslOzU7RTtVO3U7hTuVO6U7xTvVO+U8BTw1PEU8VTxlPHU85Tz1PQU9JT01PVU9pT3FPdU95T4VPiU+dT9FP6U/5T/1MAVAJUBVQHVAtUFFQYVBlUGlQcVCJUJFQlVCpUMFQzVDZUN1Q6VD1UP1RBVEJURFRFVEdUSVRMVE1UTlRPVFFUWlRdVF5UX1RgVGFUY1RlVGdUaVRqVGtUbFRtVG5Ub1RwVHRUeVR6VH5Uf1SBVINUhVSHVIhUiVSKVI1UkVSTVJdUmFScVJ5Un1SgVKFUolSlVK5UsFSyVLVUtlS3VLlUulS8VL5Uw1TFVMpUy1TWVNhU21TgVOFU4lTjVORU61TsVO9U8FTxVPRU9VT2VPdU+FT5VPtU/lQAVQJVA1UEVQVVCFUKVQtVDFUNVQ5VElUTVRVVFlUXVRhVGVUaVRxVHVUeVR9VIVUlVSZVKFUpVStVLVUyVTRVNVU2VThVOVU6VTtVPVVAVUJVRVVHVUhVS1VMVU1VTlVPVVFVUlVTVVRVV1VYVVlVWlVbVV1VXlVfVWBVYlVjVWhVaVVrVW9VcFVxVXJVc1V0VXlVelV9VX9VhVWGVYxVjVWOVZBVklWTVZVVllWXVZpVm1WeVaBVoVWiVaNVpFWlVaZVqFWpVapVq1WsVa1VrlWvVbBVslW0VbZVuFW6VbxVv1XAVcFVwlXDVcZVx1XIVcpVy1XOVc9V0FXVVddV2FXZVdpV21XeVeBV4lXnVelV7VXuVfBV8VX0VfZV+FX5VfpV+1X8Vf9VAlYDVgRWBVYGVgdWClYLVg1WEFYRVhJWE1YUVhVWFlYXVhlWGlYcVh1WIFYhViJWJVYmVihWKVYqVitWLlYvVjBWM1Y1VjdWOFY6VjxWPVY+VkBWQVZCVkNWRFZFVkZWR1ZIVklWSlZLVk9WUFZRVlJWU1ZVVlZWWlZbVl1WXlZfVmBWYVZjVmVWZlZnVm1WblZvVnBWclZzVnRWdVZ3VnhWeVZ6Vn1WflZ/VoBWgVaCVoNWhFaHVohWiVaKVotWjFaNVpBWkVaSVpRWlVaWVpdWmFaZVppWm1acVp1WnlafVqBWoVaiVqRWpVamVqdWqFapVqpWq1asVq1WrlawVrFWslazVrRWtVa2VrhWuVa6VrtWvVa+Vr9WwFbBVsJWw1bEVsVWxlbHVshWyVbLVsxWzVbOVs9W0FbRVtJW01bVVtZW2FbZVtxW41blVuZW51boVulW6lbsVu5W71byVvNW9lb3VvhW+1b8VgBXAVcCVwVXB1cLVwxXDVcOVw9XEFcRVxJXE1cUVxVXFlcXVxhXGVcaVxtXHVceVyBXIVciVyRXJVcmVydXK1cxVzJXNFc1VzZXN1c4VzxXPVc/V0FXQ1dEV0VXRldIV0lXS1dSV1NXVFdVV1ZXWFdZV2JXY1dlV2dXbFduV3BXcVdyV3RXdVd4V3lXeld9V35Xf1eAV4FXh1eIV4lXileNV45Xj1eQV5FXlFeVV5ZXl1eYV5lXmlecV51XnlefV6VXqFeqV6xXr1ewV7FXs1e1V7ZXt1e5V7pXu1e8V71Xvle/V8BXwVfEV8VXxlfHV8hXyVfKV8xXzVfQV9FX01fWV9dX21fcV95X4VfiV+NX5VfmV+dX6FfpV+pX61fsV+5X8FfxV/JX81f1V/ZX91f7V/xX/lf/VwFYA1gEWAVYCFgJWApYDFgOWA9YEFgSWBNYFFgWWBdYGFgaWBtYHFgdWB9YIlgjWCVYJlgnWChYKVgrWCxYLVguWC9YMVgyWDNYNFg2WDdYOFg5WDpYO1g8WD1YPlg/WEBYQVhCWENYRVhGWEdYSFhJWEpYS1hOWE9YUFhSWFNYVVhWWFdYWVhaWFtYXFhdWF9YYFhhWGJYY1hkWGZYZ1hoWGlYalhtWG5Yb1hwWHFYclhzWHRYdVh2WHdYeFh5WHpYe1h8WH1Yf1iCWIRYhliHWIhYiliLWIxYjViOWI9YkFiRWJRYlViWWJdYmFibWJxYnVigWKFYolijWKRYpVimWKdYqlirWKxYrViuWK9YsFixWLJYs1i0WLVYtli3WLhYuVi6WLtYvVi+WL9YwFjCWMNYxFjGWMdYyFjJWMpYy1jMWM1YzljPWNBY0ljTWNRY1ljXWNhY2VjaWNtY3FjdWN5Y31jgWOFY4ljjWOVY5ljnWOhY6VjqWO1Y71jxWPJY9Fj1WPdY+Fj6WPtY/Fj9WP5Y/1gAWQFZA1kFWQZZCFkJWQpZC1kMWQ5ZEFkRWRJZE1kXWRhZG1kdWR5ZIFkhWSJZI1kmWShZLFkwWTJZM1k1WTZZO1k9WT5ZP1lAWUNZRVlGWUpZTFlNWVBZUllTWVlZW1lcWV1ZXllfWWFZY1lkWWZZZ1loWWlZallrWWxZbVluWW9ZcFlxWXJZdVl3WXpZe1l8WX5Zf1mAWYVZiVmLWYxZjlmPWZBZkVmUWZVZmFmaWZtZnFmdWZ9ZoFmhWaJZplmnWaxZrVmwWbFZs1m0WbVZtlm3WbhZulm8Wb1Zv1nAWcFZwlnDWcRZxVnHWchZyVnMWc1ZzlnPWdVZ1lnZWdtZ3lnfWeBZ4VniWeRZ5lnnWelZ6lnrWe1Z7lnvWfBZ8VnyWfNZ9Fn1WfZZ91n4WfpZ/Fn9Wf5ZAFoCWgpaC1oNWg5aD1oQWhJaFFoVWhZaF1oZWhpaG1odWh5aIVoiWiRaJlonWihaKlorWixaLVouWi9aMFozWjVaN1o4WjlaOlo7Wj1aPlo/WkFaQlpDWkRaRVpHWkhaS1pMWk1aTlpPWlBaUVpSWlNaVFpWWldaWFpZWltaXFpdWl5aX1pgWmFaY1pkWmVaZlpoWmlaa1psWm1ablpvWnBacVpyWnNaeFp5WntafFp9Wn5agFqBWoJag1qEWoVahlqHWohaiVqKWotajFqNWo5aj1qQWpFak1qUWpVallqXWphamVqcWp1anlqfWqBaoVqiWqNapFqlWqZap1qoWqlaq1qsWq1arlqvWrBasVq0WrZat1q5Wrpau1q8Wr1av1rAWsNaxFrFWsZax1rIWspay1rNWs5az1rQWtFa01rVWtda2VraWtta3VreWt9a4lrkWuVa51roWupa7FrtWu5a71rwWvJa81r0WvVa9lr3Wvha+Vr6Wvta/Fr9Wv5a/1oAWwFbAlsDWwRbBVsGWwdbCFsKWwtbDFsNWw5bD1sQWxFbElsTWxRbFVsYWxlbGlsbWxxbHVseWx9bIFshWyJbI1skWyVbJlsnWyhbKVsqWytbLFstWy5bL1swWzFbM1s1WzZbOFs5WzpbO1s8Wz1bPls/W0FbQltDW0RbRVtGW0dbSFtJW0pbS1tMW01bTltPW1JbVlteW2BbYVtnW2hba1ttW25bb1tyW3Rbdlt3W3hbeVt7W3xbflt/W4JbhluKW41bjluQW5FbkluUW5Zbn1unW6hbqVusW61brluvW7Fbslu3W7pbu1u8W8BbwVvDW8hbyVvKW8tbzVvOW89b0VvUW9Vb1lvXW9hb2VvaW9tb3FvgW+Jb41vmW+db6VvqW+tb7FvtW+9b8VvyW/Nb9Fv1W/Zb91v9W/5bAFwCXANcBVwHXAhcC1wMXA1cDlwQXBJcE1wXXBlcG1weXB9cIFwhXCNcJlwoXClcKlwrXC1cLlwvXDBcMlwzXDVcNlw3XENcRFxGXEdcTFxNXFJcU1xUXFZcV1xYXFpcW1xcXF1cX1xiXGRcZ1xoXGlcalxrXGxcbVxwXHJcc1x0XHVcdlx3XHhce1x8XH1cflyAXINchFyFXIZch1yJXIpci1yOXI9cklyTXJVcnVyeXJ9coFyhXKRcpVymXKdcqFyqXK5cr1ywXLJctFy2XLlculy7XLxcvlzAXMJcw1zFXMZcx1zIXMlcylzMXM1czlzPXNBc0VzTXNRc1VzWXNdc2FzaXNtc3FzdXN5c31zgXOJc41znXOlc61zsXO5c71zxXPJc81z0XPVc9lz3XPhc+Vz6XPxc/Vz+XP9cAF0BXQRdBV0IXQldCl0LXQxdDV0PXRBdEV0SXRNdFV0XXRhdGV0aXRxdHV0fXSBdIV0iXSNdJV0oXSpdK10sXS9dMF0xXTJdM101XTZdN104XTldOl07XTxdP11AXUFdQl1DXURdRV1GXUhdSV1NXU5dT11QXVFdUl1TXVRdVV1WXVddWV1aXVxdXl1fXWBdYV1iXWNdZF1lXWZdZ11oXWpdbV1uXXBdcV1yXXNddV12XXddeF15XXpde118XX1dfl1/XYBdgV2DXYRdhV2GXYddiF2JXYpdi12MXY1djl2PXZBdkV2SXZNdlF2VXZZdl12YXZpdm12cXZ5dn12gXaFdol2jXaRdpV2mXaddqF2pXapdq12sXa1drl2vXbBdsV2yXbNdtF21XbZduF25Xbpdu128Xb1dvl2/XcBdwV3CXcNdxF3GXcddyF3JXcpdy13MXc5dz13QXdFd0l3TXdRd1V3WXddd2F3ZXdpd3F3fXeBd413kXepd7F3tXfBd9V32Xfhd+V36Xftd/F3/XQBeBF4HXgleCl4LXg1eDl4SXhNeF14eXh9eIF4hXiJeI14kXiVeKF4pXipeK14sXi9eMF4yXjNeNF41XjZeOV46Xj5eP15AXkFeQ15GXkdeSF5JXkpeS15NXk5eT15QXlFeUl5TXlZeV15YXlleWl5cXl1eX15gXmNeZF5lXmZeZ15oXmleal5rXmxebV5uXm9ecF5xXnVed155Xn5egV6CXoNehV6IXolejF6NXo5ekl6YXptenV6hXqJeo16kXqheqV6qXqterF6uXq9esF6xXrJetF66XrtevF69Xr9ewF7BXsJew17EXsVexl7HXshey17MXs1ezl7PXtBe1F7VXtde2F7ZXtpe3F7dXt5e317gXuFe4l7jXuRe5V7mXude6V7rXuxe7V7uXu9e8F7xXvJe8171Xvhe+V77Xvxe/V4FXwZfB18JXwxfDV8OXxBfEl8UXxZfGV8aXxxfHV8eXyFfIl8jXyRfKF8rXyxfLl8wXzJfM180XzVfNl83XzhfO189Xz5fP19BX0JfQ19EX0VfRl9HX0hfSV9KX0tfTF9NX05fT19RX1RfWV9aX1tfXF9eX19fYF9jX2VfZ19oX2tfbl9vX3JfdF91X3ZfeF96X31ffl9/X4Nfhl+NX45fj1+RX5NflF+WX5pfm1+dX55fn1+gX6Jfo1+kX6Vfpl+nX6lfq1+sX69fsF+xX7Jfs1+0X7ZfuF+5X7pfu1++X79fwF/BX8Jfx1/IX8pfy1/OX9Nf1F/VX9pf21/cX95f31/iX+Nf5V/mX+hf6V/sX+9f8F/yX/Nf9F/2X/df+V/6X/xfB2AIYAlgC2AMYBBgEWATYBdgGGAaYB5gH2AiYCNgJGAsYC1gLmAwYDFgMmAzYDRgNmA3YDhgOWA6YD1gPmBAYERgRWBGYEdgSGBJYEpgTGBOYE9gUWBTYFRgVmBXYFhgW2BcYF5gX2BgYGFgZWBmYG5gcWByYHRgdWB3YH5ggGCBYIJghWCGYIdgiGCKYItgjmCPYJBgkWCTYJVgl2CYYJlgnGCeYKFgomCkYKVgp2CpYKpgrmCwYLNgtWC2YLdguWC6YL1gvmC/YMBgwWDCYMNgxGDHYMhgyWDMYM1gzmDPYNBg0mDTYNRg1mDXYNlg22DeYOFg4mDjYORg5WDqYPFg8mD1YPdg+GD7YPxg/WD+YP9gAmEDYQRhBWEHYQphC2EMYRBhEWESYRNhFGEWYRdhGGEZYRthHGEdYR5hIWEiYSVhKGEpYSphLGEtYS5hL2EwYTFhMmEzYTRhNWE2YTdhOGE5YTphO2E8YT1hPmFAYUFhQmFDYURhRWFGYUdhSWFLYU1hT2FQYVJhU2FUYVZhV2FYYVlhWmFbYVxhXmFfYWBhYWFjYWRhZWFmYWlhamFrYWxhbWFuYW9hcWFyYXNhdGF2YXhheWF6YXthfGF9YX5hf2GAYYFhgmGDYYRhhWGGYYdhiGGJYYphjGGNYY9hkGGRYZJhk2GVYZZhl2GYYZlhmmGbYZxhnmGfYaBhoWGiYaNhpGGlYaZhqmGrYa1hrmGvYbBhsWGyYbNhtGG1YbZhuGG5Ybphu2G8Yb1hv2HAYcFhw2HEYcVhxmHHYclhzGHNYc5hz2HQYdNh1WHWYddh2GHZYdph22HcYd1h3mHfYeBh4WHiYeNh5GHlYedh6GHpYeph62HsYe1h7mHvYfBh8WHyYfNh9GH2Yfdh+GH5Yfph+2H8Yf1h/mEAYgFiAmIDYgRiBWIHYgliE2IUYhliHGIdYh5iIGIjYiZiJ2IoYiliK2ItYi9iMGIxYjJiNWI2YjhiOWI6YjtiPGJCYkRiRWJGYkpiT2JQYlViVmJXYlliWmJcYl1iXmJfYmBiYWJiYmRiZWJoYnFicmJ0YnVid2J4Ynpie2J9YoFigmKDYoVihmKHYohii2KMYo1ijmKPYpBilGKZYpxinWKeYqNipmKnYqliqmKtYq5ir2KwYrJis2K0YrZit2K4YrpivmLAYsFiw2LLYs9i0WLVYt1i3mLgYuFi5GLqYuti8GLyYvVi+GL5Yvpi+2IAYwNjBGMFYwZjCmMLYwxjDWMPYxBjEmMTYxRjFWMXYxhjGWMcYyZjJ2MpYyxjLWMuYzBjMWMzYzRjNWM2YzdjOGM7YzxjPmM/Y0BjQWNEY0djSGNKY1FjUmNTY1RjVmNXY1hjWWNaY1tjXGNdY2BjZGNlY2ZjaGNqY2tjbGNvY3BjcmNzY3RjdWN4Y3ljfGN9Y35jf2OBY4NjhGOFY4Zji2ONY5Fjk2OUY5Vjl2OZY5pjm2OcY51jnmOfY6FjpGOmY6tjr2OxY7JjtWO2Y7lju2O9Y79jwGPBY8Jjw2PFY8djyGPKY8tjzGPRY9Nj1GPVY9dj2GPZY9pj22PcY91j32PiY+Rj5WPmY+dj6GPrY+xj7mPvY/Bj8WPzY/Vj92P5Y/pj+2P8Y/5jA2QEZAZkB2QIZAlkCmQNZA5kEWQSZBVkFmQXZBhkGWQaZB1kH2QiZCNkJGQlZCdkKGQpZCtkLmQvZDBkMWQyZDNkNWQ2ZDdkOGQ5ZDtkPGQ+ZEBkQmRDZElkS2RMZE1kTmRPZFBkUWRTZFVkVmRXZFlkWmRbZFxkXWRfZGBkYWRiZGNkZGRlZGZkaGRqZGtkbGRuZG9kcGRxZHJkc2R0ZHVkdmR3ZHtkfGR9ZH5kf2SAZIFkg2SGZIhkiWSKZItkjGSNZI5kj2SQZJNklGSXZJhkmmSbZJxknWSfZKBkoWSiZKNkpWSmZKdkqGSqZKtkr2SxZLJks2S0ZLZkuWS7ZL1kvmS/ZMFkw2TEZMZkx2TIZMlkymTLZMxkz2TRZNNk1GTVZNZk2WTaZNtk3GTdZN9k4GThZONk5WTnZOhk6WTqZOtk7GTtZO5k72TwZPFk8mTzZPRk9WT2ZPdk+GT5ZPpk+2T8ZP1k/mT/ZAFlAmUDZQRlBWUGZQdlCGUKZQtlDGUNZQ5lD2UQZRFlE2UUZRVlFmUXZRllGmUbZRxlHWUeZR9lIGUhZSJlI2UkZSZlJ2UoZSllKmUsZS1lMGUxZTJlM2U3ZTplPGU9ZUBlQWVCZUNlRGVGZUdlSmVLZU1lTmVQZVJlU2VUZVdlWGVaZVxlX2VgZWFlZGVlZWdlaGVpZWplbWVuZW9lcWVzZXVldmV4ZXllemV7ZXxlfWV+ZX9lgGWBZYJlg2WEZYVlhmWIZYllimWNZY5lj2WSZZRllWWWZZhlmmWdZZ5loGWiZaNlpmWoZaplrGWuZbFlsmWzZbRltWW2ZbdluGW6ZbtlvmW/ZcBlwmXHZchlyWXKZc1l0GXRZdNl1GXVZdhl2WXaZdtl3GXdZd5l32XhZeNl5GXqZetl8mXzZfRl9WX4Zfll+2X8Zf1l/mX/ZQFmBGYFZgdmCGYJZgtmDWYQZhFmEmYWZhdmGGYaZhtmHGYeZiFmImYjZiRmJmYpZipmK2YsZi5mMGYyZjNmN2Y4ZjlmOmY7Zj1mP2ZAZkJmRGZFZkZmR2ZIZklmSmZNZk5mUGZRZlhmWWZbZlxmXWZeZmBmYmZjZmVmZ2ZpZmpma2ZsZm1mcWZyZnNmdWZ4Znlme2Z8Zn1mf2aAZoFmg2aFZoZmiGaJZopmi2aNZo5mj2aQZpJmk2aUZpVmmGaZZppmm2acZp5mn2agZqFmomajZqRmpWamZqlmqmarZqxmrWavZrBmsWayZrNmtWa2ZrdmuGa6ZrtmvGa9Zr9mwGbBZsJmw2bEZsVmxmbHZshmyWbKZstmzGbNZs5mz2bQZtFm0mbTZtRm1WbWZtdm2GbaZt5m32bgZuFm4mbjZuRm5WbnZuhm6mbrZuxm7WbuZu9m8Wb1ZvZm+Gb6Zvtm/WYBZwJnA2cEZwVnBmcHZwxnDmcPZxFnEmcTZxZnGGcZZxpnHGceZyBnIWciZyNnJGclZydnKWcuZzBnMmczZzZnN2c4ZzlnO2c8Zz5nP2dBZ0RnRWdHZ0pnS2dNZ1JnVGdVZ1dnWGdZZ1pnW2ddZ2JnY2dkZ2ZnZ2drZ2xnbmdxZ3Rndmd4Z3lnemd7Z31ngGeCZ4NnhWeGZ4hnimeMZ41njmePZ5FnkmeTZ5RnlmeZZ5tnn2egZ6FnpGemZ6lnrGeuZ7Fnsme0Z7lnume7Z7xnvWe+Z79nwGfCZ8VnxmfHZ8hnyWfKZ8tnzGfNZ85n1WfWZ9dn22ffZ+Fn42fkZ+Zn52foZ+pn62ftZ+5n8mf1Z/Zn92f4Z/ln+mf7Z/xn/mcBaAJoA2gEaAZoDWgQaBJoFGgVaBhoGWgaaBtoHGgeaB9oIGgiaCNoJGglaCZoJ2goaCtoLGgtaC5oL2gwaDFoNGg1aDZoOmg7aD9oR2hLaE1oT2hSaFZoV2hYaFloWmhbaFxoXWheaF9oamhsaG1obmhvaHBocWhyaHNodWh4aHloemh7aHxofWh+aH9ogGiCaIRoh2iIaIloimiLaIxojWiOaJBokWiSaJRolWiWaJhomWiaaJtonGidaJ5on2igaKFoo2ikaKVoqWiqaKtorGiuaLFosmi0aLZot2i4aLloumi7aLxovWi+aL9owWjDaMRoxWjGaMdoyGjKaMxozmjPaNBo0WjTaNRo1mjXaNlo22jcaN1o3mjfaOFo4mjkaOVo5mjnaOho6WjqaOto7GjtaO9o8mjzaPRo9mj3aPho+2j9aP5o/2gAaQJpA2kEaQZpB2kIaQlpCmkMaQ9pEWkTaRRpFWkWaRdpGGkZaRppG2kcaR1pHmkhaSJpI2klaSZpJ2koaSlpKmkraSxpLmkvaTFpMmkzaTVpNmk3aThpOmk7aTxpPmlAaUFpQ2lEaUVpRmlHaUhpSWlKaUtpTGlNaU5pT2lQaVFpUmlTaVVpVmlYaVlpW2lcaV9pYWliaWRpZWlnaWhpaWlqaWxpbWlvaXBpcmlzaXRpdWl2aXppe2l9aX5pf2mBaYNphWmKaYtpjGmOaY9pkGmRaZJpk2mWaZdpmWmaaZ1pnmmfaaBpoWmiaaNppGmlaaZpqWmqaaxprmmvabBpsmmzabVptmm4ablpumm8ab1pvmm/acBpwmnDacRpxWnGacdpyGnJactpzWnPadFp0mnTadVp1mnXadhp2Wnaadxp3WneaeFp4mnjaeRp5Wnmaedp6Gnpaepp62nsae5p72nwafFp82n0afVp9mn3afhp+Wn6aftp/Gn+aQBqAWoCagNqBGoFagZqB2oIaglqC2oMag1qDmoPahBqEWoSahNqFGoVahZqGWoaahtqHGodah5qIGoiaiNqJGolaiZqJ2opaitqLGotai5qMGoyajNqNGo2ajdqOGo5ajpqO2o8aj9qQGpBakJqQ2pFakZqSGpJakpqS2pMak1qTmpPalFqUmpTalRqVWpWaldqWmpcal1qXmpfamBqYmpjamRqZmpnamhqaWpqamtqbGptam5qb2pwanJqc2p0anVqdmp3anhqemp7an1qfmp/aoFqgmqDaoVqhmqHaohqiWqKaotqjGqNao9qkmqTapRqlWqWaphqmWqaaptqnGqdap5qn2qhaqJqo2qkaqVqpmqnaqhqqmqtaq5qr2qwarFqsmqzarRqtWq2ardquGq5arpqu2q8ar1qvmq/asBqwWrCasNqxGrFasZqx2rIaslqymrLasxqzWrOas9q0GrRatJq02rUatVq1mrXathq2Wraattq3Grdat5q32rgauFq4mrjauRq5Wrmaudq6Grpaupq62rsau1q7mrvavBq8WryavNq9Gr1avZq92r4avlq+mr7avxq/Wr+av9qAGsBawJrA2sEawVrBmsHawhrCWsKawtrDGsNaw5rD2sQaxFrEmsTaxRrFWsWaxdrGGsZaxprG2scax1rHmsfayVrJmsoaylrKmsrayxrLWsuay9rMGsxazNrNGs1azZrOGs7azxrPWs/a0BrQWtCa0RrRWtIa0prS2tNa05rT2tQa1FrUmtTa1RrVWtWa1drWGtaa1trXGtda15rX2tga2FraGtpa2trbGtta25rb2twa3Frcmtza3RrdWt2a3dreGt6a31rfmt/a4BrhWuIa4xrjmuPa5BrkWuUa5Vrl2uYa5lrnGuda55rn2uga6Jro2uka6Vrpmuna6hrqWura6xrrWuua69rsGuxa7Jrtmu4a7lrumu7a7xrvWu+a8Brw2vEa8Zrx2vIa8lrymvMa85r0GvRa9hr2mvca91r3mvfa+Br4mvja+Rr5Wvma+dr6Gvpa+xr7Wvua/Br8Wvya/Rr9mv3a/hr+mv7a/xr/mv/awBsAWwCbANsBGwIbAlsCmwLbAxsDmwSbBdsHGwdbB5sIGwjbCVsK2wsbC1sMWwzbDZsN2w5bDpsO2w8bD5sP2xDbERsRWxIbEtsTGxNbE5sT2xRbFJsU2xWbFhsWWxabGJsY2xlbGZsZ2xrbGxsbWxubG9scWxzbHVsd2x4bHpse2x8bH9sgGyEbIdsimyLbI1sjmyRbJJslWyWbJdsmGyabJxsnWyebKBsomyobKxsr2ywbLRstWy2bLdsumzAbMFswmzDbMZsx2zIbMtszWzObM9s0WzSbNhs2WzabNxs3WzfbORs5mznbOls7GztbPJs9Gz5bP9sAG0CbQNtBW0GbQhtCW0KbQ1tD20QbRFtE20UbRVtFm0YbRxtHW0fbSBtIW0ibSNtJG0mbShtKW0sbS1tL20wbTRtNm03bThtOm0/bUBtQm1EbUltTG1QbVVtVm1XbVhtW21dbV9tYW1ibWRtZW1nbWhta21sbW1tcG1xbXJtc211bXZteW16bXttfW1+bX9tgG2BbYNthG2GbYdtim2LbY1tj22QbZJtlm2XbZhtmW2abZxtom2lbaxtrW2wbbFts220bbZtt225bbptu228bb1tvm3BbcJtw23Ibcltym3Nbc5tz23QbdJt023UbdVt123abdtt3G3fbeJt423lbedt6G3pbept7W3vbfBt8m30bfVt9m34bfpt/W3+bf9tAG4BbgJuA24EbgZuB24IbgluC24PbhJuE24VbhhuGW4bbhxuHm4fbiJuJm4nbihuKm4sbi5uMG4xbjNuNW42bjduOW47bjxuPW4+bj9uQG5BbkJuRW5GbkduSG5JbkpuS25Mbk9uUG5RblJuVW5XblluWm5cbl1uXm5gbmFuYm5jbmRuZW5mbmduaG5pbmpubG5tbm9ucG5xbnJuc250bnVudm53bnhueW56bntufG59boBugW6CboRuh26Ibopui26Mbo1ujm6RbpJuk26UbpVulm6Xbplumm6bbp1unm6gbqFuo26kbqZuqG6pbqturG6tbq5usG6zbrVuuG65brxuvm6/bsBuw27EbsVuxm7Ibsluym7Mbs1uzm7QbtJu1m7Ybtlu227cbt1u427nbupu627sbu1u7m7vbvBu8W7ybvNu9W72bvdu+G76bvtu/G79bv5u/24AbwFvA28EbwVvB28IbwpvC28Mbw1vDm8QbxFvEm8WbxdvGG8ZbxpvG28cbx1vHm8fbyFvIm8jbyVvJm8nbyhvLG8ubzBvMm80bzVvN284bzlvOm87bzxvPW8/b0BvQW9Cb0NvRG9Fb0hvSW9Kb0xvTm9Pb1BvUW9Sb1NvVG9Vb1ZvV29Zb1pvW29db19vYG9hb2NvZG9lb2dvaG9pb2pva29sb29vcG9xb3NvdW92b3dveW97b31vfm9/b4BvgW+Cb4NvhW+Gb4dvim+Lb49vkG+Rb5Jvk2+Ub5Vvlm+Xb5hvmW+ab5tvnW+eb59voG+ib6NvpG+lb6ZvqG+pb6pvq2+sb61vrm+vb7BvsW+yb7RvtW+3b7hvum+7b7xvvW++b79vwW/Db8RvxW/Gb8dvyG/Kb8tvzG/Nb85vz2/Qb9Nv1G/Vb9Zv12/Yb9lv2m/bb9xv3W/fb+Jv42/kb+Vv5m/nb+hv6W/qb+tv7G/tb/Bv8W/yb/Nv9G/1b/Zv92/4b/lv+m/7b/xv/W/+b/9vAHABcAJwA3AEcAVwBnAHcAhwCXAKcAtwDHANcA5wD3AQcBJwE3AUcBVwFnAXcBhwGXAccB1wHnAfcCBwIXAicCRwJXAmcCdwKHApcCpwK3AscC1wLnAvcDBwMXAycDNwNHA2cDdwOHA6cDtwPHA9cD5wP3BAcEFwQnBDcERwRXBGcEdwSHBJcEpwS3BNcE5wUHBRcFJwU3BUcFVwVnBXcFhwWXBacFtwXHBdcF9wYHBhcGJwY3BkcGVwZnBncGhwaXBqcG5wcXBycHNwdHB3cHlwenB7cH1wgXCCcINwhHCGcIdwiHCLcIxwjXCPcJBwkXCTcJdwmHCacJtwnnCfcKBwoXCicKNwpHClcKZwp3CocKlwqnCwcLJwtHC1cLZwunC+cL9wxHDFcMZwx3DJcMtwzHDNcM5wz3DQcNFw0nDTcNRw1XDWcNdw2nDccN1w3nDgcOFw4nDjcOVw6nDucPBw8XDycPNw9HD1cPZw+HD6cPtw/HD+cP9wAHEBcQJxA3EEcQVxBnEHcQhxC3EMcQ1xDnEPcRFxEnEUcRdxG3EccR1xHnEfcSBxIXEicSNxJHElcSdxKHEpcSpxK3EscS1xLnEycTNxNHE1cTdxOHE5cTpxO3E8cT1xPnE/cUBxQXFCcUNxRHFGcUdxSHFJcUtxTXFPcVBxUXFScVNxVHFVcVZxV3FYcVlxWnFbcV1xX3FgcWFxYnFjcWVxaXFqcWtxbHFtcW9xcHFxcXRxdXF2cXdxeXF7cXxxfnF/cYBxgXGCcYNxhXGGcYdxiHGJcYtxjHGNcY5xkHGRcZJxk3GVcZZxl3GacZtxnHGdcZ5xoXGicaNxpHGlcaZxp3Gpcapxq3Gtca5xr3GwcbFxsnG0cbZxt3G4cbpxu3G8cb1xvnG/ccBxwXHCccRxxXHGccdxyHHJccpxy3HMcc1xz3HQcdFx0nHTcdZx13HYcdlx2nHbcdxx3XHecd9x4XHiceNx5HHmcehx6XHqcetx7HHtce9x8HHxcfJx83H0cfVx9nH3cfhx+nH7cfxx/XH+cf9xAHIBcgJyA3IEcgVyB3IIcglyCnILcgxyDXIOcg9yEHIRchJyE3IUchVyFnIXchhyGXIachtyHHIech9yIHIhciJyI3IkciVyJnIncilyK3Itci5yL3IycjNyNHI6cjxyPnJAckFyQnJDckRyRXJGcklySnJLck5yT3JQclFyU3JUclVyV3JYclpyXHJecmByY3JkcmVyaHJqcmtybHJtcnBycXJzcnRydnJ3cnhye3J8cn1ygnKDcoVyhnKHcohyiXKMco5ykHKRcpNylHKVcpZyl3KYcplymnKbcpxynXKecqByoXKicqNypHKlcqZyp3KocqlyqnKrcq5ysXKycrNytXK6crtyvHK9cr5yv3LAcsVyxnLHcslyynLLcsxyz3LRctNy1HLVctZy2HLacttyxuTH5MjkyeTK5MvkzOTN5M7kz+TQ5NHk0uTT5NTk1eTW5Nfk2OTZ5Nrk2+Tc5N3k3uTf5ODk4eTi5OPk5OTl5Obk5+To5Onk6uTr5Ozk7eTu5O/k8OTx5PLk8+T05PXk9uT35Pjk+eT65Pvk/OT95P7k/+QA5QHlAuUD5QTlBeUG5QflCOUJ5QrlC+UM5Q3lDuUP5RDlEeUS5RPlFOUV5RblF+UY5RnlGuUb5RzlHeUe5R/lIOUh5SLlI+Uk5SXlADABMAIwtwDJAscCqAADMAUwFCBe/xYgJiAYIBkgHCAdIBQwFTAIMAkwCjALMAwwDTAOMA8wFjAXMBAwETCxANcA9wA2IiciKCIRIg8iKiIpIggiNyIaIqUiJSIgIhIjmSIrIi4iYSJMIkgiPSIdImAibiJvImQiZSIeIjUiNCJCJkAmsAAyIDMgAyEE/6QA4P/h/zAgpwAWIQYmBSbLJc8lziXHJcYloSWgJbMlsiU7IJIhkCGRIZMhEzAm5SflKOUp5SrlK+Us5S3lLuUv5TDlMeUy5TPlNOU15TblN+U45TnlOuU75TzlPeU+5T/lQOVB5ULlQ+VE5UXlRuVH5UjlSeVK5UvlTOVN5U7lT+VQ5VHlUuVT5VTlVeVW5VflWOVZ5VrlW+Vc5V3lXuVf5WDlYeVi5WPlZOVl5WblZ+Vo5WnlauVr5WzlbeVu5W/lcOVx5XLlc+V05XXlduV35XjleeV65XvlfOV95X7lf+WA5YHlguWD5YTlheVwIXEhciFzIXQhdSF2IXcheCF5IWbnZ+do52nnaudr54gkiSSKJIskjCSNJI4kjySQJJEkkiSTJJQklSSWJJckmCSZJJokmyR0JHUkdiR3JHgkeSR6JHskfCR9JH4kfySAJIEkgiSDJIQkhSSGJIckYCRhJGIkYyRkJGUkZiRnJGgkaSSsIG3nIDIhMiIyIzIkMiUyJjInMigyKTJu52/nYCFhIWIhYyFkIWUhZiFnIWghaSFqIWshcOdx54blh+WI5YnliuWL5YzljeWO5Y/lkOWR5ZLlk+WU5ZXlluWX5ZjlmeWa5ZvlnOWd5Z7ln+Wg5aHlouWj5aTlpeWm5aflqOWp5arlq+Ws5a3lruWv5bDlseWy5bPltOW15bblt+W45bnluuW75bzlveW+5b/lwOXB5cLlw+XE5cXlxuXH5cjlyeXK5cvlzOXN5c7lz+XQ5dHl0uXT5dTl1eXW5dfl2OXZ5drl2+Xc5d3l3uXf5eDl4eXi5ePl5OXl5QH/Av8D/+X/Bf8G/wf/CP8J/wr/C/8M/w3/Dv8P/xD/Ef8S/xP/FP8V/xb/F/8Y/xn/Gv8b/xz/Hf8e/x//IP8h/yL/I/8k/yX/Jv8n/yj/Kf8q/yv/LP8t/y7/L/8w/zH/Mv8z/zT/Nf82/zf/OP85/zr/O/88/z3/Pv8//0D/Qf9C/0P/RP9F/0b/R/9I/0n/Sv9L/0z/Tf9O/0//UP9R/1L/U/9U/1X/Vv9X/1j/Wf9a/1v/XP9d/+P/5uXn5ejl6eXq5evl7OXt5e7l7+Xw5fHl8uXz5fTl9eX25ffl+OX55frl++X85f3l/uX/5QDmAeYC5gPmBOYF5gbmB+YI5gnmCuYL5gzmDeYO5g/mEOYR5hLmE+YU5hXmFuYX5hjmGeYa5hvmHOYd5h7mH+Yg5iHmIuYj5iTmJeYm5ifmKOYp5irmK+Ys5i3mLuYv5jDmMeYy5jPmNOY15jbmN+Y45jnmOuY75jzmPeY+5j/mQOZB5kLmQ+ZE5kXmQTBCMEMwRDBFMEYwRzBIMEkwSjBLMEwwTTBOME8wUDBRMFIwUzBUMFUwVjBXMFgwWTBaMFswXDBdMF4wXzBgMGEwYjBjMGQwZTBmMGcwaDBpMGowazBsMG0wbjBvMHAwcTByMHMwdDB1MHYwdzB4MHkwejB7MHwwfTB+MH8wgDCBMIIwgzCEMIUwhjCHMIgwiTCKMIswjDCNMI4wjzCQMJEwkjCTMHLnc+d053Xndud353jneed653vnfOdG5kfmSOZJ5krmS+ZM5k3mTuZP5lDmUeZS5lPmVOZV5lbmV+ZY5lnmWuZb5lzmXeZe5l/mYOZh5mLmY+Zk5mXmZuZn5mjmaeZq5mvmbOZt5m7mb+Zw5nHmcuZz5nTmdeZ25nfmeOZ55nrme+Z85n3mfuZ/5oDmgeaC5oPmhOaF5obmh+aI5onmiuaL5ozmjeaO5o/mkOaR5pLmk+aU5pXmluaX5pjmmeaa5pvmnOad5p7mn+ag5qHmouaj5qTmpeahMKIwozCkMKUwpjCnMKgwqTCqMKswrDCtMK4wrzCwMLEwsjCzMLQwtTC2MLcwuDC5MLowuzC8ML0wvjC/MMAwwTDCMMMwxDDFMMYwxzDIMMkwyjDLMMwwzTDOMM8w0DDRMNIw0zDUMNUw1jDXMNgw2TDaMNsw3DDdMN4w3zDgMOEw4jDjMOQw5TDmMOcw6DDpMOow6zDsMO0w7jDvMPAw8TDyMPMw9DD1MPYwfed+53/ngOeB54Lng+eE56bmp+ao5qnmquar5qzmreau5q/msOax5rLms+a05rXmtua35rjmuea65rvmvOa95r7mv+bA5sHmwubD5sTmxebG5sfmyObJ5srmy+bM5s3mzubP5tDm0ebS5tPm1ObV5tbm1+bY5tnm2ubb5tzm3ebe5t/m4Obh5uLm4+bk5uXm5ubn5ujm6ebq5uvm7Obt5u7m7+bw5vHm8ubz5vTm9eb25vfm+Ob55vrm++b85v3m/ub/5gDnAecC5wPnBOcF55EDkgOTA5QDlQOWA5cDmAOZA5oDmwOcA50DngOfA6ADoQOjA6QDpQOmA6cDqAOpA4XnhueH54jnieeK54vnjOexA7IDswO0A7UDtgO3A7gDuQO6A7sDvAO9A74DvwPAA8EDwwPEA8UDxgPHA8gDyQON547nj+eQ55HnkueT5zX+Nv45/jr+P/5A/j3+Pv5B/kL+Q/5E/pTnlec7/jz+N/44/jH+lucz/jT+l+eY55nnmueb55znneee55/nBucH5wjnCecK5wvnDOcN5w7nD+cQ5xHnEucT5xTnFecW5xfnGOcZ5xrnG+cc5x3nHucf5yDnIeci5yPnJOcl5ybnJ+co5ynnKucr5yznLecu5y/nMOcx5zLnM+c05zXnNuc35zjnOec65zvnPOc95z7nP+dA50HnQudD50TnRedG50fnSOdJ50rnS+dM503nTudP51DnUedS51PnVOdV51bnV+dY51nnWudb51znXede51/nYOdh52LnY+dk52XnEAQRBBIEEwQUBBUEAQQWBBcEGAQZBBoEGwQcBB0EHgQfBCAEIQQiBCMEJAQlBCYEJwQoBCkEKgQrBCwELQQuBC8EoOeh56Lno+ek56Xnpuen56jnqeeq56vnrOet567nMAQxBDIEMwQ0BDUEUQQ2BDcEOAQ5BDoEOwQ8BD0EPgQ/BEAEQQRCBEMERARFBEYERwRIBEkESgRLBEwETQROBE8Er+ew57Hnsuez57Tntee257fnuOe557rnu+fKAssC2QITIBUgJSA1IAUhCSGWIZchmCGZIRUiHyIjIlIiZiJnIr8iUCVRJVIlUyVUJVUlViVXJVglWSVaJVslXCVdJV4lXyVgJWElYiVjJWQlZSVmJWclaCVpJWolayVsJW0lbiVvJXAlcSVyJXMlgSWCJYMlhCWFJYYlhyWIJYkliiWLJYwljSWOJY8lkyWUJZUlvCW9JeIl4yXkJeUlCSaVIhIwHTAeMLznvee+57/nwOfB58Lnw+fE58XnxucBAeEAzgHgABMB6QAbAegAKwHtANAB7ABNAfMA0gHyAGsB+gDUAfkA1gHYAdoB3AH8AOoAUQLH50QBSAH5AWECyefK58vnzOcFMQYxBzEIMQkxCjELMQwxDTEOMQ8xEDERMRIxEzEUMRUxFjEXMRgxGTEaMRsxHDEdMR4xHzEgMSExIjEjMSQxJTEmMScxKDEpMc3nzufP59Dn0efS59Pn1OfV59bn1+fY59nn2ufb59zn3efe59/n4Ofh5yEwIjAjMCQwJTAmMCcwKDApMKMyjjOPM5wznTOeM6EzxDPOM9Ez0jPVMzD+4v/k/+LnISExMuPnECDk5+Xn5uf8MJswnDD9MP4wBjCdMJ4wSf5K/kv+TP5N/k7+T/5Q/lH+Uv5U/lX+Vv5X/ln+Wv5b/lz+Xf5e/l/+YP5h/mL+Y/5k/mX+Zv5o/mn+av5r/j4w8C/xL/Iv8y/0L/Uv9i/3L/gv+S/6L/svBzD05/Xn9uf35/jn+ef65/vn/Of95/7n/+cA6AAlASUCJQMlBCUFJQYlByUIJQklCiULJQwlDSUOJQ8lECURJRIlEyUUJRUlFiUXJRglGSUaJRslHCUdJR4lHyUgJSElIiUjJSQlJSUmJSclKCUpJSolKyUsJS0lLiUvJTAlMSUyJTMlNCU1JTYlNyU4JTklOiU7JTwlPSU+JT8lQCVBJUIlQyVEJUUlRiVHJUglSSVKJUslAegC6APoBOgF6AboB+gI6AnoCugL6AzoDegO6A/o3HLdct9y4nLjcuRy5XLmcudy6nLrcvVy9nL5cv1y/nL/cgBzAnMEcwVzBnMHcwhzCXMLcwxzDXMPcxBzEXMScxRzGHMZcxpzH3MgcyNzJHMmcydzKHMtcy9zMHMyczNzNXM2czpzO3M8cz1zQHNBc0JzQ3NEc0VzRnNHc0hzSXNKc0tzTHNOc09zUXNTc1RzVXNWc1hzWXNac1tzXHNdc15zX3Nhc2JzY3Nkc2VzZnNnc2hzaXNqc2tzbnNwc3FzAOAB4ALgA+AE4AXgBuAH4AjgCeAK4AvgDOAN4A7gD+AQ4BHgEuAT4BTgFeAW4BfgGOAZ4BrgG+Ac4B3gHuAf4CDgIeAi4CPgJOAl4CbgJ+Ao4CngKuAr4CzgLeAu4C/gMOAx4DLgM+A04DXgNuA34DjgOeA64DvgPOA94D7gP+BA4EHgQuBD4ETgReBG4EfgSOBJ4ErgS+BM4E3gTuBP4FDgUeBS4FPgVOBV4FbgV+BY4FngWuBb4FzgXeByc3NzdHN1c3Zzd3N4c3lzenN7c3xzfXN/c4BzgXOCc4NzhXOGc4hzinOMc41zj3OQc5Jzk3OUc5Vzl3OYc5lzmnOcc51znnOgc6Fzo3Okc6VzpnOnc6hzqnOsc61zsXO0c7VztnO4c7lzvHO9c75zv3PBc8NzxHPFc8Zzx3PLc8xzznPSc9Nz1HPVc9Zz13PYc9pz23Pcc91z33Phc+Jz43Pkc+Zz6HPqc+tz7HPuc+9z8HPxc/Nz9HP1c/Zz93Ne4F/gYOBh4GLgY+Bk4GXgZuBn4GjgaeBq4GvgbOBt4G7gb+Bw4HHgcuBz4HTgdeB24HfgeOB54Hrge+B84H3gfuB/4IDggeCC4IPghOCF4Ibgh+CI4IngiuCL4IzgjeCO4I/gkOCR4JLgk+CU4JXgluCX4JjgmeCa4JvgnOCd4J7gn+Cg4KHgouCj4KTgpeCm4KfgqOCp4Krgq+Cs4K3gruCv4LDgseCy4LPgtOC14Lbgt+C44LnguuC74Phz+XP6c/tz/HP9c/5z/3MAdAF0AnQEdAd0CHQLdAx0DXQOdBF0EnQTdBR0FXQWdBd0GHQZdBx0HXQedB90IHQhdCN0JHQndCl0K3QtdC90MXQydDd0OHQ5dDp0O3Q9dD50P3RAdEJ0Q3REdEV0RnRHdEh0SXRKdEt0THRNdE50T3RQdFF0UnRTdFR0VnRYdF10YHRhdGJ0Y3RkdGV0ZnRndGh0aXRqdGt0bHRudG90cXRydHN0dHR1dHh0eXR6dLzgveC+4L/gwODB4MLgw+DE4MXgxuDH4MjgyeDK4MvgzODN4M7gz+DQ4NHg0uDT4NTg1eDW4Nfg2ODZ4Nrg2+Dc4N3g3uDf4ODg4eDi4OPg5ODl4Obg5+Do4Ong6uDr4Ozg7eDu4O/g8ODx4PLg8+D04PXg9uD34Pjg+eD64Pvg/OD94P7g/+AA4QHhAuED4QThBeEG4QfhCOEJ4QrhC+EM4Q3hDuEP4RDhEeES4RPhFOEV4RbhF+EY4Rnhe3R8dH10f3SCdIR0hXSGdIh0iXSKdIx0jXSPdJF0knSTdJR0lXSWdJd0mHSZdJp0m3SddJ90oHShdKJ0o3SkdKV0pnSqdKt0rHStdK50r3SwdLF0snSzdLR0tXS2dLd0uHS5dLt0vHS9dL50v3TAdMF0wnTDdMR0xXTGdMd0yHTJdMp0y3TMdM10znTPdNB00XTTdNR01XTWdNd02HTZdNp023TddN904XTldOd06HTpdOp063TsdO108HTxdPJ0GuEb4RzhHeEe4R/hIOEh4SLhI+Ek4SXhJuEn4SjhKeEq4SvhLOEt4S7hL+Ew4THhMuEz4TThNeE24TfhOOE54TrhO+E84T3hPuE/4UDhQeFC4UPhROFF4UbhR+FI4UnhSuFL4UzhTeFO4U/hUOFR4VLhU+FU4VXhVuFX4VjhWeFa4VvhXOFd4V7hX+Fg4WHhYuFj4WThZeFm4WfhaOFp4Wrha+Fs4W3hbuFv4XDhceFy4XPhdOF14Xbhd+HzdPV0+HT5dPp0+3T8dP10/nQAdQF1AnUDdQV1BnUHdQh1CXUKdQt1DHUOdRB1EnUUdRV1FnUXdRt1HXUedSB1IXUidSN1JHUmdSd1KnUudTR1NnU5dTx1PXU/dUF1QnVDdUR1RnVHdUl1SnVNdVB1UXVSdVN1VXVWdVd1WHVddV51X3VgdWF1YnVjdWR1Z3VodWl1a3VsdW11bnVvdXB1cXVzdXV1dnV3dXp1e3V8dX11fnWAdYF1gnWEdYV1h3V44XnheuF74XzhfeF+4X/hgOGB4YLhg+GE4YXhhuGH4YjhieGK4YvhjOGN4Y7hj+GQ4ZHhkuGT4ZThleGW4ZfhmOGZ4Zrhm+Gc4Z3hnuGf4aDhoeGi4aPhpOGl4abhp+Go4anhquGr4azhreGu4a/hsOGx4bLhs+G04bXhtuG34bjhueG64bvhvOG94b7hv+HA4cHhwuHD4cThxeHG4cfhyOHJ4crhy+HM4c3hzuHP4dDh0eHS4dPh1OHV4Yh1iXWKdYx1jXWOdZB1k3WVdZh1m3WcdZ51onWmdad1qHWpdap1rXW2dbd1unW7db91wHXBdcZ1y3XMdc51z3XQddF103XXddl12nXcdd1133XgdeF15XXpdex17XXude918nXzdfV19nX3dfh1+nX7df11/nUCdgR2BnYHdgh2CXYLdg12DnYPdhF2EnYTdhR2FnYadhx2HXYediF2I3Yndih2LHYudi92MXYydjZ2N3Y5djp2O3Y9dkF2QnZEdtbh1+HY4dnh2uHb4dzh3eHe4d/h4OHh4eLh4+Hk4eXh5uHn4ejh6eHq4evh7OHt4e7h7+Hw4fHh8uHz4fTh9eH24ffh+OH54frh++H84f3h/uH/4QDiAeIC4gPiBOIF4gbiB+II4gniCuIL4gziDeIO4g/iEOIR4hLiE+IU4hXiFuIX4hjiGeIa4hviHOId4h7iH+Ig4iHiIuIj4iTiJeIm4ifiKOIp4iriK+Is4i3iLuIv4jDiMeIy4jPiRXZGdkd2SHZJdkp2S3ZOdk92UHZRdlJ2U3ZVdld2WHZZdlp2W3Zddl92YHZhdmJ2ZHZldmZ2Z3Zodml2anZsdm12bnZwdnF2cnZzdnR2dXZ2dnd2eXZ6dnx2f3aAdoF2g3aFdol2inaMdo12j3aQdpJ2lHaVdpd2mHaadpt2nHaddp52n3agdqF2onajdqV2pnandqh2qXaqdqt2rHatdq92sHazdrV2tna3drh2uXa6drt2vHa9dr52wHbBdsN2SlU/lsNXKGPOVAlVwFSRdkx2PIXud36CjXgxcpiWjZcobIlb+k8JY5dmuFz6gEhoroACZs52+VFWZaxx8X+EiLJQZVnKYbNvrYJMY1Ji7VMnVAZ7a1GkdfRd1GLLjXaXimIZgF1XOJdifzhyfXbPZ352RmRwTyWN3GIXepFl7XMsZHNiLIKBmH9nSHJuYsxiNE/jdEpTnlLKfqaQLl6GaJxpgIHRftJoxXiMhlGVjVAkjN6C3oAFUxKJZVLEdsd2yXbLdsx203bVdtl22nbcdt123nbgduF24nbjduR25nbnduh26Xbqdut27HbtdvB283b1dvZ293b6dvt2/Xb/dgB3AncDdwV3BncKdwx3DncPdxB3EXcSdxN3FHcVdxZ3F3cYdxt3HHcddx53IXcjdyR3JXcndyp3K3csdy53MHcxdzJ3M3c0dzl3O3c9dz53P3dCd0R3RXdGd0h3SXdKd0t3THdNd053T3dSd1N3VHdVd1Z3V3dYd1l3XHeEhfmW3U8hWHGZnVuxYqVitGZ5jI2cBnJvZ5F4smBRUxdTiI/MgB2NoZQNUMhyB1nrYBlxq4hUWe+CLGcoeyld934tdfVsZo74jzyQO5/UaxmRFHt8X6d41oQ9hdVr2WvWawFeh175de2VXWUKX8Vfn4/BWMKBf5Bblq2XuY8WfyyNQWK/T9hTXlOoj6mPq49NkAdoal+YgWiI1pyLYStSKnZsX4xl0m/obr5bSGR1UbBRxGcZTsl5fJmzcF13Xndfd2B3ZHdnd2l3andtd253b3dwd3F3cndzd3R3dXd2d3d3eHd6d3t3fHeBd4J3g3eGd4d3iHeJd4p3i3ePd5B3k3eUd5V3lneXd5h3mXead5t3nHedd553oXejd6R3pneod6t3rXeud693sXeyd7R3tne3d7h3uXe6d7x3vnfAd8F3wnfDd8R3xXfGd8d3yHfJd8p3y3fMd853z3fQd9F30nfTd9R31XfWd9h32Xfad9133nffd+B34Xfkd8V1dl67c+CDrWToYrWU4mxaU8NSD2TClJR7L08bXjaCFoGKgSRuymxzmlVjXFP6VGWI4FcNTgNeZWs/fOiQFmDmZBxzwYhQZ01iIo1sdymOx5FpX9yDIYUQmcJTlYaLa+1g6GB/cM2CMYLTTqdsz4XNZNl8/Wn5ZkmDlVNWe6dPjFFLbUJcbY7SY8lTLIM2g+VntHg9ZN9blFzuXeeLxmL0Z3qMAGS6Y0mHi5kXjCB/8pSnThCWpJgMZhZz5nfod+p373fwd/F38nf0d/V393f5d/p3+3f8dwN4BHgFeAZ4B3gIeAp4C3gOeA94EHgTeBV4GXgbeB54IHgheCJ4JHgoeCp4K3gueC94MXgyeDN4NXg2eD14P3hBeEJ4Q3hEeEZ4SHhJeEp4S3hNeE94UXhTeFR4WHhZeFp4W3hceF54X3hgeGF4YnhjeGR4ZXhmeGd4aHhpeG94cHhxeHJ4c3h0eHV4dnh4eHl4enh7eH14fnh/eIB4gXiCeIN4OlcdXDhef5V/UKCAglNeZUV1MVUhUIWNhGKelB1nMlZub+JdNVSScGaPb2KkZKNje1+Ib/SQ44GwjxhcaGbxX4lsSJaBjWyIkWTwec5XWWoQYkhUWE4LeulghG/ai39iHpCLmuR5A1T0dQFjGVNgbN+PG19wmjuAf5+ITzpcZI3Ff6VlvXBFUbJRa4YHXaBbvWJskXR1DI4gegFheXvHTvh+hXcRTu2BHVL6UXFqqFOHjgSVz5bBbmSWWmmEeIV4hniIeIp4i3iPeJB4kniUeJV4lniZeJ14nnigeKJ4pHimeKh4qXiqeKt4rHiteK54r3i1eLZ4t3i4eLp4u3i8eL14v3jAeMJ4w3jEeMZ4x3jIeMx4zXjOeM940XjSeNN41njXeNh42njbeNx43XjeeN944HjheOJ443jkeOV45njneOl46njreO147njvePB48XjzePV49nj4ePl4+3j8eP14/nj/eAB5AnkDeQR5BnkHeQh5CXkKeQt5DHlAeKhQ13cQZOaJBFnjY91df3o9aSBPOYKYVTJOrnWXemJeil7vlRtSOVSKcHZjJJWCVyVmP2mHkQdV822vfiKIM2LwfrV1KIPBeMyWno9IYfd0zYtkazpSUI0ha2qAcYTxVgZTzk4bTtFRl3yLkQd8w09/juF7nHpnZBRdrFAGgQF2uXzsbeB/UWdYW/hby3iuZBNkqmMrYxmVLWS+j1R7KXZTYidZRlR5a6NQNGImXoZr4043jYuIhV8ukA15DnkPeRB5EXkSeRR5FXkWeRd5GHkZeRp5G3kceR15H3kgeSF5InkjeSV5JnkneSh5KXkqeSt5LHkteS55L3kweTF5MnkzeTV5Nnk3eTh5OXk9eT95QnlDeUR5RXlHeUp5S3lMeU15TnlPeVB5UXlSeVR5VXlYeVl5YXljeWR5ZnlpeWp5a3lseW55cHlxeXJ5c3l0eXV5dnl5eXt5fHl9eX55f3mCeYN5hnmHeYh5iXmLeYx5jXmOeZB5kXmSeSBgPYDFYjlOVVP4kLhjxoDmZS5sRk/uYOFt3os5X8uGU18hY1pRYYNjaABSY2NIjhJQm1x3efxbMFI7erxgU5DXdrdfl1+EdmyOb3B7dkl7qnfzUZOQJFhOT/Ru6o9MZRt7xHKkbd9/4Vq1YpVeMFeChCx7HV4fXxKQFH+gmIJjx26YeLlweFFbl6tXNXVDTzh1l17mYGBZwG2/a4l4/FPVlstRAVKJYwpUk5QDjMyNOXKfeHaH7Y8NjOBTk3mUeZV5lnmXeZh5mXmbeZx5nXmeeZ95oHmheaJ5o3mkeaV5pnmoeal5qnmreax5rXmuea95sHmxebJ5tHm1ebZ5t3m4ebx5v3nCecR5xXnHech5ynnMec55z3nQedN51HnWedd52Xnaedt53Hnded554HnheeJ55Xnoeep57HnuefF58nnzefR59Xn2efd5+Xn6efx5/nn/eQF6BHoFegd6CHoJegp6DHoPehB6EXoSehN6FXoWehh6GXobehx6AU7vdu5TiZR2mA6fLZWaW6KLIk4cTqxRY4TCYahSC2iXT2tgu1EebVxRlmKXZWGWRowXkNh1/ZBjd9JrinLscvuLNVh5d0yNXGdAlZqApl4hbpJZ73rtdzuVtWutZQ5/BlhRUR+W+VupWChUco5mZX+Y5FadlP52QZCHY8ZUGlk6WZtXso41Z/qNNYJBUvBgFVj+huhcRZ7ET52YuYslWnZghFN8Yk+QApF/mWlgDIA/UTOAFFx1mTFtjE4deh96IXoieiR6JXomeid6KHopeip6K3osei16LnovejB6MXoyejR6NXo2ejh6Ono+ekB6QXpCekN6RHpFekd6SHpJekp6S3pMek16TnpPelB6UnpTelR6VXpWelh6WXpaelt6XHpdel56X3pgemF6YnpjemR6ZXpmemd6aHppemp6a3psem16bnpvenF6cnpzenV6e3p8en16fnqCeoV6h3qJeop6i3qMeo56j3qQepN6lHqZepp6m3qeeqF6onowjdFTWn9PexBPT04AltVs0HPphQZeanX7fwpq/neSlEF+4VHmcM1T1I8DgymNr3JtmdtsSlezgrllqoA/YjKWqFn/Tr+Lun4+ZfKDXpdhVd6YpYAqU/2LIFS6gJ9euGw5jayCWpEpVBtsBlK3fl9XGnF+bIl8S1n9Tv9fJGGqfDBOAVyrZwKH8FwLlc6Yr3X9cCKQr1Edf72LSVnkUVtPJlQrWXdlpIB1W3ZiwmKQj0VeH2wmew9P2E8NZ6N6pHqneql6qnqreq56r3qwerF6snq0erV6tnq3erh6uXq6ert6vHq9er56wHrBesJ6w3rEesV6xnrHesh6yXrKesx6zXrOes960HrRetJ603rUetV613rYetp623rcet164XrieuR653roeul66nrreux67nrwevF68nrzevR69Xr2evd6+Hr7evx6/noAewF7AnsFewd7CXsMew17DnsQexJ7E3sWexd7GHsaexx7HXsfeyF7Insjeyd7KXste25tqm2PebGIF18rdZpihY/vT9yRp2UvgVGBnF5QgXSNb1KGiUuNDVmFUNhOHJY2cnmBH43MW6OLRJaHWRp/kFR2Vg5W5Ys5ZYJpmZTWdolucl4YdUZn0Wf/ep2Ado0fYcZ5YmVjjYhRGlKilDh/m4CyfpdcL25gZ9l7i3bYmo+BlH/VfB5kUJU/ekpU5VRMawFkCGI9nvOAmXVyUmmXW4Q8aOSGAZaUluyUKk4EVNl+OWjfjRWA9GaaXrl/L3swezJ7NHs1ezZ7N3s5ezt7PXs/e0B7QXtCe0N7RHtGe0h7SntNe057U3tVe1d7WXtce157X3the2N7ZHtle2Z7Z3toe2l7antre2x7bXtve3B7c3t0e3Z7eHt6e3x7fXt/e4F7gnuDe4R7hnuHe4h7iXuKe4t7jHuOe497kXuSe5N7lnuYe5l7mnube557n3uge6N7pHule657r3uwe7J7s3u1e7Z7t3u5e7p7u3u8e717vnu/e8B7wnvDe8R7wlc/gJdo5V07ZZ9SbWCan5tPrI5sUatbE1/pXV5s8WIhjXFRqZT+Up9s34LXcqJXhGctjR9ZnI/Hg5VUjXswT71sZFvRWROf5FPKhqiaN4yhgEVlfpj6VseWLlLcdFBS4VsCYwKJVk7QYipg+mhzUZhboFHCiaF7hplQf+9gTHAvjUlRf14bkHB0xIktV0V4Ul+fn/qVaI88m+GLeHZCaNxn6o01jT1Sio/abs1oBZXtkP1WnGf5iMePyFTFe8h7yXvKe8t7zXvOe8970HvSe9R71XvWe9d72Hvbe9x73nvfe+B74nvje+R753voe+l763vse+1773vwe/J783v0e/V79nv4e/l7+nv7e/17/3sAfAF8AnwDfAR8BXwGfAh8CXwKfA18DnwQfBF8EnwTfBR8FXwXfBh8GXwafBt8HHwdfB58IHwhfCJ8I3wkfCV8KHwpfCt8LHwtfC58L3wwfDF8MnwzfDR8NXw2fDd8OXw6fDt8PHw9fD58Qny4mmlbd20mbKVOs1uHmmORqGGvkOmXK1S1bdJb/VGKVVV/8H+8ZE1j8WW+YY1gCnFXbElsL1ltZyqC1ViOVmqM62vdkH1ZF4D3U2ltdVSdVXeDz4M4aL55jFRVTwhU0naJjAKWs2y4bWuNEIlknjqNP1bRntV1iF/gcmhg/FSoTipqYYhSYHCPxFTYcHmGP54qbY9bGF+ifolVr080czxUmlMZUA5UfFROTv1fWnT2WGuE4YB0h9ByynxWbkN8RHxFfEZ8R3xIfEl8SnxLfEx8TnxPfFB8UXxSfFN8VHxVfFZ8V3xYfFl8WnxbfFx8XXxefF98YHxhfGJ8Y3xkfGV8ZnxnfGh8aXxqfGt8bHxtfG58b3xwfHF8cnx1fHZ8d3x4fHl8enx+fH98gHyBfIJ8g3yEfIV8hnyHfIh8inyLfIx8jXyOfI98kHyTfJR8lnyZfJp8m3ygfKF8o3ymfKd8qHypfKt8rHytfK98sHy0fLV8tny3fLh8uny7fCdfToYsVaRikk6qbDdisYLXVE5TPnPRbjt1ElIWU92L0GmKXwBg7m1PVyJrr3NTaNiPE39iY6NgJFXqdWKMFXGjbaZbe15Sg0xhxJ76eFeHJ3yHdvBR9mBMcUNmTF5NYA6McHAlY4mPvV9iYNSG3lbBa5RgZ2FJU+BgZmY/jf15Gk/pcEdss4vyi9h+ZIMPZlpaQptRbfdtQYw7bRlPa3C3gxZi0WANlyeNeHn7UT5X+lc6Z3h1PXrveZV7v3zAfMJ8w3zEfMZ8yXzLfM58z3zQfNF80nzTfNR82HzafNt83XzefOF84nzjfOR85XzmfOd86XzqfOt87HztfO588HzxfPJ883z0fPV89nz3fPl8+nz8fP18/nz/fAB9AX0CfQN9BH0FfQZ9B30IfQl9C30MfQ19Dn0PfRB9EX0SfRN9FH0VfRZ9F30YfRl9Gn0bfRx9HX0efR99IX0jfSR9JX0mfSh9KX0qfSx9LX0ufTB9MX0yfTN9NH01fTZ9jIBlmfmPwG+liyGe7Fnpfgl/CVSBZ9hokY9NfMaWylMlYL51cmxzU8lap34kY+BRCoHxXd+EgGKAUWNbDk9teUJSuGBObcRbwluhi7CL4mXMX0WWk1nnfqp+CVa3ZzlZc0+2W6BSWoOKmD6NMnW+lEdQPHr3TrZnfprBWnxr0XZaVxZcOnv0lU5xfFGpgHCCeFkEfyeDwGjsZ7F4d3jjYmFjgHvtT2pSz1FQg9tpdJL1jTGNwYkula179k43fTh9OX06fTt9PH09fT59P31AfUF9Qn1DfUR9RX1GfUd9SH1JfUp9S31MfU19Tn1PfVB9UX1SfVN9VH1VfVZ9V31YfVl9Wn1bfVx9XX1efV99YH1hfWJ9Y31kfWV9Zn1nfWh9aX1qfWt9bH1tfW99cH1xfXJ9c310fXV9dn14fXl9en17fXx9fX1+fX99gH2BfYJ9g32EfYV9hn2HfYh9iX2KfYt9jH2NfY59j32QfZF9kn2TfZR9lX2WfZd9mH1lUDCCUVJvmRBuhW6nbfpe9VDcWQZcRm1fbIZ1i4RoaFZZsosgU3GRTZZJhRJpAXkmcfaApE7KkEdthJoHWrxWBWTwlOt3pU8ageFy0ol6mTR/3n5/UllldZF/j4OP61OWeu1jpWOGdvh5V4g2lipiq1KCglRocGd3Y2t37XoBbdN+44nQWRJiyYWlgkx1H1DLTqV164tKXP5dS3ukZdGRyk4lbV+JJ30mlcVOKIzbj3OXS2aBedGP7HB4bZl9mn2bfZx9nX2efZ99oH2hfaJ9o32kfaV9p32ofal9qn2rfax9rX2vfbB9sX2yfbN9tH21fbZ9t324fbl9un27fbx9vX2+fb99wH3BfcJ9w33EfcV9xn3Hfch9yX3Kfct9zH3Nfc59z33QfdF90n3TfdR91X3Wfdd92H3Zfdp9233cfd193n3ffeB94X3ifeN95H3lfeZ9533ofel96n3rfex97X3ufe998H3xffJ98330ffV99n33ffh9+X36fT1cslJGg2JRDoNbd3ZmuJysTspgvnyzfM9+lU5mi29miJhZl4NYbGVclYRfyXVWl9963nrAUa9wmHrqY3Z6oH6Wc+2XRU54cF1OUpGpU1Fl52X8gQWCjlQxXJp1oJfYYtlyvXVFXHmayoNAXIBU6Xc+Tq5sWoDSYm5j6F13Ud2NHo4vlfFP5VPnYKxwZ1JQY0OeH1omUDd3d1PifoVkK2WJYphjFFA1csmJs1HAi91+R1fMg6eUm1EbVPtc+338ff19/n3/fQB+AX4CfgN+BH4FfgZ+B34Ifgl+Cn4Lfgx+DX4Ofg9+EH4RfhJ+E34UfhV+Fn4Xfhh+GX4afht+HH4dfh5+H34gfiF+In4jfiR+JX4mfid+KH4pfip+K34sfi1+Ln4vfjB+MX4yfjN+NH41fjZ+N344fjl+On48fj1+Pn4/fkB+Qn5DfkR+RX5Gfkh+SX5Kfkt+TH5Nfk5+T35QflF+Un5TflR+VX5Wfld+WH5Zflp+W35cfl1+yk/jelpt4ZCPmoBVllRhU69UAF/pY3dp71FoYQpSKljYUk5XDXgLd7ded2HgfFtil2KiTpVwA4D3YuRwYJd3V9uC72f1aNV4l5jRefNYs1TvUzRuS1E7UqJb/ouvgENVpldzYFFXLVR6elBgVFunY6Bi41NjYsdbr2ftVJ965oJ3kZNe5Ig4Wa5XDmPoje+AV1d3e6lP61+9Wz5rIVNQe8JyRmj/dzZ392W1UY9O1Ha/XKV6dYROWUGbgFBefl9+YH5hfmJ+Y35kfmV+Zn5nfmh+aX5qfmt+bH5tfm5+b35wfnF+cn5zfnR+dX52fnd+eH55fnp+e358fn1+fn5/foB+gX6DfoR+hX6Gfod+iH6Jfop+i36Mfo1+jn6PfpB+kX6SfpN+lH6VfpZ+l36Yfpl+mn6cfp1+nn6ufrR+u368ftZ+5H7sfvl+Cn8Qfx5/N385fzt/PH89fz5/P39Af0F/Q39Gf0d/SH9Jf0p/S39Mf01/Tn9Pf1J/U3+ImSdhg25kVwZmRmPwVuxiaWLTXhSWg1fJYodVIYdKgaOPZlWxg2VnVo3dhGpaD2jmYu57EZZwUZxvMIz9Y8iJ0mEGf8Jw5W4FdJRp/HLKXs6QF2dqbV5js1JicgGAbE/lWWqR2XCdbdJSUE73lm2VfoXKeC99IVGSV8Jki4B7fOps8WheabdRmFOoaIFyzp7xe/hyu3kTbwZ0TmfMkaScPHmJg1SDD1QXaD1OiVOxUj54hlMpUohQi0/QT1Z/WX9bf1x/XX9ef2B/Y39kf2V/Zn9nf2t/bH9tf29/cH9zf3V/dn93f3h/en97f3x/fX9/f4B/gn+Df4R/hX+Gf4d/iH+Jf4t/jX+Pf5B/kX+Sf5N/lX+Wf5d/mH+Zf5t/nH+gf6J/o3+lf6Z/qH+pf6p/q3+sf61/rn+xf7N/tH+1f7Z/t3+6f7t/vn/Af8J/w3/Ef8Z/x3/If8l/y3/Nf89/0H/Rf9J/03/Wf9d/2X/af9t/3H/df95/4n/jf+J1y3qSfKVstpabUoN06VTpT1SAsoPej3CVyV4cYJ9tGF5bZTiB/pRLYLxww36ufMlRgWixfG+CJE6Gj8+RfmauTgWMqWRKgNpQl3XOceVbvY9mb4ZOgmRjldZemWUXUsKIyHCjUg5zM3SXZ/d4Fpc0TruQ3pzLbdtRQY0dVM5isnPxg/aWhJ/DlDZPmn/MUXVwdZatXIaY5lPkTpxuCXS0aWt4j5lZdRhSJHZBbfNnbVGZn0uAmVQ8e7965H/nf+h/6n/rf+x/7X/vf/J/9H/1f/Z/93/4f/l/+n/9f/5//38CgAeACIAJgAqADoAPgBGAE4AagBuAHYAegB+AIYAjgCSAK4AsgC2ALoAvgDCAMoA0gDmAOoA8gD6AQIBBgESARYBHgEiASYBOgE+AUIBRgFOAVYBWgFeAWYBbgFyAXYBegF+AYIBhgGKAY4BkgGWAZoBngGiAa4BsgG2AboBvgHCAcoBzgHSAdYB2gHeAeIB5gHqAe4B8gH2AhpaEV+JiR5Z8aQRaAmTTew9vS5amgmJThZiQXolws2NkU0+GgZyTnox4MpfvjUKNf55eb4R5VV9Gli5idJoVVN2Uo0/FZWVcYVwVf1GGL2yLX4dz5G7/fuZcG2NqW+ZudVNxTqBjZXWhYm6PJk/RTqZstn66ix2EuodXfzuQI5Wpe6Ga+Ig9hBtthprcfohZu56bcwF4goZsmoKaG1YXVMtXcE6mnlZTyI8JgZJ3kpnuhuFuE4X8ZmJhK29+gIGAgoCFgIiAioCNgI6Aj4CQgJGAkoCUgJWAl4CZgJ6Ao4CmgKeAqICsgLCAs4C1gLaAuIC5gLuAxYDHgMiAyYDKgMuAz4DQgNGA0oDTgNSA1YDYgN+A4IDigOOA5oDugPWA94D5gPuA/oD/gACBAYEDgQSBBYEHgQiBC4EMgRWBF4EZgRuBHIEdgR+BIIEhgSKBI4EkgSWBJoEngSiBKYEqgSuBLYEugTCBM4E0gTWBN4E5gTqBO4E8gT2BP4EpjJKCK4PydhNs2V+9gytzBYMaldtr23fGlG9TAoOSUT1ejIw4jUhOq3OaZ4VodpEJl2RxoWwJd5JaQZXPa45/J2bQW7lZmlrolfeV7E4MhJmErGrfdjCVG3OmaF9bL3eakWGX3Hz3jxyMJV9zfNh5xYnMbByHxltCXsloIHf1fpVRTVHJUilaBX9il9eCz2OEd9CF0nk6bplemVkRhW1wEWy/Yr92T2WvYP2VDmafhyOe7ZQNVH1ULIx4ZECBQYFCgUOBRIFFgUeBSYFNgU6BT4FSgVaBV4FYgVuBXIFdgV6BX4FhgWKBY4FkgWaBaIFqgWuBbIFvgXKBc4F1gXaBd4F4gYGBg4GEgYWBhoGHgYmBi4GMgY2BjoGQgZKBk4GUgZWBloGXgZmBmoGegZ+BoIGhgaKBpIGlgaeBqYGrgayBrYGuga+BsIGxgbKBtIG1gbaBt4G4gbmBvIG9gb6Bv4HEgcWBx4HIgcmBy4HNgc6Bz4HQgdGB0oHTgXlkEYYhapyB6HhpZFSbuWIrZ6uDqFjYnqtsIG/eW0yWC4xfctBnx2JhcqlOxlnNa5NYrmZVXt9SVWEoZ+52ZndnckZ6/2LqVFBUoJSjkBxas34WbENOdlkQgEhZV1M3db6WylYgYxGBfGD5ldZtYlSBmYVR6Vr9gK5ZE5cqUOVsPFzfYmBPP1N7gQaQum4rhchidF6+eLVke2P1Xxhaf5Efnj9cT2NCgH1bblVKlU2VhW2oYOBn3nLdUYFb1IHVgdaB14HYgdmB2oHbgdyB3YHegd+B4IHhgeKB5IHlgeaB6IHpgeuB7oHvgfCB8YHygfWB9oH3gfiB+YH6gf2B/4EDggeCCIIJggqCC4IOgg+CEYITghWCFoIXghiCGYIagh2CIIIkgiWCJoIngimCLoIygjqCPII9gj+CQIJBgkKCQ4JFgkaCSIJKgkyCTYJOglCCUYJSglOCVIJVglaCV4JZgluCXIJdgl6CYIJhgmKCY4JkgmWCZoJngmmC52LebFtybWKulL1+E4FTbZxRBF90WapSEmBzWZZmUIafdSpj5mHvfPqL5lQnayWetGvVhVVUdlCkbGpVtI0schVeFWA2dM1ikmNMcphfQ24+bQBlWG/YdtB4/HZUdSRS21NTTp5ewWUqgNaAm2KGVChSrnCNiNGN4Wx4VNqA+Vf0iFSNapZNkWlPm2y3VcZ2MHioYvlwjm9tX+yE2mh8ePd7qIELZ0+eZ2OweG9XEng5l3liq2KIUjV012tqgmuCbIJtgnGCdYJ2gneCeIJ7gnyCgIKBgoOChYKGgoeCiYKMgpCCk4KUgpWCloKagpuCnoKggqKCo4KngrKCtYK2grqCu4K8gr+CwILCgsOCxYLGgsmC0ILWgtmC2oLdguKC54LogumC6oLsgu2C7oLwgvKC84L1gvaC+IL6gvyC/YL+gv+CAIMKgwuDDYMQgxKDE4MWgxiDGYMdgx6DH4MggyGDIoMjgySDJYMmgymDKoMugzCDMoM3gzuDPYNkVT6BsnWudjlT3nX7UEFcbIvHe09QR3KXmtiYAm/idGh5h2Sld/xikZgrjcFUWIBSTmpX+YINhHNe7VH2dMSLT1xhV/xsh5hGWjR4RJvrj5V8VlJRYvqUxk6Gg2GE6YOyhNRXNGcDV25mZm0xjN1mEXAfZzprFmgaYrtZA07EUQZv0mePbHZRy2hHWWdrZnUOXRCBUJ/XZUh5QXmRmneNglxeTgFPL1RRWQx4aFYUbMSPA199bONsq4uQYz6DP4NBg0KDRINFg0iDSoNLg0yDTYNOg1ODVYNWg1eDWINZg12DYoNwg3GDcoNzg3SDdYN2g3mDeoN+g3+DgIOBg4KDg4OEg4eDiIOKg4uDjIONg4+DkIORg5SDlYOWg5eDmYOag52Dn4Ohg6KDo4Okg6WDpoOng6yDrYOug6+DtYO7g76Dv4PCg8ODxIPGg8iDyYPLg82DzoPQg9GD0oPTg9WD14PZg9qD24Peg+KD44Pkg+aD54Pog+uD7IPtg3BgPW11cmZijpTFlENTwY9+e99OJox+TtSesZSzlE1SXG9jkEVtNIwRWExdIGtJa6pnW1RUgYx/mVg3hTpfomJHajmVcmWEYGVop3dUTqhP512Yl6xk2H/tXM9PjXoHUgSDFE4vYIN6ppS1T7JO5nk0dORSuYLSZL153VuBbFKXe48ibD5Qf1MFbs5kdGYwbMVgd5j3i4ZePHR3est5GE6xkAN0QmzaVkuRxWyLjTpTxobyZq+OSFxxmiBu7oPvg/OD9IP1g/aD94P6g/uD/IP+g/+DAIQChAWEB4QIhAmECoQQhBKEE4QUhBWEFoQXhBmEGoQbhB6EH4QghCGEIoQjhCmEKoQrhCyELYQuhC+EMIQyhDOENIQ1hDaEN4Q5hDqEO4Q+hD+EQIRBhEKEQ4REhEWER4RIhEmESoRLhEyETYROhE+EUIRShFOEVIRVhFaEWIRdhF6EX4RghGKEZIRlhGaEZ4RohGqEboRvhHCEcoR0hHeEeYR7hHyE1lM2Woufo427UwhXp5hDZ5uRyWxoUcp182KscjhSnVI6f5RwOHZ0U0qet2lueMCW2YikfzZxw3GJUdNn5HTkWBhlt1api3aZcGLVfvlg7XDsWMFOuk7NX+eX+06kiwNSilmrflRizU7lZQ5iOIPJhGODjYeUcbZuuVvSfpdRyWPUZ4mAOYMViBJReluCWbGPc05dbGVRJYlvjy6WSoVedBCV8JWmbeWCMV+SZBJtKIRugcOcXlhbjQlOwVN9hH6Ef4SAhIGEg4SEhIWEhoSKhI2Ej4SQhJGEkoSThJSElYSWhJiEmoSbhJ2EnoSfhKCEooSjhKSEpYSmhKeEqISphKqEq4SshK2EroSwhLGEs4S1hLaEt4S7hLyEvoTAhMKEw4TFhMaEx4TIhMuEzITOhM+E0oTUhNWE14TYhNmE2oTbhNyE3oThhOKE5ITnhOiE6YTqhOuE7YTuhO+E8YTyhPOE9IT1hPaE94T4hPmE+oT7hP2E/oQAhQGFAoUeT2NlUWjTVSdOFGSammtiwlpfdHKCqW3uaOdQjoMCeEBnOVKZbLF+u1BlVV5xW3tSZspz64JJZ3FcIFJ9cWuI6pVVlsVkYY2zgYRVVWxHYi5/klgkT0ZVT41MZgpOGlzziKJoTmMNeudwjYL6UvaXEVzoVLWQzX5iWUqNx4YMgg2CZo1EZARcUWGJbT55vos3eDN1e1Q4T6uO8W0gWsV+XnmIbKFbdloadb6ATmEXbvBYH3UldXJyR1PzfgOFBIUFhQaFB4UIhQmFCoULhQ2FDoUPhRCFEoUUhRWFFoUYhRmFG4UchR2FHoUghSKFI4UkhSWFJoUnhSiFKYUqhS2FLoUvhTCFMYUyhTOFNIU1hTaFPoU/hUCFQYVChUSFRYVGhUeFS4VMhU2FToVPhVCFUYVShVOFVIVVhVeFWIVahVuFXIVdhV+FYIVhhWKFY4VlhWaFZ4VphWqFa4VshW2FboVvhXCFcYVzhXWFdoV3hXiFfIV9hX+FgIWBhQF323ZpUtyAI1cIXjFZ7nK9ZX9u14s4XHGGQVPzd/5i9mXATt+YgIaeW8aL8lPid39PTlx2mstZD186eetYFk7/Z4tO7WKTih2Qv1IvZtxVbFYCkNVOjU/KkXCZD2wCXkNgpFvGidWLNmVLYpaZiFv/W4hjLlXXUyZ2fVEshaJns2iKa5Jik4/UUxKC0W2PdWZOTo1wW59xr4WRZtlmcn8Ah82eIJ9eXC9n8I8RaF9nDWLWeoVYtl5wZTFvgoWDhYaFiIWJhYqFi4WMhY2FjoWQhZGFkoWThZSFlYWWhZeFmIWZhZqFnYWehZ+FoIWhhaKFo4WlhaaFp4WphauFrIWthbGFsoWzhbSFtYW2hbiFuoW7hbyFvYW+hb+FwIXChcOFxIXFhcaFx4XIhcqFy4XMhc2FzoXRhdKF1IXWhdeF2IXZhdqF24Xdhd6F34XgheGF4oXjheWF5oXnheiF6oXrheyF7YXuhe+F8IXxhfKF84X0hfWF9oX3hfiFVWA3Ug2AVGRwiCl1BV4TaPRiHJfMUz1yAYw0bGF3DnouVKx3epgcgvSLVXgUZ8Fwr2WVZDZWHWDBefhTHU57a4aA+lvjVdtWOk88T3KZ811+ZziAAmCCmAGQi1u8i/WLHGRYgt5k/VXPgmWR108gfR+Qn3zzUFFYr26/W8mLg4B4kZyEl3t9houWj5blftOajniBXFd6QpCnll95WVtfYwt70YStaAZVKX8QdCJ9AZVAYkxY1k6DW3lZVFj5hfqF/IX9hf6FAIYBhgKGA4YEhgaGB4YIhgmGCoYLhgyGDYYOhg+GEIYShhOGFIYVhheGGIYZhhqGG4Ychh2GHoYfhiCGIYYihiOGJIYlhiaGKIYqhiuGLIYthi6GL4YwhjGGMoYzhjSGNYY2hjeGOYY6hjuGPYY+hj+GQIZBhkKGQ4ZEhkWGRoZHhkiGSYZKhkuGTIZShlOGVYZWhleGWIZZhluGXIZdhl+GYIZhhmOGZIZlhmaGZ4ZohmmGaoZtcx5jS44Pjs6A1IKsYvBT8GxekSpZAWBwbE1XSmQqjSt26W5bV4Bq8HVtby2MCIxmV+9rkoizeKJj+VOtcGRsWFgqZAJY4GibgRBV1nwYULqOzG2fjetwj2ObbdRu5n4EhENoA5DYbXaWqItXWXly5IV+gbx1ioqvaFRSIo4RldBjmJhEjnxVU0//Zo9W1WCVbUNSSVwpWftta1gwdRx1bGAUgkaBEWNhZ+KPOnfzjTSNwZQWXoVTLFTDcG2Gb4ZwhnKGc4Z0hnWGdoZ3hniGg4aEhoWGhoaHhoiGiYaOho+GkIaRhpKGlIaWhpeGmIaZhpqGm4aehp+GoIahhqKGpYamhquGrYauhrKGs4a3hriGuYa7hryGvYa+hr+GwYbChsOGxYbIhsyGzYbShtOG1YbWhteG2obcht2G4IbhhuKG44blhuaG54bohuqG64bshu+G9Yb2hveG+ob7hvyG/Yb/hgGHBIcFhwaHC4cMhw6HD4cQhxGHFIcWh0Bs915cUK1OrV46Y0eCGpBQaG6Rs3cMVNyUZF/lenZoRWNSe99+23V3UJViNFkPkPhRw3mBev5Wkl8UkIJtYFwfVxBUVFFNbuJWqGOTmH+BFYcqiQCQHlRvXMCB1mJYYjGBNZ5Alm6afJotaaVZ02I+VRZjx1TZhjxtA1rmdJyIamsWWUyML19+bqlzfZg4TvdwjFuXeD1jWmaWdstgm1tJWgdOVYFqbItzoU6JZ1F/gF/6ZRtn2F+EWQFaGYcbhx2HH4cghySHJocnhyiHKocrhyyHLYcvhzCHMoczhzWHNoc4hzmHOoc8hz2HQIdBh0KHQ4dEh0WHRodKh0uHTYdPh1CHUYdSh1SHVYdWh1iHWodbh1yHXYdeh1+HYYdih2aHZ4doh2mHaodrh2yHbYdvh3GHcodzh3WHd4d4h3mHeod/h4CHgYeEh4aHh4eJh4qHjIeOh4+HkIeRh5KHlIeVh5aHmIeZh5qHm4ech52Hnoegh6GHooejh6SHzV2uX3FT5pfdj0Vo9FYvVd9gOk5Nb/R+x4IOhNRZH08qTz5crH4qZxqFc1RPdcOAglVPm01PLW4TjAlccGFrUx92KW6Khodl+5W5fjtUM3oKfe6V4VXBf+50HWMXh6FtnXoRYqFlZ1PhY4Ns611cVKiUTE5hbOyLS1zgZZyCp2g+VDRUy2tma5ROQmNIUx6CDU+uT15XCmL+lmRmaXL/UqFSn2DvixRmmXGQZ3+JUnj9d3BmO1Y4VCGVenKlh6aHp4eph6qHroewh7GHsoe0h7aHt4e4h7mHu4e8h76Hv4fBh8KHw4fEh8WHx4fIh8mHzIfNh86Hz4fQh9SH1YfWh9eH2IfZh9qH3Ifdh96H34fhh+KH44fkh+aH54foh+mH64fsh+2H74fwh/GH8ofzh/SH9Yf2h/eH+If6h/uH/If9h/+HAIgBiAKIBIgFiAaIB4gIiAmIC4gMiA2IDogPiBCIEYgSiBSIF4gYiBmIGogciB2IHogfiCCII4gAem9gDF6JYJ2BFVncYIRx73CqblBsgHKEaq2ILV5gTrNanFXjlBdt+3yZlg9ixn6Od36GI1Mel5aPh2bhXKBP7XILTqZTD1kTVIBjKJVIUdlOnJykfrhUJI1UiDeC8pWObSZfzFo+ZmmWsHMuc79TeoGFmaF/qlt3llCWv374dqJTdpWZmbF7RIlYbmFO1H9leeaL82DNVKtOeZj3XWFqz1ARVGGMJ4RdeASXSlLuVKNWAJWIbbVbxm1TZiSIJYgmiCeIKIgpiCqIK4gsiC2ILogviDCIMYgziDSINYg2iDeIOIg6iDuIPYg+iD+IQYhCiEOIRohHiEiISYhKiEuITohPiFCIUYhSiFOIVYhWiFiIWohbiFyIXYheiF+IYIhmiGeIaohtiG+IcYhziHSIdYh2iHiIeYh6iHuIfIiAiIOIhoiHiImIioiMiI6Ij4iQiJGIk4iUiJWIl4iYiJmImoibiJ2InoifiKCIoYijiKWIpoiniKiIqYiqiA9cXVshaJaAeFURe0hlVGmbTkdrToeLl09TH2M6ZKqQnGXBgBCMmVGwaHhT+YfIYcRs+2wijFFcqoWvggyVI2ubj7Bl+1/DX+FPRYgfZmWBKXP6YHRREVKLV2JfopBMiJKReF5PZydg01lEUfZR+IAIU3lsxJaKcRFP7k+efz1nxVUIlcB5lojjfp9YDGIAl1qGGFZ7mJBfuIvEhFeR2VPtZY9eXHVkYG59f1rqfu1+aY+nVaNbrGDLZYRzrIiuiK+IsIiyiLOItIi1iLaIuIi5iLqIu4i9iL6Iv4jAiMOIxIjHiMiIyojLiMyIzYjPiNCI0YjTiNaI14jaiNuI3IjdiN6I4IjhiOaI54jpiOqI64jsiO2I7ojviPKI9Yj2iPeI+oj7iP2I/4gAiQGJA4kEiQWJBokHiQiJCYkLiQyJDYkOiQ+JEYkUiRWJFokXiRiJHIkdiR6JH4kgiSKJI4kkiSaJJ4koiSmJLIktiS6JL4kxiTKJM4k1iTeJCZBjdil32n50l5uFZlt0euqWQIjLUo9xql/sZeKL+1tvmuFdiWtbbK2Lr4sKkMWPi1O8YiaeLZ5AVCtOvYJZcpyGFl1ZiK9txZbRVJpOtosJcb1UCZbfcPlt0HYlThR4EoepXPZeAIqcmA6WjnC/bERZqWM8d02IFG9zgjBY1XGMUxp4wZYBVWZfMHG0WxqMjJqDay5ZL57neWhnbGJvT6F1in8LbTOWJ2zwTtJ1e1E3aD5vgJBwgZZZdnQ4iTmJOok7iTyJPYk+iT+JQIlCiUOJRYlGiUeJSIlJiUqJS4lMiU2JTolPiVCJUYlSiVOJVIlViVaJV4lYiVmJWolbiVyJXYlgiWGJYoljiWSJZYlniWiJaYlqiWuJbIltiW6Jb4lwiXGJcolziXSJdYl2iXeJeIl5iXqJfIl9iX6JgImCiYSJhYmHiYiJiYmKiYuJjImNiY6Jj4mQiZGJkomTiZSJlYmWiZeJmImZiZqJm4mciZ2JnomfiaCJoYlHZCdcZZCReiOM2lmsVACCb4OBiQCAMGlOVjaAN3LOkbZRX051mJZjGk72U/NmS4EcWbJtAE75WDtT1mPxlJ1PCk9jiJCYN1lXkPt56k7wgJF1gmycW+hZXV8FaYGGGlDyXVlO43flTnqCkWITZpGQeVy/TnlfxoE4kISAq3WmTtSID2HFa8ZfSU7KdqJu44uuiwqM0YsCX/x/zH/OfjWDa4PgVrdr85c0lvtZH1T2lOttxVtumTlcFV+QlqKJo4mkiaWJpomniaiJqYmqiauJrImtia6Jr4mwibGJsomzibSJtYm2ibeJuIm5ibqJu4m8ib2Jvom/icCJw4nNidOJ1InVideJ2InZiduJ3YnfieCJ4YniieSJ54noiemJ6onsie2J7onwifGJ8on0ifWJ9on3ifiJ+Yn6ifuJ/In9if6J/4kBigKKA4oEigWKBooIigmKCooLigyKDYoOig+KEIoRihKKE4oUihWKFooXihiKGYoaihuKHIodinBT8YIxanRacJ6UXih/uYMkhCWEZ4NHh86PYo3IdnFflphseCBm31TlYmNPw4HIdbhezZYKjvmGj1TzbIxtOGx/YMdSKHV9XhhPoGDnXyRcMXWukMCUuXK5bDhuSZEJZ8tT81NRT8mR8YvIU3xewo/kbY5OwnaGaV6GGmEGgllP3k8+kHycCWEdbhRuhZaITjFa6JYOTn9cuXmHW+2LvX+Jc99Xi4LBkAFUR5C7VepcoV8IYTJr8XKygImKHoofiiCKIYoiiiOKJIoliiaKJ4ooiimKKooriiyKLYouii+KMIoxijKKM4o0ijWKNoo3ijiKOYo6ijuKPIo9ij+KQIpBikKKQ4pEikWKRopHikmKSopLikyKTYpOik+KUIpRilKKU4pUilWKVopXiliKWYpailuKXIpdil6KX4pgimGKYopjimSKZYpmimeKaIppimqKa4psim2KbopvinCKcYpyinOKdIp1inaKd4p4inqKe4p8in2Kfop/ioCKdG3TW9WIhJhrjG2aM54KbqRRQ1GjV4GIn1P0Y5WP7VZYVAZXP3OQbhh/3I/Rgj9hKGBilvBmpn6KjcONpZSzXKR8CGemYAWWGICRTueQAFNolkFR0I90hV2RVWb1l1VbHVM4eEJnPWjJVH5wsFt9j41RKFexVBJlgmZejUOND4FshG2Q33z/UfuFo2fpZaFvpIaBjmpWIJCCdnZw5XEjjeliGVL9bDyNDmCeWI5h/mZgjU5is1Ujbi1nZ4+BioKKg4qEioWKhoqHioiKi4qMio2KjoqPipCKkYqSipSKlYqWipeKmIqZipqKm4qcip2KnoqfiqCKoYqiiqOKpIqliqaKp4qoiqmKqoqriqyKrYquiq+KsIqxirKKs4q0irWKtoq3iriKuYq6iruKvIq9ir6Kv4rAisGKworDisSKxYrGiseKyIrJisqKy4rMis2KzorPitCK0YrSitOK1IrVitaK14rYitmK2orbityK3Yreit+K4IrhiuKK44rhlPiVKHcFaKhpi1RNTrhwyItYZItlhVuEejpQ6Fu7d+FreYqYfL5sz3apZZePLV1VXDiGCGhgUxhi2Xpbbv1+H2rgenBfM28gX4xjqG1WZwhOEF4mjddOwIA0dpyW22ItZn5ivGx1jWdxaX9GUYeA7FNukJhi8lTwhpmPBYAXlReF2Y9Zbc1zn2UfdwR1J3j7gR6NiJSmT5VnuXXKiweXL2NHlTWWuIQjY0F3gV/wcolOFGB0Ze9iY2s/ZeSK5YrmiueK6IrpiuqK64rsiu2K7orvivCK8YryivOK9Ir1ivaK94r4ivmK+or7ivyK/Yr+iv+KAIsBiwKLA4sEiwWLBosIiwmLCosLiwyLDYsOiw+LEIsRixKLE4sUixWLFosXixiLGYsaixuLHIsdix6LH4sgiyGLIosjiySLJYsniyiLKYsqiyuLLIstiy6LL4swizGLMoszizSLNYs2izeLOIs5izqLO4s8iz2LPos/i0CLQYtCi0OLRItFiydex3XRkMGLnYKdZy9lMVQYh+V3ooACgUFsS07HfkyA9HYNaZZrZ2I8UIRPQFcHY2Jrvo3qU+hluH7XXxpjt2PzgfSBbn8cXtlcNlJ6Zul5GnoojZlw1HXebrtsknotTsV24F+flHeIyH7Neb+AzZHyThdPH4JoVN5dMm3Mi6V8dI+YgBpeklSxdplbPGakmuBzKmjbhjFnKnP4i9uLEJD5ettwbnHEYql3MVY7TleE8WepUsCGLo34lFF7RotHi0iLSYtKi0uLTItNi06LT4tQi1GLUotTi1SLVYtWi1eLWItZi1qLW4tci12LXotfi2CLYYtii2OLZItli2eLaItpi2qLa4tti26Lb4twi3GLcotzi3SLdYt2i3eLeIt5i3qLe4t8i32Lfot/i4CLgYuCi4OLhIuFi4aLh4uIi4mLiouLi4yLjYuOi4+LkIuRi5KLk4uUi5WLlouXi5iLmYuai5uLnIudi56Ln4usi7GLu4vHi9CL6osJjB6MT0/obF15e5qTYipy/WITThZ4bI+wZFqNxntpaIRexYiGWZ5k7li2cg5pJZX9j1iNYFcAfwaMxlFJY9liU1NMaCJ0AYNMkURVQHd8cEpteVGoVESN/1nLbsRtXFsrfdROfXzTblBb6oENbldbA5vVaCqOl1v8fjtgtX65kHCNT1nNY995s41SU89lVnnFizuWxH67lIJ+NFaJkQBnan8KXHWQKGbmXVBP3mdaUFxPUFenXhDoEegS6BPoFOg4jDmMOow7jDyMPYw+jD+MQIxCjEOMRIxFjEiMSoxLjE2MToxPjFCMUYxSjFOMVIxWjFeMWIxZjFuMXIxdjF6MX4xgjGOMZIxljGaMZ4xojGmMbIxtjG6Mb4xwjHGMcox0jHWMdox3jHuMfIx9jH6Mf4yAjIGMg4yEjIaMh4yIjIuMjYyOjI+MkIyRjJKMk4yVjJaMl4yZjJqMm4ycjJ2MnoyfjKCMoYyijKOMpIyljKaMp4yojKmMqoyrjKyMrYyNTgxOQFEQTv9eRVMVTphOHk4ym2xbaVYoTrp5P04VU0dOLVk7cm5TEGzfVuSAl5nTa353F582Tp9OEJ9cTmlOk06IgltbbFUPVsROjVOdU6NTpVOuU2WXXY0aU/VTJlMuUz5TXI1mU2NTAlIIUg5SLVIzUj9SQFJMUl5SYVJcUq+EfVKCUoFSkFKTUoJRVH+7TsNOyU7CTuhO4U7rTt5OG0/zTiJPZE/1TiVPJ08JTytPXk9nTzhlWk9dT66Mr4ywjLGMsoyzjLSMtYy2jLeMuIy5jLqMu4y8jL2Mvoy/jMCMwYzCjMOMxIzFjMaMx4zIjMmMyozLjMyMzYzOjM+M0IzRjNKM04zUjNWM1ozXjNiM2YzajNuM3IzdjN6M34zgjOGM4ozjjOSM5YzmjOeM6IzpjOqM64zsjO2M7ozvjPCM8YzyjPOM9Iz1jPaM94z4jPmM+oz7jPyM/Yz+jP+MAI0BjQKNA40EjQWNBo0HjQiNCY0KjQuNDI0NjV9PV08yTz1Pdk90T5FPiU+DT49Pfk97T6pPfE+sT5RP5k/oT+pPxU/aT+NP3E/RT99P+E8pUExQ808sUA9QLlAtUP5PHFAMUCVQKFB+UENQVVBIUE5QbFB7UKVQp1CpULpQ1lAGUe1Q7FDmUO5QB1ELUd1OPWxYT2VPzk+gn0ZsdHxuUf1dyZ6YmYFRFFn5Ug1TB4oQU+tRGVlVUaBOVlGzTm6IpIi1ThSB0oiAeTRbA4i4f6tRsVG9UbxRDo0PjRCNEY0SjRONFI0VjRaNF40YjRmNGo0bjRyNII1RjVKNV41fjWWNaI1pjWqNbI1ujW+NcY1yjXiNeY16jXuNfI19jX6Nf42AjYKNg42GjYeNiI2JjYyNjY2OjY+NkI2SjZONlY2WjZeNmI2ZjZqNm42cjZ2Nno2gjaGNoo2kjaWNpo2njaiNqY2qjauNrI2tja6Nr42wjbKNto23jbmNu429jcCNwY3CjcWNx43IjcmNyo3NjdCN0o3TjdSNx1GWUaJRpVGgi6aLp4uqi7SLtYu3i8KLw4vLi8+LzovSi9OL1IvWi9iL2Yvci9+L4Ivki+iL6Yvui/CL84v2i/mL/Iv/iwCMAowEjAeMDIwPjBGMEowUjBWMFowZjBuMGIwdjB+MIIwhjCWMJ4wqjCuMLowvjDKMM4w1jDaMaVN6Ux2WIpYhljGWKpY9ljyWQpZJllSWX5ZnlmyWcpZ0loiWjZaXlrCWl5CbkJ2QmZCskKGQtJCzkLaQupDVjdiN2Y3cjeCN4Y3ijeWN5o3njemN7Y3ujfCN8Y3yjfSN9o38jf6N/40AjgGOAo4DjgSOBo4HjgiOC44Njg6OEI4RjhKOE44VjhaOF44YjhmOGo4bjhyOII4hjiSOJY4mjieOKI4rji2OMI4yjjOONI42jjeOOI47jjyOPo4/jkOORY5GjkyOTY5Ojk+OUI5TjlSOVY5WjleOWI5ajluOXI5djl6OX45gjmGOYo5jjmSOZY5njmiOao5rjm6OcY64kLCQz5DFkL6Q0JDEkMeQ05DmkOKQ3JDXkNuQ65DvkP6QBJEikR6RI5ExkS+ROZFDkUaRDVJCWaJSrFKtUr5S/1TQUtZS8FLfU+5xzXf0XvVR/FEvm7ZTAV9ade9dTFepV6FXfli8WMVY0VgpVyxXKlczVzlXLlcvV1xXO1dCV2lXhVdrV4ZXfFd7V2hXbVd2V3NXrVekV4xXslfPV6dXtFeTV6BX1VfYV9pX2VfSV7hX9FfvV/hX5FfdV3OOdY53jniOeY56jnuOfY5+joCOgo6DjoSOho6IjomOio6LjoyOjY6OjpGOko6TjpWOlo6XjpiOmY6ajpuOnY6fjqCOoY6ijqOOpI6ljqaOp46ojqmOqo6tjq6OsI6xjrOOtI61jraOt464jrmOu468jr2Ovo6/jsCOwY7CjsOOxI7FjsaOx47IjsmOyo7LjsyOzY7PjtCO0Y7SjtOO1I7VjtaO147YjtmO2o7bjtyO3Y7ejt+O4I7hjuKO447kjgtYDVj9V+1XAFgeWBlYRFggWGVYbFiBWIlYmliAWKiZGZ//YXmCfYJ/go+CioKogoSCjoKRgpeCmYKrgriCvoKwgsiCyoLjgpiCt4KugsuCzILBgqmCtIKhgqqCn4LEgs6CpILhggmD94Lkgg+DB4PcgvSC0oLYggyD+4LTghGDGoMGgxSDFYPggtWCHINRg1uDXIMIg5KDPIM0gzGDm4Negy+DT4NHg0ODX4NAgxeDYIMtgzqDM4Nmg2WD5Y7mjueO6I7pjuqO647sju2O7o7vjvCO8Y7yjvOO9I71jvaO9474jvmO+o77jvyO/Y7+jv+OAI8BjwKPA48EjwWPBo8HjwiPCY8KjwuPDI8Njw6PD48QjxGPEo8TjxSPFY8WjxePGI8ZjxqPG48cjx2PHo8fjyCPIY8ijyOPJI8ljyaPJ48ojymPKo8rjyyPLY8ujy+PMI8xjzKPM480jzWPNo83jziPOY86jzuPPI89jz6PP49Aj0GPQo9Dj0SPaIMbg2mDbINqg22DboOwg3iDs4O0g6CDqoOTg5yDhYN8g7aDqYN9g7iDe4OYg56DqIO6g7yDwYMBhOWD2IMHWBiEC4Tdg/2D1oMchDiEEYQGhNSD34MPhAOE+IP5g+qDxYPAgyaE8IPhg1yEUYRahFmEc4SHhIiEeoSJhHiEPIRGhGmEdoSMhI6EMYRthMGEzYTQhOaEvYTThMqEv4S6hOCEoYS5hLSEl4TlhOOEDIUNdTiF8IQ5hR+FOoVFj0aPR49Ij0mPSo9Lj0yPTY9Oj0+PUI9Rj1KPU49Uj1WPVo9Xj1iPWY9aj1uPXI9dj16PX49gj2GPYo9jj2SPZY9qj4CPjI+Sj52PoI+hj6KPpI+lj6aPp4+qj6yPrY+uj6+Pso+zj7SPtY+3j7iPuo+7j7yPv4/Aj8OPxo/Jj8qPy4/Mj82Pz4/Sj9aP14/aj+CP4Y/jj+eP7I/vj/GP8o/0j/WP9o/6j/uP/I/+j/+PB5AIkAyQDpATkBWQGJBWhTuF/4T8hFmFSIVohWSFXoV6haJ3Q4VyhXuFpIWohYeFj4V5ha6FnIWFhbmFt4WwhdOFwYXchf+FJ4YFhimGFoY8hv5eCF88WUFZN4BVWVpZWFkPUyJcJVwsXDRcTGJqYp9iu2LKYtpi12LuYiJj9mI5Y0tjQ2OtY/ZjcWN6Y45jtGNtY6xjimNpY65jvGPyY/hj4GP/Y8Rj3mPOY1JkxmO+Y0VkQWQLZBtkIGQMZCZkIWReZIRkbWSWZBmQHJAjkCSQJZAnkCiQKZAqkCuQLJAwkDGQMpAzkDSQN5A5kDqQPZA/kECQQ5BFkEaQSJBJkEqQS5BMkE6QVJBVkFaQWZBakFyQXZBekF+QYJBhkGSQZpBnkGmQapBrkGyQb5BwkHGQcpBzkHaQd5B4kHmQepB7kHyQfpCBkISQhZCGkIeQiZCKkIyQjZCOkI+QkJCSkJSQlpCYkJqQnJCekJ+QoJCkkKWQp5CokKmQq5CtkLKQt5C8kL2Qv5DAkHpkt2S4ZJlkumTAZNBk12TkZOJkCWUlZS5lC1/SXxl1EV9fU/FT/VPpU+hT+1MSVBZUBlRLVFJUU1RUVFZUQ1QhVFdUWVQjVDJUglSUVHdUcVRkVJpUm1SEVHZUZlSdVNBUrVTCVLRU0lSnVKZU01TUVHJUo1TVVLtUv1TMVNlU2lTcVKlUqlSkVN1Uz1TeVBtV51QgVf1UFFXzVCJVI1UPVRFVJ1UqVWdVj1W1VUlVbVVBVVVVP1VQVTxVwpDDkMaQyJDJkMuQzJDNkNKQ1JDVkNaQ2JDZkNqQ3pDfkOCQ45DkkOWQ6ZDqkOyQ7pDwkPGQ8pDzkPWQ9pD3kPmQ+pD7kPyQ/5AAkQGRA5EFkQaRB5EIkQmRCpELkQyRDZEOkQ+REJERkRKRE5EUkRWRFpEXkRiRGpEbkRyRHZEfkSCRIZEkkSWRJpEnkSiRKZEqkSuRLJEtkS6RMJEykTORNJE1kTaRN5E4kTqRO5E8kT2RPpE/kUCRQZFCkUSRN1VWVXVVdlV3VTNVMFVcVYtV0lWDVbFVuVWIVYFVn1V+VdZVkVV7Vd9VvVW+VZRVmVXqVfdVyVUfVtFV61XsVdRV5lXdVcRV71XlVfJV81XMVc1V6FX1VeRVlI8eVghWDFYBViRWI1b+VQBWJ1YtVlhWOVZXVixWTVZiVllWXFZMVlRWhlZkVnFWa1Z7VnxWhVaTVq9W1FbXVt1W4Vb1VutW+Vb/VgRXClcJVxxXD14ZXhReEV4xXjtePF5FkUeRSJFRkVORVJFVkVaRWJFZkVuRXJFfkWCRZpFnkWiRa5FtkXORepF7kXyRgJGBkYKRg5GEkYaRiJGKkY6Rj5GTkZSRlZGWkZeRmJGZkZyRnZGekZ+RoJGhkaSRpZGmkaeRqJGpkauRrJGwkbGRspGzkbaRt5G4kbmRu5G8kb2RvpG/kcCRwZHCkcORxJHFkcaRyJHLkdCR0pHTkdSR1ZHWkdeR2JHZkdqR25Hdkd6R35HgkeGR4pHjkeSR5ZE3XkReVF5bXl5eYV6MXHpcjVyQXJZciFyYXJlckVyaXJxctVyiXL1crFyrXLFco1zBXLdcxFzSXORcy1zlXAJdA10nXSZdLl0kXR5dBl0bXVhdPl00XT1dbF1bXW9dXV1rXUtdSl1pXXRdgl2ZXZ1dc4y3XcVdc193X4Jfh1+JX4xflV+ZX5xfqF+tX7VfvF9iiGFfrXKwcrRyt3K4csNywXLOcs1y0nLocu9y6XLycvRy93IBc/NyA3P6cuaR55HokemR6pHrkeyR7ZHuke+R8JHxkfKR85H0kfWR9pH3kfiR+ZH6kfuR/JH9kf6R/5EAkgGSApIDkgSSBZIGkgeSCJIJkgqSC5IMkg2SDpIPkhCSEZISkhOSFJIVkhaSF5IYkhmSGpIbkhySHZIekh+SIJIhkiKSI5IkkiWSJpInkiiSKZIqkiuSLJItki6SL5IwkjGSMpIzkjSSNZI2kjeSOJI5kjqSO5I8kj2SPpI/kkCSQZJCkkOSRJJFkvtyF3MTcyFzCnMecx1zFXMiczlzJXMsczhzMXNQc01zV3Ngc2xzb3N+cxuCJVnnmCRZAlljmWeZaJlpmWqZa5lsmXSZd5l9mYCZhJmHmYqZjZmQmZGZk5mUmZWZgF6RXotell6lXqBeuV61Xr5es15TjdJe0V7bXuhe6l66gcRfyV/WX89fA2DuXwRg4V/kX/5fBWAGYOpf7V/4XxlgNWAmYBtgD2ANYClgK2AKYD9gIWB4YHlge2B6YEJgRpJHkkiSSZJKkkuSTJJNkk6ST5JQklGSUpJTklSSVZJWkleSWJJZklqSW5Jckl2SXpJfkmCSYZJikmOSZJJlkmaSZ5JokmmSapJrkmySbZJukm+ScJJxknKSc5J1knaSd5J4knmSepJ7knySfZJ+kn+SgJKBkoKSg5KEkoWShpKHkoiSiZKKkouSjJKNko+SkJKRkpKSk5KUkpWSlpKXkpiSmZKakpuSnJKdkp6Sn5KgkqGSopKjkqSSpZKmkqeSamB9YJZgmmCtYJ1gg2CSYIxgm2DsYLtgsWDdYNhgxmDaYLRgIGEmYRVhI2H0YABhDmErYUphdWGsYZRhp2G3YdRh9WHdX7OW6ZXrlfGV85X1lfaV/JX+lQOWBJYGlgiWCpYLlgyWDZYPlhKWFZYWlheWGZYalixOP3IVYjVsVGxcbEpso2yFbJBslGyMbGhsaWx0bHZshmypbNBs1GytbPds+GzxbNdssmzgbNZs+mzrbO5ssWzTbO9s/myokqmSqpKrkqySrZKvkrCSsZKykrOStJK1kraSt5K4krmSupK7krySvZK+kr+SwJLBksKSw5LEksWSxpLHksmSypLLksySzZLOks+S0JLRktKS05LUktWS1pLXktiS2ZLaktuS3JLdkt6S35LgkuGS4pLjkuSS5ZLmkueS6JLpkuqS65Lsku2S7pLvkvCS8ZLykvOS9JL1kvaS95L4kvmS+pL7kvyS/ZL+kv+SAJMBkwKTA5MEkwWTBpMHkwiTCZM5bSdtDG1DbUhtB20EbRltDm0rbU1tLm01bRptT21SbVRtM22RbW9tnm2gbV5tk22UbVxtYG18bWNtGm7HbcVt3m0Obr9t4G0RbuZt3W3ZbRZuq20Mbq5tK25ubk5ua26ybl9uhm5TblRuMm4lbkRu326xbphu4G4tb+JupW6nbr1uu263btdutG7Pbo9uwm6fbmJvRm9HbyRvFW/5bi9vNm9Lb3RvKm8JbylviW+Nb4xveG9yb3xvem/RbwqTC5MMkw2TDpMPkxCTEZMSkxOTFJMVkxaTF5MYkxmTGpMbkxyTHZMekx+TIJMhkyKTI5MkkyWTJpMnkyiTKZMqkyuTLJMtky6TL5MwkzGTMpMzkzSTNZM2kzeTOJM5kzqTO5M8kz2TP5NAk0GTQpNDk0STRZNGk0eTSJNJk0qTS5NMk02TTpNPk1CTUZNSk1OTVJNVk1aTV5NYk1mTWpNbk1yTXZNek1+TYJNhk2KTY5Nkk2WTZpNnk2iTaZNrk8lvp2+5b7Zvwm/hb+5v3m/gb+9vGnAjcBtwOXA1cE9wXnCAW4RblVuTW6VbuFsvdZ6aNGTkW+5bMInwW0eOB4u2j9OP1Y/lj+6P5I/pj+aP84/ojwWQBJALkCaQEZANkBaQIZA1kDaQLZAvkESQUZBSkFCQaJBYkGKQW5C5ZnSQfZCCkIiQg5CLkFBfV19WX1hfO1yrVFBcWVxxW2NcZly8fypfKV8tX3SCPF87m25cgVmDWY1ZqVmqWaNZbJNtk26Tb5Nwk3GTcpNzk3STdZN2k3eTeJN5k3qTe5N8k32TfpN/k4CTgZOCk4OThJOFk4aTh5OIk4mTipOLk4yTjZOOk5CTkZOSk5OTlJOVk5aTl5OYk5mTmpObk5yTnZOek5+ToJOhk6KTo5Okk6WTppOnk6iTqZOqk6uTrJOtk66Tr5Owk7GTspOzk7STtZO2k7eTuJO5k7qTu5O8k72TvpO/k8CTwZPCk8OTxJPFk8aTx5PIk8mTy5PMk82Tl1nKWatZnlmkWdJZslmvWddZvlkFWgZa3VkIWuNZ2Fn5WQxaCVoyWjRaEVojWhNaQFpnWkpaVVo8WmJadVrsgKpam1p3WnpavlrrWrJa0lrUWrha4FrjWvFa1lrmWtha3FoJWxdbFlsyWzdbQFsVXBxcWltlW3NbUVtTW2JbdZp3mniaepp/mn2agJqBmoWaiJqKmpCakpqTmpaamJqbmpyanZqfmqCaopqjmqWap5qffqF+o36lfqh+qX7Ok8+T0JPRk9KT05PUk9WT15PYk9mT2pPbk9yT3ZPek9+T4JPhk+KT45Pkk+WT5pPnk+iT6ZPqk+uT7JPtk+6T75Pwk/GT8pPzk/ST9ZP2k/eT+JP5k/qT+5P8k/2T/pP/kwCUAZQClAOUBJQFlAaUB5QIlAmUCpQLlAyUDZQOlA+UEJQRlBKUE5QUlBWUFpQXlBiUGZQalBuUHJQdlB6UH5QglCGUIpQjlCSUJZQmlCeUKJQplCqUK5QslC2ULpStfrB+vn7AfsF+wn7Jfst+zH7QftR+137bfuB+4X7ofut+7n7vfvF+8n4Nf/Z++n77fv5+AX8CfwN/B38Ifwt/DH8PfxF/En8Xfxl/HH8bfx9/IX8ifyN/JH8lfyZ/J38qfyt/LH8tfy9/MH8xfzJ/M381f3pef3XbXT51lZCOc5FzrnOic59zz3PCc9Fzt3Ozc8BzyXPIc+Vz2XN8mAp06XPnc95zunPycw90KnRbdCZ0JXQodDB0LnQsdC+UMJQxlDKUM5Q0lDWUNpQ3lDiUOZQ6lDuUPJQ9lD+UQJRBlEKUQ5RElEWURpRHlEiUSZRKlEuUTJRNlE6UT5RQlFGUUpRTlFSUVZRWlFeUWJRZlFqUW5RclF2UXpRflGCUYZRilGOUZJRllGaUZ5RolGmUapRslG2UbpRvlHCUcZRylHOUdJR1lHaUd5R4lHmUepR7lHyUfZR+lH+UgJSBlIKUg5SElJGUlpSYlMeUz5TTlNSU2pTmlPuUHJUglRt0GnRBdFx0V3RVdFl0d3RtdH50nHSOdIB0gXSHdIt0nnSodKl0kHSndNJ0unTql+uX7JdMZ1NnXmdIZ2lnpWeHZ2pnc2eYZ6dndWeoZ55nrWeLZ3dnfGfwZwlo2GcKaOlnsGcMaNlntWfaZ7Nn3WcAaMNnuGfiZw5owWf9ZzJoM2hgaGFoTmhiaERoZGiDaB1oVWhmaEFoZ2hAaD5oSmhJaClotWiPaHRod2iTaGtowmhuafxoH2kgafloJ5UzlT2VQ5VIlUuVVZValWCVbpV0lXWVd5V4lXmVepV7lXyVfZV+lYCVgZWClYOVhJWFlYaVh5WIlYmVipWLlYyVjZWOlY+VkJWRlZKVk5WUlZWVlpWXlZiVmZWalZuVnJWdlZ6Vn5WglaGVopWjlaSVpZWmlaeVqJWplaqVq5Wsla2VrpWvlbCVsZWylbOVtJW1lbaVt5W4lbmVupW7lbyVvZW+lb+VwJXBlcKVw5XElcWVxpXHlciVyZXKlcuVJGnwaAtpAWlXaeNoEGlxaTlpYGlCaV1phGlraYBpmGl4aTRpzGmHaYhpzmmJaWZpY2l5aZtpp2m7aatprWnUabFpwWnKad9plWngaY1p/2kvau1pF2oYamVq8mlEaj5qoGpQaltqNWqOanlqPWooalhqfGqRapBqqWqXaqtqN3NSc4FrgmuHa4RrkmuTa41rmmuba6Frqmtrj22PcY9yj3OPdY92j3iPd495j3qPfI9+j4GPgo+Ej4ePi4/Mlc2VzpXPldCV0ZXSldOV1JXVldaV15XYldmV2pXbldyV3ZXeld+V4JXhleKV45XkleWV5pXnleyV/5UHlhOWGJYblh6WIJYjliSWJZYmlieWKJYpliuWLJYtli+WMJY3ljiWOZY6lj6WQZZDlkqWTpZPllGWUpZTllaWV5ZYllmWWpZcll2WXpZglmOWZZZmlmuWbZZulm+WcJZxlnOWeJZ5lnqWe5Z8ln2WfpZ/loCWgZaCloOWhJaHlomWipaNj46Pj4+Yj5qPzo4LYhdiG2IfYiJiIWIlYiRiLGLnge909HT/dA91EXUTdTRl7mXvZfBlCmYZZnJnA2YVZgBmhXD3Zh1mNGYxZjZmNWYGgF9mVGZBZk9mVmZhZldmd2aEZoxmp2adZr5m22bcZuZm6WYyjTONNo07jT2NQI1FjUaNSI1JjUeNTY1VjVmNx4nKicuJzInOic+J0InRiW5yn3JdcmZyb3J+cn9yhHKLco1yj3KScghjMmOwY4yWjpaRlpKWk5aVlpaWmpablp2WnpaflqCWoZailqOWpJallqaWqJaplqqWq5aslq2WrpavlrGWspa0lrWWt5a4lrqWu5a/lsKWw5bIlsqWy5bQltGW05bUltaW15bYltmW2pbbltyW3Zbelt+W4ZbiluOW5JblluaW55brluyW7ZbulvCW8ZbylvSW9Zb4lvqW+5b8lv2W/5YClwOXBZcKlwuXDJcQlxGXEpcUlxWXF5cYlxmXGpcblx2XH5cglz9k2GQEgOpr82v9a/Vr+WsFbAdsBmwNbBVsGGwZbBpsIWwpbCRsKmwybDVlVWVrZU1yUnJWcjByYoYWUp+AnICTgLyACme9gLGAq4CtgLSAt4DngOiA6YDqgNuAwoDEgNmAzYDXgBBn3YDrgPGA9IDtgA2BDoHygPyAFWcSgVqMNoEegSyBGIEygUiBTIFTgXSBWYFagXGBYIFpgXyBfYFtgWeBTVi1WoiBgoGRgdVuo4GqgcyBJmfKgbuBIZcilyOXJJcllyaXJ5colymXK5csly6XL5cxlzOXNJc1lzaXN5c6lzuXPJc9lz+XQJdBl0KXQ5dEl0WXRpdHl0iXSZdKl0uXTJdNl06XT5dQl1GXVJdVl1eXWJdal1yXXZdfl2OXZJdml2eXaJdql2uXbJdtl26Xb5dwl3GXcpd1l3eXeJd5l3qXe5d9l36Xf5eAl4GXgpeDl4SXhpeHl4iXiZeKl4yXjpePl5CXk5eVl5aXl5eZl5qXm5ecl52XwYGmgSRrN2s5a0NrRmtZa9GY0pjTmNWY2ZjamLNrQF/Ca/OJkGVRn5NlvGXGZcRlw2XMZc5l0mXWZYBwnHCWcJ1wu3DAcLdwq3CxcOhwynAQcRNxFnEvcTFxc3FccWhxRXFycUpxeHF6cZhxs3G1cahxoHHgcdRx53H5cR1yKHJscBhxZnG5cT5iPWJDYkhiSWI7eUB5RnlJeVt5XHlTeVp5YnlXeWB5b3lneXp5hXmKeZp5p3mzedFf0F+el5+XoZeil6SXpZeml6eXqJepl6qXrJeul7CXsZezl7WXtpe3l7iXuZe6l7uXvJe9l76Xv5fAl8GXwpfDl8SXxZfGl8eXyJfJl8qXy5fMl82XzpfPl9CX0ZfSl9OX1JfVl9aX15fYl9mX2pfbl9yX3Zfel9+X4Jfhl+KX45fkl+WX6Jful++X8Jfxl/KX9Jf3l/iX+Zf6l/uX/Jf9l/6X/5cAmAGYApgDmASYBZgGmAeYCJgJmAqYC5gMmA2YDpg8YF1gWmBnYEFgWWBjYKtgBmENYV1hqWGdYcth0WEGYoCAf4CTbPZs/G32d/h3AHgJeBd4GHgReKtlLXgceB14OXg6eDt4H3g8eCV4LHgjeCl4TnhteFZ4V3gmeFB4R3hMeGp4m3iTeJp4h3iceKF4o3iyeLl4pXjUeNl4yXjsePJ4BXn0eBN5JHkeeTR5m5/5nvue/J7xdgR3DXf5dgd3CHcadyJ3GXctdyZ3NXc4d1B3UXdHd0N3Wndodw+YEJgRmBKYE5gUmBWYFpgXmBiYGZgamBuYHJgdmB6YH5ggmCGYIpgjmCSYJZgmmCeYKJgpmCqYK5gsmC2YLpgvmDCYMZgymDOYNJg1mDaYN5g4mDmYOpg7mDyYPZg+mD+YQJhBmEKYQ5hEmEWYRphHmEiYSZhKmEuYTJhNmE6YT5hQmFGYUphTmFSYVZhWmFeYWJhZmFqYW5hcmF2YXphfmGCYYZhimGOYZJhlmGaYZ5homGmYaphrmGyYbZhumGJ3ZXd/d413fXeAd4x3kXefd6B3sHe1d713OnVAdU51S3VIdVt1cnV5dYN1WH9hf19/SIpof3R/cX95f4F/fn/NduV2MoiFlIaUh5SLlIqUjJSNlI+UkJSUlJeUlZSalJuUnJSjlKSUq5SqlK2UrJSvlLCUspS0lLaUt5S4lLmUupS8lL2Uv5TElMiUyZTKlMuUzJTNlM6U0JTRlNKU1ZTWlNeU2ZTYlNuU3pTflOCU4pTklOWU55TolOqUb5hwmHGYcphzmHSYi5iOmJKYlZiZmKOYqJipmKqYq5ismK2YrpivmLCYsZiymLOYtJi1mLaYt5i4mLmYupi7mLyYvZi+mL+YwJjBmMKYw5jEmMWYxpjHmMiYyZjKmMuYzJjNmM+Y0JjUmNaY15jbmNyY3ZjgmOGY4pjjmOSY5ZjmmOmY6pjrmOyY7ZjumO+Y8JjxmPKY85j0mPWY9pj3mPiY+Zj6mPuY/Jj9mP6Y/5gAmQGZApkDmQSZBZkGmQeZ6ZTrlO6U75TzlPSU9ZT3lPmU/JT9lP+UA5UClQaVB5UJlQqVDZUOlQ+VEpUTlRSVFZUWlRiVG5UdlR6VH5UilSqVK5UplSyVMZUylTSVNpU3lTiVPJU+lT+VQpU1lUSVRZVGlUmVTJVOlU+VUpVTlVSVVpVXlViVWZVblV6VX5VdlWGVYpVklWWVZpVnlWiVaZVqlWuVbJVvlXGVcpVzlTqV53fsd8mW1XnteeN563kGekddA3oCeh56FHoImQmZCpkLmQyZDpkPmRGZEpkTmRSZFZkWmReZGJkZmRqZG5kcmR2ZHpkfmSCZIZkimSOZJJklmSaZJ5komSmZKpkrmSyZLZkvmTCZMZkymTOZNJk1mTaZN5k4mTmZOpk7mTyZPZk+mT+ZQJlBmUKZQ5lEmUWZRplHmUiZSZlKmUuZTJlNmU6ZT5lQmVGZUplTmVaZV5lYmVmZWplbmVyZXZlemV+ZYJlhmWKZZJlmmXOZeJl5mXuZfpmCmYOZiZk5ejd6UXrPnqWZcHqIdo52k3aZdqR23nTgdCx1IJ4iniieKZ4qniueLJ4ynjGeNp44njeeOZ46nj6eQZ5CnkSeRp5HnkieSZ5LnkyeTp5RnlWeV55anlueXJ5enmOeZp5nnmieaZ5qnmuebJ5xnm2ec56SdZR1lnWgdZ11rHWjdbN1tHW4dcR1sXWwdcN1wnXWdc1143XodeZ15HXrded1A3bxdfx1/3UQdgB2BXYMdhd2CnYldhh2FXYZdoyZjpmamZuZnJmdmZ6Zn5mgmaGZopmjmaSZppmnmamZqpmrmayZrZmuma+ZsJmxmbKZs5m0mbWZtpm3mbiZuZm6mbuZvJm9mb6Zv5nAmcGZwpnDmcSZxZnGmceZyJnJmcqZy5nMmc2ZzpnPmdCZ0ZnSmdOZ1JnVmdaZ15nYmdmZ2pnbmdyZ3Znemd+Z4JnhmeKZ45nkmeWZ5pnnmeiZ6ZnqmeuZ7Jntme6Z75nwmfGZ8pnzmfSZ9Zn2mfeZ+Jn5mRt2PHYidiB2QHYtdjB2P3Y1dkN2PnYzdk12XnZUdlx2VnZrdm92yn/menh6eXqAeoZ6iHqVeqZ6oHqseqh6rXqzemSIaYhyiH2If4iCiKKIxoi3iLyIyYjiiM6I44jliPGIGon8iOiI/ojwiCGJGYkTiRuJCok0iSuJNolBiWaJe4mLdeWAsna0dtx3EoAUgBaAHIAggCKAJYAmgCeAKYAogDGAC4A1gEOARoBNgFKAaYBxgIOJeJiAmIOY+pn7mfyZ/Zn+mf+ZAJoBmgKaA5oEmgWaBpoHmgiaCZoKmguaDJoNmg6aD5oQmhGaEpoTmhSaFZoWmheaGJoZmhqaG5ocmh2aHpofmiCaIZoimiOaJJolmiaaJ5oomimaKpormiyaLZoumi+aMJoxmjKaM5o0mjWaNpo3mjiaOZo6mjuaPJo9mj6aP5pAmkGaQppDmkSaRZpGmkeaSJpJmkqaS5pMmk2aTppPmlCaUZpSmlOaVJpVmlaaV5pYmlmaiZiMmI2Yj5iUmJqYm5iemJ+YoZiimKWYpphNhlSGbIZuhn+GeoZ8hnuGqIaNhouGrIadhqeGo4aqhpOGqYa2hsSGtYbOhrCGuoaxhq+GyYbPhrSG6YbxhvKG7YbzhtCGE4fehvSG34bYhtGGA4cHh/iGCIcKhw2HCYcjhzuHHoclhy6HGoc+h0iHNIcxhymHN4c/h4KHIod9h36He4dgh3CHTIduh4uHU4djh3yHZIdZh2WHk4evh6iH0odamluaXJpdml6aX5pgmmGaYppjmmSaZZpmmmeaaJppmmqaa5pymoOaiZqNmo6alJqVmpmappqpmqqaq5qsmq2arpqvmrKas5q0mrWauZq7mr2avpq/msOaxJrGmseayJrJmsqazZrOms+a0JrSmtSa1ZrWmtea2Zramtua3Jrdmt6a4JrimuOa5Jrlmuea6Jrpmuqa7JrumvCa8ZrymvOa9Jr1mvaa95r4mvqa/Jr9mv6a/5oAmwGbApsEmwWbBpvGh4iHhYeth5eHg4erh+WHrIe1h7OHy4fTh72H0YfAh8qH24fqh+CH7ocWiBOI/ocKiBuIIYg5iDyINn9Cf0R/RX8Qgvp6/XoIewN7BHsVewp7K3sPe0d7OHsqexl7LnsxeyB7JXskezN7Pnsee1h7WntFe3V7THtde2B7bnt7e2J7cntxe5B7pnune7h7rHude6h7hXuqe5x7onure7R70XvBe8x73Xvae+V75nvqewx8/nv8ew98FnwLfAebCZsKmwubDJsNmw6bEJsRmxKbFJsVmxabF5sYmxmbGpsbmxybHZsemyCbIZsimySbJZsmmyebKJspmyqbK5ssmy2bLpswmzGbM5s0mzWbNps3mzibOZs6mz2bPps/m0CbRptKm0ubTJtOm1CbUptTm1WbVptXm1ibWZtam1ubXJtdm16bX5tgm2GbYptjm2SbZZtmm2ebaJtpm2qba5tsm22bbptvm3CbcZtym3ObdJt1m3abd5t4m3mbept7mx98KnwmfDh8QXxAfP6BAYICggSC7IFEiCGCIoIjgi2CL4IogiuCOII7gjOCNII+gkSCSYJLgk+CWoJfgmiCfoiFiIiI2IjfiF6JnX+ff6d/r3+wf7J/fHxJZZF8nXycfJ58onyyfLx8vXzBfMd8zHzNfMh8xXzXfOh8boKoZr9/zn/Vf+V/4X/mf+l/7n/zf/h8d32mfa59R36bfrietJ5zjYSNlI2RjbGNZ41tjUeMSYxKkVCRTpFPkWSRfJt9m36bf5uAm4GbgpuDm4SbhZuGm4ebiJuJm4qbi5uMm42bjpuPm5CbkZuSm5OblJuVm5abl5uYm5mbmpubm5ybnZuem5+boJuhm6Kbo5ukm6Wbppunm6ibqZuqm6ubrJutm66br5uwm7Gbspuzm7SbtZu2m7ebuJu5m7qbu5u8m72bvpu/m8CbwZvCm8ObxJvFm8abx5vIm8mbypvLm8ybzZvOm8+b0JvRm9Kb05vUm9Wb1pvXm9ib2Zvam9ubYpFhkXCRaZFvkX2RfpFykXSReZGMkYWRkJGNkZGRopGjkaqRrZGuka+RtZG0kbqRVYx+nriN640FjlmOaY61jb+NvI26jcSN1o3XjdqN3o3Ojc+N243GjeyN9434jeON+Y37jeSNCY79jRSOHY4fjiyOLo4jji+OOo5AjjmONY49jjGOSY5BjkKOUY5SjkqOcI52jnyOb450joWOj46UjpCOnI6ejniMgoyKjIWMmIyUjJtl1oneidqJ3Incm92b3pvfm+Cb4Zvim+Ob5Jvlm+ab55vom+mb6pvrm+yb7Zvum++b8Jvxm/Kb85v0m/Wb9pv3m/ib+Zv6m/ub/Jv9m/6b/5sAnAGcApwDnAScBZwGnAecCJwJnAqcC5wMnA2cDpwPnBCcEZwSnBOcFJwVnBacF5wYnBmcGpwbnBycHZwenB+cIJwhnCKcI5wknCWcJpwnnCicKZwqnCucLJwtnC6cL5wwnDGcMpwznDScNZw2nDecOJw5nDqcO5zlieuJ74k+iiaLU5fplvOW75YGlwGXCJcPlw6XKpctlzCXPpeAn4OfhZ+Gn4efiJ+Jn4qfjJ/+ngufDZ+5lryWvZbOltKWv3fglo6SrpLIkj6TapPKk4+TPpRrlH+cgpyFnIach5yInCN6i5yOnJCckZySnJSclZyanJucnpyfnKCcoZyinKOcpZymnKecqJypnKucrZyunLCcsZyynLOctJy1nLact5y6nLucvJy9nMScxZzGnMecypzLnDycPZw+nD+cQJxBnEKcQ5xEnEWcRpxHnEicSZxKnEucTJxNnE6cT5xQnFGcUpxTnFScVZxWnFecWJxZnFqcW5xcnF2cXpxfnGCcYZxinGOcZJxlnGacZ5xonGmcapxrnGycbZxunG+ccJxxnHKcc5x0nHWcdpx3nHiceZx6nHucfZx+nICcg5yEnImcipyMnI+ck5yWnJecmJyZnJ2cqpysnK+cuZy+nL+cwJzBnMKcyJzJnNGc0pzanNuc4JzhnMyczZzOnM+c0JzTnNSc1ZzXnNic2ZzcnN2c35zinHyXhZeRl5KXlJevl6uXo5eyl7SXsZqwmreaWJ62mrqavJrBmsCaxZrCmsuazJrRmkWbQ5tHm0mbSJtNm1Gb6JgNmS6ZVZlUmd+a4Zrmmu+a65r7mu2a+ZoImw+bE5sfmyObvZ6+njt+gp6Hnoiei56SntaTnZ6fntue3J7dnuCe357inume557lnuqe754inyyfL585nzefPZ8+n0Sf45zknOWc5pznnOic6ZzqnOuc7JztnO6c75zwnPGc8pzznPSc9Zz2nPec+Jz5nPqc+5z8nP2c/pz/nACdAZ0CnQOdBJ0FnQadB50InQmdCp0LnQydDZ0OnQ+dEJ0RnRKdE50UnRWdFp0XnRidGZ0anRudHJ0dnR6dH50gnSGdIp0jnSSdJZ0mnSedKJ0pnSqdK50snS2dLp0vnTCdMZ0ynTOdNJ01nTadN504nTmdOp07nTydPZ0+nT+dQJ1BnUKdNOI14jbiN+I44jniOuI74jziPeI+4j/iQOJB4kLiQ+JE4kXiRuJH4kjiSeJK4kviTOJN4k7iT+JQ4lHiUuJT4lTiVeJW4lfiWOJZ4lriW+Jc4l3iXuJf4mDiYeJi4mPiZOJl4mbiZ+Jo4mniauJr4mzibeJu4m/icOJx4nLic+J04nXiduJ34njieeJ64nvifOJ94n7if+KA4oHiguKD4oTiheKG4ofiiOKJ4orii+KM4o3ijuKP4pDikeJDnUSdRZ1GnUedSJ1JnUqdS51MnU2dTp1PnVCdUZ1SnVOdVJ1VnVadV51YnVmdWp1bnVydXZ1enV+dYJ1hnWKdY51knWWdZp1nnWidaZ1qnWudbJ1tnW6db51wnXGdcp1znXSddZ12nXedeJ15nXqde518nX2dfp1/nYCdgZ2CnYOdhJ2FnYadh52InYmdip2LnYydjZ2OnY+dkJ2RnZKdk52UnZWdlp2XnZidmZ2anZudnJ2dnZ6dn52gnaGdop2S4pPilOKV4pbil+KY4pnimuKb4pzineKe4p/ioOKh4qLio+Kk4qXipuKn4qjiqeKq4qvirOKt4q7ir+Kw4rHisuKz4rTiteK24rfiuOK54rriu+K84r3ivuK/4sDiweLC4sPixOLF4sbix+LI4sniyuLL4szizeLO4s/i0OLR4tLi0+LU4tXi1uLX4tji2eLa4tvi3OLd4t7i3+Lg4uHi4uLj4uTi5eLm4ufi6OLp4uri6+Ls4u3i7uLv4qOdpJ2lnaadp52onamdqp2rnaydrZ2una+dsJ2xnbKds520nbWdtp23nbiduZ26nbudvJ29nb6dv53AncGdwp3DncSdxZ3GncedyJ3Jncqdy53Mnc2dzp3PndCd0Z3SndOd1J3Vndad153Yndmd2p3bndyd3Z3end+d4J3hneKd453kneWd5p3nneid6Z3qneud7J3tne6d753wnfGd8p3znfSd9Z32nfed+J35nfqd+538nf2d/p3/nQCeAZ4CnvDi8eLy4vPi9OL14vbi9+L44vni+uL74vzi/eL+4v/iAOMB4wLjA+ME4wXjBuMH4wjjCeMK4wvjDOMN4w7jD+MQ4xHjEuMT4xTjFeMW4xfjGOMZ4xrjG+Mc4x3jHuMf4yDjIeMi4yPjJOMl4ybjJ+Mo4ynjKuMr4yzjLeMu4y/jMOMx4zLjM+M04zXjNuM34zjjOeM64zvjPOM94z7jP+NA40HjQuND40TjReNG40fjSONJ40rjS+NM403jA54EngWeBp4HngieCZ4KngueDJ4Nng6eD54QnhGeEp4TnhSeFZ4WnheeGJ4ZnhqeG54cnh2eHp4knieeLp4wnjSeO548nkCeTZ5QnlKeU55UnlaeWZ5dnl+eYJ5hnmKeZZ5unm+ecp50nnWedp53nnieeZ56nnuefJ59noCegZ6DnoSehZ6Gnomeip6Mno2ejp6PnpCekZ6UnpWelp6XnpiemZ6anpuenJ6enqCeoZ6inqOepJ6lnqeeqJ6pnqqeTuNP41DjUeNS41PjVONV41bjV+NY41njWuNb41zjXeNe41/jYONh42LjY+Nk42XjZuNn42jjaeNq42vjbONt427jb+Nw43HjcuNz43TjdeN243fjeON543rje+N8433jfuN/44DjgeOC44PjhOOF44bjh+OI44njiuOL44zjjeOO44/jkOOR45Ljk+OU45XjluOX45jjmeOa45vjnOOd457jn+Og46HjouOj46TjpeOm46fjqOOp46rjq+OrnqyerZ6unq+esJ6xnrKes561nraet565nrqevJ6/nsCewZ7CnsOexZ7GnseeyJ7KnsuezJ7QntKe057Vntae157Zntqe3p7hnuOe5J7mnuie657snu2e7p7wnvGe8p7znvSe9Z72nvee+J76nv2e/54AnwGfAp8DnwSfBZ8GnwefCJ8JnwqfDJ8PnxGfEp8UnxWfFp8YnxqfG58cnx2fHp8fnyGfI58knyWfJp8nnyifKZ8qnyufLZ8unzCfMZ+s463jruOv47DjseOy47PjtOO147bjt+O447njuuO747zjveO+47/jwOPB48Ljw+PE48XjxuPH48jjyePK48vjzOPN487jz+PQ49Hj0uPT49Tj1ePW49fj2OPZ49rj2+Pc493j3uPf4+Dj4ePi4+Pj5OPl4+bj5+Po4+nj6uPr4+zj7ePu4+/j8OPx4/Lj8+P04/Xj9uP34/jj+eP64/vj/OP94/7j/+MA5AHkAuQD5ATkBeQG5AfkCOQJ5DKfM580nzWfNp84nzqfPJ8/n0CfQZ9Cn0OfRZ9Gn0efSJ9Jn0qfS59Mn02fTp9Pn1KfU59Un1WfVp9Xn1ifWZ9an1ufXJ9dn16fX59gn2GfYp9jn2SfZZ9mn2efaJ9pn2qfa59sn22fbp9vn3CfcZ9yn3OfdJ91n3afd594n3mfep97n3yffZ9+n4Gfgp+Nn46fj5+Qn5Gfkp+Tn5SflZ+Wn5efmJ+cn52fnp+hn6Kfo5+kn6WfLPl5+ZX55/nx+QrkC+QM5A3kDuQP5BDkEeQS5BPkFOQV5BbkF+QY5BnkGuQb5BzkHeQe5B/kIOQh5CLkI+Qk5CXkJuQn5CjkKeQq5CvkLOQt5C7kL+Qw5DHkMuQz5DTkNeQ25DfkOOQ55DrkO+Q85D3kPuQ/5EDkQeRC5EPkRORF5EbkR+RI5EnkSuRL5EzkTeRO5E/kUORR5FLkU+RU5FXkVuRX5FjkWeRa5FvkXORd5F7kX+Rg5GHkYuRj5GTkZeRm5GfkDPoN+g76D/oR+hP6FPoY+h/6IPoh+iP6JPon+ij6KfqBLhboF+gY6IQuczRHNIguiy4e6J41GjYONowuly5uORg5JujPOd85czrQOSvoLOhOO2484DynLjHoMuiqLlZAX0GuLjdDsy62LrcuO+ixQ6xDuy7dQ9ZEYUZMRkPoI0cpR3xHjUfKLkdJekl9SYJJg0mFSYZJn0mbSbdJtklU6FXoo0yfTKBMoUx3TKJME00UTRVNFk0XTRhNGU2uTWToaORp5Grka+Rs5G3kbuRv5HDkceRy5HPkdOR15Hbkd+R45HnkeuR75HzkfeR+5H/kgOSB5ILkg+SE5IXkhuSH5IjkieSK5IvkjOSN5I7kj+SQ5JHkkuST5JTkleSW5JfkmOSZ5Jrkm+Sc5J3knuSf5KDkoeSi5KPkpOSl5Kbkp+So5KnkquSr5KzkreSu5K/ksOSx5LLks+S05LXktuS35LjkueS65LvkvOS95L7kv+TA5MHkwuTD5MTkxeTwQzJMA0amRXhFZ3J3TbNFsXziTMV8lTs2R0RHR0xATL9CFzZSc4tu0nBXTFGjT0faRYVMbHwHTaRKoUYjayVyVFpjGgY+YT9NZvtWAACVfR1ZuYv0PTSX73vbW14dpFolNrCe0Vq3W/xcbmeThUWZYXSddHU4Ux2eNiFg7D7eWPU6/HqXn2FBDYnqMYoKXjIKQ4SElp8vlDBJE4aWWEqXGJLQeTJ6YGYpap2ITHTFe4JnLHpPUkaQ5jTEc7ldxnTHn7NXL0lMVDFBjjYYWHJ6ZXuPi65GiG6BQZldrnu8JMifwSTJJMwkyZ8Ehbs1tEDKn+FE/63BYm5wy58AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAxwTHCMcMxxDEMAcUx0QDNAMYxxzHLAOgfyDHKAMkxyjHLMcwxDgHNMc4xAAHBAM0BwAASAckAGgHIAEwB0wDRAdIAANy+HgTcwB7KAAEB4QDOAeAAUQITAekAGwHoACsB7QDQAewATQHzANIB8gBrAfoA1AH5ANYB2AHaAdwB/AAI3L8eDNzBHuoAYQLaI9sjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqaNFEQAACmUAAAAAPU7dbk6d35EAAAAANXeRZBpPKE+oT1ZRdFGcUeRRoVKoUjtTTlPRU9hT4lbwWARZB1kyWTRZZlueW59bmlyGXjtgiWX+ZwRoZWhObbxwNXWkfqx+un7Hfs9+334Gfzd/eoLPgm+Dxom+i+KLZo9nj26PEXT8fM19RmnJeidSAAAAAAAAAACMkbh4XpG8gAAAC432gOcJAAAAAJ+Ax57NTMmdDJ4+TPadDnAKnjOhwTUAAJpuPoIZdQAAEUlsmo+amZ+HeWyEyh3QBeYqJE6BToBOh06/TutON09MNL1PSD4DUIhQfTSTNKU0hlEFWdtR/FEFUolOeVKQUidTxzWpU1E1sFNTNcJTI1RtNXI1gTaTVKNUtFS5VNBU71QYVSNVKFWYNT9VpTW/NddVxTWEfSVVAABCDBUNK1GQVcYs7DlBA0aOuE3llFNAvoB6dzgsNDrVR12B8mnqTd1kfA20D9UM9BCNZH6Olg4LDGQPqSxWgtNEAABGDU2a6YD0R6dOwiyymmc69JXtPwY1x1LUl8h4RC1unRWYAADZQ6VgtGTjVEwtyit3EPs5bxDaZhZnoHnqZFJQQwxojqEhTIsxBwAAC0ipAfo/c1iNLQAAyEX8BJdgTA+WDXlVu0C6QwAAtEpmKp0QqoH1mJwNeWP+OXUnwI2hVnxkQz4AAAGmCQ7PKsksAADIEMI5kjkGOpuCeDVJXscgUlYxD7IsIJe8ND1sO04AAAAAdHWLLggiW6bNjHoONAwcaJN/zxADKDkp+zXjUYwOjQ+qDpM/MA9HDU8RTA4AAKsOqQtIDcAQPRH5P5YmMmStD/QzOXbOK34Nfw1RLFUsGDqYDscQLg8yplBr0oyZjcqMqpXMVMSCuVUAAMOeJpy2ml537i1AcW2B7IAcXHJlNIGXN19TvYC2kfoODw53DvsO3TXrTQk21gyvVrUnyRAQDngOeBBIEQeCVRR5DlBOpC1UWh0QHhD1EPYQnFcRDpR2zYK1D3sOflEDN7YPgBHYUr2i2kk6GHdBfIKZWGhSGjY9V7J7aFsASCxLJ5/nSR+cjZt0Wz0x+1XyNYlWKE4CWcEbePhRl4YAW067Tj41I1xRX8Rf+jhMYjVlems1bDpsbHArcixOrXLpSFJ/O3n5fFN/amLBNAAAS2MCgICAEmZRaV1TZIjBibJ4oIsdjYWUeJV/leiVD47ml3WYzpjemGOZEJh8nB+exJ5vawf5N06HAB2WN2KilAAAO1D+bXOcpp/JPY+ITkF3cPVcIEvNUVk1MF0iYTKKp4/2kZFxGWe6c4EyB6GLPIAZEEvkeAJ0rlEPhwlAY2q6oiNCD4ZvCip6R5nqilWXTXAkU34g9JPZduOJp5/dd6NO8E+8UC9OF0+onzRUi32SWNBYth2SXplewl8SJ4tl+TMZaUNqYzz/bAAAAHIFRYxz2z4TShVbuXSDi6RclVaTeux7w3xsfviCl4Wpn5CIqp+5jqufz49fheCZIZKsn7mNPxRxQKJCGloAAAAAAABomGtndkI9VwAA1oV7Sb+CDXGBTHRte10Va75vrZ+un5Zbr5/nZlt+V27KeYg9w0RWMpYnmkM2RQAA1VwaO/mKeFwSPVE1eF2yn1dxWEXsQCMed0x4OUo0pAFBbMyKtE85Ar9ZbIFWmPqYO1+fCwAAwSFtiQJBu0Z5kAc/s5+1ofhA1jf3RkZsfEGyhv9zbUXUOJpUYUUbRYlNe0x2TepFyD8PS2E23kS9RO1BPl1IXVZd/D0POKRduV0gODg4Ql69XiVfg18IORQ5PzlNOddgPWHlXIk5t2G5Yc9huDksYpBi5WIYY/g5sVYDOuJj+2MHZFpkSzrAZBVdIVafn5c6hmW9Ov9lU2byOpJmIjsWZ0I7pGcAaFg7SmiEaHI7cTt7OwlpQ2lccmRpn2mFabw71mndO2VqdGpxaoJq7DuZavI7q2q1atRq9mqBa8Fr6mt1bKpsyzwCbQZtJm2Bbe88pG2xbRVuGG4pboZuwIm7buJu2m5/n+hu6W4kbzRvRj1BP4Fvvm9qPXU9t3GZXIo9LHCRPVBwVHBvcH9wiXAlA8FD8TXYDtc+vlfTbj5x4FdONqJp6Yt0W0l64VjZlGV6fXqsWbt6sHrCesN60XGNZMpB2nrdeup670GyVAFcC3tVeyl7DlP+XKJ7b3ucg7Rbf2zQeyGEknsAACBdrT1lXJKE+nsAADV8wVxEfIN8gkimfH1meEXJfMd85nx0fPN89XwAAGd+HUVEbl191m6NdIl9q301cbN9AABXQClg5H0TPfV9+RflfW2DAAAhYVphbn6SfitDbJQnfkB/QX9HfzZ50GLhmZd/UWOjf2EWaABcRWY3A0U6g/p/iWQAAAiAHYAAAC+Ah6DDbDuAPIBhgBQniUkmZuM96GYlZ6eASIoHgRqBsFj2Jn9smGS4T+dkihQYgl4YU2plSpVKekQpgg0LUmp+PflP/RTihGKDCmunSTA1cxf4PaqCG2mU+dtBS4XQghqDFg60F8E2fTFaNXuC4oIYg4s+o20Fa5drzjW/PR2D7FWFgwtFpW2sgwAA04N+NNRuV2pahZY0Qm7vLliE5FtxhNM95ESnakqEtTxYeQAAlmt3bkNu3oQAAJGDoESThOSEkVxAQsBcQ0U0hfJamW4nRXOFFkW/ZxaGJYY7hsGFiHAChoIVzXCy+WpFKIZINqIY91Oac36GcYf4oO6HJyyxh9qHD4hhVmyGVmgPRkWIRojgdbk95HVeiJyIW0a0iLWIwWPFiHd3D3eHiYqJAAAAAKeJvIkliueJJHm9epyKk3f+kZCKWXrpejp7jz8TRzh7fHEMix+LMFRlVT+LTItNi6mKekqQi5uLr4rfFhVGT4ibjFR9j33U+SU3U33WjJh9vX0SjQONEBnbjFxwEY3JTNA+AACpjQKAFBCKSXw7vIEMced6rY62jsOO1JIZjy2PZYMShKWPA5OfolAKs48qSd6JPYW7PfheYjL5jxSgvIYBhSUjgDnXbjeQPIW+emGQbIULhqiQE4fEkOaGrpAAAGeR8DqpkcSRrHwziYkeDpKfbEGSYpK5VQAAxoqbPAyL21UxDSyTa5PhiuuLj3DDWuKK5YplSUSS7Is5jP+Lc5NblLyOhZWmlSaUoJX2b7lCeibYhnwSLj7fSRxse5aWlmxBo5bVbtphtpb1eOCKvZbMU6FJuGx0AhBkr5DlkNFKFRkKMzGXQoY2lw9KPUWFRelKdXBBWxuXAADVkVeXSlvrkV+XJZTQULcwvDCJl5+XsZe+l8CX0pfgl2xU7pccdDOUAAD1lx2UennRSjSYM5hLmGaYDjt1cVE9MAZcQQZXypi3mMiYx5j/Sidt0xawVeGY5pjsmHiTOZkpSnJLV5gFmfWZDJo7mhCaWJolV8Q2sZDVm+Ca4poFm/SaDkwUmy2bAIY0UDSbqGnDOH0wUJtAmz6dRVpjGI6bS0ICnP+bDJxontSdt5+Soauh4aAjod+hfp2DnTShDp6IaMSdWyGToSCiOxkzojmduaC0opCelZ6enqKeNE2qnq+eZEPBnmA75TkdPTJPvjcrjAKfCJ+WSySUom0XnwAAOZ+fVopWRZ+4mYuQ8pd/hGKfaZ/ceo6fFnK+S3VJu0l3cfhJSENRSp5z2ov6GJ95fok2jmmT85NEiuySgZPLk2yJuUQXcus+cndDetBwc0T4Q35x7xejcL4YmTXHPoUYL1T4FyI3+xY5GOE2dBfRGEtfIzfAFltXJUr+E6gSxhO2FAOFpjYAAFWElEllcTE+XFX7PlJw9ETuNp2ZJm/5ZzM3FTznPWxYIhkQaFdAPzfhQItAD0EhbMtUnlaxZpJW3w+oCw0OxpMTi5yT+E4rURk4NkS8TmUEfwNLT4pPUVZoWqsBywOZOQoDFAQ1NClPwAKzjnUC2ooMAphOzVANUaJPA08OSoo+Qk8uUGxQgVDMT+VPWFD8UAAAAAAAAAAAdm6VNTk+vz5ybYQYiT6oUcNR4AXdRKMEkgSRBHqNnIoOB1lSpFJzCOFSAAB6RoxxjEMgDKxJ5BDRaR0OAADePpl0FHRWdJhzjku8So1A0FOENQ9yyUC0VUUDzVTGCx1XXZL0lmaT3VeNV39XPjbLWJlaRor6Fm8XEBcsWrhZj5J+Ws9aElpGWfMZYRiVQvU2BW1DdCFag16BWteLEwTgk4x0AxMFcXJJCJT7ib2ToDceXJ5cXl5IXpYZfBnuOs1eT1sDGQQZATegGN02/hbTNiqBR4q6HXI0qIkMXw5fJxmrF2taOxdEWxSG/XVgiH5gYCgrJttfuD6vJb4liJBzb8BhPgBGABsmmWGYYXVgmywHLdRGTZFxZGVGaispOiIrUDTqmHguN2NbpLZkMWPRY+NJZy2kYqEsO2RrZXJp9DuOMK0yiUmrMg1V4DLZGD+UzmaJMrMx4DqQQYRVIouPVfwWW1UlVO54AzEqGDQyZDQPMoIxyUKOZiRta2aTSzBmcHjrHWNm0jLhMh5mcljRODo4vDeZO6I3/jPQdJY7j2cqRrZoHmjEO75qYzjVN4dEM2pSaslqBWsSGRFlmGhMatc7empXa8A/mjygk/KS6ovLiomSHoDciWeUpW0Lb+xJAAB/P489BG48QD1aCm5HWCRtQng7cRpDdkLxcFByh3KUco9HJUd5UaRK6wV6dPg+XzZKShdJ4V8GP7E+30ojjDU/p2DzPsx0PHSHkzd0n0TqbVFFg3VjP9lMBk1YP1V1c3bGpRk7aHTMiqtJjkn7Os09Tkr/PsVJ80j6kTJXQpPjimQY31AhUudReHcyMg53D3d7d5dGgTdeOvBIOHSbdL8+ukrHSshAlkquYQeTgVUeeI14iHjSeNBzWXlBd+NWDkEAAJaEpXktavo+Onr0eW5B5hYyQTWS8XlMDYxJmQK6PW4XlzVrVXA1qjbUAQ0M4npZWvUmr1qcWg1aWwLweCpaxlv+evlBXXxtfBFCs1u8XqZezXz5SbAXjnx8fK58smrcfQd+031Of2FiXGFIe5d9gl5qQnVrFgnWZ04AzzXEVxJk+GNiSd1/J3ssCOlaQ10Mew5e5plFhmOaHGo/NOI590mtZR+aoGWAhCdx0WzqRDeBAkTGgAmBQoG0Z8OYQmpigmWCUWpThKdtEIYbcoZaf0FAGCtboRjkWtgYoIa8+Y89LYgidAJabohFT4eIv4jmiGWJTYmDVlSJhXeEd/WL2Yuci/mJrT6jhPVGz0byNz2KHIpIlE1fK5KEQtRlKXHEcEUYbZ2fjOmM3H2aWcN38FluQ9Q2Ko6njglMMI9Kj/RCWGy7byEjm0h5b4tu2hfpm7U2L0m7kAAAcVUGSbuRBJRLimJA/IonlB2MO4zlhCuKmZWnlZeVlpU0jUV0wj7/SEJK6kPnPiUyj5bnjmaOZY7MPu1JeEruPxJ0a3T8PkGXsJBHaB1Kk5DfVwAAaJOJiSaML4u+Y7qSEVtpizxJ+XMbQpuXcZc4mSYPwV3Fi7JKH5jalPaS15XlkcBEUItnSmSL3JhFigA/KpIlSRSEO5lNmQZ7/T2bmW9LqplcmmWLyFiPaiGa/lovmvGYkEtImbyZvUuXS32TclgCEyJYuEnoFER4Hye4PcVofT1YlCc5UGGBJ2spB2FPnFOce5w1nBCcf5vPmy2en5v1of6gIZ2uTARBGJ6wTAydtKHtoPOgL5mlnb2EEm7fb4Jr/IUzRaRthG7wbSCE7oUAbtc3ZGDieZw1QDYtSd5JYj3bk76SSJO/Arl4d5JNlORPQDRkkF1VPXhUeLZ4S3hXF8kxQUmaNnJP2m/ZbwAAHnAUVLVBu1fzWIpXFp3XVzRxrzSsQetxQGyXTwAAtRdJigxhzloLWrxCiEQsN3tL/Im7k7iT1hgdD3KEwGwTFPpCJizBQ5RZtz1BZ6h9W2GkYLlJi0n6ieWS4nPpPrR0Y4ufGOE+s0rYavNz+3PWPj5KlErZF2ZKpwMkFOVJSHQWSaVwdkmEkuZzX5P+BDGTzooWioaT54vVVTVJgoprcUNJ/wykVhoG6wu4DAJVxHn6F/59whZQSlIYLkUBlAo3wIqtSbBZvxiDGIR0oVriNls9sDZfknlagYpiGHSTzTy0CpZKijn0UGk9TD2cE3Vx+0IYgg9u5JDrRFdtT35ncK9s1jztPy0+Am4Mb2899QNRdbw2yDSARto+cUjEWW6SPklBjxyMwGsSWMhX1jZSFP5wYkNxSuMvsBK9I7loZ2mYE+U09HvfNoOK1jf6M59MGmqtNrdsPoTfRM5EJm1RbYJs3m8XbwlxPYM6F+2DgGxTcNsXiVmCWrMXYVpxWgUZ/EEtN+9ZPBfHNo5xkJOaZqVCblorWpNCK2r5PjZ3W0TKQh1xWULhibBPKG3CXM5ETX69QwxqVkIEE6ZwM3HpQ6U932wl+E9KZX7rWS9d8z1cX11K3xekfSaEhVT6OgAzFAJ+V9UIGQblP54ftqIDcFuRcF2Pc9N8WYoglMhP53/NchBz9Ho4czlz9lZBc0hzqT4Ye2yQ9XHySOFz9oHKPgx30T6ibP1WGXQedB904j7wPvQ++j7TdA4/Uz9CdW11cnWNdXw/yHXcdcA/TXbXP3R23D96dlxPiHEjVoCJaVgdQEN3OUBhZ0VA2zWYd2pAb0BeXL53y3fyWBh4uXAceKhAOXhHeFF4ZnhIhDVVM3kDaDJ5A0EJQZF5mXm7jwZ6vI9nQZF6skG8enmCxEHPett6z0EhTmJ7bHt7exJ8G3xgQnpCe3ycfIxCuHyUQu18k4/AcM8Mz33UfdB9/X2uf7R/n3KXQyCAJYA5ey6AMYBUgMw9tFegcLeA6YDtQwyBKnMOgRKBYHUUgQFEOTtWgVmBWoETRDpYfIGEgSVEk4EtRKWB71fBgeSBVIKPRKaCdoLKgtiC/4KwRFeDaZaKaQWE9XBkhONgiIQERb6E4YT4hBCFOIVShTtFb4VwheCFd0VyhpKGsobvhkWWi4cGRhdGroj/iCSJR4mRiWd5KYo4ipSKtIpRjNSM8owcjZhHX1jDje1H7k46jthVVFdxjvVVsI43SM6O4o7kju2O8o63j8GPyo/MjzOQxJmtSOCYE5IeSSiSWJJrkrGSrpK/kuOS65LzkvSS/ZJDk4STrZNFSVFJv54XlAFTHZQtlD6UaklUlHmULZWiladJ9JUzluVJoGckSkCXNUqyl8KXVFbkSuhguZgZS/GYRFgOmRmZtFEcmTeZQpldmWKZcEvFmZ1LPJoPm4N6aZuBm92b8Zv0m21MIJxvN8IbSZ06nP6eUFaTnb2dwJ38nfaUto97nqyesZ69nsae3JTinvGe+J7IekSflAC3AqADGmnDlKxZ1wRAWMGUuTfVBRUGdga6FldXc3HCCs0KvwtqVDv4ywueVPsLOwxTDGUMfAznYI0Mela1DN0M7QxvDbINyA1VaS+cpYcEDg4O1w6QDy0Pcw4gXLwPC15cEE8QdhAeZ3sQiBCWEEc2vxDTEC8ROxFkU62E4xJ1EzYTgYt3FRkWwxfHF3hOu3AtGGoZLRpFGioccBysHMgew2LVHhUfmHFVaEUg6WnINnwi1yP6IyoncShPKf2CZymTKdUqpYnoKqCPDiu4lz8rR5i9mkwsAACILLcs6FsILRItty2VLUIudC/MLzMwZjAfM94zsV9IZr9meXpnNfM1AAC6SQAAGjYWNwAARgO1WA5nGGmnOld24l8RPrk+/nWaINBIuEoZQZqK7kINQztANEOWQ0VKygXSUREGn1moHr47/zwERNZEiFd0Rps5L0fohcmZYjfDIV6LTosAABJI+0gVSglywEp4DGVZpU6GT3kH2o4sUI9SP1dxcZlSGVRKP6dKvFVGVG5UUmsAAHM0P1Uydl5VGEdiVWZVx1c/SV1YZlD7NMwzAAADWXxHSImuWolbBlyQHaFXUXEAAAJhEnxWkLJhmk9iiwJkSmRbXfdrAACEZBwZ6or2SYhk7z8SZcBLv2W1ZhsnZZThV5VhJ1rN+AAAuVYhRfxmak40SVaWj229bBg2d4mZZ25oEWReaAAAx2hCe8CQEQomaQAAOWlFegAA+mkmmi1qXzZpZCEAg3k0altrLF0ZNQAAnWvQRqRsO3VliK5ttlgcN40lS3DNcVQ8gHKFcoGSeiGLcjCT5nLQSTlsn5RQdPgOJ4j1iCYpc4SxF7huKkogGKQ5uTYAAAAAP0W2Zq2cpJhDicx3WHjWVt9AChahOS836IDFE61xZoPdeaiRAAC3TK9wq4n9eQp6C3tmfXpBQ3t+eQmAtW/fogNqGIOiUwduv5M2aF2Xb4EjgLVp7RMvMkiAhV0wjIOAFVcjmEmJq12ISb5l1WnSU6VKgT8RPDZnkID0gC6BoR9PgYmBr4EaggaDL4OKg8o1aISqhvpI5mNWiQh4VZK4ifJD54nfQ+iJRovUi/hZCYwAAMWP7JAAABCRPJH3PV6RykrQj49yi1bnlOmVsJW4lTKX0ZhJmWqZw5komg6bWp2bnZ9++J4jn6RMR5WToqJx/6KRTRKQy6WcTZwMvo/BVbqPsCS5j5NKCUV/flZvsWrqTuQ0LIudeDo3gI71FySAbIuZiz56r2brPVV2tzw1VlZZmk6BXlhiv1ZtDg6ObVuIPp5M3mMAAPYXexgwZS1WSlwaVBFTxj2YnX1MIlYeVkl/2F51WUA9cIccTuoPSQ26NheBXp0YjTt2RZxOdrl3RZMyVEiB94IlVjKBGIS9gOpVYnlDVhZUnQ7ONQVW8VXxZuKCLTY0dfBVulWXVHJVQQyWDNBeSFF2DmIsog6rnlp93lV1EJ1ibZeUVM2M9nF2kfxjuWP+Y2lVQytynLMumlHfNKcNp1FNVB5VE1Vmdi2OimixdbaABIiGh8eItoEchMEQ7EQEcwZHkFsLg5Noe1b0Ji99o0FzfdButnJwkdkRCJL8PKmmrA75DmZyohxOR8JP+X/rD/pAXZwfZaAt80jgR3yd7A8KDgAAo3XtDwAASGCHEaNxjn5QnRpOBE53NQ1bsmxnU6w23Dl9U6U2GEaaWG5LLYJLVKpXlVp5CQAAUjplJHRzrJ4JTe2b/jwwn1tMqU+eld6fXIS2PbJys2cgNy5jJX33Piw+KjoIkMxSdD56NulFjgRAdvBatg56eC5/p1i/QHxWi5t0XVR2NKSFnuFMAAD7Nxlh2jDyQwAAXVapEqdXY0kGnjRSrnCtNQAAfJ1WfDmb3ldsF1Nc02TQlDVjZHGthigNIm3iSnENAAD+UQ8fjl0Dl9EdgZ5MkB97ApvRXKN7aGI1Y/+az3sqm358AABCfIZ8FZz8ewmbAAAbnD5JWp9zVcNb/U+YnvJPYFIGPtFSZ1dWULdZEl7Il6udXI9pVLSXQJm6lyxTMGEsadpTCpwCnTtMQZaAaaZQRnVtF9qZc1IAAFmRgZZckQAAUZGXjn9jI23KahFWjpF6dYVi/ANPc3B8IVz9PAAAGUnWdp2bKk7UDL6DQogAAEpcwGkAAHpXH1L1Xc5OMWzyATlPnFTaVJpSgo3+NQAA8zUAAFJrfJGln5ebLpi0mLqaqJ6EnnpxFHsAAPprGIh4fwAAIFZKpneOU58AANSNT44cngGOgmJ9gyiOdY7TendKPnrYeOpsZ4oHdlqKJp/ObNaHw3WyolN4QPgMjeJycXMtiwJz8XTrjLtKL4a6X6CIt0QAADsYBW4AAH6KGyUAAP1gZ3bXmkSdbpOPm/WHAAAAAPeMLHMhl7Cb1jWycgdMUXxKmVlhWWEETJaefWEAAF9Xb2GmYjliAABcOuJhqlP1M2RjAmjSNVddwovajzmOAADZUEYdBnkyUziWOw9lQAAA/ncAAMJ8Gl/afC16ZoBjgE19BXXydJSJGoIMZ2KAhnRbgPB0A4Ekd4mJzGdTddFuqYfOh8iBjIdJiq2MQ4srd/h02oQ1NrJppo0AAKmJAAC5bcGHEUDndNs9dnGkYJxh0TwAAHdgAABxfy2LAADpYH5LIFIYPMc8115WdjFVRBn+EgOZ3G2tcMFcrWEPinc27gBGaA5PYkUfW0xjUJ+mnmtiRwXbkt8FxT9MhbVC73O1UUk2QknkiUST2xnugsg8PHhEZ99iM0mqiaACs2sFE6tP7SQIUClthHoANrFKEyUAAH4DpF+AA0cD224fBAAAAVF6NA5RbJhDNxaEpEmHBGBRtDNqUf8L/CDlAjAljgUzMoMZglt9h7MFmTyyUbhRNJ3JUc9R0VHcPNNRpkqzUeJRQlPtUc2DPmktN3tfC1ImUjxStVJXUpRSuVLFUhV8QoXgUg2GE2sAAN6KSVXZboA/VAnsPzNTAADiC8tsJhcbaNVzSmCqPsw46BbdcaJEbVN0U6uGflMAAJYVExbmd5NTm4qgU6tTrlOnc3JXWT+cc8FTxVNJbElO/lfZU6s6jwvgU+s/oy32U3cME1R5cCtVV2ZbbW1UU2t0DV1Vj1SkVKZHDRfdDrQ9TQ28iZgmR1XtTC9UF3SGValVAADXGDpAUkU1RLNmtBA3Vs1mijKkZq1mTVZPVvF48VaHl/5TAFfvVu1WZosjNk8SRlelQW5si3BCV7E2fmzmVxYUA1hUFGNDJlj1S1xYqlhhNeBY3Fg8EvtY/1tDV1CheELTk6E1H1mmaMM2WW4+FiRaU1WSFgWFyVlODYFsKm3cF9lZ+xeyF6ZtcW0oGNUW+VlFbqtaY1rmNqlJAAAIN5ZaZXTTWqFvVCWFPREZMje4FoNe0FJ2W4hlfFsOegRAXUgEAtVbYGE0GsxZpQXzW51bEE0FXEQbE1zOcxRcpRwoa0lc3UiFXOlc71yLXfkdNx4QXRhdRl2kHrpc1138gi04AUlJIHMhh4I2OMI7Ll6KagAAel68RNMMplO3TgAAqFNxFwle9F6ChPle+16gOPxePmgblA1fwQGU+N46rkg6EzpfiGjQIwAAcSRjX72Xbm5yX0CTNoqnX7ZdXz1QUmof+HBoJtaRngIpijFghWZ3GGM5xz05NpBXtCdxeUA+nmAAALNggkmPSVN6pHThUKBaZGEkhEJhpvjSboFh9FFWBodhqlu3P18o02Gdi12Z0GEyOYApwSgjYFxhHmWLYxgBxWJwF9ViDS5sY99JFzo4ZPhjjhP8FwAAim82LhSYjEAdV+Fk5WR7lGY6OmRXOk1lFm8oSiNKhWVtZV9lfjC1ZUBJN0vRZdhAKRjgZeNl318ANBhm9zH4MURmpDGlMUtmdQ5nZuZRc2YAAD0eMTL0hcgxE1PFd/copJkCZ5xDIUorO/ppwjcAAGdnYmfNQe2Q12fpRCJoUG48kgFo5jOgbV1obzThaQtq34pzacNozTUBaQBpMj0BOjw2gDusZ2FpSor8QjZpmGmhO8kDY4OQUPlpWTYqIUVqAzedavM7sWfIapyRDTwdayMJ3mA1a3RrzSe1bts6tQNYGUA3IVRaO+Fr/D7cazdsiyTxSFFrWmwmgnlsvD3FRL09pEEMSQBJyTzlNus8Mg2Dm/kxkSSPfzdoJW2hbettlm1cbXxuBG9/SYVAcm4zhXRvx1EAAAAALoQhiwAALz5TdII/zHlPbpFaSzD4bw03nW8wPvpulxQ9QFVF8JNEb1xvTj10b3CROz2fb0RB02+RQFVBOUDwP7Q/P0HfUVZBV0FAQd1hS3B+cKdwgXDMcNVw1nDfcARB6D20cZZxd0IrcUVxiFpKcQAAnFxlQ09xYpPBQixxWkQnSiJKunHoi71wDnJClBVyEVlDlCRyQZMFVi5yQHJ0Sb1oVXJXclU+RDANaD1vgnIAACtzI0griO1IBIgocy5zz3OqczoMLmrJc0l04kHnFiRKI2bFNrdJjUn7SfdzFXQDaSZKOXTDBdc+AACtKGB0so5HdORzdnS5g2x0MDd0dPGTLGqCdFNJjEpfQXlKj4tGWwOMnhjIdIgZDnUAAB512Y5LGtdbrI6Fk011SnVndW51gk8EPxNNjnVddJ51tHUCdix2UXZPdm92dnb1Y5B274H4NxFpDmmhdqV2t3bMdp9vYoSdUH1RHB4edyZ3QHevZCBSWHesMq93ZIloicEW9HcAAHYTEkrKaK94x3jTeKWWLnngVdd4NHmxeAx2uI+EiCuLg2AcJoZ5AIkCaYB5V1ideTl7PHmpeSpuJnGoPsZ5DZHUeSAFX0QPUoK4+AAAQCCpTgQAAAAANAsBAAAAAAAAAAAAAAAAAAAAAAxAAAAAAAAAAAAEWAA8AAAAAACAXK3c87vJQ+7tpA8mwZt28u/e+/r3DzJEr/7v/f4RYLAAACEZgSAQiKhgIWkkAESJxAAAA0A1AEOEMVGTaAICAAAAAAAAAAAAAABAAAGArGSCQIyhkARQYNQA0ioYnWg1l0/Y+CDEghwognWUAjhAoKHFEHFNxA2YuV5bAUOfmQN4IOIfCIkByUAHAw2akFLRT3wDAiEgwG4Tg7Xb9eV3kE8XmjYXDABuugkvYFQAHnhoInBWniXzjrcXC+/mdxdbG8EQmI0SGLbPATFyGlsstsAg4sNcghvg2s6F1kCpVAvQD0hEQBAJ1ECuO2QeRCsXCIaCNhigieecWwiEAwLakOzbh4W/oq2djp2YICVGAEaff+PVyYT01k0G47YYEgkAAAAEAAAgAAAAAAIAAAAAAAAAAAAgAAAAAAAAAAAAAAAACAAAjnhuXz9+3T33/Jv8rtL/j2vx57+6rm4X79ynPra1d8mS16W2Sm6buYFNZ/5U8Zti/m9S1zb+vylFgfm9ZaZCOQAAQmCPAJRAQNKv19HbAKCYsnsGUiCYFsg9CQAAAQAAAAEKsgiAAAAABIggFBBMAAAEAKFEEABBAQAIQPDfTzZY8fW1gPVngEAAUE5ByIQAWmDYASsBUKEWxEDybhGsIDnEwAgHDAmYlsSbEByYbIYqpgFGEW3ly8TAkhAhFhKdcvRpDhcqooH0ewAIpAuQECzMOUoB8BYLCkAMHeoMRA5FAgAAMAz/ATACMA7/JyAb/xr/H/8B/zD+JiAlIFD+Uf5S/rcAVP5V/lb+V/5c/xMgMf4UIDP+dCU0/k/+CP8J/zX+Nv5b/13/N/44/hQwFTA5/jr+EDARMDv+PP4KMAswPf4+/ggwCTA//kD+DDANMEH+Qv4OMA8wQ/5E/ln+Wv5b/lz+Xf5e/hggGSAcIB0gHTAeMDUgMiAD/wb/Cv87IKcAAzDLJc8lsyWyJc4lBiYFJsclxiWhJaAlvSW8JaMyBSGvAOP/P//NAkn+Sv5N/k7+S/5M/l/+YP5h/gv/Df/XAPcAsQAaIhz/Hv8d/2YiZyJgIh4iUiJhImL+Y/5k/mX+Zv5e/ykiKiKlIiAiHyK/ItIz0TMrIi4iNSI0IkAmQiaVIpkikSGTIZAhkiGWIZchmSGYISUiIyIP/zz/FSJo/gT/5f8SMOD/4f8F/yD/AyEJIWn+av5r/tUznDOdM54zzjOhM44zjzPEM7AAWVFbUV5RXVFhUWNR51XpdM58gSWCJYMlhCWFJYYlhyWIJY8ljiWNJYwliyWKJYklPCU0JSwlJCUcJZQlACUCJZUlDCUQJRQlGCVtJW4lcCVvJVAlXiVqJWEl4iXjJeUl5CVxJXIlcyUQ/xH/Ev8T/xT/Ff8W/xf/GP8Z/2AhYSFiIWMhZCFlIWYhZyFoIWkhITAiMCMwJDAlMCYwJzAoMCkwQVNEU0VTIf8i/yP/JP8l/yb/J/8o/yn/Kv8r/yz/Lf8u/y//MP8x/zL/M/80/zX/Nv83/zj/Of86/0H/Qv9D/0T/Rf9G/0f/SP9J/0r/S/9M/03/Tv9P/1D/Uf9S/1P/VP9V/1b/V/9Y/1n/Wv+RA5IDkwOUA5UDlgOXA5gDmQOaA5sDnAOdA54DnwOgA6EDowOkA6UDpgOnA6gDqQOxA7IDswO0A7UDtgO3A7gDuQO6A7sDvAO9A74DvwPAA8EDwwPEA8UDxgPHA8gDyQMFMQYxBzEIMQkxCjELMQwxDTEOMQ8xEDERMRIxEzEUMRUxFjEXMRgxGTEaMRsxHDEdMR4xHzEgMSExIjEjMSQxJTEmMScxKDEpMdkCyQLKAscCywIAJAEkAiQDJAQkBSQGJAckCCQJJAokCyQMJA0kDiQPJBAkESQSJBMkFCQVJBYkFyQYJBkkGiQbJBwkHSQeJB8kISSsIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATllOAU4DTkNOXU6GToxOuk4/UWVRa1HgUQBSAVKbUhVTQVNcU8hTCU4LTghOCk4rTjhO4VFFTkhOX05eTo5OoU5AUQNS+lJDU8lT41MfV+tYFVknWXNZUFtRW1Nb+FsPXCJcOFxxXN1d5V3xXfJd813+XXJe/l4LXxNfTWIRThBODU4tTjBOOU5LTjlciE6RTpVOkk6UTqJOwU7ATsNOxk7HTs1Oyk7LTsROQ1FBUWdRbVFuUWxRl1H2UQZSB1IIUvtS/lL/UhZTOVNIU0dTRVNeU4RTy1PKU81T7FgpWStZKlktWVRbEVwkXDpcb1z0XXte/14UXxVfw18IYjZiS2JOYi9lh2WXZaRluWXlZfBmCGcoZyBrYmt5a8tr1Gvbaw9sNGxrcCpyNnI7ckdyWXJbcqxyi3MZThZOFU4UThhOO05NTk9OTk7lTthO1E7VTtZO107jTuRO2U7eTkVRRFGJUYpRrFH5UfpR+FEKUqBSn1IFUwZTF1MdU99OSlNJU2FTYFNvU25Tu1PvU+RT81PsU+5T6VPoU/xT+FP1U+tT5lPqU/JT8VPwU+VT7VP7U9tW2lYWWS5ZMVl0WXZZVVuDWzxc6F3nXeZdAl4DXnNefF4BXxhfF1/FXwpiU2JUYlJiUWKlZeZlLmcsZypnK2ctZ2NrzWsRbBBsOGxBbEBsPmyvcoRziXPcdOZ0GHUfdSh1KXUwdTF1MnUzdYt1fXaudr927nbbd+J383c6eb55dHrLeh5OH05STlNOaU6ZTqROpk6lTv9OCU8ZTwpPFU8NTxBPEU8PT/JO9k77TvBO8079TgFPC09JUUdRRlFIUWhRcVGNUbBRF1IRUhJSDlIWUqNSCFMhUyBTcFNxUwlUD1QMVApUEFQBVAtUBFQRVA1UCFQDVA5UBlQSVOBW3lbdVjNXMFcoVy1XLFcvVylXGVkaWTdZOFmEWXhZg1l9WXlZglmBWVdbWFuHW4hbhVuJW/pbFlx5XN5dBl52XnReD18bX9lf1l8OYgxiDWIQYmNiW2JYYjZl6WXoZexl7WXyZvNmCWc9ZzRnMWc1ZyFrZGt7axZsXWxXbFlsX2xgbFBsVWxhbFtsTWxObHBwX3Jdcn52+XpzfPh8Nn+Kf71/AYADgAyAEoAzgH+AiYCLgIyA44HqgfOB/IEMghuCH4JugnKCfoJrhkCITIhjiH+JIZYyTqhOTU9PT0dPV09eTzRPW09VTzBPUE9RTz1POk84T0NPVE88T0ZPY09cT2BPL09OTzZPWU9dT0hPWk9MUUtRTVF1UbZRt1ElUiRSKVIqUihSq1KpUqpSrFIjU3NTdVMdVC1UHlQ+VCZUTlQnVEZUQ1QzVEhUQlQbVClUSlQ5VDtUOFQuVDVUNlQgVDxUQFQxVCtUH1QsVOpW8FbkVutWSldRV0BXTVdHV05XPldQV09XO1fvWD5ZnVmSWahZnlmjWZlZllmNWaRZk1mKWaVZXVtcW1pbW1uMW4tbj1ssXEBcQVw/XD5ckFyRXJRcjFzrXQxej16HXope914EXx9fZF9iX3dfeV/YX8xf11/NX/Ff61/4X+pfEmIRYoRil2KWYoBidmKJYm1iimJ8Yn5ieWJzYpJib2KYYm5ilWKTYpFihmI5ZTtlOGXxZfRmX2dOZ09nUGdRZ1xnVmdeZ0lnRmdgZ1NnV2dla89rQmxebJlsgWyIbIlshWybbGpsemyQbHBsjGxobJZskmx9bINscmx+bHRshmx2bI1slGyYbIJsdnB8cH1weHBicmFyYHLEcsJylnMsdSt1N3U4dYJ273bjd8F5wHm/eXZ6+3xVf5aAk4CdgJiAm4CagLKAb4KSgouCjYKLidKJAIo3jEaMVYydjGSNcI2zjauOyo6bj7CPwo/Gj8WPxI/hXZGQopCqkKaQo5BJkcaRzJEyli6WMZYqliyWJk5WTnNOi06bTp5Oq06sTm9PnU+NT3NPf09sT5tPi0+GT4NPcE91T4hPaU97T5ZPfk+PT5FPek9UUVJRVVFpUXdRdlF4Ub1R/VE7UjhSN1I6UjBSLlI2UkFSvlK7UlJTVFNTU1FTZlN3U3hTeVPWU9RT11NzVHVUllR4VJVUgFR7VHdUhFSSVIZUfFSQVHFUdlSMVJpUYlRoVItUfVSOVPpWg1d3V2pXaVdhV2ZXZFd8VxxZSVlHWUhZRFlUWb5Zu1nUWblZrlnRWcZZ0FnNWctZ01nKWa9Zs1nSWcVZX1tkW2Nbl1uaW5hbnFuZW5tbGlxIXEVcRly3XKFcuFypXKtcsVyzXBheGl4WXhVeG14RXnheml6XXpxelV6WXvZeJl8nXylfgF+BX39ffF/dX+Bf/V/1X/9fD2AUYC9gNWAWYCpgFWAhYCdgKWArYBtgFmIVYj9iPmJAYn9iyWLMYsRiv2LCYrli0mLbYqti02LUYstiyGKoYr1ivGLQYtlix2LNYrVi2mKxYthi1mLXYsZirGLOYj5lp2W8ZfplFGYTZgxmBmYCZg5mAGYPZhVmCmYHZg1nC2dtZ4tnlWdxZ5xnc2d3Z4dnnWeXZ29ncGd/Z4lnfmeQZ3VnmmeTZ3xnamdyZyNrZmtna39rE2wbbONs6GzzbLFszGzlbLNsvWy+bLxs4myrbNVs02y4bMRsuWzBbK5s12zFbPFsv2y7bOFs22zKbKxs72zcbNZs4GyVcI5wknCKcJlwLHItcjhySHJncmlywHLOctly13LQcqlzqHOfc6tzpXM9dZ11mXWadYR2wnbydvR25Xf9dz55QHlBecl5yHl6enl6+nr+fFR/jH+LfwWAuoClgKKAsYChgKuAqYC0gKqAr4Dlgf6BDYKzgp2CmYKtgr2Cn4K5grGCrIKlgq+CuIKjgrCCvoK3gk6GcYYdUmiIy47Oj9SP0Y+1kLiQsZC2kMeR0ZF3lYCVHJZAlj+WO5ZElkKWuZbollKXXpefTq1Ork7hT7VPr0+/T+BP0U/PT91Pw0+2T9hP30/KT9dPrk/QT8RPwk/aT85P3k+3T1dRklGRUaBRTlJDUkpSTVJMUktSR1LHUslSw1LBUg1TV1N7U5pT21OsVMBUqFTOVMlUuFSmVLNUx1TCVL1UqlTBVMRUyFSvVKtUsVS7VKlUp1S/VP9WgleLV6BXo1eiV85XrleTV1VZUVlPWU5ZUFncWdhZ/1njWehZA1rlWepZ2lnmWQFa+1lpW6NbplukW6JbpVsBXE5cT1xNXEtc2VzSXPddHV4lXh9efV6gXqZe+l4IXy1fZV+IX4Vfil+LX4dfjF+JXxJgHWAgYCVgDmAoYE1gcGBoYGJgRmBDYGxga2BqYGRgQWLcYhZjCWP8Yu1iAWPuYv1iB2PxYvdi72LsYv5i9GIRYwJjP2VFZatlvWXiZSVmLWYgZidmL2YfZihmMWYkZvdm/2fTZ/Fn1GfQZ+xntmevZ/Vn6WfvZ8Rn0We0Z9pn5We4Z89n3mfzZ7Bn2WfiZ91n0mdqa4Nrhmu1a9Jr12sfbMlsC20ybSptQW0lbQxtMW0ebRdtO209bT5tNm0bbfVsOW0nbThtKW0ubTVtDm0rbatwunCzcKxwr3CtcLhwrnCkcDBycnJvcnRy6XLgcuFyt3PKc7tzsnPNc8Bzs3MadS11T3VMdU51S3WrdaR1pXWidaN1eHaGdod2iHbIdsZ2w3bFdgF3+Xb4dgl3C3f+dvx2B3fcdwJ4FHgMeA14RnlJeUh5R3m5ebp50XnSect5f3qBev96/Xp9fAJ9BX0AfQl9B30EfQZ9OH+Of79/BIAQgA2AEYA2gNaA5YDagMOAxIDMgOGA24DOgN6A5IDdgPSBIoLnggODBYPjgtuC5oIEg+WCAoMJg9KC14LxggGD3ILUgtGC3oLTgt+C74IGg1CGeYZ7hnqGTYhriIGJ1IkIigKKA4qejKCMdI1zjbSNzY7MjvCP5o/ij+qP5Y/tj+uP5I/oj8qQzpDBkMOQS5FKkc2RgpVQlkuWTJZNlmKXaZfLl+2X85cBmKiY25jfmJaZmZlYTrNODFANUCNQ708mUCVQ+E8pUBZQBlA8UB9QGlASUBFQ+k8AUBRQKFDxTyFQC1AZUBhQ80/uTy1QKlD+TytQCVB8UaRRpVGiUc1RzFHGUctRVlJcUlRSW1JdUipTf1OfU51T31PoVBBVAVU3VfxU5VTyVAZV+lQUVelU7VThVAlV7lTqVOZUJ1UHVf1UD1UDVwRXwlfUV8tXw1cJWA9ZV1lYWVpZEVoYWhxaH1obWhNa7FkgWiNaKVolWgxaCVprW1hcsFuzW7ZbtFuuW7VbuVu4WwRcUVxVXFBc7Vz9XPtc6lzoXPBc9lwBXfRc7l0tXiteq16tXqdeMV+SX5FfkF9ZYGNgZWBQYFVgbWBpYG9ghGCfYJpgjWCUYIxghWCWYEdi82IIY/9iTmM+Yy9jVWNCY0ZjT2NJYzpjUGM9YypjK2MoY01jTGNIZUllmWXBZcVlQmZJZk9mQ2ZSZkxmRWZBZvhmFGcVZxdnIWg4aEhoRmhTaDloQmhUaClos2gXaExoUWg9aPRnUGhAaDxoQ2gqaEVoE2gYaEFoimuJa7drI2wnbChsJmwkbPBsam2VbYhth21mbXhtd21ZbZNtbG2JbW5tWm10bWltjG2KbXlthW1lbZRtynDYcORw2XDIcM9wOXJ5cvxy+XL9cvhy93KGc+1zCXTuc+Bz6nPec1R1XXVcdVp1WXW+dcV1x3WydbN1vXW8dbl1wnW4dYt2sHbKds12znYpdx93IHcod+l3MHgneDh4HXg0eDd4JXgteCB4H3gyeFV5UHlgeV95VnleeV15V3laeeR543nned955nnpedh5hHqIetl6BnsRe4l8IX0XfQt9Cn0gfSJ9FH0QfRV9Gn0cfQ19GX0bfTp/X3+Uf8V/wX8GgBiAFYAZgBeAPYA/gPGAAoHwgAWB7YD0gAaB+IDzgAiB/YAKgfyA74DtgeyBAIIQgiqCK4IogiyCu4Irg1KDVINKgziDUINJgzWDNINPgzKDOYM2gxeDQIMxgyiDQ4NUhoqGqoaThqSGqYaMhqOGnIZwiHeIgYiCiH2IeYgYihCKDooMihWKCooXihOKFooPihGKSIx6jHmMoYyijHeNrI7SjtSOz46xjwGQBpD3jwCQ+o/0jwOQ/Y8FkPiPlZDhkN2Q4pBSkU2RTJHYkd2R15HckdmRg5VilmOWYZZbll2WZJZYll6Wu5bimKyZqJrYmiWbMps8m35OelB9UFxQR1BDUExQWlBJUGVQdlBOUFVQdVB0UHdQT1APUG9QbVBcUZVR8FFqUm9S0lLZUthS1VIQUw9TGVM/U0BTPlPDU/xmRlVqVWZVRFVeVWFVQ1VKVTFVVlVPVVVVL1VkVThVLlVcVSxVY1UzVUFVV1UIVwtXCVffVwVYClgGWOBX5Ff6VwJYNVj3V/lXIFliWTZaQVpJWmZaalpAWjxaYlpaWkZaSlpwW8dbxVvEW8Jbv1vGWwlcCFwHXGBcXFxdXAddBl0OXRtdFl0iXRFdKV0UXRldJF0nXRdd4l04XjZeM143XrdeuF62XrVevl41XzdfV19sX2lfa1+XX5lfnl+YX6FfoF+cX39go2CJYKBgqGDLYLRg5mC9YMVgu2C1YNxgvGDYYNVgxmDfYLhg2mDHYBpiG2JIYqBjp2NyY5ZjomOlY3djZ2OYY6pjcWOpY4ljg2ObY2tjqGOEY4hjmWOhY6xjkmOPY4Bje2NpY2hjemNdZVZlUWVZZVdlX1VPZVhlVWVUZZxlm2WsZc9ly2XMZc5lXWZaZmRmaGZmZl5m+WbXUhtngWivaKJok2i1aH9odmixaKdol2iwaINoxGitaIZohWiUaJ1oqGifaKFogmgya7pr62vsaytsjm28bfNt2W2ybeFtzG3kbftt+m0Fbsdty22vbdFtrm3ebfltuG33bfVtxW3SbRputW3abett2G3qbfFt7m3obcZtxG2qbextv23mbflwCXEKcf1w73A9cn1ygXIccxtzFnMTcxlzh3MFdAp0A3QGdP5zDXTgdPZ093QcdSJ1ZXVmdWJ1cHWPddR11XW1dcp1zXWOdtR20nbbdjd3Pnc8dzZ3OHc6d2t4Q3hOeGV5aHlteft5knqVeiB7KHsbeyx7JnsZex57LnuSfJd8lXxGfUN9cX0ufTl9PH1AfTB9M31EfS99Qn0yfTF9PX+ef5p/zH/Of9J/HIBKgEaAL4EWgSOBK4EpgTCBJIECgjWCN4I2gjmCjoOeg5iDeIOig5aDvYOrg5KDioOTg4mDoIN3g3uDfIOGg6eDVYZqX8eGwIa2hsSGtYbGhsuGsYavhsmGU4ieiIiIq4iSiJaIjYiLiJOJj4kqih2KI4olijGKLYofihuKIopJjFqMqYysjKuMqIyqjKeMZ41mjb6Nuo3bjt+OGZANkBqQF5AjkB+QHZAQkBWQHpAgkA+QIpAWkBuQFJDokO2Q/ZBXkc6R9ZHmkeOR55HtkemRiZVqlnWWc5Z4lnCWdJZ2lneWbJbAluqW6Zbget96ApgDmFqb5Zx1nn+epZ67nqJQjVCFUJlQkVCAUJZQmFCaUABn8VFyUnRSdVJpUt5S3VLbUlpTpVN7VYBVp1V8VYpVnVWYVYJVnFWqVZRVh1WLVYNVs1WuVZ9VPlWyVZpVu1WsVbFVflWJVatVmVUNVy9YKlg0WCRYMFgxWCFYHVggWPlY+lhgWXdamlp/WpJam1qnWnNbcVvSW8xb01vQWwpcC1wxXExdUF00XUdd/V1FXj1eQF5DXn5eyl7BXsJexF48X21fqV+qX6hf0WDhYLJgtmDgYBxhI2H6YBVh8GD7YPRgaGHxYA5h9mAJYQBhEmEfYklio2OMY89jwGPpY8ljxmPNY9Jj42PQY+Fj1mPtY+5jdmP0Y+pj22NSZNpj+WNeZWZlYmVjZZFlkGWvZW5mcGZ0ZnZmb2aRZnpmfmZ3Zv5m/2YfZx1n+mjVaOBo2GjXaAVp32j1aO5o52j5aNJo8mjjaMtozWgNaRJpDmnJaNpobmn7aD5rOms9a5hrlmu8a+9rLmwvbCxsL244blRuIW4ybmduSm4gbiVuI24bbltuWG4kblZubm4tbiZub240bk1uOm4sbkNuHW4+bstuiW4Zbk5uY25EbnJuaW5fbhlxGnEmcTBxIXE2cW5xHHFMcoRygHI2cyVzNHMpczp0KnQzdCJ0JXQ1dDZ0NHQvdBt0JnQodCV1JnVrdWp14nXbdeN12XXYdd514HV7dnx2lnaTdrR23HZPd+13XXhseG94DXoIegt6BXoAeph6l3qWeuV643pJe1Z7RntQe1J7VHtNe0t7T3tRe598pXxefVB9aH1VfSt9bn1yfWF9Zn1ifXB9c32EVdR/1X8LgFKAhYBVgVSBS4FRgU6BOYFGgT6BTIFTgXSBEoIcgumDA4T4gw2E4IPFgwuEwYPvg/GD9INXhAqE8IMMhMyD/YPyg8qDOIQOhASE3IMHhNSD34Nbht+G2YbthtSG24bkhtCG3oZXiMGIwoixiIOJlok7imCKVYpeijyKQYpUiluKUIpGijSKOoo2ilaKYYyCjK+MvIyzjL2MwYy7jMCMtIy3jLaMv4y4jIqNhY2Bjc6N3Y3LjdqN0Y3MjduNxo37jviO/I6cjy6QNZAxkDiQMpA2kAKR9ZAJkf6QY5Flkc+RFJIVkiOSCZIekg2SEJIHkhGSlJWPlYuVkZWTlZKVjpWKlo6Wi5Z9loWWhpaNlnKWhJbBlsWWxJbGlseW75bylsyXBZgGmAiY55jqmO+Y6ZjymO2YrpmtmcOezZ7RnoJOrVC1ULJQs1DFUL5QrFC3ULtQr1DHUH9Sd1J9Ut9S5lLkUuJS41IvU99V6FXTVeZVzlXcVcdV0VXjVeRV71XaVeFVxVXGVeVVyVUSVxNXXlhRWFhYV1haWFRYa1hMWG1YSlhiWFJYS1hnWcFayVrMWr5avVq8WrNawlqyWmldb11MXnleyV7IXhJfWV+sX65fGmEPYUhhH2HzYBth+WABYQhhTmFMYURhTWE+YTRhJ2ENYQZhN2EhYiJiE2Q+ZB5kKmQtZD1kLGQPZBxkFGQNZDZkFmQXZAZkbGWfZbBll2aJZodmiGaWZoRmmGaNZgNnlGltaVppd2lgaVRpdWkwaYJpSmloaWtpXmlTaXlphmldaWNpW2lHa3JrwGu/a9Nr/Wuibq9u0262bsJukG6dbsduxW6lbphuvG66bqtu0W6WbpxuxG7Ubqpup260bk5xWXFpcWRxSXFncVxxbHFmcUxxZXFecUZxaHFWcTpyUnI3c0VzP3M+c290WnRVdF90XnRBdD90WXRbdFx0dnV4dQB28HUBdvJ18XX6df919HXzdd5233Zbd2t3Znded2N3eXdqd2x3XHdld2h3Ynfud454sHiXeJh4jHiJeHx4kXiTeH94enl/eYF5LIS9eRx6GnogehR6H3oeep96oHp3e8B7YHtue2d7sXyzfLV8k315fZF9gX2PfVt9bn9pf2p/cn+pf6h/pH9WgFiAhoCEgHGBcIF4gWWBboFzgWuBeYF6gWaBBYJHgoKEd4Q9hDGEdYRmhGuESYRshFuEPIQ1hGGEY4RphG2ERoRehlyGX4b5hhOHCIcHhwCH/ob7hgKHA4cGhwqHWYjfiNSI2YjciNiI3YjhiMqI1YjSiJyJ44lrinKKc4pmimmKcIqHinyKY4qginGKhYptimKKbopsinmKe4o+imiKYoyKjImMyozHjMiMxIyyjMOMwozFjOGN343oje+N8436jeqN5I3mjbKOA48Jj/6OCo+fj7KPS5BKkFOQQpBUkDyQVZBQkEeQT5BOkE2QUZA+kEGQEpEXkWyRapFpkcmRN5JXkjiSPZJAkj6SW5JLkmSSUZI0kkmSTZJFkjmSP5JakpiVmJaUlpWWzZbLlsmWypb3lvuW+Zb2llaXdJd2lxCYEZgTmAqYEpgMmPyY9Jj9mP6Ys5mxmbSZ4ZrpnIKeDp8TnyCf51DuUOVQ1lDtUNpQ1VDPUNFQ8VDOUOlQYlHzUYNSglIxU61T/lUAVhtWF1b9VRRWBlYJVg1WDlb3VRZWH1YIVhBW9lUYVxZXdVh+WINYk1iKWHlYhVh9WP1YJVkiWSRZallpWeFa5lrpWtda1lrYWuNadVveW+db4VvlW+Zb6FviW+Rb31sNXGJchF2HXVteY15VXldeVF7TXtZeCl9GX3BfuV9HYT9hS2F3YWJhY2FfYVphWGF1YSpih2RYZFRkpGR4ZF9kemRRZGdkNGRtZHtkcmWhZddl1mWiZqhmnWacaahplWnBaa5p02nLaZtpt2m7aatptGnQac1prWnMaaZpw2mjaUlrTGszbDNvFG/+bhNv9G4pbz5vIG8sbw9vAm8ib/9u724GbzFvOG8ybyNvFW8rby9viG8qb+xuAW/ybsxu926UcZlxfXGKcYRxknE+cpJylnJEc1BzZHRjdGp0cHRtdAR1kXUndg12C3YJdhN24XbjdoR3fXd/d2F3wXifeKd4s3ipeKN4jnmPeY15Lnoxeqp6qXrteu96oXuVe4t7dXuXe517lHuPe7h7h3uEe7l8vXy+fLt9sH2cfb19vn2gfcp9tH2yfbF9un2ifb99tX24fa190n3Hfax9cH/gf+F/339egFqAh4BQgYCBj4GIgYqBf4GCgeeB+oEHghSCHoJLgsmEv4TGhMSEmYSehLKEnITLhLiEwITThJCEvITRhMqEP4cchzuHIoclhzSHGIdVhzeHKYfziAKJ9Ij5iPiI/YjoiBqJ74imioyKnoqjio2KoYqTiqSKqoqliqiKmIqRipqKp4pqjI2MjIzTjNGM0oxrjZmNlY38jRSPEo8VjxOPo49gkFiQXJBjkFmQXpBikF2QW5AZkRiRHpF1kXiRd5F0kXiSgJKFkpiSlpJ7kpOSnJKoknySkZKhlaiVqZWjlaWVpJWZlpyWm5bMltKWAJd8l4WX9pcXmBiYr5ixmAOZBZkMmQmZwZmvmrCa5ppBm0Kb9Jz2nPOcvJ47n0qfBFEAUftQ9VD5UAJRCFEJUQVR3FGHUohSiVKNUopS8FKyUy5WO1Y5VjJWP1Y0VilWU1ZOVldWdFY2Vi9WMFaAWJ9YnlizWJxYrlipWKZYbVkJW/taC1v1WgxbCFvuW+xb6VvrW2RcZVydXZRdYl5fXmFe4l7aXt9e3V7jXuBeSF9xX7dftV92YWdhbmFdYVVhgmF8YXBha2F+YadhkGGrYY5hrGGaYaRhlGGuYS5iaWRvZHlknmSyZIhkkGSwZKVkk2SVZKlkkmSuZK1kq2SaZKxkmWSiZLNkdWV3ZXhlrmarZrRmsWYjah9q6GkBah5qGWr9aSFqE2oKavNpAmoFau1pEWpQa05rpGvFa8ZrP298b4RvUW9mb1Rvhm9tb1tveG9ub45vem9wb2Rvl29Yb9Vub29gb19vn3GscbFxqHFWcptyTnNXc2l0i3SDdH50gHR/dSB2KXYfdiR2JnYhdiJ2mna6duR2jneHd4x3kXeLd8t4xXi6eMp4vnjVeLx40Hg/ejx6QHo9ejd6O3qveq56rXuxe8R7tHvGe8d7wXuge8x7ynzgffR97337fdh97H3dfeh9433afd596X2efdl98n35fXV/d3+vf+l/JoCbgZyBnYGggZqBmIEXhT2FGoXuhCyFLYUThRGFI4UhhRSF7IQlhf+EBoWCh3SHdodgh2aHeIdoh1mHV4dMh1OHW4hdiBCJB4kSiROJFYkKibyK0orHisSKlYrLiviKsorJisKKv4qwitaKzYq2irmK24pMjE6MbIzgjN6M5ozkjOyM7YzijOOM3IzqjOGMbY2fjaONK44Qjh2OIo4PjimOH44hjh6Ouo4djxuPH48pjyaPKo8cjx6PJY9pkG6QaJBtkHeQMJEtkSeRMZGHkYmRi5GDkcWSu5K3kuqSrJLkksGSs5K8ktKSx5LwkrKSrZWxlQSXBpcHlwmXYJeNl4uXj5chmCuYHJizmAqZE5kSmRiZ3ZnQmd+Z25nRmdWZ0pnZmbea7prvmiebRZtEm3ebb5sGnQmdA52pnr6ezp6oWFKfElEYURRREFEVUYBRqlHdUZFSk1LzUllWa1Z5VmlWZFZ4VmpWaFZlVnFWb1ZsVmJWdlbBWL5Yx1jFWG5ZHVs0W3hb8FsOXEpfsmGRYalhimHNYbZhvmHKYchhMGLFZMFky2S7ZLxk2mTEZMdkwmTNZL9k0mTUZL5kdGXGZslmuWbEZsdmuGY9ajhqOmpZamtqWGo5akRqYmphaktqR2o1al9qSGpZa3drBWzCb7FvoW/Db6RvwW+nb7NvwG+5b7Zvpm+gb7RvvnHJcdBx0nHIcdVxuXHOcdlx3HHDccRxaHOcdKN0mHSfdJ504nQMdQ11NHY4djp253bldqB3nnefd6V36HjaeOx453imeU16TnpGekx6S3q6etl7EXzJe+R723vhe+l75nvVfNZ8Cn4Rfgh+G34jfh5+HX4JfhB+eX+yf/B/8X/ufyiAs4GpgaiB+4EIgliCWYJKhVmFSIVohWmFQ4VJhW2FaoVehYOHn4eeh6KHjYdhiCqJMokliSuJIYmqiaaJ5or6iuuK8YoAi9yK54ruiv6KAYsCi/eK7YrzivaK/IprjG2Mk4z0jESOMY40jkKOOY41jjuPL484jzOPqI+mj3WQdJB4kHKQfJB6kDSRkpEgkzaT+JIzky+TIpP8kiuTBJMakxCTJpMhkxWTLpMZk7uVp5aolqqW1ZYOlxGXFpcNlxOXD5dbl1yXZpeYlzCYOJg7mDeYLZg5mCSYEJkomR6ZG5khmRqZ7ZnimfGZuJq8mvua7Zoom5GbFZ0jnSadKJ0SnRud2J7Uno2fnJ8qUR9RIVEyUfVSjlaAVpBWhVaHVo9W1VjTWNFYzlgwWypbJFt6WzdcaFy8XbpdvV24XWteTF+9X8lhwmHHYeZhy2EyYjRizmTKZNhk4GTwZOZk7GTxZOJk7WSCZYNl2WbWZoBqlGqEaqJqnGrbaqNqfmqXapBqoGpca65r2msIbNhv8W/fb+Bv22/kb+tv72+Ab+xv4W/pb9Vv7m/wb+dx33HuceZx5XHtcexx9HHgcTVyRnJwc3JzqXSwdKZ0qHRGdkJ2THbqdrN3qnewd6x3p3etd+9393j6ePR473gBead5qnlXer96B3wNfP5793sMfOB74HzcfN584nzffNl83Xwufj5+Rn43fjJ+Q34rfj1+MX5FfkF+NH45fkh+NX4/fi9+RH/zf/x/cYBygHCAb4BzgMaBw4G6gcKBwIG/gb2ByYG+geiBCYJxgqqFhIV+hZyFkYWUha+Fm4WHhaiFioVnhsCH0Yezh9KHxoerh7uHuofIh8uHO4k2iUSJOIk9iayJDosXixmLG4sKiyCLHYsEixCLQYw/jHOM+oz9jPyM+Iz7jKiNSY5LjkiOSo5Ejz6PQo9Fjz+Pf5B9kISQgZCCkICQOZGjkZ6RnJFNk4KTKJN1k0qTZZNLkxiTfpNsk1uTcJNak1STypXLlcyVyJXGlbGWuJbWlhyXHpegl9OXRpi2mDWZAZr/ma6bq5uqm62bO50/nYuez57entye3Z7bnj6fS5/iU5VWrlbZWNhYOFtdX+NhM2L0ZPJk/mQGZfpk+2T3ZLdl3GYmZ7NqrGrDartquGrCaq5qr2pfa3hrr2sJcAtw/m8GcPpvEXAPcPtx/HH+cfhxd3N1c6d0v3QVdVZ2WHZSdr13v3e7d7x3DnmueWF6YnpgesR6xXorfCd8KnwefCN8IXznfFR+VX5eflp+YX5Sfll+SH/5f/t/d4B2gM2Bz4EKgs+FqYXNhdCFyYWwhbqFuYWmhe+H7Ifyh+CHhomyifSJKIs5iyyLK4tQjAWNWY5jjmaOZI5fjlWOwI5Jj02Ph5CDkIiQq5GskdCRlJOKk5aTopOzk66TrJOwk5iTmpOXk9SV1pXQldWV4pbcltmW25beliSXo5eml62X+ZdNmE+YTJhOmFOYupg+mT+ZPZkumaWZDprBmgObBptPm06bTZvKm8mb/ZvIm8CbUZ1dnWCd4J4VnyyfM1GlVt5Y31jiWPVbkJ/sXvJh92H2YfVhAGUPZeBm3Wblat1q2mrTahtwH3AocBpwHXAVcBhwBnINclhyonJ4c3pzvXTKdON0h3WGdV92YXbHdxl5sXlreml6Pnw/fDh8PXw3fEB8a35tfnl+aX5qfoV/c362f7l/uH/YgemF3YXqhdWF5IXlhfeF+4cFiA2I+Yf+h2CJX4lWiV6JQYtci1iLSYtai06LT4tGi1mLCI0KjXyOco6HjnaObI56jnSOVI9Oj62PipCLkLGRrpHhk9GT35PDk8iT3JPdk9aT4pPNk9iT5JPXk+iT3JW0luOWKpcnl2GX3Jf7l16YWJhbmLyYRZlJmRaaGZoNm+ib55vWm9ubiZ1hnXKdap1snZKel56TnrSe+FKoVrdWtla0VrxW5FhAW0NbfVv2W8ld+GH6YRhlFGUZZeZmJ2fsaj5wMHAycBBye3PPdGJ2ZXYmeSp5LHkrecd69npMfEN8TXzvfPB8ro99fnx+gn5MfwCA2oFmgvuF+YURhvqFBoYLhgeGCoYUiBWIZIm6ifiJcItsi2aLb4tfi2uLD40NjYmOgY6FjoKOtJHLkRiUA5T9k+GVMJfEmFKZUZmomSuaMJo3mjWaE5wNnHmetZ7oni+fX59jn2GfN1E4UcFWwFbCVhRZbFzNXfxh/mEdZRxllWXpZvtqBGv6arJrTHAbcqdy1nTUdGl203dQfI9+jH68fxeGLYYahiOIIoghiB+Iaolsib2JdIt3i32LE42Kjo2Oi45fj6+PupEulDOUNZQ6lDiUMpQrlOKVOJc5lzKX/5dnmGWYV5lFmkOaQJo+ms+aVJtRmy2cJZyvnbSdwp24nZ2e754Zn1yfZp9nnzxRO1HIVspWyVZ/W9Rd0l1OX/9hJGUKa2FrUXBYcIBz5HSKdW52bHazeWB8X3x+gH2A34FyiW+J/ImAixaNF42RjpOOYY9IkUSUUZRSlD2XPpfDl8GXa5hVmVWaTZrSmhqbSZwxnD6cO5zTndedNJ9sn2qflJ/MVtZdAGIjZStlKmXsZhBr2nTKemR8Y3xlfJN+ln6UfuKBOIY/hjGIiouQkI+QY5RglGSUaJdvmFyZWppbmlea05rUmtGaVJxXnFac5Z2fnvSe0VbpWCxlXnBxdnJ213dQf4h/Nog5iGKIk4uSi5aLd4IbjcCRapRCl0iXRJfGl3CYX5oim1ibX5z5nfqdfJ59ngefd59yn/NeFmtjcGx8bnw7iMCJoY7BkXKUcJRxmF6Z1pojm8yeZHDad5qLd5TJl2KaZZqcfpyLqo7FkX2UfpR8lHeceJz3nlSMf5QanihyapoxmxueHp5yfGAkYSRiJGMkZCRlJGYkZyRoJGkkdCR1JHYkdyR4JHkkeiR7JHwkfSRwIXEhciFzIXQhdSF2IXcheCF5ITZOP06FTqBOglGWUatR+VI4U2lTtlMKWYBb2116Xn9e9F5QX2FfNGXgZZJ1dna1j7aWqADGAv0w/jCdMJ4wAAAAAAUwBjAHMPwwO/89/z0nQTBCMEMwRDBFMEYwRzBIMEkwSjBLMEwwTTBOME8wUDBRMFIwUzBUMFUwVjBXMFgwWTBaMFswXDBdMF4wXzBgMGEwYjBjMGQwZTBmMGcwaDBpMGowazBsMG0wbjBvMHAwcTByMHMwdDB1MHYwdzB4MHkwejB7MHwwfTB+MH8wgDCBMIIwgzCEMIUwhjCHMIgwiTCKMIswjDCNMI4wjzCQMJEwkjCTMKEwojCjMKQwpTCmMKcwqDCpMKowqzCsMK0wrjCvMLAwsTCyMLMwtDC1MLYwtzC4MLkwujC7MLwwvTC+ML8wwDDBMMIwwzDEMMUwxjDHMMgwyTDKMMswzDDNMM4wzzDQMNEw0jDTMNQw1TDWMNcw2DDZMNow2zDcMN0w3jDfMOAw4TDiMOMw5DDlMOYw5zDoMOkw6jDrMOww7TDuMO8w8DDxMPIw8zD0MPUw9jAQBBEEEgQTBBQEFQQBBBYEFwQYBBkEGgQbBBwEHQQeBB8EIAQhBCIEIwQkBCUEJgQnBCgEKQQqBCsELAQtBC4ELwQwBDEEMgQzBDQENQRRBDYENwQ4BDkEOgQ7BDwEPQQ+BD8EQARBBEIEQwREBEUERgRHBEgESQRKBEsETARNBE4ETwTnIbghuSHPMcwAWk6KAAJSkUSwn4hRsZ8HdgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4v/k/wf/Av8xMhYhISGbMJwwgC6ELoYuhy6ILooujC6NLpUunC6dLqUupy6qLqwuri62Lrwuvi7GLsouzC7NLs8u1i7XLt4u4y4AAAAAAACDAlACWwJUAnUCUwH4AEsBigJqAkJOXE71URpTglMHTgxOR06NTtdWDPpuXHNfD06HUQ5OLk6TTsJOyU7ITphR/FJsU7lTIFcDWSxZEFz/XeFls2vMaxRsP3IxTjxO6E7cTulO4U7dTtpODFIcU0xTIlcjVxdZL1mBW4RbElw7XHRcc1wEXoBegl7JXwliUGIVbDZsQ2w/bDtsrnKwcopzuHmKgB6WDk8YTyxP9U4UT/FOAE/3TghPHU8CTwVPIk8TTwRP9E4ST7FRE1IJUhBSplIiUx9TTVOKUwdU4VbfVi5XKlc0VzxZgFl8WYVZe1l+WXdZf1lWWxVcJVx8XHpce1x+XN9ddV6EXgJfGl90X9Vf1F/PX1xiXmJkYmFiZmJiYlliYGJaYmVi72XuZT5nOWc4ZztnOmc/ZzxnM2cYbEZsUmxcbE9sSmxUbEtsTGxxcF5ytHK1co5zKnV/dnV6UX94gnyCgIJ9gn+CTYZ+iZmQl5CYkJuQlJAiliSWIJYjllZPO09iT0lPU09kTz5PZ09ST19PQU9YTy1PM08/T2FPj1G5URxSHlIhUq1SrlIJU2NTclOOU49TMFQ3VCpUVFRFVBlUHFQlVBhUPVRPVEFUKFQkVEdU7lbnVuVWQVdFV0xXSVdLV1JXBllAWaZZmFmgWZdZjlmiWZBZj1mnWaFZjluSWyhcKlyNXI9ciFyLXIlcklyKXIZck1yVXOBdCl4OXoteiV6MXohejV4FXx1feF92X9Jf0V/QX+1f6F/uX/Nf4V/kX+Nf+l/vX/df+18AYPRfOmKDYoxijmKPYpRih2JxYntiemJwYoFiiGJ3Yn1icmJ0Yjdl8GX0ZfNl8mX1ZUVnR2dZZ1VnTGdIZ11nTWdaZ0tn0GsZbBpseGxnbGtshGyLbI9scWxvbGlsmmxtbIdslWycbGZsc2xlbHtsjmx0cHpwY3K/cr1yw3LGcsFyunLFcpVzl3OTc5RzknM6dTl1lHWVdYF2PXk0gJWAmYCQgJKAnICQgo+ChYKOgpGCk4KKgoOChIJ4jMmPv4+fkKGQpZCekKeQoJAwliiWL5YtljNOmE98T4VPfU+AT4dPdk90T4lPhE93T0xPl09qT5pPeU+BT3hPkE+cT5RPnk+ST4JPlU9rT25PnlG8Ub5RNVIyUjNSRlIxUrxSClMLUzxTklOUU4dUf1SBVJFUglSIVGtUelR+VGVUbFR0VGZUjVRvVGFUYFSYVGNUZ1RkVPdW+VZvV3JXbVdrV3FXcFd2V4BXdVd7V3NXdFdiV2hXfVcMWUVZtVm6Wc9ZzlmyWcxZwVm2WbxZw1nWWbFZvVnAWchZtFnHWWJbZVuTW5VbRFxHXK5cpFygXLVcr1yoXKxcn1yjXK1colyqXKdcnVylXLZcsFymXBdeFF4ZXihfIl8jXyRfVF+CX35ffV/eX+VfLWAmYBlgMmALYDRgCmAXYDNgGmAeYCxgImANYBBgLmATYBFgDGAJYBxgFGI9Yq1itGLRYr5iqmK2YspirmKzYq9iu2KpYrBiuGI9Zahlu2UJZvxlBGYSZghm+2UDZgtmDWYFZv1lEWYQZvZmCmeFZ2xnjmeSZ3Zne2eYZ4ZnhGd0Z41njGd6Z59nkWeZZ4NnfWeBZ3hneWeUZyVrgGt+a95rHWyTbOxs62zubNlstmzUbK1s52y3bNBswmy6bMNsxmztbPJs0mzdbLRsimydbIBs3mzAbDBtzWzHbLBs+WzPbOls0WyUcJhwhXCTcIZwhHCRcJZwgnCacINwanLWcsty2HLJctxy0nLUctpyzHLRcqRzoXOtc6ZzonOgc6xznXPddOh0P3VAdT51jHWYda9283bxdvB29Xb4d/x3+Xf7d/p393dCeT95xXl4ent6+3p1fP18NYCPgK6Ao4C4gLWArYAggqCCwIKrgpqCmIKbgrWCp4KugryCnoK6grSCqIKhgqmCwoKkgsOCtoKignCGb4Zthm6GVozSj8uP04/Nj9aP1Y/Xj7KQtJCvkLOQsJA5lj2WPJY6lkOWzU/FT9NPsk/JT8tPwU/UT9xP2U+7T7NP20/HT9ZPuk/AT7lP7E9EUklSwFLCUj1TfFOXU5ZTmVOYU7pUoVStVKVUz1TDVA2Dt1SuVNZUtlTFVMZUoFRwVLxUolS+VHJU3lSwVLVXnlefV6RXjFeXV51Xm1eUV5hXj1eZV6VXmleVV/RYDVlTWeFZ3lnuWQBa8VndWfpZ/Vn8WfZZ5FnyWfdZ21npWfNZ9VngWf5Z9FntWahbTFzQXNhczFzXXMtc21zeXNpcyVzHXMpc1lzTXNRcz1zIXMZczlzfXPhc+V0hXiJeI14gXiResF6kXqJem16jXqVeB18uX1Zfhl83YDlgVGByYF5gRWBTYEdgSWBbYExgQGBCYF9gJGBEYFhgZmBuYEJiQ2LPYg1jC2P1Yg5jA2PrYvliD2MMY/hi9mIAYxNjFGP6YhVj+2LwYkFlQ2WqZb9lNmYhZjJmNWYcZiZmImYzZitmOmYdZjRmOWYuZg9nEGfBZ/JnyGe6Z9xnu2f4Z9hnwGe3Z8Vn62fkZ99ntWfNZ7Nn92f2Z+5n42fCZ7lnzmfnZ/Bnsmf8Z8Zn7WfMZ65n5mfbZ/pnyWfKZ8Nn6mfLZyhrgmuEa7Zr1mvYa+BrIGwhbChtNG0tbR9tPG0/bRJtCm3abDNtBG0ZbTptGm0RbQBtHW1CbQFtGG03bQNtD21AbQdtIG0sbQhtIm0JbRBtt3CfcL5wsXCwcKFwtHC1cKlwQXJJckpybHJwcnNybnLKcuRy6HLrct9y6nLmcuNyhXPMc8JzyHPFc7lztnO1c7Rz63O/c8dzvnPDc8ZzuHPLc+x07nQudUd1SHWndap1eXbEdgh3A3cEdwV3Cnf3dvt2+nbnd+h3BngReBJ4BXgQeA94DngJeAN4E3hKeUx5S3lFeUR51XnNec951nnOeYB6fnrRegB7AXt6fHh8eXx/fIB8gXwDfQh9AX1Yf5F/jX++fweADoAPgBSAN4DYgMeA4IDRgMiAwoDQgMWA44DZgNyAyoDVgMmAz4DXgOaAzYD/gSGClILZgv6C+YIHg+iCAIPVgjqD64LWgvSC7ILhgvKC9YIMg/uC9oLwguqC5ILggvqC84LtgneGdIZ8hnOGQYhOiGeIaohpiNOJBIoHinKN44/hj+6P4I/xkL2Qv5DVkMWQvpDHkMuQyJDUkdORVJZPllGWU5ZKlk6WHlAFUAdQE1AiUDBQG1D1T/RPM1A3UCxQ9k/3TxdQHFAgUCdQNVAvUDFQDlBaUZRRk1HKUcRRxVHIUc5RYVJaUlJSXlJfUlVSYlLNUg5TnlMmVeJUF1USVedU81TkVBpV/1QEVQhV61QRVQVV8VQKVftU91T4VOBUDlUDVQtVAVcCV8xXMljVV9JXulfGV71XvFe4V7ZXv1fHV9BXuVfBVw5ZSlkZWhZaLVouWhVaD1oXWgpaHlozWmxbp1utW6xbA1xWXFRc7Fz/XO5c8Vz3XABd+VwpXiheqF6uXqperF4zXzBfZ19dYFpgZ2BBYKJgiGCAYJJggWCdYINglWCbYJdgh2CcYI5gGWJGYvJiEGNWYyxjRGNFYzZjQ2PkYzljS2NKYzxjKWNBYzRjWGNUY1ljLWNHYzNjWmNRYzhjV2NAY0hjSmVGZcZlw2XEZcJlSmZfZkdmUWYSZxNnH2gaaEloMmgzaDtoS2hPaBZoMWgcaDVoK2gtaC9oTmhEaDRoHWgSaBRoJmgoaC5oTWg6aCVoIGgsay9rLWsxazRrbWuCgIhr5mvka+hr42via+drJWx6bWNtZG12bQ1tYW2SbVhtYm1tbW9tkW2Nbe9tf22GbV5tZ21gbZdtcG18bV9tgm2YbS9taG2LbX5tgG2EbRZtg217bX1tdW2Qbdxw03DRcN1wy3A5f+Jw13DScN5w4HDUcM1wxXDGcMdw2nDOcOFwQnJ4cndydnIAc/py9HL+cvZy83L7cgFz03PZc+Vz1nO8c+dz43Ppc9xz0nPbc9Rz3XPac9dz2HPoc95033T0dPV0IXVbdV91sHXBdbt1xHXAdb91tnW6dYp2yXYddxt3EHcTdxJ3I3cRdxV3GXcadyJ3J3cjeCx4Ing1eC94KHgueCt4IXgpeDN4KngxeFR5W3lPeVx5U3lSeVF563nseeB57nnteep53Hneed15hnqJeoV6i3qMeop6h3rYehB7BHsTewV7D3sIewp7DnsJexJ7hHyRfIp8jHyIfI18hXwefR19EX0OfRh9Fn0TfR99En0PfQx9XH9hf15/YH9df1t/ln+Sf8N/wn/AfxaAPoA5gPqA8oD5gPWAAYH7gACBAYIvgiWCM4Mtg0SDGYNRgyWDVoM/g0GDJoMcgyKDQoNOgxuDKoMIgzyDTYMWgySDIIM3gy+DKYNHg0WDTINTgx6DLINLgyeDSINThlKGooaohpaGjYaRhp6Gh4aXhoaGi4aahoWGpYaZhqGGp4aVhpiGjoadhpCGlIZDiESIbYh1iHaIcoiAiHGIf4hviIOIfoh0iHyIEopHjFeMe4ykjKOMdo14jbWNt422jdGO047+j/WPApD/j/uPBJD8j/aP1pDgkNmQ2pDjkN+Q5ZDYkNuQ15DckOSQUJFOkU+R1ZHikdqRXJZflryW45jfmi+bf05wUGpQYVBeUGBQU1BLUF1QclBIUE1QQVBbUEpQYlAVUEVQX1BpUGtQY1BkUEZQQFBuUHNQV1BRUNBRa1JtUmxSblLWUtNSLVOcU3VVdlU8VU1VUFU0VSpVUVViVTZVNVUwVVJVRVUMVTJVZVVOVTlVSFUtVTtVQFVLVQpXB1f7VxRY4lf2V9xX9FcAWO1X/VcIWPhXC1jzV89XB1juV+NX8lflV+xX4VcOWPxXEFjnVwFYDFjxV+lX8FcNWARYXFlgWlhaVVpnWl5aOFo1Wm1aUFpfWmVabFpTWmRaV1pDWl1aUlpEWltaSFqOWj5aTVo5WkxacFppWkdaUVpWWkJaXFpyW25bwVvAW1lcHl0LXR1dGl0gXQxdKF0NXSZdJV0PXTBdEl0jXR9dLl0+XjResV60Xrlesl6zXjZfOF+bX5Zfn1+KYJBghmC+YLBgumDTYNRgz2DkYNlg3WDIYLFg22C3YMpgv2DDYM1gwGAyY2VjimOCY31jvWOeY61jnWOXY6tjjmNvY4djkGNuY69jdWOcY21jrmN8Y6RjO2OfY3hjhWOBY5FjjWNwY1NlzWVlZmFmW2ZZZlxmYmYYZ3loh2iQaJxobWhuaK5oq2hWaW9oo2isaKlodWh0aLJoj2h3aJJofGhraHJoqmiAaHFofmibaJZoi2igaIlopGh4aHtokWiMaIpofWg2azNrN2s4a5Frj2uNa45rjGsqbMBtq220bbNtdG6sbelt4m23bfZt1G0Absht4G3fbdZtvm3lbdxt3W3bbfRtym29be1t8G26bdVtwm3Pbclt0G3ybdNt/W3Xbc1t4227bfpwDXH3cBdx9HAMcfBwBHHzcBBx/HD/cAZxE3EAcfhw9nALcQJxDnF+cntyfHJ/ch1zF3MHcxFzGHMKcwhz/3IPcx5ziHP2c/hz9XMEdAF0/XMHdAB0+nP8c/9zDHQLdPRzCHRkdWN1znXSdc91y3XMddF10HWPdol203Y5dy93LXcxdzJ3NHczdz13JXc7dzV3SHhSeEl4TXhKeEx4JnhFeFB4ZHlneWl5anljeWt5YXm7efp5+Hn2efd5j3qUepB6NXtHezR7JXsweyJ7JHszexh7KnsdezF7K3stey97Mns4exp7I3uUfJh8lnyjfDV9PX04fTZ9On1FfSx9KX1BfUd9Pn0/fUp9O30ofWN/lX+cf51/m3/Kf8t/zX/Qf9F/x3/Pf8l/H4AegBuAR4BDgEiAGIElgRmBG4EtgR+BLIEegSGBFYEngR2BIoERgjiCM4I6gjSCMoJ0gpCDo4Oog42DeoNzg6SDdIOPg4GDlYOZg3WDlIOpg32Dg4OMg52Dm4Oqg4uDfoOlg6+DiIOXg7CDf4Omg4eDroN2g5qDWYZWhr+Gt4bChsGGxYa6hrCGyIa5hrOGuIbMhrSGu4a8hsOGvYa+hlKIiYiViKiIooiqiJqIkYihiJ+ImIiniJmIm4iXiKSIrIiMiJOIjoiCidaJ2YnViTCKJ4osih6KOYw7jFyMXYx9jKWMfY17jXmNvI3CjbmNv43BjdiO3o7djtyO147gjuGOJJALkBGQHJAMkCGQ75DqkPCQ9JDykPOQ1JDrkOyQ6ZBWkViRWpFTkVWR7JH0kfGR85H4keSR+ZHqkeuR95Hoke6RepWGlYiVfJZtlmuWcZZvlr+WapcEmOWYl5mbUJVQlFCeUItQo1CDUIxQjlCdUGhQnFCSUIJQh1BfUdRRElMRU6RTp1ORVahVpVWtVXdVRVaiVZNViFWPVbVVgVWjVZJVpFV9VYxVplV/VZVVoVWOVQxXKVg3WBlYHlgnWCNYKFj1V0hYJVgcWBtYM1g/WDZYLlg5WDhYLVgsWDtYYVmvWpRan1p6WqJanlp4WqZafFqlWqxalVquWjdahFqKWpdag1qLWqlae1p9WoxanFqPWpNanVrqW81by1vUW9FbylvOWwxcMFw3XUNda11BXUtdP101XVFdTl1VXTNdOl1SXT1dMV1ZXUJdOV1JXThdPF0yXTZdQF1FXUReQV5YX6ZfpV+rX8lguWDMYOJgzmDEYBRh8mAKYRZhBWH1YBNh+GD8YP5gwWADYRhhHWEQYf9gBGELYUpilGOxY7BjzmPlY+hj72PDY51k82PKY+Bj9mPVY/Jj9WNhZN9jvmPdY9xjxGPYY9NjwmPHY8xjy2PIY/Bj12PZYzJlZ2VqZWRlXGVoZWVljGWdZZ5lrmXQZdJlfGZsZntmgGZxZnlmamZyZgFnDGnTaARp3Ggqaexo6mjxaA9p1mj3aOto5Gj2aBNpEGnzaOFoB2nMaAhpcGm0aBFp72jGaBRp+GjQaP1o/GjoaAtpCmkXac5oyGjdaN5o5mj0aNFoBmnUaOloFWklacdoOWs7az9rPGuUa5drmWuVa71r8Gvya/NrMGz8bUZuR24fbkluiG48bj1uRW5ibituP25Bbl1uc24cbjNuS25AblFuO24Dbi5uXm5oblxuYW4xbihuYG5xbmtuOW4ibjBuU25lbidueG5kbnduVW55blJuZm41bjZuWm4gcR5xL3H7cC5xMXEjcSVxInEycR9xKHE6cRtxS3JacohyiXKGcoVyi3IScwtzMHMiczFzM3MnczJzLXMmcyNzNXMMcy50LHQwdCt0FnQadCF0LXQxdCR0I3QddCl0IHQydPt0L3VvdWx153XadeF15nXddd915HXXdZV2knbadkZ3R3dEd013RXdKd053S3dMd9537HdgeGR4ZXhceG14cXhqeG54cHhpeGh4XnhieHR5c3lyeXB5AnoKegN6DHoEepl65nrkekp7O3tEe0h7THtOe0B7WHtFe6J8nnyofKF8WH1vfWN9U31WfWd9an1PfW19XH1rfVJ9VH1pfVF9X31OfT5/P39lf2Z/on+gf6F/139RgE+AUID+gNSAQ4FKgVKBT4FHgT2BTYE6geaB7oH3gfiB+YEEgjyCPYI/gnWCO4PPg/mDI4TAg+iDEoTng+SD/IP2gxCExoPIg+uD44O/gwGE3YPlg9iD/4Phg8uDzoPWg/WDyYMJhA+E3oMRhAaEwoPzg9WD+oPHg9GD6oMThMOD7IPug8SD+4PXg+KDG4Tbg/6D2IbihuaG04bjhtqG6obdhuuG3IbshumG14bohtGGSIhWiFWIuojXiLmIuIjAiL6Itoi8iLeIvYiyiAGJyYiViZiJl4ndidqJ24lOik2KOYpZikCKV4pYikSKRYpSikiKUYpKikyKT4pfjIGMgIy6jL6MsIy5jLWMhI2AjYmN2I3Tjc2Nx43WjdyNz43VjdmNyI3XjcWN7473jvqO+Y7mju6O5Y71jueO6I72juuO8Y7sjvSO6Y4tkDSQL5AGkSyRBJH/kPyQCJH5kPuQAZEAkQeRBZEDkWGRZJFfkWKRYJEBkgqSJZIDkhqSJpIPkgySAJISkv+R/ZEGkgSSJ5ICkhySJJIZkheSBZIWknuVjZWMlZCVh5Z+loiWiZaDloCWwpbIlsOW8ZbwlmyXcJdulweYqZjrmOac+Z6DToROtk69UL9QxlCuUMRQylC0UMhQwlCwUMFQulCxUMtQyVC2ULhQ11F6UnhSe1J8UsNV21XMVdBVy1XKVd1VwFXUVcRV6VW/VdJVjVXPVdVV4lXWVchV8lXNVdlVwlUUV1NYaFhkWE9YTVhJWG9YVVhOWF1YWVhlWFtYPVhjWHFY/FjHWsRay1q6WrhasVq1WrBav1rIWrtaxlq3WsBaylq0WrZazVq5WpBa1lvYW9lbH1wzXHFdY11KXWVdcl1sXV5daF1nXWJd8F1PXk5eSl5NXktexV7MXsZey17HXkBfr1+tX/dgSWFKYSthRWE2YTJhLmFGYS9hT2EpYUBhIGJokSNiJWIkYsVj8WPrYxBkEmQJZCBkJGQzZENkH2QVZBhkOWQ3ZCJkI2QMZCZkMGQoZEFkNWQvZApkGmRAZCVkJ2QLZOdjG2QuZCFkDmRvZZJl02WGZoxmlWaQZotmimaZZpRmeGYgZ2ZpX2k4aU5pYmlxaT9pRWlqaTlpQmlXaVlpemlIaUlpNWlsaTNpPWllafBoeGk0aWlpQGlvaURpdmlYaUFpdGlMaTtpS2k3aVxpT2lRaTJpUmkvaXtpPGlGa0VrQ2tCa0hrQWubaw36+2v8a/lr92v4a5tu1m7Ibo9uwG6fbpNulG6gbrFuuW7GbtJuvW7Bbp5uyW63brBuzW6mbs9usm6+bsNu3G7Ybplukm6Obo1upG6hbr9us27Qbspul26ubqNuR3FUcVJxY3FgcUFxXXFicXJxeHFqcWFxQnFYcUNxS3FwcV9xUHFTcURxTXFacU9yjXKMcpFykHKOcjxzQnM7czpzQHNKc0lzRHRKdEt0UnRRdFd0QHRPdFB0TnRCdEZ0TXRUdOF0/3T+dP10HXV5dXd1g2nvdQ92A3b3df51/HX5dfh1EHb7dfZ17XX1df11mXa1dt12VXdfd2B3UndWd1p3aXdnd1R3WXdtd+B3h3iaeJR4j3iEeJV4hXiGeKF4g3h5eJl4gHiWeHt4fHmCeX15eXkRehh6GXoSehd6FXoiehN6G3oQeqN6onqeeut6Zntke217dHtpe3J7ZXtze3F7cHthe3h7dntje7J8tHyvfIh9hn2AfY19f32FfXp9jn17fYN9fH2MfZR9hH19fZJ9bX9rf2d/aH9sf6Z/pX+nf9t/3H8hgGSBYIF3gVyBaYFbgWKBcoEhZ16BdoFngW+BRIFhgR2CSYJEgkCCQoJFgvGEP4RWhHaEeYSPhI2EZYRRhECEhoRnhDCETYR9hFqEWYR0hHOEXYQHhV6EN4Q6hDSEeoRDhHiEMoRFhCmE2YNLhC+EQoQthF+EcIQ5hE6ETIRShG+ExYSOhDuER4Q2hDOEaIR+hESEK4RghFSEboRQhAuHBIf3hgyH+obWhvWGTYf4hg6HCYcBh/aGDYcFh9aIy4jNiM6I3ojbiNqIzIjQiIWJm4nfieWJ5InhieCJ4oncieaJdoqGin+KYYo/ineKgoqEinWKg4qBinSKeoo8jEuMSoxljGSMZoyGjISMhYzMjGiNaY2RjYyNjo2PjY2Nk42UjZCNko3wjeCN7I3xje6N0I3pjeON4o3njfKN6430jQaP/44BjwCPBY8HjwiPAo8Lj1KQP5BEkEmQPZAQkQ2RD5ERkRaRFJELkQ6RbpFvkUiSUpIwkjqSZpIzkmWSXpKDki6SSpJGkm2SbJJPkmCSZ5JvkjaSYZJwkjGSVJJjklCScpJOklOSTJJWkjKSn5WclZ6Vm5WSlpOWkZaXls6W+pb9lviW9ZZzl3eXeJdylw+YDZgOmKyY9pj5mK+ZspmwmbWZrZqrmlub6pztnOecgJ79nuZQ1FDXUOhQ81DbUOpQ3VDkUNNQ7FDwUO9Q41DgUNhRgFKBUulS61IwU6xTJ1YVVgxWElb8VQ9WHFYBVhNWAlb6VR1WBFb/VflViVh8WJBYmFiGWIFYf1h0WItYeliHWJFYjlh2WIJYiFh7WJRYj1j+WGtZ3FruWuVa1VrqWtpa7VrrWvNa4lrgWtta7FreWt1a2VroWt9ad1vgW+NbY1yCXYBdfV2GXXpdgV13XYpdiV2IXX5dfF2NXXldf11YXlleU17YXtFe117OXtxe1V7ZXtJe1F5EX0Nfb1+2XyxhKGFBYV5hcWFzYVJhU2FyYWxhgGF0YVRhemFbYWVhO2FqYWFhVmEpYidiK2IrZE1kW2RdZHRkdmRyZHNkfWR1ZGZkpmROZIJkXmRcZEtkU2RgZFBkf2Q/ZGxka2RZZGVkd2RzZaBloWagZp9mBWcEZyJnsWm2aclpoGnOaZZpsGmsabxpkWmZaY5pp2mNaalpvmmvab9pxGm9aaRp1Gm5acppmmnPabNpk2mqaaFpnmnZaZdpkGnCabVppWnGaUprTWtLa55rn2uga8NrxGv+a85u9W7xbgNvJW/4bjdv+24ubwlvTm8ZbxpvJ28YbztvEm/tbgpvNm9zb/lu7m4tb0BvMG88bzVv624Hbw5vQ28Fb/1u9m45bxxv/G46bx9vDW8ebwhvIW+HcZBxiXGAcYVxgnGPcXtxhnGBcZdxRHJTcpdylXKTckNzTXNRc0xzYnRzdHF0dXRydGd0bnQAdQJ1A3V9dZB1FnYIdgx2FXYRdgp2FHa4doF3fHeFd4J3bneAd293fneDd7J4qni0eK14qHh+eKt4nnileKB4rHiieKR4mHmKeYt5lnmVeZR5k3mXeYh5knmQeSt6Snowei96KHomeqh6q3qseu56iHuce4p7kXuQe5Z7jXuMe5t7jnuFe5h7hFKZe6R7gnu7fL98vHy6fKd9t33CfaN9qn3BfcB9xX2dfc59xH3Gfct9zH2vfbl9ln28fZ99pn2ufal9oX3JfXN/4n/jf+V/3n8kgF2AXICJgYaBg4GHgY2BjIGLgRWCl4SkhKGEn4S6hM6EwoSshK6Eq4S5hLSEwYTNhKqEmoSxhNCEnYSnhLuEooSUhMeEzISbhKmEr4SohNaEmIS2hM+EoITXhNSE0oTbhLCEkYRhhjOHI4coh2uHQIcuhx6HIYcZhxuHQ4csh0GHPodGhyCHMocqhy2HPIcShzqHMYc1h0KHJocnhziHJIcahzCHEYf3iOeI8YjyiPqI/ojuiPyI9oj7iPCI7IjriJ2JoYmfiZ6J6YnrieiJq4qZiouKkoqPipaKPYxojGmM1YzPjNeMlo0JjgKO/40Njv2NCo4DjgeOBo4Fjv6NAI4EjhCPEY8Ojw2PI5EckSCRIpEfkR2RGpEkkSGRG5F6kXKReZFzkaWSpJJ2kpuSepKgkpSSqpKNkqaSmpKrknmSl5J/kqOS7pKOkoKSlZKikn2SiJKhkoqShpKMkpmSp5J+koeSqZKdkouSLZKelqGW/5ZYl32Xepd+l4OXgJeCl3uXhJeBl3+XzpfNlxaYrZiumAKZAJkHmZ2ZnJnDmbmZu5m6mcKZvZnHmbGa45rnmj6bP5tgm2GbX5vxnPKc9Zynnv9QA1EwUfhQBlEHUfZQ/lALUQxR/VAKUYtSjFLxUu9SSFZCVkxWNVZBVkpWSVZGVlhWWlZAVjNWPVYsVj5WOFYqVjpWGlerWJ1YsVigWKNYr1isWKVYoVj/WP9a9Fr9Wvda9loDW/haAlv5WgFbB1sFWw9bZ1yZXZddn12SXaJdk12VXaBdnF2hXZpdnl1pXl1eYF5cXvN9217eXuFeSV+yX4thg2F5YbFhsGGiYYlhm2GTYa9hrWGfYZJhqmGhYY1hZmGzYS1ibmRwZJZkoGSFZJdknGSPZItkimSMZKNkn2RoZLFkmGR2ZXpleWV7ZbJls2W1ZrBmqWayZrdmqmavZgBqBmoXauVp+GkVavFp5Gkgav9p7GniaRtqHWr+aSdq8mnuaRRq92nnaUBqCGrmaftpDWr8aetpCWoEahhqJWoPavZpJmoHavRpFmpRa6Vro2uia6ZrAWwAbP9rAmxBbyZvfm+Hb8Zvkm+Nb4lvjG9ib09vhW9ab5Zvdm9sb4JvVW9yb1JvUG9Xb5Rvk29dbwBvYW9rb31vZ2+Qb1Nvi29pb39vlW9jb3dvam97b7Jxr3GbcbBxoHGacalxtXGdcaVxnnGkcaFxqnGccadxs3GYcppyWHNSc15zX3Ngc11zW3Nhc1pzWXNic4d0iXSKdIZ0gXR9dIV0iHR8dHl0CHUHdX51JXYedhl2HXYcdiN2GnYodht2nHaddp52m3aNd493iXeId814u3jPeMx40XjOeNR4yHjDeMR4yXiaeaF5oHmceaJ5m3l2azl6snq0erN6t3vLe757rHvOe697uXvKe7V7xXzIfMx8y3z3fdt96n3nfdd94X0Dfvp95n32ffF98H3ufd99dn+sf7B/rX/tf+t/6n/sf+Z/6H9kgGeAo4GfgZ6BlYGigZmBl4EWgk+CU4JSglCCToJRgiSFO4UPhQCFKYUOhQmFDYUfhQqFJ4UchfuEK4X6hAiFDIX0hCqF8oQVhfeE64TzhPyEEoXqhOmEFoX+hCiFHYUuhQKF/YQehfaEMYUmheeE6ITwhO+E+YQYhSCFMIULhRmFL4VihlaHY4dkh3eH4Ydzh1iHVIdbh1KHYYdah1GHXodth2qHUIdOh1+HXYdvh2yHeoduh1yHZYdPh3uHdYdih2eHaYdaiAWJDIkUiQuJF4kYiRmJBokWiRGJDokJiaKJpImjie2J8Insic+Kxoq4itOK0YrUitWKu4rXir6KwIrFitiKw4q6ir2K2Yo+jE2Mj4zljN+M2YzojNqM3YznjKCNnI2hjZuNII4jjiWOJI4ujhWOG44WjhGOGY4mjieOFI4SjhiOE44cjheOGo4sjySPGI8ajyCPI48WjxePc5BwkG+QZ5BrkC+RK5EpkSqRMpEmkS6RhZGGkYqRgZGCkYSRgJHQksOSxJLAktmStpLPkvGS35LYkumS15LdksyS75LCkuiSypLIks6S5pLNktWSyZLgkt6S55LRktOStZLhksaStJJ8layVq5WulbCVpJailtOWBZcIlwKXWpeKl46XiJfQl8+XHpgdmCaYKZgomCCYG5gnmLKYCJn6mBGZFJkWmReZFZncmc2Zz5nTmdSZzpnJmdaZ2JnLmdeZzJmzmuya65rzmvKa8ZpGm0ObZ5t0m3GbZpt2m3WbcJtom2SbbJv8nPqc/Zz/nPecB50Anfmc+5wInQWdBJ2DntOeD58QnxxRE1EXURpREVHeUTRT4VNwVmBWblZzVmZWY1ZtVnJWXlZ3VhxXG1fIWL1YyVi/WLpYwli8WMZYF1sZWxtbIVsUWxNbEFsWWyhbGlsgWx5b71usXbFdqV2nXbVdsF2uXapdqF2yXa1dr120XWdeaF5mXm9e6V7nXuZe6F7lXktfvF+dYahhlmHFYbRhxmHBYcxhumG/YbhhjGHXZNZk0GTPZMlkvWSJZMNk22TzZNlkM2V/ZXxlomXIZr5mwGbKZstmz2a9ZrtmumbMZiNnNGpmaklqZ2oyamhqPmpdam1qdmpbalFqKGpaajtqP2pBampqZGpQak9qVGpvamlqYGo8al5qVmpVak1qTmpGalVrVGtWa6drqmura8hrx2sEbANsBmytb8tvo2/Hb7xvzm/Ib15vxG+9b55vym+obwRwpW+ub7pvrG+qb89vv2+4b6JvyW+rb81vr2+yb7BvxXHCcb9xuHHWccBxwXHLcdRxynHHcc9xvXHYcbxxxnHacdtxnXKecmlzZnNnc2xzZXNrc2pzf3SadKB0lHSSdJV0oXQLdYB1L3YtdjF2PXYzdjx2NXYydjB2u3bmdpp3nXehd5x3m3eid6N3lXeZd5d33XjpeOV46njeeON423jheOJ47XjfeOB4pHlEekh6R3q2erh6tXqxerd63nvje+d73XvVe+V72nvoe/l71Hvqe+J73Hvre9h733vSfNR813zQfNF8En4hfhd+DH4ffiB+E34Ofhx+FX4afiJ+C34PfhZ+DX4UfiV+JH5Df3t/fH96f7F/738qgCmAbICxgaaBroG5gbWBq4GwgayBtIGygbeBp4HygVWCVoJXglaFRYVrhU2FU4VhhViFQIVGhWSFQYVihUSFUYVHhWOFPoVbhXGFToVuhXWFVYVnhWCFjIVmhV2FVIVlhWyFY4ZlhmSGm4ePh5eHk4eSh4iHgYeWh5iHeYeHh6OHhYeQh5GHnYeEh5SHnIeah4mHHokmiTCJLYkuiSeJMYkiiSmJI4kviSyJH4nxieCK4oryivSK9YrdihSL5IrfivCKyIreiuGK6Ir/iu+K+4qRjJKMkIz1jO6M8YzwjPOMbI1ujaWNp40zjj6OOI5AjkWONo48jj2OQY4wjj+OvY42jy6PNY8yjzmPN480j3aQeZB7kIaQ+pAzkTWRNpGTkZCRkZGNkY+RJ5MekwiTH5MGkw+TepM4kzyTG5MjkxKTAZNGky2TDpMNk8uSHZP6kiWTE5P5kveSNJMCkyST/5IpkzmTNZMqkxSTDJMLk/6SCZMAk/uSFpO8lc2VvpW5lbqVtpW/lbWVvZWpltSWC5cSlxCXmZeXl5SX8Jf4lzWYL5gymCSZH5knmSmZnpnumeyZ5ZnkmfCZ45nqmemZ55m5mr+atJq7mvaa+pr5mveaM5uAm4Wbh5t8m36be5uCm5ObkpuQm3qblZt9m4ibJZ0XnSCdHp0UnSmdHZ0YnSKdEJ0ZnR+diJ6Gnoeerp6tntWe1p76nhKfPZ8mUSVRIlEkUSBRKVH0UpNWjFaNVoZWhFaDVn5WglZ/VoFW1ljUWM9Y0lgtWyVbMlsjWyxbJ1smWy9bLlt7W/Fb8lu3XWxeal6+X7tfw2G1Ybxh52HgYeVh5GHoYd5h72TpZONk62TkZOhkgWWAZbZl2mXSZo1qlmqBaqVqiWqfaptqoWqeaodqk2qOapVqg2qoaqRqkWp/aqZqmmqFaoxqkmpba61rCWzMb6lv9G/Ub+Nv3G/tb+dv5m/eb/Jv3W/ib+hv4XHxcehx8nHkcfBx4nFzc25zb3OXdLJ0q3SQdKp0rXSxdKV0r3QQdRF1EnUPdYR1Q3ZIdkl2R3akdul2tXerd7J3t3e2d7R3sXeod/B383j9eAJ5+3j8ePJ4BXn5eP54BHmreah5XHpbelZ6WHpUelp6vnrAesF6BXwPfPJ7AHz/e/t7Dnz0ewt883sCfAl8A3wBfPh7/XsGfPB78XsQfAp86Hwtfjx+Qn4zfkiYOH4qfkl+QH5Hfil+TH4wfjt+Nn5Efjp+RX9/f35/fX/0f/J/LIC7gcSBzIHKgcWBx4G8gemBW4JaglyCg4WAhY+Fp4WVhaCFi4WjhXuFpIWahZ6Fd4V8hYmFoYV6hXiFV4WOhZaFhoWNhZmFnYWBhaKFgoWIhYWFeYV2hZiFkIWfhWiGvoeqh62HxYewh6yHuYe1h7yHrofJh8OHwofMh7eHr4fEh8qHtIe2h7+HuIe9h96Hsoc1iTOJPIk+iUGJUok3iUKJrYmvia6J8onziR6LGIsWixGLBYsLiyKLD4sSixWLB4sNiwiLBoscixOLGotPjHCMcoxxjG+MlYyUjPmMb41Ojk2OU45QjkyOR45Dj0CPhZB+kDiRmpGikZuRmZGfkaGRnZGgkaGTg5Ovk2STVpNHk3yTWJNck3aTSZNQk1GTYJNtk4+TTJNqk3mTV5NVk1KTT5Nxk3eTe5Nhk16TY5Nnk4CTTpNZk8eVwJXJlcOVxZW3la6WsJasliCXH5cYlx2XGZeal6GXnJeel52X1ZfUl/GXQZhEmEqYSZhFmEOYJZkrmSyZKpkzmTKZL5ktmTGZMJmYmaOZoZkCmvqZ9Jn3mfmZ+Jn2mfuZ/Zn+mfyZA5q+mv6a/ZoBm/yaSJuam6ibnpubm6aboZulm6Sbhpuim6Cbr5sznUGdZ502nS6dL50xnTidMJ1FnUKdQ50+nTedQJ09nfV/LZ2KnomejZ6wnsie2p77nv+eJJ8jnyKfVJ+gnzFRLVEuUZhWnFaXVppWnVaZVnBZPFtpXGpcwF1tXm5e2GHfYe1h7mHxYeph8GHrYdZh6WH/ZARl/WT4ZAFlA2X8ZJRl22XaZttm2GbFarlqvWrhasZqumq2ardqx2q0aq1qXmvJawtsB3AMcA1wAXAFcBRwDnD/bwBw+28mcPxv928KcAFy/3H5cQNy/XF2c7h0wHS1dMF0vnS2dLt0wnQUdRN1XHZkdll2UHZTdld2Wnamdr127HbCd7p3/3gMeRN5FHkJeRB5EnkRea15rHlfehx8KXwZfCB8H3wtfB18JnwofCJ8JXwwfFx+UH5WfmN+WH5ifl9+UX5gfld+U361f7N/93/4f3WA0YHSgdCBX4JegrSFxoXAhcOFwoWzhbWFvYXHhcSFv4XLhc6FyIXFhbGFtoXShSSGuIW3hb6FaYbnh+aH4ofbh+uH6oflh9+H84fkh9SH3IfTh+2H2Ifjh6SH14fZhwGI9Ifoh92HU4lLiU+JTIlGiVCJUYlJiSqLJ4sjizOLMIs1i0eLL4s8iz6LMYslizeLJos2iy6LJIs7iz2LOotCjHWMmYyYjJeM/owEjQKNAI1cjmKOYI5XjlaOXo5ljmeOW45ajmGOXY5pjlSORo9Hj0iPS48okTqRO5E+kaiRpZGnka+RqpG1k4yTkpO3k5uTnZOJk6eTjpOqk56TppOVk4iTmZOfk42TsZORk7KTpJOok7STo5Olk9KV05XRlbOW15balsJd35bYlt2WI5cilyWXrJeul6iXq5ekl6qXopell9eX2ZfWl9iX+pdQmFGYUpi4mEGZPJk6mQ+aC5oJmg2aBJoRmgqaBZoHmgaawJrcmgibBJsFmymbNZtKm0ybS5vHm8abw5u/m8GbtZu4m9ObtpvEm7mbvZtcnVOdT51KnVudS51ZnVadTJ1XnVKdVJ1fnVidWp2Onoye354BnwCfFp8lnyufKp8pnyifTJ9VnzRRNVGWUvdStFOrVq1WplanVqpWrFbaWN1Y21gSWT1bPls/W8NdcF6/X/thB2UQZQ1lCWUMZQ5lhGXeZd1l3mbnauBqzGrRatlqy2rfatxq0Grras9qzWreamBrsGsMbBlwJ3AgcBZwK3AhcCJwI3ApcBdwJHAccCpwDHIKcgdyAnIFcqVypnKkcqNyoXLLdMV0t3TDdBZ1YHbJd8p3xHfxdx15G3kheRx5F3keebB5Z3poejN8PHw5fCx8O3zsfOp8dn51fnh+cH53fm9+en5yfnR+aH5Lf0p/g3+Gf7d//X/+f3iA14HVgWSCYYJjguuF8YXthdmF4YXohdqF14XshfKF+IXYhd+F44XchdGF8IXmhe+F3oXihQCI+ocDiPaH94cJiAyIC4gGiPyHCIj/hwqIAohiiVqJW4lXiWGJXIlYiV2JWYmIibeJton2iVCLSItKi0CLU4tWi1SLS4tVi1GLQotSi1eLQ4x3jHaMmowGjQeNCY2sjaqNrY2rjW2OeI5zjmqOb457jsKOUo9Rj0+PUI9Tj7SPQJE/kbCRrZHek8eTz5PCk9qT0JP5k+yTzJPZk6mT5pPKk9ST7pPjk9WTxJPOk8CT0pPnk32V2pXbleGWKZcrlyyXKJcml7OXt5e2l92X3pffl1yYWZhdmFeYv5i9mLuYvphImUeZQ5mmmaeZGpoVmiWaHZokmhuaIpogmieaI5oemhyaFJrCmgubCpsOmwybN5vqm+ub4Jvem+Sb5pvim/Cb1JvXm+yb3JvZm+Wb1Zvhm9qbd52BnYqdhJ2InXGdgJ14nYadi52MnX2da510nXWdcJ1pnYWdc517nYKdb515nX+dh51onZSekZ7AnvyeLZ9An0GfTZ9Wn1efWJ83U7JWtVazVuNYRVvGXcdd7l7vXsBfwV/5YRdlFmUVZRNl32XoZuNm5GbzavBq6mroavlq8Wruau9qPHA1cC9wN3A0cDFwQnA4cD9wOnA5cEBwO3AzcEFwE3IUcqhyfXN8c7p0q3aqdr527XbMd853z3fNd/J3JXkjeSd5KHkkeSl5snluemx6bXr3ekl8SHxKfEd8RXzufHt+fn6BfoB+un//f3mA24HZgQuCaIJpgiKG/4UBhv6FG4YAhvaFBIYJhgWGDIb9hRmIEIgRiBeIE4gWiGOJZom5ifeJYItqi12LaItji2WLZ4tti66Nho6IjoSOWY9Wj1ePVY9Yj1qPjZBDkUGRt5G1kbKRs5ELlBOU+5MglA+UFJT+kxWUEJQolBmUDZT1kwCU95MHlA6UFpQSlPqTCZT4kwqU/5P8kwyU9pMRlAaU3pXgld+VLpcvl7mXu5f9l/6XYJhimGOYX5jBmMKYUJlOmVmZTJlLmVOZMpo0mjGaLJoqmjaaKZoumjiaLZrHmsqaxpoQmxKbEZsLnAic95sFnBKc+JtAnAecDpwGnBecFJwJnJ+dmZ2knZ2dkp2YnZCdm52gnZSdnJ2qnZedoZ2anaKdqJ2enaOdv52pnZadpp2nnZmem56anuWe5J7nnuaeMJ8un1ufYJ9en12fWZ+RnzpROVGYUpdSw1a9Vr5WSFtHW8tdz13xXv1hG2UCa/xqA2v4agBrQ3BEcEpwSHBJcEVwRnAdchpyGXJ+cxd1anbQdy15MXkveVR8U3zyfIp+h36Ifot+hn6Nfk1/u38wgN2BGIYqhiaGH4YjhhyGGYYnhi6GIYYghimGHoYlhimIHYgbiCCIJIgciCuISohtiWmJbolrifqJeYt4i0WLeot7ixCNFI2vjY6OjI5ej1uPXY9GkUSRRZG5kT+UO5Q2lCmUPZQ8lDCUOZQqlDeULJRAlDGU5ZXkleOVNZc6l7+X4ZdkmMmYxpjAmFiZVpk5mj2aRppEmkKaQZo6mj+azZoVmxebGJsWmzqbUpsrnB2cHJwsnCOcKJwpnCScIZy3nbadvJ3Bncedyp3Pnb6dxZ3DnbudtZ3Onbmdup2sncidsZ2tncyds53NnbKdep6cnuue7p7tnhufGJ8anzGfTp9ln2Sfkp+5TsZWxVbLVnFZS1tMW9Vd0V3yXiFlIGUmZSJlC2sIawlrDWxVcFZwV3BScB5yH3Kpcn9z2HTVdNl013Rtdq12NXm0eXB6cXpXfFx8WXxbfFp89HzxfJF+T3+Hf96Ba4I0hjWGM4YshjKGNoYsiCiIJogqiCWIcYm/ib6J+4l+i4SLgouGi4WLf4sVjZWOlI6ajpKOkI6WjpeOYI9ij0eRTJRQlEqUS5RPlEeURZRIlEmURpQ/l+OXaphpmMuYVJlbmU6aU5pUmkyaT5pImkqaSZpSmlCa0JoZmyubO5tWm1WbRpxInD+cRJw5nDOcQZw8nDecNJwynD2cNpzbndKd3p3ancud0J3cndGd353pndmd2J3WnfWd1Z3dnbae8J41nzOfMp9Cn2uflZ+inz1RmVLoWOdYcllNW9hdL4hPXwFiA2IEYillJWWWZetmEWsSaw9rymtbcFpwInKCc4Fzg3NwdtR3Z3xmfJV+bII6hkCGOYY8hjGGO4Y+hjCIMoguiDOIdol0iXOJ/omMi46Li4uIi0WMGY2YjmSPY4+8kWKUVZRdlFeUXpTEl8WXAJhWmlmaHpsfmyCbUpxYnFCcSpxNnEucVZxZnEycTpz7nfed753jneud+J3knfad4Z3unead8p3wneKd7J30nfOd6J3tncKe0J7ynvOeBp8cnzifN582n0OfT59xn3Cfbp9vn9NWzVZOW21cLWXtZu5mE2tfcGFwXXBgcCNy23TldNV3OHm3ebZ5anyXfol/bYJDhjiIN4g1iEuIlIuVi56On46gjp2OvpG9kcKRa5RolGmU5ZZGl0OXR5fHl+WXXprVmlmbY5xnnGacYpxenGCcAp7+nQeeA54GngWeAJ4Bngme/539nQSeoJ4en0afdJ91n3af1FYuZbhlGGsZaxdrGmticCZyqnLYd9l3OXlpfGt89nyafph+m36ZfuCB4YFGhkeGSIZ5iXqJfIl7if+JmIuZi6WOpI6jjm6UbZRvlHGUc5RJl3KYX5lonG6cbZwLng2eEJ4PnhKeEZ6hnvWeCZ9Hn3ife596n3mfHldmcG98PIiyjaaOw5F0lHiUdpR1lGCadJxznHGcdZwUnhOe9p4Kn6SfaHBlcPd8aoY+iD2IP4iei5yMqY7JjkuXc5h0mMyYYZmrmWSaZppnmiSbFZ4XnkifB2IeaydyTIaojoKUgJSBlGmaaJoumxmeKXJLhp+Lg5R5nLeedXZrmnqcHZ5pcGpwpJ5+n0mfmJ+BeLmSz4i7WFJgp3z6WlQlZiVXJWAlbCVjJVolaSVdJVIlZCVVJV4laiVhJVglZyVbJVMlZSVWJV8layViJVklaCVcJVElUCVtJW4lcCVvJZMlADABMAIwtwAlICYgqAADMK0AFSAlIjz/PCIYIBkgHCAdIBQwFTAIMAkwCjALMAwwDTAOMA8wEDARMLEA1wD3AGAiZCJlIh4iNCKwADIgMyADISsh4P/h/+X/QiZAJiAipSISIwIiByJhIlIipwA7IAYmBSbLJc8lziXHJcYloSWgJbMlsiW9JbwlkiGQIZEhkyGUIRMwaiJrIhoiPSIdIjUiKyIsIggiCyKGIocigiKDIioiKSInIigi4v/SIdQhACIDIrQAXv/HAtgC3QLaAtkCuADbAqEAvwDQAi4iESIPIqQACSEwIMElwCW3JbYlZCZgJmEmZSZnJmMmmSLIJaMl0CXRJZIlpCWlJaglpyWmJaklaCYPJg4mHCYeJrYAICAhIJUhlyGZIZYhmCFtJmkmaiZsJn8yHDIWIcczIiHCM9gzISGsIK4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/Av8D/wT/Bf8G/wf/CP8J/wr/C/8M/w3/Dv8P/xD/Ef8S/xP/FP8V/xb/F/8Y/xn/Gv8b/xz/Hf8e/x//IP8h/yL/I/8k/yX/Jv8n/yj/Kf8q/yv/LP8t/y7/L/8w/zH/Mv8z/zT/Nf82/zf/OP85/zr/O//m/z3/Pv8//0D/Qf9C/0P/RP9F/0b/R/9I/0n/Sv9L/0z/Tf9O/0//UP9R/1L/U/9U/1X/Vv9X/1j/Wf9a/1v/XP9d/+P/MTEyMTMxNDE1MTYxNzE4MTkxOjE7MTwxPTE+MT8xQDFBMUIxQzFEMUUxRjFHMUgxSTFKMUsxTDFNMU4xTzFQMVExUjFTMVQxVTFWMVcxWDFZMVoxWzFcMV0xXjFfMWAxYTFiMWMxZDFlMWYxZzFoMWkxajFrMWwxbTFuMW8xcDFxMXIxczF0MXUxdjF3MXgxeTF6MXsxfDF9MX4xfzGAMYExgjGDMYQxhTGGMYcxiDGJMYoxizGMMY0xjjFwIXEhciFzIXQhdSF2IXcheCF5IQAAAAAAAAAAAABgIWEhYiFjIWQhZSFmIWchaCFpIQAAAAAAAAAAAAAAAAAAkQOSA5MDlAOVA5YDlwOYA5kDmgObA5wDnQOeA58DoAOhA6MDpAOlA6YDpwOoA6kDAAAAAAAAAAAAAAAAAAAAALEDsgOzA7QDtQO2A7cDuAO5A7oDuwO8A70DvgO/A8ADwQPDA8QDxQPGA8cDyAPJAwAAAAAAAAAAAAAAAAAlAiUMJRAlGCUUJRwlLCUkJTQlPCUBJQMlDyUTJRslFyUjJTMlKyU7JUslICUvJSglNyU/JR0lMCUlJTglQiUSJRElGiUZJRYlFSUOJQ0lHiUfJSElIiUmJSclKSUqJS0lLiUxJTIlNSU2JTklOiU9JT4lQCVBJUMlRCVFJUYlRyVIJUklSiUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlTOWM5czEyGYM8QzozOkM6UzpjOZM5ozmzOcM50znjOfM6AzoTOiM8ozjTOOM48zzzOIM4kzyDOnM6gzsDOxM7IzszO0M7UztjO3M7gzuTOAM4EzgjODM4QzujO7M7wzvTO+M78zkDORM5IzkzOUMyYhwDPBM4ozizOMM9YzxTOtM64zrzPbM6kzqjOrM6wz3TPQM9MzwzPJM9wzxjMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADGANAAqgAmAQAAMgEAAD8BQQHYAFIBugDeAGYBSgEAAGAyYTJiMmMyZDJlMmYyZzJoMmkyajJrMmwybTJuMm8ycDJxMnIyczJ0MnUydjJ3MngyeTJ6Mnsy0CTRJNIk0yTUJNUk1iTXJNgk2STaJNsk3CTdJN4k3yTgJOEk4iTjJOQk5STmJOck6CTpJGAkYSRiJGMkZCRlJGYkZyRoJGkkaiRrJGwkbSRuJL0AUyFUIbwAvgBbIVwhXSFeIeYAEQHwACcBMQEzATgBQAFCAfgAUwHfAP4AZwFLAUkBADIBMgIyAzIEMgUyBjIHMggyCTIKMgsyDDINMg4yDzIQMhEyEjITMhQyFTIWMhcyGDIZMhoyGzKcJJ0kniSfJKAkoSSiJKMkpCSlJKYkpySoJKkkqiSrJKwkrSSuJK8ksCSxJLIksyS0JLUkdCR1JHYkdyR4JHkkeiR7JHwkfSR+JH8kgCSBJIIkuQCyALMAdCB/IIEggiCDIIQgQTBCMEMwRDBFMEYwRzBIMEkwSjBLMEwwTTBOME8wUDBRMFIwUzBUMFUwVjBXMFgwWTBaMFswXDBdMF4wXzBgMGEwYjBjMGQwZTBmMGcwaDBpMGowazBsMG0wbjBvMHAwcTByMHMwdDB1MHYwdzB4MHkwejB7MHwwfTB+MH8wgDCBMIIwgzCEMIUwhjCHMIgwiTCKMIswjDCNMI4wjzCQMJEwkjCTMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAChMKIwozCkMKUwpjCnMKgwqTCqMKswrDCtMK4wrzCwMLEwsjCzMLQwtTC2MLcwuDC5MLowuzC8ML0wvjC/MMAwwTDCMMMwxDDFMMYwxzDIMMkwyjDLMMwwzTDOMM8w0DDRMNIw0zDUMNUw1jDXMNgw2TDaMNsw3DDdMN4w3zDgMOEw4jDjMOQw5TDmMOcw6DDpMOow6zDsMO0w7jDvMPAw8TDyMPMw9DD1MPYwAAAAAAAAAAAAAAAAAAAAABAEEQQSBBMEFAQVBAEEFgQXBBgEGQQaBBsEHAQdBB4EHwQgBCEEIgQjBCQEJQQmBCcEKAQpBCoEKwQsBC0ELgQvBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAEMQQyBDMENAQ1BFEENgQ3BDgEOQQ6BDsEPAQ9BD4EPwRABEEEQgRDBEQERQRGBEcESARJBEoESwRMBE0ETgwBrASsB6wIrAmsCqwQrBGsEqwTrBSsFawWrBesGawarBusHKwdrCCsJKwsrC2sL6wwrDGsOKw5rDysQKxLrE2sVKxYrFyscKxxrHSsd6x4rHqsgKyBrIOshKyFrIasiayKrIusjKyQrJSsnKydrJ+soKyhrKisqayqrKysr6ywrLisuay7rLysvazBrMSsyKzMrNWs16zgrOGs5KznrOis6qzsrO+s8KzxrPOs9az2rPys/awArQStBq0MrQ2tD60RrRitHK0grSmtLK0trTStNa04rTytRK1FrUetSa1QrVStWK1hrWOtbK1trXCtc610rXWtdq17rXytfa1/rYGtgq2IrYmtjK2QrZytna2krbetwK3BrcStyK3QrdGt063creCt5K34rfmt/K3/rQCuAa4IrgmuC64NrhSuMK4xrjSuN644rjquQK5BrkOuRa5GrkquTK5Nrk6uUK5UrlauXK5drl+uYK5hrmWuaK5prmyucK54rnmue658rn2uhK6FroyuvK69rr6uwK7Ersyuza7PrtCu0a7Yrtmu3K7oruuu7a70rviu/K4HrwivDa8QryyvLa8wrzKvNK88rz2vP69Br0KvQ69Ir0mvUK9cr12vZK9lr3mvgK+Er4ivkK+Rr5WvnK+4r7mvvK/Ar8evyK/Jr8uvza/Or9Sv3K/or+mv8K/xr/Sv+K8AsAGwBLAMsBCwFLAcsB2wKLBEsEWwSLBKsEywTrBTsFSwVbBXsFmwXbB8sH2wgLCEsIywjbCPsJGwmLCZsJqwnLCfsKCwobCisKiwqbCrsKywrbCusK+wsbCzsLSwtbC4sLywxLDFsMewyLDJsNCw0bDUsNiw4LDlsAixCbELsQyxELESsROxGLEZsRuxHLEdsSOxJLElsSixLLE0sTWxN7E4sTmxQLFBsUSxSLFQsVGxVLFVsVixXLFgsXixebF8sYCxgrGIsYmxi7GNsZKxk7GUsZixnLGoscyx0LHUsdyx3bHfseix6bHssfCx+bH7sf2xBLIFsgiyC7IMshSyFbIXshmyILI0sjyyWLJcsmCyaLJpsnSydbJ8soSyhbKJspCykbKUspiymbKasqCyobKjsqWyprKqsqyysLK0ssiyybLMstCy0rLYstmy27LdsuKy5LLlsuay6LLrsuyy7bLusu+y87L0svWy97L4svmy+rL7sv+yALMBswSzCLMQsxGzE7MUsxWzHLNUs1WzVrNYs1uzXLNes1+zZLNls2ezabNrs26zcLNxs3SzeLOAs4Gzg7OEs4WzjLOQs5SzoLOhs6izrLPEs8WzyLPLs8yzzrPQs9Sz1bPXs9mz27Pds+Cz5LPos/yzELQYtBy0ILQotCm0K7Q0tFC0UbRUtFi0YLRhtGO0ZbRstIC0iLSdtKS0qLSstLW0t7S5tMC0xLTItNC01bTctN204LTjtOS05rTstO2077TxtPi0FLUVtRi1G7UctSS1JbUntSi1KbUqtTC1MbU0tTi1QLVBtUO1RLVFtUu1TLVNtVC1VLVctV21X7VgtWG1oLWhtaS1qLWqtau1sLWxtbO1tLW1tbu1vLW9tcC1xLXMtc21z7XQtdG12LXstRC2EbYUthi2JbYstjS2SLZktmi2nLadtqC2pLartqy2sbbUtvC29Lb4tgC3AbcFtyi3Kbcsty+3MLc4tzm3O7dEt0i3TLdUt1W3YLdkt2i3cLdxt3O3dbd8t323gLeEt4y3jbePt5C3kbeSt5a3l7eYt5m3nLegt6i3qbert6y3rbe0t7W3uLfHt8m37Lftt/C39Lf8t/23/7cAuAG4B7gIuAm4DLgQuBi4GbgbuB24JLgluCi4LLg0uDW4N7g4uDm4QLhEuFG4U7hcuF24YLhkuGy4bbhvuHG4eLh8uI24qLiwuLS4uLjAuMG4w7jFuMy40LjUuN2437jhuOi46bjsuPC4+Lj5uPu4/bgEuRi5ILk8uT25QLlEuUy5T7lRuVi5WblcuWC5aLlpuWu5bbl0uXW5eLl8uYS5hbmHuYm5irmNuY65rLmtubC5tLm8ub25v7nBuci5ybnMuc65z7nQudG50rnYudm527ndud654bnjueS55bnouey59Ln1ufe5+Ln5ufq5ALoBugi6Fbo4ujm6PLpAukK6SLpJuku6TbpOulO6VLpVuli6XLpkumW6Z7poumm6cLpxunS6eLqDuoS6hbqHuoy6qLqpuqu6rLqwurK6uLq5uru6vbrEusi62LrZuvy6ALsEuw27D7sRuxi7HLsguym7K7s0uzW7Nrs4uzu7PLs9uz67RLtFu0e7SbtNu0+7ULtUu1i7Ybtju2y7iLuMu5C7pLuou6y7tLu3u8C7xLvIu9C707v4u/m7/Lv/uwC8ArwIvAm8C7wMvA28D7wRvBS8FbwWvBe8GLwbvBy8HbwevB+8JLwlvCe8KbwtvDC8Mbw0vDi8QLxBvEO8RLxFvEm8TLxNvFC8XbyEvIW8iLyLvIy8jryUvJW8l7yZvJq8oLyhvKS8p7yovLC8sbyzvLS8tby8vL28wLzEvM28z7zQvNG81bzYvNy89Lz1vPa8+Lz8vAS9Bb0HvQm9EL0UvSS9LL1AvUi9Sb1MvVC9WL1ZvWS9aL2AvYG9hL2HvYi9ib2KvZC9kb2TvZW9mb2avZy9pL2wvbi91L3Vvdi93L3pvfC99L34vQC+A74Fvgy+Db4QvhS+HL4dvh++RL5Fvki+TL5OvlS+Vb5Xvlm+Wr5bvmC+Yb5kvmi+ar5wvnG+c750vnW+e758vn2+gL6Evoy+jb6PvpC+kb6Yvpm+qL7QvtG+1L7Xvti+4L7jvuS+5b7svgG/CL8Jvxi/Gb8bvxy/Hb9Av0G/RL9Iv1C/Ub9Vv5S/sL/Fv8y/zb/Qv9S/3L/fv+G/PMBRwFjAXMBgwGjAacCQwJHAlMCYwKDAocCjwKXArMCtwK/AsMCzwLTAtcC2wLzAvcC/wMDAwcDFwMjAycDMwNDA2MDZwNvA3MDdwOTA5cDowOzA9MD1wPfA+cAAwQTBCMEQwRXBHMEdwR7BH8EgwSPBJMEmwSfBLMEtwS/BMMExwTbBOME5wTzBQMFIwUnBS8FMwU3BVMFVwVjBXMFkwWXBZ8FowWnBcMF0wXjBhcGMwY3BjsGQwZTBlsGcwZ3Bn8GhwaXBqMGpwazBsMG9wcTByMHMwdTB18HYweDB5MHowfDB8cHzwfzB/cEAwgTCDMINwg/CEcIYwhnCHMIfwiDCKMIpwivCLcIvwjHCMsI0wkjCUMJRwlTCWMJgwmXCbMJtwnDCdMJ8wn3Cf8KBwojCicKQwpjCm8KdwqTCpcKowqzCrcK0wrXCt8K5wtzC3cLgwuPC5MLrwuzC7cLvwvHC9sL4wvnC+8L8wgDDCMMJwwzDDcMTwxTDFcMYwxzDJMMlwyjDKcNFw2jDacNsw3DDcsN4w3nDfMN9w4TDiMOMw8DD2MPZw9zD38Pgw+LD6MPpw+3D9MP1w/jDCMQQxCTELMQwxDTEPMQ9xEjEZMRlxGjEbMR0xHXEecSAxJTEnMS4xLzE6cTwxPHE9MT4xPrE/8QAxQHFDMUQxRTFHMUoxSnFLMUwxTjFOcU7xT3FRMVFxUjFScVKxUzFTcVOxVPFVMVVxVfFWMVZxV3FXsVgxWHFZMVoxXDFccVzxXTFdcV8xX3FgMWExYfFjMWNxY/FkcWVxZfFmMWcxaDFqcW0xbXFuMW5xbvFvMW9xb7FxMXFxcbFx8XIxcnFysXMxc7F0MXRxdTF2MXgxeHF48XlxezF7cXuxfDF9MX2xffF/MX9xf7F/8UAxgHGBcYGxgfGCMYMxhDGGMYZxhvGHMYkxiXGKMYsxi3GLsYwxjPGNMY1xjfGOcY7xkDGQcZExkjGUMZRxlPGVMZVxlzGXcZgxmzGb8ZxxnjGecZ8xoDGiMaJxovGjcaUxpXGmMacxqTGpcanxqnGsMaxxrTGuMa5xrrGwMbBxsPGxcbMxs3G0MbUxtzG3cbgxuHG6MbpxuzG8Mb4xvnG/cYExwXHCMcMxxTHFccXxxnHIMchxyTHKMcwxzHHM8c1xzfHPMc9x0DHRMdKx0zHTcdPx1HHUsdTx1THVcdWx1fHWMdcx2DHaMdrx3THdcd4x3zHfcd+x4PHhMeFx4fHiMeJx4rHjseQx5HHlMeWx5fHmMeax6DHocejx6THpcemx6zHrcewx7THvMe9x7/HwMfBx8jHycfMx87H0MfYx93H5Mfox+zHAMgByATICMgKyBDIEcgTyBXIFsgcyB3IIMgkyCzILcgvyDHIOMg8yEDISMhJyEzITchUyHDIcch0yHjIesiAyIHIg8iFyIbIh8iLyIzIjciUyJ3In8ihyKjIvMi9yMTIyMjMyNTI1cjXyNnI4MjhyOTI9cj8yP3IAMkEyQXJBskMyQ3JD8kRyRjJLMk0yVDJUclUyVjJYMlhyWPJbMlwyXTJfMmIyYnJjMmQyZjJmcmbyZ3JwMnBycTJx8nIycrJ0MnRydPJ1cnWydnJ2sncyd3J4MniyeTJ58nsye3J78nwyfHJ+Mn5yfzJAMoIygnKC8oMyg3KFMoYyinKTMpNylDKVMpcyl3KX8pgymHKaMp9yoTKmMq8yr3KwMrEyszKzcrPytHK08rYytnK4MrsyvTKCMsQyxTLGMsgyyHLQctIy0nLTMtQy1jLWctdy2TLeMt5y5zLuMvUy+TL58vpywzMDcwQzBTMHMwdzCHMIswnzCjMKcwszC7MMMw4zDnMO8w8zD3MPsxEzEXMSMxMzFTMVcxXzFjMWcxgzGTMZsxozHDMdcyYzJnMnMygzKjMqcyrzKzMrcy0zLXMuMy8zMTMxczHzMnM0MzUzOTM7MzwzAHNCM0JzQzNEM0YzRnNG80dzSTNKM0szTnNXM1gzWTNbM1tzW/Ncc14zYjNlM2VzZjNnM2kzaXNp82pzbDNxM3MzdDN6M3szfDN+M35zfvN/c0EzgjODM4UzhnOIM4hziTOKM4wzjHOM841zljOWc5czl/OYM5hzmjOac5rzm3OdM51znjOfM6EzoXOh86JzpDOkc6UzpjOoM6hzqPOpM6lzqzOrc7BzuTO5c7ozuvO7M70zvXO9874zvnOAM8BzwTPCM8QzxHPE88VzxzPIM8kzyzPLc8vzzDPMc84z1TPVc9Yz1zPZM9lz2fPac9wz3HPdM94z4DPhc+Mz6HPqM+wz8TP4M/hz+TP6M/wz/HP88/1z/zPANAE0BHQGNAt0DTQNdA40DzQRNBF0EfQSdBQ0FTQWNBg0GzQbdBw0HTQfNB90IHQpNCl0KjQrNC00LXQt9C50MDQwdDE0MjQydDQ0NHQ09DU0NXQ3NDd0ODQ5NDs0O3Q79Dw0PHQ+NAN0TDRMdE00TjROtFA0UHRQ9FE0UXRTNFN0VDRVNFc0V3RX9Fh0WjRbNF80YTRiNGg0aHRpNGo0bDRsdGz0bXRutG80cDR2NH00fjRB9IJ0hDSLNIt0jDSNNI80j3SP9JB0kjSXNJk0oDSgdKE0ojSkNKR0pXSnNKg0qTSrNKx0rjSudK80r/SwNLC0sjSydLL0tTS2NLc0uTS5dLw0vHS9NL40gDTAdMD0wXTDNMN0w7TENMU0xbTHNMd0x/TINMh0yXTKNMp0yzTMNM40znTO9M80z3TRNNF03zTfdOA04TTjNON04/TkNOR05jTmdOc06DTqNOp06vTrdO007jTvNPE08XTyNPJ09DT2NPh0+PT7NPt0/DT9NP80/3T/9MB1AjUHdRA1ETUXNRg1GTUbdRv1HjUedR81H/UgNSC1IjUidSL1I3UlNSp1MzU0NTU1NzU39To1OzU8NT41PvU/dQE1QjVDNUU1RXVF9U81T3VQNVE1UzVTdVP1VHVWNVZ1VzVYNVl1WjVadVr1W3VdNV11XjVfNWE1YXVh9WI1YnVkNWl1cjVydXM1dDV0tXY1dnV29Xd1eTV5dXo1ezV9NX11ffV+dUA1gHWBNYI1hDWEdYT1hTWFdYc1iDWJNYt1jjWOdY81kDWRdZI1knWS9ZN1lHWVNZV1ljWXNZn1mnWcNZx1nTWg9aF1ozWjdaQ1pTWndaf1qHWqNas1rDWuda71sTWxdbI1szW0dbU1tfW2dbg1uTW6Nbw1vXW/Nb91gDXBNcR1xjXGdcc1yDXKNcp1yvXLdc01zXXONc810TXR9dJ11DXUddU11bXV9dY11nXYNdh12PXZddp12zXcNd013zXfdeB14jXideM15DXmNeZ15vXndcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD1Pc09HUPlQoFLvU3VU5VQJVsFatluHZrZnt2fvZ0xrwnPCdTx624IEg1eIiIg2isiMz437juaP1Zk7UnRTBFRqYGRhvGvPcxqBuonSiaOVg08KUr5YeFnmWXJeeV7HYcBjRmfsZ39ol29Odgt39XgIev96IXydgG6CcYLripOVa06dVfdmNG6jeO16W4QQiU6HqJfYUk5XKlhMXR9hvmEhYmJl0WdEahtuGHWzdeN2sHc6fa+QUZRSlJWfI1OsXDJ124BAkpiVW1IIWNxZoVwXXbdeOl9KX3dhX2x6dYZ14HxzfbF9jH9UgSGCkYVBiRuL/JJNlkecy073TgtQ8VFPWDdhPmFoYTll6mkRb6V1hnbWdod7pYLLhAD5p5OLlYBVoltRVwH5s3y5f7WRKFC7U0Vc6F3SYm5j2mTnZCBurHBbed2NHo4C+X2QRZL4kn5O9k5lUP5d+l4GYVdpcYFUhkeOdZMrml5OkVBwZ0BoCVGNUpJSomq8dxCS1J6rUi9g8o9IUKlh7WPKZDxohGrAb4iBoYmUlgVYfXKscgR1eX1tfqmAi4l0i2OQUZ2JYnpsVG9QfTp/I4p8UUphnXsZi1eSjJOsTtNPHlC+UAZRwVLNUn9TcFeDWJpekV92YaxhzmRsZW9mu2b0Zpdoh22FcPFwn3SldMp02XVseOx433r2ekV9k30VgD+AG4GWg2aLFY8VkOGTA5g4mFqa6JvCT1NVOlhRWWNbRly4YBJiQmiwaOhoqm5MdXh2zng9evt8a358fgiKoYo/jI6WxJ3kU+lTSlRxVPpW0VlkWztcq173YjdlRWVyZaBmr2fBab1s/HWQdn53P3qUfwOAoYCPgeaC/YLwg8GFMYi0iKWKA/mcjy6Tx5ZnmNiaE5/tVJtl8maPaEB6N4xgnfBWZFcRXQZmsWjNaP5uKHSeiOSbaGwE+aiam09sUXFRn1JUW+VdUGBtYPFip2M7ZdlzenqjhqKMj5cyTuFbCGKcZ9x00XnTg4eKsorojU6QS5NGmNNe6Gn/he2QBfmgUZhb7FtjYfpoPmtMcC902HShe1B/xYPAiauM3JUomS5SXWDsYgKQik9JUSFT2VjjXuBmOG2acMJy1nNQe/GAW5RmU5tja39WToBQSljeWCpgJ2HQYtBpQZuPWxh9sYBfj6RO0VCsVKxVDFugXeddKmVOZSFoS2rhco5273deffl/oIFOhd+GA49Oj8qQA5lVmqubGE5FTl1Ox07xT3dR/lJAU+NT5VOOVBRWdVeiV8dbh13QXvxh2GJRZbhn6WfLaVBrxmvsa0JsnW54cNdylnMDdL936Xd2en99CYD8gQWCCoLfgmKIM4v8jMCOEZCxkGSStpLSmUWa6ZzXnZyfC1dAXMqDoJerl7SeG1SYeqR/2YjNjuGQAFhIXJhjn3quWxNfeXqueo6CrI4mUDhS+FJ3UwhX82JyYwprw203d6VTV3NohXaO1ZU6Z8NqcG9tisyOS5kG+XdmeGu0jDybB/nrUy1XTlnGY/tp6nNFeLp6xXr+fHWEj4lzjTWQqJX7UkdXR3Vge8yDHpII+VhqS1FLUodSH2LYaHVpmZbFUKRS5FLDYaRlOWj/aX50S3u5guuDsok5i9GPSZkJ+cpOl1nSZBFmjmo0dIF5vXmpgn6If4hfiQr5JpMLT8pTJWBxYnJsGn1mfZhOYlHcd6+AAU8OT3ZRgFHcVWhWO1f6V/xXFFlHWZNZxFuQXA5d8V1+XsxfgGLXZeNlHmcfZ15ny2jEaF9qOmsjbH1sgmzHbZhzJnQqdIJ0o3R4dX91gXjveEF5R3lIeXp5lXsAfbp9iH8GgC2AjIAYik+LSIx3jSGTJJPimFGZDpoPmmWakp7KfXZPCVTuYlRo0ZGrVTpRC/kM+Rxa5mEN+c9i/2IO+Q/5EPkR+RL5E/mjkBT5FfkW+Rf5GPn+ihn5Gvkb+Rz5lmYd+VZxHvkf+eOWIPlPY3pjV1Mh+Y9nYGlzbiL5N3Uj+ST5JfkNfSb5J/lyiMpWGFoo+Sn5Kvkr+Sz5Q04t+WdRSFnwZxCALvlzWXRemmTKefVfbGDIYntj51vXW6pSL/l0WSlfEmAw+TH5MvlZdDP5NPk1+Tb5N/k4+dGZOfk6+Tv5PPk9+T75P/lA+UH5QvlD+cNvRPlF+b+Bso/xYEb5R/lmgUj5Sfk/XEr5S/lM+U35TvlP+VD5UfnpWiWKe2cQfVL5U/lU+VX5VvlX+f2AWPlZ+Txc5Ww/U7puGlk2gzlOtk5GT65VGFfHWFZft2XmZYBqtWtNbu1373oefN59y4aSiDKRW5O7ZL5venO4dVSQVlVNV7ph1GTHZuFtW25tb7lv8HVDgL2BQYWDiceKWosfk5NsU3VUew+OXZAQVQJYWFhiXgdinmTgaHZ11nyzh+ie406IV25XJ1kNXLFcNl6FXzRi4WSzc/qBi4i4jIqW256FW7dfs2ASUABSMFIWVzVYV1gOXGBc9lyLXaZekl+8YBFjiWMXZENo+WjCathtIW7UbuRv/nHcdnl3sXk7egSEqYntjPONSI4DkBSQU5D9kE2Tdpbcl9JrBnBYcqJyaHNjd7955HubfoCLqVjHYGZl/WW+ZoxsHnHJcVqME5htToF63U6sUc1R1VIMVKdhcWdQaN9oHm18b7x1s3flevSAY4SFklxRl2VcZ5Nn2HXHenODWvlGjBeQLZhvXMCBmoJBkG+QDZKXX51dWWrIcXt2SXvkhQSLJ5EwmodV9mFb+Wl2hX8/hrqH+IiPkFz5G23ZcN5zYX09hF35apHxmV75gk51UwRrEms+cBtyLYYenkxSo49QXeVkLGUWa+tvQ3ycfs2FZIm9icli2IEfiMpeF2dqbfxyBXRvdIKH3pCGTw1doF8KhLdRoGNlda5OBlBpUclRgWgRaq58sXznfG+C0oobj8+Rtk83UfVSQlTsXm5hPmLFZdpq/m8qedyFI4itlWKaapqXns6em1LGZndrHXAreWKPQpeQYQBiI2Ujb0lxiXT0fW+A7oQmjyOQSpO9URdSo1IMbchwwojJXoJlrmvCbz58dXPkTjZP+VZf+bpcul0cYLJzLXuaf85/RoAekDSS9pZIlxiYYZ+LT6dvrnm0kbeW3lJg+YhkxGTTal5vGHAQcud2AYAGhlyG740FjzKXb5v6nXWejHh/eaB9yYMEk3+ek57Wit9YBF8nZydwz3RgfH6AIVEocGJyynjCjNqM9Iz3loZO2lDuW9ZemWXOcUJ2rXdKgPyEfJAnm42f2FhBWmJcE2rabQ9vO3YvfTd+HoU4ieSTS5aJUtJl82e0aUFtnG4PcAl0YHRZdSR2a3gsi16YbVEuYniWlk8rUBld6m24fSqPi19EYRdoYfmGltJSi4DcUcxRXmkcer598YN1ltpPKVKYUw9UDlVlXKdgTmeoaGxtgXL4cgZ0g3Ri+eJ1bHx5f7h/iYPPiOGIzJHQkeKWyZsdVH5v0HGYdPqFqo6jllecn56XZ8ttM3TogRaXLHjLeiB7knxpZGp08nW8eOh4rJlUm7ue3ltVXiBvnIGrg4iQB05NUyla0l1OX2JhPWNpZvxm/24rb2NwnncshBOFO4gTj0WZO5wcVbliK2erbAmDaol6l6FOhFnYX9lfG2eyfVR/koIrg72DHo+ZkMtXuVmSWtBbJ2aaZ4Voz2tkcXV/t4zjjIGQRZsIgYqMTJZAmqWeX1sTbBtz8nbfdgyEqlGTiU1RlVHJUslolGwEdyB3v33sfWKXtZ7FbhGFpVENVH1UDmadZidpn26/dpF3F4PChJ+HaZGYkvScgoiuT5JR31LGWT1eVWF4ZHlkrmbQZyFqzWvba19yYXJBdDh323cXgLyCBYMAiyiLjIwoZ5BsZ3LudmZ3RnqpnX9rkmwiWSZnmYRvU5NYmVnfXs9jNGZzZzpuK3PXeteCKJPZUutdrmHLYQpix2KrZOBlWWlma8trIXH3c111Rn4eggKDaoWjir+MJ5dhnahY2J4RUA5SO1RPVYdldmwKfQt9XoCKhoCV75b/UpVsaXJzVJpaPlxLXUxfrl8qZ7ZoY2k8bkRuCXdzfI5/h4UOi/ePYZf0nrdctmANYathT2X7ZfxlEWzvbJ9zyXPhfZSVxlschxCLXVJaU81iD2SyZDRnOGrKbMBznnSUe5V8G36KgTaChIXrj/mWwZk0T0pTzVPbU8xiLGQAZZFlw2nubFhv7XNUdSJ25Hb8dtB4+3gseUZ9LILgh9SPEpjvmMNS1GKlZCRuUW98dsuNsZFiku6aQ5sjUI1QSleoWShcR153Xz9iPmW5ZcFlCWaLZ5xpwm7FeCF9qoCAgSuCs4KhhIyGKooXi6aQMpaQnw1Q809j+flXmF/cYpJjb2dDbhlxw3bMgNqA9Ij1iBmJ4Iwpj02RapYvT3BPG17PZyJofXZ+dkSbYV4Kamlx1HFqdWT5QX5DhemF3JgQT097cH+lleFRBl61aD5sTmzbbK9yxHsDg9VsOnT7UIhSwVjYZJdqp3RWdqd4F4bilTmXZfleUwFfiouoj6+PipAlUqV3SZwInxlOAlB1UVtcd14eZjpmxGfFaLNwAXXFdcl53XonjyCZCJrdTyFYMVj2W25mZWsRbXpufW/kcyt16YPciBOJXIsUjw9P1VAQU1xTk1upXw1nj3l5gS+DFIUHiYaJOY87j6WZEpwsZ3ZO+E9JWQFc71zwXGdj0mj9cKJxK3QrfuyEAocikNKS85wNTthO70+FUFZSb1ImVJBU4FcrWWZaWlt1W8xbnF5m+XZid2WnZW5tpW42ciZ7P3w2f1CBUYGagUCCmYKpgwOKoIzmjPuMdI26jeiQ3JEclkSW2ZnnnBdTBlIpVHRWs1hUWW5Z/1+kYW5iEGZ+bBpxxnaJfN58G32sgsGM8JZn+VtPF19/X8JiKV0LZ9pofHhDfmydFU6ZUBVTKlNRU4NZYlqHXrJgimFJYnlikGWHZ6dp1GvWa9dr2Gu4bGj5NXT6dRJ4kXjVedh5g3zLfeF/pYA+gcKB8oMah+iIuYpsi7uMGZFel9uYO5+sVipbbF+MZbNqr2tcbfFvFXBdcq1zp4zTjDuYkWE3bFiAAZpNTotOm07VTjpPPE9/T99P/1DyU/hTBlXjVdtW61hiWRFa61v6WwRc810rXplfHWBoY5xlr2X2Z/tnrWh7a5ls12wjbglwRXMCeD55QHlgecF56XsXfXJ9hoANgo6D0YTHht+IUIpeih2L3Ixmja2PqpD8mN+ZnZ5KUmn5FGdq+ZhQKlJxXGNlVWzKcyN1nXWXe5yEeJEwl3dOkmS6a15xqYUJTmv5SWfuaBdun4IYhWuI92OBbxKSr5gKTrdQz1AfUUZVqlUXVkBbGVzgXDheil6gXsJe82BRaGFqWG49ckBywHL4dmV5sXvUf/OI9IlzimGM3owcl15YvXT9jMdVbPlheiJ9coJych91JXVt+Rl7hVj7WLxdj162XpBfVWCSYn9jTWWRZtlm+GYWaPJogHJedG57bn3WfXJ/5YASgq+Ff4mTih2Q5JLNniCfFVltWS1e3GAUZnNmkGdQbMVtX2/zd6l4xoTLkSuT2U7KUEhRhFULW6NbR2J+ZctlMm59cQF0RHSHdL90bHaqedp9VX6of3qBs4E5ghqG7Id1iuONeJCRkiWUTZmum2hTUVxUacRsKW0rbgyCm4U7iS2KqorqlmefYVK5ZrJrln7+hw2Ng5Vdlh1liW3ucW75zlfTWaxbJ2D6YBBiH2ZfZilz+XPbdgF3bHtWgHKAZYGgipKRFk7iUnJrF20Fejl7MH1v+bCM7FMvVlFYtVsPXBFc4l1AYoNjFGQtZrNovGyIba9uH3CkcNJxJnWPdY51GXYRe+B7K3wgfTl9LIVthQeGNIoNkGGQtZC3kvaXN5rXT2xcX2eRbZ98jH4WixaNH5BrW/1dDWTAhFyQ4ZiHc4tbmmB+Z95tH4qmigGQDJg3UnD5UXCOeJaTcIjXke5P11P9VdpWglf9WMJaiFurXMBcJV4BYQ1iS2KIYxxkNmV4ZTlqims0bBltMW/ncelyeHMHdLJ0JnZhd8B5V3rqerl8j32sfWF+nn8pgTGDkITahOqFloiwipCLOI9CkIOQbJGWkrmSi5anlqiW1pYAlwiYlpnTmhqb1FN+WBlZcFu/W9FtWm+fcSF0uXSFgP2D4V2HX6pfQmDsZRJob2lTaolrNW3zbeNz/nasd017FH0jgRyCQIP0hGOFYorEioeRHpMGmLSZDGJTiPCPZZIHXSddaV1fdJ2BaIfVb/5i0n82iXKJHk5YTudQ3VJHU39iB2ZpfgWIXpaNTxlTNlbLWaRaOFxOXE1cAl4RX0NgvWUvZkJmvmf0Zxxz4nc6ecV/lITNhJaJZoppiuGKVYx6jPRX1FsPX29g7WINaZZrXG6EcdJ7VYdYi/6O35j+mDhPgU/hT3tUIFq4WzxhsGVoZvxxM3VeeTN9ToHjgZiDqoXOhQOHCoqrjpuPcfnFjzFZpFvmW4lg6VsLXMNfgWxy+fFtC3Aada+C9orATkFTc/nZlg9snk7ET1JRXlUlWuhcEWJZcr2CqoP+hlmIHYo/lsWWE5kJnV2dClizXL1dRF7hYBVh4WMCaiVuApFUk06YEJx3n4lbuFwJY09mSGg8d8GWjZdUmJ+boWUBi8uOvJU1Valc1l21XpdmTHb0g8eV01i8Ys5yKJ3wTi5ZD2A7ZoNr53kmnZNTwFTDVxZdG2HWZq9tjXh+gpiWRJeEU3xilmOybQp+S4FNmPtqTH+vnRqeX047ULZRHFn5YPZjMGk6cjaAdPnOkTFfdfl2+QR95YJvhLuE5YWNjnf5b094+Xn55FhDW1lg2mMYZW1lmGZ6+UppI2oLbQFwbHHSdQ12s3lwenv5in98+USJffmTi8CRfZZ++QqZBFehX7xlAW8AdqZ5noqtmVqbbJ8EUbZhkWKNasaBQ1AwWGZfCXEAivqKfFsWhvpPPFG0VkRZqWP5bapdbWmGUYhOWU9/+YD5gfmCWYL5g/lfa11shPm1dBZ5hfkHgkWCOYM/j12PhvkYmYf5iPmJ+aZOivnfV3lfE2aL+Yz5q3V5fm+LjfkGkFuapVYnWPhZH1q0W4759l6P+ZD5UGM7Y5H5PWmHbL9sjm2TbfVtFG+S+d9wNnFZcZP5w3HVcZT5T3hveJX5dXvjfZb5L36X+U2I346Y+Zn5mvlbkpv59pyc+Z35nvmFYIVtn/mxcaD5ofmxla1Tovmj+aT502el+Y5wMHEwdHaC0oKm+buV5Zp9nsRmp/nBcUmEqPmp+UtYqvmr+bhdcV+s+SBmjmZ5aa5pOGzzbDZuQW/abxtwL3BQcd9xcHOt+Vt0rvnUdMh2TnqTfq/5sPnxgmCKzo+x+UiTsvkZl7P5tPlCTipQtfkIUuFT82ZtbMpvCnN/d2J6roLdhQKGtvnUiGOKfYtrjLf5s5K4+ROXEJiUTg1PyU+yUEhTPlQzVNpVYli6WGdZG1rkW59gufnKYVZl/2VkZqdoWmyzb89wrHFSc317CIekijKcB59LXINsRHOJczqSq25ldB92aXoVfgqGQFHFWMFk7nQVdXB2wX+VkM2WVJkmbuZ0qXqqeuWB2YZ4hxuKSVqMW5tboWgAaWNtqXMTdCx0l3jpfet/GIFVgZ6DTIwulhGY8GaAX/pliWdqbItzLVADWmpr7ncWWWxdzV0lc091uvm7+eVQ+VEvWC1ZllnaWeVbvPm9+aJd12IWZJNk/mS++dxmv/lIasD5/3FkdMH5iHqvekd+Xn4AgHCBwvnvh4GJIItZkMP5gJBSmX5hMmt0bR9+JYmxj9FPrVCXUcdSx1eJWLlbuF5CYZVpjG1nbrZulHFidCh1LHVzgDiDyYQKjpST3pPE+Y5OUU92UCpRyFPLU/NTh1vTWyRcGmGCYfRlW3KXc0B0wnZQeZF5uXkGfb1/i4LVhV6Gwo9HkPWQ6pGFluiW6ZbWUmdf7WUxZi9oXHE2esGQCpiRTsX5Umqea5BviXEYgLiCU4VLkJWW8pb7lxqFMZuQTopxxJZDUZ9T4VQTVxJXo1ebWsRaw1soYD9h9GOFbDltcm6QbjByP3NXdNGCgYhFj2CQxvlilliYG50IZ4qNXpJNT0lQ3lBxUw1X1FkBWglccGGQZi1uMnJLdO99w4AOhGaEP4Vfh1uIGIkCi1WQy5dPm3NOkU8SUWpRx/kvValVelulW3xefV6+XqBg32AIYQlhxGM4ZQlnyPnUZ9pnyflhaWJpuWwnbcr5OG7L+eFvNnM3c8z5XHQxdc35UnbO+c/5rX3+gTiE1YiYituK7YowjkKOSpA+kHqQSZHJkW6T0PnR+QlY0vnTa4mAsoDT+dT5QVFrWTlc1fnW+WRvp3PkgAeN1/kXko+V2PnZ+dr52/l/gA5iHHBofY2H3PmgV2lgR2G3a76KgJKxlllOH1TrbS2FcJbzl+6Y1mPjbJGQ3VHJYbqB+Z2dTxpQAFGcWw9h/2HsZAVpxWuRdeN3qX9kgo+F+4djiLyKcIurkYxO5U4KT9353vk3WehZ3/nyXRtfW18hYOD54fni+eP5PnLlc+T5cHXNdeX5+3nm+QyAM4CEgOGCUYPn+ej5vYyzjIeQ6fnq+fSYDJnr+ez5N3DKdsp/zH/8fxqLuk7BTgNScFPt+b1U4Fb7WcVbFV/NX25u7vnv+Wp9NYPw+ZOGjYrx+W2Xd5fy+fP5AE5aT35P+VjlZaJuOJCwk7mZ+07sWIpZ2VlBYPT59fkUevb5T4PDjGVRRFP3+fj5+fnNTmlSVVu/gtROOlKoVMlZ/1lQW1dbXFtjYEhhy26ZcG5xhnP3dLV1wXgrfQWA6oEogxeFyYXuiseMzJZcT/pSvFarZShmfHC4cDVyvX2NgkyRwJZynXFb52iYa3pv3naRXKtmW2+0eyp8NojclghO104gUzRYu1jvWGxZB1wzXoReNV+MY7JmVmcfaqNqDGs/b0Zy+vlQc4t04HqnfHiB34HngYqDbIQjhZSFz4XdiBONrJF3lZyWjVHJVChXsFtNYlBnPWiTaD1u0259cCF+wYihjAmPS59Ony1yj3vNihqTR09OTzJRgFTQWZVetWJ1Z25pF2qubBpu2XIqc711uHs1feeC+YNXhPeFW4qvjIeOGZC4kM6WX5/jUgpU4VrCW1hkdWX0bsRy+/mEdk16G3tNfD5+3397gyuLyoxkjeGNX47qj/mPaZDRk0NPek+zUGhReFFNUmpSYVh8WGBZCFxVXNtem2AwYhNov2sIbLFvTnEgdDB1OHVRdXJ2THuLe617xnuPfm6KPo9Jjz+Sk5IikyuU+5ZamGuYHpkHUipimGJZbWR2ynrAe3Z9YFO+XJdeOG+5cJh8EZeOm96epWN6ZHaHAU6VTq1OXFB1UEhUw1maW0BerV73XoFfxWA6Yz9ldGXMZXZmeGb+Z2hpiWpja0BswG3obR9uXm4ecKFwjnP9czp1W3eHeI55C3p9er58jn1HggKK6oqejC2RSpHYkWaSzJIgkwaXVpdclwKYDp82UpFSfFUkWB1eH1+MYNBjr2jfb215LHvNgbqF/Yj4ikSOjZFklpuWPZdMmEqfzk9GUctRqVIyVhRfa1+qY81k6WVBZvpm+WYdZ51o12j9aRVvbm9nceVxKnKqdDp3Vnlaed95IHqVepd833xEfXB+h4D7haSGVIq/ipmNgY4gkG2Q45E7ltWW5ZzPZQd8s43Dk1hbClxSU9liHXMnUJdbnl+wYGth1WjZbS50LnpCfZx9MX5rgSqONY5+kxiUUE9QV+Zdp14rY2p/O05PT49PWlDdWcSAalRoVP5VT1mZW95d2l5dZjFn8WcqaOhsMm1Kbo1vt3Dgc4d1THwCfSx9on0fgtuGO4qFinCNio4zjzGQTpFSkUSU0Jn5eqV8yk8BUcZRyFfvW/tcWWY9alptlm7sbwxxb3XjeiKIIZB1kMuW/5kBgy1O8k5GiM2RfVPbamtpQWx6hJ5YjmH+Zu9i3XARdcd1Un64hEmLCI1LTupTq1QwV0BX118BYwdjb2QvZehlemadZ7NnYmtgbJpsLG/ldyV4SXlXeRl9ooACgfOBnYK3ghiHjIr8+QSNvo1ykPR2GXo3elR+d4AHVdRVdVgvYyJkSWZLZm1om2mEayVtsW7Nc2h0oXRbdbl14XYed4t35nkJfh1++4EvhZeIOorRjOuOsI8ykK2TY5ZzlgeXhE/xU+pZyVoZXk5oxnS+del5knqjge2G6ozMje2Pn2UVZ/3591dXb919L4/2k8aWtV/yYYRvFE6YTx9QyVPfVW9d7l0ha2Rry3iae/75SY7Kjm6QSWM+ZEB3hHovk3+Uap+wZK9v5nGodNp0xHoSfIJ+snyYfpqLCo19lBCZTJk5Ut9b5mQtZy597VDDU3lYWGFZYfphrGXZepKLlosJUCFQdVIxVTxa4F5wXzRhXmUMZjZmombNacRuMm8WcyF2k3o5gVmC1oO8hLVQ8FfAW+hbaV+hYyZ4tX3cgyGFx5H1kYpR9WdWe6yMxFG7Wb1gVYYcUP/5VFI6XH1hGmLTYvJkpWXMbiB2CoFgjl+Wu5bfTkNTmFUpWd1dxWTJbPptlHN/ehuCpoXkjBCOd5DnkeGVIZbGl/hR8lSGVblfpGSIb7R9H49NjzWUyVAWXL5s+20bdbt3PXxkfHmKwooeWL5ZFl53Y1JyinVrd9yKvIwSj/NedGb4bX2AwYPLilGX1psA+kNS/2aVbe9u4H3mii6QXpDUmh1Sf1LoVJRhhGLbYqJoEmlaaTVqknAmcV14AXkOedJ5DXqWgHiC1YJJg0mFgoyFjWKRi5GukcNP0Vbtcdd3AIf4ifhb1l9RZ6iQ4lNaWPVbpGCBYWBkPX5wgCWFg5KuZKxQFF0AZ5xYvWKoYw5peGkeamtuunbLebuCKYTPiqiN/Y8SkUuRnJEQkxiTmpPbljaaDZwRTlx1XXn6elF7yXsufsSEWY50jviOEJAlZj9pQ3T6US5n3J5FUeBflmzyh12Id4i0YLWBA4QFjdZTOVQ0VjZaMVyKcOB/WoAGge2Bo42JkV+a8p10UMROoFP7YCxuZFyITyRQ5FXZXF9eZWCUaLtsxG2+cdR19HVhdhp6SXrHfft9bn/0gamGHI/JlrOZUp9HUsVS7ZiqiQNO0mcGb7VP4luVZ4hseG0bdCd43ZF8k8SH5Hkxeutf1k6kVD5VrlilWfBgU2LWYjZnVWk1gkCWsZndmSxQU1NEVXxXAfpYYgL64mRrZt1nwW/vbyJ0OHQXijiUUVQGVmZXSF+aYU5rWHCtcLt9lYpqWSuBomMIdz2AqoxUWC1ku2mVWxFeb24D+mmFTFHwUypZIGBLYYZrcGzwbB57zoDUgsaNsJCxmAT6x2Skb5FkBGVOURBUH1cOil9hdmgF+tt1UntxfRqQBljMaX+BKokAkDmYeFBXWaxZlWIPkCqbXWF5ctaVYVdGWvRdimKtZPpkd2fibD5tLHI2dDR4d3+tgtuNF5gkUkJXf2dIcuN0qYymjxGSKpZrUe1TTGNpTwRVlmBXZZtsf21Mcv1yF3qHiZ2MbV+Ob/lwqIEOYb9PT1BBYkdyx3vofel/TZCtlxmatoxqV3NesGcNhFWKIFQWW2Ne4l4KX4NluoA9hYmVW5ZITwVTDVMPU4ZU+lQDVwNeFmCbYrFiVWMG+uFsZm2xdTJ43oAvgd6CYYSyhI2IEokLkOqS/ZiRm0VetGbdZhFwBnIH+vVPfVJqX1NhU2cZagJv4nRoeWiIeYzHmMSYQ5rBVB96U2n3ikqMqJiumXxfq2Kyda52q4h/kEKWOVM8X8VfzGzMc2J1i3VGe/6CnZlPTjyQC05VT6ZTD1nIXjBms2xVdHeDZofAjFCQHpcVnNFYeFtQhhSLtJ3SW2hgjWDxZVdsIm+jbxpwVX/wf5GVkpVQltOXclJEj/1RK1S4VGNVilW7arVt2H1mgpySd5Z5nghUyFTSduSGpJXUlVyWok4JT+5Z5lr3XVJgl2JtZ0Fohmwvbjh/m4Aqggj6CfoFmKVOVVCzVJNXWllpW7NbyGF3aXdtI3D5h+OJcornioKQ7Zm4mr5SOGgWUHheT2dHg0yIq04RVK5W5nMVkf+XCZlXmZmZU1afWFuGMYqyYfZqe3PSjkdrqpZXmlVZAHJrjWmX1E/0XCZf+GFbZutsq3CEc7lz/nMpd013Q31ifSN+N4JSiAr64oxJkm+YUVt0ekCIAZjMWuBPVFM+Wf1cPmN5bflyBYEHgaKDz5IwmKhORFERUotXYl/CbM5uBXBQcK9wknHpc2l0SoOih2GICJCikKOTqJluUVdf4GBnYbNmWYVKjq+Ri5dOTpJOfFTVWPpYfVm1XCdfNmJIYgpmZ2bra2ltz21WbvhulG/gb+lvXXDQciV0WnTgdJN2XHnKfB5+4YCmgmuEv4ROhl+GdId3i2qMrJMAmGWY0WAWYneRWloPZvdtPm4/dEKb/V/aYA97xFQYX15s02wqbdhwBX15hgyKO50WU4xUBVs6amtwdXWNeb55sYLvg3GKQYuojHSXC/r0ZCtluni7eGt6OE6aVVBZplt7XqNg22Nha2VmU2gZbmVxsHQIfYSQaZolnDtt0W4+c0GMypXwUUxeqF9NYPZgMGFMYUNmRGalacFsX27JbmJvTHGcdId2wXsnfFKDV4dRkI2Ww54vU95W+16KX2JglGD3YWZmA2ecau5trm9wcGpzan6+gTSD1IaoisSMg1Jyc5Zba2oElO5UhlZdW0hlhWXJZp9ojW3GbTtytIB1kU2ar08ZUJpTDlQ8VIlVxVU/XoxfPWdmcd1zBZDbUvNSZFjOWARxj3H7cbCFE4qIZqiFp1WEZkpxMYRJU5lVwWtZX71f7mOJZkdx8Yodj76eEU86ZMtwZnVnhmRgTov4nUdR9lEIUzZt+IDRnhVmI2uYcNV1A1R5XAd9Foogaz1rRms4VHBgPW3VfwiC1lDeUZxVa1bNVuxZCVsMXplhmGExYl5m5maZcblxunGncqd5AHqyf3CKAAABAKAApwCoAKkArwCwALIAtwC4AMYA1wDYAOYA9wD4AKIAowClAMQAxQDGAMcAyQDWANcA2ADcAOAA4gDkAOUA5gDnAOgA6QDqAOsA7ADuAO8A8gD0APYA+AD5APsA/AD/AAABAQECAQMBBAEFAQYBBwEIAQkBCgELAQwBDQEOAQ8BEAERARIBEwEWARcBGAEZARoBGwEcAR0BHgEfASABIQEiASMBJAElASYBJwEoASkBKgErAS4BLwEwATEBNAE1ATYBNwE4ATkBOgE7ATwBPQE+AUEBQgFDAUQBRQFGAUcBSAFKAUsBTAFNAVABUQFSAVMBVAFVAVYBVwFYAVkBWgFbAVwBXQFeAV8BYAFhAWIBYwFkAWUBZgFnAWgBaQFqAWsBbAFtAW4BbwFwAXEBcgFzAXQBdQF2AXcBeAF5AXoBewF8AX0BfgGSAaABoQGvAbABGAIZAhoCGwLGAscC2ALZAtsC3ALdAgADAQMDAwkDIwN6A4QDhQOGA4gDiQOKA4wDjgOPA5ADkQOSA5MDlAOVA5YDlwOYA5kDmgObA5wDnQOeA58DoAOhA6MDpAOlA6YDpwOoA6kDqgOrA6wDrQOuA68DsAOxA7IDswO0A7UDtgO3A7gDuQO6A7sDvAO9A74DvwPAA8EDwgPDA8QDxQPGA8cDyAPJA8oDywPMA80DzgMBBAIEAwQEBAUEBgQHBAgECQQKBAsEDAQOBA8EEAQRBBIEEwQUBBUEFgQXBBgEGQQaBBsEHAQdBB4EHwQgBCEEIgQjBCQEJQQmBCcEKAQpBCoEKwQsBC0ELgQvBDAEMQQyBDMENAQ1BDYENwQ4BDkEOgQ7BDwEPQQ+BD8EQARBBEIEQwREBEUERgRHBEgESQRKBEsETARNBE4ETwRRBFIEUwRUBFUEVgRXBFgEWQRaBFsEXAReBF8EkASRBLAFsQWyBbMFtAW1BbYFtwW4BbkFuwW8Bb0FvgW/BcAFwQXCBcMF0AXRBdIF0wXUBdUF1gXXBdgF2QXaBdsF3AXdBd4F3wXgBeEF4gXjBeQF5QXmBecF6AXpBeoF8AXxBfIF8wX0BQwGGwYfBiEGIgYjBiQGJQYmBicGKAYpBioGKwYsBi0GLgYvBjAGMQYyBjMGNAY1BjYGNwY4BjkGOgZABkEGQgZDBkQGRQZGBkcGSAZJBkoGSwZMBk0GTgZPBlAGUQZSBnkGfgaGBogGkQaYBqkGrwa6Br4GwQbSBgEOAg4DDgQOBQ4GDgcOCA4JDgoOCw4MDg0ODg4PDhAOEQ4SDhMOFA4VDhYOFw4YDhkOGg4bDhwOHQ4eDh8OIA4hDiIOIw4kDiUOJg4nDigOKQ4qDisOLA4tDi4OLw4wDjEOMg4zDjQONQ42DjcOOA45DjoOPw5ADkEOQg5DDkQORQ5GDkcOSA5JDkoOSw5MDk0OTg5PDlAOUQ5SDlMOVA5VDlYOVw5YDlkOWg5bDgIeAx4KHgseHh4fHkAeQR5WHlceYB5hHmoeax6AHoEegh6DHoQehR7yHvMeDCANIA4gDyATIBQgFSAXIBggGSAaIBwgHSAeICAgISAiICYgMCA5IDogqiCrIKwgryCnIBYhIiEZIhoiSCJkImUiICMhIwAlAiUMJRAlFCUYJRwlJCUsJTQlPCVQJVElUiVTJVQlVSVWJVclWCVZJVolWyVcJV0lXiVfJWAlYSViJWMlZCVlJWYlZyVoJWklaiVrJWwlgCWEJYgljCWQJZElkiWTJaAlAQAvZGV2L2xvZwAAIxcmARINGxUPETIJLx0fIQcZABQDJR4YKzMFMRMwDgIGECcc//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////9Nb25rZXkgV3JlbmNoAAAAAAAAAACvRERNVkspL05XTCowAAAAAQCAYgCAYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFplcm8AAAAAAAAAAAAAAAAAAAAAAIFwcE1WSykvTldMKjAAAAAHAIBiAIBiAIBiAJF/AIBiAIBiAIBiAJF/AIBiAIBiAIBiAJB/AIBiAIBiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQnVkZHkgSG9sbHkAAAAAAAAAAAAAeV5eTVZLKS9OV0wqMAAAAAMAgGIAgGIAgGIAkH8AgGIAgGIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQbHVzaAAAAAAAAAAAAAAAAAAAAACRXl5NVkspL05XTCowAAAAAQCAYgCIYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAERyaXZlAAAAAAAAAAAAAAAAAAAAAVtwcE1WSykvTldMKjAAAAADAABiAEBiAJJwAEBiAABiAEBiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ29tZSBBcm91bmQAAAAAAAAAAAAAYl5eTVZLKS9OV0wqMAAAAAMAgGIAgGIAgGIAkH8AgGIAgGIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABaZW4AAAAAAAAAAAAAAAAAAAAAAACHXl5NVkspL05XTCowAAAABwCAYgCQfwCAYgCAYgCAYgCQfwCAYgCAYgCAYgCQfwCAYgCQYgCAYgCAYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFNhbmRtYW4AAAAAAAAAAAAAAAAAAHxeXk1WSykvTldMKjAAAAAJAABiAABdAIBiAIBUAIBiAIBiAIBicJB/AABicJBrAABiAABiAIBiAABiAIBiAIBiAIBicJB/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ3Jhd2xpbmcAAAAAAAAAAAAAAAAAXl5eTVZLKS9OV0wqMAAAAAgAgGJBlGIAgGIAgGIAgGJBlGIAgGIAgGIAgGJBlGIAgGIAgGIAgGJBlGIAgGIAgGIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABTb25nIDIAAAAAAAAAAAAAAAAAAACCcHBNVkspL05XTCowAAAABgCAYgAAYgCAYgCAYgCAYgAAYgCAYgCAYgCAYgAAYgCAYgCAYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFNleCBUeXBlIFRoaW5nAAAAAAAAAIdeXk1WSykvTldMKjAAAAABAIBiAIBiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQmx1ZSBDYXJzAAAAAAAAAAAAAAAAZV5eTVZLKS9OV0wqMAAAAAkAgGIAkGIAgGIAGGIAgGIAkGIAgGIAGGIAgGIAkGIAgGIAkH8AgGIAGGIAgGIAkGIAgGIAkH8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABJbiBCbG9vbQAAAAAAAAAAAAAAAABQXl5NVkspL05XTCowAAAAAwCAYgCAYgCAYgCAfwCAYgCAYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEhhc2ggUGlwZQAAAAAAAAAAAAAAAH5eXk1WSykvTldMKjAAAAADAIBiAIBiAIBiAJB/AIBiAIBiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATXkgSGVybwAAAAAAAAAAAAAAAAAAml5eTVZLKS9OV0wqMAAAAAEAgGIAgGIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNYWNoaW5laGVhZAAAAAAAAAAAAABuUVFNVkspL05XTCowAAAAAQCAYgCAYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEhvbGlkYXkAAAAAAAAAAAAAAAAAAKheXk1WSykvTldMKjAAAAADAIBiAIBiAJB/AIBiAIBiAIBiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQnJhaW4gU3RldwAAAAAAAAAAAAAATF5eTVZLKS9OV0wqMAAAAAEAgGIAgGIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCb3VuZAAAAAAAAAAAAAAAAAAAAAB4Xl5NVkspL05XTCowAAAAAwCAYgCAYgCAYgCYYgCAYgCAYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEN1bWJlcnNvbWUAAAAAAAAAAAAAAFFeXk1WSykvTldMKjAAAAABAIBiAIBiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATHVtcAAAAAAAAAAAAAAAAAAAAAAAj15eTVZLKS9OV0wqMAAAAAEAgGIAgGIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIZXkgSmVhbG91c3kAAAAAAAAAAACaXl5NVkspL05XTCowAAAAAzCAYgCAYjCAYgCQfzCAYgCAYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEtyeXB0b25pdGUAAAAAAAAAAAAAAGReXk1WSykvTldMKjAAAAAKAABiAABiAIBiAIBiAIBiAABiAABiAABiAIBiAIBiAJB/AIBiAJB/AABiAABiAABiAIBiAIBiAJB/AIBiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARGFtbWl0AAAAAAAAAAAAAAAAAAAAbl5eTVZLKS9OV0wqMAAAAAEAgGIAgGIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNeSBPd24gV29yc3QgRW5lbXkAAABoXl5NVkspL05XTCowAAAAAQCAYgCAYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFRoZSBNaWRkbGUAAAAAAAAAAAAAAKJERE1WSykvTldMKjAAAAAEAIBiAIBiAIBiZIB/AIBiAJRdAIBiAIBiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQnVsbGV0AAAAAAAAAAAAAAAAAAAAel5eTVZLKS9OV0wqMAAAAAgAAGIAAGIAgGIAgGIAAGIAAGIAAGIAkFQAgGIAgGIAAGIAAGIAgGIAgGIAgGIAiHUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCZWF1dGlmdWwgRGlzYXN0ZXIAAACpXl5NVkspL05XTCowAAAAAQCAYgCAYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJlbGxzAAAAAAAAAAAAAAAAAAAAAHZeXk1WSykvTldMKjAAAAACAIBiAIBiAIBiAJB/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARnVlbAAAAAAAAAAAAAAAAAAAAAAAa15eTVZLKS9OV0wqMAAAAAYAgGIAgGIAgGIAgHAAgGIAgH8AgGIAkHAAgGIAgGIAgGIAkGIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABXaGF0IEkgR290AAAAAAAAAAAAAAFgXl5NVkspL05XTCowAAAABQBAYgBAYgBAYgBAfwBAYgBAYgBAYgBAfwBAYgBAYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFNheSBJdCBBaW50IFNvAAAAAAAAAE1eXk1WSykvTldMKjAAAAAHAABiAABiAIBiAIBiAABiAABiAIBiAIBiAIBiAIB1AIBiAIBiAIBiAABiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU2hpbmUAAAAAAAAAAAAAAAAAAAAAl2hoTVZLKS9OV0wqMAAAAAMAgGIAgGIAgGJ9gH8AgGIAgGIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCYXNrZXRjYXNlAAAAAAAAAAAAAABWXl5NVkspL05XTCowAAAAAQCAYgCAYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJyZWVkAAAAAAAAAAAAAAAAAAAAAJ9wcE1WSykvTldMKjAAAAABAIBiAIBiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATGl0aGl1bQAAAAAAAAAAAAAAAAAAfHBwTVZLKS9OV0wqMAAAAAYAgGIAAGIAgGIAgGIAgGIAAGIAgGIAgGIAgGIAAGIAgGIAgGIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVbmRvbmUAAAAAAAAAAAAAAAAAAABRXl5NVkspL05XTCowAAAABwAAYgAAYgCAYgCAYgAAYgAAYgCAYgCAYgCAYgCQfwCAYgCAYgCAYgCQfwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFN0b3J5IG9mIGEgR2lybAAAAAAAAGFMTE1WSykvTldMKjAAAAADAIBiAIBiAIBiaIB/AIBiAIBiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVHJpcHBpbgAAAAAAAAAAAAAAAAAAa0xMTVZLKS9OV0wqMAAAAAMAgGIAgGIAgGIAgH8AgGIAgGIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQdXBwZXRzAAAAAAAAAAAAAAAAAAJqZGRNVkspL05XTCowAAAACQCAYgCAYgAIcACQYgAIcACRWwAIcACQfwAIcACRWwCAYgCAYgCAYniQfwCAYgCAYgCAYniQcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEluc2lkZSBPdXQAAAAAAAAAAAAAAGtRUU1WSykvTldMKjAAAAACAIBiAIBiAIBiAIBiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ2hlcnViIFJvY2sAAAAAAAAAAAAAVHBwTVZLKS9OV0wqMAAAAAQAAGIABGIAgGIAgGIAgGIAiHUAgGIAgGIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCZXZlcmx5IEhpbGxzAAAAAAAAAABYXl5NYUspL05iTCowAAAABgCAYgCAYgCAYgCCegAAYgAAYgCAYgCAYgCAYgCCegCAYgCAYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAExvdwAAAAAAAAAAAAAAAAAAAAAAAFZBQU1WSykvTldMKjAAAAAJAIBiAIBiAABiAJBiAIBiAIBiAABiAJBiAIBiAIBiAIBiXpB/AABiXpBiAIBiAIBiAIBiXpBiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ2xvc2luZyBUaW1lAAAAAAAAAAAAeF5eTVZLKS9OV0wqMAAAAAVBgEtBgEsAgGIAgGJBgEtBgEsAgGIAgGJBgEtBgEsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABTbGF5ZXIAAAAAAAAAAAAAAAAAAACCXl5NVkspL05XTCowAAAAAwCQYgCQYgCAYgCAYgCAYgCQfwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJpcnRoZGF5AAAAAAAAAAAAAAAAAIJeXk1WSykvTldMKjAAAAABAIBiAIBiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARGVjZW1iZXIAAAAAAAAAAAAAAAAAei4uTVZLKS9OV0wqMAAAAAgACGIACGIACGIAgFkACGIACGIACGIAgFkACGIYgFkACGIAkFkACGJBkF0ACGIACGIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCb3VuY2luZwAAAAAAAAAAAAAAAACWXl5NVkspL05XTCowAAAAAwCAYgCAYgCAYgCAdQCAYgCAYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFNhdGFuIFNvbmcAAAAAAAAAAAAAAIxeXk1WSykvTldMKjAAAAAFAEBiAIBiAEBiAIB/AEBiAIBiAEBiAIB/AEBiAIBiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAS2lkcwAAAAAAAAAAAAAAAAAAAAAAgl5eTVZLKS9OV0wqMAAAAAcAgGIAgGIAgGIAgHAAgGIAgGIAgGIAgHAAgGIAgGIAgGIAgHgAgGIAgGIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABTbWFsbCBUaGluZ3MAAAAAAAAAAACCXl5NVkspL05XTCowAAAAAwCAYgCAYiCAYgCAYgCAYgCAYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAENyZWVwAAAAAAAAAAAAAAAAAAAAAFI6Ok1WSykvTldMKjAAAAAFAIBiAAhiAIBiAIBiAIBiAAhiAIBiAIBiAIBiAAhiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAR28gTXkgV2F5AAAAAAAAAAAAAAAAgjo6TVZLKS9OV0wqMAAAAAMAgGIAgGIAgGIAgHAAgGIAgbG9hZCBwcm9ncmFtICVkAGRlZmF1bHQgc2NlbmUgJWQAbG9hZCBzY2VuZSAlZAAgICAgICAgICAgICAgICAgICAgIABpbnZhbGlkYXRlIE1JREkgc3RhdGUAbmV4dCBwcm9ncmFtAG5leHQgc29uZwBwcmV2IHByb2dyYW0AcHJldiBzb25nAHJlc2V0IHNjZW5lAGNoYW5nZSBzZXRsaXN0IG1vZGUATUlESSBjaGFuZ2UgcHJvZ3JhbSAlZABBTVAlZCBvZmYAQ0FCJWQgWQBHYWluJWQgMHglMDJ4AEdhdGUlZCBvZmYAQU1QJWQgb24AQU1QJWQgWABDQUIlZCBYAEdhdGUlZCBvbgBBTVAlZCBZAENvbXAlZCBvbgBNSURJIHNldCBBTVAlZCB2b2x1bWUgPSAlcwBvZmYAb24ATUlESSBzZXQgQU1QMSAlLjRzICVzAE1JREkgc2V0IEFNUDIgJS40cyAlcwBNSURJIHNldCB0ZW1wbyA9ICVkIGJwbQB1cGRhdGUgTENEAENMTi9EUlZ8QUMAR0FJTi0tAEdBSU4rKwBWT0wtLQBWT0wrKwBGWHxSRVNFVABTT05HLS0AU09ORysrAFRBUHxNT0RFAFNDRU5FKyt8MQBQcmcgIDAvMTI4IFNjbiAgMC8gMABTbmcgIDAvIDAgIFNjbiAgMC8gMABfX3VubmFtZWQgc29uZyAjICAgIAAxQyBnIDAgIHYgIDAuMCAtLS0tLQAyQyBnIDAgIHYgIDAuMCAtLS0tLQBuZXh0IHNjZW5lAENobzFDaG8yQ21wMUNtcDJDcnMxQ3JzMkRseTFEbHkyRHJ2MURydjJFbmgxRmx0MUZsdDJGbHQzRmx0NEZsZzFGbGcyRm1udEZ4bHBHdGUxR3RlMkdlcTFHZXEyR2VxM0dlcTRNZWdhTWNtMU1jbTJNZHkxTWR5MlBlcTJQZXEzUGVxNFBlcTFQaHIxUGhyMlBpdDFQaXQyUWNoMVFjaDJSc24xUnNuMlJ2YjFSdmIyUmluZ1J0cjFSdHIyU3luMVN5bjJUcm0xVHJtMlZvY29Wb2wxVm9sMlZvbDNWb2w0V2FoMVdhaDIwMTIzNDU2Nzg5QUJDREVGICAgIABtYXggc3lzdGVtIGJ5dGVzID0gJTEwbHUKAHN5c3RlbSBieXRlcyAgICAgPSAlMTBsdQoAaW4gdXNlIGJ5dGVzICAgICA9ICUxMGx1CgD/////////////////////////////////////////////////////////////////AAECAwQFBgcICf////////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI////////woLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIj/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wABAgQHAwYFAF8wLi4uLzlaegCAeACA/4ABIH+BgIANCv9/IIEgdGVzdABfMC4uLi85WnpYN2lTSk5kMjFzVQCAeDIyL3dLNTJaS0dBAHgAAQECAgICAgIBAgICAgICAVh5MDFAIwECgH//DQqBCSAhACQ2JHJvdW5kcz0xMjM0JGFiYzAxMjM0NTY3ODkkACQ2JHJvdW5kcz0xMjM0JGFiYzAxMjM0NTY3ODkkQkNwdDh6THJjL1JjeXVYbUNET0UxQUxxTVhCMk1INm4xZzg5MUhoRmo4Lnc3THhHdi5GVGtxcTZWeGMva20zWTBqRTBqMjRqWTVQSXYvb091NnJlZzEAJDYkACQ2JCVzJS4qcyQAABUqFisBLAIXAxgtGS4ELwUaBhswHDEHMggdCR4zHzQKNQsgDCE2IjcNOA4jDyQ5JToQOxEmEic8KD0TPhQpEQAKABEREQAAAAAFAAAAAAAACQAAAAALAAAAAAAAAAARAA8KERERAwoHAAETCQsLAAAJBgsAAAsABhEAAAAREREAAAAAAAAAAAAAAAAAAAAACwAAAAAAAAAAEQAKChEREQAKAAACAAkLAAAACQALAAALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAADAAAAAAJDAAAAAAADAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAAAAAAAAAAAAAAANAAAABA0AAAAACQ4AAAAAAA4AAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAADwAAAAAPAAAAAAkQAAAAAAAQAAAQAAASAAAAEhISAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIAAAASEhIAAAAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALAAAAAAAAAAAAAAAKAAAAAAoAAAAACQsAAAAAAAsAAAsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAMAAAAAAkMAAAAAAAMAAAMAAAtKyAgIDBYMHgALTBYKzBYIDBYLTB4KzB4IDB4AGluZgBJTkYATkFOAFQhIhkNAQIDEUscDBAECx0SHidobm9wcWIgBQYPExQVGggWBygkFxgJCg4bHyUjg4J9JiorPD0+P0NHSk1YWVpbXF1eX2BhY2RlZmdpamtscnN0eXp7fABJbGxlZ2FsIGJ5dGUgc2VxdWVuY2UARG9tYWluIGVycm9yAFJlc3VsdCBub3QgcmVwcmVzZW50YWJsZQBOb3QgYSB0dHkAUGVybWlzc2lvbiBkZW5pZWQAT3BlcmF0aW9uIG5vdCBwZXJtaXR0ZWQATm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeQBObyBzdWNoIHByb2Nlc3MARmlsZSBleGlzdHMAVmFsdWUgdG9vIGxhcmdlIGZvciBkYXRhIHR5cGUATm8gc3BhY2UgbGVmdCBvbiBkZXZpY2UAT3V0IG9mIG1lbW9yeQBSZXNvdXJjZSBidXN5AEludGVycnVwdGVkIHN5c3RlbSBjYWxsAFJlc291cmNlIHRlbXBvcmFyaWx5IHVuYXZhaWxhYmxlAEludmFsaWQgc2VlawBDcm9zcy1kZXZpY2UgbGluawBSZWFkLW9ubHkgZmlsZSBzeXN0ZW0ARGlyZWN0b3J5IG5vdCBlbXB0eQBDb25uZWN0aW9uIHJlc2V0IGJ5IHBlZXIAT3BlcmF0aW9uIHRpbWVkIG91dABDb25uZWN0aW9uIHJlZnVzZWQASG9zdCBpcyBkb3duAEhvc3QgaXMgdW5yZWFjaGFibGUAQWRkcmVzcyBpbiB1c2UAQnJva2VuIHBpcGUASS9PIGVycm9yAE5vIHN1Y2ggZGV2aWNlIG9yIGFkZHJlc3MAQmxvY2sgZGV2aWNlIHJlcXVpcmVkAE5vIHN1Y2ggZGV2aWNlAE5vdCBhIGRpcmVjdG9yeQBJcyBhIGRpcmVjdG9yeQBUZXh0IGZpbGUgYnVzeQBFeGVjIGZvcm1hdCBlcnJvcgBJbnZhbGlkIGFyZ3VtZW50AEFyZ3VtZW50IGxpc3QgdG9vIGxvbmcAU3ltYm9saWMgbGluayBsb29wAEZpbGVuYW1lIHRvbyBsb25nAFRvbyBtYW55IG9wZW4gZmlsZXMgaW4gc3lzdGVtAE5vIGZpbGUgZGVzY3JpcHRvcnMgYXZhaWxhYmxlAEJhZCBmaWxlIGRlc2NyaXB0b3IATm8gY2hpbGQgcHJvY2VzcwBCYWQgYWRkcmVzcwBGaWxlIHRvbyBsYXJnZQBUb28gbWFueSBsaW5rcwBObyBsb2NrcyBhdmFpbGFibGUAUmVzb3VyY2UgZGVhZGxvY2sgd291bGQgb2NjdXIAU3RhdGUgbm90IHJlY292ZXJhYmxlAFByZXZpb3VzIG93bmVyIGRpZWQAT3BlcmF0aW9uIGNhbmNlbGVkAEZ1bmN0aW9uIG5vdCBpbXBsZW1lbnRlZABObyBtZXNzYWdlIG9mIGRlc2lyZWQgdHlwZQBJZGVudGlmaWVyIHJlbW92ZWQARGV2aWNlIG5vdCBhIHN0cmVhbQBObyBkYXRhIGF2YWlsYWJsZQBEZXZpY2UgdGltZW91dABPdXQgb2Ygc3RyZWFtcyByZXNvdXJjZXMATGluayBoYXMgYmVlbiBzZXZlcmVkAFByb3RvY29sIGVycm9yAEJhZCBtZXNzYWdlAEZpbGUgZGVzY3JpcHRvciBpbiBiYWQgc3RhdGUATm90IGEgc29ja2V0AERlc3RpbmF0aW9uIGFkZHJlc3MgcmVxdWlyZWQATWVzc2FnZSB0b28gbGFyZ2UAUHJvdG9jb2wgd3JvbmcgdHlwZSBmb3Igc29ja2V0AFByb3RvY29sIG5vdCBhdmFpbGFibGUAUHJvdG9jb2wgbm90IHN1cHBvcnRlZABTb2NrZXQgdHlwZSBub3Qgc3VwcG9ydGVkAE5vdCBzdXBwb3J0ZWQAUHJvdG9jb2wgZmFtaWx5IG5vdCBzdXBwb3J0ZWQAQWRkcmVzcyBmYW1pbHkgbm90IHN1cHBvcnRlZCBieSBwcm90b2NvbABBZGRyZXNzIG5vdCBhdmFpbGFibGUATmV0d29yayBpcyBkb3duAE5ldHdvcmsgdW5yZWFjaGFibGUAQ29ubmVjdGlvbiByZXNldCBieSBuZXR3b3JrAENvbm5lY3Rpb24gYWJvcnRlZABObyBidWZmZXIgc3BhY2UgYXZhaWxhYmxlAFNvY2tldCBpcyBjb25uZWN0ZWQAU29ja2V0IG5vdCBjb25uZWN0ZWQAQ2Fubm90IHNlbmQgYWZ0ZXIgc29ja2V0IHNodXRkb3duAE9wZXJhdGlvbiBhbHJlYWR5IGluIHByb2dyZXNzAE9wZXJhdGlvbiBpbiBwcm9ncmVzcwBTdGFsZSBmaWxlIGhhbmRsZQBSZW1vdGUgSS9PIGVycm9yAFF1b3RhIGV4Y2VlZGVkAE5vIG1lZGl1bSBmb3VuZABXcm9uZyBtZWRpdW0gdHlwZQBObyBlcnJvciBpbmZvcm1hdGlvbgAAWHkwMUAjAQKAf/8NCoEJICEAJDUkcm91bmRzPTEyMzQkYWJjMDEyMzQ1Njc4OSQAJDUkcm91bmRzPTEyMzQkYWJjMDEyMzQ1Njc4OSQzVmZEalB0MDVWSEZuNDdDL29qRlo2S1JQWXJPamoxbExiSC5ka0YzYlo2ACQ1JAByb3VuZHM9AHJvdW5kcz0ldSQAJDUkJXMlLipzJAAAChQVAQsMFgIDDRcYBA4PGQUGEBobBxESHAgJEx0kMmEkMDAkYWJjZGVmZ2hpamtsbW5vcHFyc3R1dQA4YiDQwdLPzNgAVlVyUG1YRDZxL25WU1NwN3BORGhDUjkwNzFJZklSZQBVAGkxRDcwOXZmYW11bGltbEdjcTBxcTNVdnVVYXN2RWEAVQD/ozM0////ozM0NQACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEEAEBAQEBAQEBAQEBAQEBAAAE2Nzg5Ojs8PT4/QEBAQEBAQAIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobQEBAQEBAHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDVAQEBAQC4vQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkAWHkwMUAjAQKAf/8NCoEJICEAJDEkYWJjZDAxMjMkACQxJGFiY2QwMTIzJDlRY2c4RHl2aWVrVjN0REdNWnluSjEAKgAkMSQAAAYMAQcNAggOAwkPBAoFLi8wMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5egASERMUFRYXGBkaGxwdHh8gIREiIyQRJSYnKCkqKywRLS4vEBAwEBAQEBAQEDEyMxA0NRAQERERERERERERERERERERERERERERERERETYRERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE3ERERETgROTo7PD0+ERERERERERERERERERERERERERERERERERERERERERERERERERERERERET8QEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBARQEERQkNERUZHSEkQEBBKS0xNThAQEE9QEBAQEFEQEBAQEBAQEBARERFSUxAQEBAQEBAQEBAQEREREVQQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAREVUQEBAQVhAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBBXEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBBYWVpbEBAQEBAQEBAQEBAQEBAQEBAQEBAQEFwQEBAQEBAQEBAQEBAQEBAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////////////////////////////////8AAAAAAAAAAP7//wf+//8HAAAAAAAEIAT//3////9//////////////////////////////////8P/AwAfUAAAAAAAAAAAAAAgAAAAAADfPEDX///7////////////v///////////////////////A/z/////////////////////////AP7///9/Av7/////AAAAAAD/v7YA////BwcAAAD/B//////////+/8P////////////////vH/7h/58AAP///////wDg////////////////AwD//////wcwBP////z/HwAA////AQAAAAAAAAAA/R8AAAAAAADwA/9//////////+//3+H/z//+/u6f+f///cXjn1mAsM//AwDuh/n///1tw4cZAl7A/z8A7r/7///97eO/GwEAz/8AAO6f+f///e3jnxnAsM//AgDsxz3WGMf/w8cdgQDA/wAA7t/9///97+PfHWADz/8AAOzf/f///e/j3x1gQM//BgDs3/3/////599dgADP/wD87P9//P//+y9/gF//AAAMAP7/////f/8HPyD/AwAAAACWJfD+ruz/O18g//MAAAAAAQAAAP8DAAD//v///x/+/wP///7///8fAAAAAAAAAAD///////9/+f8D///nwf//f0D/M/////+/IP//////9////////////z1/Pf//////Pf////89fz3/f/////////89//////////+HAAAAAP//AAD/////////////HwD+//////////////////////////////////////////////////////////+f///+//8H////////////xwEA/98PAP//DwD//w8A/98NAP///////8///wGAEP8DAAAAAP8D//////////////8A//////8H//////////8/AP///x//D/8BwP////8/HwD//////w////8D/wMAAAAA////D/////////9//v8fAP8D/wOAAAAAAAAAAAAAAAD////////v/+8P/wMAAAAA///////z////////v/8DAP///////z8A/+P//////z8AAAAAAAAAAAAAAAAA3m8A////////////////////////////////AAAAAAAAAAD//z8//////z8//6r///8/////////31/cH88P/x/cHwAAAAAAAAAAAAAAAAAAAoAAAP8fAAAAAAAAAAAAAAAAhPwvPlC9//PgQwAA//////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwP///////wMAAP//////f///////f/////////////////////8feAwA/////78g/////////4AAAP//fwB/f39/f39/f/////8AAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAAAAD+Az4f/v///////////3/g/v/////////////34P////8//v////////////9/AAD///8HAAAAAAAA////////////////////////////////PwAAAAAAAAAAAP////////////////////////////////8fAAAAAAAA//////////////////////8fAAAAAAAAAAD//////z//H////w8AAP//////f/CP////gP////////////8AAAAAgP/8////////////////eQ8A/wcAAAAAAAAAAAD/u/f///8AAAD///////8PAP//////////DwD/AwAA/Aj//////wf/////BwD///8f////////9/8AgP8DAAAAAP///////38A/z//A///fwT/////////fwUAADj//zwAfn5+AH9/AAAAAAAAAAAAAAAAAAAAAAAA//////8H/wP//////////////////////////w8A//9/+P//////D/////////////////8//////////////////wMAAAAAfwD44P/9f1/b/////////////////wMAAAD4////////////////PwAA///////////8////////AAAAAAD/DwAAAAAAAAAAAAAAAAAA3/////////////////////8fAAD/A/7//wf+//8HwP////////////9//Pz8HAAAAAD/7///f///t/8//z8AAAAA////////////////////BwAAAAAAAAAA////////HwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///x////////8BAAAAAAD///9/AAD///8HAAAAAAAA////P/////8P/z4AAAAAAP////////////////////////8//wMAAAAAAAAAAAAAP/3/////v5H//z8AAAAAAAAAAAAAAAAAAAAAAAAAAAD//z8A////AwAAAAAAAAAA/////////8AAAAAAAAAAAG/w7/7//w8AAAAAAP///x8AAAAAAAAAAAAAAAAAAAAA////////PwD//z8A//8HAAAAAAAAAAAAAAAAAAAAAAD///////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////PwAAAMD/AAD8////////AQAA////Af8D////////x/8AAAAAAAAAAP//////////HgD/AwAAAAAAAAAAAAAAAAAAAAAAAAAA////////PwD/AwAAAAAAAP////////////////9/AAAAAAAAAAAAAAAAAAAAAAAA////////////////BwAAAAAAAAAAAAAAAAAAAAAAAAD//////38AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////8fAP//////fwAA+P8AAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////f///////////fZN7/6+//////////v+ff3////3tf/P3//////////////////////////////////////////////////////z/////9///3////9///3////9///3////9//////f////3///fP////////7////5b+9wqE6paqlvf3Xv/7/w/u+/8PAAAAAAAAAAASEBMUFRYXGBkaGxwdHh8gIRAQIiMQJCUmJygpKisQLC0uES8wERExERERMjM0NTY3ODkREBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEDoQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEDsQPD0+P0BBEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEEIQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEEMQEEQQRUZHEEgQSRAQEBBKS0xNEBBOEE9QEBAQEFEQEBAQEBAQEBAQEBAQUhAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQUxAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEFRVVlcQEFhZEBAQEBAQEBAQEBAQEBAQEBAQEBAQEFoQW1xdXl9gYWIQEBAQEBAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////////////////////////////////8AAAAA/v8A/AEAAPgBAAB4AAAAAP/73/sAAIAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwA/P/gr//////////////f//////8gQLAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAA/AMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/AAAAAAAhv7///8AQEkAAAAAABgA3/8AyAAAAAAAAAABADwAAAAAAAAAAAAAAAAQ4AEeAGD/vwAAAAAAAP8HAAAAAAAAAAAAAAAAAAAAAAAAAPjPAwAAAAMAIP9/AAAATgAAAAAAAAAAAAAAAAAAAAAA/AAAAAAAAAAAABAAIB4AMAABAAAAAAAAAAAQACAAAAAA/A8AAAAAAAAAEAAgAAAAAAAAAAAAAAAAABAAIAAAAAADAAAAAAAAAAAQACAAAAAA/QAAAAAAAAAAAAAgAAAAAP8HAAAAAAAAAAAAIAAAAAAA/wAAAAAAAAAQACAAAAAAAAAAAAAAAAAAAAAgAAAAAD8CAAAAAAAAAAAABAAAAAAQAAAAAAAAgACAwN8ADAAAAAAAAAAAAAAAAAAfAAAAAAAA/v///wD8//8AAAAAAAAAAPwAAAAAAADA/9//BwAAAAAAAAAAAACABgD8AAAYPgAAgL8AzAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAYP///x8AAP8DAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAQAAGAAAAAAAAAAAADgAAAAAEAAAAHAAAAAAAAAAAAAAAAAAAAAwAAD+fy8AAP8D/38AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADjEAAAAAAAAAAAAAAAAAAAAAAADE/////wAAAMAAAAAAAAAAAAEA4J8AAAAAfz8AAAAAAAAAAAAAAAAAAAAAEAAQAAD8////HwAAAAAADAAAAAAAAEAADPAAAAAAAADA+AAAAAAAAADAAAAAAAAAAAD/AP///yEQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////9/AADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgA+AA4ADgAGCA+P////z//////38f/PF//38AAP///wMAAP////8BAHsD0MGvQgAMH7z//wAAAAAAAv//////////////////////////////////////////////////////////DwD/////fwAAAP8HAAD/////////////PwAAAAAAAPz///7/////////////////////////////////////////////////////H/8DAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4IcD/gAAAAAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAA//////9//w8AAAAAAAAAAP////v/////////////DwD//////////////////////////////////z8AAAD/Dx7///8B/MHgAAAAAAAAAAAAAAAeAQAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAA//8AAAAA/////w8AAAD///9/////////////////////////////////////fwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////AAAAAAAAAAAAAAAAAAAAAAAA////////fwAAAAAAAMAA4AAAAAAAAAAAAAAAgA9wAAAAAAAAAAAAAAAAAAD/AP//fwADAAAAAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAARAgAAAAP/wMAAAAAAADwAAAAAAAAAAAAEMAAAP//AwcAAAAAAPgAAAAACIAAAAAAAAAAAAAACAD/PwDAAAAAAAAAAAAAAAAAAAAA8AAAgAsAAAAAAAAAgAIAAMAAAEMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAACAAAAAAAAAAAAAAAAAAAAAPz/AwAAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMP///wN/AP/////3/38PAAAAAAAAAAAAAAAAAAAAAACA/v8A/AEAAPgBAAD4PwAAAAAAAAAAAAAAAAAAAH9/ADCH//////+P/wAAAAAAAOD//wf/DwAAAAAAAP//////PwAAAAAPAAAAAAAAAAAAAAAAAACAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAID/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAMCPAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH/wD/AQAAAOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP4AAAD/AAAA/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///9/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwD/8/z8AAAADAAAAAAAA/gMAAAAAAAAAAAAAAAAAGAAPAAAAAAAAAAAAAAAAAAAA4QEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACABwAAAAAAAAAAAAAAAAD///////////////////////////////////////8/AP////9//v///////////////////////////z8AAAAA//////////8/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////fwD//wMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAgAAAAIAAAgAAAAIAAAgAAAAIAAAAACAAAAAgAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAP//////D////////////////w8A/3/+f/7//v8AAAAA/wf///9//////////w///////wcAAAAAAAAAAMD///8HAP//////B/8BAwAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8BAL///////////x///w8A/////98HAAD//wEA/////////3/9/////////////////////////////x7/////////Pw8A////AAAAAAAAAAAAAAAAAAAAAAAA+P//////////4f8AAAAAAAD//////////z8AAAAAAAAA//////////////////8PAAAAAAAAAAAAAAAAAAAAAABhbG51bQBhbHBoYQBibGFuawBjbnRybABkaWdpdABncmFwaABsb3dlcgBwcmludABwdW5jdABzcGFjZQB1cHBlcgB4ZGlnaXQAEBAQEhMUFRYXGBkaGxwdHh8QECAQEBAhIiMkJSYnEBAoEBAQEBAQEBAQEBApKhAQKxAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQECwQLS4vMBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAxEBAyMxA0EBAQEBAQEBA1EBAQEBA2NxAQEBA4EBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEDkQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQOjsQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////////////////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+AMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP7/////v7YAAAAAAAAAHwD/BwAAAAAA+P//AAABAAAAAAAAAAAAAADAv589AAAAgAIAAAD///8HAAAAAAAAAAAAAMD/AQAAAAAAAPgPAAAAwPvvPgAAAAAADgAAAAAAAAAAAAAAAAAAAADw//9/BwAAAAAAABT+If4ADAAAAAIAAAAAAAAQHiAAAAwAAAAGAAAAAAAAEIY5AgAAACMABgAAAAAAABC+IQAADAAAAAIAAAAAAACQHiBAAAwAAAAEAAAAAAAAAAEgAAAAAAAAAAAAAAAAAMDBPWAADAAAAAAAAAAAAACQQDAAAAwAAAAAAAAAAAAAAB4gAAAMAAAAAAAAAAAAAAAABFwAAAAAAAAAAAAAAPIHgH8AAAAAAAAAAAAAAADyGwA/AAAAAAAAAAAAAwAAoAIAAAAAAAD+f9/g//7///8fQAAAAAAAAAAAAAAAAOD9ZgAAAMMBAB4AZCAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAAAHAAAAAwAAAAMAAAAAAAAALA/QP4PIAAAAAAAOAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAACHAQQOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAQAAAAAAAEB/5R/4nwAAAAAAAAAAAAAAAAAAAAAPAAAAAADQFwQAAAAA+A8AAwAAADwLAAAAAAAAQKMDAAAAAAAA8M8AAAAAAAAAAAAAAAAAAAAAAAAA9//9IRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////38AAPAA+AAAAHwAAAAAAAAf/AAAAAAAAAAAAAAAAP////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAMAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAP////8AAAAAADwAAAAAAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACA9z8AAACAAAAAAAAAAAAAAAMARAgAAGAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAP//AwAAAAAAwD8AAID/AwAAAAAABwAAAAAAyBMAAAAAAAAAAAAAAAAAfmYACBAAAAAAAAAAAAAAAACdwQIAAAAAMEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAhAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAB/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIG7wAAAAAACHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAP9/AAAAAAAAAAMAAAAAAHgmAAAAAAAAAAAHAAAAgO8fAAAAAAAAAAAAAwAAAAAAwH8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACi/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAA/j/5w8AAAA8AAAAAAAAAAAAAAAAAAAAAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQEBAQEBAQEBAQEBAQEBASEBAQEBAQEBAQEBAQEBAQEBATEBAQEBAQEBAQEBQVFhcYEREREREREREREREREREREREREREREREREREZEREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREaEBAQEBsQEBEREREREREREREREREREREREREREREREREREREREREREREREREREREREREcEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEREQEBAdHhAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQHxAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQIBAQEBAQEBAQEBAQEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////////////////////////////////AAAAAAAAAAD4AAAAAAAAAAAAAPwAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////7/////////////w8A//////////////////////////////////8/AAAA/w//////////f/7///////////9//v///////////////+D/////P/7/////////////f///////B/////8PAP//////f///////AP///////////////////////////3////////////////////////////////8AAAAAAAAAAP//////////////////////H////////38AAAAAAAAAAAAAAAAAAAAAAAAA////HwAAAAAAAAAAAAAAAAAAAAD//////////////////////////w8A//9/+P//////DwAA/wMAAP/////3/38PAAAAAAAAAAAAAAAAAAAAAAAA/v//////////////AQAAAAAAAAAAAAAAAAAAAH8AAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcA//////8H/wEDAAAAAAAAAAAAAAAAAAAAAAAAAAAAdG91cHBlcgB0b2xvd2VyAC9wcm9jL3NlbGYvZmQvAGluZmluaXR5AG5hbgAxLjEuMTUATENfQ1RZUEUAAAAATENfTlVNRVJJQwAATENfVElNRQAAAAAATENfQ09MTEFURQAATENfTU9ORVRBUlkATENfTUVTU0FHRVMACAoHCgsLUGx1cmFsLUZvcm1zOgBucGx1cmFscz0AcGx1cmFsPQBuIT0xOwABAgMDBAQEBAUFBgYGAHwmPSE+PCstKiUvfCY9PT09bWVzc2FnZXMAdXRmOABjaGFyAADId2NoYXJ0AADGdWNzMgB1Y3MyYmUAAMR1Y3MybGUAAMV1dGYxNgB1dGYxNmJlAADCdXRmMTZsZQAAwXVjczQAdWNzNGJlAHV0ZjMyAHV0ZjMyYmUAAMB1Y3M0bGUAdXRmMzJsZQAAw2FzY2lpAHVzYXNjaWkAaXNvNjQ2AGlzbzY0NnVzAADHZXVjanAAANBzaGlmdGppcwBzamlzAADRZ2IxODAzMAAA2GdiawAA2WdiMjMxMgAA2mJpZzUAYmlnZml2ZQBjcDk1MABiaWc1aGtzY3MAAOBldWNrcgBrc2M1NjAxAGtzeDEwMDEAY3A5NDkAAOhpc284ODU5MQBsYXRpbjEAAIBpc284ODU5MgAAIADYEMsaAKQRCAAAHFLIIqAAQIooANwwCxsAqCEILAAgYggjodRSyih7AAAADQCUgQMAPgCABABKAAAAEEK0EQcAANwBAAB/VALAJQAAkAgAfAAAQA0AmJEDAD8AkAQASwAAQBBDuCEHAADgAQAAgFgCACYAAKCILGlzbzg4NTkzAAAgAFgRCwAABEAFAAB4UYgTYAAQgCgAXAEAAAAAUAUAAHxhyBNhABDAKAAAAEAAAPCgAwAAAAAAAAAAAAAAAQAAAAAAQAEAAEwAAAAAAEwyCAAAAABAAAD0sAMAAAAAAAAAAAAAAAEAAAAAAEQBAABNAAAAAABQQogsaXNvODg1OTQAACAA2EBGHwBgcQYAABxChBSNAEAKAADcMIsfAGSBBiwAIFLEFI7MUQodMgAAAAAAAAAAFz4AgAQARgAAgBZCvFGHGAAAAAAAAGQCAAAAPBIJADMAAAAAAAAAQBc/AJAEAEcAAMAWQ8BhxxgAAAAAAABoAgAAAEAiiSxpc284ODU5NQAAIAAMRFBBBh2EUEIKLcRQQw4B8BBEEUk0EUUVWXQRRhlptBFHHXn0EUghiTQSSSWZdBJKKam0EkstufQSTDHJNBNNNdl0E0456bQTTz359BNQQQk1FFFFGXUUUkkptRRTTTn1FFRXRiXVVFRVZdVVWGWl1VZcDdCVV2lzbzg4NTk2AAAgAAQQQAAABBBAAAEEEEAAlAEQQAABBBBAAAEEEEAAAQQQQGUBBBCAZQFchllmmm3GWWeefQZaaKKNRlpppp2GWmqqrcZaa669BlsAAQQQQACxyTYbbbXZdhtuuem2G2+9+fYbcMEJN1wAAQQQQAABBBBAAAEEEEAAaXNvODg1OTcAACAAFGkkAFRWCQAAAACwCwAAABDAkAAAAAAAvPTiCwC/ABMMAMIAMAwxxRhzDDLJKLMMM8048ww00UgzDTXVWBPANdhko8023HTjzTfghCPOOOSUY8456KSjzjrstOPOO/DEI8889NRjzz345KPPPvz0488/AAUkUABpc284ODU5OAAAIAAEAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAA8AAAAAAAQAABBBBAAAEEEEAAAQQQQAABBBBAAAEEEEAAAQQQQAABBBBAAAEEEACRdNVl11145aXXXnz15ddfgAUm2GCEFWbYYYglpthijDXmWAAB/AhkAGlzbzg4NTk5AABQTgAAAAAAAAAAAAAAAAAAAHhRCAAAAAAAAAAAAAAAAAAAAAAAAAAAAE8AAAAAAAAAAAAAAAAAAAB8YQgAaXNvODg1OTEwAAAgANhAhBRaYCEGAGcIcUgjpAAQyRwA3FDEFFtkMQYAaAyBiCOlDCkJHTIAAAAAAAAAABc+AIAEAEYAAAAAALxRBwAAAADAIwBkAgAAAAAAAAAzAAAAAAAAAEAXPwCQBABHAAAAAADAYQcAAAAAACQAaAIAAAAAAAAZaXNvODg1OTExAHRpczYyMAAAIABAF51001FXnXXXYZeddttx151334EXnnjjkVeeeeehl55667HXnnvvwReffPPRV5999+GXn3778deff/8BGKCAAxJYoIEHIphgAAEEEICCCzLYoIMPQhihhBNSWKGFF2KYoYYbctihhx+CGKKII5JYookBBBBAAGlzbzg4NTkxMwAAIAAkCQAAACgJAAANANAHAAAAAMACAAAAAABIAgAAABAA4AcAAAAAgAM2cCEDDgAAgAQRPgAAihFSiKHFGYe08QYAdQAAAACZrBFIJACIQgoAN3QxQw4AAJBEET8AEMoRU4yxBRqIuAEHAHYAAAAAmrAhiCQAjFKKkWlzbzg4NTkxNAAAIACciCIAPPSQIgA1AnCjijsCAMAnK7IIRRQtugjAizbCiGOMPOaoo4wAAAAAAAAAAAAAAAAAAAAAAAAAAJsAAAAAAAAAwIwAAAAAAAAA0AkAAAAAAAAAAAAAAAAAAAAAAAAAAACcAAAAAAAAAACNAAAAAAAAAOAJAGlzbzg4NTkxNQBsYXRpbjkAACRUAnAIAIgAAAAAAAAAAAAAAAAAAKQAAAAApQAAAAB56PEJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaXNvODg1OTE2AAAgANhwwxpUKnkIAIgAsAoAoAAQiigAAOADG6QkCQAApfzACgB56PHJKAAAAAANAOAAAAAAAAAAAAAAAAAAQrQBAAAA3AFAIJcAAAAAACDRCgAAAABADQDkAAAAAAAAAAAAAAAAAEO4AQAAAOABgCCYAAAAAAAk4QoAY3AxMjUwAHdpbmRvd3MxMjUwAAAAVAZwZABKOrkkkwE8eQiUgSxCCigBFGkkkkk2GaSQAWCJSJSCMFJKKADAEssaANgAAAAAAFAIAAAAAIAoAAAwCxsAAAAAAADcYAgAadSixih7AAAADQCUgQMAPgCABABKAAAAEEK0EQcAANwBAAB/VALAJQAAkAgAfAAAQA0AmJEDAD8AkAQASwAAQBBDuCEHAADgAQAAgFgCACYAAKCILGNwMTI1MQB3aW5kb3dzMTI1MQAAAAQVdORUSjq5JJNUPrkQlAw51BBEUhVpJJJJNhmkkAFgmVWUWnG1lVcAPNSVQgB8BQAAAwFgEAAAAABAQgAAgJBVYAEAAABRXUkVAFgdVNVVEUk0EUUVWXQRRhlptBFHHXn0EUghiTQSSSWZdBJKKam0EkstufQSTDHJNBNNNdl0E0456bQTTz359BNQQQk1FFFFGXUUUkkptRRTTTn1FFRjcDEyNTIAd2luZG93czEyNTIAAABUBnCkKUo6uSSTrzx5CJR5BEBKAAEUaSSSSTYZpJC0YIlIlHoEUMonAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY3AxMjUzAHdpbmRvd3MxMjUzAAAAVAZwpClKOrkkkwE8GQCUAQQQQAABFGkkkkk2GaSQAWAZQJQBBBBAAAD04gsAAAAAAAAAABAAAAAAAMCQAAAAAAC8AAAAAL8AEwwAwgAwDDHFGHMMMskoswwzzTjzDDTRSDMNNdVYE8A12GSjzTbcdOPNN+CEI8445JRjzjnopKPOOuy048478MQjzzz01GPPPfjko88+/PTjzz8ABSRQAGNwMTI1NAB3aW5kb3dzMTI1NAAAAFQGcKQpSjq5JJOvPHkIlHkEEEAAARRpJJJJNhmkkLRgiUiUegQQwCcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABOAAAAAAAAAAAAAAAAAAAAeFEIAAAAAAAAAAAAAAAAAAAAAAAAAAAATwAAAAAAAAAAAAAAAAAAAHxhCABjcDEyNTUAd2luZG93czEyNTUAAABUBnCkKUo6uSSTrzwZAJQBBBBAAAEUaSSSSTYZpJC0YBlAlAEEEEAAAAAAAABSAgAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAADwAAAAAAAAAGGJNRZZZZl1FlppqRXAWmy15dZbcMUl11yPQRaZZJMFEEAAAQQQQAB01WXXXXjlpddefPXl11+ABSbYYIQVZthhiCWm2GKMNeZYAAH8CGQAY3AxMjU2AHdpbmRvd3MxMjU2AAAAVBZ3pClKOrkkk688SRyUeRiX3HHLFWkkkkk2GaSQymGJXJR69OgjcwBQBgAAAAAAAAAAANAcAAAAAAAAAAAAAAAAAAAAAAAAUBkAAAAAgGXOXYZZZpptxllnnn0GWmiijUZaaaadhlpqqq3GGgCtufYabLHJNhttANQGgG234ZYbAAAAAAAAuu0GAAC89ebbbwAAFxwAwgEwHAAA/Ajkc2NwMTI1NwB3aW5kb3dzMTI1NwAAAFQGcGQASjq5JJMBPBkAlAEQAIsCARRpJJJJNhmkkAFgGUCUARgwSwAABAAAAAAEAAAADQDQBwAAAADAAgAAAAAAAAAAAAAQAOAHAAAAAIADNnAhAw4AAIAEET4AAIoRUoihxRmHtPEGAHUAAAAAmawRSCQAiEIKADd0MUMOAACQRBE/ABDKEVOMsQUaiLgBBwB2AAAAAJqwIYgkAIxSiixjcDEyNTgAd2luZG93czEyNTgAAABUBnCkKUo6uSSTrzwZAJR5BBBAAAEUaSSSSTYZpJC0YBlAlHoEEMAnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAAAAAAAAAAAALYAAAAAQgCQCwAAnAIAAAAAAAAAAKSCCwAAAABADQAAAAAAAAAAAAC3AAAAAEMAoAsAAKACAAAAAAAAAACoMiUAa29pOHIAAABghinmmGSWaeaZaKapJqKJKrooo406+qiXkGap5ZZcdinAlwcgkMADa7LZZlRuvglnnHLOSWeddt6JZ5567snnQH36+SeggQo6KKGFGnpoAU/FJNNRNdlUFE1G5aTTTjz15NNPQEEVlFBDEXXTTE0xhVNSTimF1FIvRSTRSRVZVBJFJmWk0UYcdeTRRyDBFJJII5F00UQtsYRRSi6phNJKa29pOHUAAABghinmmGSWaeaZaKapJqKJKrooo406+qiXkGap5ZZcdinAlwcgkMADa7LZZlRUvWnVVXLOSWeddoKFZ5567snnQAb5iVBCgQo6KKGFfnVoAU/FJNNRNdlUFE1G5aTTTjz15NNPQEEVlFBDEXXTTE0xhVNSTimF1FIvRSTRSRVZVBJFJmWk0UYcdeTRRyDBFJJII5F00UQtsYRRSi6phNJKY3A0MzcAAAAXwECCBx90AIIIJZgwQgoonEBBBRg4sMAKLKjwggsxZMBBBBJMYKUpkUYaaaSRRhpppJFGGmmkkUYaaaSNOvpomGfy2WeccPrJppx43mnnmGSmiaaZYKqZp551vklooHuueaigg/4JKJ1ztummoYWWKaaiiS7KKKLlRIoMPdfcEyk+2jTTDTqR6pNOpJFG2iWXXn75wJYHZJmAlpEiAKkAY3A4NTAAAAAXwECCBx90AIIIJZgwQgoonEBBBRg4sMAKLKjwggsxZMABBBI0wIApkUYaaaSRRhpppJFGGmmkkUYaaaSNOvpomGdGGmmkBfjJppx4RjDBmGSmiaaZYKoZaaR1vklooHuueWikkUYaaaSRfhFppJGWKaaiiUYaKaKRRhpppJFGGmmkkUYaaaSRRmpApJFGSmSkkQ7wgAIHEJBApJEiAKkAAAgEBAgEBAgCBADDisyEw4rMjMOqzITDqsyMAEFTQ0lJAFVURi04AF5beVldAF5bbk5dAHllcwBubwBTdW4ATW9uAFR1ZQBXZWQAVGh1AEZyaQBTYXQAU3VuZGF5AE1vbmRheQBUdWVzZGF5AFdlZG5lc2RheQBUaHVyc2RheQBGcmlkYXkAU2F0dXJkYXkASmFuAEZlYgBNYXIAQXByAE1heQBKdW4ASnVsAEF1ZwBTZXAAT2N0AE5vdgBEZWMASmFudWFyeQBGZWJydWFyeQBNYXJjaABBcHJpbABNYXkASnVuZQBKdWx5AEF1Z3VzdABTZXB0ZW1iZXIAT2N0b2JlcgBOb3ZlbWJlcgBEZWNlbWJlcgBBTQBQTQAlYSAlYiAlZSAlVCAlWQAlbS8lZC8leQAlSDolTTolUwAlSTolTTolUyAlcAAAACVtLyVkLyV5ADAxMjM0NTY3ODkAJWEgJWIgJWUgJVQgJVkAJUg6JU06JVMALgAATENfQUxMAExBTkcAQy5VVEYtOABQT1NJWABNVVNMX0xPQ1BBVEgAQy5VVEYtOAAAAAAAAAAAAEMAJSouKmYATVNHVkVSQgBFUlJPUjogAFdBUk5JTkc6IABJTkZPOiAASEFMVDogAApUTyBGSVg6IAAlcyVzJXMlcyVzJXMlcyVzCgBsYWJlbABzZXZlcml0eQB0ZXh0AGFjdGlvbgB0YWcAUFdEADogb3B0aW9uIGRvZXMgbm90IHRha2UgYW4gYXJndW1lbnQ6IAA6IG9wdGlvbiByZXF1aXJlcyBhbiBhcmd1bWVudDogADogb3B0aW9uIGlzIGFtYmlndW91czogADogdW5yZWNvZ25pemVkIG9wdGlvbjogACUqW14KXSUqWwpdACAlbiUqcyVuICVuJSpzJW4gJW4lKnMlbiAlbiUqcyVuICVkICVkACVzCSVzCSVzCSVzCSVkCSVkCgAvZGV2L3B0cy8lZAAvZGV2L3B0bXgAJWIgJWUgJVQAWwBdADwlZD4lcyAlbiVzJXMlLjBkJXM6IAAvZGV2L2NvbnNvbGUAJS4qcwAyPi9kZXYvbnVsbABldmFsICJwcmludGYgJXNcXFxcMCB4ICQxICQyIgByAC9kZXYvc2htLwAlZC4lZC4lZC4lZC5pbi1hZGRyLmFycGEAMDEyMzQ1Njc4OWFiY2RlZgBpcDYuYXJwYQAlLjJYADolLjJYAC9ldGMvc2VydmljZXMAL3VkcAAvdGNwAHRjcAB1ZHAAOiAAJXMlcyVzAEhvc3Qgbm90IGZvdW5kAFRyeSBhZ2FpbgBOb24tcmVjb3ZlcmFibGUgZXJyb3IAQWRkcmVzcyBub3QgYXZhaWxhYmxlAABVbmtub3duIGVycm9yACVkLiVkLiVkLiVkACV4OiV4OiV4OiV4OiV4OiV4OiV4OiV4ACV4OiV4OiV4OiV4OiV4OiV4OiVkLiVkLiVkLiVkADowAAAAAAAAAAAAAAAAAAAAAAEP/zIAAAAAAAAAAAAAAP//AAAAAAv/IwQgAgAAAAAAAAAAAAAAAAAAAf8eAiABAAAAAAAAAAAAAAAAAAAD/wUF/AAAAAAAAAAAAAAAAAAAAAD+Aw0AAAAAAAAAAAAAAAAAAAAAAAAoAQAAAAAAAAAAAAD//wAvZXRjL3Jlc29sdi5jb25mAG9wdGlvbnMAbmRvdHM6AGF0dGVtcHRzOgB0aW1lb3V0OgBuYW1lc2VydmVyAGRvbWFpbgBzZWFyY2gAMTI3LjAuMC4xAC9ldGMvaG9zdHMALwAJAAoADQAMAAcAGwBbWzphbG51bTpdX10AW15bOmFsbnVtOl1fXQBbWzpzcGFjZTpdXQBbXls6c3BhY2U6XV0AW1s6ZGlnaXQ6XV0AW15bOmRpZ2l0Ol1dAE5vIGVycm9yAE5vIG1hdGNoAEludmFsaWQgcmVnZXhwAFVua25vd24gY29sbGF0aW5nIGVsZW1lbnQAVW5rbm93biBjaGFyYWN0ZXIgY2xhc3MgbmFtZQBUcmFpbGluZyBiYWNrc2xhc2gASW52YWxpZCBiYWNrIHJlZmVyZW5jZQBNaXNzaW5nICddJwBNaXNzaW5nICcpJwBNaXNzaW5nICd9JwBJbnZhbGlkIGNvbnRlbnRzIG9mIHt9AEludmFsaWQgY2hhcmFjdGVyIHJhbmdlAE91dCBvZiBtZW1vcnkAUmVwZXRpdGlvbiBub3QgcHJlY2VkZWQgYnkgdmFsaWQgZXhwcmVzc2lvbgAAVW5rbm93biBlcnJvcgAlcwByd2EAEQAKABEREQAAAAAFAAAAAAAACQAAAAALAAAAAAAAAAARAA8KERERAwoHAAETCQsLAAAJBgsAAAsABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAAAAAAAAAAAAAKCgAAAAAKAAACAAkLAAAACQALAAALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAADAAAAAAJDAAAAAAADAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAAAAAAAAAAAAAAANAAAABA0AAAAACQ4AAAAAAA4AAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAADwAAAAAPAAAAAAkQAAAAAAAQAAAQAAASAAAAEhISAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIAAAASEhIAAAAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALAAAAAAAAAAAAAAAKAAAAAAoAAAAACQsAAAAAAAsAAAsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAMAAAAAAkMAAAAAAAMAAAMAAAlKnMAKG51bGwpACMAKwAtACAATAAAakxMTABqAAAAAABqagAAAABqAABqJSUlcyVzJXMlcyVzKi4qJWMlYwBoaABoAAAAAABsAABMAABsbAAlLipzJS4wZCVzJWMlJWxsbgAlKgBzaAAtYwAvYmluL3NoAC90bXAAdGVtcAAvdG1wL3RtcGZpbGVfWFhYWFhYAHcrAC90bXAvdG1wbmFtX1hYWFhYWAAlLiplACUuKmYAMAAuADAwMDAwMDAwMDAwMDAwMAAlLipnAFVua25vd24gc2lnbmFsAEhhbmd1cABJbnRlcnJ1cHQAUXVpdABJbGxlZ2FsIGluc3RydWN0aW9uAFRyYWNlL2JyZWFrcG9pbnQgdHJhcABBYm9ydGVkAEJ1cyBlcnJvcgBBcml0aG1ldGljIGV4Y2VwdGlvbgBLaWxsZWQAVXNlciBkZWZpbmVkIHNpZ25hbCAxAFNlZ21lbnRhdGlvbiBmYXVsdABVc2VyIGRlZmluZWQgc2lnbmFsIDIAQnJva2VuIHBpcGUAQWxhcm0gY2xvY2sAVGVybWluYXRlZABTdGFjayBmYXVsdABDaGlsZCBwcm9jZXNzIHN0YXR1cwBDb250aW51ZWQAU3RvcHBlZCAoc2lnbmFsKQBTdG9wcGVkAFN0b3BwZWQgKHR0eSBpbnB1dCkAU3RvcHBlZCAodHR5IG91dHB1dCkAVXJnZW50IEkvTyBjb25kaXRpb24AQ1BVIHRpbWUgbGltaXQgZXhjZWVkZWQARmlsZSBzaXplIGxpbWl0IGV4Y2VlZGVkAFZpcnR1YWwgdGltZXIgZXhwaXJlZABQcm9maWxpbmcgdGltZXIgZXhwaXJlZABXaW5kb3cgY2hhbmdlZABJL08gcG9zc2libGUAUG93ZXIgZmFpbHVyZQBCYWQgc3lzdGVtIGNhbGwAUlQzMgBSVDMzAFJUMzQAUlQzNQBSVDM2AFJUMzcAUlQzOABSVDM5AFJUNDAAUlQ0MQBSVDQyAFJUNDMAUlQ0NABSVDQ1AFJUNDYAUlQ0NwBSVDQ4AFJUNDkAUlQ1MABSVDUxAFJUNTIAUlQ1MwBSVDU0AFJUNTUAUlQ1NgBSVDU3AFJUNTgAUlQ1OQBSVDYwAFJUNjEAUlQ2MgBSVDYzAFJUNjQAWFhYWFhYAC9kZXYvdHR5AExPR05BTUU=";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function ___block_all_sigs() {
  Module['printErr']('missing function: __block_all_sigs'); abort(-1);
  }

  
  
  function _emscripten_get_now() { abort() }
  
  function _emscripten_get_now_is_monotonic() {
      // return whether emscripten_get_now is guaranteed monotonic; the Date.now
      // implementation is not :(
      return ENVIRONMENT_IS_NODE || (typeof dateNow !== 'undefined') ||
          ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']);
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now();
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }function ___clock_gettime() {
  return _clock_gettime.apply(null, arguments)
  }

  function ___clone() {
  Module['printErr']('missing function: __clone'); abort(-1);
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___lock() {}

  function ___map_file(pathname, size) {
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }

  function ___muldc3() {
  Module['printErr']('missing function: __muldc3'); abort(-1);
  }

  
    

  function ___mulsc3() {
  Module['printErr']('missing function: __mulsc3'); abort(-1);
  }

   

  function ___restore_sigs() {
  Module['printErr']('missing function: __restore_sigs'); abort(-1);
  }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall1(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // exit
      var status = SYSCALLS.get();
      Module['exit'](status);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // some webservers (azure) does not support subprotocol header
              if (runtimeConfig && null === Module['websocket']['subprotocol']) {
                subProtocols = 'null';
                opts = undefined;
              }
  
              // If node we use the ws library.
              var WebSocketConstructor;
              if (ENVIRONMENT_IS_NODE) {
                WebSocketConstructor = require('ws');
              } else if (ENVIRONMENT_IS_WEB) {
                WebSocketConstructor = window['WebSocket'];
              } else {
                WebSocketConstructor = WebSocket;
              }
              ws = new WebSocketConstructor(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
  
            // An empty ArrayBuffer will emit a pseudo disconnect event
            // as recv/recvmsg will return zero which indicates that a socket
            // has performed a shutdown although the connection has not been disconnected yet.
            if (data.byteLength == 0) {
              return;
            }
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port;
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          if (ArrayBuffer.isView(buffer)) {
            offset += buffer.byteOffset;
            buffer = buffer.buffer;
          }
  
          var data;
            data = buffer.slice(offset, offset + length);
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};
  
  
  function __inet_pton4_raw(str) {
      var b = str.split('.');
      for (var i = 0; i < 4; i++) {
        var tmp = Number(b[i]);
        if (isNaN(tmp)) return null;
        b[i] = tmp;
      }
      return (b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24)) >>> 0;
    }
  
  function __inet_pton6_raw(str) {
      var words;
      var w, offset, z, i;
      /* http://home.deds.nl/~aeron/regex/ */
      var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i
      var parts = [];
      if (!valid6regx.test(str)) {
        return null;
      }
      if (str === "::") {
        return [0, 0, 0, 0, 0, 0, 0, 0];
      }
      // Z placeholder to keep track of zeros when splitting the string on ":"
      if (str.indexOf("::") === 0) {
        str = str.replace("::", "Z:"); // leading zeros case
      } else {
        str = str.replace("::", ":Z:");
      }
  
      if (str.indexOf(".") > 0) {
        // parse IPv4 embedded stress
        str = str.replace(new RegExp('[.]', 'g'), ":");
        words = str.split(":");
        words[words.length-4] = parseInt(words[words.length-4]) + parseInt(words[words.length-3])*256;
        words[words.length-3] = parseInt(words[words.length-2]) + parseInt(words[words.length-1])*256;
        words = words.slice(0, words.length-2);
      } else {
        words = str.split(":");
      }
  
      offset = 0; z = 0;
      for (w=0; w < words.length; w++) {
        if (typeof words[w] === 'string') {
          if (words[w] === 'Z') {
            // compressed zeros - write appropriate number of zero words
            for (z = 0; z < (8 - words.length+1); z++) {
              parts[w+z] = 0;
            }
            offset = z-1;
          } else {
            // parse hex to field to 16-bit value and write it in network byte-order
            parts[w+offset] = _htons(parseInt(words[w],16));
          }
        } else {
          // parsed IPv4 words
          parts[w+offset] = words[w];
        }
      }
      return [
        (parts[1] << 16) | parts[0],
        (parts[3] << 16) | parts[2],
        (parts[5] << 16) | parts[4],
        (parts[7] << 16) | parts[6]
      ];
    }var DNS={address_map:{id:1,addrs:{},names:{}},lookup_name:function (name) {
        // If the name is already a valid ipv4 / ipv6 address, don't generate a fake one.
        var res = __inet_pton4_raw(name);
        if (res !== null) {
          return name;
        }
        res = __inet_pton6_raw(name);
        if (res !== null) {
          return name;
        }
  
        // See if this name is already mapped.
        var addr;
  
        if (DNS.address_map.addrs[name]) {
          addr = DNS.address_map.addrs[name];
        } else {
          var id = DNS.address_map.id++;
          assert(id < 65535, 'exceeded max address mappings of 65535');
  
          addr = '172.29.' + (id & 0xff) + '.' + (id & 0xff00);
  
          DNS.address_map.names[addr] = name;
          DNS.address_map.addrs[name] = addr;
        }
  
        return addr;
      },lookup_addr:function (addr) {
        if (DNS.address_map.names[addr]) {
          return DNS.address_map.names[addr];
        }
  
        return null;
      }};
  
  
  var Sockets={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};
  
  function __inet_ntop4_raw(addr) {
      return (addr & 0xff) + '.' + ((addr >> 8) & 0xff) + '.' + ((addr >> 16) & 0xff) + '.' + ((addr >> 24) & 0xff)
    }
  
  function __inet_ntop6_raw(ints) {
      //  ref:  http://www.ietf.org/rfc/rfc2373.txt - section 2.5.4
      //  Format for IPv4 compatible and mapped  128-bit IPv6 Addresses
      //  128-bits are split into eight 16-bit words
      //  stored in network byte order (big-endian)
      //  |                80 bits               | 16 |      32 bits        |
      //  +-----------------------------------------------------------------+
      //  |               10 bytes               |  2 |      4 bytes        |
      //  +--------------------------------------+--------------------------+
      //  +               5 words                |  1 |      2 words        |
      //  +--------------------------------------+--------------------------+
      //  |0000..............................0000|0000|    IPv4 ADDRESS     | (compatible)
      //  +--------------------------------------+----+---------------------+
      //  |0000..............................0000|FFFF|    IPv4 ADDRESS     | (mapped)
      //  +--------------------------------------+----+---------------------+
      var str = "";
      var word = 0;
      var longest = 0;
      var lastzero = 0;
      var zstart = 0;
      var len = 0;
      var i = 0;
      var parts = [
        ints[0] & 0xffff,
        (ints[0] >> 16),
        ints[1] & 0xffff,
        (ints[1] >> 16),
        ints[2] & 0xffff,
        (ints[2] >> 16),
        ints[3] & 0xffff,
        (ints[3] >> 16)
      ];
  
      // Handle IPv4-compatible, IPv4-mapped, loopback and any/unspecified addresses
  
      var hasipv4 = true;
      var v4part = "";
      // check if the 10 high-order bytes are all zeros (first 5 words)
      for (i = 0; i < 5; i++) {
        if (parts[i] !== 0) { hasipv4 = false; break; }
      }
  
      if (hasipv4) {
        // low-order 32-bits store an IPv4 address (bytes 13 to 16) (last 2 words)
        v4part = __inet_ntop4_raw(parts[6] | (parts[7] << 16));
        // IPv4-mapped IPv6 address if 16-bit value (bytes 11 and 12) == 0xFFFF (6th word)
        if (parts[5] === -1) {
          str = "::ffff:";
          str += v4part;
          return str;
        }
        // IPv4-compatible IPv6 address if 16-bit value (bytes 11 and 12) == 0x0000 (6th word)
        if (parts[5] === 0) {
          str = "::";
          //special case IPv6 addresses
          if(v4part === "0.0.0.0") v4part = ""; // any/unspecified address
          if(v4part === "0.0.0.1") v4part = "1";// loopback address
          str += v4part;
          return str;
        }
      }
  
      // Handle all other IPv6 addresses
  
      // first run to find the longest contiguous zero words
      for (word = 0; word < 8; word++) {
        if (parts[word] === 0) {
          if (word - lastzero > 1) {
            len = 0;
          }
          lastzero = word;
          len++;
        }
        if (len > longest) {
          longest = len;
          zstart = word - longest + 1;
        }
      }
  
      for (word = 0; word < 8; word++) {
        if (longest > 1) {
          // compress contiguous zeros - to produce "::"
          if (parts[word] === 0 && word >= zstart && word < (zstart + longest) ) {
            if (word === zstart) {
              str += ":";
              if (zstart === 0) str += ":"; //leading zeros case
            }
            continue;
          }
        }
        // converts 16-bit words from big-endian to little-endian before converting to hex string
        str += Number(_ntohs(parts[word] & 0xffff)).toString(16);
        str += word < 7 ? ":" : "";
      }
      return str;
    }function __read_sockaddr(sa, salen) {
      // family / port offsets are common to both sockaddr_in and sockaddr_in6
      var family = HEAP16[((sa)>>1)];
      var port = _ntohs(HEAP16[(((sa)+(2))>>1)]);
      var addr;
  
      switch (family) {
        case 2:
          if (salen !== 16) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = HEAP32[(((sa)+(4))>>2)];
          addr = __inet_ntop4_raw(addr);
          break;
        case 10:
          if (salen !== 28) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = [
            HEAP32[(((sa)+(8))>>2)],
            HEAP32[(((sa)+(12))>>2)],
            HEAP32[(((sa)+(16))>>2)],
            HEAP32[(((sa)+(20))>>2)]
          ];
          addr = __inet_ntop6_raw(addr);
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
  
      return { family: family, addr: addr, port: port };
    }
  
  function __write_sockaddr(sa, family, addr, port) {
      switch (family) {
        case 2:
          addr = __inet_pton4_raw(addr);
          HEAP16[((sa)>>1)]=family;
          HEAP32[(((sa)+(4))>>2)]=addr;
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          break;
        case 10:
          addr = __inet_pton6_raw(addr);
          HEAP32[((sa)>>2)]=family;
          HEAP32[(((sa)+(8))>>2)]=addr[0];
          HEAP32[(((sa)+(12))>>2)]=addr[1];
          HEAP32[(((sa)+(16))>>2)]=addr[2];
          HEAP32[(((sa)+(20))>>2)]=addr[3];
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          HEAP32[(((sa)+(4))>>2)]=0;
          HEAP32[(((sa)+(24))>>2)]=0;
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
      // kind of lame, but let's match _read_sockaddr's interface
      return {};
    }function ___syscall102(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // socketcall
      var call = SYSCALLS.get(), socketvararg = SYSCALLS.get();
      // socketcalls pass the rest of the arguments in a struct
      SYSCALLS.varargs = socketvararg;
      switch (call) {
        case 1: { // socket
          var domain = SYSCALLS.get(), type = SYSCALLS.get(), protocol = SYSCALLS.get();
          var sock = SOCKFS.createSocket(domain, type, protocol);
          assert(sock.stream.fd < 64); // XXX ? select() assumes socket fd values are in 0..63
          return sock.stream.fd;
        }
        case 2: { // bind
          var sock = SYSCALLS.getSocketFromFD(), info = SYSCALLS.getSocketAddress();
          sock.sock_ops.bind(sock, info.addr, info.port);
          return 0;
        }
        case 3: { // connect
          var sock = SYSCALLS.getSocketFromFD(), info = SYSCALLS.getSocketAddress();
          sock.sock_ops.connect(sock, info.addr, info.port);
          return 0;
        }
        case 4: { // listen
          var sock = SYSCALLS.getSocketFromFD(), backlog = SYSCALLS.get();
          sock.sock_ops.listen(sock, backlog);
          return 0;
        }
        case 5: { // accept
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var newsock = sock.sock_ops.accept(sock);
          if (addr) {
            var res = __write_sockaddr(addr, newsock.family, DNS.lookup_name(newsock.daddr), newsock.dport);
            assert(!res.errno);
          }
          return newsock.stream.fd;
        }
        case 6: { // getsockname
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          // TODO: sock.saddr should never be undefined, see TODO in websocket_sock_ops.getname
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.saddr || '0.0.0.0'), sock.sport);
          assert(!res.errno);
          return 0;
        }
        case 7: { // getpeername
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          if (!sock.daddr) {
            return -ERRNO_CODES.ENOTCONN; // The socket is not connected.
          }
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.daddr), sock.dport);
          assert(!res.errno);
          return 0;
        }
        case 11: { // sendto
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), length = SYSCALLS.get(), flags = SYSCALLS.get(), dest = SYSCALLS.getSocketAddress(true);
          if (!dest) {
            // send, no address provided
            return FS.write(sock.stream, HEAP8,message, length);
          } else {
            // sendto an address
            return sock.sock_ops.sendmsg(sock, HEAP8,message, length, dest.addr, dest.port);
          }
        }
        case 12: { // recvfrom
          var sock = SYSCALLS.getSocketFromFD(), buf = SYSCALLS.get(), len = SYSCALLS.get(), flags = SYSCALLS.get(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var msg = sock.sock_ops.recvmsg(sock, len);
          if (!msg) return 0; // socket is closed
          if (addr) {
            var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          HEAPU8.set(msg.buffer, buf);
          return msg.buffer.byteLength;
        }
        case 14: { // setsockopt
          return -ERRNO_CODES.ENOPROTOOPT; // The option is unknown at the level indicated.
        }
        case 15: { // getsockopt
          var sock = SYSCALLS.getSocketFromFD(), level = SYSCALLS.get(), optname = SYSCALLS.get(), optval = SYSCALLS.get(), optlen = SYSCALLS.get();
          // Minimal getsockopt aimed at resolving https://github.com/kripken/emscripten/issues/2211
          // so only supports SOL_SOCKET with SO_ERROR.
          if (level === 1) {
            if (optname === 4) {
              HEAP32[((optval)>>2)]=sock.error;
              HEAP32[((optlen)>>2)]=4;
              sock.error = null; // Clear the error (The SO_ERROR option obtains and then clears this field).
              return 0;
            }
          }
          return -ERRNO_CODES.ENOPROTOOPT; // The option is unknown at the level indicated.
        }
        case 16: { // sendmsg
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // read the address and port to send to
          var addr, port;
          var name = HEAP32[((message)>>2)];
          var namelen = HEAP32[(((message)+(4))>>2)];
          if (name) {
            var info = __read_sockaddr(name, namelen);
            if (info.errno) return -info.errno;
            port = info.port;
            addr = DNS.lookup_addr(info.addr) || info.addr;
          }
          // concatenate scatter-gather arrays into one message buffer
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          var view = new Uint8Array(total);
          var offset = 0;
          for (var i = 0; i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            for (var j = 0; j < iovlen; j++) {  
              view[offset++] = HEAP8[(((iovbase)+(j))>>0)];
            }
          }
          // write the buffer
          return sock.sock_ops.sendmsg(sock, view, 0, total, addr, port);
        }
        case 17: { // recvmsg
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // get the total amount of data we can read across all arrays
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          // try to read total data
          var msg = sock.sock_ops.recvmsg(sock, total);
          if (!msg) return 0; // socket is closed
  
          // TODO honor flags:
          // MSG_OOB
          // Requests out-of-band data. The significance and semantics of out-of-band data are protocol-specific.
          // MSG_PEEK
          // Peeks at the incoming message.
          // MSG_WAITALL
          // Requests that the function block until the full amount of data requested can be returned. The function may return a smaller amount of data if a signal is caught, if the connection is terminated, if MSG_PEEK was specified, or if an error is pending for the socket.
  
          // write the source address out
          var name = HEAP32[((message)>>2)];
          if (name) {
            var res = __write_sockaddr(name, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          // write the buffer out to the scatter-gather arrays
          var bytesRead = 0;
          var bytesRemaining = msg.buffer.byteLength;
          for (var i = 0; bytesRemaining > 0 && i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            if (!iovlen) {
              continue;
            }
            var length = Math.min(iovlen, bytesRemaining);
            var buf = msg.buffer.subarray(bytesRead, bytesRead + length);
            HEAPU8.set(buf, iovbase + bytesRead);
            bytesRead += length;
            bytesRemaining -= length;
          }
  
          // TODO set msghdr.msg_flags
          // MSG_EOR
          // End of record was received (if supported by the protocol).
          // MSG_OOB
          // Out-of-band data was received.
          // MSG_TRUNC
          // Normal data was truncated.
          // MSG_CTRUNC
  
          return bytesRead;
        }
        default: abort('unsupported socketcall syscall ' + call);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall114(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // wait4
      abort('cannot wait on child processes');
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall118(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fsync
      var stream = SYSCALLS.getStreamFromFD();
      return 0; // we can't do anything synchronously; the in-memory FS is already synced to
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall12(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // chdir
      var path = SYSCALLS.getStr();
      FS.chdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall121(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // setdomainname
      return -ERRNO_CODES.EPERM;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall122(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // uname
      var buf = SYSCALLS.get();
      if (!buf) return -ERRNO_CODES.EFAULT
      var layout = {"sysname":0,"nodename":65,"domainname":325,"machine":260,"version":195,"release":130,"__size__":390};
      function copyString(element, value) {
        var offset = layout[element];
        writeAsciiToMemory(value, buf + offset);
      }
      copyString('sysname', 'Emscripten');
      copyString('nodename', 'emscripten');
      copyString('release', '1.0');
      copyString('version', '#1');
      copyString('machine', 'x86-JS');
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall125(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mprotect
      return 0; // let's not and say we did
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};function ___syscall132(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpgid
      var pid = SYSCALLS.get();
      if (pid && pid !== PROCINFO.pid) return -ERRNO_CODES.ESRCH;
      return PROCINFO.pgid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall133(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fchdir
      var stream = SYSCALLS.getStreamFromFD();
      FS.chdir(stream.path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall14(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mknod
      var path = SYSCALLS.getStr(), mode = SYSCALLS.get(), dev = SYSCALLS.get();
      return SYSCALLS.doMknod(path, mode, dev);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall142(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // newselect
      // readfds are supported,
      // writefds checks socket open status
      // exceptfds not supported
      // timeout is always 0 - fully async
      var nfds = SYSCALLS.get(), readfds = SYSCALLS.get(), writefds = SYSCALLS.get(), exceptfds = SYSCALLS.get(), timeout = SYSCALLS.get();
  
      assert(nfds <= 64, 'nfds must be less than or equal to 64');  // fd sets have 64 bits // TODO: this could be 1024 based on current musl headers
      assert(!exceptfds, 'exceptfds not supported');
  
      var total = 0;
      
      var srcReadLow = (readfds ? HEAP32[((readfds)>>2)] : 0),
          srcReadHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0);
      var srcWriteLow = (writefds ? HEAP32[((writefds)>>2)] : 0),
          srcWriteHigh = (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0);
      var srcExceptLow = (exceptfds ? HEAP32[((exceptfds)>>2)] : 0),
          srcExceptHigh = (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      var dstReadLow = 0,
          dstReadHigh = 0;
      var dstWriteLow = 0,
          dstWriteHigh = 0;
      var dstExceptLow = 0,
          dstExceptHigh = 0;
  
      var allLow = (readfds ? HEAP32[((readfds)>>2)] : 0) |
                   (writefds ? HEAP32[((writefds)>>2)] : 0) |
                   (exceptfds ? HEAP32[((exceptfds)>>2)] : 0);
      var allHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0) |
                    (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0) |
                    (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      function check(fd, low, high, val) {
        return (fd < 32 ? (low & val) : (high & val));
      }
  
      for (var fd = 0; fd < nfds; fd++) {
        var mask = 1 << (fd % 32);
        if (!(check(fd, allLow, allHigh, mask))) {
          continue;  // index isn't in the set
        }
  
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  
        var flags = SYSCALLS.DEFAULT_POLLMASK;
  
        if (stream.stream_ops.poll) {
          flags = stream.stream_ops.poll(stream);
        }
  
        if ((flags & 1) && check(fd, srcReadLow, srcReadHigh, mask)) {
          fd < 32 ? (dstReadLow = dstReadLow | mask) : (dstReadHigh = dstReadHigh | mask);
          total++;
        }
        if ((flags & 4) && check(fd, srcWriteLow, srcWriteHigh, mask)) {
          fd < 32 ? (dstWriteLow = dstWriteLow | mask) : (dstWriteHigh = dstWriteHigh | mask);
          total++;
        }
        if ((flags & 2) && check(fd, srcExceptLow, srcExceptHigh, mask)) {
          fd < 32 ? (dstExceptLow = dstExceptLow | mask) : (dstExceptHigh = dstExceptHigh | mask);
          total++;
        }
      }
  
      if (readfds) {
        HEAP32[((readfds)>>2)]=dstReadLow;
        HEAP32[(((readfds)+(4))>>2)]=dstReadHigh;
      }
      if (writefds) {
        HEAP32[((writefds)>>2)]=dstWriteLow;
        HEAP32[(((writefds)+(4))>>2)]=dstWriteHigh;
      }
      if (exceptfds) {
        HEAP32[((exceptfds)>>2)]=dstExceptLow;
        HEAP32[(((exceptfds)+(4))>>2)]=dstExceptHigh;
      }
      
      return total;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall144(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // msync
      var addr = SYSCALLS.get(), len = SYSCALLS.get(), flags = SYSCALLS.get();
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      SYSCALLS.doMsync(addr, FS.getStream(info.fd), len, info.flags);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall147(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getsid
      var pid = SYSCALLS.get();
      if (pid && pid !== PROCINFO.pid) return -ERRNO_CODES.ESRCH;
      return PROCINFO.sid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall148(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fdatasync
      var stream = SYSCALLS.getStreamFromFD();
      return 0; // we can't do anything synchronously; the in-memory FS is already synced to
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall15(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // chmod
      var path = SYSCALLS.getStr(), mode = SYSCALLS.get();
      FS.chmod(path, mode);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function ___syscall153(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munlockall
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall150() {
  return ___syscall153.apply(null, arguments)
  }

  function ___syscall151() {
  return ___syscall153.apply(null, arguments)
  }

  function ___syscall152() {
  return ___syscall153.apply(null, arguments)
  }


  function ___syscall163(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mremap
      return -ERRNO_CODES.ENOMEM; // never succeed
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall168(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // poll
      var fds = SYSCALLS.get(), nfds = SYSCALLS.get(), timeout = SYSCALLS.get();
      var nonzero = 0;
      for (var i = 0; i < nfds; i++) {
        var pollfd = fds + 8 * i;
        var fd = HEAP32[((pollfd)>>2)];
        var events = HEAP16[(((pollfd)+(4))>>1)];
        var mask = 32;
        var stream = FS.getStream(fd);
        if (stream) {
          mask = SYSCALLS.DEFAULT_POLLMASK;
          if (stream.stream_ops.poll) {
            mask = stream.stream_ops.poll(stream);
          }
        }
        mask &= events | 8 | 16;
        if (mask) nonzero++;
        HEAP16[(((pollfd)+(6))>>1)]=mask;
      }
      return nonzero;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall180(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pread64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get(), zero = SYSCALLS.getZero(), offset = SYSCALLS.get64();
      return FS.read(stream, HEAP8,buf, count, offset);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall181(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pwrite64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get(), zero = SYSCALLS.getZero(), offset = SYSCALLS.get64();
      return FS.write(stream, HEAP8,buf, count, offset);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall183(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getcwd
      var buf = SYSCALLS.get(), size = SYSCALLS.get();
      if (size === 0) return -ERRNO_CODES.EINVAL;
      var cwd = FS.cwd();
      var cwdLengthInBytes = lengthBytesUTF8(cwd);
      if (size < cwdLengthInBytes + 1) return -ERRNO_CODES.ERANGE;
      stringToUTF8(cwd, buf, size);
      return buf;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall191(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ugetrlimit
      var resource = SYSCALLS.get(), rlim = SYSCALLS.get();
      HEAP32[((rlim)>>2)]=-1;  // RLIM_INFINITY
      HEAP32[(((rlim)+(4))>>2)]=-1;  // RLIM_INFINITY
      HEAP32[(((rlim)+(8))>>2)]=-1;  // RLIM_INFINITY
      HEAP32[(((rlim)+(12))>>2)]=-1;  // RLIM_INFINITY
      return 0; // just report no limits
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall192(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mmap2
      var addr = SYSCALLS.get(), len = SYSCALLS.get(), prot = SYSCALLS.get(), flags = SYSCALLS.get(), fd = SYSCALLS.get(), off = SYSCALLS.get()
      off <<= 12; // undo pgoffset
      var ptr;
      var allocated = false;
      if (fd === -1) {
        ptr = _memalign(PAGE_SIZE, len);
        if (!ptr) return -ERRNO_CODES.ENOMEM;
        _memset(ptr, 0, len);
        allocated = true;
      } else {
        var info = FS.getStream(fd);
        if (!info) return -ERRNO_CODES.EBADF;
        var res = FS.mmap(info, HEAPU8, addr, len, off, prot, flags);
        ptr = res.ptr;
        allocated = res.allocated;
      }
      SYSCALLS.mappings[ptr] = { malloc: ptr, len: len, allocated: allocated, fd: fd, flags: flags };
      return ptr;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall193(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // truncate64
      var path = SYSCALLS.getStr(), zero = SYSCALLS.getZero(), length = SYSCALLS.get64();
      FS.truncate(path, length);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall194(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ftruncate64
      var fd = SYSCALLS.get(), zero = SYSCALLS.getZero(), length = SYSCALLS.get64();
      FS.ftruncate(fd, length);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall196(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_lstat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.lstat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall197(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_fstat64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, stream.path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall198(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // lchown32
      var path = SYSCALLS.getStr(), owner = SYSCALLS.get(), group = SYSCALLS.get();
      FS.chown(path, owner, group); // XXX we ignore the 'l' aspect, and do the same as chown
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function ___syscall202(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getgid32
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall199() {
  return ___syscall202.apply(null, arguments)
  }

  function ___syscall20(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpid
      return PROCINFO.pid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall200() {
  return ___syscall202.apply(null, arguments)
  }

  function ___syscall201() {
  return ___syscall202.apply(null, arguments)
  }


  
  function ___syscall214(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // setgid32
      var uid = SYSCALLS.get();
      if (uid !== 0) return -ERRNO_CODES.EPERM;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall203() {
  return ___syscall214.apply(null, arguments)
  }

  function ___syscall204() {
  return ___syscall214.apply(null, arguments)
  }

  function ___syscall205(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getgroups32
      var size = SYSCALLS.get(), list = SYSCALLS.get();
      if (size < 1) return -ERRNO_CODES.EINVAL;
      HEAP32[((list)>>2)]=0;
      return 1;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall207(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fchown32
      var fd = SYSCALLS.get(), owner = SYSCALLS.get(), group = SYSCALLS.get();
      FS.fchown(fd, owner, group);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function ___syscall211(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getresgid32
      var ruid = SYSCALLS.get(), euid = SYSCALLS.get(), suid = SYSCALLS.get();
      HEAP32[((ruid)>>2)]=0;
      HEAP32[((euid)>>2)]=0;
      HEAP32[((suid)>>2)]=0;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall209() {
  return ___syscall211.apply(null, arguments)
  }


  function ___syscall212(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // chown32
      var path = SYSCALLS.getStr(), owner = SYSCALLS.get(), group = SYSCALLS.get();
      FS.chown(path, owner, group);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall218(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mincore
      return -ERRNO_CODES.ENOSYS; // unsupported feature
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall219(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // madvise
      return 0; // advice is welcome, but ignored
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall220(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_getdents64
      var stream = SYSCALLS.getStreamFromFD(), dirp = SYSCALLS.get(), count = SYSCALLS.get();
      if (!stream.getdents) {
        stream.getdents = FS.readdir(stream.path);
      }
      var pos = 0;
      while (stream.getdents.length > 0 && pos + 268 <= count) {
        var id;
        var type;
        var name = stream.getdents.pop();
        if (name[0] === '.') {
          id = 1;
          type = 4; // DT_DIR
        } else {
          var child = FS.lookupNode(stream.node, name);
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        HEAP32[((dirp + pos)>>2)]=id;
        HEAP32[(((dirp + pos)+(4))>>2)]=stream.position;
        HEAP16[(((dirp + pos)+(8))>>1)]=268;
        HEAP8[(((dirp + pos)+(10))>>0)]=type;
        stringToUTF8(name, dirp + pos + 11, 256);
        pos += 268;
      }
      return pos;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall268(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // statfs64
      var path = SYSCALLS.getStr(), size = SYSCALLS.get(), buf = SYSCALLS.get();
      assert(size === 64);
      // NOTE: None of the constants here are true. We're just returning safe and
      //       sane values.
      HEAP32[(((buf)+(4))>>2)]=4096;
      HEAP32[(((buf)+(40))>>2)]=4096;
      HEAP32[(((buf)+(8))>>2)]=1000000;
      HEAP32[(((buf)+(12))>>2)]=500000;
      HEAP32[(((buf)+(16))>>2)]=500000;
      HEAP32[(((buf)+(20))>>2)]=FS.nextInode;
      HEAP32[(((buf)+(24))>>2)]=1000000;
      HEAP32[(((buf)+(28))>>2)]=42;
      HEAP32[(((buf)+(44))>>2)]=2;  // ST_NOSUID
      HEAP32[(((buf)+(36))>>2)]=255;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall269(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fstatfs64
      var stream = SYSCALLS.getStreamFromFD(), size = SYSCALLS.get(), buf = SYSCALLS.get();
      return ___syscall([268, 0, size, buf], 0);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall272(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fadvise64_64
      return 0; // your advice is important to us (but we can't use it)
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall29(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pause
      return -ERRNO_CODES.EINTR; // we can't pause
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall295(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // openat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get();
      path = SYSCALLS.calculateAt(dirfd, path);
      return FS.open(path, flags, mode).fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall296(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mkdirat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), mode = SYSCALLS.get();
      path = SYSCALLS.calculateAt(dirfd, path);
      return SYSCALLS.doMkdir(path, mode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall297(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mknodat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), mode = SYSCALLS.get(), dev = SYSCALLS.get();
      path = SYSCALLS.calculateAt(dirfd, path);
      return SYSCALLS.doMknod(path, mode, dev);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall298(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fchownat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), owner = SYSCALLS.get(), group = SYSCALLS.get(), flags = SYSCALLS.get();
      assert(flags === 0);
      path = SYSCALLS.calculateAt(dirfd, path);
      FS.chown(path, owner, group);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall300(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fstatat64
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), buf = SYSCALLS.get(), flags = SYSCALLS.get();
      var nofollow = flags & 256;
      flags = flags & (~256);
      assert(!flags, flags);
      path = SYSCALLS.calculateAt(dirfd, path);
      return SYSCALLS.doStat(nofollow ? FS.lstat : FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall301(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlinkat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), flags = SYSCALLS.get();
      assert(flags === 0);
      path = SYSCALLS.calculateAt(dirfd, path);
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall302(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // renameat
      var olddirfd = SYSCALLS.get(), oldpath = SYSCALLS.getStr(), newdirfd = SYSCALLS.get(), newpath = SYSCALLS.getStr();
      oldpath = SYSCALLS.calculateAt(olddirfd, oldpath);
      newpath = SYSCALLS.calculateAt(newdirfd, newpath);
      FS.rename(oldpath, newpath);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall303(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // linkat
      return -ERRNO_CODES.EMLINK; // no hardlinks for us
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall304(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // symlinkat
      var target = SYSCALLS.get(), newdirfd = SYSCALLS.get(), linkpath = SYSCALLS.get();
      linkpath = SYSCALLS.calculateAt(newdirfd, linkpath);
      FS.symlink(target, linkpath);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall305(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readlinkat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), buf = SYSCALLS.get(), bufsize = SYSCALLS.get();
      path = SYSCALLS.calculateAt(dirfd, path);
      return SYSCALLS.doReadlink(path, buf, bufsize);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall306(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fchmodat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), mode = SYSCALLS.get(), flags = SYSCALLS.get();
      assert(flags === 0);
      path = SYSCALLS.calculateAt(dirfd, path);
      FS.chmod(path, mode);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall307(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // faccessat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), amode = SYSCALLS.get(), flags = SYSCALLS.get();
      assert(flags === 0);
      path = SYSCALLS.calculateAt(dirfd, path);
      return SYSCALLS.doAccess(path, amode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall308(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pselect
      return -ERRNO_CODES.ENOSYS; // unsupported feature
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall320(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // utimensat
      var dirfd = SYSCALLS.get(), path = SYSCALLS.getStr(), times = SYSCALLS.get(), flags = SYSCALLS.get();
      assert(flags === 0);
      path = SYSCALLS.calculateAt(dirfd, path);
      var seconds = HEAP32[((times)>>2)];
      var nanoseconds = HEAP32[(((times)+(4))>>2)];
      var atime = (seconds*1000) + (nanoseconds/(1000*1000));
      times += 8;
      seconds = HEAP32[((times)>>2)];
      nanoseconds = HEAP32[(((times)+(4))>>2)];
      var mtime = (seconds*1000) + (nanoseconds/(1000*1000));
      FS.utime(path, atime, mtime);
      return 0;  
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall324(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fallocate
      var stream = SYSCALLS.getStreamFromFD(), mode = SYSCALLS.get(), offset = SYSCALLS.get64(), len = SYSCALLS.get64();
      assert(mode === 0);
      FS.allocate(stream, offset, len);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall33(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // access
      var path = SYSCALLS.getStr(), amode = SYSCALLS.get();
      return SYSCALLS.doAccess(path, amode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall330(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup3
      var old = SYSCALLS.getStreamFromFD(), suggestFD = SYSCALLS.get(), flags = SYSCALLS.get();
      assert(!flags);
      if (old.fd === suggestFD) return -ERRNO_CODES.EINVAL;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall331(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pipe2
      return -ERRNO_CODES.ENOSYS; // unsupported feature
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall333(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // preadv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get(), offset = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt, offset);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall334(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pwritev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get(), offset = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt, offset);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall337(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // recvmmsg
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall34(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // nice
      var inc = SYSCALLS.get();
      return -ERRNO_CODES.EPERM; // no meaning to nice for our single-process environment
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall340(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // prlimit64
      var pid = SYSCALLS.get(), resource = SYSCALLS.get(), new_limit = SYSCALLS.get(), old_limit = SYSCALLS.get();
      if (old_limit) { // just report no limits
        HEAP32[((old_limit)>>2)]=-1;  // RLIM_INFINITY
        HEAP32[(((old_limit)+(4))>>2)]=-1;  // RLIM_INFINITY
        HEAP32[(((old_limit)+(8))>>2)]=-1;  // RLIM_INFINITY
        HEAP32[(((old_limit)+(12))>>2)]=-1;  // RLIM_INFINITY
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall345(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // sendmmsg
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall36(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // sync
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall38(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rename
      var old_path = SYSCALLS.getStr(), new_path = SYSCALLS.getStr();
      FS.rename(old_path, new_path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall39(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mkdir
      var path = SYSCALLS.getStr(), mode = SYSCALLS.get();
      return SYSCALLS.doMkdir(path, mode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall40(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rmdir
      var path = SYSCALLS.getStr();
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall41(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup
      var old = SYSCALLS.getStreamFromFD();
      return FS.open(old.path, old.flags, 0).fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var PIPEFS={BUCKET_BUFFER_SIZE:8192,mount:function (mount) {
        // Do not pollute the real root directory or its child nodes with pipes
        // Looks like it is OK to create another pseudo-root node not linked to the FS.root hierarchy this way
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createPipe:function () {
        var pipe = {
          buckets: []
        };
  
        pipe.buckets.push({
          buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
          offset: 0,
          roffset: 0
        });
  
        var rName = PIPEFS.nextname();
        var wName = PIPEFS.nextname();
        var rNode = FS.createNode(PIPEFS.root, rName, 4096, 0);
        var wNode = FS.createNode(PIPEFS.root, wName, 4096, 0);
  
        rNode.pipe = pipe;
        wNode.pipe = pipe;
  
        var readableStream = FS.createStream({
          path: rName,
          node: rNode,
          flags: FS.modeStringToFlags('r'),
          seekable: false,
          stream_ops: PIPEFS.stream_ops
        });
        rNode.stream = readableStream;
  
        var writableStream = FS.createStream({
          path: wName,
          node: wNode,
          flags: FS.modeStringToFlags('w'),
          seekable: false,
          stream_ops: PIPEFS.stream_ops
        });
        wNode.stream = writableStream;
  
        return {
          readable_fd: readableStream.fd,
          writable_fd: writableStream.fd
        };
      },stream_ops:{poll:function (stream) {
          var pipe = stream.node.pipe;
  
          if ((stream.flags & 2097155) === 1) {
            return (256 | 4);
          } else {
            if (pipe.buckets.length > 0) {
              for (var i = 0; i < pipe.buckets.length; i++) {
                var bucket = pipe.buckets[i];
                if (bucket.offset - bucket.roffset > 0) {
                  return (64 | 1);
                }
              }
            }
          }
  
          return 0;
        },ioctl:function (stream, request, varargs) {
          return ERRNO_CODES.EINVAL;
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var pipe = stream.node.pipe;
          var currentLength = 0;
  
          for (var i = 0; i < pipe.buckets.length; i++) {
            var bucket = pipe.buckets[i];
            currentLength += bucket.offset - bucket.roffset;
          }
  
          assert(buffer instanceof ArrayBuffer || ArrayBuffer.isView(buffer));
          var data = buffer.subarray(offset, offset + length);
  
          if (length <= 0) {
            return 0;
          }
          if (currentLength == 0) {
            // Behave as if the read end is always non-blocking
            throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
          }
          var toRead = Math.min(currentLength, length);
  
          var totalRead = toRead;
          var toRemove = 0;
  
          for (var i = 0; i < pipe.buckets.length; i++) {
            var currBucket = pipe.buckets[i];
            var bucketSize = currBucket.offset - currBucket.roffset;
  
            if (toRead <= bucketSize) {
              var tmpSlice = currBucket.buffer.subarray(currBucket.roffset, currBucket.offset);
              if (toRead < bucketSize) {
                tmpSlice = tmpSlice.subarray(0, toRead);
                currBucket.roffset += toRead;
              } else {
                toRemove++;
              }
              data.set(tmpSlice);
              break;
            } else {
              var tmpSlice = currBucket.buffer.subarray(currBucket.roffset, currBucket.offset);
              data.set(tmpSlice);
              data = data.subarray(tmpSlice.byteLength);
              toRead -= tmpSlice.byteLength;
              toRemove++;
            }
          }
  
          if (toRemove && toRemove == pipe.buckets.length) {
            // Do not generate excessive garbage in use cases such as
            // write several bytes, read everything, write several bytes, read everything...
            toRemove--;
            pipe.buckets[toRemove].offset = 0;
            pipe.buckets[toRemove].roffset = 0;
          }
  
          pipe.buckets.splice(0, toRemove);
  
          return totalRead;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var pipe = stream.node.pipe;
  
          assert(buffer instanceof ArrayBuffer || ArrayBuffer.isView(buffer));
          var data = buffer.subarray(offset, offset + length);
  
          var dataLen = data.byteLength;
          if (dataLen <= 0) {
            return 0;
          }
  
          var currBucket = null;
  
          if (pipe.buckets.length == 0) {
            currBucket = {
              buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
              offset: 0,
              roffset: 0
            };
            pipe.buckets.push(currBucket);
          } else {
            currBucket = pipe.buckets[pipe.buckets.length - 1];
          }
  
          assert(currBucket.offset <= PIPEFS.BUCKET_BUFFER_SIZE);
  
          var freeBytesInCurrBuffer = PIPEFS.BUCKET_BUFFER_SIZE - currBucket.offset;
          if (freeBytesInCurrBuffer >= dataLen) {
            currBucket.buffer.set(data, currBucket.offset);
            currBucket.offset += dataLen;
            return dataLen;
          } else if (freeBytesInCurrBuffer > 0) {
            currBucket.buffer.set(data.subarray(0, freeBytesInCurrBuffer), currBucket.offset);
            currBucket.offset += freeBytesInCurrBuffer;
            data = data.subarray(freeBytesInCurrBuffer, data.byteLength);
          }
  
          var numBuckets = (data.byteLength / PIPEFS.BUCKET_BUFFER_SIZE) | 0;
          var remElements = data.byteLength % PIPEFS.BUCKET_BUFFER_SIZE;
  
          for (var i = 0; i < numBuckets; i++) {
            var newBucket = {
              buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
              offset: PIPEFS.BUCKET_BUFFER_SIZE,
              roffset: 0
            };
            pipe.buckets.push(newBucket);
            newBucket.buffer.set(data.subarray(0, PIPEFS.BUCKET_BUFFER_SIZE));
            data = data.subarray(PIPEFS.BUCKET_BUFFER_SIZE, data.byteLength);
          }
  
          if (remElements > 0) {
            var newBucket = {
              buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
              offset: data.byteLength,
              roffset: 0
            };
            pipe.buckets.push(newBucket);
            newBucket.buffer.set(data);
          }
  
          return dataLen;
        },close:function (stream) {
          var pipe = stream.node.pipe;
          pipe.buckets = null;
        }},nextname:function () {
        if (!PIPEFS.nextname.current) {
          PIPEFS.nextname.current = 0;
        }
        return 'pipe[' + (PIPEFS.nextname.current++) + ']';
      }};function ___syscall42(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pipe
      var fdPtr = SYSCALLS.get();
  
      if (fdPtr == 0) {
        throw new FS.ErrnoError(ERRNO_CODES.EFAULT);
      }
  
      var res = PIPEFS.createPipe();
  
      HEAP32[((fdPtr)>>2)]=res.readable_fd;
      HEAP32[(((fdPtr)+(4))>>2)]=res.writable_fd;
  
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall51(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // acct
      return -ERRNO_CODES.ENOSYS; // unsupported features
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall57(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // setpgid
      var pid = SYSCALLS.get(), pgid = SYSCALLS.get();
      if (pid && pid !== PROCINFO.pid) return -ERRNO_CODES.ESRCH;
      if (pgid && pgid !== PROCINFO.pgid) return -ERRNO_CODES.EPERM;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall60(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // umask
      var mask = SYSCALLS.get();
      var old = SYSCALLS.umask;
      SYSCALLS.umask = mask;
      return old;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall63(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup2
      var old = SYSCALLS.getStreamFromFD(), suggestFD = SYSCALLS.get();
      if (old.fd === suggestFD) return suggestFD;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall64(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getppid
      return PROCINFO.ppid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall66(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // setsid
      return 0; // no-op
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall75(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // setrlimit
      return 0; // no-op
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall77(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getrusage
      var who = SYSCALLS.get(), usage = SYSCALLS.get();
      _memset(usage, 0, 136);
      HEAP32[((usage)>>2)]=1; // fake some values
      HEAP32[(((usage)+(4))>>2)]=2;
      HEAP32[(((usage)+(8))>>2)]=3;
      HEAP32[(((usage)+(12))>>2)]=4;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall83(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // symlink
      var target = SYSCALLS.getStr(), linkpath = SYSCALLS.getStr();
      FS.symlink(target, linkpath);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall85(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readlink
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get(), bufsize = SYSCALLS.get();
      return SYSCALLS.doReadlink(path, buf, bufsize);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall9(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // link
      var oldpath = SYSCALLS.get(), newpath = SYSCALLS.get();
      return -ERRNO_CODES.EMLINK; // no hardlinks for us
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags)
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall94(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fchmod
      var fd = SYSCALLS.get(), mode = SYSCALLS.get();
      FS.fchmod(fd, mode);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall96(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpriority
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall97(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // setpriority
      return -ERRNO_CODES.EPERM;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   

  function ___unlock() {}

   

  function ___wait() {}

  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }

   

   

   


  function _endgrent() {
  Module['printErr']('missing function: endgrent'); abort(-1);
  }

  function _execl(/* ... */) {
      // int execl(const char *path, const char *arg0, ... /*, (char *)0 */);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/exec.html
      // We don't support executing external code.
      ___setErrNo(ERRNO_CODES.ENOEXEC);
      return -1;
    }

  function _fork() {
      // pid_t fork(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fork.html
      // We don't support multiple processes.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }

  function _fsw_poll() {
  Module['printErr']('missing function: fsw_poll'); abort(-1);
  }

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C.UTF-8';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = staticAlloc(TOTAL_ENV_SIZE);
        envPtr = staticAlloc(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }

  function _getgrent() {
  Module['printErr']('missing function: getgrent'); abort(-1);
  }

  function _getnameinfo(sa, salen, node, nodelen, serv, servlen, flags) {
      var info = __read_sockaddr(sa, salen);
      if (info.errno) {
        return -6;
      }
      var port = info.port;
      var addr = info.addr;
  
      var overflowed = false;
  
      if (node && nodelen) {
        var lookup;
        if ((flags & 1) || !(lookup = DNS.lookup_addr(addr))) {
          if (flags & 8) {
            return -2;
          }
        } else {
          addr = lookup;
        }
        var numBytesWrittenExclNull = stringToUTF8(addr, node, nodelen);
  
        if (numBytesWrittenExclNull+1 >= nodelen) {
          overflowed = true;
        }
      }
  
      if (serv && servlen) {
        port = '' + port;
        var numBytesWrittenExclNull = stringToUTF8(port, serv, servlen);
  
        if (numBytesWrittenExclNull+1 >= servlen) {
          overflowed = true;
        }
      }
  
      if (overflowed) {
        // Note: even when we overflow, getnameinfo() is specced to write out the truncated results.
        return -12;
      }
  
      return 0;
    }

  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getUTCSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getUTCMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getUTCHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getUTCDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getUTCMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getUTCFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getUTCDay();
      HEAP32[(((tmPtr)+(36))>>2)]=0;
      HEAP32[(((tmPtr)+(32))>>2)]=0;
      var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
      var yday = ((date.getTime() - start) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone;
  
      return tmPtr;
    }



  function _inet_addr(ptr) {
      var addr = __inet_pton4_raw(Pointer_stringify(ptr));
      if (addr === null) {
        return -1;
      }
      return addr;
    }

  function _kill(pid, sig) {
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/kill.html
      // Makes no sense in a single-process environment.
  	  // Should kill itself somtimes depending on `pid`
      Module.printErr('Calling stub instead of kill()');
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }

  function _label_row_get() {
  Module['printErr']('missing function: label_row_get'); abort(-1);
  }

  function _label_row_update() {
  Module['printErr']('missing function: label_row_update'); abort(-1);
  }

  function _lcd_row_get() {
  Module['printErr']('missing function: lcd_row_get'); abort(-1);
  }

  function _lcd_updated_all() {
  Module['printErr']('missing function: lcd_updated_all'); abort(-1);
  }

  function _led_set() {
  Module['printErr']('missing function: led_set'); abort(-1);
  }

   

   

  var _llvm_fabs_f32=Math_abs;

  var _llvm_fabs_f64=Math_abs;

  var _llvm_floor_f64=Math_floor;

  function _llvm_fma_f64() {
  Module['printErr']('missing function: llvm_fma_f64'); abort(-1);
  }

  function _llvm_nearbyint_f64() {
  Module['printErr']('missing function: llvm_nearbyint_f64'); abort(-1);
  }

  var _llvm_pow_f64=Math_pow;

  
    

   

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  var _llvm_trunc_f64=Math_trunc;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  function _midi_log_cwrap() {
  Module['printErr']('missing function: midi_log_cwrap'); abort(-1);
  }

  function _midi_send_cmd1_impl() {
  Module['printErr']('missing function: midi_send_cmd1_impl'); abort(-1);
  }

  function _midi_send_cmd2_impl() {
  Module['printErr']('missing function: midi_send_cmd2_impl'); abort(-1);
  }

  function _midi_send_sysex() {
  Module['printErr']('missing function: midi_send_sysex'); abort(-1);
  }

  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      var seconds = HEAP32[((rqtp)>>2)];
      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
      if (rmtp !== 0) {
        HEAP32[((rmtp)>>2)]=0;
        HEAP32[(((rmtp)+(4))>>2)]=0;
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }

  function _posix_spawn() {
  return _fork.apply(null, arguments)
  }

  function _posix_spawn_file_actions_adddup2() {
  Module['printErr']('missing function: posix_spawn_file_actions_adddup2'); abort(-1);
  }

  function _posix_spawn_file_actions_destroy() {
  Module['printErr']('missing function: posix_spawn_file_actions_destroy'); abort(-1);
  }

  function _posix_spawn_file_actions_init() {
  Module['printErr']('missing function: posix_spawn_file_actions_init'); abort(-1);
  }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Module['dynCall_vi'](routine, arg) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_setcancelstate() { return 0; }

  function _pthread_sigmask() {
  Module['printErr']('missing function: pthread_sigmask'); abort(-1);
  }

  function _res_query() {
  Module['printErr']('missing function: res_query'); abort(-1);
  }

   

   

  function _rowser() {
  Module['printErr']('missing function: rowser'); abort(-1);
  }

   

  function _setgrent() {
  Module['printErr']('missing function: setgrent'); abort(-1);
  }

  
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85:
          var maxHeapSize = 2*1024*1024*1024 - 16777216;
          maxHeapSize = HEAPU8.length;
          return maxHeapSize / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }function _setgroups(ngroups, gidset) {
      // int setgroups(int ngroups, const gid_t *gidset);
      // https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man2/setgroups.2.html
      if (ngroups < 1 || ngroups > _sysconf(3)) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        // We have just one process/user/group, so it makes no sense to set groups.
        ___setErrNo(ERRNO_CODES.EPERM);
        return -1;
      }
    }

  function _setitimer() {
      throw 'setitimer() is not implemented yet';
    }

  function _sigfillset(set) {
      HEAP32[((set)>>2)]=-1>>>0;
      return 0;
    }

  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  function _wait(stat_loc) {
      // pid_t wait(int *stat_loc);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/wait.html
      // Makes no sense in a single-process environment.
      ___setErrNo(ERRNO_CODES.ECHILD);
      return -1;
    }function _waitpid() {
  return _wait.apply(null, arguments)
  }

if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
__ATINIT__.push(function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); });;
__ATINIT__.push(function() { PIPEFS.root = FS.mount(PIPEFS, {}, null); });;
___buildEnvironment(ENV);;
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "___block_all_sigs": ___block_all_sigs, "___buildEnvironment": ___buildEnvironment, "___clock_gettime": ___clock_gettime, "___clone": ___clone, "___lock": ___lock, "___map_file": ___map_file, "___muldc3": ___muldc3, "___mulsc3": ___mulsc3, "___restore_sigs": ___restore_sigs, "___setErrNo": ___setErrNo, "___syscall1": ___syscall1, "___syscall10": ___syscall10, "___syscall102": ___syscall102, "___syscall114": ___syscall114, "___syscall118": ___syscall118, "___syscall12": ___syscall12, "___syscall121": ___syscall121, "___syscall122": ___syscall122, "___syscall125": ___syscall125, "___syscall132": ___syscall132, "___syscall133": ___syscall133, "___syscall14": ___syscall14, "___syscall140": ___syscall140, "___syscall142": ___syscall142, "___syscall144": ___syscall144, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall147": ___syscall147, "___syscall148": ___syscall148, "___syscall15": ___syscall15, "___syscall150": ___syscall150, "___syscall151": ___syscall151, "___syscall152": ___syscall152, "___syscall153": ___syscall153, "___syscall163": ___syscall163, "___syscall168": ___syscall168, "___syscall180": ___syscall180, "___syscall181": ___syscall181, "___syscall183": ___syscall183, "___syscall191": ___syscall191, "___syscall192": ___syscall192, "___syscall193": ___syscall193, "___syscall194": ___syscall194, "___syscall195": ___syscall195, "___syscall196": ___syscall196, "___syscall197": ___syscall197, "___syscall198": ___syscall198, "___syscall199": ___syscall199, "___syscall20": ___syscall20, "___syscall200": ___syscall200, "___syscall201": ___syscall201, "___syscall202": ___syscall202, "___syscall203": ___syscall203, "___syscall204": ___syscall204, "___syscall205": ___syscall205, "___syscall207": ___syscall207, "___syscall209": ___syscall209, "___syscall211": ___syscall211, "___syscall212": ___syscall212, "___syscall214": ___syscall214, "___syscall218": ___syscall218, "___syscall219": ___syscall219, "___syscall220": ___syscall220, "___syscall221": ___syscall221, "___syscall268": ___syscall268, "___syscall269": ___syscall269, "___syscall272": ___syscall272, "___syscall29": ___syscall29, "___syscall295": ___syscall295, "___syscall296": ___syscall296, "___syscall297": ___syscall297, "___syscall298": ___syscall298, "___syscall3": ___syscall3, "___syscall300": ___syscall300, "___syscall301": ___syscall301, "___syscall302": ___syscall302, "___syscall303": ___syscall303, "___syscall304": ___syscall304, "___syscall305": ___syscall305, "___syscall306": ___syscall306, "___syscall307": ___syscall307, "___syscall308": ___syscall308, "___syscall320": ___syscall320, "___syscall324": ___syscall324, "___syscall33": ___syscall33, "___syscall330": ___syscall330, "___syscall331": ___syscall331, "___syscall333": ___syscall333, "___syscall334": ___syscall334, "___syscall337": ___syscall337, "___syscall34": ___syscall34, "___syscall340": ___syscall340, "___syscall345": ___syscall345, "___syscall36": ___syscall36, "___syscall38": ___syscall38, "___syscall39": ___syscall39, "___syscall4": ___syscall4, "___syscall40": ___syscall40, "___syscall41": ___syscall41, "___syscall42": ___syscall42, "___syscall5": ___syscall5, "___syscall51": ___syscall51, "___syscall54": ___syscall54, "___syscall57": ___syscall57, "___syscall6": ___syscall6, "___syscall60": ___syscall60, "___syscall63": ___syscall63, "___syscall64": ___syscall64, "___syscall66": ___syscall66, "___syscall75": ___syscall75, "___syscall77": ___syscall77, "___syscall83": ___syscall83, "___syscall85": ___syscall85, "___syscall9": ___syscall9, "___syscall91": ___syscall91, "___syscall94": ___syscall94, "___syscall96": ___syscall96, "___syscall97": ___syscall97, "___unlock": ___unlock, "___wait": ___wait, "__addDays": __addDays, "__arraySum": __arraySum, "__exit": __exit, "__inet_ntop4_raw": __inet_ntop4_raw, "__inet_ntop6_raw": __inet_ntop6_raw, "__inet_pton4_raw": __inet_pton4_raw, "__inet_pton6_raw": __inet_pton6_raw, "__isLeapYear": __isLeapYear, "__read_sockaddr": __read_sockaddr, "__write_sockaddr": __write_sockaddr, "_clock_gettime": _clock_gettime, "_emscripten_get_now": _emscripten_get_now, "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_endgrent": _endgrent, "_execl": _execl, "_fork": _fork, "_fsw_poll": _fsw_poll, "_getenv": _getenv, "_getgrent": _getgrent, "_getnameinfo": _getnameinfo, "_gmtime_r": _gmtime_r, "_inet_addr": _inet_addr, "_kill": _kill, "_label_row_get": _label_row_get, "_label_row_update": _label_row_update, "_lcd_row_get": _lcd_row_get, "_lcd_updated_all": _lcd_updated_all, "_led_set": _led_set, "_llvm_fabs_f32": _llvm_fabs_f32, "_llvm_fabs_f64": _llvm_fabs_f64, "_llvm_floor_f64": _llvm_floor_f64, "_llvm_fma_f64": _llvm_fma_f64, "_llvm_nearbyint_f64": _llvm_nearbyint_f64, "_llvm_pow_f64": _llvm_pow_f64, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "_llvm_trunc_f64": _llvm_trunc_f64, "_midi_log_cwrap": _midi_log_cwrap, "_midi_send_cmd1_impl": _midi_send_cmd1_impl, "_midi_send_cmd2_impl": _midi_send_cmd2_impl, "_midi_send_sysex": _midi_send_sysex, "_nanosleep": _nanosleep, "_posix_spawn": _posix_spawn, "_posix_spawn_file_actions_adddup2": _posix_spawn_file_actions_adddup2, "_posix_spawn_file_actions_destroy": _posix_spawn_file_actions_destroy, "_posix_spawn_file_actions_init": _posix_spawn_file_actions_init, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_pthread_cleanup_push": _pthread_cleanup_push, "_pthread_setcancelstate": _pthread_setcancelstate, "_pthread_sigmask": _pthread_sigmask, "_res_query": _res_query, "_rowser": _rowser, "_setgrent": _setgrent, "_setgroups": _setgroups, "_setitimer": _setitimer, "_sigfillset": _sigfillset, "_strftime": _strftime, "_sysconf": _sysconf, "_time": _time, "_usleep": _usleep, "_wait": _wait, "_waitpid": _waitpid, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___environ": ___environ };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___environ=env.___environ|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var ___block_all_sigs=env.___block_all_sigs;
  var ___buildEnvironment=env.___buildEnvironment;
  var ___clock_gettime=env.___clock_gettime;
  var ___clone=env.___clone;
  var ___lock=env.___lock;
  var ___map_file=env.___map_file;
  var ___muldc3=env.___muldc3;
  var ___mulsc3=env.___mulsc3;
  var ___restore_sigs=env.___restore_sigs;
  var ___setErrNo=env.___setErrNo;
  var ___syscall1=env.___syscall1;
  var ___syscall10=env.___syscall10;
  var ___syscall102=env.___syscall102;
  var ___syscall114=env.___syscall114;
  var ___syscall118=env.___syscall118;
  var ___syscall12=env.___syscall12;
  var ___syscall121=env.___syscall121;
  var ___syscall122=env.___syscall122;
  var ___syscall125=env.___syscall125;
  var ___syscall132=env.___syscall132;
  var ___syscall133=env.___syscall133;
  var ___syscall14=env.___syscall14;
  var ___syscall140=env.___syscall140;
  var ___syscall142=env.___syscall142;
  var ___syscall144=env.___syscall144;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall147=env.___syscall147;
  var ___syscall148=env.___syscall148;
  var ___syscall15=env.___syscall15;
  var ___syscall150=env.___syscall150;
  var ___syscall151=env.___syscall151;
  var ___syscall152=env.___syscall152;
  var ___syscall153=env.___syscall153;
  var ___syscall163=env.___syscall163;
  var ___syscall168=env.___syscall168;
  var ___syscall180=env.___syscall180;
  var ___syscall181=env.___syscall181;
  var ___syscall183=env.___syscall183;
  var ___syscall191=env.___syscall191;
  var ___syscall192=env.___syscall192;
  var ___syscall193=env.___syscall193;
  var ___syscall194=env.___syscall194;
  var ___syscall195=env.___syscall195;
  var ___syscall196=env.___syscall196;
  var ___syscall197=env.___syscall197;
  var ___syscall198=env.___syscall198;
  var ___syscall199=env.___syscall199;
  var ___syscall20=env.___syscall20;
  var ___syscall200=env.___syscall200;
  var ___syscall201=env.___syscall201;
  var ___syscall202=env.___syscall202;
  var ___syscall203=env.___syscall203;
  var ___syscall204=env.___syscall204;
  var ___syscall205=env.___syscall205;
  var ___syscall207=env.___syscall207;
  var ___syscall209=env.___syscall209;
  var ___syscall211=env.___syscall211;
  var ___syscall212=env.___syscall212;
  var ___syscall214=env.___syscall214;
  var ___syscall218=env.___syscall218;
  var ___syscall219=env.___syscall219;
  var ___syscall220=env.___syscall220;
  var ___syscall221=env.___syscall221;
  var ___syscall268=env.___syscall268;
  var ___syscall269=env.___syscall269;
  var ___syscall272=env.___syscall272;
  var ___syscall29=env.___syscall29;
  var ___syscall295=env.___syscall295;
  var ___syscall296=env.___syscall296;
  var ___syscall297=env.___syscall297;
  var ___syscall298=env.___syscall298;
  var ___syscall3=env.___syscall3;
  var ___syscall300=env.___syscall300;
  var ___syscall301=env.___syscall301;
  var ___syscall302=env.___syscall302;
  var ___syscall303=env.___syscall303;
  var ___syscall304=env.___syscall304;
  var ___syscall305=env.___syscall305;
  var ___syscall306=env.___syscall306;
  var ___syscall307=env.___syscall307;
  var ___syscall308=env.___syscall308;
  var ___syscall320=env.___syscall320;
  var ___syscall324=env.___syscall324;
  var ___syscall33=env.___syscall33;
  var ___syscall330=env.___syscall330;
  var ___syscall331=env.___syscall331;
  var ___syscall333=env.___syscall333;
  var ___syscall334=env.___syscall334;
  var ___syscall337=env.___syscall337;
  var ___syscall34=env.___syscall34;
  var ___syscall340=env.___syscall340;
  var ___syscall345=env.___syscall345;
  var ___syscall36=env.___syscall36;
  var ___syscall38=env.___syscall38;
  var ___syscall39=env.___syscall39;
  var ___syscall4=env.___syscall4;
  var ___syscall40=env.___syscall40;
  var ___syscall41=env.___syscall41;
  var ___syscall42=env.___syscall42;
  var ___syscall5=env.___syscall5;
  var ___syscall51=env.___syscall51;
  var ___syscall54=env.___syscall54;
  var ___syscall57=env.___syscall57;
  var ___syscall6=env.___syscall6;
  var ___syscall60=env.___syscall60;
  var ___syscall63=env.___syscall63;
  var ___syscall64=env.___syscall64;
  var ___syscall66=env.___syscall66;
  var ___syscall75=env.___syscall75;
  var ___syscall77=env.___syscall77;
  var ___syscall83=env.___syscall83;
  var ___syscall85=env.___syscall85;
  var ___syscall9=env.___syscall9;
  var ___syscall91=env.___syscall91;
  var ___syscall94=env.___syscall94;
  var ___syscall96=env.___syscall96;
  var ___syscall97=env.___syscall97;
  var ___unlock=env.___unlock;
  var ___wait=env.___wait;
  var __addDays=env.__addDays;
  var __arraySum=env.__arraySum;
  var __exit=env.__exit;
  var __inet_ntop4_raw=env.__inet_ntop4_raw;
  var __inet_ntop6_raw=env.__inet_ntop6_raw;
  var __inet_pton4_raw=env.__inet_pton4_raw;
  var __inet_pton6_raw=env.__inet_pton6_raw;
  var __isLeapYear=env.__isLeapYear;
  var __read_sockaddr=env.__read_sockaddr;
  var __write_sockaddr=env.__write_sockaddr;
  var _clock_gettime=env._clock_gettime;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_get_now_is_monotonic=env._emscripten_get_now_is_monotonic;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _endgrent=env._endgrent;
  var _execl=env._execl;
  var _fork=env._fork;
  var _fsw_poll=env._fsw_poll;
  var _getenv=env._getenv;
  var _getgrent=env._getgrent;
  var _getnameinfo=env._getnameinfo;
  var _gmtime_r=env._gmtime_r;
  var _inet_addr=env._inet_addr;
  var _kill=env._kill;
  var _label_row_get=env._label_row_get;
  var _label_row_update=env._label_row_update;
  var _lcd_row_get=env._lcd_row_get;
  var _lcd_updated_all=env._lcd_updated_all;
  var _led_set=env._led_set;
  var _llvm_fabs_f32=env._llvm_fabs_f32;
  var _llvm_fabs_f64=env._llvm_fabs_f64;
  var _llvm_floor_f64=env._llvm_floor_f64;
  var _llvm_fma_f64=env._llvm_fma_f64;
  var _llvm_nearbyint_f64=env._llvm_nearbyint_f64;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _llvm_stacksave=env._llvm_stacksave;
  var _llvm_trunc_f64=env._llvm_trunc_f64;
  var _midi_log_cwrap=env._midi_log_cwrap;
  var _midi_send_cmd1_impl=env._midi_send_cmd1_impl;
  var _midi_send_cmd2_impl=env._midi_send_cmd2_impl;
  var _midi_send_sysex=env._midi_send_sysex;
  var _nanosleep=env._nanosleep;
  var _posix_spawn=env._posix_spawn;
  var _posix_spawn_file_actions_adddup2=env._posix_spawn_file_actions_adddup2;
  var _posix_spawn_file_actions_destroy=env._posix_spawn_file_actions_destroy;
  var _posix_spawn_file_actions_init=env._posix_spawn_file_actions_init;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _pthread_setcancelstate=env._pthread_setcancelstate;
  var _pthread_sigmask=env._pthread_sigmask;
  var _res_query=env._res_query;
  var _rowser=env._rowser;
  var _setgrent=env._setgrent;
  var _setgroups=env._setgroups;
  var _setitimer=env._setitimer;
  var _sigfillset=env._sigfillset;
  var _strftime=env._strftime;
  var _sysconf=env._sysconf;
  var _time=env._time;
  var _usleep=env._usleep;
  var _wait=env._wait;
  var _waitpid=env._waitpid;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _flash_load($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5;
 $7 = $3;
 $8 = $7&65535;
 $9 = (147038 + ($8)|0);
 $10 = $4;
 $11 = $10&65535;
 _memcpy(($6|0),($9|0),($11|0))|0;
 STACKTOP = sp;return;
}
function _flash_store($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $6&65535;
 $8 = (147038 + ($7)|0);
 $9 = $5;
 $10 = $4;
 $11 = $10&65535;
 _memcpy(($8|0),($9|0),($11|0))|0;
 STACKTOP = sp;return;
}
function _flash_addr($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2&65535;
 $4 = (147038 + ($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _get_dB_bcd_lookup() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24236|0);
}
function _debug_log($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $2 = sp + 24|0;
 $3 = sp;
 $1 = $0;
 HEAP32[$3>>2] = $varargs;
 $4 = $1;
 (_vsprintf($2,$4,$3)|0);
 _midi_log_cwrap(($2|0));
 STACKTOP = sp;return;
}
function _program_addr($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = $3&255;
 $5 = $4<<7;
 $6 = $5&65535;
 $7 = $6&65535;
 $8 = (128 + ($7))|0;
 $9 = $8&65535;
 $2 = $9;
 $10 = $2;
 $11 = (_flash_addr($10)|0);
 STACKTOP = sp;return ($11|0);
}
function _load_program() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = HEAP8[(185000)>>0]|0;
 $3 = $2&255;
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = HEAP8[(185001)>>0]|0;
  $6 = $5&255;
  $7 = ((186627) + ($6)|0);
  $8 = HEAP8[$7>>0]|0;
  $1 = $8;
 } else {
  $9 = HEAP8[(185002)>>0]|0;
  $1 = $9;
 }
 $10 = $1;
 $11 = $10&255;
 $12 = (($11) + 1)|0;
 HEAP32[$vararg_buffer>>2] = $12;
 _debug_log(163550,$vararg_buffer);
 $13 = $1;
 $14 = $13&255;
 $15 = $14<<7;
 $16 = $15&65535;
 $17 = $16&65535;
 $18 = (128 + ($17))|0;
 $19 = $18&65535;
 $0 = $19;
 $20 = $0;
 _flash_load($20,128,186754);
 $21 = $0;
 $22 = (_flash_addr($21)|0);
 HEAP32[46258] = $22;
 HEAP8[(185028)>>0] = 0;
 $23 = HEAP8[(186774)>>0]|0;
 HEAP8[(185004)>>0] = $23;
 $24 = HEAP8[(186775)>>0]|0;
 HEAP8[(185005)>>0] = $24;
 HEAP8[(185003)>>0] = 0;
 $25 = HEAP8[(186797)>>0]|0;
 $26 = $25&255;
 $27 = ($26|0)==(0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 _scene_default();
 STACKTOP = sp;return;
}
function _scene_default() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = (_program_addr(0)|0);
 $0 = $3;
 $4 = HEAP8[(185003)>>0]|0;
 $5 = $4&255;
 $6 = (($5) + 1)|0;
 HEAP32[$vararg_buffer>>2] = $6;
 _debug_log(163566,$vararg_buffer);
 $1 = 0;
 while(1) {
  $7 = $1;
  $8 = $7&255;
  $9 = ($8|0)<(2);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = $10&255;
  $12 = ((186776) + ($11)|0);
  HEAP8[$12>>0] = 94;
  $2 = 0;
  while(1) {
   $13 = $2;
   $14 = $13&255;
   $15 = ($14|0)<(5);
   if (!($15)) {
    break;
   }
   $16 = $0;
   $17 = ((($16)) + 24|0);
   $18 = $1;
   $19 = $18&255;
   $20 = (($17) + (($19*5)|0)|0);
   $21 = $2;
   $22 = $21&255;
   $23 = (($20) + ($22)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $1;
   $26 = $25&255;
   $27 = ((186778) + (($26*5)|0)|0);
   $28 = $2;
   $29 = $28&255;
   $30 = (($27) + ($29)|0);
   HEAP8[$30>>0] = $24;
   $31 = $2;
   $32 = (($31) + 1)<<24>>24;
   $2 = $32;
  }
  $33 = $1;
  $34 = (($33) + 1)<<24>>24;
  $1 = $34;
 }
 HEAP8[(186791)>>0] = 1;
 $35 = HEAP8[(185003)>>0]|0;
 $36 = $35&255;
 $37 = ((186792) + (($36*6)|0)|0);
 HEAP8[$37>>0] = 0;
 $38 = HEAP8[(185003)>>0]|0;
 $39 = $38&255;
 $40 = ((186792) + (($39*6)|0)|0);
 $41 = ((($40)) + 1|0);
 HEAP8[$41>>0] = -128;
 $42 = HEAP8[(185003)>>0]|0;
 $43 = $42&255;
 $44 = ((186792) + (($43*6)|0)|0);
 $45 = ((($44)) + 2|0);
 HEAP8[$45>>0] = 98;
 $46 = HEAP8[(185003)>>0]|0;
 $47 = $46&255;
 $48 = ((186792) + (($47*6)|0)|0);
 $49 = ((($48)) + 3|0);
 HEAP8[$49>>0] = 0;
 $50 = HEAP8[(185003)>>0]|0;
 $51 = $50&255;
 $52 = ((186792) + (($51*6)|0)|0);
 $53 = ((($52)) + 3|0);
 $54 = ((($53)) + 1|0);
 HEAP8[$54>>0] = -128;
 $55 = HEAP8[(185003)>>0]|0;
 $56 = $55&255;
 $57 = ((186792) + (($56*6)|0)|0);
 $58 = ((($57)) + 3|0);
 $59 = ((($58)) + 2|0);
 HEAP8[$59>>0] = 98;
 STACKTOP = sp;return;
}
function _load_scene() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP8[(185003)>>0]|0;
 $1 = $0&255;
 $2 = (($1) + 1)|0;
 HEAP32[$vararg_buffer>>2] = $2;
 _debug_log(163583,$vararg_buffer);
 $3 = HEAP8[(185003)>>0]|0;
 $4 = $3&255;
 $5 = ((186792) + (($4*6)|0)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = HEAP8[(185003)>>0]|0;
  $10 = $9&255;
  $11 = ((186792) + (($10*6)|0)|0);
  $12 = ((($11)) + 2|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)==(0);
  if ($15) {
   $16 = HEAP8[(185003)>>0]|0;
   $17 = $16&255;
   $18 = ((186792) + (($17*6)|0)|0);
   $19 = ((($18)) + 3|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = ($21|0)==(0);
   if ($22) {
    $23 = HEAP8[(185003)>>0]|0;
    $24 = $23&255;
    $25 = ((186792) + (($24*6)|0)|0);
    $26 = ((($25)) + 3|0);
    $27 = ((($26)) + 2|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28&255;
    $30 = ($29|0)==(0);
    if ($30) {
     $31 = HEAP8[(185003)>>0]|0;
     $32 = $31&255;
     $33 = ((186792) + (($32*6)|0)|0);
     $34 = HEAP8[(185003)>>0]|0;
     $35 = $34&255;
     $36 = (($35) - 1)|0;
     $37 = ((186792) + (($36*6)|0)|0);
     ;HEAP8[$33>>0]=HEAP8[$37>>0]|0;HEAP8[$33+1>>0]=HEAP8[$37+1>>0]|0;HEAP8[$33+2>>0]=HEAP8[$37+2>>0]|0;HEAP8[$33+3>>0]=HEAP8[$37+3>>0]|0;HEAP8[$33+4>>0]=HEAP8[$37+4>>0]|0;HEAP8[$33+5>>0]=HEAP8[$37+5>>0]|0;
    }
   }
  }
 }
 $38 = HEAP8[(185003)>>0]|0;
 $39 = $38&255;
 $40 = ((186792) + (($39*6)|0)|0);
 ;HEAP8[(185006)>>0]=HEAP8[$40>>0]|0;HEAP8[(185006)+1>>0]=HEAP8[$40+1>>0]|0;HEAP8[(185006)+2>>0]=HEAP8[$40+2>>0]|0;
 $41 = HEAP8[(185003)>>0]|0;
 $42 = $41&255;
 $43 = ((186792) + (($42*6)|0)|0);
 $44 = ((($43)) + 3|0);
 ;HEAP8[(185009)>>0]=HEAP8[$44>>0]|0;HEAP8[(185009)+1>>0]=HEAP8[$44+1>>0]|0;HEAP8[(185009)+2>>0]=HEAP8[$44+2>>0]|0;
 HEAP8[(185028)>>0] = 0;
 _calc_volume_modified();
 _calc_fx_modified();
 _calc_gain_modified();
 STACKTOP = sp;return;
}
function _calc_volume_modified() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[(185028)>>0]|0;
 $1 = $0&255;
 $2 = $1 & -69;
 $3 = HEAP8[(185008)>>0]|0;
 $4 = $3&255;
 $5 = HEAP32[46258]|0;
 $6 = ((($5)) + 38|0);
 $7 = HEAP8[(185003)>>0]|0;
 $8 = $7&255;
 $9 = (($6) + (($8*6)|0)|0);
 $10 = ((($9)) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ($4|0)!=($12|0);
 $14 = $13&1;
 $15 = $14&255;
 $16 = $15&255;
 $17 = $16 << 2;
 $18 = $2 | $17;
 $19 = HEAP8[(185011)>>0]|0;
 $20 = $19&255;
 $21 = HEAP32[46258]|0;
 $22 = ((($21)) + 38|0);
 $23 = HEAP8[(185003)>>0]|0;
 $24 = $23&255;
 $25 = (($22) + (($24*6)|0)|0);
 $26 = ((($25)) + 3|0);
 $27 = ((($26)) + 2|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = ($20|0)!=($29|0);
 $31 = $30&1;
 $32 = $31&255;
 $33 = $32&255;
 $34 = $33 << 6;
 $35 = $18 | $34;
 $36 = $35&255;
 HEAP8[(185028)>>0] = $36;
 return;
}
function _calc_fx_modified() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[(185028)>>0]|0;
 $1 = $0&255;
 $2 = $1 & -35;
 $3 = HEAP8[(185007)>>0]|0;
 $4 = $3&255;
 $5 = HEAP32[46258]|0;
 $6 = ((($5)) + 38|0);
 $7 = HEAP8[(185003)>>0]|0;
 $8 = $7&255;
 $9 = (($6) + (($8*6)|0)|0);
 $10 = ((($9)) + 1|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ($4|0)!=($12|0);
 $14 = $13&1;
 $15 = $14&255;
 $16 = $15&255;
 $17 = $16 << 1;
 $18 = $2 | $17;
 $19 = HEAP8[(185010)>>0]|0;
 $20 = $19&255;
 $21 = HEAP32[46258]|0;
 $22 = ((($21)) + 38|0);
 $23 = HEAP8[(185003)>>0]|0;
 $24 = $23&255;
 $25 = (($22) + (($24*6)|0)|0);
 $26 = ((($25)) + 3|0);
 $27 = ((($26)) + 1|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = ($20|0)!=($29|0);
 $31 = $30&1;
 $32 = $31&255;
 $33 = $32&255;
 $34 = $33 << 5;
 $35 = $18 | $34;
 $36 = $35&255;
 HEAP8[(185028)>>0] = $36;
 return;
}
function _calc_gain_modified() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[(185028)>>0]|0;
 $1 = $0&255;
 $2 = $1 & -18;
 $3 = HEAP8[(185006)>>0]|0;
 $4 = $3&255;
 $5 = HEAP32[46258]|0;
 $6 = ((($5)) + 38|0);
 $7 = HEAP8[(185003)>>0]|0;
 $8 = $7&255;
 $9 = (($6) + (($8*6)|0)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($4|0)!=($11|0);
 $13 = $12&1;
 $14 = $13&255;
 $15 = $14&255;
 $16 = $15 << 0;
 $17 = $2 | $16;
 $18 = HEAP8[(185009)>>0]|0;
 $19 = $18&255;
 $20 = HEAP32[46258]|0;
 $21 = ((($20)) + 38|0);
 $22 = HEAP8[(185003)>>0]|0;
 $23 = $22&255;
 $24 = (($21) + (($23*6)|0)|0);
 $25 = ((($24)) + 3|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = ($19|0)!=($27|0);
 $29 = $28&1;
 $30 = $29&255;
 $31 = $30&255;
 $32 = $31 << 4;
 $33 = $17 | $32;
 $34 = $33&255;
 HEAP8[(185028)>>0] = $34;
 return;
}
function _controller_init() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 HEAP8[186882] = 0;
 HEAP8[186883] = 0;
 $0 = 0;
 while(1) {
  $1 = $0;
  $2 = $1&255;
  $3 = ($2|0)<(1);
  if (!($3)) {
   break;
  }
  $4 = $0;
  $5 = $4&255;
  $6 = (185036 + ($5<<3)|0);
  $7 = ((($6)) + 4|0);
  HEAP8[$7>>0] = 0;
  $8 = $0;
  $9 = $8&255;
  $10 = (185036 + ($9<<3)|0);
  HEAP8[$10>>0] = 0;
  $11 = $0;
  $12 = (($11) + 1)<<24>>24;
  $0 = $12;
 }
 HEAP8[(185052)>>0] = -1;
 HEAP8[(185056)>>0] = -1;
 HEAP8[(184992)>>0] = 0;
 HEAP8[(184996)>>0] = 0;
 HEAP8[(185060)>>0] = 1;
 HEAP8[(185000)>>0] = 1;
 _flash_load(0,128,186626);
 $13 = HEAP8[186626]|0;
 $14 = $13&255;
 $15 = (($14) - 1)|0;
 $16 = $15&255;
 HEAP8[186884] = $16;
 $0 = 0;
 while(1) {
  $17 = $0;
  $18 = $17&255;
  $19 = ($18|0)<(2);
  if (!($19)) {
   break;
  }
  $20 = $0;
  $21 = $20&255;
  $22 = ((185006) + (($21*3)|0)|0);
  HEAP8[$22>>0] = 0;
  $23 = $0;
  $24 = $23&255;
  $25 = ((185066) + (($24*3)|0)|0);
  HEAP8[$25>>0] = -1;
  $26 = $0;
  $27 = $26&255;
  $28 = (186885 + (($27*6)|0)|0);
  $29 = ((($28)) + 4|0);
  HEAP8[$29>>0] = 16;
  $30 = $0;
  $31 = (($30) + 1)<<24>>24;
  $0 = $31;
 }
 HEAP8[(185001)>>0] = 0;
 HEAP8[(185002)>>0] = 0;
 HEAP8[(185061)>>0] = 0;
 HEAP8[(185062)>>0] = 0;
 HEAP8[(185064)>>0] = 127;
 HEAP8[(185065)>>0] = 0;
 _load_program();
 _load_scene();
 $32 = HEAP8[(185003)>>0]|0;
 HEAP8[(185063)>>0] = $32;
 $0 = 0;
 while(1) {
  $33 = $0;
  $34 = $33&255;
  $35 = ($34|0)<(2);
  if (!($35)) {
   break;
  }
  $36 = $0;
  $37 = $36&255;
  $38 = ((185012) + ($37<<3)|0);
  HEAP32[$38>>2] = 0;
  $39 = $0;
  $40 = $39&255;
  $41 = ((185012) + ($40<<3)|0);
  $42 = ((($41)) + 4|0);
  HEAP8[$42>>0] = 0;
  $43 = $0;
  $44 = $43&255;
  $45 = ((185072) + ($44<<3)|0);
  HEAP32[$45>>2] = -1;
  $46 = $0;
  $47 = $46&255;
  $48 = ((185072) + ($47<<3)|0);
  $49 = ((($48)) + 4|0);
  HEAP8[$49>>0] = -1;
  $50 = $0;
  $51 = $50&255;
  $52 = ((185006) + (($51*3)|0)|0);
  $53 = HEAP8[(185003)>>0]|0;
  $54 = $53&255;
  $55 = ((186792) + (($54*6)|0)|0);
  $56 = $0;
  $57 = $56&255;
  $58 = (($55) + (($57*3)|0)|0);
  ;HEAP8[$52>>0]=HEAP8[$58>>0]|0;HEAP8[$52+1>>0]=HEAP8[$58+1>>0]|0;HEAP8[$52+2>>0]=HEAP8[$58+2>>0]|0;
  $59 = $0;
  $60 = $59&255;
  $61 = ((185006) + (($60*3)|0)|0);
  $62 = ((($61)) + 1|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = $64 ^ -1;
  $66 = $65&255;
  $67 = $0;
  $68 = $67&255;
  $69 = ((185066) + (($68*3)|0)|0);
  $70 = ((($69)) + 1|0);
  HEAP8[$70>>0] = $66;
  $71 = $0;
  $72 = $71&255;
  $73 = ((185006) + (($72*3)|0)|0);
  $74 = ((($73)) + 2|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = $76 ^ -1;
  $78 = $77&255;
  $79 = $0;
  $80 = $79&255;
  $81 = ((185066) + (($80*3)|0)|0);
  $82 = ((($81)) + 2|0);
  HEAP8[$82>>0] = $78;
  $83 = $0;
  $84 = (($83) + 1)<<24>>24;
  $0 = $84;
 }
 _midi_invalidate();
 $0 = 0;
 while(1) {
  $85 = $0;
  $86 = $85&255;
  $87 = ($86|0)<(4);
  if (!($87)) {
   break;
  }
  $88 = $0;
  $89 = (_lcd_row_get(($88|0))|0);
  $90 = $0;
  $91 = $90&255;
  $92 = (185092 + ($91<<2)|0);
  HEAP32[$92>>2] = $89;
  $93 = $0;
  $94 = (($93) + 1)<<24>>24;
  $0 = $94;
 }
 $0 = 0;
 while(1) {
  $95 = $0;
  $96 = $95&255;
  $97 = ($96|0)<(20);
  if (!($97)) {
   break;
  }
  $98 = $0;
  $99 = $98&255;
  $100 = (163597 + ($99)|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = HEAP32[(185100)>>2]|0;
  $103 = $0;
  $104 = $103&255;
  $105 = (($102) + ($104)|0);
  HEAP8[$105>>0] = $101;
  $106 = $0;
  $107 = $106&255;
  $108 = (163597 + ($107)|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = HEAP32[(185104)>>2]|0;
  $111 = $0;
  $112 = $111&255;
  $113 = (($110) + ($112)|0);
  HEAP8[$113>>0] = $109;
  $114 = $0;
  $115 = $114&255;
  $116 = (163597 + ($115)|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = HEAP32[(185096)>>2]|0;
  $119 = $0;
  $120 = $119&255;
  $121 = (($118) + ($120)|0);
  HEAP8[$121>>0] = $117;
  $122 = $0;
  $123 = $122&255;
  $124 = (163597 + ($123)|0);
  $125 = HEAP8[$124>>0]|0;
  $126 = HEAP32[46273]|0;
  $127 = $0;
  $128 = $127&255;
  $129 = (($126) + ($128)|0);
  HEAP8[$129>>0] = $125;
  $130 = $0;
  $131 = (($130) + 1)<<24>>24;
  $0 = $131;
 }
 STACKTOP = sp;return;
}
function _midi_invalidate() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _debug_log(163618,$vararg_buffer);
 $0 = HEAP8[(185004)>>0]|0;
 $1 = $0&255;
 $2 = $1 ^ -1;
 $3 = $2&255;
 HEAP8[(185064)>>0] = $3;
 $4 = HEAP8[(185005)>>0]|0;
 $5 = $4&255;
 $6 = $5 ^ -1;
 $7 = $6&255;
 HEAP8[(185065)>>0] = $7;
 $8 = HEAP8[(185006)>>0]|0;
 $9 = $8&255;
 $10 = $9 ^ -1;
 $11 = $10&255;
 HEAP8[(185066)>>0] = $11;
 $12 = HEAP8[(185007)>>0]|0;
 $13 = $12&255;
 $14 = $13 ^ -1;
 $15 = $14&255;
 HEAP8[(185067)>>0] = $15;
 $16 = HEAP8[(185008)>>0]|0;
 $17 = $16&255;
 $18 = $17 ^ -1;
 $19 = $18&255;
 HEAP8[(185068)>>0] = $19;
 $20 = HEAP8[(185009)>>0]|0;
 $21 = $20&255;
 $22 = $21 ^ -1;
 $23 = $22&255;
 HEAP8[(185069)>>0] = $23;
 $24 = HEAP8[(185010)>>0]|0;
 $25 = $24&255;
 $26 = $25 ^ -1;
 $27 = $26&255;
 HEAP8[(185070)>>0] = $27;
 $28 = HEAP8[(185011)>>0]|0;
 $29 = $28&255;
 $30 = $29 ^ -1;
 $31 = $30&255;
 HEAP8[(185071)>>0] = $31;
 HEAP8[(186886)>>0] = 64;
 HEAP8[(186887)>>0] = 64;
 $32 = HEAP8[(185006)>>0]|0;
 $33 = $32&255;
 $34 = $33 ^ -1;
 $35 = $34&255;
 HEAP8[(186888)>>0] = $35;
 HEAP8[(186890)>>0] = 64;
 HEAP8[(186892)>>0] = 64;
 HEAP8[(186893)>>0] = 64;
 $36 = HEAP8[(185009)>>0]|0;
 $37 = $36&255;
 $38 = $37 ^ -1;
 $39 = $38&255;
 HEAP8[(186894)>>0] = $39;
 HEAP8[(186896)>>0] = 64;
 STACKTOP = sp;return;
}
function _controller_10msec_timer() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = HEAP32[(185012)>>2]|0;
 $cond = ($8|0)==(0);
 if ($cond) {
  $9 = HEAP8[(184988)>>0]|0;
  $10 = $9&255;
  $11 = $10 & 1;
  $12 = ($11|0)==(1);
  if ($12) {
   $13 = HEAP8[186897]|0;
   $14 = $13&255;
   $15 = $14 & 128;
   $16 = ($15|0)!=(0);
   if ($16) {
    $17 = HEAP8[186897]|0;
    $18 = $17&255;
    $19 = $18 & 127;
    $20 = ($19|0)<(31);
    if ($20) {
     $21 = HEAP8[186897]|0;
     $22 = $21&255;
     $23 = $22 & 128;
     $24 = HEAP8[186897]|0;
     $25 = $24&255;
     $26 = $25 & 127;
     $27 = (($26) + 1)|0;
     $28 = $23 | $27;
     $29 = $28&255;
     HEAP8[186897] = $29;
     $30 = HEAP8[186897]|0;
     $31 = $30&255;
     $32 = $31 & 127;
     $33 = ($32|0)==(31);
     if ($33) {
      HEAP8[186897] = 0;
      $34 = HEAP8[(185007)>>0]|0;
      $35 = $34&255;
      $36 = $35 ^ 64;
      $37 = $36&255;
      HEAP8[(185007)>>0] = $37;
      _calc_fx_modified();
     }
    }
   }
  }
  $38 = HEAP8[(184988)>>0]|0;
  $39 = $38&255;
  $40 = $39 & 2;
  $41 = ($40|0)==(2);
  if ($41) {
   $42 = HEAP8[(186898)>>0]|0;
   $43 = $42&255;
   $44 = $43 & 128;
   $45 = ($44|0)!=(0);
   if ($45) {
    $46 = HEAP8[(186898)>>0]|0;
    $47 = $46&255;
    $48 = $47 & 63;
    $49 = ($48|0)>=(24);
    if ($49) {
     $50 = HEAP8[(186898)>>0]|0;
     $51 = $50&255;
     $52 = $51 | 64;
     $53 = $52&255;
     HEAP8[(186898)>>0] = $53;
    }
   }
   $54 = HEAP8[(186898)>>0]|0;
   $55 = $54&255;
   $56 = $55 & 64;
   $57 = ($56|0)!=(0);
   if ($57) {
    $58 = HEAP8[(186898)>>0]|0;
    $59 = $58&255;
    $60 = $59 & 3;
    $61 = ($60|0)==(0);
    if ($61) {
     $62 = HEAP8[(185007)>>0]|0;
     $63 = $62&255;
     $64 = $63 & 192;
     $65 = ($64|0)==(128);
     do {
      if ($65) {
       $66 = HEAP8[(185006)>>0]|0;
       $67 = $66&255;
       $68 = ($67|0)!=(0);
       if ($68) {
        $0 = (185006);
        break;
       } else {
        $0 = (186776);
        break;
       }
      } else {
       $0 = (186889);
      }
     } while(0);
     $69 = $0;
     $70 = HEAP8[$69>>0]|0;
     $71 = $70&255;
     $72 = ($71|0)>(1);
     if ($72) {
      $73 = $0;
      $74 = HEAP8[$73>>0]|0;
      $75 = (($74) + -1)<<24>>24;
      HEAP8[$73>>0] = $75;
      _calc_gain_modified();
     }
    }
   }
   $76 = HEAP8[(186898)>>0]|0;
   $77 = $76&255;
   $78 = $77 & 192;
   $79 = ($78|0)!=(0);
   if ($79) {
    $80 = HEAP8[(186898)>>0]|0;
    $81 = $80&255;
    $82 = $81 & 192;
    $83 = HEAP8[(186898)>>0]|0;
    $84 = $83&255;
    $85 = $84 & 63;
    $86 = (($85) + 1)|0;
    $87 = $86 & 63;
    $88 = $82 | $87;
    $89 = $88&255;
    HEAP8[(186898)>>0] = $89;
   }
  }
  $90 = HEAP8[(184988)>>0]|0;
  $91 = $90&255;
  $92 = $91 & 4;
  $93 = ($92|0)==(4);
  if ($93) {
   $94 = HEAP8[(186899)>>0]|0;
   $95 = $94&255;
   $96 = $95 & 128;
   $97 = ($96|0)!=(0);
   if ($97) {
    $98 = HEAP8[(186899)>>0]|0;
    $99 = $98&255;
    $100 = $99 & 63;
    $101 = ($100|0)>=(24);
    if ($101) {
     $102 = HEAP8[(186899)>>0]|0;
     $103 = $102&255;
     $104 = $103 | 64;
     $105 = $104&255;
     HEAP8[(186899)>>0] = $105;
    }
   }
   $106 = HEAP8[(186899)>>0]|0;
   $107 = $106&255;
   $108 = $107 & 64;
   $109 = ($108|0)!=(0);
   if ($109) {
    $110 = HEAP8[(186899)>>0]|0;
    $111 = $110&255;
    $112 = $111 & 3;
    $113 = ($112|0)==(0);
    if ($113) {
     $114 = HEAP8[(185007)>>0]|0;
     $115 = $114&255;
     $116 = $115 & 192;
     $117 = ($116|0)==(128);
     do {
      if ($117) {
       $118 = HEAP8[(185006)>>0]|0;
       $119 = $118&255;
       $120 = ($119|0)!=(0);
       if ($120) {
        $1 = (185006);
        break;
       } else {
        $1 = (186776);
        break;
       }
      } else {
       $1 = (186889);
      }
     } while(0);
     $121 = $1;
     $122 = HEAP8[$121>>0]|0;
     $123 = $122&255;
     $124 = ($123|0)<(127);
     if ($124) {
      $125 = $1;
      $126 = HEAP8[$125>>0]|0;
      $127 = (($126) + 1)<<24>>24;
      HEAP8[$125>>0] = $127;
      _calc_gain_modified();
     }
    }
   }
   $128 = HEAP8[(186899)>>0]|0;
   $129 = $128&255;
   $130 = $129 & 192;
   $131 = ($130|0)!=(0);
   if ($131) {
    $132 = HEAP8[(186899)>>0]|0;
    $133 = $132&255;
    $134 = $133 & 192;
    $135 = HEAP8[(186899)>>0]|0;
    $136 = $135&255;
    $137 = $136 & 63;
    $138 = (($137) + 1)|0;
    $139 = $138 & 63;
    $140 = $134 | $139;
    $141 = $140&255;
    HEAP8[(186899)>>0] = $141;
   }
  }
  $142 = HEAP8[(184988)>>0]|0;
  $143 = $142&255;
  $144 = $143 & 8;
  $145 = ($144|0)==(8);
  if ($145) {
   $146 = HEAP8[(186900)>>0]|0;
   $147 = $146&255;
   $148 = $147 & 128;
   $149 = ($148|0)!=(0);
   if ($149) {
    $150 = HEAP8[(186900)>>0]|0;
    $151 = $150&255;
    $152 = $151 & 63;
    $153 = ($152|0)>=(24);
    if ($153) {
     $154 = HEAP8[(186900)>>0]|0;
     $155 = $154&255;
     $156 = $155 | 64;
     $157 = $156&255;
     HEAP8[(186900)>>0] = $157;
    }
   }
   $158 = HEAP8[(186900)>>0]|0;
   $159 = $158&255;
   $160 = $159 & 64;
   $161 = ($160|0)!=(0);
   if ($161) {
    $162 = HEAP8[(186900)>>0]|0;
    $163 = $162&255;
    $164 = $163 & 3;
    $165 = ($164|0)==(0);
    if ($165) {
     $166 = HEAP8[(185008)>>0]|0;
     $2 = $166;
     $167 = $2;
     $168 = $167&255;
     $169 = ($168|0)>(0);
     if ($169) {
      $170 = $2;
      $171 = (($170) + -1)<<24>>24;
      $2 = $171;
      $172 = $2;
      HEAP8[(185008)>>0] = $172;
      _calc_volume_modified();
     }
    }
   }
   $173 = HEAP8[(186900)>>0]|0;
   $174 = $173&255;
   $175 = $174 & 192;
   $176 = ($175|0)!=(0);
   if ($176) {
    $177 = HEAP8[(186900)>>0]|0;
    $178 = $177&255;
    $179 = $178 & 192;
    $180 = HEAP8[(186900)>>0]|0;
    $181 = $180&255;
    $182 = $181 & 63;
    $183 = (($182) + 1)|0;
    $184 = $183 & 63;
    $185 = $179 | $184;
    $186 = $185&255;
    HEAP8[(186900)>>0] = $186;
   }
  }
  $187 = HEAP8[(184988)>>0]|0;
  $188 = $187&255;
  $189 = $188 & 16;
  $190 = ($189|0)==(16);
  if ($190) {
   $191 = HEAP8[(186901)>>0]|0;
   $192 = $191&255;
   $193 = $192 & 128;
   $194 = ($193|0)!=(0);
   if ($194) {
    $195 = HEAP8[(186901)>>0]|0;
    $196 = $195&255;
    $197 = $196 & 63;
    $198 = ($197|0)>=(24);
    if ($198) {
     $199 = HEAP8[(186901)>>0]|0;
     $200 = $199&255;
     $201 = $200 | 64;
     $202 = $201&255;
     HEAP8[(186901)>>0] = $202;
    }
   }
   $203 = HEAP8[(186901)>>0]|0;
   $204 = $203&255;
   $205 = $204 & 64;
   $206 = ($205|0)!=(0);
   if ($206) {
    $207 = HEAP8[(186901)>>0]|0;
    $208 = $207&255;
    $209 = $208 & 3;
    $210 = ($209|0)==(0);
    if ($210) {
     $211 = HEAP8[(185008)>>0]|0;
     $3 = $211;
     $212 = $3;
     $213 = $212&255;
     $214 = ($213|0)<(127);
     if ($214) {
      $215 = $3;
      $216 = (($215) + 1)<<24>>24;
      $3 = $216;
      $217 = $3;
      HEAP8[(185008)>>0] = $217;
      _calc_volume_modified();
     }
    }
   }
   $218 = HEAP8[(186901)>>0]|0;
   $219 = $218&255;
   $220 = $219 & 192;
   $221 = ($220|0)!=(0);
   if ($221) {
    $222 = HEAP8[(186901)>>0]|0;
    $223 = $222&255;
    $224 = $223 & 192;
    $225 = HEAP8[(186901)>>0]|0;
    $226 = $225&255;
    $227 = $226 & 63;
    $228 = (($227) + 1)|0;
    $229 = $228 & 63;
    $230 = $224 | $229;
    $231 = $230&255;
    HEAP8[(186901)>>0] = $231;
   }
  }
  $232 = HEAP8[(184988)>>0]|0;
  $233 = $232&255;
  $234 = $233 & 32;
  $235 = ($234|0)==(32);
  if ($235) {
   $236 = HEAP8[(186902)>>0]|0;
   $237 = $236&255;
   $238 = $237 & 128;
   $239 = ($238|0)!=(0);
   if ($239) {
    $240 = HEAP8[(186902)>>0]|0;
    $241 = $240&255;
    $242 = $241 & 127;
    $243 = ($242|0)<(31);
    if ($243) {
     $244 = HEAP8[(186902)>>0]|0;
     $245 = $244&255;
     $246 = $245 & 128;
     $247 = HEAP8[(186902)>>0]|0;
     $248 = $247&255;
     $249 = $248 & 127;
     $250 = (($249) + 1)|0;
     $251 = $246 | $250;
     $252 = $251&255;
     HEAP8[(186902)>>0] = $252;
     $253 = HEAP8[(186902)>>0]|0;
     $254 = $253&255;
     $255 = $254 & 127;
     $256 = ($255|0)==(31);
     if ($256) {
      HEAP8[(186902)>>0] = 0;
      _midi_invalidate();
     }
    }
   }
  }
 }
 $257 = HEAP32[(185020)>>2]|0;
 $cond1 = ($257|0)==(0);
 if ($cond1) {
  $258 = HEAP8[184984]|0;
  $259 = $258&255;
  $260 = $259 & 1;
  $261 = ($260|0)==(1);
  if ($261) {
   $262 = HEAP8[(186905)>>0]|0;
   $263 = $262&255;
   $264 = $263 & 128;
   $265 = ($264|0)!=(0);
   if ($265) {
    $266 = HEAP8[(186905)>>0]|0;
    $267 = $266&255;
    $268 = $267 & 127;
    $269 = ($268|0)<(31);
    if ($269) {
     $270 = HEAP8[(186905)>>0]|0;
     $271 = $270&255;
     $272 = $271 & 128;
     $273 = HEAP8[(186905)>>0]|0;
     $274 = $273&255;
     $275 = $274 & 127;
     $276 = (($275) + 1)|0;
     $277 = $272 | $276;
     $278 = $277&255;
     HEAP8[(186905)>>0] = $278;
     $279 = HEAP8[(186905)>>0]|0;
     $280 = $279&255;
     $281 = $280 & 127;
     $282 = ($281|0)==(31);
     if ($282) {
      HEAP8[(186905)>>0] = 0;
      $283 = HEAP8[(185010)>>0]|0;
      $284 = $283&255;
      $285 = $284 ^ 64;
      $286 = $285&255;
      HEAP8[(185010)>>0] = $286;
      _calc_fx_modified();
     }
    }
   }
  }
  $287 = HEAP8[184984]|0;
  $288 = $287&255;
  $289 = $288 & 2;
  $290 = ($289|0)==(2);
  if ($290) {
   $291 = HEAP8[(186906)>>0]|0;
   $292 = $291&255;
   $293 = $292 & 128;
   $294 = ($293|0)!=(0);
   if ($294) {
    $295 = HEAP8[(186906)>>0]|0;
    $296 = $295&255;
    $297 = $296 & 63;
    $298 = ($297|0)>=(24);
    if ($298) {
     $299 = HEAP8[(186906)>>0]|0;
     $300 = $299&255;
     $301 = $300 | 64;
     $302 = $301&255;
     HEAP8[(186906)>>0] = $302;
    }
   }
   $303 = HEAP8[(186906)>>0]|0;
   $304 = $303&255;
   $305 = $304 & 64;
   $306 = ($305|0)!=(0);
   if ($306) {
    $307 = HEAP8[(186906)>>0]|0;
    $308 = $307&255;
    $309 = $308 & 3;
    $310 = ($309|0)==(0);
    if ($310) {
     $311 = HEAP8[(185010)>>0]|0;
     $312 = $311&255;
     $313 = $312 & 192;
     $314 = ($313|0)==(128);
     do {
      if ($314) {
       $315 = HEAP8[(185009)>>0]|0;
       $316 = $315&255;
       $317 = ($316|0)!=(0);
       if ($317) {
        $4 = (185009);
        break;
       } else {
        $4 = (186777);
        break;
       }
      } else {
       $4 = (186895);
      }
     } while(0);
     $318 = $4;
     $319 = HEAP8[$318>>0]|0;
     $320 = $319&255;
     $321 = ($320|0)>(1);
     if ($321) {
      $322 = $4;
      $323 = HEAP8[$322>>0]|0;
      $324 = (($323) + -1)<<24>>24;
      HEAP8[$322>>0] = $324;
      _calc_gain_modified();
     }
    }
   }
   $325 = HEAP8[(186906)>>0]|0;
   $326 = $325&255;
   $327 = $326 & 192;
   $328 = ($327|0)!=(0);
   if ($328) {
    $329 = HEAP8[(186906)>>0]|0;
    $330 = $329&255;
    $331 = $330 & 192;
    $332 = HEAP8[(186906)>>0]|0;
    $333 = $332&255;
    $334 = $333 & 63;
    $335 = (($334) + 1)|0;
    $336 = $335 & 63;
    $337 = $331 | $336;
    $338 = $337&255;
    HEAP8[(186906)>>0] = $338;
   }
  }
  $339 = HEAP8[184984]|0;
  $340 = $339&255;
  $341 = $340 & 4;
  $342 = ($341|0)==(4);
  if ($342) {
   $343 = HEAP8[(186907)>>0]|0;
   $344 = $343&255;
   $345 = $344 & 128;
   $346 = ($345|0)!=(0);
   if ($346) {
    $347 = HEAP8[(186907)>>0]|0;
    $348 = $347&255;
    $349 = $348 & 63;
    $350 = ($349|0)>=(24);
    if ($350) {
     $351 = HEAP8[(186907)>>0]|0;
     $352 = $351&255;
     $353 = $352 | 64;
     $354 = $353&255;
     HEAP8[(186907)>>0] = $354;
    }
   }
   $355 = HEAP8[(186907)>>0]|0;
   $356 = $355&255;
   $357 = $356 & 64;
   $358 = ($357|0)!=(0);
   if ($358) {
    $359 = HEAP8[(186907)>>0]|0;
    $360 = $359&255;
    $361 = $360 & 3;
    $362 = ($361|0)==(0);
    if ($362) {
     $363 = HEAP8[(185010)>>0]|0;
     $364 = $363&255;
     $365 = $364 & 192;
     $366 = ($365|0)==(128);
     do {
      if ($366) {
       $367 = HEAP8[(185009)>>0]|0;
       $368 = $367&255;
       $369 = ($368|0)!=(0);
       if ($369) {
        $5 = (185009);
        break;
       } else {
        $5 = (186777);
        break;
       }
      } else {
       $5 = (186895);
      }
     } while(0);
     $370 = $5;
     $371 = HEAP8[$370>>0]|0;
     $372 = $371&255;
     $373 = ($372|0)<(127);
     if ($373) {
      $374 = $5;
      $375 = HEAP8[$374>>0]|0;
      $376 = (($375) + 1)<<24>>24;
      HEAP8[$374>>0] = $376;
      _calc_gain_modified();
     }
    }
   }
   $377 = HEAP8[(186907)>>0]|0;
   $378 = $377&255;
   $379 = $378 & 192;
   $380 = ($379|0)!=(0);
   if ($380) {
    $381 = HEAP8[(186907)>>0]|0;
    $382 = $381&255;
    $383 = $382 & 192;
    $384 = HEAP8[(186907)>>0]|0;
    $385 = $384&255;
    $386 = $385 & 63;
    $387 = (($386) + 1)|0;
    $388 = $387 & 63;
    $389 = $383 | $388;
    $390 = $389&255;
    HEAP8[(186907)>>0] = $390;
   }
  }
  $391 = HEAP8[184984]|0;
  $392 = $391&255;
  $393 = $392 & 8;
  $394 = ($393|0)==(8);
  if ($394) {
   $395 = HEAP8[(186908)>>0]|0;
   $396 = $395&255;
   $397 = $396 & 128;
   $398 = ($397|0)!=(0);
   if ($398) {
    $399 = HEAP8[(186908)>>0]|0;
    $400 = $399&255;
    $401 = $400 & 63;
    $402 = ($401|0)>=(24);
    if ($402) {
     $403 = HEAP8[(186908)>>0]|0;
     $404 = $403&255;
     $405 = $404 | 64;
     $406 = $405&255;
     HEAP8[(186908)>>0] = $406;
    }
   }
   $407 = HEAP8[(186908)>>0]|0;
   $408 = $407&255;
   $409 = $408 & 64;
   $410 = ($409|0)!=(0);
   if ($410) {
    $411 = HEAP8[(186908)>>0]|0;
    $412 = $411&255;
    $413 = $412 & 3;
    $414 = ($413|0)==(0);
    if ($414) {
     $415 = HEAP8[(185011)>>0]|0;
     $6 = $415;
     $416 = $6;
     $417 = $416&255;
     $418 = ($417|0)>(0);
     if ($418) {
      $419 = $6;
      $420 = (($419) + -1)<<24>>24;
      $6 = $420;
      $421 = $6;
      HEAP8[(185011)>>0] = $421;
      _calc_volume_modified();
     }
    }
   }
   $422 = HEAP8[(186908)>>0]|0;
   $423 = $422&255;
   $424 = $423 & 192;
   $425 = ($424|0)!=(0);
   if ($425) {
    $426 = HEAP8[(186908)>>0]|0;
    $427 = $426&255;
    $428 = $427 & 192;
    $429 = HEAP8[(186908)>>0]|0;
    $430 = $429&255;
    $431 = $430 & 63;
    $432 = (($431) + 1)|0;
    $433 = $432 & 63;
    $434 = $428 | $433;
    $435 = $434&255;
    HEAP8[(186908)>>0] = $435;
   }
  }
  $436 = HEAP8[184984]|0;
  $437 = $436&255;
  $438 = $437 & 16;
  $439 = ($438|0)==(16);
  if ($439) {
   $440 = HEAP8[(186909)>>0]|0;
   $441 = $440&255;
   $442 = $441 & 128;
   $443 = ($442|0)!=(0);
   if ($443) {
    $444 = HEAP8[(186909)>>0]|0;
    $445 = $444&255;
    $446 = $445 & 63;
    $447 = ($446|0)>=(24);
    if ($447) {
     $448 = HEAP8[(186909)>>0]|0;
     $449 = $448&255;
     $450 = $449 | 64;
     $451 = $450&255;
     HEAP8[(186909)>>0] = $451;
    }
   }
   $452 = HEAP8[(186909)>>0]|0;
   $453 = $452&255;
   $454 = $453 & 64;
   $455 = ($454|0)!=(0);
   if ($455) {
    $456 = HEAP8[(186909)>>0]|0;
    $457 = $456&255;
    $458 = $457 & 3;
    $459 = ($458|0)==(0);
    if ($459) {
     $460 = HEAP8[(185011)>>0]|0;
     $7 = $460;
     $461 = $7;
     $462 = $461&255;
     $463 = ($462|0)<(127);
     if ($463) {
      $464 = $7;
      $465 = (($464) + 1)<<24>>24;
      $7 = $465;
      $466 = $7;
      HEAP8[(185011)>>0] = $466;
      _calc_volume_modified();
     }
    }
   }
   $467 = HEAP8[(186909)>>0]|0;
   $468 = $467&255;
   $469 = $468 & 192;
   $470 = ($469|0)!=(0);
   if ($470) {
    $471 = HEAP8[(186909)>>0]|0;
    $472 = $471&255;
    $473 = $472 & 192;
    $474 = HEAP8[(186909)>>0]|0;
    $475 = $474&255;
    $476 = $475 & 63;
    $477 = (($476) + 1)|0;
    $478 = $477 & 63;
    $479 = $473 | $478;
    $480 = $479&255;
    HEAP8[(186909)>>0] = $480;
   }
  }
  $481 = HEAP8[184984]|0;
  $482 = $481&255;
  $483 = $482 & 32;
  $484 = ($483|0)==(32);
  if ($484) {
   $485 = HEAP8[(186910)>>0]|0;
   $486 = $485&255;
   $487 = $486 & 128;
   $488 = ($487|0)!=(0);
   if ($488) {
    $489 = HEAP8[(186910)>>0]|0;
    $490 = $489&255;
    $491 = $490 & 127;
    $492 = ($491|0)<(31);
    if ($492) {
     $493 = HEAP8[(186910)>>0]|0;
     $494 = $493&255;
     $495 = $494 & 128;
     $496 = HEAP8[(186910)>>0]|0;
     $497 = $496&255;
     $498 = $497 & 127;
     $499 = (($498) + 1)|0;
     $500 = $495 | $499;
     $501 = $500&255;
     HEAP8[(186910)>>0] = $501;
     $502 = HEAP8[(186910)>>0]|0;
     $503 = $502&255;
     $504 = $503 & 127;
     $505 = ($504|0)==(31);
     if ($505) {
      HEAP8[(186910)>>0] = 0;
      _midi_invalidate();
     }
    }
   }
  }
 }
 $506 = HEAP8[184984]|0;
 $507 = $506&255;
 $508 = $507 & 64;
 $509 = ($508|0)==(64);
 if ($509) {
  $510 = HEAP8[(186911)>>0]|0;
  $511 = $510&255;
  $512 = $511 & 128;
  $513 = ($512|0)!=(0);
  if ($513) {
   $514 = HEAP8[(186911)>>0]|0;
   $515 = $514&255;
   $516 = $515 & 127;
   $517 = ($516|0)<(31);
   if ($517) {
    $518 = HEAP8[(186911)>>0]|0;
    $519 = $518&255;
    $520 = $519 & 128;
    $521 = HEAP8[(186911)>>0]|0;
    $522 = $521&255;
    $523 = $522 & 127;
    $524 = (($523) + 1)|0;
    $525 = $520 | $524;
    $526 = $525&255;
    HEAP8[(186911)>>0] = $526;
    $527 = HEAP8[(186911)>>0]|0;
    $528 = $527&255;
    $529 = $528 & 127;
    $530 = ($529|0)==(31);
    if ($530) {
     HEAP8[(186911)>>0] = 0;
     _toggle_setlist_mode();
    }
   }
  }
 }
 $531 = HEAP8[184984]|0;
 $532 = $531&255;
 $533 = $532 & 128;
 $534 = ($533|0)==(128);
 if ($534) {
  $535 = HEAP8[(186912)>>0]|0;
  $536 = $535&255;
  $537 = $536 & 128;
  $538 = ($537|0)!=(0);
  if ($538) {
   $539 = HEAP8[(186912)>>0]|0;
   $540 = $539&255;
   $541 = $540 & 127;
   $542 = ($541|0)<(31);
   if ($542) {
    $543 = HEAP8[(186912)>>0]|0;
    $544 = $543&255;
    $545 = $544 & 128;
    $546 = HEAP8[(186912)>>0]|0;
    $547 = $546&255;
    $548 = $547 & 127;
    $549 = (($548) + 1)|0;
    $550 = $545 | $549;
    $551 = $550&255;
    HEAP8[(186912)>>0] = $551;
    $552 = HEAP8[(186912)>>0]|0;
    $553 = $552&255;
    $554 = $553 & 127;
    $555 = ($554|0)==(31);
    if ($555) {
     HEAP8[(186912)>>0] = 0;
     _reset_scene();
    }
   }
  }
 }
 $556 = HEAP8[(184988)>>0]|0;
 $557 = $556&255;
 $558 = $557 & 64;
 $559 = ($558|0)==(64);
 if ($559) {
  $560 = HEAP8[(186903)>>0]|0;
  $561 = $560&255;
  $562 = $561 & 128;
  $563 = ($562|0)!=(0);
  if ($563) {
   $564 = HEAP8[(186903)>>0]|0;
   $565 = $564&255;
   $566 = $565 & 63;
   $567 = ($566|0)>=(32);
   if ($567) {
    $568 = HEAP8[(186903)>>0]|0;
    $569 = $568&255;
    $570 = $569 | 64;
    $571 = $570&255;
    HEAP8[(186903)>>0] = $571;
   }
  }
  $572 = HEAP8[(186903)>>0]|0;
  $573 = $572&255;
  $574 = $573 & 64;
  $575 = ($574|0)!=(0);
  if ($575) {
   $576 = HEAP8[(186903)>>0]|0;
   $577 = $576&255;
   $578 = $577 & 7;
   $579 = ($578|0)==(0);
   if ($579) {
    _prev_song();
   }
  }
  $580 = HEAP8[(186903)>>0]|0;
  $581 = $580&255;
  $582 = $581 & 192;
  $583 = ($582|0)!=(0);
  if ($583) {
   $584 = HEAP8[(186903)>>0]|0;
   $585 = $584&255;
   $586 = $585 & 192;
   $587 = HEAP8[(186903)>>0]|0;
   $588 = $587&255;
   $589 = $588 & 63;
   $590 = (($589) + 1)|0;
   $591 = $590 & 63;
   $592 = $586 | $591;
   $593 = $592&255;
   HEAP8[(186903)>>0] = $593;
  }
 }
 $594 = HEAP8[(184988)>>0]|0;
 $595 = $594&255;
 $596 = $595 & 128;
 $597 = ($596|0)==(128);
 if (!($597)) {
  STACKTOP = sp;return;
 }
 $598 = HEAP8[(186904)>>0]|0;
 $599 = $598&255;
 $600 = $599 & 128;
 $601 = ($600|0)!=(0);
 if ($601) {
  $602 = HEAP8[(186904)>>0]|0;
  $603 = $602&255;
  $604 = $603 & 63;
  $605 = ($604|0)>=(32);
  if ($605) {
   $606 = HEAP8[(186904)>>0]|0;
   $607 = $606&255;
   $608 = $607 | 64;
   $609 = $608&255;
   HEAP8[(186904)>>0] = $609;
  }
 }
 $610 = HEAP8[(186904)>>0]|0;
 $611 = $610&255;
 $612 = $611 & 64;
 $613 = ($612|0)!=(0);
 if ($613) {
  $614 = HEAP8[(186904)>>0]|0;
  $615 = $614&255;
  $616 = $615 & 7;
  $617 = ($616|0)==(0);
  if ($617) {
   _next_song();
  }
 }
 $618 = HEAP8[(186904)>>0]|0;
 $619 = $618&255;
 $620 = $619 & 192;
 $621 = ($620|0)!=(0);
 if (!($621)) {
  STACKTOP = sp;return;
 }
 $622 = HEAP8[(186904)>>0]|0;
 $623 = $622&255;
 $624 = $623 & 192;
 $625 = HEAP8[(186904)>>0]|0;
 $626 = $625&255;
 $627 = $626 & 63;
 $628 = (($627) + 1)|0;
 $629 = $628 & 63;
 $630 = $624 | $629;
 $631 = $630&255;
 HEAP8[(186904)>>0] = $631;
 STACKTOP = sp;return;
}
function _toggle_setlist_mode() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _debug_log(163698,$vararg_buffer);
 $1 = HEAP8[(185000)>>0]|0;
 $2 = $1&255;
 $3 = $2 ^ 1;
 $4 = $3&255;
 HEAP8[(185000)>>0] = $4;
 $5 = HEAP8[(185000)>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)==(1);
 if (!($7)) {
  HEAP8[186884] = 127;
  $27 = HEAP8[(185001)>>0]|0;
  $28 = $27&255;
  $29 = ((186627) + ($28)|0);
  $30 = HEAP8[$29>>0]|0;
  HEAP8[(185002)>>0] = $30;
  STACKTOP = sp;return;
 }
 $8 = HEAP8[186626]|0;
 $9 = $8&255;
 $10 = (($9) - 1)|0;
 $11 = $10&255;
 HEAP8[186884] = $11;
 HEAP8[(185001)>>0] = 0;
 $0 = 0;
 while(1) {
  $12 = $0;
  $13 = $12&255;
  $14 = HEAP8[186626]|0;
  $15 = $14&255;
  $16 = ($13|0)<($15|0);
  if (!($16)) {
   label = 8;
   break;
  }
  $17 = $0;
  $18 = $17&255;
  $19 = ((186627) + ($18)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = HEAP8[(185002)>>0]|0;
  $23 = $22&255;
  $24 = ($21|0)==($23|0);
  $25 = $0;
  if ($24) {
   break;
  }
  $26 = (($25) + 1)<<24>>24;
  $0 = $26;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return;
 }
 HEAP8[(185001)>>0] = $25;
 STACKTOP = sp;return;
}
function _reset_scene() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _debug_log(163686,$vararg_buffer);
 HEAP8[(185003)>>0] = 0;
 STACKTOP = sp;return;
}
function _prev_song() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP8[(185000)>>0]|0;
 $1 = $0&255;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP8[(185002)>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)>(0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  _debug_log(163663,$vararg_buffer);
  $6 = HEAP8[(185002)>>0]|0;
  $7 = (($6) + -1)<<24>>24;
  HEAP8[(185002)>>0] = $7;
  STACKTOP = sp;return;
 } else {
  $8 = HEAP8[(185001)>>0]|0;
  $9 = $8&255;
  $10 = ($9|0)>(0);
  if (!($10)) {
   STACKTOP = sp;return;
  }
  _debug_log(163676,$vararg_buffer1);
  $11 = HEAP8[(185001)>>0]|0;
  $12 = (($11) + -1)<<24>>24;
  HEAP8[(185001)>>0] = $12;
  STACKTOP = sp;return;
 }
}
function _next_song() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP8[(185000)>>0]|0;
 $1 = $0&255;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP8[(185002)>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)<(127);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  _debug_log(163640,$vararg_buffer);
  $6 = HEAP8[(185002)>>0]|0;
  $7 = (($6) + 1)<<24>>24;
  HEAP8[(185002)>>0] = $7;
  STACKTOP = sp;return;
 } else {
  $8 = HEAP8[(185001)>>0]|0;
  $9 = $8&255;
  $10 = HEAP8[186884]|0;
  $11 = $10&255;
  $12 = ($9|0)<($11|0);
  if (!($12)) {
   STACKTOP = sp;return;
  }
  _debug_log(163653,$vararg_buffer1);
  $13 = HEAP8[(185001)>>0]|0;
  $14 = (($13) + 1)<<24>>24;
  HEAP8[(185001)>>0] = $14;
  STACKTOP = sp;return;
 }
}
function _controller_handle() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = (_fsw_poll()|0);
 $0 = $9;
 $10 = $0;
 $11 = $10&65535;
 $12 = $11 & 255;
 $13 = $12&255;
 HEAP8[184984] = $13;
 $14 = $0;
 $15 = $14&65535;
 $16 = $15 >> 8;
 $17 = $16 & 255;
 $18 = $17&255;
 HEAP8[(184988)>>0] = $18;
 $19 = HEAP32[(185012)>>2]|0;
 L1: do {
  switch ($19|0) {
  case 0:  {
   $20 = HEAP8[(185048)>>0]|0;
   $21 = $20&255;
   $22 = $21 & 1;
   $23 = ($22|0)==(0);
   if ($23) {
    $24 = HEAP8[(184988)>>0]|0;
    $25 = $24&255;
    $26 = $25 & 1;
    $27 = ($26|0)==(1);
    if ($27) {
     HEAP8[186897] = -128;
    } else {
     label = 5;
    }
   } else {
    label = 5;
   }
   if ((label|0) == 5) {
    $28 = HEAP8[(185048)>>0]|0;
    $29 = $28&255;
    $30 = $29 & 1;
    $31 = ($30|0)==(1);
    if ($31) {
     $32 = HEAP8[(184988)>>0]|0;
     $33 = $32&255;
     $34 = $33 & 1;
     $35 = ($34|0)==(0);
     if ($35) {
      $36 = HEAP8[186897]|0;
      $37 = $36&255;
      $38 = $37 & 128;
      $39 = ($38|0)!=(0);
      if ($39) {
       $40 = HEAP8[(185007)>>0]|0;
       $41 = $40&255;
       $42 = $41 & 64;
       $43 = ($42|0)==(64);
       $44 = HEAP8[(185007)>>0]|0;
       $45 = $44&255;
       $46 = $45 & -65;
       $47 = $45 ^ 128;
       $48 = $43 ? $46 : $47;
       $49 = $48&255;
       HEAP8[(185007)>>0] = $49;
       _calc_fx_modified();
      }
      HEAP8[186897] = 0;
     }
    }
   }
   $50 = HEAP8[(185048)>>0]|0;
   $51 = $50&255;
   $52 = $51 & 2;
   $53 = ($52|0)==(0);
   if ($53) {
    $54 = HEAP8[(184988)>>0]|0;
    $55 = $54&255;
    $56 = $55 & 2;
    $57 = ($56|0)==(2);
    if ($57) {
     HEAP8[(186898)>>0] = -128;
    } else {
     label = 13;
    }
   } else {
    label = 13;
   }
   if ((label|0) == 13) {
    $58 = HEAP8[(185048)>>0]|0;
    $59 = $58&255;
    $60 = $59 & 2;
    $61 = ($60|0)==(2);
    if ($61) {
     $62 = HEAP8[(184988)>>0]|0;
     $63 = $62&255;
     $64 = $63 & 2;
     $65 = ($64|0)==(0);
     if ($65) {
      $66 = HEAP8[(186898)>>0]|0;
      $67 = $66&255;
      $68 = $67 & 64;
      $69 = ($68|0)==(0);
      if ($69) {
       $70 = HEAP8[(185007)>>0]|0;
       $71 = $70&255;
       $72 = $71 & 192;
       $73 = ($72|0)==(128);
       do {
        if ($73) {
         $74 = HEAP8[(185006)>>0]|0;
         $75 = $74&255;
         $76 = ($75|0)!=(0);
         if ($76) {
          $1 = (185006);
          break;
         } else {
          $1 = (186776);
          break;
         }
        } else {
         $1 = (186889);
        }
       } while(0);
       $77 = $1;
       $78 = HEAP8[$77>>0]|0;
       $79 = $78&255;
       $80 = ($79|0)>(1);
       if ($80) {
        $81 = $1;
        $82 = HEAP8[$81>>0]|0;
        $83 = (($82) + -1)<<24>>24;
        HEAP8[$81>>0] = $83;
        _calc_gain_modified();
       }
      }
      HEAP8[(186898)>>0] = 0;
     }
    }
   }
   $84 = HEAP8[(185048)>>0]|0;
   $85 = $84&255;
   $86 = $85 & 4;
   $87 = ($86|0)==(0);
   if ($87) {
    $88 = HEAP8[(184988)>>0]|0;
    $89 = $88&255;
    $90 = $89 & 4;
    $91 = ($90|0)==(4);
    if ($91) {
     HEAP8[(186899)>>0] = -128;
    } else {
     label = 27;
    }
   } else {
    label = 27;
   }
   if ((label|0) == 27) {
    $92 = HEAP8[(185048)>>0]|0;
    $93 = $92&255;
    $94 = $93 & 4;
    $95 = ($94|0)==(4);
    if ($95) {
     $96 = HEAP8[(184988)>>0]|0;
     $97 = $96&255;
     $98 = $97 & 4;
     $99 = ($98|0)==(0);
     if ($99) {
      $100 = HEAP8[(186899)>>0]|0;
      $101 = $100&255;
      $102 = $101 & 64;
      $103 = ($102|0)==(0);
      if ($103) {
       $104 = HEAP8[(185007)>>0]|0;
       $105 = $104&255;
       $106 = $105 & 192;
       $107 = ($106|0)==(128);
       do {
        if ($107) {
         $108 = HEAP8[(185006)>>0]|0;
         $109 = $108&255;
         $110 = ($109|0)!=(0);
         if ($110) {
          $2 = (185006);
          break;
         } else {
          $2 = (186776);
          break;
         }
        } else {
         $2 = (186889);
        }
       } while(0);
       $111 = $2;
       $112 = HEAP8[$111>>0]|0;
       $113 = $112&255;
       $114 = ($113|0)<(127);
       if ($114) {
        $115 = $2;
        $116 = HEAP8[$115>>0]|0;
        $117 = (($116) + 1)<<24>>24;
        HEAP8[$115>>0] = $117;
        _calc_gain_modified();
       }
      }
      HEAP8[(186899)>>0] = 0;
     }
    }
   }
   $118 = HEAP8[(185048)>>0]|0;
   $119 = $118&255;
   $120 = $119 & 8;
   $121 = ($120|0)==(0);
   if ($121) {
    $122 = HEAP8[(184988)>>0]|0;
    $123 = $122&255;
    $124 = $123 & 8;
    $125 = ($124|0)==(8);
    if ($125) {
     HEAP8[(186900)>>0] = -128;
    } else {
     label = 41;
    }
   } else {
    label = 41;
   }
   if ((label|0) == 41) {
    $126 = HEAP8[(185048)>>0]|0;
    $127 = $126&255;
    $128 = $127 & 8;
    $129 = ($128|0)==(8);
    if ($129) {
     $130 = HEAP8[(184988)>>0]|0;
     $131 = $130&255;
     $132 = $131 & 8;
     $133 = ($132|0)==(0);
     if ($133) {
      $134 = HEAP8[(186900)>>0]|0;
      $135 = $134&255;
      $136 = $135 & 64;
      $137 = ($136|0)==(0);
      if ($137) {
       $138 = HEAP8[(185008)>>0]|0;
       $3 = $138;
       $139 = $3;
       $140 = $139&255;
       $141 = ($140|0)>(0);
       if ($141) {
        $142 = $3;
        $143 = (($142) + -1)<<24>>24;
        $3 = $143;
        $144 = $3;
        HEAP8[(185008)>>0] = $144;
        _calc_volume_modified();
       }
      }
      HEAP8[(186900)>>0] = 0;
     }
    }
   }
   $145 = HEAP8[(185048)>>0]|0;
   $146 = $145&255;
   $147 = $146 & 16;
   $148 = ($147|0)==(0);
   if ($148) {
    $149 = HEAP8[(184988)>>0]|0;
    $150 = $149&255;
    $151 = $150 & 16;
    $152 = ($151|0)==(16);
    if ($152) {
     HEAP8[(186901)>>0] = -128;
    } else {
     label = 50;
    }
   } else {
    label = 50;
   }
   if ((label|0) == 50) {
    $153 = HEAP8[(185048)>>0]|0;
    $154 = $153&255;
    $155 = $154 & 16;
    $156 = ($155|0)==(16);
    if ($156) {
     $157 = HEAP8[(184988)>>0]|0;
     $158 = $157&255;
     $159 = $158 & 16;
     $160 = ($159|0)==(0);
     if ($160) {
      $161 = HEAP8[(186901)>>0]|0;
      $162 = $161&255;
      $163 = $162 & 64;
      $164 = ($163|0)==(0);
      if ($164) {
       $165 = HEAP8[(185008)>>0]|0;
       $4 = $165;
       $166 = $4;
       $167 = $166&255;
       $168 = ($167|0)<(127);
       if ($168) {
        $169 = $4;
        $170 = (($169) + 1)<<24>>24;
        $4 = $170;
        $171 = $4;
        HEAP8[(185008)>>0] = $171;
        _calc_volume_modified();
       }
      }
      HEAP8[(186901)>>0] = 0;
     }
    }
   }
   $172 = HEAP8[(185048)>>0]|0;
   $173 = $172&255;
   $174 = $173 & 32;
   $175 = ($174|0)==(0);
   if ($175) {
    $176 = HEAP8[(184988)>>0]|0;
    $177 = $176&255;
    $178 = $177 & 32;
    $179 = ($178|0)==(32);
    if ($179) {
     HEAP8[(186902)>>0] = -128;
     break L1;
    }
   }
   $180 = HEAP8[(185048)>>0]|0;
   $181 = $180&255;
   $182 = $181 & 32;
   $183 = ($182|0)==(32);
   if ($183) {
    $184 = HEAP8[(184988)>>0]|0;
    $185 = $184&255;
    $186 = $185 & 32;
    $187 = ($186|0)==(0);
    if ($187) {
     $188 = HEAP8[(186902)>>0]|0;
     $189 = $188&255;
     $190 = $189 & 128;
     $191 = ($190|0)!=(0);
     if ($191) {
      HEAP32[(185012)>>2] = 1;
     }
     HEAP8[(186902)>>0] = 0;
    }
   }
   break;
  }
  case 1:  {
   $192 = HEAP8[(185048)>>0]|0;
   $193 = $192&255;
   $194 = $193 & 1;
   $195 = ($194|0)==(0);
   if ($195) {
    $196 = HEAP8[(184988)>>0]|0;
    $197 = $196&255;
    $198 = $197 & 1;
    $199 = ($198|0)==(1);
    if ($199) {
     HEAP8[186897] = -128;
     $200 = HEAP8[(185007)>>0]|0;
     $201 = $200&255;
     $202 = $201 ^ 1;
     $203 = $202&255;
     HEAP8[(185007)>>0] = $203;
     _calc_fx_modified();
    } else {
     label = 67;
    }
   } else {
    label = 67;
   }
   if ((label|0) == 67) {
    $204 = HEAP8[(185048)>>0]|0;
    $205 = $204&255;
    $206 = $205 & 1;
    $207 = ($206|0)==(1);
    if ($207) {
     $208 = HEAP8[(184988)>>0]|0;
     $209 = $208&255;
     $210 = $209 & 1;
     $211 = ($210|0)==(0);
     if ($211) {
      HEAP8[186897] = 0;
     }
    }
   }
   $212 = HEAP8[(185048)>>0]|0;
   $213 = $212&255;
   $214 = $213 & 2;
   $215 = ($214|0)==(0);
   if ($215) {
    $216 = HEAP8[(184988)>>0]|0;
    $217 = $216&255;
    $218 = $217 & 2;
    $219 = ($218|0)==(2);
    if ($219) {
     HEAP8[(186898)>>0] = -128;
     $220 = HEAP8[(185007)>>0]|0;
     $221 = $220&255;
     $222 = $221 ^ 2;
     $223 = $222&255;
     HEAP8[(185007)>>0] = $223;
     _calc_fx_modified();
    } else {
     label = 73;
    }
   } else {
    label = 73;
   }
   if ((label|0) == 73) {
    $224 = HEAP8[(185048)>>0]|0;
    $225 = $224&255;
    $226 = $225 & 2;
    $227 = ($226|0)==(2);
    if ($227) {
     $228 = HEAP8[(184988)>>0]|0;
     $229 = $228&255;
     $230 = $229 & 2;
     $231 = ($230|0)==(0);
     if ($231) {
      HEAP8[(186898)>>0] = 0;
     }
    }
   }
   $232 = HEAP8[(185048)>>0]|0;
   $233 = $232&255;
   $234 = $233 & 4;
   $235 = ($234|0)==(0);
   if ($235) {
    $236 = HEAP8[(184988)>>0]|0;
    $237 = $236&255;
    $238 = $237 & 4;
    $239 = ($238|0)==(4);
    if ($239) {
     HEAP8[(186899)>>0] = -128;
     $240 = HEAP8[(185007)>>0]|0;
     $241 = $240&255;
     $242 = $241 ^ 4;
     $243 = $242&255;
     HEAP8[(185007)>>0] = $243;
     _calc_fx_modified();
    } else {
     label = 79;
    }
   } else {
    label = 79;
   }
   if ((label|0) == 79) {
    $244 = HEAP8[(185048)>>0]|0;
    $245 = $244&255;
    $246 = $245 & 4;
    $247 = ($246|0)==(4);
    if ($247) {
     $248 = HEAP8[(184988)>>0]|0;
     $249 = $248&255;
     $250 = $249 & 4;
     $251 = ($250|0)==(0);
     if ($251) {
      HEAP8[(186899)>>0] = 0;
     }
    }
   }
   $252 = HEAP8[(185048)>>0]|0;
   $253 = $252&255;
   $254 = $253 & 8;
   $255 = ($254|0)==(0);
   if ($255) {
    $256 = HEAP8[(184988)>>0]|0;
    $257 = $256&255;
    $258 = $257 & 8;
    $259 = ($258|0)==(8);
    if ($259) {
     HEAP8[(186900)>>0] = -128;
     $260 = HEAP8[(185007)>>0]|0;
     $261 = $260&255;
     $262 = $261 ^ 8;
     $263 = $262&255;
     HEAP8[(185007)>>0] = $263;
     _calc_fx_modified();
    } else {
     label = 85;
    }
   } else {
    label = 85;
   }
   if ((label|0) == 85) {
    $264 = HEAP8[(185048)>>0]|0;
    $265 = $264&255;
    $266 = $265 & 8;
    $267 = ($266|0)==(8);
    if ($267) {
     $268 = HEAP8[(184988)>>0]|0;
     $269 = $268&255;
     $270 = $269 & 8;
     $271 = ($270|0)==(0);
     if ($271) {
      HEAP8[(186900)>>0] = 0;
     }
    }
   }
   $272 = HEAP8[(185048)>>0]|0;
   $273 = $272&255;
   $274 = $273 & 16;
   $275 = ($274|0)==(0);
   if ($275) {
    $276 = HEAP8[(184988)>>0]|0;
    $277 = $276&255;
    $278 = $277 & 16;
    $279 = ($278|0)==(16);
    if ($279) {
     HEAP8[(186901)>>0] = -128;
     $280 = HEAP8[(185007)>>0]|0;
     $281 = $280&255;
     $282 = $281 ^ 16;
     $283 = $282&255;
     HEAP8[(185007)>>0] = $283;
     _calc_fx_modified();
    } else {
     label = 91;
    }
   } else {
    label = 91;
   }
   if ((label|0) == 91) {
    $284 = HEAP8[(185048)>>0]|0;
    $285 = $284&255;
    $286 = $285 & 16;
    $287 = ($286|0)==(16);
    if ($287) {
     $288 = HEAP8[(184988)>>0]|0;
     $289 = $288&255;
     $290 = $289 & 16;
     $291 = ($290|0)==(0);
     if ($291) {
      HEAP8[(186901)>>0] = 0;
     }
    }
   }
   $292 = HEAP8[(185048)>>0]|0;
   $293 = $292&255;
   $294 = $293 & 32;
   $295 = ($294|0)==(0);
   if ($295) {
    $296 = HEAP8[(184988)>>0]|0;
    $297 = $296&255;
    $298 = $297 & 32;
    $299 = ($298|0)==(32);
    if ($299) {
     HEAP8[(186902)>>0] = -128;
     break L1;
    }
   }
   $300 = HEAP8[(185048)>>0]|0;
   $301 = $300&255;
   $302 = $301 & 32;
   $303 = ($302|0)==(32);
   if ($303) {
    $304 = HEAP8[(184988)>>0]|0;
    $305 = $304&255;
    $306 = $305 & 32;
    $307 = ($306|0)==(0);
    if ($307) {
     $308 = HEAP8[(186902)>>0]|0;
     $309 = $308&255;
     $310 = $309 & 128;
     $311 = ($310|0)!=(0);
     if ($311) {
      HEAP32[(185012)>>2] = 0;
     }
     HEAP8[(186902)>>0] = 0;
    }
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $312 = HEAP32[(185020)>>2]|0;
 L136: do {
  switch ($312|0) {
  case 0:  {
   $313 = HEAP8[185044]|0;
   $314 = $313&255;
   $315 = $314 & 1;
   $316 = ($315|0)==(0);
   if ($316) {
    $317 = HEAP8[184984]|0;
    $318 = $317&255;
    $319 = $318 & 1;
    $320 = ($319|0)==(1);
    if ($320) {
     HEAP8[(186905)>>0] = -128;
    } else {
     label = 106;
    }
   } else {
    label = 106;
   }
   if ((label|0) == 106) {
    $321 = HEAP8[185044]|0;
    $322 = $321&255;
    $323 = $322 & 1;
    $324 = ($323|0)==(1);
    if ($324) {
     $325 = HEAP8[184984]|0;
     $326 = $325&255;
     $327 = $326 & 1;
     $328 = ($327|0)==(0);
     if ($328) {
      $329 = HEAP8[(186905)>>0]|0;
      $330 = $329&255;
      $331 = $330 & 128;
      $332 = ($331|0)!=(0);
      if ($332) {
       $333 = HEAP8[(185010)>>0]|0;
       $334 = $333&255;
       $335 = $334 & 64;
       $336 = ($335|0)==(64);
       $337 = HEAP8[(185010)>>0]|0;
       $338 = $337&255;
       $339 = $338 & -65;
       $340 = $338 ^ 128;
       $341 = $336 ? $339 : $340;
       $342 = $341&255;
       HEAP8[(185010)>>0] = $342;
       _calc_fx_modified();
      }
      HEAP8[(186905)>>0] = 0;
     }
    }
   }
   $343 = HEAP8[185044]|0;
   $344 = $343&255;
   $345 = $344 & 2;
   $346 = ($345|0)==(0);
   if ($346) {
    $347 = HEAP8[184984]|0;
    $348 = $347&255;
    $349 = $348 & 2;
    $350 = ($349|0)==(2);
    if ($350) {
     HEAP8[(186906)>>0] = -128;
    } else {
     label = 114;
    }
   } else {
    label = 114;
   }
   if ((label|0) == 114) {
    $351 = HEAP8[185044]|0;
    $352 = $351&255;
    $353 = $352 & 2;
    $354 = ($353|0)==(2);
    if ($354) {
     $355 = HEAP8[184984]|0;
     $356 = $355&255;
     $357 = $356 & 2;
     $358 = ($357|0)==(0);
     if ($358) {
      $359 = HEAP8[(186906)>>0]|0;
      $360 = $359&255;
      $361 = $360 & 64;
      $362 = ($361|0)==(0);
      if ($362) {
       $363 = HEAP8[(185010)>>0]|0;
       $364 = $363&255;
       $365 = $364 & 192;
       $366 = ($365|0)==(128);
       do {
        if ($366) {
         $367 = HEAP8[(185009)>>0]|0;
         $368 = $367&255;
         $369 = ($368|0)!=(0);
         if ($369) {
          $5 = (185009);
          break;
         } else {
          $5 = (186777);
          break;
         }
        } else {
         $5 = (186895);
        }
       } while(0);
       $370 = $5;
       $371 = HEAP8[$370>>0]|0;
       $372 = $371&255;
       $373 = ($372|0)>(1);
       if ($373) {
        $374 = $5;
        $375 = HEAP8[$374>>0]|0;
        $376 = (($375) + -1)<<24>>24;
        HEAP8[$374>>0] = $376;
        _calc_gain_modified();
       }
      }
      HEAP8[(186906)>>0] = 0;
     }
    }
   }
   $377 = HEAP8[185044]|0;
   $378 = $377&255;
   $379 = $378 & 4;
   $380 = ($379|0)==(0);
   if ($380) {
    $381 = HEAP8[184984]|0;
    $382 = $381&255;
    $383 = $382 & 4;
    $384 = ($383|0)==(4);
    if ($384) {
     HEAP8[(186907)>>0] = -128;
    } else {
     label = 128;
    }
   } else {
    label = 128;
   }
   if ((label|0) == 128) {
    $385 = HEAP8[185044]|0;
    $386 = $385&255;
    $387 = $386 & 4;
    $388 = ($387|0)==(4);
    if ($388) {
     $389 = HEAP8[184984]|0;
     $390 = $389&255;
     $391 = $390 & 4;
     $392 = ($391|0)==(0);
     if ($392) {
      $393 = HEAP8[(186907)>>0]|0;
      $394 = $393&255;
      $395 = $394 & 64;
      $396 = ($395|0)==(0);
      if ($396) {
       $397 = HEAP8[(185010)>>0]|0;
       $398 = $397&255;
       $399 = $398 & 192;
       $400 = ($399|0)==(128);
       do {
        if ($400) {
         $401 = HEAP8[(185009)>>0]|0;
         $402 = $401&255;
         $403 = ($402|0)!=(0);
         if ($403) {
          $6 = (185009);
          break;
         } else {
          $6 = (186777);
          break;
         }
        } else {
         $6 = (186895);
        }
       } while(0);
       $404 = $6;
       $405 = HEAP8[$404>>0]|0;
       $406 = $405&255;
       $407 = ($406|0)<(127);
       if ($407) {
        $408 = $6;
        $409 = HEAP8[$408>>0]|0;
        $410 = (($409) + 1)<<24>>24;
        HEAP8[$408>>0] = $410;
        _calc_gain_modified();
       }
      }
      HEAP8[(186907)>>0] = 0;
     }
    }
   }
   $411 = HEAP8[185044]|0;
   $412 = $411&255;
   $413 = $412 & 8;
   $414 = ($413|0)==(0);
   if ($414) {
    $415 = HEAP8[184984]|0;
    $416 = $415&255;
    $417 = $416 & 8;
    $418 = ($417|0)==(8);
    if ($418) {
     HEAP8[(186908)>>0] = -128;
    } else {
     label = 142;
    }
   } else {
    label = 142;
   }
   if ((label|0) == 142) {
    $419 = HEAP8[185044]|0;
    $420 = $419&255;
    $421 = $420 & 8;
    $422 = ($421|0)==(8);
    if ($422) {
     $423 = HEAP8[184984]|0;
     $424 = $423&255;
     $425 = $424 & 8;
     $426 = ($425|0)==(0);
     if ($426) {
      $427 = HEAP8[(186908)>>0]|0;
      $428 = $427&255;
      $429 = $428 & 64;
      $430 = ($429|0)==(0);
      if ($430) {
       $431 = HEAP8[(185011)>>0]|0;
       $7 = $431;
       $432 = $7;
       $433 = $432&255;
       $434 = ($433|0)>(0);
       if ($434) {
        $435 = $7;
        $436 = (($435) + -1)<<24>>24;
        $7 = $436;
        $437 = $7;
        HEAP8[(185011)>>0] = $437;
        _calc_volume_modified();
       }
      }
      HEAP8[(186908)>>0] = 0;
     }
    }
   }
   $438 = HEAP8[185044]|0;
   $439 = $438&255;
   $440 = $439 & 16;
   $441 = ($440|0)==(0);
   if ($441) {
    $442 = HEAP8[184984]|0;
    $443 = $442&255;
    $444 = $443 & 16;
    $445 = ($444|0)==(16);
    if ($445) {
     HEAP8[(186909)>>0] = -128;
    } else {
     label = 151;
    }
   } else {
    label = 151;
   }
   if ((label|0) == 151) {
    $446 = HEAP8[185044]|0;
    $447 = $446&255;
    $448 = $447 & 16;
    $449 = ($448|0)==(16);
    if ($449) {
     $450 = HEAP8[184984]|0;
     $451 = $450&255;
     $452 = $451 & 16;
     $453 = ($452|0)==(0);
     if ($453) {
      $454 = HEAP8[(186909)>>0]|0;
      $455 = $454&255;
      $456 = $455 & 64;
      $457 = ($456|0)==(0);
      if ($457) {
       $458 = HEAP8[(185011)>>0]|0;
       $8 = $458;
       $459 = $8;
       $460 = $459&255;
       $461 = ($460|0)<(127);
       if ($461) {
        $462 = $8;
        $463 = (($462) + 1)<<24>>24;
        $8 = $463;
        $464 = $8;
        HEAP8[(185011)>>0] = $464;
        _calc_volume_modified();
       }
      }
      HEAP8[(186909)>>0] = 0;
     }
    }
   }
   $465 = HEAP8[185044]|0;
   $466 = $465&255;
   $467 = $466 & 32;
   $468 = ($467|0)==(0);
   if ($468) {
    $469 = HEAP8[184984]|0;
    $470 = $469&255;
    $471 = $470 & 32;
    $472 = ($471|0)==(32);
    if ($472) {
     HEAP8[(186910)>>0] = -128;
     break L136;
    }
   }
   $473 = HEAP8[185044]|0;
   $474 = $473&255;
   $475 = $474 & 32;
   $476 = ($475|0)==(32);
   if ($476) {
    $477 = HEAP8[184984]|0;
    $478 = $477&255;
    $479 = $478 & 32;
    $480 = ($479|0)==(0);
    if ($480) {
     $481 = HEAP8[(186910)>>0]|0;
     $482 = $481&255;
     $483 = $482 & 64;
     $484 = ($483|0)==(0);
     if ($484) {
      HEAP32[(185020)>>2] = 1;
     }
     HEAP8[(186910)>>0] = 0;
    }
   }
   break;
  }
  case 1:  {
   $485 = HEAP8[185044]|0;
   $486 = $485&255;
   $487 = $486 & 1;
   $488 = ($487|0)==(0);
   if ($488) {
    $489 = HEAP8[184984]|0;
    $490 = $489&255;
    $491 = $490 & 1;
    $492 = ($491|0)==(1);
    if ($492) {
     HEAP8[(186905)>>0] = -128;
     $493 = HEAP8[(185010)>>0]|0;
     $494 = $493&255;
     $495 = $494 ^ 1;
     $496 = $495&255;
     HEAP8[(185010)>>0] = $496;
     _calc_fx_modified();
    } else {
     label = 168;
    }
   } else {
    label = 168;
   }
   if ((label|0) == 168) {
    $497 = HEAP8[185044]|0;
    $498 = $497&255;
    $499 = $498 & 1;
    $500 = ($499|0)==(1);
    if ($500) {
     $501 = HEAP8[184984]|0;
     $502 = $501&255;
     $503 = $502 & 1;
     $504 = ($503|0)==(0);
     if ($504) {
      HEAP8[(186905)>>0] = 0;
     }
    }
   }
   $505 = HEAP8[185044]|0;
   $506 = $505&255;
   $507 = $506 & 2;
   $508 = ($507|0)==(0);
   if ($508) {
    $509 = HEAP8[184984]|0;
    $510 = $509&255;
    $511 = $510 & 2;
    $512 = ($511|0)==(2);
    if ($512) {
     HEAP8[(186906)>>0] = -128;
     $513 = HEAP8[(185010)>>0]|0;
     $514 = $513&255;
     $515 = $514 ^ 2;
     $516 = $515&255;
     HEAP8[(185010)>>0] = $516;
     _calc_fx_modified();
    } else {
     label = 174;
    }
   } else {
    label = 174;
   }
   if ((label|0) == 174) {
    $517 = HEAP8[185044]|0;
    $518 = $517&255;
    $519 = $518 & 2;
    $520 = ($519|0)==(2);
    if ($520) {
     $521 = HEAP8[184984]|0;
     $522 = $521&255;
     $523 = $522 & 2;
     $524 = ($523|0)==(0);
     if ($524) {
      HEAP8[(186906)>>0] = 0;
     }
    }
   }
   $525 = HEAP8[185044]|0;
   $526 = $525&255;
   $527 = $526 & 4;
   $528 = ($527|0)==(0);
   if ($528) {
    $529 = HEAP8[184984]|0;
    $530 = $529&255;
    $531 = $530 & 4;
    $532 = ($531|0)==(4);
    if ($532) {
     HEAP8[(186907)>>0] = -128;
     $533 = HEAP8[(185010)>>0]|0;
     $534 = $533&255;
     $535 = $534 ^ 4;
     $536 = $535&255;
     HEAP8[(185010)>>0] = $536;
     _calc_fx_modified();
    } else {
     label = 180;
    }
   } else {
    label = 180;
   }
   if ((label|0) == 180) {
    $537 = HEAP8[185044]|0;
    $538 = $537&255;
    $539 = $538 & 4;
    $540 = ($539|0)==(4);
    if ($540) {
     $541 = HEAP8[184984]|0;
     $542 = $541&255;
     $543 = $542 & 4;
     $544 = ($543|0)==(0);
     if ($544) {
      HEAP8[(186907)>>0] = 0;
     }
    }
   }
   $545 = HEAP8[185044]|0;
   $546 = $545&255;
   $547 = $546 & 8;
   $548 = ($547|0)==(0);
   if ($548) {
    $549 = HEAP8[184984]|0;
    $550 = $549&255;
    $551 = $550 & 8;
    $552 = ($551|0)==(8);
    if ($552) {
     HEAP8[(186908)>>0] = -128;
     $553 = HEAP8[(185010)>>0]|0;
     $554 = $553&255;
     $555 = $554 ^ 8;
     $556 = $555&255;
     HEAP8[(185010)>>0] = $556;
     _calc_fx_modified();
    } else {
     label = 186;
    }
   } else {
    label = 186;
   }
   if ((label|0) == 186) {
    $557 = HEAP8[185044]|0;
    $558 = $557&255;
    $559 = $558 & 8;
    $560 = ($559|0)==(8);
    if ($560) {
     $561 = HEAP8[184984]|0;
     $562 = $561&255;
     $563 = $562 & 8;
     $564 = ($563|0)==(0);
     if ($564) {
      HEAP8[(186908)>>0] = 0;
     }
    }
   }
   $565 = HEAP8[185044]|0;
   $566 = $565&255;
   $567 = $566 & 16;
   $568 = ($567|0)==(0);
   if ($568) {
    $569 = HEAP8[184984]|0;
    $570 = $569&255;
    $571 = $570 & 16;
    $572 = ($571|0)==(16);
    if ($572) {
     HEAP8[(186909)>>0] = -128;
     $573 = HEAP8[(185010)>>0]|0;
     $574 = $573&255;
     $575 = $574 ^ 16;
     $576 = $575&255;
     HEAP8[(185010)>>0] = $576;
     _calc_fx_modified();
    } else {
     label = 192;
    }
   } else {
    label = 192;
   }
   if ((label|0) == 192) {
    $577 = HEAP8[185044]|0;
    $578 = $577&255;
    $579 = $578 & 16;
    $580 = ($579|0)==(16);
    if ($580) {
     $581 = HEAP8[184984]|0;
     $582 = $581&255;
     $583 = $582 & 16;
     $584 = ($583|0)==(0);
     if ($584) {
      HEAP8[(186909)>>0] = 0;
     }
    }
   }
   $585 = HEAP8[185044]|0;
   $586 = $585&255;
   $587 = $586 & 32;
   $588 = ($587|0)==(0);
   if ($588) {
    $589 = HEAP8[184984]|0;
    $590 = $589&255;
    $591 = $590 & 32;
    $592 = ($591|0)==(32);
    if ($592) {
     HEAP8[(186910)>>0] = -128;
     break L136;
    }
   }
   $593 = HEAP8[185044]|0;
   $594 = $593&255;
   $595 = $594 & 32;
   $596 = ($595|0)==(32);
   if ($596) {
    $597 = HEAP8[184984]|0;
    $598 = $597&255;
    $599 = $598 & 32;
    $600 = ($599|0)==(0);
    if ($600) {
     $601 = HEAP8[(186910)>>0]|0;
     $602 = $601&255;
     $603 = $602 & 128;
     $604 = ($603|0)!=(0);
     if ($604) {
      HEAP32[(185020)>>2] = 0;
     }
     HEAP8[(186910)>>0] = 0;
    }
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $605 = HEAP8[185044]|0;
 $606 = $605&255;
 $607 = $606 & 64;
 $608 = ($607|0)==(0);
 if ($608) {
  $609 = HEAP8[184984]|0;
  $610 = $609&255;
  $611 = $610 & 64;
  $612 = ($611|0)==(64);
  if ($612) {
   HEAP8[(186911)>>0] = -128;
   _tap_tempo();
  } else {
   label = 206;
  }
 } else {
  label = 206;
 }
 if ((label|0) == 206) {
  $613 = HEAP8[185044]|0;
  $614 = $613&255;
  $615 = $614 & 64;
  $616 = ($615|0)==(64);
  if ($616) {
   $617 = HEAP8[184984]|0;
   $618 = $617&255;
   $619 = $618 & 64;
   $620 = ($619|0)==(0);
   if ($620) {
    HEAP8[(186911)>>0] = 0;
   }
  }
 }
 $621 = HEAP8[185044]|0;
 $622 = $621&255;
 $623 = $622 & 128;
 $624 = ($623|0)==(0);
 if ($624) {
  $625 = HEAP8[184984]|0;
  $626 = $625&255;
  $627 = $626 & 128;
  $628 = ($627|0)==(128);
  if ($628) {
   HEAP8[(186912)>>0] = -128;
   _next_scene();
  } else {
   label = 212;
  }
 } else {
  label = 212;
 }
 if ((label|0) == 212) {
  $629 = HEAP8[185044]|0;
  $630 = $629&255;
  $631 = $630 & 128;
  $632 = ($631|0)==(128);
  if ($632) {
   $633 = HEAP8[184984]|0;
   $634 = $633&255;
   $635 = $634 & 128;
   $636 = ($635|0)==(0);
   if ($636) {
    HEAP8[(186912)>>0] = 0;
   }
  }
 }
 $637 = HEAP8[(185048)>>0]|0;
 $638 = $637&255;
 $639 = $638 & 64;
 $640 = ($639|0)==(0);
 if ($640) {
  $641 = HEAP8[(184988)>>0]|0;
  $642 = $641&255;
  $643 = $642 & 64;
  $644 = ($643|0)==(64);
  if ($644) {
   _prev_song();
   HEAP8[(186903)>>0] = -128;
  } else {
   label = 218;
  }
 } else {
  label = 218;
 }
 if ((label|0) == 218) {
  $645 = HEAP8[(185048)>>0]|0;
  $646 = $645&255;
  $647 = $646 & 64;
  $648 = ($647|0)==(64);
  if ($648) {
   $649 = HEAP8[(184988)>>0]|0;
   $650 = $649&255;
   $651 = $650 & 64;
   $652 = ($651|0)==(0);
   if ($652) {
    HEAP8[(186903)>>0] = 0;
   }
  }
 }
 $653 = HEAP8[(185048)>>0]|0;
 $654 = $653&255;
 $655 = $654 & 128;
 $656 = ($655|0)==(0);
 if ($656) {
  $657 = HEAP8[(184988)>>0]|0;
  $658 = $657&255;
  $659 = $658 & 128;
  $660 = ($659|0)==(128);
  if ($660) {
   _next_song();
   HEAP8[(186904)>>0] = -128;
  } else {
   label = 224;
  }
 } else {
  label = 224;
 }
 if ((label|0) == 224) {
  $661 = HEAP8[(185048)>>0]|0;
  $662 = $661&255;
  $663 = $662 & 128;
  $664 = ($663|0)==(128);
  if ($664) {
   $665 = HEAP8[(184988)>>0]|0;
   $666 = $665&255;
   $667 = $666 & 128;
   $668 = ($667|0)==(0);
   if ($668) {
    HEAP8[(186904)>>0] = 0;
   }
  }
 }
 $669 = HEAP8[(185000)>>0]|0;
 $670 = $669&255;
 $671 = HEAP8[(185060)>>0]|0;
 $672 = $671&255;
 $673 = ($670|0)!=($672|0);
 if (!($673)) {
  $674 = HEAP8[(185001)>>0]|0;
  $675 = $674&255;
  $676 = HEAP8[(185061)>>0]|0;
  $677 = $676&255;
  $678 = ($675|0)!=($677|0);
  if (!($678)) {
   $679 = HEAP8[(185002)>>0]|0;
   $680 = $679&255;
   $681 = HEAP8[(185062)>>0]|0;
   $682 = $681&255;
   $683 = ($680|0)!=($682|0);
   if (!($683)) {
    $684 = HEAP8[(185003)>>0]|0;
    $685 = $684&255;
    $686 = HEAP8[(185063)>>0]|0;
    $687 = $686&255;
    $688 = ($685|0)!=($687|0);
    if (!($688)) {
     _calc_midi();
     _calc_leds();
     dest=185044; src=184984; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     STACKTOP = sp;return;
    }
    $689 = HEAP8[(185063)>>0]|0;
    $690 = $689&255;
    $691 = ((186792) + (($690*6)|0)|0);
    ;HEAP8[$691>>0]=HEAP8[(185006)>>0]|0;HEAP8[$691+1>>0]=HEAP8[(185006)+1>>0]|0;HEAP8[$691+2>>0]=HEAP8[(185006)+2>>0]|0;
    $692 = HEAP8[(185063)>>0]|0;
    $693 = $692&255;
    $694 = ((186792) + (($693*6)|0)|0);
    $695 = ((($694)) + 3|0);
    ;HEAP8[$695>>0]=HEAP8[(185009)>>0]|0;HEAP8[$695+1>>0]=HEAP8[(185009)+1>>0]|0;HEAP8[$695+2>>0]=HEAP8[(185009)+2>>0]|0;
    _load_scene();
    _calc_midi();
    _calc_leds();
    dest=185044; src=184984; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    STACKTOP = sp;return;
   }
  }
 }
 _load_program();
 _load_scene();
 _calc_midi();
 _calc_leds();
 dest=185044; src=184984; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _tap_tempo() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[186882]|0;
 $1 = $0&255;
 $2 = $1 ^ 127;
 $3 = $2&255;
 HEAP8[186882] = $3;
 $4 = HEAP8[186882]|0;
 _midi_send_cmd2_impl(-78,14,($4|0));
 return;
}
function _next_scene() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP8[(185003)>>0]|0;
 $1 = $0&255;
 $2 = ($1|0)<(14);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 _debug_log(164134,$vararg_buffer);
 $3 = HEAP8[(185003)>>0]|0;
 $4 = (($3) + 1)<<24>>24;
 HEAP8[(185003)>>0] = $4;
 STACKTOP = sp;return;
}
function _calc_midi() {
 var $$sink1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0;
 var $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer54 = 0, $vararg_buffer58 = 0, $vararg_buffer62 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr27 = 0, $vararg_ptr43 = 0, $vararg_ptr53 = 0, $vararg_ptr57 = 0, $vararg_ptr61 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $vararg_buffer62 = sp + 152|0;
 $vararg_buffer58 = sp + 144|0;
 $vararg_buffer54 = sp + 136|0;
 $vararg_buffer50 = sp + 128|0;
 $vararg_buffer47 = sp + 120|0;
 $vararg_buffer44 = sp + 112|0;
 $vararg_buffer40 = sp + 104|0;
 $vararg_buffer37 = sp + 96|0;
 $vararg_buffer34 = sp + 88|0;
 $vararg_buffer31 = sp + 80|0;
 $vararg_buffer28 = sp + 72|0;
 $vararg_buffer24 = sp + 64|0;
 $vararg_buffer21 = sp + 56|0;
 $vararg_buffer18 = sp + 48|0;
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = 0;
 $5 = 1;
 $11 = HEAP8[(185004)>>0]|0;
 $12 = $11&255;
 $13 = HEAP8[(185064)>>0]|0;
 $14 = $13&255;
 $15 = ($12|0)!=($14|0);
 if ($15) {
  $16 = HEAP8[(185004)>>0]|0;
  $17 = $16&255;
  HEAP32[$vararg_buffer>>2] = $17;
  _debug_log(163718,$vararg_buffer);
  $18 = HEAP8[(185004)>>0]|0;
  _midi_send_cmd1_impl(-62,($18|0));
  _midi_invalidate();
 }
 $19 = HEAP8[(185000)>>0]|0;
 $20 = $19&255;
 $21 = HEAP8[(185060)>>0]|0;
 $22 = $21&255;
 $23 = ($20|0)!=($22|0);
 if ($23) {
  $0 = 1;
 }
 $7 = 0;
 while(1) {
  $24 = $7;
  $25 = $24&255;
  $26 = ($25|0)<(2);
  if (!($26)) {
   break;
  }
  $27 = $7;
  $28 = $27&255;
  $29 = ((185006) + (($28*3)|0)|0);
  $30 = ((($29)) + 1|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $32 & 128;
  $34 = $33&255;
  $1 = $34;
  $35 = $7;
  $36 = $35&255;
  $37 = ((185006) + (($36*3)|0)|0);
  $38 = ((($37)) + 1|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = $40 & 64;
  $42 = $41&255;
  $3 = $42;
  $43 = $7;
  $44 = $43&255;
  $45 = ((185066) + (($44*3)|0)|0);
  $46 = ((($45)) + 1|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $48 & 128;
  $50 = $49&255;
  $2 = $50;
  $51 = $7;
  $52 = $51&255;
  $53 = ((185066) + (($52*3)|0)|0);
  $54 = ((($53)) + 1|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = $56 & 64;
  $58 = $57&255;
  $4 = $58;
  $59 = $3;
  $60 = $59&255;
  $61 = ($60|0)!=(0);
  do {
   if ($61) {
    $62 = $7;
    $63 = $62&255;
    $64 = (186885 + (($63*6)|0)|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65&255;
    $67 = ($66|0)!=(0);
    if ($67) {
     $68 = $7;
     $69 = $68&255;
     $70 = (186885 + (($69*6)|0)|0);
     HEAP8[$70>>0] = 0;
     $71 = $7;
     $72 = $71&255;
     $73 = (($72) + 1)|0;
     HEAP32[$vararg_buffer2>>2] = $73;
     _debug_log(163741,$vararg_buffer2);
     $74 = $7;
     $75 = $74&255;
     $76 = (37 + ($75))|0;
     $77 = $76&255;
     $78 = $7;
     $79 = $78&255;
     $80 = (186885 + (($79*6)|0)|0);
     $81 = HEAP8[$80>>0]|0;
     _midi_send_cmd2_impl(-78,($77|0),($81|0));
     $0 = 1;
    }
    $82 = $7;
    $83 = $82&255;
    $84 = (186885 + (($83*6)|0)|0);
    $85 = ((($84)) + 2|0);
    $86 = HEAP8[$85>>0]|0;
    $87 = $86&255;
    $88 = ($87|0)!=(0);
    if ($88) {
     $89 = $7;
     $90 = $89&255;
     $91 = (186885 + (($90*6)|0)|0);
     $92 = ((($91)) + 2|0);
     HEAP8[$92>>0] = 0;
     $93 = $7;
     $94 = $93&255;
     $95 = (($94) + 1)|0;
     HEAP32[$vararg_buffer5>>2] = $95;
     _debug_log(163751,$vararg_buffer5);
     $96 = $7;
     $97 = $96&255;
     $98 = (102 + ($97))|0;
     $99 = $98&255;
     $100 = $7;
     $101 = $100&255;
     $102 = (186885 + (($101*6)|0)|0);
     $103 = ((($102)) + 2|0);
     $104 = HEAP8[$103>>0]|0;
     _midi_send_cmd2_impl(-78,($99|0),($104|0));
     $0 = 1;
    }
    $105 = $7;
    $106 = $105&255;
    $107 = (186885 + (($106*6)|0)|0);
    $108 = ((($107)) + 3|0);
    $109 = HEAP8[$108>>0]|0;
    $110 = $109&255;
    $111 = $7;
    $112 = $111&255;
    $113 = (186885 + (($112*6)|0)|0);
    $114 = ((($113)) + 4|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = $115&255;
    $117 = ($110|0)!=($116|0);
    if ($117) {
     $118 = $7;
     $119 = $118&255;
     $120 = (186885 + (($119*6)|0)|0);
     $121 = ((($120)) + 4|0);
     $122 = HEAP8[$121>>0]|0;
     $123 = $7;
     $124 = $123&255;
     $125 = (186885 + (($124*6)|0)|0);
     $126 = ((($125)) + 3|0);
     HEAP8[$126>>0] = $122;
     $127 = $7;
     $128 = $127&255;
     $129 = (($128) + 1)|0;
     $130 = $7;
     $131 = $130&255;
     $132 = (186885 + (($131*6)|0)|0);
     $133 = ((($132)) + 3|0);
     $134 = HEAP8[$133>>0]|0;
     $135 = $134&255;
     HEAP32[$vararg_buffer8>>2] = $129;
     $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
     HEAP32[$vararg_ptr11>>2] = $135;
     _debug_log(163759,$vararg_buffer8);
     $136 = $7;
     $137 = $136&255;
     $138 = (18 + ($137))|0;
     $139 = $138&255;
     $140 = $7;
     $141 = $140&255;
     $142 = (186885 + (($141*6)|0)|0);
     $143 = ((($142)) + 3|0);
     $144 = HEAP8[$143>>0]|0;
     _midi_send_cmd2_impl(-78,($139|0),($144|0));
     $0 = 1;
    }
    $145 = $7;
    $146 = $145&255;
    $147 = (186885 + (($146*6)|0)|0);
    $148 = ((($147)) + 5|0);
    $149 = HEAP8[$148>>0]|0;
    $150 = $149&255;
    $151 = ($150|0)!=(0);
    if ($151) {
     $152 = $7;
     $153 = $152&255;
     $154 = (186885 + (($153*6)|0)|0);
     $155 = ((($154)) + 5|0);
     HEAP8[$155>>0] = 0;
     $156 = $7;
     $157 = $156&255;
     $158 = (($157) + 1)|0;
     HEAP32[$vararg_buffer12>>2] = $158;
     _debug_log(163773,$vararg_buffer12);
     $159 = $7;
     $160 = $159&255;
     $161 = (60 + ($160))|0;
     $162 = $161&255;
     $163 = $7;
     $164 = $163&255;
     $165 = (186885 + (($164*6)|0)|0);
     $166 = ((($165)) + 5|0);
     $167 = HEAP8[$166>>0]|0;
     _midi_send_cmd2_impl(-78,($162|0),($167|0));
     $0 = 1;
    }
   } else {
    $168 = $1;
    $169 = $168&255;
    $170 = ($169|0)!=(0);
    $171 = $7;
    $172 = $171&255;
    if ($170) {
     $173 = ((185006) + (($172*3)|0)|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = $174&255;
     $176 = ($175|0)==(0);
     $177 = $7;
     $178 = $177&255;
     $179 = ((185006) + (($178*3)|0)|0);
     $180 = ((186776) + ($178)|0);
     $$sink1 = $176 ? $180 : $179;
     $181 = HEAP8[$$sink1>>0]|0;
     $182 = $181&255;
     $183 = $182&255;
     $8 = $183;
     $184 = $7;
     $185 = $184&255;
     $186 = (186885 + (($185*6)|0)|0);
     $187 = HEAP8[$186>>0]|0;
     $188 = $187&255;
     $189 = ($188|0)!=(127);
     if ($189) {
      $190 = $7;
      $191 = $190&255;
      $192 = (186885 + (($191*6)|0)|0);
      HEAP8[$192>>0] = 127;
      $193 = $7;
      $194 = $193&255;
      $195 = (($194) + 1)|0;
      HEAP32[$vararg_buffer15>>2] = $195;
      _debug_log(163784,$vararg_buffer15);
      $196 = $7;
      $197 = $196&255;
      $198 = (37 + ($197))|0;
      $199 = $198&255;
      $200 = $7;
      $201 = $200&255;
      $202 = (186885 + (($201*6)|0)|0);
      $203 = HEAP8[$202>>0]|0;
      _midi_send_cmd2_impl(-78,($199|0),($203|0));
      $0 = 1;
     }
     $204 = $7;
     $205 = $204&255;
     $206 = (186885 + (($205*6)|0)|0);
     $207 = ((($206)) + 1|0);
     $208 = HEAP8[$207>>0]|0;
     $209 = $208&255;
     $210 = ($209|0)!=(127);
     if ($210) {
      $211 = $7;
      $212 = $211&255;
      $213 = (186885 + (($212*6)|0)|0);
      $214 = ((($213)) + 1|0);
      HEAP8[$214>>0] = 127;
      $215 = $7;
      $216 = $215&255;
      $217 = (($216) + 1)|0;
      HEAP32[$vararg_buffer18>>2] = $217;
      _debug_log(163793,$vararg_buffer18);
      $218 = $7;
      $219 = $218&255;
      $220 = (100 + ($219))|0;
      $221 = $220&255;
      $222 = $7;
      $223 = $222&255;
      $224 = (186885 + (($223*6)|0)|0);
      $225 = ((($224)) + 1|0);
      $226 = HEAP8[$225>>0]|0;
      _midi_send_cmd2_impl(-78,($221|0),($226|0));
      $0 = 1;
     }
     $227 = $7;
     $228 = $227&255;
     $229 = (186885 + (($228*6)|0)|0);
     $230 = ((($229)) + 2|0);
     $231 = HEAP8[$230>>0]|0;
     $232 = $231&255;
     $233 = ($232|0)!=(127);
     if ($233) {
      $234 = $7;
      $235 = $234&255;
      $236 = (186885 + (($235*6)|0)|0);
      $237 = ((($236)) + 2|0);
      HEAP8[$237>>0] = 127;
      $238 = $7;
      $239 = $238&255;
      $240 = (($239) + 1)|0;
      HEAP32[$vararg_buffer21>>2] = $240;
      _debug_log(163801,$vararg_buffer21);
      $241 = $7;
      $242 = $241&255;
      $243 = (102 + ($242))|0;
      $244 = $243&255;
      $245 = $7;
      $246 = $245&255;
      $247 = (186885 + (($246*6)|0)|0);
      $248 = ((($247)) + 2|0);
      $249 = HEAP8[$248>>0]|0;
      _midi_send_cmd2_impl(-78,($244|0),($249|0));
      $0 = 1;
     }
     $250 = $7;
     $251 = $250&255;
     $252 = (186885 + (($251*6)|0)|0);
     $253 = ((($252)) + 3|0);
     $254 = HEAP8[$253>>0]|0;
     $255 = $254&255;
     $256 = $8;
     $257 = $256&255;
     $258 = ($255|0)!=($257|0);
     if ($258) {
      $259 = $8;
      $260 = $7;
      $261 = $260&255;
      $262 = (186885 + (($261*6)|0)|0);
      $263 = ((($262)) + 3|0);
      HEAP8[$263>>0] = $259;
      $264 = $7;
      $265 = $264&255;
      $266 = (($265) + 1)|0;
      $267 = $7;
      $268 = $267&255;
      $269 = (186885 + (($268*6)|0)|0);
      $270 = ((($269)) + 3|0);
      $271 = HEAP8[$270>>0]|0;
      $272 = $271&255;
      HEAP32[$vararg_buffer24>>2] = $266;
      $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
      HEAP32[$vararg_ptr27>>2] = $272;
      _debug_log(163759,$vararg_buffer24);
      $273 = $7;
      $274 = $273&255;
      $275 = (18 + ($274))|0;
      $276 = $275&255;
      $277 = $7;
      $278 = $277&255;
      $279 = (186885 + (($278*6)|0)|0);
      $280 = ((($279)) + 3|0);
      $281 = HEAP8[$280>>0]|0;
      _midi_send_cmd2_impl(-78,($276|0),($281|0));
      $0 = 1;
     }
     $282 = $7;
     $283 = $282&255;
     $284 = (186885 + (($283*6)|0)|0);
     $285 = ((($284)) + 5|0);
     $286 = HEAP8[$285>>0]|0;
     $287 = $286&255;
     $288 = ($287|0)!=(127);
     if (!($288)) {
      break;
     }
     $289 = $7;
     $290 = $289&255;
     $291 = (186885 + (($290*6)|0)|0);
     $292 = ((($291)) + 5|0);
     HEAP8[$292>>0] = 127;
     $293 = $7;
     $294 = $293&255;
     $295 = (($294) + 1)|0;
     HEAP32[$vararg_buffer28>>2] = $295;
     _debug_log(163809,$vararg_buffer28);
     $296 = $7;
     $297 = $296&255;
     $298 = (60 + ($297))|0;
     $299 = $298&255;
     $300 = $7;
     $301 = $300&255;
     $302 = (186885 + (($301*6)|0)|0);
     $303 = ((($302)) + 5|0);
     $304 = HEAP8[$303>>0]|0;
     _midi_send_cmd2_impl(-78,($299|0),($304|0));
     $0 = 1;
     break;
    } else {
     $305 = (186885 + (($172*6)|0)|0);
     $306 = HEAP8[$305>>0]|0;
     $307 = $306&255;
     $308 = ($307|0)!=(127);
     if ($308) {
      $309 = $7;
      $310 = $309&255;
      $311 = (186885 + (($310*6)|0)|0);
      HEAP8[$311>>0] = 127;
      $312 = $7;
      $313 = $312&255;
      $314 = (($313) + 1)|0;
      HEAP32[$vararg_buffer31>>2] = $314;
      _debug_log(163784,$vararg_buffer31);
      $315 = $7;
      $316 = $315&255;
      $317 = (37 + ($316))|0;
      $318 = $317&255;
      $319 = $7;
      $320 = $319&255;
      $321 = (186885 + (($320*6)|0)|0);
      $322 = HEAP8[$321>>0]|0;
      _midi_send_cmd2_impl(-78,($318|0),($322|0));
      $0 = 1;
     }
     $323 = $7;
     $324 = $323&255;
     $325 = (186885 + (($324*6)|0)|0);
     $326 = ((($325)) + 1|0);
     $327 = HEAP8[$326>>0]|0;
     $328 = $327&255;
     $329 = ($328|0)!=(0);
     if ($329) {
      $330 = $7;
      $331 = $330&255;
      $332 = (186885 + (($331*6)|0)|0);
      $333 = ((($332)) + 1|0);
      HEAP8[$333>>0] = 0;
      $334 = $7;
      $335 = $334&255;
      $336 = (($335) + 1)|0;
      HEAP32[$vararg_buffer34>>2] = $336;
      _debug_log(163819,$vararg_buffer34);
      $337 = $7;
      $338 = $337&255;
      $339 = (100 + ($338))|0;
      $340 = $339&255;
      $341 = $7;
      $342 = $341&255;
      $343 = (186885 + (($342*6)|0)|0);
      $344 = ((($343)) + 1|0);
      $345 = HEAP8[$344>>0]|0;
      _midi_send_cmd2_impl(-78,($340|0),($345|0));
      $0 = 1;
     }
     $346 = $7;
     $347 = $346&255;
     $348 = (186885 + (($347*6)|0)|0);
     $349 = ((($348)) + 2|0);
     $350 = HEAP8[$349>>0]|0;
     $351 = $350&255;
     $352 = ($351|0)!=(127);
     if ($352) {
      $353 = $7;
      $354 = $353&255;
      $355 = (186885 + (($354*6)|0)|0);
      $356 = ((($355)) + 2|0);
      HEAP8[$356>>0] = 127;
      $357 = $7;
      $358 = $357&255;
      $359 = (($358) + 1)|0;
      HEAP32[$vararg_buffer37>>2] = $359;
      _debug_log(163801,$vararg_buffer37);
      $360 = $7;
      $361 = $360&255;
      $362 = (102 + ($361))|0;
      $363 = $362&255;
      $364 = $7;
      $365 = $364&255;
      $366 = (186885 + (($365*6)|0)|0);
      $367 = ((($366)) + 2|0);
      $368 = HEAP8[$367>>0]|0;
      _midi_send_cmd2_impl(-78,($363|0),($368|0));
      $0 = 1;
     }
     $369 = $7;
     $370 = $369&255;
     $371 = (186885 + (($370*6)|0)|0);
     $372 = ((($371)) + 3|0);
     $373 = HEAP8[$372>>0]|0;
     $374 = $373&255;
     $375 = $7;
     $376 = $375&255;
     $377 = (186885 + (($376*6)|0)|0);
     $378 = ((($377)) + 4|0);
     $379 = HEAP8[$378>>0]|0;
     $380 = $379&255;
     $381 = ($374|0)!=($380|0);
     if ($381) {
      $382 = $7;
      $383 = $382&255;
      $384 = (186885 + (($383*6)|0)|0);
      $385 = ((($384)) + 4|0);
      $386 = HEAP8[$385>>0]|0;
      $387 = $7;
      $388 = $387&255;
      $389 = (186885 + (($388*6)|0)|0);
      $390 = ((($389)) + 3|0);
      HEAP8[$390>>0] = $386;
      $391 = $7;
      $392 = $391&255;
      $393 = (($392) + 1)|0;
      $394 = $7;
      $395 = $394&255;
      $396 = (186885 + (($395*6)|0)|0);
      $397 = ((($396)) + 3|0);
      $398 = HEAP8[$397>>0]|0;
      $399 = $398&255;
      HEAP32[$vararg_buffer40>>2] = $393;
      $vararg_ptr43 = ((($vararg_buffer40)) + 4|0);
      HEAP32[$vararg_ptr43>>2] = $399;
      _debug_log(163759,$vararg_buffer40);
      $400 = $7;
      $401 = $400&255;
      $402 = (18 + ($401))|0;
      $403 = $402&255;
      $404 = $7;
      $405 = $404&255;
      $406 = (186885 + (($405*6)|0)|0);
      $407 = ((($406)) + 3|0);
      $408 = HEAP8[$407>>0]|0;
      _midi_send_cmd2_impl(-78,($403|0),($408|0));
      $0 = 1;
     }
     $409 = $7;
     $410 = $409&255;
     $411 = (186885 + (($410*6)|0)|0);
     $412 = ((($411)) + 5|0);
     $413 = HEAP8[$412>>0]|0;
     $414 = $413&255;
     $415 = ($414|0)!=(0);
     if (!($415)) {
      break;
     }
     $416 = $7;
     $417 = $416&255;
     $418 = (186885 + (($417*6)|0)|0);
     $419 = ((($418)) + 5|0);
     HEAP8[$419>>0] = 0;
     $420 = $7;
     $421 = $420&255;
     $422 = (($421) + 1)|0;
     HEAP32[$vararg_buffer44>>2] = $422;
     _debug_log(163773,$vararg_buffer44);
     $423 = $7;
     $424 = $423&255;
     $425 = (60 + ($424))|0;
     $426 = $425&255;
     $427 = $7;
     $428 = $427&255;
     $429 = (186885 + (($428*6)|0)|0);
     $430 = ((($429)) + 5|0);
     $431 = HEAP8[$430>>0]|0;
     _midi_send_cmd2_impl(-78,($426|0),($431|0));
     $0 = 1;
     break;
    }
   }
  } while(0);
  $432 = $4;
  $433 = $432&255;
  $434 = $2;
  $435 = $434&255;
  $436 = $433 | $435;
  $437 = $3;
  $438 = $437&255;
  $439 = $1;
  $440 = $439&255;
  $441 = $438 | $440;
  $442 = ($436|0)!=($441|0);
  if ($442) {
   $443 = $7;
   $444 = $443&255;
   $445 = (($444) + 1)|0;
   HEAP32[$vararg_buffer47>>2] = $445;
   _debug_log(163827,$vararg_buffer47);
   $446 = $7;
   $447 = $446&255;
   $448 = (43 + ($447))|0;
   $449 = $448&255;
   _midi_send_cmd2_impl(-78,($449|0),127);
  }
  $450 = $7;
  $451 = $450&255;
  $452 = ((185006) + (($451*3)|0)|0);
  $453 = ((($452)) + 2|0);
  $454 = HEAP8[$453>>0]|0;
  $455 = $454&255;
  $456 = $7;
  $457 = $456&255;
  $458 = ((185066) + (($457*3)|0)|0);
  $459 = ((($458)) + 2|0);
  $460 = HEAP8[$459>>0]|0;
  $461 = $460&255;
  $462 = ($455|0)!=($461|0);
  if ($462) {
   $463 = $7;
   $464 = $463&255;
   $465 = (($464) + 1)|0;
   $466 = $7;
   $467 = $466&255;
   $468 = ((185006) + (($467*3)|0)|0);
   $469 = ((($468)) + 2|0);
   $470 = HEAP8[$469>>0]|0;
   $471 = $470&255;
   $472 = (24492 + ($471<<1)|0);
   $473 = HEAP16[$472>>1]|0;
   $474 = (_bcd($473)|0);
   HEAP32[$vararg_buffer50>>2] = $465;
   $vararg_ptr53 = ((($vararg_buffer50)) + 4|0);
   HEAP32[$vararg_ptr53>>2] = $474;
   _debug_log(163837,$vararg_buffer50);
   $475 = $7;
   $476 = $475&255;
   $477 = (16 + ($476))|0;
   $478 = $477&255;
   $479 = $7;
   $480 = $479&255;
   $481 = ((185006) + (($480*3)|0)|0);
   $482 = ((($481)) + 2|0);
   $483 = HEAP8[$482>>0]|0;
   _midi_send_cmd2_impl(-78,($478|0),($483|0));
   $0 = 1;
  }
  $484 = $7;
  $485 = (($484) + 1)<<24>>24;
  $7 = $485;
 }
 $6 = 0;
 while(1) {
  $486 = $6;
  $487 = $486&255;
  $488 = ($487|0)<(5);
  if (!($488)) {
   break;
  }
  $489 = HEAP8[(185007)>>0]|0;
  $490 = $489&255;
  $491 = $5;
  $492 = $491&255;
  $493 = $490 & $492;
  $494 = HEAP8[(185067)>>0]|0;
  $495 = $494&255;
  $496 = $5;
  $497 = $496&255;
  $498 = $495 & $497;
  $499 = ($493|0)!=($498|0);
  if ($499) {
   $500 = $6;
   $501 = $500&255;
   $502 = ((186778) + ($501)|0);
   $503 = HEAP8[$502>>0]|0;
   $504 = (_fx_name($503)|0);
   $505 = HEAP8[(185007)>>0]|0;
   $506 = $505&255;
   $507 = $5;
   $508 = $507&255;
   $509 = $506 & $508;
   $510 = ($509|0)==(0);
   $511 = $510 ? 163864 : 163868;
   HEAP32[$vararg_buffer54>>2] = $504;
   $vararg_ptr57 = ((($vararg_buffer54)) + 4|0);
   HEAP32[$vararg_ptr57>>2] = $511;
   _debug_log(163871,$vararg_buffer54);
   $512 = $6;
   $513 = $512&255;
   $514 = ((186778) + ($513)|0);
   $515 = HEAP8[$514>>0]|0;
   $516 = HEAP8[(185007)>>0]|0;
   $517 = $516&255;
   $518 = $5;
   $519 = $518&255;
   $520 = $517 & $519;
   $521 = $520&255;
   $522 = $521 << 24 >> 24;
   $523 = (0 - ($522))|0;
   $524 = $523&255;
   $525 = $524&255;
   $526 = $525 >> 1;
   $527 = $526&255;
   _midi_send_cmd2_impl(-78,($515|0),($527|0));
   $0 = 1;
  }
  $528 = HEAP8[(185010)>>0]|0;
  $529 = $528&255;
  $530 = $5;
  $531 = $530&255;
  $532 = $529 & $531;
  $533 = HEAP8[(185070)>>0]|0;
  $534 = $533&255;
  $535 = $5;
  $536 = $535&255;
  $537 = $534 & $536;
  $538 = ($532|0)!=($537|0);
  if ($538) {
   $539 = $6;
   $540 = $539&255;
   $541 = ((186783) + ($540)|0);
   $542 = HEAP8[$541>>0]|0;
   $543 = (_fx_name($542)|0);
   $544 = HEAP8[(185010)>>0]|0;
   $545 = $544&255;
   $546 = $5;
   $547 = $546&255;
   $548 = $545 & $547;
   $549 = ($548|0)==(0);
   $550 = $549 ? 163864 : 163868;
   HEAP32[$vararg_buffer58>>2] = $543;
   $vararg_ptr61 = ((($vararg_buffer58)) + 4|0);
   HEAP32[$vararg_ptr61>>2] = $550;
   _debug_log(163893,$vararg_buffer58);
   $551 = $6;
   $552 = $551&255;
   $553 = ((186783) + ($552)|0);
   $554 = HEAP8[$553>>0]|0;
   $555 = HEAP8[(185010)>>0]|0;
   $556 = $555&255;
   $557 = $5;
   $558 = $557&255;
   $559 = $556 & $558;
   $560 = $559&255;
   $561 = $560 << 24 >> 24;
   $562 = (0 - ($561))|0;
   $563 = $562&255;
   $564 = $563&255;
   $565 = $564 >> 1;
   $566 = $565&255;
   _midi_send_cmd2_impl(-78,($554|0),($566|0));
   $0 = 1;
  }
  $567 = $6;
  $568 = (($567) + 1)<<24>>24;
  $6 = $568;
  $569 = $5;
  $570 = $569&255;
  $571 = $570 << 1;
  $572 = $571&255;
  $5 = $572;
 }
 $573 = HEAP8[(185005)>>0]|0;
 $574 = $573&255;
 $575 = HEAP8[(185065)>>0]|0;
 $576 = $575&255;
 $577 = ($574|0)!=($576|0);
 if ($577) {
  $578 = HEAP8[(185005)>>0]|0;
  $579 = $578&255;
  $580 = ($579|0)>=(30);
  if ($580) {
   $9 = -87;
   $581 = HEAP8[(185005)>>0]|0;
   $582 = $581&255;
   HEAP32[$vararg_buffer62>>2] = $582;
   _debug_log(163915,$vararg_buffer62);
   _midi_send_sysex(-16);
   _midi_send_sysex(0);
   _midi_send_sysex(1);
   _midi_send_sysex(116);
   _midi_send_sysex(3);
   _midi_send_sysex(2);
   _midi_send_sysex(13);
   _midi_send_sysex(1);
   _midi_send_sysex(32);
   _midi_send_sysex(0);
   $583 = HEAP8[(185005)>>0]|0;
   $584 = $583&255;
   $585 = $584 & 127;
   $586 = $585&255;
   $10 = $586;
   $587 = $10;
   $588 = $587&255;
   $589 = $9;
   $590 = $589&255;
   $591 = $590 ^ $588;
   $592 = $591&255;
   $9 = $592;
   $593 = $10;
   _midi_send_sysex(($593|0));
   $594 = HEAP8[(185005)>>0]|0;
   $595 = $594&255;
   $596 = $595 >> 7;
   $597 = $596&255;
   $10 = $597;
   $598 = $10;
   $599 = $598&255;
   $600 = $9;
   $601 = $600&255;
   $602 = $601 ^ $599;
   $603 = $602&255;
   $9 = $603;
   $604 = $10;
   _midi_send_sysex(($604|0));
   _midi_send_sysex(0);
   _midi_send_sysex(1);
   $605 = $9;
   $606 = $605&255;
   $607 = $606 & 127;
   $608 = $607&255;
   _midi_send_sysex(($608|0));
   _midi_send_sysex(-9);
  }
 }
 $609 = HEAP8[(185007)>>0]|0;
 $610 = $609&255;
 $611 = HEAP8[(185067)>>0]|0;
 $612 = $611&255;
 $613 = ($610|0)!=($612|0);
 if ($613) {
  $0 = 1;
 }
 $614 = HEAP8[(185010)>>0]|0;
 $615 = $614&255;
 $616 = HEAP8[(185070)>>0]|0;
 $617 = $616&255;
 $618 = ($615|0)!=($617|0);
 if ($618) {
  $0 = 1;
 }
 $619 = HEAP8[(185001)>>0]|0;
 $620 = $619&255;
 $621 = HEAP8[(185061)>>0]|0;
 $622 = $621&255;
 $623 = ($620|0)!=($622|0);
 do {
  if ($623) {
   $0 = 1;
  } else {
   $624 = HEAP8[(185002)>>0]|0;
   $625 = $624&255;
   $626 = HEAP8[(185062)>>0]|0;
   $627 = $626&255;
   $628 = ($625|0)!=($627|0);
   if ($628) {
    $0 = 1;
    break;
   }
   $629 = HEAP8[(185003)>>0]|0;
   $630 = $629&255;
   $631 = HEAP8[(185063)>>0]|0;
   $632 = $631&255;
   $633 = ($630|0)!=($632|0);
   if ($633) {
    $0 = 1;
   }
  }
 } while(0);
 $634 = HEAP32[(185012)>>2]|0;
 $635 = HEAP32[(185072)>>2]|0;
 $636 = ($634|0)!=($635|0);
 if ($636) {
  $0 = 1;
 }
 $637 = HEAP32[(185020)>>2]|0;
 $638 = HEAP32[(185080)>>2]|0;
 $639 = ($637|0)!=($638|0);
 if ($639) {
  $0 = 1;
 }
 $640 = HEAP8[(185028)>>0]|0;
 $641 = $640&255;
 $642 = HEAP8[(185088)>>0]|0;
 $643 = $642&255;
 $644 = ($641|0)!=($643|0);
 if ($644) {
  $0 = 1;
 }
 $645 = $0;
 $646 = ($645<<24>>24)!=(0);
 if (!($646)) {
  STACKTOP = sp;return;
 }
 _update_lcd();
 STACKTOP = sp;return;
}
function _calc_leds() {
 var $$sink1 = 0, $$sink3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[(184988)>>0]|0;
 $1 = $0&255;
 $2 = $1 & 224;
 $3 = $2&255;
 HEAP8[(184996)>>0] = $3;
 $4 = HEAP32[(185012)>>2]|0;
 switch ($4|0) {
 case 0:  {
  $5 = HEAP8[(185007)>>0]|0;
  $6 = $5&255;
  $7 = $6 & 128;
  $8 = $7 >> 7;
  $9 = HEAP8[(184988)>>0]|0;
  $10 = $9&255;
  $11 = $10 & 30;
  $12 = $8 | $11;
  $13 = HEAP8[(184996)>>0]|0;
  $14 = $13&255;
  $15 = $14 | $12;
  $$sink1 = $15;
  label = 4;
  break;
 }
 case 1:  {
  $16 = HEAP8[(185007)>>0]|0;
  $17 = $16&255;
  $18 = $17 & 31;
  $19 = $18 | 32;
  $20 = HEAP8[(184988)>>0]|0;
  $21 = $20&255;
  $22 = $21 & 192;
  $23 = $19 | $22;
  $$sink1 = $23;
  label = 4;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 4) {
  $24 = $$sink1&255;
  HEAP8[(184996)>>0] = $24;
 }
 $25 = HEAP8[184984]|0;
 $26 = $25&255;
 $27 = $26 & 224;
 $28 = $27&255;
 HEAP8[(184992)>>0] = $28;
 $29 = HEAP32[(185020)>>2]|0;
 switch ($29|0) {
 case 0:  {
  $30 = HEAP8[(185010)>>0]|0;
  $31 = $30&255;
  $32 = $31 & 128;
  $33 = $32 >> 7;
  $34 = HEAP8[184984]|0;
  $35 = $34&255;
  $36 = $35 & 30;
  $37 = $33 | $36;
  $38 = HEAP8[(184992)>>0]|0;
  $39 = $38&255;
  $40 = $39 | $37;
  $$sink3 = $40;
  break;
 }
 case 1:  {
  $41 = HEAP8[(185010)>>0]|0;
  $42 = $41&255;
  $43 = $42 & 31;
  $44 = $43 | 32;
  $45 = HEAP8[184984]|0;
  $46 = $45&255;
  $47 = $46 & 192;
  $48 = $44 | $47;
  $$sink3 = $48;
  break;
 }
 default: {
  _send_leds();
  return;
 }
 }
 $49 = $$sink3&255;
 HEAP8[(184992)>>0] = $49;
 _send_leds();
 return;
}
function _send_leds() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = HEAP8[(184992)>>0]|0;
 $3 = $2&255;
 $4 = $3&65535;
 $5 = HEAP8[(184996)>>0]|0;
 $6 = $5&255;
 $7 = $6&65535;
 $8 = $7 << 8;
 $9 = $4 | $8;
 $10 = $9&65535;
 $0 = $10;
 $11 = HEAP8[(185052)>>0]|0;
 $12 = $11&255;
 $13 = $12&65535;
 $14 = HEAP8[(185056)>>0]|0;
 $15 = $14&255;
 $16 = $15&65535;
 $17 = $16 << 8;
 $18 = $13 | $17;
 $19 = $18&65535;
 $1 = $19;
 $20 = $0;
 $21 = $20&65535;
 $22 = $1;
 $23 = $22&65535;
 $24 = ($21|0)!=($23|0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = $0;
 _led_set(($25|0));
 STACKTOP = sp;return;
}
function _update_lcd() {
 var $$sink = 0, $$sink1 = 0, $$sink3 = 0, $$sink6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 _debug_log(163939,$vararg_buffer);
 $23 = (_label_row_get(1)|0);
 $0 = $23;
 $24 = HEAP32[(185012)>>2]|0;
 L1: do {
  switch ($24|0) {
  case 0:  {
   $25 = $0;
   HEAP32[$25>>2] = 163950;
   $26 = $0;
   $27 = ((($26)) + 4|0);
   HEAP32[$27>>2] = 163961;
   $28 = $0;
   $29 = ((($28)) + 8|0);
   HEAP32[$29>>2] = 163968;
   $30 = $0;
   $31 = ((($30)) + 12|0);
   HEAP32[$31>>2] = 163975;
   $32 = $0;
   $33 = ((($32)) + 16|0);
   HEAP32[$33>>2] = 163981;
   $34 = $0;
   $$sink1 = $34;
   label = 6;
   break;
  }
  case 1:  {
   $35 = HEAP8[(186778)>>0]|0;
   $36 = (_fx_name($35)|0);
   $37 = $0;
   HEAP32[$37>>2] = $36;
   $38 = HEAP8[(186779)>>0]|0;
   $39 = (_fx_name($38)|0);
   $40 = $0;
   $41 = ((($40)) + 4|0);
   HEAP32[$41>>2] = $39;
   $42 = HEAP8[(186780)>>0]|0;
   $43 = (_fx_name($42)|0);
   $44 = $0;
   $45 = ((($44)) + 8|0);
   HEAP32[$45>>2] = $43;
   $46 = HEAP8[(186781)>>0]|0;
   $47 = (_fx_name($46)|0);
   $48 = $0;
   $49 = ((($48)) + 12|0);
   HEAP32[$49>>2] = $47;
   $50 = HEAP8[(186782)>>0]|0;
   $51 = (_fx_name($50)|0);
   $52 = $0;
   $53 = ((($52)) + 16|0);
   HEAP32[$53>>2] = $51;
   $1 = 0;
   while(1) {
    $54 = $1;
    $55 = $54&255;
    $56 = ($55|0)<(5);
    $57 = $0;
    if (!($56)) {
     $$sink1 = $57;
     label = 6;
     break L1;
    }
    $58 = $1;
    $59 = $58&255;
    $60 = (($57) + ($59<<2)|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = HEAP8[$61>>0]|0;
    $63 = $1;
    $64 = $63&255;
    $65 = (186913 + (($64*5)|0)|0);
    HEAP8[$65>>0] = $62;
    $66 = $0;
    $67 = $1;
    $68 = $67&255;
    $69 = (($66) + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ((($70)) + 1|0);
    $72 = HEAP8[$71>>0]|0;
    $73 = $1;
    $74 = $73&255;
    $75 = (186913 + (($74*5)|0)|0);
    $76 = ((($75)) + 1|0);
    HEAP8[$76>>0] = $72;
    $77 = $0;
    $78 = $1;
    $79 = $78&255;
    $80 = (($77) + ($79<<2)|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($81)) + 2|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $1;
    $85 = $84&255;
    $86 = (186913 + (($85*5)|0)|0);
    $87 = ((($86)) + 2|0);
    HEAP8[$87>>0] = $83;
    $88 = $0;
    $89 = $1;
    $90 = $89&255;
    $91 = (($88) + ($90<<2)|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ((($92)) + 3|0);
    $94 = HEAP8[$93>>0]|0;
    $95 = $1;
    $96 = $95&255;
    $97 = (186913 + (($96*5)|0)|0);
    $98 = ((($97)) + 3|0);
    HEAP8[$98>>0] = $94;
    $99 = $1;
    $100 = $99&255;
    $101 = (186913 + (($100*5)|0)|0);
    $102 = ((($101)) + 4|0);
    HEAP8[$102>>0] = 0;
    $103 = $1;
    $104 = $103&255;
    $105 = (186913 + (($104*5)|0)|0);
    $106 = $0;
    $107 = $1;
    $108 = $107&255;
    $109 = (($106) + ($108<<2)|0);
    HEAP32[$109>>2] = $105;
    $110 = $1;
    $111 = (($110) + 1)<<24>>24;
    $1 = $111;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 if ((label|0) == 6) {
  $112 = ((($$sink1)) + 20|0);
  HEAP32[$112>>2] = 163987;
 }
 $113 = $0;
 $114 = ((($113)) + 24|0);
 HEAP32[$114>>2] = 163996;
 $115 = $0;
 $116 = ((($115)) + 28|0);
 HEAP32[$116>>2] = 164003;
 _label_row_update(1);
 $117 = (_label_row_get(0)|0);
 $0 = $117;
 $118 = HEAP32[(185020)>>2]|0;
 L10: do {
  switch ($118|0) {
  case 0:  {
   $119 = $0;
   HEAP32[$119>>2] = 163950;
   $120 = $0;
   $121 = ((($120)) + 4|0);
   HEAP32[$121>>2] = 163961;
   $122 = $0;
   $123 = ((($122)) + 8|0);
   HEAP32[$123>>2] = 163968;
   $124 = $0;
   $125 = ((($124)) + 12|0);
   HEAP32[$125>>2] = 163975;
   $126 = $0;
   $127 = ((($126)) + 16|0);
   HEAP32[$127>>2] = 163981;
   $128 = $0;
   $$sink3 = $128;
   label = 12;
   break;
  }
  case 1:  {
   $129 = HEAP8[(186783)>>0]|0;
   $130 = (_fx_name($129)|0);
   $131 = $0;
   HEAP32[$131>>2] = $130;
   $132 = HEAP8[(186784)>>0]|0;
   $133 = (_fx_name($132)|0);
   $134 = $0;
   $135 = ((($134)) + 4|0);
   HEAP32[$135>>2] = $133;
   $136 = HEAP8[(186785)>>0]|0;
   $137 = (_fx_name($136)|0);
   $138 = $0;
   $139 = ((($138)) + 8|0);
   HEAP32[$139>>2] = $137;
   $140 = HEAP8[(186786)>>0]|0;
   $141 = (_fx_name($140)|0);
   $142 = $0;
   $143 = ((($142)) + 12|0);
   HEAP32[$143>>2] = $141;
   $144 = HEAP8[(186787)>>0]|0;
   $145 = (_fx_name($144)|0);
   $146 = $0;
   $147 = ((($146)) + 16|0);
   HEAP32[$147>>2] = $145;
   $1 = 0;
   while(1) {
    $148 = $1;
    $149 = $148&255;
    $150 = ($149|0)<(5);
    $151 = $0;
    if (!($150)) {
     $$sink3 = $151;
     label = 12;
     break L10;
    }
    $152 = $1;
    $153 = $152&255;
    $154 = (($151) + ($153<<2)|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = HEAP8[$155>>0]|0;
    $157 = $1;
    $158 = $157&255;
    $159 = (186913 + (($158*5)|0)|0);
    HEAP8[$159>>0] = $156;
    $160 = $0;
    $161 = $1;
    $162 = $161&255;
    $163 = (($160) + ($162<<2)|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ((($164)) + 1|0);
    $166 = HEAP8[$165>>0]|0;
    $167 = $1;
    $168 = $167&255;
    $169 = (186913 + (($168*5)|0)|0);
    $170 = ((($169)) + 1|0);
    HEAP8[$170>>0] = $166;
    $171 = $0;
    $172 = $1;
    $173 = $172&255;
    $174 = (($171) + ($173<<2)|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = ((($175)) + 2|0);
    $177 = HEAP8[$176>>0]|0;
    $178 = $1;
    $179 = $178&255;
    $180 = (186913 + (($179*5)|0)|0);
    $181 = ((($180)) + 2|0);
    HEAP8[$181>>0] = $177;
    $182 = $0;
    $183 = $1;
    $184 = $183&255;
    $185 = (($182) + ($184<<2)|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = ((($186)) + 3|0);
    $188 = HEAP8[$187>>0]|0;
    $189 = $1;
    $190 = $189&255;
    $191 = (186913 + (($190*5)|0)|0);
    $192 = ((($191)) + 3|0);
    HEAP8[$192>>0] = $188;
    $193 = $1;
    $194 = $193&255;
    $195 = (186913 + (($194*5)|0)|0);
    $196 = ((($195)) + 4|0);
    HEAP8[$196>>0] = 0;
    $197 = $1;
    $198 = $197&255;
    $199 = (186913 + (($198*5)|0)|0);
    $200 = $0;
    $201 = $1;
    $202 = $201&255;
    $203 = (($200) + ($202<<2)|0);
    HEAP32[$203>>2] = $199;
    $204 = $1;
    $205 = (($204) + 1)<<24>>24;
    $1 = $205;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 if ((label|0) == 12) {
  $206 = ((($$sink3)) + 20|0);
  HEAP32[$206>>2] = 163987;
 }
 $207 = $0;
 $208 = ((($207)) + 24|0);
 HEAP32[$208>>2] = 164010;
 $209 = $0;
 $210 = ((($209)) + 28|0);
 HEAP32[$210>>2] = 164019;
 _label_row_update(0);
 $2 = 0;
 while(1) {
  $211 = $2;
  $212 = $211 << 24 >> 24;
  $213 = ($212|0)<(20);
  if (!($213)) {
   break;
  }
  $214 = $2;
  $215 = $214 << 24 >> 24;
  $216 = (163597 + ($215)|0);
  $217 = HEAP8[$216>>0]|0;
  $218 = HEAP32[46273]|0;
  $219 = $2;
  $220 = $219 << 24 >> 24;
  $221 = (($218) + ($220)|0);
  HEAP8[$221>>0] = $217;
  $222 = $2;
  $223 = $222 << 24 >> 24;
  $224 = (163597 + ($223)|0);
  $225 = HEAP8[$224>>0]|0;
  $226 = HEAP32[(185096)>>2]|0;
  $227 = $2;
  $228 = $227 << 24 >> 24;
  $229 = (($226) + ($228)|0);
  HEAP8[$229>>0] = $225;
  $230 = $2;
  $231 = (($230) + 1)<<24>>24;
  $2 = $231;
 }
 $232 = HEAP8[(185000)>>0]|0;
 $233 = $232&255;
 $234 = ($233|0)==(0);
 $2 = 0;
 if ($234) {
  while(1) {
   $235 = $2;
   $236 = $235 << 24 >> 24;
   $237 = ($236|0)<(20);
   if (!($237)) {
    break;
   }
   $238 = $2;
   $239 = $238 << 24 >> 24;
   $240 = (164029 + ($239)|0);
   $241 = HEAP8[$240>>0]|0;
   $242 = HEAP32[(185096)>>2]|0;
   $243 = $2;
   $244 = $243 << 24 >> 24;
   $245 = (($242) + ($244)|0);
   HEAP8[$245>>0] = $241;
   $246 = $2;
   $247 = (($246) + 1)<<24>>24;
   $2 = $247;
  }
  $248 = HEAP32[(185096)>>2]|0;
  $249 = HEAP8[(185002)>>0]|0;
  $250 = $249&255;
  $251 = (($250) + 1)|0;
  $252 = $251&255;
  (_ritoa($248,5,$252)|0);
 } else {
  while(1) {
   $253 = $2;
   $254 = $253 << 24 >> 24;
   $255 = ($254|0)<(20);
   if (!($255)) {
    break;
   }
   $256 = $2;
   $257 = $256 << 24 >> 24;
   $258 = (164050 + ($257)|0);
   $259 = HEAP8[$258>>0]|0;
   $260 = HEAP32[(185096)>>2]|0;
   $261 = $2;
   $262 = $261 << 24 >> 24;
   $263 = (($260) + ($262)|0);
   HEAP8[$263>>0] = $259;
   $264 = $2;
   $265 = (($264) + 1)<<24>>24;
   $2 = $265;
  }
  $266 = HEAP32[(185096)>>2]|0;
  $267 = HEAP8[(185001)>>0]|0;
  $268 = $267&255;
  $269 = (($268) + 1)|0;
  $270 = $269&255;
  (_ritoa($266,5,$270)|0);
  $271 = HEAP32[(185096)>>2]|0;
  $272 = HEAP8[186884]|0;
  $273 = $272&255;
  $274 = (($273) + 1)|0;
  $275 = $274&255;
  (_ritoa($271,8,$275)|0);
 }
 $276 = HEAP32[(185096)>>2]|0;
 $277 = HEAP8[(185003)>>0]|0;
 $278 = $277&255;
 $279 = (($278) + 1)|0;
 $280 = $279&255;
 (_ritoa($276,16,$280)|0);
 $281 = HEAP32[(185096)>>2]|0;
 $282 = HEAP8[(186791)>>0]|0;
 (_ritoa($281,19,$282)|0);
 $283 = HEAP8[186754]|0;
 $284 = $283&255;
 $285 = ($284|0)==(0);
 if ($285) {
  $2 = 0;
  while(1) {
   $286 = $2;
   $287 = $286 << 24 >> 24;
   $288 = ($287|0)<(20);
   if (!($288)) {
    break;
   }
   $289 = $2;
   $290 = $289 << 24 >> 24;
   $291 = (164071 + ($290)|0);
   $292 = HEAP8[$291>>0]|0;
   $293 = HEAP32[46273]|0;
   $294 = $2;
   $295 = $294 << 24 >> 24;
   $296 = (($293) + ($295)|0);
   HEAP8[$296>>0] = $292;
   $297 = $2;
   $298 = (($297) + 1)<<24>>24;
   $2 = $298;
  }
  $299 = HEAP32[46273]|0;
  $300 = HEAP8[(185002)>>0]|0;
  $301 = $300&255;
  $302 = (($301) + 1)|0;
  $303 = $302&255;
  (_ritoa($299,18,$303)|0);
 } else {
  $304 = HEAP32[46273]|0;
  _copy_str_lcd(186754,$304);
 }
 $305 = HEAP8[(185028)>>0]|0;
 $306 = ($305<<24>>24)!=(0);
 if ($306) {
  $307 = HEAP32[46273]|0;
  $308 = ((($307)) + 19|0);
  HEAP8[$308>>0] = 42;
 }
 $309 = HEAP32[(185012)>>2]|0;
 L44: do {
  switch ($309|0) {
  case 0:  {
   $2 = 0;
   while(1) {
    $310 = $2;
    $311 = $310 << 24 >> 24;
    $312 = ($311|0)<(20);
    if (!($312)) {
     break;
    }
    $313 = $2;
    $314 = $313 << 24 >> 24;
    $315 = (164092 + ($314)|0);
    $316 = HEAP8[$315>>0]|0;
    $317 = HEAP32[(185100)>>2]|0;
    $318 = $2;
    $319 = $318 << 24 >> 24;
    $320 = (($317) + ($319)|0);
    HEAP8[$320>>0] = $316;
    $321 = $2;
    $322 = (($321) + 1)<<24>>24;
    $2 = $322;
   }
   $323 = HEAP8[(185007)>>0]|0;
   $324 = $323&255;
   $325 = $324 & 64;
   $326 = ($325|0)!=(0);
   if ($326) {
    $$sink = 65;
   } else {
    $327 = HEAP8[(185007)>>0]|0;
    $328 = $327&255;
    $329 = $328 & 128;
    $330 = ($329|0)!=(0);
    $331 = $330&1;
    $332 = (67 + ($331))|0;
    $333 = $332&255;
    $$sink = $333;
   }
   $334 = HEAP32[(185100)>>2]|0;
   $335 = ((($334)) + 1|0);
   HEAP8[$335>>0] = $$sink;
   $336 = HEAP32[(185100)>>2]|0;
   $337 = HEAP8[(186888)>>0]|0;
   _hextoa($336,5,$337);
   $338 = HEAP32[(185100)>>2]|0;
   $339 = HEAP8[(185008)>>0]|0;
   $340 = $339&255;
   $341 = (24492 + ($340<<1)|0);
   $342 = HEAP16[$341>>1]|0;
   _bcdtoa($338,13,$342);
   $3 = 1;
   $343 = HEAP32[(185100)>>2]|0;
   $344 = ((($343)) + 15|0);
   $4 = $344;
   $2 = 0;
   while(1) {
    $345 = $2;
    $346 = $345 << 24 >> 24;
    $347 = ($346|0)<(5);
    if (!($347)) {
     break L44;
    }
    $348 = $2;
    $349 = $348 << 24 >> 24;
    $350 = ((186778) + ($349)|0);
    $351 = HEAP8[$350>>0]|0;
    $352 = (_fx_name($351)|0);
    $5 = $352;
    $353 = HEAP8[(185007)>>0]|0;
    $354 = $353&255;
    $355 = $3;
    $356 = $355&255;
    $357 = $354 & $356;
    $358 = $357 ^ -1;
    $359 = $2;
    $360 = $359 << 24 >> 24;
    $361 = (5 - ($360))|0;
    $362 = $358 << $361;
    $363 = $362&255;
    $6 = $363;
    $364 = $5;
    $365 = HEAP8[$364>>0]|0;
    $8 = $365;
    $366 = $8;
    $367 = $366&255;
    $368 = $367 & 64;
    $369 = $368 >> 1;
    $370 = $369&255;
    $7 = $370;
    $371 = $8;
    $372 = $371&255;
    $373 = $7;
    $374 = $373&255;
    $375 = $374 ^ -1;
    $376 = $372 & $375;
    $377 = $7;
    $378 = $377&255;
    $379 = $6;
    $380 = $379&255;
    $381 = $378 & $380;
    $382 = $376 | $381;
    $383 = $382&255;
    $384 = $4;
    $385 = ((($384)) + 1|0);
    $4 = $385;
    HEAP8[$384>>0] = $383;
    $386 = $2;
    $387 = (($386) + 1)<<24>>24;
    $2 = $387;
    $388 = $3;
    $389 = $388&255;
    $390 = $389 << 1;
    $391 = $390&255;
    $3 = $391;
   }
   break;
  }
  case 1:  {
   $2 = 0;
   while(1) {
    $392 = $2;
    $393 = $392 << 24 >> 24;
    $394 = ($393|0)<(20);
    if (!($394)) {
     break;
    }
    $395 = $2;
    $396 = $395 << 24 >> 24;
    $397 = (163597 + ($396)|0);
    $398 = HEAP8[$397>>0]|0;
    $399 = HEAP32[(185100)>>2]|0;
    $400 = $2;
    $401 = $400 << 24 >> 24;
    $402 = (($399) + ($401)|0);
    HEAP8[$402>>0] = $398;
    $403 = $2;
    $404 = (($403) + 1)<<24>>24;
    $2 = $404;
   }
   $3 = 1;
   $405 = HEAP32[(185100)>>2]|0;
   $4 = $405;
   $2 = 0;
   while(1) {
    $406 = $2;
    $407 = $406 << 24 >> 24;
    $408 = ($407|0)<(5);
    if (!($408)) {
     break L44;
    }
    $409 = $2;
    $410 = $409 << 24 >> 24;
    $411 = ((186778) + ($410)|0);
    $412 = HEAP8[$411>>0]|0;
    $413 = (_fx_name($412)|0);
    $9 = $413;
    $414 = HEAP8[(185007)>>0]|0;
    $415 = $414&255;
    $416 = $3;
    $417 = $416&255;
    $418 = $415 & $417;
    $419 = $418 ^ -1;
    $420 = $2;
    $421 = $420 << 24 >> 24;
    $422 = (5 - ($421))|0;
    $423 = $419 << $422;
    $424 = $423&255;
    $13 = $424;
    $12 = 0;
    while(1) {
     $425 = $12;
     $426 = $425&255;
     $427 = ($426|0)<(4);
     if (!($427)) {
      break;
     }
     $428 = $9;
     $429 = ((($428)) + 1|0);
     $9 = $429;
     $430 = HEAP8[$428>>0]|0;
     $11 = $430;
     $431 = $11;
     $432 = $431&255;
     $433 = $432 & 64;
     $434 = $433 >> 1;
     $435 = $434&255;
     $10 = $435;
     $436 = $11;
     $437 = $436&255;
     $438 = $10;
     $439 = $438&255;
     $440 = $439 ^ -1;
     $441 = $437 & $440;
     $442 = $10;
     $443 = $442&255;
     $444 = $13;
     $445 = $444&255;
     $446 = $443 & $445;
     $447 = $441 | $446;
     $448 = $447&255;
     $449 = $4;
     $450 = ((($449)) + 1|0);
     $4 = $450;
     HEAP8[$449>>0] = $448;
     $451 = $12;
     $452 = (($451) + 1)<<24>>24;
     $12 = $452;
    }
    $453 = $2;
    $454 = (($453) + 1)<<24>>24;
    $2 = $454;
    $455 = $3;
    $456 = $455&255;
    $457 = $456 << 1;
    $458 = $457&255;
    $3 = $458;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $459 = HEAP32[(185020)>>2]|0;
 switch ($459|0) {
 case 0:  {
  $2 = 0;
  while(1) {
   $460 = $2;
   $461 = $460 << 24 >> 24;
   $462 = ($461|0)<(20);
   if (!($462)) {
    break;
   }
   $463 = $2;
   $464 = $463 << 24 >> 24;
   $465 = (164113 + ($464)|0);
   $466 = HEAP8[$465>>0]|0;
   $467 = HEAP32[(185104)>>2]|0;
   $468 = $2;
   $469 = $468 << 24 >> 24;
   $470 = (($467) + ($469)|0);
   HEAP8[$470>>0] = $466;
   $471 = $2;
   $472 = (($471) + 1)<<24>>24;
   $2 = $472;
  }
  $473 = HEAP8[(185010)>>0]|0;
  $474 = $473&255;
  $475 = $474 & 64;
  $476 = ($475|0)!=(0);
  if ($476) {
   $$sink6 = 65;
  } else {
   $477 = HEAP8[(185010)>>0]|0;
   $478 = $477&255;
   $479 = $478 & 128;
   $480 = ($479|0)!=(0);
   $481 = $480&1;
   $482 = (67 + ($481))|0;
   $483 = $482&255;
   $$sink6 = $483;
  }
  $484 = HEAP32[(185104)>>2]|0;
  $485 = ((($484)) + 1|0);
  HEAP8[$485>>0] = $$sink6;
  $486 = HEAP32[(185104)>>2]|0;
  $487 = HEAP8[(186894)>>0]|0;
  _hextoa($486,5,$487);
  $488 = HEAP32[(185104)>>2]|0;
  $489 = HEAP8[(185011)>>0]|0;
  $490 = $489&255;
  $491 = (24492 + ($490<<1)|0);
  $492 = HEAP16[$491>>1]|0;
  _bcdtoa($488,13,$492);
  $3 = 1;
  $493 = HEAP32[(185104)>>2]|0;
  $494 = ((($493)) + 15|0);
  $4 = $494;
  $2 = 0;
  while(1) {
   $495 = $2;
   $496 = $495 << 24 >> 24;
   $497 = ($496|0)<(5);
   if (!($497)) {
    break;
   }
   $498 = $2;
   $499 = $498 << 24 >> 24;
   $500 = ((186783) + ($499)|0);
   $501 = HEAP8[$500>>0]|0;
   $502 = (_fx_name($501)|0);
   $14 = $502;
   $503 = HEAP8[(185010)>>0]|0;
   $504 = $503&255;
   $505 = $3;
   $506 = $505&255;
   $507 = $504 & $506;
   $508 = $507 ^ -1;
   $509 = $2;
   $510 = $509 << 24 >> 24;
   $511 = (5 - ($510))|0;
   $512 = $508 << $511;
   $513 = $512&255;
   $15 = $513;
   $514 = $14;
   $515 = HEAP8[$514>>0]|0;
   $17 = $515;
   $516 = $17;
   $517 = $516&255;
   $518 = $517 & 64;
   $519 = $518 >> 1;
   $520 = $519&255;
   $16 = $520;
   $521 = $17;
   $522 = $521&255;
   $523 = $16;
   $524 = $523&255;
   $525 = $524 ^ -1;
   $526 = $522 & $525;
   $527 = $16;
   $528 = $527&255;
   $529 = $15;
   $530 = $529&255;
   $531 = $528 & $530;
   $532 = $526 | $531;
   $533 = $532&255;
   $534 = $4;
   $535 = ((($534)) + 1|0);
   $4 = $535;
   HEAP8[$534>>0] = $533;
   $536 = $2;
   $537 = (($536) + 1)<<24>>24;
   $2 = $537;
   $538 = $3;
   $539 = $538&255;
   $540 = $539 << 1;
   $541 = $540&255;
   $3 = $541;
  }
  _lcd_updated_all();
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $2 = 0;
  while(1) {
   $542 = $2;
   $543 = $542 << 24 >> 24;
   $544 = ($543|0)<(20);
   if (!($544)) {
    break;
   }
   $545 = $2;
   $546 = $545 << 24 >> 24;
   $547 = (163597 + ($546)|0);
   $548 = HEAP8[$547>>0]|0;
   $549 = HEAP32[(185104)>>2]|0;
   $550 = $2;
   $551 = $550 << 24 >> 24;
   $552 = (($549) + ($551)|0);
   HEAP8[$552>>0] = $548;
   $553 = $2;
   $554 = (($553) + 1)<<24>>24;
   $2 = $554;
  }
  $3 = 1;
  $555 = HEAP32[(185104)>>2]|0;
  $4 = $555;
  $2 = 0;
  while(1) {
   $556 = $2;
   $557 = $556 << 24 >> 24;
   $558 = ($557|0)<(5);
   if (!($558)) {
    break;
   }
   $559 = $2;
   $560 = $559 << 24 >> 24;
   $561 = ((186783) + ($560)|0);
   $562 = HEAP8[$561>>0]|0;
   $563 = (_fx_name($562)|0);
   $18 = $563;
   $564 = HEAP8[(185010)>>0]|0;
   $565 = $564&255;
   $566 = $3;
   $567 = $566&255;
   $568 = $565 & $567;
   $569 = $568 ^ -1;
   $570 = $2;
   $571 = $570 << 24 >> 24;
   $572 = (5 - ($571))|0;
   $573 = $569 << $572;
   $574 = $573&255;
   $22 = $574;
   $21 = 0;
   while(1) {
    $575 = $21;
    $576 = $575&255;
    $577 = ($576|0)<(4);
    if (!($577)) {
     break;
    }
    $578 = $18;
    $579 = ((($578)) + 1|0);
    $18 = $579;
    $580 = HEAP8[$578>>0]|0;
    $20 = $580;
    $581 = $20;
    $582 = $581&255;
    $583 = $582 & 64;
    $584 = $583 >> 1;
    $585 = $584&255;
    $19 = $585;
    $586 = $20;
    $587 = $586&255;
    $588 = $19;
    $589 = $588&255;
    $590 = $589 ^ -1;
    $591 = $587 & $590;
    $592 = $19;
    $593 = $592&255;
    $594 = $22;
    $595 = $594&255;
    $596 = $593 & $595;
    $597 = $591 | $596;
    $598 = $597&255;
    $599 = $4;
    $600 = ((($599)) + 1|0);
    $4 = $600;
    HEAP8[$599>>0] = $598;
    $601 = $21;
    $602 = (($601) + 1)<<24>>24;
    $21 = $602;
   }
   $603 = $2;
   $604 = (($603) + 1)<<24>>24;
   $2 = $604;
   $605 = $3;
   $606 = $605&255;
   $607 = $606 << 1;
   $608 = $607&255;
   $3 = $608;
  }
  _lcd_updated_all();
  STACKTOP = sp;return;
  break;
 }
 default: {
  _lcd_updated_all();
  STACKTOP = sp;return;
 }
 }
}
function _hextoa($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = $6&255;
 $8 = $3;
 $9 = (($8) + ($7)|0);
 $3 = $9;
 $10 = $5;
 $11 = $10&255;
 $12 = $11 & 15;
 $13 = (164377 + ($12)|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $3;
 $16 = ((($15)) + -1|0);
 $3 = $16;
 HEAP8[$15>>0] = $14;
 $17 = $5;
 $18 = $17&255;
 $19 = $18 >> 4;
 $20 = $19 & 15;
 $21 = (164377 + ($20)|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $3;
 HEAP8[$23>>0] = $22;
 STACKTOP = sp;return;
}
function _ritoa($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 while(1) {
  $6 = $5;
  $7 = $6&255;
  $8 = (($7|0) % 10)&-1;
  $9 = (($8) + 48)|0;
  $10 = $9&255;
  $11 = $3;
  $12 = $4;
  $13 = (($12) + -1)<<24>>24;
  $4 = $13;
  $14 = $12 << 24 >> 24;
  $15 = (($11) + ($14)|0);
  HEAP8[$15>>0] = $10;
  $16 = $5;
  $17 = $16&255;
  $18 = (($17|0) / 10)&-1;
  $19 = $18&255;
  $5 = $19;
  $20 = $19&255;
  $21 = ($20|0)>(0);
  if (!($21)) {
   break;
  }
 }
 $22 = $4;
 STACKTOP = sp;return ($22|0);
}
function _bcdtoa($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $8 = $7&255;
 $9 = $3;
 $10 = (($9) + ($8)|0);
 $3 = $10;
 $11 = $5;
 $12 = $11&65535;
 $13 = $12 & 32768;
 $14 = ($13|0)!=(0);
 $15 = $14&1;
 $16 = $15&255;
 $6 = $16;
 $17 = $5;
 $18 = $17&65535;
 $19 = $18 & 32767;
 $20 = ($19|0)==(32767);
 if ($20) {
  $21 = $3;
  $22 = ((($21)) + -1|0);
  $3 = $22;
  HEAP8[$21>>0] = 102;
  $23 = $3;
  $24 = ((($23)) + -1|0);
  $3 = $24;
  HEAP8[$23>>0] = 110;
  $25 = $3;
  $26 = ((($25)) + -1|0);
  $3 = $26;
  HEAP8[$25>>0] = 105;
 } else {
  $27 = $5;
  $28 = $27&65535;
  $29 = $28 & 15;
  $30 = $29&255;
  $31 = $30 << 24 >> 24;
  $32 = (48 + ($31))|0;
  $33 = $32&255;
  $34 = $3;
  $35 = ((($34)) + -1|0);
  $3 = $35;
  HEAP8[$34>>0] = $33;
  $36 = $3;
  $37 = ((($36)) + -1|0);
  $3 = $37;
  HEAP8[$36>>0] = 46;
  $38 = $5;
  $39 = $38&65535;
  $40 = $39 >> 4;
  $41 = $40&65535;
  $5 = $41;
  $42 = $5;
  $43 = $42&65535;
  $44 = $43 & 15;
  $45 = $44&255;
  $46 = $45 << 24 >> 24;
  $47 = (48 + ($46))|0;
  $48 = $47&255;
  $49 = $3;
  $50 = ((($49)) + -1|0);
  $3 = $50;
  HEAP8[$49>>0] = $48;
  $51 = $5;
  $52 = $51&65535;
  $53 = $52 >> 4;
  $54 = $53&65535;
  $5 = $54;
  $55 = $5;
  $56 = $55&65535;
  $57 = $56 & 15;
  $58 = ($57|0)>(0);
  if ($58) {
   $59 = $5;
   $60 = $59&65535;
   $61 = $60 & 15;
   $62 = $61&255;
   $63 = $62 << 24 >> 24;
   $64 = (48 + ($63))|0;
   $65 = $64&255;
   $66 = $3;
   $67 = ((($66)) + -1|0);
   $3 = $67;
   HEAP8[$66>>0] = $65;
  }
 }
 $68 = $6;
 $69 = ($68<<24>>24)!=(0);
 if (!($69)) {
  STACKTOP = sp;return;
 }
 $70 = $3;
 HEAP8[$70>>0] = 45;
 STACKTOP = sp;return;
}
function _bcd($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 HEAP8[(186943)>>0] = 0;
 HEAP8[(186942)>>0] = 32;
 HEAP8[(186941)>>0] = 32;
 HEAP8[(186940)>>0] = 32;
 HEAP8[(186939)>>0] = 32;
 HEAP8[186938] = 32;
 $2 = $1;
 _bcdtoa(186938,4,$2);
 STACKTOP = sp;return (186938|0);
}
function _copy_str_lcd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $2;
  $6 = $4;
  $7 = $6&255;
  $8 = (($5) + ($7)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 << 24 >> 24;
  $11 = ($10|0)!=(0);
  if (!($11)) {
   break;
  }
  $12 = $4;
  $13 = $12&255;
  $14 = ($13|0)<(20);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $4;
  $17 = $16&255;
  $18 = (($15) + ($17)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $3;
  $21 = $4;
  $22 = $21&255;
  $23 = (($20) + ($22)|0);
  HEAP8[$23>>0] = $19;
  $24 = $4;
  $25 = (($24) + 1)<<24>>24;
  $4 = $25;
 }
 while(1) {
  $26 = $4;
  $27 = $26&255;
  $28 = ($27|0)<(20);
  if (!($28)) {
   break;
  }
  $29 = $3;
  $30 = $4;
  $31 = $30&255;
  $32 = (($29) + ($31)|0);
  HEAP8[$32>>0] = 32;
  $33 = $4;
  $34 = (($33) + 1)<<24>>24;
  $4 = $34;
 }
 STACKTOP = sp;return;
}
function _fx_name($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = $3&255;
 $5 = ($4|0)<(41);
 do {
  if ($5) {
   $1 = 164393;
  } else {
   $6 = $2;
   $7 = $6&255;
   $8 = ($7|0)>(98);
   if ($8) {
    $1 = 164393;
    break;
   } else {
    $9 = $2;
    $10 = $9&255;
    $11 = (($10) - 41)|0;
    $12 = (164145 + ($11<<2)|0);
    $1 = $12;
    break;
   }
  }
 } while(0);
 $13 = $1;
 STACKTOP = sp;return ($13|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0172$i = 0, $$$0173$i = 0, $$$4236$i = 0, $$$4329$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0172$lcssa$i = 0, $$01724$i = 0, $$0173$lcssa$i = 0, $$01733$i = 0, $$0192 = 0, $$0194 = 0, $$0201$i$i = 0, $$0202$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0;
 var $$024367$i = 0, $$0260$i$i = 0, $$0261$i$i = 0, $$0262$i$i = 0, $$0268$i$i = 0, $$0269$i$i = 0, $$0320$i = 0, $$0322$i = 0, $$0323$i = 0, $$0325$i = 0, $$0331$i = 0, $$0336$i = 0, $$0337$$i = 0, $$0337$i = 0, $$0339$i = 0, $$0340$i = 0, $$0345$i = 0, $$1176$i = 0, $$1178$i = 0, $$124466$i = 0;
 var $$1264$i$i = 0, $$1266$i$i = 0, $$1321$i = 0, $$1326$i = 0, $$1341$i = 0, $$1347$i = 0, $$1351$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2333$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i199 = 0, $$3328$i = 0, $$3349$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$4236$i = 0, $$4329$lcssa$i = 0;
 var $$43298$i = 0, $$4335$$4$i = 0, $$4335$ph$i = 0, $$43357$i = 0, $$49$i = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i17$i = 0, $$pre$i195 = 0, $$pre$i207 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i208Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i = 0, $$sink1$i$i = 0;
 var $$sink12$i = 0, $$sink2$i = 0, $$sink2$i202 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i206 = 0, $not$$i = 0, $not$3$i = 0;
 var $or$cond$i = 0, $or$cond$i200 = 0, $or$cond1$i = 0, $or$cond1$i198 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[46277]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (185148 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[46277] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(185116)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (185148 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[46277] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(185128)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (185148 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[46277] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(185116)>>2] = $76;
     HEAP32[(185128)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(185112)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (185412 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $129 = ((($124)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($130|0)==(0|0);
     $$sink12$i = $131&1;
     $132 = (((($124)) + 16|0) + ($$sink12$i<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($133|0)==(0|0);
     if ($134) {
      $$0172$lcssa$i = $124;$$0173$lcssa$i = $128;
     } else {
      $$01724$i = $124;$$01733$i = $128;$136 = $133;
      while(1) {
       $135 = ((($136)) + 4|0);
       $137 = HEAP32[$135>>2]|0;
       $138 = $137 & -8;
       $139 = (($138) - ($6))|0;
       $140 = ($139>>>0)<($$01733$i>>>0);
       $$$0173$i = $140 ? $139 : $$01733$i;
       $$$0172$i = $140 ? $136 : $$01724$i;
       $141 = ((($136)) + 16|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       $$sink1$i = $143&1;
       $144 = (((($136)) + 16|0) + ($$sink1$i<<2)|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = ($145|0)==(0|0);
       if ($146) {
        $$0172$lcssa$i = $$$0172$i;$$0173$lcssa$i = $$$0173$i;
        break;
       } else {
        $$01724$i = $$$0172$i;$$01733$i = $$$0173$i;$136 = $145;
       }
      }
     }
     $147 = (($$0172$lcssa$i) + ($6)|0);
     $148 = ($147>>>0)>($$0172$lcssa$i>>>0);
     if ($148) {
      $149 = ((($$0172$lcssa$i)) + 24|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ((($$0172$lcssa$i)) + 12|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = ($152|0)==($$0172$lcssa$i|0);
      do {
       if ($153) {
        $158 = ((($$0172$lcssa$i)) + 20|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = ($159|0)==(0|0);
        if ($160) {
         $161 = ((($$0172$lcssa$i)) + 16|0);
         $162 = HEAP32[$161>>2]|0;
         $163 = ($162|0)==(0|0);
         if ($163) {
          $$3$i = 0;
          break;
         } else {
          $$1176$i = $162;$$1178$i = $161;
         }
        } else {
         $$1176$i = $159;$$1178$i = $158;
        }
        while(1) {
         $164 = ((($$1176$i)) + 20|0);
         $165 = HEAP32[$164>>2]|0;
         $166 = ($165|0)==(0|0);
         if (!($166)) {
          $$1176$i = $165;$$1178$i = $164;
          continue;
         }
         $167 = ((($$1176$i)) + 16|0);
         $168 = HEAP32[$167>>2]|0;
         $169 = ($168|0)==(0|0);
         if ($169) {
          break;
         } else {
          $$1176$i = $168;$$1178$i = $167;
         }
        }
        HEAP32[$$1178$i>>2] = 0;
        $$3$i = $$1176$i;
       } else {
        $154 = ((($$0172$lcssa$i)) + 8|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ((($155)) + 12|0);
        HEAP32[$156>>2] = $152;
        $157 = ((($152)) + 8|0);
        HEAP32[$157>>2] = $155;
        $$3$i = $152;
       }
      } while(0);
      $170 = ($150|0)==(0|0);
      do {
       if (!($170)) {
        $171 = ((($$0172$lcssa$i)) + 28|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = (185412 + ($172<<2)|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($$0172$lcssa$i|0)==($174|0);
        if ($175) {
         HEAP32[$173>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $176 = 1 << $172;
          $177 = $176 ^ -1;
          $178 = $98 & $177;
          HEAP32[(185112)>>2] = $178;
          break;
         }
        } else {
         $179 = ((($150)) + 16|0);
         $180 = HEAP32[$179>>2]|0;
         $181 = ($180|0)!=($$0172$lcssa$i|0);
         $$sink2$i = $181&1;
         $182 = (((($150)) + 16|0) + ($$sink2$i<<2)|0);
         HEAP32[$182>>2] = $$3$i;
         $183 = ($$3$i|0)==(0|0);
         if ($183) {
          break;
         }
        }
        $184 = ((($$3$i)) + 24|0);
        HEAP32[$184>>2] = $150;
        $185 = ((($$0172$lcssa$i)) + 16|0);
        $186 = HEAP32[$185>>2]|0;
        $187 = ($186|0)==(0|0);
        if (!($187)) {
         $188 = ((($$3$i)) + 16|0);
         HEAP32[$188>>2] = $186;
         $189 = ((($186)) + 24|0);
         HEAP32[$189>>2] = $$3$i;
        }
        $190 = ((($$0172$lcssa$i)) + 20|0);
        $191 = HEAP32[$190>>2]|0;
        $192 = ($191|0)==(0|0);
        if (!($192)) {
         $193 = ((($$3$i)) + 20|0);
         HEAP32[$193>>2] = $191;
         $194 = ((($191)) + 24|0);
         HEAP32[$194>>2] = $$3$i;
        }
       }
      } while(0);
      $195 = ($$0173$lcssa$i>>>0)<(16);
      if ($195) {
       $196 = (($$0173$lcssa$i) + ($6))|0;
       $197 = $196 | 3;
       $198 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = (($$0172$lcssa$i) + ($196)|0);
       $200 = ((($199)) + 4|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = $201 | 1;
       HEAP32[$200>>2] = $202;
      } else {
       $203 = $6 | 3;
       $204 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$204>>2] = $203;
       $205 = $$0173$lcssa$i | 1;
       $206 = ((($147)) + 4|0);
       HEAP32[$206>>2] = $205;
       $207 = (($147) + ($$0173$lcssa$i)|0);
       HEAP32[$207>>2] = $$0173$lcssa$i;
       $208 = ($33|0)==(0);
       if (!($208)) {
        $209 = HEAP32[(185128)>>2]|0;
        $210 = $33 >>> 3;
        $211 = $210 << 1;
        $212 = (185148 + ($211<<2)|0);
        $213 = 1 << $210;
        $214 = $8 & $213;
        $215 = ($214|0)==(0);
        if ($215) {
         $216 = $8 | $213;
         HEAP32[46277] = $216;
         $$pre$i = ((($212)) + 8|0);
         $$0$i = $212;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $217 = ((($212)) + 8|0);
         $218 = HEAP32[$217>>2]|0;
         $$0$i = $218;$$pre$phi$iZ2D = $217;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $209;
        $219 = ((($$0$i)) + 12|0);
        HEAP32[$219>>2] = $209;
        $220 = ((($209)) + 8|0);
        HEAP32[$220>>2] = $$0$i;
        $221 = ((($209)) + 12|0);
        HEAP32[$221>>2] = $212;
       }
       HEAP32[(185116)>>2] = $$0173$lcssa$i;
       HEAP32[(185128)>>2] = $147;
      }
      $222 = ((($$0172$lcssa$i)) + 8|0);
      $$0 = $222;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $223 = ($0>>>0)>(4294967231);
   if ($223) {
    $$0192 = -1;
   } else {
    $224 = (($0) + 11)|0;
    $225 = $224 & -8;
    $226 = HEAP32[(185112)>>2]|0;
    $227 = ($226|0)==(0);
    if ($227) {
     $$0192 = $225;
    } else {
     $228 = (0 - ($225))|0;
     $229 = $224 >>> 8;
     $230 = ($229|0)==(0);
     if ($230) {
      $$0336$i = 0;
     } else {
      $231 = ($225>>>0)>(16777215);
      if ($231) {
       $$0336$i = 31;
      } else {
       $232 = (($229) + 1048320)|0;
       $233 = $232 >>> 16;
       $234 = $233 & 8;
       $235 = $229 << $234;
       $236 = (($235) + 520192)|0;
       $237 = $236 >>> 16;
       $238 = $237 & 4;
       $239 = $238 | $234;
       $240 = $235 << $238;
       $241 = (($240) + 245760)|0;
       $242 = $241 >>> 16;
       $243 = $242 & 2;
       $244 = $239 | $243;
       $245 = (14 - ($244))|0;
       $246 = $240 << $243;
       $247 = $246 >>> 15;
       $248 = (($245) + ($247))|0;
       $249 = $248 << 1;
       $250 = (($248) + 7)|0;
       $251 = $225 >>> $250;
       $252 = $251 & 1;
       $253 = $252 | $249;
       $$0336$i = $253;
      }
     }
     $254 = (185412 + ($$0336$i<<2)|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = ($255|0)==(0|0);
     L74: do {
      if ($256) {
       $$2333$i = 0;$$3$i199 = 0;$$3328$i = $228;
       label = 57;
      } else {
       $257 = ($$0336$i|0)==(31);
       $258 = $$0336$i >>> 1;
       $259 = (25 - ($258))|0;
       $260 = $257 ? 0 : $259;
       $261 = $225 << $260;
       $$0320$i = 0;$$0325$i = $228;$$0331$i = $255;$$0337$i = $261;$$0340$i = 0;
       while(1) {
        $262 = ((($$0331$i)) + 4|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $263 & -8;
        $265 = (($264) - ($225))|0;
        $266 = ($265>>>0)<($$0325$i>>>0);
        if ($266) {
         $267 = ($265|0)==(0);
         if ($267) {
          $$43298$i = 0;$$43357$i = $$0331$i;$$49$i = $$0331$i;
          label = 61;
          break L74;
         } else {
          $$1321$i = $$0331$i;$$1326$i = $265;
         }
        } else {
         $$1321$i = $$0320$i;$$1326$i = $$0325$i;
        }
        $268 = ((($$0331$i)) + 20|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = $$0337$i >>> 31;
        $271 = (((($$0331$i)) + 16|0) + ($270<<2)|0);
        $272 = HEAP32[$271>>2]|0;
        $273 = ($269|0)==(0|0);
        $274 = ($269|0)==($272|0);
        $or$cond1$i198 = $273 | $274;
        $$1341$i = $or$cond1$i198 ? $$0340$i : $269;
        $275 = ($272|0)==(0|0);
        $not$3$i = $275 ^ 1;
        $276 = $not$3$i&1;
        $$0337$$i = $$0337$i << $276;
        if ($275) {
         $$2333$i = $$1341$i;$$3$i199 = $$1321$i;$$3328$i = $$1326$i;
         label = 57;
         break;
        } else {
         $$0320$i = $$1321$i;$$0325$i = $$1326$i;$$0331$i = $272;$$0337$i = $$0337$$i;$$0340$i = $$1341$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 57) {
      $277 = ($$2333$i|0)==(0|0);
      $278 = ($$3$i199|0)==(0|0);
      $or$cond$i200 = $277 & $278;
      if ($or$cond$i200) {
       $279 = 2 << $$0336$i;
       $280 = (0 - ($279))|0;
       $281 = $279 | $280;
       $282 = $226 & $281;
       $283 = ($282|0)==(0);
       if ($283) {
        $$0192 = $225;
        break;
       }
       $284 = (0 - ($282))|0;
       $285 = $282 & $284;
       $286 = (($285) + -1)|0;
       $287 = $286 >>> 12;
       $288 = $287 & 16;
       $289 = $286 >>> $288;
       $290 = $289 >>> 5;
       $291 = $290 & 8;
       $292 = $291 | $288;
       $293 = $289 >>> $291;
       $294 = $293 >>> 2;
       $295 = $294 & 4;
       $296 = $292 | $295;
       $297 = $293 >>> $295;
       $298 = $297 >>> 1;
       $299 = $298 & 2;
       $300 = $296 | $299;
       $301 = $297 >>> $299;
       $302 = $301 >>> 1;
       $303 = $302 & 1;
       $304 = $300 | $303;
       $305 = $301 >>> $303;
       $306 = (($304) + ($305))|0;
       $307 = (185412 + ($306<<2)|0);
       $308 = HEAP32[$307>>2]|0;
       $$4$ph$i = 0;$$4335$ph$i = $308;
      } else {
       $$4$ph$i = $$3$i199;$$4335$ph$i = $$2333$i;
      }
      $309 = ($$4335$ph$i|0)==(0|0);
      if ($309) {
       $$4$lcssa$i = $$4$ph$i;$$4329$lcssa$i = $$3328$i;
      } else {
       $$43298$i = $$3328$i;$$43357$i = $$4335$ph$i;$$49$i = $$4$ph$i;
       label = 61;
      }
     }
     if ((label|0) == 61) {
      while(1) {
       label = 0;
       $310 = ((($$43357$i)) + 4|0);
       $311 = HEAP32[$310>>2]|0;
       $312 = $311 & -8;
       $313 = (($312) - ($225))|0;
       $314 = ($313>>>0)<($$43298$i>>>0);
       $$$4329$i = $314 ? $313 : $$43298$i;
       $$4335$$4$i = $314 ? $$43357$i : $$49$i;
       $315 = ((($$43357$i)) + 16|0);
       $316 = HEAP32[$315>>2]|0;
       $317 = ($316|0)==(0|0);
       $$sink2$i202 = $317&1;
       $318 = (((($$43357$i)) + 16|0) + ($$sink2$i202<<2)|0);
       $319 = HEAP32[$318>>2]|0;
       $320 = ($319|0)==(0|0);
       if ($320) {
        $$4$lcssa$i = $$4335$$4$i;$$4329$lcssa$i = $$$4329$i;
        break;
       } else {
        $$43298$i = $$$4329$i;$$43357$i = $319;$$49$i = $$4335$$4$i;
        label = 61;
       }
      }
     }
     $321 = ($$4$lcssa$i|0)==(0|0);
     if ($321) {
      $$0192 = $225;
     } else {
      $322 = HEAP32[(185116)>>2]|0;
      $323 = (($322) - ($225))|0;
      $324 = ($$4329$lcssa$i>>>0)<($323>>>0);
      if ($324) {
       $325 = (($$4$lcssa$i) + ($225)|0);
       $326 = ($325>>>0)>($$4$lcssa$i>>>0);
       if (!($326)) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $327 = ((($$4$lcssa$i)) + 24|0);
       $328 = HEAP32[$327>>2]|0;
       $329 = ((($$4$lcssa$i)) + 12|0);
       $330 = HEAP32[$329>>2]|0;
       $331 = ($330|0)==($$4$lcssa$i|0);
       do {
        if ($331) {
         $336 = ((($$4$lcssa$i)) + 20|0);
         $337 = HEAP32[$336>>2]|0;
         $338 = ($337|0)==(0|0);
         if ($338) {
          $339 = ((($$4$lcssa$i)) + 16|0);
          $340 = HEAP32[$339>>2]|0;
          $341 = ($340|0)==(0|0);
          if ($341) {
           $$3349$i = 0;
           break;
          } else {
           $$1347$i = $340;$$1351$i = $339;
          }
         } else {
          $$1347$i = $337;$$1351$i = $336;
         }
         while(1) {
          $342 = ((($$1347$i)) + 20|0);
          $343 = HEAP32[$342>>2]|0;
          $344 = ($343|0)==(0|0);
          if (!($344)) {
           $$1347$i = $343;$$1351$i = $342;
           continue;
          }
          $345 = ((($$1347$i)) + 16|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($346|0)==(0|0);
          if ($347) {
           break;
          } else {
           $$1347$i = $346;$$1351$i = $345;
          }
         }
         HEAP32[$$1351$i>>2] = 0;
         $$3349$i = $$1347$i;
        } else {
         $332 = ((($$4$lcssa$i)) + 8|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = ((($333)) + 12|0);
         HEAP32[$334>>2] = $330;
         $335 = ((($330)) + 8|0);
         HEAP32[$335>>2] = $333;
         $$3349$i = $330;
        }
       } while(0);
       $348 = ($328|0)==(0|0);
       do {
        if ($348) {
         $431 = $226;
        } else {
         $349 = ((($$4$lcssa$i)) + 28|0);
         $350 = HEAP32[$349>>2]|0;
         $351 = (185412 + ($350<<2)|0);
         $352 = HEAP32[$351>>2]|0;
         $353 = ($$4$lcssa$i|0)==($352|0);
         if ($353) {
          HEAP32[$351>>2] = $$3349$i;
          $cond$i206 = ($$3349$i|0)==(0|0);
          if ($cond$i206) {
           $354 = 1 << $350;
           $355 = $354 ^ -1;
           $356 = $226 & $355;
           HEAP32[(185112)>>2] = $356;
           $431 = $356;
           break;
          }
         } else {
          $357 = ((($328)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)!=($$4$lcssa$i|0);
          $$sink3$i = $359&1;
          $360 = (((($328)) + 16|0) + ($$sink3$i<<2)|0);
          HEAP32[$360>>2] = $$3349$i;
          $361 = ($$3349$i|0)==(0|0);
          if ($361) {
           $431 = $226;
           break;
          }
         }
         $362 = ((($$3349$i)) + 24|0);
         HEAP32[$362>>2] = $328;
         $363 = ((($$4$lcssa$i)) + 16|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==(0|0);
         if (!($365)) {
          $366 = ((($$3349$i)) + 16|0);
          HEAP32[$366>>2] = $364;
          $367 = ((($364)) + 24|0);
          HEAP32[$367>>2] = $$3349$i;
         }
         $368 = ((($$4$lcssa$i)) + 20|0);
         $369 = HEAP32[$368>>2]|0;
         $370 = ($369|0)==(0|0);
         if ($370) {
          $431 = $226;
         } else {
          $371 = ((($$3349$i)) + 20|0);
          HEAP32[$371>>2] = $369;
          $372 = ((($369)) + 24|0);
          HEAP32[$372>>2] = $$3349$i;
          $431 = $226;
         }
        }
       } while(0);
       $373 = ($$4329$lcssa$i>>>0)<(16);
       do {
        if ($373) {
         $374 = (($$4329$lcssa$i) + ($225))|0;
         $375 = $374 | 3;
         $376 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$376>>2] = $375;
         $377 = (($$4$lcssa$i) + ($374)|0);
         $378 = ((($377)) + 4|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = $379 | 1;
         HEAP32[$378>>2] = $380;
        } else {
         $381 = $225 | 3;
         $382 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$382>>2] = $381;
         $383 = $$4329$lcssa$i | 1;
         $384 = ((($325)) + 4|0);
         HEAP32[$384>>2] = $383;
         $385 = (($325) + ($$4329$lcssa$i)|0);
         HEAP32[$385>>2] = $$4329$lcssa$i;
         $386 = $$4329$lcssa$i >>> 3;
         $387 = ($$4329$lcssa$i>>>0)<(256);
         if ($387) {
          $388 = $386 << 1;
          $389 = (185148 + ($388<<2)|0);
          $390 = HEAP32[46277]|0;
          $391 = 1 << $386;
          $392 = $390 & $391;
          $393 = ($392|0)==(0);
          if ($393) {
           $394 = $390 | $391;
           HEAP32[46277] = $394;
           $$pre$i207 = ((($389)) + 8|0);
           $$0345$i = $389;$$pre$phi$i208Z2D = $$pre$i207;
          } else {
           $395 = ((($389)) + 8|0);
           $396 = HEAP32[$395>>2]|0;
           $$0345$i = $396;$$pre$phi$i208Z2D = $395;
          }
          HEAP32[$$pre$phi$i208Z2D>>2] = $325;
          $397 = ((($$0345$i)) + 12|0);
          HEAP32[$397>>2] = $325;
          $398 = ((($325)) + 8|0);
          HEAP32[$398>>2] = $$0345$i;
          $399 = ((($325)) + 12|0);
          HEAP32[$399>>2] = $389;
          break;
         }
         $400 = $$4329$lcssa$i >>> 8;
         $401 = ($400|0)==(0);
         if ($401) {
          $$0339$i = 0;
         } else {
          $402 = ($$4329$lcssa$i>>>0)>(16777215);
          if ($402) {
           $$0339$i = 31;
          } else {
           $403 = (($400) + 1048320)|0;
           $404 = $403 >>> 16;
           $405 = $404 & 8;
           $406 = $400 << $405;
           $407 = (($406) + 520192)|0;
           $408 = $407 >>> 16;
           $409 = $408 & 4;
           $410 = $409 | $405;
           $411 = $406 << $409;
           $412 = (($411) + 245760)|0;
           $413 = $412 >>> 16;
           $414 = $413 & 2;
           $415 = $410 | $414;
           $416 = (14 - ($415))|0;
           $417 = $411 << $414;
           $418 = $417 >>> 15;
           $419 = (($416) + ($418))|0;
           $420 = $419 << 1;
           $421 = (($419) + 7)|0;
           $422 = $$4329$lcssa$i >>> $421;
           $423 = $422 & 1;
           $424 = $423 | $420;
           $$0339$i = $424;
          }
         }
         $425 = (185412 + ($$0339$i<<2)|0);
         $426 = ((($325)) + 28|0);
         HEAP32[$426>>2] = $$0339$i;
         $427 = ((($325)) + 16|0);
         $428 = ((($427)) + 4|0);
         HEAP32[$428>>2] = 0;
         HEAP32[$427>>2] = 0;
         $429 = 1 << $$0339$i;
         $430 = $431 & $429;
         $432 = ($430|0)==(0);
         if ($432) {
          $433 = $431 | $429;
          HEAP32[(185112)>>2] = $433;
          HEAP32[$425>>2] = $325;
          $434 = ((($325)) + 24|0);
          HEAP32[$434>>2] = $425;
          $435 = ((($325)) + 12|0);
          HEAP32[$435>>2] = $325;
          $436 = ((($325)) + 8|0);
          HEAP32[$436>>2] = $325;
          break;
         }
         $437 = HEAP32[$425>>2]|0;
         $438 = ($$0339$i|0)==(31);
         $439 = $$0339$i >>> 1;
         $440 = (25 - ($439))|0;
         $441 = $438 ? 0 : $440;
         $442 = $$4329$lcssa$i << $441;
         $$0322$i = $442;$$0323$i = $437;
         while(1) {
          $443 = ((($$0323$i)) + 4|0);
          $444 = HEAP32[$443>>2]|0;
          $445 = $444 & -8;
          $446 = ($445|0)==($$4329$lcssa$i|0);
          if ($446) {
           label = 97;
           break;
          }
          $447 = $$0322$i >>> 31;
          $448 = (((($$0323$i)) + 16|0) + ($447<<2)|0);
          $449 = $$0322$i << 1;
          $450 = HEAP32[$448>>2]|0;
          $451 = ($450|0)==(0|0);
          if ($451) {
           label = 96;
           break;
          } else {
           $$0322$i = $449;$$0323$i = $450;
          }
         }
         if ((label|0) == 96) {
          HEAP32[$448>>2] = $325;
          $452 = ((($325)) + 24|0);
          HEAP32[$452>>2] = $$0323$i;
          $453 = ((($325)) + 12|0);
          HEAP32[$453>>2] = $325;
          $454 = ((($325)) + 8|0);
          HEAP32[$454>>2] = $325;
          break;
         }
         else if ((label|0) == 97) {
          $455 = ((($$0323$i)) + 8|0);
          $456 = HEAP32[$455>>2]|0;
          $457 = ((($456)) + 12|0);
          HEAP32[$457>>2] = $325;
          HEAP32[$455>>2] = $325;
          $458 = ((($325)) + 8|0);
          HEAP32[$458>>2] = $456;
          $459 = ((($325)) + 12|0);
          HEAP32[$459>>2] = $$0323$i;
          $460 = ((($325)) + 24|0);
          HEAP32[$460>>2] = 0;
          break;
         }
        }
       } while(0);
       $461 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $461;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0192 = $225;
      }
     }
    }
   }
  }
 } while(0);
 $462 = HEAP32[(185116)>>2]|0;
 $463 = ($462>>>0)<($$0192>>>0);
 if (!($463)) {
  $464 = (($462) - ($$0192))|0;
  $465 = HEAP32[(185128)>>2]|0;
  $466 = ($464>>>0)>(15);
  if ($466) {
   $467 = (($465) + ($$0192)|0);
   HEAP32[(185128)>>2] = $467;
   HEAP32[(185116)>>2] = $464;
   $468 = $464 | 1;
   $469 = ((($467)) + 4|0);
   HEAP32[$469>>2] = $468;
   $470 = (($465) + ($462)|0);
   HEAP32[$470>>2] = $464;
   $471 = $$0192 | 3;
   $472 = ((($465)) + 4|0);
   HEAP32[$472>>2] = $471;
  } else {
   HEAP32[(185116)>>2] = 0;
   HEAP32[(185128)>>2] = 0;
   $473 = $462 | 3;
   $474 = ((($465)) + 4|0);
   HEAP32[$474>>2] = $473;
   $475 = (($465) + ($462)|0);
   $476 = ((($475)) + 4|0);
   $477 = HEAP32[$476>>2]|0;
   $478 = $477 | 1;
   HEAP32[$476>>2] = $478;
  }
  $479 = ((($465)) + 8|0);
  $$0 = $479;
  STACKTOP = sp;return ($$0|0);
 }
 $480 = HEAP32[(185120)>>2]|0;
 $481 = ($480>>>0)>($$0192>>>0);
 if ($481) {
  $482 = (($480) - ($$0192))|0;
  HEAP32[(185120)>>2] = $482;
  $483 = HEAP32[(185132)>>2]|0;
  $484 = (($483) + ($$0192)|0);
  HEAP32[(185132)>>2] = $484;
  $485 = $482 | 1;
  $486 = ((($484)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = $$0192 | 3;
  $488 = ((($483)) + 4|0);
  HEAP32[$488>>2] = $487;
  $489 = ((($483)) + 8|0);
  $$0 = $489;
  STACKTOP = sp;return ($$0|0);
 }
 $490 = HEAP32[46395]|0;
 $491 = ($490|0)==(0);
 if ($491) {
  HEAP32[(185588)>>2] = 4096;
  HEAP32[(185584)>>2] = 4096;
  HEAP32[(185592)>>2] = -1;
  HEAP32[(185596)>>2] = -1;
  HEAP32[(185600)>>2] = 0;
  HEAP32[(185552)>>2] = 0;
  $492 = $1;
  $493 = $492 & -16;
  $494 = $493 ^ 1431655768;
  HEAP32[46395] = $494;
  $498 = 4096;
 } else {
  $$pre$i195 = HEAP32[(185588)>>2]|0;
  $498 = $$pre$i195;
 }
 $495 = (($$0192) + 48)|0;
 $496 = (($$0192) + 47)|0;
 $497 = (($498) + ($496))|0;
 $499 = (0 - ($498))|0;
 $500 = $497 & $499;
 $501 = ($500>>>0)>($$0192>>>0);
 if (!($501)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $502 = HEAP32[(185548)>>2]|0;
 $503 = ($502|0)==(0);
 if (!($503)) {
  $504 = HEAP32[(185540)>>2]|0;
  $505 = (($504) + ($500))|0;
  $506 = ($505>>>0)<=($504>>>0);
  $507 = ($505>>>0)>($502>>>0);
  $or$cond1$i = $506 | $507;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $508 = HEAP32[(185552)>>2]|0;
 $509 = $508 & 4;
 $510 = ($509|0)==(0);
 L167: do {
  if ($510) {
   $511 = HEAP32[(185132)>>2]|0;
   $512 = ($511|0)==(0|0);
   L169: do {
    if ($512) {
     label = 118;
    } else {
     $$0$i20$i = (185556);
     while(1) {
      $513 = HEAP32[$$0$i20$i>>2]|0;
      $514 = ($513>>>0)>($511>>>0);
      if (!($514)) {
       $515 = ((($$0$i20$i)) + 4|0);
       $516 = HEAP32[$515>>2]|0;
       $517 = (($513) + ($516)|0);
       $518 = ($517>>>0)>($511>>>0);
       if ($518) {
        break;
       }
      }
      $519 = ((($$0$i20$i)) + 8|0);
      $520 = HEAP32[$519>>2]|0;
      $521 = ($520|0)==(0|0);
      if ($521) {
       label = 118;
       break L169;
      } else {
       $$0$i20$i = $520;
      }
     }
     $544 = (($497) - ($480))|0;
     $545 = $544 & $499;
     $546 = ($545>>>0)<(2147483647);
     if ($546) {
      $547 = (_sbrk(($545|0))|0);
      $548 = HEAP32[$$0$i20$i>>2]|0;
      $549 = HEAP32[$515>>2]|0;
      $550 = (($548) + ($549)|0);
      $551 = ($547|0)==($550|0);
      if ($551) {
       $552 = ($547|0)==((-1)|0);
       if ($552) {
        $$2234243136$i = $545;
       } else {
        $$723947$i = $545;$$748$i = $547;
        label = 135;
        break L167;
       }
      } else {
       $$2247$ph$i = $547;$$2253$ph$i = $545;
       label = 126;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 118) {
     $522 = (_sbrk(0)|0);
     $523 = ($522|0)==((-1)|0);
     if ($523) {
      $$2234243136$i = 0;
     } else {
      $524 = $522;
      $525 = HEAP32[(185584)>>2]|0;
      $526 = (($525) + -1)|0;
      $527 = $526 & $524;
      $528 = ($527|0)==(0);
      $529 = (($526) + ($524))|0;
      $530 = (0 - ($525))|0;
      $531 = $529 & $530;
      $532 = (($531) - ($524))|0;
      $533 = $528 ? 0 : $532;
      $$$i = (($533) + ($500))|0;
      $534 = HEAP32[(185540)>>2]|0;
      $535 = (($$$i) + ($534))|0;
      $536 = ($$$i>>>0)>($$0192>>>0);
      $537 = ($$$i>>>0)<(2147483647);
      $or$cond$i = $536 & $537;
      if ($or$cond$i) {
       $538 = HEAP32[(185548)>>2]|0;
       $539 = ($538|0)==(0);
       if (!($539)) {
        $540 = ($535>>>0)<=($534>>>0);
        $541 = ($535>>>0)>($538>>>0);
        $or$cond2$i = $540 | $541;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $542 = (_sbrk(($$$i|0))|0);
       $543 = ($542|0)==($522|0);
       if ($543) {
        $$723947$i = $$$i;$$748$i = $522;
        label = 135;
        break L167;
       } else {
        $$2247$ph$i = $542;$$2253$ph$i = $$$i;
        label = 126;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 126) {
     $553 = (0 - ($$2253$ph$i))|0;
     $554 = ($$2247$ph$i|0)!=((-1)|0);
     $555 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $555 & $554;
     $556 = ($495>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $556 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $566 = ($$2247$ph$i|0)==((-1)|0);
      if ($566) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 135;
       break L167;
      }
     }
     $557 = HEAP32[(185588)>>2]|0;
     $558 = (($496) - ($$2253$ph$i))|0;
     $559 = (($558) + ($557))|0;
     $560 = (0 - ($557))|0;
     $561 = $559 & $560;
     $562 = ($561>>>0)<(2147483647);
     if (!($562)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
     $563 = (_sbrk(($561|0))|0);
     $564 = ($563|0)==((-1)|0);
     if ($564) {
      (_sbrk(($553|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $565 = (($561) + ($$2253$ph$i))|0;
      $$723947$i = $565;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
    }
   } while(0);
   $567 = HEAP32[(185552)>>2]|0;
   $568 = $567 | 4;
   HEAP32[(185552)>>2] = $568;
   $$4236$i = $$2234243136$i;
   label = 133;
  } else {
   $$4236$i = 0;
   label = 133;
  }
 } while(0);
 if ((label|0) == 133) {
  $569 = ($500>>>0)<(2147483647);
  if ($569) {
   $570 = (_sbrk(($500|0))|0);
   $571 = (_sbrk(0)|0);
   $572 = ($570|0)!=((-1)|0);
   $573 = ($571|0)!=((-1)|0);
   $or$cond5$i = $572 & $573;
   $574 = ($570>>>0)<($571>>>0);
   $or$cond11$i = $574 & $or$cond5$i;
   $575 = $571;
   $576 = $570;
   $577 = (($575) - ($576))|0;
   $578 = (($$0192) + 40)|0;
   $579 = ($577>>>0)>($578>>>0);
   $$$4236$i = $579 ? $577 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $580 = ($570|0)==((-1)|0);
   $not$$i = $579 ^ 1;
   $581 = $580 | $not$$i;
   $or$cond49$i = $581 | $or$cond11$not$i;
   if (!($or$cond49$i)) {
    $$723947$i = $$$4236$i;$$748$i = $570;
    label = 135;
   }
  }
 }
 if ((label|0) == 135) {
  $582 = HEAP32[(185540)>>2]|0;
  $583 = (($582) + ($$723947$i))|0;
  HEAP32[(185540)>>2] = $583;
  $584 = HEAP32[(185544)>>2]|0;
  $585 = ($583>>>0)>($584>>>0);
  if ($585) {
   HEAP32[(185544)>>2] = $583;
  }
  $586 = HEAP32[(185132)>>2]|0;
  $587 = ($586|0)==(0|0);
  do {
   if ($587) {
    $588 = HEAP32[(185124)>>2]|0;
    $589 = ($588|0)==(0|0);
    $590 = ($$748$i>>>0)<($588>>>0);
    $or$cond12$i = $589 | $590;
    if ($or$cond12$i) {
     HEAP32[(185124)>>2] = $$748$i;
    }
    HEAP32[(185556)>>2] = $$748$i;
    HEAP32[(185560)>>2] = $$723947$i;
    HEAP32[(185568)>>2] = 0;
    $591 = HEAP32[46395]|0;
    HEAP32[(185144)>>2] = $591;
    HEAP32[(185140)>>2] = -1;
    HEAP32[(185160)>>2] = (185148);
    HEAP32[(185156)>>2] = (185148);
    HEAP32[(185168)>>2] = (185156);
    HEAP32[(185164)>>2] = (185156);
    HEAP32[(185176)>>2] = (185164);
    HEAP32[(185172)>>2] = (185164);
    HEAP32[(185184)>>2] = (185172);
    HEAP32[(185180)>>2] = (185172);
    HEAP32[(185192)>>2] = (185180);
    HEAP32[(185188)>>2] = (185180);
    HEAP32[(185200)>>2] = (185188);
    HEAP32[(185196)>>2] = (185188);
    HEAP32[(185208)>>2] = (185196);
    HEAP32[(185204)>>2] = (185196);
    HEAP32[(185216)>>2] = (185204);
    HEAP32[(185212)>>2] = (185204);
    HEAP32[(185224)>>2] = (185212);
    HEAP32[(185220)>>2] = (185212);
    HEAP32[(185232)>>2] = (185220);
    HEAP32[(185228)>>2] = (185220);
    HEAP32[(185240)>>2] = (185228);
    HEAP32[(185236)>>2] = (185228);
    HEAP32[(185248)>>2] = (185236);
    HEAP32[(185244)>>2] = (185236);
    HEAP32[(185256)>>2] = (185244);
    HEAP32[(185252)>>2] = (185244);
    HEAP32[(185264)>>2] = (185252);
    HEAP32[(185260)>>2] = (185252);
    HEAP32[(185272)>>2] = (185260);
    HEAP32[(185268)>>2] = (185260);
    HEAP32[(185280)>>2] = (185268);
    HEAP32[(185276)>>2] = (185268);
    HEAP32[(185288)>>2] = (185276);
    HEAP32[(185284)>>2] = (185276);
    HEAP32[(185296)>>2] = (185284);
    HEAP32[(185292)>>2] = (185284);
    HEAP32[(185304)>>2] = (185292);
    HEAP32[(185300)>>2] = (185292);
    HEAP32[(185312)>>2] = (185300);
    HEAP32[(185308)>>2] = (185300);
    HEAP32[(185320)>>2] = (185308);
    HEAP32[(185316)>>2] = (185308);
    HEAP32[(185328)>>2] = (185316);
    HEAP32[(185324)>>2] = (185316);
    HEAP32[(185336)>>2] = (185324);
    HEAP32[(185332)>>2] = (185324);
    HEAP32[(185344)>>2] = (185332);
    HEAP32[(185340)>>2] = (185332);
    HEAP32[(185352)>>2] = (185340);
    HEAP32[(185348)>>2] = (185340);
    HEAP32[(185360)>>2] = (185348);
    HEAP32[(185356)>>2] = (185348);
    HEAP32[(185368)>>2] = (185356);
    HEAP32[(185364)>>2] = (185356);
    HEAP32[(185376)>>2] = (185364);
    HEAP32[(185372)>>2] = (185364);
    HEAP32[(185384)>>2] = (185372);
    HEAP32[(185380)>>2] = (185372);
    HEAP32[(185392)>>2] = (185380);
    HEAP32[(185388)>>2] = (185380);
    HEAP32[(185400)>>2] = (185388);
    HEAP32[(185396)>>2] = (185388);
    HEAP32[(185408)>>2] = (185396);
    HEAP32[(185404)>>2] = (185396);
    $592 = (($$723947$i) + -40)|0;
    $593 = ((($$748$i)) + 8|0);
    $594 = $593;
    $595 = $594 & 7;
    $596 = ($595|0)==(0);
    $597 = (0 - ($594))|0;
    $598 = $597 & 7;
    $599 = $596 ? 0 : $598;
    $600 = (($$748$i) + ($599)|0);
    $601 = (($592) - ($599))|0;
    HEAP32[(185132)>>2] = $600;
    HEAP32[(185120)>>2] = $601;
    $602 = $601 | 1;
    $603 = ((($600)) + 4|0);
    HEAP32[$603>>2] = $602;
    $604 = (($$748$i) + ($592)|0);
    $605 = ((($604)) + 4|0);
    HEAP32[$605>>2] = 40;
    $606 = HEAP32[(185596)>>2]|0;
    HEAP32[(185136)>>2] = $606;
   } else {
    $$024367$i = (185556);
    while(1) {
     $607 = HEAP32[$$024367$i>>2]|0;
     $608 = ((($$024367$i)) + 4|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (($607) + ($609)|0);
     $611 = ($$748$i|0)==($610|0);
     if ($611) {
      label = 143;
      break;
     }
     $612 = ((($$024367$i)) + 8|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ($613|0)==(0|0);
     if ($614) {
      break;
     } else {
      $$024367$i = $613;
     }
    }
    if ((label|0) == 143) {
     $615 = ((($$024367$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($607>>>0)<=($586>>>0);
      $620 = ($$748$i>>>0)>($586>>>0);
      $or$cond50$i = $620 & $619;
      if ($or$cond50$i) {
       $621 = (($609) + ($$723947$i))|0;
       HEAP32[$608>>2] = $621;
       $622 = HEAP32[(185120)>>2]|0;
       $623 = (($622) + ($$723947$i))|0;
       $624 = ((($586)) + 8|0);
       $625 = $624;
       $626 = $625 & 7;
       $627 = ($626|0)==(0);
       $628 = (0 - ($625))|0;
       $629 = $628 & 7;
       $630 = $627 ? 0 : $629;
       $631 = (($586) + ($630)|0);
       $632 = (($623) - ($630))|0;
       HEAP32[(185132)>>2] = $631;
       HEAP32[(185120)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($631)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($586) + ($623)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(185596)>>2]|0;
       HEAP32[(185136)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(185124)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(185124)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124466$i = (185556);
    while(1) {
     $641 = HEAP32[$$124466$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 151;
      break;
     }
     $643 = ((($$124466$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      $$0$i$i$i = (185556);
      break;
     } else {
      $$124466$i = $644;
     }
    }
    if ((label|0) == 151) {
     $646 = ((($$124466$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124466$i>>2] = $$748$i;
      $650 = ((($$124466$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($586|0)==($668|0);
      do {
       if ($676) {
        $677 = HEAP32[(185120)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(185120)>>2] = $678;
        HEAP32[(185132)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(185128)>>2]|0;
        $682 = ($681|0)==($668|0);
        if ($682) {
         $683 = HEAP32[(185116)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(185116)>>2] = $684;
         HEAP32[(185128)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L234: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[46277]|0;
            $703 = $702 & $701;
            HEAP32[46277] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1264$i$i = $719;$$1266$i$i = $715;
              }
             } else {
              $$1264$i$i = $717;$$1266$i$i = $716;
             }
             while(1) {
              $721 = ((($$1264$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if (!($723)) {
               $$1264$i$i = $722;$$1266$i$i = $721;
               continue;
              }
              $724 = ((($$1264$i$i)) + 16|0);
              $725 = HEAP32[$724>>2]|0;
              $726 = ($725|0)==(0|0);
              if ($726) {
               break;
              } else {
               $$1264$i$i = $725;$$1266$i$i = $724;
              }
             }
             HEAP32[$$1266$i$i>>2] = 0;
             $$3$i$i = $$1264$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (185412 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($731|0)==($668|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(185112)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(185112)>>2] = $736;
             break L234;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $739 = ($738|0)!=($668|0);
             $$sink1$i$i = $739&1;
             $740 = (((($707)) + 16|0) + ($$sink1$i$i<<2)|0);
             HEAP32[$740>>2] = $$3$i$i;
             $741 = ($$3$i$i|0)==(0|0);
             if ($741) {
              break L234;
             }
            }
           } while(0);
           $742 = ((($$3$i$i)) + 24|0);
           HEAP32[$742>>2] = $707;
           $743 = ((($668)) + 16|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = ($744|0)==(0|0);
           if (!($745)) {
            $746 = ((($$3$i$i)) + 16|0);
            HEAP32[$746>>2] = $744;
            $747 = ((($744)) + 24|0);
            HEAP32[$747>>2] = $$3$i$i;
           }
           $748 = ((($743)) + 4|0);
           $749 = HEAP32[$748>>2]|0;
           $750 = ($749|0)==(0|0);
           if ($750) {
            break;
           }
           $751 = ((($$3$i$i)) + 20|0);
           HEAP32[$751>>2] = $749;
           $752 = ((($749)) + 24|0);
           HEAP32[$752>>2] = $$3$i$i;
          }
         } while(0);
         $753 = (($668) + ($692)|0);
         $754 = (($692) + ($673))|0;
         $$0$i$i = $753;$$0260$i$i = $754;
        } else {
         $$0$i$i = $668;$$0260$i$i = $673;
        }
        $755 = ((($$0$i$i)) + 4|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $756 & -2;
        HEAP32[$755>>2] = $757;
        $758 = $$0260$i$i | 1;
        $759 = ((($672)) + 4|0);
        HEAP32[$759>>2] = $758;
        $760 = (($672) + ($$0260$i$i)|0);
        HEAP32[$760>>2] = $$0260$i$i;
        $761 = $$0260$i$i >>> 3;
        $762 = ($$0260$i$i>>>0)<(256);
        if ($762) {
         $763 = $761 << 1;
         $764 = (185148 + ($763<<2)|0);
         $765 = HEAP32[46277]|0;
         $766 = 1 << $761;
         $767 = $765 & $766;
         $768 = ($767|0)==(0);
         if ($768) {
          $769 = $765 | $766;
          HEAP32[46277] = $769;
          $$pre$i17$i = ((($764)) + 8|0);
          $$0268$i$i = $764;$$pre$phi$i18$iZ2D = $$pre$i17$i;
         } else {
          $770 = ((($764)) + 8|0);
          $771 = HEAP32[$770>>2]|0;
          $$0268$i$i = $771;$$pre$phi$i18$iZ2D = $770;
         }
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $672;
         $772 = ((($$0268$i$i)) + 12|0);
         HEAP32[$772>>2] = $672;
         $773 = ((($672)) + 8|0);
         HEAP32[$773>>2] = $$0268$i$i;
         $774 = ((($672)) + 12|0);
         HEAP32[$774>>2] = $764;
         break;
        }
        $775 = $$0260$i$i >>> 8;
        $776 = ($775|0)==(0);
        do {
         if ($776) {
          $$0269$i$i = 0;
         } else {
          $777 = ($$0260$i$i>>>0)>(16777215);
          if ($777) {
           $$0269$i$i = 31;
           break;
          }
          $778 = (($775) + 1048320)|0;
          $779 = $778 >>> 16;
          $780 = $779 & 8;
          $781 = $775 << $780;
          $782 = (($781) + 520192)|0;
          $783 = $782 >>> 16;
          $784 = $783 & 4;
          $785 = $784 | $780;
          $786 = $781 << $784;
          $787 = (($786) + 245760)|0;
          $788 = $787 >>> 16;
          $789 = $788 & 2;
          $790 = $785 | $789;
          $791 = (14 - ($790))|0;
          $792 = $786 << $789;
          $793 = $792 >>> 15;
          $794 = (($791) + ($793))|0;
          $795 = $794 << 1;
          $796 = (($794) + 7)|0;
          $797 = $$0260$i$i >>> $796;
          $798 = $797 & 1;
          $799 = $798 | $795;
          $$0269$i$i = $799;
         }
        } while(0);
        $800 = (185412 + ($$0269$i$i<<2)|0);
        $801 = ((($672)) + 28|0);
        HEAP32[$801>>2] = $$0269$i$i;
        $802 = ((($672)) + 16|0);
        $803 = ((($802)) + 4|0);
        HEAP32[$803>>2] = 0;
        HEAP32[$802>>2] = 0;
        $804 = HEAP32[(185112)>>2]|0;
        $805 = 1 << $$0269$i$i;
        $806 = $804 & $805;
        $807 = ($806|0)==(0);
        if ($807) {
         $808 = $804 | $805;
         HEAP32[(185112)>>2] = $808;
         HEAP32[$800>>2] = $672;
         $809 = ((($672)) + 24|0);
         HEAP32[$809>>2] = $800;
         $810 = ((($672)) + 12|0);
         HEAP32[$810>>2] = $672;
         $811 = ((($672)) + 8|0);
         HEAP32[$811>>2] = $672;
         break;
        }
        $812 = HEAP32[$800>>2]|0;
        $813 = ($$0269$i$i|0)==(31);
        $814 = $$0269$i$i >>> 1;
        $815 = (25 - ($814))|0;
        $816 = $813 ? 0 : $815;
        $817 = $$0260$i$i << $816;
        $$0261$i$i = $817;$$0262$i$i = $812;
        while(1) {
         $818 = ((($$0262$i$i)) + 4|0);
         $819 = HEAP32[$818>>2]|0;
         $820 = $819 & -8;
         $821 = ($820|0)==($$0260$i$i|0);
         if ($821) {
          label = 192;
          break;
         }
         $822 = $$0261$i$i >>> 31;
         $823 = (((($$0262$i$i)) + 16|0) + ($822<<2)|0);
         $824 = $$0261$i$i << 1;
         $825 = HEAP32[$823>>2]|0;
         $826 = ($825|0)==(0|0);
         if ($826) {
          label = 191;
          break;
         } else {
          $$0261$i$i = $824;$$0262$i$i = $825;
         }
        }
        if ((label|0) == 191) {
         HEAP32[$823>>2] = $672;
         $827 = ((($672)) + 24|0);
         HEAP32[$827>>2] = $$0262$i$i;
         $828 = ((($672)) + 12|0);
         HEAP32[$828>>2] = $672;
         $829 = ((($672)) + 8|0);
         HEAP32[$829>>2] = $672;
         break;
        }
        else if ((label|0) == 192) {
         $830 = ((($$0262$i$i)) + 8|0);
         $831 = HEAP32[$830>>2]|0;
         $832 = ((($831)) + 12|0);
         HEAP32[$832>>2] = $672;
         HEAP32[$830>>2] = $672;
         $833 = ((($672)) + 8|0);
         HEAP32[$833>>2] = $831;
         $834 = ((($672)) + 12|0);
         HEAP32[$834>>2] = $$0262$i$i;
         $835 = ((($672)) + 24|0);
         HEAP32[$835>>2] = 0;
         break;
        }
       }
      } while(0);
      $960 = ((($660)) + 8|0);
      $$0 = $960;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (185556);
     }
    }
    while(1) {
     $836 = HEAP32[$$0$i$i$i>>2]|0;
     $837 = ($836>>>0)>($586>>>0);
     if (!($837)) {
      $838 = ((($$0$i$i$i)) + 4|0);
      $839 = HEAP32[$838>>2]|0;
      $840 = (($836) + ($839)|0);
      $841 = ($840>>>0)>($586>>>0);
      if ($841) {
       break;
      }
     }
     $842 = ((($$0$i$i$i)) + 8|0);
     $843 = HEAP32[$842>>2]|0;
     $$0$i$i$i = $843;
    }
    $844 = ((($840)) + -47|0);
    $845 = ((($844)) + 8|0);
    $846 = $845;
    $847 = $846 & 7;
    $848 = ($847|0)==(0);
    $849 = (0 - ($846))|0;
    $850 = $849 & 7;
    $851 = $848 ? 0 : $850;
    $852 = (($844) + ($851)|0);
    $853 = ((($586)) + 16|0);
    $854 = ($852>>>0)<($853>>>0);
    $855 = $854 ? $586 : $852;
    $856 = ((($855)) + 8|0);
    $857 = ((($855)) + 24|0);
    $858 = (($$723947$i) + -40)|0;
    $859 = ((($$748$i)) + 8|0);
    $860 = $859;
    $861 = $860 & 7;
    $862 = ($861|0)==(0);
    $863 = (0 - ($860))|0;
    $864 = $863 & 7;
    $865 = $862 ? 0 : $864;
    $866 = (($$748$i) + ($865)|0);
    $867 = (($858) - ($865))|0;
    HEAP32[(185132)>>2] = $866;
    HEAP32[(185120)>>2] = $867;
    $868 = $867 | 1;
    $869 = ((($866)) + 4|0);
    HEAP32[$869>>2] = $868;
    $870 = (($$748$i) + ($858)|0);
    $871 = ((($870)) + 4|0);
    HEAP32[$871>>2] = 40;
    $872 = HEAP32[(185596)>>2]|0;
    HEAP32[(185136)>>2] = $872;
    $873 = ((($855)) + 4|0);
    HEAP32[$873>>2] = 27;
    ;HEAP32[$856>>2]=HEAP32[(185556)>>2]|0;HEAP32[$856+4>>2]=HEAP32[(185556)+4>>2]|0;HEAP32[$856+8>>2]=HEAP32[(185556)+8>>2]|0;HEAP32[$856+12>>2]=HEAP32[(185556)+12>>2]|0;
    HEAP32[(185556)>>2] = $$748$i;
    HEAP32[(185560)>>2] = $$723947$i;
    HEAP32[(185568)>>2] = 0;
    HEAP32[(185564)>>2] = $856;
    $875 = $857;
    while(1) {
     $874 = ((($875)) + 4|0);
     HEAP32[$874>>2] = 7;
     $876 = ((($875)) + 8|0);
     $877 = ($876>>>0)<($840>>>0);
     if ($877) {
      $875 = $874;
     } else {
      break;
     }
    }
    $878 = ($855|0)==($586|0);
    if (!($878)) {
     $879 = $855;
     $880 = $586;
     $881 = (($879) - ($880))|0;
     $882 = HEAP32[$873>>2]|0;
     $883 = $882 & -2;
     HEAP32[$873>>2] = $883;
     $884 = $881 | 1;
     $885 = ((($586)) + 4|0);
     HEAP32[$885>>2] = $884;
     HEAP32[$855>>2] = $881;
     $886 = $881 >>> 3;
     $887 = ($881>>>0)<(256);
     if ($887) {
      $888 = $886 << 1;
      $889 = (185148 + ($888<<2)|0);
      $890 = HEAP32[46277]|0;
      $891 = 1 << $886;
      $892 = $890 & $891;
      $893 = ($892|0)==(0);
      if ($893) {
       $894 = $890 | $891;
       HEAP32[46277] = $894;
       $$pre$i$i = ((($889)) + 8|0);
       $$0206$i$i = $889;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $895 = ((($889)) + 8|0);
       $896 = HEAP32[$895>>2]|0;
       $$0206$i$i = $896;$$pre$phi$i$iZ2D = $895;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $586;
      $897 = ((($$0206$i$i)) + 12|0);
      HEAP32[$897>>2] = $586;
      $898 = ((($586)) + 8|0);
      HEAP32[$898>>2] = $$0206$i$i;
      $899 = ((($586)) + 12|0);
      HEAP32[$899>>2] = $889;
      break;
     }
     $900 = $881 >>> 8;
     $901 = ($900|0)==(0);
     if ($901) {
      $$0207$i$i = 0;
     } else {
      $902 = ($881>>>0)>(16777215);
      if ($902) {
       $$0207$i$i = 31;
      } else {
       $903 = (($900) + 1048320)|0;
       $904 = $903 >>> 16;
       $905 = $904 & 8;
       $906 = $900 << $905;
       $907 = (($906) + 520192)|0;
       $908 = $907 >>> 16;
       $909 = $908 & 4;
       $910 = $909 | $905;
       $911 = $906 << $909;
       $912 = (($911) + 245760)|0;
       $913 = $912 >>> 16;
       $914 = $913 & 2;
       $915 = $910 | $914;
       $916 = (14 - ($915))|0;
       $917 = $911 << $914;
       $918 = $917 >>> 15;
       $919 = (($916) + ($918))|0;
       $920 = $919 << 1;
       $921 = (($919) + 7)|0;
       $922 = $881 >>> $921;
       $923 = $922 & 1;
       $924 = $923 | $920;
       $$0207$i$i = $924;
      }
     }
     $925 = (185412 + ($$0207$i$i<<2)|0);
     $926 = ((($586)) + 28|0);
     HEAP32[$926>>2] = $$0207$i$i;
     $927 = ((($586)) + 20|0);
     HEAP32[$927>>2] = 0;
     HEAP32[$853>>2] = 0;
     $928 = HEAP32[(185112)>>2]|0;
     $929 = 1 << $$0207$i$i;
     $930 = $928 & $929;
     $931 = ($930|0)==(0);
     if ($931) {
      $932 = $928 | $929;
      HEAP32[(185112)>>2] = $932;
      HEAP32[$925>>2] = $586;
      $933 = ((($586)) + 24|0);
      HEAP32[$933>>2] = $925;
      $934 = ((($586)) + 12|0);
      HEAP32[$934>>2] = $586;
      $935 = ((($586)) + 8|0);
      HEAP32[$935>>2] = $586;
      break;
     }
     $936 = HEAP32[$925>>2]|0;
     $937 = ($$0207$i$i|0)==(31);
     $938 = $$0207$i$i >>> 1;
     $939 = (25 - ($938))|0;
     $940 = $937 ? 0 : $939;
     $941 = $881 << $940;
     $$0201$i$i = $941;$$0202$i$i = $936;
     while(1) {
      $942 = ((($$0202$i$i)) + 4|0);
      $943 = HEAP32[$942>>2]|0;
      $944 = $943 & -8;
      $945 = ($944|0)==($881|0);
      if ($945) {
       label = 213;
       break;
      }
      $946 = $$0201$i$i >>> 31;
      $947 = (((($$0202$i$i)) + 16|0) + ($946<<2)|0);
      $948 = $$0201$i$i << 1;
      $949 = HEAP32[$947>>2]|0;
      $950 = ($949|0)==(0|0);
      if ($950) {
       label = 212;
       break;
      } else {
       $$0201$i$i = $948;$$0202$i$i = $949;
      }
     }
     if ((label|0) == 212) {
      HEAP32[$947>>2] = $586;
      $951 = ((($586)) + 24|0);
      HEAP32[$951>>2] = $$0202$i$i;
      $952 = ((($586)) + 12|0);
      HEAP32[$952>>2] = $586;
      $953 = ((($586)) + 8|0);
      HEAP32[$953>>2] = $586;
      break;
     }
     else if ((label|0) == 213) {
      $954 = ((($$0202$i$i)) + 8|0);
      $955 = HEAP32[$954>>2]|0;
      $956 = ((($955)) + 12|0);
      HEAP32[$956>>2] = $586;
      HEAP32[$954>>2] = $586;
      $957 = ((($586)) + 8|0);
      HEAP32[$957>>2] = $955;
      $958 = ((($586)) + 12|0);
      HEAP32[$958>>2] = $$0202$i$i;
      $959 = ((($586)) + 24|0);
      HEAP32[$959>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $961 = HEAP32[(185120)>>2]|0;
  $962 = ($961>>>0)>($$0192>>>0);
  if ($962) {
   $963 = (($961) - ($$0192))|0;
   HEAP32[(185120)>>2] = $963;
   $964 = HEAP32[(185132)>>2]|0;
   $965 = (($964) + ($$0192)|0);
   HEAP32[(185132)>>2] = $965;
   $966 = $963 | 1;
   $967 = ((($965)) + 4|0);
   HEAP32[$967>>2] = $966;
   $968 = $$0192 | 3;
   $969 = ((($964)) + 4|0);
   HEAP32[$969>>2] = $968;
   $970 = ((($964)) + 8|0);
   $$0 = $970;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $971 = (___errno_location()|0);
 HEAP32[$971>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0195$i = 0, $$0195$in$i = 0, $$0348 = 0, $$0349 = 0, $$0361 = 0, $$0368 = 0, $$1 = 0, $$1347 = 0, $$1352 = 0, $$1355 = 0, $$1363 = 0, $$1367 = 0, $$2 = 0, $$3 = 0, $$3365 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond373 = 0;
 var $cond374 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(185124)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(185128)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1347 = $15;$88 = $14;
     break;
    }
    HEAP32[(185116)>>2] = $15;
    $83 = $80 & -2;
    HEAP32[$79>>2] = $83;
    $84 = $15 | 1;
    $85 = ((($14)) + 4|0);
    HEAP32[$85>>2] = $84;
    $86 = (($14) + ($15)|0);
    HEAP32[$86>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[46277]|0;
     $29 = $28 & $27;
     HEAP32[46277] = $29;
     $$1 = $14;$$1347 = $15;$88 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1347 = $15;$88 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1352 = $45;$$1355 = $41;
      }
     } else {
      $$1352 = $43;$$1355 = $42;
     }
     while(1) {
      $47 = ((($$1352)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $$1352 = $48;$$1355 = $47;
       continue;
      }
      $50 = ((($$1352)) + 16|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       break;
      } else {
       $$1352 = $51;$$1355 = $50;
      }
     }
     HEAP32[$$1355>>2] = 0;
     $$3 = $$1352;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1347 = $15;$88 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (185412 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond373 = ($$3|0)==(0|0);
     if ($cond373) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(185112)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(185112)>>2] = $62;
      $$1 = $14;$$1347 = $15;$88 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)!=($14|0);
     $$sink3 = $65&1;
     $66 = (((($33)) + 16|0) + ($$sink3<<2)|0);
     HEAP32[$66>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1347 = $15;$88 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1347 = $15;$88 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1347 = $15;$88 = $14;
    }
   }
  } else {
   $$1 = $2;$$1347 = $6;$88 = $2;
  }
 } while(0);
 $87 = ($88>>>0)<($7>>>0);
 if (!($87)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(185132)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(185120)>>2]|0;
   $98 = (($97) + ($$1347))|0;
   HEAP32[(185120)>>2] = $98;
   HEAP32[(185132)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(185128)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(185128)>>2] = 0;
   HEAP32[(185116)>>2] = 0;
   return;
  }
  $103 = HEAP32[(185128)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(185116)>>2]|0;
   $106 = (($105) + ($$1347))|0;
   HEAP32[(185116)>>2] = $106;
   HEAP32[(185128)>>2] = $88;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($88) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1347))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[46277]|0;
     $122 = $121 & $120;
     HEAP32[46277] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3365 = 0;
        break;
       } else {
        $$1363 = $138;$$1367 = $134;
       }
      } else {
       $$1363 = $136;$$1367 = $135;
      }
      while(1) {
       $140 = ((($$1363)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if (!($142)) {
        $$1363 = $141;$$1367 = $140;
        continue;
       }
       $143 = ((($$1363)) + 16|0);
       $144 = HEAP32[$143>>2]|0;
       $145 = ($144|0)==(0|0);
       if ($145) {
        break;
       } else {
        $$1363 = $144;$$1367 = $143;
       }
      }
      HEAP32[$$1367>>2] = 0;
      $$3365 = $$1363;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3365 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (185412 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3365;
      $cond374 = ($$3365|0)==(0|0);
      if ($cond374) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(185112)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(185112)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)!=($7|0);
      $$sink5 = $158&1;
      $159 = (((($126)) + 16|0) + ($$sink5<<2)|0);
      HEAP32[$159>>2] = $$3365;
      $160 = ($$3365|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3365)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3365)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3365;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3365)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3365;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($88) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(185128)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(185116)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1347 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($88) + ($$1347)|0);
  HEAP32[$180>>2] = $$1347;
  $$2 = $$1347;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (185148 + ($183<<2)|0);
  $185 = HEAP32[46277]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[46277] = $189;
   $$pre = ((($184)) + 8|0);
   $$0368 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0368 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0368)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0368;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0361 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0361 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0361 = $219;
  }
 }
 $220 = (185412 + ($$0361<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0361;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(185112)>>2]|0;
 $225 = 1 << $$0361;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(185112)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ($$0361|0)==(31);
   $234 = $$0361 >>> 1;
   $235 = (25 - ($234))|0;
   $236 = $233 ? 0 : $235;
   $237 = $$2 << $236;
   $$0348 = $237;$$0349 = $232;
   while(1) {
    $238 = ((($$0349)) + 4|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = $239 & -8;
    $241 = ($240|0)==($$2|0);
    if ($241) {
     label = 73;
     break;
    }
    $242 = $$0348 >>> 31;
    $243 = (((($$0349)) + 16|0) + ($242<<2)|0);
    $244 = $$0348 << 1;
    $245 = HEAP32[$243>>2]|0;
    $246 = ($245|0)==(0|0);
    if ($246) {
     label = 72;
     break;
    } else {
     $$0348 = $244;$$0349 = $245;
    }
   }
   if ((label|0) == 72) {
    HEAP32[$243>>2] = $$1;
    $247 = ((($$1)) + 24|0);
    HEAP32[$247>>2] = $$0349;
    $248 = ((($$1)) + 12|0);
    HEAP32[$248>>2] = $$1;
    $249 = ((($$1)) + 8|0);
    HEAP32[$249>>2] = $$1;
    break;
   }
   else if ((label|0) == 73) {
    $250 = ((($$0349)) + 8|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = ((($251)) + 12|0);
    HEAP32[$252>>2] = $$1;
    HEAP32[$250>>2] = $$1;
    $253 = ((($$1)) + 8|0);
    HEAP32[$253>>2] = $251;
    $254 = ((($$1)) + 12|0);
    HEAP32[$254>>2] = $$0349;
    $255 = ((($$1)) + 24|0);
    HEAP32[$255>>2] = 0;
    break;
   }
  }
 } while(0);
 $256 = HEAP32[(185140)>>2]|0;
 $257 = (($256) + -1)|0;
 HEAP32[(185140)>>2] = $257;
 $258 = ($257|0)==(0);
 if ($258) {
  $$0195$in$i = (185564);
 } else {
  return;
 }
 while(1) {
  $$0195$i = HEAP32[$$0195$in$i>>2]|0;
  $259 = ($$0195$i|0)==(0|0);
  $260 = ((($$0195$i)) + 8|0);
  if ($259) {
   break;
  } else {
   $$0195$in$i = $260;
  }
 }
 HEAP32[(185140)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $$ = $7 ? $3 : -1;
   $$0 = $$;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 _memset(($8|0),0,($$0|0))|0;
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1246 = 0, $$1249 = 0, $$2 = 0, $$3 = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(185588)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = ((($5)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | 1;
  HEAP32[$24>>2] = $26;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $27 = HEAP32[(185132)>>2]|0;
 $28 = ($27|0)==($5|0);
 if ($28) {
  $29 = HEAP32[(185120)>>2]|0;
  $30 = (($29) + ($4))|0;
  $31 = ($30>>>0)>($1>>>0);
  $32 = (($30) - ($1))|0;
  $33 = (($0) + ($1)|0);
  if (!($31)) {
   $$2 = 0;
   return ($$2|0);
  }
  $34 = $32 | 1;
  $35 = ((($33)) + 4|0);
  $36 = $3 & 1;
  $37 = $36 | $1;
  $38 = $37 | 2;
  HEAP32[$2>>2] = $38;
  HEAP32[$35>>2] = $34;
  HEAP32[(185132)>>2] = $33;
  HEAP32[(185120)>>2] = $32;
  $$2 = $0;
  return ($$2|0);
 }
 $39 = HEAP32[(185128)>>2]|0;
 $40 = ($39|0)==($5|0);
 if ($40) {
  $41 = HEAP32[(185116)>>2]|0;
  $42 = (($41) + ($4))|0;
  $43 = ($42>>>0)<($1>>>0);
  if ($43) {
   $$2 = 0;
   return ($$2|0);
  }
  $44 = (($42) - ($1))|0;
  $45 = ($44>>>0)>(15);
  if ($45) {
   $46 = (($0) + ($1)|0);
   $47 = (($0) + ($42)|0);
   $48 = $3 & 1;
   $49 = $48 | $1;
   $50 = $49 | 2;
   HEAP32[$2>>2] = $50;
   $51 = ((($46)) + 4|0);
   $52 = $44 | 1;
   HEAP32[$51>>2] = $52;
   HEAP32[$47>>2] = $44;
   $53 = ((($47)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 & -2;
   HEAP32[$53>>2] = $55;
   $storemerge = $46;$storemerge1 = $44;
  } else {
   $56 = $3 & 1;
   $57 = $56 | $42;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($42)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(185116)>>2] = $storemerge1;
  HEAP32[(185128)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[46277]|0;
    $81 = $80 & $79;
    HEAP32[46277] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1246 = $97;$$1249 = $93;
      }
     } else {
      $$1246 = $95;$$1249 = $94;
     }
     while(1) {
      $99 = ((($$1246)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if (!($101)) {
       $$1246 = $100;$$1249 = $99;
       continue;
      }
      $102 = ((($$1246)) + 16|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($103|0)==(0|0);
      if ($104) {
       break;
      } else {
       $$1246 = $103;$$1249 = $102;
      }
     }
     HEAP32[$$1249>>2] = 0;
     $$3 = $$1246;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (185412 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==($5|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(185112)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(185112)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)!=($5|0);
     $$sink1 = $117&1;
     $118 = (((($85)) + 16|0) + ($$sink1<<2)|0);
     HEAP32[$118>>2] = $$3;
     $119 = ($$3|0)==(0|0);
     if ($119) {
      break;
     }
    }
    $120 = ((($$3)) + 24|0);
    HEAP32[$120>>2] = $85;
    $121 = ((($5)) + 16|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0|0);
    if (!($123)) {
     $124 = ((($$3)) + 16|0);
     HEAP32[$124>>2] = $122;
     $125 = ((($122)) + 24|0);
     HEAP32[$125>>2] = $$3;
    }
    $126 = ((($121)) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)==(0|0);
    if (!($128)) {
     $129 = ((($$3)) + 20|0);
     HEAP32[$129>>2] = $127;
     $130 = ((($127)) + 24|0);
     HEAP32[$130>>2] = $$3;
    }
   }
  }
 } while(0);
 $131 = ($70>>>0)<(16);
 if ($131) {
  $132 = $3 & 1;
  $133 = $68 | $132;
  $134 = $133 | 2;
  HEAP32[$2>>2] = $134;
  $135 = (($0) + ($68)|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | 1;
  HEAP32[$136>>2] = $138;
  $$2 = $0;
  return ($$2|0);
 } else {
  $139 = (($0) + ($1)|0);
  $140 = $3 & 1;
  $141 = $140 | $1;
  $142 = $141 | 2;
  HEAP32[$2>>2] = $142;
  $143 = ((($139)) + 4|0);
  $144 = $70 | 3;
  HEAP32[$143>>2] = $144;
  $145 = (($0) + ($68)|0);
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 | 1;
  HEAP32[$146>>2] = $148;
  _dispose_chunk($139,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0366 = 0, $$0367 = 0, $$0378 = 0, $$0385 = 0, $$1 = 0, $$1365 = 0, $$1373 = 0, $$1376 = 0, $$1380 = 0, $$1384 = 0, $$2 = 0, $$3 = 0, $$3382 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink2 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(185128)>>2]|0;
   $14 = ($13|0)==($11|0);
   if ($14) {
    $75 = ((($2)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & 3;
    $78 = ($77|0)==(3);
    if (!($78)) {
     $$1 = $11;$$1365 = $12;
     break;
    }
    HEAP32[(185116)>>2] = $12;
    $79 = $76 & -2;
    HEAP32[$75>>2] = $79;
    $80 = $12 | 1;
    $81 = ((($11)) + 4|0);
    HEAP32[$81>>2] = $80;
    HEAP32[$2>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[46277]|0;
     $25 = $24 & $23;
     HEAP32[46277] = $25;
     $$1 = $11;$$1365 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1365 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1373 = $41;$$1376 = $37;
      }
     } else {
      $$1373 = $39;$$1376 = $38;
     }
     while(1) {
      $43 = ((($$1373)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if (!($45)) {
       $$1373 = $44;$$1376 = $43;
       continue;
      }
      $46 = ((($$1373)) + 16|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      if ($48) {
       break;
      } else {
       $$1373 = $47;$$1376 = $46;
      }
     }
     HEAP32[$$1376>>2] = 0;
     $$3 = $$1373;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1365 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (185412 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==($11|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(185112)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(185112)>>2] = $58;
      $$1 = $11;$$1365 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)!=($11|0);
     $$sink2 = $61&1;
     $62 = (((($29)) + 16|0) + ($$sink2<<2)|0);
     HEAP32[$62>>2] = $$3;
     $63 = ($$3|0)==(0|0);
     if ($63) {
      $$1 = $11;$$1365 = $12;
      break;
     }
    }
    $64 = ((($$3)) + 24|0);
    HEAP32[$64>>2] = $29;
    $65 = ((($11)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     $68 = ((($$3)) + 16|0);
     HEAP32[$68>>2] = $66;
     $69 = ((($66)) + 24|0);
     HEAP32[$69>>2] = $$3;
    }
    $70 = ((($65)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if ($72) {
     $$1 = $11;$$1365 = $12;
    } else {
     $73 = ((($$3)) + 20|0);
     HEAP32[$73>>2] = $71;
     $74 = ((($71)) + 24|0);
     HEAP32[$74>>2] = $$3;
     $$1 = $11;$$1365 = $12;
    }
   }
  } else {
   $$1 = $0;$$1365 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(185132)>>2]|0;
  $87 = ($86|0)==($2|0);
  if ($87) {
   $88 = HEAP32[(185120)>>2]|0;
   $89 = (($88) + ($$1365))|0;
   HEAP32[(185120)>>2] = $89;
   HEAP32[(185132)>>2] = $$1;
   $90 = $89 | 1;
   $91 = ((($$1)) + 4|0);
   HEAP32[$91>>2] = $90;
   $92 = HEAP32[(185128)>>2]|0;
   $93 = ($$1|0)==($92|0);
   if (!($93)) {
    return;
   }
   HEAP32[(185128)>>2] = 0;
   HEAP32[(185116)>>2] = 0;
   return;
  }
  $94 = HEAP32[(185128)>>2]|0;
  $95 = ($94|0)==($2|0);
  if ($95) {
   $96 = HEAP32[(185116)>>2]|0;
   $97 = (($96) + ($$1365))|0;
   HEAP32[(185116)>>2] = $97;
   HEAP32[(185128)>>2] = $$1;
   $98 = $97 | 1;
   $99 = ((($$1)) + 4|0);
   HEAP32[$99>>2] = $98;
   $100 = (($$1) + ($97)|0);
   HEAP32[$100>>2] = $97;
   return;
  }
  $101 = $83 & -8;
  $102 = (($101) + ($$1365))|0;
  $103 = $83 >>> 3;
  $104 = ($83>>>0)<(256);
  do {
   if ($104) {
    $105 = ((($2)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($2)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==($106|0);
    if ($109) {
     $110 = 1 << $103;
     $111 = $110 ^ -1;
     $112 = HEAP32[46277]|0;
     $113 = $112 & $111;
     HEAP32[46277] = $113;
     break;
    } else {
     $114 = ((($106)) + 12|0);
     HEAP32[$114>>2] = $108;
     $115 = ((($108)) + 8|0);
     HEAP32[$115>>2] = $106;
     break;
    }
   } else {
    $116 = ((($2)) + 24|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($2)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==($2|0);
    do {
     if ($120) {
      $125 = ((($2)) + 16|0);
      $126 = ((($125)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)==(0|0);
      if ($128) {
       $129 = HEAP32[$125>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$3382 = 0;
        break;
       } else {
        $$1380 = $129;$$1384 = $125;
       }
      } else {
       $$1380 = $127;$$1384 = $126;
      }
      while(1) {
       $131 = ((($$1380)) + 20|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ($132|0)==(0|0);
       if (!($133)) {
        $$1380 = $132;$$1384 = $131;
        continue;
       }
       $134 = ((($$1380)) + 16|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ($135|0)==(0|0);
       if ($136) {
        break;
       } else {
        $$1380 = $135;$$1384 = $134;
       }
      }
      HEAP32[$$1384>>2] = 0;
      $$3382 = $$1380;
     } else {
      $121 = ((($2)) + 8|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 12|0);
      HEAP32[$123>>2] = $119;
      $124 = ((($119)) + 8|0);
      HEAP32[$124>>2] = $122;
      $$3382 = $119;
     }
    } while(0);
    $137 = ($117|0)==(0|0);
    if (!($137)) {
     $138 = ((($2)) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (185412 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if ($142) {
      HEAP32[$140>>2] = $$3382;
      $cond3 = ($$3382|0)==(0|0);
      if ($cond3) {
       $143 = 1 << $139;
       $144 = $143 ^ -1;
       $145 = HEAP32[(185112)>>2]|0;
       $146 = $145 & $144;
       HEAP32[(185112)>>2] = $146;
       break;
      }
     } else {
      $147 = ((($117)) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)!=($2|0);
      $$sink4 = $149&1;
      $150 = (((($117)) + 16|0) + ($$sink4<<2)|0);
      HEAP32[$150>>2] = $$3382;
      $151 = ($$3382|0)==(0|0);
      if ($151) {
       break;
      }
     }
     $152 = ((($$3382)) + 24|0);
     HEAP32[$152>>2] = $117;
     $153 = ((($2)) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)==(0|0);
     if (!($155)) {
      $156 = ((($$3382)) + 16|0);
      HEAP32[$156>>2] = $154;
      $157 = ((($154)) + 24|0);
      HEAP32[$157>>2] = $$3382;
     }
     $158 = ((($153)) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     if (!($160)) {
      $161 = ((($$3382)) + 20|0);
      HEAP32[$161>>2] = $159;
      $162 = ((($159)) + 24|0);
      HEAP32[$162>>2] = $$3382;
     }
    }
   }
  } while(0);
  $163 = $102 | 1;
  $164 = ((($$1)) + 4|0);
  HEAP32[$164>>2] = $163;
  $165 = (($$1) + ($102)|0);
  HEAP32[$165>>2] = $102;
  $166 = HEAP32[(185128)>>2]|0;
  $167 = ($$1|0)==($166|0);
  if ($167) {
   HEAP32[(185116)>>2] = $102;
   return;
  } else {
   $$2 = $102;
  }
 } else {
  $168 = $83 & -2;
  HEAP32[$82>>2] = $168;
  $169 = $$1365 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($$1) + ($$1365)|0);
  HEAP32[$171>>2] = $$1365;
  $$2 = $$1365;
 }
 $172 = $$2 >>> 3;
 $173 = ($$2>>>0)<(256);
 if ($173) {
  $174 = $172 << 1;
  $175 = (185148 + ($174<<2)|0);
  $176 = HEAP32[46277]|0;
  $177 = 1 << $172;
  $178 = $176 & $177;
  $179 = ($178|0)==(0);
  if ($179) {
   $180 = $176 | $177;
   HEAP32[46277] = $180;
   $$pre = ((($175)) + 8|0);
   $$0385 = $175;$$pre$phiZ2D = $$pre;
  } else {
   $181 = ((($175)) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $$0385 = $182;$$pre$phiZ2D = $181;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $183 = ((($$0385)) + 12|0);
  HEAP32[$183>>2] = $$1;
  $184 = ((($$1)) + 8|0);
  HEAP32[$184>>2] = $$0385;
  $185 = ((($$1)) + 12|0);
  HEAP32[$185>>2] = $175;
  return;
 }
 $186 = $$2 >>> 8;
 $187 = ($186|0)==(0);
 if ($187) {
  $$0378 = 0;
 } else {
  $188 = ($$2>>>0)>(16777215);
  if ($188) {
   $$0378 = 31;
  } else {
   $189 = (($186) + 1048320)|0;
   $190 = $189 >>> 16;
   $191 = $190 & 8;
   $192 = $186 << $191;
   $193 = (($192) + 520192)|0;
   $194 = $193 >>> 16;
   $195 = $194 & 4;
   $196 = $195 | $191;
   $197 = $192 << $195;
   $198 = (($197) + 245760)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 2;
   $201 = $196 | $200;
   $202 = (14 - ($201))|0;
   $203 = $197 << $200;
   $204 = $203 >>> 15;
   $205 = (($202) + ($204))|0;
   $206 = $205 << 1;
   $207 = (($205) + 7)|0;
   $208 = $$2 >>> $207;
   $209 = $208 & 1;
   $210 = $209 | $206;
   $$0378 = $210;
  }
 }
 $211 = (185412 + ($$0378<<2)|0);
 $212 = ((($$1)) + 28|0);
 HEAP32[$212>>2] = $$0378;
 $213 = ((($$1)) + 16|0);
 $214 = ((($$1)) + 20|0);
 HEAP32[$214>>2] = 0;
 HEAP32[$213>>2] = 0;
 $215 = HEAP32[(185112)>>2]|0;
 $216 = 1 << $$0378;
 $217 = $215 & $216;
 $218 = ($217|0)==(0);
 if ($218) {
  $219 = $215 | $216;
  HEAP32[(185112)>>2] = $219;
  HEAP32[$211>>2] = $$1;
  $220 = ((($$1)) + 24|0);
  HEAP32[$220>>2] = $211;
  $221 = ((($$1)) + 12|0);
  HEAP32[$221>>2] = $$1;
  $222 = ((($$1)) + 8|0);
  HEAP32[$222>>2] = $$1;
  return;
 }
 $223 = HEAP32[$211>>2]|0;
 $224 = ($$0378|0)==(31);
 $225 = $$0378 >>> 1;
 $226 = (25 - ($225))|0;
 $227 = $224 ? 0 : $226;
 $228 = $$2 << $227;
 $$0366 = $228;$$0367 = $223;
 while(1) {
  $229 = ((($$0367)) + 4|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = $230 & -8;
  $232 = ($231|0)==($$2|0);
  if ($232) {
   label = 69;
   break;
  }
  $233 = $$0366 >>> 31;
  $234 = (((($$0367)) + 16|0) + ($233<<2)|0);
  $235 = $$0366 << 1;
  $236 = HEAP32[$234>>2]|0;
  $237 = ($236|0)==(0|0);
  if ($237) {
   label = 68;
   break;
  } else {
   $$0366 = $235;$$0367 = $236;
  }
 }
 if ((label|0) == 68) {
  HEAP32[$234>>2] = $$1;
  $238 = ((($$1)) + 24|0);
  HEAP32[$238>>2] = $$0367;
  $239 = ((($$1)) + 12|0);
  HEAP32[$239>>2] = $$1;
  $240 = ((($$1)) + 8|0);
  HEAP32[$240>>2] = $$1;
  return;
 }
 else if ((label|0) == 69) {
  $241 = ((($$0367)) + 8|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = ((($242)) + 12|0);
  HEAP32[$243>>2] = $$1;
  HEAP32[$241>>2] = $$1;
  $244 = ((($$1)) + 8|0);
  HEAP32[$244>>2] = $242;
  $245 = ((($$1)) + 12|0);
  HEAP32[$245>>2] = $$0367;
  $246 = ((($$1)) + 24|0);
  HEAP32[$246>>2] = 0;
  return;
 }
}
function _realloc_in_place($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$1 = 0;
  return ($$1|0);
 }
 $3 = ($1>>>0)>(4294967231);
 if ($3) {
  $4 = (___errno_location()|0);
  HEAP32[$4>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 } else {
  $5 = ($1>>>0)<(11);
  $6 = (($1) + 11)|0;
  $7 = $6 & -8;
  $8 = $5 ? 16 : $7;
  $9 = ((($0)) + -8|0);
  $10 = (_try_realloc_chunk($9,$8)|0);
  $11 = ($10|0)==($9|0);
  $$ = $11 ? $0 : 0;
  $$1 = $$;
  return ($$1|0);
 }
 return (0)|0;
}
function _memalign($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)<(9);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$0 = $3;
  return ($$0|0);
 } else {
  $4 = (_internal_memalign($0,$1)|0);
  $$0 = $4;
  return ($$0|0);
 }
 return (0)|0;
}
function _internal_memalign($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0100 = 0, $$099 = 0, $$1 = 0, $$198 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)>(16);
 $$ = $2 ? $0 : 16;
 $3 = (($$) + -1)|0;
 $4 = $3 & $$;
 $5 = ($4|0)==(0);
 if ($5) {
  $$1 = $$;
 } else {
  $$099 = 16;
  while(1) {
   $6 = ($$099>>>0)<($$>>>0);
   $7 = $$099 << 1;
   if ($6) {
    $$099 = $7;
   } else {
    $$1 = $$099;
    break;
   }
  }
 }
 $8 = (-64 - ($$1))|0;
 $9 = ($8>>>0)>($1>>>0);
 if (!($9)) {
  $10 = (___errno_location()|0);
  HEAP32[$10>>2] = 12;
  $$198 = 0;
  return ($$198|0);
 }
 $11 = ($1>>>0)<(11);
 $12 = (($1) + 11)|0;
 $13 = $12 & -8;
 $14 = $11 ? 16 : $13;
 $15 = (($14) + 12)|0;
 $16 = (($15) + ($$1))|0;
 $17 = (_malloc($16)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  $$198 = 0;
  return ($$198|0);
 }
 $19 = ((($17)) + -8|0);
 $20 = $17;
 $21 = (($$1) + -1)|0;
 $22 = $21 & $20;
 $23 = ($22|0)==(0);
 do {
  if ($23) {
   $$0100 = $19;$72 = $19;
  } else {
   $24 = (($17) + ($$1)|0);
   $25 = ((($24)) + -1|0);
   $26 = $25;
   $27 = (0 - ($$1))|0;
   $28 = $26 & $27;
   $29 = $28;
   $30 = ((($29)) + -8|0);
   $31 = $30;
   $32 = $19;
   $33 = (($31) - ($32))|0;
   $34 = ($33>>>0)>(15);
   $35 = (($30) + ($$1)|0);
   $36 = $34 ? $30 : $35;
   $37 = $36;
   $38 = (($37) - ($32))|0;
   $39 = ((($17)) + -4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 & -8;
   $42 = (($41) - ($38))|0;
   $43 = $40 & 3;
   $44 = ($43|0)==(0);
   if ($44) {
    $45 = HEAP32[$19>>2]|0;
    $46 = (($45) + ($38))|0;
    HEAP32[$36>>2] = $46;
    $47 = ((($36)) + 4|0);
    HEAP32[$47>>2] = $42;
    $$0100 = $36;$72 = $36;
    break;
   } else {
    $48 = ((($36)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $49 & 1;
    $51 = $42 | $50;
    $52 = $51 | 2;
    HEAP32[$48>>2] = $52;
    $53 = (($36) + ($42)|0);
    $54 = ((($53)) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $55 | 1;
    HEAP32[$54>>2] = $56;
    $57 = HEAP32[$39>>2]|0;
    $58 = $57 & 1;
    $59 = $38 | $58;
    $60 = $59 | 2;
    HEAP32[$39>>2] = $60;
    $61 = HEAP32[$48>>2]|0;
    $62 = $61 | 1;
    HEAP32[$48>>2] = $62;
    _dispose_chunk($19,$38);
    $$0100 = $36;$72 = $36;
    break;
   }
  }
 } while(0);
 $63 = ((($$0100)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 3;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $67 = $64 & -8;
  $68 = (($14) + 16)|0;
  $69 = ($67>>>0)>($68>>>0);
  if ($69) {
   $70 = (($67) - ($14))|0;
   $71 = (($72) + ($14)|0);
   $73 = $64 & 1;
   $74 = $14 | $73;
   $75 = $74 | 2;
   HEAP32[$63>>2] = $75;
   $76 = ((($71)) + 4|0);
   $77 = $70 | 3;
   HEAP32[$76>>2] = $77;
   $78 = (($72) + ($67)|0);
   $79 = ((($78)) + 4|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $80 | 1;
   HEAP32[$79>>2] = $81;
   _dispose_chunk($71,$70);
  }
 }
 $82 = ((($72)) + 8|0);
 $$198 = $82;
 return ($$198|0);
}
function _posix_memalign($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(8);
 do {
  if ($3) {
   $4 = (_malloc($2)|0);
   $$2 = $4;
  } else {
   $5 = $1 >>> 2;
   $6 = $1 & 3;
   $7 = ($6|0)!=(0);
   $8 = ($5|0)==(0);
   $or$cond = $7 | $8;
   if ($or$cond) {
    $$1 = 22;
    return ($$1|0);
   }
   $9 = (($5) + 1073741823)|0;
   $10 = $9 & $5;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $$1 = 22;
    return ($$1|0);
   }
   $12 = (-64 - ($1))|0;
   $13 = ($12>>>0)<($2>>>0);
   if ($13) {
    $$1 = 12;
    return ($$1|0);
   } else {
    $14 = ($1>>>0)>(16);
    $$ = $14 ? $1 : 16;
    $15 = (_internal_memalign($$,$2)|0);
    $$2 = $15;
    break;
   }
  }
 } while(0);
 $16 = ($$2|0)==(0|0);
 if ($16) {
  $$1 = 12;
  return ($$1|0);
 }
 HEAP32[$0>>2] = $$2;
 $$1 = 0;
 return ($$1|0);
}
function _valloc($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP32[46395]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[(185588)>>2] = 4096;
  HEAP32[(185584)>>2] = 4096;
  HEAP32[(185592)>>2] = -1;
  HEAP32[(185596)>>2] = -1;
  HEAP32[(185600)>>2] = 0;
  HEAP32[(185552)>>2] = 0;
  $4 = $1;
  $5 = $4 & -16;
  $6 = $5 ^ 1431655768;
  HEAP32[46395] = $6;
  $7 = 4096;
  $8 = (_memalign($7,$0)|0);
  STACKTOP = sp;return ($8|0);
 } else {
  $$pre = HEAP32[(185584)>>2]|0;
  $7 = $$pre;
  $8 = (_memalign($7,$0)|0);
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function _pvalloc($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP32[46395]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[(185588)>>2] = 4096;
  HEAP32[(185584)>>2] = 4096;
  HEAP32[(185592)>>2] = -1;
  HEAP32[(185596)>>2] = -1;
  HEAP32[(185600)>>2] = 0;
  HEAP32[(185552)>>2] = 0;
  $4 = $1;
  $5 = $4 & -16;
  $6 = $5 ^ 1431655768;
  HEAP32[46395] = $6;
  $9 = 4096;
 } else {
  $$pre = HEAP32[(185584)>>2]|0;
  $9 = $$pre;
 }
 $7 = (($0) + -1)|0;
 $8 = (($7) + ($9))|0;
 $10 = (0 - ($9))|0;
 $11 = $8 & $10;
 $12 = (_memalign($9,$11)|0);
 STACKTOP = sp;return ($12|0);
}
function _independent_calloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $1;
 $4 = (_ialloc($0,$3,3,$2)|0);
 STACKTOP = sp;return ($4|0);
}
function _ialloc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0846 = 0, $$086 = 0, $$0875 = 0, $$089 = 0, $$091 = 0, $$093$in$lcssa = 0, $$093$in1 = 0, $$093$in1$us = 0, $$094 = 0, $$13 = 0, $$13$us = 0, $$188 = 0, $$190 = 0, $$192$lcssa = 0, $$1922$us = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = HEAP32[46395]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[(185588)>>2] = 4096;
  HEAP32[(185584)>>2] = 4096;
  HEAP32[(185592)>>2] = -1;
  HEAP32[(185596)>>2] = -1;
  HEAP32[(185600)>>2] = 0;
  HEAP32[(185552)>>2] = 0;
  $7 = $4;
  $8 = $7 & -16;
  $9 = $8 ^ 1431655768;
  HEAP32[46395] = $9;
 }
 $10 = ($3|0)==(0|0);
 $11 = ($0|0)==(0);
 do {
  if ($10) {
   if (!($11)) {
    $13 = $0 << 2;
    $14 = ($13>>>0)<(11);
    $15 = (($13) + 11)|0;
    $16 = $15 & -8;
    $17 = $14 ? 16 : $16;
    $$089 = 0;$$094 = $17;
    break;
   }
   $12 = (_malloc(0)|0);
   $$0 = $12;
   STACKTOP = sp;return ($$0|0);
  } else {
   if ($11) {
    $$0 = $3;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$089 = $3;$$094 = 0;
   }
  }
 } while(0);
 $18 = $2 & 1;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0846 = 0;$$0875 = 0;
  while(1) {
   $26 = (($1) + ($$0846<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27>>>0)<(11);
   $29 = (($27) + 11)|0;
   $30 = $29 & -8;
   $31 = $28 ? 16 : $30;
   $32 = (($31) + ($$0875))|0;
   $33 = (($$0846) + 1)|0;
   $34 = ($33|0)==($0|0);
   if ($34) {
    $$086 = 0;$$188 = $32;
    break;
   } else {
    $$0846 = $33;$$0875 = $32;
   }
  }
 } else {
  $20 = HEAP32[$1>>2]|0;
  $21 = ($20>>>0)<(11);
  $22 = (($20) + 11)|0;
  $23 = $22 & -8;
  $24 = $21 ? 16 : $23;
  $25 = Math_imul($24, $0)|0;
  $$086 = $24;$$188 = $25;
 }
 $35 = (($$094) + -4)|0;
 $36 = (($35) + ($$188))|0;
 $37 = (_malloc($36)|0);
 $38 = ($37|0)==(0|0);
 if ($38) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $39 = ((($37)) + -8|0);
 $40 = ((($37)) + -4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41 & -8;
 $43 = $2 & 2;
 $44 = ($43|0)==(0);
 if (!($44)) {
  $45 = (-4 - ($$094))|0;
  $46 = (($45) + ($42))|0;
  _memset(($37|0),0,($46|0))|0;
 }
 $47 = ($$089|0)==(0|0);
 $48 = (($39) + ($$188)|0);
 if ($47) {
  $49 = ((($48)) + 4|0);
  $50 = (($42) - ($$188))|0;
  $51 = $50 | 3;
  $52 = ((($48)) + 8|0);
  HEAP32[$49>>2] = $51;
  $$091 = $$188;$$190 = $52;
 } else {
  $$091 = $42;$$190 = $$089;
 }
 HEAP32[$$190>>2] = $37;
 $53 = (($0) + -1)|0;
 $54 = ($53|0)==(0);
 L27: do {
  if ($54) {
   $$093$in$lcssa = $39;$$192$lcssa = $$091;
  } else {
   $55 = ($$086|0)==(0);
   if ($55) {
    $$093$in1$us = $39;$$13$us = 0;$$1922$us = $$091;
    while(1) {
     $61 = (($1) + ($$13$us<<2)|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ($62>>>0)<(11);
     $64 = (($62) + 11)|0;
     $65 = $64 & -8;
     $66 = $63 ? 16 : $65;
     $67 = (($$1922$us) - ($66))|0;
     $68 = $66 | 3;
     $69 = ((($$093$in1$us)) + 4|0);
     HEAP32[$69>>2] = $68;
     $70 = (($$093$in1$us) + ($66)|0);
     $71 = (($$13$us) + 1)|0;
     $72 = ((($70)) + 8|0);
     $73 = (($$190) + ($71<<2)|0);
     HEAP32[$73>>2] = $72;
     $74 = ($71|0)==($53|0);
     if ($74) {
      $$093$in$lcssa = $70;$$192$lcssa = $67;
      break L27;
     } else {
      $$093$in1$us = $70;$$13$us = $71;$$1922$us = $67;
     }
    }
   }
   $56 = (1 - ($0))|0;
   $57 = Math_imul($$086, $56)|0;
   $58 = Math_imul($$086, $53)|0;
   $59 = (($58) + -8)|0;
   $60 = $$086 | 3;
   $$093$in1 = $39;$$13 = 0;
   while(1) {
    $75 = ((($$093$in1)) + 4|0);
    HEAP32[$75>>2] = $60;
    $76 = (($$093$in1) + ($$086)|0);
    $77 = (($$13) + 1)|0;
    $78 = ((($76)) + 8|0);
    $79 = (($$190) + ($77<<2)|0);
    HEAP32[$79>>2] = $78;
    $80 = ($77|0)==($53|0);
    if ($80) {
     break;
    } else {
     $$093$in1 = $76;$$13 = $77;
    }
   }
   $81 = (($$091) + ($57))|0;
   $scevgep = (($37) + ($59)|0);
   $$093$in$lcssa = $scevgep;$$192$lcssa = $81;
  }
 } while(0);
 $82 = $$192$lcssa | 3;
 $83 = ((($$093$in$lcssa)) + 4|0);
 HEAP32[$83>>2] = $82;
 $$0 = $$190;
 STACKTOP = sp;return ($$0|0);
}
function _independent_comalloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_ialloc($0,$1,0,$2)|0);
 return ($3|0);
}
function _bulk_free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01$i = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1<<2)|0);
 $3 = ($1|0)==(0);
 if ($3) {
  return 0;
 } else {
  $$01$i = $0;
 }
 while(1) {
  $4 = HEAP32[$$01$i>>2]|0;
  $5 = ($4|0)==(0|0);
  do {
   if ($5) {
    $$pre$i = ((($$01$i)) + 4|0);
    $$pre$phi$iZ2D = $$pre$i;
   } else {
    $6 = ((($4)) + -8|0);
    $7 = ((($4)) + -4|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = $8 & -8;
    HEAP32[$$01$i>>2] = 0;
    $10 = ((($$01$i)) + 4|0);
    $11 = (($6) + ($9)|0);
    $12 = ($10|0)==($2|0);
    if (!($12)) {
     $13 = HEAP32[$10>>2]|0;
     $14 = ((($11)) + 8|0);
     $15 = ($13|0)==($14|0);
     if ($15) {
      $16 = ((($11)) + 4|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = $17 & -8;
      $19 = (($18) + ($9))|0;
      $20 = $8 & 1;
      $21 = $20 | $19;
      $22 = $21 | 2;
      HEAP32[$7>>2] = $22;
      $23 = (($6) + ($19)|0);
      $24 = ((($23)) + 4|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = $25 | 1;
      HEAP32[$24>>2] = $26;
      HEAP32[$10>>2] = $4;
      $$pre$phi$iZ2D = $10;
      break;
     }
    }
    _dispose_chunk($6,$9);
    $$pre$phi$iZ2D = $10;
   }
  } while(0);
  $27 = ($$pre$phi$iZ2D|0)==($2|0);
  if ($27) {
   break;
  } else {
   $$01$i = $$pre$phi$iZ2D;
  }
 }
 return 0;
}
function _malloc_trim($0) {
 $0 = $0|0;
 var $$$i = 0, $$0$i$i = 0, $$4$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $or$cond$not$i = 0, $or$cond4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP32[46395]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[(185588)>>2] = 4096;
  HEAP32[(185584)>>2] = 4096;
  HEAP32[(185592)>>2] = -1;
  HEAP32[(185596)>>2] = -1;
  HEAP32[(185600)>>2] = 0;
  HEAP32[(185552)>>2] = 0;
  $4 = $1;
  $5 = $4 & -16;
  $6 = $5 ^ 1431655768;
  HEAP32[46395] = $6;
 }
 $7 = ($0>>>0)<(4294967232);
 if (!($7)) {
  $$4$i = 0;
  STACKTOP = sp;return ($$4$i|0);
 }
 $8 = HEAP32[(185132)>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$4$i = 0;
  STACKTOP = sp;return ($$4$i|0);
 }
 $10 = (($0) + 40)|0;
 $11 = HEAP32[(185120)>>2]|0;
 $12 = ($11>>>0)>($10>>>0);
 if ($12) {
  $13 = HEAP32[(185588)>>2]|0;
  $14 = (-41 - ($0))|0;
  $15 = (($14) + ($11))|0;
  $16 = (($15) + ($13))|0;
  $17 = (($16>>>0) / ($13>>>0))&-1;
  $$0$i$i = (185556);
  while(1) {
   $18 = HEAP32[$$0$i$i>>2]|0;
   $19 = ($18>>>0)>($8>>>0);
   if (!($19)) {
    $20 = ((($$0$i$i)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (($18) + ($21)|0);
    $23 = ($22>>>0)>($8>>>0);
    if ($23) {
     break;
    }
   }
   $24 = ((($$0$i$i)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $$0$i$i = $25;
  }
  $26 = (($17) + -1)|0;
  $27 = Math_imul($26, $13)|0;
  $28 = ((($$0$i$i)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 & 8;
  $31 = ($30|0)==(0);
  if ($31) {
   $32 = (_sbrk(0)|0);
   $33 = HEAP32[$$0$i$i>>2]|0;
   $34 = HEAP32[$20>>2]|0;
   $35 = (($33) + ($34)|0);
   $36 = ($32|0)==($35|0);
   if ($36) {
    $37 = ($27>>>0)>(2147483646);
    $38 = (-2147483648 - ($13))|0;
    $$$i = $37 ? $38 : $27;
    $39 = (0 - ($$$i))|0;
    $40 = (_sbrk(($39|0))|0);
    $41 = (_sbrk(0)|0);
    $42 = ($40|0)==((-1)|0);
    $43 = ($41>>>0)>=($32>>>0);
    $44 = $32;
    $45 = $41;
    $46 = (($44) - ($45))|0;
    $or$cond$not$i = $42 | $43;
    $47 = ($46|0)==(0);
    $or$cond4$i = $or$cond$not$i | $47;
    if (!($or$cond4$i)) {
     $48 = HEAP32[$20>>2]|0;
     $49 = (($48) - ($46))|0;
     HEAP32[$20>>2] = $49;
     $50 = HEAP32[(185540)>>2]|0;
     $51 = (($50) - ($46))|0;
     HEAP32[(185540)>>2] = $51;
     $52 = HEAP32[(185132)>>2]|0;
     $53 = HEAP32[(185120)>>2]|0;
     $54 = (($53) - ($46))|0;
     $55 = ((($52)) + 8|0);
     $56 = $55;
     $57 = $56 & 7;
     $58 = ($57|0)==(0);
     $59 = (0 - ($56))|0;
     $60 = $59 & 7;
     $61 = $58 ? 0 : $60;
     $62 = (($52) + ($61)|0);
     $63 = (($54) - ($61))|0;
     HEAP32[(185132)>>2] = $62;
     HEAP32[(185120)>>2] = $63;
     $64 = $63 | 1;
     $65 = ((($62)) + 4|0);
     HEAP32[$65>>2] = $64;
     $66 = (($52) + ($54)|0);
     $67 = ((($66)) + 4|0);
     HEAP32[$67>>2] = 40;
     $68 = HEAP32[(185596)>>2]|0;
     HEAP32[(185136)>>2] = $68;
     $$4$i = 1;
     STACKTOP = sp;return ($$4$i|0);
    }
   }
  }
 }
 $69 = HEAP32[(185120)>>2]|0;
 $70 = HEAP32[(185136)>>2]|0;
 $71 = ($69>>>0)>($70>>>0);
 if (!($71)) {
  $$4$i = 0;
  STACKTOP = sp;return ($$4$i|0);
 }
 HEAP32[(185136)>>2] = -1;
 $$4$i = 0;
 STACKTOP = sp;return ($$4$i|0);
}
function _malloc_footprint() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(185540)>>2]|0;
 return ($0|0);
}
function _malloc_max_footprint() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(185544)>>2]|0;
 return ($0|0);
}
function _malloc_footprint_limit() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(185548)>>2]|0;
 $1 = ($0|0)==(0);
 $2 = $1 ? -1 : $0;
 return ($2|0);
}
function _malloc_set_footprint_limit($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(-1);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = HEAP32[(185588)>>2]|0;
  $3 = (($0) + -1)|0;
  $4 = (($3) + ($2))|0;
  $5 = (0 - ($2))|0;
  $6 = $4 & $5;
  $$0 = $6;
 }
 HEAP32[(185548)>>2] = $$0;
 return ($$0|0);
}
function _mallinfo($0) {
 $0 = $0|0;
 var $$0$in6$i = 0, $$07020$i = 0, $$07119$i = 0, $$07218$i = 0, $$07417$i = 0, $$1$lcssa$ph$i = 0, $$15$i = 0, $$173$lcssa$ph$i = 0, $$1734$i = 0, $$175$lcssa$ph$i = 0, $$1753$i = 0, $$2$i = 0, $$276$i = 0, $$sroa$0$0$i = 0, $$sroa$10$0$$sroa_idx57$i = 0, $$sroa$10$0$i = 0, $$sroa$5$0$$sroa_idx40$i = 0, $$sroa$5$0$i = 0, $$sroa$6$0$$sroa_idx$i = 0, $$sroa$645$0$$sroa_idx46$i = 0;
 var $$sroa$645$0$i = 0, $$sroa$7$0$$sroa_idx48$i = 0, $$sroa$7$0$i = 0, $$sroa$8$0$$sroa_idx50$i = 0, $$sroa$852$0$$sroa_idx53$i = 0, $$sroa$852$0$i = 0, $$sroa$9$0$$sroa_idx55$i = 0, $$sroa$9$0$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP32[46395]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[(185588)>>2] = 4096;
  HEAP32[(185584)>>2] = 4096;
  HEAP32[(185592)>>2] = -1;
  HEAP32[(185596)>>2] = -1;
  HEAP32[(185600)>>2] = 0;
  HEAP32[(185552)>>2] = 0;
  $4 = $1;
  $5 = $4 & -16;
  $6 = $5 ^ 1431655768;
  HEAP32[46395] = $6;
 }
 $7 = HEAP32[(185132)>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$sroa$0$0$i = 0;$$sroa$10$0$i = 0;$$sroa$5$0$i = 0;$$sroa$645$0$i = 0;$$sroa$7$0$i = 0;$$sroa$852$0$i = 0;$$sroa$9$0$i = 0;
 } else {
  $9 = HEAP32[(185120)>>2]|0;
  $10 = (($9) + 40)|0;
  $$07020$i = (185556);$$07119$i = $10;$$07218$i = $10;$$07417$i = 1;
  while(1) {
   $11 = HEAP32[$$07020$i>>2]|0;
   $12 = ((($11)) + 8|0);
   $13 = $12;
   $14 = $13 & 7;
   $15 = ($14|0)==(0);
   $16 = (0 - ($13))|0;
   $17 = $16 & 7;
   $18 = $15 ? 0 : $17;
   $19 = (($11) + ($18)|0);
   $20 = ((($$07020$i)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($11) + ($21)|0);
   $$0$in6$i = $19;$$15$i = $$07119$i;$$1734$i = $$07218$i;$$1753$i = $$07417$i;
   while(1) {
    $23 = ($$0$in6$i>>>0)>=($22>>>0);
    $24 = ($7|0)==($$0$in6$i|0);
    $or$cond$i = $23 | $24;
    if ($or$cond$i) {
     $$1$lcssa$ph$i = $$15$i;$$173$lcssa$ph$i = $$1734$i;$$175$lcssa$ph$i = $$1753$i;
     break;
    }
    $25 = ((($$0$in6$i)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(7);
    if ($27) {
     $$1$lcssa$ph$i = $$15$i;$$173$lcssa$ph$i = $$1734$i;$$175$lcssa$ph$i = $$1753$i;
     break;
    }
    $28 = $26 & -8;
    $29 = (($28) + ($$15$i))|0;
    $30 = $26 & 3;
    $31 = ($30|0)==(1);
    $32 = $31&1;
    $$276$i = (($$1753$i) + ($32))|0;
    $33 = $31 ? $28 : 0;
    $$2$i = (($33) + ($$1734$i))|0;
    $34 = (($$0$in6$i) + ($28)|0);
    $35 = ($34>>>0)<($11>>>0);
    if ($35) {
     $$1$lcssa$ph$i = $29;$$173$lcssa$ph$i = $$2$i;$$175$lcssa$ph$i = $$276$i;
     break;
    } else {
     $$0$in6$i = $34;$$15$i = $29;$$1734$i = $$2$i;$$1753$i = $$276$i;
    }
   }
   $36 = ((($$07020$i)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0|0);
   if ($38) {
    break;
   } else {
    $$07020$i = $37;$$07119$i = $$1$lcssa$ph$i;$$07218$i = $$173$lcssa$ph$i;$$07417$i = $$175$lcssa$ph$i;
   }
  }
  $39 = HEAP32[(185540)>>2]|0;
  $40 = (($39) - ($$1$lcssa$ph$i))|0;
  $41 = HEAP32[(185544)>>2]|0;
  $42 = (($39) - ($$173$lcssa$ph$i))|0;
  $$sroa$0$0$i = $$1$lcssa$ph$i;$$sroa$10$0$i = $9;$$sroa$5$0$i = $$175$lcssa$ph$i;$$sroa$645$0$i = $40;$$sroa$7$0$i = $41;$$sroa$852$0$i = $42;$$sroa$9$0$i = $$173$lcssa$ph$i;
 }
 HEAP32[$0>>2] = $$sroa$0$0$i;
 $$sroa$5$0$$sroa_idx40$i = ((($0)) + 4|0);
 HEAP32[$$sroa$5$0$$sroa_idx40$i>>2] = $$sroa$5$0$i;
 $$sroa$6$0$$sroa_idx$i = ((($0)) + 8|0);
 $43 = $$sroa$6$0$$sroa_idx$i;
 $44 = $43;
 HEAP32[$44>>2] = 0;
 $45 = (($43) + 4)|0;
 $46 = $45;
 HEAP32[$46>>2] = 0;
 $$sroa$645$0$$sroa_idx46$i = ((($0)) + 16|0);
 HEAP32[$$sroa$645$0$$sroa_idx46$i>>2] = $$sroa$645$0$i;
 $$sroa$7$0$$sroa_idx48$i = ((($0)) + 20|0);
 HEAP32[$$sroa$7$0$$sroa_idx48$i>>2] = $$sroa$7$0$i;
 $$sroa$8$0$$sroa_idx50$i = ((($0)) + 24|0);
 HEAP32[$$sroa$8$0$$sroa_idx50$i>>2] = 0;
 $$sroa$852$0$$sroa_idx53$i = ((($0)) + 28|0);
 HEAP32[$$sroa$852$0$$sroa_idx53$i>>2] = $$sroa$852$0$i;
 $$sroa$9$0$$sroa_idx55$i = ((($0)) + 32|0);
 HEAP32[$$sroa$9$0$$sroa_idx55$i>>2] = $$sroa$9$0$i;
 $$sroa$10$0$$sroa_idx57$i = ((($0)) + 36|0);
 HEAP32[$$sroa$10$0$$sroa_idx57$i>>2] = $$sroa$10$0$i;
 STACKTOP = sp;return;
}
function _malloc_stats() {
 var $$0$in4$i = 0, $$03710$i = 0, $$0389$i = 0, $$039$i = 0, $$040$i = 0, $$1$lcssa$ph$i = 0, $$13$i = 0, $$2$i = 0, $$3$i = 0, $$neg2$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 20|0;
 $1 = HEAP32[46395]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  HEAP32[(185588)>>2] = 4096;
  HEAP32[(185584)>>2] = 4096;
  HEAP32[(185592)>>2] = -1;
  HEAP32[(185596)>>2] = -1;
  HEAP32[(185600)>>2] = 0;
  HEAP32[(185552)>>2] = 0;
  $3 = $0;
  $4 = $3 & -16;
  $5 = $4 ^ 1431655768;
  HEAP32[46395] = $5;
 }
 $6 = HEAP32[(185132)>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$039$i = 0;$$040$i = 0;$$3$i = 0;
  $38 = HEAP32[1870]|0;
  HEAP32[$vararg_buffer>>2] = $$040$i;
  (_fprintf($38,164398,$vararg_buffer)|0);
  HEAP32[$vararg_buffer1>>2] = $$039$i;
  (_fprintf($38,164424,$vararg_buffer1)|0);
  HEAP32[$vararg_buffer4>>2] = $$3$i;
  (_fprintf($38,164450,$vararg_buffer4)|0);
  STACKTOP = sp;return;
 }
 $8 = HEAP32[(185544)>>2]|0;
 $9 = HEAP32[(185540)>>2]|0;
 $10 = HEAP32[(185120)>>2]|0;
 $$neg2$i = (($9) + -40)|0;
 $11 = (($$neg2$i) - ($10))|0;
 $$03710$i = (185556);$$0389$i = $11;
 while(1) {
  $12 = HEAP32[$$03710$i>>2]|0;
  $13 = ((($12)) + 8|0);
  $14 = $13;
  $15 = $14 & 7;
  $16 = ($15|0)==(0);
  $17 = (0 - ($14))|0;
  $18 = $17 & 7;
  $19 = $16 ? 0 : $18;
  $20 = (($12) + ($19)|0);
  $21 = ((($$03710$i)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($12) + ($22)|0);
  $$0$in4$i = $20;$$13$i = $$0389$i;
  while(1) {
   $24 = ($$0$in4$i>>>0)>=($23>>>0);
   $25 = ($6|0)==($$0$in4$i|0);
   $or$cond$i = $24 | $25;
   if ($or$cond$i) {
    $$1$lcssa$ph$i = $$13$i;
    break;
   }
   $26 = ((($$0$in4$i)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(7);
   if ($28) {
    $$1$lcssa$ph$i = $$13$i;
    break;
   }
   $29 = $27 & 3;
   $30 = ($29|0)==(1);
   $31 = $27 & -8;
   $32 = $30 ? $31 : 0;
   $$2$i = (($$13$i) - ($32))|0;
   $33 = (($$0$in4$i) + ($31)|0);
   $34 = ($33>>>0)<($12>>>0);
   if ($34) {
    $$1$lcssa$ph$i = $$2$i;
    break;
   } else {
    $$0$in4$i = $33;$$13$i = $$2$i;
   }
  }
  $35 = ((($$03710$i)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(0|0);
  if ($37) {
   $$039$i = $9;$$040$i = $8;$$3$i = $$1$lcssa$ph$i;
   break;
  } else {
   $$03710$i = $36;$$0389$i = $$1$lcssa$ph$i;
  }
 }
 $38 = HEAP32[1870]|0;
 HEAP32[$vararg_buffer>>2] = $$040$i;
 (_fprintf($38,164398,$vararg_buffer)|0);
 HEAP32[$vararg_buffer1>>2] = $$039$i;
 (_fprintf($38,164424,$vararg_buffer1)|0);
 HEAP32[$vararg_buffer4>>2] = $$3$i;
 (_fprintf($38,164450,$vararg_buffer4)|0);
 STACKTOP = sp;return;
}
function _mallopt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = HEAP32[46395]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  HEAP32[(185588)>>2] = 4096;
  HEAP32[(185584)>>2] = 4096;
  HEAP32[(185592)>>2] = -1;
  HEAP32[(185596)>>2] = -1;
  HEAP32[(185600)>>2] = 0;
  HEAP32[(185552)>>2] = 0;
  $5 = $2;
  $6 = $5 & -16;
  $7 = $6 ^ 1431655768;
  HEAP32[46395] = $7;
 }
 switch ($0|0) {
 case -1:  {
  HEAP32[(185596)>>2] = $1;
  $$0$i = 1;
  break;
 }
 case -2:  {
  $8 = HEAP32[(185584)>>2]|0;
  $9 = ($8>>>0)>($1>>>0);
  if ($9) {
   $$0$i = 0;
  } else {
   $10 = (($1) + -1)|0;
   $11 = $10 & $1;
   $12 = ($11|0)==(0);
   if ($12) {
    HEAP32[(185588)>>2] = $1;
    $$0$i = 1;
   } else {
    $$0$i = 0;
   }
  }
  break;
 }
 case -3:  {
  HEAP32[(185592)>>2] = $1;
  $$0$i = 1;
  break;
 }
 default: {
  $$0$i = 0;
 }
 }
 STACKTOP = sp;return ($$0$i|0);
}
function _malloc_usable_size($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return 0;
 } else {
  $2 = ((($0)) + -4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 & 3;
  $5 = ($4|0)==(1);
  $6 = $3 & -8;
  $7 = ($4|0)==(0);
  $8 = $7 ? 8 : 4;
  $9 = (($6) - ($8))|0;
  $$ = $5 ? 0 : $9;
  return ($$|0);
 }
 return (0)|0;
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[7 & 63]($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$27 = $17;
   while(1) {
    $26 = ($27|0)<(0);
    if ($26) {
     break;
    }
    $35 = (($$04855) - ($27))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($27>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($27) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$27 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (185748|0);
}
function _dummy_565($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $$cast = $27;
   $29 = (($$cast) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($$cast)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$$cast>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 2;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function ___synccall($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_vi[$0 & 63]($1);
 return;
}
function _aligned_alloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (_posix_memalign($2,$0,$1)|0);
 $4 = ($3|0)==(0);
 $5 = HEAP32[$2>>2]|0;
 $6 = $4 ? $5 : 0;
 STACKTOP = sp;return ($6|0);
}
function _strlwr($0) {
 $0 = $0|0;
 var $$07 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $$07 = $0;$4 = $1;
  while(1) {
   $3 = $4 << 24 >> 24;
   $5 = (_tolower($3)|0);
   $6 = $5&255;
   HEAP8[$$07>>0] = $6;
   $7 = ((($$07)) + 1|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    break;
   } else {
    $$07 = $7;$4 = $8;
   }
  }
 }
 return ($0|0);
}
function _tolower($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isupper($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 | 32;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _isupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -65)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _strtoull_l($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_strtoull($0,$1,$2)|0);
 $5 = tempRet0;
 tempRet0 = ($5);
 return ($4|0);
}
function _strtoull($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_737($0,$1,$2,-1,-1)|0);
 $4 = tempRet0;
 tempRet0 = ($4);
 return ($3|0);
}
function _strtox_737($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 HEAP32[$11>>2] = -1;
 ___shlim($5,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = tempRet0;
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 108|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = HEAP32[$10>>2]|0;
  $19 = (($17) + ($16))|0;
  $20 = (($19) - ($18))|0;
  $21 = (($0) + ($20)|0);
  HEAP32[$1>>2] = $21;
 }
 tempRet0 = ($13);
 STACKTOP = sp;return ($12|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 $11 = $4;
 $12 = $6;
 $13 = (($12) + ($1)|0);
 $$sink = $or$cond ? $13 : $11;
 $14 = ((($0)) + 100|0);
 HEAP32[$14>>2] = $$sink;
 return;
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154222 = 0, $$0157 = 0, $$0157$ = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0;
 var $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond187 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $8 = (___errno_location()|0);
   HEAP32[$8>>2] = 22;
   $289 = 0;$290 = 0;
  } else {
   $6 = ((($0)) + 4|0);
   $7 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$6>>2]|0;
    $10 = HEAP32[$7>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$6>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $19 = ($16|0)==(45);
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$6>>2]|0;
     $22 = HEAP32[$7>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$6>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$6>>2]|0;
     $33 = HEAP32[$7>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$6>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160169 = $40;$$1165167 = 8;
       label = 46;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$6>>2]|0;
     $43 = HEAP32[$7>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$6>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((164477) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$7>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$6>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$6>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $289 = 0;$290 = 0;
       break L1;
      }
      if ($54) {
       $289 = 0;$290 = 0;
       break L1;
      }
      $58 = HEAP32[$6>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$6>>2] = $59;
      $289 = 0;$290 = 0;
      break L1;
     } else {
      $$1160169 = $50;$$1165167 = 16;
      label = 46;
     }
    } else {
     $$166 = $28 ? 10 : $1;
     $60 = ((164477) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($$166>>>0)>($62>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $$166;
      label = 32;
     } else {
      $64 = HEAP32[$7>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$6>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$6>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $289 = 0;$290 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $69 = ($$1165|0)==(10);
     if ($69) {
      $70 = (($$1160) + -48)|0;
      $71 = ($70>>>0)<(10);
      if ($71) {
       $$0154222 = 0;$74 = $70;
       while(1) {
        $72 = ($$0154222*10)|0;
        $73 = (($72) + ($74))|0;
        $75 = HEAP32[$6>>2]|0;
        $76 = HEAP32[$7>>2]|0;
        $77 = ($75>>>0)<($76>>>0);
        if ($77) {
         $78 = ((($75)) + 1|0);
         HEAP32[$6>>2] = $78;
         $79 = HEAP8[$75>>0]|0;
         $80 = $79&255;
         $$2161$be = $80;
        } else {
         $81 = (___shgetc($0)|0);
         $$2161$be = $81;
        }
        $82 = (($$2161$be) + -48)|0;
        $83 = ($82>>>0)<(10);
        $84 = ($73>>>0)<(429496729);
        $85 = $83 & $84;
        if ($85) {
         $$0154222 = $73;$74 = $82;
        } else {
         break;
        }
       }
       $$2161$lcssa = $$2161$be;$291 = $73;$292 = 0;
      } else {
       $$2161$lcssa = $$1160;$291 = 0;$292 = 0;
      }
      $86 = (($$2161$lcssa) + -48)|0;
      $87 = ($86>>>0)<(10);
      if ($87) {
       $$3162215 = $$2161$lcssa;$88 = $291;$89 = $292;$93 = $86;
       while(1) {
        $90 = (___muldi3(($88|0),($89|0),10,0)|0);
        $91 = tempRet0;
        $92 = ($93|0)<(0);
        $94 = $92 << 31 >> 31;
        $95 = $93 ^ -1;
        $96 = $94 ^ -1;
        $97 = ($91>>>0)>($96>>>0);
        $98 = ($90>>>0)>($95>>>0);
        $99 = ($91|0)==($96|0);
        $100 = $99 & $98;
        $101 = $97 | $100;
        if ($101) {
         $$1165168 = 10;$$8 = $$3162215;$293 = $88;$294 = $89;
         label = 72;
         break L43;
        }
        $102 = (_i64Add(($90|0),($91|0),($93|0),($94|0))|0);
        $103 = tempRet0;
        $104 = HEAP32[$6>>2]|0;
        $105 = HEAP32[$7>>2]|0;
        $106 = ($104>>>0)<($105>>>0);
        if ($106) {
         $107 = ((($104)) + 1|0);
         HEAP32[$6>>2] = $107;
         $108 = HEAP8[$104>>0]|0;
         $109 = $108&255;
         $$3162$be = $109;
        } else {
         $110 = (___shgetc($0)|0);
         $$3162$be = $110;
        }
        $111 = (($$3162$be) + -48)|0;
        $112 = ($111>>>0)<(10);
        $113 = ($103>>>0)<(429496729);
        $114 = ($102>>>0)<(2576980378);
        $115 = ($103|0)==(429496729);
        $116 = $115 & $114;
        $117 = $113 | $116;
        $or$cond7 = $112 & $117;
        if ($or$cond7) {
         $$3162215 = $$3162$be;$88 = $102;$89 = $103;$93 = $111;
        } else {
         break;
        }
       }
       $118 = ($111>>>0)>(9);
       if ($118) {
        $$1158 = $$0157;$263 = $103;$265 = $102;
       } else {
        $$1165168 = 10;$$8 = $$3162$be;$293 = $102;$294 = $103;
        label = 72;
       }
      } else {
       $$1158 = $$0157;$263 = $292;$265 = $291;
      }
     } else {
      $$1160169 = $$1160;$$1165167 = $$1165;
      label = 46;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 46) {
     $119 = (($$1165167) + -1)|0;
     $120 = $119 & $$1165167;
     $121 = ($120|0)==(0);
     if ($121) {
      $126 = ($$1165167*23)|0;
      $127 = $126 >>> 5;
      $128 = $127 & 7;
      $129 = (164733 + ($128)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = ((164477) + ($$1160169)|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133&255;
      $135 = ($$1165167>>>0)>($134>>>0);
      if ($135) {
       $$1155192 = 0;$138 = $134;
       while(1) {
        $136 = $$1155192 << $131;
        $137 = $138 | $136;
        $139 = HEAP32[$6>>2]|0;
        $140 = HEAP32[$7>>2]|0;
        $141 = ($139>>>0)<($140>>>0);
        if ($141) {
         $142 = ((($139)) + 1|0);
         HEAP32[$6>>2] = $142;
         $143 = HEAP8[$139>>0]|0;
         $144 = $143&255;
         $$4163$be = $144;
        } else {
         $145 = (___shgetc($0)|0);
         $$4163$be = $145;
        }
        $146 = ((164477) + ($$4163$be)|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147&255;
        $149 = ($$1165167>>>0)>($148>>>0);
        $150 = ($137>>>0)<(134217728);
        $151 = $150 & $149;
        if ($151) {
         $$1155192 = $137;$138 = $148;
        } else {
         break;
        }
       }
       $$4163$lcssa = $$4163$be;$155 = $147;$158 = 0;$160 = $137;
      } else {
       $$4163$lcssa = $$1160169;$155 = $133;$158 = 0;$160 = 0;
      }
      $152 = (_bitshift64Lshr(-1,-1,($131|0))|0);
      $153 = tempRet0;
      $154 = $155&255;
      $156 = ($$1165167>>>0)<=($154>>>0);
      $157 = ($153>>>0)<($158>>>0);
      $159 = ($152>>>0)<($160>>>0);
      $161 = ($153|0)==($158|0);
      $162 = $161 & $159;
      $163 = $157 | $162;
      $or$cond187 = $156 | $163;
      if ($or$cond187) {
       $$1165168 = $$1165167;$$8 = $$4163$lcssa;$293 = $160;$294 = $158;
       label = 72;
       break;
      } else {
       $164 = $160;$165 = $158;$169 = $155;
      }
      while(1) {
       $166 = (_bitshift64Shl(($164|0),($165|0),($131|0))|0);
       $167 = tempRet0;
       $168 = $169&255;
       $170 = $166 | $168;
       $171 = HEAP32[$6>>2]|0;
       $172 = HEAP32[$7>>2]|0;
       $173 = ($171>>>0)<($172>>>0);
       if ($173) {
        $174 = ((($171)) + 1|0);
        HEAP32[$6>>2] = $174;
        $175 = HEAP8[$171>>0]|0;
        $176 = $175&255;
        $$5$be = $176;
       } else {
        $177 = (___shgetc($0)|0);
        $$5$be = $177;
       }
       $178 = ((164477) + ($$5$be)|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = $179&255;
       $181 = ($$1165167>>>0)<=($180>>>0);
       $182 = ($167>>>0)>($153>>>0);
       $183 = ($170>>>0)>($152>>>0);
       $184 = ($167|0)==($153|0);
       $185 = $184 & $183;
       $186 = $182 | $185;
       $or$cond = $181 | $186;
       if ($or$cond) {
        $$1165168 = $$1165167;$$8 = $$5$be;$293 = $170;$294 = $167;
        label = 72;
        break L63;
       } else {
        $164 = $170;$165 = $167;$169 = $179;
       }
      }
     }
     $122 = ((164477) + ($$1160169)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     $125 = ($$1165167>>>0)>($124>>>0);
     if ($125) {
      $$2156210 = 0;$189 = $124;
      while(1) {
       $187 = Math_imul($$2156210, $$1165167)|0;
       $188 = (($189) + ($187))|0;
       $190 = HEAP32[$6>>2]|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = ($190>>>0)<($191>>>0);
       if ($192) {
        $193 = ((($190)) + 1|0);
        HEAP32[$6>>2] = $193;
        $194 = HEAP8[$190>>0]|0;
        $195 = $194&255;
        $$6$be = $195;
       } else {
        $196 = (___shgetc($0)|0);
        $$6$be = $196;
       }
       $197 = ((164477) + ($$6$be)|0);
       $198 = HEAP8[$197>>0]|0;
       $199 = $198&255;
       $200 = ($$1165167>>>0)>($199>>>0);
       $201 = ($188>>>0)<(119304647);
       $202 = $201 & $200;
       if ($202) {
        $$2156210 = $188;$189 = $199;
       } else {
        break;
       }
      }
      $$6$lcssa = $$6$be;$204 = $198;$295 = $188;$296 = 0;
     } else {
      $$6$lcssa = $$1160169;$204 = $123;$295 = 0;$296 = 0;
     }
     $203 = $204&255;
     $205 = ($$1165167>>>0)>($203>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165167|0),0)|0);
      $207 = tempRet0;
      $$7198 = $$6$lcssa;$209 = $296;$211 = $295;$218 = $204;
      while(1) {
       $208 = ($209>>>0)>($207>>>0);
       $210 = ($211>>>0)>($206>>>0);
       $212 = ($209|0)==($207|0);
       $213 = $212 & $210;
       $214 = $208 | $213;
       if ($214) {
        $$1165168 = $$1165167;$$8 = $$7198;$293 = $211;$294 = $209;
        label = 72;
        break L63;
       }
       $215 = (___muldi3(($211|0),($209|0),($$1165167|0),0)|0);
       $216 = tempRet0;
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165168 = $$1165167;$$8 = $$7198;$293 = $211;$294 = $209;
        label = 72;
        break L63;
       }
       $225 = (_i64Add(($215|0),($216|0),($217|0),0)|0);
       $226 = tempRet0;
       $227 = HEAP32[$6>>2]|0;
       $228 = HEAP32[$7>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$6>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $$7$be = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $$7$be = $233;
       }
       $234 = ((164477) + ($$7$be)|0);
       $235 = HEAP8[$234>>0]|0;
       $236 = $235&255;
       $237 = ($$1165167>>>0)>($236>>>0);
       if ($237) {
        $$7198 = $$7$be;$209 = $226;$211 = $225;$218 = $235;
       } else {
        $$1165168 = $$1165167;$$8 = $$7$be;$293 = $225;$294 = $226;
        label = 72;
        break;
       }
      }
     } else {
      $$1165168 = $$1165167;$$8 = $$6$lcssa;$293 = $295;$294 = $296;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $238 = ((164477) + ($$8)|0);
    $239 = HEAP8[$238>>0]|0;
    $240 = $239&255;
    $241 = ($$1165168>>>0)>($240>>>0);
    if ($241) {
     while(1) {
      $242 = HEAP32[$6>>2]|0;
      $243 = HEAP32[$7>>2]|0;
      $244 = ($242>>>0)<($243>>>0);
      if ($244) {
       $245 = ((($242)) + 1|0);
       HEAP32[$6>>2] = $245;
       $246 = HEAP8[$242>>0]|0;
       $247 = $246&255;
       $$9$be = $247;
      } else {
       $248 = (___shgetc($0)|0);
       $$9$be = $248;
      }
      $249 = ((164477) + ($$9$be)|0);
      $250 = HEAP8[$249>>0]|0;
      $251 = $250&255;
      $252 = ($$1165168>>>0)>($251>>>0);
      if (!($252)) {
       break;
      }
     }
     $253 = (___errno_location()|0);
     HEAP32[$253>>2] = 34;
     $254 = $3 & 1;
     $255 = ($254|0)==(0);
     $256 = (0)==(0);
     $257 = $255 & $256;
     $$0157$ = $257 ? $$0157 : 0;
     $$1158 = $$0157$;$263 = $4;$265 = $3;
    } else {
     $$1158 = $$0157;$263 = $294;$265 = $293;
    }
   }
   $258 = HEAP32[$7>>2]|0;
   $259 = ($258|0)==(0|0);
   if (!($259)) {
    $260 = HEAP32[$6>>2]|0;
    $261 = ((($260)) + -1|0);
    HEAP32[$6>>2] = $261;
   }
   $262 = ($263>>>0)<($4>>>0);
   $264 = ($265>>>0)<($3>>>0);
   $266 = ($263|0)==($4|0);
   $267 = $266 & $264;
   $268 = $262 | $267;
   if (!($268)) {
    $269 = $3 & 1;
    $270 = ($269|0)!=(0);
    $271 = (0)!=(0);
    $272 = $270 | $271;
    $273 = ($$1158|0)!=(0);
    $or$cond12 = $272 | $273;
    if (!($or$cond12)) {
     $274 = (___errno_location()|0);
     HEAP32[$274>>2] = 34;
     $275 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $276 = tempRet0;
     $289 = $276;$290 = $275;
     break;
    }
    $277 = ($263>>>0)>($4>>>0);
    $278 = ($265>>>0)>($3>>>0);
    $279 = ($263|0)==($4|0);
    $280 = $279 & $278;
    $281 = $277 | $280;
    if ($281) {
     $282 = (___errno_location()|0);
     HEAP32[$282>>2] = 34;
     $289 = $4;$290 = $3;
     break;
    }
   }
   $283 = ($$1158|0)<(0);
   $284 = $283 << 31 >> 31;
   $285 = $265 ^ $$1158;
   $286 = $263 ^ $284;
   $287 = (_i64Subtract(($285|0),($286|0),($$1158|0),($284|0))|0);
   $288 = tempRet0;
   $289 = $288;$290 = $287;
  }
 } while(0);
 tempRet0 = ($289);
 return ($290|0);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert29 = 0, $$pre = 0, $$pre30 = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   if ($11) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$sink = $$pre;$26 = $$pre;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($12) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $12;
    if ($20) {
     $$sink = $21;$26 = $21;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $$sink = $23;$26 = $21;
    }
   }
   $24 = ((($0)) + 100|0);
   HEAP32[$24>>2] = $$sink;
   $25 = ($26|0)==(0|0);
   $$phi$trans$insert29 = ((($0)) + 4|0);
   if ($25) {
    $$pre30 = HEAP32[$$phi$trans$insert29>>2]|0;
    $36 = $$pre30;
   } else {
    $27 = HEAP32[$$phi$trans$insert29>>2]|0;
    $28 = $26;
    $29 = ((($0)) + 108|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 1)|0;
    $32 = (($31) - ($27))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$29>>2] = $33;
    $34 = $27;
    $36 = $34;
   }
   $35 = ((($36)) + -1|0);
   $37 = HEAP8[$35>>0]|0;
   $38 = $37&255;
   $39 = ($7|0)==($38|0);
   if ($39) {
    $$0 = $7;
   } else {
    $40 = $7&255;
    HEAP8[$35>>0] = $40;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $narrow = $1 | $3;
 $4 = $narrow&1;
 return ($4|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 63]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 63]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _strtoll_l($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_strtoll($0,$1,$2)|0);
 $5 = tempRet0;
 tempRet0 = ($5);
 return ($4|0);
}
function _strtoll($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_737($0,$1,$2,0,-2147483648)|0);
 $4 = tempRet0;
 tempRet0 = ($4);
 return ($3|0);
}
function _strtoul_l($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_strtoul($0,$1,$2)|0);
 return ($4|0);
}
function _strtoul($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_737($0,$1,$2,-1,0)|0);
 $4 = tempRet0;
 return ($3|0);
}
function _strtol_l($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_strtol($0,$1,$2)|0);
 return ($4|0);
}
function _strtol($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_737($0,$1,$2,-2147483648,0)|0);
 $4 = tempRet0;
 return ($3|0);
}
function _strupr($0) {
 $0 = $0|0;
 var $$07 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $$07 = $0;$4 = $1;
  while(1) {
   $3 = $4 << 24 >> 24;
   $5 = (_toupper($3)|0);
   $6 = $5&255;
   HEAP8[$$07>>0] = $6;
   $7 = ((($$07)) + 1|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    break;
   } else {
    $$07 = $7;$4 = $8;
   }
  }
 }
 return ($0|0);
}
function _toupper($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_islower($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 & 95;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _islower($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function ___ldexp_cexp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $3 = 0, $4 = 0.0, $5 = 0;
 var $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = (+___frexp_exp($4,$3));
 $8 = HEAP32[$3>>2]|0;
 $9 = (($8) + ($2))|0;
 $10 = (($9|0) / 2)&-1;
 $11 = $10 << 20;
 $12 = (($11) + 1072693248)|0;
 HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
 $14 = (($9) - ($10))|0;
 $15 = $14 << 20;
 $16 = (($15) + 1072693248)|0;
 HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = (+Math_cos((+$6)));
 $19 = $7 * $18;
 $20 = $19 * $13;
 $21 = $20 * $17;
 $22 = (+Math_sin((+$6)));
 $23 = $7 * $22;
 $24 = $23 * $13;
 $25 = $24 * $17;
 $26 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $21;
 HEAPF64[$26>>3] = $25;
 STACKTOP = sp;return;
}
function ___frexp_exp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 + -1246.9717778273416;
 $3 = (+Math_exp((+$2)));
 HEAPF64[tempDoublePtr>>3] = $3;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $7 = tempRet0;
 $8 = (($6) + -247)|0;
 HEAP32[$1>>2] = $8;
 $9 = $5 & 1048575;
 $10 = $9 | 2145386496;
 HEAP32[tempDoublePtr>>2] = $4;HEAP32[tempDoublePtr+4>>2] = $10;$11 = +HEAPF64[tempDoublePtr>>3];
 return (+$11);
}
function ___ldexp_cexpf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $3 = 0, $4 = 0.0, $5 = 0;
 var $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = +HEAPF32[$1>>2];
 $5 = ((($1)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = (+___frexp_expf($4,$3));
 $8 = HEAP32[$3>>2]|0;
 $9 = (($8) + ($2))|0;
 $10 = (($9|0) / 2)&-1;
 $11 = $10 << 23;
 $12 = (($11) + 1065353216)|0;
 $13 = (HEAP32[tempDoublePtr>>2]=$12,+HEAPF32[tempDoublePtr>>2]);
 $14 = (($9) - ($10))|0;
 $15 = $14 << 23;
 $16 = (($15) + 1065353216)|0;
 $17 = (HEAP32[tempDoublePtr>>2]=$16,+HEAPF32[tempDoublePtr>>2]);
 $18 = (+Math_cos((+$6)));
 $19 = $7 * $18;
 $20 = $19 * $13;
 $21 = $20 * $17;
 $22 = (+Math_sin((+$6)));
 $23 = $7 * $22;
 $24 = $23 * $13;
 $25 = $24 * $17;
 $26 = ((($0)) + 4|0);
 HEAPF32[$0>>2] = $21;
 HEAPF32[$26>>2] = $25;
 STACKTOP = sp;return;
}
function ___frexp_expf($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 + -162.88958740234375;
 $3 = (+Math_exp((+$2)));
 $4 = (HEAPF32[tempDoublePtr>>2]=$3,HEAP32[tempDoublePtr>>2]|0);
 $5 = $4 >>> 23;
 $6 = (($5) + -19)|0;
 HEAP32[$1>>2] = $6;
 $7 = $4 & 8388607;
 $8 = $7 | 2130706432;
 $9 = (HEAP32[tempDoublePtr>>2]=$8,+HEAPF32[tempDoublePtr>>2]);
 return (+$9);
}
function _cabs($0) {
 $0 = $0|0;
 var $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = +HEAPF64[$0>>3];
 $2 = ((($0)) + 8|0);
 $3 = +HEAPF64[$2>>3];
 $4 = (+_hypot($1,$3));
 return (+$4);
}
function _hypot($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$0 = 0.0, $$036 = 0.0, $$037 = 0.0, $$038 = 0.0, $$40 = 0.0, $$41 = 0.0, $$42 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0;
 var $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 24|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 HEAPF64[tempDoublePtr>>3] = $0;$6 = HEAP32[tempDoublePtr>>2]|0;
 $7 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$8 = HEAP32[tempDoublePtr>>2]|0;
 $9 = HEAP32[tempDoublePtr+4>>2]|0;
 $10 = $7 & 2147483647;
 $11 = $9 & 2147483647;
 $12 = ($10>>>0)<($11>>>0);
 $13 = ($6>>>0)<($8>>>0);
 $14 = ($10|0)==($11|0);
 $15 = $14 & $13;
 $16 = $12 | $15;
 $17 = $16 ? $8 : $6;
 $18 = $16 ? $11 : $10;
 $19 = $16 ? $6 : $8;
 $20 = $16 ? $10 : $11;
 $21 = (_bitshift64Lshr(($17|0),($18|0),52)|0);
 $22 = tempRet0;
 $23 = (_bitshift64Lshr(($19|0),($20|0),52)|0);
 $24 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$25 = +HEAPF64[tempDoublePtr>>3];
 HEAP32[tempDoublePtr>>2] = $19;HEAP32[tempDoublePtr+4>>2] = $20;$26 = +HEAPF64[tempDoublePtr>>3];
 $27 = ($23|0)==(2047);
 do {
  if ($27) {
   $$036 = $26;
  } else {
   $28 = ($21|0)==(2047);
   $29 = ($19|0)==(0);
   $30 = ($20|0)==(0);
   $31 = $29 & $30;
   $or$cond = $31 | $28;
   if ($or$cond) {
    $$036 = $25;
   } else {
    $32 = (($21) - ($23))|0;
    $33 = ($32|0)>(64);
    if ($33) {
     $34 = $25 + $26;
     $$036 = $34;
     break;
    }
    $35 = ($21|0)>(1533);
    if ($35) {
     $36 = $25 * 1.9010915662951598E-211;
     $37 = $26 * 1.9010915662951598E-211;
     $$0 = 5.2601359015483735E+210;$$037 = $36;$$038 = $37;
    } else {
     $38 = ($23|0)<(573);
     $39 = $25 * 5.2601359015483735E+210;
     $40 = $26 * 5.2601359015483735E+210;
     $$40 = $38 ? $40 : $26;
     $$41 = $38 ? $39 : $25;
     $$42 = $38 ? 1.9010915662951598E-211 : 1.0;
     $$0 = $$42;$$037 = $$41;$$038 = $$40;
    }
    _sq($2,$3,$$037);
    _sq($4,$5,$$038);
    $41 = +HEAPF64[$5>>3];
    $42 = +HEAPF64[$3>>3];
    $43 = $41 + $42;
    $44 = +HEAPF64[$4>>3];
    $45 = $43 + $44;
    $46 = +HEAPF64[$2>>3];
    $47 = $45 + $46;
    $48 = (+Math_sqrt((+$47)));
    $49 = $$0 * $48;
    $$036 = $49;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$036);
}
function _sq($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 * 134217729.0;
 $4 = $2 - $3;
 $5 = $3 + $4;
 $6 = $2 - $5;
 $7 = $2 * $2;
 HEAPF64[$0>>3] = $7;
 $8 = $5 * $5;
 $9 = $8 - $7;
 $10 = $5 * 2.0;
 $11 = $10 * $6;
 $12 = $9 + $11;
 $13 = $6 * $6;
 $14 = $13 + $12;
 HEAPF64[$1>>3] = $14;
 return;
}
function _cabsf($0) {
 $0 = $0|0;
 var $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = +HEAPF32[$0>>2];
 $2 = ((($0)) + 4|0);
 $3 = +HEAPF32[$2>>2];
 $4 = (+_hypotf($1,$3));
 return (+$4);
}
function _hypotf($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0, $$0 = 0.0, $$032 = 0.0, $$033 = 0.0, $$034 = 0.0, $$35 = 0, $$38 = 0.0, $$39 = 0.0, $$40 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0;
 var $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $or$cond = 0, $or$cond37 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $3 = (HEAPF32[tempDoublePtr>>2]=$1,HEAP32[tempDoublePtr>>2]|0);
 $4 = $2 & 2147483647;
 $5 = $3 & 2147483647;
 $6 = ($4>>>0)<($5>>>0);
 $$ = $6 ? $5 : $4;
 $$35 = $6 ? $4 : $5;
 $7 = (HEAP32[tempDoublePtr>>2]=$$,+HEAPF32[tempDoublePtr>>2]);
 $8 = (HEAP32[tempDoublePtr>>2]=$$35,+HEAPF32[tempDoublePtr>>2]);
 $9 = ($$35|0)==(2139095040);
 do {
  if ($9) {
   $$032 = $8;
  } else {
   $10 = ($$>>>0)>(2139095039);
   $11 = ($$35|0)==(0);
   $or$cond = $10 | $11;
   $12 = (($$) - ($$35))|0;
   $13 = ($12>>>0)>(209715199);
   $or$cond37 = $or$cond | $13;
   if ($or$cond37) {
    $14 = $7 + $8;
    $$032 = $14;
    break;
   }
   $15 = ($$>>>0)>(1568669695);
   if ($15) {
    $16 = $7 * 8.0779356694631609E-28;
    $17 = $8 * 8.0779356694631609E-28;
    $$0 = 1.2379400392853803E+27;$$033 = $17;$$034 = $16;
   } else {
    $18 = ($$35>>>0)<(562036736);
    $19 = $7 * 1.2379400392853803E+27;
    $20 = $8 * 1.2379400392853803E+27;
    $$38 = $18 ? $19 : $7;
    $$39 = $18 ? $20 : $8;
    $$40 = $18 ? 8.0779356694631609E-28 : 1.0;
    $$0 = $$40;$$033 = $$39;$$034 = $$38;
   }
   $21 = $$034;
   $22 = $21 * $21;
   $23 = $$033;
   $24 = $23 * $23;
   $25 = $22 + $24;
   $26 = $25;
   $27 = (+Math_sqrt((+$26)));
   $28 = $$0 * $27;
   $$032 = $28;
  }
 } while(0);
 return (+$$032);
}
function _cabsl($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$0>>3];
 $3 = ((($0)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $2;
 HEAPF64[$5>>3] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 $6 = (+_cabs($$byval_copy));
 STACKTOP = sp;return (+$6);
}
function _cacos($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $4;
 HEAPF64[$7>>3] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _casin($2,$$byval_copy);
 $8 = +HEAPF64[$2>>3];
 $9 = ((($2)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = 1.5707963267948966 - $8;
 $12 = - $10;
 $13 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $11;
 HEAPF64[$13>>3] = $12;
 STACKTOP = sp;return;
}
function _casin($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy1 = sp + 80|0;
 $$byval_copy = sp + 64|0;
 $2 = sp + 48|0;
 $3 = sp + 32|0;
 $4 = sp + 16|0;
 $5 = sp;
 $6 = +HEAPF64[$1>>3];
 $7 = ((($1)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $6 - $8;
 $10 = $6 + $8;
 $11 = $9 * $10;
 $12 = 1.0 - $11;
 $13 = $6 * -2.0;
 $14 = $13 * $8;
 $15 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $12;
 HEAPF64[$15>>3] = $14;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _csqrt($2,$$byval_copy);
 $16 = +HEAPF64[$2>>3];
 $17 = ((($2)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $16 - $8;
 $20 = $6 + $18;
 $21 = ((($5)) + 8|0);
 HEAPF64[$5>>3] = $19;
 HEAPF64[$21>>3] = $20;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$5+12>>2]|0;
 _clog($4,$$byval_copy1);
 $22 = +HEAPF64[$4>>3];
 $23 = ((($4)) + 8|0);
 $24 = +HEAPF64[$23>>3];
 $25 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $22;
 HEAPF64[$25>>3] = $24;
 STACKTOP = sp;return;
}
function _csqrt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0.0, $$063 = 0.0, $$sink = 0, $$sroa$058$0$sink = 0.0, $$sroa$6$0$sink = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond67 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 32|0;
 $3 = sp + 16|0;
 $4 = sp;
 $5 = +HEAPF64[$1>>3];
 $6 = ((($1)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $5 == 0.0;
 $9 = $7 == 0.0;
 $10 = $8 & $9;
 do {
  if ($10) {
   $$sroa$058$0$sink = 0.0;$$sroa$6$0$sink = $7;
  } else {
   $11 = (___DOUBLE_BITS_19($7)|0);
   $12 = tempRet0;
   $13 = $12 & 2147483647;
   $14 = ($11|0)==(0);
   $15 = ($13|0)==(2146435072);
   $16 = $14 & $15;
   if ($16) {
    $$sroa$058$0$sink = inf;$$sroa$6$0$sink = $7;
   } else {
    $17 = (___DOUBLE_BITS_19($5)|0);
    $18 = tempRet0;
    $19 = $18 & 2147483647;
    $20 = ($19>>>0)>(2146435072);
    $21 = ($17>>>0)>(0);
    $22 = ($19|0)==(2146435072);
    $23 = $22 & $21;
    $24 = $20 | $23;
    if ($24) {
     $25 = $7 - $7;
     $26 = $25 / $25;
     $$sroa$058$0$sink = $5;$$sroa$6$0$sink = $26;
     break;
    }
    $27 = ($17|0)==(0);
    $28 = ($19|0)==(2146435072);
    $29 = $27 & $28;
    if ($29) {
     $30 = ($18|0)<(0);
     $31 = $7 - $7;
     if ($30) {
      $32 = (+Math_abs((+$31)));
      $33 = (+_copysign($5,$7));
      $$sroa$058$0$sink = $32;$$sroa$6$0$sink = $33;
      break;
     } else {
      $34 = (+_copysign($31,$7));
      $$sroa$058$0$sink = $5;$$sroa$6$0$sink = $34;
      break;
     }
    }
    $35 = (+Math_abs((+$5)));
    $36 = !($35 >= 7.4462887744497663E+307);
    $37 = (+Math_abs((+$7)));
    $38 = !($37 >= 7.4462887744497663E+307);
    $or$cond67 = $36 & $38;
    $39 = $5 * 0.25;
    $40 = $7 * 0.25;
    $$063 = $or$cond67 ? $7 : $40;
    $$0 = $or$cond67 ? $5 : $39;
    $41 = !($$0 >= 0.0);
    $42 = (+_hypot($$0,$$063));
    if ($41) {
     $49 = $42 - $$0;
     $50 = $49 * 0.5;
     $51 = (+Math_sqrt((+$50)));
     $52 = (+Math_abs((+$$063)));
     $53 = $51 * 2.0;
     $54 = $52 / $53;
     HEAPF64[$3>>3] = $54;
     $55 = ((($3)) + 8|0);
     $56 = (+_copysign($51,$$063));
     HEAPF64[$55>>3] = $56;
     $$sink = $3;
    } else {
     $43 = $$0 + $42;
     $44 = $43 * 0.5;
     $45 = (+Math_sqrt((+$44)));
     HEAPF64[$2>>3] = $45;
     $46 = ((($2)) + 8|0);
     $47 = $45 * 2.0;
     $48 = $$063 / $47;
     HEAPF64[$46>>3] = $48;
     $$sink = $2;
    }
    $57 = +HEAPF64[$$sink>>3];
    $58 = ((($$sink)) + 8|0);
    $59 = +HEAPF64[$58>>3];
    if ($or$cond67) {
     $$sroa$058$0$sink = $57;$$sroa$6$0$sink = $59;
    } else {
     $60 = $57 * 2.0;
     $61 = $59 * 0.0;
     $62 = $57 * 0.0;
     $63 = $59 * 2.0;
     $64 = $60 - $61;
     $65 = $62 + $63;
     $66 = ($64 != $64) | (0.0 != 0.0);
     $67 = ($65 != $65) | (0.0 != 0.0);
     $or$cond = $66 & $67;
     if ($or$cond) {
      ___muldc3(($4|0),(+$57),(+$59),2.0,0.0);
      $68 = +HEAPF64[$4>>3];
      $69 = ((($4)) + 8|0);
      $70 = +HEAPF64[$69>>3];
      $$sroa$058$0$sink = $68;$$sroa$6$0$sink = $70;
     } else {
      $$sroa$058$0$sink = $64;$$sroa$6$0$sink = $65;
     }
    }
   }
  }
 } while(0);
 $71 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $$sroa$058$0$sink;
 HEAPF64[$71>>3] = $$sroa$6$0$sink;
 STACKTOP = sp;return;
}
function _clog($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy1 = sp + 48|0;
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($2)) + 8|0);
 HEAPF64[$2>>3] = $4;
 HEAPF64[$7>>3] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
 $8 = (+_cabs($$byval_copy));
 $9 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $4;
 HEAPF64[$9>>3] = $6;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$3+12>>2]|0;
 $10 = (+_carg($$byval_copy1));
 $11 = (+Math_log((+$8)));
 $12 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $11;
 HEAPF64[$12>>3] = $10;
 STACKTOP = sp;return;
}
function _carg($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = +HEAPF64[$1>>3];
 $3 = +HEAPF64[$0>>3];
 $4 = (+Math_atan2((+$2),(+$3)));
 return (+$4);
}
function ___DOUBLE_BITS_19($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _cacosf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($3)) + 4|0);
 HEAP32[$3>>2] = $4;
 HEAP32[$7>>2] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 _casinf($2,$$byval_copy);
 $8 = +HEAPF32[$2>>2];
 $9 = ((($2)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = 1.5707963705062866 - $8;
 $12 = - $10;
 $13 = ((($0)) + 4|0);
 HEAPF32[$0>>2] = $11;
 HEAPF32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function _casinf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy1 = sp + 40|0;
 $$byval_copy = sp + 32|0;
 $2 = sp + 24|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = +HEAPF32[$1>>2];
 $7 = ((($1)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $6 - $8;
 $10 = $6 + $8;
 $11 = $9 * $10;
 $12 = 1.0 - $11;
 $13 = $6;
 $14 = $13 * -2.0;
 $15 = $8;
 $16 = $14 * $15;
 $17 = $16;
 $18 = ((($3)) + 4|0);
 HEAPF32[$3>>2] = $12;
 HEAPF32[$18>>2] = $17;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 _csqrtf($2,$$byval_copy);
 $19 = +HEAPF32[$2>>2];
 $20 = ((($2)) + 4|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $19 - $8;
 $23 = $6 + $21;
 $24 = ((($5)) + 4|0);
 HEAPF32[$5>>2] = $22;
 HEAPF32[$24>>2] = $23;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$5+4>>2]|0;
 _clogf($4,$$byval_copy1);
 $25 = HEAP32[$4>>2]|0;
 $26 = ((($4)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $25;
 HEAP32[$28>>2] = $27;
 STACKTOP = sp;return;
}
function _csqrtf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0.0, $$sink51 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF32[$1>>2];
 $3 = ((($1)) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $2 == 0.0;
 $6 = $4 == 0.0;
 $7 = $5 & $6;
 do {
  if ($7) {
   $$sink = $4;$$sink51 = 0.0;
  } else {
   $8 = (___FLOAT_BITS_22($4)|0);
   $9 = $8 & 2147483647;
   $10 = ($9|0)==(2139095040);
   if ($10) {
    $$sink = $4;$$sink51 = inf;
   } else {
    $11 = (___FLOAT_BITS_22($2)|0);
    $12 = $11 & 2147483647;
    $13 = ($12>>>0)>(2139095040);
    if ($13) {
     $14 = $4 - $4;
     $15 = $14 / $14;
     $$sink = $15;$$sink51 = $2;
     break;
    }
    $16 = ($12|0)==(2139095040);
    if ($16) {
     $17 = ($11|0)<(0);
     $18 = $4 - $4;
     if ($17) {
      $19 = (+Math_abs((+$18)));
      $20 = (+_copysignf($2,$4));
      $$sink = $20;$$sink51 = $19;
      break;
     } else {
      $21 = (+_copysignf($18,$4));
      $$sink = $21;$$sink51 = $2;
      break;
     }
    } else {
     $22 = !($2 >= 0.0);
     if ($22) {
      $33 = - $2;
      $34 = $33;
      $35 = $2;
      $36 = $4;
      $37 = (+_hypot($35,$36));
      $38 = $37 + $34;
      $39 = $38 * 0.5;
      $40 = (+Math_sqrt((+$39)));
      $41 = (+Math_abs((+$4)));
      $42 = $41;
      $43 = $40 * 2.0;
      $44 = $42 / $43;
      $45 = $44;
      $46 = $40;
      $47 = (+_copysignf($46,$4));
      $$sink = $47;$$sink51 = $45;
      break;
     } else {
      $23 = $2;
      $24 = $4;
      $25 = (+_hypot($23,$24));
      $26 = $25 + $23;
      $27 = $26 * 0.5;
      $28 = (+Math_sqrt((+$27)));
      $29 = $28;
      $30 = $28 * 2.0;
      $31 = $24 / $30;
      $32 = $31;
      $$sink = $32;$$sink51 = $29;
      break;
     }
    }
   }
  }
 } while(0);
 $48 = ((($0)) + 4|0);
 HEAPF32[$0>>2] = $$sink51;
 HEAPF32[$48>>2] = $$sink;
 return;
}
function _clogf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 24|0;
 $$byval_copy = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 4|0);
 HEAP32[$2>>2] = $4;
 HEAP32[$7>>2] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
 $8 = (+_cabsf($$byval_copy));
 $9 = ((($3)) + 4|0);
 HEAP32[$3>>2] = $4;
 HEAP32[$9>>2] = $6;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$3+4>>2]|0;
 $10 = (+_cargf($$byval_copy1));
 $11 = (+Math_log((+$8)));
 $12 = ((($0)) + 4|0);
 HEAPF32[$0>>2] = $11;
 HEAPF32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _cargf($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = +HEAPF32[$1>>2];
 $3 = +HEAPF32[$0>>2];
 $4 = (+Math_atan2((+$2),(+$3)));
 return (+$4);
}
function ___FLOAT_BITS_22($0) {
 $0 = +$0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 return ($1|0);
}
function _copysignf($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $3 = (HEAPF32[tempDoublePtr>>2]=$1,HEAP32[tempDoublePtr>>2]|0);
 $4 = $2 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 $7 = (HEAP32[tempDoublePtr>>2]=$6,+HEAPF32[tempDoublePtr>>2]);
 return (+$7);
}
function _cacosh($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $4;
 HEAPF64[$7>>3] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _cacos($2,$$byval_copy);
 $8 = +HEAPF64[$2>>3];
 $9 = ((($2)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = - $10;
 $12 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $11;
 HEAPF64[$12>>3] = $8;
 STACKTOP = sp;return;
}
function _cacoshf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($3)) + 4|0);
 HEAP32[$3>>2] = $4;
 HEAP32[$7>>2] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 _cacosf($2,$$byval_copy);
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($2)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = - $10;
 $12 = ((($0)) + 4|0);
 HEAPF32[$0>>2] = $11;
 HEAP32[$12>>2] = $8;
 STACKTOP = sp;return;
}
function _cacoshl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $4;
 HEAPF64[$7>>3] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _cacosh($2,$$byval_copy);
 $8 = +HEAPF64[$2>>3];
 $9 = ((($2)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $8;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _cacosl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $4;
 HEAPF64[$7>>3] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _cacos($2,$$byval_copy);
 $8 = +HEAPF64[$2>>3];
 $9 = ((($2)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $8;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _cargl($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $1 = sp;
 $2 = +HEAPF64[$0>>3];
 $3 = ((($0)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = ((($1)) + 8|0);
 HEAPF64[$1>>3] = $2;
 HEAPF64[$5>>3] = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 $6 = (+_carg($$byval_copy));
 STACKTOP = sp;return (+$6);
}
function _casinh($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = ((($1)) + 8|0);
 $5 = +HEAPF64[$4>>3];
 $6 = - $5;
 $7 = +HEAPF64[$1>>3];
 $8 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $6;
 HEAPF64[$8>>3] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _casin($2,$$byval_copy);
 $9 = +HEAPF64[$2>>3];
 $10 = ((($2)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = - $9;
 $13 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $11;
 HEAPF64[$13>>3] = $12;
 STACKTOP = sp;return;
}
function _casinhf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp;
 $4 = ((($1)) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = - $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($3)) + 4|0);
 HEAPF32[$3>>2] = $6;
 HEAP32[$8>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 _casinf($2,$$byval_copy);
 $9 = +HEAPF32[$2>>2];
 $10 = ((($2)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = - $9;
 $13 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $11;
 HEAPF32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function _casinhl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $4;
 HEAPF64[$7>>3] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _casinh($2,$$byval_copy);
 $8 = +HEAPF64[$2>>3];
 $9 = ((($2)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $8;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _casinl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $4;
 HEAPF64[$7>>3] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _casin($2,$$byval_copy);
 $8 = +HEAPF64[$2>>3];
 $9 = ((($2)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $8;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _catan($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0.0, $$sink40 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF64[$1>>3];
 $3 = ((($1)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = $2 == 0.0;
 $6 = $4 > 1.0;
 $or$cond = $5 & $6;
 if ($or$cond) {
  $$sink = 1.0E+308;$$sink40 = 1.0E+308;
 } else {
  $7 = $2 * $2;
  $8 = 1.0 - $7;
  $9 = $4 * $4;
  $10 = $8 - $9;
  $11 = $10 == 0.0;
  if ($11) {
   $$sink = 1.0E+308;$$sink40 = 1.0E+308;
  } else {
   $12 = $4 + -1.0;
   $13 = $12 * $12;
   $14 = $7 + $13;
   $15 = $14 == 0.0;
   if ($15) {
    $$sink = 1.0E+308;$$sink40 = 1.0E+308;
   } else {
    $16 = $2 * 2.0;
    $17 = (+Math_atan2((+$16),(+$10)));
    $18 = $17 * 0.5;
    $19 = (+__redupi($18));
    $20 = $4 + 1.0;
    $21 = $20 * $20;
    $22 = $7 + $21;
    $23 = $22 / $14;
    $24 = (+Math_log((+$23)));
    $25 = $24 * 0.25;
    $26 = $25 * 0.0;
    $27 = $19 + $26;
    $28 = $25 + 0.0;
    $$sink = $28;$$sink40 = $27;
   }
  }
 }
 $29 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $$sink40;
 HEAPF64[$29>>3] = $$sink;
 return;
}
function __redupi($0) {
 $0 = +$0;
 var $$sink = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 / 3.1415926535897931;
 $2 = !($1 >= 0.0);
 $$sink = $2 ? -0.5 : 0.5;
 $3 = $1 + $$sink;
 $4 = (~~(($3)));
 $5 = (+($4|0));
 $6 = $5 * 3.1415926516056061;
 $7 = $0 - $6;
 $8 = $5 * 1.9841871479187034E-9;
 $9 = $7 - $8;
 $10 = $5 * 1.1442377452219664E-17;
 $11 = $9 - $10;
 return (+$11);
}
function _catanf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0.0, $$sink40 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF32[$1>>2];
 $3 = ((($1)) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $2 == 0.0;
 $6 = $4 > 1.0;
 $or$cond = $5 & $6;
 if ($or$cond) {
  $$sink = 9.9999996802856924E+37;$$sink40 = 9.9999996802856924E+37;
 } else {
  $7 = $2 * $2;
  $8 = 1.0 - $7;
  $9 = $4 * $4;
  $10 = $8 - $9;
  $11 = $10 == 0.0;
  if ($11) {
   $$sink = 9.9999996802856924E+37;$$sink40 = 9.9999996802856924E+37;
  } else {
   $12 = $4 + -1.0;
   $13 = $12 * $12;
   $14 = $7 + $13;
   $15 = $14 == 0.0;
   if ($15) {
    $$sink = 9.9999996802856924E+37;$$sink40 = 9.9999996802856924E+37;
   } else {
    $16 = $2 * 2.0;
    $17 = (+Math_atan2((+$16),(+$10)));
    $18 = $17 * 0.5;
    $19 = (+__redupif($18));
    $20 = $4 + 1.0;
    $21 = $20 * $20;
    $22 = $7 + $21;
    $23 = $22 / $14;
    $24 = (+Math_log((+$23)));
    $25 = $24 * 0.25;
    $26 = $25 * 0.0;
    $27 = $19 + $26;
    $28 = $25 + 0.0;
    $$sink = $28;$$sink40 = $27;
   }
  }
 }
 $29 = ((($0)) + 4|0);
 HEAPF32[$0>>2] = $$sink40;
 HEAPF32[$29>>2] = $$sink;
 return;
}
function __redupif($0) {
 $0 = +$0;
 var $$sink = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 / 3.1415927410125732;
 $2 = !($1 >= 0.0);
 $$sink = $2 ? -0.5 : 0.5;
 $3 = $1 + $$sink;
 $4 = (~~(($3)));
 $5 = (+($4|0));
 $6 = $0;
 $7 = $5;
 $8 = $7 * 3.140625;
 $9 = $6 - $8;
 $10 = $7 * 9.6750259399414063E-4;
 $11 = $9 - $10;
 $12 = $7 * 1.5099579909783765E-7;
 $13 = $11 - $12;
 $14 = $13;
 return (+$14);
}
function _catanh($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = ((($1)) + 8|0);
 $5 = +HEAPF64[$4>>3];
 $6 = - $5;
 $7 = +HEAPF64[$1>>3];
 $8 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $6;
 HEAPF64[$8>>3] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _catan($2,$$byval_copy);
 $9 = +HEAPF64[$2>>3];
 $10 = ((($2)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = - $9;
 $13 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $11;
 HEAPF64[$13>>3] = $12;
 STACKTOP = sp;return;
}
function _catanhf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp;
 $4 = ((($1)) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = - $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($3)) + 4|0);
 HEAPF32[$3>>2] = $6;
 HEAP32[$8>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 _catanf($2,$$byval_copy);
 $9 = +HEAPF32[$2>>2];
 $10 = ((($2)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = - $9;
 $13 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $11;
 HEAPF32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function _catanhl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $4;
 HEAPF64[$7>>3] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _catanh($2,$$byval_copy);
 $8 = +HEAPF64[$2>>3];
 $9 = ((($2)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $8;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _catanl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $4;
 HEAPF64[$7>>3] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _catan($2,$$byval_copy);
 $8 = +HEAPF64[$2>>3];
 $9 = ((($2)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $8;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _ccos($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0.0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = ((($1)) + 8|0);
 $5 = +HEAPF64[$4>>3];
 $6 = - $5;
 $7 = +HEAPF64[$1>>3];
 $8 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $6;
 HEAPF64[$8>>3] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _ccosh($2,$$byval_copy);
 $9 = +HEAPF64[$2>>3];
 $10 = ((($2)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $9;
 HEAPF64[$12>>3] = $11;
 STACKTOP = sp;return;
}
function _ccosh($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$sink = 0.0, $$sink141 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0;
 var $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 HEAPF64[tempDoublePtr>>3] = $4;$7 = HEAP32[tempDoublePtr>>2]|0;
 $8 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $6;$9 = HEAP32[tempDoublePtr>>2]|0;
 $10 = HEAP32[tempDoublePtr+4>>2]|0;
 $11 = $8 & 2147483647;
 $12 = $10 & 2147483647;
 $13 = ($11>>>0)<(2146435072);
 $14 = ($12>>>0)<(2146435072);
 $or$cond = $13 & $14;
 do {
  if ($or$cond) {
   $15 = $12 | $9;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = (+_cosh($4));
    $18 = $4 * $6;
    $$sink = $18;$$sink141 = $17;
    break;
   }
   $19 = ($11>>>0)<(1077280768);
   if ($19) {
    $20 = (+_cosh($4));
    $21 = (+Math_cos((+$6)));
    $22 = $20 * $21;
    $23 = (+_sinh($4));
    $24 = (+Math_sin((+$6)));
    $25 = $23 * $24;
    $$sink = $25;$$sink141 = $22;
    break;
   }
   $26 = ($11>>>0)<(1082535490);
   if ($26) {
    $27 = (+Math_abs((+$4)));
    $28 = (+Math_exp((+$27)));
    $29 = $28 * 0.5;
    $30 = (+Math_cos((+$6)));
    $31 = $29 * $30;
    $32 = (+_copysign($29,$4));
    $33 = (+Math_sin((+$6)));
    $34 = $32 * $33;
    $$sink = $34;$$sink141 = $31;
    break;
   }
   $35 = ($11>>>0)<(1083620266);
   if ($35) {
    $36 = (+Math_abs((+$4)));
    $37 = ((($3)) + 8|0);
    HEAPF64[$3>>3] = $36;
    HEAPF64[$37>>3] = $6;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
    ___ldexp_cexp($2,$$byval_copy,-1);
    $38 = +HEAPF64[$2>>3];
    $39 = ((($2)) + 8|0);
    $40 = +HEAPF64[$39>>3];
    HEAPF64[$1>>3] = $38;
    HEAPF64[$5>>3] = $40;
    $41 = (+_copysign(1.0,$4));
    $42 = $40 * $41;
    $$sink = $42;$$sink141 = $38;
    break;
   } else {
    $43 = $4 * 8.9884656743115795E+307;
    $44 = $43 * $43;
    $45 = (+Math_cos((+$6)));
    $46 = $44 * $45;
    $47 = (+Math_sin((+$6)));
    $48 = $43 * $47;
    $$sink = $48;$$sink141 = $46;
    break;
   }
  } else {
   $49 = $11 | $7;
   $50 = ($49|0)==(0);
   $51 = ($12>>>0)>(2146435071);
   $or$cond3 = $50 & $51;
   if ($or$cond3) {
    $52 = $6 - $6;
    $53 = $4 * $52;
    $54 = (+_copysign(0.0,$53));
    $$sink = $54;$$sink141 = $52;
    break;
   }
   $55 = $12 | $9;
   $56 = ($55|0)==(0);
   $57 = ($11>>>0)>(2146435071);
   $or$cond5 = $57 & $56;
   if ($or$cond5) {
    $58 = $8 & 1048575;
    $59 = $58 | $7;
    $60 = ($59|0)==(0);
    $61 = $4 * $4;
    if ($60) {
     $62 = (+_copysign(0.0,$4));
     $63 = $6 * $62;
     $$sink = $63;$$sink141 = $61;
     break;
    } else {
     $64 = $4 + $4;
     $65 = $64 * $6;
     $66 = (+_copysign(0.0,$65));
     $$sink = $66;$$sink141 = $61;
     break;
    }
   }
   $or$cond7 = $13 & $51;
   if ($or$cond7) {
    $67 = $6 - $6;
    $68 = $4 * $67;
    $$sink = $68;$$sink141 = $67;
    break;
   }
   if ($57) {
    $69 = $8 & 1048575;
    $70 = $69 | $7;
    $71 = ($70|0)==(0);
    if ($71) {
     $72 = $4 * $4;
     if ($51) {
      $73 = $6 - $6;
      $74 = $4 * $73;
      $$sink = $74;$$sink141 = $72;
      break;
     } else {
      $75 = (+Math_cos((+$6)));
      $76 = $72 * $75;
      $77 = (+Math_sin((+$6)));
      $78 = $4 * $77;
      $$sink = $78;$$sink141 = $76;
      break;
     }
    }
   }
   $79 = $4 * $4;
   $80 = $6 - $6;
   $81 = $79 * $80;
   $82 = $4 + $4;
   $83 = $82 * $80;
   $$sink = $83;$$sink141 = $81;
  }
 } while(0);
 $84 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $$sink141;
 HEAPF64[$84>>3] = $$sink;
 STACKTOP = sp;return;
}
function _cosh($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = $2 & 2147483647;
 HEAP32[tempDoublePtr>>2] = $1;HEAP32[tempDoublePtr+4>>2] = $3;$4 = +HEAPF64[tempDoublePtr>>3];
 $5 = ($3>>>0)<(1072049730);
 do {
  if ($5) {
   $6 = ($3>>>0)<(1045430272);
   if ($6) {
    $$0 = 1.0;
   } else {
    $7 = (+_expm1($4));
    $8 = $7 * $7;
    $9 = $7 + 1.0;
    $10 = $9 * 2.0;
    $11 = $8 / $10;
    $12 = $11 + 1.0;
    $$0 = $12;
   }
  } else {
   $13 = ($3>>>0)<(1082535490);
   if ($13) {
    $14 = (+Math_exp((+$4)));
    $15 = 1.0 / $14;
    $16 = $14 + $15;
    $17 = $16 * 0.5;
    $$0 = $17;
    break;
   } else {
    $18 = (+___expo2($4));
    $$0 = $18;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _sinh($0) {
 $0 = +$0;
 var $$ = 0.0, $$0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0, $4 = 0, $5 = 0.0;
 var $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = ($2|0)<(0);
 $$ = $3 ? -0.5 : 0.5;
 $4 = $2 & 2147483647;
 HEAP32[tempDoublePtr>>2] = $1;HEAP32[tempDoublePtr+4>>2] = $4;$5 = +HEAPF64[tempDoublePtr>>3];
 $6 = ($4>>>0)<(1082535490);
 do {
  if ($6) {
   $7 = (+_expm1($5));
   $8 = ($4>>>0)<(1072693248);
   if (!($8)) {
    $16 = $7 + 1.0;
    $17 = $7 / $16;
    $18 = $7 + $17;
    $19 = $$ * $18;
    $$0 = $19;
    break;
   }
   $9 = ($4>>>0)<(1045430272);
   if ($9) {
    $$0 = $0;
   } else {
    $10 = $7 * 2.0;
    $11 = $7 * $7;
    $12 = $7 + 1.0;
    $13 = $11 / $12;
    $14 = $10 - $13;
    $15 = $$ * $14;
    $$0 = $15;
   }
  } else {
   $20 = $$ * 2.0;
   $21 = (+___expo2($5));
   $22 = $20 * $21;
   $$0 = $22;
  }
 } while(0);
 return (+$$0);
}
function _expm1($0) {
 $0 = +$0;
 var $$0 = 0.0, $$0105 = 0, $$0106 = 0.0, $$0107 = 0.0, $$0109 = 0.0, $$0110 = 0.0, $$0111 = 0.0, $$1 = 0, $$1108 = 0.0, $$pn = 0.0, $$sink = 0.0, $$sink112 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0;
 var $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0;
 var $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0;
 var $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0;
 var $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = $2 & 2147483647;
 $4 = (_bitshift64Lshr(($1|0),($2|0),63)|0);
 $5 = tempRet0;
 $6 = ($3>>>0)>(1078159481);
 do {
  if ($6) {
   $7 = (___DOUBLE_BITS_259($0)|0);
   $8 = tempRet0;
   $9 = $8 & 2147483647;
   $10 = ($9>>>0)>(2146435072);
   $11 = ($7>>>0)>(0);
   $12 = ($9|0)==(2146435072);
   $13 = $12 & $11;
   $14 = $10 | $13;
   if ($14) {
    $$0 = $0;
   } else {
    $15 = ($4|0)==(0);
    if ($15) {
     $16 = $0 > 709.78271289338397;
     if ($16) {
      $17 = $0 * 8.9884656743115795E+307;
      $$0 = $17;
     } else {
      label = 11;
     }
    } else {
     $$0 = -1.0;
    }
   }
  } else {
   $18 = ($3>>>0)>(1071001154);
   if (!($18)) {
    $35 = ($3>>>0)<(1016070144);
    if ($35) {
     $$0 = $0;
     break;
    } else {
     $$0106 = $0;$$0111 = 0.0;$$1 = 0;
     label = 14;
     break;
    }
   }
   $19 = ($3>>>0)<(1072734898);
   if ($19) {
    $20 = ($4|0)==(0);
    if ($20) {
     $21 = $0 + -0.69314718036912382;
     $$0105 = 1;$$0109 = $21;$$0110 = 1.9082149292705877E-10;
     label = 12;
     break;
    } else {
     $22 = $0 + 0.69314718036912382;
     $$0105 = -1;$$0109 = $22;$$0110 = -1.9082149292705877E-10;
     label = 12;
     break;
    }
   } else {
    label = 11;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $23 = $0 * 1.4426950408889634;
  $24 = ($4|0)!=(0);
  $25 = $24 ? -0.5 : 0.5;
  $26 = $23 + $25;
  $27 = (~~(($26)));
  $28 = (+($27|0));
  $29 = $28 * 0.69314718036912382;
  $30 = $0 - $29;
  $31 = $28 * 1.9082149292705877E-10;
  $$0105 = $27;$$0109 = $30;$$0110 = $31;
  label = 12;
 }
 if ((label|0) == 12) {
  $32 = $$0109 - $$0110;
  $33 = $$0109 - $32;
  $34 = $33 - $$0110;
  $$0106 = $32;$$0111 = $34;$$1 = $$0105;
  label = 14;
 }
 L18: do {
  if ((label|0) == 14) {
   $36 = $$0106 * 0.5;
   $37 = $$0106 * $36;
   $38 = $37 * 2.0109921818362437E-7;
   $39 = 4.0082178273293624E-6 - $38;
   $40 = $37 * $39;
   $41 = $40 + -7.9365075786748794E-5;
   $42 = $37 * $41;
   $43 = $42 + 0.0015873015872548146;
   $44 = $37 * $43;
   $45 = $44 + -0.033333333333333132;
   $46 = $37 * $45;
   $47 = $46 + 1.0;
   $48 = $36 * $47;
   $49 = 3.0 - $48;
   $50 = $47 - $49;
   $51 = $$0106 * $49;
   $52 = 6.0 - $51;
   $53 = $50 / $52;
   $54 = $37 * $53;
   $55 = ($$1|0)==(0);
   if ($55) {
    $56 = $$0106 * $54;
    $57 = $56 - $37;
    $58 = $$0106 - $57;
    $$0 = $58;
    break;
   }
   $59 = $54 - $$0111;
   $60 = $$0106 * $59;
   $61 = $60 - $$0111;
   $62 = $61 - $37;
   switch ($$1|0) {
   case -1:  {
    $63 = $$0106 - $62;
    $64 = $63 * 0.5;
    $65 = $64 + -0.5;
    $$0 = $65;
    break L18;
    break;
   }
   case 1:  {
    $66 = $$0106 < -0.25;
    if ($66) {
     $67 = $$0106 + 0.5;
     $68 = $62 - $67;
     $69 = $68 * -2.0;
     $$0 = $69;
     break L18;
    } else {
     $70 = $$0106 - $62;
     $71 = $70 * 2.0;
     $72 = $71 + 1.0;
     $$0 = $72;
     break L18;
    }
    break;
   }
   default: {
    $73 = (($$1) + 1023)|0;
    $74 = (_bitshift64Shl(($73|0),0,52)|0);
    $75 = tempRet0;
    HEAP32[tempDoublePtr>>2] = $74;HEAP32[tempDoublePtr+4>>2] = $75;$76 = +HEAPF64[tempDoublePtr>>3];
    $77 = ($$1>>>0)>(56);
    if ($77) {
     $78 = $$0106 - $62;
     $79 = $78 + 1.0;
     $80 = ($$1|0)==(1024);
     $81 = $79 * 2.0;
     $82 = $81 * 8.9884656743115795E+307;
     $83 = $79 * $76;
     $$0107 = $80 ? $82 : $83;
     $84 = $$0107 + -1.0;
     $$0 = $84;
     break L18;
    } else {
     $85 = (1023 - ($$1))|0;
     $86 = (_bitshift64Shl(($85|0),0,52)|0);
     $87 = tempRet0;
     $88 = ($$1|0)<(20);
     HEAP32[tempDoublePtr>>2] = $86;HEAP32[tempDoublePtr+4>>2] = $87;$89 = +HEAPF64[tempDoublePtr>>3];
     $90 = $62 + $89;
     $91 = 1.0 - $89;
     $$sink112 = $88 ? $91 : 1.0;
     $$pn = $88 ? $62 : $90;
     $$sink = $$0106 - $$pn;
     $92 = $$sink112 + $$sink;
     $$1108 = $92 * $76;
     $$0 = $$1108;
     break L18;
    }
   }
   }
  }
 } while(0);
 return (+$$0);
}
function ___expo2($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + -1416.0996898839683;
 $2 = (+Math_exp((+$1)));
 $3 = $2 * 2.2471164185778949E+307;
 $4 = $3 * 2.2471164185778949E+307;
 return (+$4);
}
function ___DOUBLE_BITS_259($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _ccosf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp;
 $4 = ((($1)) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = - $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($3)) + 4|0);
 HEAPF32[$3>>2] = $6;
 HEAP32[$8>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 _ccoshf($2,$$byval_copy);
 $9 = HEAP32[$2>>2]|0;
 $10 = ((($2)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $9;
 HEAP32[$12>>2] = $11;
 STACKTOP = sp;return;
}
function _ccoshf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0;
 var $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0;
 var $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $9 = 0, $or$cond = 0, $or$cond130 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp;
 $4 = +HEAPF32[$1>>2];
 $5 = ((($1)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = (HEAPF32[tempDoublePtr>>2]=$4,HEAP32[tempDoublePtr>>2]|0);
 $8 = (HEAPF32[tempDoublePtr>>2]=$6,HEAP32[tempDoublePtr>>2]|0);
 $9 = $7 & 2147483647;
 $10 = $8 & 2147483647;
 $11 = ($9>>>0)<(2139095040);
 $12 = ($10>>>0)<(2139095040);
 $or$cond = $11 & $12;
 do {
  if ($or$cond) {
   $13 = ($10|0)==(0);
   if ($13) {
    $14 = (+_coshf($4));
    $15 = $4 * $6;
    $16 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $14;
    HEAPF32[$16>>2] = $15;
    break;
   }
   $17 = ($9>>>0)<(1091567616);
   if ($17) {
    $18 = (+_coshf($4));
    $19 = (+Math_cos((+$6)));
    $20 = $18 * $19;
    $21 = (+_sinhf($4));
    $22 = (+Math_sin((+$6)));
    $23 = $21 * $22;
    $24 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $20;
    HEAPF32[$24>>2] = $23;
    break;
   }
   $25 = ($9>>>0)<(1118925336);
   if ($25) {
    $26 = (+Math_abs((+$4)));
    $27 = (+Math_exp((+$26)));
    $28 = $27 * 0.5;
    $29 = (+Math_cos((+$6)));
    $30 = $28 * $29;
    $31 = (+_copysignf($28,$4));
    $32 = (+Math_sin((+$6)));
    $33 = $31 * $32;
    $34 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $30;
    HEAPF32[$34>>2] = $33;
    break;
   }
   $35 = ($9>>>0)<(1128313319);
   if ($35) {
    $36 = (+Math_abs((+$4)));
    $37 = ((($3)) + 4|0);
    HEAPF32[$3>>2] = $36;
    HEAPF32[$37>>2] = $6;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
    ___ldexp_cexpf($2,$$byval_copy,-1);
    $38 = HEAP32[$2>>2]|0;
    $39 = ((($2)) + 4|0);
    $40 = +HEAPF32[$39>>2];
    HEAP32[$1>>2] = $38;
    HEAPF32[$5>>2] = $40;
    $41 = (+_copysignf(1.0,$4));
    $42 = $40 * $41;
    $43 = ((($0)) + 4|0);
    HEAP32[$0>>2] = $38;
    HEAPF32[$43>>2] = $42;
    break;
   } else {
    $44 = $4 * 1.7014118346046923E+38;
    $45 = $44 * $44;
    $46 = (+Math_cos((+$6)));
    $47 = $45 * $46;
    $48 = (+Math_sin((+$6)));
    $49 = $44 * $48;
    $50 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $47;
    HEAPF32[$50>>2] = $49;
    break;
   }
  } else {
   $51 = ($9|0)==(0);
   $52 = ($10>>>0)>(2139095039);
   $or$cond3 = $51 & $52;
   if ($or$cond3) {
    $53 = $6 - $6;
    $54 = $4 * $53;
    $55 = (+_copysignf(0.0,$54));
    $56 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $53;
    HEAPF32[$56>>2] = $55;
    break;
   }
   $57 = ($10|0)==(0);
   $58 = ($9>>>0)>(2139095039);
   $or$cond5 = $58 & $57;
   if ($or$cond5) {
    $59 = $7 & 8388607;
    $60 = ($59|0)==(0);
    $61 = $4 * $4;
    if ($60) {
     $62 = (+_copysignf(0.0,$4));
     $63 = $6 * $62;
     $64 = ((($0)) + 4|0);
     HEAPF32[$0>>2] = $61;
     HEAPF32[$64>>2] = $63;
     break;
    } else {
     $65 = $4 + $4;
     $66 = $65 * $6;
     $67 = (+_copysignf(0.0,$66));
     $68 = ((($0)) + 4|0);
     HEAPF32[$0>>2] = $61;
     HEAPF32[$68>>2] = $67;
     break;
    }
   }
   $or$cond7 = $11 & $52;
   if ($or$cond7) {
    $69 = $6 - $6;
    $70 = $4 * $69;
    $71 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $69;
    HEAPF32[$71>>2] = $70;
    break;
   }
   $72 = $7 & 8388607;
   $73 = ($72|0)==(0);
   $or$cond130 = $58 & $73;
   $74 = $4 * $4;
   if (!($or$cond130)) {
    $83 = $6 - $6;
    $84 = $74 * $83;
    $85 = $4 + $4;
    $86 = $85 * $83;
    $87 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $84;
    HEAPF32[$87>>2] = $86;
    break;
   }
   if ($52) {
    $75 = $6 - $6;
    $76 = $4 * $75;
    $77 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $74;
    HEAPF32[$77>>2] = $76;
    break;
   } else {
    $78 = (+Math_cos((+$6)));
    $79 = $74 * $78;
    $80 = (+Math_sin((+$6)));
    $81 = $4 * $80;
    $82 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $79;
    HEAPF32[$82>>2] = $81;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _coshf($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 & 2147483647;
 $3 = (HEAP32[tempDoublePtr>>2]=$2,+HEAPF32[tempDoublePtr>>2]);
 $4 = ($2>>>0)<(1060205079);
 do {
  if ($4) {
   $5 = ($2>>>0)<(964689920);
   if ($5) {
    $$0 = 1.0;
   } else {
    $6 = (+_expm1f($3));
    $7 = $6 * $6;
    $8 = $6 + 1.0;
    $9 = $8 * 2.0;
    $10 = $7 / $9;
    $11 = $10 + 1.0;
    $$0 = $11;
   }
  } else {
   $12 = ($2>>>0)<(1118925335);
   if ($12) {
    $13 = (+Math_exp((+$3)));
    $14 = 1.0 / $13;
    $15 = $13 + $14;
    $16 = $15 * 0.5;
    $$0 = $16;
    break;
   } else {
    $17 = (+___expo2f($3));
    $$0 = $17;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _sinhf($0) {
 $0 = +$0;
 var $$ = 0.0, $$0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = ($1|0)<(0);
 $$ = $2 ? -0.5 : 0.5;
 $3 = $1 & 2147483647;
 $4 = (HEAP32[tempDoublePtr>>2]=$3,+HEAPF32[tempDoublePtr>>2]);
 $5 = ($3>>>0)<(1118925335);
 do {
  if ($5) {
   $6 = (+_expm1f($4));
   $7 = ($3>>>0)<(1065353216);
   if (!($7)) {
    $15 = $6 + 1.0;
    $16 = $6 / $15;
    $17 = $6 + $16;
    $18 = $$ * $17;
    $$0 = $18;
    break;
   }
   $8 = ($3>>>0)<(964689920);
   if ($8) {
    $$0 = $0;
   } else {
    $9 = $6 * 2.0;
    $10 = $6 * $6;
    $11 = $6 + 1.0;
    $12 = $10 / $11;
    $13 = $9 - $12;
    $14 = $$ * $13;
    $$0 = $14;
   }
  } else {
   $19 = $$ * 2.0;
   $20 = (+___expo2f($4));
   $21 = $19 * $20;
   $$0 = $21;
  }
 } while(0);
 return (+$$0);
}
function _expm1f($0) {
 $0 = +$0;
 var $$0 = 0.0, $$0102 = 0, $$0103 = 0.0, $$0104 = 0.0, $$0106 = 0.0, $$0107 = 0.0, $$0108 = 0.0, $$1 = 0, $$1105 = 0.0, $$pn = 0.0, $$sink = 0.0, $$sink109 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0;
 var $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0;
 var $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 & 2147483647;
 $3 = $1 >>> 31;
 $4 = ($2>>>0)>(1100331075);
 do {
  if ($4) {
   $5 = ($2>>>0)>(2139095040);
   if ($5) {
    $$0 = $0;
   } else {
    $6 = ($3|0)==(0);
    if ($6) {
     $7 = $0 > 88.7216796875;
     if ($7) {
      $8 = $0 * 1.7014118346046923E+38;
      $$0 = $8;
     } else {
      label = 11;
     }
    } else {
     $$0 = -1.0;
    }
   }
  } else {
   $9 = ($2>>>0)>(1051816472);
   if (!($9)) {
    $26 = ($2>>>0)<(855638016);
    if ($26) {
     $$0 = $0;
     break;
    } else {
     $$0103 = $0;$$0108 = 0.0;$$1 = 0;
     label = 14;
     break;
    }
   }
   $10 = ($2>>>0)<(1065686418);
   if ($10) {
    $11 = ($3|0)==(0);
    if ($11) {
     $12 = $0 + -0.69313812255859375;
     $$0102 = 1;$$0106 = $12;$$0107 = 9.0580006144591607E-6;
     label = 12;
     break;
    } else {
     $13 = $0 + 0.69313812255859375;
     $$0102 = -1;$$0106 = $13;$$0107 = -9.0580006144591607E-6;
     label = 12;
     break;
    }
   } else {
    label = 11;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $14 = $0 * 1.4426950216293335;
  $15 = ($3|0)!=(0);
  $16 = $15 ? -0.5 : 0.5;
  $17 = $14 + $16;
  $18 = (~~(($17)));
  $19 = (+($18|0));
  $20 = $19 * 0.69313812255859375;
  $21 = $0 - $20;
  $22 = $19 * 9.0580006144591607E-6;
  $$0102 = $18;$$0106 = $21;$$0107 = $22;
  label = 12;
 }
 if ((label|0) == 12) {
  $23 = $$0106 - $$0107;
  $24 = $$0106 - $23;
  $25 = $24 - $$0107;
  $$0103 = $23;$$0108 = $25;$$1 = $$0102;
  label = 14;
 }
 L18: do {
  if ((label|0) == 14) {
   $27 = $$0103 * 0.5;
   $28 = $$0103 * $27;
   $29 = $28 * 0.0015807170420885086;
   $30 = $29 + -0.03333321213722229;
   $31 = $28 * $30;
   $32 = $31 + 1.0;
   $33 = $27 * $32;
   $34 = 3.0 - $33;
   $35 = $32 - $34;
   $36 = $$0103 * $34;
   $37 = 6.0 - $36;
   $38 = $35 / $37;
   $39 = $28 * $38;
   $40 = ($$1|0)==(0);
   if ($40) {
    $41 = $$0103 * $39;
    $42 = $41 - $28;
    $43 = $$0103 - $42;
    $$0 = $43;
    break;
   }
   $44 = $39 - $$0108;
   $45 = $$0103 * $44;
   $46 = $45 - $$0108;
   $47 = $46 - $28;
   switch ($$1|0) {
   case -1:  {
    $48 = $$0103 - $47;
    $49 = $48 * 0.5;
    $50 = $49 + -0.5;
    $$0 = $50;
    break L18;
    break;
   }
   case 1:  {
    $51 = $$0103 < -0.25;
    if ($51) {
     $52 = $$0103 + 0.5;
     $53 = $47 - $52;
     $54 = $53 * -2.0;
     $$0 = $54;
     break L18;
    } else {
     $55 = $$0103 - $47;
     $56 = $55 * 2.0;
     $57 = $56 + 1.0;
     $$0 = $57;
     break L18;
    }
    break;
   }
   default: {
    $58 = $$1 << 23;
    $59 = (($58) + 1065353216)|0;
    $60 = (HEAP32[tempDoublePtr>>2]=$59,+HEAPF32[tempDoublePtr>>2]);
    $61 = ($$1>>>0)>(56);
    if ($61) {
     $62 = $$0103 - $47;
     $63 = $62 + 1.0;
     $64 = ($$1|0)==(128);
     $65 = $63 * 2.0;
     $66 = $65 * 1.7014118346046923E+38;
     $67 = $63 * $60;
     $$0104 = $64 ? $66 : $67;
     $68 = $$0104 + -1.0;
     $$0 = $68;
     break L18;
    } else {
     $69 = (127 - ($$1))|0;
     $70 = $69 << 23;
     $71 = ($$1|0)<(23);
     $72 = (HEAP32[tempDoublePtr>>2]=$70,+HEAPF32[tempDoublePtr>>2]);
     $73 = $47 + $72;
     $74 = 1.0 - $72;
     $$sink109 = $71 ? $74 : 1.0;
     $$pn = $71 ? $47 : $73;
     $$sink = $$0103 - $$pn;
     $75 = $$sink109 + $$sink;
     $$1105 = $75 * $60;
     $$0 = $$1105;
     break L18;
    }
   }
   }
  }
 } while(0);
 return (+$$0);
}
function ___expo2f($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + -162.88958740234375;
 $2 = (+Math_exp((+$1)));
 $3 = $2 * 1.6615349947311448E+35;
 $4 = $3 * 1.6615349947311448E+35;
 return (+$4);
}
function _ccoshl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $4;
 HEAPF64[$7>>3] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _ccosh($2,$$byval_copy);
 $8 = +HEAPF64[$2>>3];
 $9 = ((($2)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $8;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _ccosl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $4;
 HEAPF64[$7>>3] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _ccos($2,$$byval_copy);
 $8 = +HEAPF64[$2>>3];
 $9 = ((($2)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $8;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _cexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0.0, $$62 = 0.0, $$byval_copy = 0, $$off = 0, $$sink = 0.0, $$sink60 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 HEAPF64[tempDoublePtr>>3] = $6;$7 = HEAP32[tempDoublePtr>>2]|0;
 $8 = HEAP32[tempDoublePtr+4>>2]|0;
 $9 = $8 & 2147483647;
 $10 = $9 | $7;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = (+Math_exp((+$4)));
   $$sink = $6;$$sink60 = $12;
  } else {
   HEAPF64[tempDoublePtr>>3] = $4;$13 = HEAP32[tempDoublePtr>>2]|0;
   $14 = HEAP32[tempDoublePtr+4>>2]|0;
   $15 = $14 & 2147483647;
   $16 = $15 | $13;
   $17 = ($16|0)==(0);
   if ($17) {
    $18 = (+Math_cos((+$6)));
    $19 = (+Math_sin((+$6)));
    $$sink = $19;$$sink60 = $18;
    break;
   }
   $20 = ($9>>>0)>(2146435071);
   if ($20) {
    $21 = ($13|0)==(0);
    $22 = ($15|0)==(2146435072);
    $or$cond = $21 & $22;
    if ($or$cond) {
     $24 = ($14|0)<(0);
     $25 = $6 - $6;
     $$ = $24 ? 0.0 : $4;
     $$62 = $24 ? 0.0 : $25;
     $$sink = $$62;$$sink60 = $$;
     break;
    } else {
     $23 = $6 - $6;
     $$sink = $23;$$sink60 = $23;
     break;
    }
   } else {
    $$off = (($14) + -1082535490)|0;
    $26 = ($$off>>>0)<(1084067);
    if ($26) {
     $27 = ((($3)) + 8|0);
     HEAPF64[$3>>3] = $4;
     HEAPF64[$27>>3] = $6;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
     ___ldexp_cexp($2,$$byval_copy,0);
     $28 = +HEAPF64[$2>>3];
     $29 = ((($2)) + 8|0);
     $30 = +HEAPF64[$29>>3];
     $$sink = $30;$$sink60 = $28;
     break;
    } else {
     $31 = (+Math_exp((+$4)));
     $32 = (+Math_cos((+$6)));
     $33 = $31 * $32;
     $34 = (+Math_sin((+$6)));
     $35 = $31 * $34;
     $$sink = $35;$$sink60 = $33;
     break;
    }
   }
  }
 } while(0);
 $36 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $$sink60;
 HEAPF64[$36>>3] = $$sink;
 STACKTOP = sp;return;
}
function _cexpf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp;
 $4 = +HEAPF32[$1>>2];
 $5 = ((($1)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = (HEAPF32[tempDoublePtr>>2]=$6,HEAP32[tempDoublePtr>>2]|0);
 $8 = $7 & 2147483647;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = (+Math_exp((+$4)));
   $11 = ((($0)) + 4|0);
   HEAPF32[$0>>2] = $10;
   HEAPF32[$11>>2] = $6;
  } else {
   $12 = (HEAPF32[tempDoublePtr>>2]=$4,HEAP32[tempDoublePtr>>2]|0);
   $13 = $12 & 2147483647;
   $14 = ($13|0)==(0);
   if ($14) {
    $15 = (+Math_cos((+$6)));
    $16 = (+Math_sin((+$6)));
    $17 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $15;
    HEAPF32[$17>>2] = $16;
    break;
   }
   $18 = ($8>>>0)>(2139095039);
   if (!($18)) {
    $$off = (($12) + -1118925336)|0;
    $26 = ($$off>>>0)<(9342557);
    if ($26) {
     $27 = ((($3)) + 4|0);
     HEAPF32[$3>>2] = $4;
     HEAPF32[$27>>2] = $6;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
     ___ldexp_cexpf($2,$$byval_copy,0);
     $28 = HEAP32[$2>>2]|0;
     $29 = ((($2)) + 4|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ((($0)) + 4|0);
     HEAP32[$0>>2] = $28;
     HEAP32[$31>>2] = $30;
     break;
    } else {
     $32 = (+Math_exp((+$4)));
     $33 = (+Math_cos((+$6)));
     $34 = $32 * $33;
     $35 = (+Math_sin((+$6)));
     $36 = $32 * $35;
     $37 = ((($0)) + 4|0);
     HEAPF32[$0>>2] = $34;
     HEAPF32[$37>>2] = $36;
     break;
    }
   }
   $19 = ($13|0)==(2139095040);
   if (!($19)) {
    $20 = $6 - $6;
    $21 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $20;
    HEAPF32[$21>>2] = $20;
    break;
   }
   $22 = ($12|0)<(0);
   if ($22) {
    $23 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = 0.0;
    HEAPF32[$23>>2] = 0.0;
    break;
   } else {
    $24 = $6 - $6;
    $25 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $4;
    HEAPF32[$25>>2] = $24;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _cexpl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $4;
 HEAPF64[$7>>3] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _cexp($2,$$byval_copy);
 $8 = +HEAPF64[$2>>3];
 $9 = ((($2)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $8;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _cimag($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = +HEAPF64[$1>>3];
 return (+$2);
}
function _cimagf($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = +HEAPF32[$1>>2];
 return (+$2);
}
function _cimagl($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = +HEAPF64[$1>>3];
 return (+$2);
}
function _clogl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $4;
 HEAPF64[$7>>3] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _clog($2,$$byval_copy);
 $8 = +HEAPF64[$2>>3];
 $9 = ((($2)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $8;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _conj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF64[$1>>3];
 $3 = ((($1)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = - $4;
 $6 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $2;
 HEAPF64[$6>>3] = $5;
 return;
}
function _conjf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = - $4;
 $6 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $2;
 HEAPF32[$6>>2] = $5;
 return;
}
function _conjl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF64[$1>>3];
 $3 = ((($1)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = - $4;
 $6 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $2;
 HEAPF64[$6>>3] = $5;
 return;
}
function _cpow($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy1 = sp + 96|0;
 $$byval_copy = sp + 80|0;
 $3 = sp + 64|0;
 $4 = sp + 48|0;
 $5 = sp + 32|0;
 $6 = sp + 16|0;
 $7 = sp;
 $8 = +HEAPF64[$2>>3];
 $9 = ((($2)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = +HEAPF64[$1>>3];
 $12 = ((($1)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = ((($4)) + 8|0);
 HEAPF64[$4>>3] = $11;
 HEAPF64[$14>>3] = $13;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$4+12>>2]|0;
 _clog($3,$$byval_copy);
 $15 = +HEAPF64[$3>>3];
 $16 = ((($3)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $8 * $15;
 $19 = $10 * $17;
 $20 = $8 * $17;
 $21 = $10 * $15;
 $22 = $18 - $19;
 $23 = $21 + $20;
 $24 = ($22 != $22) | (0.0 != 0.0);
 $25 = ($23 != $23) | (0.0 != 0.0);
 $or$cond = $24 & $25;
 if ($or$cond) {
  ___muldc3(($5|0),(+$8),(+$10),(+$15),(+$17));
  $26 = +HEAPF64[$5>>3];
  $27 = ((($5)) + 8|0);
  $28 = +HEAPF64[$27>>3];
  $30 = $26;$31 = $28;
 } else {
  $30 = $22;$31 = $23;
 }
 $29 = ((($7)) + 8|0);
 HEAPF64[$7>>3] = $30;
 HEAPF64[$29>>3] = $31;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$7+12>>2]|0;
 _cexp($6,$$byval_copy1);
 $32 = +HEAPF64[$6>>3];
 $33 = ((($6)) + 8|0);
 $34 = +HEAPF64[$33>>3];
 $35 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $32;
 HEAPF64[$35>>3] = $34;
 STACKTOP = sp;return;
}
function _cpowf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy1 = sp + 48|0;
 $$byval_copy = sp + 40|0;
 $3 = sp + 32|0;
 $4 = sp + 24|0;
 $5 = sp + 16|0;
 $6 = sp + 8|0;
 $7 = sp;
 $8 = +HEAPF32[$2>>2];
 $9 = ((($2)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = HEAP32[$1>>2]|0;
 $12 = ((($1)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($4)) + 4|0);
 HEAP32[$4>>2] = $11;
 HEAP32[$14>>2] = $13;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
 _clogf($3,$$byval_copy);
 $15 = +HEAPF32[$3>>2];
 $16 = ((($3)) + 4|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $8 * $15;
 $19 = $10 * $17;
 $20 = $8 * $17;
 $21 = $10 * $15;
 $22 = $18 - $19;
 $23 = $21 + $20;
 $24 = ($22 != $22) | (0.0 != 0.0);
 $25 = ($23 != $23) | (0.0 != 0.0);
 $or$cond = $24 & $25;
 if ($or$cond) {
  ___mulsc3(($5|0),(+$8),(+$10),(+$15),(+$17));
  $26 = +HEAPF32[$5>>2];
  $27 = ((($5)) + 4|0);
  $28 = +HEAPF32[$27>>2];
  $30 = $26;$31 = $28;
 } else {
  $30 = $22;$31 = $23;
 }
 $29 = ((($7)) + 4|0);
 HEAPF32[$7>>2] = $30;
 HEAPF32[$29>>2] = $31;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$7+4>>2]|0;
 _cexpf($6,$$byval_copy1);
 $32 = HEAP32[$6>>2]|0;
 $33 = ((($6)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $32;
 HEAP32[$35>>2] = $34;
 STACKTOP = sp;return;
}
function _cpowl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy1 = sp + 64|0;
 $$byval_copy = sp + 48|0;
 $3 = sp + 32|0;
 $4 = sp + 16|0;
 $5 = sp;
 $6 = +HEAPF64[$1>>3];
 $7 = ((($1)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = +HEAPF64[$2>>3];
 $10 = ((($2)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = ((($4)) + 8|0);
 HEAPF64[$4>>3] = $6;
 HEAPF64[$12>>3] = $8;
 $13 = ((($5)) + 8|0);
 HEAPF64[$5>>3] = $9;
 HEAPF64[$13>>3] = $11;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$4+12>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$5+12>>2]|0;
 _cpow($3,$$byval_copy,$$byval_copy1);
 $14 = +HEAPF64[$3>>3];
 $15 = ((($3)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $14;
 HEAPF64[$17>>3] = $16;
 STACKTOP = sp;return;
}
function _cproj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF64[$1>>3];
 $3 = (___DOUBLE_BITS($2)|0);
 $4 = tempRet0;
 $5 = $4 & 2147483647;
 $6 = ($3|0)==(0);
 $7 = ($5|0)==(2146435072);
 $8 = $6 & $7;
 if ($8) {
  label = 3;
 } else {
  $9 = ((($1)) + 8|0);
  $10 = +HEAPF64[$9>>3];
  $11 = (___DOUBLE_BITS($10)|0);
  $12 = tempRet0;
  $13 = $12 & 2147483647;
  $14 = ($11|0)==(0);
  $15 = ($13|0)==(2146435072);
  $16 = $14 & $15;
  if ($16) {
   label = 3;
  } else {
   $19 = $2;$20 = $10;
  }
 }
 if ((label|0) == 3) {
  $17 = (+_copysign(0.0,$2));
  $19 = inf;$20 = $17;
 }
 $18 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $19;
 HEAPF64[$18>>3] = $20;
 return;
}
function ___DOUBLE_BITS($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _cprojf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = +HEAPF32[$1>>2];
 $4 = (___FLOAT_BITS($3)|0);
 $5 = $4 & 2147483647;
 $6 = ($5|0)==(2139095040);
 if ($6) {
  label = 3;
 } else {
  $7 = ((($1)) + 4|0);
  $8 = +HEAPF32[$7>>2];
  $9 = (___FLOAT_BITS($8)|0);
  $10 = $9 & 2147483647;
  $11 = ($10|0)==(2139095040);
  if ($11) {
   label = 3;
  } else {
   $$sink6 = $1;
  }
 }
 if ((label|0) == 3) {
  HEAPF32[$2>>2] = inf;
  $12 = ((($2)) + 4|0);
  $13 = (+_copysignf(0.0,$3));
  HEAPF32[$12>>2] = $13;
  $$sink6 = $2;
 }
 $14 = HEAP32[$$sink6>>2]|0;
 $15 = ((($$sink6)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $14;
 HEAP32[$17>>2] = $16;
 STACKTOP = sp;return;
}
function ___FLOAT_BITS($0) {
 $0 = +$0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 return ($1|0);
}
function _cprojl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $4;
 HEAPF64[$7>>3] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _cproj($2,$$byval_copy);
 $8 = +HEAPF64[$2>>3];
 $9 = ((($2)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $8;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _creal($0) {
 $0 = $0|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = +HEAPF64[$0>>3];
 return (+$1);
}
function _crealf($0) {
 $0 = $0|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = +HEAPF32[$0>>2];
 return (+$1);
}
function _creall($0) {
 $0 = $0|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = +HEAPF64[$0>>3];
 return (+$1);
}
function _csin($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = ((($1)) + 8|0);
 $5 = +HEAPF64[$4>>3];
 $6 = - $5;
 $7 = +HEAPF64[$1>>3];
 $8 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $6;
 HEAPF64[$8>>3] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _csinh($2,$$byval_copy);
 $9 = +HEAPF64[$2>>3];
 $10 = ((($2)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = - $9;
 $13 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $11;
 HEAPF64[$13>>3] = $12;
 STACKTOP = sp;return;
}
function _csinh($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$sink = 0.0, $$sink133 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 HEAPF64[tempDoublePtr>>3] = $4;$7 = HEAP32[tempDoublePtr>>2]|0;
 $8 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $6;$9 = HEAP32[tempDoublePtr>>2]|0;
 $10 = HEAP32[tempDoublePtr+4>>2]|0;
 $11 = $8 & 2147483647;
 $12 = $10 & 2147483647;
 $13 = ($11>>>0)<(2146435072);
 $14 = ($12>>>0)<(2146435072);
 $or$cond = $13 & $14;
 do {
  if ($or$cond) {
   $15 = $12 | $9;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = (+_sinh($4));
    $$sink = $6;$$sink133 = $17;
    break;
   }
   $18 = ($11>>>0)<(1077280768);
   if ($18) {
    $19 = (+_sinh($4));
    $20 = (+Math_cos((+$6)));
    $21 = $19 * $20;
    $22 = (+_cosh($4));
    $23 = (+Math_sin((+$6)));
    $24 = $22 * $23;
    $$sink = $24;$$sink133 = $21;
    break;
   }
   $25 = ($11>>>0)<(1082535490);
   if ($25) {
    $26 = (+Math_abs((+$4)));
    $27 = (+Math_exp((+$26)));
    $28 = $27 * 0.5;
    $29 = (+_copysign($28,$4));
    $30 = (+Math_cos((+$6)));
    $31 = $29 * $30;
    $32 = (+Math_sin((+$6)));
    $33 = $28 * $32;
    $$sink = $33;$$sink133 = $31;
    break;
   }
   $34 = ($11>>>0)<(1083620266);
   if ($34) {
    $35 = (+Math_abs((+$4)));
    $36 = ((($3)) + 8|0);
    HEAPF64[$3>>3] = $35;
    HEAPF64[$36>>3] = $6;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
    ___ldexp_cexp($2,$$byval_copy,-1);
    $37 = +HEAPF64[$2>>3];
    $38 = ((($2)) + 8|0);
    $39 = +HEAPF64[$38>>3];
    HEAPF64[$1>>3] = $37;
    HEAPF64[$5>>3] = $39;
    $40 = (+_copysign(1.0,$4));
    $41 = $37 * $40;
    $$sink = $39;$$sink133 = $41;
    break;
   } else {
    $42 = $4 * 8.9884656743115795E+307;
    $43 = (+Math_cos((+$6)));
    $44 = $42 * $43;
    $45 = $42 * $42;
    $46 = (+Math_sin((+$6)));
    $47 = $45 * $46;
    $$sink = $47;$$sink133 = $44;
    break;
   }
  } else {
   $48 = $11 | $7;
   $49 = ($48|0)==(0);
   $50 = ($12>>>0)>(2146435071);
   $or$cond3 = $49 & $50;
   if ($or$cond3) {
    $51 = $6 - $6;
    $52 = $4 * $51;
    $53 = (+_copysign(0.0,$52));
    $$sink = $51;$$sink133 = $53;
    break;
   }
   $54 = $12 | $9;
   $55 = ($54|0)==(0);
   $56 = ($11>>>0)>(2146435071);
   $or$cond5 = $56 & $55;
   if ($or$cond5) {
    $57 = $8 & 1048575;
    $58 = $57 | $7;
    $59 = ($58|0)==(0);
    if ($59) {
     $$sink = $6;$$sink133 = $4;
     break;
    }
    $60 = (+_copysign(0.0,$6));
    $$sink = $60;$$sink133 = $4;
    break;
   }
   $or$cond7 = $13 & $50;
   if ($or$cond7) {
    $61 = $6 - $6;
    $62 = $4 * $61;
    $$sink = $62;$$sink133 = $61;
    break;
   }
   if ($56) {
    $63 = $8 & 1048575;
    $64 = $63 | $7;
    $65 = ($64|0)==(0);
    if ($65) {
     if ($50) {
      $66 = $4 * $4;
      $67 = $6 - $6;
      $68 = $4 * $67;
      $$sink = $68;$$sink133 = $66;
      break;
     } else {
      $69 = (+Math_cos((+$6)));
      $70 = $4 * $69;
      $71 = (+Math_sin((+$6)));
      $72 = $71 * inf;
      $$sink = $72;$$sink133 = $70;
      break;
     }
    }
   }
   $73 = $4 * $4;
   $74 = $6 - $6;
   $75 = $73 * $74;
   $76 = $4 + $4;
   $77 = $76 * $74;
   $$sink = $77;$$sink133 = $75;
  }
 } while(0);
 $78 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $$sink133;
 HEAPF64[$78>>3] = $$sink;
 STACKTOP = sp;return;
}
function _csinf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp;
 $4 = ((($1)) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = - $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($3)) + 4|0);
 HEAPF32[$3>>2] = $6;
 HEAP32[$8>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 _csinhf($2,$$byval_copy);
 $9 = +HEAPF32[$2>>2];
 $10 = ((($2)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = - $9;
 $13 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $11;
 HEAPF32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function _csinhf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$cast = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $81 = 0.0, $82 = 0, $9 = 0, $or$cond = 0, $or$cond122 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp;
 $4 = +HEAPF32[$1>>2];
 $5 = ((($1)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = (HEAPF32[tempDoublePtr>>2]=$4,HEAP32[tempDoublePtr>>2]|0);
 $8 = (HEAPF32[tempDoublePtr>>2]=$6,HEAP32[tempDoublePtr>>2]|0);
 $9 = $7 & 2147483647;
 $10 = $8 & 2147483647;
 $11 = ($9>>>0)<(2139095040);
 $12 = ($10>>>0)<(2139095040);
 $or$cond = $11 & $12;
 do {
  if ($or$cond) {
   $13 = ($10|0)==(0);
   if ($13) {
    $14 = (+_sinhf($4));
    $15 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $14;
    HEAPF32[$15>>2] = $6;
    break;
   }
   $16 = ($9>>>0)<(1091567616);
   if ($16) {
    $17 = (+_sinhf($4));
    $18 = (+Math_cos((+$6)));
    $19 = $17 * $18;
    $20 = (+_coshf($4));
    $21 = (+Math_sin((+$6)));
    $22 = $20 * $21;
    $23 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $19;
    HEAPF32[$23>>2] = $22;
    break;
   }
   $24 = ($9>>>0)<(1118925336);
   if ($24) {
    $25 = (+Math_abs((+$4)));
    $26 = (+Math_exp((+$25)));
    $27 = $26 * 0.5;
    $28 = (+_copysignf($27,$4));
    $29 = (+Math_cos((+$6)));
    $30 = $28 * $29;
    $31 = (+Math_sin((+$6)));
    $32 = $27 * $31;
    $33 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $30;
    HEAPF32[$33>>2] = $32;
    break;
   }
   $34 = ($9>>>0)<(1128313319);
   if ($34) {
    $35 = (+Math_abs((+$4)));
    $36 = ((($3)) + 4|0);
    HEAPF32[$3>>2] = $35;
    HEAPF32[$36>>2] = $6;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
    ___ldexp_cexpf($2,$$byval_copy,-1);
    $37 = HEAP32[$2>>2]|0;
    $38 = ((($2)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    HEAP32[$1>>2] = $37;
    HEAP32[$5>>2] = $39;
    $$cast = (HEAP32[tempDoublePtr>>2]=$37,+HEAPF32[tempDoublePtr>>2]);
    $40 = (+_copysignf(1.0,$4));
    $41 = $40 * $$cast;
    $42 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $41;
    HEAP32[$42>>2] = $39;
    break;
   } else {
    $43 = $4 * 1.7014118346046923E+38;
    $44 = (+Math_cos((+$6)));
    $45 = $43 * $44;
    $46 = $43 * $43;
    $47 = (+Math_sin((+$6)));
    $48 = $46 * $47;
    $49 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $45;
    HEAPF32[$49>>2] = $48;
    break;
   }
  } else {
   $50 = ($9|0)==(0);
   $51 = ($10>>>0)>(2139095039);
   $or$cond3 = $50 & $51;
   if ($or$cond3) {
    $52 = $6 - $6;
    $53 = $4 * $52;
    $54 = (+_copysignf(0.0,$53));
    $55 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $54;
    HEAPF32[$55>>2] = $52;
    break;
   }
   $56 = ($10|0)==(0);
   $57 = ($9>>>0)>(2139095039);
   $or$cond5 = $57 & $56;
   if ($or$cond5) {
    $58 = $7 & 8388607;
    $59 = ($58|0)==(0);
    if ($59) {
     $60 = ((($0)) + 4|0);
     HEAPF32[$0>>2] = $4;
     HEAPF32[$60>>2] = $6;
     break;
    } else {
     $61 = (+_copysignf(0.0,$6));
     $62 = ((($0)) + 4|0);
     HEAPF32[$0>>2] = $4;
     HEAPF32[$62>>2] = $61;
     break;
    }
   }
   $or$cond7 = $11 & $51;
   if ($or$cond7) {
    $63 = $6 - $6;
    $64 = $4 * $63;
    $65 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $63;
    HEAPF32[$65>>2] = $64;
    break;
   }
   $66 = $7 & 8388607;
   $67 = ($66|0)==(0);
   $or$cond122 = $57 & $67;
   if (!($or$cond122)) {
    $77 = $4 * $4;
    $78 = $6 - $6;
    $79 = $77 * $78;
    $80 = $4 + $4;
    $81 = $80 * $78;
    $82 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $79;
    HEAPF32[$82>>2] = $81;
    break;
   }
   if ($51) {
    $68 = $4 * $4;
    $69 = $6 - $6;
    $70 = $4 * $69;
    $71 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $68;
    HEAPF32[$71>>2] = $70;
    break;
   } else {
    $72 = (+Math_cos((+$6)));
    $73 = $4 * $72;
    $74 = (+Math_sin((+$6)));
    $75 = $74 * inf;
    $76 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $73;
    HEAPF32[$76>>2] = $75;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _csinhl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $4;
 HEAPF64[$7>>3] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _csinh($2,$$byval_copy);
 $8 = +HEAPF64[$2>>3];
 $9 = ((($2)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $8;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _csinl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $4;
 HEAPF64[$7>>3] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _csin($2,$$byval_copy);
 $8 = +HEAPF64[$2>>3];
 $9 = ((($2)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $8;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _csqrtl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $4;
 HEAPF64[$7>>3] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _csqrt($2,$$byval_copy);
 $8 = +HEAPF64[$2>>3];
 $9 = ((($2)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $8;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _ctan($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = ((($1)) + 8|0);
 $5 = +HEAPF64[$4>>3];
 $6 = - $5;
 $7 = +HEAPF64[$1>>3];
 $8 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $6;
 HEAPF64[$8>>3] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _ctanh($2,$$byval_copy);
 $9 = +HEAPF64[$2>>3];
 $10 = ((($2)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = - $9;
 $13 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $11;
 HEAPF64[$13>>3] = $12;
 STACKTOP = sp;return;
}
function _ctanh($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF64[$1>>3];
 $3 = ((($1)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 HEAPF64[tempDoublePtr>>3] = $2;$5 = HEAP32[tempDoublePtr>>2]|0;
 $6 = HEAP32[tempDoublePtr+4>>2]|0;
 $7 = $6 & 2147483647;
 $8 = ($7>>>0)>(2146435071);
 do {
  if ($8) {
   $9 = $6 & 1048575;
   $10 = $9 | $5;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $4 == 0.0;
    $13 = $2 * $4;
    $14 = $12 ? $4 : $13;
    $15 = ((($0)) + 8|0);
    HEAPF64[$0>>3] = $2;
    HEAPF64[$15>>3] = $14;
    break;
   }
   $16 = (($6) + -1073741824)|0;
   $17 = (___DOUBLE_BITS_25($4)|0);
   $18 = tempRet0;
   $19 = $18 & 2147483647;
   $20 = ($17|0)==(0);
   $21 = ($19|0)==(2146435072);
   $22 = $20 & $21;
   if ($22) {
    $26 = $4;
   } else {
    $23 = (+Math_sin((+$4)));
    $24 = (+Math_cos((+$4)));
    $25 = $23 * $24;
    $26 = $25;
   }
   $27 = (+_copysign(0.0,$26));
   $28 = ((($0)) + 8|0);
   $29 = $0;
   $30 = $29;
   HEAP32[$30>>2] = $5;
   $31 = (($29) + 4)|0;
   $32 = $31;
   HEAP32[$32>>2] = $16;
   HEAPF64[$28>>3] = $27;
  } else {
   (___DOUBLE_BITS_25($4)|0);
   $33 = tempRet0;
   $34 = $33 & 2146435072;
   $35 = (0)==(0);
   $36 = ($34|0)==(2146435072);
   $37 = $35 & $36;
   if ($37) {
    $38 = $2 != 0.0;
    $39 = $4 - $4;
    $40 = $38 ? $39 : $2;
    $41 = ((($0)) + 8|0);
    HEAPF64[$0>>3] = $40;
    HEAPF64[$41>>3] = $39;
    break;
   }
   $42 = ($7>>>0)>(1077280767);
   if ($42) {
    $43 = (+Math_abs((+$2)));
    $44 = - $43;
    $45 = (+Math_exp((+$44)));
    $46 = (+_copysign(1.0,$2));
    $47 = (+Math_sin((+$4)));
    $48 = $47 * 4.0;
    $49 = (+Math_cos((+$4)));
    $50 = $48 * $49;
    $51 = $45 * $50;
    $52 = $45 * $51;
    $53 = ((($0)) + 8|0);
    HEAPF64[$0>>3] = $46;
    HEAPF64[$53>>3] = $52;
    break;
   } else {
    $54 = (+Math_tan((+$4)));
    $55 = $54 * $54;
    $56 = $55 + 1.0;
    $57 = (+_sinh($2));
    $58 = $57 * $57;
    $59 = $58 + 1.0;
    $60 = (+Math_sqrt((+$59)));
    $61 = $57 * $56;
    $62 = $57 * $61;
    $63 = $62 + 1.0;
    $64 = $56 * $60;
    $65 = $57 * $64;
    $66 = $65 / $63;
    $67 = $54 / $63;
    $68 = ((($0)) + 8|0);
    HEAPF64[$0>>3] = $66;
    HEAPF64[$68>>3] = $67;
    break;
   }
  }
 } while(0);
 return;
}
function ___DOUBLE_BITS_25($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _ctanf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp;
 $4 = ((($1)) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = - $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($3)) + 4|0);
 HEAPF32[$3>>2] = $6;
 HEAP32[$8>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 _ctanhf($2,$$byval_copy);
 $9 = +HEAPF32[$2>>2];
 $10 = ((($2)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = - $9;
 $13 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $11;
 HEAPF32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function _ctanhf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF32[$1>>2];
 $3 = ((($1)) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = (HEAPF32[tempDoublePtr>>2]=$2,HEAP32[tempDoublePtr>>2]|0);
 $6 = $5 & 2147483647;
 $7 = ($6>>>0)>(2139095039);
 do {
  if ($7) {
   $8 = $5 & 8388607;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $4 == 0.0;
    $11 = $2 * $4;
    $12 = $10 ? $4 : $11;
    $13 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $2;
    HEAPF32[$13>>2] = $12;
    break;
   }
   $14 = (($5) + -1073741824)|0;
   $15 = (___FLOAT_BITS_28($4)|0);
   $16 = $15 & 2147483647;
   $17 = ($16|0)==(2139095040);
   if ($17) {
    $21 = $4;
   } else {
    $18 = (+Math_sin((+$4)));
    $19 = (+Math_cos((+$4)));
    $20 = $18 * $19;
    $21 = $20;
   }
   $22 = (+_copysignf(0.0,$21));
   $23 = ((($0)) + 4|0);
   HEAP32[$0>>2] = $14;
   HEAPF32[$23>>2] = $22;
  } else {
   $24 = (___FLOAT_BITS_28($4)|0);
   $25 = $24 & 2139095040;
   $26 = ($25|0)==(2139095040);
   if ($26) {
    $27 = ($6|0)==(0);
    $28 = $4 - $4;
    $29 = $27 ? $2 : $28;
    $30 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $29;
    HEAPF32[$30>>2] = $28;
    break;
   }
   $31 = ($6>>>0)>(1093664767);
   if ($31) {
    $32 = (+Math_abs((+$2)));
    $33 = - $32;
    $34 = (+Math_exp((+$33)));
    $35 = (+_copysignf(1.0,$2));
    $36 = (+Math_sin((+$4)));
    $37 = $36 * 4.0;
    $38 = (+Math_cos((+$4)));
    $39 = $37 * $38;
    $40 = $34 * $39;
    $41 = $34 * $40;
    $42 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $35;
    HEAPF32[$42>>2] = $41;
    break;
   } else {
    $43 = (+Math_tan((+$4)));
    $44 = $43 * $43;
    $45 = $44 + 1.0;
    $46 = (+_sinhf($2));
    $47 = $46 * $46;
    $48 = $47 + 1.0;
    $49 = (+Math_sqrt((+$48)));
    $50 = $46 * $45;
    $51 = $46 * $50;
    $52 = $51 + 1.0;
    $53 = $45 * $49;
    $54 = $46 * $53;
    $55 = $54 / $52;
    $56 = $43 / $52;
    $57 = ((($0)) + 4|0);
    HEAPF32[$0>>2] = $55;
    HEAPF32[$57>>2] = $56;
    break;
   }
  }
 } while(0);
 return;
}
function ___FLOAT_BITS_28($0) {
 $0 = +$0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 return ($1|0);
}
function _ctanhl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $4;
 HEAPF64[$7>>3] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _ctanh($2,$$byval_copy);
 $8 = +HEAPF64[$2>>3];
 $9 = ((($2)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $8;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _ctanl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = ((($3)) + 8|0);
 HEAPF64[$3>>3] = $4;
 HEAPF64[$7>>3] = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
 _ctan($2,$$byval_copy);
 $8 = +HEAPF64[$2>>3];
 $9 = ((($2)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = ((($0)) + 8|0);
 HEAPF64[$0>>3] = $8;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _crypt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___crypt_r($0,$1,189016)|0);
 return ($2|0);
}
function ___crypt_r($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(36);
 L1: do {
  if ($4) {
   $5 = ((($1)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 13;
   } else {
    $8 = ((($1)) + 2|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(0);
    if ($10) {
     label = 13;
    } else {
     $11 = ($6<<24>>24)==(49);
     $12 = ($9<<24>>24)==(36);
     $or$cond = $11 & $12;
     if ($or$cond) {
      $13 = (___crypt_md5($0,$1,$2)|0);
      $$0 = $13;
      break;
     }
     switch ($6<<24>>24) {
     case 50:  {
      $14 = ((($1)) + 3|0);
      $15 = HEAP8[$14>>0]|0;
      $16 = ($15<<24>>24)==(36);
      if (!($16)) {
       label = 13;
       break L1;
      }
      $17 = (___crypt_blowfish($0,$1,$2)|0);
      $$0 = $17;
      break L1;
      break;
     }
     case 53:  {
      if (!($12)) {
       label = 13;
       break L1;
      }
      $18 = (___crypt_sha256($0,$1,$2)|0);
      $$0 = $18;
      break L1;
      break;
     }
     case 54:  {
      if (!($12)) {
       label = 13;
       break L1;
      }
      $19 = (___crypt_sha512($0,$1,$2)|0);
      $$0 = $19;
      break L1;
      break;
     }
     default: {
      label = 13;
      break L1;
     }
     }
    }
   }
  } else {
   label = 13;
  }
 } while(0);
 if ((label|0) == 13) {
  $20 = (___crypt_des($0,$1,$2)|0);
  $$0 = $20;
 }
 return ($$0|0);
}
function ___crypt_md5($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = (_md5crypt($0,$1,$2)|0);
 $5 = (_md5crypt(167960,167978,$3)|0);
 $6 = ($4|0)!=(0|0);
 $7 = ($5|0)==($3|0);
 $or$cond = $6 & $7;
 if ($or$cond) {
  $8 = (_memcmp($3,167991,35)|0);
  $9 = ($8|0)==(0);
  $$ = $9 ? $4 : 168026;
  $$0 = $$;
 } else {
  $$0 = 168026;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___crypt_blowfish($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $3 = sp + 288|0;
 $4 = sp + 216|0;
 $5 = sp + 144|0;
 $6 = sp + 72|0;
 $7 = sp;
 $8 = (_BF_crypt($0,$1,$2,16)|0);
 dest=$3; src=167653; stop=dest+30|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = ((($1)) + 2|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = ((($3)) + 2|0);
  HEAP8[$12>>0] = $11;
 }
 $13 = ((($3)) + 30|0);
 dest=$13; stop=dest+62|0; do { HEAP8[dest>>0]=85|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $14 = ((($3)) + 92|0);
 HEAP8[$14>>0] = 0;
 $15 = (_BF_crypt(167683,$3,$13,1)|0);
 $16 = ($15|0)==($13|0);
 if ($16) {
  $17 = (_memcmp($13,$3,29)|0);
  $18 = ($17|0)==(0);
  if ($18) {
   $19 = ((($3)) + 59|0);
   $20 = ((($3)) + 2|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 & 1;
   $23 = $22&255;
   $24 = (167693 + (($23*34)|0)|0);
   $25 = (_memcmp($19,$24,34)|0);
   $26 = ($25|0)==(0);
   $30 = $26;
  } else {
   $30 = 0;
  }
 } else {
  $30 = 0;
 }
 _BF_set_key(167761,$4,$5,2);
 _BF_set_key(167761,$6,$7,4);
 $27 = HEAP32[$5>>2]|0;
 $28 = $27 ^ 65536;
 HEAP32[$5>>2] = $28;
 $29 = ($28|0)==(-610510404);
 $or$cond28 = $30 & $29;
 if ($or$cond28) {
  $31 = ((($6)) + 68|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(859059456);
  if ($33) {
   $34 = (_memcmp($4,$6,72)|0);
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = (_memcmp($5,$7,72)|0);
    $37 = ($36|0)==(0);
    $38 = $37;
   } else {
    $38 = 0;
   }
  } else {
   $38 = 0;
  }
 } else {
  $38 = 0;
 }
 $or$cond = $9 & $38;
 $$ = $or$cond ? $8 : 168026;
 STACKTOP = sp;return ($$|0);
}
function ___crypt_sha256($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 $4 = (_sha256crypt($0,$1,$2)|0);
 $5 = (_sha256crypt(167468,167486,$3)|0);
 $6 = ($4|0)!=(0|0);
 $7 = ($5|0)==($3|0);
 $or$cond = $6 & $7;
 if ($or$cond) {
  $8 = (_memcmp($3,167516,73)|0);
  $9 = ($8|0)==(0);
  $$ = $9 ? $4 : 168026;
  $$0 = $$;
 } else {
  $$0 = 168026;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___crypt_sha512($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 $4 = (_sha512crypt($0,$1,$2)|0);
 $5 = (_sha512crypt(164829,164847,$3)|0);
 $6 = ($4|0)!=(0|0);
 $7 = ($5|0)==($3|0);
 $or$cond = $6 & $7;
 if ($or$cond) {
  $8 = (_memcmp($3,164877,116)|0);
  $9 = ($8|0)==(0);
  $$ = $9 ? $4 : 168026;
  $$0 = $$;
 } else {
  $$0 = 168026;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___crypt_des($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$023 = 0, $$024 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = HEAP8[$1>>0]|0;
 $5 = ($4<<24>>24)==(95);
 $$023 = $5 ? 164742 : 164752;
 $6 = (__crypt_extended_r_uut($0,$1,$2)|0);
 $7 = (__crypt_extended_r_uut(164755,$$023,$3)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  label = 3;
 } else {
  $$024 = $5 ? 164776 : 164797;
  $9 = (_strcmp($7,$$024)|0);
  $10 = ($9|0)==(0);
  $11 = ($6|0)!=(0|0);
  $or$cond = $11 & $10;
  if ($or$cond) {
   $$0 = $6;
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $12 = HEAP8[$1>>0]|0;
  $13 = ($12<<24>>24)==(42);
  $14 = $13 ? 164811 : 168026;
  $$0 = $14;
 }
 STACKTOP = sp;return ($$0|0);
}
function __crypt_extended_r_uut($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0100124 = 0, $$0102 = 0, $$0103121 = 0, $$0106123 = 0, $$0109125 = 0, $$097$ = 0, $$097126 = 0, $$1101122 = 0, $$1110118 = 0, $$198120 = 0, $$2105 = 0, $$2108 = 0, $$299$lcssa = 0, $$299119 = 0, $$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $3 = sp + 8|0;
 $4 = sp + 136|0;
 $5 = sp + 4|0;
 $6 = sp;
 $7 = ((($4)) + 7|0);
 $$0109125 = $4;$$097126 = $0;
 while(1) {
  $8 = HEAP8[$$097126>>0]|0;
  $9 = $8&255;
  $10 = $9 << 1;
  $11 = $10&255;
  $12 = ((($$0109125)) + 1|0);
  HEAP8[$$0109125>>0] = $11;
  $13 = HEAP8[$$097126>>0]|0;
  $14 = ($13<<24>>24)==(0);
  $15 = ((($$097126)) + 1|0);
  $$097$ = $14 ? $$097126 : $15;
  $16 = ($12>>>0)>($7>>>0);
  if ($16) {
   break;
  } else {
   $$0109125 = $12;$$097126 = $$097$;
  }
 }
 ___des_setkey($4,$3);
 $17 = HEAP8[$1>>0]|0;
 $18 = ($17<<24>>24)==(95);
 L4: do {
  if ($18) {
   $$0100124 = 1;$$0106123 = 0;
   while(1) {
    $19 = (($1) + ($$0100124)|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = $20&255;
    $22 = (_ascii_to_bin($21)|0);
    $23 = (168047 + ($22)|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = ($24<<24>>24)==($20<<24>>24);
    if (!($25)) {
     $$4 = 0;
     break L4;
    }
    $26 = ($$0100124*6)|0;
    $27 = (($26) + -6)|0;
    $28 = $22 << $27;
    $29 = $28 | $$0106123;
    $30 = (($$0100124) + 1)|0;
    $31 = ($30>>>0)<(5);
    if ($31) {
     $$0100124 = $30;$$0106123 = $29;
    } else {
     break;
    }
   }
   $32 = ($29|0)==(0);
   if ($32) {
    $$4 = 0;
   } else {
    $$0103121 = 0;$$1101122 = 5;
    while(1) {
     $35 = (($1) + ($$1101122)|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36&255;
     $38 = (_ascii_to_bin($37)|0);
     $39 = (168047 + ($38)|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==($36<<24>>24);
     if (!($41)) {
      $$4 = 0;
      break L4;
     }
     $42 = ($$1101122*6)|0;
     $43 = (($42) + -30)|0;
     $44 = $38 << $43;
     $45 = $44 | $$0103121;
     $46 = (($$1101122) + 1)|0;
     $47 = ($46>>>0)<(9);
     if ($47) {
      $$0103121 = $45;$$1101122 = $46;
     } else {
      break;
     }
    }
    $33 = HEAP8[$$097$>>0]|0;
    $34 = ($33<<24>>24)==(0);
    if (!($34)) {
     $$198120 = $$097$;
     while(1) {
      _des_cipher($4,$4,$3);
      $$1110118 = $4;$$299119 = $$198120;
      while(1) {
       $48 = HEAP8[$$299119>>0]|0;
       $49 = ($48<<24>>24)==(0);
       if ($49) {
        $$299$lcssa = $$299119;
        break;
       }
       $50 = $48&255;
       $51 = ((($$299119)) + 1|0);
       $52 = $50 << 1;
       $53 = ((($$1110118)) + 1|0);
       $54 = HEAP8[$$1110118>>0]|0;
       $55 = $54&255;
       $56 = $52 ^ $55;
       $57 = $56&255;
       HEAP8[$$1110118>>0] = $57;
       $58 = ($53>>>0)>($7>>>0);
       if ($58) {
        $$299$lcssa = $51;
        break;
       } else {
        $$1110118 = $53;$$299119 = $51;
       }
      }
      ___des_setkey($4,$3);
      $59 = HEAP8[$$299$lcssa>>0]|0;
      $60 = ($59<<24>>24)==(0);
      if ($60) {
       break;
      } else {
       $$198120 = $$299$lcssa;
      }
     }
    }
    dest=$2; src=$1; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $61 = ((($2)) + 9|0);
    HEAP8[$61>>0] = 0;
    $$0102 = $61;$$2105 = $45;$$2108 = $29;
    label = 18;
   }
  } else {
   $62 = (_ascii_is_unsafe($17)|0);
   $63 = ($62|0)==(0);
   if ($63) {
    $64 = ((($1)) + 1|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = (_ascii_is_unsafe($65)|0);
    $67 = ($66|0)==(0);
    if ($67) {
     $68 = $65&255;
     $69 = (_ascii_to_bin($68)|0);
     $70 = $69 << 6;
     $71 = $17&255;
     $72 = (_ascii_to_bin($71)|0);
     $73 = $70 | $72;
     HEAP8[$2>>0] = $17;
     $74 = HEAP8[$64>>0]|0;
     $75 = ((($2)) + 1|0);
     HEAP8[$75>>0] = $74;
     $76 = ((($2)) + 2|0);
     $$0102 = $76;$$2105 = $73;$$2108 = 25;
     label = 18;
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $77 = (_setup_salt($$2105)|0);
  ___do_des(0,0,$5,$6,$$2108,$77,$3);
  $78 = HEAP32[$5>>2]|0;
  $79 = $78 >>> 8;
  $80 = $78 >>> 26;
  $81 = (168047 + ($80)|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = ((($$0102)) + 1|0);
  HEAP8[$$0102>>0] = $82;
  $84 = $78 >>> 20;
  $85 = $84 & 63;
  $86 = (168047 + ($85)|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = ((($$0102)) + 2|0);
  HEAP8[$83>>0] = $87;
  $89 = $78 >>> 14;
  $90 = $89 & 63;
  $91 = (168047 + ($90)|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = ((($$0102)) + 3|0);
  HEAP8[$88>>0] = $92;
  $94 = $79 & 63;
  $95 = (168047 + ($94)|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = ((($$0102)) + 4|0);
  HEAP8[$93>>0] = $96;
  $98 = $78 << 16;
  $99 = HEAP32[$6>>2]|0;
  $100 = $99 >>> 16;
  $101 = $100 | $98;
  $102 = $78 >>> 2;
  $103 = $102 & 63;
  $104 = (168047 + ($103)|0);
  $105 = HEAP8[$104>>0]|0;
  $106 = ((($$0102)) + 5|0);
  HEAP8[$97>>0] = $105;
  $107 = $101 >>> 12;
  $108 = $107 & 63;
  $109 = (168047 + ($108)|0);
  $110 = HEAP8[$109>>0]|0;
  $111 = ((($$0102)) + 6|0);
  HEAP8[$106>>0] = $110;
  $112 = $99 >>> 22;
  $113 = $112 & 63;
  $114 = (168047 + ($113)|0);
  $115 = HEAP8[$114>>0]|0;
  $116 = ((($$0102)) + 7|0);
  HEAP8[$111>>0] = $115;
  $117 = $100 & 63;
  $118 = (168047 + ($117)|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = ((($$0102)) + 8|0);
  HEAP8[$116>>0] = $119;
  $121 = $99 << 2;
  $122 = $99 >>> 10;
  $123 = $122 & 63;
  $124 = (168047 + ($123)|0);
  $125 = HEAP8[$124>>0]|0;
  $126 = ((($$0102)) + 9|0);
  HEAP8[$120>>0] = $125;
  $127 = $99 >>> 4;
  $128 = $127 & 63;
  $129 = (168047 + ($128)|0);
  $130 = HEAP8[$129>>0]|0;
  $131 = ((($$0102)) + 10|0);
  HEAP8[$126>>0] = $130;
  $132 = $121 & 60;
  $133 = (168047 + ($132)|0);
  $134 = HEAP8[$133>>0]|0;
  $135 = ((($$0102)) + 11|0);
  HEAP8[$131>>0] = $134;
  HEAP8[$135>>0] = 0;
  $$4 = $2;
 }
 STACKTOP = sp;return ($$4|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function ___des_setkey($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0100105 = 0, $$0104 = 0, $$093103 = 0, $$094110 = 0, $$095109 = 0, $$096106 = 0, $$097108 = 0, $$098107 = 0, $$1102 = 0, $$199101 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond114 = 0, $exitcond115 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 3|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ((($0)) + 2|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 << 8;
 $9 = $8 | $4;
 $10 = ((($0)) + 1|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 16;
 $14 = $9 | $13;
 $15 = HEAP8[$0>>0]|0;
 $16 = $15&255;
 $17 = $16 << 24;
 $18 = $14 | $17;
 $19 = ((($0)) + 7|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = ((($0)) + 6|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 << 8;
 $26 = $25 | $21;
 $27 = ((($0)) + 5|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 << 16;
 $31 = $26 | $30;
 $32 = ((($0)) + 4|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $34 << 24;
 $36 = $31 | $35;
 $$094110 = 0;$$095109 = 0;$$097108 = 28;$$098107 = 0;
 while(1) {
  $37 = $$098107 << 1;
  $38 = $18 >>> $$097108;
  $39 = $38 & 15;
  $40 = ((12484 + ($$098107<<6)|0) + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($$098107) + 4)|0;
  $43 = $36 >>> $$097108;
  $44 = $43 & 15;
  $45 = ((12484 + ($42<<6)|0) + ($44<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $41 | $$094110;
  $48 = $47 | $46;
  $49 = ((12996 + ($37<<6)|0) + ($39<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($$097108) + -4)|0;
  $52 = $37 | 1;
  $53 = $18 >>> $51;
  $54 = $53 & 15;
  $55 = ((12996 + ($52<<6)|0) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($$098107) + 8)|0;
  $58 = $36 >>> $51;
  $59 = $58 & 15;
  $60 = ((12996 + ($57<<6)|0) + ($59<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $50 | $$095109;
  $63 = $62 | $56;
  $64 = $63 | $61;
  $65 = (($$098107) + 1)|0;
  $66 = (($$097108) + -8)|0;
  $exitcond115 = ($65|0)==(4);
  if ($exitcond115) {
   $$0100105 = 0;$$096106 = 0;
   break;
  } else {
   $$094110 = $48;$$095109 = $64;$$097108 = $66;$$098107 = $65;
  }
 }
 while(1) {
  $67 = (164813 + ($$0100105)|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = (($$096106) + ($69))|0;
  $71 = $48 << $70;
  $72 = (28 - ($70))|0;
  $73 = $48 >>> $72;
  $74 = $73 | $71;
  $75 = $64 << $70;
  $76 = $64 >>> $72;
  $77 = $76 | $75;
  $$0104 = 0;$$093103 = 0;$$1102 = 25;$$199101 = 0;
  while(1) {
   $78 = $74 >>> $$1102;
   $79 = $78 & 7;
   $80 = ((13764 + ($$199101<<5)|0) + ($79<<2)|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $81 | $$093103;
   $83 = $77 >>> $$1102;
   $84 = $83 & 7;
   $85 = ((13892 + ($$199101<<5)|0) + ($84<<2)|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $86 | $$0104;
   $88 = (($$1102) + -4)|0;
   $89 = $74 >>> $88;
   $90 = $89 & 15;
   $91 = ((14020 + ($$199101<<6)|0) + ($90<<2)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = $82 | $92;
   $94 = $77 >>> $88;
   $95 = $94 & 15;
   $96 = ((14276 + ($$199101<<6)|0) + ($95<<2)|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $87 | $97;
   $99 = (($$1102) + -7)|0;
   $100 = (($$199101) + 1)|0;
   $exitcond = ($100|0)==(4);
   if ($exitcond) {
    break;
   } else {
    $$0104 = $98;$$093103 = $93;$$1102 = $99;$$199101 = $100;
   }
  }
  $101 = (($1) + ($$0100105<<2)|0);
  HEAP32[$101>>2] = $93;
  $102 = (((($1)) + 64|0) + ($$0100105<<2)|0);
  HEAP32[$102>>2] = $98;
  $103 = (($$0100105) + 1)|0;
  $exitcond114 = ($103|0)==(16);
  if ($exitcond114) {
   break;
  } else {
   $$0100105 = $103;$$096106 = $70;
  }
 }
 return;
}
function _ascii_to_bin($0) {
 $0 = $0|0;
 var $$$ = 0, $$$$v = 0, $$$v = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)<(128);
 $2 = (($0) + -256)|0;
 $3 = $1 ? $0 : $2;
 $4 = ($3|0)>(64);
 $5 = ($3|0)>(96);
 $$$v = $5 ? 5 : 11;
 $$$$v = $4 ? $$$v : 18;
 $$$ = (($$$$v) + ($3))|0;
 $6 = $$$ & 63;
 return ($6|0);
}
function _des_cipher($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 $5 = ((($0)) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ((($0)) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 8;
 $12 = $11 | $7;
 $13 = ((($0)) + 1|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 << 16;
 $17 = $12 | $16;
 $18 = HEAP8[$0>>0]|0;
 $19 = $18&255;
 $20 = $19 << 24;
 $21 = $17 | $20;
 $22 = ((($0)) + 7|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = ((($0)) + 6|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $27 << 8;
 $29 = $28 | $24;
 $30 = ((($0)) + 5|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $32 << 16;
 $34 = $29 | $33;
 $35 = ((($0)) + 4|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = $37 << 24;
 $39 = $34 | $38;
 ___do_des($21,$39,$3,$4,1,0,$2);
 $40 = HEAP32[$3>>2]|0;
 $41 = $40 >>> 24;
 $42 = $41&255;
 HEAP8[$1>>0] = $42;
 $43 = $40 >>> 16;
 $44 = $43&255;
 $45 = ((($1)) + 1|0);
 HEAP8[$45>>0] = $44;
 $46 = $40 >>> 8;
 $47 = $46&255;
 $48 = ((($1)) + 2|0);
 HEAP8[$48>>0] = $47;
 $49 = $40&255;
 $50 = ((($1)) + 3|0);
 HEAP8[$50>>0] = $49;
 $51 = HEAP32[$4>>2]|0;
 $52 = $51 >>> 24;
 $53 = $52&255;
 $54 = ((($1)) + 4|0);
 HEAP8[$54>>0] = $53;
 $55 = $51 >>> 16;
 $56 = $55&255;
 $57 = ((($1)) + 5|0);
 HEAP8[$57>>0] = $56;
 $58 = $51 >>> 8;
 $59 = $58&255;
 $60 = ((($1)) + 6|0);
 HEAP8[$60>>0] = $59;
 $61 = $51&255;
 $62 = ((($1)) + 7|0);
 HEAP8[$62>>0] = $61;
 STACKTOP = sp;return;
}
function _ascii_is_unsafe($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($0<<24>>24) {
 case 10: case 0:  {
  $2 = 1;
  break;
 }
 default: {
  $1 = ($0<<24>>24)==(58);
  $phitmp = $1&1;
  $2 = $phitmp;
 }
 }
 return ($2|0);
}
function _setup_salt($0) {
 $0 = $0|0;
 var $$016$ = 0, $$01621 = 0, $$01720 = 0, $$01819 = 0, $$022 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$01621 = 0;$$01720 = 1;$$01819 = 8388608;$$022 = 0;
 while(1) {
  $1 = $$01720 & $0;
  $2 = ($1|0)==(0);
  $3 = $2 ? 0 : $$01819;
  $$016$ = $3 | $$01621;
  $4 = $$01720 << 1;
  $5 = $$01819 >>> 1;
  $6 = (($$022) + 1)|0;
  $exitcond = ($6|0)==(24);
  if ($exitcond) {
   break;
  } else {
   $$01621 = $$016$;$$01720 = $4;$$01819 = $5;$$022 = $6;
  }
 }
 return ($$016$|0);
}
function ___do_des($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0104123 = 0, $$0105122 = 0, $$0106121 = 0, $$0108136 = 0, $$0111128 = 0, $$0112127 = 0, $$0113126 = 0, $$0114135 = 0, $$0115134 = 0, $$0116133 = 0, $$0124 = 0, $$1$lcssa = 0, $$1$ph = 0, $$1117$lcssa = 0, $$1117$ph = 0, $$1117130 = 0, $$1131 = 0, $$2118125 = 0, $$2129 = 0, $$2129$phi = 0;
 var $$in = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond141 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = $1 | $0;
 $8 = ($7|0)==(0);
 if ($8) {
  $$1$ph = 0;$$1117$ph = 0;
 } else {
  $$0108136 = 0;$$0114135 = 28;$$0115134 = 0;$$0116133 = 0;
  while(1) {
   $11 = $0 >>> $$0114135;
   $12 = $11 & 15;
   $13 = ((7876 + ($$0115134<<6)|0) + ($12<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($$0115134) + 8)|0;
   $16 = $1 >>> $$0114135;
   $17 = $16 & 15;
   $18 = ((7876 + ($15<<6)|0) + ($17<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $14 | $$0108136;
   $21 = $20 | $19;
   $22 = ((8900 + ($$0115134<<6)|0) + ($12<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((8900 + ($15<<6)|0) + ($17<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $23 | $$0116133;
   $27 = $26 | $25;
   $28 = (($$0115134) + 1)|0;
   $29 = (($$0114135) + -4)|0;
   $exitcond141 = ($28|0)==(8);
   if ($exitcond141) {
    $$1$ph = $21;$$1117$ph = $27;
    break;
   } else {
    $$0108136 = $21;$$0114135 = $29;$$0115134 = $28;$$0116133 = $27;
   }
  }
 }
 $9 = ($4|0)==(0);
 if ($9) {
  $$1$lcssa = $$1$ph;$$1117$lcssa = $$1117$ph;
 } else {
  $10 = ((($6)) + 64|0);
  $$1117130 = $$1117$ph;$$1131 = $$1$ph;$$in = $4;
  while(1) {
   $$0111128 = $10;$$0112127 = $6;$$0113126 = 16;$$2118125 = $$1117130;$$2129 = $$1131;
   while(1) {
    $32 = (($$0113126) + -1)|0;
    $33 = $$2118125 << 23;
    $34 = $33 & 8388608;
    $35 = $$2118125 >>> 9;
    $36 = $35 & 8126464;
    $37 = $34 | $36;
    $38 = $$2118125 >>> 11;
    $39 = $38 & 258048;
    $40 = $37 | $39;
    $41 = $$2118125 >>> 13;
    $42 = $41 & 4032;
    $43 = $40 | $42;
    $44 = $$2118125 >>> 15;
    $45 = $44 & 63;
    $46 = $43 | $45;
    $47 = $$2118125 << 7;
    $48 = $47 & 16515072;
    $49 = $$2118125 << 5;
    $50 = $49 & 258048;
    $51 = $$2118125 << 3;
    $52 = $51 & 4032;
    $53 = $$2118125 << 1;
    $54 = $53 & 62;
    $55 = $$2118125 >>> 31;
    $56 = $50 | $55;
    $57 = $56 | $48;
    $58 = $57 | $52;
    $59 = $58 | $54;
    $60 = $46 ^ $59;
    $61 = $60 & $5;
    $62 = ((($$0112127)) + 4|0);
    $63 = HEAP32[$$0112127>>2]|0;
    $64 = $61 ^ $46;
    $65 = $64 ^ $63;
    $66 = ((($$0111128)) + 4|0);
    $67 = HEAP32[$$0111128>>2]|0;
    $68 = $61 ^ $59;
    $69 = $68 ^ $67;
    $70 = $65 >>> 18;
    $71 = (9924 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $65 >>> 12;
    $74 = $73 & 63;
    $75 = (10180 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 | $72;
    $78 = $65 >>> 6;
    $79 = $78 & 63;
    $80 = (10436 + ($79<<2)|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = $77 | $81;
    $83 = $65 & 63;
    $84 = (10692 + ($83<<2)|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $82 | $85;
    $87 = $69 >>> 18;
    $88 = (10948 + ($87<<2)|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = $86 | $89;
    $91 = $69 >>> 12;
    $92 = $91 & 63;
    $93 = (11204 + ($92<<2)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = $90 | $94;
    $96 = $69 >>> 6;
    $97 = $96 & 63;
    $98 = (11460 + ($97<<2)|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = $95 | $99;
    $101 = $69 & 63;
    $102 = (11716 + ($101<<2)|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = $100 | $103;
    $105 = $104 ^ $$2129;
    $106 = ($32|0)==(0);
    if ($106) {
     break;
    } else {
     $$2129$phi = $$2118125;$$0111128 = $66;$$0112127 = $62;$$0113126 = $32;$$2118125 = $105;$$2129 = $$2129$phi;
    }
   }
   $30 = (($$in) + -1)|0;
   $31 = ($30|0)==(0);
   if ($31) {
    $$1$lcssa = $105;$$1117$lcssa = $$2118125;
    break;
   } else {
    $$1117130 = $$2118125;$$1131 = $105;$$in = $30;
   }
  }
 }
 $$0104123 = 0;$$0105122 = 28;$$0106121 = 0;$$0124 = 0;
 while(1) {
  $107 = $$1$lcssa >>> $$0105122;
  $108 = $107 & 15;
  $109 = ((11972 + ($$0106121<<6)|0) + ($108<<2)|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($$0106121) + 4)|0;
  $112 = $$1117$lcssa >>> $$0105122;
  $113 = $112 & 15;
  $114 = ((11972 + ($111<<6)|0) + ($113<<2)|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $110 | $$0124;
  $117 = $116 | $115;
  $118 = (($$0105122) + -4)|0;
  $119 = $$1$lcssa >>> $118;
  $120 = $119 & 15;
  $121 = ((11972 + ($$0106121<<6)|0) + ($120<<2)|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $$1117$lcssa >>> $118;
  $124 = $123 & 15;
  $125 = ((11972 + ($111<<6)|0) + ($124<<2)|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = $122 | $$0104123;
  $128 = $127 | $126;
  $129 = (($$0106121) + 1)|0;
  $130 = (($$0105122) + -8)|0;
  $exitcond = ($129|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$0104123 = $128;$$0105122 = $130;$$0106121 = $129;$$0124 = $117;
  }
 }
 HEAP32[$2>>2] = $128;
 HEAP32[$3>>2] = $117;
 return;
}
function _sha512crypt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$094106 = 0, $$097117 = 0, $$099 = 0, $$1 = 0, $$196 = 0, $$198$lcssa = 0, $$198116 = 0, $$2101 = 0, $$2113 = 0, $$3109 = 0, $$4108 = 0, $$5107 = 0, $$6105 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $exitcond = 0, $exitcond120 = 0, $exitcond121 = 0, $exitcond122 = 0, $isdigit = 0, $isdigittmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0;
 var $vararg_ptr5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(448|0);
 $vararg_buffer1 = sp + 208|0;
 $vararg_buffer = sp + 200|0;
 $3 = sp;
 $4 = sp + 376|0;
 $5 = sp + 312|0;
 $6 = sp + 248|0;
 $7 = sp + 224|0;
 $8 = sp + 220|0;
 dest=$7; stop=dest+20|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $$097117 = 0;
 while(1) {
  $9 = (($0) + ($$097117)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   label = 4;
   break;
  }
  $12 = (($$097117) + 1)|0;
  $13 = ($12>>>0)<(257);
  if ($13) {
   $$097117 = $12;
  } else {
   $$1 = 0;
   break;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $14 = (_strncmp($1,164993,3)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    $16 = ((($1)) + 3|0);
    $17 = (_strncmp($16,167593,7)|0);
    $18 = ($17|0)==(0);
    L7: do {
     if ($18) {
      $19 = ((($1)) + 10|0);
      $20 = HEAP8[$19>>0]|0;
      $21 = $20 << 24 >> 24;
      $isdigittmp = (($21) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      do {
       if ($isdigit) {
        $22 = (_strtoul($19,$8,10)|0);
        $23 = HEAP32[$8>>2]|0;
        $24 = HEAP8[$23>>0]|0;
        $25 = ($24<<24>>24)==(36);
        if ($25) {
         $26 = ((($23)) + 1|0);
         $27 = ($22>>>0)<(1000);
         if ($27) {
          $$099 = 1000;
         } else {
          $28 = ($22>>>0)>(9999999);
          if ($28) {
           break;
          } else {
           $$099 = $22;
          }
         }
         HEAP32[$vararg_buffer>>2] = $$099;
         (_sprintf($7,167601,$vararg_buffer)|0);
         $$196 = $26;$$2101 = $$099;
         break L7;
        }
       }
      } while(0);
      $$1 = 0;
      break L4;
     } else {
      $$196 = $16;$$2101 = 5000;
     }
    } while(0);
    $$198116 = 0;
    L17: while(1) {
     $29 = (($$196) + ($$198116)|0);
     $30 = HEAP8[$29>>0]|0;
     switch ($30<<24>>24) {
     case 58: case 10:  {
      $$1 = 0;
      break L4;
      break;
     }
     case 36: case 0:  {
      $$198$lcssa = $$198116;
      break L17;
      break;
     }
     default: {
     }
     }
     $31 = (($$198116) + 1)|0;
     $32 = ($31>>>0)<(16);
     if ($32) {
      $$198116 = $31;
     } else {
      $$198$lcssa = $31;
      break;
     }
    }
    _sha512_init($3);
    _sha512_update($3,$0,$$097117);
    _sha512_update($3,$$196,$$198$lcssa);
    _sha512_update($3,$0,$$097117);
    _sha512_sum($3,$4);
    _sha512_init($3);
    _sha512_update($3,$0,$$097117);
    _sha512_update($3,$$196,$$198$lcssa);
    _hashmd_54($3,$$097117,$4);
    $33 = ($$097117|0)==(0);
    if ($33) {
     _sha512_sum($3,$4);
     _sha512_init($3);
    } else {
     $$2113 = $$097117;
     while(1) {
      $34 = $$2113 & 1;
      $35 = ($34|0)==(0);
      if ($35) {
       _sha512_update($3,$0,$$097117);
      } else {
       _sha512_update($3,$4,64);
      }
      $36 = $$2113 >>> 1;
      $37 = ($36|0)==(0);
      if ($37) {
       break;
      } else {
       $$2113 = $36;
      }
     }
     _sha512_sum($3,$4);
     _sha512_init($3);
     if (!($33)) {
      $$3109 = 0;
      while(1) {
       _sha512_update($3,$0,$$097117);
       $38 = (($$3109) + 1)|0;
       $exitcond122 = ($38|0)==($$097117|0);
       if ($exitcond122) {
        break;
       } else {
        $$3109 = $38;
       }
      }
     }
    }
    _sha512_sum($3,$5);
    _sha512_init($3);
    $39 = HEAP8[$4>>0]|0;
    $40 = $39&255;
    $41 = (($40) + 15)|0;
    $$4108 = 0;
    while(1) {
     _sha512_update($3,$$196,$$198$lcssa);
     $42 = (($$4108) + 1)|0;
     $exitcond121 = ($$4108|0)==($41|0);
     if ($exitcond121) {
      break;
     } else {
      $$4108 = $42;
     }
    }
    _sha512_sum($3,$6);
    $43 = ($$2101|0)==(0);
    if (!($43)) {
     $$5107 = 0;
     while(1) {
      _sha512_init($3);
      $44 = $$5107 & 1;
      $45 = ($44|0)!=(0);
      if ($45) {
       _hashmd_54($3,$$097117,$5);
      } else {
       _sha512_update($3,$4,64);
      }
      $46 = (($$5107>>>0) % 3)&-1;
      $47 = ($46|0)==(0);
      if (!($47)) {
       _sha512_update($3,$6,$$198$lcssa);
      }
      $48 = (($$5107>>>0) % 7)&-1;
      $49 = ($48|0)==(0);
      if (!($49)) {
       _hashmd_54($3,$$097117,$5);
      }
      if ($45) {
       _sha512_update($3,$4,64);
      } else {
       _hashmd_54($3,$$097117,$5);
      }
      _sha512_sum($3,$4);
      $50 = (($$5107) + 1)|0;
      $exitcond120 = ($50|0)==($$2101|0);
      if ($exitcond120) {
       break;
      } else {
       $$5107 = $50;
      }
     }
    }
    HEAP32[$vararg_buffer1>>2] = $7;
    $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = $$198$lcssa;
    $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
    HEAP32[$vararg_ptr5>>2] = $$196;
    $51 = (_sprintf($2,164997,$vararg_buffer1)|0);
    $52 = (($2) + ($51)|0);
    $$094106 = $52;$$6105 = 0;
    while(1) {
     $53 = (165008 + (($$6105*3)|0)|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54&255;
     $56 = (($4) + ($55)|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = $57&255;
     $59 = $58 << 16;
     $60 = (((165008 + (($$6105*3)|0)|0)) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = (($4) + ($62)|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = $64&255;
     $66 = $65 << 8;
     $67 = $66 | $59;
     $68 = (((165008 + (($$6105*3)|0)|0)) + 2|0);
     $69 = HEAP8[$68>>0]|0;
     $70 = $69&255;
     $71 = (($4) + ($70)|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $72&255;
     $74 = $67 | $73;
     $75 = (_to64_56($$094106,$74,4)|0);
     $76 = (($$6105) + 1)|0;
     $exitcond = ($76|0)==(21);
     if ($exitcond) {
      break;
     } else {
      $$094106 = $75;$$6105 = $76;
     }
    }
    $77 = ((($4)) + 63|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = $78&255;
    $80 = (_to64_56($75,$79,2)|0);
    HEAP8[$80>>0] = 0;
    $$1 = $2;
   } else {
    $$1 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$16 = 0;
   } else {
    $$01823 = $0;$$01925$in = $2;$$024 = $1;$10 = $4;
    while(1) {
     $$01925 = (($$01925$in) + -1)|0;
     $6 = HEAP8[$$024>>0]|0;
     $7 = ($6<<24>>24)!=(0);
     $8 = ($$01925|0)!=(0);
     $or$cond = $8 & $7;
     $9 = ($10<<24>>24)==($6<<24>>24);
     $or$cond21 = $9 & $or$cond;
     if (!($or$cond21)) {
      $$0$lcssa = $$024;$16 = $10;
      break L3;
     }
     $11 = ((($$01823)) + 1|0);
     $12 = ((($$024)) + 1|0);
     $13 = HEAP8[$11>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0$lcssa = $12;$16 = 0;
      break;
     } else {
      $$01823 = $11;$$01925$in = $$01925;$$024 = $12;$10 = $13;
     }
    }
   }
  } while(0);
  $15 = $16&255;
  $17 = HEAP8[$$0$lcssa>>0]|0;
  $18 = $17&255;
  $19 = (($15) - ($18))|0;
  $$020 = $19;
 }
 return ($$020|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _sha512_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 8|0);
 $6 = $5;
 $7 = $6;
 HEAP32[$7>>2] = -205731576;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 1779033703;
 $10 = ((($0)) + 16|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = -2067093701;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = -1150833019;
 $15 = ((($0)) + 24|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = -23791573;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = 1013904242;
 $20 = ((($0)) + 32|0);
 $21 = $20;
 $22 = $21;
 HEAP32[$22>>2] = 1595750129;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = -1521486534;
 $25 = ((($0)) + 40|0);
 $26 = $25;
 $27 = $26;
 HEAP32[$27>>2] = -1377402159;
 $28 = (($26) + 4)|0;
 $29 = $28;
 HEAP32[$29>>2] = 1359893119;
 $30 = ((($0)) + 48|0);
 $31 = $30;
 $32 = $31;
 HEAP32[$32>>2] = 725511199;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = -1694144372;
 $35 = ((($0)) + 56|0);
 $36 = $35;
 $37 = $36;
 HEAP32[$37>>2] = -79577749;
 $38 = (($36) + 4)|0;
 $39 = $38;
 HEAP32[$39>>2] = 528734635;
 $40 = ((($0)) + 64|0);
 $41 = $40;
 $42 = $41;
 HEAP32[$42>>2] = 327033209;
 $43 = (($41) + 4)|0;
 $44 = $43;
 HEAP32[$44>>2] = 1541459225;
 return;
}
function _sha512_update($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$0$ph = 0, $$027$lcssa = 0, $$027$ph = 0, $$02728 = 0, $$029 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = $5 & 127;
 $10 = (_i64Add(($5|0),($8|0),($2|0),0)|0);
 $11 = tempRet0;
 $12 = $0;
 $13 = $12;
 HEAP32[$13>>2] = $10;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $11;
 $16 = ($9|0)==(0);
 do {
  if ($16) {
   $$0$ph = $2;$$027$ph = $1;
   label = 5;
  } else {
   $17 = (128 - ($9))|0;
   $18 = ($17>>>0)>($2>>>0);
   $19 = (((($0)) + 72|0) + ($9)|0);
   if ($18) {
    _memcpy(($19|0),($1|0),($2|0))|0;
    break;
   } else {
    $20 = ((($0)) + 72|0);
    _memcpy(($19|0),($1|0),($17|0))|0;
    $21 = (($2) - ($17))|0;
    $22 = (($1) + ($17)|0);
    _processblock_59($0,$20);
    $$0$ph = $21;$$027$ph = $22;
    label = 5;
    break;
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $23 = ($$0$ph>>>0)>(127);
  if ($23) {
   $24 = (($$0$ph) + -128)|0;
   $25 = $24 & -128;
   $26 = (($25) + 128)|0;
   $$02728 = $$027$ph;$$029 = $$0$ph;
   while(1) {
    _processblock_59($0,$$02728);
    $27 = (($$029) + -128)|0;
    $28 = ((($$02728)) + 128|0);
    $29 = ($27>>>0)>(127);
    if ($29) {
     $$02728 = $28;$$029 = $27;
    } else {
     break;
    }
   }
   $30 = (($24) - ($25))|0;
   $scevgep = (($$027$ph) + ($26)|0);
   $$0$lcssa = $30;$$027$lcssa = $scevgep;
  } else {
   $$0$lcssa = $$0$ph;$$027$lcssa = $$027$ph;
  }
  $31 = ((($0)) + 72|0);
  _memcpy(($31|0),($$027$lcssa|0),($$0$lcssa|0))|0;
 }
 return;
}
function _sha512_sum($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$035 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _pad_58($0);
 $$035 = 0;
 while(1) {
  $2 = (((($0)) + 8|0) + ($$035<<3)|0);
  $3 = $2;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) + 4)|0;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (_bitshift64Lshr(($5|0),($8|0),56)|0);
  $10 = tempRet0;
  $11 = $9&255;
  $12 = $$035 << 3;
  $13 = (($1) + ($12)|0);
  HEAP8[$13>>0] = $11;
  $14 = $2;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + 4)|0;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (_bitshift64Lshr(($16|0),($19|0),48)|0);
  $21 = tempRet0;
  $22 = $20&255;
  $23 = $12 | 1;
  $24 = (($1) + ($23)|0);
  HEAP8[$24>>0] = $22;
  $25 = $2;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) + 4)|0;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = (_bitshift64Lshr(($27|0),($30|0),40)|0);
  $32 = tempRet0;
  $33 = $31&255;
  $34 = $12 | 2;
  $35 = (($1) + ($34)|0);
  HEAP8[$35>>0] = $33;
  $36 = $2;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $39 = (($36) + 4)|0;
  $40 = $39;
  $41 = HEAP32[$40>>2]|0;
  $42 = $41&255;
  $43 = $12 | 3;
  $44 = (($1) + ($43)|0);
  HEAP8[$44>>0] = $42;
  $45 = $2;
  $46 = $45;
  $47 = HEAP32[$46>>2]|0;
  $48 = (($45) + 4)|0;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $51 = (_bitshift64Lshr(($47|0),($50|0),24)|0);
  $52 = tempRet0;
  $53 = $51&255;
  $54 = $12 | 4;
  $55 = (($1) + ($54)|0);
  HEAP8[$55>>0] = $53;
  $56 = $2;
  $57 = $56;
  $58 = HEAP32[$57>>2]|0;
  $59 = (($56) + 4)|0;
  $60 = $59;
  $61 = HEAP32[$60>>2]|0;
  $62 = (_bitshift64Lshr(($58|0),($61|0),16)|0);
  $63 = tempRet0;
  $64 = $62&255;
  $65 = $12 | 5;
  $66 = (($1) + ($65)|0);
  HEAP8[$66>>0] = $64;
  $67 = $2;
  $68 = $67;
  $69 = HEAP32[$68>>2]|0;
  $70 = (($67) + 4)|0;
  $71 = $70;
  $72 = HEAP32[$71>>2]|0;
  $73 = (_bitshift64Lshr(($69|0),($72|0),8)|0);
  $74 = tempRet0;
  $75 = $73&255;
  $76 = $12 | 6;
  $77 = (($1) + ($76)|0);
  HEAP8[$77>>0] = $75;
  $78 = $2;
  $79 = $78;
  $80 = HEAP32[$79>>2]|0;
  $81 = (($78) + 4)|0;
  $82 = $81;
  $83 = HEAP32[$82>>2]|0;
  $84 = $80&255;
  $85 = $12 | 7;
  $86 = (($1) + ($85)|0);
  HEAP8[$86>>0] = $84;
  $87 = (($$035) + 1)|0;
  $exitcond = ($87|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $$035 = $87;
  }
 }
 return;
}
function _hashmd_54($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(64);
 if ($3) {
  $4 = (($1) + -65)|0;
  $5 = $4 & -64;
  $$06 = $1;
  while(1) {
   _sha512_update($0,$2,64);
   $6 = (($$06) + -64)|0;
   $7 = ($6>>>0)>(64);
   if ($7) {
    $$06 = $6;
   } else {
    break;
   }
  }
  $8 = (($1) + -64)|0;
  $9 = (($8) - ($5))|0;
  $$0$lcssa = $9;
 } else {
  $$0$lcssa = $1;
 }
 _sha512_update($0,$2,$$0$lcssa);
 return;
}
function _to64_56($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$047 = 0, $$05$lcssa = 0, $$056 = 0, $$08 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)>(0);
 if ($3) {
  $$047 = $1;$$056 = $0;$$08 = $2;
  while(1) {
   $4 = (($$08) + -1)|0;
   $5 = $$047 & 63;
   $6 = (168047 + ($5)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ((($$056)) + 1|0);
   HEAP8[$$056>>0] = $7;
   $9 = $$047 >>> 6;
   $10 = ($$08|0)>(1);
   if ($10) {
    $$047 = $9;$$056 = $8;$$08 = $4;
   } else {
    $$05$lcssa = $8;
    break;
   }
  }
 } else {
  $$05$lcssa = $0;
 }
 return ($$05$lcssa|0);
}
function _pad_58($0) {
 $0 = $0|0;
 var $$0 = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $3 & 127;
 $8 = ((($0)) + 72|0);
 $9 = (($7) + 1)|0;
 $10 = (((($0)) + 72|0) + ($7)|0);
 HEAP8[$10>>0] = -128;
 $11 = ($7>>>0)>(111);
 if ($11) {
  $12 = $7 ^ 127;
  $13 = (((($0)) + 72|0) + ($9)|0);
  _memset(($13|0),0,($12|0))|0;
  _processblock_59($0,$8);
  $$0 = 0;$$pre$phiZ2D = $8;
 } else {
  $$0 = $9;$$pre$phiZ2D = $8;
 }
 $14 = (((($0)) + 72|0) + ($$0)|0);
 $15 = (120 - ($$0))|0;
 _memset(($14|0),0,($15|0))|0;
 $16 = $0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (_bitshift64Shl(($18|0),($21|0),3)|0);
 $23 = tempRet0;
 $24 = $0;
 $25 = $24;
 HEAP32[$25>>2] = $22;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $28 = (_bitshift64Lshr(($18|0),($21|0),53)|0);
 $29 = tempRet0;
 $30 = $28&255;
 $31 = ((($0)) + 192|0);
 HEAP8[$31>>0] = $30;
 $32 = (_bitshift64Lshr(($18|0),($21|0),45)|0);
 $33 = tempRet0;
 $34 = $32&255;
 $35 = ((($0)) + 193|0);
 HEAP8[$35>>0] = $34;
 $36 = (_bitshift64Lshr(($18|0),($21|0),37)|0);
 $37 = tempRet0;
 $38 = $36&255;
 $39 = ((($0)) + 194|0);
 HEAP8[$39>>0] = $38;
 $40 = (_bitshift64Lshr(($18|0),($21|0),29)|0);
 $41 = tempRet0;
 $42 = $40&255;
 $43 = ((($0)) + 195|0);
 HEAP8[$43>>0] = $42;
 $44 = (_bitshift64Lshr(($18|0),($21|0),21)|0);
 $45 = tempRet0;
 $46 = $44&255;
 $47 = ((($0)) + 196|0);
 HEAP8[$47>>0] = $46;
 $48 = (_bitshift64Lshr(($18|0),($21|0),13)|0);
 $49 = tempRet0;
 $50 = $48&255;
 $51 = ((($0)) + 197|0);
 HEAP8[$51>>0] = $50;
 $52 = (_bitshift64Lshr(($18|0),($21|0),5)|0);
 $53 = tempRet0;
 $54 = $52&255;
 $55 = ((($0)) + 198|0);
 HEAP8[$55>>0] = $54;
 $56 = $22&255;
 $57 = ((($0)) + 199|0);
 HEAP8[$57>>0] = $56;
 _processblock_59($0,$$pre$phiZ2D);
 return;
}
function _processblock_59($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0129 = 0, $$1128 = 0, $$2127 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $199$phi = 0, $2 = 0, $20 = 0, $200 = 0, $200$phi = 0, $201 = 0, $202 = 0;
 var $202$phi = 0, $203 = 0, $203$phi = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $222$phi = 0, $223 = 0, $223$phi = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $245$phi = 0, $246 = 0, $247 = 0, $247$phi = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $251$phi = 0, $252 = 0, $253 = 0, $253$phi = 0, $254 = 0, $255 = 0, $256 = 0, $256$phi = 0, $257 = 0, $257$phi = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond132 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(640|0);
 $2 = sp;
 $$0129 = 0;
 while(1) {
  $9 = $$0129 << 3;
  $10 = (($1) + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = (_bitshift64Shl(($12|0),0,56)|0);
  $14 = tempRet0;
  $15 = (($2) + ($$0129<<3)|0);
  $16 = $9 | 1;
  $17 = (($1) + ($16)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = (_bitshift64Shl(($19|0),0,48)|0);
  $21 = tempRet0;
  $22 = $20 | $13;
  $23 = $21 | $14;
  $24 = $9 | 2;
  $25 = (($1) + ($24)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = (_bitshift64Shl(($27|0),0,40)|0);
  $29 = tempRet0;
  $30 = $28 | $22;
  $31 = $29 | $23;
  $32 = $9 | 3;
  $33 = (($1) + ($32)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = $35 | $31;
  $37 = $9 | 4;
  $38 = (($1) + ($37)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = (_bitshift64Shl(($40|0),0,24)|0);
  $42 = tempRet0;
  $43 = $41 | $30;
  $44 = $42 | $36;
  $45 = $9 | 5;
  $46 = (($1) + ($45)|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = (_bitshift64Shl(($48|0),0,16)|0);
  $50 = tempRet0;
  $51 = $49 | $43;
  $52 = $50 | $44;
  $53 = $9 | 6;
  $54 = (($1) + ($53)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = (_bitshift64Shl(($56|0),0,8)|0);
  $58 = tempRet0;
  $59 = $57 | $51;
  $60 = $58 | $52;
  $61 = $9 | 7;
  $62 = (($1) + ($61)|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = $59 | $64;
  $66 = $15;
  $67 = $66;
  HEAP32[$67>>2] = $65;
  $68 = (($66) + 4)|0;
  $69 = $68;
  HEAP32[$69>>2] = $60;
  $70 = (($$0129) + 1)|0;
  $exitcond132 = ($70|0)==(16);
  if ($exitcond132) {
   break;
  } else {
   $$0129 = $70;
  }
 }
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $$1128 = 16;$117 = $5;$118 = $8;
 while(1) {
  $71 = (($$1128) + -2)|0;
  $72 = (($2) + ($71<<3)|0);
  $73 = $72;
  $74 = $73;
  $75 = HEAP32[$74>>2]|0;
  $76 = (($73) + 4)|0;
  $77 = $76;
  $78 = HEAP32[$77>>2]|0;
  $79 = (_ror_60($75,$78,19)|0);
  $80 = tempRet0;
  $81 = (_ror_60($75,$78,61)|0);
  $82 = tempRet0;
  $83 = (_bitshift64Lshr(($75|0),($78|0),6)|0);
  $84 = tempRet0;
  $85 = $83 ^ $79;
  $86 = $84 ^ $80;
  $87 = $85 ^ $81;
  $88 = $86 ^ $82;
  $89 = (($$1128) + -7)|0;
  $90 = (($2) + ($89<<3)|0);
  $91 = $90;
  $92 = $91;
  $93 = HEAP32[$92>>2]|0;
  $94 = (($91) + 4)|0;
  $95 = $94;
  $96 = HEAP32[$95>>2]|0;
  $97 = (_i64Add(($87|0),($88|0),($93|0),($96|0))|0);
  $98 = tempRet0;
  $99 = (($$1128) + -15)|0;
  $100 = (($2) + ($99<<3)|0);
  $101 = $100;
  $102 = $101;
  $103 = HEAP32[$102>>2]|0;
  $104 = (($101) + 4)|0;
  $105 = $104;
  $106 = HEAP32[$105>>2]|0;
  $107 = (_ror_60($103,$106,1)|0);
  $108 = tempRet0;
  $109 = (_ror_60($103,$106,8)|0);
  $110 = tempRet0;
  $111 = (_bitshift64Lshr(($103|0),($106|0),7)|0);
  $112 = tempRet0;
  $113 = $111 ^ $107;
  $114 = $112 ^ $108;
  $115 = $113 ^ $109;
  $116 = $114 ^ $110;
  $119 = (_i64Add(($97|0),($98|0),($117|0),($118|0))|0);
  $120 = tempRet0;
  $121 = (_i64Add(($119|0),($120|0),($115|0),($116|0))|0);
  $122 = tempRet0;
  $123 = (($2) + ($$1128<<3)|0);
  $124 = $123;
  $125 = $124;
  HEAP32[$125>>2] = $121;
  $126 = (($124) + 4)|0;
  $127 = $126;
  HEAP32[$127>>2] = $122;
  $128 = (($$1128) + 1)|0;
  $129 = ($$1128|0)<(79);
  if ($129) {
   $$1128 = $128;$117 = $103;$118 = $106;
  } else {
   break;
  }
 }
 $130 = ((($0)) + 8|0);
 $131 = $130;
 $132 = $131;
 $133 = HEAP32[$132>>2]|0;
 $134 = (($131) + 4)|0;
 $135 = $134;
 $136 = HEAP32[$135>>2]|0;
 $137 = ((($0)) + 16|0);
 $138 = $137;
 $139 = $138;
 $140 = HEAP32[$139>>2]|0;
 $141 = (($138) + 4)|0;
 $142 = $141;
 $143 = HEAP32[$142>>2]|0;
 $144 = ((($0)) + 24|0);
 $145 = $144;
 $146 = $145;
 $147 = HEAP32[$146>>2]|0;
 $148 = (($145) + 4)|0;
 $149 = $148;
 $150 = HEAP32[$149>>2]|0;
 $151 = ((($0)) + 32|0);
 $152 = $151;
 $153 = $152;
 $154 = HEAP32[$153>>2]|0;
 $155 = (($152) + 4)|0;
 $156 = $155;
 $157 = HEAP32[$156>>2]|0;
 $158 = ((($0)) + 40|0);
 $159 = $158;
 $160 = $159;
 $161 = HEAP32[$160>>2]|0;
 $162 = (($159) + 4)|0;
 $163 = $162;
 $164 = HEAP32[$163>>2]|0;
 $165 = ((($0)) + 48|0);
 $166 = $165;
 $167 = $166;
 $168 = HEAP32[$167>>2]|0;
 $169 = (($166) + 4)|0;
 $170 = $169;
 $171 = HEAP32[$170>>2]|0;
 $172 = ((($0)) + 56|0);
 $173 = $172;
 $174 = $173;
 $175 = HEAP32[$174>>2]|0;
 $176 = (($173) + 4)|0;
 $177 = $176;
 $178 = HEAP32[$177>>2]|0;
 $179 = ((($0)) + 64|0);
 $180 = $179;
 $181 = $180;
 $182 = HEAP32[$181>>2]|0;
 $183 = (($180) + 4)|0;
 $184 = $183;
 $185 = HEAP32[$184>>2]|0;
 $$2127 = 0;$186 = $161;$187 = $164;$199 = $175;$200 = $168;$202 = $178;$203 = $171;$222 = $182;$223 = $185;$232 = $133;$233 = $136;$245 = $140;$247 = $143;$251 = $147;$253 = $150;$256 = $154;$257 = $157;
 while(1) {
  $188 = (_ror_60($186,$187,14)|0);
  $189 = tempRet0;
  $190 = (_ror_60($186,$187,18)|0);
  $191 = tempRet0;
  $192 = $190 ^ $188;
  $193 = $191 ^ $189;
  $194 = (_ror_60($186,$187,41)|0);
  $195 = tempRet0;
  $196 = $192 ^ $194;
  $197 = $193 ^ $195;
  $198 = $199 ^ $200;
  $201 = $202 ^ $203;
  $204 = $198 & $186;
  $205 = $201 & $187;
  $206 = $204 ^ $199;
  $207 = $205 ^ $202;
  $208 = (8 + ($$2127<<3)|0);
  $209 = $208;
  $210 = $209;
  $211 = HEAP32[$210>>2]|0;
  $212 = (($209) + 4)|0;
  $213 = $212;
  $214 = HEAP32[$213>>2]|0;
  $215 = (($2) + ($$2127<<3)|0);
  $216 = $215;
  $217 = $216;
  $218 = HEAP32[$217>>2]|0;
  $219 = (($216) + 4)|0;
  $220 = $219;
  $221 = HEAP32[$220>>2]|0;
  $224 = (_i64Add(($206|0),($207|0),($222|0),($223|0))|0);
  $225 = tempRet0;
  $226 = (_i64Add(($224|0),($225|0),($196|0),($197|0))|0);
  $227 = tempRet0;
  $228 = (_i64Add(($226|0),($227|0),($211|0),($214|0))|0);
  $229 = tempRet0;
  $230 = (_i64Add(($228|0),($229|0),($218|0),($221|0))|0);
  $231 = tempRet0;
  $234 = (_ror_60($232,$233,28)|0);
  $235 = tempRet0;
  $236 = (_ror_60($232,$233,34)|0);
  $237 = tempRet0;
  $238 = $236 ^ $234;
  $239 = $237 ^ $235;
  $240 = (_ror_60($232,$233,39)|0);
  $241 = tempRet0;
  $242 = $238 ^ $240;
  $243 = $239 ^ $241;
  $244 = $245 & $232;
  $246 = $247 & $233;
  $248 = $245 | $232;
  $249 = $247 | $233;
  $250 = $251 & $248;
  $252 = $253 & $249;
  $254 = $250 | $244;
  $255 = $252 | $246;
  $258 = (_i64Add(($230|0),($231|0),($256|0),($257|0))|0);
  $259 = tempRet0;
  $260 = (_i64Add(($230|0),($231|0),($254|0),($255|0))|0);
  $261 = tempRet0;
  $262 = (_i64Add(($260|0),($261|0),($242|0),($243|0))|0);
  $263 = tempRet0;
  $264 = (($$2127) + 1)|0;
  $exitcond = ($264|0)==(80);
  if ($exitcond) {
   break;
  } else {
   $257$phi = $253;$256$phi = $251;$253$phi = $247;$251$phi = $245;$247$phi = $233;$245$phi = $232;$223$phi = $202;$222$phi = $199;$203$phi = $187;$202$phi = $203;$200$phi = $186;$199$phi = $200;$$2127 = $264;$186 = $258;$187 = $259;$232 = $262;$233 = $263;$257 = $257$phi;$256 = $256$phi;$253 = $253$phi;$251 = $251$phi;$247 = $247$phi;$245 = $245$phi;$223 = $223$phi;$222 = $222$phi;$203 = $203$phi;$202 = $202$phi;$200 = $200$phi;$199 = $199$phi;
  }
 }
 $265 = (_i64Add(($133|0),($136|0),($262|0),($263|0))|0);
 $266 = tempRet0;
 $267 = $130;
 $268 = $267;
 HEAP32[$268>>2] = $265;
 $269 = (($267) + 4)|0;
 $270 = $269;
 HEAP32[$270>>2] = $266;
 $271 = (_i64Add(($140|0),($143|0),($232|0),($233|0))|0);
 $272 = tempRet0;
 $273 = $137;
 $274 = $273;
 HEAP32[$274>>2] = $271;
 $275 = (($273) + 4)|0;
 $276 = $275;
 HEAP32[$276>>2] = $272;
 $277 = (_i64Add(($147|0),($150|0),($245|0),($247|0))|0);
 $278 = tempRet0;
 $279 = $144;
 $280 = $279;
 HEAP32[$280>>2] = $277;
 $281 = (($279) + 4)|0;
 $282 = $281;
 HEAP32[$282>>2] = $278;
 $283 = (_i64Add(($154|0),($157|0),($251|0),($253|0))|0);
 $284 = tempRet0;
 $285 = $151;
 $286 = $285;
 HEAP32[$286>>2] = $283;
 $287 = (($285) + 4)|0;
 $288 = $287;
 HEAP32[$288>>2] = $284;
 $289 = (_i64Add(($161|0),($164|0),($258|0),($259|0))|0);
 $290 = tempRet0;
 $291 = $158;
 $292 = $291;
 HEAP32[$292>>2] = $289;
 $293 = (($291) + 4)|0;
 $294 = $293;
 HEAP32[$294>>2] = $290;
 $295 = (_i64Add(($168|0),($171|0),($186|0),($187|0))|0);
 $296 = tempRet0;
 $297 = $165;
 $298 = $297;
 HEAP32[$298>>2] = $295;
 $299 = (($297) + 4)|0;
 $300 = $299;
 HEAP32[$300>>2] = $296;
 $301 = (_i64Add(($175|0),($178|0),($200|0),($203|0))|0);
 $302 = tempRet0;
 $303 = $172;
 $304 = $303;
 HEAP32[$304>>2] = $301;
 $305 = (($303) + 4)|0;
 $306 = $305;
 HEAP32[$306>>2] = $302;
 $307 = (_i64Add(($182|0),($185|0),($199|0),($202|0))|0);
 $308 = tempRet0;
 $309 = $179;
 $310 = $309;
 HEAP32[$310>>2] = $307;
 $311 = (($309) + 4)|0;
 $312 = $311;
 HEAP32[$312>>2] = $308;
 STACKTOP = sp;return;
}
function _ror_60($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_bitshift64Lshr(($0|0),($1|0),($2|0))|0);
 $4 = tempRet0;
 $5 = (64 - ($2))|0;
 $6 = (_bitshift64Shl(($0|0),($1|0),($5|0))|0);
 $7 = tempRet0;
 $8 = $6 | $3;
 $9 = $7 | $4;
 tempRet0 = ($9);
 return ($8|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=14532; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $40 = $12;
  } else {
   $40 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 63]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $39 = ($40|0)==(0);
  if (!($39)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229320 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa357 = 0, $$0240319 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0;
 var $$0249307 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262313 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230331 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241330 = 0, $$1244318 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0;
 var $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242306 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$283$ = 0, $$290 = 0, $$291 = 0, $$3257 = 0;
 var $$3265 = 0, $$3272 = 0, $$3304 = 0, $$376 = 0, $$4258355 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa295 = 0, $$pre = 0, $$pre346 = 0, $$pre347 = 0, $$pre347$pre = 0, $$pre349 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $brmerge = 0, $brmerge312 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0;
 var $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit275 = 0, $isdigit277 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $or$cond = 0, $or$cond280 = 0, $or$cond282 = 0, $or$cond285 = 0, $storemerge = 0, $storemerge278 = 0, $trunc = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$21 = $1;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP8[$21>>0]|0;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   label = 86;
   break;
  } else {
   $23 = $20;$25 = $21;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249307 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;$39 = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249307;$39 = $27;
      break L12;
     }
     $30 = ((($$0249307)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249307 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;$39 = $31;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $21;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out($0,$21,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$21 = $39;$$0269 = $$0269$phi;
   continue;
  }
  $38 = ((($39)) + 1|0);
  $40 = HEAP8[$38>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($39)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($39)) + 3|0);
   $$376 = $44 ? $45 : $38;
   $$$0269 = $44 ? 1 : $$0269;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$storemerge = $$376;
  } else {
   $$0253 = -1;$$1270 = $$0269;$storemerge = $38;
  }
  HEAP32[$5>>2] = $storemerge;
  $46 = HEAP8[$storemerge>>0]|0;
  $47 = $46 << 24 >> 24;
  $48 = (($47) + -32)|0;
  $49 = ($48>>>0)>(31);
  $50 = 1 << $48;
  $51 = $50 & 75913;
  $52 = ($51|0)==(0);
  $brmerge312 = $49 | $52;
  if ($brmerge312) {
   $$0262$lcssa = 0;$$lcssa295 = $46;$69 = $storemerge;
  } else {
   $$0262313 = 0;$54 = $46;$59 = $storemerge;
   while(1) {
    $53 = $54 << 24 >> 24;
    $55 = (($53) + -32)|0;
    $56 = 1 << $55;
    $57 = $56 | $$0262313;
    $58 = ((($59)) + 1|0);
    HEAP32[$5>>2] = $58;
    $60 = HEAP8[$58>>0]|0;
    $61 = $60 << 24 >> 24;
    $62 = (($61) + -32)|0;
    $63 = ($62>>>0)>(31);
    $64 = 1 << $62;
    $65 = $64 & 75913;
    $66 = ($65|0)==(0);
    $brmerge = $63 | $66;
    if ($brmerge) {
     $$0262$lcssa = $57;$$lcssa295 = $60;$69 = $58;
     break;
    } else {
     $$0262313 = $57;$54 = $60;$59 = $58;
    }
   }
  }
  $67 = ($$lcssa295<<24>>24)==(42);
  if ($67) {
   $68 = ((($69)) + 1|0);
   $70 = HEAP8[$68>>0]|0;
   $71 = $70 << 24 >> 24;
   $isdigittmp276 = (($71) + -48)|0;
   $isdigit277 = ($isdigittmp276>>>0)<(10);
   if ($isdigit277) {
    $72 = ((($69)) + 2|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = ($73<<24>>24)==(36);
    if ($74) {
     $75 = (($4) + ($isdigittmp276<<2)|0);
     HEAP32[$75>>2] = 10;
     $76 = HEAP8[$68>>0]|0;
     $77 = $76 << 24 >> 24;
     $78 = (($77) + -48)|0;
     $79 = (($3) + ($78<<3)|0);
     $80 = $79;
     $81 = $80;
     $82 = HEAP32[$81>>2]|0;
     $83 = (($80) + 4)|0;
     $84 = $83;
     $85 = HEAP32[$84>>2]|0;
     $86 = ((($69)) + 3|0);
     $$0259 = $82;$$2271 = 1;$storemerge278 = $86;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
   if ((label|0) == 22) {
    label = 0;
    $87 = ($$1270|0)==(0);
    if (!($87)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $88 = $arglist_current;
     $89 = ((0) + 4|0);
     $expanded4 = $89;
     $expanded = (($expanded4) - 1)|0;
     $90 = (($88) + ($expanded))|0;
     $91 = ((0) + 4|0);
     $expanded8 = $91;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $92 = $90 & $expanded6;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $arglist_next = ((($93)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $94;$$2271 = 0;$storemerge278 = $68;
    } else {
     $$0259 = 0;$$2271 = 0;$storemerge278 = $68;
    }
   }
   HEAP32[$5>>2] = $storemerge278;
   $95 = ($$0259|0)<(0);
   $96 = $$0262$lcssa | 8192;
   $97 = (0 - ($$0259))|0;
   $$$0262 = $95 ? $96 : $$0262$lcssa;
   $$$0259 = $95 ? $97 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$101 = $storemerge278;
  } else {
   $98 = (_getint($5)|0);
   $99 = ($98|0)<(0);
   if ($99) {
    $$0 = -1;
    break;
   }
   $$pre346 = HEAP32[$5>>2]|0;
   $$1260 = $98;$$1263 = $$0262$lcssa;$$3272 = $$1270;$101 = $$pre346;
  }
  $100 = HEAP8[$101>>0]|0;
  $102 = ($100<<24>>24)==(46);
  do {
   if ($102) {
    $103 = ((($101)) + 1|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = ($104<<24>>24)==(42);
    if (!($105)) {
     $132 = ((($101)) + 1|0);
     HEAP32[$5>>2] = $132;
     $133 = (_getint($5)|0);
     $$pre347$pre = HEAP32[$5>>2]|0;
     $$0254 = $133;$$pre347 = $$pre347$pre;
     break;
    }
    $106 = ((($101)) + 2|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = $107 << 24 >> 24;
    $isdigittmp274 = (($108) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $109 = ((($101)) + 3|0);
     $110 = HEAP8[$109>>0]|0;
     $111 = ($110<<24>>24)==(36);
     if ($111) {
      $112 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$112>>2] = 10;
      $113 = HEAP8[$106>>0]|0;
      $114 = $113 << 24 >> 24;
      $115 = (($114) + -48)|0;
      $116 = (($3) + ($115<<3)|0);
      $117 = $116;
      $118 = $117;
      $119 = HEAP32[$118>>2]|0;
      $120 = (($117) + 4)|0;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($101)) + 4|0);
      HEAP32[$5>>2] = $123;
      $$0254 = $119;$$pre347 = $123;
      break;
     }
    }
    $124 = ($$3272|0)==(0);
    if (!($124)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $125 = $arglist_current2;
     $126 = ((0) + 4|0);
     $expanded11 = $126;
     $expanded10 = (($expanded11) - 1)|0;
     $127 = (($125) + ($expanded10))|0;
     $128 = ((0) + 4|0);
     $expanded15 = $128;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $129 = $127 & $expanded13;
     $130 = $129;
     $131 = HEAP32[$130>>2]|0;
     $arglist_next3 = ((($130)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $338 = $131;
    } else {
     $338 = 0;
    }
    HEAP32[$5>>2] = $106;
    $$0254 = $338;$$pre347 = $106;
   } else {
    $$0254 = -1;$$pre347 = $101;
   }
  } while(0);
  $$0252 = 0;$135 = $$pre347;
  while(1) {
   $134 = HEAP8[$135>>0]|0;
   $136 = $134 << 24 >> 24;
   $137 = (($136) + -65)|0;
   $138 = ($137>>>0)>(57);
   if ($138) {
    $$0 = -1;
    break L1;
   }
   $139 = ((($135)) + 1|0);
   HEAP32[$5>>2] = $139;
   $140 = HEAP8[$135>>0]|0;
   $141 = $140 << 24 >> 24;
   $142 = (($141) + -65)|0;
   $143 = ((165071 + (($$0252*58)|0)|0) + ($142)|0);
   $144 = HEAP8[$143>>0]|0;
   $145 = $144&255;
   $146 = (($145) + -1)|0;
   $147 = ($146>>>0)<(8);
   if ($147) {
    $$0252 = $145;$135 = $139;
   } else {
    break;
   }
  }
  $148 = ($144<<24>>24)==(0);
  if ($148) {
   $$0 = -1;
   break;
  }
  $149 = ($144<<24>>24)==(19);
  $150 = ($$0253|0)>(-1);
  do {
   if ($149) {
    if ($150) {
     $$0 = -1;
     break L1;
    } else {
     label = 48;
    }
   } else {
    if ($150) {
     $151 = (($4) + ($$0253<<2)|0);
     HEAP32[$151>>2] = $145;
     $152 = (($3) + ($$0253<<3)|0);
     $153 = $152;
     $154 = $153;
     $155 = HEAP32[$154>>2]|0;
     $156 = (($153) + 4)|0;
     $157 = $156;
     $158 = HEAP32[$157>>2]|0;
     $159 = $6;
     $160 = $159;
     HEAP32[$160>>2] = $155;
     $161 = (($159) + 4)|0;
     $162 = $161;
     HEAP32[$162>>2] = $158;
     label = 48;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$145,$2);
   }
  } while(0);
  if ((label|0) == 48) {
   label = 0;
   if (!($10)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
    continue;
   }
  }
  $163 = HEAP8[$135>>0]|0;
  $164 = $163 << 24 >> 24;
  $165 = ($$0252|0)!=(0);
  $166 = $164 & 15;
  $167 = ($166|0)==(3);
  $or$cond280 = $165 & $167;
  $168 = $164 & -33;
  $$0235 = $or$cond280 ? $168 : $164;
  $169 = $$1263 & 8192;
  $170 = ($169|0)==(0);
  $171 = $$1263 & -65537;
  $$1263$ = $170 ? $$1263 : $171;
  L70: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $178 = HEAP32[$6>>2]|0;
     HEAP32[$178>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
     break;
    }
    case 1:  {
     $179 = HEAP32[$6>>2]|0;
     HEAP32[$179>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
     break;
    }
    case 2:  {
     $180 = ($$1248|0)<(0);
     $181 = $180 << 31 >> 31;
     $182 = HEAP32[$6>>2]|0;
     $183 = $182;
     $184 = $183;
     HEAP32[$184>>2] = $$1248;
     $185 = (($183) + 4)|0;
     $186 = $185;
     HEAP32[$186>>2] = $181;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
     break;
    }
    case 3:  {
     $187 = $$1248&65535;
     $188 = HEAP32[$6>>2]|0;
     HEAP16[$188>>1] = $187;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
     break;
    }
    case 4:  {
     $189 = $$1248&255;
     $190 = HEAP32[$6>>2]|0;
     HEAP8[$190>>0] = $189;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
     break;
    }
    case 6:  {
     $191 = HEAP32[$6>>2]|0;
     HEAP32[$191>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
     break;
    }
    case 7:  {
     $192 = ($$1248|0)<(0);
     $193 = $192 << 31 >> 31;
     $194 = HEAP32[$6>>2]|0;
     $195 = $194;
     $196 = $195;
     HEAP32[$196>>2] = $$1248;
     $197 = (($195) + 4)|0;
     $198 = $197;
     HEAP32[$198>>2] = $193;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $199 = ($$0254>>>0)>(8);
    $200 = $199 ? $$0254 : 8;
    $201 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $200;$$3265 = $201;
    label = 60;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 60;
    break;
   }
   case 111:  {
    $217 = $6;
    $218 = $217;
    $219 = HEAP32[$218>>2]|0;
    $220 = (($217) + 4)|0;
    $221 = $220;
    $222 = HEAP32[$221>>2]|0;
    $223 = (_fmt_o($219,$222,$11)|0);
    $224 = $$1263$ & 8;
    $225 = ($224|0)==(0);
    $226 = $223;
    $227 = (($12) - ($226))|0;
    $228 = ($$0254|0)>($227|0);
    $229 = (($227) + 1)|0;
    $230 = $225 | $228;
    $$0254$$0254$ = $230 ? $$0254 : $229;
    $$0228 = $223;$$1233 = 0;$$1238 = 165535;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$256 = $219;$258 = $222;
    label = 66;
    break;
   }
   case 105: case 100:  {
    $231 = $6;
    $232 = $231;
    $233 = HEAP32[$232>>2]|0;
    $234 = (($231) + 4)|0;
    $235 = $234;
    $236 = HEAP32[$235>>2]|0;
    $237 = ($236|0)<(0);
    if ($237) {
     $238 = (_i64Subtract(0,0,($233|0),($236|0))|0);
     $239 = tempRet0;
     $240 = $6;
     $241 = $240;
     HEAP32[$241>>2] = $238;
     $242 = (($240) + 4)|0;
     $243 = $242;
     HEAP32[$243>>2] = $239;
     $$0232 = 1;$$0237 = 165535;$250 = $238;$251 = $239;
     label = 65;
     break L70;
    } else {
     $244 = $$1263$ & 2048;
     $245 = ($244|0)==(0);
     $246 = $$1263$ & 1;
     $247 = ($246|0)==(0);
     $$ = $247 ? 165535 : (165537);
     $$$ = $245 ? $$ : (165536);
     $248 = $$1263$ & 2049;
     $249 = ($248|0)!=(0);
     $$283$ = $249&1;
     $$0232 = $$283$;$$0237 = $$$;$250 = $233;$251 = $236;
     label = 65;
     break L70;
    }
    break;
   }
   case 117:  {
    $172 = $6;
    $173 = $172;
    $174 = HEAP32[$173>>2]|0;
    $175 = (($172) + 4)|0;
    $176 = $175;
    $177 = HEAP32[$176>>2]|0;
    $$0232 = 0;$$0237 = 165535;$250 = $174;$251 = $177;
    label = 65;
    break;
   }
   case 99:  {
    $267 = $6;
    $268 = $267;
    $269 = HEAP32[$268>>2]|0;
    $270 = (($267) + 4)|0;
    $271 = $270;
    $272 = HEAP32[$271>>2]|0;
    $273 = $269&255;
    HEAP8[$13>>0] = $273;
    $$2 = $13;$$2234 = 0;$$2239 = 165535;$$2251 = $11;$$5 = 1;$$6268 = $171;
    break;
   }
   case 109:  {
    $274 = (___errno_location()|0);
    $275 = HEAP32[$274>>2]|0;
    $276 = (_strerror($275)|0);
    $$1 = $276;
    label = 70;
    break;
   }
   case 115:  {
    $277 = HEAP32[$6>>2]|0;
    $278 = ($277|0)!=(0|0);
    $279 = $278 ? $277 : 184076;
    $$1 = $279;
    label = 70;
    break;
   }
   case 67:  {
    $286 = $6;
    $287 = $286;
    $288 = HEAP32[$287>>2]|0;
    $289 = (($286) + 4)|0;
    $290 = $289;
    $291 = HEAP32[$290>>2]|0;
    HEAP32[$8>>2] = $288;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258355 = -1;$339 = $8;
    label = 74;
    break;
   }
   case 83:  {
    $$pre349 = HEAP32[$6>>2]|0;
    $292 = ($$0254|0)==(0);
    if ($292) {
     _pad_679($0,32,$$1260,0,$$1263$);
     $$0240$lcssa357 = 0;
     label = 83;
    } else {
     $$4258355 = $$0254;$339 = $$pre349;
     label = 74;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $314 = +HEAPF64[$6>>3];
    $315 = (_fmt_fp($0,$314,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $315;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
    continue L1;
    break;
   }
   default: {
    $$2 = $21;$$2234 = 0;$$2239 = 165535;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L94: do {
   if ((label|0) == 60) {
    label = 0;
    $202 = $6;
    $203 = $202;
    $204 = HEAP32[$203>>2]|0;
    $205 = (($202) + 4)|0;
    $206 = $205;
    $207 = HEAP32[$206>>2]|0;
    $208 = $$1236 & 32;
    $209 = (_fmt_x($204,$207,$11,$208)|0);
    $210 = ($204|0)==(0);
    $211 = ($207|0)==(0);
    $212 = $210 & $211;
    $213 = $$3265 & 8;
    $214 = ($213|0)==(0);
    $or$cond282 = $214 | $212;
    $215 = $$1236 >> 4;
    $216 = (165535 + ($215)|0);
    $$290 = $or$cond282 ? 165535 : $216;
    $$291 = $or$cond282 ? 0 : 2;
    $$0228 = $209;$$1233 = $$291;$$1238 = $$290;$$2256 = $$1255;$$4266 = $$3265;$256 = $204;$258 = $207;
    label = 66;
   }
   else if ((label|0) == 65) {
    label = 0;
    $252 = (_fmt_u($250,$251,$11)|0);
    $$0228 = $252;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$256 = $250;$258 = $251;
    label = 66;
   }
   else if ((label|0) == 70) {
    label = 0;
    $280 = (_memchr($$1,0,$$0254)|0);
    $281 = ($280|0)==(0|0);
    $282 = $280;
    $283 = $$1;
    $284 = (($282) - ($283))|0;
    $285 = (($$1) + ($$0254)|0);
    $$3257 = $281 ? $$0254 : $284;
    $$1250 = $281 ? $285 : $280;
    $$2 = $$1;$$2234 = 0;$$2239 = 165535;$$2251 = $$1250;$$5 = $$3257;$$6268 = $171;
   }
   else if ((label|0) == 74) {
    label = 0;
    $$0229320 = $339;$$0240319 = 0;$$1244318 = 0;
    while(1) {
     $293 = HEAP32[$$0229320>>2]|0;
     $294 = ($293|0)==(0);
     if ($294) {
      $$0240$lcssa = $$0240319;$$2245 = $$1244318;
      break;
     }
     $295 = (_wctomb($9,$293)|0);
     $296 = ($295|0)<(0);
     $297 = (($$4258355) - ($$0240319))|0;
     $298 = ($295>>>0)>($297>>>0);
     $or$cond285 = $296 | $298;
     if ($or$cond285) {
      $$0240$lcssa = $$0240319;$$2245 = $295;
      break;
     }
     $299 = ((($$0229320)) + 4|0);
     $300 = (($295) + ($$0240319))|0;
     $301 = ($$4258355>>>0)>($300>>>0);
     if ($301) {
      $$0229320 = $299;$$0240319 = $300;$$1244318 = $295;
     } else {
      $$0240$lcssa = $300;$$2245 = $295;
      break;
     }
    }
    $302 = ($$2245|0)<(0);
    if ($302) {
     $$0 = -1;
     break L1;
    }
    _pad_679($0,32,$$1260,$$0240$lcssa,$$1263$);
    $303 = ($$0240$lcssa|0)==(0);
    if ($303) {
     $$0240$lcssa357 = 0;
     label = 83;
    } else {
     $$1230331 = $339;$$1241330 = 0;
     while(1) {
      $304 = HEAP32[$$1230331>>2]|0;
      $305 = ($304|0)==(0);
      if ($305) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 83;
       break L94;
      }
      $306 = (_wctomb($9,$304)|0);
      $307 = (($306) + ($$1241330))|0;
      $308 = ($307|0)>($$0240$lcssa|0);
      if ($308) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 83;
       break L94;
      }
      $309 = ((($$1230331)) + 4|0);
      _out($0,$9,$306);
      $310 = ($307>>>0)<($$0240$lcssa>>>0);
      if ($310) {
       $$1230331 = $309;$$1241330 = $307;
      } else {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 83;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 66) {
   label = 0;
   $253 = ($$2256|0)>(-1);
   $254 = $$4266 & -65537;
   $$$4266 = $253 ? $254 : $$4266;
   $255 = ($256|0)!=(0);
   $257 = ($258|0)!=(0);
   $259 = $255 | $257;
   $260 = ($$2256|0)!=(0);
   $or$cond = $260 | $259;
   $261 = $$0228;
   $262 = (($12) - ($261))|0;
   $263 = $259 ^ 1;
   $264 = $263&1;
   $265 = (($262) + ($264))|0;
   $266 = ($$2256|0)>($265|0);
   $$2256$ = $266 ? $$2256 : $265;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 83) {
   label = 0;
   $311 = $$1263$ ^ 8192;
   _pad_679($0,32,$$1260,$$0240$lcssa357,$311);
   $312 = ($$1260|0)>($$0240$lcssa357|0);
   $313 = $312 ? $$1260 : $$0240$lcssa357;
   $$0243 = $313;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
   continue;
  }
  $316 = $$2251;
  $317 = $$2;
  $318 = (($316) - ($317))|0;
  $319 = ($$5|0)<($318|0);
  $$$5 = $319 ? $318 : $$5;
  $320 = (($$$5) + ($$2234))|0;
  $321 = ($$1260|0)<($320|0);
  $$2261 = $321 ? $320 : $$1260;
  _pad_679($0,32,$$2261,$320,$$6268);
  _out($0,$$2239,$$2234);
  $322 = $$6268 ^ 65536;
  _pad_679($0,48,$$2261,$320,$322);
  _pad_679($0,48,$$$5,$318,0);
  _out($0,$$2,$318);
  $323 = $$6268 ^ 8192;
  _pad_679($0,32,$$2261,$320,$323);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
 }
 L113: do {
  if ((label|0) == 86) {
   $324 = ($0|0)==(0|0);
   if ($324) {
    $325 = ($$0269|0)==(0);
    if ($325) {
     $$0 = 0;
    } else {
     $$2242306 = 1;
     while(1) {
      $326 = (($4) + ($$2242306<<2)|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = ($327|0)==(0);
      if ($328) {
       $$2242$lcssa = $$2242306;
       break;
      }
      $330 = (($3) + ($$2242306<<3)|0);
      _pop_arg($330,$327,$2);
      $331 = (($$2242306) + 1)|0;
      $332 = ($$2242306|0)<(9);
      if ($332) {
       $$2242306 = $331;
      } else {
       $$2242$lcssa = $331;
       break;
      }
     }
     $329 = ($$2242$lcssa|0)<(10);
     if ($329) {
      $$3304 = $$2242$lcssa;
      while(1) {
       $335 = (($4) + ($$3304<<2)|0);
       $336 = HEAP32[$335>>2]|0;
       $337 = ($336|0)==(0);
       if (!($337)) {
        $$0 = -1;
        break L113;
       }
       $333 = (($$3304) + 1)|0;
       $334 = ($$3304|0)<(9);
       if ($334) {
        $$3304 = $333;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$06 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $isdigittmp4 = (($3) + -48)|0;
 $isdigit5 = ($isdigittmp4>>>0)<(10);
 if ($isdigit5) {
  $$06 = 0;$7 = $1;$isdigittmp7 = $isdigittmp4;
  while(1) {
   $4 = ($$06*10)|0;
   $5 = (($isdigittmp7) + ($4))|0;
   $6 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $6;
   $8 = HEAP8[$6>>0]|0;
   $9 = $8 << 24 >> 24;
   $isdigittmp = (($9) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$06 = $5;$7 = $6;$isdigittmp7 = $isdigittmp;
   } else {
    $$0$lcssa = $5;
    break;
   }
  }
 } else {
  $$0$lcssa = 0;
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (164377 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_103()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad_679($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = ($9>>>0)<(256);
  $11 = $10 ? $9 : 256;
  _memset(($5|0),($1|0),($11|0))|0;
  $12 = ($9>>>0)>(255);
  if ($12) {
   $13 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $14 = (($$011) + -256)|0;
    $15 = ($14>>>0)>(255);
    if ($15) {
     $$011 = $14;
    } else {
     break;
    }
   }
   $16 = $13 & 255;
   $$0$lcssa = $16;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$564 = 0.0, $$$3484 = 0, $$$3484699 = 0, $$$3484700 = 0, $$$3501 = 0, $$$4502 = 0, $$$543 = 0.0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488 = 0, $$0488655 = 0, $$0488657 = 0;
 var $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0510 = 0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0;
 var $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$549 = 0, $$2476$$551 = 0, $$2483$ph = 0;
 var $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$534$ = 0;
 var $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$557 = 0, $$5605 = 0, $$561 = 0, $$564 = 0.0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0;
 var $$9$ph = 0, $$lcssa675 = 0, $$neg = 0, $$neg568 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre690 = 0, $$pre693 = 0, $$pre697 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0;
 var $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond542 = 0, $or$cond545 = 0, $or$cond556 = 0, $or$cond6 = 0, $scevgep686 = 0, $scevgep686687 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS_680($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = - $1;
  $$0471 = $14;$$0520 = 1;$$0521 = 165545;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (165546) : (165551);
  $$$ = $16 ? $$ : (165548);
  $19 = $4 & 2049;
  $20 = ($19|0)!=(0);
  $$534$ = $20&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS_680($$0471)|0);
 $21 = tempRet0;
 $22 = $21 & 2146435072;
 $23 = (0)==(0);
 $24 = ($22|0)==(2146435072);
 $25 = $23 & $24;
 do {
  if ($25) {
   $26 = $5 & 32;
   $27 = ($26|0)!=(0);
   $28 = $27 ? 165564 : 165568;
   $29 = ($$0471 != $$0471) | (0.0 != 0.0);
   $30 = $27 ? 177345 : 165572;
   $$0510 = $29 ? $30 : $28;
   $31 = (($$0520) + 3)|0;
   $32 = $4 & -65537;
   _pad_679($0,32,$2,$31,$32);
   _out($0,$$0521,$$0520);
   _out($0,$$0510,3);
   $33 = $4 ^ 8192;
   _pad_679($0,32,$2,$31,$33);
   $$sink560 = $31;
  } else {
   $34 = (+_frexpl($$0471,$7));
   $35 = $34 * 2.0;
   $36 = $35 != 0.0;
   if ($36) {
    $37 = HEAP32[$7>>2]|0;
    $38 = (($37) + -1)|0;
    HEAP32[$7>>2] = $38;
   }
   $39 = $5 | 32;
   $40 = ($39|0)==(97);
   if ($40) {
    $41 = $5 & 32;
    $42 = ($41|0)==(0);
    $43 = ((($$0521)) + 9|0);
    $$0521$ = $42 ? $$0521 : $43;
    $44 = $$0520 | 2;
    $45 = ($3>>>0)>(11);
    $46 = (12 - ($3))|0;
    $47 = ($46|0)==(0);
    $48 = $45 | $47;
    do {
     if ($48) {
      $$1472 = $35;
     } else {
      $$0509585 = 8.0;$$1508586 = $46;
      while(1) {
       $49 = (($$1508586) + -1)|0;
       $50 = $$0509585 * 16.0;
       $51 = ($49|0)==(0);
       if ($51) {
        break;
       } else {
        $$0509585 = $50;$$1508586 = $49;
       }
      }
      $52 = HEAP8[$$0521$>>0]|0;
      $53 = ($52<<24>>24)==(45);
      if ($53) {
       $54 = - $35;
       $55 = $54 - $50;
       $56 = $50 + $55;
       $57 = - $56;
       $$1472 = $57;
       break;
      } else {
       $58 = $35 + $50;
       $59 = $58 - $50;
       $$1472 = $59;
       break;
      }
     }
    } while(0);
    $60 = HEAP32[$7>>2]|0;
    $61 = ($60|0)<(0);
    $62 = (0 - ($60))|0;
    $63 = $61 ? $62 : $60;
    $64 = ($63|0)<(0);
    $65 = $64 << 31 >> 31;
    $66 = (_fmt_u($63,$65,$11)|0);
    $67 = ($66|0)==($11|0);
    if ($67) {
     $68 = ((($10)) + 11|0);
     HEAP8[$68>>0] = 48;
     $$0511 = $68;
    } else {
     $$0511 = $66;
    }
    $69 = $60 >> 31;
    $70 = $69 & 2;
    $71 = (($70) + 43)|0;
    $72 = $71&255;
    $73 = ((($$0511)) + -1|0);
    HEAP8[$73>>0] = $72;
    $74 = (($5) + 15)|0;
    $75 = $74&255;
    $76 = ((($$0511)) + -2|0);
    HEAP8[$76>>0] = $75;
    $77 = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (164377 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $41 | $83;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $93 = $89 == 0.0;
      $or$cond3$not = $77 & $93;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $94 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $94;
      }
     } else {
      $$1524 = $86;
     }
     $95 = $89 != 0.0;
     if ($95) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $96 = ($3|0)==(0);
    $$pre693 = $$1524;
    if ($96) {
     label = 24;
    } else {
     $97 = (-2 - ($9))|0;
     $98 = (($97) + ($$pre693))|0;
     $99 = ($98|0)<($3|0);
     if ($99) {
      $100 = (($3) + 2)|0;
      $$pre690 = (($$pre693) - ($9))|0;
      $$pre$phi691Z2D = $$pre690;$$sink = $100;
     } else {
      label = 24;
     }
    }
    if ((label|0) == 24) {
     $101 = (($$pre693) - ($9))|0;
     $$pre$phi691Z2D = $101;$$sink = $101;
    }
    $102 = $11;
    $103 = $76;
    $104 = (($102) - ($103))|0;
    $105 = (($104) + ($44))|0;
    $106 = (($105) + ($$sink))|0;
    _pad_679($0,32,$2,$106,$4);
    _out($0,$$0521$,$44);
    $107 = $4 ^ 65536;
    _pad_679($0,48,$2,$106,$107);
    _out($0,$8,$$pre$phi691Z2D);
    $108 = (($$sink) - ($$pre$phi691Z2D))|0;
    _pad_679($0,48,$108,0,0);
    _out($0,$76,$104);
    $109 = $4 ^ 8192;
    _pad_679($0,32,$2,$106,$109);
    $$sink560 = $106;
    break;
   }
   $110 = ($3|0)<(0);
   $$540 = $110 ? 6 : $3;
   if ($36) {
    $111 = $35 * 268435456.0;
    $112 = HEAP32[$7>>2]|0;
    $113 = (($112) + -28)|0;
    HEAP32[$7>>2] = $113;
    $$3 = $111;$$pr = $113;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $35;$$pr = $$pre;
   }
   $114 = ($$pr|0)<(0);
   $115 = ((($6)) + 288|0);
   $$561 = $114 ? $6 : $115;
   $$0498 = $$561;$$4 = $$3;
   while(1) {
    $116 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $116;
    $117 = ((($$0498)) + 4|0);
    $118 = (+($116>>>0));
    $119 = $$4 - $118;
    $120 = $119 * 1.0E+9;
    $121 = $120 != 0.0;
    if ($121) {
     $$0498 = $117;$$4 = $120;
    } else {
     break;
    }
   }
   $122 = ($$pr|0)>(0);
   if ($122) {
    $$1482663 = $$561;$$1499662 = $117;$124 = $$pr;
    while(1) {
     $123 = ($124|0)<(29);
     $125 = $123 ? $124 : 29;
     $$0488655 = ((($$1499662)) + -4|0);
     $126 = ($$0488655>>>0)<($$1482663>>>0);
     if ($126) {
      $$2483$ph = $$1482663;
     } else {
      $$0488657 = $$0488655;$$0497656 = 0;
      while(1) {
       $127 = HEAP32[$$0488657>>2]|0;
       $128 = (_bitshift64Shl(($127|0),0,($125|0))|0);
       $129 = tempRet0;
       $130 = (_i64Add(($128|0),($129|0),($$0497656|0),0)|0);
       $131 = tempRet0;
       $132 = (___uremdi3(($130|0),($131|0),1000000000,0)|0);
       $133 = tempRet0;
       HEAP32[$$0488657>>2] = $132;
       $134 = (___udivdi3(($130|0),($131|0),1000000000,0)|0);
       $135 = tempRet0;
       $$0488 = ((($$0488657)) + -4|0);
       $136 = ($$0488>>>0)<($$1482663>>>0);
       if ($136) {
        break;
       } else {
        $$0488657 = $$0488;$$0497656 = $134;
       }
      }
      $137 = ($134|0)==(0);
      if ($137) {
       $$2483$ph = $$1482663;
      } else {
       $138 = ((($$1482663)) + -4|0);
       HEAP32[$138>>2] = $134;
       $$2483$ph = $138;
      }
     }
     $$2500 = $$1499662;
     while(1) {
      $139 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($139)) {
       break;
      }
      $140 = ((($$2500)) + -4|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($141|0)==(0);
      if ($142) {
       $$2500 = $140;
      } else {
       break;
      }
     }
     $143 = HEAP32[$7>>2]|0;
     $144 = (($143) - ($125))|0;
     HEAP32[$7>>2] = $144;
     $145 = ($144|0)>(0);
     if ($145) {
      $$1482663 = $$2483$ph;$$1499662 = $$2500;$124 = $144;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr566 = $144;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561;$$1499$lcssa = $117;$$pr566 = $$pr;
   }
   $146 = ($$pr566|0)<(0);
   if ($146) {
    $147 = (($$540) + 25)|0;
    $148 = (($147|0) / 9)&-1;
    $149 = (($148) + 1)|0;
    $150 = ($39|0)==(102);
    $$3484650 = $$1482$lcssa;$$3501649 = $$1499$lcssa;$152 = $$pr566;
    while(1) {
     $151 = (0 - ($152))|0;
     $153 = ($151|0)<(9);
     $154 = $153 ? $151 : 9;
     $155 = ($$3484650>>>0)<($$3501649>>>0);
     if ($155) {
      $159 = 1 << $154;
      $160 = (($159) + -1)|0;
      $161 = 1000000000 >>> $154;
      $$0487644 = 0;$$1489643 = $$3484650;
      while(1) {
       $162 = HEAP32[$$1489643>>2]|0;
       $163 = $162 & $160;
       $164 = $162 >>> $154;
       $165 = (($164) + ($$0487644))|0;
       HEAP32[$$1489643>>2] = $165;
       $166 = Math_imul($163, $161)|0;
       $167 = ((($$1489643)) + 4|0);
       $168 = ($167>>>0)<($$3501649>>>0);
       if ($168) {
        $$0487644 = $166;$$1489643 = $167;
       } else {
        break;
       }
      }
      $169 = HEAP32[$$3484650>>2]|0;
      $170 = ($169|0)==(0);
      $171 = ((($$3484650)) + 4|0);
      $$$3484 = $170 ? $171 : $$3484650;
      $172 = ($166|0)==(0);
      if ($172) {
       $$$3484700 = $$$3484;$$4502 = $$3501649;
      } else {
       $173 = ((($$3501649)) + 4|0);
       HEAP32[$$3501649>>2] = $166;
       $$$3484700 = $$$3484;$$4502 = $173;
      }
     } else {
      $156 = HEAP32[$$3484650>>2]|0;
      $157 = ($156|0)==(0);
      $158 = ((($$3484650)) + 4|0);
      $$$3484699 = $157 ? $158 : $$3484650;
      $$$3484700 = $$$3484699;$$4502 = $$3501649;
     }
     $174 = $150 ? $$561 : $$$3484700;
     $175 = $$4502;
     $176 = $174;
     $177 = (($175) - ($176))|0;
     $178 = $177 >> 2;
     $179 = ($178|0)>($149|0);
     $180 = (($174) + ($149<<2)|0);
     $$$4502 = $179 ? $180 : $$4502;
     $181 = HEAP32[$7>>2]|0;
     $182 = (($181) + ($154))|0;
     HEAP32[$7>>2] = $182;
     $183 = ($182|0)<(0);
     if ($183) {
      $$3484650 = $$$3484700;$$3501649 = $$$4502;$152 = $182;
     } else {
      $$3484$lcssa = $$$3484700;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $184 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $185 = $$561;
   if ($184) {
    $186 = $$3484$lcssa;
    $187 = (($185) - ($186))|0;
    $188 = $187 >> 2;
    $189 = ($188*9)|0;
    $190 = HEAP32[$$3484$lcssa>>2]|0;
    $191 = ($190>>>0)<(10);
    if ($191) {
     $$1515 = $189;
    } else {
     $$0514639 = $189;$$0530638 = 10;
     while(1) {
      $192 = ($$0530638*10)|0;
      $193 = (($$0514639) + 1)|0;
      $194 = ($190>>>0)<($192>>>0);
      if ($194) {
       $$1515 = $193;
       break;
      } else {
       $$0514639 = $193;$$0530638 = $192;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $195 = ($39|0)!=(102);
   $196 = $195 ? $$1515 : 0;
   $197 = (($$540) - ($196))|0;
   $198 = ($39|0)==(103);
   $199 = ($$540|0)!=(0);
   $200 = $199 & $198;
   $$neg = $200 << 31 >> 31;
   $201 = (($197) + ($$neg))|0;
   $202 = $$3501$lcssa;
   $203 = (($202) - ($185))|0;
   $204 = $203 >> 2;
   $205 = ($204*9)|0;
   $206 = (($205) + -9)|0;
   $207 = ($201|0)<($206|0);
   if ($207) {
    $208 = ((($$561)) + 4|0);
    $209 = (($201) + 9216)|0;
    $210 = (($209|0) / 9)&-1;
    $211 = (($210) + -1024)|0;
    $212 = (($208) + ($211<<2)|0);
    $213 = (($209|0) % 9)&-1;
    $214 = ($213|0)<(8);
    if ($214) {
     $$0527$in633 = $213;$$1531632 = 10;
     while(1) {
      $$0527 = (($$0527$in633) + 1)|0;
      $215 = ($$1531632*10)|0;
      $216 = ($$0527$in633|0)<(7);
      if ($216) {
       $$0527$in633 = $$0527;$$1531632 = $215;
      } else {
       $$1531$lcssa = $215;
       break;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $217 = HEAP32[$212>>2]|0;
    $218 = (($217>>>0) % ($$1531$lcssa>>>0))&-1;
    $219 = ($218|0)==(0);
    $220 = ((($212)) + 4|0);
    $221 = ($220|0)==($$3501$lcssa|0);
    $or$cond542 = $221 & $219;
    if ($or$cond542) {
     $$4492 = $212;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $222 = (($217>>>0) / ($$1531$lcssa>>>0))&-1;
     $223 = $222 & 1;
     $224 = ($223|0)==(0);
     $$543 = $224 ? 9007199254740992.0 : 9007199254740994.0;
     $225 = (($$1531$lcssa|0) / 2)&-1;
     $226 = ($218>>>0)<($225>>>0);
     $227 = ($218|0)==($225|0);
     $or$cond545 = $221 & $227;
     $$564 = $or$cond545 ? 1.0 : 1.5;
     $$$564 = $226 ? 0.5 : $$564;
     $228 = ($$0520|0)==(0);
     if ($228) {
      $$1467 = $$$564;$$1469 = $$543;
     } else {
      $229 = HEAP8[$$0521>>0]|0;
      $230 = ($229<<24>>24)==(45);
      $231 = - $$543;
      $232 = - $$$564;
      $$$543 = $230 ? $231 : $$543;
      $$$$564 = $230 ? $232 : $$$564;
      $$1467 = $$$$564;$$1469 = $$$543;
     }
     $233 = (($217) - ($218))|0;
     HEAP32[$212>>2] = $233;
     $234 = $$1469 + $$1467;
     $235 = $234 != $$1469;
     if ($235) {
      $236 = (($233) + ($$1531$lcssa))|0;
      HEAP32[$212>>2] = $236;
      $237 = ($236>>>0)>(999999999);
      if ($237) {
       $$5486626 = $$3484$lcssa;$$sink547625 = $212;
       while(1) {
        $238 = ((($$sink547625)) + -4|0);
        HEAP32[$$sink547625>>2] = 0;
        $239 = ($238>>>0)<($$5486626>>>0);
        if ($239) {
         $240 = ((($$5486626)) + -4|0);
         HEAP32[$240>>2] = 0;
         $$6 = $240;
        } else {
         $$6 = $$5486626;
        }
        $241 = HEAP32[$238>>2]|0;
        $242 = (($241) + 1)|0;
        HEAP32[$238>>2] = $242;
        $243 = ($242>>>0)>(999999999);
        if ($243) {
         $$5486626 = $$6;$$sink547625 = $238;
        } else {
         $$5486$lcssa = $$6;$$sink547$lcssa = $238;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink547$lcssa = $212;
      }
      $244 = $$5486$lcssa;
      $245 = (($185) - ($244))|0;
      $246 = $245 >> 2;
      $247 = ($246*9)|0;
      $248 = HEAP32[$$5486$lcssa>>2]|0;
      $249 = ($248>>>0)<(10);
      if ($249) {
       $$4492 = $$sink547$lcssa;$$4518 = $247;$$8 = $$5486$lcssa;
      } else {
       $$2516621 = $247;$$2532620 = 10;
       while(1) {
        $250 = ($$2532620*10)|0;
        $251 = (($$2516621) + 1)|0;
        $252 = ($248>>>0)<($250>>>0);
        if ($252) {
         $$4492 = $$sink547$lcssa;$$4518 = $251;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516621 = $251;$$2532620 = $250;
        }
       }
      }
     } else {
      $$4492 = $212;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $253 = ((($$4492)) + 4|0);
    $254 = ($$3501$lcssa>>>0)>($253>>>0);
    $$$3501 = $254 ? $253 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $255 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($255)) {
     $$lcssa675 = 0;
     break;
    }
    $256 = ((($$7505)) + -4|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = ($257|0)==(0);
    if ($258) {
     $$7505 = $256;
    } else {
     $$lcssa675 = 1;
     break;
    }
   }
   $259 = (0 - ($$5519$ph))|0;
   do {
    if ($198) {
     $not$ = $199 ^ 1;
     $260 = $not$&1;
     $$540$ = (($$540) + ($260))|0;
     $261 = ($$540$|0)>($$5519$ph|0);
     $262 = ($$5519$ph|0)>(-5);
     $or$cond6 = $261 & $262;
     if ($or$cond6) {
      $263 = (($5) + -1)|0;
      $$neg568 = (($$540$) + -1)|0;
      $264 = (($$neg568) - ($$5519$ph))|0;
      $$0479 = $263;$$2476 = $264;
     } else {
      $265 = (($5) + -2)|0;
      $266 = (($$540$) + -1)|0;
      $$0479 = $265;$$2476 = $266;
     }
     $267 = $4 & 8;
     $268 = ($267|0)==(0);
     if ($268) {
      if ($$lcssa675) {
       $269 = ((($$7505)) + -4|0);
       $270 = HEAP32[$269>>2]|0;
       $271 = ($270|0)==(0);
       if ($271) {
        $$2529 = 9;
       } else {
        $272 = (($270>>>0) % 10)&-1;
        $273 = ($272|0)==(0);
        if ($273) {
         $$1528617 = 0;$$3533616 = 10;
         while(1) {
          $274 = ($$3533616*10)|0;
          $275 = (($$1528617) + 1)|0;
          $276 = (($270>>>0) % ($274>>>0))&-1;
          $277 = ($276|0)==(0);
          if ($277) {
           $$1528617 = $275;$$3533616 = $274;
          } else {
           $$2529 = $275;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $278 = $$0479 | 32;
      $279 = ($278|0)==(102);
      $280 = $$7505;
      $281 = (($280) - ($185))|0;
      $282 = $281 >> 2;
      $283 = ($282*9)|0;
      $284 = (($283) + -9)|0;
      if ($279) {
       $285 = (($284) - ($$2529))|0;
       $286 = ($285|0)>(0);
       $$548 = $286 ? $285 : 0;
       $287 = ($$2476|0)<($$548|0);
       $$2476$$549 = $287 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi698Z2D = 0;
       break;
      } else {
       $288 = (($284) + ($$5519$ph))|0;
       $289 = (($288) - ($$2529))|0;
       $290 = ($289|0)>(0);
       $$550 = $290 ? $289 : 0;
       $291 = ($$2476|0)<($$550|0);
       $$2476$$551 = $291 ? $$2476 : $$550;
       $$1480 = $$0479;$$3477 = $$2476$$551;$$pre$phi698Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi698Z2D = $267;
     }
    } else {
     $$pre697 = $4 & 8;
     $$1480 = $5;$$3477 = $$540;$$pre$phi698Z2D = $$pre697;
    }
   } while(0);
   $292 = $$3477 | $$pre$phi698Z2D;
   $293 = ($292|0)!=(0);
   $294 = $293&1;
   $295 = $$1480 | 32;
   $296 = ($295|0)==(102);
   if ($296) {
    $297 = ($$5519$ph|0)>(0);
    $298 = $297 ? $$5519$ph : 0;
    $$2513 = 0;$$pn = $298;
   } else {
    $299 = ($$5519$ph|0)<(0);
    $300 = $299 ? $259 : $$5519$ph;
    $301 = ($300|0)<(0);
    $302 = $301 << 31 >> 31;
    $303 = (_fmt_u($300,$302,$11)|0);
    $304 = $11;
    $305 = $303;
    $306 = (($304) - ($305))|0;
    $307 = ($306|0)<(2);
    if ($307) {
     $$1512610 = $303;
     while(1) {
      $308 = ((($$1512610)) + -1|0);
      HEAP8[$308>>0] = 48;
      $309 = $308;
      $310 = (($304) - ($309))|0;
      $311 = ($310|0)<(2);
      if ($311) {
       $$1512610 = $308;
      } else {
       $$1512$lcssa = $308;
       break;
      }
     }
    } else {
     $$1512$lcssa = $303;
    }
    $312 = $$5519$ph >> 31;
    $313 = $312 & 2;
    $314 = (($313) + 43)|0;
    $315 = $314&255;
    $316 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$316>>0] = $315;
    $317 = $$1480&255;
    $318 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$318>>0] = $317;
    $319 = $318;
    $320 = (($304) - ($319))|0;
    $$2513 = $318;$$pn = $320;
   }
   $321 = (($$0520) + 1)|0;
   $322 = (($321) + ($$3477))|0;
   $$1526 = (($322) + ($294))|0;
   $323 = (($$1526) + ($$pn))|0;
   _pad_679($0,32,$2,$323,$4);
   _out($0,$$0521,$$0520);
   $324 = $4 ^ 65536;
   _pad_679($0,48,$2,$323,$324);
   if ($296) {
    $325 = ($$9$ph>>>0)>($$561>>>0);
    $$0496$$9 = $325 ? $$561 : $$9$ph;
    $326 = ((($8)) + 9|0);
    $327 = $326;
    $328 = ((($8)) + 8|0);
    $$5493600 = $$0496$$9;
    while(1) {
     $329 = HEAP32[$$5493600>>2]|0;
     $330 = (_fmt_u($329,0,$326)|0);
     $331 = ($$5493600|0)==($$0496$$9|0);
     if ($331) {
      $337 = ($330|0)==($326|0);
      if ($337) {
       HEAP8[$328>>0] = 48;
       $$1465 = $328;
      } else {
       $$1465 = $330;
      }
     } else {
      $332 = ($330>>>0)>($8>>>0);
      if ($332) {
       $333 = $330;
       $334 = (($333) - ($9))|0;
       _memset(($8|0),48,($334|0))|0;
       $$0464597 = $330;
       while(1) {
        $335 = ((($$0464597)) + -1|0);
        $336 = ($335>>>0)>($8>>>0);
        if ($336) {
         $$0464597 = $335;
        } else {
         $$1465 = $335;
         break;
        }
       }
      } else {
       $$1465 = $330;
      }
     }
     $338 = $$1465;
     $339 = (($327) - ($338))|0;
     _out($0,$$1465,$339);
     $340 = ((($$5493600)) + 4|0);
     $341 = ($340>>>0)>($$561>>>0);
     if ($341) {
      break;
     } else {
      $$5493600 = $340;
     }
    }
    $342 = ($292|0)==(0);
    if (!($342)) {
     _out($0,184252,1);
    }
    $343 = ($340>>>0)<($$7505>>>0);
    $344 = ($$3477|0)>(0);
    $345 = $343 & $344;
    if ($345) {
     $$4478593 = $$3477;$$6494592 = $340;
     while(1) {
      $346 = HEAP32[$$6494592>>2]|0;
      $347 = (_fmt_u($346,0,$326)|0);
      $348 = ($347>>>0)>($8>>>0);
      if ($348) {
       $349 = $347;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0463587 = $347;
       while(1) {
        $351 = ((($$0463587)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0463587 = $351;
        } else {
         $$0463$lcssa = $351;
         break;
        }
       }
      } else {
       $$0463$lcssa = $347;
      }
      $353 = ($$4478593|0)<(9);
      $354 = $353 ? $$4478593 : 9;
      _out($0,$$0463$lcssa,$354);
      $355 = ((($$6494592)) + 4|0);
      $356 = (($$4478593) + -9)|0;
      $357 = ($355>>>0)<($$7505>>>0);
      $358 = ($$4478593|0)>(9);
      $359 = $357 & $358;
      if ($359) {
       $$4478593 = $356;$$6494592 = $355;
      } else {
       $$4478$lcssa = $356;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $360 = (($$4478$lcssa) + 9)|0;
    _pad_679($0,48,$360,9,0);
   } else {
    $361 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa675 ? $$7505 : $361;
    $362 = ($$3477|0)>(-1);
    if ($362) {
     $363 = ((($8)) + 9|0);
     $364 = ($$pre$phi698Z2D|0)==(0);
     $365 = $363;
     $366 = (0 - ($9))|0;
     $367 = ((($8)) + 8|0);
     $$5605 = $$3477;$$7495604 = $$9$ph;
     while(1) {
      $368 = HEAP32[$$7495604>>2]|0;
      $369 = (_fmt_u($368,0,$363)|0);
      $370 = ($369|0)==($363|0);
      if ($370) {
       HEAP8[$367>>0] = 48;
       $$0 = $367;
      } else {
       $$0 = $369;
      }
      $371 = ($$7495604|0)==($$9$ph|0);
      do {
       if ($371) {
        $375 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $376 = ($$5605|0)<(1);
        $or$cond556 = $364 & $376;
        if ($or$cond556) {
         $$2 = $375;
         break;
        }
        _out($0,184252,1);
        $$2 = $375;
       } else {
        $372 = ($$0>>>0)>($8>>>0);
        if (!($372)) {
         $$2 = $$0;
         break;
        }
        $scevgep686 = (($$0) + ($366)|0);
        $scevgep686687 = $scevgep686;
        _memset(($8|0),48,($scevgep686687|0))|0;
        $$1601 = $$0;
        while(1) {
         $373 = ((($$1601)) + -1|0);
         $374 = ($373>>>0)>($8>>>0);
         if ($374) {
          $$1601 = $373;
         } else {
          $$2 = $373;
          break;
         }
        }
       }
      } while(0);
      $377 = $$2;
      $378 = (($365) - ($377))|0;
      $379 = ($$5605|0)>($378|0);
      $380 = $379 ? $378 : $$5605;
      _out($0,$$2,$380);
      $381 = (($$5605) - ($378))|0;
      $382 = ((($$7495604)) + 4|0);
      $383 = ($382>>>0)<($$7505$>>>0);
      $384 = ($381|0)>(-1);
      $385 = $383 & $384;
      if ($385) {
       $$5605 = $381;$$7495604 = $382;
      } else {
       $$5$lcssa = $381;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $386 = (($$5$lcssa) + 18)|0;
    _pad_679($0,48,$386,18,0);
    $387 = $11;
    $388 = $$2513;
    $389 = (($387) - ($388))|0;
    _out($0,$$2513,$389);
   }
   $390 = $4 ^ 8192;
   _pad_679($0,32,$2,$323,$390);
   $$sink560 = $323;
  }
 } while(0);
 $391 = ($$sink560|0)<($2|0);
 $$557 = $391 ? $2 : $$sink560;
 STACKTOP = sp;return ($$557|0);
}
function ___DOUBLE_BITS_680($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_426()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_426() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (14656|0);
}
function ___pthread_self_103() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (165576 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 165664;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 165664;
  } else {
   $$01214 = 165664;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 63]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 63]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   _memcpy(($31|0),($$141|0),($$143|0))|0;
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $$ = $8 ? $2 : $7;
 $$cast = $6;
 _memcpy(($$cast|0),($1|0),($$|0))|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($$)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _sha256crypt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$08999 = 0, $$092$lcssa = 0, $$092109 = 0, $$094 = 0, $$1 = 0, $$191 = 0, $$193106 = 0, $$2102 = 0, $$296 = 0, $$3101 = 0, $$4100 = 0, $$598 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $exitcond = 0, $exitcond110 = 0, $exitcond111 = 0, $exitcond112 = 0, $isdigit = 0, $isdigittmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_ptr4 = 0, $vararg_ptr5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $vararg_buffer1 = sp + 112|0;
 $vararg_buffer = sp + 104|0;
 $3 = sp;
 $4 = sp + 216|0;
 $5 = sp + 184|0;
 $6 = sp + 152|0;
 $7 = sp + 128|0;
 $8 = sp + 124|0;
 dest=$7; stop=dest+20|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $9 = (_strnlen($0,257)|0);
 $10 = ($9>>>0)>(256);
 L1: do {
  if ($10) {
   $$1 = 0;
  } else {
   $11 = (_strncmp($1,167589,3)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    $13 = ((($1)) + 3|0);
    $14 = (_strncmp($13,167593,7)|0);
    $15 = ($14|0)==(0);
    L4: do {
     if ($15) {
      $16 = ((($1)) + 10|0);
      $17 = HEAP8[$16>>0]|0;
      $18 = $17 << 24 >> 24;
      $isdigittmp = (($18) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      do {
       if ($isdigit) {
        $19 = (_strtoul($16,$8,10)|0);
        $20 = HEAP32[$8>>2]|0;
        $21 = HEAP8[$20>>0]|0;
        $22 = ($21<<24>>24)==(36);
        if ($22) {
         $23 = ((($20)) + 1|0);
         $24 = ($19>>>0)<(1000);
         if ($24) {
          $$094 = 1000;
         } else {
          $25 = ($19>>>0)>(9999999);
          if ($25) {
           break;
          } else {
           $$094 = $19;
          }
         }
         HEAP32[$vararg_buffer>>2] = $$094;
         (_sprintf($7,167601,$vararg_buffer)|0);
         $$191 = $23;$$296 = $$094;
         break L4;
        }
       }
      } while(0);
      $$1 = 0;
      break L1;
     } else {
      $$191 = $13;$$296 = 5000;
     }
    } while(0);
    $$092109 = 0;
    L14: while(1) {
     $26 = (($$191) + ($$092109)|0);
     $27 = HEAP8[$26>>0]|0;
     switch ($27<<24>>24) {
     case 58: case 10:  {
      $$1 = 0;
      break L1;
      break;
     }
     case 36: case 0:  {
      $$092$lcssa = $$092109;
      break L14;
      break;
     }
     default: {
     }
     }
     $28 = (($$092109) + 1)|0;
     $29 = ($28>>>0)<(16);
     if ($29) {
      $$092109 = $28;
     } else {
      $$092$lcssa = $28;
      break;
     }
    }
    _sha256_init($3);
    _sha256_update($3,$0,$9);
    _sha256_update($3,$$191,$$092$lcssa);
    _sha256_update($3,$0,$9);
    _sha256_sum($3,$4);
    _sha256_init($3);
    _sha256_update($3,$0,$9);
    _sha256_update($3,$$191,$$092$lcssa);
    _hashmd($3,$9,$4);
    $30 = ($9|0)==(0);
    if ($30) {
     _sha256_sum($3,$4);
     _sha256_init($3);
    } else {
     $$193106 = $9;
     while(1) {
      $31 = $$193106 & 1;
      $32 = ($31|0)==(0);
      if ($32) {
       _sha256_update($3,$0,$9);
      } else {
       _sha256_update($3,$4,32);
      }
      $33 = $$193106 >>> 1;
      $34 = ($33|0)==(0);
      if ($34) {
       break;
      } else {
       $$193106 = $33;
      }
     }
     _sha256_sum($3,$4);
     _sha256_init($3);
     if (!($30)) {
      $$2102 = 0;
      while(1) {
       _sha256_update($3,$0,$9);
       $35 = (($$2102) + 1)|0;
       $exitcond112 = ($35|0)==($9|0);
       if ($exitcond112) {
        break;
       } else {
        $$2102 = $35;
       }
      }
     }
    }
    _sha256_sum($3,$5);
    _sha256_init($3);
    $36 = HEAP8[$4>>0]|0;
    $37 = $36&255;
    $38 = (($37) + 15)|0;
    $$3101 = 0;
    while(1) {
     _sha256_update($3,$$191,$$092$lcssa);
     $39 = (($$3101) + 1)|0;
     $exitcond111 = ($$3101|0)==($38|0);
     if ($exitcond111) {
      break;
     } else {
      $$3101 = $39;
     }
    }
    _sha256_sum($3,$6);
    $40 = ($$296|0)==(0);
    if (!($40)) {
     $$4100 = 0;
     while(1) {
      _sha256_init($3);
      $41 = $$4100 & 1;
      $42 = ($41|0)!=(0);
      if ($42) {
       _hashmd($3,$9,$5);
      } else {
       _sha256_update($3,$4,32);
      }
      $43 = (($$4100>>>0) % 3)&-1;
      $44 = ($43|0)==(0);
      if (!($44)) {
       _sha256_update($3,$6,$$092$lcssa);
      }
      $45 = (($$4100>>>0) % 7)&-1;
      $46 = ($45|0)==(0);
      if (!($46)) {
       _hashmd($3,$9,$5);
      }
      if ($42) {
       _sha256_update($3,$4,32);
      } else {
       _hashmd($3,$9,$5);
      }
      _sha256_sum($3,$4);
      $47 = (($$4100) + 1)|0;
      $exitcond110 = ($47|0)==($$296|0);
      if ($exitcond110) {
       break;
      } else {
       $$4100 = $47;
      }
     }
    }
    HEAP32[$vararg_buffer1>>2] = $7;
    $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = $$092$lcssa;
    $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
    HEAP32[$vararg_ptr5>>2] = $$191;
    $48 = (_sprintf($2,167612,$vararg_buffer1)|0);
    $49 = (($2) + ($48)|0);
    $$08999 = $49;$$598 = 0;
    while(1) {
     $50 = (167623 + (($$598*3)|0)|0);
     $51 = HEAP8[$50>>0]|0;
     $52 = $51&255;
     $53 = (($4) + ($52)|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54&255;
     $56 = $55 << 16;
     $57 = (((167623 + (($$598*3)|0)|0)) + 1|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = (($4) + ($59)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = $62 << 8;
     $64 = $63 | $56;
     $65 = (((167623 + (($$598*3)|0)|0)) + 2|0);
     $66 = HEAP8[$65>>0]|0;
     $67 = $66&255;
     $68 = (($4) + ($67)|0);
     $69 = HEAP8[$68>>0]|0;
     $70 = $69&255;
     $71 = $64 | $70;
     $72 = (_to64_44($$08999,$71,4)|0);
     $73 = (($$598) + 1)|0;
     $exitcond = ($73|0)==(10);
     if ($exitcond) {
      break;
     } else {
      $$08999 = $72;$$598 = $73;
     }
    }
    $74 = ((($4)) + 31|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = $75&255;
    $77 = $76 << 8;
    $78 = ((($4)) + 30|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79&255;
    $81 = $77 | $80;
    $82 = (_to64_44($72,$81,3)|0);
    HEAP8[$82>>0] = 0;
    $$1 = $2;
   } else {
    $$1 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function _strnlen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_memchr($0,0,$1)|0);
 $3 = ($2|0)==(0|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $3 ? $1 : $6;
 return ($7|0);
}
function _sha256_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 1779033703;
 $6 = ((($0)) + 12|0);
 HEAP32[$6>>2] = -1150833019;
 $7 = ((($0)) + 16|0);
 HEAP32[$7>>2] = 1013904242;
 $8 = ((($0)) + 20|0);
 HEAP32[$8>>2] = -1521486534;
 $9 = ((($0)) + 24|0);
 HEAP32[$9>>2] = 1359893119;
 $10 = ((($0)) + 28|0);
 HEAP32[$10>>2] = -1694144372;
 $11 = ((($0)) + 32|0);
 HEAP32[$11>>2] = 528734635;
 $12 = ((($0)) + 36|0);
 HEAP32[$12>>2] = 1541459225;
 return;
}
function _sha256_update($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$0$ph = 0, $$027$lcssa = 0, $$027$ph = 0, $$02728 = 0, $$029 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = $5 & 63;
 $10 = (_i64Add(($5|0),($8|0),($2|0),0)|0);
 $11 = tempRet0;
 $12 = $0;
 $13 = $12;
 HEAP32[$13>>2] = $10;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $11;
 $16 = ($9|0)==(0);
 do {
  if ($16) {
   $$0$ph = $2;$$027$ph = $1;
   label = 5;
  } else {
   $17 = (64 - ($9))|0;
   $18 = ($17>>>0)>($2>>>0);
   $19 = (((($0)) + 40|0) + ($9)|0);
   if ($18) {
    _memcpy(($19|0),($1|0),($2|0))|0;
    break;
   } else {
    $20 = ((($0)) + 40|0);
    _memcpy(($19|0),($1|0),($17|0))|0;
    $21 = (($2) - ($17))|0;
    $22 = (($1) + ($17)|0);
    _processblock_47($0,$20);
    $$0$ph = $21;$$027$ph = $22;
    label = 5;
    break;
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $23 = ($$0$ph>>>0)>(63);
  if ($23) {
   $24 = (($$0$ph) + -64)|0;
   $25 = $24 & -64;
   $26 = (($25) + 64)|0;
   $$02728 = $$027$ph;$$029 = $$0$ph;
   while(1) {
    _processblock_47($0,$$02728);
    $27 = (($$029) + -64)|0;
    $28 = ((($$02728)) + 64|0);
    $29 = ($27>>>0)>(63);
    if ($29) {
     $$02728 = $28;$$029 = $27;
    } else {
     break;
    }
   }
   $30 = (($24) - ($25))|0;
   $scevgep = (($$027$ph) + ($26)|0);
   $$0$lcssa = $30;$$027$lcssa = $scevgep;
  } else {
   $$0$lcssa = $$0$ph;$$027$lcssa = $$027$ph;
  }
  $31 = ((($0)) + 40|0);
  _memcpy(($31|0),($$027$lcssa|0),($$0$lcssa|0))|0;
 }
 return;
}
function _sha256_sum($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _pad_46($0);
 $$019 = 0;
 while(1) {
  $2 = (((($0)) + 8|0) + ($$019<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 >>> 24;
  $5 = $4&255;
  $6 = $$019 << 2;
  $7 = (($1) + ($6)|0);
  HEAP8[$7>>0] = $5;
  $8 = HEAP32[$2>>2]|0;
  $9 = $8 >>> 16;
  $10 = $9&255;
  $11 = $6 | 1;
  $12 = (($1) + ($11)|0);
  HEAP8[$12>>0] = $10;
  $13 = HEAP32[$2>>2]|0;
  $14 = $13 >>> 8;
  $15 = $14&255;
  $16 = $6 | 2;
  $17 = (($1) + ($16)|0);
  HEAP8[$17>>0] = $15;
  $18 = HEAP32[$2>>2]|0;
  $19 = $18&255;
  $20 = $6 | 3;
  $21 = (($1) + ($20)|0);
  HEAP8[$21>>0] = $19;
  $22 = (($$019) + 1)|0;
  $exitcond = ($22|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $$019 = $22;
  }
 }
 return;
}
function _hashmd($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(32);
 if ($3) {
  $4 = (($1) + -33)|0;
  $5 = $4 & -32;
  $$06 = $1;
  while(1) {
   _sha256_update($0,$2,32);
   $6 = (($$06) + -32)|0;
   $7 = ($6>>>0)>(32);
   if ($7) {
    $$06 = $6;
   } else {
    break;
   }
  }
  $8 = (($1) + -32)|0;
  $9 = (($8) - ($5))|0;
  $$0$lcssa = $9;
 } else {
  $$0$lcssa = $1;
 }
 _sha256_update($0,$2,$$0$lcssa);
 return;
}
function _to64_44($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$047 = 0, $$05$lcssa = 0, $$056 = 0, $$08 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)>(0);
 if ($3) {
  $$047 = $1;$$056 = $0;$$08 = $2;
  while(1) {
   $4 = (($$08) + -1)|0;
   $5 = $$047 & 63;
   $6 = (168047 + ($5)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ((($$056)) + 1|0);
   HEAP8[$$056>>0] = $7;
   $9 = $$047 >>> 6;
   $10 = ($$08|0)>(1);
   if ($10) {
    $$047 = $9;$$056 = $8;$$08 = $4;
   } else {
    $$05$lcssa = $8;
    break;
   }
  }
 } else {
  $$05$lcssa = $0;
 }
 return ($$05$lcssa|0);
}
function _pad_46($0) {
 $0 = $0|0;
 var $$0 = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $3 & 63;
 $8 = ((($0)) + 40|0);
 $9 = (($7) + 1)|0;
 $10 = (((($0)) + 40|0) + ($7)|0);
 HEAP8[$10>>0] = -128;
 $11 = ($7>>>0)>(55);
 if ($11) {
  $12 = $7 ^ 63;
  $13 = (((($0)) + 40|0) + ($9)|0);
  _memset(($13|0),0,($12|0))|0;
  _processblock_47($0,$8);
  $$0 = 0;$$pre$phiZ2D = $8;
 } else {
  $$0 = $9;$$pre$phiZ2D = $8;
 }
 $14 = (((($0)) + 40|0) + ($$0)|0);
 $15 = (56 - ($$0))|0;
 _memset(($14|0),0,($15|0))|0;
 $16 = $0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (_bitshift64Shl(($18|0),($21|0),3)|0);
 $23 = tempRet0;
 $24 = $0;
 $25 = $24;
 HEAP32[$25>>2] = $22;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $28 = (_bitshift64Lshr(($18|0),($21|0),53)|0);
 $29 = tempRet0;
 $30 = $28&255;
 $31 = ((($0)) + 96|0);
 HEAP8[$31>>0] = $30;
 $32 = (_bitshift64Lshr(($18|0),($21|0),45)|0);
 $33 = tempRet0;
 $34 = $32&255;
 $35 = ((($0)) + 97|0);
 HEAP8[$35>>0] = $34;
 $36 = (_bitshift64Lshr(($18|0),($21|0),37)|0);
 $37 = tempRet0;
 $38 = $36&255;
 $39 = ((($0)) + 98|0);
 HEAP8[$39>>0] = $38;
 $40 = (_bitshift64Lshr(($18|0),($21|0),29)|0);
 $41 = tempRet0;
 $42 = $40&255;
 $43 = ((($0)) + 99|0);
 HEAP8[$43>>0] = $42;
 $44 = (_bitshift64Lshr(($18|0),($21|0),21)|0);
 $45 = tempRet0;
 $46 = $44&255;
 $47 = ((($0)) + 100|0);
 HEAP8[$47>>0] = $46;
 $48 = (_bitshift64Lshr(($18|0),($21|0),13)|0);
 $49 = tempRet0;
 $50 = $48&255;
 $51 = ((($0)) + 101|0);
 HEAP8[$51>>0] = $50;
 $52 = (_bitshift64Lshr(($18|0),($21|0),5)|0);
 $53 = tempRet0;
 $54 = $52&255;
 $55 = ((($0)) + 102|0);
 HEAP8[$55>>0] = $54;
 $56 = $22&255;
 $57 = ((($0)) + 103|0);
 HEAP8[$57>>0] = $56;
 _processblock_47($0,$$pre$phiZ2D);
 return;
}
function _processblock_47($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0100113 = 0, $$0100113$phi = 0, $$0101112 = 0, $$0101112$phi = 0, $$0102111 = 0, $$0103110 = 0, $$0103110$phi = 0, $$0104109 = 0, $$0104109$phi = 0, $$0105108 = 0, $$0105108$phi = 0, $$0106107 = 0, $$0117 = 0, $$099114 = 0, $$099114$phi = 0, $$1116 = 0, $$2115 = 0, $$pre = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $exitcond = 0, $exitcond120 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $2 = sp;
 $$0117 = 0;
 while(1) {
  $3 = $$0117 << 2;
  $4 = (($1) + ($3)|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5&255;
  $7 = $6 << 24;
  $8 = (($2) + ($$0117<<2)|0);
  $9 = $3 | 1;
  $10 = (($1) + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $12 << 16;
  $14 = $13 | $7;
  $15 = $3 | 2;
  $16 = (($1) + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $18 << 8;
  $20 = $19 | $14;
  $21 = $3 | 3;
  $22 = (($1) + ($21)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $20 | $24;
  HEAP32[$8>>2] = $25;
  $26 = (($$0117) + 1)|0;
  $exitcond120 = ($26|0)==(16);
  if ($exitcond120) {
   break;
  } else {
   $$0117 = $26;
  }
 }
 $$pre = HEAP32[$2>>2]|0;
 $$1116 = 16;$48 = $$pre;
 while(1) {
  $27 = (($$1116) + -2)|0;
  $28 = (($2) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_ror($29,17)|0);
  $31 = (_ror($29,19)|0);
  $32 = $29 >>> 10;
  $33 = $32 ^ $30;
  $34 = $33 ^ $31;
  $35 = (($$1116) + -7)|0;
  $36 = (($2) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($34) + ($37))|0;
  $39 = (($$1116) + -15)|0;
  $40 = (($2) + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (_ror($41,7)|0);
  $43 = (_ror($41,18)|0);
  $44 = $41 >>> 3;
  $45 = $44 ^ $42;
  $46 = $45 ^ $43;
  $47 = (($38) + ($48))|0;
  $49 = (($47) + ($46))|0;
  $50 = (($2) + ($$1116<<2)|0);
  HEAP32[$50>>2] = $49;
  $51 = (($$1116) + 1)|0;
  $52 = ($$1116|0)<(63);
  if ($52) {
   $$1116 = $51;$48 = $41;
  } else {
   break;
  }
 }
 $53 = ((($0)) + 8|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($0)) + 12|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($0)) + 16|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($0)) + 20|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($0)) + 24|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ((($0)) + 28|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($0)) + 32|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ((($0)) + 36|0);
 $68 = HEAP32[$67>>2]|0;
 $$0100113 = $66;$$0101112 = $64;$$0102111 = $62;$$0103110 = $60;$$0104109 = $58;$$0105108 = $56;$$0106107 = $54;$$099114 = $68;$$2115 = 0;
 while(1) {
  $69 = (_ror($$0102111,6)|0);
  $70 = (_ror($$0102111,11)|0);
  $71 = $70 ^ $69;
  $72 = (_ror($$0102111,25)|0);
  $73 = $71 ^ $72;
  $74 = $$0100113 ^ $$0101112;
  $75 = $74 & $$0102111;
  $76 = $75 ^ $$0100113;
  $77 = (14900 + ($$2115<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($2) + ($$2115<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($76) + ($$099114))|0;
  $82 = (($81) + ($73))|0;
  $83 = (($82) + ($78))|0;
  $84 = (($83) + ($80))|0;
  $85 = (_ror($$0106107,2)|0);
  $86 = (_ror($$0106107,13)|0);
  $87 = $86 ^ $85;
  $88 = (_ror($$0106107,22)|0);
  $89 = $87 ^ $88;
  $90 = $$0105108 & $$0106107;
  $91 = $$0105108 | $$0106107;
  $92 = $$0104109 & $91;
  $93 = $92 | $90;
  $94 = (($84) + ($$0103110))|0;
  $95 = (($84) + ($93))|0;
  $96 = (($95) + ($89))|0;
  $97 = (($$2115) + 1)|0;
  $exitcond = ($97|0)==(64);
  if ($exitcond) {
   break;
  } else {
   $$099114$phi = $$0100113;$$0105108$phi = $$0106107;$$0104109$phi = $$0105108;$$0103110$phi = $$0104109;$$0101112$phi = $$0102111;$$0100113$phi = $$0101112;$$0102111 = $94;$$0106107 = $96;$$2115 = $97;$$099114 = $$099114$phi;$$0105108 = $$0105108$phi;$$0104109 = $$0104109$phi;$$0103110 = $$0103110$phi;$$0101112 = $$0101112$phi;$$0100113 = $$0100113$phi;
  }
 }
 $98 = (($54) + ($96))|0;
 HEAP32[$53>>2] = $98;
 $99 = (($56) + ($$0106107))|0;
 HEAP32[$55>>2] = $99;
 $100 = (($58) + ($$0105108))|0;
 HEAP32[$57>>2] = $100;
 $101 = (($60) + ($$0104109))|0;
 HEAP32[$59>>2] = $101;
 $102 = (($62) + ($94))|0;
 HEAP32[$61>>2] = $102;
 $103 = (($64) + ($$0102111))|0;
 HEAP32[$63>>2] = $103;
 $104 = (($66) + ($$0101112))|0;
 HEAP32[$65>>2] = $104;
 $105 = (($68) + ($$0100113))|0;
 HEAP32[$67>>2] = $105;
 STACKTOP = sp;return;
}
function _ror($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 >>> $1;
 $3 = (32 - ($1))|0;
 $4 = $0 << $3;
 $5 = $4 | $2;
 return ($5|0);
}
function _BF_crypt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$084 = 0, $$085 = 0, $$08695 = 0, $$08997 = 0, $$18796 = 0, $$294 = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4272|0);
 $4 = sp + 8|0;
 $5 = sp;
 $6 = HEAP8[$1>>0]|0;
 $7 = ($6<<24>>24)==(36);
 if ($7) {
  $8 = ((($1)) + 1|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)==(50);
  if ($10) {
   $11 = ((($1)) + 2|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12 << 24 >> 24;
   $14 = (($13) + -97)|0;
   $15 = ($14>>>0)>(25);
   if ($15) {
    $$084 = 0;
   } else {
    $16 = 25165825 >>> $14;
    $17 = $16 & 1;
    $18 = ($17|0)==(0);
    if ($18) {
     $$084 = 0;
    } else {
     $19 = ((($1)) + 3|0);
     $20 = HEAP8[$19>>0]|0;
     $21 = ($20<<24>>24)==(36);
     if ($21) {
      $22 = ((($1)) + 4|0);
      $23 = HEAP8[$22>>0]|0;
      $24 = $23 << 24 >> 24;
      $25 = (($24) + -48)|0;
      $26 = ($25>>>0)>(1);
      if ($26) {
       $$084 = 0;
      } else {
       $27 = ((($1)) + 5|0);
       $28 = HEAP8[$27>>0]|0;
       $29 = $28 << 24 >> 24;
       $30 = (($29) + -48)|0;
       $31 = ($30>>>0)>(9);
       if ($31) {
        $$084 = 0;
       } else {
        $32 = ((($1)) + 6|0);
        $33 = HEAP8[$32>>0]|0;
        $34 = ($33<<24>>24)==(36);
        if ($34) {
         $35 = ($25*10)|0;
         $36 = (($30) + ($35))|0;
         $37 = 1 << $36;
         $38 = ($37>>>0)<($3>>>0);
         if ($38) {
          $$084 = 0;
         } else {
          $39 = ((($4)) + 4240|0);
          $40 = ((($1)) + 7|0);
          $41 = (_BF_decode($39,$40)|0);
          $42 = ($41|0)==(0);
          if ($42) {
           _BF_swap($39,4);
           $43 = ((($4)) + 4168|0);
           $44 = HEAP8[$11>>0]|0;
           $45 = $44 << 24 >> 24;
           $46 = (($45) + -97)|0;
           $47 = (167773 + ($46)|0);
           $48 = HEAP8[$47>>0]|0;
           _BF_set_key($0,$43,$4,$48);
           $49 = ((($4)) + 72|0);
           _memcpy(($49|0),((15228)|0),4096)|0;
           $50 = HEAP32[$39>>2]|0;
           $51 = ((($4)) + 4244|0);
           $52 = HEAP32[$51>>2]|0;
           $53 = (_BF_encrypt($4,$50,$52,$4,$4)|0);
           $54 = ((($4)) + 8|0);
           $55 = ((($4)) + 4248|0);
           $56 = ((($4)) + 4252|0);
           $$08997 = $4;$63 = $53;$66 = $54;
           while(1) {
            $59 = ((($$08997)) + 4|0);
            $60 = HEAP32[$59>>2]|0;
            $61 = HEAP32[$55>>2]|0;
            $62 = $61 ^ $63;
            $64 = HEAP32[$56>>2]|0;
            $65 = $64 ^ $60;
            $67 = (_BF_encrypt($4,$62,$65,$66,$66)|0);
            $68 = ((($$08997)) + 12|0);
            $69 = HEAP32[$68>>2]|0;
            $70 = ((($$08997)) + 16|0);
            $71 = HEAP32[$39>>2]|0;
            $72 = $71 ^ $67;
            $73 = HEAP32[$51>>2]|0;
            $74 = $73 ^ $69;
            $75 = (_BF_encrypt($4,$72,$74,$70,$70)|0);
            $76 = ((($$08997)) + 24|0);
            $77 = ($76>>>0)<($43>>>0);
            if ($77) {
             $$08997 = $70;$63 = $75;$66 = $76;
            } else {
             break;
            }
           }
           $57 = ((($4)) + 64|0);
           $58 = ((($4)) + 68|0);
           $$085 = $37;
           while(1) {
            $$08695 = 0;
            while(1) {
             $78 = (((($4)) + 4168|0) + ($$08695<<2)|0);
             $79 = HEAP32[$78>>2]|0;
             $80 = (($4) + ($$08695<<2)|0);
             $81 = HEAP32[$80>>2]|0;
             $82 = $81 ^ $79;
             HEAP32[$80>>2] = $82;
             $83 = $$08695 | 1;
             $84 = (((($4)) + 4168|0) + ($83<<2)|0);
             $85 = HEAP32[$84>>2]|0;
             $86 = (($4) + ($83<<2)|0);
             $87 = HEAP32[$86>>2]|0;
             $88 = $87 ^ $85;
             HEAP32[$86>>2] = $88;
             $89 = (($$08695) + 2)|0;
             $90 = ($$08695|0)<(16);
             if ($90) {
              $$08695 = $89;
             } else {
              break;
             }
            }
            (_BF_encrypt($4,0,0,$4,$43)|0);
            $91 = HEAP32[$39>>2]|0;
            $92 = HEAP32[$51>>2]|0;
            $93 = HEAP32[$55>>2]|0;
            $94 = HEAP32[$56>>2]|0;
            $$18796 = 0;
            while(1) {
             $95 = (($4) + ($$18796<<2)|0);
             $96 = HEAP32[$95>>2]|0;
             $97 = $96 ^ $91;
             HEAP32[$95>>2] = $97;
             $98 = $$18796 | 1;
             $99 = (($4) + ($98<<2)|0);
             $100 = HEAP32[$99>>2]|0;
             $101 = $100 ^ $92;
             HEAP32[$99>>2] = $101;
             $102 = $$18796 | 2;
             $103 = (($4) + ($102<<2)|0);
             $104 = HEAP32[$103>>2]|0;
             $105 = $104 ^ $93;
             HEAP32[$103>>2] = $105;
             $106 = $$18796 | 3;
             $107 = (($4) + ($106<<2)|0);
             $108 = HEAP32[$107>>2]|0;
             $109 = $108 ^ $94;
             HEAP32[$107>>2] = $109;
             $110 = (($$18796) + 4)|0;
             $111 = ($$18796|0)<(12);
             if ($111) {
              $$18796 = $110;
             } else {
              break;
             }
            }
            $112 = HEAP32[$57>>2]|0;
            $113 = $112 ^ $91;
            HEAP32[$57>>2] = $113;
            $114 = HEAP32[$58>>2]|0;
            $115 = $114 ^ $92;
            HEAP32[$58>>2] = $115;
            (_BF_encrypt($4,0,0,$4,$43)|0);
            $116 = (($$085) + -1)|0;
            $117 = ($116|0)==(0);
            if ($117) {
             break;
            } else {
             $$085 = $116;
            }
           }
           $118 = ((($5)) + 4|0);
           $$294 = 0;
           while(1) {
            $119 = (19324 + ($$294<<2)|0);
            $120 = HEAP32[$119>>2]|0;
            $121 = $$294 | 1;
            $122 = (19324 + ($121<<2)|0);
            $123 = HEAP32[$122>>2]|0;
            HEAP32[$118>>2] = $123;
            $124 = (_BF_encrypt($4,$120,$123,$5,$5)|0);
            $125 = $124;$128 = 63;
            while(1) {
             $$pre = HEAP32[$118>>2]|0;
             $126 = (_BF_encrypt($4,$125,$$pre,$5,$5)|0);
             $127 = (($128) + -1)|0;
             $129 = ($127|0)==(0);
             if ($129) {
              break;
             } else {
              $125 = $126;$128 = $127;
             }
            }
            $130 = (((($4)) + 4240|0) + ($$294<<2)|0);
            HEAP32[$130>>2] = $126;
            $131 = HEAP32[$118>>2]|0;
            $132 = (((($4)) + 4240|0) + ($121<<2)|0);
            HEAP32[$132>>2] = $131;
            $133 = (($$294) + 2)|0;
            $134 = ($$294|0)<(4);
            if ($134) {
             $$294 = $133;
            } else {
             break;
            }
           }
           dest=$2; src=$1; stop=dest+28|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
           $135 = ((($1)) + 28|0);
           $136 = HEAP8[$135>>0]|0;
           $137 = $136 << 24 >> 24;
           $138 = (($137) + -32)|0;
           $139 = (167799 + ($138)|0);
           $140 = HEAP8[$139>>0]|0;
           $141 = $140 & 48;
           $142 = $141&255;
           $143 = (167895 + ($142)|0);
           $144 = HEAP8[$143>>0]|0;
           $145 = ((($2)) + 28|0);
           HEAP8[$145>>0] = $144;
           _BF_swap($39,6);
           $146 = ((($2)) + 29|0);
           _BF_encode($146,$39);
           $147 = ((($2)) + 60|0);
           HEAP8[$147>>0] = 0;
           $$084 = $2;
          } else {
           $$084 = 0;
          }
         }
        } else {
         $$084 = 0;
        }
       }
      }
     } else {
      $$084 = 0;
     }
    }
   }
  } else {
   $$084 = 0;
  }
 } else {
  $$084 = 0;
 }
 STACKTOP = sp;return ($$084|0);
}
function _BF_set_key($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$masked = 0, $$04455 = 0, $$04554 = 0, $$04850 = 0, $$04953 = 0, $$056 = 0, $$14651 = 0, $$152 = 0, $$2 = 0, $$247 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond58 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = $3&255;
 $6 = $5 & 1;
 $7 = $5 << 15;
 $8 = ((($4)) + 4|0);
 $9 = (($4) + ($6<<2)|0);
 $$04455 = 0;$$04554 = $0;$$04953 = 0;$$056 = 0;
 while(1) {
  HEAP32[$8>>2] = 0;
  HEAP32[$4>>2] = 0;
  $$04850 = 0;$$14651 = $$04554;$$152 = $$04455;$11 = 0;$16 = 0;
  while(1) {
   $10 = $11 << 8;
   HEAP32[$4>>2] = $10;
   $12 = HEAP8[$$14651>>0]|0;
   $13 = $12&255;
   $14 = $10 | $13;
   HEAP32[$4>>2] = $14;
   $15 = $16 << 8;
   HEAP32[$8>>2] = $15;
   $17 = HEAP8[$$14651>>0]|0;
   $18 = $17 << 24 >> 24;
   $19 = $15 | $18;
   HEAP32[$8>>2] = $19;
   $20 = ($$04850|0)==(0);
   $21 = $18 & 128;
   $22 = $20 ? 0 : $21;
   $$2 = $22 | $$152;
   $23 = HEAP8[$$14651>>0]|0;
   $24 = ($23<<24>>24)==(0);
   $25 = ((($$14651)) + 1|0);
   $$247 = $24 ? $0 : $25;
   $26 = (($$04850) + 1)|0;
   $exitcond = ($26|0)==(4);
   if ($exitcond) {
    break;
   } else {
    $$04850 = $26;$$14651 = $$247;$$152 = $$2;$11 = $14;$16 = $19;
   }
  }
  $27 = $19 ^ $14;
  $28 = $27 | $$056;
  $29 = HEAP32[$9>>2]|0;
  $30 = (($1) + ($$04953<<2)|0);
  HEAP32[$30>>2] = $29;
  $31 = (15156 + ($$04953<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 ^ $29;
  $34 = (($2) + ($$04953<<2)|0);
  HEAP32[$34>>2] = $33;
  $35 = (($$04953) + 1)|0;
  $exitcond58 = ($35|0)==(18);
  if ($exitcond58) {
   break;
  } else {
   $$04455 = $$2;$$04554 = $$247;$$04953 = $35;$$056 = $28;
  }
 }
 $36 = $7 & 65536;
 $37 = $28 >>> 16;
 $$0$masked = $28 & 65535;
 $38 = $$0$masked | $37;
 $39 = $$2 << 9;
 $40 = (65536 - ($38))|0;
 $41 = $36 & $39;
 $42 = $41 & $40;
 $43 = HEAP32[$2>>2]|0;
 $44 = $43 ^ $42;
 HEAP32[$2>>2] = $44;
 STACKTOP = sp;return;
}
function _BF_decode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$054 = 0, $$055 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 $$054 = $0;$$055 = $1;
 while(1) {
  $3 = ((($$055)) + 1|0);
  $4 = HEAP8[$$055>>0]|0;
  $5 = $4&255;
  $6 = (($5) + -32)|0;
  $7 = ($6>>>0)>(95);
  if ($7) {
   $$0 = -1;
   break;
  }
  $8 = (167799 + ($6)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = ($9&255)>(63);
  if ($11) {
   $$0 = -1;
   break;
  }
  $12 = ((($$055)) + 2|0);
  $13 = HEAP8[$3>>0]|0;
  $14 = $13&255;
  $15 = (($14) + -32)|0;
  $16 = ($15>>>0)>(95);
  if ($16) {
   $$0 = -1;
   break;
  }
  $17 = (167799 + ($15)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = ($18&255)>(63);
  if ($20) {
   $$0 = -1;
   break;
  }
  $21 = $10 << 2;
  $22 = $19 >>> 4;
  $23 = $22 & 3;
  $24 = $23 | $21;
  $25 = $24&255;
  $26 = ((($$054)) + 1|0);
  HEAP8[$$054>>0] = $25;
  $27 = ($26>>>0)<($2>>>0);
  if (!($27)) {
   $$0 = 0;
   break;
  }
  $28 = ((($$055)) + 3|0);
  $29 = HEAP8[$12>>0]|0;
  $30 = $29&255;
  $31 = (($30) + -32)|0;
  $32 = ($31>>>0)>(95);
  if ($32) {
   $$0 = -1;
   break;
  }
  $33 = (167799 + ($31)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = ($34&255)>(63);
  if ($36) {
   $$0 = -1;
   break;
  }
  $37 = $19 << 4;
  $38 = $35 >>> 2;
  $39 = $38 & 15;
  $40 = $39 | $37;
  $41 = $40&255;
  $42 = ((($$054)) + 2|0);
  HEAP8[$26>>0] = $41;
  $43 = ($42>>>0)<($2>>>0);
  if (!($43)) {
   $$0 = 0;
   break;
  }
  $44 = ((($$055)) + 4|0);
  $45 = HEAP8[$28>>0]|0;
  $46 = $45&255;
  $47 = (($46) + -32)|0;
  $48 = ($47>>>0)>(95);
  if ($48) {
   $$0 = -1;
   break;
  }
  $49 = (167799 + ($47)|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = ($50&255)>(63);
  if ($51) {
   $$0 = -1;
   break;
  }
  $52 = $50&255;
  $53 = $35 << 6;
  $54 = $53 | $52;
  $55 = $54&255;
  $56 = ((($$054)) + 3|0);
  HEAP8[$42>>0] = $55;
  $57 = ($56>>>0)<($2>>>0);
  if ($57) {
   $$054 = $56;$$055 = $44;
  } else {
   $$0 = 0;
   break;
  }
 }
 return ($$0|0);
}
function _BF_swap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$07 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;$$07 = $1;
 while(1) {
  $2 = HEAP32[$$0>>2]|0;
  $3 = (_llvm_bswap_i32(($2|0))|0);
  $4 = ((($$0)) + 4|0);
  HEAP32[$$0>>2] = $3;
  $5 = (($$07) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  } else {
   $$0 = $4;$$07 = $5;
  }
 }
 return;
}
function _BF_encrypt($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$074 = 0, $$075 = 0, $$076 = 0, $$080 = 0, $$17778 = 0, $$179 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 68|0);
 $$074 = $3;$$075 = $1;$$076 = $2;
 while(1) {
  $6 = HEAP32[$0>>2]|0;
  $7 = $6 ^ $$075;
  $$080 = 0;$$17778 = $$076;$$179 = $7;
  while(1) {
   $15 = $$179 & 255;
   $16 = $$179 >>> 8;
   $17 = $16 & 255;
   $18 = $$179 >>> 16;
   $19 = $18 & 255;
   $20 = $$179 >>> 24;
   $21 = (((($0)) + 3144|0) + ($15<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (((($0)) + 2120|0) + ($17<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (((($0)) + 1096|0) + ($19<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (((($0)) + 72|0) + ($20<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + ($26))|0;
   $30 = $29 ^ $24;
   $31 = $$080 | 1;
   $32 = (($0) + ($31<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 ^ $$17778;
   $35 = (($30) + ($22))|0;
   $10 = $34 ^ $35;
   $36 = $10 & 255;
   $37 = $10 >>> 8;
   $38 = $37 & 255;
   $39 = $10 >>> 16;
   $40 = $39 & 255;
   $41 = $10 >>> 24;
   $42 = (((($0)) + 3144|0) + ($36<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (((($0)) + 2120|0) + ($38<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (((($0)) + 1096|0) + ($40<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (((($0)) + 72|0) + ($41<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + ($47))|0;
   $51 = $50 ^ $45;
   $52 = (($31) + 1)|0;
   $53 = (($0) + ($52<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 ^ $$179;
   $56 = (($51) + ($43))|0;
   $13 = $55 ^ $56;
   $57 = (($$080) + 2)|0;
   $58 = ($$080|0)<(14);
   if ($58) {
    $$080 = $57;$$17778 = $10;$$179 = $13;
   } else {
    break;
   }
  }
  $8 = HEAP32[$5>>2]|0;
  $9 = $8 ^ $10;
  $11 = ((($$074)) + 4|0);
  HEAP32[$$074>>2] = $9;
  $12 = ((($$074)) + 8|0);
  HEAP32[$11>>2] = $13;
  $14 = ($12>>>0)<($4>>>0);
  if ($14) {
   $$074 = $12;$$075 = $9;$$076 = $13;
  } else {
   break;
  }
 }
 return ($9|0);
}
function _BF_encode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$039$add = 0, $$039$idx = 0, $$039$ptr = 0, $$add = 0, $$add1 = 0, $$ptr = 0, $$ptr2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;$$039$idx = 0;
 while(1) {
  $$039$ptr = (($1) + ($$039$idx)|0);
  $2 = HEAP8[$$039$ptr>>0]|0;
  $3 = $2&255;
  $4 = $3 >>> 2;
  $5 = (167895 + ($4)|0);
  $6 = HEAP8[$5>>0]|0;
  HEAP8[$$0>>0] = $6;
  $7 = $3 << 4;
  $8 = $7 & 48;
  $9 = ((($$0)) + 1|0);
  $$039$add = (($$039$idx) + 1)|0;
  $$ptr = (($1) + ($$039$add)|0);
  $10 = HEAP8[$$ptr>>0]|0;
  $11 = $10&255;
  $12 = $11 >>> 4;
  $13 = $12 | $8;
  $14 = (167895 + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = ((($$0)) + 2|0);
  HEAP8[$9>>0] = $15;
  $17 = $11 << 2;
  $18 = $17 & 60;
  $19 = ($$039$idx|0)==(21);
  if ($19) {
   label = 4;
   break;
  }
  $$add = (($$039$idx) + 2)|0;
  $$ptr2 = (($1) + ($$add)|0);
  $$add1 = (($$039$idx) + 3)|0;
  $20 = HEAP8[$$ptr2>>0]|0;
  $21 = $20&255;
  $22 = $21 >>> 6;
  $23 = $22 | $18;
  $24 = (167895 + ($23)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = ((($$0)) + 3|0);
  HEAP8[$16>>0] = $25;
  $27 = $21 & 63;
  $28 = (167895 + ($27)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = ((($$0)) + 4|0);
  HEAP8[$26>>0] = $29;
  $31 = ($$039$idx|0)<(20);
  if ($31) {
   $$0 = $30;$$039$idx = $$add1;
  } else {
   break;
  }
 }
 if ((label|0) == 4) {
  $32 = (167895 + ($18)|0);
  $33 = HEAP8[$32>>0]|0;
  HEAP8[$16>>0] = $33;
 }
 return;
}
function _md5crypt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$068 = 0, $$069$lcssa = 0, $$06977 = 0, $$071 = 0, $$1$lcssa = 0, $$174 = 0, $$273 = 0, $$372 = 0, $$470 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond79 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp;
 $4 = sp + 88|0;
 $5 = (_strnlen($0,30001)|0);
 $6 = ($5>>>0)>(30000);
 if ($6) {
  $$068 = 0;
 } else {
  $7 = (_strncmp($1,168028,3)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = ((($1)) + 3|0);
   $$06977 = 0;
   L4: while(1) {
    $10 = (($9) + ($$06977)|0);
    $11 = HEAP8[$10>>0]|0;
    switch ($11<<24>>24) {
    case 36: case 0:  {
     $$069$lcssa = $$06977;
     break L4;
     break;
    }
    default: {
    }
    }
    $12 = (($$06977) + 1)|0;
    $13 = ($12>>>0)<(8);
    if ($13) {
     $$06977 = $12;
    } else {
     $$069$lcssa = $12;
     break;
    }
   }
   _md5_init($3);
   _md5_update($3,$0,$5);
   _md5_update($3,$9,$$069$lcssa);
   _md5_update($3,$0,$5);
   _md5_sum($3,$4);
   _md5_init($3);
   _md5_update($3,$0,$5);
   $14 = (($$069$lcssa) + 3)|0;
   _md5_update($3,$1,$14);
   $15 = ($5>>>0)>(16);
   if ($15) {
    $16 = (($5) + -17)|0;
    $17 = $16 & -16;
    $$174 = $5;
    while(1) {
     _md5_update($3,$4,16);
     $18 = (($$174) + -16)|0;
     $19 = ($18>>>0)>(16);
     if ($19) {
      $$174 = $18;
     } else {
      break;
     }
    }
    $20 = (($5) + -16)|0;
    $21 = (($20) - ($17))|0;
    $$1$lcssa = $21;
   } else {
    $$1$lcssa = $5;
   }
   _md5_update($3,$4,$$1$lcssa);
   HEAP8[$4>>0] = 0;
   $22 = ($5|0)==(0);
   if (!($22)) {
    $$273 = $5;
    while(1) {
     $23 = $$273 & 1;
     $24 = ($23|0)==(0);
     if ($24) {
      _md5_update($3,$0,1);
     } else {
      _md5_update($3,$4,1);
     }
     $25 = $$273 >>> 1;
     $26 = ($25|0)==(0);
     if ($26) {
      break;
     } else {
      $$273 = $25;
     }
    }
   }
   _md5_sum($3,$4);
   $$372 = 0;
   while(1) {
    _md5_init($3);
    $27 = $$372 & 1;
    $28 = ($27|0)!=(0);
    if ($28) {
     _md5_update($3,$0,$5);
    } else {
     _md5_update($3,$4,16);
    }
    $29 = (($$372>>>0) % 3)&-1;
    $30 = ($29|0)==(0);
    if (!($30)) {
     _md5_update($3,$9,$$069$lcssa);
    }
    $31 = (($$372>>>0) % 7)&-1;
    $32 = ($31|0)==(0);
    if (!($32)) {
     _md5_update($3,$0,$5);
    }
    if ($28) {
     _md5_update($3,$4,16);
    } else {
     _md5_update($3,$0,$5);
    }
    _md5_sum($3,$4);
    $33 = (($$372) + 1)|0;
    $exitcond79 = ($33|0)==(1000);
    if ($exitcond79) {
     break;
    } else {
     $$372 = $33;
    }
   }
   _memcpy(($2|0),($1|0),($14|0))|0;
   $34 = ((($2)) + 3|0);
   $35 = (($34) + ($$069$lcssa)|0);
   $36 = ((($35)) + 1|0);
   HEAP8[$35>>0] = 36;
   $$071 = $36;$$470 = 0;
   while(1) {
    $37 = (168032 + (($$470*3)|0)|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38&255;
    $40 = (($4) + ($39)|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41&255;
    $43 = $42 << 16;
    $44 = (((168032 + (($$470*3)|0)|0)) + 1|0);
    $45 = HEAP8[$44>>0]|0;
    $46 = $45&255;
    $47 = (($4) + ($46)|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48&255;
    $50 = $49 << 8;
    $51 = $50 | $43;
    $52 = (((168032 + (($$470*3)|0)|0)) + 2|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = (($4) + ($54)|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56&255;
    $58 = $51 | $57;
    $59 = (_to64($$071,$58,4)|0);
    $60 = (($$470) + 1)|0;
    $exitcond = ($60|0)==(5);
    if ($exitcond) {
     break;
    } else {
     $$071 = $59;$$470 = $60;
    }
   }
   $61 = ((($4)) + 11|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   $64 = (_to64($59,$63,2)|0);
   HEAP8[$64>>0] = 0;
   $$068 = $2;
  } else {
   $$068 = 0;
  }
 }
 STACKTOP = sp;return ($$068|0);
}
function _md5_init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 1732584193;
 $6 = ((($0)) + 12|0);
 HEAP32[$6>>2] = -271733879;
 $7 = ((($0)) + 16|0);
 HEAP32[$7>>2] = -1732584194;
 $8 = ((($0)) + 20|0);
 HEAP32[$8>>2] = 271733878;
 return;
}
function _md5_update($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$0$ph = 0, $$027$lcssa = 0, $$027$ph = 0, $$02728 = 0, $$029 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = $5 & 63;
 $10 = (_i64Add(($5|0),($8|0),($2|0),0)|0);
 $11 = tempRet0;
 $12 = $0;
 $13 = $12;
 HEAP32[$13>>2] = $10;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $11;
 $16 = ($9|0)==(0);
 do {
  if ($16) {
   $$0$ph = $2;$$027$ph = $1;
   label = 5;
  } else {
   $17 = (64 - ($9))|0;
   $18 = ($17>>>0)>($2>>>0);
   $19 = (((($0)) + 24|0) + ($9)|0);
   if ($18) {
    _memcpy(($19|0),($1|0),($2|0))|0;
    break;
   } else {
    $20 = ((($0)) + 24|0);
    _memcpy(($19|0),($1|0),($17|0))|0;
    $21 = (($2) - ($17))|0;
    $22 = (($1) + ($17)|0);
    _processblock($0,$20);
    $$0$ph = $21;$$027$ph = $22;
    label = 5;
    break;
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $23 = ($$0$ph>>>0)>(63);
  if ($23) {
   $24 = (($$0$ph) + -64)|0;
   $25 = $24 & -64;
   $26 = (($25) + 64)|0;
   $$02728 = $$027$ph;$$029 = $$0$ph;
   while(1) {
    _processblock($0,$$02728);
    $27 = (($$029) + -64)|0;
    $28 = ((($$02728)) + 64|0);
    $29 = ($27>>>0)>(63);
    if ($29) {
     $$02728 = $28;$$029 = $27;
    } else {
     break;
    }
   }
   $30 = (($24) - ($25))|0;
   $scevgep = (($$027$ph) + ($26)|0);
   $$0$lcssa = $30;$$027$lcssa = $scevgep;
  } else {
   $$0$lcssa = $$0$ph;$$027$lcssa = $$027$ph;
  }
  $31 = ((($0)) + 24|0);
  _memcpy(($31|0),($$027$lcssa|0),($$0$lcssa|0))|0;
 }
 return;
}
function _md5_sum($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _pad($0);
 $$019 = 0;
 while(1) {
  $2 = (((($0)) + 8|0) + ($$019<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3&255;
  $5 = $$019 << 2;
  $6 = (($1) + ($5)|0);
  HEAP8[$6>>0] = $4;
  $7 = HEAP32[$2>>2]|0;
  $8 = $7 >>> 8;
  $9 = $8&255;
  $10 = $5 | 1;
  $11 = (($1) + ($10)|0);
  HEAP8[$11>>0] = $9;
  $12 = HEAP32[$2>>2]|0;
  $13 = $12 >>> 16;
  $14 = $13&255;
  $15 = $5 | 2;
  $16 = (($1) + ($15)|0);
  HEAP8[$16>>0] = $14;
  $17 = HEAP32[$2>>2]|0;
  $18 = $17 >>> 24;
  $19 = $18&255;
  $20 = $5 | 3;
  $21 = (($1) + ($20)|0);
  HEAP8[$21>>0] = $19;
  $22 = (($$019) + 1)|0;
  $exitcond = ($22|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$019 = $22;
  }
 }
 return;
}
function _to64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$047 = 0, $$05$lcssa = 0, $$056 = 0, $$08 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)>(0);
 if ($3) {
  $$047 = $1;$$056 = $0;$$08 = $2;
  while(1) {
   $4 = (($$08) + -1)|0;
   $5 = $$047 & 63;
   $6 = (168047 + ($5)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ((($$056)) + 1|0);
   HEAP8[$$056>>0] = $7;
   $9 = $$047 >>> 6;
   $10 = ($$08|0)>(1);
   if ($10) {
    $$047 = $9;$$056 = $8;$$08 = $4;
   } else {
    $$05$lcssa = $8;
    break;
   }
  }
 } else {
  $$05$lcssa = $0;
 }
 return ($$05$lcssa|0);
}
function _pad($0) {
 $0 = $0|0;
 var $$0 = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $3 & 63;
 $8 = ((($0)) + 24|0);
 $9 = (($7) + 1)|0;
 $10 = (((($0)) + 24|0) + ($7)|0);
 HEAP8[$10>>0] = -128;
 $11 = ($7>>>0)>(55);
 if ($11) {
  $12 = $7 ^ 63;
  $13 = (((($0)) + 24|0) + ($9)|0);
  _memset(($13|0),0,($12|0))|0;
  _processblock($0,$8);
  $$0 = 0;$$pre$phiZ2D = $8;
 } else {
  $$0 = $9;$$pre$phiZ2D = $8;
 }
 $14 = (((($0)) + 24|0) + ($$0)|0);
 $15 = (56 - ($$0))|0;
 _memset(($14|0),0,($15|0))|0;
 $16 = $0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (_bitshift64Shl(($18|0),($21|0),3)|0);
 $23 = tempRet0;
 $24 = $0;
 $25 = $24;
 HEAP32[$25>>2] = $22;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $28 = $22&255;
 $29 = ((($0)) + 80|0);
 HEAP8[$29>>0] = $28;
 $30 = (_bitshift64Lshr(($18|0),($21|0),5)|0);
 $31 = tempRet0;
 $32 = $30&255;
 $33 = ((($0)) + 81|0);
 HEAP8[$33>>0] = $32;
 $34 = (_bitshift64Lshr(($18|0),($21|0),13)|0);
 $35 = tempRet0;
 $36 = $34&255;
 $37 = ((($0)) + 82|0);
 HEAP8[$37>>0] = $36;
 $38 = (_bitshift64Lshr(($18|0),($21|0),21)|0);
 $39 = tempRet0;
 $40 = $38&255;
 $41 = ((($0)) + 83|0);
 HEAP8[$41>>0] = $40;
 $42 = (_bitshift64Lshr(($18|0),($21|0),29)|0);
 $43 = tempRet0;
 $44 = $42&255;
 $45 = ((($0)) + 84|0);
 HEAP8[$45>>0] = $44;
 $46 = (_bitshift64Lshr(($18|0),($21|0),37)|0);
 $47 = tempRet0;
 $48 = $46&255;
 $49 = ((($0)) + 85|0);
 HEAP8[$49>>0] = $48;
 $50 = (_bitshift64Lshr(($18|0),($21|0),45)|0);
 $51 = tempRet0;
 $52 = $50&255;
 $53 = ((($0)) + 86|0);
 HEAP8[$53>>0] = $52;
 $54 = (_bitshift64Lshr(($18|0),($21|0),53)|0);
 $55 = tempRet0;
 $56 = $54&255;
 $57 = ((($0)) + 87|0);
 HEAP8[$57>>0] = $56;
 _processblock($0,$$pre$phiZ2D);
 return;
}
function _processblock($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0190241 = 0, $$0194240 = 0, $$0198239 = 0, $$0202243 = 0, $$0242 = 0, $$1191230 = 0, $$1195229 = 0, $$1199228 = 0, $$1203238 = 0, $$1231 = 0, $$2192219 = 0, $$2196218 = 0, $$2200217 = 0, $$2204227 = 0, $$2220 = 0, $$3193211 = 0, $$3197210 = 0, $$3201209 = 0, $$3205216 = 0, $$3212 = 0;
 var $$4208 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = sp;
 $$0202243 = 0;
 while(1) {
  $3 = $$0202243 << 2;
  $4 = (($1) + ($3)|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5&255;
  $7 = (($2) + ($$0202243<<2)|0);
  $8 = $3 | 1;
  $9 = (($1) + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $11 << 8;
  $13 = $12 | $6;
  $14 = $3 | 2;
  $15 = (($1) + ($14)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $17 << 16;
  $19 = $18 | $13;
  $20 = $3 | 3;
  $21 = (($1) + ($20)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $23 << 24;
  $25 = $24 | $19;
  HEAP32[$7>>2] = $25;
  $26 = (($$0202243) + 1)|0;
  $exitcond = ($26|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $$0202243 = $26;
  }
 }
 $27 = ((($0)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($0)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($0)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($0)) + 20|0);
 $34 = HEAP32[$33>>2]|0;
 $$0190241 = $32;$$0194240 = $30;$$0198239 = $28;$$0242 = $34;$$1203238 = 0;
 while(1) {
  $35 = $$0242 ^ $$0190241;
  $36 = $35 & $$0194240;
  $37 = $36 ^ $$0242;
  $38 = (($2) + ($$1203238<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (19348 + ($$1203238<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($37) + ($$0198239))|0;
  $43 = (($42) + ($39))|0;
  $44 = (($43) + ($41))|0;
  $45 = (_rol($44,7)|0);
  $46 = (($45) + ($$0194240))|0;
  $47 = $$1203238 | 1;
  $48 = $$0190241 ^ $$0194240;
  $49 = $46 & $48;
  $50 = $49 ^ $$0190241;
  $51 = (($2) + ($47<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (19348 + ($47<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($52) + ($$0242))|0;
  $56 = (($55) + ($54))|0;
  $57 = (($56) + ($50))|0;
  $58 = (_rol($57,12)|0);
  $59 = (($58) + ($46))|0;
  $60 = $$1203238 | 2;
  $61 = $46 ^ $$0194240;
  $62 = $59 & $61;
  $63 = $62 ^ $$0194240;
  $64 = (($2) + ($60<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (19348 + ($60<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($65) + ($$0190241))|0;
  $69 = (($68) + ($67))|0;
  $70 = (($69) + ($63))|0;
  $71 = (_rol($70,17)|0);
  $72 = (($71) + ($59))|0;
  $73 = $$1203238 | 3;
  $74 = $59 ^ $46;
  $75 = $72 & $74;
  $76 = $75 ^ $46;
  $77 = (($2) + ($73<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (19348 + ($73<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($78) + ($$0194240))|0;
  $82 = (($81) + ($80))|0;
  $83 = (($82) + ($76))|0;
  $84 = (_rol($83,22)|0);
  $85 = (($84) + ($72))|0;
  $86 = (($$1203238) + 4)|0;
  $87 = ($86>>>0)<(16);
  if ($87) {
   $$0190241 = $72;$$0194240 = $85;$$0198239 = $46;$$0242 = $59;$$1203238 = $86;
  } else {
   $$1191230 = $72;$$1195229 = $85;$$1199228 = $46;$$1231 = $59;$$2204227 = 16;
   break;
  }
 }
 while(1) {
  $88 = $$1191230 ^ $$1195229;
  $89 = $$1231 & $88;
  $90 = $89 ^ $$1191230;
  $91 = ($$2204227*5)|0;
  $92 = $91 & 12;
  $93 = $92 | 1;
  $94 = (($2) + ($93<<2)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (19348 + ($$2204227<<2)|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (($90) + ($$1199228))|0;
  $99 = (($98) + ($95))|0;
  $100 = (($99) + ($97))|0;
  $101 = (_rol($100,5)|0);
  $102 = (($101) + ($$1195229))|0;
  $103 = $$2204227 | 1;
  $104 = $102 ^ $$1195229;
  $105 = $104 & $$1191230;
  $106 = $105 ^ $$1195229;
  $107 = ($103*5)|0;
  $108 = (($107) + 1)|0;
  $109 = $108 & 15;
  $110 = (($2) + ($109<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (19348 + ($103<<2)|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($111) + ($$1231))|0;
  $115 = (($114) + ($113))|0;
  $116 = (($115) + ($106))|0;
  $117 = (_rol($116,9)|0);
  $118 = (($117) + ($102))|0;
  $119 = $$2204227 | 2;
  $120 = $118 ^ $102;
  $121 = $120 & $$1195229;
  $122 = $121 ^ $102;
  $123 = ($119*5)|0;
  $124 = $123 & 14;
  $125 = $124 | 1;
  $126 = (($2) + ($125<<2)|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = (19348 + ($119<<2)|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (($127) + ($$1191230))|0;
  $131 = (($130) + ($129))|0;
  $132 = (($131) + ($122))|0;
  $133 = (_rol($132,14)|0);
  $134 = (($133) + ($118))|0;
  $135 = $$2204227 | 3;
  $136 = $134 ^ $118;
  $137 = $136 & $102;
  $138 = $137 ^ $118;
  $139 = ($135*5)|0;
  $140 = (($139) + 1)|0;
  $141 = $140 & 15;
  $142 = (($2) + ($141<<2)|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (19348 + ($135<<2)|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = (($143) + ($$1195229))|0;
  $147 = (($146) + ($145))|0;
  $148 = (($147) + ($138))|0;
  $149 = (_rol($148,20)|0);
  $150 = (($149) + ($134))|0;
  $151 = (($$2204227) + 4)|0;
  $152 = ($151>>>0)<(32);
  if ($152) {
   $$1191230 = $134;$$1195229 = $150;$$1199228 = $102;$$1231 = $118;$$2204227 = $151;
  } else {
   $$2192219 = $134;$$2196218 = $150;$$2200217 = $102;$$2220 = $118;$$3205216 = 32;
   break;
  }
 }
 while(1) {
  $153 = $$2192219 ^ $$2196218;
  $154 = $153 ^ $$2220;
  $155 = ($$3205216*3)|0;
  $156 = (($155) + 5)|0;
  $157 = $156 & 13;
  $158 = (($2) + ($157<<2)|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = (19348 + ($$3205216<<2)|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = (($154) + ($$2200217))|0;
  $163 = (($162) + ($159))|0;
  $164 = (($163) + ($161))|0;
  $165 = (_rol($164,4)|0);
  $166 = (($165) + ($$2196218))|0;
  $167 = $$3205216 | 1;
  $168 = $153 ^ $166;
  $169 = ($167*3)|0;
  $170 = (($169) + 5)|0;
  $171 = $170 & 15;
  $172 = (($2) + ($171<<2)|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = (19348 + ($167<<2)|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = (($173) + ($$2220))|0;
  $177 = (($176) + ($175))|0;
  $178 = (($177) + ($168))|0;
  $179 = (_rol($178,11)|0);
  $180 = (($179) + ($166))|0;
  $181 = $$3205216 | 2;
  $182 = $166 ^ $$2196218;
  $183 = $182 ^ $180;
  $184 = ($181*3)|0;
  $185 = (($184) + 5)|0;
  $186 = $185 & 15;
  $187 = (($2) + ($186<<2)|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = (19348 + ($181<<2)|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = (($188) + ($$2192219))|0;
  $192 = (($191) + ($190))|0;
  $193 = (($192) + ($183))|0;
  $194 = (_rol($193,16)|0);
  $195 = (($194) + ($180))|0;
  $196 = $$3205216 | 3;
  $197 = $180 ^ $166;
  $198 = $197 ^ $195;
  $199 = ($196*3)|0;
  $200 = (($199) + 5)|0;
  $201 = $200 & 15;
  $202 = (($2) + ($201<<2)|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = (19348 + ($196<<2)|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = (($203) + ($$2196218))|0;
  $207 = (($206) + ($205))|0;
  $208 = (($207) + ($198))|0;
  $209 = (_rol($208,23)|0);
  $210 = (($209) + ($195))|0;
  $211 = (($$3205216) + 4)|0;
  $212 = ($211>>>0)<(48);
  if ($212) {
   $$2192219 = $195;$$2196218 = $210;$$2200217 = $166;$$2220 = $180;$$3205216 = $211;
  } else {
   $$3193211 = $195;$$3197210 = $210;$$3201209 = $166;$$3212 = $180;$$4208 = 48;
   break;
  }
 }
 while(1) {
  $213 = $$3212 ^ -1;
  $214 = $$3197210 | $213;
  $215 = $214 ^ $$3193211;
  $216 = ($$4208*7)|0;
  $217 = $216 & 12;
  $218 = (($2) + ($217<<2)|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = (19348 + ($$4208<<2)|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = (($215) + ($$3201209))|0;
  $223 = (($222) + ($219))|0;
  $224 = (($223) + ($221))|0;
  $225 = (_rol($224,6)|0);
  $226 = (($225) + ($$3197210))|0;
  $227 = $$4208 | 1;
  $228 = $$3193211 ^ -1;
  $229 = $226 | $228;
  $230 = $229 ^ $$3197210;
  $231 = ($227*7)|0;
  $232 = $231 & 15;
  $233 = (($2) + ($232<<2)|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = (19348 + ($227<<2)|0);
  $236 = HEAP32[$235>>2]|0;
  $237 = (($234) + ($$3212))|0;
  $238 = (($237) + ($236))|0;
  $239 = (($238) + ($230))|0;
  $240 = (_rol($239,10)|0);
  $241 = (($240) + ($226))|0;
  $242 = $$4208 | 2;
  $243 = $$3197210 ^ -1;
  $244 = $241 | $243;
  $245 = $244 ^ $226;
  $246 = ($242*7)|0;
  $247 = $246 & 14;
  $248 = (($2) + ($247<<2)|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = (19348 + ($242<<2)|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = (($249) + ($$3193211))|0;
  $253 = (($252) + ($251))|0;
  $254 = (($253) + ($245))|0;
  $255 = (_rol($254,15)|0);
  $256 = (($255) + ($241))|0;
  $257 = $$4208 | 3;
  $258 = $226 ^ -1;
  $259 = $256 | $258;
  $260 = $259 ^ $241;
  $261 = ($257*7)|0;
  $262 = $261 & 15;
  $263 = (($2) + ($262<<2)|0);
  $264 = HEAP32[$263>>2]|0;
  $265 = (19348 + ($257<<2)|0);
  $266 = HEAP32[$265>>2]|0;
  $267 = (($264) + ($$3197210))|0;
  $268 = (($267) + ($266))|0;
  $269 = (($268) + ($260))|0;
  $270 = (_rol($269,21)|0);
  $271 = (($270) + ($256))|0;
  $272 = (($$4208) + 4)|0;
  $273 = ($272>>>0)<(64);
  if ($273) {
   $$3193211 = $256;$$3197210 = $271;$$3201209 = $226;$$3212 = $241;$$4208 = $272;
  } else {
   break;
  }
 }
 $274 = (($28) + ($226))|0;
 HEAP32[$27>>2] = $274;
 $275 = (($30) + ($271))|0;
 HEAP32[$29>>2] = $275;
 $276 = (($32) + ($256))|0;
 HEAP32[$31>>2] = $276;
 $277 = (($34) + ($241))|0;
 HEAP32[$33>>2] = $277;
 STACKTOP = sp;return;
}
function _rol($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 << $1;
 $3 = (32 - ($1))|0;
 $4 = $0 >>> $3;
 $5 = $4 | $2;
 return ($5|0);
}
function _setkey($0) {
 $0 = $0|0;
 var $$01116 = 0, $$01215 = 0, $$014 = 0, $$113 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $scevgep = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$01116 = 0;$$01215 = $0;
 while(1) {
  $2 = (($1) + ($$01116)|0);
  HEAP8[$2>>0] = 0;
  $$014 = 7;$$113 = $$01215;$8 = 0;
  while(1) {
   $3 = HEAP8[$$113>>0]|0;
   $4 = $3 & 1;
   $5 = $4&255;
   $6 = $5 << $$014;
   $7 = $8 & 255;
   $9 = $6 | $7;
   $10 = $9&255;
   HEAP8[$2>>0] = $10;
   $11 = (($$014) + -1)|0;
   $12 = ((($$113)) + 1|0);
   $13 = ($$014|0)>(0);
   if ($13) {
    $$014 = $11;$$113 = $12;$8 = $9;
   } else {
    break;
   }
  }
  $scevgep = ((($$01215)) + 8|0);
  $14 = (($$01116) + 1)|0;
  $exitcond = ($14|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $$01116 = $14;$$01215 = $scevgep;
  }
 }
 ___des_setkey($1,185752);
 STACKTOP = sp;return;
}
function _encrypt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03143 = 0, $$03345 = 0, $$036 = 0, $$046 = 0, $$13238 = 0, $$13442 = 0, $$144 = 0, $$23540 = 0, $$241 = 0, $$339 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond48 = 0, $exitcond50 = 0, $scevgep = 0, $scevgep49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $2 = sp + 8|0;
 $3 = sp;
 $$03345 = 0;$$046 = $0;
 while(1) {
  $4 = (($3) + ($$03345<<2)|0);
  HEAP32[$4>>2] = 0;
  $$03143 = 31;$$144 = $$046;$10 = 0;
  while(1) {
   $5 = HEAP8[$$144>>0]|0;
   $6 = $5 & 1;
   $7 = $6&255;
   $8 = $7 << $$03143;
   $9 = $8 | $10;
   HEAP32[$4>>2] = $9;
   $11 = (($$03143) + -1)|0;
   $12 = ((($$144)) + 1|0);
   $13 = ($$03143|0)>(0);
   if ($13) {
    $$03143 = $11;$$144 = $12;$10 = $9;
   } else {
    break;
   }
  }
  $scevgep49 = ((($$046)) + 32|0);
  $14 = (($$03345) + 1)|0;
  $exitcond50 = ($14|0)==(2);
  if ($exitcond50) {
   break;
  } else {
   $$03345 = $14;$$046 = $scevgep49;
  }
 }
 $15 = ($1|0)==(0);
 if ($15) {
  $$036 = 185752;
 } else {
  $$13442 = 0;
  while(1) {
   $16 = (15 - ($$13442))|0;
   $17 = (185752 + ($16<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($2) + ($$13442<<2)|0);
   HEAP32[$19>>2] = $18;
   $20 = (185816 + ($16<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (((($2)) + 64|0) + ($$13442<<2)|0);
   HEAP32[$22>>2] = $21;
   $23 = (($$13442) + 1)|0;
   $exitcond48 = ($23|0)==(16);
   if ($exitcond48) {
    $$036 = $2;
    break;
   } else {
    $$13442 = $23;
   }
  }
 }
 $24 = HEAP32[$3>>2]|0;
 $25 = ((($3)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 ___do_des($24,$26,$3,$25,1,0,$$036);
 $$23540 = 0;$$241 = $0;
 while(1) {
  $27 = (($3) + ($$23540<<2)|0);
  $$13238 = 31;$$339 = $$241;
  while(1) {
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 >>> $$13238;
   $30 = $29 & 1;
   $31 = $30&255;
   $32 = ((($$339)) + 1|0);
   HEAP8[$$339>>0] = $31;
   $33 = (($$13238) + -1)|0;
   $34 = ($$13238|0)>(0);
   if ($34) {
    $$13238 = $33;$$339 = $32;
   } else {
    break;
   }
  }
  $scevgep = ((($$241)) + 32|0);
  $35 = (($$23540) + 1)|0;
  $exitcond = ($35|0)==(2);
  if ($exitcond) {
   break;
  } else {
   $$23540 = $35;$$241 = $scevgep;
  }
 }
 STACKTOP = sp;return;
}
function ___ctype_b_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (19604|0);
}
function ___ctype_get_mb_cur_max() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self()|0);
 $1 = ((($0)) + 188|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 $5 = $4 ? 4 : 1;
 return ($5|0);
}
function ___pthread_self() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___ctype_tolower_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (19608|0);
}
function ___ctype_toupper_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21148|0);
}
function _isalnum($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $isdigit = 0, $isdigittmp = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isalpha($0)|0);
 $2 = ($1|0)!=(0);
 $isdigittmp = (($0) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $narrow = $isdigit | $2;
 $3 = $narrow&1;
 return ($3|0);
}
function _isalpha($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 | 32;
 $2 = (($1) + -97)|0;
 $3 = ($2>>>0)<(26);
 $4 = $3&1;
 return ($4|0);
}
function ___isalnum_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isalnum($0)|0);
 return ($2|0);
}
function ___isalpha_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isalpha($0)|0);
 return ($2|0);
}
function _isascii($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(128);
 $2 = $1&1;
 return ($2|0);
}
function _isblank($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = ($0|0)==(9);
 $3 = $1 | $2;
 $4 = $3&1;
 return ($4|0);
}
function ___isblank_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isblank($0)|0);
 return ($2|0);
}
function _iscntrl($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(32);
 $2 = ($0|0)==(127);
 $3 = $1 | $2;
 $4 = $3&1;
 return ($4|0);
}
function ___iscntrl_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iscntrl($0)|0);
 return ($2|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function ___isdigit_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($0) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $2 = $isdigit&1;
 return ($2|0);
}
function _isgraph($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -33)|0;
 $2 = ($1>>>0)<(94);
 $3 = $2&1;
 return ($3|0);
}
function ___isgraph_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isgraph($0)|0);
 return ($2|0);
}
function ___islower_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_islower($0)|0);
 return ($2|0);
}
function _isprint($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -32)|0;
 $2 = ($1>>>0)<(95);
 $3 = $2&1;
 return ($3|0);
}
function ___isprint_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isprint($0)|0);
 return ($2|0);
}
function _ispunct($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isgraph($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $5 = 0;
 } else {
  $3 = (_isalnum($0)|0);
  $4 = ($3|0)==(0);
  $phitmp = $4&1;
  $5 = $phitmp;
 }
 return ($5|0);
}
function ___ispunct_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_ispunct($0)|0);
 return ($2|0);
}
function ___isspace_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isspace($0)|0);
 return ($2|0);
}
function ___isupper_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isupper($0)|0);
 return ($2|0);
}
function _iswalnum($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_iswdigit($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (_iswalpha($0)|0);
  $4 = ($3|0)!=(0);
  $phitmp = $4&1;
  $5 = $phitmp;
 } else {
  $5 = 1;
 }
 return ($5|0);
}
function _iswdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _iswalpha($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(131072);
 if ($1) {
  $2 = $0 >>> 8;
  $3 = (168112 + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = $5 << 5;
  $7 = $0 >>> 3;
  $8 = $7 & 31;
  $9 = $6 | $8;
  $10 = (168112 + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $0 & 7;
  $14 = $12 >>> $13;
  $15 = $14 & 1;
  $$0 = $15;
 } else {
  $16 = ($0>>>0)<(196606);
  $$ = $16&1;
  $$0 = $$;
 }
 return ($$0|0);
}
function ___iswalnum_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswalnum($0)|0);
 return ($2|0);
}
function ___iswalpha_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswalpha($0)|0);
 return ($2|0);
}
function _iswblank($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isblank($0)|0);
 return ($1|0);
}
function ___iswblank_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswblank($0)|0);
 return ($2|0);
}
function _iswcntrl($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $narrow = 0, $or$cond = 0, $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(32);
 $2 = (($0) + -127)|0;
 $3 = ($2>>>0)<(33);
 $or$cond = $1 | $3;
 $4 = $0 & -2;
 $5 = ($4|0)==(8232);
 $or$cond6 = $5 | $or$cond;
 $6 = (($0) + -65529)|0;
 $7 = ($6>>>0)<(3);
 $narrow = $7 | $or$cond6;
 $8 = $narrow&1;
 return ($8|0);
}
function ___iswcntrl_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswcntrl($0)|0);
 return ($2|0);
}
function _iswctype($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch ($1|0) {
  case 1:  {
   $2 = (_iswalnum($0)|0);
   $$0 = $2;
   break;
  }
  case 2:  {
   $3 = (_iswalpha($0)|0);
   $$0 = $3;
   break;
  }
  case 3:  {
   $4 = (_iswblank($0)|0);
   $$0 = $4;
   break;
  }
  case 4:  {
   $5 = (_iswcntrl($0)|0);
   $$0 = $5;
   break;
  }
  case 5:  {
   $6 = (_iswdigit($0)|0);
   $$0 = $6;
   break;
  }
  case 6:  {
   $7 = (_iswgraph($0)|0);
   $$0 = $7;
   break;
  }
  case 7:  {
   $8 = (_iswlower($0)|0);
   $$0 = $8;
   break;
  }
  case 8:  {
   $9 = (_iswprint($0)|0);
   $$0 = $9;
   break;
  }
  case 9:  {
   $10 = (_iswpunct($0)|0);
   $$0 = $10;
   break;
  }
  case 10:  {
   $11 = (_iswspace($0)|0);
   $$0 = $11;
   break;
  }
  case 11:  {
   $12 = (_iswupper($0)|0);
   $$0 = $12;
   break;
  }
  case 12:  {
   $13 = (_iswxdigit($0)|0);
   $$0 = $13;
   break;
  }
  default: {
   $$0 = 0;
  }
  }
 } while(0);
 return ($$0|0);
}
function _iswgraph($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_iswspace($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (_iswprint($0)|0);
  $4 = ($3|0)!=(0);
  $phitmp = $4&1;
  $5 = $phitmp;
 } else {
  $5 = 0;
 }
 return ($5|0);
}
function _iswlower($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_towupper($0)|0);
 $2 = ($1|0)!=($0|0);
 $3 = $2&1;
 return ($3|0);
}
function _iswprint($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$or$cond11 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(255);
 if ($1) {
  $2 = (($0) + 1)|0;
  $3 = $2 & 127;
  $4 = ($3>>>0)>(32);
  $5 = $4&1;
  $$0 = $5;
 } else {
  $6 = ($0>>>0)<(8232);
  $7 = (($0) + -8234)|0;
  $8 = ($7>>>0)<(47062);
  $or$cond = $6 | $8;
  $9 = (($0) + -57344)|0;
  $10 = ($9>>>0)<(8185);
  $or$cond9 = $10 | $or$cond;
  if ($or$cond9) {
   $$0 = 1;
  } else {
   $11 = (($0) + -65532)|0;
   $12 = ($11>>>0)<(1048580);
   $13 = $0 & 65534;
   $14 = ($13|0)!=(65534);
   $not$or$cond11 = $14 & $12;
   $$ = $not$or$cond11&1;
   return ($$|0);
  }
 }
 return ($$0|0);
}
function _iswpunct($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(131072);
 if ($1) {
  $2 = $0 >>> 8;
  $3 = (171088 + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = $5 << 5;
  $7 = $0 >>> 3;
  $8 = $7 & 31;
  $9 = $6 | $8;
  $10 = (171088 + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $0 & 7;
  $14 = $12 >>> $13;
  $15 = $14 & 1;
  $$0 = $15;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function _iswspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $4 = 0;
 } else {
  $2 = (_wcschr(22688,$0)|0);
  $3 = ($2|0)!=(0|0);
  $phitmp = $3&1;
  $4 = $phitmp;
 }
 return ($4|0);
}
function _iswupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_towlower($0)|0);
 $2 = ($1|0)!=($0|0);
 $3 = $2&1;
 return ($3|0);
}
function _iswxdigit($0) {
 $0 = $0|0;
 var $$phitmp = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $0 | 32;
 $4 = (($3) + -97)|0;
 $5 = ($4>>>0)<(6);
 $narrow = $2 | $5;
 $$phitmp = $narrow&1;
 return ($$phitmp|0);
}
function _towlower($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___towcase($0,1)|0);
 return ($1|0);
}
function ___towcase($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$06284 = 0, $$16383 = 0, $$2 = 0, $$neg75 = 0, $$neg77 = 0, $$neg78 = 0, $$not = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond65 = 0, $or$cond67 = 0, $or$cond69 = 0, $or$cond71 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 << 1;
 $3 = (($2) + -1)|0;
 $4 = (($1) + -1)|0;
 $5 = (_iswalpha($0)|0);
 $6 = ($5|0)==(0);
 $7 = (($0) + -1536)|0;
 $8 = ($7>>>0)<(2560);
 $or$cond65 = $8 | $6;
 $9 = (($0) + -11776)|0;
 $10 = ($9>>>0)<(30784);
 $or$cond67 = $10 | $or$cond65;
 $11 = (($0) + -43008)|0;
 $12 = ($11>>>0)<(22272);
 $or$cond69 = $12 | $or$cond67;
 L1: do {
  if ($or$cond69) {
   $$2 = $0;
  } else {
   $13 = ($1|0)!=(0);
   $14 = (($0) + -4256)|0;
   $15 = ($14>>>0)<(46);
   $or$cond71 = $13 & $15;
   if ($or$cond71) {
    $16 = ($0|0)>(4293);
    if ($16) {
     switch ($0|0) {
     case 4295: case 4301:  {
      break;
     }
     default: {
      $$2 = $0;
      break L1;
     }
     }
    }
    $17 = (($0) + 7264)|0;
    $$2 = $17;
    break;
   }
   $$not = $13 ^ 1;
   $18 = (($0) + -11520)|0;
   $19 = ($18>>>0)<(38);
   $or$cond = $19 & $$not;
   if ($or$cond) {
    $20 = (($0) + -7264)|0;
    $$2 = $20;
    break;
   } else {
    $$06284 = 0;
   }
   while(1) {
    $27 = (((26018 + ($$06284<<2)|0)) + 3|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = (26018 + ($$06284<<2)|0);
    $30 = HEAP16[$29>>1]|0;
    $31 = $30&65535;
    $32 = (((26018 + ($$06284<<2)|0)) + 2|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33 << 24 >> 24;
    $35 = $4 & $34;
    $$neg75 = (($0) - ($31))|0;
    $36 = (($$neg75) - ($35))|0;
    $37 = $28&255;
    $38 = ($36>>>0)<($37>>>0);
    $22 = (($$06284) + 1)|0;
    if ($38) {
     label = 11;
     break;
    }
    $21 = ($22|0)==(61);
    if ($21) {
     break;
    } else {
     $$06284 = $22;
    }
   }
   if ((label|0) == 11) {
    $39 = ($33<<24>>24)==(1);
    if ($39) {
     $40 = (($1) + ($0))|0;
     $41 = $$neg75 & 1;
     $42 = (($40) - ($41))|0;
     $$2 = $42;
     break;
    } else {
     $43 = Math_imul($3, $34)|0;
     $44 = (($43) + ($0))|0;
     $$2 = $44;
     break;
    }
   }
   $23 = (1 - ($1))|0;
   $24 = (25530 + ($23<<1)|0);
   $25 = HEAP16[$24>>1]|0;
   $26 = ($25<<16>>16)==(0);
   L20: do {
    if (!($26)) {
     $$16383 = 0;$46 = $25;
     while(1) {
      $45 = $46&65535;
      $47 = ($45|0)==($0|0);
      if ($47) {
       break;
      }
      $51 = (($$16383) + 1)|0;
      $52 = ((25530 + ($51<<2)|0) + ($23<<1)|0);
      $53 = HEAP16[$52>>1]|0;
      $54 = ($53<<16>>16)==(0);
      if ($54) {
       break L20;
      } else {
       $$16383 = $51;$46 = $53;
      }
     }
     $48 = ((25530 + ($$16383<<2)|0) + ($1<<1)|0);
     $49 = HEAP16[$48>>1]|0;
     $50 = $49&65535;
     $$2 = $50;
     break L1;
    }
   } while(0);
   $$neg77 = ($1*40)|0;
   $$neg78 = (($0) + -66600)|0;
   $55 = (($$neg78) + ($$neg77))|0;
   $56 = ($55>>>0)<(40);
   $57 = (($0) + -40)|0;
   $58 = ($1*80)|0;
   $59 = (($57) + ($58))|0;
   $$ = $56 ? $59 : $0;
   return ($$|0);
  }
 } while(0);
 return ($$2|0);
}
function _wcschr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$09 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (_wcslen($0)|0);
  $4 = (($0) + ($3<<2)|0);
  $$0 = $4;
 } else {
  $$09 = $0;
  while(1) {
   $5 = HEAP32[$$09>>2]|0;
   $6 = ($5|0)==(0);
   $7 = ($5|0)==($1|0);
   $or$cond = $6 | $7;
   $8 = ((($$09)) + 4|0);
   if ($or$cond) {
    break;
   } else {
    $$09 = $8;
   }
  }
  $9 = ($5|0)!=(0);
  $10 = $9 ? $$09 : 0;
  $$0 = $10;
 }
 return ($$0|0);
}
function _wcslen($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;
 while(1) {
  $1 = HEAP32[$$0>>2]|0;
  $2 = ($1|0)==(0);
  $3 = ((($$0)) + 4|0);
  if ($2) {
   break;
  } else {
   $$0 = $3;
  }
 }
 $4 = $$0;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 return ($7|0);
}
function _towupper($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___towcase($0,0)|0);
 return ($1|0);
}
function _wctype($0) {
 $0 = $0|0;
 var $$01113 = 0, $$012 = 0, $$014 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $$01113 = 1;$$014 = 174256;$3 = 97;
 while(1) {
  $2 = ($1<<24>>24)==($3<<24>>24);
  if ($2) {
   $4 = (_strcmp($0,$$014)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    $$012 = $$01113;
    break;
   }
  }
  $6 = (($$01113) + 1)|0;
  $7 = ((($$014)) + 6|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)==(0);
  if ($9) {
   $$012 = 0;
   break;
  } else {
   $$01113 = $6;$$014 = $7;$3 = $8;
  }
 }
 return ($$012|0);
}
function ___iswctype_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_iswctype($0,$1)|0);
 return ($3|0);
}
function ___wctype_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_wctype($0)|0);
 return ($2|0);
}
function ___iswdigit_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswdigit($0)|0);
 return ($2|0);
}
function ___iswgraph_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswgraph($0)|0);
 return ($2|0);
}
function ___iswlower_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswlower($0)|0);
 return ($2|0);
}
function ___iswprint_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswprint($0)|0);
 return ($2|0);
}
function ___iswpunct_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswpunct($0)|0);
 return ($2|0);
}
function ___iswspace_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswspace($0)|0);
 return ($2|0);
}
function ___iswupper_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswupper($0)|0);
 return ($2|0);
}
function ___iswxdigit_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswxdigit($0)|0);
 return ($2|0);
}
function _isxdigit($0) {
 $0 = $0|0;
 var $$phitmp = 0, $1 = 0, $2 = 0, $3 = 0, $isdigit = 0, $isdigittmp = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($0) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $1 = $0 | 32;
 $2 = (($1) + -97)|0;
 $3 = ($2>>>0)<(6);
 $narrow = $isdigit | $3;
 $$phitmp = $narrow&1;
 return ($$phitmp|0);
}
function ___isxdigit_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isxdigit($0)|0);
 return ($2|0);
}
function _toascii($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 & 127;
 return ($1|0);
}
function ___tolower_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_tolower($0)|0);
 return ($2|0);
}
function ___toupper_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_toupper($0)|0);
 return ($2|0);
}
function ___towupper_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_towupper($0)|0);
 return ($2|0);
}
function ___towlower_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_towlower($0)|0);
 return ($2|0);
}
function _wcswidth($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01216 = 0, $$01415 = 0, $$017 = 0, $$1 = 0, $$in = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$012$lcssa = 0;$$1 = 0;
  } else {
   $$01216 = 0;$$01415 = $0;$$017 = 0;$$in = $1;
   while(1) {
    $3 = (($$in) + -1)|0;
    $4 = HEAP32[$$01415>>2]|0;
    $5 = ($4|0)==(0);
    if ($5) {
     $$012$lcssa = $$01216;$$1 = $$017;
     break L1;
    }
    $6 = (_wcwidth($4)|0);
    $7 = ($6|0)>(-1);
    if (!($7)) {
     $$012$lcssa = $$01216;$$1 = $6;
     break L1;
    }
    $8 = (($6) + ($$01216))|0;
    $9 = ((($$01415)) + 4|0);
    $10 = ($3|0)==(0);
    if ($10) {
     $$012$lcssa = $8;$$1 = $6;
     break;
    } else {
     $$01216 = $8;$$01415 = $9;$$017 = $6;$$in = $3;
    }
   }
  }
 } while(0);
 $11 = ($$1|0)<(0);
 $12 = $11 ? $$1 : $$012$lcssa;
 return ($12|0);
}
function _wcwidth($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$16 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$or$cond15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(255);
 do {
  if ($1) {
   $2 = (($0) + 1)|0;
   $3 = $2 & 127;
   $4 = ($3>>>0)>(32);
   $5 = ($0|0)!=(0);
   $6 = $5 << 31 >> 31;
   $7 = $4 ? 1 : $6;
   $$0 = $7;
  } else {
   $8 = $0 & -65538;
   $9 = ($8>>>0)<(65534);
   if ($9) {
    $10 = $0 >> 8;
    $11 = (174329 + ($10)|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12&255;
    $14 = $13 << 5;
    $15 = $0 >>> 3;
    $16 = $15 & 31;
    $17 = $14 | $16;
    $18 = (174329 + ($17)|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19&255;
    $21 = $0 & 7;
    $22 = 1 << $21;
    $23 = $22 & $20;
    $24 = ($23|0)==(0);
    if (!($24)) {
     $$0 = 0;
     break;
    }
    $25 = (176249 + ($10)|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = $26&255;
    $28 = $27 << 5;
    $29 = $28 | $16;
    $30 = (176249 + ($29)|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = $22 & $32;
    $34 = ($33|0)==(0);
    $$ = $34 ? 1 : 2;
    $$0 = $$;
    break;
   }
   $35 = $0 & 65534;
   $36 = ($35|0)==(65534);
   if ($36) {
    $$0 = -1;
   } else {
    $37 = $0 & -131072;
    $38 = ($37|0)==(131072);
    if ($38) {
     $$0 = 2;
    } else {
     $39 = (($0) + -917536)|0;
     $40 = ($39>>>0)>(94);
     $41 = ($0|0)>(917998);
     $not$or$cond15 = $41 & $40;
     $$16 = $not$or$cond15&1;
     return ($$16|0);
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _wctrans($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strcmp($0,177305)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = (1);
 } else {
  $3 = (_strcmp($0,177313)|0);
  $4 = ($3|0)==(0);
  $$ = $4 ? (2) : 0;
  $$0 = $$;
 }
 return ($$0|0);
}
function _towctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $magicptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $magicptr = $1;
 switch ($magicptr|0) {
 case 1:  {
  $2 = (_towupper($0)|0);
  $$0 = $2;
  break;
 }
 case 2:  {
  $3 = (_towlower($0)|0);
  $$0 = $3;
  break;
 }
 default: {
  $$0 = $0;
 }
 }
 return ($$0|0);
}
function ___wctrans_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_wctrans($0)|0);
 return ($2|0);
}
function ___towctrans_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_towctrans($0,$1)|0);
 return ($3|0);
}
function ___getdents($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall220(220,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _alphasort($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 11|0);
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 11|0);
 $6 = (_strcoll($3,$5)|0);
 return ($6|0);
}
function _strcoll($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (___pthread_self_213()|0);
 $2 = (___strcoll_l($0,$1,0)|0);
 return ($2|0);
}
function ___pthread_self_213() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strcoll_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strcmp($0,$1)|0);
 return ($3|0);
}
function _closedir($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_close($1)|0);
 _free($0);
 return ($2|0);
}
function _close($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (FUNCTION_TABLE_ii[7 & 63]($0)|0);
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = ($2|0)==(-4);
 $$ = $3 ? 0 : $2;
 $4 = (___syscall_ret($$)|0);
 STACKTOP = sp;return ($4|0);
}
function _dirfd($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _fdopendir($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $1 = sp + 4|0;
 $2 = (_fstat($0,$1)|0);
 $3 = ($2|0)<(0);
 do {
  if ($3) {
   $$0 = 0;
  } else {
   $4 = ((($1)) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5 & 61440;
   $7 = ($6|0)==(16384);
   if (!($7)) {
    $8 = (___errno_location()|0);
    HEAP32[$8>>2] = 20;
    $$0 = 0;
    break;
   }
   $9 = (_calloc(1,2072)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $$0 = 0;
   } else {
    HEAP32[$vararg_buffer>>2] = 1;
    (_fcntl($0,2,$vararg_buffer)|0);
    HEAP32[$9>>2] = $0;
    $$0 = $9;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fstat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 24|0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall197(197,($vararg_buffer|0))|0);
 $5 = ($4|0)==(-9);
 if ($5) {
  HEAP32[$vararg_buffer2>>2] = $0;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 1;
  $6 = (___syscall221(221,($vararg_buffer2|0))|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 3;
  } else {
   ___procfdname($2,$0);
   $9 = $2;
   HEAP32[$vararg_buffer6>>2] = $9;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $3;
   $10 = (___syscall195(195,($vararg_buffer6|0))|0);
   $11 = (___syscall_ret($10)|0);
   $$0 = $11;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $8 = (___syscall_ret($4)|0);
  $$0 = $8;
 }
 STACKTOP = sp;return ($$0|0);
}
function _fcntl($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0, $vararg_buffer23 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer36 = 0, $vararg_buffer41 = 0, $vararg_buffer46 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0;
 var $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr40 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr49 = 0, $vararg_ptr50 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer46 = sp + 152|0;
 $vararg_buffer41 = sp + 136|0;
 $vararg_buffer36 = sp + 120|0;
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 176|0;
 $3 = sp + 168|0;
 HEAP32[$2>>2] = $varargs;
 $arglist_current = HEAP32[$2>>2]|0;
 $4 = $arglist_current;
 $5 = ((0) + 4|0);
 $expanded2 = $5;
 $expanded = (($expanded2) - 1)|0;
 $6 = (($4) + ($expanded))|0;
 $7 = ((0) + 4|0);
 $expanded6 = $7;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $8 = $6 & $expanded4;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $arglist_next = ((($9)) + 4|0);
 HEAP32[$2>>2] = $arglist_next;
 $11 = ($1|0)==(4);
 $12 = $10 | 32768;
 $$ = $11 ? $12 : $10;
 switch ($1|0) {
 case 14:  {
  HEAP32[$vararg_buffer>>2] = $0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 14;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $$;
  $13 = (___syscall221(221,($vararg_buffer|0))|0);
  $14 = (___syscall_ret($13)|0);
  $$2 = $14;
  break;
 }
 case 9:  {
  $15 = $3;
  HEAP32[$vararg_buffer3>>2] = $0;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 16;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = $15;
  $16 = (___syscall221(221,($vararg_buffer3|0))|0);
  switch ($16|0) {
  case -22:  {
   HEAP32[$vararg_buffer8>>2] = $0;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = 9;
   $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
   HEAP32[$vararg_ptr12>>2] = $$;
   $17 = (___syscall221(221,($vararg_buffer8|0))|0);
   $$0 = $17;
   break;
  }
  case 0:  {
   $19 = HEAP32[$3>>2]|0;
   $20 = ($19|0)==(2);
   $21 = ((($3)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (0 - ($22))|0;
   $24 = $20 ? $23 : $22;
   $$0 = $24;
   break;
  }
  default: {
   $18 = (___syscall_ret($16)|0);
   $$0 = $18;
  }
  }
  $$2 = $$0;
  break;
 }
 case 1030:  {
  HEAP32[$vararg_buffer13>>2] = $0;
  $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
  HEAP32[$vararg_ptr16>>2] = 1030;
  $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
  HEAP32[$vararg_ptr17>>2] = $$;
  $25 = (___syscall221(221,($vararg_buffer13|0))|0);
  $26 = ($25|0)==(-22);
  do {
   if ($26) {
    HEAP32[$vararg_buffer23>>2] = $0;
    $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
    HEAP32[$vararg_ptr26>>2] = 1030;
    $vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
    HEAP32[$vararg_ptr27>>2] = 0;
    $28 = (___syscall221(221,($vararg_buffer23|0))|0);
    $29 = ($28|0)==(-22);
    if ($29) {
     HEAP32[$vararg_buffer31>>2] = $0;
     $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
     HEAP32[$vararg_ptr34>>2] = 0;
     $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
     HEAP32[$vararg_ptr35>>2] = $$;
     $31 = (___syscall221(221,($vararg_buffer31|0))|0);
     $32 = ($31|0)>(-1);
     if (!($32)) {
      $$sink = $31;
      break;
     }
     HEAP32[$vararg_buffer36>>2] = $31;
     $vararg_ptr39 = ((($vararg_buffer36)) + 4|0);
     HEAP32[$vararg_ptr39>>2] = 2;
     $vararg_ptr40 = ((($vararg_buffer36)) + 8|0);
     HEAP32[$vararg_ptr40>>2] = 1;
     (___syscall221(221,($vararg_buffer36|0))|0);
     $$sink = $31;
     break;
    } else {
     $30 = ($28|0)>(-1);
     if (!($30)) {
      $$sink = -22;
      break;
     }
     HEAP32[$vararg_buffer28>>2] = $28;
     (___syscall6(6,($vararg_buffer28|0))|0);
     $$sink = -22;
     break;
    }
   } else {
    $27 = ($25|0)>(-1);
    if ($27) {
     HEAP32[$vararg_buffer18>>2] = $25;
     $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
     HEAP32[$vararg_ptr21>>2] = 2;
     $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
     HEAP32[$vararg_ptr22>>2] = 1;
     (___syscall221(221,($vararg_buffer18|0))|0);
     $$sink = $25;
    } else {
     $$sink = $25;
    }
   }
  } while(0);
  $33 = (___syscall_ret($$sink)|0);
  $$2 = $33;
  break;
 }
 case 15: case 16: case 12: case 13:  {
  HEAP32[$vararg_buffer41>>2] = $0;
  $vararg_ptr44 = ((($vararg_buffer41)) + 4|0);
  HEAP32[$vararg_ptr44>>2] = $1;
  $vararg_ptr45 = ((($vararg_buffer41)) + 8|0);
  HEAP32[$vararg_ptr45>>2] = $$;
  $34 = (___syscall221(221,($vararg_buffer41|0))|0);
  $35 = (___syscall_ret($34)|0);
  $$2 = $35;
  break;
 }
 default: {
  HEAP32[$vararg_buffer46>>2] = $0;
  $vararg_ptr49 = ((($vararg_buffer46)) + 4|0);
  HEAP32[$vararg_ptr49>>2] = $1;
  $vararg_ptr50 = ((($vararg_buffer46)) + 8|0);
  HEAP32[$vararg_ptr50>>2] = $$;
  $36 = (___syscall221(221,($vararg_buffer46|0))|0);
  $37 = (___syscall_ret($36)|0);
  $$2 = $37;
 }
 }
 STACKTOP = sp;return ($$2|0);
}
function ___procfdname($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02324 = 0, $$027 = 0, $$126 = 0, $$225 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$0; src=177321; stop=dest+15|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $2 = ($1|0)==(0);
 if ($2) {
  $scevgep = ((($0)) + 14|0);
  HEAP8[$scevgep>>0] = 48;
  $3 = ((($0)) + 15|0);
  HEAP8[$3>>0] = 0;
 } else {
  $$027 = $1;$$126 = 14;
  while(1) {
   $4 = (($$027>>>0) / 10)&-1;
   $5 = (($$126) + 1)|0;
   $6 = ($$027>>>0)<(10);
   if ($6) {
    break;
   } else {
    $$027 = $4;$$126 = $5;
   }
  }
  $7 = (($0) + ($5)|0);
  HEAP8[$7>>0] = 0;
  $$02324 = $1;$$225 = $5;
  while(1) {
   $8 = (($$02324>>>0) % 10)&-1;
   $9 = $8 | 48;
   $10 = $9&255;
   $11 = (($$225) + -1)|0;
   $12 = (($0) + ($11)|0);
   HEAP8[$12>>0] = $10;
   $13 = (($$02324>>>0) / 10)&-1;
   $14 = ($$02324>>>0)<(10);
   if ($14) {
    break;
   } else {
    $$02324 = $13;$$225 = $11;
   }
  }
 }
 return;
}
function _opendir($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = (_open($0,589824,$vararg_buffer)|0);
 $2 = ($1|0)<(0);
 do {
  if ($2) {
   $$0 = 0;
  } else {
   $3 = (_calloc(1,2072)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    HEAP32[$vararg_buffer1>>2] = $1;
    (___syscall6(6,($vararg_buffer1|0))|0);
    $$0 = 0;
    break;
   } else {
    HEAP32[$3>>2] = $1;
    $$0 = $3;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _open($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0;
 var $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $or$cond14 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 32|0;
 $3 = $1 & 4194368;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
 } else {
  HEAP32[$2>>2] = $varargs;
  $arglist_current = HEAP32[$2>>2]|0;
  $5 = $arglist_current;
  $6 = ((0) + 4|0);
  $expanded2 = $6;
  $expanded = (($expanded2) - 1)|0;
  $7 = (($5) + ($expanded))|0;
  $8 = ((0) + 4|0);
  $expanded6 = $8;
  $expanded5 = (($expanded6) - 1)|0;
  $expanded4 = $expanded5 ^ -1;
  $9 = $7 & $expanded4;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $arglist_next = ((($10)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $$0 = $11;
 }
 $12 = $0;
 $13 = $1 | 32768;
 HEAP32[$vararg_buffer>>2] = $12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $$0;
 $14 = (___syscall5(5,($vararg_buffer|0))|0);
 $15 = ($14|0)<(0);
 $16 = $1 & 524288;
 $17 = ($16|0)==(0);
 $or$cond14 = $17 | $15;
 if (!($or$cond14)) {
  HEAP32[$vararg_buffer3>>2] = $14;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 2;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 1;
  (___syscall221(221,($vararg_buffer3|0))|0);
 }
 $18 = (___syscall_ret($14)|0);
 STACKTOP = sp;return ($18|0);
}
function _readdir($0) {
 $0 = $0|0;
 var $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)<($4|0);
 L1: do {
  if ($5) {
   $14 = $2;
   label = 6;
  } else {
   $6 = HEAP32[$0>>2]|0;
   $7 = ((($0)) + 24|0);
   $8 = $7;
   HEAP32[$vararg_buffer>>2] = $6;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $8;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 2048;
   $9 = (___syscall220(220,($vararg_buffer|0))|0);
   $10 = ($9|0)<(1);
   if (!($10)) {
    HEAP32[$3>>2] = $9;
    HEAP32[$1>>2] = 0;
    $14 = 0;
    label = 6;
    break;
   }
   switch ($9|0) {
   case 0: case -2:  {
    $$1 = 0;
    break L1;
    break;
   }
   default: {
   }
   }
   $11 = (0 - ($9))|0;
   $12 = (___errno_location()|0);
   HEAP32[$12>>2] = $11;
   $$1 = 0;
  }
 } while(0);
 if ((label|0) == 6) {
  $13 = (((($0)) + 24|0) + ($14)|0);
  $15 = ((($13)) + 8|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = (($14) + ($17))|0;
  HEAP32[$1>>2] = $18;
  $19 = ((($13)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$1 = $13;
 }
 STACKTOP = sp;return ($$1|0);
}
function _readdir_r($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$017 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 16|0);
 ___lock(($5|0));
 $6 = (___errno_location()|0);
 HEAP32[$6>>2] = 0;
 $7 = (_readdir($0)|0);
 $8 = (___errno_location()|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = (___errno_location()|0);
  HEAP32[$11>>2] = $4;
  $12 = ($7|0)==(0|0);
  if ($12) {
   $$017 = 0;
  } else {
   $13 = ((($7)) + 8|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = $14&65535;
   _memcpy(($1|0),($7|0),($15|0))|0;
   $$017 = $1;
  }
  ___unlock(($5|0));
  HEAP32[$2>>2] = $$017;
  $$0 = 0;
 } else {
  ___unlock(($5|0));
  $$0 = $9;
 }
 return ($$0|0);
}
function _rewinddir($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 ___lock(($1|0));
 $2 = HEAP32[$0>>2]|0;
 (_lseek($2,0,0)|0);
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = 0;
 ___unlock(($1|0));
 return;
}
function _lseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = $3;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $4;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $5 = (___syscall140(140,($vararg_buffer|0))|0);
 $6 = (___syscall_ret($5)|0);
 $7 = ($6|0)!=(0);
 $8 = HEAP32[$3>>2]|0;
 $9 = $7 ? -1 : $8;
 STACKTOP = sp;return ($9|0);
}
function _scandir($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$050$ph = 0, $$051$ph = 0, $$053$ph = 0, $$1 = 0, $$154 = 0, $$2 = 0, $$in = 0, $$ph = 0, $$ph56 = 0, $$ph57 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_opendir($0)|0);
 $5 = (___errno_location()|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==(0|0);
 do {
  if ($7) {
   $$0 = -1;
  } else {
   $8 = ($2|0)==(0|0);
   $$050$ph = 0;$$051$ph = 0;$$053$ph = 0;$$ph = 0;$$ph56 = 0;$$ph57 = 0;
   L3: while(1) {
    while(1) {
     $9 = (___errno_location()|0);
     HEAP32[$9>>2] = 0;
     $10 = (_readdir($4)|0);
     $11 = ($10|0)==(0|0);
     if ($11) {
      $$2 = $$053$ph;$39 = $$ph56;$42 = $$ph;
      break L3;
     }
     if ($8) {
      break;
     }
     $12 = (FUNCTION_TABLE_ii[$2 & 63]($10)|0);
     $13 = ($12|0)==(0);
     if (!($13)) {
      break;
     }
    }
    $14 = ($$051$ph>>>0)<($$050$ph>>>0);
    if ($14) {
     $$1 = $$050$ph;$$154 = $$053$ph;$43 = $$ph;$44 = $$ph56;$45 = $$ph57;
    } else {
     $15 = $$050$ph << 1;
     $16 = $15 | 1;
     $17 = ($16>>>0)>(1073741823);
     if ($17) {
      $$2 = $$053$ph;$39 = $$ph56;$42 = $$ph;
      break;
     }
     $18 = $16 << 2;
     $19 = (_realloc($$ph57,$18)|0);
     $20 = ($19|0)==(0|0);
     if ($20) {
      $$2 = $$053$ph;$39 = $$ph56;$42 = $$ph;
      break;
     }
     $$1 = $16;$$154 = $19;$43 = $19;$44 = $19;$45 = $19;
    }
    $21 = ((($10)) + 8|0);
    $22 = HEAP16[$21>>1]|0;
    $23 = $22&65535;
    $24 = (_malloc($23)|0);
    $25 = (($$154) + ($$051$ph<<2)|0);
    HEAP32[$25>>2] = $24;
    $26 = ($24|0)==(0|0);
    if ($26) {
     $$2 = $$154;$39 = $44;$42 = $43;
     break;
    }
    $27 = (($$051$ph) + 1)|0;
    $28 = HEAP16[$21>>1]|0;
    $29 = $28&65535;
    _memcpy(($24|0),($10|0),($29|0))|0;
    $$050$ph = $$1;$$051$ph = $27;$$053$ph = $$154;$$ph = $43;$$ph56 = $44;$$ph57 = $45;
   }
   (_closedir($4)|0);
   $30 = (___errno_location()|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $40 = (___errno_location()|0);
    HEAP32[$40>>2] = $6;
    $41 = ($3|0)==(0|0);
    if (!($41)) {
     _qsort($42,$$051$ph,4,$3);
    }
    HEAP32[$1>>2] = $42;
    $$0 = $$051$ph;
    break;
   } else {
    $33 = ($$2|0)==(0|0);
    $34 = ($$051$ph|0)==(0);
    $or$cond = $33 | $34;
    if (!($or$cond)) {
     $$in = $$051$ph;
     while(1) {
      $35 = (($$in) + -1)|0;
      $36 = (($$2) + ($35<<2)|0);
      $37 = HEAP32[$36>>2]|0;
      _free($37);
      $38 = ($35|0)==(0);
      if ($38) {
       break;
      } else {
       $$in = $35;
      }
     }
    }
    _free($39);
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _qsort($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$067$lcssa = 0, $$06772 = 0, $$068$lcssa = 0, $$06871 = 0, $$1 = 0, $$169 = 0, $$2 = 0, $$pre$pre = 0, $$pre76 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $15$phi = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $4 = sp + 8|0;
 $5 = sp;
 $6 = Math_imul($2, $1)|0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = 1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = ($6|0)==(0);
 L1: do {
  if (!($11)) {
   $12 = (0 - ($2))|0;
   $13 = ((($4)) + 4|0);
   HEAP32[$13>>2] = $2;
   HEAP32[$4>>2] = $2;
   $$0 = 2;$15 = $2;$17 = $2;
   while(1) {
    $14 = (($15) + ($2))|0;
    $16 = (($14) + ($17))|0;
    $18 = (($4) + ($$0<<2)|0);
    HEAP32[$18>>2] = $16;
    $19 = ($16>>>0)<($6>>>0);
    $20 = (($$0) + 1)|0;
    if ($19) {
     $15$phi = $17;$$0 = $20;$17 = $16;$15 = $15$phi;
    } else {
     break;
    }
   }
   $21 = (($0) + ($6)|0);
   $22 = (($21) + ($12)|0);
   $23 = ($22>>>0)>($0>>>0);
   if ($23) {
    $24 = $22;
    $$06772 = 1;$$06871 = $0;$26 = 1;
    while(1) {
     $25 = $26 & 3;
     $27 = ($25|0)==(3);
     do {
      if ($27) {
       _sift($$06871,$2,$3,$$06772,$4);
       _shr($5,2);
       $28 = (($$06772) + 2)|0;
       $$1 = $28;
      } else {
       $29 = (($$06772) + -1)|0;
       $30 = (($4) + ($29<<2)|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = $$06871;
       $33 = (($24) - ($32))|0;
       $34 = ($31>>>0)<($33>>>0);
       if ($34) {
        _sift($$06871,$2,$3,$$06772,$4);
       } else {
        _trinkle($$06871,$2,$3,$5,$$06772,0,$4);
       }
       $35 = ($$06772|0)==(1);
       if ($35) {
        _shl($5,1);
        $$1 = 0;
        break;
       } else {
        _shl($5,$29);
        $$1 = 1;
        break;
       }
      }
     } while(0);
     $36 = HEAP32[$5>>2]|0;
     $37 = $36 | 1;
     HEAP32[$5>>2] = $37;
     $38 = (($$06871) + ($2)|0);
     $39 = ($38>>>0)<($22>>>0);
     if ($39) {
      $$06772 = $$1;$$06871 = $38;$26 = $37;
     } else {
      $$067$lcssa = $$1;$$068$lcssa = $38;$61 = $37;
      break;
     }
    }
   } else {
    $$067$lcssa = 1;$$068$lcssa = $0;$61 = 1;
   }
   _trinkle($$068$lcssa,$2,$3,$5,$$067$lcssa,0,$4);
   $40 = ((($5)) + 4|0);
   $$169 = $$068$lcssa;$$2 = $$067$lcssa;$43 = $61;
   while(1) {
    $41 = ($$2|0)==(1);
    $42 = ($43|0)==(1);
    $or$cond = $41 & $42;
    if ($or$cond) {
     $44 = HEAP32[$40>>2]|0;
     $45 = ($44|0)==(0);
     if ($45) {
      break L1;
     }
    } else {
     $46 = ($$2|0)<(2);
     if (!($46)) {
      _shl($5,2);
      $49 = (($$2) + -2)|0;
      $50 = HEAP32[$5>>2]|0;
      $51 = $50 ^ 7;
      HEAP32[$5>>2] = $51;
      _shr($5,1);
      $52 = (($4) + ($49<<2)|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (0 - ($53))|0;
      $55 = (($$169) + ($54)|0);
      $56 = (($55) + ($12)|0);
      $57 = (($$2) + -1)|0;
      _trinkle($56,$2,$3,$5,$57,1,$4);
      _shl($5,1);
      $58 = HEAP32[$5>>2]|0;
      $59 = $58 | 1;
      HEAP32[$5>>2] = $59;
      $60 = (($$169) + ($12)|0);
      _trinkle($60,$2,$3,$5,$49,1,$4);
      $$169 = $60;$$2 = $49;$43 = $59;
      continue;
     }
    }
    $47 = (_pntz($5)|0);
    _shr($5,$47);
    $48 = (($47) + ($$2))|0;
    $$pre$pre = HEAP32[$5>>2]|0;
    $$pre76 = (($$169) + ($12)|0);
    $$169 = $$pre76;$$2 = $48;$43 = $$pre$pre;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sift($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$029$be = 0, $$02932 = 0, $$030$be = 0, $$03031 = 0, $$033 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $5 = sp;
 HEAP32[$5>>2] = $0;
 $6 = ($3|0)>(1);
 L1: do {
  if ($6) {
   $7 = (0 - ($1))|0;
   $$02932 = $0;$$03031 = $3;$$033 = 1;$14 = $0;
   while(1) {
    $8 = (($$02932) + ($7)|0);
    $9 = (($$03031) + -2)|0;
    $10 = (($4) + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (0 - ($11))|0;
    $13 = (($8) + ($12)|0);
    $15 = (FUNCTION_TABLE_iii[$2 & 31]($14,$13)|0);
    $16 = ($15|0)>(-1);
    if ($16) {
     $17 = (FUNCTION_TABLE_iii[$2 & 31]($14,$8)|0);
     $18 = ($17|0)>(-1);
     if ($18) {
      $$0$lcssa = $$033;
      break L1;
     }
    }
    $19 = (FUNCTION_TABLE_iii[$2 & 31]($13,$8)|0);
    $20 = ($19|0)>(-1);
    $21 = (($$033) + 1)|0;
    $22 = (($5) + ($$033<<2)|0);
    if ($20) {
     HEAP32[$22>>2] = $13;
     $23 = (($$03031) + -1)|0;
     $$029$be = $13;$$030$be = $23;
    } else {
     HEAP32[$22>>2] = $8;
     $$029$be = $8;$$030$be = $9;
    }
    $24 = ($$030$be|0)>(1);
    if (!($24)) {
     $$0$lcssa = $21;
     break L1;
    }
    $$pre = HEAP32[$5>>2]|0;
    $$02932 = $$029$be;$$03031 = $$030$be;$$033 = $21;$14 = $$pre;
   }
  } else {
   $$0$lcssa = 1;
  }
 } while(0);
 _cycle($1,$5,$$0$lcssa);
 STACKTOP = sp;return;
}
function _shr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$3>>2]|0;
  HEAP32[$0>>2] = $5;
  HEAP32[$3>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$0>>2]|0;
  $$pre11 = HEAP32[$3>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 >>> $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 << $8;
 $11 = $9 | $6;
 HEAP32[$0>>2] = $11;
 $12 = $10 >>> $$0;
 HEAP32[$3>>2] = $12;
 return;
}
function _trinkle($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$lcssa = 0, $$045$lcssa = 0, $$04551 = 0, $$0455780 = 0, $$046$lcssa = 0, $$04653 = 0, $$0465681 = 0, $$047$lcssa = 0, $$0475582 = 0, $$049 = 0, $$05879 = 0, $$05879$phi = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $7 = sp + 232|0;
 $8 = sp;
 $9 = HEAP32[$3>>2]|0;
 HEAP32[$7>>2] = $9;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($7)) + 4|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$8>>2] = $0;
 $13 = ($9|0)!=(1);
 $14 = ($11|0)!=(0);
 $15 = $13 | $14;
 L1: do {
  if ($15) {
   $16 = (0 - ($1))|0;
   $17 = (($6) + ($4<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (0 - ($18))|0;
   $20 = (($0) + ($19)|0);
   $21 = (FUNCTION_TABLE_iii[$2 & 31]($20,$0)|0);
   $22 = ($21|0)<(1);
   if ($22) {
    $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
    label = 9;
   } else {
    $phitmp = ($5|0)==(0);
    $$0455780 = 1;$$0465681 = $4;$$0475582 = $phitmp;$$05879 = $0;$28 = $20;
    while(1) {
     $23 = ($$0465681|0)>(1);
     $or$cond = $$0475582 & $23;
     if ($or$cond) {
      $24 = (($$05879) + ($16)|0);
      $25 = (($$0465681) + -2)|0;
      $26 = (($6) + ($25<<2)|0);
      $27 = HEAP32[$26>>2]|0;
      $29 = (FUNCTION_TABLE_iii[$2 & 31]($24,$28)|0);
      $30 = ($29|0)>(-1);
      if ($30) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
      $31 = (0 - ($27))|0;
      $32 = (($24) + ($31)|0);
      $33 = (FUNCTION_TABLE_iii[$2 & 31]($32,$28)|0);
      $34 = ($33|0)>(-1);
      if ($34) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
     }
     $35 = (($$0455780) + 1)|0;
     $36 = (($8) + ($$0455780<<2)|0);
     HEAP32[$36>>2] = $28;
     $37 = (_pntz($7)|0);
     _shr($7,$37);
     $38 = (($37) + ($$0465681))|0;
     $39 = HEAP32[$7>>2]|0;
     $40 = ($39|0)!=(1);
     $41 = HEAP32[$12>>2]|0;
     $42 = ($41|0)!=(0);
     $43 = $40 | $42;
     if (!($43)) {
      $$04551 = $35;$$04653 = $38;$$049 = $28;
      label = 10;
      break L1;
     }
     $$pre = HEAP32[$8>>2]|0;
     $44 = (($6) + ($38<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (0 - ($45))|0;
     $47 = (($28) + ($46)|0);
     $48 = (FUNCTION_TABLE_iii[$2 & 31]($47,$$pre)|0);
     $49 = ($48|0)<(1);
     if ($49) {
      $$0$lcssa = $28;$$045$lcssa = $35;$$046$lcssa = $38;$$047$lcssa = 0;
      label = 9;
      break;
     } else {
      $$05879$phi = $28;$$0455780 = $35;$$0465681 = $38;$$0475582 = 1;$28 = $47;$$05879 = $$05879$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  $50 = ($$047$lcssa|0)==(0);
  if ($50) {
   $$04551 = $$045$lcssa;$$04653 = $$046$lcssa;$$049 = $$0$lcssa;
   label = 10;
  }
 }
 if ((label|0) == 10) {
  _cycle($1,$8,$$04551);
  _sift($$049,$1,$2,$$04653,$6);
 }
 STACKTOP = sp;return;
}
function _shl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$0>>2]|0;
  HEAP32[$3>>2] = $5;
  HEAP32[$0>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $$pre11 = HEAP32[$0>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 << $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 >>> $8;
 $11 = $9 | $6;
 HEAP32[$3>>2] = $11;
 $12 = $10 << $$0;
 HEAP32[$0>>2] = $12;
 return;
}
function _pntz($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = (_a_ctz_l_732($2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_a_ctz_l_732($6)|0);
  $8 = (($7) + 32)|0;
  $9 = ($7|0)==(0);
  $$ = $9 ? 0 : $8;
  return ($$|0);
 } else {
  return ($3|0);
 }
 return (0)|0;
}
function _a_ctz_l_732($0) {
 $0 = $0|0;
 var $$068 = 0, $$07 = 0, $$09 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $$07 = 32;
 } else {
  $2 = $0 & 1;
  $3 = ($2|0)==(0);
  if ($3) {
   $$068 = $0;$$09 = 0;
   while(1) {
    $4 = (($$09) + 1)|0;
    $5 = $$068 >>> 1;
    $6 = $5 & 1;
    $7 = ($6|0)==(0);
    if ($7) {
     $$068 = $5;$$09 = $4;
    } else {
     $$07 = $4;
     break;
    }
   }
  } else {
   $$07 = 0;
  }
 }
 return ($$07|0);
}
function _cycle($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02527 = 0, $$026 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $3 = sp;
 $4 = ($2|0)<(2);
 L1: do {
  if (!($4)) {
   $5 = (($1) + ($2<<2)|0);
   HEAP32[$5>>2] = $3;
   $6 = ($0|0)==(0);
   if (!($6)) {
    $$02527 = $0;$10 = $3;
    while(1) {
     $7 = ($$02527>>>0)<(256);
     $8 = $7 ? $$02527 : 256;
     $9 = HEAP32[$1>>2]|0;
     _memcpy(($10|0),($9|0),($8|0))|0;
     $$026 = 0;
     while(1) {
      $11 = (($1) + ($$026<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (($$026) + 1)|0;
      $14 = (($1) + ($13<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      _memcpy(($12|0),($15|0),($8|0))|0;
      $16 = HEAP32[$11>>2]|0;
      $17 = (($16) + ($8)|0);
      HEAP32[$11>>2] = $17;
      $exitcond = ($13|0)==($2|0);
      if ($exitcond) {
       break;
      } else {
       $$026 = $13;
      }
     }
     $18 = (($$02527) - ($8))|0;
     $19 = ($18|0)==(0);
     if ($19) {
      break L1;
     }
     $$pre = HEAP32[$5>>2]|0;
     $$02527 = $18;$10 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _seekdir($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 ___lock(($2|0));
 $3 = HEAP32[$0>>2]|0;
 $4 = (_lseek($3,$1,0)|0);
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($0)) + 12|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 8|0);
 HEAP32[$7>>2] = 0;
 ___unlock(($2|0));
 return;
}
function _telldir($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _versionsort($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 11|0);
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 11|0);
 $6 = (_strverscmp($3,$5)|0);
 return ($6|0);
}
function _strverscmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$053$ = 0, $$053$lcssa = 0, $$05387 = 0, $$05683 = 0, $$057$lcssa = 0, $$05786 = 0, $$060$lcssa = 0, $$06085 = 0, $$2 = 0, $$255$ph = 0, $$259$ph = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi104Z2D = 0, $$pre$phiZ2D = 0, $$pre103 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit62 = 0, $isdigit64 = 0;
 var $isdigit6480 = 0, $isdigit66 = 0, $isdigit66$lcssa = 0, $isdigit6682 = 0, $isdigit6684 = 0, $isdigit68 = 0, $isdigittmp = 0, $isdigittmp61 = 0, $isdigittmp63 = 0, $isdigittmp6379 = 0, $isdigittmp65 = 0, $isdigittmp6581 = 0, $isdigittmp67 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)==($3<<24>>24);
 L1: do {
  if ($4) {
   $5 = $2&255;
   $$05387 = 1;$$05786 = 0;$$06085 = 0;$7 = $2;$8 = $5;
   while(1) {
    $6 = ($7<<24>>24)==(0);
    if ($6) {
     $$2 = 0;
     break L1;
    }
    $isdigittmp67 = (($8) + -48)|0;
    $isdigit68 = ($isdigittmp67>>>0)<(10);
    $9 = ($7<<24>>24)==(48);
    $$053$ = $9 ? $$05387 : 0;
    $10 = (($$06085) + 1)|0;
    $$259$ph = $isdigit68 ? $$05786 : $10;
    $$255$ph = $isdigit68 ? $$053$ : 1;
    $11 = (($0) + ($10)|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12&255;
    $14 = (($1) + ($10)|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = ($12<<24>>24)==($15<<24>>24);
    if ($16) {
     $$05387 = $$255$ph;$$05786 = $$259$ph;$$06085 = $10;$7 = $12;$8 = $13;
    } else {
     break;
    }
   }
   $$phi$trans$insert = (($0) + ($$259$ph)|0);
   $$pre = HEAP8[$$phi$trans$insert>>0]|0;
   $$053$lcssa = $$255$ph;$$057$lcssa = $$259$ph;$$060$lcssa = $10;$18 = $$pre;$23 = $12;$25 = $15;
   label = 6;
  } else {
   $$053$lcssa = 1;$$057$lcssa = 0;$$060$lcssa = 0;$18 = $2;$23 = $2;$25 = $3;
   label = 6;
  }
 } while(0);
 L7: do {
  if ((label|0) == 6) {
   $17 = ($18<<24>>24)==(48);
   if ($17) {
    label = 12;
   } else {
    $19 = (($1) + ($$057$lcssa)|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = ($20<<24>>24)==(48);
    if ($21) {
     label = 12;
    } else {
     $22 = $23&255;
     $isdigittmp6379 = (($22) + -48)|0;
     $isdigit6480 = ($isdigittmp6379>>>0)<(10);
     $24 = $25&255;
     $isdigittmp6581 = (($24) + -48)|0;
     $isdigit6682 = ($isdigittmp6581>>>0)<(10);
     if ($isdigit6480) {
      $$05683 = $$060$lcssa;$isdigit6684 = $isdigit6682;
      while(1) {
       $27 = (($$05683) + 1)|0;
       if (!($isdigit6684)) {
        $$2 = 1;
        break L7;
       }
       $26 = (($0) + ($27)|0);
       $28 = HEAP8[$26>>0]|0;
       $29 = $28&255;
       $isdigittmp63 = (($29) + -48)|0;
       $isdigit64 = ($isdigittmp63>>>0)<(10);
       $30 = (($1) + ($27)|0);
       $31 = HEAP8[$30>>0]|0;
       $32 = $31&255;
       $isdigittmp65 = (($32) + -48)|0;
       $isdigit66 = ($isdigittmp65>>>0)<(10);
       if ($isdigit64) {
        $$05683 = $27;$isdigit6684 = $isdigit66;
       } else {
        $isdigit66$lcssa = $isdigit66;
        break;
       }
      }
     } else {
      $isdigit66$lcssa = $isdigit6682;
     }
     if ($isdigit66$lcssa) {
      $$2 = -1;
      break;
     } else {
      $$pre$phi104Z2D = $24;$$pre$phiZ2D = $22;
     }
    }
   }
   do {
    if ((label|0) == 12) {
     $33 = ($$053$lcssa|0)!=(0);
     $34 = ($$057$lcssa>>>0)<($$060$lcssa>>>0);
     $or$cond = $34 & $33;
     $35 = $23&255;
     if (!($or$cond)) {
      $$pre103 = $25&255;
      $$pre$phi104Z2D = $$pre103;$$pre$phiZ2D = $35;
      break;
     }
     $isdigittmp = (($35) + -48)|0;
     $isdigit = ($isdigittmp>>>0)<(10);
     if (!($isdigit)) {
      $36 = $25&255;
      $isdigittmp61 = (($36) + -48)|0;
      $isdigit62 = ($isdigittmp61>>>0)<(10);
      if (!($isdigit62)) {
       $$pre$phi104Z2D = $36;$$pre$phiZ2D = $35;
       break;
      }
     }
     $37 = (($23) + -48)<<24>>24;
     $38 = $37&255;
     $39 = (($25) + -48)<<24>>24;
     $40 = $39&255;
     $41 = (($38) - ($40))|0;
     $$2 = $41;
     break L7;
    }
   } while(0);
   $42 = (($$pre$phiZ2D) - ($$pre$phi104Z2D))|0;
   $$2 = $42;
  }
 } while(0);
 return ($$2|0);
}
function _creat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (_open($0,577,$vararg_buffer)|0);
 STACKTOP = sp;return ($2|0);
}
function _openat($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0;
 var $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = $2 & 4194368;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 0;
 } else {
  HEAP32[$3>>2] = $varargs;
  $arglist_current = HEAP32[$3>>2]|0;
  $6 = $arglist_current;
  $7 = ((0) + 4|0);
  $expanded2 = $7;
  $expanded = (($expanded2) - 1)|0;
  $8 = (($6) + ($expanded))|0;
  $9 = ((0) + 4|0);
  $expanded6 = $9;
  $expanded5 = (($expanded6) - 1)|0;
  $expanded4 = $expanded5 ^ -1;
  $10 = $8 & $expanded4;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $arglist_next = ((($11)) + 4|0);
  HEAP32[$3>>2] = $arglist_next;
  $$0 = $12;
 }
 $13 = $1;
 $14 = $2 | 32768;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $14;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $$0;
 $15 = (___syscall295(295,($vararg_buffer|0))|0);
 $16 = (___syscall_ret($15)|0);
 STACKTOP = sp;return ($16|0);
}
function _posix_fadvise($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $1 >> 31;
 $5 = $2 >> 31;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $4;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $5;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $3;
 $6 = (___syscall272(272,($vararg_buffer|0))|0);
 $7 = (0 - ($6))|0;
 STACKTOP = sp;return ($7|0);
}
function _posix_fallocate($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $1 >> 31;
 $4 = $2 >> 31;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $4;
 $5 = (___syscall324(324,($vararg_buffer|0))|0);
 $6 = (0 - ($5))|0;
 STACKTOP = sp;return ($6|0);
}
function ___flt_rounds() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fegetround()|0);
 $1 = $0 >>> 10;
 $2 = $0 << 22;
 $3 = $1 | $2;
 switch ($3|0) {
 case 3:  {
  $$0 = 0;
  break;
 }
 case 0:  {
  $$0 = 1;
  break;
 }
 case 2:  {
  $$0 = 2;
  break;
 }
 case 1:  {
  $$0 = 3;
  break;
 }
 default: {
  $$0 = -1;
 }
 }
 return ($$0|0);
}
function _fegetround() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _fegetexceptflag($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_fetestexcept($1)|0);
 $3 = $2&65535;
 HEAP16[$0>>1] = $3;
 return 0;
}
function _fetestexcept($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _feholdexcept($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _fegetenv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _feclearexcept($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _feraiseexcept($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___fesetround($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _fesetenv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _fesetexceptflag($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _fesetround($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 & -3073;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (___fesetround($0)|0);
  $$0 = $3;
 } else {
  $$0 = -1;
 }
 return ($$0|0);
}
function _feupdateenv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $$old8 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0105$ph = -149;$$0106$ph = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 default: {
  $$0114 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($0)) + 4|0);
   $4 = ((($0)) + 100|0);
   while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = HEAP32[$4>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = ((($5)) + 1|0);
     HEAP32[$3>>2] = $8;
     $9 = HEAP8[$5>>0]|0;
     $10 = $9&255;
     $12 = $10;
    } else {
     $11 = (___shgetc($0)|0);
     $12 = $11;
    }
    $13 = (_isspace($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break;
    }
   }
   L13: do {
    switch ($12|0) {
    case 43: case 45:  {
     $15 = ($12|0)==(45);
     $16 = $15&1;
     $17 = $16 << 1;
     $18 = (1 - ($17))|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = ($19>>>0)<($20>>>0);
     if ($21) {
      $22 = ((($19)) + 1|0);
      HEAP32[$3>>2] = $22;
      $23 = HEAP8[$19>>0]|0;
      $24 = $23&255;
      $$0 = $24;$$0113 = $18;
      break L13;
     } else {
      $25 = (___shgetc($0)|0);
      $$0 = $25;$$0113 = $18;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $12;$$0113 = 1;
    }
    }
   } while(0);
   $$0107127 = 0;$$1128 = $$0;
   while(1) {
    $26 = $$1128 | 32;
    $27 = (177336 + ($$0107127)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($26|0)==($29|0);
    if (!($30)) {
     $$0107$lcssa = $$0107127;$$1$lcssa = $$1128;
     break;
    }
    $31 = ($$0107127>>>0)<(7);
    do {
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = HEAP32[$4>>2]|0;
      $34 = ($32>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($32)) + 1|0);
       HEAP32[$3>>2] = $35;
       $36 = HEAP8[$32>>0]|0;
       $37 = $36&255;
       $$2 = $37;
       break;
      } else {
       $38 = (___shgetc($0)|0);
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1128;
     }
    } while(0);
    $39 = (($$0107127) + 1)|0;
    $40 = ($39>>>0)<(8);
    if ($40) {
     $$0107127 = $39;$$1128 = $$2;
    } else {
     $$0107$lcssa = $39;$$1$lcssa = $$2;
     break;
    }
   }
   L29: do {
    switch ($$0107$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $41 = ($$0107$lcssa>>>0)>(3);
     $42 = ($2|0)!=(0);
     $or$cond5 = $42 & $41;
     if ($or$cond5) {
      $43 = ($$0107$lcssa|0)==(8);
      if ($43) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $56 = ($$0107$lcssa|0)==(0);
     L34: do {
      if ($56) {
       $$2109125 = 0;$$3126 = $$1$lcssa;
       while(1) {
        $57 = $$3126 | 32;
        $58 = (177345 + ($$2109125)|0);
        $59 = HEAP8[$58>>0]|0;
        $60 = $59 << 24 >> 24;
        $61 = ($57|0)==($60|0);
        if (!($61)) {
         $$3110 = $$2109125;$$5 = $$3126;
         break L34;
        }
        $62 = ($$2109125>>>0)<(2);
        do {
         if ($62) {
          $63 = HEAP32[$3>>2]|0;
          $64 = HEAP32[$4>>2]|0;
          $65 = ($63>>>0)<($64>>>0);
          if ($65) {
           $66 = ((($63)) + 1|0);
           HEAP32[$3>>2] = $66;
           $67 = HEAP8[$63>>0]|0;
           $68 = $67&255;
           $$4 = $68;
           break;
          } else {
           $69 = (___shgetc($0)|0);
           $$4 = $69;
           break;
          }
         } else {
          $$4 = $$3126;
         }
        } while(0);
        $70 = (($$2109125) + 1)|0;
        $71 = ($70>>>0)<(3);
        if ($71) {
         $$2109125 = $70;$$3126 = $$4;
        } else {
         $$3110 = $70;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3110 = $$0107$lcssa;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3110|0) {
     case 3:  {
      $72 = HEAP32[$3>>2]|0;
      $73 = HEAP32[$4>>2]|0;
      $74 = ($72>>>0)<($73>>>0);
      if ($74) {
       $75 = ((($72)) + 1|0);
       HEAP32[$3>>2] = $75;
       $76 = HEAP8[$72>>0]|0;
       $77 = $76&255;
       $80 = $77;
      } else {
       $78 = (___shgetc($0)|0);
       $80 = $78;
      }
      $79 = ($80|0)==(40);
      if ($79) {
       $$4111 = 1;
      } else {
       $81 = HEAP32[$4>>2]|0;
       $82 = ($81|0)==(0|0);
       if ($82) {
        $$0114 = nan;
        break L4;
       }
       $83 = HEAP32[$3>>2]|0;
       $84 = ((($83)) + -1|0);
       HEAP32[$3>>2] = $84;
       $$0114 = nan;
       break L4;
      }
      while(1) {
       $85 = HEAP32[$3>>2]|0;
       $86 = HEAP32[$4>>2]|0;
       $87 = ($85>>>0)<($86>>>0);
       if ($87) {
        $88 = ((($85)) + 1|0);
        HEAP32[$3>>2] = $88;
        $89 = HEAP8[$85>>0]|0;
        $90 = $89&255;
        $93 = $90;
       } else {
        $91 = (___shgetc($0)|0);
        $93 = $91;
       }
       $92 = (($93) + -48)|0;
       $94 = ($92>>>0)<(10);
       $95 = (($93) + -65)|0;
       $96 = ($95>>>0)<(26);
       $or$cond = $94 | $96;
       if (!($or$cond)) {
        $97 = (($93) + -97)|0;
        $98 = ($97>>>0)<(26);
        $99 = ($93|0)==(95);
        $or$cond7 = $99 | $98;
        if (!($or$cond7)) {
         break;
        }
       }
       $111 = (($$4111) + 1)|0;
       $$4111 = $111;
      }
      $100 = ($93|0)==(41);
      if ($100) {
       $$0114 = nan;
       break L4;
      }
      $101 = HEAP32[$4>>2]|0;
      $102 = ($101|0)==(0|0);
      if (!($102)) {
       $103 = HEAP32[$3>>2]|0;
       $104 = ((($103)) + -1|0);
       HEAP32[$3>>2] = $104;
      }
      if (!($42)) {
       $106 = (___errno_location()|0);
       HEAP32[$106>>2] = 22;
       ___shlim($0,0);
       $$0114 = 0.0;
       break L4;
      }
      $105 = ($$4111|0)==(0);
      if ($105) {
       $$0114 = nan;
       break L4;
      } else {
       $$in = $$4111;
      }
      while(1) {
       $107 = (($$in) + -1)|0;
       if (!($102)) {
        $108 = HEAP32[$3>>2]|0;
        $109 = ((($108)) + -1|0);
        HEAP32[$3>>2] = $109;
       }
       $110 = ($107|0)==(0);
       if ($110) {
        $$0114 = nan;
        break L4;
       } else {
        $$in = $107;
       }
      }
      break;
     }
     case 0:  {
      $117 = ($$5|0)==(48);
      if ($117) {
       $118 = HEAP32[$3>>2]|0;
       $119 = HEAP32[$4>>2]|0;
       $120 = ($118>>>0)<($119>>>0);
       if ($120) {
        $121 = ((($118)) + 1|0);
        HEAP32[$3>>2] = $121;
        $122 = HEAP8[$118>>0]|0;
        $123 = $122&255;
        $126 = $123;
       } else {
        $124 = (___shgetc($0)|0);
        $126 = $124;
       }
       $125 = $126 | 32;
       $127 = ($125|0)==(120);
       if ($127) {
        $128 = (+_hexfloat($0,$$0106$ph,$$0105$ph,$$0113,$2));
        $$0114 = $128;
        break L4;
       }
       $129 = HEAP32[$4>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$6 = 48;
       } else {
        $131 = HEAP32[$3>>2]|0;
        $132 = ((($131)) + -1|0);
        HEAP32[$3>>2] = $132;
        $$6 = 48;
       }
      } else {
       $$6 = $$5;
      }
      $133 = (+_decfloat($0,$$6,$$0106$ph,$$0105$ph,$$0113,$2));
      $$0114 = $133;
      break L4;
      break;
     }
     default: {
      $112 = HEAP32[$4>>2]|0;
      $113 = ($112|0)==(0|0);
      if (!($113)) {
       $114 = HEAP32[$3>>2]|0;
       $115 = ((($114)) + -1|0);
       HEAP32[$3>>2] = $115;
      }
      $116 = (___errno_location()|0);
      HEAP32[$116>>2] = 22;
      ___shlim($0,0);
      $$0114 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $44 = HEAP32[$4>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = HEAP32[$3>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$3>>2] = $47;
    }
    $48 = ($2|0)!=(0);
    $49 = ($$0107$lcssa>>>0)>(3);
    $or$cond9 = $48 & $49;
    if ($or$cond9) {
     $$1108 = $$0107$lcssa;
     while(1) {
      if (!($45)) {
       $50 = HEAP32[$3>>2]|0;
       $51 = ((($50)) + -1|0);
       HEAP32[$3>>2] = $51;
      }
      $52 = (($$1108) + -1)|0;
      $$old8 = ($52>>>0)>(3);
      if ($$old8) {
       $$1108 = $52;
      } else {
       break;
      }
     }
    }
   }
   $53 = (+($$0113|0));
   $54 = $53 * inf;
   $55 = $54;
   $$0114 = $55;
  }
 } while(0);
 return (+$$0114);
}
function _hexfloat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0148$ = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0155$ = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0;
 var $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5 = 0.0, $$5164 = 0, $$6 = 0, $$pn = 0.0;
 var $$pre = 0, $$pre$phi201Z2D = 0.0, $$pre200 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0;
 var $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $not$ = 0, $or$cond = 0, $or$cond168 = 0, $or$cond4 = 0, $or$cond6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $$0 = $12;$$0142 = 0;
 } else {
  $13 = (___shgetc($0)|0);
  $$0 = $13;$$0142 = 0;
 }
 L4: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 8;
   break L4;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0146 = 0;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$0;$$2144 = $$0142;$51 = 0;$53 = 0;$96 = 0;$98 = 0;
   break L4;
  }
  }
  $14 = HEAP32[$5>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $$0 = $19;$$0142 = 1;
   continue;
  } else {
   $20 = (___shgetc($0)|0);
   $$0 = $20;$$0142 = 1;
   continue;
  }
 }
 if ((label|0) == 8) {
  $21 = HEAP32[$5>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $24 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $24;
   $25 = HEAP8[$21>>0]|0;
   $26 = $25&255;
   $$1$ph = $26;
  } else {
   $27 = (___shgetc($0)|0);
   $$1$ph = $27;
  }
  $28 = ($$1$ph|0)==(48);
  if ($28) {
   $36 = 0;$37 = 0;
   while(1) {
    $29 = HEAP32[$5>>2]|0;
    $30 = HEAP32[$7>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$5>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $41 = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $41 = $35;
    }
    $38 = (_i64Add(($36|0),($37|0),-1,-1)|0);
    $39 = tempRet0;
    $40 = ($41|0)==(48);
    if ($40) {
     $36 = $38;$37 = $39;
    } else {
     $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $41;$$2144 = 1;$51 = 0;$53 = 0;$96 = $38;$98 = $39;
     break;
    }
   }
  } else {
   $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$1$ph;$$2144 = $$0142;$51 = 0;$53 = 0;$96 = 0;$98 = 0;
  }
 }
 while(1) {
  $42 = (($$2) + -48)|0;
  $43 = ($42>>>0)<(10);
  $$pre = $$2 | 32;
  if ($43) {
   label = 20;
  } else {
   $44 = (($$pre) + -97)|0;
   $45 = ($44>>>0)<(6);
   $46 = ($$2|0)==(46);
   $or$cond6 = $46 | $45;
   if (!($or$cond6)) {
    $$2$lcssa = $$2;
    break;
   }
   if ($46) {
    $47 = ($$0146|0)==(0);
    if ($47) {
     $$1147 = 1;$$2150 = $$0148;$$2154 = $$0152;$$2157 = $$0155;$$2161 = $$0159;$$3145 = $$2144;$211 = $53;$212 = $51;$213 = $53;$214 = $51;
    } else {
     $$2$lcssa = 46;
     break;
    }
   } else {
    label = 20;
   }
  }
  if ((label|0) == 20) {
   label = 0;
   $48 = ($$2|0)>(57);
   $49 = (($$pre) + -87)|0;
   $$0133 = $48 ? $49 : $42;
   $50 = ($51|0)<(0);
   $52 = ($53>>>0)<(8);
   $54 = ($51|0)==(0);
   $55 = $54 & $52;
   $56 = $50 | $55;
   do {
    if ($56) {
     $57 = $$0159 << 4;
     $58 = (($$0133) + ($57))|0;
     $$1149 = $$0148;$$1153 = $$0152;$$1156 = $$0155;$$1160 = $58;
    } else {
     $59 = ($51|0)<(0);
     $60 = ($53>>>0)<(14);
     $61 = ($51|0)==(0);
     $62 = $61 & $60;
     $63 = $59 | $62;
     if ($63) {
      $64 = (+($$0133|0));
      $65 = $$0152 * 0.0625;
      $66 = $65 * $64;
      $67 = $$0155 + $66;
      $$1149 = $$0148;$$1153 = $65;$$1156 = $67;$$1160 = $$0159;
      break;
     } else {
      $68 = ($$0133|0)==(0);
      $69 = ($$0148|0)!=(0);
      $or$cond = $69 | $68;
      $70 = $$0152 * 0.5;
      $71 = $$0155 + $70;
      $$0155$ = $or$cond ? $$0155 : $71;
      $$0148$ = $or$cond ? $$0148 : 1;
      $$1149 = $$0148$;$$1153 = $$0152;$$1156 = $$0155$;$$1160 = $$0159;
      break;
     }
    }
   } while(0);
   $72 = (_i64Add(($53|0),($51|0),1,0)|0);
   $73 = tempRet0;
   $$1147 = $$0146;$$2150 = $$1149;$$2154 = $$1153;$$2157 = $$1156;$$2161 = $$1160;$$3145 = 1;$211 = $96;$212 = $98;$213 = $72;$214 = $73;
  }
  $74 = HEAP32[$5>>2]|0;
  $75 = HEAP32[$7>>2]|0;
  $76 = ($74>>>0)<($75>>>0);
  if ($76) {
   $77 = ((($74)) + 1|0);
   HEAP32[$5>>2] = $77;
   $78 = HEAP8[$74>>0]|0;
   $79 = $78&255;
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $79;$$2144 = $$3145;$51 = $214;$53 = $213;$96 = $211;$98 = $212;
   continue;
  } else {
   $80 = (___shgetc($0)|0);
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $80;$$2144 = $$3145;$51 = $214;$53 = $213;$96 = $211;$98 = $212;
   continue;
  }
 }
 $81 = ($$2144|0)==(0);
 do {
  if ($81) {
   $82 = HEAP32[$7>>2]|0;
   $83 = ($82|0)==(0|0);
   if (!($83)) {
    $84 = HEAP32[$5>>2]|0;
    $85 = ((($84)) + -1|0);
    HEAP32[$5>>2] = $85;
   }
   $86 = ($4|0)==(0);
   if ($86) {
    ___shlim($0,0);
   } else {
    if (!($83)) {
     $87 = HEAP32[$5>>2]|0;
     $88 = ((($87)) + -1|0);
     HEAP32[$5>>2] = $88;
    }
    $89 = ($$0146|0)==(0);
    $brmerge = $89 | $83;
    if (!($brmerge)) {
     $90 = HEAP32[$5>>2]|0;
     $91 = ((($90)) + -1|0);
     HEAP32[$5>>2] = $91;
    }
   }
   $92 = (+($3|0));
   $93 = $92 * 0.0;
   $$0165 = $93;
  } else {
   $94 = ($$0146|0)==(0);
   $95 = $94 ? $53 : $96;
   $97 = $94 ? $51 : $98;
   $99 = ($51|0)<(0);
   $100 = ($53>>>0)<(8);
   $101 = ($51|0)==(0);
   $102 = $101 & $100;
   $103 = $99 | $102;
   if ($103) {
    $$3162183 = $$0159;$105 = $53;$106 = $51;
    while(1) {
     $104 = $$3162183 << 4;
     $107 = (_i64Add(($105|0),($106|0),1,0)|0);
     $108 = tempRet0;
     $109 = ($106|0)<(0);
     $110 = ($105>>>0)<(7);
     $111 = ($106|0)==(0);
     $112 = $111 & $110;
     $113 = $109 | $112;
     if ($113) {
      $$3162183 = $104;$105 = $107;$106 = $108;
     } else {
      $$3162$lcssa = $104;
      break;
     }
    }
   } else {
    $$3162$lcssa = $$0159;
   }
   $114 = $$2$lcssa | 32;
   $115 = ($114|0)==(112);
   if ($115) {
    $116 = (_scanexp($0,$4)|0);
    $117 = tempRet0;
    $118 = ($116|0)==(0);
    $119 = ($117|0)==(-2147483648);
    $120 = $118 & $119;
    if ($120) {
     $121 = ($4|0)==(0);
     if ($121) {
      ___shlim($0,0);
      $$0165 = 0.0;
      break;
     }
     $122 = HEAP32[$7>>2]|0;
     $123 = ($122|0)==(0|0);
     if ($123) {
      $134 = 0;$135 = 0;
     } else {
      $124 = HEAP32[$5>>2]|0;
      $125 = ((($124)) + -1|0);
      HEAP32[$5>>2] = $125;
      $134 = 0;$135 = 0;
     }
    } else {
     $134 = $116;$135 = $117;
    }
   } else {
    $126 = HEAP32[$7>>2]|0;
    $127 = ($126|0)==(0|0);
    if ($127) {
     $134 = 0;$135 = 0;
    } else {
     $128 = HEAP32[$5>>2]|0;
     $129 = ((($128)) + -1|0);
     HEAP32[$5>>2] = $129;
     $134 = 0;$135 = 0;
    }
   }
   $130 = (_bitshift64Shl(($95|0),($97|0),2)|0);
   $131 = tempRet0;
   $132 = (_i64Add(($130|0),($131|0),-32,-1)|0);
   $133 = tempRet0;
   $136 = (_i64Add(($132|0),($133|0),($134|0),($135|0))|0);
   $137 = tempRet0;
   $138 = ($$3162$lcssa|0)==(0);
   if ($138) {
    $139 = (+($3|0));
    $140 = $139 * 0.0;
    $$0165 = $140;
    break;
   }
   $141 = (0 - ($2))|0;
   $142 = ($141|0)<(0);
   $143 = $142 << 31 >> 31;
   $144 = ($137|0)>($143|0);
   $145 = ($136>>>0)>($141>>>0);
   $146 = ($137|0)==($143|0);
   $147 = $146 & $145;
   $148 = $144 | $147;
   if ($148) {
    $149 = (___errno_location()|0);
    HEAP32[$149>>2] = 34;
    $150 = (+($3|0));
    $151 = $150 * 1.7976931348623157E+308;
    $152 = $151 * 1.7976931348623157E+308;
    $$0165 = $152;
    break;
   }
   $153 = (($2) + -106)|0;
   $154 = ($153|0)<(0);
   $155 = $154 << 31 >> 31;
   $156 = ($137|0)<($155|0);
   $157 = ($136>>>0)<($153>>>0);
   $158 = ($137|0)==($155|0);
   $159 = $158 & $157;
   $160 = $156 | $159;
   if ($160) {
    $162 = (___errno_location()|0);
    HEAP32[$162>>2] = 34;
    $163 = (+($3|0));
    $164 = $163 * 2.2250738585072014E-308;
    $165 = $164 * 2.2250738585072014E-308;
    $$0165 = $165;
    break;
   }
   $161 = ($$3162$lcssa|0)>(-1);
   if ($161) {
    $$3158179 = $$0155;$$4163178 = $$3162$lcssa;$170 = $136;$171 = $137;
    while(1) {
     $166 = !($$3158179 >= 0.5);
     $167 = $$4163178 << 1;
     $168 = $$3158179 + -1.0;
     $not$ = $166 ^ 1;
     $169 = $not$&1;
     $$5164 = $167 | $169;
     $$pn = $166 ? $$3158179 : $168;
     $$4 = $$3158179 + $$pn;
     $172 = (_i64Add(($170|0),($171|0),-1,-1)|0);
     $173 = tempRet0;
     $174 = ($$5164|0)>(-1);
     if ($174) {
      $$3158179 = $$4;$$4163178 = $$5164;$170 = $172;$171 = $173;
     } else {
      $$3158$lcssa = $$4;$$4163$lcssa = $$5164;$181 = $172;$182 = $173;
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155;$$4163$lcssa = $$3162$lcssa;$181 = $136;$182 = $137;
   }
   $175 = ($1|0)<(0);
   $176 = $175 << 31 >> 31;
   $177 = ($2|0)<(0);
   $178 = $177 << 31 >> 31;
   $179 = (_i64Subtract(32,0,($2|0),($178|0))|0);
   $180 = tempRet0;
   $183 = (_i64Add(($179|0),($180|0),($181|0),($182|0))|0);
   $184 = tempRet0;
   $185 = ($184|0)<($176|0);
   $186 = ($183>>>0)<($1>>>0);
   $187 = ($184|0)==($176|0);
   $188 = $187 & $186;
   $189 = $185 | $188;
   if ($189) {
    $190 = ($183|0)>(0);
    if ($190) {
     $$0166 = $183;
     label = 59;
    } else {
     $$0166170 = 0;$194 = 84;
     label = 61;
    }
   } else {
    $$0166 = $1;
    label = 59;
   }
   if ((label|0) == 59) {
    $191 = ($$0166|0)<(53);
    $192 = (84 - ($$0166))|0;
    if ($191) {
     $$0166170 = $$0166;$194 = $192;
     label = 61;
    } else {
     $$pre200 = (+($3|0));
     $$0151 = 0.0;$$0166169 = $$0166;$$pre$phi201Z2D = $$pre200;
    }
   }
   if ((label|0) == 61) {
    $193 = (+($3|0));
    $195 = (+_scalbn(1.0,$194));
    $196 = (+_copysignl($195,$193));
    $$0151 = $196;$$0166169 = $$0166170;$$pre$phi201Z2D = $193;
   }
   $197 = ($$0166169|0)<(32);
   $198 = $$3158$lcssa != 0.0;
   $or$cond4 = $198 & $197;
   $199 = $$4163$lcssa & 1;
   $200 = ($199|0)==(0);
   $or$cond168 = $200 & $or$cond4;
   $201 = $or$cond168&1;
   $$6 = (($$4163$lcssa) + ($201))|0;
   $$5 = $or$cond168 ? 0.0 : $$3158$lcssa;
   $202 = (+($$6>>>0));
   $203 = $$pre$phi201Z2D * $202;
   $204 = $$0151 + $203;
   $205 = $$5 * $$pre$phi201Z2D;
   $206 = $205 + $204;
   $207 = $206 - $$0151;
   $208 = $207 != 0.0;
   if (!($208)) {
    $209 = (___errno_location()|0);
    HEAP32[$209>>2] = 34;
   }
   $210 = (+_scalbnl($207,$181));
   $$0165 = $210;
  }
 } while(0);
 return (+$$0165);
}
function _decfloat($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$0345 = 0, $$$0350 = 0, $$$0385 = 0, $$$0401 = 0, $$$5355 = 0, $$$5390 = 0, $$0329 = 0, $$0332488 = 0, $$0333 = 0, $$0334 = 0, $$0336484 = 0, $$0340494 = 0, $$0341$lcssa = 0, $$0341461 = 0, $$0341462 = 0, $$0341463 = 0, $$0341511 = 0, $$0345$lcssa = 0, $$0345465 = 0;
 var $$0345466 = 0, $$0345467 = 0, $$0345510 = 0, $$0350$lcssa553 = 0, $$0350492 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365482 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa552 = 0, $$0385491 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401471 = 0, $$0401472 = 0, $$0401473 = 0, $$0401507 = 0;
 var $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph446 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph557 = 0, $$1394$lcssa = 0, $$1394509 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph447 = 0, $$2367 = 0.0;
 var $$2371$v = 0, $$2374 = 0, $$2387$ph445 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344501 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3375 = 0, $$3383 = 0, $$3399$lcssa = 0, $$3399508 = 0, $$3512 = 0, $$413 = 0, $$423 = 0, $$4349493 = 0;
 var $$4354 = 0, $$4354$ph = 0, $$4354$ph558 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph443 = 0, $$4400 = 0, $$4483 = 0, $$5 = 0, $$5$in = 0, $$5355486 = 0, $$5390485 = 0, $$6378$ph = 0, $$6487 = 0, $$9481 = 0, $$neg440 = 0, $$neg441 = 0, $$pre = 0, $$pre551 = 0;
 var $$promoted = 0, $$sink = 0, $$sink419$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0;
 var $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0.0;
 var $351 = 0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $exitcond = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond11 = 0, $or$cond14 = 0, $or$cond415 = 0, $or$cond417 = 0, $or$cond418 = 0, $or$cond420 = 0, $or$cond420$not = 0, $or$cond421 = 0, $or$cond424 = 0, $or$cond5 = 0;
 var $or$cond579 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $6 = sp;
 $sum = (($3) + ($2))|0;
 $7 = (0 - ($sum))|0;
 $8 = ((($0)) + 4|0);
 $9 = ((($0)) + 100|0);
 $$0329 = $1;$$0396 = 0;
 L1: while(1) {
  switch ($$0329|0) {
  case 46:  {
   label = 6;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0393 = 0;$$2 = $$0329;$$2398 = $$0396;$368 = 0;$369 = 0;
   break L1;
  }
  }
  $10 = HEAP32[$8>>2]|0;
  $11 = HEAP32[$9>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  if ($12) {
   $13 = ((($10)) + 1|0);
   HEAP32[$8>>2] = $13;
   $14 = HEAP8[$10>>0]|0;
   $15 = $14&255;
   $$0329 = $15;$$0396 = 1;
   continue;
  } else {
   $16 = (___shgetc($0)|0);
   $$0329 = $16;$$0396 = 1;
   continue;
  }
 }
 if ((label|0) == 6) {
  $17 = HEAP32[$8>>2]|0;
  $18 = HEAP32[$9>>2]|0;
  $19 = ($17>>>0)<($18>>>0);
  if ($19) {
   $20 = ((($17)) + 1|0);
   HEAP32[$8>>2] = $20;
   $21 = HEAP8[$17>>0]|0;
   $22 = $21&255;
   $$1330$ph = $22;
  } else {
   $23 = (___shgetc($0)|0);
   $$1330$ph = $23;
  }
  $24 = ($$1330$ph|0)==(48);
  if ($24) {
   $25 = 0;$26 = 0;
   while(1) {
    $27 = (_i64Add(($25|0),($26|0),-1,-1)|0);
    $28 = tempRet0;
    $29 = HEAP32[$8>>2]|0;
    $30 = HEAP32[$9>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$8>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $$1330$be = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $$1330$be = $35;
    }
    $36 = ($$1330$be|0)==(48);
    if ($36) {
     $25 = $27;$26 = $28;
    } else {
     $$0393 = 1;$$2 = $$1330$be;$$2398 = 1;$368 = $27;$369 = $28;
     break;
    }
   }
  } else {
   $$0393 = 1;$$2 = $$1330$ph;$$2398 = $$0396;$368 = 0;$369 = 0;
  }
 }
 HEAP32[$6>>2] = 0;
 $37 = (($$2) + -48)|0;
 $38 = ($37>>>0)<(10);
 $39 = ($$2|0)==(46);
 $40 = $39 | $38;
 L20: do {
  if ($40) {
   $41 = ((($6)) + 496|0);
   $$0341511 = 0;$$0345510 = 0;$$0401507 = 0;$$1394509 = $$0393;$$3399508 = $$2398;$$3512 = $$2;$370 = $39;$371 = $37;$372 = $368;$373 = $369;$44 = 0;$45 = 0;
   L22: while(1) {
    do {
     if ($370) {
      $cond = ($$1394509|0)==(0);
      if ($cond) {
       $$2343 = $$0341511;$$2347 = $$0345510;$$2395 = 1;$$2403 = $$0401507;$$4400 = $$3399508;$374 = $44;$375 = $45;$376 = $44;$377 = $45;
      } else {
       break L22;
      }
     } else {
      $43 = ($$0345510|0)<(125);
      $46 = (_i64Add(($44|0),($45|0),1,0)|0);
      $47 = tempRet0;
      $48 = ($$3512|0)!=(48);
      if (!($43)) {
       if (!($48)) {
        $$2343 = $$0341511;$$2347 = $$0345510;$$2395 = $$1394509;$$2403 = $$0401507;$$4400 = $$3399508;$374 = $372;$375 = $373;$376 = $46;$377 = $47;
        break;
       }
       $57 = HEAP32[$41>>2]|0;
       $58 = $57 | 1;
       HEAP32[$41>>2] = $58;
       $$2343 = $$0341511;$$2347 = $$0345510;$$2395 = $$1394509;$$2403 = $$0401507;$$4400 = $$3399508;$374 = $372;$375 = $373;$376 = $46;$377 = $47;
       break;
      }
      $$$0401 = $48 ? $46 : $$0401507;
      $49 = ($$0341511|0)==(0);
      $$pre551 = (($6) + ($$0345510<<2)|0);
      if ($49) {
       $$sink = $371;
      } else {
       $50 = HEAP32[$$pre551>>2]|0;
       $51 = ($50*10)|0;
       $52 = (($$3512) + -48)|0;
       $53 = (($52) + ($51))|0;
       $$sink = $53;
      }
      HEAP32[$$pre551>>2] = $$sink;
      $54 = (($$0341511) + 1)|0;
      $55 = ($54|0)==(9);
      $56 = $55&1;
      $$$0345 = (($$0345510) + ($56))|0;
      $$413 = $55 ? 0 : $54;
      $$2343 = $$413;$$2347 = $$$0345;$$2395 = $$1394509;$$2403 = $$$0401;$$4400 = 1;$374 = $372;$375 = $373;$376 = $46;$377 = $47;
     }
    } while(0);
    $59 = HEAP32[$8>>2]|0;
    $60 = HEAP32[$9>>2]|0;
    $61 = ($59>>>0)<($60>>>0);
    if ($61) {
     $62 = ((($59)) + 1|0);
     HEAP32[$8>>2] = $62;
     $63 = HEAP8[$59>>0]|0;
     $64 = $63&255;
     $$3$be = $64;
    } else {
     $65 = (___shgetc($0)|0);
     $$3$be = $65;
    }
    $66 = (($$3$be) + -48)|0;
    $67 = ($66>>>0)<(10);
    $68 = ($$3$be|0)==(46);
    $69 = $68 | $67;
    if ($69) {
     $$0341511 = $$2343;$$0345510 = $$2347;$$0401507 = $$2403;$$1394509 = $$2395;$$3399508 = $$4400;$$3512 = $$3$be;$370 = $68;$371 = $66;$372 = $374;$373 = $375;$44 = $376;$45 = $377;
    } else {
     $$0341$lcssa = $$2343;$$0345$lcssa = $$2347;$$0401$lcssa = $$2403;$$1394$lcssa = $$2395;$$3$lcssa = $$3$be;$$3399$lcssa = $$4400;$72 = $376;$73 = $374;$75 = $377;$76 = $375;
     label = 29;
     break L20;
    }
   }
   $42 = ($$3399508|0)!=(0);
   $$0341463 = $$0341511;$$0345467 = $$0345510;$$0401473 = $$0401507;$378 = $44;$379 = $45;$380 = $372;$381 = $373;$382 = $42;
   label = 37;
  } else {
   $$0341$lcssa = 0;$$0345$lcssa = 0;$$0401$lcssa = 0;$$1394$lcssa = $$0393;$$3$lcssa = $$2;$$3399$lcssa = $$2398;$72 = 0;$73 = $368;$75 = 0;$76 = $369;
   label = 29;
  }
 } while(0);
 do {
  if ((label|0) == 29) {
   $70 = ($$1394$lcssa|0)==(0);
   $71 = $70 ? $72 : $73;
   $74 = $70 ? $75 : $76;
   $77 = ($$3399$lcssa|0)!=(0);
   $78 = $$3$lcssa | 32;
   $79 = ($78|0)==(101);
   $or$cond415 = $77 & $79;
   if (!($or$cond415)) {
    $94 = ($$3$lcssa|0)>(-1);
    if ($94) {
     $$0341463 = $$0341$lcssa;$$0345467 = $$0345$lcssa;$$0401473 = $$0401$lcssa;$378 = $72;$379 = $75;$380 = $71;$381 = $74;$382 = $77;
     label = 37;
     break;
    } else {
     $$0341462 = $$0341$lcssa;$$0345466 = $$0345$lcssa;$$0401472 = $$0401$lcssa;$383 = $72;$384 = $75;$385 = $77;$386 = $71;$387 = $74;
     label = 39;
     break;
    }
   }
   $80 = (_scanexp($0,$5)|0);
   $81 = tempRet0;
   $82 = ($80|0)==(0);
   $83 = ($81|0)==(-2147483648);
   $84 = $82 & $83;
   if ($84) {
    $85 = ($5|0)==(0);
    if ($85) {
     ___shlim($0,0);
     $$1 = 0.0;
     break;
    }
    $86 = HEAP32[$9>>2]|0;
    $87 = ($86|0)==(0|0);
    if ($87) {
     $90 = 0;$91 = 0;
    } else {
     $88 = HEAP32[$8>>2]|0;
     $89 = ((($88)) + -1|0);
     HEAP32[$8>>2] = $89;
     $90 = 0;$91 = 0;
    }
   } else {
    $90 = $80;$91 = $81;
   }
   $92 = (_i64Add(($90|0),($91|0),($71|0),($74|0))|0);
   $93 = tempRet0;
   $$0341461 = $$0341$lcssa;$$0345465 = $$0345$lcssa;$$0401471 = $$0401$lcssa;$105 = $92;$106 = $72;$108 = $93;$109 = $75;
   label = 41;
  }
 } while(0);
 if ((label|0) == 37) {
  $95 = HEAP32[$9>>2]|0;
  $96 = ($95|0)==(0|0);
  if ($96) {
   $$0341462 = $$0341463;$$0345466 = $$0345467;$$0401472 = $$0401473;$383 = $378;$384 = $379;$385 = $382;$386 = $380;$387 = $381;
   label = 39;
  } else {
   $97 = HEAP32[$8>>2]|0;
   $98 = ((($97)) + -1|0);
   HEAP32[$8>>2] = $98;
   if ($382) {
    $$0341461 = $$0341463;$$0345465 = $$0345467;$$0401471 = $$0401473;$105 = $380;$106 = $378;$108 = $381;$109 = $379;
    label = 41;
   } else {
    label = 40;
   }
  }
 }
 if ((label|0) == 39) {
  if ($385) {
   $$0341461 = $$0341462;$$0345465 = $$0345466;$$0401471 = $$0401472;$105 = $386;$106 = $383;$108 = $387;$109 = $384;
   label = 41;
  } else {
   label = 40;
  }
 }
 do {
  if ((label|0) == 40) {
   $99 = (___errno_location()|0);
   HEAP32[$99>>2] = 22;
   ___shlim($0,0);
   $$1 = 0.0;
  }
  else if ((label|0) == 41) {
   $100 = HEAP32[$6>>2]|0;
   $101 = ($100|0)==(0);
   if ($101) {
    $102 = (+($4|0));
    $103 = $102 * 0.0;
    $$1 = $103;
    break;
   }
   $104 = ($105|0)==($106|0);
   $107 = ($108|0)==($109|0);
   $110 = $104 & $107;
   $111 = ($109|0)<(0);
   $112 = ($106>>>0)<(10);
   $113 = ($109|0)==(0);
   $114 = $113 & $112;
   $115 = $111 | $114;
   $or$cond = $115 & $110;
   if ($or$cond) {
    $116 = ($2|0)>(30);
    $117 = $100 >>> $2;
    $118 = ($117|0)==(0);
    $or$cond417 = $116 | $118;
    if ($or$cond417) {
     $119 = (+($4|0));
     $120 = (+($100>>>0));
     $121 = $119 * $120;
     $$1 = $121;
     break;
    }
   }
   $122 = (($3|0) / -2)&-1;
   $123 = ($122|0)<(0);
   $124 = $123 << 31 >> 31;
   $125 = ($108|0)>($124|0);
   $126 = ($105>>>0)>($122>>>0);
   $127 = ($108|0)==($124|0);
   $128 = $127 & $126;
   $129 = $125 | $128;
   if ($129) {
    $130 = (___errno_location()|0);
    HEAP32[$130>>2] = 34;
    $131 = (+($4|0));
    $132 = $131 * 1.7976931348623157E+308;
    $133 = $132 * 1.7976931348623157E+308;
    $$1 = $133;
    break;
   }
   $134 = (($3) + -106)|0;
   $135 = ($134|0)<(0);
   $136 = $135 << 31 >> 31;
   $137 = ($108|0)<($136|0);
   $138 = ($105>>>0)<($134>>>0);
   $139 = ($108|0)==($136|0);
   $140 = $139 & $138;
   $141 = $137 | $140;
   if ($141) {
    $142 = (___errno_location()|0);
    HEAP32[$142>>2] = 34;
    $143 = (+($4|0));
    $144 = $143 * 2.2250738585072014E-308;
    $145 = $144 * 2.2250738585072014E-308;
    $$1 = $145;
    break;
   }
   $146 = ($$0341461|0)==(0);
   if ($146) {
    $$3348 = $$0345465;
   } else {
    $147 = ($$0341461|0)<(9);
    if ($147) {
     $148 = (($6) + ($$0345465<<2)|0);
     $$promoted = HEAP32[$148>>2]|0;
     $$3344501 = $$0341461;$150 = $$promoted;
     while(1) {
      $149 = ($150*10)|0;
      $151 = (($$3344501) + 1)|0;
      $152 = ($$3344501|0)<(8);
      if ($152) {
       $$3344501 = $151;$150 = $149;
      } else {
       break;
      }
     }
     HEAP32[$148>>2] = $149;
    }
    $153 = (($$0345465) + 1)|0;
    $$3348 = $153;
   }
   $154 = ($$0401471|0)<(9);
   if ($154) {
    $155 = ($$0401471|0)<=($105|0);
    $156 = ($105|0)<(18);
    $or$cond5 = $155 & $156;
    if ($or$cond5) {
     $157 = ($105|0)==(9);
     if ($157) {
      $158 = (+($4|0));
      $159 = HEAP32[$6>>2]|0;
      $160 = (+($159>>>0));
      $161 = $158 * $160;
      $$1 = $161;
      break;
     }
     $162 = ($105|0)<(9);
     if ($162) {
      $163 = (+($4|0));
      $164 = HEAP32[$6>>2]|0;
      $165 = (+($164>>>0));
      $166 = $163 * $165;
      $167 = (8 - ($105))|0;
      $168 = (22776 + ($167<<2)|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = (+($169|0));
      $171 = $166 / $170;
      $$1 = $171;
      break;
     }
     $$neg440 = Math_imul($105, -3)|0;
     $$neg441 = (($2) + 27)|0;
     $172 = (($$neg441) + ($$neg440))|0;
     $173 = ($172|0)>(30);
     $$pre = HEAP32[$6>>2]|0;
     $174 = $$pre >>> $172;
     $175 = ($174|0)==(0);
     $or$cond579 = $173 | $175;
     if ($or$cond579) {
      $176 = (+($4|0));
      $177 = (+($$pre>>>0));
      $178 = $176 * $177;
      $179 = (($105) + -10)|0;
      $180 = (22776 + ($179<<2)|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = (+($181|0));
      $183 = $178 * $182;
      $$1 = $183;
      break;
     }
    }
   }
   $184 = (($105|0) % 9)&-1;
   $185 = ($184|0)==(0);
   if ($185) {
    $$0380$ph = 0;$$1373$ph446 = $$3348;$$2352$ph447 = 0;$$2387$ph445 = $105;
   } else {
    $186 = ($105|0)>(-1);
    $187 = (($184) + 9)|0;
    $188 = $186 ? $184 : $187;
    $189 = (8 - ($188))|0;
    $190 = (22776 + ($189<<2)|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = ($$3348|0)==(0);
    if ($192) {
     $$0350$lcssa553 = 0;$$0372 = 0;$$0385$lcssa552 = $105;
    } else {
     $193 = (1000000000 / ($191|0))&-1;
     $$0340494 = 0;$$0350492 = 0;$$0385491 = $105;$$4349493 = 0;
     while(1) {
      $194 = (($6) + ($$4349493<<2)|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = (($195>>>0) % ($191>>>0))&-1;
      $197 = (($195>>>0) / ($191>>>0))&-1;
      $198 = (($197) + ($$0340494))|0;
      HEAP32[$194>>2] = $198;
      $199 = Math_imul($193, $196)|0;
      $200 = ($$4349493|0)==($$0350492|0);
      $201 = ($198|0)==(0);
      $or$cond418 = $200 & $201;
      $202 = (($$0350492) + 1)|0;
      $203 = $202 & 127;
      $204 = (($$0385491) + -9)|0;
      $$$0385 = $or$cond418 ? $204 : $$0385491;
      $$$0350 = $or$cond418 ? $203 : $$0350492;
      $205 = (($$4349493) + 1)|0;
      $206 = ($205|0)==($$3348|0);
      if ($206) {
       break;
      } else {
       $$0340494 = $199;$$0350492 = $$$0350;$$0385491 = $$$0385;$$4349493 = $205;
      }
     }
     $207 = ($199|0)==(0);
     if ($207) {
      $$0350$lcssa553 = $$$0350;$$0372 = $$3348;$$0385$lcssa552 = $$$0385;
     } else {
      $208 = (($6) + ($$3348<<2)|0);
      $209 = (($$3348) + 1)|0;
      HEAP32[$208>>2] = $199;
      $$0350$lcssa553 = $$$0350;$$0372 = $209;$$0385$lcssa552 = $$$0385;
     }
    }
    $210 = (9 - ($188))|0;
    $211 = (($210) + ($$0385$lcssa552))|0;
    $$0380$ph = 0;$$1373$ph446 = $$0372;$$2352$ph447 = $$0350$lcssa553;$$2387$ph445 = $211;
   }
   L101: while(1) {
    $212 = ($$2387$ph445|0)<(18);
    $213 = ($$2387$ph445|0)==(18);
    $214 = (($6) + ($$2352$ph447<<2)|0);
    $$0380 = $$0380$ph;$$1373 = $$1373$ph446;
    while(1) {
     if (!($212)) {
      if (!($213)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph447;$$4389$ph443 = $$2387$ph445;$$6378$ph = $$1373;
       break L101;
      }
      $215 = HEAP32[$214>>2]|0;
      $216 = ($215>>>0)<(9007199);
      if (!($216)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph447;$$4389$ph443 = 18;$$6378$ph = $$1373;
       break L101;
      }
     }
     $217 = (($$1373) + 127)|0;
     $$0334 = 0;$$2374 = $$1373;$$5$in = $217;
     while(1) {
      $$5 = $$5$in & 127;
      $218 = (($6) + ($$5<<2)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = (_bitshift64Shl(($219|0),0,29)|0);
      $221 = tempRet0;
      $222 = (_i64Add(($220|0),($221|0),($$0334|0),0)|0);
      $223 = tempRet0;
      $224 = ($223>>>0)>(0);
      $225 = ($222>>>0)>(1000000000);
      $226 = ($223|0)==(0);
      $227 = $226 & $225;
      $228 = $224 | $227;
      if ($228) {
       $229 = (___udivdi3(($222|0),($223|0),1000000000,0)|0);
       $230 = tempRet0;
       $231 = (___uremdi3(($222|0),($223|0),1000000000,0)|0);
       $232 = tempRet0;
       $$1335 = $229;$$sink419$off0 = $231;
      } else {
       $$1335 = 0;$$sink419$off0 = $222;
      }
      HEAP32[$218>>2] = $$sink419$off0;
      $233 = (($$2374) + 127)|0;
      $234 = $233 & 127;
      $235 = ($$5|0)!=($234|0);
      $236 = ($$5|0)==($$2352$ph447|0);
      $or$cond420 = $235 | $236;
      $or$cond420$not = $or$cond420 ^ 1;
      $237 = ($$sink419$off0|0)==(0);
      $or$cond421 = $237 & $or$cond420$not;
      $$3375 = $or$cond421 ? $$5 : $$2374;
      $238 = (($$5) + -1)|0;
      if ($236) {
       break;
      } else {
       $$0334 = $$1335;$$2374 = $$3375;$$5$in = $238;
      }
     }
     $239 = (($$0380) + -29)|0;
     $240 = ($$1335|0)==(0);
     if ($240) {
      $$0380 = $239;$$1373 = $$3375;
     } else {
      break;
     }
    }
    $241 = (($$2387$ph445) + 9)|0;
    $242 = (($$2352$ph447) + 127)|0;
    $243 = $242 & 127;
    $244 = ($243|0)==($$3375|0);
    $245 = (($$3375) + 127)|0;
    $246 = $245 & 127;
    $247 = (($$3375) + 126)|0;
    $248 = $247 & 127;
    $249 = (($6) + ($248<<2)|0);
    if ($244) {
     $250 = (($6) + ($246<<2)|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = HEAP32[$249>>2]|0;
     $253 = $252 | $251;
     HEAP32[$249>>2] = $253;
     $$4376 = $246;
    } else {
     $$4376 = $$3375;
    }
    $254 = (($6) + ($243<<2)|0);
    HEAP32[$254>>2] = $$1335;
    $$0380$ph = $239;$$1373$ph446 = $$4376;$$2352$ph447 = $243;$$2387$ph445 = $241;
   }
   L119: while(1) {
    $291 = (($$6378$ph) + 1)|0;
    $289 = $291 & 127;
    $292 = (($$6378$ph) + 127)|0;
    $293 = $292 & 127;
    $294 = (($6) + ($293<<2)|0);
    $$1381$ph557 = $$1381$ph;$$4354$ph558 = $$4354$ph;$$4389$ph = $$4389$ph443;
    while(1) {
     $267 = ($$4389$ph|0)==(18);
     $295 = ($$4389$ph|0)>(27);
     $$423 = $295 ? 9 : 1;
     $$1381 = $$1381$ph557;$$4354 = $$4354$ph558;
     while(1) {
      $$0336484 = 0;
      while(1) {
       $255 = (($$0336484) + ($$4354))|0;
       $256 = $255 & 127;
       $257 = ($256|0)==($$6378$ph|0);
       if ($257) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $258 = (($6) + ($256<<2)|0);
       $259 = HEAP32[$258>>2]|0;
       $260 = (22808 + ($$0336484<<2)|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = ($259>>>0)<($261>>>0);
       if ($262) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $263 = ($259>>>0)>($261>>>0);
       if ($263) {
        break;
       }
       $264 = (($$0336484) + 1)|0;
       $265 = ($$0336484|0)<(1);
       if ($265) {
        $$0336484 = $264;
       } else {
        $$1337 = $264;
        label = 88;
        break;
       }
      }
      if ((label|0) == 88) {
       label = 0;
       $266 = ($$1337|0)==(2);
       $or$cond11 = $267 & $266;
       if ($or$cond11) {
        $$0365482 = 0.0;$$4483 = 0;$$9481 = $$6378$ph;
        break L119;
       }
      }
      $268 = (($$423) + ($$1381))|0;
      $269 = ($$4354|0)==($$6378$ph|0);
      if ($269) {
       $$1381 = $268;$$4354 = $$6378$ph;
      } else {
       break;
      }
     }
     $270 = 1 << $$423;
     $271 = (($270) + -1)|0;
     $272 = 1000000000 >>> $$423;
     $$0332488 = 0;$$5355486 = $$4354;$$5390485 = $$4389$ph;$$6487 = $$4354;
     while(1) {
      $273 = (($6) + ($$6487<<2)|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = $274 & $271;
      $276 = $274 >>> $$423;
      $277 = (($276) + ($$0332488))|0;
      HEAP32[$273>>2] = $277;
      $278 = Math_imul($275, $272)|0;
      $279 = ($$6487|0)==($$5355486|0);
      $280 = ($277|0)==(0);
      $or$cond424 = $279 & $280;
      $281 = (($$5355486) + 1)|0;
      $282 = $281 & 127;
      $283 = (($$5390485) + -9)|0;
      $$$5390 = $or$cond424 ? $283 : $$5390485;
      $$$5355 = $or$cond424 ? $282 : $$5355486;
      $284 = (($$6487) + 1)|0;
      $285 = $284 & 127;
      $286 = ($285|0)==($$6378$ph|0);
      if ($286) {
       break;
      } else {
       $$0332488 = $278;$$5355486 = $$$5355;$$5390485 = $$$5390;$$6487 = $285;
      }
     }
     $287 = ($278|0)==(0);
     if ($287) {
      $$1381$ph557 = $268;$$4354$ph558 = $$$5355;$$4389$ph = $$$5390;
      continue;
     }
     $288 = ($289|0)==($$$5355|0);
     if (!($288)) {
      break;
     }
     $296 = HEAP32[$294>>2]|0;
     $297 = $296 | 1;
     HEAP32[$294>>2] = $297;
     $$1381$ph557 = $268;$$4354$ph558 = $$$5355;$$4389$ph = $$$5390;
    }
    $290 = (($6) + ($$6378$ph<<2)|0);
    HEAP32[$290>>2] = $278;
    $$1381$ph = $268;$$4354$ph = $$$5355;$$4389$ph443 = $$$5390;$$6378$ph = $289;
   }
   while(1) {
    $298 = (($$4483) + ($$4354))|0;
    $299 = $298 & 127;
    $300 = ($299|0)==($$9481|0);
    $301 = (($$9481) + 1)|0;
    $302 = $301 & 127;
    if ($300) {
     $303 = (($302) + -1)|0;
     $304 = (($6) + ($303<<2)|0);
     HEAP32[$304>>2] = 0;
     $$10 = $302;
    } else {
     $$10 = $$9481;
    }
    $305 = $$0365482 * 1.0E+9;
    $306 = (($6) + ($299<<2)|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = (+($307>>>0));
    $309 = $305 + $308;
    $310 = (($$4483) + 1)|0;
    $exitcond = ($310|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0365482 = $309;$$4483 = $310;$$9481 = $$10;
    }
   }
   $311 = (+($4|0));
   $312 = $309 * $311;
   $313 = (($$1381) + 53)|0;
   $314 = (($313) - ($3))|0;
   $315 = ($314|0)<($2|0);
   $316 = ($314|0)>(0);
   $$ = $316 ? $314 : 0;
   $$0333 = $315 ? $$ : $2;
   $317 = ($$0333|0)<(53);
   if ($317) {
    $318 = (105 - ($$0333))|0;
    $319 = (+_scalbn(1.0,$318));
    $320 = (+_copysignl($319,$312));
    $321 = (53 - ($$0333))|0;
    $322 = (+_scalbn(1.0,$321));
    $323 = (+_fmodl($312,$322));
    $324 = $312 - $323;
    $325 = $320 + $324;
    $$0360 = $320;$$0361 = $323;$$1366 = $325;
   } else {
    $$0360 = 0.0;$$0361 = 0.0;$$1366 = $312;
   }
   $326 = (($$4354) + 2)|0;
   $327 = $326 & 127;
   $328 = ($327|0)==($$10|0);
   if ($328) {
    $$3364 = $$0361;
   } else {
    $329 = (($6) + ($327<<2)|0);
    $330 = HEAP32[$329>>2]|0;
    $331 = ($330>>>0)<(500000000);
    do {
     if ($331) {
      $332 = ($330|0)==(0);
      if ($332) {
       $333 = (($$4354) + 3)|0;
       $334 = $333 & 127;
       $335 = ($334|0)==($$10|0);
       if ($335) {
        $$1362 = $$0361;
        break;
       }
      }
      $336 = $311 * 0.25;
      $337 = $336 + $$0361;
      $$1362 = $337;
     } else {
      $338 = ($330|0)==(500000000);
      if (!($338)) {
       $339 = $311 * 0.75;
       $340 = $339 + $$0361;
       $$1362 = $340;
       break;
      }
      $341 = (($$4354) + 3)|0;
      $342 = $341 & 127;
      $343 = ($342|0)==($$10|0);
      if ($343) {
       $344 = $311 * 0.5;
       $345 = $344 + $$0361;
       $$1362 = $345;
       break;
      } else {
       $346 = $311 * 0.75;
       $347 = $346 + $$0361;
       $$1362 = $347;
       break;
      }
     }
    } while(0);
    $348 = (53 - ($$0333))|0;
    $349 = ($348|0)>(1);
    if ($349) {
     $350 = (+_fmodl($$1362,1.0));
     $351 = $350 != 0.0;
     if ($351) {
      $$3364 = $$1362;
     } else {
      $352 = $$1362 + 1.0;
      $$3364 = $352;
     }
    } else {
     $$3364 = $$1362;
    }
   }
   $353 = $$1366 + $$3364;
   $354 = $353 - $$0360;
   $355 = $313 & 2147483647;
   $356 = (-2 - ($sum))|0;
   $357 = ($355|0)>($356|0);
   do {
    if ($357) {
     $358 = (+Math_abs((+$354)));
     $359 = !($358 >= 9007199254740992.0);
     $360 = $354 * 0.5;
     $not$ = $359 ^ 1;
     $361 = $not$&1;
     $$3383 = (($$1381) + ($361))|0;
     $$2367 = $359 ? $354 : $360;
     $362 = (($$3383) + 50)|0;
     $363 = ($362|0)>($7|0);
     if (!($363)) {
      $364 = ($$0333|0)!=($314|0);
      $narrow = $364 | $359;
      $$2371$v = $315 & $narrow;
      $365 = $$3364 != 0.0;
      $or$cond14 = $365 & $$2371$v;
      if (!($or$cond14)) {
       $$3368 = $$2367;$$4384 = $$3383;
       break;
      }
     }
     $366 = (___errno_location()|0);
     HEAP32[$366>>2] = 34;
     $$3368 = $$2367;$$4384 = $$3383;
    } else {
     $$3368 = $354;$$4384 = $$1381;
    }
   } while(0);
   $367 = (+_scalbnl($$3368,$$4384));
   $$1 = $367;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 switch ($11|0) {
 case 43: case 45:  {
  $12 = ($11|0)==(45);
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = $13;$$049 = $22;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    $$0 = $13;$$049 = $22;
   }
  } else {
   $$0 = $13;$$049 = $22;
  }
  break;
 }
 default: {
  $$0 = 0;$$049 = $11;
 }
 }
 $29 = (($$049) + -48)|0;
 $30 = ($29>>>0)>(9);
 if ($30) {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $100 = -2147483648;$101 = 0;
  } else {
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + -1|0);
   HEAP32[$2>>2] = $34;
   $100 = -2147483648;$101 = 0;
  }
 } else {
  $$04860 = 0;$$159 = $$049;
  while(1) {
   $35 = ($$04860*10)|0;
   $36 = (($$159) + -48)|0;
   $37 = (($36) + ($35))|0;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$4>>2]|0;
   $40 = ($38>>>0)<($39>>>0);
   if ($40) {
    $41 = ((($38)) + 1|0);
    HEAP32[$2>>2] = $41;
    $42 = HEAP8[$38>>0]|0;
    $43 = $42&255;
    $$1$be = $43;
   } else {
    $44 = (___shgetc($0)|0);
    $$1$be = $44;
   }
   $45 = (($$1$be) + -48)|0;
   $46 = ($45>>>0)<(10);
   $47 = ($37|0)<(214748364);
   $48 = $46 & $47;
   if ($48) {
    $$04860 = $37;$$159 = $$1$be;
   } else {
    break;
   }
  }
  $49 = ($37|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (($$1$be) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   $$254 = $$1$be;$55 = $37;$56 = $50;
   while(1) {
    $57 = (___muldi3(($55|0),($56|0),10,0)|0);
    $58 = tempRet0;
    $59 = ($$254|0)<(0);
    $60 = $59 << 31 >> 31;
    $61 = (_i64Add(($$254|0),($60|0),-48,-1)|0);
    $62 = tempRet0;
    $63 = (_i64Add(($61|0),($62|0),($57|0),($58|0))|0);
    $64 = tempRet0;
    $65 = HEAP32[$2>>2]|0;
    $66 = HEAP32[$4>>2]|0;
    $67 = ($65>>>0)<($66>>>0);
    if ($67) {
     $68 = ((($65)) + 1|0);
     HEAP32[$2>>2] = $68;
     $69 = HEAP8[$65>>0]|0;
     $70 = $69&255;
     $$2$be = $70;
    } else {
     $71 = (___shgetc($0)|0);
     $$2$be = $71;
    }
    $72 = (($$2$be) + -48)|0;
    $73 = ($72>>>0)<(10);
    $74 = ($64|0)<(21474836);
    $75 = ($63>>>0)<(2061584302);
    $76 = ($64|0)==(21474836);
    $77 = $76 & $75;
    $78 = $74 | $77;
    $79 = $73 & $78;
    if ($79) {
     $$254 = $$2$be;$55 = $63;$56 = $64;
    } else {
     $$2$lcssa = $$2$be;$94 = $63;$95 = $64;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;$94 = $37;$95 = $50;
  }
  $53 = (($$2$lcssa) + -48)|0;
  $54 = ($53>>>0)<(10);
  if ($54) {
   while(1) {
    $80 = HEAP32[$2>>2]|0;
    $81 = HEAP32[$4>>2]|0;
    $82 = ($80>>>0)<($81>>>0);
    if ($82) {
     $83 = ((($80)) + 1|0);
     HEAP32[$2>>2] = $83;
     $84 = HEAP8[$80>>0]|0;
     $85 = $84&255;
     $$3$be = $85;
    } else {
     $86 = (___shgetc($0)|0);
     $$3$be = $86;
    }
    $87 = (($$3$be) + -48)|0;
    $88 = ($87>>>0)<(10);
    if (!($88)) {
     break;
    }
   }
  }
  $89 = HEAP32[$4>>2]|0;
  $90 = ($89|0)==(0|0);
  if (!($90)) {
   $91 = HEAP32[$2>>2]|0;
   $92 = ((($91)) + -1|0);
   HEAP32[$2>>2] = $92;
  }
  $93 = ($$0|0)!=(0);
  $96 = (_i64Subtract(0,0,($94|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $93 ? $96 : $94;
  $99 = $93 ? $97 : $95;
  $100 = $99;$101 = $98;
 }
 tempRet0 = ($100);
 return ($101|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $$1$ = 0, $$21 = 0.0, $$22 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0;
 var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($1|0)>(2046);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $$ = $8 ? $7 : 1023;
  $$$ = $5 ? $$ : $4;
  $$21 = $5 ? $6 : $3;
  $$0 = $$21;$$020 = $$$;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($1|0)<(-2044);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $$1 = $15 ? $14 : -1022;
   $$1$ = $12 ? $$1 : $11;
   $$22 = $12 ? $13 : $10;
   $$0 = $$22;$$020 = $$1$;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_271($1)|0);
   $19 = tempRet0;
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = tempRet0;
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $$ = $38 ? $39 : $0;
     return (+$$);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = tempRet0;
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = tempRet0;
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = tempRet0;
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = tempRet0;
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = tempRet0;
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = tempRet0;
     $$172$ph = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172$ph = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172$ph|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = tempRet0;
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L23: do {
     if ($86) {
      $$27586 = $$174;$101 = $92;$156 = $97;$157 = $87;$158 = $88;$99 = $91;
      while(1) {
       if ($156) {
        $98 = ($99|0)==(0);
        $100 = ($101|0)==(0);
        $102 = $98 & $100;
        if ($102) {
         break;
        } else {
         $104 = $99;$105 = $101;
        }
       } else {
        $104 = $157;$105 = $158;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = tempRet0;
       $108 = (($$27586) + -1)|0;
       $109 = ($108|0)>($$172$ph|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = tempRet0;
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27586 = $108;$101 = $111;$156 = $116;$157 = $106;$158 = $107;$99 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$118 = $110;$120 = $111;$159 = $106;$160 = $107;
        break L23;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$118 = $91;$120 = $92;$159 = $87;$160 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $117 = ($118|0)==(0);
     $119 = ($120|0)==(0);
     $121 = $117 & $119;
     if ($121) {
      $129 = $0 * 0.0;
      $$070 = $129;
      break;
     } else {
      $123 = $120;$125 = $118;
     }
    } else {
     $123 = $160;$125 = $159;
    }
    $122 = ($123>>>0)<(1048576);
    $124 = ($125>>>0)<(0);
    $126 = ($123|0)==(1048576);
    $127 = $126 & $124;
    $128 = $122 | $127;
    if ($128) {
     $$37683 = $$275$lcssa;$130 = $125;$131 = $123;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = tempRet0;
      $134 = (($$37683) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37683 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $125;$142 = $123;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = tempRet0;
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = tempRet0;
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$154 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = tempRet0;
     $153 = $151;$154 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $154;HEAP32[tempDoublePtr+4>>2] = $152;$155 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $155;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_271($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function ___libc_get_version() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (177349|0);
}
function ___lctrans_cur($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_129()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (___lctrans_impl($0,$5)|0);
 return ($6|0);
}
function ___pthread_self_129() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _bind_textdomain_codeset($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (_strcasecmp($1,181911)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
  }
 }
 return (0|0);
}
function _strcasecmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$01718 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = ($2<<24>>24)==(0);
 L1: do {
  if ($3) {
   $$0$lcssa = $1;$20 = 0;
  } else {
   $4 = $2&255;
   $$01718 = $0;$$019 = $1;$10 = $4;$9 = $2;
   while(1) {
    $5 = HEAP8[$$019>>0]|0;
    $6 = $5&255;
    $7 = ($5<<24>>24)==(0);
    if ($7) {
     $$0$lcssa = $$019;$20 = $9;
     break L1;
    }
    $8 = ($9<<24>>24)==($5<<24>>24);
    if (!($8)) {
     $11 = (_tolower($10)|0);
     $12 = (_tolower($6)|0);
     $13 = ($11|0)==($12|0);
     if (!($13)) {
      $$0$lcssa = $$019;$20 = $9;
      break L1;
     }
    }
    $14 = ((($$01718)) + 1|0);
    $15 = ((($$019)) + 1|0);
    $16 = HEAP8[$14>>0]|0;
    $17 = $16&255;
    $18 = ($16<<24>>24)==(0);
    if ($18) {
     $$0$lcssa = $15;$20 = 0;
     break;
    } else {
     $$01718 = $14;$$019 = $15;$10 = $17;$9 = $16;
    }
   }
  }
 } while(0);
 $19 = $20&255;
 $21 = (_tolower($19)|0);
 $22 = HEAP8[$$0$lcssa>>0]|0;
 $23 = $22&255;
 $24 = (_tolower($23)|0);
 $25 = (($21) - ($24))|0;
 return ($25|0);
}
function _catclose($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _catgets($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($3|0);
}
function _catopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((-1)|0);
}
function _bindtextdomain($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$04955 = 0, $$05154 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond52 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ($0|0)==(0|0);
 L1: do {
  if ($3) {
   $$1 = 0;
  } else {
   $4 = ($1|0)==(0|0);
   if ($4) {
    HEAP32[$2>>2] = 0;
    $5 = (_gettextdir($0,$2)|0);
    $$1 = $5;
    break;
   }
   $6 = (_strlen($0)|0);
   $7 = (_strlen($1)|0);
   $8 = ($6>>>0)>(255);
   $9 = ($7>>>0)>(4095);
   $or$cond = $8 | $9;
   if ($or$cond) {
    $10 = (___errno_location()|0);
    HEAP32[$10>>2] = 22;
    $$1 = 0;
    break;
   }
   ___lock((185880|0));
   $11 = HEAP32[46472]|0;
   $12 = ($11|0)==(0|0);
   L9: do {
    if ($12) {
     label = 11;
    } else {
     $$04955 = $11;
     while(1) {
      $13 = ((($$04955)) + 12|0);
      $14 = HEAP32[$13>>2]|0;
      $15 = (_strcmp($14,$0)|0);
      $16 = ($15|0)==(0);
      if ($16) {
       $17 = ((($$04955)) + 16|0);
       $18 = HEAP32[$17>>2]|0;
       $19 = (_strcmp($18,$1)|0);
       $20 = ($19|0)==(0);
       if ($20) {
        $$150 = $$04955;
        break L9;
       }
      }
      $21 = HEAP32[$$04955>>2]|0;
      $22 = ($21|0)==(0|0);
      if ($22) {
       label = 11;
       break;
      } else {
       $$04955 = $21;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 11) {
     $23 = (($6) + 22)|0;
     $24 = (($23) + ($7))|0;
     $25 = (_malloc($24)|0);
     $26 = ($25|0)==(0|0);
     if ($26) {
      ___unlock((185880|0));
      $$1 = 0;
      break L1;
     } else {
      $27 = HEAP32[46472]|0;
      HEAP32[$25>>2] = $27;
      $28 = ((($25)) + 4|0);
      HEAP32[$28>>2] = $7;
      $29 = ((($25)) + 20|0);
      $30 = ((($25)) + 12|0);
      HEAP32[$30>>2] = $29;
      $31 = (($29) + ($6)|0);
      $32 = ((($31)) + 1|0);
      $33 = ((($25)) + 16|0);
      HEAP32[$33>>2] = $32;
      $34 = (($6) + 1)|0;
      _memcpy(($29|0),($0|0),($34|0))|0;
      $35 = (($7) + 1)|0;
      _memcpy(($32|0),($1|0),($35|0))|0;
      $36 = HEAP32[46472]|0;
      (_a_cas_p(185888,$36,$25)|0);
      $$150 = $25;
      break;
     }
    }
   } while(0);
   $37 = ((($$150)) + 8|0);
   _a_store($37,1);
   $38 = HEAP32[46472]|0;
   $39 = ($38|0)==(0|0);
   if (!($39)) {
    $40 = ((($$150)) + 12|0);
    $$05154 = $38;
    while(1) {
     $41 = HEAP32[$40>>2]|0;
     $42 = (_strcmp($41,$0)|0);
     $43 = ($42|0)!=(0);
     $44 = ($$05154|0)==($$150|0);
     $or$cond52 = $44 | $43;
     if (!($or$cond52)) {
      $45 = ((($$05154)) + 8|0);
      _a_store($45,0);
     }
     $46 = HEAP32[$$05154>>2]|0;
     $47 = ($46|0)==(0|0);
     if ($47) {
      break;
     } else {
      $$05154 = $46;
     }
    }
   }
   ___unlock((185880|0));
   $48 = ((($$150)) + 16|0);
   $49 = HEAP32[$48>>2]|0;
   $$1 = $49;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function _gettextdir($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$010 = 0, $$012 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[46472]|0;
 $3 = ($2|0)==(0|0);
 L1: do {
  if ($3) {
   $$010 = 0;
  } else {
   $$012 = $2;
   while(1) {
    $4 = ((($$012)) + 12|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (_strcmp($5,$0)|0);
    $7 = ($6|0)==(0);
    if ($7) {
     $8 = ((($$012)) + 8|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ($9|0)==(0);
     if (!($10)) {
      break;
     }
    }
    $15 = HEAP32[$$012>>2]|0;
    $16 = ($15|0)==(0|0);
    if ($16) {
     $$010 = 0;
     break L1;
    } else {
     $$012 = $15;
    }
   }
   $11 = ((($$012)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   HEAP32[$1>>2] = $12;
   $13 = ((($$012)) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $$010 = $14;
  }
 } while(0);
 return ($$010|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _a_cas_p($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)==($1|0);
 if ($4) {
  $5 = $2;
  HEAP32[$0>>2] = $5;
 }
 return ($1|0);
}
function _a_store($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 return;
}
function _dcngettext($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0$ph = 0, $$0150 = 0, $$0151 = 0, $$0152187 = 0, $$0154$ph = 0, $$0156 = 0, $$0157 = 0, $$0161190 = 0, $$1 = 0, $$1153 = 0, $$1155 = 0, $$2 = 0, $$2$ph = 0, $$2$pn = 0, $$2163 = 0, $$3 = 0, $$alloca_mul = 0, $$pre = 0, $$pre$phiZ2D = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = (___pthread_self_131()|0);
 $9 = ((($8)) + 188|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($4>>>0)>(5);
 L1: do {
  if ($11) {
   label = 7;
  } else {
   $12 = ($0|0)==(0|0);
   if ($12) {
    $13 = (___gettextdomain()|0);
    $$0150 = $13;
   } else {
    $$0150 = $0;
   }
   $14 = (_strlen($$0150)|0);
   $15 = ($14>>>0)>(255);
   if ($15) {
    label = 7;
   } else {
    $16 = (_gettextdir($$0150,$5)|0);
    $17 = ($16|0)==(0|0);
    if ($17) {
     label = 7;
    } else {
     $18 = (($10) + ($4<<2)|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($19|0)==(0|0);
     if ($20) {
      label = 7;
     } else {
      $23 = ((($19)) + 8|0);
      $24 = (177356 + (($4*12)|0)|0);
      $25 = (177428 + ($4)|0);
      $26 = HEAP8[$25>>0]|0;
      $27 = $26 << 24 >> 24;
      $28 = (_strlen($23)|0);
      $29 = HEAP32[$5>>2]|0;
      $30 = (($14) + 3)|0;
      $31 = (($30) + ($28))|0;
      $32 = (($31) + ($27))|0;
      $33 = (($32) + ($29))|0;
      $34 = (($33) + 4)|0;
      $35 = (_llvm_stacksave()|0);
      $$alloca_mul = $34;
      $36 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
      _memcpy(($36|0),($16|0),($29|0))|0;
      $37 = (($36) + ($29)|0);
      HEAP8[$37>>0] = 47;
      $38 = (($29) + 1)|0;
      $39 = (($36) + ($38)|0);
      _memcpy(($39|0),($23|0),($28|0))|0;
      $40 = (($39) + ($28)|0);
      HEAP8[$40>>0] = 47;
      $41 = (($28) + 1)|0;
      $42 = (($39) + ($41)|0);
      _memcpy(($42|0),($24|0),($27|0))|0;
      $43 = (($42) + ($27)|0);
      HEAP8[$43>>0] = 47;
      $44 = (($27) + 1)|0;
      $45 = (($42) + ($44)|0);
      _memcpy(($45|0),($$0150|0),($14|0))|0;
      $46 = (($45) + ($14)|0);
      HEAP8[$46>>0] = 46;
      $47 = (($14) + 1)|0;
      $48 = (($45) + ($47)|0);
      HEAP8[$48>>0] = 109;
      $49 = (($14) + 2)|0;
      $50 = (($45) + ($49)|0);
      HEAP8[$50>>0] = 111;
      $51 = (($45) + ($30)|0);
      HEAP8[$51>>0] = 0;
      $52 = HEAP32[46473]|0;
      $53 = ($52|0)==(0|0);
      L9: do {
       if ($53) {
        label = 11;
       } else {
        $$0161190 = $52;
        while(1) {
         $54 = ((($$0161190)) + 20|0);
         $55 = (_strcmp($54,$36)|0);
         $56 = ($55|0)==(0);
         if ($56) {
          $$2163 = $$0161190;
          label = 16;
          break L9;
         }
         $57 = HEAP32[$$0161190>>2]|0;
         $58 = ($57|0)==(0|0);
         if ($58) {
          label = 11;
          break;
         } else {
          $$0161190 = $57;
         }
        }
       }
      } while(0);
      L13: do {
       if ((label|0) == 11) {
        $59 = (___map_file(($36|0),($6|0))|0);
        $60 = ($59|0)==(0|0);
        do {
         if (!($60)) {
          $61 = (($33) + 24)|0;
          $62 = (_malloc($61)|0);
          $63 = ($62|0)==(0|0);
          if ($63) {
           $64 = HEAP32[$6>>2]|0;
           (___munmap($59,$64)|0);
           break;
          } else {
           $65 = ((($62)) + 4|0);
           HEAP32[$65>>2] = $59;
           $66 = HEAP32[$6>>2]|0;
           $67 = ((($62)) + 8|0);
           HEAP32[$67>>2] = $66;
           $68 = ((($62)) + 20|0);
           _memcpy(($68|0),($36|0),($34|0))|0;
           $69 = HEAP32[46473]|0;
           HEAP32[$62>>2] = $69;
           (_a_cas_p(185892,$69,$62)|0);
           $$2163 = $62;
           label = 16;
           break L13;
          }
         }
        } while(0);
       }
      } while(0);
      L21: do {
       if ((label|0) == 16) {
        $70 = ((($$2163)) + 4|0);
        $71 = HEAP32[$70>>2]|0;
        $72 = ((($$2163)) + 8|0);
        $73 = HEAP32[$72>>2]|0;
        $74 = (___mo_lookup($71,$73,$1)|0);
        $75 = ($74|0)==(0|0);
        if (!($75)) {
         $76 = ($2|0)==(0|0);
         L24: do {
          if ($76) {
           $$0$ph = $74;
          } else {
           $77 = ((($$2163)) + 12|0);
           $78 = HEAP32[$77>>2]|0;
           $79 = ($78|0)==(0|0);
           if ($79) {
            $80 = HEAP32[$70>>2]|0;
            $81 = HEAP32[$72>>2]|0;
            $82 = (___mo_lookup($80,$81,189597)|0);
            $83 = ($82|0)==(0|0);
            do {
             if ($83) {
              $$0156 = 177466;$$1155 = 2;
             } else {
              $$0152187 = $82;$89 = 0;
              while(1) {
               $84 = (_strncmp($$0152187,177434,13)|0);
               $85 = ($84|0)==(0);
               if ($85) {
                break;
               }
               $86 = (_strchr($$0152187,10)|0);
               $87 = ($86|0)==(0|0);
               $88 = ((($86)) + 1|0);
               if ($87) {
                label = 33;
                break;
               } else {
                $$0152187 = $88;$89 = $86;
               }
              }
              if ((label|0) == 33) {
               HEAP32[$7>>2] = $86;
               $$0156 = 177466;$$1155 = 2;
               break;
              }
              HEAP32[$7>>2] = $89;
              $90 = ((($$0152187)) + 13|0);
              $$1153 = $90;
              while(1) {
               $91 = HEAP8[$$1153>>0]|0;
               $92 = $91 << 24 >> 24;
               $93 = (_isspace($92)|0);
               $94 = ($93|0)==(0);
               $95 = ((($$1153)) + 1|0);
               if ($94) {
                break;
               } else {
                $$1153 = $95;
               }
              }
              $96 = (_strncmp($$1153,177448,9)|0);
              $97 = ($96|0)==(0);
              if ($97) {
               $98 = ((($$1153)) + 9|0);
               $99 = (_strtoul($98,$7,10)|0);
               $100 = HEAP32[$7>>2]|0;
               $$0154$ph = $99;$$2$ph = $100;
              } else {
               $$0154$ph = 2;$$2$ph = $$1153;
              }
              $$2 = $$2$ph;
              while(1) {
               $101 = HEAP8[$$2>>0]|0;
               $102 = ($101<<24>>24)==(0);
               $103 = ($101<<24>>24)!=(59);
               $$ = $102 ^ $103;
               $104 = ((($$2)) + 1|0);
               if ($$) {
                $$2 = $104;
               } else {
                break;
               }
              }
              if ($102) {
               $$0156 = 177466;$$1155 = $$0154$ph;
              } else {
               $$2$pn = $$2;
               while(1) {
                $$3 = ((($$2$pn)) + 1|0);
                $105 = HEAP8[$$3>>0]|0;
                $106 = $105 << 24 >> 24;
                $107 = (_isspace($106)|0);
                $108 = ($107|0)==(0);
                if ($108) {
                 break;
                } else {
                 $$2$pn = $$3;
                }
               }
               $109 = (_strncmp($$3,177458,7)|0);
               $110 = ($109|0)==(0);
               if ($110) {
                $111 = ((($$2$pn)) + 8|0);
                $$0156 = $111;$$1155 = $$0154$ph;
               } else {
                $$0156 = 177466;$$1155 = $$0154$ph;
               }
              }
             }
            } while(0);
            $112 = ((($$2163)) + 16|0);
            _a_store($112,$$1155);
            (_a_cas_p($77,0,$$0156)|0);
            $$pre$phiZ2D = $112;
           } else {
            $$pre = ((($$2163)) + 16|0);
            $$pre$phiZ2D = $$pre;
           }
           $113 = HEAP32[$$pre$phiZ2D>>2]|0;
           $114 = ($113|0)==(0);
           if ($114) {
            $$0$ph = $74;
           } else {
            $115 = HEAP32[$77>>2]|0;
            $116 = (___pleval($115,$3)|0);
            $117 = HEAP32[$$pre$phiZ2D>>2]|0;
            $118 = ($116>>>0)>($117>>>0);
            if ($118) {
             break L21;
            }
            $$0151 = $116;$$0157 = $74;
            while(1) {
             $119 = ($$0151|0)==(0);
             if ($119) {
              $$0$ph = $$0157;
              break L24;
             }
             $120 = (($$0151) + -1)|0;
             $121 = HEAP32[$72>>2]|0;
             $122 = HEAP32[$70>>2]|0;
             $123 = $$0157;
             $124 = (($122) - ($123))|0;
             $125 = (($124) + ($121))|0;
             $126 = (_strnlen($$0157,$125)|0);
             $127 = (($126) + 1)|0;
             $128 = ($127>>>0)<($125>>>0);
             $129 = (($$0157) + ($127)|0);
             if ($128) {
              $$0151 = $120;$$0157 = $129;
             } else {
              break;
             }
            }
            _llvm_stackrestore(($35|0));
            label = 7;
            break L1;
           }
          }
         } while(0);
         _llvm_stackrestore(($35|0));
         $$1 = $$0$ph;
         break L1;
        }
       }
      } while(0);
      _llvm_stackrestore(($35|0));
      label = 7;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $21 = ($3|0)==(1);
  $22 = $21 ? $1 : $2;
  $$1 = $22;
 }
 STACKTOP = sp;return ($$1|0);
}
function ___pthread_self_131() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___gettextdomain() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[46474]|0;
 $1 = ($0|0)!=(0|0);
 $2 = $1 ? $0 : 177503;
 return ($2|0);
}
function ___munmap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 FUNCTION_TABLE_v[8 & 31]();
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $3 = (___syscall91(91,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___pleval($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = (_evalexpr($2,$0,100)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(59);
 $7 = HEAP32[$2>>2]|0;
 $8 = $6 ? $7 : -1;
 STACKTOP = sp;return ($8|0);
}
function _evalexpr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (($2) + -1)|0;
 $4 = ($2|0)<(1);
 if ($4) {
  $$0 = 189597;
 } else {
  $5 = (_evalbinop($0,$1,0,$3)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(63);
  if ($7) {
   $8 = HEAP32[$0>>2]|0;
   $9 = ((($5)) + 1|0);
   $10 = (_evalexpr($0,$9,$3)|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(58);
   if ($12) {
    $13 = HEAP32[$0>>2]|0;
    $14 = ((($10)) + 1|0);
    $15 = (_evalexpr($0,$14,$3)|0);
    $16 = ($8|0)==(0);
    if ($16) {
     $17 = HEAP32[$0>>2]|0;
     $18 = $17;
    } else {
     $18 = $13;
    }
    HEAP32[$0>>2] = $18;
    $$0 = $15;
   } else {
    $$0 = 189597;
   }
  } else {
   $$0 = $5;
  }
 }
 return ($$0|0);
}
function _evalbinop($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$021 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (($3) + -1)|0;
 $5 = (_evalprim($0,$1,$4)|0);
 $6 = (_parseop($0,$5)|0);
 $7 = ((($0)) + 8|0);
 $$021 = $6;
 while(1) {
  $8 = HEAP32[$7>>2]|0;
  $9 = (177472 + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = ($11|0)>($2|0);
  if (!($12)) {
   $$0 = $$021;
   break;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = (_evalbinop($0,$$021,$11,$4)|0);
  $15 = (_binop($0,$8,$13)|0);
  $16 = ($15|0)==(0);
  if ($16) {
   $$021 = $14;
  } else {
   $$0 = 189597;
   break;
  }
 }
 return ($$0|0);
}
function _evalprim($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigittmp = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (($2) + -1)|0;
 $5 = ($2|0)<(1);
 L1: do {
  if ($5) {
   $$0 = 189597;
  } else {
   $6 = (_skipspace($1)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7 << 24 >> 24;
   $isdigittmp = (($8) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $9 = (_strtoul($6,$3,10)|0);
    HEAP32[$0>>2] = $9;
    $10 = HEAP32[$3>>2]|0;
    $11 = ($10|0)==($6|0);
    $12 = ($9|0)==(-1);
    $or$cond = $12 | $11;
    if ($or$cond) {
     $$0 = 189597;
     break;
    }
    $13 = (_skipspace($10)|0);
    $$0 = $13;
    break;
   }
   switch ($7<<24>>24) {
   case 110:  {
    $14 = ((($0)) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    HEAP32[$0>>2] = $15;
    $16 = ((($6)) + 1|0);
    $17 = (_skipspace($16)|0);
    $$0 = $17;
    break L1;
    break;
   }
   case 40:  {
    $18 = ((($6)) + 1|0);
    $19 = (_evalexpr($0,$18,$4)|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = ($20<<24>>24)==(41);
    if (!($21)) {
     $$0 = 189597;
     break L1;
    }
    $22 = ((($19)) + 1|0);
    $23 = (_skipspace($22)|0);
    $$0 = $23;
    break L1;
    break;
   }
   case 33:  {
    $24 = ((($6)) + 1|0);
    $25 = (_evalprim($0,$24,$4)|0);
    $26 = HEAP32[$0>>2]|0;
    $27 = ($26|0)==(0);
    $28 = $27&1;
    HEAP32[$0>>2] = $28;
    $$0 = $25;
    break L1;
    break;
   }
   default: {
    $$0 = 189597;
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _parseop($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$016 = 0, $$018 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $$018 = 0;
 while(1) {
  $3 = (177486 + ($$018)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($2<<24>>24)==($4<<24>>24);
  if ($5) {
   label = 3;
   break;
  }
  $17 = (($$018) + 1)|0;
  $18 = ($$018|0)<(10);
  if ($18) {
   $$018 = $17;
  } else {
   label = 9;
   break;
  }
 }
 L4: do {
  if ((label|0) == 3) {
   $6 = ($$018|0)<(6);
   $7 = ((($1)) + 1|0);
   do {
    if ($6) {
     $8 = HEAP8[$7>>0]|0;
     $9 = (177497 + ($$018)|0);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($8<<24>>24)==($10<<24>>24);
     if ($11) {
      $12 = ((($0)) + 8|0);
      HEAP32[$12>>2] = $$018;
      $13 = ((($1)) + 2|0);
      $$016 = $13;
      break L4;
     } else {
      $14 = ($$018|0)>(3);
      if ($14) {
       break;
      } else {
       label = 9;
       break L4;
      }
     }
    }
   } while(0);
   $15 = (($$018) + 2)|0;
   $16 = ((($0)) + 8|0);
   HEAP32[$16>>2] = $15;
   $$016 = $7;
  }
 } while(0);
 if ((label|0) == 9) {
  $19 = ((($0)) + 8|0);
  HEAP32[$19>>2] = 13;
  $$016 = $1;
 }
 return ($$016|0);
}
function _binop($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 do {
  switch ($1|0) {
  case 0:  {
   $4 = $3 | $2;
   $5 = ($4|0)!=(0);
   $6 = $5&1;
   HEAP32[$0>>2] = $6;
   $$0 = 0;
   break;
  }
  case 1:  {
   $7 = ($2|0)!=(0);
   $8 = ($3|0)!=(0);
   $9 = $7 & $8;
   $10 = $9&1;
   HEAP32[$0>>2] = $10;
   $$0 = 0;
   break;
  }
  case 2:  {
   $11 = ($3|0)==($2|0);
   $12 = $11&1;
   HEAP32[$0>>2] = $12;
   $$0 = 0;
   break;
  }
  case 3:  {
   $13 = ($3|0)!=($2|0);
   $14 = $13&1;
   HEAP32[$0>>2] = $14;
   $$0 = 0;
   break;
  }
  case 4:  {
   $15 = ($3>>>0)<=($2>>>0);
   $16 = $15&1;
   HEAP32[$0>>2] = $16;
   $$0 = 0;
   break;
  }
  case 5:  {
   $17 = ($3>>>0)>=($2>>>0);
   $18 = $17&1;
   HEAP32[$0>>2] = $18;
   $$0 = 0;
   break;
  }
  case 6:  {
   $19 = ($3>>>0)<($2>>>0);
   $20 = $19&1;
   HEAP32[$0>>2] = $20;
   $$0 = 0;
   break;
  }
  case 7:  {
   $21 = ($3>>>0)>($2>>>0);
   $22 = $21&1;
   HEAP32[$0>>2] = $22;
   $$0 = 0;
   break;
  }
  case 8:  {
   $23 = (($3) + ($2))|0;
   HEAP32[$0>>2] = $23;
   $$0 = 0;
   break;
  }
  case 9:  {
   $24 = (($2) - ($3))|0;
   HEAP32[$0>>2] = $24;
   $$0 = 0;
   break;
  }
  case 10:  {
   $25 = Math_imul($3, $2)|0;
   HEAP32[$0>>2] = $25;
   $$0 = 0;
   break;
  }
  case 11:  {
   $26 = ($3|0)==(0);
   if ($26) {
    $$0 = 1;
   } else {
    $27 = (($2>>>0) % ($3>>>0))&-1;
    HEAP32[$0>>2] = $27;
    $$0 = 0;
   }
   break;
  }
  case 12:  {
   $28 = ($3|0)==(0);
   if ($28) {
    $$0 = 1;
   } else {
    $29 = (($2>>>0) / ($3>>>0))&-1;
    HEAP32[$0>>2] = $29;
    $$0 = 0;
   }
   break;
  }
  default: {
   $$0 = 1;
  }
  }
 } while(0);
 return ($$0|0);
}
function _skipspace($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;
 while(1) {
  $1 = HEAP8[$$0>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$0)) + 1|0);
  if ($4) {
   break;
  } else {
   $$0 = $5;
  }
 }
 return ($$0|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _dummy_408() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _dcgettext($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_dcngettext($0,$1,0,1,$2)|0);
 return ($3|0);
}
function _dngettext($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_dcngettext($0,$1,$2,$3,5)|0);
 return ($4|0);
}
function _dgettext($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_dcngettext($0,$1,0,1,5)|0);
 return ($2|0);
}
function ___duplocale($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_malloc(24)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = ($0|0)==((-1)|0);
  $4 = $3 ? (185652) : $0;
  ;HEAP32[$1>>2]=HEAP32[$4>>2]|0;HEAP32[$1+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$1+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$1+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$1+20>>2]=HEAP32[$4+20>>2]|0;
  $$0 = $1;
 }
 return ($$0|0);
}
function _freelocale($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___loc_is_allocated($0)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  _free($0);
 }
 return;
}
function ___loc_is_allocated($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)!=(0|0);
 $2 = ($0|0)!=(185684|0);
 $or$cond = $1 & $2;
 $3 = ($0|0)!=(7100|0);
 $narrow = $3 & $or$cond;
 $4 = $narrow&1;
 return ($4|0);
}
function _iconv_open($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_find_charmap($0)|0);
 $3 = ($2|0)==(-1);
 if ($3) {
  label = 4;
 } else {
  $4 = (_find_charmap($1)|0);
  $5 = ($4|0)==(-1);
  if ($5) {
   label = 4;
  } else {
   $6 = (177512 + ($2)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7&255)>(207);
   if ($8) {
    label = 4;
   } else {
    $10 = $4 << 16;
    $11 = $10 | $2;
    $12 = $11;
    $$0 = $12;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = (___errno_location()|0);
  HEAP32[$9>>2] = 22;
  $$0 = (-1);
 }
 return ($$0|0);
}
function _find_charmap($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$0$ph = 0, $$015 = 0, $$118 = 0, $$pr = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $$ = $2 ? 177512 : $0;
 $$0$ph = 177512;
 L1: while(1) {
  $$pr = HEAP8[$$0$ph>>0]|0;
  $$0 = $$0$ph;$4 = $$pr;
  while(1) {
   $3 = ($4<<24>>24)==(0);
   if ($3) {
    $$015 = -1;
    break L1;
   }
   $5 = (_fuzzycmp($$,$$0)|0);
   $6 = ($5|0)==(0);
   if ($6) {
    $$118 = $$0;
    label = 5;
    break L1;
   }
   $15 = (_strlen($$0)|0);
   $16 = (($15) + 1)|0;
   $17 = (($$0) + ($16)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ($18<<24>>24)==(0);
   if ($19) {
    break;
   } else {
    $$0 = $17;$4 = $18;
   }
  }
  $20 = ((($17)) + 1|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = ($21&255)>(128);
  if ($22) {
   $$sink = 2;
  } else {
   $23 = $21&255;
   $24 = (128 - ($23))|0;
   $25 = $24 >>> 2;
   $26 = ($25*5)|0;
   $27 = (($26) + 2)|0;
   $$sink = $27;
  }
  $28 = (($17) + ($$sink)|0);
  $$0$ph = $28;
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $7 = (_strlen($$118)|0);
   $8 = (($7) + 1)|0;
   $9 = (($$118) + ($8)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==(0);
   if ($11) {
    break;
   } else {
    $$118 = $9;
    label = 5;
   }
  }
  $12 = ((($9)) + 1|0);
  $13 = $12;
  $14 = (($13) - (177512))|0;
  $$015 = $14;
 }
 return ($$015|0);
}
function _fuzzycmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$01121 = 0, $$012 = 0, $$022 = 0, $$1$lcssa = 0, $$118 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = ($2<<24>>24)==(0);
 L1: do {
  if ($3) {
   $$0$lcssa = $1;$26 = 0;
   label = 8;
  } else {
   $$01121 = $0;$$022 = $1;$7 = $2;
   while(1) {
    $4 = HEAP8[$$022>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$0$lcssa = $$022;$26 = $7;
     label = 8;
     break L1;
    }
    $6 = $7&255;
    $$118 = $$01121;$28 = $7;$9 = $6;
    while(1) {
     $8 = $9 | 32;
     $10 = (($8) + -97)|0;
     $11 = ($10>>>0)>(26);
     $12 = (($9) + -48)|0;
     $13 = ($12>>>0)>(10);
     $or$cond = $13 & $11;
     if (!($or$cond)) {
      $$1$lcssa = $$118;$18 = $28;
      break;
     }
     $14 = ((($$118)) + 1|0);
     $$pr = HEAP8[$14>>0]|0;
     $15 = $$pr&255;
     $16 = ($$pr<<24>>24)==(0);
     if ($16) {
      $$1$lcssa = $14;$18 = 0;
      break;
     } else {
      $$118 = $14;$28 = $$pr;$9 = $15;
     }
    }
    $17 = $18 | 32;
    $19 = ($17<<24>>24)==($4<<24>>24);
    if (!($19)) {
     $$012 = 1;
     break L1;
    }
    $20 = ((($$1$lcssa)) + 1|0);
    $21 = ((($$022)) + 1|0);
    $22 = HEAP8[$20>>0]|0;
    $23 = ($22<<24>>24)==(0);
    if ($23) {
     $$0$lcssa = $21;$26 = 0;
     label = 8;
     break;
    } else {
     $$01121 = $20;$$022 = $21;$7 = $22;
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $24 = HEAP8[$$0$lcssa>>0]|0;
  $25 = ($26<<24>>24)!=($24<<24>>24);
  $27 = $25&1;
  $$012 = $27;
 }
 return ($$012|0);
}
function _iconv_close($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _iconv($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$8 = 0, $$0321378 = 0, $$0322382 = 0, $$0323384 = 0, $$0325 = 0, $$0326388 = 0, $$0327 = 0, $$0340 = 0, $$0340$ph = 0, $$0341 = 0, $$0345383 = 0, $$0376 = 0, $$1 = 0, $$10 = 0, $$11387 = 0, $$1328 = 0, $$1334 = 0, $$1346$ = 0, $$1346381 = 0;
 var $$2 = 0, $$2329 = 0, $$2335385 = 0, $$2343 = 0, $$3 = 0, $$3330386 = 0, $$3344 = 0, $$3348 = 0, $$353 = 0, $$354 = 0, $$357 = 0, $$360 = 0, $$4 = 0, $$4331 = 0, $$4349377 = 0, $$5332 = 0, $$5338 = 0, $$5350$ = 0, $$5350375 = 0, $$6339379 = 0;
 var $$6380 = 0, $$7352 = 0, $$8 = 0, $$9 = 0, $$in = 0, $$lobit = 0, $$mask = 0, $$pn = 0, $$pre = 0, $$sink14 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $exitcond = 0, $exitcond395 = 0, $exitcond396 = 0, $exitcond397 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond355 = 0, $or$cond356 = 0;
 var $or$cond359 = 0, $or$cond362 = 0, $or$cond5 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 $10 = $0;
 $11 = $10 & 65535;
 $12 = $10 >>> 16;
 $13 = (177512 + ($12)|0);
 $14 = ((($13)) + 1|0);
 $15 = (177512 + ($11)|0);
 $16 = ((($15)) + 1|0);
 $17 = $5;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 $21 = HEAP8[$13>>0]|0;
 $22 = HEAP8[$15>>0]|0;
 $23 = (___pthread_self_138()|0);
 $24 = ((($23)) + 188|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($1|0)==(0|0);
 do {
  if ($26) {
   $$0325 = 0;
  } else {
   $27 = HEAP32[$1>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    $$0325 = 0;
   } else {
    $29 = HEAP32[$2>>2]|0;
    $30 = ($29|0)==(0);
    if ($30) {
     $$0325 = 0;
    } else {
     HEAP32[$24>>2] = 7100;
     $31 = $21&255;
     $32 = (($31) + 128)|0;
     $33 = $31 & 254;
     $34 = ($33|0)==(196);
     $35 = ($21<<24>>24)==(-38);
     $36 = ($21<<24>>24)==(-40);
     $37 = $22&255;
     $38 = (($37) + -192)|0;
     $39 = ($38>>>0)>(8);
     $40 = $11;
     $41 = (181878 + ($38)|0);
     $42 = (($37) + 128)|0;
     $43 = (128 - ($37))|0;
     $44 = ($43|0)==(0);
     $45 = $21 & -2;
     $46 = ($45<<24>>24)==(-60);
     $47 = (($31) + -192)|0;
     $48 = ($47>>>0)<(7);
     $$pre = HEAP32[$1>>2]|0;
     $$0326388 = 0;$$in = $$pre;$52 = $29;
     L5: while(1) {
      $49 = HEAP8[$$in>>0]|0;
      $50 = $49&255;
      $51 = ($49<<24>>24)<(0);
      $brmerge = $51 | $48;
      L7: do {
       if ($brmerge) {
        do {
         switch ($21<<24>>24) {
         case -57:  {
          $$0340$ph = 84;
          label = 114;
          break L5;
          break;
         }
         case -56:  {
          $53 = (_mbrtowc($6,$$in,$52,$5)|0);
          switch ($53|0) {
          case -1:  {
           $$0340$ph = 84;
           label = 114;
           break L5;
           break;
          }
          case -2:  {
           $$0340 = 22;
           break L5;
           break;
          }
          case 0:  {
           $$0341 = 1;
           break;
          }
          default: {
           $$0341 = $53;
          }
          }
          $54 = HEAP32[$6>>2]|0;
          $$2343 = $$0341;$$8 = $54;
          label = 86;
          break L7;
          break;
         }
         case -58:  {
          $55 = ($52>>>0)<(4);
          if ($55) {
           $$0340 = 22;
           break L5;
          }
          $56 = HEAP32[$$in>>2]|0;
          $$0327 = $56;
          label = 14;
          break;
         }
         case -61: case -64:  {
          $57 = ($52>>>0)<(4);
          if ($57) {
           $$0340 = 22;
           break L5;
          }
          $58 = (_get_32($$in,$31)|0);
          $$0327 = $58;
          label = 14;
          break;
         }
         case -63: case -62: case -59: case -60:  {
          $62 = ($52>>>0)<(2);
          if ($62) {
           $$0340 = 22;
           break L5;
          }
          $63 = (_get_16($$in,$31)|0);
          $64 = $63 & -1024;
          switch ($64|0) {
          case 56320:  {
           $$0340$ph = 84;
           label = 114;
           break L5;
           break;
          }
          case 55296:  {
           break;
          }
          default: {
           $$2343 = 2;$$8 = $63;
           label = 86;
           break L7;
          }
          }
          if ($34) {
           $$0340$ph = 84;
           label = 114;
           break L5;
          }
          $65 = ($52>>>0)<(4);
          if ($65) {
           $$0340 = 22;
           break L5;
          }
          $66 = ((($$in)) + 2|0);
          $67 = (_get_16($66,$31)|0);
          $68 = (($67) + -56320)|0;
          $69 = ($68>>>0)>(1023);
          if ($69) {
           $$0340$ph = 84;
           label = 114;
           break L5;
          }
          $70 = $63 << 10;
          $71 = (($70) + -56557568)|0;
          $72 = (($71) + ($68))|0;
          $$2343 = 4;$$8 = $72;
          label = 86;
          break L7;
          break;
         }
         case -47:  {
          $73 = (($50) + -161)|0;
          $74 = ($73>>>0)<(63);
          if ($74) {
           $75 = (($50) + 65216)|0;
           $$2343 = 1;$$8 = $75;
           label = 86;
           break L7;
          }
          $76 = ($52>>>0)<(2);
          if ($76) {
           $$0340 = 22;
           break L5;
          }
          $77 = ((($$in)) + 1|0);
          $78 = HEAP8[$77>>0]|0;
          $79 = $78&255;
          $80 = (($50) + -129)|0;
          $81 = ($80>>>0)<(31);
          if ($81) {
           $$1328 = $80;
          } else {
           $82 = $50 & 240;
           $83 = ($82|0)==(224);
           if (!($83)) {
            $$0340$ph = 84;
            label = 114;
            break L5;
           }
           $84 = (($50) + -193)|0;
           $$1328 = $84;
          }
          $85 = $$1328 << 1;
          $86 = (($79) + -64)|0;
          $87 = ($86>>>0)<(95);
          if ($87) {
           $88 = ($78<<24>>24)==(127);
           if ($88) {
            $$0340$ph = 84;
            label = 114;
            break L5;
           }
           $$lobit = ($78<<24>>24) >> 7;
           $89 = $$lobit << 24 >> 24;
           $90 = (($86) + ($89))|0;
           $$1334 = $90;$$2329 = $85;
          } else {
           $91 = (($79) + -159)|0;
           $92 = ($91>>>0)<(94);
           $$353 = $92 ? $91 : $79;
           $93 = $92&1;
           $$354 = $85 | $93;
           $$1334 = $$353;$$2329 = $$354;
          }
          $94 = ((26266 + (($$2329*188)|0)|0) + ($$1334<<1)|0);
          $95 = HEAP16[$94>>1]|0;
          $96 = $95&65535;
          $97 = ($95<<16>>16)==(0);
          if ($97) {
           $$0340$ph = 84;
           label = 114;
           break L5;
          } else {
           $$2343 = 2;$$8 = $96;
           label = 86;
           break L7;
          }
          break;
         }
         case -48:  {
          $98 = ($52>>>0)<(2);
          if ($98) {
           $$0340 = 22;
           break L5;
          }
          $99 = ((($$in)) + 1|0);
          $100 = HEAP8[$99>>0]|0;
          $101 = $100&255;
          $102 = ($49<<24>>24)==(-114);
          if ($102) {
           $103 = (($101) + -161)|0;
           $104 = ($103>>>0)>(62);
           if ($104) {
            $$0340$ph = 84;
            label = 114;
            break L5;
           }
           $105 = (($101) + 65216)|0;
           $$2343 = 2;$$8 = $105;
           label = 86;
           break L7;
          } else {
           $106 = (($50) + -161)|0;
           $107 = (($101) + -161)|0;
           $108 = ($106>>>0)>(83);
           $109 = ($107>>>0)>(93);
           $or$cond3 = $108 | $109;
           if ($or$cond3) {
            $$0340$ph = 84;
            label = 114;
            break L5;
           }
           $110 = ((26266 + (($106*188)|0)|0) + ($107<<1)|0);
           $111 = HEAP16[$110>>1]|0;
           $112 = $111&65535;
           $113 = ($111<<16>>16)==(0);
           if ($113) {
            $$0340$ph = 84;
            label = 114;
            break L5;
           } else {
            $$2343 = 2;$$8 = $112;
            label = 86;
            break L7;
           }
          }
          break;
         }
         case -38:  {
          $114 = ($49&255)<(161);
          if ($114) {
           $$0340$ph = 84;
           label = 114;
           break L5;
          }
          break;
         }
         case -40: case -39:  {
          break;
         }
         case -32:  {
          $162 = ($52>>>0)<(2);
          if ($162) {
           $$0340 = 22;
           break L5;
          }
          $163 = ((($$in)) + 1|0);
          $164 = HEAP8[$163>>0]|0;
          $165 = $164&255;
          $166 = (($165) + -64)|0;
          $167 = ($166>>>0)>(190);
          $168 = (($165) + -127)|0;
          $169 = ($168>>>0)<(34);
          $or$cond359 = $167 | $169;
          if ($or$cond359) {
           $$0340$ph = 84;
           label = 114;
           break L5;
          }
          $170 = ($166>>>0)>(62);
          $171 = (($165) + -98)|0;
          $$360 = $170 ? $171 : $166;
          $172 = (($50) + -161)|0;
          $173 = ($172>>>0)>(88);
          if (!($173)) {
           $203 = ((100282 + (($172*314)|0)|0) + ($$360<<1)|0);
           $204 = HEAP16[$203>>1]|0;
           $205 = $204&65535;
           $206 = ($172|0)==(39);
           L53: do {
            if ($206) {
             switch ($$360|0) {
             case 66: case 58: case 60:  {
              $208 = 131072;
              break L53;
              break;
             }
             default: {
             }
             }
             $208 = 0;
            } else {
             $208 = 0;
            }
           } while(0);
           $207 = $208 | $205;
           $209 = ($207|0)==(0);
           if ($209) {
            $$0340$ph = 84;
            label = 114;
            break L5;
           } else {
            $$2343 = 2;$$8 = $207;
            label = 86;
            break L7;
           }
          }
          $174 = (($50) + -135)|0;
          $175 = ($174>>>0)>(119);
          if ($175) {
           $$0340$ph = 84;
           label = 114;
           break L5;
          }
          $176 = ($49&255)<(161);
          $177 = (($50) + -224)|0;
          $$4331 = $176 ? $174 : $177;
          $178 = ($$4331*157)|0;
          $179 = (($$360) + ($178))|0;
          $180 = $179 >>> 4;
          $181 = (($180) + 4867)|0;
          $182 = (89938 + ($181<<1)|0);
          $183 = HEAP16[$182>>1]|0;
          $184 = $183&65535;
          $185 = $179 & 15;
          $186 = $184 >>> $185;
          $187 = $186 << 17;
          $188 = $187 & 131072;
          $189 = (89938 + ($179<<1)|0);
          $190 = HEAP16[$189>>1]|0;
          $191 = $190&65535;
          $192 = $188 | $191;
          $$mask = $192 & 196352;
          $193 = ($$mask|0)==(56320);
          if (!($193)) {
           $202 = ($192|0)==(0);
           if ($202) {
            $$0340$ph = 84;
            label = 114;
            break L5;
           } else {
            $$2343 = 2;$$8 = $192;
            label = 86;
            break L7;
           }
          }
          if ($39) {
           $$3348 = 2;
          } else {
           $194 = HEAP8[$41>>0]|0;
           $195 = $194 << 24 >> 24;
           $$3348 = $195;
          }
          $196 = HEAP32[$4>>2]|0;
          $197 = ($$3348>>>0)>($196>>>0);
          if ($197) {
           $$0340$ph = 7;
           label = 114;
           break L5;
          }
          $198 = $191 & 255;
          $199 = (181888 + ($198)|0);
          HEAP32[$7>>2] = $199;
          HEAP32[$8>>2] = 4;
          $200 = (_iconv($40,$7,$8,$3,$4)|0);
          $201 = (($200) + ($$0326388))|0;
          $$3344 = 2;$$4 = $201;
          break L7;
          break;
         }
         case -24:  {
          $210 = ($52>>>0)<(2);
          if ($210) {
           $$0340 = 22;
           break L5;
          }
          $211 = ((($$in)) + 1|0);
          $212 = HEAP8[$211>>0]|0;
          $213 = $212&255;
          $214 = (($50) + -161)|0;
          $215 = (($213) + -161)|0;
          $216 = ($214>>>0)>(92);
          $217 = ($215>>>0)>(93);
          $or$cond9 = $216 | $217;
          if (!($or$cond9)) {
           $248 = ((128228 + (($214*188)|0)|0) + ($215<<1)|0);
           $249 = HEAP16[$248>>1]|0;
           $250 = $249&65535;
           $251 = ($249<<16>>16)==(0);
           if ($251) {
            $$0340$ph = 84;
            label = 114;
            break L5;
           } else {
            $$2343 = 2;$$8 = $250;
            label = 86;
            break L7;
           }
          }
          $218 = (($50) + -129)|0;
          $219 = ($218>>>0)>(92);
          if ($219) {
           $$0340$ph = 84;
           label = 114;
           break L5;
          }
          $220 = ($218>>>0)>(68);
          $221 = ($212&255)>(82);
          $or$cond11 = $220 & $221;
          if ($or$cond11) {
           $$0340$ph = 84;
           label = 114;
           break L5;
          }
          $222 = (($213) + -65)|0;
          $223 = ($222>>>0)<(26);
          do {
           if ($223) {
            $$5338 = $222;
           } else {
            $224 = (($213) + -97)|0;
            $225 = ($224>>>0)<(26);
            if ($225) {
             $226 = (($213) + -71)|0;
             $$5338 = $226;
             break;
            }
            $227 = (($213) + -129)|0;
            $228 = ($227>>>0)<(126);
            if (!($228)) {
             $$0340$ph = 84;
             label = 114;
             break L5;
            }
            $229 = (($213) + -77)|0;
            $$5338 = $229;
           }
          } while(0);
          $230 = ($218>>>0)<(32);
          $231 = ($218*178)|0;
          $232 = ($214*84)|0;
          $233 = (($232) + 5696)|0;
          $$pn = $230 ? $231 : $233;
          $$5332 = (($$pn) + 44032)|0;
          $234 = (($$5332) + ($$5338))|0;
          $235 = ($234>>>0)<(44032);
          if ($235) {
           $$2343 = 2;$$8 = $234;
           label = 86;
           break L7;
          } else {
           $$6339379 = 44032;$$6380 = $234;
          }
          while(1) {
           $236 = (($$6380) - ($$6339379))|0;
           $$0321378 = 0;$$4349377 = 0;
           while(1) {
            $$0376 = 0;$$5350375 = $$4349377;
            while(1) {
             $241 = ((128228 + (($$0321378*188)|0)|0) + ($$0376<<1)|0);
             $242 = HEAP16[$241>>1]|0;
             $243 = $242&65535;
             $244 = (($243) - ($$6339379))|0;
             $245 = ($244>>>0)<=($236>>>0);
             $246 = $245&1;
             $$5350$ = (($$5350375) + ($246))|0;
             $247 = (($$0376) + 1)|0;
             $exitcond = ($247|0)==(94);
             if ($exitcond) {
              break;
             } else {
              $$0376 = $247;$$5350375 = $$5350$;
             }
            }
            $240 = (($$0321378) + 1)|0;
            $exitcond395 = ($240|0)==(93);
            if ($exitcond395) {
             break;
            } else {
             $$0321378 = $240;$$4349377 = $$5350$;
            }
           }
           $237 = (($$6380) + 1)|0;
           $238 = (($$5350$) + ($$6380))|0;
           $239 = ($238>>>0)<($237>>>0);
           if ($239) {
            $$2343 = 2;$$8 = $238;
            label = 86;
            break L7;
           } else {
            $$6339379 = $237;$$6380 = $238;
           }
          }
          break;
         }
         default: {
          $252 = ($32>>>0)>($50>>>0);
          if ($252) {
           $$2343 = 1;$$8 = $50;
           label = 86;
           break L7;
          }
          $253 = (($50) - ($32))|0;
          $254 = ($253*5)|0;
          $255 = $254 >>> 2;
          $256 = (($14) + ($255)|0);
          $257 = HEAP8[$256>>0]|0;
          $258 = $257&255;
          $259 = $253 << 1;
          $260 = $259 & 6;
          $261 = $258 >>> $260;
          $262 = (($255) + 1)|0;
          $263 = (($14) + ($262)|0);
          $264 = HEAP8[$263>>0]|0;
          $265 = $264&255;
          $266 = (8 - ($260))|0;
          $267 = $265 << $266;
          $268 = $267 & 1023;
          $269 = $268 | $261;
          $270 = (145712 + ($269<<1)|0);
          $271 = HEAP16[$270>>1]|0;
          $272 = $271&65535;
          $273 = ($269|0)==(0);
          $$ = $273 ? $50 : $272;
          $274 = ($$|0)==(1);
          if ($274) {
           $$0340$ph = 84;
           label = 114;
           break L5;
          } else {
           $$2343 = 1;$$8 = $$;
           label = 86;
           break L7;
          }
         }
         }
        } while(0);
        if ((label|0) == 14) {
         label = 0;
         $59 = $$0327 & -2048;
         $60 = ($59|0)==(55296);
         $61 = ($$0327>>>0)>(1114111);
         $or$cond = $61 | $60;
         if ($or$cond) {
          $$0340$ph = 84;
          label = 114;
          break L5;
         } else {
          $$2343 = 4;$$8 = $$0327;
          label = 86;
          break;
         }
        }
        $115 = (($50) + -129)|0;
        $116 = ($115>>>0)>(125);
        if ($116) {
         $$0340$ph = 84;
         label = 114;
         break L5;
        }
        $117 = ($52>>>0)<(2);
        if ($117) {
         $$0340 = 22;
         break L5;
        }
        $118 = ((($$in)) + 1|0);
        $119 = HEAP8[$118>>0]|0;
        $120 = $119&255;
        $121 = ($119&255)<(161);
        $or$cond355 = $35 & $121;
        if ($or$cond355) {
         $$0340$ph = 84;
         label = 114;
         break L5;
        }
        $122 = (($120) + -64)|0;
        $123 = ($122>>>0)>(190);
        $124 = ($119<<24>>24)==(127);
        $or$cond5 = $124 | $123;
        if (!($or$cond5)) {
         $157 = ($122>>>0)>(63);
         $158 = (($120) + -65)|0;
         $$357 = $157 ? $158 : $122;
         $159 = ((42058 + (($115*380)|0)|0) + ($$357<<1)|0);
         $160 = HEAP16[$159>>1]|0;
         $161 = $160&65535;
         $$2343 = 2;$$8 = $161;
         label = 86;
         break;
        }
        $125 = (($120) + -48)|0;
        $126 = ($125>>>0)<(10);
        $or$cond356 = $36 & $126;
        if (!($or$cond356)) {
         $$0340$ph = 84;
         label = 114;
         break L5;
        }
        $127 = ($52>>>0)<(4);
        if ($127) {
         $$0340 = 22;
         break L5;
        }
        $128 = ((($$in)) + 2|0);
        $129 = HEAP8[$128>>0]|0;
        $130 = $129&255;
        $131 = (($130) + -129)|0;
        $132 = ($131>>>0)>(126);
        if ($132) {
         $$0340$ph = 84;
         label = 114;
         break L5;
        }
        $133 = ((($$in)) + 3|0);
        $134 = HEAP8[$133>>0]|0;
        $135 = $134&255;
        $136 = (($135) + -48)|0;
        $137 = ($136>>>0)>(9);
        if ($137) {
         $$0340$ph = 84;
         label = 114;
         break L5;
        }
        $138 = ($115*10)|0;
        $139 = (($138) + ($120))|0;
        $140 = ($139*1260)|0;
        $141 = ($131*10)|0;
        $142 = (($140) + -60352)|0;
        $143 = (($142) + ($141))|0;
        $144 = (($143) + ($136))|0;
        $$2335385 = 0;$$3330386 = $144;
        while(1) {
         $145 = (($$3330386) - ($$2335385))|0;
         $$0323384 = 0;$$0345383 = 0;
         while(1) {
          $$0322382 = 0;$$1346381 = $$0345383;
          while(1) {
           $150 = ((42058 + (($$0323384*380)|0)|0) + ($$0322382<<1)|0);
           $151 = HEAP16[$150>>1]|0;
           $152 = $151&65535;
           $153 = (($152) - ($$2335385))|0;
           $154 = ($153>>>0)<=($145>>>0);
           $155 = $154&1;
           $$1346$ = (($$1346381) + ($155))|0;
           $156 = (($$0322382) + 1)|0;
           $exitcond396 = ($156|0)==(190);
           if ($exitcond396) {
            break;
           } else {
            $$0322382 = $156;$$1346381 = $$1346$;
           }
          }
          $149 = (($$0323384) + 1)|0;
          $exitcond397 = ($149|0)==(126);
          if ($exitcond397) {
           break;
          } else {
           $$0323384 = $149;$$0345383 = $$1346$;
          }
         }
         $146 = (($$3330386) + 1)|0;
         $147 = (($$1346$) + ($$3330386))|0;
         $148 = ($147>>>0)<($146>>>0);
         if ($148) {
          $$2343 = 4;$$8 = $147;
          label = 86;
          break;
         } else {
          $$2335385 = $146;$$3330386 = $147;
         }
        }
       } else {
        $$2343 = 1;$$8 = $50;
        label = 86;
       }
      } while(0);
      if ((label|0) == 86) {
       label = 0;
       L111: do {
        switch ($22<<24>>24) {
        case -58:  {
         $275 = HEAP32[$4>>2]|0;
         $276 = ($275>>>0)<(4);
         if ($276) {
          $$0340$ph = 7;
          label = 114;
          break L5;
         }
         $277 = HEAP32[$3>>2]|0;
         HEAP32[$277>>2] = $$8;
         $278 = ((($277)) + 4|0);
         HEAP32[$3>>2] = $278;
         $$3 = $$0326388;$$sink14 = 4;$339 = $275;
         label = 111;
         break;
        }
        case -56:  {
         $279 = HEAP32[$4>>2]|0;
         $280 = ($279>>>0)<(4);
         if ($280) {
          $281 = (_wctomb($9,$$8)|0);
          $282 = ($279>>>0)<($281>>>0);
          if ($282) {
           label = 92;
           break L5;
          }
          $283 = HEAP32[$3>>2]|0;
          _memcpy(($283|0),($9|0),($281|0))|0;
          $$7352 = $281;$287 = $283;
         } else {
          $284 = HEAP32[$3>>2]|0;
          $285 = (_wctomb($284,$$8)|0);
          $$7352 = $285;$287 = $284;
         }
         $286 = (($287) + ($$7352)|0);
         HEAP32[$3>>2] = $286;
         $$3 = $$0326388;$$sink14 = $$7352;$339 = $279;
         label = 111;
         break;
        }
        case -57:  {
         $288 = ($$8>>>0)>(127);
         if ($288) {
          $$1 = $$0326388;
          label = 96;
         } else {
          $$2 = $$0326388;$$9 = $$8;
          label = 97;
         }
         break;
        }
        case -63: case -62: case -59: case -60:  {
         $319 = ($$8>>>0)<(65536);
         $or$cond362 = $46 | $319;
         $320 = HEAP32[$4>>2]|0;
         if ($or$cond362) {
          $321 = ($320>>>0)<(2);
          if ($321) {
           $$0340$ph = 7;
           label = 114;
           break L5;
          }
          $322 = ($$8>>>0)>(65535);
          $$$8 = $322 ? 65533 : $$8;
          $323 = HEAP32[$3>>2]|0;
          _put_16($323,$$$8,$37);
          $324 = ((($323)) + 2|0);
          HEAP32[$3>>2] = $324;
          $$3 = $$0326388;$$sink14 = 2;$339 = $320;
          label = 111;
          break L111;
         } else {
          $325 = ($320>>>0)<(4);
          if ($325) {
           $$0340$ph = 7;
           label = 114;
           break L5;
          }
          $326 = (($$8) + -65536)|0;
          $327 = HEAP32[$3>>2]|0;
          $328 = $326 >>> 10;
          $329 = $328 | 55296;
          _put_16($327,$329,$37);
          $330 = ((($327)) + 2|0);
          $331 = $326 & 1023;
          $332 = $331 | 56320;
          _put_16($330,$332,$37);
          $333 = ((($327)) + 4|0);
          HEAP32[$3>>2] = $333;
          $$3 = $$0326388;$$sink14 = 4;$339 = $320;
          label = 111;
          break L111;
         }
         break;
        }
        case -61: case -64:  {
         $334 = HEAP32[$4>>2]|0;
         $335 = ($334>>>0)<(4);
         if ($335) {
          $$0340$ph = 7;
          label = 114;
          break L5;
         }
         $336 = HEAP32[$3>>2]|0;
         _put_32($336,$$8,$37);
         $337 = ((($336)) + 4|0);
         HEAP32[$3>>2] = $337;
         $$3 = $$0326388;$$sink14 = 4;$339 = $334;
         label = 111;
         break;
        }
        default: {
         $$2 = $$0326388;$$9 = $$8;
         label = 97;
        }
        }
       } while(0);
       L129: while(1) {
        if ((label|0) == 96) {
         label = 0;
         $289 = (($$1) + 1)|0;
         $$2 = $289;$$9 = 42;
         label = 97;
         continue;
        }
        else if ((label|0) == 97) {
         label = 0;
         $290 = HEAP32[$4>>2]|0;
         $291 = ($290|0)==(0);
         if ($291) {
          $$0340$ph = 7;
          label = 114;
          break L5;
         }
         $292 = ($$9>>>0)<($42>>>0);
         if ($292) {
          $$10 = $$9;
         } else {
          if ($44) {
           $$1 = $$2;
           label = 96;
           continue;
          } else {
           $$11387 = 0;
          }
          while(1) {
           $296 = ($$11387*5)|0;
           $297 = $296 >>> 2;
           $298 = (($16) + ($297)|0);
           $299 = HEAP8[$298>>0]|0;
           $300 = $299&255;
           $301 = $$11387 << 1;
           $302 = $301 & 6;
           $303 = $300 >>> $302;
           $304 = (($297) + 1)|0;
           $305 = (($16) + ($304)|0);
           $306 = HEAP8[$305>>0]|0;
           $307 = $306&255;
           $308 = (8 - ($302))|0;
           $309 = $307 << $308;
           $310 = $309 & 1023;
           $311 = $310 | $303;
           $312 = (145712 + ($311<<1)|0);
           $313 = HEAP16[$312>>1]|0;
           $314 = $313&65535;
           $315 = ($$9|0)==($314|0);
           if ($315) {
            break;
           }
           $317 = (($$11387) + 1)|0;
           $318 = ($317>>>0)<($43>>>0);
           if ($318) {
            $$11387 = $317;
           } else {
            $$1 = $$2;
            label = 96;
            continue L129;
           }
          }
          $316 = (($$11387) + 128)|0;
          $$10 = $316;
         }
         $293 = $$10&255;
         $294 = HEAP32[$3>>2]|0;
         $295 = ((($294)) + 1|0);
         HEAP32[$3>>2] = $295;
         HEAP8[$294>>0] = $293;
         $$3 = $$2;$$sink14 = 1;$339 = $290;
         label = 111;
         continue;
        }
        else if ((label|0) == 111) {
         label = 0;
         $338 = (($339) - ($$sink14))|0;
         HEAP32[$4>>2] = $338;
         $$3344 = $$2343;$$4 = $$3;
         break;
        }
       }
      }
      $340 = HEAP32[$1>>2]|0;
      $341 = (($340) + ($$3344)|0);
      HEAP32[$1>>2] = $341;
      $342 = (($52) - ($$3344))|0;
      HEAP32[$2>>2] = $342;
      $343 = ($342|0)==(0);
      if ($343) {
       label = 113;
       break;
      } else {
       $$0326388 = $$4;$$in = $341;$52 = $342;
      }
     }
     if ((label|0) == 92) {
      $$0340 = 7;
     }
     else if ((label|0) == 113) {
      HEAP32[$24>>2] = $25;
      $$0325 = $$4;
      break;
     }
     else if ((label|0) == 114) {
      $$0340 = $$0340$ph;
     }
     $344 = (___errno_location()|0);
     HEAP32[$344>>2] = $$0340;
     HEAP32[$24>>2] = $25;
     $$0325 = -1;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0325|0);
}
function ___pthread_self_138() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _mbrtowc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($3|0)==(0|0);
 $$ = $5 ? 185900 : $3;
 $6 = HEAP32[$$>>2]|0;
 $7 = ($1|0)==(0|0);
 L1: do {
  if ($7) {
   $8 = ($6|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    label = 17;
   }
  } else {
   $9 = ($0|0)==(0|0);
   $$47 = $9 ? $4 : $0;
   $10 = ($2|0)==(0);
   if ($10) {
    $$0 = -2;
   } else {
    $11 = ($6|0)==(0);
    if ($11) {
     $12 = HEAP8[$1>>0]|0;
     $13 = ($12<<24>>24)>(-1);
     if ($13) {
      $14 = $12&255;
      HEAP32[$$47>>2] = $14;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      $$0 = $16;
      break;
     }
     $17 = (___pthread_self_417()|0);
     $18 = ((($17)) + 188|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(0|0);
     $22 = HEAP8[$1>>0]|0;
     if ($21) {
      $23 = $22 << 24 >> 24;
      $24 = $23 & 57343;
      HEAP32[$$47>>2] = $24;
      $$0 = 1;
      break;
     }
     $25 = $22&255;
     $26 = (($25) + -194)|0;
     $27 = ($26>>>0)>(50);
     if ($27) {
      label = 17;
      break;
     }
     $28 = ((($1)) + 1|0);
     $29 = (7132 + ($26<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($2) + -1)|0;
     $32 = ($31|0)==(0);
     if ($32) {
      $$2 = $30;
     } else {
      $$03952 = $28;$$04051 = $30;$$04350 = $31;
      label = 11;
     }
    } else {
     $$03952 = $1;$$04051 = $6;$$04350 = $2;
     label = 11;
    }
    L14: do {
     if ((label|0) == 11) {
      $33 = HEAP8[$$03952>>0]|0;
      $34 = $33&255;
      $35 = $34 >>> 3;
      $36 = (($35) + -16)|0;
      $37 = $$04051 >> 26;
      $38 = (($35) + ($37))|0;
      $39 = $36 | $38;
      $40 = ($39>>>0)>(7);
      if ($40) {
       label = 17;
       break L1;
      } else {
       $$1 = $$03952;$$141 = $$04051;$$144 = $$04350;$44 = $33;
      }
      while(1) {
       $41 = $$141 << 6;
       $42 = ((($$1)) + 1|0);
       $43 = $44&255;
       $45 = (($43) + -128)|0;
       $46 = $45 | $41;
       $47 = (($$144) + -1)|0;
       $48 = ($46|0)<(0);
       if (!($48)) {
        break;
       }
       $50 = ($47|0)==(0);
       if ($50) {
        $$2 = $46;
        break L14;
       }
       $51 = HEAP8[$42>>0]|0;
       $52 = $51 & -64;
       $53 = ($52<<24>>24)==(-128);
       if ($53) {
        $$1 = $42;$$141 = $46;$$144 = $47;$44 = $51;
       } else {
        label = 17;
        break L1;
       }
      }
      HEAP32[$$>>2] = 0;
      HEAP32[$$47>>2] = $46;
      $49 = (($2) - ($47))|0;
      $$0 = $49;
      break L1;
     }
    } while(0);
    HEAP32[$$>>2] = $$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 17) {
  HEAP32[$$>>2] = 0;
  $54 = (___errno_location()|0);
  HEAP32[$54>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _get_32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 3;
 $3 = (($0) + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 24;
 $7 = $2 ^ 1;
 $8 = (($0) + ($7)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 16;
 $12 = $11 | $6;
 $13 = $2 ^ 2;
 $14 = (($0) + ($13)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 << 8;
 $18 = $12 | $17;
 $19 = $2 ^ 3;
 $20 = (($0) + ($19)|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $18 | $22;
 return ($23|0);
}
function _get_16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 1;
 $3 = (($0) + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = $2 ^ 1;
 $8 = (($0) + ($7)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $6 | $10;
 return ($11|0);
}
function _put_16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 & 1;
 $4 = $1 >>> 8;
 $5 = $4&255;
 $6 = (($0) + ($3)|0);
 HEAP8[$6>>0] = $5;
 $7 = $1&255;
 $8 = $3 ^ 1;
 $9 = (($0) + ($8)|0);
 HEAP8[$9>>0] = $7;
 return;
}
function _put_32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 & 3;
 $4 = $1 >>> 24;
 $5 = $4&255;
 $6 = (($0) + ($3)|0);
 HEAP8[$6>>0] = $5;
 $7 = $1 >>> 16;
 $8 = $7&255;
 $9 = $3 ^ 1;
 $10 = (($0) + ($9)|0);
 HEAP8[$10>>0] = $8;
 $11 = $1 >>> 8;
 $12 = $11&255;
 $13 = $3 ^ 2;
 $14 = (($0) + ($13)|0);
 HEAP8[$14>>0] = $12;
 $15 = $1&255;
 $16 = $3 ^ 3;
 $17 = (($0) + ($16)|0);
 HEAP8[$17>>0] = $15;
 return;
}
function ___pthread_self_417() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _isalnum_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isalnum($0)|0);
 return ($2|0);
}
function _isalpha_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isalpha($0)|0);
 return ($2|0);
}
function _isblank_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isblank($0)|0);
 return ($2|0);
}
function _iscntrl_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iscntrl($0)|0);
 return ($2|0);
}
function _isdigit_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($0) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $2 = $isdigit&1;
 return ($2|0);
}
function _isgraph_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isgraph($0)|0);
 return ($2|0);
}
function _islower_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_islower($0)|0);
 return ($2|0);
}
function _isprint_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isprint($0)|0);
 return ($2|0);
}
function _ispunct_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_ispunct($0)|0);
 return ($2|0);
}
function _isspace_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isspace($0)|0);
 return ($2|0);
}
function _isupper_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isupper($0)|0);
 return ($2|0);
}
function _iswalnum_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswalnum($0)|0);
 return ($2|0);
}
function _iswalpha_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswalpha($0)|0);
 return ($2|0);
}
function _iswblank_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswblank($0)|0);
 return ($2|0);
}
function _iswcntrl_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswcntrl($0)|0);
 return ($2|0);
}
function _iswctype_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_iswctype($0,$1)|0);
 return ($3|0);
}
function _iswdigit_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswdigit($0)|0);
 return ($2|0);
}
function _iswgraph_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswgraph($0)|0);
 return ($2|0);
}
function _iswlower_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswlower($0)|0);
 return ($2|0);
}
function _iswprint_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswprint($0)|0);
 return ($2|0);
}
function _iswpunct_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswpunct($0)|0);
 return ($2|0);
}
function _iswspace_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswspace($0)|0);
 return ($2|0);
}
function _iswupper_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswupper($0)|0);
 return ($2|0);
}
function _iswxdigit_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_iswxdigit($0)|0);
 return ($2|0);
}
function _isxdigit_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isxdigit($0)|0);
 return ($2|0);
}
function ___nl_langinfo_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$0$lcssa29 = 0, $$0$ph = 0, $$02427 = 0, $$025 = 0, $$028 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 >> 16;
 $3 = $0 & 65535;
 $4 = ($0|0)==(14);
 L1: do {
  if ($4) {
   $5 = (___pthread_self_191()|0);
   $6 = ((($5)) + 188|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   $10 = $9 ? 181905 : 181911;
   $$025 = $10;
  } else {
   switch ($2|0) {
   case 1:  {
    $11 = ($3>>>0)>(1);
    if ($11) {
     $$025 = 189597;
     break L1;
    } else {
     $$0$ph = 182252;
     label = 8;
    }
    break;
   }
   case 2:  {
    $12 = ($3>>>0)>(49);
    if ($12) {
     $$025 = 189597;
     break L1;
    } else {
     $$0$ph = 181936;
     label = 8;
    }
    break;
   }
   case 4:  {
    $13 = ($3|0)==(0);
    if ($13) {
     $$0$lcssa29 = 189597;
    } else {
     $$025 = 189597;
     break L1;
    }
    break;
   }
   case 5:  {
    $14 = ($3>>>0)>(3);
    if ($14) {
     $$025 = 189597;
     break L1;
    } else {
     $$0$ph = 181917;
     label = 8;
    }
    break;
   }
   default: {
    $$025 = 189597;
    break L1;
   }
   }
   if ((label|0) == 8) {
    $15 = ($3|0)==(0);
    if ($15) {
     $$0$lcssa = $$0$ph;
    } else {
     $$02427 = $3;$$028 = $$0$ph;
     while(1) {
      $$1 = $$028;
      while(1) {
       $16 = HEAP8[$$1>>0]|0;
       $17 = ($16<<24>>24)==(0);
       $18 = ((($$1)) + 1|0);
       if ($17) {
        break;
       } else {
        $$1 = $18;
       }
      }
      $19 = (($$02427) + -1)|0;
      $20 = ($19|0)==(0);
      if ($20) {
       $$0$lcssa = $18;
       break;
      } else {
       $$02427 = $19;$$028 = $18;
      }
     }
    }
    $21 = ($2|0)==(1);
    if ($21) {
     $$025 = $$0$lcssa;
     break;
    } else {
     $$0$lcssa29 = $$0$lcssa;
    }
   }
   $22 = HEAP8[$$0$lcssa29>>0]|0;
   $23 = ($22<<24>>24)==(0);
   if ($23) {
    $$025 = $$0$lcssa29;
   } else {
    $24 = (($1) + ($2<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (___lctrans($$0$lcssa29,$25)|0);
    $$025 = $26;
   }
  }
 } while(0);
 return ($$025|0);
}
function ___pthread_self_191() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___nl_langinfo($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_191()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___nl_langinfo_l($0,$3)|0);
 return ($4|0);
}
function ___get_locale($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$093$lcssa = 0, $$093118 = 0, $$094114 = 0, $$1 = 0, $$1100111 = 0, $$195112 = 0, $$2122 = 0, $$2123 = 0, $$2124 = 0, $$4 = 0, $$neg = 0, $$pre121 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c_dot_utf8$$4 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $2 = sp + 8|0;
 $3 = sp;
 $4 = HEAP8[$1>>0]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (_getenv((182255|0))|0);
   $7 = ($6|0)==(0|0);
   if (!($7)) {
    $8 = HEAP8[$6>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if (!($9)) {
     $$1 = $6;
     break;
    }
   }
   $10 = (177356 + (($0*12)|0)|0);
   $11 = (_getenv(($10|0))|0);
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    $13 = HEAP8[$11>>0]|0;
    $14 = ($13<<24>>24)==(0);
    if (!($14)) {
     $$1 = $11;
     break;
    }
   }
   $15 = (_getenv((182262|0))|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    $17 = HEAP8[$15>>0]|0;
    $18 = ($17<<24>>24)==(0);
    if (!($18)) {
     $$1 = $15;
     break;
    }
   }
   $$1 = 182267;
  } else {
   $$1 = $1;
  }
 } while(0);
 $$093118 = 0;
 L13: while(1) {
  $19 = (($$1) + ($$093118)|0);
  $20 = HEAP8[$19>>0]|0;
  switch ($20<<24>>24) {
  case 47: case 0:  {
   $$093$lcssa = $$093118;
   break L13;
   break;
  }
  default: {
  }
  }
  $21 = (($$093118) + 1)|0;
  $22 = ($21>>>0)<(15);
  if ($22) {
   $$093118 = $21;
  } else {
   $$093$lcssa = $21;
   break;
  }
 }
 $23 = HEAP8[$$1>>0]|0;
 $24 = ($23<<24>>24)==(46);
 if ($24) {
  $$2122 = 182267;
  label = 15;
 } else {
  $25 = (($$1) + ($$093$lcssa)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)==(0);
  if ($27) {
   $28 = ($23<<24>>24)==(67);
   if ($28) {
    $$2122 = $$1;
    label = 15;
   } else {
    $$2123 = $$1;
    label = 16;
   }
  } else {
   $$2122 = 182267;
   label = 15;
  }
 }
 if ((label|0) == 15) {
  $29 = ((($$2122)) + 1|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = ($30<<24>>24)==(0);
  if ($31) {
   $$2124 = $$2122;
   label = 18;
  } else {
   $$2123 = $$2122;
   label = 16;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $32 = (_strcmp($$2123,182267)|0);
   $33 = ($32|0)==(0);
   if ($33) {
    $$2124 = $$2123;
    label = 18;
   } else {
    $34 = (_strcmp($$2123,182275)|0);
    $35 = ($34|0)==(0);
    if ($35) {
     $$2124 = $$2123;
     label = 18;
    } else {
     $40 = HEAP32[46476]|0;
     $41 = ($40|0)==(0|0);
     if (!($41)) {
      $$094114 = $40;
      while(1) {
       $42 = ((($$094114)) + 8|0);
       $43 = (_strcmp($$2123,$42)|0);
       $44 = ($43|0)==(0);
       if ($44) {
        $$0 = $$094114;
        break L22;
       }
       $45 = ((($$094114)) + 24|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = ($46|0)==(0|0);
       if ($47) {
        break;
       } else {
        $$094114 = $46;
       }
      }
     }
     ___lock((185908|0));
     $48 = HEAP32[46476]|0;
     $49 = ($48|0)==(0|0);
     L32: do {
      if (!($49)) {
       $$195112 = $48;
       while(1) {
        $50 = ((($$195112)) + 8|0);
        $51 = (_strcmp($$2123,$50)|0);
        $52 = ($51|0)==(0);
        if ($52) {
         break;
        }
        $53 = ((($$195112)) + 24|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = ($54|0)==(0|0);
        if ($55) {
         break L32;
        } else {
         $$195112 = $54;
        }
       }
       ___unlock((185908|0));
       $$0 = $$195112;
       break L22;
      }
     } while(0);
     $56 = HEAP32[(185620)>>2]|0;
     $57 = ($56|0)==(0);
     L39: do {
      if ($57) {
       $58 = (_getenv((182281|0))|0);
       $59 = ($58|0)==(0|0);
       if ($59) {
        label = 41;
       } else {
        $60 = HEAP8[$58>>0]|0;
        $61 = ($60<<24>>24)==(0);
        if ($61) {
         label = 41;
        } else {
         $62 = (254 - ($$093$lcssa))|0;
         $63 = (($$093$lcssa) + 1)|0;
         $$1100111 = $58;
         while(1) {
          $64 = (___strchrnul($$1100111,58)|0);
          $65 = $64;
          $66 = $$1100111;
          $67 = (($65) - ($66))|0;
          $68 = HEAP8[$64>>0]|0;
          $69 = ($68<<24>>24)!=(0);
          $$neg = $69 << 31 >> 31;
          $70 = (($67) + ($$neg))|0;
          $71 = ($70>>>0)<($62>>>0);
          if ($71) {
           _memcpy(($2|0),($$1100111|0),($70|0))|0;
           $72 = (($2) + ($70)|0);
           HEAP8[$72>>0] = 47;
           $73 = ((($72)) + 1|0);
           _memcpy(($73|0),($$2123|0),($$093$lcssa|0))|0;
           $74 = (($63) + ($70))|0;
           $75 = (($2) + ($74)|0);
           HEAP8[$75>>0] = 0;
           $76 = (___map_file(($2|0),($3|0))|0);
           $77 = ($76|0)==(0|0);
           if (!($77)) {
            break;
           }
           $$pre121 = HEAP8[$64>>0]|0;
           $87 = $$pre121;
          } else {
           $87 = $68;
          }
          $86 = ($87<<24>>24)!=(0);
          $88 = $86&1;
          $89 = (($64) + ($88)|0);
          $90 = HEAP8[$89>>0]|0;
          $91 = ($90<<24>>24)==(0);
          if ($91) {
           label = 41;
           break L39;
          } else {
           $$1100111 = $89;
          }
         }
         $78 = (_malloc(28)|0);
         $79 = ($78|0)==(0|0);
         if ($79) {
          $92 = HEAP32[$3>>2]|0;
          (___munmap($76,$92)|0);
          label = 41;
          break;
         } else {
          HEAP32[$78>>2] = $76;
          $80 = HEAP32[$3>>2]|0;
          $81 = ((($78)) + 4|0);
          HEAP32[$81>>2] = $80;
          $82 = ((($78)) + 8|0);
          _memcpy(($82|0),($$2123|0),($$093$lcssa|0))|0;
          $83 = (($82) + ($$093$lcssa)|0);
          HEAP8[$83>>0] = 0;
          $84 = HEAP32[46476]|0;
          $85 = ((($78)) + 24|0);
          HEAP32[$85>>2] = $84;
          HEAP32[46476] = $78;
          $$4 = $78;
          break;
         }
        }
       }
      } else {
       label = 41;
      }
     } while(0);
     if ((label|0) == 41) {
      $93 = (_malloc(28)|0);
      $94 = ($93|0)==(0|0);
      if ($94) {
       $$4 = $93;
      } else {
       $95 = HEAP32[1763]|0;
       HEAP32[$93>>2] = $95;
       $96 = HEAP32[(7056)>>2]|0;
       $97 = ((($93)) + 4|0);
       HEAP32[$97>>2] = $96;
       $98 = ((($93)) + 8|0);
       _memcpy(($98|0),($$2123|0),($$093$lcssa|0))|0;
       $99 = (($98) + ($$093$lcssa)|0);
       HEAP8[$99>>0] = 0;
       $100 = HEAP32[46476]|0;
       $101 = ((($93)) + 24|0);
       HEAP32[$101>>2] = $100;
       HEAP32[46476] = $93;
       $$4 = $93;
      }
     }
     $102 = ($$4|0)==(0|0);
     $103 = ($0|0)==(0);
     $or$cond = $103 & $102;
     $__c_dot_utf8$$4 = $or$cond ? 7052 : $$4;
     ___unlock((185908|0));
     $$0 = $__c_dot_utf8$$4;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 18) {
   $36 = ($0|0)==(0);
   if ($36) {
    $37 = ((($$2124)) + 1|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = ($38<<24>>24)==(46);
    if ($39) {
     $$0 = 7052;
     break;
    }
   }
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _localeconv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22816|0);
}
function ___newlocale($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$033$ = 0, $$03339 = 0, $$03440 = 0, $$036 = 0, $$13538 = 0, $$pre = 0, $$pre42 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond41 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = (___loc_is_allocated($2)|0);
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = ($2|0)!=(0|0);
   $$03339 = 0;$$13538 = 0;
   while(1) {
    $$pre = 1 << $$13538;
    $$pre42 = $$pre & $0;
    $13 = ($$pre42|0)==(0);
    $or$cond = $6 & $13;
    if ($or$cond) {
     $14 = (($2) + ($$13538<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     $$0 = $15;
    } else {
     $16 = ($$pre42|0)!=(0);
     $17 = $16 ? $1 : 189597;
     $18 = (___get_locale($$13538,$17)|0);
     $$0 = $18;
    }
    $19 = ($$0|0)!=(0|0);
    $20 = $19&1;
    $$033$ = (($$03339) + ($20))|0;
    $21 = (($3) + ($$13538<<2)|0);
    HEAP32[$21>>2] = $$0;
    $22 = (($$13538) + 1)|0;
    $exitcond = ($22|0)==(6);
    if ($exitcond) {
     break;
    } else {
     $$03339 = $$033$;$$13538 = $22;
    }
   }
   switch ($$033$|0) {
   case 0:  {
    $$036 = 185684;
    break L1;
    break;
   }
   case 1:  {
    $23 = HEAP32[$3>>2]|0;
    $24 = ($23|0)==(7052|0);
    if ($24) {
     $$036 = 7100;
     break L1;
    }
    break;
   }
   default: {
   }
   }
   $$036 = $2;
  } else {
   $$03440 = 0;
   while(1) {
    $7 = 1 << $$03440;
    $8 = $7 & $0;
    $9 = ($8|0)==(0);
    if (!($9)) {
     $10 = (($2) + ($$03440<<2)|0);
     $11 = (___get_locale($$03440,$1)|0);
     HEAP32[$10>>2] = $11;
    }
    $12 = (($$03440) + 1)|0;
    $exitcond41 = ($12|0)==(6);
    if ($exitcond41) {
     $$036 = $2;
     break;
    } else {
     $$03440 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$036|0);
}
function _setlocale($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04956 = 0, $$050$ = 0, $$05055 = 0, $$05253 = 0, $$151 = 0, $$154 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond57 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ($0>>>0)>(6);
 do {
  if ($3) {
   $$0 = 0;
  } else {
   ___lock((185916|0));
   $4 = ($0|0)==(6);
   if (!($4)) {
    $26 = (_setlocale_one_unlocked($0,$1)|0);
    ___unlock((185916|0));
    $$0 = $26;
    break;
   }
   $5 = ($1|0)==(0|0);
   if ($5) {
    $$05253 = 189144;$$154 = 0;
   } else {
    dest=$2; src=182294; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$04956 = 0;$$05055 = $1;
    while(1) {
     $6 = (___strchrnul($$05055,59)|0);
     $7 = $6;
     $8 = $$05055;
     $9 = (($7) - ($8))|0;
     $10 = ($9|0)<(16);
     if ($10) {
      _memcpy(($2|0),($$05055|0),($9|0))|0;
      $11 = (($2) + ($9)|0);
      HEAP8[$11>>0] = 0;
      $12 = HEAP8[$6>>0]|0;
      $13 = ($12<<24>>24)==(0);
      $14 = ((($6)) + 1|0);
      $$050$ = $13 ? $$05055 : $14;
      $$151 = $$050$;
     } else {
      $$151 = $$05055;
     }
     (_setlocale_one_unlocked($$04956,$2)|0);
     $15 = (($$04956) + 1)|0;
     $exitcond57 = ($15|0)==(6);
     if ($exitcond57) {
      break;
     } else {
      $$04956 = $15;$$05055 = $$151;
     }
    }
    $$05253 = 189144;$$154 = 0;
   }
   while(1) {
    $16 = (185652 + ($$154<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)!=(0|0);
    $19 = ((($17)) + 8|0);
    $20 = $18 ? $19 : 182310;
    $21 = (_strlen($20)|0);
    _memcpy(($$05253|0),($20|0),($21|0))|0;
    $22 = (($$05253) + ($21)|0);
    HEAP8[$22>>0] = 59;
    $23 = (($21) + 1)|0;
    $24 = (($$05253) + ($23)|0);
    $25 = (($$154) + 1)|0;
    $exitcond = ($25|0)==(6);
    if ($exitcond) {
     break;
    } else {
     $$05253 = $24;$$154 = $25;
    }
   }
   HEAP8[$22>>0] = 0;
   ___unlock((185916|0));
   $$0 = 189144;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _setlocale_one_unlocked($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $5 = (185652 + ($0<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $$0 = $6;
 } else {
  $3 = (___get_locale($0,$1)|0);
  $4 = (185652 + ($0<<2)|0);
  HEAP32[$4>>2] = $3;
  $$0 = $3;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = ((($$0)) + 8|0);
 $9 = $7 ? $8 : 182310;
 return ($9|0);
}
function _strcasecmp_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strcasecmp($0,$1)|0);
 return ($3|0);
}
function _strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strerror($0)|0);
 return ($2|0);
}
function _strfmon_l($0,$1,$2,$3,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $varargs = $varargs|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 HEAP32[$4>>2] = $varargs;
 $5 = (_vstrfmon_l($0,$1,$3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _vstrfmon_l($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$075$be = 0, $$075$lcssa = 0, $$07541 = 0, $$076$lcssa = 0, $$07616 = 0, $$077 = 0, $$07833 = 0, $$07923 = 0, $$081$be = 0, $$08140 = 0, $$082 = 0, $$084$be = 0, $$08439 = 0, $$1 = 0, $$180 = 0, $$183 = 0, $$185 = 0, $$185$pn = 0, $$2 = 0;
 var $$3 = 0, $$4$lcssa = 0, $$415 = 0, $$5 = 0, $$520 = 0, $$524 = 0, $$6 = 0, $$7 = 0, $$730 = 0, $$734 = 0, $$8 = 0, $$pr = 0, $$pr5 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded3 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $isdigit = 0, $isdigit14 = 0, $isdigit2 = 0, $isdigit232 = 0, $isdigit4 = 0, $isdigit422 = 0, $isdigittmp = 0, $isdigittmp1 = 0;
 var $isdigittmp13 = 0, $isdigittmp131 = 0, $isdigittmp135 = 0, $isdigittmp17 = 0, $isdigittmp3 = 0, $isdigittmp321 = 0, $isdigittmp325 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $4 = ($1|0)==(0);
 L1: do {
  if ($4) {
   $$075$lcssa = $0;
   label = 21;
  } else {
   $$07541 = $0;$$08140 = $1;$$08439 = $2;
   L2: while(1) {
    $5 = HEAP8[$$08439>>0]|0;
    switch ($5<<24>>24) {
    case 0:  {
     $$075$lcssa = $$07541;
     label = 21;
     break L1;
     break;
    }
    case 37:  {
     $10 = ((($$08439)) + 1|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(37);
     if ($12) {
      $$185 = $10;$7 = 37;
      label = 3;
     } else {
      $$082 = 0;$$2 = $10;$14 = $11;
      L6: while(1) {
       $13 = $14 << 24 >> 24;
       switch ($13|0) {
       case 61:  {
        $15 = ((($$2)) + 1|0);
        $$183 = $$082;$$3 = $15;
        break;
       }
       case 33: case 43: case 40: case 94:  {
        $$183 = $$082;$$3 = $$2;
        break;
       }
       case 45:  {
        $$183 = 1;$$3 = $$2;
        break;
       }
       default: {
        break L6;
       }
       }
       $16 = ((($$3)) + 1|0);
       $$pre = HEAP8[$16>>0]|0;
       $$082 = $$183;$$2 = $16;$14 = $$pre;
      }
      $isdigittmp13 = (($13) + -48)|0;
      $isdigit14 = ($isdigittmp13>>>0)<(10);
      if ($isdigit14) {
       $$07616 = 0;$$415 = $$2;$isdigittmp17 = $isdigittmp13;
       while(1) {
        $17 = ($$07616*10)|0;
        $18 = (($17) + ($isdigittmp17))|0;
        $19 = ((($$415)) + 1|0);
        $$pr = HEAP8[$19>>0]|0;
        $20 = $$pr << 24 >> 24;
        $isdigittmp = (($20) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $$07616 = $18;$$415 = $19;$isdigittmp17 = $isdigittmp;
        } else {
         $$076$lcssa = $18;$$4$lcssa = $19;$$pr5 = $$pr;
         break;
        }
       }
      } else {
       $$076$lcssa = 0;$$4$lcssa = $$2;$$pr5 = $14;
      }
      $21 = ($$pr5<<24>>24)==(35);
      if ($21) {
       $$520 = ((($$4$lcssa)) + 1|0);
       $22 = HEAP8[$$520>>0]|0;
       $23 = $22 << 24 >> 24;
       $isdigittmp321 = (($23) + -48)|0;
       $isdigit422 = ($isdigittmp321>>>0)<(10);
       if ($isdigit422) {
        $$07923 = 0;$$524 = $$520;$isdigittmp325 = $isdigittmp321;
        while(1) {
         $24 = ($$07923*10)|0;
         $25 = (($isdigittmp325) + ($24))|0;
         $$5 = ((($$524)) + 1|0);
         $26 = HEAP8[$$5>>0]|0;
         $27 = $26 << 24 >> 24;
         $isdigittmp3 = (($27) + -48)|0;
         $isdigit4 = ($isdigittmp3>>>0)<(10);
         if ($isdigit4) {
          $$07923 = $25;$$524 = $$5;$isdigittmp325 = $isdigittmp3;
         } else {
          $$180 = $25;$$6 = $$5;$29 = $26;
          break;
         }
        }
       } else {
        $$180 = 0;$$6 = $$520;$29 = $22;
       }
      } else {
       $$180 = 0;$$6 = $$4$lcssa;$29 = $$pr5;
      }
      $28 = ($29<<24>>24)==(46);
      if ($28) {
       $$730 = ((($$6)) + 1|0);
       $30 = HEAP8[$$730>>0]|0;
       $31 = $30 << 24 >> 24;
       $isdigittmp131 = (($31) + -48)|0;
       $isdigit232 = ($isdigittmp131>>>0)<(10);
       if ($isdigit232) {
        $$07833 = 0;$$734 = $$730;$isdigittmp135 = $isdigittmp131;
        while(1) {
         $32 = ($$07833*10)|0;
         $33 = (($isdigittmp135) + ($32))|0;
         $$7 = ((($$734)) + 1|0);
         $34 = HEAP8[$$7>>0]|0;
         $35 = $34 << 24 >> 24;
         $isdigittmp1 = (($35) + -48)|0;
         $isdigit2 = ($isdigittmp1>>>0)<(10);
         if ($isdigit2) {
          $$07833 = $33;$$734 = $$7;$isdigittmp135 = $isdigittmp1;
         } else {
          $$1 = $33;$$8 = $$7;
          break;
         }
        }
       } else {
        $$1 = 0;$$8 = $$730;
       }
      } else {
       $$1 = 2;$$8 = $$6;
      }
      $36 = (($$180) + 1)|0;
      $37 = (($36) + ($$1))|0;
      $38 = ($$082|0)==(0);
      $39 = ($$076$lcssa|0)>($37|0);
      $or$cond = $38 & $39;
      $$077 = $or$cond ? $$076$lcssa : $37;
      $arglist_current = HEAP32[$3>>2]|0;
      $40 = $arglist_current;
      $41 = ((0) + 8|0);
      $expanded3 = $41;
      $expanded = (($expanded3) - 1)|0;
      $42 = (($40) + ($expanded))|0;
      $43 = ((0) + 8|0);
      $expanded7 = $43;
      $expanded6 = (($expanded7) - 1)|0;
      $expanded5 = $expanded6 ^ -1;
      $44 = $42 & $expanded5;
      $45 = $44;
      $46 = +HEAPF64[$45>>3];
      $arglist_next = ((($45)) + 8|0);
      HEAP32[$3>>2] = $arglist_next;
      HEAP32[$vararg_buffer>>2] = $$077;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $$1;
      $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
      HEAPF64[$vararg_ptr2>>3] = $46;
      $47 = (_snprintf($$07541,$$08140,182312,$vararg_buffer)|0);
      $48 = ($$08140>>>0)>($47>>>0);
      if (!($48)) {
       break L2;
      }
      $50 = (($$07541) + ($47)|0);
      $51 = (($$08140) - ($47))|0;
      $$075$be = $50;$$081$be = $51;$$185$pn = $$8;
     }
     break;
    }
    default: {
     $$185 = $$08439;$7 = $5;
     label = 3;
    }
    }
    if ((label|0) == 3) {
     label = 0;
     $6 = ((($$07541)) + 1|0);
     HEAP8[$$07541>>0] = $7;
     $8 = (($$08140) + -1)|0;
     $$075$be = $6;$$081$be = $8;$$185$pn = $$185;
    }
    $$084$be = ((($$185$pn)) + 1|0);
    $9 = ($$081$be|0)==(0);
    if ($9) {
     $$075$lcssa = $$075$be;
     label = 21;
     break L1;
    } else {
     $$07541 = $$075$be;$$08140 = $$081$be;$$08439 = $$084$be;
    }
   }
   $49 = (___errno_location()|0);
   HEAP32[$49>>2] = 7;
   $$0 = -1;
  }
 } while(0);
 if ((label|0) == 21) {
  $52 = $$075$lcssa;
  $53 = $0;
  $54 = (($52) - ($53))|0;
  $$0 = $54;
 }
 STACKTOP = sp;return ($$0|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _strfmon($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 (___pthread_self_217()|0);
 $4 = (_vstrfmon_l($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function ___pthread_self_217() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _strncasecmp_l($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_strncasecmp($0,$1,$2)|0);
 return ($4|0);
}
function _strncasecmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$02125 = 0, $$02227 = 0, $$02227$in = 0, $$023 = 0, $$026 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$023 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$23 = 0;
   } else {
    $6 = $4&255;
    $$02125 = $0;$$02227$in = $2;$$026 = $1;$12 = $4;$13 = $6;
    while(1) {
     $$02227 = (($$02227$in) + -1)|0;
     $7 = HEAP8[$$026>>0]|0;
     $8 = $7&255;
     $9 = ($7<<24>>24)!=(0);
     $10 = ($$02227|0)!=(0);
     $or$cond = $10 & $9;
     if (!($or$cond)) {
      $$0$lcssa = $$026;$23 = $12;
      break L3;
     }
     $11 = ($12<<24>>24)==($7<<24>>24);
     if (!($11)) {
      $14 = (_tolower($13)|0);
      $15 = (_tolower($8)|0);
      $16 = ($14|0)==($15|0);
      if (!($16)) {
       $$0$lcssa = $$026;$23 = $12;
       break L3;
      }
     }
     $17 = ((($$02125)) + 1|0);
     $18 = ((($$026)) + 1|0);
     $19 = HEAP8[$17>>0]|0;
     $20 = $19&255;
     $21 = ($19<<24>>24)==(0);
     if ($21) {
      $$0$lcssa = $18;$23 = 0;
      break;
     } else {
      $$02125 = $17;$$02227$in = $$02227;$$026 = $18;$12 = $19;$13 = $20;
     }
    }
   }
  } while(0);
  $22 = $23&255;
  $24 = (_tolower($22)|0);
  $25 = HEAP8[$$0$lcssa>>0]|0;
  $26 = $25&255;
  $27 = (_tolower($26)|0);
  $28 = (($24) - ($27))|0;
  $$023 = $28;
 }
 return ($$023|0);
}
function ___strxfrm_l($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_strlen($1)|0);
 $5 = ($4>>>0)<($2>>>0);
 if ($5) {
  (_strcpy($0,$1)|0);
 }
 return ($4|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function _strxfrm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (___pthread_self_218()|0);
 $3 = (___strxfrm_l($0,$1,$2,0)|0);
 return ($3|0);
}
function ___pthread_self_218() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _textdomain($0) {
 $0 = $0|0;
 var $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $2 = (___gettextdomain()|0);
   $$1 = $2;
  } else {
   $3 = (_strlen($0)|0);
   $4 = ($3>>>0)>(255);
   if ($4) {
    $5 = (___errno_location()|0);
    HEAP32[$5>>2] = 22;
    $$1 = 0;
    break;
   }
   $6 = HEAP32[46474]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = (_malloc(256)|0);
    HEAP32[46474] = $8;
    $9 = ($8|0)==(0|0);
    if ($9) {
     $$1 = 0;
     break;
    } else {
     $11 = $8;
    }
   } else {
    $11 = $6;
   }
   $10 = (($3) + 1)|0;
   _memcpy(($11|0),($0|0),($10|0))|0;
   $$1 = $11;
  }
 } while(0);
 return ($$1|0);
}
function _gettext($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_dgettext(0,$0)|0);
 return ($1|0);
}
function _ngettext($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_dngettext(0,$0,$1,$2)|0);
 return ($3|0);
}
function _tolower_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_tolower($0)|0);
 return ($2|0);
}
function _toupper_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_toupper($0)|0);
 return ($2|0);
}
function _towctrans_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_towctrans($0,$1)|0);
 return ($3|0);
}
function _towlower_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_towlower($0)|0);
 return ($2|0);
}
function _towupper_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_towupper($0)|0);
 return ($2|0);
}
function ___uselocale($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_232()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($0|0)==(0|0);
 if (!($4)) {
  $5 = ($0|0)==((-1)|0);
  $6 = $5 ? (185652) : $0;
  HEAP32[$2>>2] = $6;
 }
 $7 = ($3|0)==((185652)|0);
 $8 = $7 ? (-1) : $3;
 return ($8|0);
}
function ___pthread_self_232() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___wcscoll_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_wcscmp($0,$1)|0);
 return ($3|0);
}
function _wcscmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$015 = 0, $$0914 = 0, $$lcssa = 0, $$lcssa11 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond1013 = 0;
 var $or$cond12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($2|0)!=($3|0);
 $5 = ($2|0)==(0);
 $or$cond12 = $5 | $4;
 $6 = ($3|0)==(0);
 $or$cond1013 = $6 | $or$cond12;
 if ($or$cond1013) {
  $$lcssa = $3;$$lcssa11 = $2;
 } else {
  $$015 = $1;$$0914 = $0;
  while(1) {
   $7 = ((($$0914)) + 4|0);
   $8 = ((($$015)) + 4|0);
   $9 = HEAP32[$7>>2]|0;
   $10 = HEAP32[$8>>2]|0;
   $11 = ($9|0)!=($10|0);
   $12 = ($9|0)==(0);
   $or$cond = $12 | $11;
   $13 = ($10|0)==(0);
   $or$cond10 = $13 | $or$cond;
   if ($or$cond10) {
    $$lcssa = $10;$$lcssa11 = $9;
    break;
   } else {
    $$015 = $8;$$0914 = $7;
   }
  }
 }
 $14 = (($$lcssa11) - ($$lcssa))|0;
 return ($14|0);
}
function _wcscoll($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (___pthread_self_233()|0);
 $2 = (___wcscoll_l($0,$1,0)|0);
 return ($2|0);
}
function ___pthread_self_233() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___wcsxfrm_l($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_wcslen($1)|0);
 $5 = ($4>>>0)<($2>>>0);
 if ($5) {
  $6 = (($4) + 1)|0;
  (_wmemcpy($0,$1,$6)|0);
 } else {
  $7 = ($2|0)==(0);
  $8 = (($2) + -1)|0;
  if (!($7)) {
   $9 = (($0) + ($8<<2)|0);
   (_wmemcpy($0,$1,$8)|0);
   HEAP32[$9>>2] = 0;
  }
 }
 return ($4|0);
}
function _wmemcpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$058 = 0, $$067 = 0, $$09 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$058 = $2;$$067 = $1;$$09 = $0;
  while(1) {
   $4 = (($$058) + -1)|0;
   $5 = ((($$067)) + 4|0);
   $6 = HEAP32[$$067>>2]|0;
   $7 = ((($$09)) + 4|0);
   HEAP32[$$09>>2] = $6;
   $8 = ($4|0)==(0);
   if ($8) {
    break;
   } else {
    $$058 = $4;$$067 = $5;$$09 = $7;
   }
  }
 }
 return ($0|0);
}
function _wcsxfrm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (___pthread_self_234()|0);
 $3 = (___wcsxfrm_l($0,$1,$2,0)|0);
 return ($3|0);
}
function ___pthread_self_234() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _wctrans_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_wctrans($0)|0);
 return ($2|0);
}
function _wctype_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_wctype($0)|0);
 return ($2|0);
}
function ___cos($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 * $0;
 $3 = $2 * $2;
 $4 = $2 * 2.4801587289476729E-5;
 $5 = $4 + -0.001388888888887411;
 $6 = $2 * $5;
 $7 = $6 + 0.041666666666666602;
 $8 = $2 * $7;
 $9 = $3 * $3;
 $10 = $2 * 1.1359647557788195E-11;
 $11 = 2.0875723212981748E-9 - $10;
 $12 = $2 * $11;
 $13 = $12 + -2.7557314351390663E-7;
 $14 = $9 * $13;
 $15 = $8 + $14;
 $16 = $2 * 0.5;
 $17 = 1.0 - $16;
 $18 = 1.0 - $17;
 $19 = $18 - $16;
 $20 = $2 * $15;
 $21 = $0 * $1;
 $22 = $20 - $21;
 $23 = $19 + $22;
 $24 = $17 + $23;
 return (+$24);
}
function ___cosdf($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 * $0;
 $2 = $1 * $1;
 $3 = $1 * 2.4390448796277409E-5;
 $4 = $3 + -0.0013886763774609929;
 $5 = $1 * 0.499999997251031;
 $6 = 1.0 - $5;
 $7 = $2 * 0.041666623323739063;
 $8 = $6 + $7;
 $9 = $1 * $2;
 $10 = $9 * $4;
 $11 = $8 + $10;
 $12 = $11;
 return (+$12);
}
function ___fpclassify($0) {
 $0 = +$0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = (_bitshift64Lshr(($1|0),($2|0),52)|0);
 $4 = tempRet0;
 $5 = $3&65535;
 $trunc$clear = $5 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $6 = $2 & 2147483647;
  $7 = ($1|0)!=(0);
  $8 = ($6|0)!=(0);
  $9 = $7 | $8;
  $10 = $9 ? 3 : 2;
  $$0 = $10;
  break;
 }
 case 2047:  {
  $11 = $2 & 1048575;
  $12 = ($1|0)==(0);
  $13 = ($11|0)==(0);
  $14 = $12 & $13;
  $15 = $14&1;
  $$0 = $15;
  break;
 }
 default: {
  $$0 = 4;
 }
 }
 return ($$0|0);
}
function ___fpclassifyf($0) {
 $0 = +$0;
 var $$0 = 0, $$mask = 0, $$mask7 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 >>> 23;
 $trunc = $2&255;
 switch ($trunc<<24>>24) {
 case 0:  {
  $$mask = $1 & 2147483647;
  $3 = ($$mask|0)!=(0);
  $4 = $3 ? 3 : 2;
  $$0 = $4;
  break;
 }
 case -1:  {
  $$mask7 = $1 & 8388607;
  $5 = ($$mask7|0)==(0);
  $6 = $5&1;
  $$0 = $6;
  break;
 }
 default: {
  $$0 = 4;
 }
 }
 return ($$0|0);
}
function ___fpclassifyl($0) {
 $0 = +$0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___fpclassify($0)|0);
 return ($1|0);
}
function ___rem_pio2($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0144 = 0, $$0145148 = 0.0, $$0146 = 0.0, $$0147 = 0.0, $$0149 = 0, $$1$lcssa = 0, $$phi$trans$insert = 0, $$pre = 0.0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0;
 var $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0;
 var $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 16|0;
 $3 = sp;
 HEAPF64[tempDoublePtr>>3] = $0;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($4|0),($5|0),63)|0);
 $7 = tempRet0;
 $8 = $5 & 2147483647;
 $9 = ($8>>>0)<(1074752123);
 do {
  if ($9) {
   $10 = $5 & 1048575;
   $11 = ($10|0)==(598523);
   if ($11) {
    label = 21;
   } else {
    $12 = ($8>>>0)<(1073928573);
    $13 = ($6|0)!=(0);
    if ($12) {
     if ($13) {
      $19 = $0 + 1.5707963267341256;
      $20 = $19 + 6.0771005065061922E-11;
      HEAPF64[$1>>3] = $20;
      $21 = $19 - $20;
      $22 = $21 + 6.0771005065061922E-11;
      $23 = ((($1)) + 8|0);
      HEAPF64[$23>>3] = $22;
      $$0144 = -1;
      break;
     } else {
      $14 = $0 + -1.5707963267341256;
      $15 = $14 + -6.0771005065061922E-11;
      HEAPF64[$1>>3] = $15;
      $16 = $14 - $15;
      $17 = $16 + -6.0771005065061922E-11;
      $18 = ((($1)) + 8|0);
      HEAPF64[$18>>3] = $17;
      $$0144 = 1;
      break;
     }
    } else {
     if ($13) {
      $29 = $0 + 3.1415926534682512;
      $30 = $29 + 1.2154201013012384E-10;
      HEAPF64[$1>>3] = $30;
      $31 = $29 - $30;
      $32 = $31 + 1.2154201013012384E-10;
      $33 = ((($1)) + 8|0);
      HEAPF64[$33>>3] = $32;
      $$0144 = -2;
      break;
     } else {
      $24 = $0 + -3.1415926534682512;
      $25 = $24 + -1.2154201013012384E-10;
      HEAPF64[$1>>3] = $25;
      $26 = $24 - $25;
      $27 = $26 + -1.2154201013012384E-10;
      $28 = ((($1)) + 8|0);
      HEAPF64[$28>>3] = $27;
      $$0144 = 2;
      break;
     }
    }
   }
  } else {
   $34 = ($8>>>0)<(1075594812);
   if ($34) {
    $35 = ($8>>>0)<(1075183037);
    if ($35) {
     $36 = ($8|0)==(1074977148);
     if ($36) {
      label = 21;
      break;
     }
     $37 = ($6|0)==(0);
     if ($37) {
      $38 = $0 + -4.7123889802023768;
      $39 = $38 + -1.8231301519518578E-10;
      HEAPF64[$1>>3] = $39;
      $40 = $38 - $39;
      $41 = $40 + -1.8231301519518578E-10;
      $42 = ((($1)) + 8|0);
      HEAPF64[$42>>3] = $41;
      $$0144 = 3;
      break;
     } else {
      $43 = $0 + 4.7123889802023768;
      $44 = $43 + 1.8231301519518578E-10;
      HEAPF64[$1>>3] = $44;
      $45 = $43 - $44;
      $46 = $45 + 1.8231301519518578E-10;
      $47 = ((($1)) + 8|0);
      HEAPF64[$47>>3] = $46;
      $$0144 = -3;
      break;
     }
    } else {
     $48 = ($8|0)==(1075388923);
     if ($48) {
      label = 21;
      break;
     }
     $49 = ($6|0)==(0);
     if ($49) {
      $50 = $0 + -6.2831853069365025;
      $51 = $50 + -2.4308402026024769E-10;
      HEAPF64[$1>>3] = $51;
      $52 = $50 - $51;
      $53 = $52 + -2.4308402026024769E-10;
      $54 = ((($1)) + 8|0);
      HEAPF64[$54>>3] = $53;
      $$0144 = 4;
      break;
     } else {
      $55 = $0 + 6.2831853069365025;
      $56 = $55 + 2.4308402026024769E-10;
      HEAPF64[$1>>3] = $56;
      $57 = $55 - $56;
      $58 = $57 + 2.4308402026024769E-10;
      $59 = ((($1)) + 8|0);
      HEAPF64[$59>>3] = $58;
      $$0144 = -4;
      break;
     }
    }
   }
   $60 = ($8>>>0)<(1094263291);
   if ($60) {
    label = 21;
   } else {
    $102 = ($8>>>0)>(2146435071);
    if ($102) {
     $103 = $0 - $0;
     $104 = ((($1)) + 8|0);
     HEAPF64[$104>>3] = $103;
     HEAPF64[$1>>3] = $103;
     $$0144 = 0;
     break;
    }
    $105 = $5 & 1048575;
    $106 = $105 | 1096810496;
    HEAP32[tempDoublePtr>>2] = $4;HEAP32[tempDoublePtr+4>>2] = $106;$107 = +HEAPF64[tempDoublePtr>>3];
    $$0145148 = $107;$$0149 = 0;
    while(1) {
     $108 = (~~(($$0145148)));
     $109 = (+($108|0));
     $110 = (($2) + ($$0149<<3)|0);
     HEAPF64[$110>>3] = $109;
     $111 = $$0145148 - $109;
     $112 = $111 * 16777216.0;
     $113 = (($$0149) + 1)|0;
     $exitcond = ($113|0)==(2);
     if ($exitcond) {
      break;
     } else {
      $$0145148 = $112;$$0149 = $113;
     }
    }
    $114 = ((($2)) + 16|0);
    HEAPF64[$114>>3] = $112;
    $115 = $112 == 0.0;
    if ($115) {
     $116 = 1;
     while(1) {
      $$phi$trans$insert = (($2) + ($116<<3)|0);
      $$pre = +HEAPF64[$$phi$trans$insert>>3];
      $117 = $$pre == 0.0;
      $118 = (($116) + -1)|0;
      if ($117) {
       $116 = $118;
      } else {
       $$1$lcssa = $116;
       break;
      }
     }
    } else {
     $$1$lcssa = 2;
    }
    $119 = $8 >>> 20;
    $120 = (($119) + -1046)|0;
    $121 = (($$1$lcssa) + 1)|0;
    $122 = (___rem_pio2_large($2,$3,$120,$121,1)|0);
    $123 = ($6|0)==(0);
    $124 = +HEAPF64[$3>>3];
    if ($123) {
     HEAPF64[$1>>3] = $124;
     $131 = ((($3)) + 8|0);
     $132 = +HEAPF64[$131>>3];
     $133 = ((($1)) + 8|0);
     HEAPF64[$133>>3] = $132;
     $$0144 = $122;
     break;
    } else {
     $125 = - $124;
     HEAPF64[$1>>3] = $125;
     $126 = ((($3)) + 8|0);
     $127 = +HEAPF64[$126>>3];
     $128 = - $127;
     $129 = ((($1)) + 8|0);
     HEAPF64[$129>>3] = $128;
     $130 = (0 - ($122))|0;
     $$0144 = $130;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 21) {
  $61 = $0 * 0.63661977236758138;
  $62 = $61 + 6755399441055744.0;
  $63 = $62 + -6755399441055744.0;
  $64 = (~~(($63)));
  $65 = $63 * 1.5707963267341256;
  $66 = $0 - $65;
  $67 = $63 * 6.0771005065061922E-11;
  $68 = $66 - $67;
  HEAPF64[$1>>3] = $68;
  HEAPF64[tempDoublePtr>>3] = $68;$69 = HEAP32[tempDoublePtr>>2]|0;
  $70 = HEAP32[tempDoublePtr+4>>2]|0;
  $71 = (_bitshift64Lshr(($69|0),($70|0),52)|0);
  $72 = tempRet0;
  $73 = $71 & 2047;
  $74 = $8 >>> 20;
  $75 = (($74) - ($73))|0;
  $76 = ($75|0)>(16);
  if ($76) {
   $77 = $63 * 6.077100506303966E-11;
   $78 = $66 - $77;
   $79 = $63 * 2.0222662487959506E-21;
   $80 = $66 - $78;
   $81 = $80 - $77;
   $82 = $79 - $81;
   $83 = $78 - $82;
   HEAPF64[$1>>3] = $83;
   HEAPF64[tempDoublePtr>>3] = $83;$84 = HEAP32[tempDoublePtr>>2]|0;
   $85 = HEAP32[tempDoublePtr+4>>2]|0;
   $86 = (_bitshift64Lshr(($84|0),($85|0),52)|0);
   $87 = tempRet0;
   $88 = $86 & 2047;
   $89 = (($74) - ($88))|0;
   $90 = ($89|0)>(49);
   $91 = $63 * 2.0222662487111665E-21;
   $92 = $78 - $91;
   $93 = $63 * 8.4784276603688995E-32;
   $94 = $78 - $92;
   $95 = $94 - $91;
   $96 = $93 - $95;
   if ($90) {
    $97 = $92 - $96;
    HEAPF64[$1>>3] = $97;
    $$0146 = $96;$$0147 = $92;$99 = $97;
   } else {
    $$0146 = $82;$$0147 = $78;$99 = $83;
   }
  } else {
   $$0146 = $67;$$0147 = $66;$99 = $68;
  }
  $98 = $$0147 - $99;
  $100 = $98 - $$0146;
  $101 = ((($1)) + 8|0);
  HEAPF64[$101>>3] = $100;
  $$0144 = $64;
 }
 STACKTOP = sp;return ($$0144|0);
}
function ___rem_pio2_large($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0$lcssa = 0.0, $$0266$lcssa = 0.0, $$0266367 = 0.0, $$0268 = 0, $$0268299 = 0, $$0268300 = 0, $$0269 = 0, $$0269$in = 0, $$0272 = 0, $$0276 = 0, $$0278401 = 0, $$0283400 = 0, $$0291 = 0, $$0291298 = 0, $$0293$lcssa = 0, $$0293372 = 0, $$0395 = 0.0, $$1$lcssa = 0.0, $$10332 = 0;
 var $$11350 = 0, $$12348 = 0, $$1267 = 0.0, $$1270 = 0, $$1273 = 0, $$1273$in = 0, $$1277353 = 0, $$1279394 = 0, $$1284399 = 0, $$1292 = 0, $$1294 = 0, $$13343 = 0, $$1384 = 0.0, $$2271 = 0, $$2274 = 0, $$2280366 = 0, $$2285365 = 0, $$2295 = 0, $$2362 = 0.0, $$3275 = 0;
 var $$3281378 = 0, $$3286373 = 0, $$3354 = 0.0, $$4$lcssa = 0.0, $$4282383 = 0, $$4287379 = 0, $$4287379$in = 0, $$4331 = 0.0, $$5$lcssa = 0.0, $$5288391 = 0, $$5288391$in = 0, $$5339 = 0.0, $$6$lcssa = 0.0, $$6289361 = 0, $$6333 = 0.0, $$7$lcssa = 0.0, $$7290358 = 0, $$7344 = 0.0, $$8330 = 0, $$9338 = 0;
 var $$neg = 0, $$neg302 = 0, $$phi$trans$insert = 0, $$phi$trans$insert429 = 0, $$pn = 0, $$pre = 0.0, $$pre430 = 0.0, $$sink = 0, $$sink12 = 0.0, $$sink12$sink = 0.0, $$sink16 = 0, $$sink428 = 0.0, $$sink7 = 0, $$sink9 = 0, $$sink9$in = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0;
 var $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0;
 var $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0.0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0;
 var $213 = 0.0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0, $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0.0;
 var $98 = 0.0, $99 = 0, $exitcond = 0, $exitcond424 = 0, $exitcond425 = 0, $exitcond426 = 0, $exitcond427 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $5 = sp + 480|0;
 $6 = sp + 320|0;
 $7 = sp + 160|0;
 $8 = sp;
 $9 = (22872 + ($4<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($3) + -1)|0;
 $12 = (($2) + -3)|0;
 $13 = (($12|0) / 24)&-1;
 $14 = ($13|0)>(0);
 $$ = $14 ? $13 : 0;
 $$neg = Math_imul($$, -24)|0;
 $$neg302 = (($2) + -24)|0;
 $15 = (($$neg302) + ($$neg))|0;
 $16 = (($10) + ($11))|0;
 $17 = ($16|0)<(0);
 if (!($17)) {
  $18 = (($$) - ($11))|0;
  $19 = (($10) + ($3))|0;
  $$0278401 = $18;$$0283400 = 0;
  while(1) {
   $21 = ($$0278401|0)<(0);
   if ($21) {
    $26 = 0.0;
   } else {
    $22 = (22888 + ($$0278401<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (+($23|0));
    $26 = $24;
   }
   $25 = (($6) + ($$0283400<<3)|0);
   HEAPF64[$25>>3] = $26;
   $27 = (($$0283400) + 1)|0;
   $28 = (($$0278401) + 1)|0;
   $exitcond427 = ($27|0)==($19|0);
   if ($exitcond427) {
    break;
   } else {
    $$0278401 = $28;$$0283400 = $27;
   }
  }
 }
 $20 = ($3|0)>(0);
 $$1284399 = 0;
 while(1) {
  if ($20) {
   $29 = (($$1284399) + ($11))|0;
   $$0395 = 0.0;$$1279394 = 0;
   while(1) {
    $35 = (($0) + ($$1279394<<3)|0);
    $36 = +HEAPF64[$35>>3];
    $37 = (($29) - ($$1279394))|0;
    $38 = (($6) + ($37<<3)|0);
    $39 = +HEAPF64[$38>>3];
    $40 = $36 * $39;
    $41 = $$0395 + $40;
    $42 = (($$1279394) + 1)|0;
    $exitcond426 = ($42|0)==($3|0);
    if ($exitcond426) {
     $$0$lcssa = $41;
     break;
    } else {
     $$0395 = $41;$$1279394 = $42;
    }
   }
  } else {
   $$0$lcssa = 0.0;
  }
  $43 = (($8) + ($$1284399<<3)|0);
  HEAPF64[$43>>3] = $$0$lcssa;
  $44 = (($$1284399) + 1)|0;
  $45 = ($$1284399|0)<($10|0);
  if ($45) {
   $$1284399 = $44;
  } else {
   break;
  }
 }
 $30 = ($15|0)>(0);
 $31 = (24 - ($15))|0;
 $32 = (23 - ($15))|0;
 $33 = ($3|0)>(0);
 $34 = ($15|0)==(0);
 $$0272 = $10;
 L17: while(1) {
  $46 = (($8) + ($$0272<<3)|0);
  $47 = +HEAPF64[$46>>3];
  $48 = ($$0272|0)>(0);
  if ($48) {
   $$0266367 = $47;$$2280366 = $$0272;$$2285365 = 0;
   while(1) {
    $49 = $$0266367 * 5.9604644775390625E-8;
    $50 = (~~(($49)));
    $51 = (+($50|0));
    $52 = $51 * 16777216.0;
    $53 = $$0266367 - $52;
    $54 = (~~(($53)));
    $55 = (($5) + ($$2285365<<2)|0);
    HEAP32[$55>>2] = $54;
    $56 = (($$2280366) + -1)|0;
    $57 = (($8) + ($56<<3)|0);
    $58 = +HEAPF64[$57>>3];
    $59 = $58 + $51;
    $60 = (($$2285365) + 1)|0;
    $61 = ($$2280366|0)>(1);
    if ($61) {
     $$0266367 = $59;$$2280366 = $56;$$2285365 = $60;
    } else {
     $$0266$lcssa = $59;
     break;
    }
   }
  } else {
   $$0266$lcssa = $47;
  }
  $62 = (+_scalbn($$0266$lcssa,$15));
  $63 = $62 * 0.125;
  $64 = (+Math_floor((+$63)));
  $65 = $64 * 8.0;
  $66 = $62 - $65;
  $67 = (~~(($66)));
  $68 = (+($67|0));
  $69 = $66 - $68;
  do {
   if ($30) {
    $70 = (($$0272) + -1)|0;
    $71 = (($5) + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $72 >> $31;
    $74 = (($73) + ($67))|0;
    $75 = $73 << $31;
    $76 = (($72) - ($75))|0;
    HEAP32[$71>>2] = $76;
    $77 = $76 >> $32;
    $$0268 = $77;$$0291 = $74;
    label = 19;
   } else {
    if ($34) {
     $78 = (($$0272) + -1)|0;
     $79 = (($5) + ($78<<2)|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = $80 >> 23;
     $$0268 = $81;$$0291 = $67;
     label = 19;
     break;
    } else {
     $82 = !($69 >= 0.5);
     if ($82) {
      $$0268300 = 0;$$1267 = $69;$$1292 = $67;
      break;
     } else {
      $$0268299 = 2;$$0291298 = $67;
      label = 20;
      break;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   $83 = ($$0268|0)>(0);
   if ($83) {
    $$0268299 = $$0268;$$0291298 = $$0291;
    label = 20;
   } else {
    $$0268300 = $$0268;$$1267 = $69;$$1292 = $$0291;
   }
  }
  if ((label|0) == 20) {
   label = 0;
   $84 = (($$0291298) + 1)|0;
   if ($48) {
    $$0293372 = 0;$$3286373 = 0;
    while(1) {
     $85 = (($5) + ($$3286373<<2)|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = ($$0293372|0)==(0);
     if ($87) {
      $88 = ($86|0)==(0);
      if ($88) {
       $$2295 = 0;
      } else {
       $$1294 = 1;$$pn = 16777216;
       label = 23;
      }
     } else {
      $$1294 = $$0293372;$$pn = 16777215;
      label = 23;
     }
     if ((label|0) == 23) {
      label = 0;
      $$sink = (($$pn) - ($86))|0;
      HEAP32[$85>>2] = $$sink;
      $$2295 = $$1294;
     }
     $89 = (($$3286373) + 1)|0;
     $exitcond424 = ($89|0)==($$0272|0);
     if ($exitcond424) {
      $$0293$lcssa = $$2295;
      break;
     } else {
      $$0293372 = $$2295;$$3286373 = $89;
     }
    }
   } else {
    $$0293$lcssa = 0;
   }
   L42: do {
    if ($30) {
     switch ($15|0) {
     case 1:  {
      $$sink7 = 8388607;
      break;
     }
     case 2:  {
      $$sink7 = 4194303;
      break;
     }
     default: {
      break L42;
     }
     }
     $90 = (($$0272) + -1)|0;
     $91 = (($5) + ($90<<2)|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = $92 & $$sink7;
     HEAP32[$91>>2] = $93;
    }
   } while(0);
   $94 = ($$0268299|0)==(2);
   if ($94) {
    $95 = 1.0 - $69;
    $96 = ($$0293$lcssa|0)==(0);
    if ($96) {
     $$0268300 = 2;$$1267 = $95;$$1292 = $84;
    } else {
     $97 = (+_scalbn(1.0,$15));
     $98 = $95 - $97;
     $$0268300 = 2;$$1267 = $98;$$1292 = $84;
    }
   } else {
    $$0268300 = $$0268299;$$1267 = $69;$$1292 = $84;
   }
  }
  $99 = $$1267 == 0.0;
  if (!($99)) {
   label = 42;
   break;
  }
  $100 = ($$0272|0)>($10|0);
  if ($100) {
   $$3281378 = 0;$$4287379$in = $$0272;
   while(1) {
    $$4287379 = (($$4287379$in) + -1)|0;
    $101 = (($5) + ($$4287379<<2)|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 | $$3281378;
    $104 = ($$4287379|0)>($10|0);
    if ($104) {
     $$3281378 = $103;$$4287379$in = $$4287379;
    } else {
     break;
    }
   }
   $105 = ($103|0)==(0);
   if ($105) {
    $$0276 = 1;
   } else {
    $$0269$in = $15;$$1273$in = $$0272;
    label = 41;
    break;
   }
  } else {
   $$0276 = 1;
  }
  while(1) {
   $106 = (($10) - ($$0276))|0;
   $107 = (($5) + ($106<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = ($108|0)==(0);
   $110 = (($$0276) + 1)|0;
   if ($109) {
    $$0276 = $110;
   } else {
    break;
   }
  }
  $111 = (($$0276) + ($$0272))|0;
  $112 = ($$0276|0)>(0);
  if ($112) {
   $$5288391$in = $$0272;
  } else {
   $$0272 = $111;
   continue;
  }
  while(1) {
   $$5288391 = (($$5288391$in) + 1)|0;
   $113 = (($$5288391) + ($$))|0;
   $114 = (22888 + ($113<<2)|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = (+($115|0));
   $117 = (($$5288391$in) + ($3))|0;
   $118 = (($6) + ($117<<3)|0);
   HEAPF64[$118>>3] = $116;
   if ($33) {
    $$1384 = 0.0;$$4282383 = 0;
    while(1) {
     $119 = (($0) + ($$4282383<<3)|0);
     $120 = +HEAPF64[$119>>3];
     $121 = (($117) - ($$4282383))|0;
     $122 = (($6) + ($121<<3)|0);
     $123 = +HEAPF64[$122>>3];
     $124 = $120 * $123;
     $125 = $$1384 + $124;
     $126 = (($$4282383) + 1)|0;
     $exitcond425 = ($126|0)==($3|0);
     if ($exitcond425) {
      $$1$lcssa = $125;
      break;
     } else {
      $$1384 = $125;$$4282383 = $126;
     }
    }
   } else {
    $$1$lcssa = 0.0;
   }
   $127 = (($8) + ($$5288391<<3)|0);
   HEAPF64[$127>>3] = $$1$lcssa;
   $128 = ($$5288391|0)<($111|0);
   if ($128) {
    $$5288391$in = $$5288391;
   } else {
    $$0272 = $111;
    continue L17;
   }
  }
 }
 if ((label|0) == 41) {
  while(1) {
   label = 0;
   $$0269 = (($$0269$in) + -24)|0;
   $$1273 = (($$1273$in) + -1)|0;
   $129 = (($5) + ($$1273<<2)|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = ($130|0)==(0);
   if ($131) {
    $$0269$in = $$0269;$$1273$in = $$1273;
    label = 41;
   } else {
    $$2271 = $$0269;$$3275 = $$1273;
    break;
   }
  }
 }
 else if ((label|0) == 42) {
  $132 = (0 - ($15))|0;
  $133 = (+_scalbn($$1267,$132));
  $134 = !($133 >= 16777216.0);
  if ($134) {
   $$1270 = $15;$$2274 = $$0272;$$sink9$in = $133;
  } else {
   $135 = $133 * 5.9604644775390625E-8;
   $136 = (~~(($135)));
   $137 = (+($136|0));
   $138 = $137 * 16777216.0;
   $139 = $133 - $138;
   $140 = (~~(($139)));
   $141 = (($5) + ($$0272<<2)|0);
   HEAP32[$141>>2] = $140;
   $142 = (($$0272) + 1)|0;
   $143 = (($$neg) + ($2))|0;
   $$1270 = $143;$$2274 = $142;$$sink9$in = $137;
  }
  $$sink9 = (~~(($$sink9$in)));
  $144 = (($5) + ($$2274<<2)|0);
  HEAP32[$144>>2] = $$sink9;
  $$2271 = $$1270;$$3275 = $$2274;
 }
 $145 = ($$3275|0)>(-1);
 if ($145) {
  $146 = (+_scalbn(1.0,$$2271));
  $$2362 = $146;$$6289361 = $$3275;
  while(1) {
   $147 = (($5) + ($$6289361<<2)|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = (+($148|0));
   $150 = $$2362 * $149;
   $151 = (($8) + ($$6289361<<3)|0);
   HEAPF64[$151>>3] = $150;
   $152 = $$2362 * 5.9604644775390625E-8;
   $153 = (($$6289361) + -1)|0;
   $154 = ($$6289361|0)>(0);
   if ($154) {
    $$2362 = $152;$$6289361 = $153;
   } else {
    break;
   }
  }
  if ($145) {
   $$7290358 = $$3275;
   while(1) {
    $155 = (($$3275) - ($$7290358))|0;
    $$1277353 = 0;$$3354 = 0.0;
    while(1) {
     $156 = (648 + ($$1277353<<3)|0);
     $157 = +HEAPF64[$156>>3];
     $158 = (($$1277353) + ($$7290358))|0;
     $159 = (($8) + ($158<<3)|0);
     $160 = +HEAPF64[$159>>3];
     $161 = $157 * $160;
     $162 = $$3354 + $161;
     $163 = (($$1277353) + 1)|0;
     $164 = ($$1277353|0)>=($10|0);
     $165 = ($$1277353|0)>=($155|0);
     $or$cond = $164 | $165;
     if ($or$cond) {
      break;
     } else {
      $$1277353 = $163;$$3354 = $162;
     }
    }
    $166 = (($7) + ($155<<3)|0);
    HEAPF64[$166>>3] = $162;
    $167 = (($$7290358) + -1)|0;
    $168 = ($$7290358|0)>(0);
    if ($168) {
     $$7290358 = $167;
    } else {
     break;
    }
   }
  }
 }
 switch ($4|0) {
 case 0:  {
  if ($145) {
   $$4331 = 0.0;$$8330 = $$3275;
   while(1) {
    $170 = (($7) + ($$8330<<3)|0);
    $171 = +HEAPF64[$170>>3];
    $172 = $$4331 + $171;
    $173 = (($$8330) + -1)|0;
    $174 = ($$8330|0)>(0);
    if ($174) {
     $$4331 = $172;$$8330 = $173;
    } else {
     $$4$lcssa = $172;
     break;
    }
   }
  } else {
   $$4$lcssa = 0.0;
  }
  $175 = ($$0268300|0)==(0);
  $176 = - $$4$lcssa;
  $177 = $175 ? $$4$lcssa : $176;
  $$sink12$sink = $177;$$sink16 = $1;
  label = 73;
  break;
 }
 case 2: case 1:  {
  if ($145) {
   $$5339 = 0.0;$$9338 = $$3275;
   while(1) {
    $178 = (($7) + ($$9338<<3)|0);
    $179 = +HEAPF64[$178>>3];
    $180 = $$5339 + $179;
    $181 = (($$9338) + -1)|0;
    $182 = ($$9338|0)>(0);
    if ($182) {
     $$5339 = $180;$$9338 = $181;
    } else {
     $$5$lcssa = $180;
     break;
    }
   }
  } else {
   $$5$lcssa = 0.0;
  }
  $183 = ($$0268300|0)==(0);
  $184 = - $$5$lcssa;
  $185 = $183 ? $$5$lcssa : $184;
  HEAPF64[$1>>3] = $185;
  $186 = +HEAPF64[$7>>3];
  $187 = $186 - $$5$lcssa;
  $188 = ($$3275|0)<(1);
  if ($188) {
   $$6$lcssa = $187;
  } else {
   $$10332 = 1;$$6333 = $187;
   while(1) {
    $189 = (($7) + ($$10332<<3)|0);
    $190 = +HEAPF64[$189>>3];
    $191 = $$6333 + $190;
    $192 = (($$10332) + 1)|0;
    $exitcond = ($$10332|0)==($$3275|0);
    if ($exitcond) {
     $$6$lcssa = $191;
     break;
    } else {
     $$10332 = $192;$$6333 = $191;
    }
   }
  }
  $193 = - $$6$lcssa;
  $194 = $183 ? $$6$lcssa : $193;
  $195 = ((($1)) + 8|0);
  $$sink12$sink = $194;$$sink16 = $195;
  label = 73;
  break;
 }
 case 3:  {
  $169 = ($$3275|0)>(0);
  if ($169) {
   $$phi$trans$insert = (($7) + ($$3275<<3)|0);
   $$pre = +HEAPF64[$$phi$trans$insert>>3];
   $$11350 = $$3275;$202 = $$pre;
   while(1) {
    $197 = (($$11350) + -1)|0;
    $198 = (($7) + ($197<<3)|0);
    $199 = +HEAPF64[$198>>3];
    $200 = (($7) + ($$11350<<3)|0);
    $201 = $199 + $202;
    $203 = $199 - $201;
    $204 = $202 + $203;
    HEAPF64[$200>>3] = $204;
    HEAPF64[$198>>3] = $201;
    $205 = ($$11350|0)>(1);
    if ($205) {
     $$11350 = $197;$202 = $201;
    } else {
     break;
    }
   }
   $196 = ($$3275|0)>(1);
   if ($196) {
    $$phi$trans$insert429 = (($7) + ($$3275<<3)|0);
    $$pre430 = +HEAPF64[$$phi$trans$insert429>>3];
    $$12348 = $$3275;$211 = $$pre430;
    while(1) {
     $206 = (($$12348) + -1)|0;
     $207 = (($7) + ($206<<3)|0);
     $208 = +HEAPF64[$207>>3];
     $209 = (($7) + ($$12348<<3)|0);
     $210 = $208 + $211;
     $212 = $208 - $210;
     $213 = $211 + $212;
     HEAPF64[$209>>3] = $213;
     HEAPF64[$207>>3] = $210;
     $214 = ($$12348|0)>(2);
     if ($214) {
      $$12348 = $206;$211 = $210;
     } else {
      break;
     }
    }
    if ($196) {
     $$13343 = $$3275;$$7344 = 0.0;
     while(1) {
      $215 = (($7) + ($$13343<<3)|0);
      $216 = +HEAPF64[$215>>3];
      $217 = $$7344 + $216;
      $218 = (($$13343) + -1)|0;
      $219 = ($$13343|0)>(2);
      if ($219) {
       $$13343 = $218;$$7344 = $217;
      } else {
       $$7$lcssa = $217;
       break;
      }
     }
    } else {
     $$7$lcssa = 0.0;
    }
   } else {
    $$7$lcssa = 0.0;
   }
  } else {
   $$7$lcssa = 0.0;
  }
  $220 = ($$0268300|0)==(0);
  $221 = +HEAPF64[$7>>3];
  if ($220) {
   HEAPF64[$1>>3] = $221;
   $222 = ((($7)) + 8|0);
   $223 = +HEAPF64[$222>>3];
   $$sink12 = $$7$lcssa;$$sink428 = $223;
  } else {
   $224 = - $221;
   HEAPF64[$1>>3] = $224;
   $225 = ((($7)) + 8|0);
   $226 = +HEAPF64[$225>>3];
   $227 = - $226;
   $228 = - $$7$lcssa;
   $$sink12 = $228;$$sink428 = $227;
  }
  $229 = ((($1)) + 8|0);
  HEAPF64[$229>>3] = $$sink428;
  $230 = ((($1)) + 16|0);
  $$sink12$sink = $$sink12;$$sink16 = $230;
  label = 73;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 73) {
  HEAPF64[$$sink16>>3] = $$sink12$sink;
 }
 $231 = $$1292 & 7;
 STACKTOP = sp;return ($231|0);
}
function ___rem_pio2f($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp;
 $4 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $5 = $4 & 2147483647;
 $6 = ($5>>>0)<(1305022427);
 do {
  if ($6) {
   $7 = $0;
   $8 = $7 * 0.63661977236758138;
   $9 = $8 + 6755399441055744.0;
   $10 = $9 + -6755399441055744.0;
   $11 = (~~(($10)));
   $12 = $10 * 1.5707963109016418;
   $13 = $7 - $12;
   $14 = $10 * 1.5893254773528196E-8;
   $15 = $13 - $14;
   HEAPF64[$1>>3] = $15;
   $$0 = $11;
  } else {
   $16 = ($5>>>0)>(2139095039);
   if ($16) {
    $17 = $0 - $0;
    $18 = $17;
    HEAPF64[$1>>3] = $18;
    $$0 = 0;
    break;
   }
   $19 = $5 >>> 23;
   $20 = (($19) + -150)|0;
   $21 = $20 << 23;
   $22 = (($5) - ($21))|0;
   $23 = (HEAP32[tempDoublePtr>>2]=$22,+HEAPF32[tempDoublePtr>>2]);
   $24 = $23;
   HEAPF64[$2>>3] = $24;
   $25 = (___rem_pio2_large($2,$3,$20,1,0)|0);
   $26 = ($4|0)<(0);
   $27 = +HEAPF64[$3>>3];
   if ($26) {
    $28 = - $27;
    HEAPF64[$1>>3] = $28;
    $29 = (0 - ($25))|0;
    $$0 = $29;
    break;
   } else {
    HEAPF64[$1>>3] = $27;
    $$0 = $25;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___signbit($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = (_bitshift64Lshr(($1|0),($2|0),63)|0);
 $4 = tempRet0;
 return ($3|0);
}
function ___signbitf($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 >>> 31;
 return ($2|0);
}
function ___signbitl($0) {
 $0 = +$0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___signbit($0)|0);
 return ($1|0);
}
function ___sin($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$0 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $3 = 0.0;
 var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0 * $0;
 $4 = $3 * $3;
 $5 = $3 * 2.7557313707070068E-6;
 $6 = $5 + -1.9841269829857949E-4;
 $7 = $3 * $6;
 $8 = $7 + 0.0083333333333224895;
 $9 = $3 * $4;
 $10 = $3 * 1.5896909952115501E-10;
 $11 = $10 + -2.5050760253406863E-8;
 $12 = $9 * $11;
 $13 = $12 + $8;
 $14 = $3 * $0;
 $15 = ($2|0)==(0);
 if ($15) {
  $16 = $3 * $13;
  $17 = $16 + -0.16666666666666632;
  $18 = $14 * $17;
  $19 = $18 + $0;
  $$0 = $19;
 } else {
  $20 = $1 * 0.5;
  $21 = $14 * $13;
  $22 = $20 - $21;
  $23 = $3 * $22;
  $24 = $23 - $1;
  $25 = $14 * 0.16666666666666632;
  $26 = $25 + $24;
  $27 = $0 - $26;
  $$0 = $27;
 }
 return (+$$0);
}
function ___sindf($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 * $0;
 $2 = $1 * $1;
 $3 = $1 * 2.7183114939898219E-6;
 $4 = $3 + -1.9839334836096632E-4;
 $5 = $1 * $0;
 $6 = $1 * 0.0083333293858894632;
 $7 = $6 + -0.16666666641626524;
 $8 = $5 * $7;
 $9 = $8 + $0;
 $10 = $5 * $2;
 $11 = $10 * $4;
 $12 = $11 + $9;
 $13 = $12;
 return (+$13);
}
function ___tan($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$0 = 0.0, $$087 = 0.0, $$088 = 0.0, $$090 = 0, $$1 = 0.0, $$189 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0;
 var $79 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$3 = HEAP32[tempDoublePtr>>2]|0;
 $4 = HEAP32[tempDoublePtr+4>>2]|0;
 $5 = $4 & 2147483640;
 $6 = ($5>>>0)>(1072010279);
 $7 = (0)>(0);
 $8 = ($5|0)==(1072010279);
 $9 = $8 & $7;
 $10 = $6 | $9;
 if ($10) {
  $11 = (_bitshift64Lshr(($3|0),($4|0),63)|0);
  $12 = tempRet0;
  $13 = ($11|0)==(0);
  $14 = - $0;
  $15 = - $1;
  $$088 = $13 ? $1 : $15;
  $$087 = $13 ? $0 : $14;
  $16 = 0.78539816339744828 - $$087;
  $17 = 3.061616997868383E-17 - $$088;
  $18 = $16 + $17;
  $$090 = $11;$$1 = $18;$$189 = 0.0;
 } else {
  $$090 = 0;$$1 = $0;$$189 = $1;
 }
 $19 = $$1 * $$1;
 $20 = $19 * $19;
 $21 = $20 * 1.8558637485527546E-5;
 $22 = 7.8179444293955709E-5 - $21;
 $23 = $20 * $22;
 $24 = $23 + 5.880412408202641E-4;
 $25 = $20 * $24;
 $26 = $25 + 0.0035920791075913124;
 $27 = $20 * $26;
 $28 = $27 + 0.021869488294859542;
 $29 = $20 * $28;
 $30 = $29 + 0.13333333333320124;
 $31 = $20 * 2.5907305186363371E-5;
 $32 = $31 + 7.1407249138260819E-5;
 $33 = $20 * $32;
 $34 = $33 + 2.4646313481846991E-4;
 $35 = $20 * $34;
 $36 = $35 + 0.0014562094543252903;
 $37 = $20 * $36;
 $38 = $37 + 0.0088632398235993;
 $39 = $20 * $38;
 $40 = $39 + 0.053968253976226052;
 $41 = $19 * $40;
 $42 = $$1 * $19;
 $43 = $30 + $41;
 $44 = $42 * $43;
 $45 = $$189 + $44;
 $46 = $19 * $45;
 $47 = $$189 + $46;
 $48 = $42 * 0.33333333333333409;
 $49 = $48 + $47;
 $50 = $$1 + $49;
 if ($10) {
  $51 = $2 << 1;
  $52 = (1 - ($51))|0;
  $53 = (+($52|0));
  $54 = $50 * $50;
  $55 = $50 + $53;
  $56 = $54 / $55;
  $57 = $49 - $56;
  $58 = $$1 + $57;
  $59 = $58 * 2.0;
  $60 = $53 - $59;
  $61 = ($$090|0)!=(0);
  $62 = - $60;
  $63 = $61 ? $62 : $60;
  $$0 = $63;
 } else {
  $64 = ($2|0)==(0);
  if ($64) {
   $$0 = $50;
  } else {
   HEAPF64[tempDoublePtr>>3] = $50;$65 = HEAP32[tempDoublePtr>>2]|0;
   $66 = HEAP32[tempDoublePtr+4>>2]|0;
   HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $66;$67 = +HEAPF64[tempDoublePtr>>3];
   $68 = $67 - $$1;
   $69 = $49 - $68;
   $70 = -1.0 / $50;
   HEAPF64[tempDoublePtr>>3] = $70;$71 = HEAP32[tempDoublePtr>>2]|0;
   $72 = HEAP32[tempDoublePtr+4>>2]|0;
   HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $72;$73 = +HEAPF64[tempDoublePtr>>3];
   $74 = $67 * $73;
   $75 = $74 + 1.0;
   $76 = $69 * $73;
   $77 = $75 + $76;
   $78 = $70 * $77;
   $79 = $78 + $73;
   $$0 = $79;
  }
 }
 return (+$$0);
}
function ___tandf($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 * $0;
 $3 = $2 * 0.0094656478494367316;
 $4 = $3 + 0.002974357433599673;
 $5 = $2 * 0.024528318116654728;
 $6 = $5 + 0.053381237844567039;
 $7 = $2 * $2;
 $8 = $2 * $0;
 $9 = $2 * 0.13339200271297674;
 $10 = $9 + 0.3333313950307914;
 $11 = $8 * $10;
 $12 = $11 + $0;
 $13 = $8 * $7;
 $14 = $7 * $4;
 $15 = $6 + $14;
 $16 = $13 * $15;
 $17 = $12 + $16;
 $18 = ($1|0)!=(0);
 $19 = -1.0 / $17;
 $20 = $18 ? $19 : $17;
 $21 = $20;
 return (+$21);
}
function _acosh($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = (_bitshift64Lshr(($1|0),($2|0),52)|0);
 $4 = tempRet0;
 $5 = $3 & 2047;
 $6 = ($5>>>0)<(1024);
 do {
  if ($6) {
   $7 = $0 + -1.0;
   $8 = $7 * $7;
   $9 = $7 * 2.0;
   $10 = $8 + $9;
   $11 = (+Math_sqrt((+$10)));
   $12 = $7 + $11;
   $13 = (+_log1p($12));
   $$0 = $13;
  } else {
   $14 = ($5>>>0)<(1049);
   if ($14) {
    $15 = $0 * 2.0;
    $16 = $0 * $0;
    $17 = $16 + -1.0;
    $18 = (+Math_sqrt((+$17)));
    $19 = $18 + $0;
    $20 = 1.0 / $19;
    $21 = $15 - $20;
    $22 = (+Math_log((+$21)));
    $$0 = $22;
    break;
   } else {
    $23 = (+Math_log((+$0)));
    $24 = $23 + 0.69314718055994529;
    $$0 = $24;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _log1p($0) {
 $0 = +$0;
 var $$082 = 0.0, $$1 = 0.0, $$184 = 0.0, $$186 = 0.0, $$2 = 0.0, $$sink = 0.0, $$sink1 = 0.0, $$sink1$p = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0;
 var $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $or$cond = 0, $phitmp = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = ($2>>>0)<(1071284858);
 $4 = ($2|0)<(0);
 $or$cond = $4 | $3;
 do {
  if ($or$cond) {
   $5 = ($2>>>0)>(3220176895);
   if ($5) {
    $6 = $0 == -1.0;
    if ($6) {
     $$082 = -inf;
     break;
    }
    $7 = $0 - $0;
    $8 = $7 / 0.0;
    $$082 = $8;
    break;
   } else {
    $9 = (_bitshift64Shl(($2|0),0,1)|0);
    $10 = tempRet0;
    $11 = ($9>>>0)<(2034237440);
    if ($11) {
     $$082 = $0;
     break;
    }
    $12 = ($2>>>0)<(3218259653);
    if ($12) {
     $$1 = 0.0;$$184 = $0;$$2 = 0.0;
     label = 11;
     break;
    } else {
     label = 8;
     break;
    }
   }
  } else {
   $13 = ($2>>>0)>(2146435071);
   if ($13) {
    $$082 = $0;
   } else {
    label = 8;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $14 = $0 + 1.0;
  HEAPF64[tempDoublePtr>>3] = $14;$15 = HEAP32[tempDoublePtr>>2]|0;
  $16 = HEAP32[tempDoublePtr+4>>2]|0;
  $17 = (($16) + 614242)|0;
  $18 = $17 >>> 20;
  $19 = (($18) + -1023)|0;
  $20 = ($17>>>0)<(1129316352);
  if ($20) {
   $21 = ($17>>>0)>(1074790399);
   $22 = - $0;
   $$sink1$p = $21 ? $22 : -1.0;
   $$sink1 = $14 + $$sink1$p;
   $$sink = $21 ? 1.0 : $0;
   $23 = $$sink - $$sink1;
   $24 = $23 / $14;
   $$186 = $24;
  } else {
   $$186 = 0.0;
  }
  $25 = $17 & 1048575;
  $26 = (($25) + 1072079006)|0;
  HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $26;$27 = +HEAPF64[tempDoublePtr>>3];
  $28 = $27 + -1.0;
  $phitmp = (+($19|0));
  $$1 = $phitmp;$$184 = $28;$$2 = $$186;
  label = 11;
 }
 if ((label|0) == 11) {
  $29 = $$184 * 0.5;
  $30 = $$184 * $29;
  $31 = $$184 + 2.0;
  $32 = $$184 / $31;
  $33 = $32 * $32;
  $34 = $33 * $33;
  $35 = $34 * 0.15313837699209373;
  $36 = $35 + 0.22222198432149784;
  $37 = $34 * $36;
  $38 = $37 + 0.39999999999409419;
  $39 = $34 * $38;
  $40 = $34 * 0.14798198605116586;
  $41 = $40 + 0.1818357216161805;
  $42 = $34 * $41;
  $43 = $42 + 0.28571428743662391;
  $44 = $34 * $43;
  $45 = $44 + 0.66666666666667351;
  $46 = $33 * $45;
  $47 = $39 + $46;
  $48 = $30 + $47;
  $49 = $32 * $48;
  $50 = $$1 * 1.9082149292705877E-10;
  $51 = $$2 + $50;
  $52 = $51 + $49;
  $53 = $52 - $30;
  $54 = $$184 + $53;
  $55 = $$1 * 0.69314718036912382;
  $56 = $55 + $54;
  $$082 = $56;
 }
 return (+$$082);
}
function _acoshf($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
 var $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 & 2147483647;
 $3 = ($2>>>0)<(1073741824);
 do {
  if ($3) {
   $4 = $0 + -1.0;
   $5 = $4 * $4;
   $6 = $4 * 2.0;
   $7 = $5 + $6;
   $8 = (+Math_sqrt((+$7)));
   $9 = $4 + $8;
   $10 = (+_log1pf($9));
   $$0 = $10;
  } else {
   $11 = ($2>>>0)<(1166016512);
   if ($11) {
    $12 = $0 * 2.0;
    $13 = $0 * $0;
    $14 = $13 + -1.0;
    $15 = (+Math_sqrt((+$14)));
    $16 = $15 + $0;
    $17 = 1.0 / $16;
    $18 = $12 - $17;
    $19 = (+Math_log((+$18)));
    $$0 = $19;
    break;
   } else {
    $20 = (+Math_log((+$0)));
    $21 = $20 + 0.69314718246459961;
    $$0 = $21;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _log1pf($0) {
 $0 = +$0;
 var $$078 = 0.0, $$1 = 0.0, $$180 = 0.0, $$182 = 0.0, $$2 = 0.0, $$sink = 0.0, $$sink1 = 0.0, $$sink1$p = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0;
 var $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0;
 var $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = ($1>>>0)<(1054086096);
 $3 = ($1|0)<(0);
 $or$cond = $2 | $3;
 do {
  if ($or$cond) {
   $4 = ($1>>>0)>(3212836863);
   if ($4) {
    $5 = $0 == -1.0;
    if ($5) {
     $$078 = -inf;
     break;
    }
    $6 = $0 - $0;
    $7 = $6 / 0.0;
    $$078 = $7;
    break;
   } else {
    $8 = $1 << 1;
    $9 = ($8>>>0)<(1728053248);
    if ($9) {
     $$078 = $0;
     break;
    }
    $10 = ($1>>>0)<(3197498906);
    if ($10) {
     $$1 = 0.0;$$180 = $0;$$2 = 0.0;
     label = 11;
     break;
    } else {
     label = 8;
     break;
    }
   }
  } else {
   $11 = ($1>>>0)>(2139095039);
   if ($11) {
    $$078 = $0;
   } else {
    label = 8;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $12 = $0 + 1.0;
  $13 = (HEAPF32[tempDoublePtr>>2]=$12,HEAP32[tempDoublePtr>>2]|0);
  $14 = (($13) + 4913933)|0;
  $15 = $14 >>> 23;
  $16 = (($15) + -127)|0;
  $17 = ($14>>>0)<(1275068416);
  if ($17) {
   $18 = ($14>>>0)>(1082130431);
   $19 = - $0;
   $$sink1$p = $18 ? $19 : -1.0;
   $$sink1 = $12 + $$sink1$p;
   $$sink = $18 ? 1.0 : $0;
   $20 = $$sink - $$sink1;
   $21 = $20 / $12;
   $$182 = $21;
  } else {
   $$182 = 0.0;
  }
  $22 = $14 & 8388607;
  $23 = (($22) + 1060439283)|0;
  $24 = (HEAP32[tempDoublePtr>>2]=$23,+HEAPF32[tempDoublePtr>>2]);
  $25 = $24 + -1.0;
  $phitmp = (+($16|0));
  $$1 = $phitmp;$$180 = $25;$$2 = $$182;
  label = 11;
 }
 if ((label|0) == 11) {
  $26 = $$180 + 2.0;
  $27 = $$180 / $26;
  $28 = $27 * $27;
  $29 = $28 * $28;
  $30 = $29 * 0.24279078841209412;
  $31 = $30 + 0.40000972151756287;
  $32 = $29 * $31;
  $33 = $29 * 0.28498786687850952;
  $34 = $33 + 0.66666662693023682;
  $35 = $28 * $34;
  $36 = $35 + $32;
  $37 = $$180 * 0.5;
  $38 = $$180 * $37;
  $39 = $38 + $36;
  $40 = $27 * $39;
  $41 = $$1 * 9.0580006144591607E-6;
  $42 = $$2 + $41;
  $43 = $42 + $40;
  $44 = $43 - $38;
  $45 = $$180 + $44;
  $46 = $$1 * 0.69313812255859375;
  $47 = $46 + $45;
  $$078 = $47;
 }
 return (+$$078);
}
function _acoshl($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_acosh($0));
 return (+$1);
}
function _asinh($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = (_bitshift64Lshr(($1|0),($2|0),52)|0);
 $4 = tempRet0;
 $5 = $3 & 2047;
 $6 = $2 & 2147483647;
 HEAP32[tempDoublePtr>>2] = $1;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 $8 = ($5>>>0)>(1048);
 do {
  if ($8) {
   $9 = (+Math_log((+$7)));
   $10 = $9 + 0.69314718055994529;
   $$0 = $10;
  } else {
   $11 = ($5>>>0)>(1023);
   if ($11) {
    $12 = $7 * 2.0;
    $13 = $7 * $7;
    $14 = $13 + 1.0;
    $15 = (+Math_sqrt((+$14)));
    $16 = $15 + $7;
    $17 = 1.0 / $16;
    $18 = $12 + $17;
    $19 = (+Math_log((+$18)));
    $$0 = $19;
    break;
   }
   $20 = ($5>>>0)>(996);
   if ($20) {
    $21 = $7 * $7;
    $22 = $21 + 1.0;
    $23 = (+Math_sqrt((+$22)));
    $24 = $23 + 1.0;
    $25 = $21 / $24;
    $26 = $25 + $7;
    $27 = (+_log1p($26));
    $$0 = $27;
   } else {
    $$0 = $7;
   }
  }
 } while(0);
 $28 = ($2|0)<(0);
 $29 = - $$0;
 $30 = $28 ? $29 : $$0;
 return (+$30);
}
function _asinhf($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 & 2147483647;
 $3 = (HEAP32[tempDoublePtr>>2]=$2,+HEAPF32[tempDoublePtr>>2]);
 $4 = ($2>>>0)>(1166016511);
 do {
  if ($4) {
   $5 = (+Math_log((+$3)));
   $6 = $5 + 0.69314718246459961;
   $$0 = $6;
  } else {
   $7 = ($2>>>0)>(1073741823);
   if ($7) {
    $8 = $3 * 2.0;
    $9 = $3 * $3;
    $10 = $9 + 1.0;
    $11 = (+Math_sqrt((+$10)));
    $12 = $11 + $3;
    $13 = 1.0 / $12;
    $14 = $8 + $13;
    $15 = (+Math_log((+$14)));
    $$0 = $15;
    break;
   }
   $16 = ($2>>>0)>(964689919);
   if ($16) {
    $17 = $3 * $3;
    $18 = $17 + 1.0;
    $19 = (+Math_sqrt((+$18)));
    $20 = $19 + 1.0;
    $21 = $17 / $20;
    $22 = $21 + $3;
    $23 = (+_log1pf($22));
    $$0 = $23;
   } else {
    $$0 = $3;
   }
  }
 } while(0);
 $24 = ($1|0)<(0);
 $25 = - $$0;
 $26 = $24 ? $25 : $$0;
 return (+$26);
}
function _asinhl($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_asinh($0));
 return (+$1);
}
function _atanh($0) {
 $0 = +$0;
 var $$0 = 0.0, $$sink19 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = (_bitshift64Lshr(($1|0),($2|0),52)|0);
 $4 = tempRet0;
 $5 = $3 & 2047;
 $6 = $2 & 2147483647;
 HEAP32[tempDoublePtr>>2] = $1;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 $8 = ($5>>>0)<(1022);
 if ($8) {
  $9 = ($5>>>0)<(991);
  if ($9) {
   $$0 = $7;
  } else {
   $10 = $7 * 2.0;
   $11 = $10 * $7;
   $12 = 1.0 - $7;
   $13 = $11 / $12;
   $14 = $10 + $13;
   $$sink19 = $14;
   label = 5;
  }
 } else {
  $15 = 1.0 - $7;
  $16 = $7 / $15;
  $17 = $16 * 2.0;
  $$sink19 = $17;
  label = 5;
 }
 if ((label|0) == 5) {
  $18 = (+_log1p($$sink19));
  $19 = $18 * 0.5;
  $$0 = $19;
 }
 $20 = ($2|0)<(0);
 $21 = - $$0;
 $22 = $20 ? $21 : $$0;
 return (+$22);
}
function _atanhf($0) {
 $0 = +$0;
 var $$0 = 0.0, $$sink16 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 & 2147483647;
 $3 = (HEAP32[tempDoublePtr>>2]=$2,+HEAPF32[tempDoublePtr>>2]);
 $4 = ($2>>>0)<(1056964608);
 if ($4) {
  $5 = ($2>>>0)<(796917760);
  if ($5) {
   $$0 = $3;
  } else {
   $6 = $3 * 2.0;
   $7 = $6 * $3;
   $8 = 1.0 - $3;
   $9 = $7 / $8;
   $10 = $6 + $9;
   $$sink16 = $10;
   label = 5;
  }
 } else {
  $11 = 1.0 - $3;
  $12 = $3 / $11;
  $13 = $12 * 2.0;
  $$sink16 = $13;
  label = 5;
 }
 if ((label|0) == 5) {
  $14 = (+_log1pf($$sink16));
  $15 = $14 * 0.5;
  $$0 = $15;
 }
 $16 = ($1|0)<(0);
 $17 = - $$0;
 $18 = $16 ? $17 : $$0;
 return (+$18);
}
function _atanhl($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_atanh($0));
 return (+$1);
}
function _cbrt($0) {
 $0 = +$0;
 var $$052 = 0.0, $$sink53 = 0, $$sink54 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = $2 & 2147483647;
 $4 = ($3>>>0)>(2146435071);
 do {
  if ($4) {
   $5 = $0 + $0;
   $$052 = $5;
  } else {
   $6 = ($3>>>0)<(1048576);
   if ($6) {
    $7 = $0 * 18014398509481984.0;
    HEAPF64[tempDoublePtr>>3] = $7;$8 = HEAP32[tempDoublePtr>>2]|0;
    $9 = HEAP32[tempDoublePtr+4>>2]|0;
    $10 = $9 & 2147483647;
    $11 = ($10|0)==(0);
    if ($11) {
     $$052 = $0;
     break;
    } else {
     $$sink53 = 696219795;$$sink54 = $10;$15 = $9;$46 = $8;
    }
   } else {
    $$sink53 = 715094163;$$sink54 = $3;$15 = $2;$46 = $1;
   }
   $12 = (($$sink54>>>0) / 3)&-1;
   $13 = (($12) + ($$sink53))|0;
   $14 = $15 & -2147483648;
   $16 = $13 | $14;
   HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
   $18 = $17 * $17;
   $19 = $17 / $0;
   $20 = $18 * $19;
   $21 = $20 * 1.6214297201053545;
   $22 = $21 + -1.8849797954337717;
   $23 = $20 * $22;
   $24 = $23 + 1.8759518242717701;
   $25 = $20 * $20;
   $26 = $20 * $25;
   $27 = $20 * 0.14599619288661245;
   $28 = $27 + -0.75839793477876605;
   $29 = $26 * $28;
   $30 = $29 + $24;
   $31 = $30 * $17;
   HEAPF64[tempDoublePtr>>3] = $31;$32 = HEAP32[tempDoublePtr>>2]|0;
   $33 = HEAP32[tempDoublePtr+4>>2]|0;
   $34 = (_i64Add(($32|0),($33|0),-2147483648,0)|0);
   $35 = tempRet0;
   $36 = $34 & -1073741824;
   HEAP32[tempDoublePtr>>2] = $36;HEAP32[tempDoublePtr+4>>2] = $35;$37 = +HEAPF64[tempDoublePtr>>3];
   $38 = $37 * $37;
   $39 = $0 / $38;
   $40 = $37 + $37;
   $41 = $39 - $37;
   $42 = $40 + $39;
   $43 = $41 / $42;
   $44 = $43 * $37;
   $45 = $44 + $37;
   $$052 = $45;
  }
 } while(0);
 return (+$$052);
}
function _cbrtf($0) {
 $0 = +$0;
 var $$039 = 0.0, $$sink40 = 0, $$sink41 = 0, $$sroa$0$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 & 2147483647;
 $3 = ($2>>>0)>(2139095039);
 do {
  if ($3) {
   $4 = $0 + $0;
   $$039 = $4;
  } else {
   $5 = ($2>>>0)<(8388608);
   if ($5) {
    $6 = ($2|0)==(0);
    if ($6) {
     $$039 = $0;
     break;
    }
    $7 = $0 * 16777216.0;
    $8 = (HEAPF32[tempDoublePtr>>2]=$7,HEAP32[tempDoublePtr>>2]|0);
    $9 = $8 & 2147483647;
    $$sink40 = 642849266;$$sink41 = $9;$$sroa$0$0 = $8;
   } else {
    $$sink40 = 709958130;$$sink41 = $2;$$sroa$0$0 = $1;
   }
   $10 = (($$sink41>>>0) / 3)&-1;
   $11 = (($10) + ($$sink40))|0;
   $12 = $$sroa$0$0 & -2147483648;
   $13 = $12 | $11;
   $14 = (HEAP32[tempDoublePtr>>2]=$13,+HEAPF32[tempDoublePtr>>2]);
   $15 = $14;
   $16 = $15 * $15;
   $17 = $16 * $15;
   $18 = $0;
   $19 = $18 + $18;
   $20 = $19 + $17;
   $21 = $20 * $15;
   $22 = $17 + $18;
   $23 = $17 + $22;
   $24 = $21 / $23;
   $25 = $24 * $24;
   $26 = $24 * $25;
   $27 = $19 + $26;
   $28 = $24 * $27;
   $29 = $26 + $18;
   $30 = $26 + $29;
   $31 = $28 / $30;
   $32 = $31;
   $$039 = $32;
  }
 } while(0);
 return (+$$039);
}
function _cbrtl($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_cbrt($0));
 return (+$1);
}
function _coshl($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_cosh($0));
 return (+$1);
}
function _erf($0) {
 $0 = +$0;
 var $$0 = 0.0, $$041 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = (_bitshift64Lshr(($1|0),($2|0),63)|0);
 $4 = tempRet0;
 $5 = $2 & 2147483647;
 $6 = ($5>>>0)>(2146435071);
 do {
  if ($6) {
   $7 = (_bitshift64Shl(($3|0),($4|0),1)|0);
   $8 = tempRet0;
   $9 = (1 - ($7))|0;
   $10 = (+($9|0));
   $11 = 1.0 / $0;
   $12 = $11 + $10;
   $$0 = $12;
  } else {
   $13 = ($5>>>0)<(1072365568);
   if ($13) {
    $14 = ($5>>>0)<(1043333120);
    if ($14) {
     $15 = $0 * 8.0;
     $16 = $0 * 1.0270333367641007;
     $17 = $15 + $16;
     $18 = $17 * 0.125;
     $$0 = $18;
     break;
    } else {
     $19 = $0 * $0;
     $20 = $19 * 2.3763016656650163E-5;
     $21 = -0.0057702702964894416 - $20;
     $22 = $19 * $21;
     $23 = $22 + -0.02848174957559851;
     $24 = $19 * $23;
     $25 = $24 + -0.3250421072470015;
     $26 = $19 * $25;
     $27 = $26 + 0.12837916709551256;
     $28 = $19 * 3.9602282787753681E-6;
     $29 = 1.3249473800432164E-4 - $28;
     $30 = $19 * $29;
     $31 = $30 + 0.0050813062818757656;
     $32 = $19 * $31;
     $33 = $32 + 0.065022249988767294;
     $34 = $19 * $33;
     $35 = $34 + 0.39791722395915535;
     $36 = $19 * $35;
     $37 = $36 + 1.0;
     $38 = $27 / $37;
     $39 = $38 * $0;
     $40 = $39 + $0;
     $$0 = $40;
     break;
    }
   } else {
    $41 = ($5>>>0)<(1075314688);
    if ($41) {
     $42 = (+_erfc2($5,$0));
     $43 = 1.0 - $42;
     $$041 = $43;
    } else {
     $$041 = 1.0;
    }
    $44 = ($3|0)!=(0);
    $45 = ($4|0)!=(0);
    $46 = $44 | $45;
    $47 = - $$041;
    $48 = $46 ? $47 : $$041;
    $$0 = $48;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _erfc2($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$0 = 0.0, $$047 = 0.0, $$047$in = 0.0, $$048 = 0.0, $$sink49 = 0.0, $$sink51 = 0.0, $$sink53 = 0.0, $$sink55 = 0.0, $$sink57 = 0.0, $$sink59 = 0.0, $$sink60 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0;
 var $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0;
 var $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)<(1072955392);
 if ($2) {
  $3 = (+_erfc1($1));
  $$0 = $3;
 } else {
  $4 = (+Math_abs((+$1)));
  $5 = $1 * $1;
  $6 = 1.0 / $5;
  $7 = ($0>>>0)<(1074191213);
  if ($7) {
   $8 = $6 * 9.8143293441691454;
   $9 = -81.287435506306593 - $8;
   $10 = $6 * $9;
   $11 = $10 + -184.60509290671104;
   $12 = $6 * $11;
   $13 = $12 + -162.39666946257347;
   $14 = $6 * $13;
   $15 = $14 + -62.375332450326006;
   $16 = $6 * $15;
   $17 = $16 + -10.558626225323291;
   $18 = $6 * $17;
   $19 = $18 + -0.69385857270718176;
   $20 = $6 * $19;
   $21 = $20 + -0.0098649440348471482;
   $22 = $6 * 0.060424415214858099;
   $23 = 6.5702497703192817 - $22;
   $$048 = $21;$$sink49 = 19.651271667439257;$$sink51 = 137.65775414351904;$$sink53 = 434.56587747522923;$$sink55 = 645.38727173326788;$$sink57 = 429.00814002756783;$$sink59 = 108.63500554177944;$$sink60 = $23;
  } else {
   $24 = $6 * 483.5191916086514;
   $25 = -1025.0951316110772 - $24;
   $26 = $6 * $25;
   $27 = $26 + -637.56644336838963;
   $28 = $6 * $27;
   $29 = $28 + -160.63638485582192;
   $30 = $6 * $29;
   $31 = $30 + -17.757954917754752;
   $32 = $6 * $31;
   $33 = $32 + -0.79928323768052301;
   $34 = $6 * $33;
   $35 = $34 + -0.0098649429247000992;
   $$048 = $35;$$sink49 = 30.338060743482458;$$sink51 = 325.79251299657392;$$sink53 = 1536.729586084437;$$sink55 = 3199.8582195085955;$$sink57 = 2553.0504064331644;$$sink59 = 474.52854120695537;$$sink60 = -22.440952446585818;
  }
  $36 = $6 * $$sink60;
  $37 = $36 + $$sink59;
  $38 = $6 * $37;
  $39 = $$sink57 + $38;
  $40 = $6 * $39;
  $41 = $$sink55 + $40;
  $42 = $6 * $41;
  $43 = $$sink53 + $42;
  $44 = $6 * $43;
  $45 = $$sink51 + $44;
  $46 = $6 * $45;
  $47 = $$sink49 + $46;
  $$047$in = $6 * $47;
  $$047 = $$047$in + 1.0;
  HEAPF64[tempDoublePtr>>3] = $4;$48 = HEAP32[tempDoublePtr>>2]|0;
  $49 = HEAP32[tempDoublePtr+4>>2]|0;
  HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $49;$50 = +HEAPF64[tempDoublePtr>>3];
  $51 = $50 * $50;
  $52 = -0.5625 - $51;
  $53 = (+Math_exp((+$52)));
  $54 = $50 - $4;
  $55 = $4 + $50;
  $56 = $54 * $55;
  $57 = $$048 / $$047;
  $58 = $56 + $57;
  $59 = (+Math_exp((+$58)));
  $60 = $53 * $59;
  $61 = $60 / $4;
  $$0 = $61;
 }
 return (+$$0);
}
function _erfc1($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+Math_abs((+$0)));
 $2 = $1 + -1.0;
 $3 = $2 * 0.0021663755948687908;
 $4 = 0.035478304325618236 - $3;
 $5 = $2 * $4;
 $6 = $5 + -0.11089469428239668;
 $7 = $2 * $6;
 $8 = $7 + 0.31834661990116175;
 $9 = $2 * $8;
 $10 = $9 + -0.37220787603570132;
 $11 = $2 * $10;
 $12 = $11 + 0.41485611868374833;
 $13 = $2 * $12;
 $14 = $13 + -0.0023621185607526594;
 $15 = $2 * 0.011984499846799107;
 $16 = $15 + 0.013637083912029051;
 $17 = $2 * $16;
 $18 = $17 + 0.12617121980876164;
 $19 = $2 * $18;
 $20 = $19 + 0.071828654414196266;
 $21 = $2 * $20;
 $22 = $21 + 0.54039791770217105;
 $23 = $2 * $22;
 $24 = $23 + 0.10642088040084423;
 $25 = $2 * $24;
 $26 = $25 + 1.0;
 $27 = $14 / $26;
 $28 = 0.15493708848953247 - $27;
 return (+$28);
}
function _erfc($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = (_bitshift64Lshr(($1|0),($2|0),63)|0);
 $4 = tempRet0;
 $5 = $2 & 2147483647;
 $6 = ($5>>>0)>(2146435071);
 do {
  if ($6) {
   $7 = (_bitshift64Shl(($3|0),($4|0),1)|0);
   $8 = tempRet0;
   $9 = (+($7|0));
   $10 = 1.0 / $0;
   $11 = $10 + $9;
   $$0 = $11;
  } else {
   $12 = ($5>>>0)<(1072365568);
   if (!($12)) {
    $44 = ($5>>>0)<(1077673984);
    $45 = ($3|0)!=(0);
    if ($44) {
     $46 = (+_erfc2($5,$0));
     $47 = 2.0 - $46;
     $48 = $45 ? $47 : $46;
     $$0 = $48;
     break;
    } else {
     $49 = $45 ? 2.0 : 0.0;
     $$0 = $49;
     break;
    }
   }
   $13 = ($5>>>0)<(1013972992);
   if ($13) {
    $14 = 1.0 - $0;
    $$0 = $14;
    break;
   }
   $15 = $0 * $0;
   $16 = $15 * 2.3763016656650163E-5;
   $17 = -0.0057702702964894416 - $16;
   $18 = $15 * $17;
   $19 = $18 + -0.02848174957559851;
   $20 = $15 * $19;
   $21 = $20 + -0.3250421072470015;
   $22 = $15 * $21;
   $23 = $22 + 0.12837916709551256;
   $24 = $15 * 3.9602282787753681E-6;
   $25 = 1.3249473800432164E-4 - $24;
   $26 = $15 * $25;
   $27 = $26 + 0.0050813062818757656;
   $28 = $15 * $27;
   $29 = $28 + 0.065022249988767294;
   $30 = $15 * $29;
   $31 = $30 + 0.39791722395915535;
   $32 = $15 * $31;
   $33 = $32 + 1.0;
   $34 = $23 / $33;
   $35 = ($3|0)!=(0);
   $36 = ($5>>>0)<(1070596096);
   $or$cond = $35 | $36;
   if ($or$cond) {
    $37 = $34 * $0;
    $38 = $37 + $0;
    $39 = 1.0 - $38;
    $$0 = $39;
    break;
   } else {
    $40 = $0 + -0.5;
    $41 = $34 * $0;
    $42 = $40 + $41;
    $43 = 0.5 - $42;
    $$0 = $43;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _erff($0) {
 $0 = +$0;
 var $$0 = 0.0, $$041 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0;
 var $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 >>> 31;
 $3 = $1 & 2147483647;
 $4 = ($3>>>0)>(2139095039);
 do {
  if ($4) {
   $5 = $2 << 1;
   $6 = (1 - ($5))|0;
   $7 = (+($6|0));
   $8 = 1.0 / $0;
   $9 = $8 + $7;
   $$0 = $9;
  } else {
   $10 = ($3>>>0)<(1062731776);
   if ($10) {
    $11 = ($3>>>0)<(830472192);
    if ($11) {
     $12 = $0 * 8.0;
     $13 = $0 * 1.0270333290100098;
     $14 = $12 + $13;
     $15 = $14 * 0.125;
     $$0 = $15;
     break;
    } else {
     $16 = $0 * $0;
     $17 = $16 * 2.3763017452438362E-5;
     $18 = -0.0057702702470123768 - $17;
     $19 = $16 * $18;
     $20 = $19 + -0.028481749817728996;
     $21 = $16 * $20;
     $22 = $21 + -0.32504209876060486;
     $23 = $16 * $22;
     $24 = $23 + 0.12837916612625122;
     $25 = $16 * 3.9602282413397916E-6;
     $26 = 1.3249473704490811E-4 - $25;
     $27 = $16 * $26;
     $28 = $27 + 0.0050813062116503716;
     $29 = $16 * $28;
     $30 = $29 + 0.06502225250005722;
     $31 = $16 * $30;
     $32 = $31 + 0.39791721105575562;
     $33 = $16 * $32;
     $34 = $33 + 1.0;
     $35 = $24 / $34;
     $36 = $35 * $0;
     $37 = $36 + $0;
     $$0 = $37;
     break;
    }
   } else {
    $38 = ($3>>>0)<(1086324736);
    if ($38) {
     $39 = (+_erfc2_251($3,$0));
     $40 = 1.0 - $39;
     $$041 = $40;
    } else {
     $$041 = 1.0;
    }
    $41 = ($2|0)!=(0);
    $42 = - $$041;
    $43 = $41 ? $42 : $$041;
    $$0 = $43;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _erfc2_251($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$0 = 0.0, $$048 = 0.0, $$048$in = 0.0, $$049 = 0.0, $$sink50 = 0.0, $$sink52 = 0.0, $$sink54 = 0.0, $$sink56 = 0.0, $$sink58 = 0.0, $$sink60 = 0.0, $$sink61 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0;
 var $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0;
 var $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)<(1067450368);
 if ($2) {
  $3 = (+_erfc1_252($1));
  $$0 = $3;
 } else {
  $4 = (+Math_abs((+$1)));
  $5 = $1 * $1;
  $6 = 1.0 / $5;
  $7 = ($0>>>0)<(1077336941);
  if ($7) {
   $8 = $6 * 9.8143291473388671;
   $9 = -81.287437438964844 - $8;
   $10 = $6 * $9;
   $11 = $10 + -184.60508728027344;
   $12 = $6 * $11;
   $13 = $12 + -162.39666748046875;
   $14 = $6 * $13;
   $15 = $14 + -62.375331878662109;
   $16 = $6 * $15;
   $17 = $16 + -10.558626174926758;
   $18 = $6 * $17;
   $19 = $18 + -0.6938585638999939;
   $20 = $6 * $19;
   $21 = $20 + -0.0098649440333247185;
   $22 = $6 * 0.060424413532018661;
   $23 = 6.5702495574951172 - $22;
   $$049 = $21;$$sink50 = 19.651271820068359;$$sink52 = 137.65776062011719;$$sink54 = 434.56588745117188;$$sink56 = 645.38726806640625;$$sink58 = 429.00814819335938;$$sink60 = 108.63500213623047;$$sink61 = $23;
  } else {
   $24 = $6 * 483.51919555664063;
   $25 = -1025.0950927734375 - $24;
   $26 = $6 * $25;
   $27 = $26 + -637.56646728515625;
   $28 = $6 * $27;
   $29 = $28 + -160.63638305664063;
   $30 = $6 * $29;
   $31 = $30 + -17.757955551147461;
   $32 = $6 * $31;
   $33 = $32 + -0.79928326606750488;
   $34 = $6 * $33;
   $35 = $34 + -0.0098649431020021439;
   $$049 = $35;$$sink50 = 30.33806037902832;$$sink52 = 325.79251098632813;$$sink54 = 1536.7296142578125;$$sink56 = 3199.858154296875;$$sink58 = 2553.05029296875;$$sink60 = 474.52853393554688;$$sink61 = -22.440952301025391;
  }
  $36 = $6 * $$sink61;
  $37 = $36 + $$sink60;
  $38 = $6 * $37;
  $39 = $$sink58 + $38;
  $40 = $6 * $39;
  $41 = $$sink56 + $40;
  $42 = $6 * $41;
  $43 = $$sink54 + $42;
  $44 = $6 * $43;
  $45 = $$sink52 + $44;
  $46 = $6 * $45;
  $47 = $$sink50 + $46;
  $$048$in = $6 * $47;
  $$048 = $$048$in + 1.0;
  $48 = (HEAPF32[tempDoublePtr>>2]=$4,HEAP32[tempDoublePtr>>2]|0);
  $49 = $48 & -8192;
  $50 = (HEAP32[tempDoublePtr>>2]=$49,+HEAPF32[tempDoublePtr>>2]);
  $51 = $50 * $50;
  $52 = -0.5625 - $51;
  $53 = (+Math_exp((+$52)));
  $54 = $50 - $4;
  $55 = $4 + $50;
  $56 = $54 * $55;
  $57 = $$049 / $$048;
  $58 = $56 + $57;
  $59 = (+Math_exp((+$58)));
  $60 = $53 * $59;
  $61 = $60 / $4;
  $$0 = $61;
 }
 return (+$$0);
}
function _erfc1_252($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+Math_abs((+$0)));
 $2 = $1 + -1.0;
 $3 = $2 * 0.0021663755178451538;
 $4 = 0.035478305071592331 - $3;
 $5 = $2 * $4;
 $6 = $5 + -0.11089469492435455;
 $7 = $2 * $6;
 $8 = $7 + 0.31834661960601807;
 $9 = $2 * $8;
 $10 = $9 + -0.3722078800201416;
 $11 = $2 * $10;
 $12 = $11 + 0.41485610604286194;
 $13 = $2 * $12;
 $14 = $13 + -0.0023621185682713985;
 $15 = $2 * 0.011984500102698803;
 $16 = $15 + 0.01363708358258009;
 $17 = $2 * $16;
 $18 = $17 + 0.12617121636867523;
 $19 = $2 * $18;
 $20 = $19 + 0.071828655898571014;
 $21 = $2 * $20;
 $22 = $21 + 0.54039794206619263;
 $23 = $2 * $22;
 $24 = $23 + 0.10642088204622269;
 $25 = $2 * $24;
 $26 = $25 + 1.0;
 $27 = $14 / $26;
 $28 = 0.15493708848953247 - $27;
 return (+$28);
}
function _erfcf($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 >>> 31;
 $3 = $1 & 2147483647;
 $4 = ($3>>>0)>(2139095039);
 do {
  if ($4) {
   $5 = $2 << 1;
   $6 = (+($5|0));
   $7 = 1.0 / $0;
   $8 = $7 + $6;
   $$0 = $8;
  } else {
   $9 = ($3>>>0)<(1062731776);
   if (!($9)) {
    $41 = ($3>>>0)<(1105199104);
    $42 = ($2|0)!=(0);
    if ($41) {
     $43 = (+_erfc2_251($3,$0));
     $44 = 2.0 - $43;
     $45 = $42 ? $44 : $43;
     $$0 = $45;
     break;
    } else {
     $46 = $42 ? 2.0 : 0.0;
     $$0 = $46;
     break;
    }
   }
   $10 = ($3>>>0)<(595591168);
   if ($10) {
    $11 = 1.0 - $0;
    $$0 = $11;
    break;
   }
   $12 = $0 * $0;
   $13 = $12 * 2.3763017452438362E-5;
   $14 = -0.0057702702470123768 - $13;
   $15 = $12 * $14;
   $16 = $15 + -0.028481749817728996;
   $17 = $12 * $16;
   $18 = $17 + -0.32504209876060486;
   $19 = $12 * $18;
   $20 = $19 + 0.12837916612625122;
   $21 = $12 * 3.9602282413397916E-6;
   $22 = 1.3249473704490811E-4 - $21;
   $23 = $12 * $22;
   $24 = $23 + 0.0050813062116503716;
   $25 = $12 * $24;
   $26 = $25 + 0.06502225250005722;
   $27 = $12 * $26;
   $28 = $27 + 0.39791721105575562;
   $29 = $12 * $28;
   $30 = $29 + 1.0;
   $31 = $20 / $30;
   $32 = ($2|0)!=(0);
   $33 = ($3>>>0)<(1048576000);
   $or$cond = $32 | $33;
   if ($or$cond) {
    $34 = $31 * $0;
    $35 = $34 + $0;
    $36 = 1.0 - $35;
    $$0 = $36;
    break;
   } else {
    $37 = $0 + -0.5;
    $38 = $31 * $0;
    $39 = $37 + $38;
    $40 = 0.5 - $39;
    $$0 = $40;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _erfl($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_erf($0));
 return (+$1);
}
function _erfcl($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_erfc($0));
 return (+$1);
}
function _exp10($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $3 = 0.0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (+_modf($0,$1));
 $3 = +HEAPF64[$1>>3];
 HEAPF64[tempDoublePtr>>3] = $3;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $5 & 2146435072;
 $7 = ($6>>>0)<(1076887552);
 $8 = (0)<(0);
 $9 = ($6|0)==(1076887552);
 $10 = $9 & $8;
 $11 = $7 | $10;
 do {
  if ($11) {
   $12 = $2 != 0.0;
   if ($12) {
    $17 = $2 * 3.3219280948873622;
    $18 = (+_exp2($17));
    $19 = (~~(($3)));
    $20 = (($19) + 15)|0;
    $21 = (712 + ($20<<3)|0);
    $22 = +HEAPF64[$21>>3];
    $23 = $18 * $22;
    $$0 = $23;
    break;
   } else {
    $13 = (~~(($3)));
    $14 = (($13) + 15)|0;
    $15 = (712 + ($14<<3)|0);
    $16 = +HEAPF64[$15>>3];
    $$0 = $16;
    break;
   }
  } else {
   $24 = (+Math_pow(10.0,(+$0)));
   $$0 = $24;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function _modf($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0.0, $$0 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (($6) + -1023)|0;
 $8 = ($6>>>0)>(1074);
 if ($8) {
  HEAPF64[$1>>3] = $0;
  $9 = ($7|0)!=(1024);
  $10 = $3 & 1048575;
  $11 = ($2|0)==(0);
  $12 = ($10|0)==(0);
  $13 = $11 & $12;
  $or$cond = $13 | $9;
  $14 = $3 & -2147483648;
  HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $14;$15 = +HEAPF64[tempDoublePtr>>3];
  $$ = $or$cond ? $15 : $0;
  return (+$$);
 }
 $16 = ($6>>>0)<(1023);
 do {
  if ($16) {
   $17 = $3 & -2147483648;
   $18 = $1;
   $19 = $18;
   HEAP32[$19>>2] = 0;
   $20 = (($18) + 4)|0;
   $21 = $20;
   HEAP32[$21>>2] = $17;
   $$0 = $0;
  } else {
   $22 = (_bitshift64Lshr(-1,1048575,($7|0))|0);
   $23 = tempRet0;
   $24 = $22 & $2;
   $25 = $23 & $3;
   $26 = ($24|0)==(0);
   $27 = ($25|0)==(0);
   $28 = $26 & $27;
   if ($28) {
    HEAPF64[$1>>3] = $0;
    $29 = $3 & -2147483648;
    HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $29;$30 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $30;
    break;
   } else {
    $31 = (_bitshift64Ashr(0,-1048576,($7|0))|0);
    $32 = tempRet0;
    $33 = $31 & $2;
    $34 = $32 & $3;
    HEAP32[tempDoublePtr>>2] = $33;HEAP32[tempDoublePtr+4>>2] = $34;$35 = +HEAPF64[tempDoublePtr>>3];
    $36 = $1;
    $37 = $36;
    HEAP32[$37>>2] = $33;
    $38 = (($36) + 4)|0;
    $39 = $38;
    HEAP32[$39>>2] = $34;
    $40 = $0 - $35;
    $$0 = $40;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _exp2($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = $2 & 2147483647;
 $4 = ($3>>>0)>(1083174911);
 do {
  if ($4) {
   $5 = ($3>>>0)>(1083179007);
   $6 = ($2|0)>(-1);
   $7 = ($1>>>0)>(4294967295);
   $8 = ($2|0)==(-1);
   $9 = $8 & $7;
   $10 = $6 | $9;
   $or$cond = $10 & $5;
   if ($or$cond) {
    $11 = $0 * 8.9884656743115795E+307;
    $$0 = $11;
    break;
   }
   $12 = ($3>>>0)>(2146435071);
   if ($12) {
    $13 = -1.0 / $0;
    $$0 = $13;
    break;
   } else {
    $14 = !($0 <= -1075.0);
    $or$cond43 = $14 | $10;
    if ($or$cond43) {
     label = 9;
     break;
    } else {
     $$0 = 0.0;
     break;
    }
   }
  } else {
   $15 = ($3>>>0)<(1016070144);
   if ($15) {
    $16 = $0 + 1.0;
    $$0 = $16;
   } else {
    label = 9;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $17 = $0 + 26388279066624.0;
  HEAPF64[tempDoublePtr>>3] = $17;$18 = HEAP32[tempDoublePtr>>2]|0;
  $19 = HEAP32[tempDoublePtr+4>>2]|0;
  $20 = (($18) + 128)|0;
  $21 = $20 & -256;
  $22 = (($21|0) / 256)&-1;
  $23 = $17 + -26388279066624.0;
  $24 = $0 - $23;
  $25 = $20 << 1;
  $26 = $25 & 510;
  $27 = (960 + ($26<<3)|0);
  $28 = +HEAPF64[$27>>3];
  $29 = $26 | 1;
  $30 = (960 + ($29<<3)|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $24 - $31;
  $33 = $28 * $32;
  $34 = $32 * 0.0013333559164630223;
  $35 = $34 + 0.0096181298421260663;
  $36 = $32 * $35;
  $37 = $36 + 0.055504108664821403;
  $38 = $32 * $37;
  $39 = $38 + 0.2402265069591;
  $40 = $32 * $39;
  $41 = $40 + 0.69314718055994529;
  $42 = $33 * $41;
  $43 = $28 + $42;
  $44 = (+_scalbn($43,$22));
  $$0 = $44;
 }
 return (+$$0);
}
function _exp10f($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (+_modff($0,$1));
 $3 = +HEAPF32[$1>>2];
 $4 = (HEAPF32[tempDoublePtr>>2]=$3,HEAP32[tempDoublePtr>>2]|0);
 $5 = $4 & 2130706432;
 $6 = ($5>>>0)<(1090519040);
 do {
  if ($6) {
   $7 = $2 != 0.0;
   if ($7) {
    $12 = $2 * 3.3219280242919922;
    $13 = (+_exp2f($12));
    $14 = (~~(($3)));
    $15 = (($14) + 7)|0;
    $16 = (23152 + ($15<<2)|0);
    $17 = +HEAPF32[$16>>2];
    $18 = $13 * $17;
    $$0 = $18;
    break;
   } else {
    $8 = (~~(($3)));
    $9 = (($8) + 7)|0;
    $10 = (23152 + ($9<<2)|0);
    $11 = +HEAPF32[$10>>2];
    $$0 = $11;
    break;
   }
  } else {
   $19 = $0;
   $20 = $19 * 3.3219280948873622;
   $21 = (+_exp2($20));
   $22 = $21;
   $$0 = $22;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function _modff($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0.0, $$0 = 0.0, $$mask = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $3 = $2 >>> 23;
 $4 = $3 & 255;
 $5 = (($4) + -127)|0;
 $6 = ($4>>>0)>(149);
 if ($6) {
  HEAPF32[$1>>2] = $0;
  $7 = ($5|0)!=(128);
  $$mask = $2 & 8388607;
  $8 = ($$mask|0)==(0);
  $or$cond = $8 | $7;
  $9 = $2 & -2147483648;
  $10 = (HEAP32[tempDoublePtr>>2]=$9,+HEAPF32[tempDoublePtr>>2]);
  $$ = $or$cond ? $10 : $0;
  return (+$$);
 }
 $11 = ($4>>>0)<(127);
 do {
  if ($11) {
   $12 = $2 & -2147483648;
   HEAP32[$1>>2] = $12;
   $$0 = $0;
  } else {
   $13 = 8388607 >>> $5;
   $14 = $13 & $2;
   $15 = ($14|0)==(0);
   if ($15) {
    HEAPF32[$1>>2] = $0;
    $16 = $2 & -2147483648;
    $17 = (HEAP32[tempDoublePtr>>2]=$16,+HEAPF32[tempDoublePtr>>2]);
    $$0 = $17;
    break;
   } else {
    $18 = -8388608 >> $5;
    $19 = $18 & $2;
    $20 = (HEAP32[tempDoublePtr>>2]=$19,+HEAPF32[tempDoublePtr>>2]);
    HEAP32[$1>>2] = $19;
    $21 = $0 - $20;
    $$0 = $21;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _exp2f($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 & 2147483647;
 $3 = ($2>>>0)>(1123811328);
 do {
  if ($3) {
   $4 = ($2>>>0)>(2139095040);
   if ($4) {
    $$0 = $0;
   } else {
    $5 = ($1>>>0)>(1124073471);
    $6 = ($1|0)>(-1);
    $or$cond = $5 & $6;
    if ($or$cond) {
     $7 = $0 * 1.7014118346046923E+38;
     $$0 = $7;
     break;
    } else {
     $8 = ($1>>>0)>(3272998911);
     if ($8) {
      $$0 = 0.0;
      break;
     } else {
      label = 8;
      break;
     }
    }
   }
  } else {
   $9 = ($2>>>0)<(855638017);
   if ($9) {
    $10 = $0 + 1.0;
    $$0 = $10;
   } else {
    label = 8;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $11 = $0 + 786432.0;
  $12 = (HEAPF32[tempDoublePtr>>2]=$11,HEAP32[tempDoublePtr>>2]|0);
  $13 = (($12) + 8)|0;
  $14 = $13 >>> 4;
  $15 = (($14) + 1023)|0;
  $16 = (_bitshift64Shl(($15|0),0,52)|0);
  $17 = tempRet0;
  $18 = $13 & 15;
  $19 = $11 + -786432.0;
  $20 = $0 - $19;
  $21 = $20;
  $22 = (5056 + ($18<<3)|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $23 * $21;
  $25 = $21 * 0.24022650718688965;
  $26 = $25 + 0.69314718246459961;
  $27 = $26 * $24;
  $28 = $23 + $27;
  $29 = $21 * $21;
  $30 = $29 * $24;
  $31 = $21 * 0.0096183549612760544;
  $32 = $31 + 0.055505409836769104;
  $33 = $32 * $30;
  $34 = $28 + $33;
  HEAP32[tempDoublePtr>>2] = $16;HEAP32[tempDoublePtr+4>>2] = $17;$35 = +HEAPF64[tempDoublePtr>>3];
  $36 = $34 * $35;
  $37 = $36;
  $$0 = $37;
 }
 return (+$$0);
}
function _exp10l($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_exp10($0));
 return (+$1);
}
function _exp2l($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_exp2($0));
 return (+$1);
}
function _expm1l($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_expm1($0));
 return (+$1);
}
function _fdim($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___DOUBLE_BITS_262($0)|0);
 $3 = tempRet0;
 $4 = $3 & 2147483647;
 $5 = ($4>>>0)>(2146435072);
 $6 = ($2>>>0)>(0);
 $7 = ($4|0)==(2146435072);
 $8 = $7 & $6;
 $9 = $5 | $8;
 if ($9) {
  return (+$0);
 } else {
  $10 = (___DOUBLE_BITS_262($1)|0);
  $11 = tempRet0;
  $12 = $11 & 2147483647;
  $13 = ($12>>>0)>(2146435072);
  $14 = ($10>>>0)>(0);
  $15 = ($12|0)==(2146435072);
  $16 = $15 & $14;
  $17 = $13 | $16;
  $18 = $0 > $1;
  $19 = $0 - $1;
  $20 = $18 ? $19 : 0.0;
  $$ = $17 ? $1 : $20;
  return (+$$);
 }
 return +(0.0);
}
function ___DOUBLE_BITS_262($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _fdimf($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___FLOAT_BITS_263($0)|0);
 $3 = $2 & 2147483647;
 $4 = ($3>>>0)>(2139095040);
 if ($4) {
  return (+$0);
 } else {
  $5 = (___FLOAT_BITS_263($1)|0);
  $6 = $5 & 2147483647;
  $7 = ($6>>>0)>(2139095040);
  $8 = $0 > $1;
  $9 = $0 - $1;
  $10 = $8 ? $9 : 0.0;
  $$ = $7 ? $1 : $10;
  return (+$$);
 }
 return +(0.0);
}
function ___FLOAT_BITS_263($0) {
 $0 = +$0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 return ($1|0);
}
function _fdiml($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fdim($0,$1));
 return (+$2);
}
function _finite($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (___DOUBLE_BITS_264($0)|0);
 $1 = tempRet0;
 $2 = $1 & 2146435072;
 $3 = (0)!=(0);
 $4 = ($2|0)!=(2146435072);
 $5 = $3 | $4;
 $6 = $5&1;
 return ($6|0);
}
function ___DOUBLE_BITS_264($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _finitef($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___FLOAT_BITS_265($0)|0);
 $2 = $1 & 2139095040;
 $3 = ($2|0)!=(2139095040);
 $4 = $3&1;
 return ($4|0);
}
function ___FLOAT_BITS_265($0) {
 $0 = +$0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 return ($1|0);
}
function _fma($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $$0 = 0.0, $$0$$0$6 = 0.0, $$083 = 0.0, $$sroa$0$0$copyload = 0.0, $$sroa$031$0$copyload = 0.0, $$sroa$5$0$$sroa_idx34 = 0, $$sroa$5$0$copyload = 0.0, $$sroa$7$0$$sroa_idx28 = 0, $$sroa$7$0$copyload = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 48|0;
 $4 = sp + 44|0;
 $5 = sp + 40|0;
 $6 = sp + 24|0;
 $7 = sp + 8|0;
 $8 = sp;
 (___DOUBLE_BITS_266($0)|0);
 $9 = tempRet0;
 $10 = $9 & 2146435072;
 $11 = (0)==(0);
 $12 = ($10|0)==(2146435072);
 $13 = $11 & $12;
 L1: do {
  if ($13) {
   label = 3;
  } else {
   (___DOUBLE_BITS_266($1)|0);
   $14 = tempRet0;
   $15 = $14 & 2146435072;
   $16 = (0)==(0);
   $17 = ($15|0)==(2146435072);
   $18 = $16 & $17;
   if ($18) {
    label = 3;
   } else {
    $21 = (___DOUBLE_BITS_266($2)|0);
    $22 = tempRet0;
    $23 = $22 & 2146435072;
    $24 = (0)==(0);
    $25 = ($23|0)==(2146435072);
    $26 = $24 & $25;
    if ($26) {
     $$0 = $2;
    } else {
     $27 = $0 == 0.0;
     $28 = $1 == 0.0;
     $or$cond = $27 | $28;
     if ($or$cond) {
      $29 = $0 * $1;
      $30 = $29 + $2;
      $$0 = $30;
      break;
     }
     $31 = $2 == 0.0;
     if ($31) {
      $32 = $0 * $1;
      $$0 = $32;
      break;
     }
     $33 = (+_frexp($0,$3));
     $34 = (+_frexp($1,$4));
     $35 = (+_frexp($2,$5));
     $36 = (_fegetround()|0);
     $37 = HEAP32[$3>>2]|0;
     $38 = HEAP32[$4>>2]|0;
     $39 = (($38) + ($37))|0;
     $40 = HEAP32[$5>>2]|0;
     $41 = (($39) - ($40))|0;
     $42 = ($41|0)<(-53);
     if ($42) {
      (_i64Add(($21|0),($22|0),0,1048576)|0);
      $43 = tempRet0;
      $44 = $43 & 2145386496;
      $45 = (0)==(0);
      $46 = ($44|0)==(0);
      $47 = $45 & $46;
      if ($47) {
      }
      switch ($36|0) {
      case 3072:  {
       $48 = $0 > 0.0;
       $49 = $1 < 0.0;
       $50 = $48 ^ $49;
       $51 = $2 < 0.0;
       $52 = $50 ^ $51;
       if ($52) {
        $$0 = $2;
        break L1;
       }
       $53 = (+_nextafter($2,0.0));
       $$0 = $53;
       break L1;
       break;
      }
      case 1024:  {
       $54 = $0 > 0.0;
       $55 = $1 < 0.0;
       $56 = $54 ^ $55;
       if ($56) {
        $$0 = $2;
        break L1;
       }
       $57 = (+_nextafter($2,-inf));
       $$0 = $57;
       break L1;
       break;
      }
      case 2048:  {
       $58 = $0 > 0.0;
       $59 = $1 < 0.0;
       $60 = $58 ^ $59;
       if (!($60)) {
        $$0 = $2;
        break L1;
       }
       $61 = (+_nextafter($2,inf));
       $$0 = $61;
       break L1;
       break;
      }
      default: {
       $$0 = $2;
       break L1;
      }
      }
     }
     $62 = ($41|0)<(107);
     if ($62) {
      $63 = (0 - ($41))|0;
      $64 = (+_scalbn($35,$63));
      $$083 = $64;
     } else {
      $65 = (+_copysign(2.2250738585072014E-308,$35));
      $$083 = $65;
     }
     (_fesetround(0)|0);
     _dd_mul($6,$33,$34);
     $$sroa$031$0$copyload = +HEAPF64[$6>>3];
     $$sroa$5$0$$sroa_idx34 = ((($6)) + 8|0);
     $$sroa$5$0$copyload = +HEAPF64[$$sroa$5$0$$sroa_idx34>>3];
     _dd_add($7,$$sroa$031$0$copyload,$$083);
     $$sroa$0$0$copyload = +HEAPF64[$7>>3];
     $$sroa$7$0$$sroa_idx28 = ((($7)) + 8|0);
     $$sroa$7$0$copyload = +HEAPF64[$$sroa$7$0$$sroa_idx28>>3];
     $66 = $$sroa$0$0$copyload == 0.0;
     if ($66) {
      (_fesetround($36)|0);
      HEAPF64[$8>>3] = $$083;
      $$0$$0$6 = +HEAPF64[$8>>3];
      $67 = $$sroa$031$0$copyload + $$0$$0$6;
      $68 = (+_scalbn($$sroa$5$0$copyload,$39));
      $69 = $67 + $68;
      $$0 = $69;
      break;
     }
     $70 = ($36|0)==(0);
     if ($70) {
      $80 = (+_add_adjusted($$sroa$7$0$copyload,$$sroa$5$0$copyload));
      $81 = (_ilogb($$sroa$0$0$copyload)|0);
      $82 = (($81) + ($39))|0;
      $83 = ($82|0)>(-1023);
      if ($83) {
       $84 = $$sroa$0$0$copyload + $80;
       $85 = (+_scalbn($84,$39));
       $$0 = $85;
       break;
      } else {
       $86 = (+_add_and_denormalize($$sroa$0$0$copyload,$80,$39));
       $$0 = $86;
       break;
      }
     }
     $71 = (_fetestexcept(32)|0);
     (_fesetround($36)|0);
     $72 = $$sroa$5$0$copyload + $$sroa$7$0$copyload;
     $73 = $$sroa$0$0$copyload + $72;
     $74 = (+_scalbn($73,$39));
     $75 = (_ilogb($74)|0);
     $76 = ($75|0)<(-1022);
     if ($76) {
      $77 = (_fetestexcept(32)|0);
      $78 = ($77|0)==(0);
      if (!($78)) {
       $$0 = $74;
       break;
      }
     }
     $79 = ($71|0)==(0);
     if ($79) {
      $$0 = $74;
     } else {
      $$0 = $74;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = $0 * $1;
  $20 = $19 + $2;
  $$0 = $20;
 }
 STACKTOP = sp;return (+$$0);
}
function ___DOUBLE_BITS_266($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _nextafter($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$0 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (___DOUBLE_BITS_332($0)|0);
 $7 = tempRet0;
 $8 = $7 & 2147483647;
 $9 = ($8>>>0)>(2146435072);
 $10 = ($6>>>0)>(0);
 $11 = ($8|0)==(2146435072);
 $12 = $11 & $10;
 $13 = $9 | $12;
 do {
  if ($13) {
   label = 3;
  } else {
   $14 = (___DOUBLE_BITS_332($1)|0);
   $15 = tempRet0;
   $16 = $15 & 2147483647;
   $17 = ($16>>>0)>(2146435072);
   $18 = ($14>>>0)>(0);
   $19 = ($16|0)==(2146435072);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    label = 3;
   } else {
    $23 = ($2|0)==($4|0);
    $24 = ($3|0)==($5|0);
    $25 = $23 & $24;
    if ($25) {
     $$0 = $1;
    } else {
     $26 = $3 & 2147483647;
     $27 = $5 & 2147483647;
     $28 = ($2|0)==(0);
     $29 = ($26|0)==(0);
     $30 = $28 & $29;
     if ($30) {
      $31 = ($4|0)==(0);
      $32 = ($27|0)==(0);
      $33 = $31 & $32;
      if ($33) {
       $$0 = $1;
       break;
      }
      $34 = $5 & -2147483648;
      $46 = 1;$47 = $34;
     } else {
      $35 = ($26>>>0)>($27>>>0);
      $36 = ($2>>>0)>($4>>>0);
      $37 = ($26|0)==($27|0);
      $38 = $37 & $36;
      $39 = $35 | $38;
      $4 ^ $2;
      $40 = $5 ^ $3;
      $41 = ($40|0)<(0);
      $or$cond = $39 | $41;
      $42 = $or$cond ? -1 : 1;
      $43 = $or$cond ? -1 : 0;
      $44 = (_i64Add(($42|0),($43|0),($2|0),($3|0))|0);
      $45 = tempRet0;
      $46 = $44;$47 = $45;
     }
     HEAP32[tempDoublePtr>>2] = $46;HEAP32[tempDoublePtr+4>>2] = $47;$48 = +HEAPF64[tempDoublePtr>>3];
     $$0 = $48;
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $22 = $0 + $1;
  $$0 = $22;
 }
 return (+$$0);
}
function _dd_mul($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $$sroa$5$0$$sroa_idx32 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 * 134217729.0;
 $4 = $1 - $3;
 $5 = $3 + $4;
 $6 = $1 - $5;
 $7 = $2 * 134217729.0;
 $8 = $2 - $7;
 $9 = $7 + $8;
 $10 = $2 - $9;
 $11 = $5 * $9;
 $12 = $5 * $10;
 $13 = $6 * $9;
 $14 = $13 + $12;
 $15 = $11 + $14;
 $16 = $11 - $15;
 $17 = $14 + $16;
 $18 = $6 * $10;
 $19 = $18 + $17;
 HEAPF64[$0>>3] = $15;
 $$sroa$5$0$$sroa_idx32 = ((($0)) + 8|0);
 HEAPF64[$$sroa$5$0$$sroa_idx32>>3] = $19;
 return;
}
function _dd_add($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $$sroa$6$0$$sroa_idx5 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 + $2;
 $4 = $3 - $1;
 $5 = $3 - $4;
 $6 = $1 - $5;
 $7 = $2 - $4;
 $8 = $7 + $6;
 HEAPF64[$0>>3] = $3;
 $$sroa$6$0$$sroa_idx5 = ((($0)) + 8|0);
 HEAPF64[$$sroa$6$0$$sroa_idx5>>3] = $8;
 return;
}
function _ilogb($0) {
 $0 = +$0;
 var $$016 = 0, $$018 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = (_bitshift64Lshr(($1|0),($2|0),52)|0);
 $4 = tempRet0;
 $5 = $3&65535;
 $trunc$clear = $5 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $6 = (_bitshift64Shl(($1|0),($2|0),12)|0);
  $7 = tempRet0;
  $8 = ($6|0)==(0);
  $9 = ($7|0)==(0);
  $10 = $8 & $9;
  if ($10) {
   $$016 = -2147483648;
  } else {
   $11 = ($7|0)>(-1);
   $12 = ($6>>>0)>(4294967295);
   $13 = ($7|0)==(-1);
   $14 = $13 & $12;
   $15 = $11 | $14;
   if ($15) {
    $$018 = -1023;$17 = $6;$18 = $7;
    while(1) {
     $16 = (($$018) + -1)|0;
     $19 = (_bitshift64Shl(($17|0),($18|0),1)|0);
     $20 = tempRet0;
     $21 = ($20|0)>(-1);
     $22 = ($19>>>0)>(4294967295);
     $23 = ($20|0)==(-1);
     $24 = $23 & $22;
     $25 = $21 | $24;
     if ($25) {
      $$018 = $16;$17 = $19;$18 = $20;
     } else {
      $$016 = $16;
      break;
     }
    }
   } else {
    $$016 = -1023;
   }
  }
  break;
 }
 case 2047:  {
  $26 = $2 & 1048575;
  $27 = ($1|0)!=(0);
  $28 = ($26|0)!=(0);
  $29 = $27 | $28;
  $30 = $29 ? -2147483648 : 2147483647;
  $$016 = $30;
  break;
 }
 default: {
  $31 = $3 & 2047;
  $32 = (($31) + -1023)|0;
  $$016 = $32;
 }
 }
 return ($$016|0);
}
function _add_adjusted($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$$sroa$06$0$copyload = 0.0, $$sroa$06$0$copyload = 0.0, $$sroa$6$0$$sroa_idx9 = 0, $$sroa$6$0$copyload = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 _dd_add($2,$0,$1);
 $$sroa$06$0$copyload = +HEAPF64[$2>>3];
 $$sroa$6$0$$sroa_idx9 = ((($2)) + 8|0);
 $$sroa$6$0$copyload = +HEAPF64[$$sroa$6$0$$sroa_idx9>>3];
 $3 = $$sroa$6$0$copyload != 0.0;
 if ($3) {
  HEAPF64[tempDoublePtr>>3] = $$sroa$06$0$copyload;$4 = HEAP32[tempDoublePtr>>2]|0;
  $5 = HEAP32[tempDoublePtr+4>>2]|0;
  $6 = $4 & 1;
  $7 = ($6|0)==(0);
  $8 = (0)==(0);
  $9 = $7 & $8;
  HEAPF64[tempDoublePtr>>3] = $$sroa$6$0$copyload;$10 = HEAP32[tempDoublePtr>>2]|0;
  $11 = HEAP32[tempDoublePtr+4>>2]|0;
  $12 = $10 ^ $4;
  $13 = $11 ^ $5;
  $14 = (_bitshift64Lshr(($12|0),($13|0),62)|0);
  $15 = tempRet0;
  $16 = (_i64Add(($4|0),($5|0),1,0)|0);
  $17 = tempRet0;
  $18 = (_i64Subtract(($16|0),($17|0),($14|0),($15|0))|0);
  $19 = tempRet0;
  HEAP32[tempDoublePtr>>2] = $18;HEAP32[tempDoublePtr+4>>2] = $19;$20 = +HEAPF64[tempDoublePtr>>3];
  $$$sroa$06$0$copyload = $9 ? $20 : $$sroa$06$0$copyload;
  STACKTOP = sp;return (+$$$sroa$06$0$copyload);
 } else {
  STACKTOP = sp;return (+$$sroa$06$0$copyload);
 }
 return +(0.0);
}
function _add_and_denormalize($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$$sroa$08$0$copyload = 0.0, $$sroa$08$0 = 0.0, $$sroa$08$0$copyload = 0.0, $$sroa$6$0$$sroa_idx11 = 0, $$sroa$6$0$copyload = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 _dd_add($3,$0,$1);
 $$sroa$08$0$copyload = +HEAPF64[$3>>3];
 $$sroa$6$0$$sroa_idx11 = ((($3)) + 8|0);
 $$sroa$6$0$copyload = +HEAPF64[$$sroa$6$0$$sroa_idx11>>3];
 $4 = $$sroa$6$0$copyload != 0.0;
 if ($4) {
  HEAPF64[tempDoublePtr>>3] = $$sroa$08$0$copyload;$5 = HEAP32[tempDoublePtr>>2]|0;
  $6 = HEAP32[tempDoublePtr+4>>2]|0;
  $7 = (_bitshift64Lshr(($5|0),($6|0),52)|0);
  $8 = tempRet0;
  $9 = $7 & 2047;
  $10 = (0 - ($9))|0;
  $11 = ($10|0)!=($2|0);
  $12 = $5 & 1;
  $13 = ($12|0)!=(0);
  $14 = (0)!=(0);
  $15 = $13 | $14;
  $16 = $15 ^ $11;
  HEAPF64[tempDoublePtr>>3] = $$sroa$6$0$copyload;$17 = HEAP32[tempDoublePtr>>2]|0;
  $18 = HEAP32[tempDoublePtr+4>>2]|0;
  $19 = $17 ^ $5;
  $20 = $18 ^ $6;
  $21 = (_bitshift64Lshr(($19|0),($20|0),62)|0);
  $22 = tempRet0;
  $23 = $21 & 2;
  $24 = (_i64Add(($5|0),($6|0),1,0)|0);
  $25 = tempRet0;
  $26 = (_i64Subtract(($24|0),($25|0),($23|0),0)|0);
  $27 = tempRet0;
  HEAP32[tempDoublePtr>>2] = $26;HEAP32[tempDoublePtr+4>>2] = $27;$28 = +HEAPF64[tempDoublePtr>>3];
  $$$sroa$08$0$copyload = $16 ? $28 : $$sroa$08$0$copyload;
  $$sroa$08$0 = $$$sroa$08$0$copyload;
 } else {
  $$sroa$08$0 = $$sroa$08$0$copyload;
 }
 $29 = (+_scalbn($$sroa$08$0,$2));
 STACKTOP = sp;return (+$29);
}
function ___DOUBLE_BITS_332($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _fmaf($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $$0 = 0.0, $$0$$0$10 = 0.0, $$0$$0$7 = 0.0, $$041 = 0.0, $$041$in = 0.0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
 var $9 = 0.0, $or$cond = 0, $or$cond44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $4 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $5 * $6;
 $8 = $2;
 $9 = $7 + $8;
 HEAPF64[tempDoublePtr>>3] = $9;$10 = HEAP32[tempDoublePtr>>2]|0;
 $11 = HEAP32[tempDoublePtr+4>>2]|0;
 $12 = (_bitshift64Lshr(($10|0),($11|0),52)|0);
 $13 = tempRet0;
 $14 = $12 & 2047;
 $15 = $10 & 536870911;
 $16 = ($15|0)!=(268435456);
 $17 = (0)!=(0);
 $18 = $16 | $17;
 $19 = ($14|0)==(2047);
 $or$cond = $18 | $19;
 $20 = $9 - $7;
 $21 = $20 == $8;
 $or$cond44 = $21 | $or$cond;
 if ($or$cond44) {
  label = 3;
 } else {
  $22 = (_fegetround()|0);
  $23 = ($22|0)==(0);
  if ($23) {
   (_fesetround(3072)|0);
   HEAPF64[$4>>3] = $7;
   $$0$$0$7 = +HEAPF64[$4>>3];
   $31 = $$0$$0$7 + $8;
   (_fesetround(0)|0);
   $32 = $9 == $31;
   HEAPF64[tempDoublePtr>>3] = $31;$33 = HEAP32[tempDoublePtr>>2]|0;
   $34 = HEAP32[tempDoublePtr+4>>2]|0;
   $35 = (_i64Add(($33|0),($34|0),1,0)|0);
   $36 = tempRet0;
   HEAP32[tempDoublePtr>>2] = $35;HEAP32[tempDoublePtr+4>>2] = $36;$37 = +HEAPF64[tempDoublePtr>>3];
   $$0 = $32 ? $37 : $31;
   $$041$in = $$0;
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $$off = (($14) + -874)|0;
  $24 = ($$off>>>0)<(23);
  if ($24) {
   $25 = (_fetestexcept(32)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    $$041$in = $9;
   } else {
    HEAPF32[$3>>2] = $2;
    $$0$$0$10 = +HEAPF32[$3>>2];
    $27 = $$0$$0$10;
    $28 = $7 + $27;
    $29 = (_fetestexcept(32)|0);
    $30 = ($29|0)==(0);
    if ($30) {
    } else {
    }
    $$041$in = $28;
   }
  } else {
   $$041$in = $9;
  }
 }
 $$041 = $$041$in;
 STACKTOP = sp;return (+$$041);
}
function _fmal($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+_llvm_fma_f64((+$0),(+$1),(+$2)));
 return (+$3);
}
function _fmax($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$0 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___DOUBLE_BITS_267($0)|0);
 $3 = tempRet0;
 $4 = $3 & 2147483647;
 $5 = ($4>>>0)>(2146435072);
 $6 = ($2>>>0)>(0);
 $7 = ($4|0)==(2146435072);
 $8 = $7 & $6;
 $9 = $5 | $8;
 do {
  if ($9) {
   $$0 = $1;
  } else {
   $10 = (___DOUBLE_BITS_267($1)|0);
   $11 = tempRet0;
   $12 = $11 & 2147483647;
   $13 = ($12>>>0)>(2146435072);
   $14 = ($10>>>0)>(0);
   $15 = ($12|0)==(2146435072);
   $16 = $15 & $14;
   $17 = $13 | $16;
   if ($17) {
    $$0 = $0;
   } else {
    $18 = (_bitshift64Lshr(($2|0),($3|0),63)|0);
    $19 = tempRet0;
    $20 = (_bitshift64Lshr(($10|0),($11|0),63)|0);
    $21 = tempRet0;
    $22 = ($18|0)==($20|0);
    if ($22) {
     $25 = $0 < $1;
     $26 = $25 ? $1 : $0;
     $$0 = $26;
     break;
    } else {
     $23 = ($3|0)<(0);
     $24 = $23 ? $1 : $0;
     $$0 = $24;
     break;
    }
   }
  }
 } while(0);
 return (+$$0);
}
function ___DOUBLE_BITS_267($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _fmaxf($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$0 = 0.0, $$unshifted = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___FLOAT_BITS_268($0)|0);
 $3 = $2 & 2147483647;
 $4 = ($3>>>0)>(2139095040);
 do {
  if ($4) {
   $$0 = $1;
  } else {
   $5 = (___FLOAT_BITS_268($1)|0);
   $6 = $5 & 2147483647;
   $7 = ($6>>>0)>(2139095040);
   if ($7) {
    $$0 = $0;
   } else {
    $$unshifted = $5 ^ $2;
    $8 = ($$unshifted|0)<(0);
    if ($8) {
     $9 = ($2|0)<(0);
     $10 = $9 ? $1 : $0;
     $$0 = $10;
     break;
    } else {
     $11 = $0 < $1;
     $12 = $11 ? $1 : $0;
     $$0 = $12;
     break;
    }
   }
  }
 } while(0);
 return (+$$0);
}
function ___FLOAT_BITS_268($0) {
 $0 = +$0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 return ($1|0);
}
function _fmaxl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmax($0,$1));
 return (+$2);
}
function _fmin($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$0 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___DOUBLE_BITS_269($0)|0);
 $3 = tempRet0;
 $4 = $3 & 2147483647;
 $5 = ($4>>>0)>(2146435072);
 $6 = ($2>>>0)>(0);
 $7 = ($4|0)==(2146435072);
 $8 = $7 & $6;
 $9 = $5 | $8;
 do {
  if ($9) {
   $$0 = $1;
  } else {
   $10 = (___DOUBLE_BITS_269($1)|0);
   $11 = tempRet0;
   $12 = $11 & 2147483647;
   $13 = ($12>>>0)>(2146435072);
   $14 = ($10>>>0)>(0);
   $15 = ($12|0)==(2146435072);
   $16 = $15 & $14;
   $17 = $13 | $16;
   if ($17) {
    $$0 = $0;
   } else {
    $18 = (_bitshift64Lshr(($2|0),($3|0),63)|0);
    $19 = tempRet0;
    $20 = (_bitshift64Lshr(($10|0),($11|0),63)|0);
    $21 = tempRet0;
    $22 = ($18|0)==($20|0);
    if ($22) {
     $25 = $0 < $1;
     $26 = $25 ? $0 : $1;
     $$0 = $26;
     break;
    } else {
     $23 = ($3|0)<(0);
     $24 = $23 ? $0 : $1;
     $$0 = $24;
     break;
    }
   }
  }
 } while(0);
 return (+$$0);
}
function ___DOUBLE_BITS_269($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _fminf($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$0 = 0.0, $$unshifted = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___FLOAT_BITS_270($0)|0);
 $3 = $2 & 2147483647;
 $4 = ($3>>>0)>(2139095040);
 do {
  if ($4) {
   $$0 = $1;
  } else {
   $5 = (___FLOAT_BITS_270($1)|0);
   $6 = $5 & 2147483647;
   $7 = ($6>>>0)>(2139095040);
   if ($7) {
    $$0 = $0;
   } else {
    $$unshifted = $5 ^ $2;
    $8 = ($$unshifted|0)<(0);
    if ($8) {
     $9 = ($2|0)<(0);
     $10 = $9 ? $0 : $1;
     $$0 = $10;
     break;
    } else {
     $11 = $0 < $1;
     $12 = $11 ? $0 : $1;
     $$0 = $12;
     break;
    }
   }
  }
 } while(0);
 return (+$$0);
}
function ___FLOAT_BITS_270($0) {
 $0 = +$0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 return ($1|0);
}
function _fminl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmin($0,$1));
 return (+$2);
}
function _fmodf($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$0 = 0, $$068101 = 0, $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$1$lcssa = 0, $$16995 = 0, $$172$ph = 0, $$174 = 0, $$187 = 0, $$2 = 0, $$275$lcssa = 0, $$27586 = 0, $$3$lcssa = 0, $$3$ph = 0, $$376$lcssa = 0, $$37683 = 0;
 var $$384 = 0, $$4 = 0, $$lcssa = 0, $$lcssa79 = 0, $$sroa$0$0$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $3 = (HEAPF32[tempDoublePtr>>2]=$1,HEAP32[tempDoublePtr>>2]|0);
 $4 = $2 >>> 23;
 $5 = $4 & 255;
 $6 = $3 >>> 23;
 $7 = $6 & 255;
 $8 = $2 & -2147483648;
 $9 = $3 << 1;
 $10 = ($9|0)==(0);
 L1: do {
  if ($10) {
   label = 3;
  } else {
   $11 = (___FLOAT_BITS_272($1)|0);
   $12 = $11 & 2147483647;
   $13 = ($12>>>0)>(2139095040);
   $14 = ($5|0)==(255);
   $or$cond = $14 | $13;
   if ($or$cond) {
    label = 3;
   } else {
    $17 = $2 << 1;
    $18 = ($17>>>0)>($9>>>0);
    if (!($18)) {
     $19 = ($17|0)==($9|0);
     $20 = $0 * 0.0;
     $$ = $19 ? $20 : $0;
     return (+$$);
    }
    $21 = ($5|0)==(0);
    if ($21) {
     $22 = $2 << 9;
     $23 = ($22|0)>(-1);
     if ($23) {
      $$068101 = $22;$$073100 = 0;
      while(1) {
       $24 = (($$073100) + -1)|0;
       $25 = $$068101 << 1;
       $26 = ($25|0)>(-1);
       if ($26) {
        $$068101 = $25;$$073100 = $24;
       } else {
        $$073$lcssa = $24;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $27 = (1 - ($$073$lcssa))|0;
     $28 = $2 << $27;
     $$0 = $28;$$174 = $$073$lcssa;
    } else {
     $29 = $2 & 8388607;
     $30 = $29 | 8388608;
     $$0 = $30;$$174 = $5;
    }
    $31 = ($7|0)==(0);
    if ($31) {
     $32 = $3 << 9;
     $33 = ($32|0)>(-1);
     if ($33) {
      $$07194 = 0;$$16995 = $32;
      while(1) {
       $34 = (($$07194) + -1)|0;
       $35 = $$16995 << 1;
       $36 = ($35|0)>(-1);
       if ($36) {
        $$07194 = $34;$$16995 = $35;
       } else {
        $$071$lcssa = $34;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $37 = (1 - ($$071$lcssa))|0;
     $38 = $3 << $37;
     $$172$ph = $$071$lcssa;$$sroa$0$0$ph = $38;
    } else {
     $39 = $3 & 8388607;
     $40 = $39 | 8388608;
     $$172$ph = $7;$$sroa$0$0$ph = $40;
    }
    $41 = ($$174|0)>($$172$ph|0);
    $42 = (($$0) - ($$sroa$0$0$ph))|0;
    $43 = ($42|0)>(-1);
    L23: do {
     if ($41) {
      $$187 = $$0;$$27586 = $$174;$45 = $42;$66 = $43;
      while(1) {
       if ($66) {
        $44 = ($45|0)==(0);
        if ($44) {
         break;
        } else {
         $$2 = $45;
        }
       } else {
        $$2 = $$187;
       }
       $47 = $$2 << 1;
       $48 = (($$27586) + -1)|0;
       $49 = ($48|0)>($$172$ph|0);
       $50 = (($47) - ($$sroa$0$0$ph))|0;
       $51 = ($50|0)>(-1);
       if ($49) {
        $$187 = $47;$$27586 = $48;$45 = $50;$66 = $51;
       } else {
        $$1$lcssa = $47;$$275$lcssa = $48;$$lcssa = $51;$$lcssa79 = $50;
        break L23;
       }
      }
      $46 = $0 * 0.0;
      $$070 = $46;
      break L1;
     } else {
      $$1$lcssa = $$0;$$275$lcssa = $$174;$$lcssa = $43;$$lcssa79 = $42;
     }
    } while(0);
    if ($$lcssa) {
     $52 = ($$lcssa79|0)==(0);
     if ($52) {
      $54 = $0 * 0.0;
      $$070 = $54;
      break;
     } else {
      $$3$ph = $$lcssa79;
     }
    } else {
     $$3$ph = $$1$lcssa;
    }
    $53 = ($$3$ph>>>0)<(8388608);
    if ($53) {
     $$37683 = $$275$lcssa;$$384 = $$3$ph;
     while(1) {
      $55 = $$384 << 1;
      $56 = (($$37683) + -1)|0;
      $57 = ($55>>>0)<(8388608);
      if ($57) {
       $$37683 = $56;$$384 = $55;
      } else {
       $$3$lcssa = $55;$$376$lcssa = $56;
       break;
      }
     }
    } else {
     $$3$lcssa = $$3$ph;$$376$lcssa = $$275$lcssa;
    }
    $58 = ($$376$lcssa|0)>(0);
    if ($58) {
     $59 = (($$3$lcssa) + -8388608)|0;
     $60 = $$376$lcssa << 23;
     $61 = $59 | $60;
     $$4 = $61;
    } else {
     $62 = (1 - ($$376$lcssa))|0;
     $63 = $$3$lcssa >>> $62;
     $$4 = $63;
    }
    $64 = $$4 | $8;
    $65 = (HEAP32[tempDoublePtr>>2]=$64,+HEAPF32[tempDoublePtr>>2]);
    $$070 = $65;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $15 = $0 * $1;
  $16 = $15 / $15;
  $$070 = $16;
 }
 return (+$$070);
}
function ___FLOAT_BITS_272($0) {
 $0 = +$0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 return ($1|0);
}
function _frexpf($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $3 = $2 >>> 23;
 $trunc = $3&255;
 switch ($trunc<<24>>24) {
 case 0:  {
  $4 = $0 != 0.0;
  if ($4) {
   $5 = $0 * 1.8446744073709552E+19;
   $6 = (+_frexpf($5,$1));
   $7 = HEAP32[$1>>2]|0;
   $8 = (($7) + -64)|0;
   $$016 = $6;$storemerge = $8;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case -1:  {
  $$0 = $0;
  break;
 }
 default: {
  $9 = $3 & 255;
  $10 = (($9) + -126)|0;
  HEAP32[$1>>2] = $10;
  $11 = $2 & -2139095041;
  $12 = $11 | 1056964608;
  $13 = (HEAP32[tempDoublePtr>>2]=$12,+HEAPF32[tempDoublePtr>>2]);
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _hypotl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_hypot($0,$1));
 return (+$2);
}
function _ilogbf($0) {
 $0 = +$0;
 var $$01517 = 0, $$016 = 0, $$018 = 0, $$mask = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 >>> 23;
 $trunc = $2&255;
 switch ($trunc<<24>>24) {
 case 0:  {
  $3 = $1 << 9;
  $4 = ($3|0)==(0);
  if ($4) {
   $$016 = -2147483648;
  } else {
   $5 = ($3|0)>(-1);
   if ($5) {
    $$01517 = $3;$$018 = -127;
    while(1) {
     $6 = (($$018) + -1)|0;
     $7 = $$01517 << 1;
     $8 = ($7|0)>(-1);
     if ($8) {
      $$01517 = $7;$$018 = $6;
     } else {
      $$016 = $6;
      break;
     }
    }
   } else {
    $$016 = -127;
   }
  }
  break;
 }
 case -1:  {
  $$mask = $1 & 8388607;
  $9 = ($$mask|0)!=(0);
  $10 = $9 ? -2147483648 : 2147483647;
  $$016 = $10;
  break;
 }
 default: {
  $11 = $2 & 255;
  $12 = (($11) + -127)|0;
  $$016 = $12;
 }
 }
 return ($$016|0);
}
function _ilogbl($0) {
 $0 = +$0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_ilogb($0)|0);
 return ($1|0);
}
function _j0($0) {
 $0 = +$0;
 var $$0 = 0.0, $$035 = 0.0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = $2 & 2147483647;
 $4 = ($3>>>0)>(2146435071);
 do {
  if ($4) {
   $5 = $0 * $0;
   $6 = 1.0 / $5;
   $$0 = $6;
  } else {
   $7 = (+Math_abs((+$0)));
   $8 = ($3>>>0)>(1073741823);
   if ($8) {
    $9 = (+_common($3,$7,0));
    $$0 = $9;
    break;
   }
   $10 = ($3>>>0)>(1059061759);
   if ($10) {
    $11 = $0 * $0;
    $12 = $11 * 4.6183268853210319E-9;
    $13 = 1.8295404953270067E-6 - $12;
    $14 = $11 * $13;
    $15 = $14 + -1.8997929423885472E-4;
    $16 = $11 * $15;
    $17 = $16 + 0.015624999999999995;
    $18 = $11 * $17;
    $19 = $11 * 1.1661400333379E-9;
    $20 = $19 + 5.1354655020731811E-7;
    $21 = $11 * $20;
    $22 = $21 + 1.1692678466333745E-4;
    $23 = $11 * $22;
    $24 = $23 + 0.015619102946489001;
    $25 = $11 * $24;
    $26 = $25 + 1.0;
    $27 = $7 * 0.5;
    $28 = $27 + 1.0;
    $29 = 1.0 - $27;
    $30 = $28 * $29;
    $31 = $18 / $26;
    $32 = $11 * $31;
    $33 = $30 + $32;
    $$0 = $33;
    break;
   } else {
    $34 = ($3>>>0)>(939524095);
    $35 = $7 * 0.25;
    $36 = $7 * $35;
    $$035 = $34 ? $36 : $7;
    $37 = 1.0 - $$035;
    $$0 = $37;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _common($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $$ = 0.0, $$$033 = 0.0, $$032 = 0.0, $$033 = 0.0, $$1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+Math_sin((+$1)));
 $4 = (+Math_cos((+$1)));
 $5 = ($2|0)!=(0);
 $6 = - $4;
 $$ = $5 ? $6 : $4;
 $7 = $3 + $$;
 $8 = ($0>>>0)<(2145386496);
 if ($8) {
  $9 = $3 - $$;
  $10 = $1 * 2.0;
  $11 = (+Math_cos((+$10)));
  $12 = - $11;
  $13 = $3 * $$;
  $14 = $13 < 0.0;
  if ($14) {
   $15 = $12 / $9;
   $$032 = $15;$$033 = $9;
  } else {
   $16 = $12 / $7;
   $$032 = $7;$$033 = $16;
  }
  $17 = ($0>>>0)<(1207959552);
  if ($17) {
   $18 = - $$033;
   $$$033 = $5 ? $18 : $$033;
   $19 = (+_pzero($1));
   $20 = $$032 * $19;
   $21 = (+_qzero($1));
   $22 = $$$033 * $21;
   $23 = $20 - $22;
   $$1 = $23;
  } else {
   $$1 = $$032;
  }
 } else {
  $$1 = $7;
 }
 $24 = $$1 * 0.56418958354775628;
 $25 = (+Math_sqrt((+$1)));
 $26 = $24 / $25;
 return (+$26);
}
function _pzero($0) {
 $0 = +$0;
 var $$ = 0, $$0 = 0, $$041 = 0, $$42 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = $2 & 2147483647;
 $4 = ($3>>>0)>(1075838975);
 if ($4) {
  $$0 = 5824;$$041 = 5744;
 } else {
  $5 = ($3>>>0)>(1074933386);
  $6 = ($3>>>0)>(1074191212);
  if ($5) {
   $$0 = 5872;$$041 = 5784;
  } else {
   $$42 = $6 ? 5568 : 5616;
   $$ = $6 ? 5664 : 5704;
   $$0 = $$42;$$041 = $$;
  }
 }
 $7 = $0 * $0;
 $8 = 1.0 / $7;
 $9 = +HEAPF64[$$0>>3];
 $10 = ((($$0)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = ((($$0)) + 16|0);
 $13 = +HEAPF64[$12>>3];
 $14 = ((($$0)) + 24|0);
 $15 = +HEAPF64[$14>>3];
 $16 = ((($$0)) + 32|0);
 $17 = +HEAPF64[$16>>3];
 $18 = ((($$0)) + 40|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $8 * $19;
 $21 = $17 + $20;
 $22 = $8 * $21;
 $23 = $15 + $22;
 $24 = $8 * $23;
 $25 = $13 + $24;
 $26 = $8 * $25;
 $27 = $11 + $26;
 $28 = $8 * $27;
 $29 = $9 + $28;
 $30 = +HEAPF64[$$041>>3];
 $31 = ((($$041)) + 8|0);
 $32 = +HEAPF64[$31>>3];
 $33 = ((($$041)) + 16|0);
 $34 = +HEAPF64[$33>>3];
 $35 = ((($$041)) + 24|0);
 $36 = +HEAPF64[$35>>3];
 $37 = ((($$041)) + 32|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $8 * $38;
 $40 = $36 + $39;
 $41 = $8 * $40;
 $42 = $34 + $41;
 $43 = $8 * $42;
 $44 = $32 + $43;
 $45 = $8 * $44;
 $46 = $30 + $45;
 $47 = $8 * $46;
 $48 = $47 + 1.0;
 $49 = $29 / $48;
 $50 = $49 + 1.0;
 return (+$50);
}
function _qzero($0) {
 $0 = +$0;
 var $$ = 0, $$0 = 0, $$044 = 0, $$45 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = $2 & 2147483647;
 $4 = ($3>>>0)>(1075838975);
 if ($4) {
  $$0 = 5472;$$044 = 5376;
 } else {
  $5 = ($3>>>0)>(1074933386);
  $6 = ($3>>>0)>(1074191212);
  if ($5) {
   $$0 = 5520;$$044 = 5424;
  } else {
   $$45 = $6 ? 5184 : 5232;
   $$ = $6 ? 5280 : 5328;
   $$0 = $$45;$$044 = $$;
  }
 }
 $7 = $0 * $0;
 $8 = 1.0 / $7;
 $9 = +HEAPF64[$$0>>3];
 $10 = ((($$0)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = ((($$0)) + 16|0);
 $13 = +HEAPF64[$12>>3];
 $14 = ((($$0)) + 24|0);
 $15 = +HEAPF64[$14>>3];
 $16 = ((($$0)) + 32|0);
 $17 = +HEAPF64[$16>>3];
 $18 = ((($$0)) + 40|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $8 * $19;
 $21 = $17 + $20;
 $22 = $8 * $21;
 $23 = $15 + $22;
 $24 = $8 * $23;
 $25 = $13 + $24;
 $26 = $8 * $25;
 $27 = $11 + $26;
 $28 = $8 * $27;
 $29 = $9 + $28;
 $30 = +HEAPF64[$$044>>3];
 $31 = ((($$044)) + 8|0);
 $32 = +HEAPF64[$31>>3];
 $33 = ((($$044)) + 16|0);
 $34 = +HEAPF64[$33>>3];
 $35 = ((($$044)) + 24|0);
 $36 = +HEAPF64[$35>>3];
 $37 = ((($$044)) + 32|0);
 $38 = +HEAPF64[$37>>3];
 $39 = ((($$044)) + 40|0);
 $40 = +HEAPF64[$39>>3];
 $41 = $8 * $40;
 $42 = $38 + $41;
 $43 = $8 * $42;
 $44 = $36 + $43;
 $45 = $8 * $44;
 $46 = $34 + $45;
 $47 = $8 * $46;
 $48 = $32 + $47;
 $49 = $8 * $48;
 $50 = $30 + $49;
 $51 = $8 * $50;
 $52 = $51 + 1.0;
 $53 = $29 / $52;
 $54 = $53 + -0.125;
 $55 = $54 / $0;
 return (+$55);
}
function _y0($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = (_bitshift64Shl(($2|0),0,1)|0);
 $4 = tempRet0;
 $5 = $3 | $1;
 $4 | $2;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $$0 = -inf;
  } else {
   $7 = ($2|0)<(0);
   if ($7) {
    $$0 = nan;
   } else {
    $8 = ($2>>>0)>(2146435071);
    if ($8) {
     $9 = 1.0 / $0;
     $$0 = $9;
     break;
    }
    $10 = ($2>>>0)>(1073741823);
    if ($10) {
     $11 = (+_common($2,$0,1));
     $$0 = $11;
     break;
    }
    $12 = ($2>>>0)>(1044381695);
    if ($12) {
     $13 = $0 * $0;
     $14 = $13 * 3.982051941321034E-11;
     $15 = 1.9559013703502292E-8 - $14;
     $16 = $13 * $15;
     $17 = $16 + -3.8140705372436416E-6;
     $18 = $13 * $17;
     $19 = $18 + 3.4745343209368365E-4;
     $20 = $13 * $19;
     $21 = $20 + -0.01381856719455969;
     $22 = $13 * $21;
     $23 = $22 + 0.17666645250918112;
     $24 = $13 * $23;
     $25 = $24 + -0.073804295108687232;
     $26 = $13 * 4.4111031133267547E-10;
     $27 = $26 + 2.5915085184045781E-7;
     $28 = $13 * $27;
     $29 = $28 + 7.6006862735035325E-5;
     $30 = $13 * $29;
     $31 = $30 + 0.01273048348341237;
     $32 = $13 * $31;
     $33 = $32 + 1.0;
     $34 = $25 / $33;
     $35 = (+_j0($0));
     $36 = (+Math_log((+$0)));
     $37 = $35 * $36;
     $38 = $37 * 0.63661977236758138;
     $39 = $34 + $38;
     $$0 = $39;
     break;
    } else {
     $40 = (+Math_log((+$0)));
     $41 = $40 * 0.63661977236758138;
     $42 = $41 + -0.073804295108687232;
     $$0 = $42;
     break;
    }
   }
  }
 } while(0);
 return (+$$0);
}
function _j0f($0) {
 $0 = +$0;
 var $$0 = 0.0, $$035 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 & 2147483647;
 $3 = ($2>>>0)>(2139095039);
 do {
  if ($3) {
   $4 = $0 * $0;
   $5 = 1.0 / $4;
   $$0 = $5;
  } else {
   $6 = (+Math_abs((+$0)));
   $7 = ($2>>>0)>(1073741823);
   if ($7) {
    $8 = (+_common_283($2,$6,0));
    $$0 = $8;
    break;
   }
   $9 = ($2>>>0)>(973078527);
   if ($9) {
    $10 = $0 * $0;
    $11 = $10 * 4.618327054117799E-9;
    $12 = 1.8295404515811242E-6 - $11;
    $13 = $10 * $12;
    $14 = $13 + -1.8997929873876274E-4;
    $15 = $10 * $14;
    $16 = $15 + 0.015625;
    $17 = $10 * $16;
    $18 = $10 * 1.1661400733942173E-9;
    $19 = $18 + 5.1354652441659709E-7;
    $20 = $10 * $19;
    $21 = $20 + 1.1692678526742384E-4;
    $22 = $10 * $21;
    $23 = $22 + 0.015619102865457535;
    $24 = $10 * $23;
    $25 = $24 + 1.0;
    $26 = $6 * 0.5;
    $27 = $26 + 1.0;
    $28 = 1.0 - $26;
    $29 = $27 * $28;
    $30 = $17 / $25;
    $31 = $10 * $30;
    $32 = $29 + $31;
    $$0 = $32;
    break;
   } else {
    $33 = ($2>>>0)>(562036735);
    $34 = $6 * 0.25;
    $35 = $6 * $34;
    $$035 = $33 ? $35 : $6;
    $36 = 1.0 - $$035;
    $$0 = $36;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _common_283($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $$ = 0.0, $$$032 = 0.0, $$0 = 0.0, $$032 = 0.0, $$1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+Math_sin((+$1)));
 $4 = (+Math_cos((+$1)));
 $5 = ($2|0)!=(0);
 $6 = - $4;
 $$ = $5 ? $6 : $4;
 $7 = $3 + $$;
 $8 = ($0>>>0)<(2130706432);
 if ($8) {
  $9 = $3 - $$;
  $10 = $1 * 2.0;
  $11 = (+Math_cos((+$10)));
  $12 = - $11;
  $13 = $3 * $$;
  $14 = $13 < 0.0;
  if ($14) {
   $15 = $12 / $9;
   $$0 = $15;$$032 = $9;
  } else {
   $16 = $12 / $7;
   $$0 = $7;$$032 = $16;
  }
  $17 = ($0>>>0)<(1484783616);
  if ($17) {
   $18 = - $$032;
   $$$032 = $5 ? $18 : $$032;
   $19 = (+_pzerof($1));
   $20 = $$0 * $19;
   $21 = (+_qzerof($1));
   $22 = $$$032 * $21;
   $23 = $20 - $22;
   $$1 = $23;
  } else {
   $$1 = $$0;
  }
 } else {
  $$1 = $7;
 }
 $24 = $$1 * 0.564189612865448;
 $25 = (+Math_sqrt((+$1)));
 $26 = $24 / $25;
 return (+$26);
}
function _pzerof($0) {
 $0 = +$0;
 var $$ = 0, $$0 = 0, $$041 = 0, $$42 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 & 2147483647;
 $3 = ($2>>>0)>(1090519039);
 if ($3) {
  $$0 = 23532;$$041 = 23492;
 } else {
  $4 = ($2>>>0)>(1089936471);
  $5 = ($2>>>0)>(1077336935);
  if ($4) {
   $$0 = 23556;$$041 = 23512;
  } else {
   $$42 = $5 ? 23404 : 23428;
   $$ = $5 ? 23452 : 23472;
   $$0 = $$42;$$041 = $$;
  }
 }
 $6 = $0 * $0;
 $7 = 1.0 / $6;
 $8 = +HEAPF32[$$0>>2];
 $9 = ((($$0)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = ((($$0)) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = ((($$0)) + 12|0);
 $14 = +HEAPF32[$13>>2];
 $15 = ((($$0)) + 16|0);
 $16 = +HEAPF32[$15>>2];
 $17 = ((($$0)) + 20|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $7 * $18;
 $20 = $16 + $19;
 $21 = $7 * $20;
 $22 = $14 + $21;
 $23 = $7 * $22;
 $24 = $12 + $23;
 $25 = $7 * $24;
 $26 = $10 + $25;
 $27 = $7 * $26;
 $28 = $8 + $27;
 $29 = +HEAPF32[$$041>>2];
 $30 = ((($$041)) + 4|0);
 $31 = +HEAPF32[$30>>2];
 $32 = ((($$041)) + 8|0);
 $33 = +HEAPF32[$32>>2];
 $34 = ((($$041)) + 12|0);
 $35 = +HEAPF32[$34>>2];
 $36 = ((($$041)) + 16|0);
 $37 = +HEAPF32[$36>>2];
 $38 = $7 * $37;
 $39 = $35 + $38;
 $40 = $7 * $39;
 $41 = $33 + $40;
 $42 = $7 * $41;
 $43 = $31 + $42;
 $44 = $7 * $43;
 $45 = $29 + $44;
 $46 = $7 * $45;
 $47 = $46 + 1.0;
 $48 = $28 / $47;
 $49 = $48 + 1.0;
 return (+$49);
}
function _qzerof($0) {
 $0 = +$0;
 var $$ = 0, $$0 = 0, $$044 = 0, $$45 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 & 2147483647;
 $3 = ($2>>>0)>(1090519039);
 if ($3) {
  $$0 = 23356;$$044 = 23308;
 } else {
  $4 = ($2>>>0)>(1089936471);
  $5 = ($2>>>0)>(1077336935);
  if ($4) {
   $$0 = 23380;$$044 = 23332;
  } else {
   $$45 = $5 ? 23212 : 23236;
   $$ = $5 ? 23260 : 23284;
   $$0 = $$45;$$044 = $$;
  }
 }
 $6 = $0 * $0;
 $7 = 1.0 / $6;
 $8 = +HEAPF32[$$0>>2];
 $9 = ((($$0)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = ((($$0)) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = ((($$0)) + 12|0);
 $14 = +HEAPF32[$13>>2];
 $15 = ((($$0)) + 16|0);
 $16 = +HEAPF32[$15>>2];
 $17 = ((($$0)) + 20|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $7 * $18;
 $20 = $16 + $19;
 $21 = $7 * $20;
 $22 = $14 + $21;
 $23 = $7 * $22;
 $24 = $12 + $23;
 $25 = $7 * $24;
 $26 = $10 + $25;
 $27 = $7 * $26;
 $28 = $8 + $27;
 $29 = +HEAPF32[$$044>>2];
 $30 = ((($$044)) + 4|0);
 $31 = +HEAPF32[$30>>2];
 $32 = ((($$044)) + 8|0);
 $33 = +HEAPF32[$32>>2];
 $34 = ((($$044)) + 12|0);
 $35 = +HEAPF32[$34>>2];
 $36 = ((($$044)) + 16|0);
 $37 = +HEAPF32[$36>>2];
 $38 = ((($$044)) + 20|0);
 $39 = +HEAPF32[$38>>2];
 $40 = $7 * $39;
 $41 = $37 + $40;
 $42 = $7 * $41;
 $43 = $35 + $42;
 $44 = $7 * $43;
 $45 = $33 + $44;
 $46 = $7 * $45;
 $47 = $31 + $46;
 $48 = $7 * $47;
 $49 = $29 + $48;
 $50 = $7 * $49;
 $51 = $50 + 1.0;
 $52 = $28 / $51;
 $53 = $52 + -0.125;
 $54 = $53 / $0;
 return (+$54);
}
function _y0f($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 & 2147483647;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $$0 = -inf;
  } else {
   $4 = ($1|0)<(0);
   if ($4) {
    $$0 = nan;
   } else {
    $5 = ($1>>>0)>(2139095039);
    if ($5) {
     $6 = 1.0 / $0;
     $$0 = $6;
     break;
    }
    $7 = ($1>>>0)>(1073741823);
    if ($7) {
     $8 = (+_common_283($1,$0,1));
     $$0 = $8;
     break;
    }
    $9 = ($1>>>0)>(956301311);
    if ($9) {
     $10 = $0 * $0;
     $11 = $10 * 3.9820518410449424E-11;
     $12 = 1.955901396399895E-8 - $11;
     $13 = $10 * $12;
     $14 = $13 + -3.8140706237754785E-6;
     $15 = $10 * $14;
     $16 = $15 + 3.4745343145914376E-4;
     $17 = $10 * $16;
     $18 = $17 + -0.013818567618727684;
     $19 = $10 * $18;
     $20 = $19 + 0.17666645348072052;
     $21 = $10 * $20;
     $22 = $21 + -0.073804296553134918;
     $23 = $10 * 4.4111031494153963E-10;
     $24 = $23 + 2.5915085188898956E-7;
     $25 = $10 * $24;
     $26 = $25 + 7.6006865128874779E-5;
     $27 = $10 * $26;
     $28 = $27 + 0.012730483897030354;
     $29 = $10 * $28;
     $30 = $29 + 1.0;
     $31 = $22 / $30;
     $32 = (+_j0f($0));
     $33 = (+Math_log((+$0)));
     $34 = $32 * $33;
     $35 = $34 * 0.63661974668502808;
     $36 = $31 + $35;
     $$0 = $36;
     break;
    } else {
     $37 = (+Math_log((+$0)));
     $38 = $37 * 0.63661974668502808;
     $39 = $38 + -0.073804296553134918;
     $$0 = $39;
     break;
    }
   }
  }
 } while(0);
 return (+$$0);
}
function _j1($0) {
 $0 = +$0;
 var $$0 = 0.0, $$035 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = (_bitshift64Lshr(($1|0),($2|0),63)|0);
 $4 = tempRet0;
 $5 = $2 & 2147483647;
 $6 = ($5>>>0)>(2146435071);
 do {
  if ($6) {
   $7 = $0 * $0;
   $8 = 1.0 / $7;
   $$0 = $8;
  } else {
   $9 = ($5>>>0)>(1073741823);
   if ($9) {
    $10 = (+Math_abs((+$0)));
    $11 = (+_common_300($5,$10,0,$3));
    $$0 = $11;
    break;
   }
   $12 = ($5>>>0)>(939524095);
   if ($12) {
    $13 = $0 * $0;
    $14 = $13 * 4.9672799960958445E-8;
    $15 = $14 + -1.599556310840356E-5;
    $16 = $13 * $15;
    $17 = $16 + 0.0014070566695518971;
    $18 = $13 * $17;
    $19 = $18 + -0.0625;
    $20 = $13 * $19;
    $21 = $13 * 1.2354227442613791E-11;
    $22 = $21 + 5.0463625707621704E-9;
    $23 = $13 * $22;
    $24 = $23 + 1.1771846404262368E-6;
    $25 = $13 * $24;
    $26 = $25 + 1.8594678558863092E-4;
    $27 = $13 * $26;
    $28 = $27 + 0.019153759953836346;
    $29 = $13 * $28;
    $30 = $29 + 1.0;
    $31 = $20 / $30;
    $$035 = $31;
   } else {
    $$035 = $0;
   }
   $32 = $$035 + 0.5;
   $33 = $32 * $0;
   $$0 = $33;
  }
 } while(0);
 return (+$$0);
}
function _common_300($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0.0, $$$034 = 0.0, $$0 = 0.0, $$034 = 0.0, $$1 = 0.0, $$1$ = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (+Math_sin((+$1)));
 $5 = ($2|0)!=(0);
 $6 = - $4;
 $$ = $5 ? $6 : $4;
 $7 = (+Math_cos((+$1)));
 $8 = $$ - $7;
 $9 = ($0>>>0)<(2145386496);
 if ($9) {
  $10 = - $$;
  $11 = $10 - $7;
  $12 = $1 * 2.0;
  $13 = (+Math_cos((+$12)));
  $14 = $$ * $7;
  $15 = $14 > 0.0;
  if ($15) {
   $16 = $13 / $11;
   $$0 = $16;$$034 = $11;
  } else {
   $17 = $13 / $8;
   $$0 = $8;$$034 = $17;
  }
  $18 = ($0>>>0)<(1207959552);
  if ($18) {
   $19 = - $$034;
   $$$034 = $5 ? $19 : $$034;
   $20 = (+_pone($1));
   $21 = $$0 * $20;
   $22 = (+_qone($1));
   $23 = $$$034 * $22;
   $24 = $21 - $23;
   $$1 = $24;
  } else {
   $$1 = $$0;
  }
 } else {
  $$1 = $8;
 }
 $25 = ($3|0)==(0);
 $26 = - $$1;
 $$1$ = $25 ? $$1 : $26;
 $27 = $$1$ * 0.56418958354775628;
 $28 = (+Math_sqrt((+$1)));
 $29 = $27 / $28;
 return (+$29);
}
function _pone($0) {
 $0 = +$0;
 var $$ = 0, $$0 = 0, $$041 = 0, $$42 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = $2 & 2147483647;
 $4 = ($3>>>0)>(1075838975);
 if ($4) {
  $$0 = 6560;$$041 = 6480;
 } else {
  $5 = ($3>>>0)>(1074933386);
  $6 = ($3>>>0)>(1074191212);
  if ($5) {
   $$0 = 6608;$$041 = 6520;
  } else {
   $$42 = $6 ? 6304 : 6352;
   $$ = $6 ? 6400 : 6440;
   $$0 = $$42;$$041 = $$;
  }
 }
 $7 = $0 * $0;
 $8 = 1.0 / $7;
 $9 = +HEAPF64[$$0>>3];
 $10 = ((($$0)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = ((($$0)) + 16|0);
 $13 = +HEAPF64[$12>>3];
 $14 = ((($$0)) + 24|0);
 $15 = +HEAPF64[$14>>3];
 $16 = ((($$0)) + 32|0);
 $17 = +HEAPF64[$16>>3];
 $18 = ((($$0)) + 40|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $8 * $19;
 $21 = $17 + $20;
 $22 = $8 * $21;
 $23 = $15 + $22;
 $24 = $8 * $23;
 $25 = $13 + $24;
 $26 = $8 * $25;
 $27 = $11 + $26;
 $28 = $8 * $27;
 $29 = $9 + $28;
 $30 = +HEAPF64[$$041>>3];
 $31 = ((($$041)) + 8|0);
 $32 = +HEAPF64[$31>>3];
 $33 = ((($$041)) + 16|0);
 $34 = +HEAPF64[$33>>3];
 $35 = ((($$041)) + 24|0);
 $36 = +HEAPF64[$35>>3];
 $37 = ((($$041)) + 32|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $8 * $38;
 $40 = $36 + $39;
 $41 = $8 * $40;
 $42 = $34 + $41;
 $43 = $8 * $42;
 $44 = $32 + $43;
 $45 = $8 * $44;
 $46 = $30 + $45;
 $47 = $8 * $46;
 $48 = $47 + 1.0;
 $49 = $29 / $48;
 $50 = $49 + 1.0;
 return (+$50);
}
function _qone($0) {
 $0 = +$0;
 var $$ = 0, $$0 = 0, $$044 = 0, $$45 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = $2 & 2147483647;
 $4 = ($3>>>0)>(1075838975);
 if ($4) {
  $$0 = 6208;$$044 = 6112;
 } else {
  $5 = ($3>>>0)>(1074933386);
  $6 = ($3>>>0)>(1074191212);
  if ($5) {
   $$0 = 6256;$$044 = 6160;
  } else {
   $$45 = $6 ? 5920 : 5968;
   $$ = $6 ? 6016 : 6064;
   $$0 = $$45;$$044 = $$;
  }
 }
 $7 = $0 * $0;
 $8 = 1.0 / $7;
 $9 = +HEAPF64[$$0>>3];
 $10 = ((($$0)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = ((($$0)) + 16|0);
 $13 = +HEAPF64[$12>>3];
 $14 = ((($$0)) + 24|0);
 $15 = +HEAPF64[$14>>3];
 $16 = ((($$0)) + 32|0);
 $17 = +HEAPF64[$16>>3];
 $18 = ((($$0)) + 40|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $8 * $19;
 $21 = $17 + $20;
 $22 = $8 * $21;
 $23 = $15 + $22;
 $24 = $8 * $23;
 $25 = $13 + $24;
 $26 = $8 * $25;
 $27 = $11 + $26;
 $28 = $8 * $27;
 $29 = $9 + $28;
 $30 = +HEAPF64[$$044>>3];
 $31 = ((($$044)) + 8|0);
 $32 = +HEAPF64[$31>>3];
 $33 = ((($$044)) + 16|0);
 $34 = +HEAPF64[$33>>3];
 $35 = ((($$044)) + 24|0);
 $36 = +HEAPF64[$35>>3];
 $37 = ((($$044)) + 32|0);
 $38 = +HEAPF64[$37>>3];
 $39 = ((($$044)) + 40|0);
 $40 = +HEAPF64[$39>>3];
 $41 = $8 * $40;
 $42 = $38 + $41;
 $43 = $8 * $42;
 $44 = $36 + $43;
 $45 = $8 * $44;
 $46 = $34 + $45;
 $47 = $8 * $46;
 $48 = $32 + $47;
 $49 = $8 * $48;
 $50 = $30 + $49;
 $51 = $8 * $50;
 $52 = $51 + 1.0;
 $53 = $29 / $52;
 $54 = $53 + 0.375;
 $55 = $54 / $0;
 return (+$55);
}
function _y1($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = (_bitshift64Shl(($2|0),0,1)|0);
 $4 = tempRet0;
 $5 = $3 | $1;
 $4 | $2;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $$0 = -inf;
  } else {
   $7 = ($2|0)<(0);
   if ($7) {
    $$0 = nan;
   } else {
    $8 = ($2>>>0)>(2146435071);
    if ($8) {
     $9 = 1.0 / $0;
     $$0 = $9;
     break;
    }
    $10 = ($2>>>0)>(1073741823);
    if ($10) {
     $11 = (+_common_300($2,$0,1,0));
     $$0 = $11;
     break;
    }
    $12 = ($2>>>0)<(1016070144);
    if ($12) {
     $13 = -0.63661977236758138 / $0;
     $$0 = $13;
     break;
    } else {
     $14 = $0 * $0;
     $15 = $14 * 9.1909915803987887E-8;
     $16 = 2.352526005616105E-5 - $15;
     $17 = $14 * $16;
     $18 = $17 + -0.0019125689587576355;
     $19 = $14 * $18;
     $20 = $19 + 0.050443871663981128;
     $21 = $14 * $20;
     $22 = $21 + -0.19605709064623894;
     $23 = $14 * 1.6655924620799208E-11;
     $24 = $23 + 6.227414523646215E-9;
     $25 = $14 * $24;
     $26 = $25 + 1.3560880109751623E-6;
     $27 = $14 * $26;
     $28 = $27 + 2.0255258102513517E-4;
     $29 = $14 * $28;
     $30 = $29 + 0.01991673182366499;
     $31 = $14 * $30;
     $32 = $31 + 1.0;
     $33 = $22 / $32;
     $34 = $33 * $0;
     $35 = (+_j1($0));
     $36 = (+Math_log((+$0)));
     $37 = $35 * $36;
     $38 = 1.0 / $0;
     $39 = $37 - $38;
     $40 = $39 * 0.63661977236758138;
     $41 = $34 + $40;
     $$0 = $41;
     break;
    }
   }
  }
 } while(0);
 return (+$$0);
}
function _j1f($0) {
 $0 = +$0;
 var $$0 = 0.0, $$035 = 0.0, $$035$in = 0.0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 >>> 31;
 $3 = $1 & 2147483647;
 $4 = ($3>>>0)>(2139095039);
 do {
  if ($4) {
   $5 = $0 * $0;
   $6 = 1.0 / $5;
   $$0 = $6;
  } else {
   $7 = ($3>>>0)>(1073741823);
   if ($7) {
    $8 = (+Math_abs((+$0)));
    $9 = (+_common_301($3,$8,0,$2));
    $$0 = $9;
    break;
   }
   $10 = ($3>>>0)>(838860799);
   if ($10) {
    $11 = $0 * $0;
    $12 = $11 * 4.9672799207201024E-8;
    $13 = $12 + -1.5995563444448635E-5;
    $14 = $11 * $13;
    $15 = $14 + 0.0014070566976442933;
    $16 = $11 * $15;
    $17 = $16 + -0.0625;
    $18 = $11 * $17;
    $19 = $11 * 1.2354227016397878E-11;
    $20 = $19 + 5.0463624390317818E-9;
    $21 = $11 * $20;
    $22 = $21 + 1.1771846857300261E-6;
    $23 = $11 * $22;
    $24 = $23 + 1.8594678840599954E-4;
    $25 = $11 * $24;
    $26 = $25 + 0.019153760746121407;
    $27 = $11 * $26;
    $28 = $27 + 1.0;
    $29 = $18 / $28;
    $$035$in = $29;
   } else {
    $$035$in = $0;
   }
   $$035 = $$035$in + 0.5;
   $30 = $$035 * $0;
   $$0 = $30;
  }
 } while(0);
 return (+$$0);
}
function _common_301($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0.0, $$$034 = 0.0, $$0 = 0.0, $$034 = 0.0, $$1 = 0.0, $$1$ = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = (+Math_sin((+$1)));
 $5 = $4;
 $6 = ($2|0)!=(0);
 $7 = - $5;
 $$ = $6 ? $7 : $5;
 $8 = (+Math_cos((+$1)));
 $9 = $8;
 $10 = $$ - $9;
 $11 = ($0>>>0)<(2130706432);
 if ($11) {
  $12 = - $$;
  $13 = $12 - $9;
  $14 = $1 * 2.0;
  $15 = (+Math_cos((+$14)));
  $16 = $15;
  $17 = $$ * $9;
  $18 = $17 > 0.0;
  if ($18) {
   $19 = $16 / $13;
   $$0 = $19;$$034 = $13;
  } else {
   $20 = $16 / $10;
   $$0 = $10;$$034 = $20;
  }
  $21 = ($0>>>0)<(1484783616);
  if ($21) {
   $22 = - $$034;
   $$$034 = $6 ? $22 : $$034;
   $23 = (+_ponef($1));
   $24 = $23;
   $25 = $$0 * $24;
   $26 = (+_qonef($1));
   $27 = $26;
   $28 = $$$034 * $27;
   $29 = $25 - $28;
   $$1 = $29;
  } else {
   $$1 = $$0;
  }
 } else {
  $$1 = $10;
 }
 $30 = ($3|0)==(0);
 $31 = - $$1;
 $$1$ = $30 ? $$1 : $31;
 $32 = $$1$ * 0.564189612865448;
 $33 = (+Math_sqrt((+$1)));
 $34 = $33;
 $35 = $32 / $34;
 $36 = $35;
 return (+$36);
}
function _ponef($0) {
 $0 = +$0;
 var $$ = 0, $$0 = 0, $$041 = 0, $$42 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 & 2147483647;
 $3 = ($2>>>0)>(1090519039);
 if ($3) {
  $$0 = 23804;$$041 = 23764;
 } else {
  $4 = ($2>>>0)>(1089936471);
  $5 = ($2>>>0)>(1077336935);
  if ($4) {
   $$0 = 23828;$$041 = 23784;
  } else {
   $$42 = $5 ? 23676 : 23700;
   $$ = $5 ? 23724 : 23744;
   $$0 = $$42;$$041 = $$;
  }
 }
 $6 = $0 * $0;
 $7 = 1.0 / $6;
 $8 = +HEAPF32[$$0>>2];
 $9 = ((($$0)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = ((($$0)) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = ((($$0)) + 12|0);
 $14 = +HEAPF32[$13>>2];
 $15 = ((($$0)) + 16|0);
 $16 = +HEAPF32[$15>>2];
 $17 = ((($$0)) + 20|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $7 * $18;
 $20 = $16 + $19;
 $21 = $7 * $20;
 $22 = $14 + $21;
 $23 = $7 * $22;
 $24 = $12 + $23;
 $25 = $7 * $24;
 $26 = $10 + $25;
 $27 = $7 * $26;
 $28 = $8 + $27;
 $29 = +HEAPF32[$$041>>2];
 $30 = ((($$041)) + 4|0);
 $31 = +HEAPF32[$30>>2];
 $32 = ((($$041)) + 8|0);
 $33 = +HEAPF32[$32>>2];
 $34 = ((($$041)) + 12|0);
 $35 = +HEAPF32[$34>>2];
 $36 = ((($$041)) + 16|0);
 $37 = +HEAPF32[$36>>2];
 $38 = $7 * $37;
 $39 = $35 + $38;
 $40 = $7 * $39;
 $41 = $33 + $40;
 $42 = $7 * $41;
 $43 = $31 + $42;
 $44 = $7 * $43;
 $45 = $29 + $44;
 $46 = $7 * $45;
 $47 = $46 + 1.0;
 $48 = $28 / $47;
 $49 = $48 + 1.0;
 return (+$49);
}
function _qonef($0) {
 $0 = +$0;
 var $$0 = 0, $$044 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 & 2145386496;
 $3 = ($2>>>0)>(1075838975);
 $$044 = $3 ? 23580 : 23604;
 $$0 = $3 ? 23628 : 23652;
 $4 = $0 * $0;
 $5 = 1.0 / $4;
 $6 = +HEAPF32[$$0>>2];
 $7 = ((($$0)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = ((($$0)) + 8|0);
 $10 = +HEAPF32[$9>>2];
 $11 = ((($$0)) + 12|0);
 $12 = +HEAPF32[$11>>2];
 $13 = ((($$0)) + 16|0);
 $14 = +HEAPF32[$13>>2];
 $15 = ((($$0)) + 20|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $5 * $16;
 $18 = $14 + $17;
 $19 = $5 * $18;
 $20 = $12 + $19;
 $21 = $5 * $20;
 $22 = $10 + $21;
 $23 = $5 * $22;
 $24 = $8 + $23;
 $25 = $5 * $24;
 $26 = $6 + $25;
 $27 = +HEAPF32[$$044>>2];
 $28 = ((($$044)) + 4|0);
 $29 = +HEAPF32[$28>>2];
 $30 = ((($$044)) + 8|0);
 $31 = +HEAPF32[$30>>2];
 $32 = ((($$044)) + 12|0);
 $33 = +HEAPF32[$32>>2];
 $34 = ((($$044)) + 16|0);
 $35 = +HEAPF32[$34>>2];
 $36 = ((($$044)) + 20|0);
 $37 = +HEAPF32[$36>>2];
 $38 = $5 * $37;
 $39 = $35 + $38;
 $40 = $5 * $39;
 $41 = $33 + $40;
 $42 = $5 * $41;
 $43 = $31 + $42;
 $44 = $5 * $43;
 $45 = $29 + $44;
 $46 = $5 * $45;
 $47 = $27 + $46;
 $48 = $5 * $47;
 $49 = $48 + 1.0;
 $50 = $26 / $49;
 $51 = $50 + 0.375;
 $52 = $51 / $0;
 return (+$52);
}
function _y1f($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 & 2147483647;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $$0 = -inf;
  } else {
   $4 = ($1|0)<(0);
   if ($4) {
    $$0 = nan;
   } else {
    $5 = ($1>>>0)>(2139095039);
    if ($5) {
     $6 = 1.0 / $0;
     $$0 = $6;
     break;
    }
    $7 = ($1>>>0)>(1073741823);
    if ($7) {
     $8 = (+_common_301($1,$0,1,0));
     $$0 = $8;
     break;
    }
    $9 = ($1>>>0)<(838860800);
    if ($9) {
     $10 = -0.63661974668502808 / $0;
     $$0 = $10;
     break;
    } else {
     $11 = $0 * $0;
     $12 = $11 * 9.1909917898647109E-8;
     $13 = 2.3525259166490287E-5 - $12;
     $14 = $11 * $13;
     $15 = $14 + -0.0019125689286738634;
     $16 = $11 * $15;
     $17 = $16 + 0.050443872809410095;
     $18 = $11 * $17;
     $19 = $18 + -0.19605709612369537;
     $20 = $11 * 1.6655924903186126E-11;
     $21 = $20 + 6.2274145840035544E-9;
     $22 = $11 * $21;
     $23 = $22 + 1.3560879779106472E-6;
     $24 = $11 * $23;
     $25 = $24 + 2.0255257550161332E-4;
     $26 = $11 * $25;
     $27 = $26 + 0.019916731864213943;
     $28 = $11 * $27;
     $29 = $28 + 1.0;
     $30 = $19 / $29;
     $31 = $30 * $0;
     $32 = (+_j1f($0));
     $33 = (+Math_log((+$0)));
     $34 = $32 * $33;
     $35 = 1.0 / $0;
     $36 = $34 - $35;
     $37 = $36 * 0.63661974668502808;
     $38 = $31 + $37;
     $$0 = $38;
     break;
    }
   }
  }
 } while(0);
 return (+$$0);
}
function _jn($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$0156 = 0.0, $$0157215 = 0.0, $$0158 = 0.0, $$0159214 = 0.0, $$0160213 = 0.0, $$0160213$phi = 0.0, $$0161$lcssa = 0.0, $$0161209 = 0.0, $$0162 = 0.0, $$0163187 = 0.0, $$0167186 = 0.0, $$0167186$phi = 0.0, $$0173 = 0, $$0174185 = 0, $$0179 = 0, $$0216 = 0, $$1164$lcssa = 0.0, $$1164190 = 0.0, $$1168$lcssa = 0.0, $$1168189 = 0.0;
 var $$1175188 = 0, $$1203 = 0.0, $$2 = 0.0, $$2165196 = 0.0, $$2169195 = 0.0, $$2169195$phi = 0.0, $$2176208 = 0, $$3 = 0.0, $$3166202 = 0.0, $$3170201 = 0.0, $$3177194 = 0, $$4 = 0.0, $$4171 = 0.0, $$4178200 = 0, $$5 = 0.0, $$5172 = 0.0, $$5172$sink = 0.0, $$7 = 0.0, $$sink180 = 0.0, $10 = 0;
 var $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0.0, $12 = 0;
 var $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0;
 var $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0;
 var $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $exitcond = 0, $exitcond226 = 0, $or$cond = 0, $trunc = 0, $trunc$clear = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $1;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),63)|0);
 $5 = tempRet0;
 $6 = $3 & 2147483647;
 $7 = (0 - ($2))|0;
 $8 = $2 | $7;
 $9 = $8 >>> 31;
 $10 = $6 | $9;
 $11 = ($10>>>0)>(2146435072);
 do {
  if ($11) {
   $$0156 = $1;
  } else {
   $12 = ($0|0)==(0);
   if ($12) {
    $13 = (+_j0($1));
    $$0156 = $13;
    break;
   }
   $14 = ($0|0)<(0);
   if ($14) {
    $15 = $0 ^ -1;
    $16 = - $1;
    $17 = $4 ^ 1;
    $$0158 = $16;$$0173 = $17;$$0179 = $15;
   } else {
    $18 = (($0) + -1)|0;
    $$0158 = $1;$$0173 = $4;$$0179 = $18;
   }
   $19 = ($$0179|0)==(0);
   if ($19) {
    $20 = (+_j1($$0158));
    $$0156 = $20;
    break;
   }
   $21 = $$0173 & $0;
   $22 = (+Math_abs((+$$0158)));
   $23 = $6 | $2;
   $24 = ($23|0)==(0);
   $25 = ($6|0)==(2146435072);
   $or$cond = $25 | $24;
   L13: do {
    if ($or$cond) {
     $$7 = 0.0;
    } else {
     $26 = (+($$0179|0));
     $27 = $22 > $26;
     if ($27) {
      $28 = ($6>>>0)>(1389363199);
      if (!($28)) {
       $45 = (+_j0($22));
       $46 = (+_j1($22));
       $47 = ($$0179|0)>(0);
       if ($47) {
        $$0163187 = $46;$$0167186 = $45;$$0174185 = 0;
       } else {
        $$7 = $46;
        break;
       }
       while(1) {
        $48 = (($$0174185) + 1)|0;
        $49 = (+($48|0));
        $50 = $49 * 2.0;
        $51 = $50 / $22;
        $52 = $$0163187 * $51;
        $53 = $52 - $$0167186;
        $exitcond = ($48|0)==($$0179|0);
        if ($exitcond) {
         $$7 = $53;
         break L13;
        } else {
         $$0167186$phi = $$0163187;$$0163187 = $53;$$0174185 = $48;$$0167186 = $$0167186$phi;
        }
       }
      }
      $trunc = $$0179&255;
      $trunc$clear = $trunc & 3;
      switch ($trunc$clear<<24>>24) {
      case 0:  {
       $29 = (+Math_cos((+$22)));
       $30 = (+Math_sin((+$22)));
       $31 = $30 - $29;
       $$0162 = $31;
       break;
      }
      case 1:  {
       $32 = (+Math_cos((+$22)));
       $33 = - $32;
       $34 = (+Math_sin((+$22)));
       $35 = $33 - $34;
       $$0162 = $35;
       break;
      }
      case 2:  {
       $36 = (+Math_cos((+$22)));
       $37 = (+Math_sin((+$22)));
       $38 = $36 - $37;
       $$0162 = $38;
       break;
      }
      case 3:  {
       $39 = (+Math_cos((+$22)));
       $40 = (+Math_sin((+$22)));
       $41 = $39 + $40;
       $$0162 = $41;
       break;
      }
      default: {
       // unreachable;
      }
      }
      $42 = $$0162 * 0.56418958354775628;
      $43 = (+Math_sqrt((+$22)));
      $44 = $42 / $43;
      $$7 = $44;
      break;
     }
     $54 = ($6>>>0)<(1041235968);
     if ($54) {
      $55 = ($$0179|0)>(32);
      if ($55) {
       $$7 = 0.0;
       break;
      }
      $56 = $22 * 0.5;
      $57 = ($$0179|0)<(1);
      if ($57) {
       $$1164$lcssa = $56;$$1168$lcssa = 1.0;
      } else {
       $58 = (($$0179) + 1)|0;
       $$1164190 = $56;$$1168189 = 1.0;$$1175188 = 2;
       while(1) {
        $59 = (+($$1175188|0));
        $60 = $$1168189 * $59;
        $61 = $56 * $$1164190;
        $62 = (($$1175188) + 1)|0;
        $exitcond226 = ($$1175188|0)==($58|0);
        if ($exitcond226) {
         $$1164$lcssa = $61;$$1168$lcssa = $60;
         break;
        } else {
         $$1164190 = $61;$$1168189 = $60;$$1175188 = $62;
        }
       }
      }
      $63 = $$1164$lcssa / $$1168$lcssa;
      $$7 = $63;
      break;
     }
     $64 = $26 + 1.0;
     $65 = $64 * 2.0;
     $66 = $65 / $22;
     $67 = 2.0 / $22;
     $68 = $66 + $67;
     $69 = $66 * $68;
     $70 = $69 + -1.0;
     $71 = $70 < 1.0E+9;
     if ($71) {
      $$0157215 = $68;$$0159214 = $70;$$0160213 = $66;$$0216 = 1;
      while(1) {
       $73 = (($$0216) + 1)|0;
       $74 = $67 + $$0157215;
       $75 = $$0159214 * $74;
       $76 = $75 - $$0160213;
       $77 = $76 < 1.0E+9;
       if ($77) {
        $$0160213$phi = $$0159214;$$0157215 = $74;$$0159214 = $76;$$0216 = $73;$$0160213 = $$0160213$phi;
       } else {
        break;
       }
      }
      $72 = ($$0216|0)>(-2);
      if ($72) {
       $$0161209 = 0.0;$$2176208 = $73;
       label = 30;
      } else {
       $$0161$lcssa = 0.0;
      }
     } else {
      $$0161209 = 0.0;$$2176208 = 1;
      label = 30;
     }
     if ((label|0) == 30) {
      while(1) {
       label = 0;
       $78 = (+($$2176208|0));
       $79 = $64 + $78;
       $80 = $79 * 2.0;
       $81 = $80 / $22;
       $82 = $81 - $$0161209;
       $83 = 1.0 / $82;
       $84 = (($$2176208) + -1)|0;
       $85 = ($$2176208|0)>(0);
       if ($85) {
        $$0161209 = $83;$$2176208 = $84;
        label = 30;
       } else {
        $$0161$lcssa = $83;
        break;
       }
      }
     }
     $86 = (+Math_abs((+$66)));
     $87 = (+Math_log((+$86)));
     $88 = $64 * $87;
     $89 = $88 < 709.78271289338397;
     $90 = ($$0179|0)>(0);
     if ($89) {
      if ($90) {
       $$2165196 = 1.0;$$2169195 = $$0161$lcssa;$$3177194 = $$0179;
       while(1) {
        $91 = (+($$3177194|0));
        $92 = $91 * 2.0;
        $93 = $$2165196 * $92;
        $94 = $93 / $22;
        $95 = $94 - $$2169195;
        $96 = (($$3177194) + -1)|0;
        $97 = ($$3177194|0)>(1);
        if ($97) {
         $$2169195$phi = $$2165196;$$2165196 = $95;$$3177194 = $96;$$2169195 = $$2169195$phi;
        } else {
         $$3 = $$0161$lcssa;$$5 = $95;$$5172 = $$2165196;
         break;
        }
       }
      } else {
       $$3 = $$0161$lcssa;$$5 = 1.0;$$5172 = $$0161$lcssa;
      }
     } else {
      if ($90) {
       $$1203 = $$0161$lcssa;$$3166202 = 1.0;$$3170201 = $$0161$lcssa;$$4178200 = $$0179;
       while(1) {
        $98 = (+($$4178200|0));
        $99 = $98 * 2.0;
        $100 = $$3166202 * $99;
        $101 = $100 / $22;
        $102 = $101 - $$3170201;
        $103 = $102 > 3.2733906078961419E+150;
        if ($103) {
         $104 = $$3166202 / $102;
         $105 = $$1203 / $102;
         $$2 = $105;$$4 = 1.0;$$4171 = $104;
        } else {
         $$2 = $$1203;$$4 = $102;$$4171 = $$3166202;
        }
        $106 = (($$4178200) + -1)|0;
        $107 = ($$4178200|0)>(1);
        if ($107) {
         $$1203 = $$2;$$3166202 = $$4;$$3170201 = $$4171;$$4178200 = $106;
        } else {
         $$3 = $$2;$$5 = $$4;$$5172 = $$4171;
         break;
        }
       }
      } else {
       $$3 = $$0161$lcssa;$$5 = 1.0;$$5172 = $$0161$lcssa;
      }
     }
     $108 = (+_j0($22));
     $109 = (+_j1($22));
     $110 = (+Math_abs((+$108)));
     $111 = (+Math_abs((+$109)));
     $112 = !($110 >= $111);
     $$sink180 = $112 ? $109 : $108;
     $$5172$sink = $112 ? $$5172 : $$5;
     $113 = $$3 * $$sink180;
     $114 = $113 / $$5172$sink;
     $$7 = $114;
    }
   } while(0);
   $115 = ($21|0)!=(0);
   $116 = - $$7;
   $117 = $115 ? $116 : $$7;
   $$0156 = $117;
  }
 } while(0);
 return (+$$0156);
}
function _yn($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$0 = 0.0, $$071 = 0.0, $$07382 = 0.0, $$07382$phi = 0.0, $$07481 = 0, $$075 = 0, $$076 = 0, $$1 = 0.0, $$sink80 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0;
 var $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0;
 var $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, $trunc = 0;
 var $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $1;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $3 & 2147483647;
 $5 = (0 - ($2))|0;
 $6 = $2 | $5;
 $7 = $6 >>> 31;
 $8 = $4 | $7;
 $9 = ($8>>>0)>(2146435072);
 do {
  if ($9) {
   $$0 = $1;
  } else {
   $10 = ($3|0)>(-1);
   $11 = ($2>>>0)>(4294967295);
   $12 = ($3|0)==(-1);
   $13 = $12 & $11;
   $14 = $10 | $13;
   $15 = $4 | $2;
   $16 = ($15|0)==(0);
   $or$cond = $14 | $16;
   if ($or$cond) {
    $17 = ($4|0)==(2146435072);
    if ($17) {
     $$0 = 0.0;
    } else {
     $18 = ($0|0)==(0);
     if ($18) {
      $19 = (+_y0($1));
      $$0 = $19;
      break;
     }
     $20 = ($0|0)<(0);
     $21 = $0 ^ -1;
     $22 = $0 & 1;
     $23 = (($0) + -1)|0;
     $$076 = $20 ? $21 : $23;
     $$075 = $20 ? $22 : 0;
     $24 = ($$076|0)==(0);
     if ($24) {
      $25 = ($$075|0)!=(0);
      $26 = (+_y1($1));
      $27 = - $26;
      $28 = $25 ? $27 : $26;
      $$0 = $28;
      break;
     }
     $29 = ($4>>>0)>(1389363199);
     if ($29) {
      $trunc = $$076&255;
      $trunc$clear = $trunc & 3;
      switch ($trunc$clear<<24>>24) {
      case 0:  {
       $30 = (+Math_sin((+$1)));
       $31 = - $30;
       $32 = (+Math_cos((+$1)));
       $33 = $31 - $32;
       $$071 = $33;
       break;
      }
      case 1:  {
       $34 = (+Math_sin((+$1)));
       $35 = (+Math_cos((+$1)));
       $36 = $35 - $34;
       $$071 = $36;
       break;
      }
      case 2:  {
       $37 = (+Math_sin((+$1)));
       $38 = (+Math_cos((+$1)));
       $39 = $37 + $38;
       $$071 = $39;
       break;
      }
      case 3:  {
       $40 = (+Math_sin((+$1)));
       $41 = (+Math_cos((+$1)));
       $42 = $40 - $41;
       $$071 = $42;
       break;
      }
      default: {
       // unreachable;
      }
      }
      $43 = $$071 * 0.56418958354775628;
      $44 = (+Math_sqrt((+$1)));
      $45 = $43 / $44;
      $$1 = $45;
     } else {
      $46 = (+_y0($1));
      $47 = (+_y1($1));
      HEAPF64[tempDoublePtr>>3] = $47;$48 = HEAP32[tempDoublePtr>>2]|0;
      $49 = HEAP32[tempDoublePtr+4>>2]|0;
      $50 = ($$076|0)>(0);
      $51 = (0)!=(0);
      $52 = ($49|0)!=(-1048576);
      $53 = $51 | $52;
      $54 = $50 & $53;
      if ($54) {
       $$07382 = $46;$$07481 = 0;$$sink80 = $47;
       while(1) {
        $55 = (($$07481) + 1)|0;
        $56 = (+($55|0));
        $57 = $56 * 2.0;
        $58 = $57 / $1;
        $59 = $$sink80 * $58;
        $60 = $59 - $$07382;
        HEAPF64[tempDoublePtr>>3] = $60;$61 = HEAP32[tempDoublePtr>>2]|0;
        $62 = HEAP32[tempDoublePtr+4>>2]|0;
        $63 = ($55|0)<($$076|0);
        $64 = (0)!=(0);
        $65 = ($62|0)!=(-1048576);
        $66 = $64 | $65;
        $67 = $63 & $66;
        if ($67) {
         $$07382$phi = $$sink80;$$07481 = $55;$$sink80 = $60;$$07382 = $$07382$phi;
        } else {
         $$1 = $60;
         break;
        }
       }
      } else {
       $$1 = $47;
      }
     }
     $68 = ($$075|0)!=(0);
     $69 = - $$1;
     $70 = $68 ? $69 : $$1;
     $$0 = $70;
    }
   } else {
    $$0 = nan;
   }
  }
 } while(0);
 return (+$$0);
}
function _jnf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$$0161 = 0, $$0139 = 0.0, $$0140198 = 0.0, $$0141 = 0.0, $$0142197 = 0.0, $$0143196 = 0.0, $$0143196$phi = 0.0, $$0144$lcssa = 0.0, $$0144192 = 0.0, $$0145170 = 0.0, $$0149169 = 0.0, $$0149169$phi = 0.0, $$0155168 = 0, $$0160 = 0, $$0161 = 0, $$0199 = 0, $$1146$lcssa = 0.0, $$1146173 = 0.0, $$1150$lcssa = 0.0, $$1150172 = 0.0;
 var $$1156171 = 0, $$1186 = 0.0, $$2 = 0.0, $$2147179 = 0.0, $$2151178 = 0.0, $$2151178$phi = 0.0, $$2157191 = 0, $$3 = 0.0, $$3148185 = 0.0, $$3152184 = 0.0, $$3158177 = 0, $$4 = 0.0, $$4153 = 0.0, $$4159183 = 0, $$5 = 0.0, $$5154 = 0.0, $$5154$sink = 0.0, $$7 = 0.0, $$sink163 = 0.0, $10 = 0.0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $exitcond = 0, $switch$split12D = 0, $switch$split2D = 0, $switch$split42D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (HEAPF32[tempDoublePtr>>2]=$1,HEAP32[tempDoublePtr>>2]|0);
 $3 = $2 >>> 31;
 $4 = $2 & 2147483647;
 $5 = ($4>>>0)>(2139095040);
 do {
  if ($5) {
   $$0139 = $1;
  } else {
   $6 = ($0|0)==(0);
   if ($6) {
    $7 = (+_j0f($1));
    $$0139 = $7;
    break;
   }
   $8 = ($0|0)<(0);
   if ($8) {
    $9 = $0 ^ -1;
    $10 = - $1;
    $11 = $3 ^ 1;
    $$0141 = $10;$$0160 = $11;$$0161 = $9;
   } else {
    $12 = (($0) + -1)|0;
    $$0141 = $1;$$0160 = $3;$$0161 = $12;
   }
   $13 = ($$0161|0)==(0);
   if ($13) {
    $14 = (+_j1f($$0141));
    $$0139 = $14;
    break;
   }
   $15 = $$0160 & $0;
   $16 = (+Math_abs((+$$0141)));
   $switch$split2D = ($2|0)<(0);
   L13: do {
    if ($switch$split2D) {
     $switch$split12D = ($2|0)<(-8388608);
     if ($switch$split12D) {
      switch ($2|0) {
      case -2147483648:  {
       $$7 = 0.0;
       break L13;
       break;
      }
      default: {
       label = 10;
       break L13;
      }
      }
     } else {
      switch ($2|0) {
      case -8388608:  {
       $$7 = 0.0;
       break L13;
       break;
      }
      default: {
       label = 10;
       break L13;
      }
      }
     }
    } else {
     $switch$split42D = ($2|0)<(2139095040);
     if ($switch$split42D) {
      switch ($2|0) {
      case 0:  {
       $$7 = 0.0;
       break L13;
       break;
      }
      default: {
       label = 10;
       break L13;
      }
      }
     } else {
      switch ($2|0) {
      case 2139095040:  {
       $$7 = 0.0;
       break L13;
       break;
      }
      default: {
       label = 10;
       break L13;
      }
      }
     }
    }
   } while(0);
   L22: do {
    if ((label|0) == 10) {
     $17 = (+($$0161|0));
     $18 = $16 > $17;
     if ($18) {
      $19 = (+_j0f($16));
      $20 = (+_j1f($16));
      $21 = ($$0161|0)>(0);
      if ($21) {
       $$0145170 = $20;$$0149169 = $19;$$0155168 = 0;
      } else {
       $$7 = $20;
       break;
      }
      while(1) {
       $22 = (($$0155168) + 1)|0;
       $23 = (+($22|0));
       $24 = $23 * 2.0;
       $25 = $24 / $16;
       $26 = $$0145170 * $25;
       $27 = $26 - $$0149169;
       $exitcond = ($22|0)==($$0161|0);
       if ($exitcond) {
        $$7 = $27;
        break L22;
       } else {
        $$0149169$phi = $$0145170;$$0145170 = $27;$$0155168 = $22;$$0149169 = $$0149169$phi;
       }
      }
     }
     $28 = ($4>>>0)<(897581056);
     if ($28) {
      $29 = ($$0161|0)<(8);
      $$$0161 = $29 ? $$0161 : 8;
      $30 = $16 * 0.5;
      $31 = ($$$0161|0)<(1);
      if ($31) {
       $$1146$lcssa = $30;$$1150$lcssa = 1.0;
      } else {
       $$1146173 = $30;$$1150172 = 1.0;$$1156171 = 2;
       while(1) {
        $32 = (+($$1156171|0));
        $33 = $$1150172 * $32;
        $34 = $30 * $$1146173;
        $35 = (($$1156171) + 1)|0;
        $36 = ($$1156171|0)>($$$0161|0);
        if ($36) {
         $$1146$lcssa = $34;$$1150$lcssa = $33;
         break;
        } else {
         $$1146173 = $34;$$1150172 = $33;$$1156171 = $35;
        }
       }
      }
      $37 = $$1146$lcssa / $$1150$lcssa;
      $$7 = $37;
      break;
     }
     $38 = $17 + 1.0;
     $39 = $38 * 2.0;
     $40 = $39 / $16;
     $41 = 2.0 / $16;
     $42 = $40 + $41;
     $43 = $40 * $42;
     $44 = $43 + -1.0;
     $45 = $44 < 1.0E+4;
     if ($45) {
      $$0140198 = $42;$$0142197 = $44;$$0143196 = $40;$$0199 = 1;
      while(1) {
       $47 = (($$0199) + 1)|0;
       $48 = $41 + $$0140198;
       $49 = $$0142197 * $48;
       $50 = $49 - $$0143196;
       $51 = $50 < 1.0E+4;
       if ($51) {
        $$0143196$phi = $$0142197;$$0140198 = $48;$$0142197 = $50;$$0199 = $47;$$0143196 = $$0143196$phi;
       } else {
        break;
       }
      }
      $46 = ($$0199|0)>(-2);
      if ($46) {
       $$0144192 = 0.0;$$2157191 = $47;
       label = 20;
      } else {
       $$0144$lcssa = 0.0;
      }
     } else {
      $$0144192 = 0.0;$$2157191 = 1;
      label = 20;
     }
     if ((label|0) == 20) {
      while(1) {
       label = 0;
       $52 = (+($$2157191|0));
       $53 = $38 + $52;
       $54 = $53 * 2.0;
       $55 = $54 / $16;
       $56 = $55 - $$0144192;
       $57 = 1.0 / $56;
       $58 = (($$2157191) + -1)|0;
       $59 = ($$2157191|0)>(0);
       if ($59) {
        $$0144192 = $57;$$2157191 = $58;
        label = 20;
       } else {
        $$0144$lcssa = $57;
        break;
       }
      }
     }
     $60 = (+Math_abs((+$40)));
     $61 = (+Math_log((+$60)));
     $62 = $38 * $61;
     $63 = $62 < 88.7216796875;
     $64 = ($$0161|0)>(0);
     if ($63) {
      if ($64) {
       $$2147179 = 1.0;$$2151178 = $$0144$lcssa;$$3158177 = $$0161;
       while(1) {
        $65 = (+($$3158177|0));
        $66 = $65 * 2.0;
        $67 = $66 * $$2147179;
        $68 = $67 / $16;
        $69 = $68 - $$2151178;
        $70 = (($$3158177) + -1)|0;
        $71 = ($$3158177|0)>(1);
        if ($71) {
         $$2151178$phi = $$2147179;$$2147179 = $69;$$3158177 = $70;$$2151178 = $$2151178$phi;
        } else {
         $$3 = $$0144$lcssa;$$5 = $69;$$5154 = $$2147179;
         break;
        }
       }
      } else {
       $$3 = $$0144$lcssa;$$5 = 1.0;$$5154 = $$0144$lcssa;
      }
     } else {
      if ($64) {
       $$1186 = $$0144$lcssa;$$3148185 = 1.0;$$3152184 = $$0144$lcssa;$$4159183 = $$0161;
       while(1) {
        $72 = (+($$4159183|0));
        $73 = $72 * 2.0;
        $74 = $73 * $$3148185;
        $75 = $74 / $16;
        $76 = $75 - $$3152184;
        $77 = $76 > 1.152921504606847E+18;
        if ($77) {
         $78 = $$3148185 / $76;
         $79 = $$1186 / $76;
         $$2 = $79;$$4 = 1.0;$$4153 = $78;
        } else {
         $$2 = $$1186;$$4 = $76;$$4153 = $$3148185;
        }
        $80 = (($$4159183) + -1)|0;
        $81 = ($$4159183|0)>(1);
        if ($81) {
         $$1186 = $$2;$$3148185 = $$4;$$3152184 = $$4153;$$4159183 = $80;
        } else {
         $$3 = $$2;$$5 = $$4;$$5154 = $$4153;
         break;
        }
       }
      } else {
       $$3 = $$0144$lcssa;$$5 = 1.0;$$5154 = $$0144$lcssa;
      }
     }
     $82 = (+_j0f($16));
     $83 = (+_j1f($16));
     $84 = (+Math_abs((+$82)));
     $85 = (+Math_abs((+$83)));
     $86 = !($84 >= $85);
     $$sink163 = $86 ? $83 : $82;
     $$5154$sink = $86 ? $$5154 : $$5;
     $87 = $$3 * $$sink163;
     $88 = $87 / $$5154$sink;
     $$7 = $88;
    }
   } while(0);
   $89 = ($15|0)!=(0);
   $90 = - $$7;
   $91 = $89 ? $90 : $$7;
   $$0139 = $91;
  }
 } while(0);
 return (+$$0139);
}
function _ynf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$0 = 0.0, $$053 = 0, $$05359 = 0, $$054 = 0, $$055$lcssa = 0.0, $$05562 = 0.0, $$05661 = 0.0, $$05661$phi = 0.0, $$05760 = 0, $$058 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0;
 var $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (HEAPF32[tempDoublePtr>>2]=$1,HEAP32[tempDoublePtr>>2]|0);
 $3 = $2 & 2147483647;
 $4 = ($3>>>0)>(2139095040);
 do {
  if ($4) {
   $$0 = $1;
  } else {
   $5 = ($2|0)<(0);
   $6 = ($3|0)!=(0);
   $or$cond = $5 & $6;
   if ($or$cond) {
    $$0 = nan;
   } else {
    $7 = ($3|0)==(2139095040);
    if ($7) {
     $$0 = 0.0;
    } else {
     $8 = ($0|0)==(0);
     if ($8) {
      $9 = (+_y0f($1));
      $$0 = $9;
      break;
     }
     $10 = ($0|0)<(0);
     $11 = $0 ^ -1;
     $12 = $0 & 1;
     $13 = (($0) + -1)|0;
     $$058 = $10 ? $12 : 0;
     $$054 = $10 ? $11 : $13;
     $14 = ($$054|0)==(0);
     if ($14) {
      $15 = ($$058|0)!=(0);
      $16 = (+_y1f($1));
      $17 = - $16;
      $18 = $15 ? $17 : $16;
      $$0 = $18;
      break;
     }
     $19 = (+_y0f($1));
     $20 = (+_y1f($1));
     $$05359 = (HEAPF32[tempDoublePtr>>2]=$20,HEAP32[tempDoublePtr>>2]|0);
     $21 = ($$054|0)>(0);
     $22 = ($$05359|0)!=(-8388608);
     $23 = $21 & $22;
     if ($23) {
      $$05562 = $20;$$05661 = $19;$$05760 = 0;
      while(1) {
       $24 = (($$05760) + 1)|0;
       $25 = (+($24|0));
       $26 = $25 * 2.0;
       $27 = $26 / $1;
       $28 = $$05562 * $27;
       $29 = $28 - $$05661;
       $$053 = (HEAPF32[tempDoublePtr>>2]=$29,HEAP32[tempDoublePtr>>2]|0);
       $30 = ($24|0)<($$054|0);
       $31 = ($$053|0)!=(-8388608);
       $32 = $30 & $31;
       if ($32) {
        $$05661$phi = $$05562;$$05562 = $29;$$05760 = $24;$$05661 = $$05661$phi;
       } else {
        $$055$lcssa = $29;
        break;
       }
      }
     } else {
      $$055$lcssa = $20;
     }
     $33 = ($$058|0)!=(0);
     $34 = - $$055$lcssa;
     $35 = $33 ? $34 : $$055$lcssa;
     $$0 = $35;
    }
   }
  }
 } while(0);
 return (+$$0);
}
function _ldexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _ldexpf($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbnf($0,$1));
 return (+$2);
}
function _scalbnf($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $$1$ = 0, $$21 = 0.0, $$22 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0.0;
 var $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(127);
 if ($2) {
  $3 = $0 * 1.7014118346046923E+38;
  $4 = (($1) + -127)|0;
  $5 = ($1|0)>(254);
  $6 = $3 * 1.7014118346046923E+38;
  $7 = (($1) + -254)|0;
  $8 = ($7|0)<(127);
  $$ = $8 ? $7 : 127;
  $$$ = $5 ? $$ : $4;
  $$21 = $5 ? $6 : $3;
  $$0 = $$21;$$020 = $$$;
 } else {
  $9 = ($1|0)<(-126);
  if ($9) {
   $10 = $0 * 1.1754943508222875E-38;
   $11 = (($1) + 126)|0;
   $12 = ($1|0)<(-252);
   $13 = $10 * 1.1754943508222875E-38;
   $14 = (($1) + 252)|0;
   $15 = ($14|0)>(-126);
   $$1 = $15 ? $14 : -126;
   $$1$ = $12 ? $$1 : $11;
   $$22 = $12 ? $13 : $10;
   $$0 = $$22;$$020 = $$1$;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = $$020 << 23;
 $17 = (($16) + 1065353216)|0;
 $18 = (HEAP32[tempDoublePtr>>2]=$17,+HEAPF32[tempDoublePtr>>2]);
 $19 = $$0 * $18;
 return (+$19);
}
function _ldexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbnl($0,$1));
 return (+$2);
}
function _lgamma($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+___lgamma_r($0,185708));
 return (+$1);
}
function ___lgamma_r($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$$1177 = 0.0, $$0174 = 0.0, $$0175 = 0.0, $$0176185 = 0.0, $$0176188 = 0.0, $$0176191 = 0.0, $$0178 = 0.0, $$0179187 = 0.0, $$0179190 = 0.0, $$0180 = 0.0, $$0181 = 0.0, $$1 = 0.0, $$1177 = 0.0, $$1182 = 0.0, $$2183 = 0.0, $$3 = 0.0, $$sink = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0.0;
 var $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0;
 var $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0;
 var $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0;
 var $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0;
 var $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0;
 var $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0;
 var $98 = 0.0, $99 = 0.0, $switch$split12D = 0, $switch$split2D = 0, $switch$split42D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAP32[$1>>2] = 1;
 $4 = $3 & 2147483647;
 $5 = ($4>>>0)>(2146435071);
 do {
  if ($5) {
   $6 = $0 * $0;
   $$0174 = $6;
  } else {
   $7 = ($4>>>0)<(999292928);
   $8 = ($3|0)<(0);
   if ($7) {
    if ($8) {
     $9 = - $0;
     HEAP32[$1>>2] = -1;
     $$0175 = $9;
    } else {
     $$0175 = $0;
    }
    $10 = (+Math_log((+$$0175)));
    $11 = - $10;
    $$0174 = $11;
    break;
   }
   if ($8) {
    $12 = - $0;
    $13 = (+_sin_pi($12));
    $14 = $13 == 0.0;
    if ($14) {
     $15 = $0 - $0;
     $16 = 1.0 / $15;
     $$0174 = $16;
     break;
    }
    $17 = $13 > 0.0;
    if ($17) {
     HEAP32[$1>>2] = -1;
     $$0178 = $13;
    } else {
     $18 = - $13;
     $$0178 = $18;
    }
    $19 = $$0178 * $12;
    $20 = 3.1415926535897931 / $19;
    $21 = (+Math_log((+$20)));
    $$0180 = $21;$$1 = $12;
   } else {
    $$0180 = 0.0;$$1 = $0;
   }
   $switch$split2D = ($3|0)<(1072693248);
   L20: do {
    if ($switch$split2D) {
     $switch$split12D = ($3|0)<(-1073741824);
     if ($switch$split12D) {
      switch ($3|0) {
      case -1074790400:  {
       label = 15;
       break L20;
       break;
      }
      default: {
       label = 16;
       break L20;
      }
      }
     } else {
      switch ($3|0) {
      case -1073741824:  {
       label = 15;
       break L20;
       break;
      }
      default: {
       label = 16;
       break L20;
      }
      }
     }
    } else {
     $switch$split42D = ($3|0)<(1073741824);
     if ($switch$split42D) {
      switch ($3|0) {
      case 1072693248:  {
       label = 15;
       break L20;
       break;
      }
      default: {
       label = 16;
       break L20;
      }
      }
     } else {
      switch ($3|0) {
      case 1073741824:  {
       label = 15;
       break L20;
       break;
      }
      default: {
       label = 16;
       break L20;
      }
      }
     }
    }
   } while(0);
   if ((label|0) == 15) {
    $22 = ($2|0)==(0);
    if ($22) {
     $$1177 = 0.0;
    } else {
     label = 16;
    }
   }
   L31: do {
    if ((label|0) == 16) {
     $23 = ($4>>>0)<(1073741824);
     if ($23) {
      $24 = ($4>>>0)<(1072483533);
      do {
       if ($24) {
        $25 = (+Math_log((+$$1)));
        $26 = - $25;
        $27 = ($4>>>0)>(1072130371);
        if ($27) {
         $$0176185 = $26;$$sink = 1.0;
         label = 24;
        } else {
         $32 = ($4>>>0)>(1070442080);
         $33 = $$1 + -0.46163214496836225;
         if ($32) {
          $$0176188 = $26;$$0179187 = $33;
          label = 25;
         } else {
          $$0176191 = $26;$$0179190 = $$1;
          label = 26;
         }
        }
       } else {
        $28 = ($4>>>0)>(1073460418);
        if ($28) {
         $$0176185 = 0.0;$$sink = 2.0;
         label = 24;
        } else {
         $29 = ($4>>>0)>(1072936131);
         if ($29) {
          $30 = $$1 + -1.4616321449683622;
          $$0176188 = 0.0;$$0179187 = $30;
          label = 25;
          break;
         } else {
          $31 = $$1 + -1.0;
          $$0176191 = 0.0;$$0179190 = $31;
          label = 26;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 24) {
       $34 = $$sink - $$1;
       $35 = $34 * $34;
       $36 = $35 * 2.5214456545125733E-5;
       $37 = $36 + 2.2086279071390839E-4;
       $38 = $35 * $37;
       $39 = $38 + 0.0011927076318336207;
       $40 = $35 * $39;
       $41 = $40 + 0.0073855508608140288;
       $42 = $35 * $41;
       $43 = $42 + 0.067352301053129268;
       $44 = $35 * $43;
       $45 = $44 + 0.077215664901532866;
       $46 = $35 * 4.4864094961891516E-5;
       $47 = $46 + 1.0801156724758394E-4;
       $48 = $35 * $47;
       $49 = $48 + 5.1006979215351134E-4;
       $50 = $35 * $49;
       $51 = $50 + 0.0028905138367341563;
       $52 = $35 * $51;
       $53 = $52 + 0.020580808432516733;
       $54 = $35 * $53;
       $55 = $54 + 0.32246703342411359;
       $56 = $35 * $55;
       $57 = $34 * $45;
       $58 = $57 + $56;
       $59 = $34 * 0.5;
       $60 = $58 - $59;
       $61 = $$0176185 + $60;
       $$1177 = $61;
       break;
      }
      else if ((label|0) == 25) {
       $62 = $$0179187 * $$0179187;
       $63 = $$0179187 * $62;
       $64 = $63 * 3.1563207090362595E-4;
       $65 = $64 + -0.0014034646998923284;
       $66 = $63 * $65;
       $67 = $66 + 0.0061005387024629133;
       $68 = $63 * $67;
       $69 = $68 + -0.032788541075985965;
       $70 = $63 * $69;
       $71 = $70 + 0.48383612272381005;
       $72 = $63 * 3.1275416837512086E-4;
       $73 = 8.8108188243765401E-4 - $72;
       $74 = $63 * $73;
       $75 = $74 + -0.0036845201678113826;
       $76 = $63 * $75;
       $77 = $76 + 0.017970675081182039;
       $78 = $63 * $77;
       $79 = $78 + -0.14758772299459391;
       $80 = $63 * 3.3552919263551907E-4;
       $81 = $80 + -5.3859530535674055E-4;
       $82 = $63 * $81;
       $83 = $82 + 0.0022596478090061247;
       $84 = $63 * $83;
       $85 = $84 + -0.010314224129834144;
       $86 = $63 * $85;
       $87 = $86 + 0.064624940239133385;
       $88 = $62 * $71;
       $89 = $$0179187 * $87;
       $90 = $79 + $89;
       $91 = $63 * $90;
       $92 = -3.6386769970395054E-18 - $91;
       $93 = $88 - $92;
       $94 = $93 + -0.12148629053584961;
       $95 = $$0176188 + $94;
       $$1177 = $95;
       break;
      }
      else if ((label|0) == 26) {
       $96 = $$0179190 * 0.013381091853678766;
       $97 = $96 + 0.22896372806469245;
       $98 = $$0179190 * $97;
       $99 = $98 + 0.97771752796337275;
       $100 = $$0179190 * $99;
       $101 = $100 + 1.4549225013723477;
       $102 = $$0179190 * $101;
       $103 = $102 + 0.63282706402509337;
       $104 = $$0179190 * $103;
       $105 = $104 + -0.077215664901532866;
       $106 = $$0179190 * $105;
       $107 = $$0179190 * 0.0032170924228242391;
       $108 = $107 + 0.10422264559336913;
       $109 = $$0179190 * $108;
       $110 = $109 + 0.76928515045667278;
       $111 = $$0179190 * $110;
       $112 = $111 + 2.128489763798934;
       $113 = $$0179190 * $112;
       $114 = $113 + 2.4559779371304113;
       $115 = $$0179190 * $114;
       $116 = $115 + 1.0;
       $117 = $$0179190 * 0.5;
       $118 = $106 / $116;
       $119 = $118 - $117;
       $120 = $$0176191 + $119;
       $$1177 = $120;
       break;
      }
     } else {
      $121 = ($4>>>0)<(1075838976);
      if (!($121)) {
       $164 = ($4>>>0)<(1133510656);
       $165 = (+Math_log((+$$1)));
       if ($164) {
        $166 = 1.0 / $$1;
        $167 = $166 * $166;
        $168 = $167 * 0.0016309293409657527;
        $169 = 8.3633991899628213E-4 - $168;
        $170 = $167 * $169;
        $171 = $170 + -5.9518755745033996E-4;
        $172 = $167 * $171;
        $173 = $172 + 7.9365055864301956E-4;
        $174 = $167 * $173;
        $175 = $174 + -0.0027777777772877554;
        $176 = $167 * $175;
        $177 = $176 + 0.083333333333332968;
        $178 = $166 * $177;
        $179 = $178 + 0.41893853320467273;
        $180 = $$1 + -0.5;
        $181 = $165 + -1.0;
        $182 = $180 * $181;
        $183 = $179 + $182;
        $$1177 = $183;
        break;
       } else {
        $184 = $165 + -1.0;
        $185 = $$1 * $184;
        $$1177 = $185;
        break;
       }
      }
      $122 = (~~(($$1)));
      $123 = (+($122|0));
      $124 = $$1 - $123;
      $125 = $124 * 3.1947532658410087E-5;
      $126 = $125 + 0.0018402845140733772;
      $127 = $124 * $126;
      $128 = $127 + 0.026642270303363861;
      $129 = $124 * $128;
      $130 = $129 + 0.14635047265246445;
      $131 = $124 * $130;
      $132 = $131 + 0.32577879640893098;
      $133 = $124 * $132;
      $134 = $133 + 0.21498241596060885;
      $135 = $124 * $134;
      $136 = $135 + -0.077215664901532866;
      $137 = $124 * $136;
      $138 = $124 * 7.3266843074462564E-6;
      $139 = $138 + 7.779424963818936E-4;
      $140 = $124 * $139;
      $141 = $140 + 0.01864591917156529;
      $142 = $124 * $141;
      $143 = $142 + 0.17193386563280308;
      $144 = $124 * $143;
      $145 = $144 + 0.72193554756713807;
      $146 = $124 * $145;
      $147 = $146 + 1.3920053346762105;
      $148 = $124 * $147;
      $149 = $148 + 1.0;
      $150 = $124 * 0.5;
      $151 = $137 / $149;
      $152 = $150 + $151;
      switch ($122|0) {
      case 7:  {
       $153 = $124 + 6.0;
       $$0181 = $153;
       label = 30;
       break;
      }
      case 6:  {
       $$0181 = 1.0;
       label = 30;
       break;
      }
      case 5:  {
       $$1182 = 1.0;
       label = 31;
       break;
      }
      case 4:  {
       $$2183 = 1.0;
       label = 32;
       break;
      }
      case 3:  {
       $$3 = 1.0;
       break;
      }
      default: {
       $$1177 = $152;
       break L31;
      }
      }
      if ((label|0) == 30) {
       $154 = $124 + 5.0;
       $155 = $154 * $$0181;
       $$1182 = $155;
       label = 31;
      }
      if ((label|0) == 31) {
       $156 = $124 + 4.0;
       $157 = $156 * $$1182;
       $$2183 = $157;
       label = 32;
      }
      if ((label|0) == 32) {
       $158 = $124 + 3.0;
       $159 = $158 * $$2183;
       $$3 = $159;
      }
      $160 = $124 + 2.0;
      $161 = $160 * $$3;
      $162 = (+Math_log((+$161)));
      $163 = $152 + $162;
      $$1177 = $163;
      break;
     }
    }
   } while(0);
   $186 = $$0180 - $$1177;
   $$$1177 = $8 ? $186 : $$1177;
   $$0174 = $$$1177;
  }
 } while(0);
 return (+$$0174);
}
function _sin_pi($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 * 0.5;
 $2 = (+Math_floor((+$1)));
 $3 = $1 - $2;
 $4 = $3 * 2.0;
 $5 = $4 * 4.0;
 $6 = (~~(($5)));
 $7 = (($6) + 1)|0;
 $8 = (($7|0) / 2)&-1;
 $9 = (+($8|0));
 $10 = $9 * 0.5;
 $11 = $10;
 $12 = $4 - $11;
 $13 = $12 * 3.1415926535897931;
 switch ($8|0) {
 case 3:  {
  $18 = (+___cos($13,0.0));
  $19 = - $18;
  $$0 = $19;
  break;
 }
 case 1:  {
  $15 = (+___cos($13,0.0));
  $$0 = $15;
  break;
 }
 case 2:  {
  $16 = - $13;
  $17 = (+___sin($16,0.0,0));
  $$0 = $17;
  break;
 }
 default: {
  $14 = (+___sin($13,0.0,0));
  $$0 = $14;
 }
 }
 return (+$$0);
}
function _lgammaf($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+___lgammaf_r($0,185708));
 return (+$1);
}
function ___lgammaf_r($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$$1176 = 0.0, $$0 = 0.0, $$0174 = 0.0, $$0175184 = 0.0, $$0175187 = 0.0, $$0175190 = 0.0, $$0177 = 0.0, $$0178186 = 0.0, $$0178189 = 0.0, $$0179 = 0.0, $$0180 = 0.0, $$1 = 0.0, $$1176 = 0.0, $$1181 = 0.0, $$2182 = 0.0, $$3 = 0.0, $$sink = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0.0;
 var $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0.0;
 var $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0;
 var $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0;
 var $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0;
 var $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0;
 var $switch$split12D = 0, $switch$split2D = 0, $switch$split42D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 HEAP32[$1>>2] = 1;
 $3 = $2 & 2147483647;
 $4 = ($3>>>0)>(2139095039);
 do {
  if ($4) {
   $5 = $0 * $0;
   $$0 = $5;
  } else {
   $6 = ($3>>>0)<(889192448);
   $7 = ($2|0)<(0);
   if ($6) {
    if ($7) {
     $8 = - $0;
     HEAP32[$1>>2] = -1;
     $$0174 = $8;
    } else {
     $$0174 = $0;
    }
    $9 = (+Math_log((+$$0174)));
    $10 = - $9;
    $$0 = $10;
    break;
   }
   if ($7) {
    $11 = - $0;
    $12 = (+_sin_pi_318($11));
    $13 = $12 == 0.0;
    if ($13) {
     $14 = $0 - $0;
     $15 = 1.0 / $14;
     $$0 = $15;
     break;
    }
    $16 = $12 > 0.0;
    if ($16) {
     HEAP32[$1>>2] = -1;
     $$0177 = $12;
    } else {
     $17 = - $12;
     $$0177 = $17;
    }
    $18 = $$0177 * $11;
    $19 = 3.1415927410125732 / $18;
    $20 = (+Math_log((+$19)));
    $$0179 = $20;$$1 = $11;
   } else {
    $$0179 = 0.0;$$1 = $0;
   }
   $switch$split2D = ($2|0)<(1065353216);
   L20: do {
    if ($switch$split2D) {
     $switch$split12D = ($2|0)<(-1073741824);
     if ($switch$split12D) {
      switch ($2|0) {
      case -1082130432:  {
       $$1176 = 0.0;
       break L20;
       break;
      }
      default: {
       label = 15;
       break L20;
      }
      }
     } else {
      switch ($2|0) {
      case -1073741824:  {
       $$1176 = 0.0;
       break L20;
       break;
      }
      default: {
       label = 15;
       break L20;
      }
      }
     }
    } else {
     $switch$split42D = ($2|0)<(1073741824);
     if ($switch$split42D) {
      switch ($2|0) {
      case 1065353216:  {
       $$1176 = 0.0;
       break L20;
       break;
      }
      default: {
       label = 15;
       break L20;
      }
      }
     } else {
      switch ($2|0) {
      case 1073741824:  {
       $$1176 = 0.0;
       break L20;
       break;
      }
      default: {
       label = 15;
       break L20;
      }
      }
     }
    }
   } while(0);
   L29: do {
    if ((label|0) == 15) {
     $21 = ($3>>>0)<(1073741824);
     if ($21) {
      $22 = ($3>>>0)<(1063675495);
      do {
       if ($22) {
        $23 = (+Math_log((+$$1)));
        $24 = - $23;
        $25 = ($3>>>0)>(1060850207);
        if ($25) {
         $$0175184 = $24;$$sink = 1.0;
         label = 23;
        } else {
         $30 = ($3>>>0)>(1047343879);
         $31 = $$1 + -0.4616321325302124;
         if ($30) {
          $$0175187 = $24;$$0178186 = $31;
          label = 24;
         } else {
          $$0175190 = $24;$$0178189 = $$1;
          label = 25;
         }
        }
       } else {
        $26 = ($3>>>0)>(1071490583);
        if ($26) {
         $$0175184 = 0.0;$$sink = 2.0;
         label = 23;
        } else {
         $27 = ($3>>>0)>(1067296287);
         if ($27) {
          $28 = $$1 + -1.4616321325302124;
          $$0175187 = 0.0;$$0178186 = $28;
          label = 24;
          break;
         } else {
          $29 = $$1 + -1.0;
          $$0175190 = 0.0;$$0178189 = $29;
          label = 25;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 23) {
       $32 = $$sink - $$1;
       $33 = $32 * $32;
       $34 = $33 * 2.5214456400135532E-5;
       $35 = $34 + 2.2086278477218002E-4;
       $36 = $33 * $35;
       $37 = $36 + 0.0011927076848223805;
       $38 = $33 * $37;
       $39 = $38 + 0.0073855509981513023;
       $40 = $33 * $39;
       $41 = $40 + 0.067352302372455597;
       $42 = $33 * $41;
       $43 = $42 + 0.077215664088726044;
       $44 = $33 * 4.4864096707897261E-5;
       $45 = $44 + 1.0801156895468011E-4;
       $46 = $33 * $45;
       $47 = $46 + 5.1006977446377277E-4;
       $48 = $33 * $47;
       $49 = $48 + 0.0028905137442052364;
       $50 = $33 * $49;
       $51 = $50 + 0.020580807700753212;
       $52 = $33 * $51;
       $53 = $52 + 0.32246702909469604;
       $54 = $33 * $53;
       $55 = $32 * $43;
       $56 = $55 + $54;
       $57 = $32 * 0.5;
       $58 = $56 - $57;
       $59 = $$0175184 + $58;
       $$1176 = $59;
       break;
      }
      else if ((label|0) == 24) {
       $60 = $$0178186 * $$0178186;
       $61 = $$0178186 * $60;
       $62 = $61 * 3.15632059937343E-4;
       $63 = $62 + -0.0014034647028893232;
       $64 = $61 * $63;
       $65 = $64 + 0.0061005386523902416;
       $66 = $61 * $65;
       $67 = $66 + -0.032788541167974472;
       $68 = $61 * $67;
       $69 = $68 + 0.48383611440658569;
       $70 = $61 * 3.1275415676645935E-4;
       $71 = 8.8108185445889831E-4 - $70;
       $72 = $61 * $71;
       $73 = $72 + -0.0036845202557742596;
       $74 = $61 * $73;
       $75 = $74 + 0.017970675602555275;
       $76 = $61 * $75;
       $77 = $76 + -0.14758771657943726;
       $78 = $61 * 3.3552918466739357E-4;
       $79 = $78 + -5.3859531180933118E-4;
       $80 = $61 * $79;
       $81 = $80 + 0.0022596477065235376;
       $82 = $61 * $81;
       $83 = $82 + -0.010314224287867546;
       $84 = $61 * $83;
       $85 = $84 + 0.06462494283914566;
       $86 = $60 * $69;
       $87 = $$0178186 * $85;
       $88 = $77 + $87;
       $89 = $61 * $88;
       $90 = 6.6971006518201648E-9 - $89;
       $91 = $86 - $90;
       $92 = $91 + -0.12148628383874893;
       $93 = $$0175187 + $92;
       $$1176 = $93;
       break;
      }
      else if ((label|0) == 25) {
       $94 = $$0178189 * 0.013381091877818108;
       $95 = $94 + 0.22896373271942139;
       $96 = $$0178189 * $95;
       $97 = $96 + 0.97771751880645751;
       $98 = $$0178189 * $97;
       $99 = $98 + 1.4549225568771362;
       $100 = $$0178189 * $99;
       $101 = $100 + 0.6328270435333252;
       $102 = $$0178189 * $101;
       $103 = $102 + -0.077215664088726044;
       $104 = $$0178189 * $103;
       $105 = $$0178189 * 0.0032170924823731184;
       $106 = $105 + 0.10422264784574509;
       $107 = $$0178189 * $106;
       $108 = $107 + 0.76928514242172241;
       $109 = $$0178189 * $108;
       $110 = $109 + 2.1284897327423096;
       $111 = $$0178189 * $110;
       $112 = $111 + 2.4559779167175293;
       $113 = $$0178189 * $112;
       $114 = $113 + 1.0;
       $115 = $$0178189 * 0.5;
       $116 = $104 / $114;
       $117 = $116 - $115;
       $118 = $$0175190 + $117;
       $$1176 = $118;
       break;
      }
     } else {
      $119 = ($3>>>0)<(1090519040);
      if (!($119)) {
       $162 = ($3>>>0)<(1551892480);
       $163 = (+Math_log((+$$1)));
       if ($162) {
        $164 = 1.0 / $$1;
        $165 = $164 * $164;
        $166 = $165 * 0.0016309292986989021;
        $167 = 8.3633989561349154E-4 - $166;
        $168 = $165 * $167;
        $169 = $168 + -5.9518753550946712E-4;
        $170 = $165 * $169;
        $171 = $170 + 7.9365057172253728E-4;
        $172 = $165 * $171;
        $173 = $172 + -0.0027777778450399637;
        $174 = $165 * $173;
        $175 = $174 + 0.083333335816860198;
        $176 = $164 * $175;
        $177 = $176 + 0.41893854737281799;
        $178 = $$1 + -0.5;
        $179 = $163 + -1.0;
        $180 = $178 * $179;
        $181 = $177 + $180;
        $$1176 = $181;
        break;
       } else {
        $182 = $163 + -1.0;
        $183 = $$1 * $182;
        $$1176 = $183;
        break;
       }
      }
      $120 = (~~(($$1)));
      $121 = (+($120|0));
      $122 = $$1 - $121;
      $123 = $122 * 3.194753298885189E-5;
      $124 = $123 + 0.0018402845598757267;
      $125 = $122 * $124;
      $126 = $125 + 0.026642270386219025;
      $127 = $122 * $126;
      $128 = $127 + 0.14635047316551208;
      $129 = $122 * $128;
      $130 = $129 + 0.3257787823677063;
      $131 = $122 * $130;
      $132 = $131 + 0.21498242020606995;
      $133 = $122 * $132;
      $134 = $133 + -0.077215664088726044;
      $135 = $122 * $134;
      $136 = $122 * 7.3266842264274601E-6;
      $137 = $136 + 7.7794247772544622E-4;
      $138 = $122 * $137;
      $139 = $138 + 0.018645919859409332;
      $140 = $122 * $139;
      $141 = $140 + 0.1719338595867157;
      $142 = $122 * $141;
      $143 = $142 + 0.72193557024002075;
      $144 = $122 * $143;
      $145 = $144 + 1.3920053243637085;
      $146 = $122 * $145;
      $147 = $146 + 1.0;
      $148 = $122 * 0.5;
      $149 = $135 / $147;
      $150 = $148 + $149;
      switch ($120|0) {
      case 7:  {
       $151 = $122 + 6.0;
       $$0180 = $151;
       label = 29;
       break;
      }
      case 6:  {
       $$0180 = 1.0;
       label = 29;
       break;
      }
      case 5:  {
       $$1181 = 1.0;
       label = 30;
       break;
      }
      case 4:  {
       $$2182 = 1.0;
       label = 31;
       break;
      }
      case 3:  {
       $$3 = 1.0;
       break;
      }
      default: {
       $$1176 = $150;
       break L29;
      }
      }
      if ((label|0) == 29) {
       $152 = $122 + 5.0;
       $153 = $152 * $$0180;
       $$1181 = $153;
       label = 30;
      }
      if ((label|0) == 30) {
       $154 = $122 + 4.0;
       $155 = $154 * $$1181;
       $$2182 = $155;
       label = 31;
      }
      if ((label|0) == 31) {
       $156 = $122 + 3.0;
       $157 = $156 * $$2182;
       $$3 = $157;
      }
      $158 = $122 + 2.0;
      $159 = $158 * $$3;
      $160 = (+Math_log((+$159)));
      $161 = $150 + $160;
      $$1176 = $161;
      break;
     }
    }
   } while(0);
   $184 = $$0179 - $$1176;
   $$$1176 = $7 ? $184 : $$1176;
   $$0 = $$$1176;
  }
 } while(0);
 return (+$$0);
}
function _sin_pi_318($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 * 0.5;
 $2 = (+Math_floor((+$1)));
 $3 = $1 - $2;
 $4 = $3 * 2.0;
 $5 = $4 * 4.0;
 $6 = (~~(($5)));
 $7 = (($6) + 1)|0;
 $8 = (($7|0) / 2)&-1;
 $9 = (+($8|0));
 $10 = $9 * 0.5;
 $11 = $4 - $10;
 $12 = $11;
 $13 = $12 * 3.1415926535897931;
 switch ($8|0) {
 case 3:  {
  $18 = (+___cosdf($13));
  $19 = - $18;
  $$0 = $19;
  break;
 }
 case 1:  {
  $15 = (+___cosdf($13));
  $$0 = $15;
  break;
 }
 case 2:  {
  $16 = - $13;
  $17 = (+___sindf($16));
  $$0 = $17;
  break;
 }
 default: {
  $14 = (+___sindf($13));
  $$0 = $14;
 }
 }
 return (+$$0);
}
function ___lgammal_r($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+___lgamma_r($0,$1));
 return (+$2);
}
function _lgammal($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+___lgammal_r($0,185708));
 return (+$1);
}
function _llrint($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_llvm_rint_f64((+$0)));
 $2 = (~~$1)>>>0;
 $3 = +Math_abs($1) >= 1.0 ? $1 > 0.0 ? (~~+Math_min(+Math_floor($1 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($1 - +(~~$1 >>> 0)) / 4294967296.0) >>> 0 : 0;
 tempRet0 = ($3);
 return ($2|0);
}
function _llrintf($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_rintf((+$0)));
 $2 = (~~$1)>>>0;
 $3 = +Math_abs($1) >= 1.0 ? $1 > 0.0 ? (~~+Math_min(+Math_floor($1 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($1 - +(~~$1 >>> 0)) / 4294967296.0) >>> 0 : 0;
 tempRet0 = ($3);
 return ($2|0);
}
function _llrintl($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_llrint($0)|0);
 $2 = tempRet0;
 tempRet0 = ($2);
 return ($1|0);
}
function _llround($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_llvm_round_f64((+$0)));
 $2 = (~~$1)>>>0;
 $3 = +Math_abs($1) >= 1.0 ? $1 > 0.0 ? (~~+Math_min(+Math_floor($1 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($1 - +(~~$1 >>> 0)) / 4294967296.0) >>> 0 : 0;
 tempRet0 = ($3);
 return ($2|0);
}
function _llroundf($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_roundf((+$0)));
 $2 = (~~$1)>>>0;
 $3 = +Math_abs($1) >= 1.0 ? $1 > 0.0 ? (~~+Math_min(+Math_floor($1 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($1 - +(~~$1 >>> 0)) / 4294967296.0) >>> 0 : 0;
 tempRet0 = ($3);
 return ($2|0);
}
function _llroundl($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_roundl($0));
 $2 = (~~$1)>>>0;
 $3 = +Math_abs($1) >= 1.0 ? $1 > 0.0 ? (~~+Math_min(+Math_floor($1 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($1 - +(~~$1 >>> 0)) / 4294967296.0) >>> 0 : 0;
 tempRet0 = ($3);
 return ($2|0);
}
function _roundl($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_llvm_round_f64((+$0)));
 return (+$1);
}
function _log10($0) {
 $0 = +$0;
 var $$0 = 0, $$0100 = 0, $$0101 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, $or$cond105 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = ($2>>>0)<(1048576);
 $4 = ($2|0)<(0);
 $or$cond = $4 | $3;
 do {
  if ($or$cond) {
   $5 = $2 & 2147483647;
   $6 = ($1|0)==(0);
   $7 = ($5|0)==(0);
   $8 = $6 & $7;
   if ($8) {
    $9 = $0 * $0;
    $10 = -1.0 / $9;
    $$0101 = $10;
    break;
   }
   if ($4) {
    $11 = $0 - $0;
    $12 = $11 / 0.0;
    $$0101 = $12;
    break;
   } else {
    $13 = $0 * 18014398509481984.0;
    HEAPF64[tempDoublePtr>>3] = $13;$14 = HEAP32[tempDoublePtr>>2]|0;
    $15 = HEAP32[tempDoublePtr+4>>2]|0;
    $$0 = -1077;$$0100 = $15;$26 = $14;$71 = $15;
    label = 9;
    break;
   }
  } else {
   $16 = ($2>>>0)>(2146435071);
   if ($16) {
    $$0101 = $0;
   } else {
    $17 = ($2|0)==(1072693248);
    $18 = ($1|0)==(0);
    $19 = (0)==(0);
    $20 = $18 & $19;
    $or$cond105 = $20 & $17;
    if ($or$cond105) {
     $$0101 = 0.0;
    } else {
     $$0 = -1023;$$0100 = $2;$26 = $1;$71 = $2;
     label = 9;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $21 = (($$0100) + 614242)|0;
  $22 = $21 >>> 20;
  $23 = (($$0) + ($22))|0;
  $24 = $21 & 1048575;
  $25 = (($24) + 1072079006)|0;
  HEAP32[tempDoublePtr>>2] = $26;HEAP32[tempDoublePtr+4>>2] = $25;$27 = +HEAPF64[tempDoublePtr>>3];
  $28 = $27 + -1.0;
  $29 = $28 * 0.5;
  $30 = $28 * $29;
  $31 = $28 + 2.0;
  $32 = $28 / $31;
  $33 = $32 * $32;
  $34 = $33 * $33;
  $35 = $34 * 0.15313837699209373;
  $36 = $35 + 0.22222198432149784;
  $37 = $34 * $36;
  $38 = $37 + 0.39999999999409419;
  $39 = $34 * $38;
  $40 = $34 * 0.14798198605116586;
  $41 = $40 + 0.1818357216161805;
  $42 = $34 * $41;
  $43 = $42 + 0.28571428743662391;
  $44 = $34 * $43;
  $45 = $44 + 0.66666666666667351;
  $46 = $33 * $45;
  $47 = $39 + $46;
  $48 = $28 - $30;
  HEAPF64[tempDoublePtr>>3] = $48;$49 = HEAP32[tempDoublePtr>>2]|0;
  $50 = HEAP32[tempDoublePtr+4>>2]|0;
  HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $50;$51 = +HEAPF64[tempDoublePtr>>3];
  $52 = $28 - $51;
  $53 = $52 - $30;
  $54 = $30 + $47;
  $55 = $32 * $54;
  $56 = $53 + $55;
  $57 = $51 * 0.43429448187816888;
  $58 = (+($23|0));
  $59 = $58 * 0.30102999566361177;
  $60 = $58 * 3.6942390771589308E-13;
  $61 = $56 + $51;
  $62 = $61 * 2.5082946711645275E-11;
  $63 = $60 + $62;
  $64 = $56 * 0.43429448187816888;
  $65 = $64 + $63;
  $66 = $59 + $57;
  $67 = $59 - $66;
  $68 = $57 + $67;
  $69 = $68 + $65;
  $70 = $66 + $69;
  $$0101 = $70;
 }
 return (+$$0101);
}
function _log10f($0) {
 $0 = +$0;
 var $$0 = 0, $$080 = 0, $$081 = 0.0, $$mask = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = ($1>>>0)<(8388608);
 $3 = ($1|0)<(0);
 $or$cond = $2 | $3;
 do {
  if ($or$cond) {
   $$mask = $1 & 2147483647;
   $4 = ($$mask|0)==(0);
   if ($4) {
    $5 = $0 * $0;
    $6 = -1.0 / $5;
    $$081 = $6;
    break;
   }
   if ($3) {
    $7 = $0 - $0;
    $8 = $7 / 0.0;
    $$081 = $8;
    break;
   } else {
    $9 = $0 * 33554432.0;
    $10 = (HEAPF32[tempDoublePtr>>2]=$9,HEAP32[tempDoublePtr>>2]|0);
    $$0 = -152;$$080 = $10;
    label = 9;
    break;
   }
  } else {
   $11 = ($1>>>0)>(2139095039);
   if ($11) {
    $$081 = $0;
   } else {
    $12 = ($1|0)==(1065353216);
    if ($12) {
     $$081 = 0.0;
    } else {
     $$0 = -127;$$080 = $1;
     label = 9;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $13 = (($$080) + 4913933)|0;
  $14 = $13 >>> 23;
  $15 = (($$0) + ($14))|0;
  $16 = $13 & 8388607;
  $17 = (($16) + 1060439283)|0;
  $18 = (HEAP32[tempDoublePtr>>2]=$17,+HEAPF32[tempDoublePtr>>2]);
  $19 = $18 + -1.0;
  $20 = $19 + 2.0;
  $21 = $19 / $20;
  $22 = $21 * $21;
  $23 = $22 * $22;
  $24 = $23 * 0.24279078841209412;
  $25 = $24 + 0.40000972151756287;
  $26 = $23 * $25;
  $27 = $23 * 0.28498786687850952;
  $28 = $27 + 0.66666662693023682;
  $29 = $22 * $28;
  $30 = $29 + $26;
  $31 = $19 * 0.5;
  $32 = $19 * $31;
  $33 = $19 - $32;
  $34 = (HEAPF32[tempDoublePtr>>2]=$33,HEAP32[tempDoublePtr>>2]|0);
  $35 = $34 & -4096;
  $36 = (HEAP32[tempDoublePtr>>2]=$35,+HEAPF32[tempDoublePtr>>2]);
  $37 = $19 - $36;
  $38 = $37 - $32;
  $39 = $32 + $30;
  $40 = $21 * $39;
  $41 = $38 + $40;
  $42 = (+($15|0));
  $43 = $42 * 7.9034151667656261E-7;
  $44 = $41 + $36;
  $45 = $44 * 3.1689971365267411E-5;
  $46 = $43 - $45;
  $47 = $41 * 0.434326171875;
  $48 = $47 + $46;
  $49 = $36 * 0.434326171875;
  $50 = $49 + $48;
  $51 = $42 * 0.30102920532226563;
  $52 = $51 + $50;
  $$081 = $52;
 }
 return (+$$081);
}
function _log10l($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_log10($0));
 return (+$1);
}
function _log1pl($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_log1p($0));
 return (+$1);
}
function _log2($0) {
 $0 = +$0;
 var $$0 = 0, $$096 = 0, $$097 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $7 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, $or$cond101 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = ($2>>>0)<(1048576);
 $4 = ($2|0)<(0);
 $or$cond = $4 | $3;
 do {
  if ($or$cond) {
   $5 = $2 & 2147483647;
   $6 = ($1|0)==(0);
   $7 = ($5|0)==(0);
   $8 = $6 & $7;
   if ($8) {
    $9 = $0 * $0;
    $10 = -1.0 / $9;
    $$097 = $10;
    break;
   }
   if ($4) {
    $11 = $0 - $0;
    $12 = $11 / 0.0;
    $$097 = $12;
    break;
   } else {
    $13 = $0 * 18014398509481984.0;
    HEAPF64[tempDoublePtr>>3] = $13;$14 = HEAP32[tempDoublePtr>>2]|0;
    $15 = HEAP32[tempDoublePtr+4>>2]|0;
    $$0 = -1077;$$096 = $15;$26 = $14;$68 = $15;
    label = 9;
    break;
   }
  } else {
   $16 = ($2>>>0)>(2146435071);
   if ($16) {
    $$097 = $0;
   } else {
    $17 = ($2|0)==(1072693248);
    $18 = ($1|0)==(0);
    $19 = (0)==(0);
    $20 = $18 & $19;
    $or$cond101 = $20 & $17;
    if ($or$cond101) {
     $$097 = 0.0;
    } else {
     $$0 = -1023;$$096 = $2;$26 = $1;$68 = $2;
     label = 9;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $21 = (($$096) + 614242)|0;
  $22 = $21 >>> 20;
  $23 = (($$0) + ($22))|0;
  $24 = $21 & 1048575;
  $25 = (($24) + 1072079006)|0;
  HEAP32[tempDoublePtr>>2] = $26;HEAP32[tempDoublePtr+4>>2] = $25;$27 = +HEAPF64[tempDoublePtr>>3];
  $28 = $27 + -1.0;
  $29 = $28 * 0.5;
  $30 = $28 * $29;
  $31 = $28 + 2.0;
  $32 = $28 / $31;
  $33 = $32 * $32;
  $34 = $33 * $33;
  $35 = $34 * 0.15313837699209373;
  $36 = $35 + 0.22222198432149784;
  $37 = $34 * $36;
  $38 = $37 + 0.39999999999409419;
  $39 = $34 * $38;
  $40 = $34 * 0.14798198605116586;
  $41 = $40 + 0.1818357216161805;
  $42 = $34 * $41;
  $43 = $42 + 0.28571428743662391;
  $44 = $34 * $43;
  $45 = $44 + 0.66666666666667351;
  $46 = $33 * $45;
  $47 = $39 + $46;
  $48 = $28 - $30;
  HEAPF64[tempDoublePtr>>3] = $48;$49 = HEAP32[tempDoublePtr>>2]|0;
  $50 = HEAP32[tempDoublePtr+4>>2]|0;
  HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $50;$51 = +HEAPF64[tempDoublePtr>>3];
  $52 = $28 - $51;
  $53 = $52 - $30;
  $54 = $30 + $47;
  $55 = $32 * $54;
  $56 = $53 + $55;
  $57 = $51 * 1.4426950407214463;
  $58 = $56 + $51;
  $59 = $58 * 1.6751713164886512E-10;
  $60 = $56 * 1.4426950407214463;
  $61 = $60 + $59;
  $62 = (+($23|0));
  $63 = $57 + $62;
  $64 = $62 - $63;
  $65 = $57 + $64;
  $66 = $65 + $61;
  $67 = $63 + $66;
  $$097 = $67;
 }
 return (+$$097);
}
function _log2f($0) {
 $0 = +$0;
 var $$0 = 0, $$076 = 0, $$077 = 0.0, $$mask = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = ($1>>>0)<(8388608);
 $3 = ($1|0)<(0);
 $or$cond = $2 | $3;
 do {
  if ($or$cond) {
   $$mask = $1 & 2147483647;
   $4 = ($$mask|0)==(0);
   if ($4) {
    $5 = $0 * $0;
    $6 = -1.0 / $5;
    $$077 = $6;
    break;
   }
   if ($3) {
    $7 = $0 - $0;
    $8 = $7 / 0.0;
    $$077 = $8;
    break;
   } else {
    $9 = $0 * 33554432.0;
    $10 = (HEAPF32[tempDoublePtr>>2]=$9,HEAP32[tempDoublePtr>>2]|0);
    $$0 = -152;$$076 = $10;
    label = 9;
    break;
   }
  } else {
   $11 = ($1>>>0)>(2139095039);
   if ($11) {
    $$077 = $0;
   } else {
    $12 = ($1|0)==(1065353216);
    if ($12) {
     $$077 = 0.0;
    } else {
     $$0 = -127;$$076 = $1;
     label = 9;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $13 = (($$076) + 4913933)|0;
  $14 = $13 >>> 23;
  $15 = (($$0) + ($14))|0;
  $16 = $13 & 8388607;
  $17 = (($16) + 1060439283)|0;
  $18 = (HEAP32[tempDoublePtr>>2]=$17,+HEAPF32[tempDoublePtr>>2]);
  $19 = $18 + -1.0;
  $20 = $19 + 2.0;
  $21 = $19 / $20;
  $22 = $21 * $21;
  $23 = $22 * $22;
  $24 = $23 * 0.24279078841209412;
  $25 = $24 + 0.40000972151756287;
  $26 = $23 * $25;
  $27 = $23 * 0.28498786687850952;
  $28 = $27 + 0.66666662693023682;
  $29 = $22 * $28;
  $30 = $29 + $26;
  $31 = $19 * 0.5;
  $32 = $19 * $31;
  $33 = $19 - $32;
  $34 = (HEAPF32[tempDoublePtr>>2]=$33,HEAP32[tempDoublePtr>>2]|0);
  $35 = $34 & -4096;
  $36 = (HEAP32[tempDoublePtr>>2]=$35,+HEAPF32[tempDoublePtr>>2]);
  $37 = $19 - $36;
  $38 = $37 - $32;
  $39 = $32 + $30;
  $40 = $21 * $39;
  $41 = $38 + $40;
  $42 = $41 + $36;
  $43 = $42 * 1.7605285393074155E-4;
  $44 = $41 * 1.44287109375;
  $45 = $44 - $43;
  $46 = $36 * 1.44287109375;
  $47 = $46 + $45;
  $48 = (+($15|0));
  $49 = $47 + $48;
  $$077 = $49;
 }
 return (+$$077);
}
function _log2l($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_log2($0));
 return (+$1);
}
function _logb($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 (___DOUBLE_BITS_323($0)|0);
 $1 = tempRet0;
 $2 = $1 & 2146435072;
 $3 = (0)==(0);
 $4 = ($2|0)==(2146435072);
 $5 = $3 & $4;
 do {
  if ($5) {
   $6 = $0 * $0;
   $$0 = $6;
  } else {
   $7 = $0 == 0.0;
   if ($7) {
    $8 = $0 * $0;
    $9 = -1.0 / $8;
    $$0 = $9;
    break;
   } else {
    $10 = (_ilogb($0)|0);
    $11 = (+($10|0));
    $$0 = $11;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function ___DOUBLE_BITS_323($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _logbf($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___FLOAT_BITS_324($0)|0);
 $2 = $1 & 2139095040;
 $3 = ($2|0)==(2139095040);
 do {
  if ($3) {
   $4 = $0 * $0;
   $$0 = $4;
  } else {
   $5 = $0 == 0.0;
   if ($5) {
    $6 = $0 * $0;
    $7 = -1.0 / $6;
    $$0 = $7;
    break;
   } else {
    $8 = (_ilogbf($0)|0);
    $9 = (+($8|0));
    $$0 = $9;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function ___FLOAT_BITS_324($0) {
 $0 = +$0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 return ($1|0);
}
function _logbl($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 (___DOUBLE_BITS_325($0)|0);
 $1 = tempRet0;
 $2 = $1 & 2146435072;
 $3 = (0)==(0);
 $4 = ($2|0)==(2146435072);
 $5 = $3 & $4;
 do {
  if ($5) {
   $6 = $0 * $0;
   $$0 = $6;
  } else {
   $7 = $0 == 0.0;
   if ($7) {
    $8 = $0 * $0;
    $9 = -1.0 / $8;
    $$0 = $9;
    break;
   } else {
    $10 = (_ilogbl($0)|0);
    $11 = (+($10|0));
    $$0 = $11;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function ___DOUBLE_BITS_325($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _lrint($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_fetestexcept(32)|0);
 $2 = (+_llvm_rint_f64((+$0)));
 $3 = ($1|0)==(0);
 if ($3) {
  $4 = $2 > 2147483647.0;
  $5 = $2 < -2147483648.0;
  $or$cond = $4 | $5;
  if ($or$cond) {
  }
 }
 $6 = (~~(($2)));
 return ($6|0);
}
function _lrintf($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_rintf((+$0)));
 $2 = (~~(($1)));
 return ($2|0);
}
function _lrintl($0) {
 $0 = +$0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lrint($0)|0);
 return ($1|0);
}
function _lround($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_llvm_round_f64((+$0)));
 $2 = (~~(($1)));
 return ($2|0);
}
function _lroundf($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_roundf((+$0)));
 $2 = (~~(($1)));
 return ($2|0);
}
function _lroundl($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_roundl($0));
 $2 = (~~(($1)));
 return ($2|0);
}
function _modfl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (+_modf($0,$2));
 $4 = +HEAPF64[$2>>3];
 HEAPF64[$1>>3] = $4;
 STACKTOP = sp;return (+$3);
}
function _nan($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +nan;
}
function _nanf($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +nan;
}
function _nanl($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +nan;
}
function _nearbyint($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0.0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_fetestexcept(32)|0);
 $2 = (+_llvm_rint_f64((+$0)));
 $3 = ($1|0)==(0);
 if ($3) {
 }
 return (+$2);
}
function _nearbyintf($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0.0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_fetestexcept(32)|0);
 $2 = (+_rintf((+$0)));
 $3 = ($1|0)==(0);
 if ($3) {
 }
 return (+$2);
}
function _nearbyintl($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_llvm_nearbyint_f64((+$0)));
 return (+$1);
}
function _nextafterf($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$0 = 0.0, $$sink3 = 0, $$sroa$018$0 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $3 = (HEAPF32[tempDoublePtr>>2]=$1,HEAP32[tempDoublePtr>>2]|0);
 $4 = (___FLOAT_BITS_333($0)|0);
 $5 = $4 & 2147483647;
 $6 = ($5>>>0)>(2139095040);
 do {
  if ($6) {
   label = 3;
  } else {
   $7 = (___FLOAT_BITS_333($1)|0);
   $8 = $7 & 2147483647;
   $9 = ($8>>>0)>(2139095040);
   if ($9) {
    label = 3;
   } else {
    $11 = ($2|0)==($3|0);
    if ($11) {
     $$0 = $1;
    } else {
     $12 = $2 & 2147483647;
     $13 = $3 & 2147483647;
     $14 = ($12|0)==(0);
     if ($14) {
      $15 = ($13|0)==(0);
      if ($15) {
       $$0 = $1;
       break;
      }
      $16 = $3 & -2147483648;
      $17 = $16 | 1;
      $$sroa$018$0 = $17;
     } else {
      $18 = ($12>>>0)>($13>>>0);
      $19 = $3 ^ $2;
      $20 = ($19|0)<(0);
      $or$cond = $18 | $20;
      $$sink3 = $or$cond ? -1 : 1;
      $21 = (($$sink3) + ($2))|0;
      $$sroa$018$0 = $21;
     }
     $22 = (HEAP32[tempDoublePtr>>2]=$$sroa$018$0,+HEAPF32[tempDoublePtr>>2]);
     $$0 = $22;
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $10 = $0 + $1;
  $$0 = $10;
 }
 return (+$$0);
}
function ___FLOAT_BITS_333($0) {
 $0 = +$0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 return ($1|0);
}
function _nextafterl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_nextafter($0,$1));
 return (+$2);
}
function _nexttoward($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_nextafter($0,$1));
 return (+$2);
}
function _nexttowardf($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$0 = 0.0, $$sink = 0, $$sink$v = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $3 = (___FLOAT_BITS_334($0)|0);
 $4 = $3 & 2147483647;
 $5 = ($4>>>0)>(2139095040);
 do {
  if ($5) {
   label = 3;
  } else {
   $6 = (___DOUBLE_BITS_335($1)|0);
   $7 = tempRet0;
   $8 = $7 & 2147483647;
   $9 = ($8>>>0)>(2146435072);
   $10 = ($6>>>0)>(0);
   $11 = ($8|0)==(2146435072);
   $12 = $11 & $10;
   $13 = $9 | $12;
   if ($13) {
    label = 3;
   } else {
    $17 = $0;
    $18 = $17 == $1;
    if ($18) {
     $19 = $1;
     $$0 = $19;
     break;
    }
    $20 = $0 == 0.0;
    if ($20) {
     $21 = ($7|0)<(0);
     $$ = $21 ? -1.4012984643248171E-45 : 1.4012984643248171E-45;
     return (+$$);
    } else {
     $22 = $17 < $1;
     $23 = $3 >> 31;
     $24 = $23 & 2;
     $25 = (($24) + -1)|0;
     $26 = $23 | 1;
     $$sink$v = $22 ? $26 : $25;
     $$sink = (($$sink$v) + ($2))|0;
     $phitmp = (HEAP32[tempDoublePtr>>2]=$$sink,+HEAPF32[tempDoublePtr>>2]);
     $$0 = $phitmp;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $14 = $0;
  $15 = $14 + $1;
  $16 = $15;
  $$0 = $16;
 }
 return (+$$0);
}
function ___FLOAT_BITS_334($0) {
 $0 = +$0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 return ($1|0);
}
function ___DOUBLE_BITS_335($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _nexttowardl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_nextafterl($0,$1));
 return (+$2);
}
function _remainder($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (+_remquo($0,$1,$2));
 STACKTOP = sp;return (+$3);
}
function _remquo($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$ = 0.0, $$$097 = 0, $$$097$lcssa = 0, $$$097131 = 0, $$$097134 = 0, $$0102 = 0.0, $$0103 = 0.0, $$0104$lcssa = 0, $$0104140 = 0, $$0106$lcssa = 0, $$0106146 = 0, $$097 = 0, $$1105 = 0, $$1107 = 0, $$2108$lcssa = 0, $$2108133 = 0, $$3100 = 0, $$3100123 = 0, $$3100124 = 0, $$3109127 = 0;
 var $$4101 = 0, $$4110 = 0, $$4110121 = 0, $$4110122 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond120 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$3 = HEAP32[tempDoublePtr>>2]|0;
 $4 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$5 = HEAP32[tempDoublePtr>>2]|0;
 $6 = HEAP32[tempDoublePtr+4>>2]|0;
 $7 = (_bitshift64Lshr(($3|0),($4|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = (_bitshift64Lshr(($5|0),($6|0),52)|0);
 $11 = tempRet0;
 $12 = $10 & 2047;
 $13 = (_bitshift64Lshr(($3|0),($4|0),63)|0);
 $14 = tempRet0;
 $15 = (_bitshift64Lshr(($5|0),($6|0),63)|0);
 $16 = tempRet0;
 HEAP32[$2>>2] = 0;
 $17 = $6 & 2147483647;
 $18 = ($5|0)==(0);
 $19 = ($17|0)==(0);
 $20 = $18 & $19;
 do {
  if ($20) {
   label = 3;
  } else {
   $21 = (___DOUBLE_BITS_338($1)|0);
   $22 = tempRet0;
   $23 = $22 & 2147483647;
   $24 = ($23>>>0)>(2146435072);
   $25 = ($21>>>0)>(0);
   $26 = ($23|0)==(2146435072);
   $27 = $26 & $25;
   $28 = $24 | $27;
   $29 = ($9|0)==(2047);
   $or$cond = $29 | $28;
   if ($or$cond) {
    label = 3;
   } else {
    $32 = $4 & 2147483647;
    $33 = ($3|0)==(0);
    $34 = ($32|0)==(0);
    $35 = $33 & $34;
    if ($35) {
     $$0102 = $0;
    } else {
     $36 = ($9|0)==(0);
     if ($36) {
      $37 = (_bitshift64Shl(($3|0),($4|0),12)|0);
      $38 = tempRet0;
      $39 = ($38|0)>(-1);
      $40 = ($37>>>0)>(4294967295);
      $41 = ($38|0)==(-1);
      $42 = $41 & $40;
      $43 = $39 | $42;
      if ($43) {
       $$0106146 = 0;$45 = $37;$46 = $38;
       while(1) {
        $44 = (($$0106146) + -1)|0;
        $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
        $48 = tempRet0;
        $49 = ($48|0)>(-1);
        $50 = ($47>>>0)>(4294967295);
        $51 = ($48|0)==(-1);
        $52 = $51 & $50;
        $53 = $49 | $52;
        if ($53) {
         $$0106146 = $44;$45 = $47;$46 = $48;
        } else {
         $$0106$lcssa = $44;
         break;
        }
       }
      } else {
       $$0106$lcssa = 0;
      }
      $54 = (1 - ($$0106$lcssa))|0;
      $55 = (_bitshift64Shl(($3|0),($4|0),($54|0))|0);
      $56 = tempRet0;
      $$1107 = $$0106$lcssa;$84 = $55;$85 = $56;
     } else {
      $57 = $4 & 1048575;
      $58 = $57 | 1048576;
      $$1107 = $9;$84 = $3;$85 = $58;
     }
     $59 = ($12|0)==(0);
     if ($59) {
      $60 = (_bitshift64Shl(($5|0),($6|0),12)|0);
      $61 = tempRet0;
      $62 = ($61|0)>(-1);
      $63 = ($60>>>0)>(4294967295);
      $64 = ($61|0)==(-1);
      $65 = $64 & $63;
      $66 = $62 | $65;
      if ($66) {
       $$0104140 = 0;$68 = $60;$69 = $61;
       while(1) {
        $67 = (($$0104140) + -1)|0;
        $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
        $71 = tempRet0;
        $72 = ($71|0)>(-1);
        $73 = ($70>>>0)>(4294967295);
        $74 = ($71|0)==(-1);
        $75 = $74 & $73;
        $76 = $72 | $75;
        if ($76) {
         $$0104140 = $67;$68 = $70;$69 = $71;
        } else {
         $$0104$lcssa = $67;
         break;
        }
       }
      } else {
       $$0104$lcssa = 0;
      }
      $77 = (1 - ($$0104$lcssa))|0;
      $78 = (_bitshift64Shl(($5|0),($6|0),($77|0))|0);
      $79 = tempRet0;
      $$1105 = $$0104$lcssa;$86 = $78;$87 = $79;
     } else {
      $80 = $6 & 1048575;
      $81 = $80 | 1048576;
      $$1105 = $12;$86 = $5;$87 = $81;
     }
     $82 = ($$1107|0)<($$1105|0);
     if ($82) {
      $99 = (($$1107) + 1)|0;
      $100 = ($99|0)==($$1105|0);
      if ($100) {
       $$3100 = 0;$$4110 = $$1107;$140 = $84;$141 = $85;
       label = 22;
      } else {
       $$0102 = $0;
       break;
      }
     } else {
      $83 = ($$1107|0)>($$1105|0);
      $88 = (_i64Subtract(($84|0),($85|0),($86|0),($87|0))|0);
      $89 = tempRet0;
      $90 = ($89|0)>(-1);
      $91 = ($88>>>0)>(4294967295);
      $92 = ($89|0)==(-1);
      $93 = $92 & $91;
      $94 = $90 | $93;
      $95 = (_bitshift64Lshr(($88|0),($89|0),63)|0);
      $96 = tempRet0;
      $$$097131 = $95 ^ 1;
      $97 = $94 ? $88 : $84;
      $98 = $94 ? $89 : $85;
      if ($83) {
       $$$097134 = $$$097131;$$2108133 = $$1107;$101 = $97;$102 = $98;
       while(1) {
        $103 = (_bitshift64Shl(($101|0),($102|0),1)|0);
        $104 = tempRet0;
        $105 = $$$097134 << 1;
        $106 = (($$2108133) + -1)|0;
        $107 = ($106|0)>($$1105|0);
        $108 = (_i64Subtract(($103|0),($104|0),($86|0),($87|0))|0);
        $109 = tempRet0;
        $110 = ($109|0)>(-1);
        $111 = ($108>>>0)>(4294967295);
        $112 = ($109|0)==(-1);
        $113 = $112 & $111;
        $114 = $110 | $113;
        $115 = (_bitshift64Lshr(($108|0),($109|0),63)|0);
        $116 = tempRet0;
        $$097 = $105 | $115;
        $$$097 = $$097 ^ 1;
        $117 = $114 ? $108 : $103;
        $118 = $114 ? $109 : $104;
        if ($107) {
         $$$097134 = $$$097;$$2108133 = $106;$101 = $117;$102 = $118;
        } else {
         $$$097$lcssa = $$$097;$$2108$lcssa = $$1105;$120 = $117;$122 = $118;
         break;
        }
       }
      } else {
       $$$097$lcssa = $$$097131;$$2108$lcssa = $$1107;$120 = $97;$122 = $98;
      }
      $119 = ($120|0)==(0);
      $121 = ($122|0)==(0);
      $123 = $119 & $121;
      if ($123) {
       $$3100124 = $$$097$lcssa;$$4110122 = -60;$149 = 0;$150 = 0;
       label = 24;
      } else {
       $124 = ($122>>>0)<(1048576);
       $125 = ($120>>>0)<(0);
       $126 = ($122|0)==(1048576);
       $127 = $126 & $125;
       $128 = $124 | $127;
       if ($128) {
        $$3109127 = $$2108$lcssa;$129 = $120;$130 = $122;
        while(1) {
         $131 = (_bitshift64Shl(($129|0),($130|0),1)|0);
         $132 = tempRet0;
         $133 = (($$3109127) + -1)|0;
         $134 = ($132>>>0)<(1048576);
         $135 = ($131>>>0)<(0);
         $136 = ($132|0)==(1048576);
         $137 = $136 & $135;
         $138 = $134 | $137;
         if ($138) {
          $$3109127 = $133;$129 = $131;$130 = $132;
         } else {
          $$3100 = $$$097$lcssa;$$4110 = $133;$140 = $131;$141 = $132;
          label = 22;
          break;
         }
        }
       } else {
        $$3100 = $$$097$lcssa;$$4110 = $$2108$lcssa;$140 = $120;$141 = $122;
        label = 22;
       }
      }
     }
     if ((label|0) == 22) {
      $139 = ($$4110|0)>(0);
      if ($139) {
       $142 = (_i64Add(($140|0),($141|0),0,-1048576)|0);
       $143 = tempRet0;
       $144 = (_bitshift64Shl(($$4110|0),0,52)|0);
       $145 = tempRet0;
       $146 = $142 | $144;
       $147 = $143 | $145;
       $$3100123 = $$3100;$$4110121 = $$4110;$153 = $146;$154 = $147;
      } else {
       $$3100124 = $$3100;$$4110122 = $$4110;$149 = $140;$150 = $141;
       label = 24;
      }
     }
     if ((label|0) == 24) {
      $148 = (1 - ($$4110122))|0;
      $151 = (_bitshift64Lshr(($149|0),($150|0),($148|0))|0);
      $152 = tempRet0;
      $$3100123 = $$3100124;$$4110121 = $$4110122;$153 = $151;$154 = $152;
     }
     HEAP32[tempDoublePtr>>2] = $153;HEAP32[tempDoublePtr+4>>2] = $154;$155 = +HEAPF64[tempDoublePtr>>3];
     $156 = ($15|0)==(0);
     $157 = ($16|0)==(0);
     $158 = $156 & $157;
     $159 = - $1;
     $$ = $158 ? $1 : $159;
     $160 = ($$4110121|0)==($$1105|0);
     if ($160) {
      label = 29;
     } else {
      $161 = (($$4110121) + 1)|0;
      $162 = ($161|0)==($$1105|0);
      if ($162) {
       $163 = $155 * 2.0;
       $164 = $163 > $$;
       if ($164) {
        label = 29;
       } else {
        $165 = $163 != $$;
        $166 = $$3100123 & 1;
        $167 = ($166|0)==(0);
        $or$cond120 = $167 | $165;
        if ($or$cond120) {
         $$0103 = $155;$$4101 = $$3100123;
        } else {
         label = 29;
        }
       }
      } else {
       $$0103 = $155;$$4101 = $$3100123;
      }
     }
     if ((label|0) == 29) {
      $168 = $155 - $$;
      $169 = (($$3100123) + 1)|0;
      $$0103 = $168;$$4101 = $169;
     }
     $170 = $$4101 & 2147483647;
     $171 = ($13|0)!=($15|0);
     $172 = ($14|0)!=($16|0);
     $173 = $171 | $172;
     $174 = (0 - ($170))|0;
     $175 = $173 ? $174 : $170;
     HEAP32[$2>>2] = $175;
     $176 = ($13|0)!=(0);
     $177 = ($14|0)!=(0);
     $178 = $176 | $177;
     $179 = - $$0103;
     $180 = $178 ? $179 : $$0103;
     $$0102 = $180;
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $30 = $0 * $1;
  $31 = $30 / $30;
  $$0102 = $31;
 }
 return (+$$0102);
}
function ___DOUBLE_BITS_338($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _remainderf($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (+_remquof($0,$1,$2));
 STACKTOP = sp;return (+$3);
}
function _remquof($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$ = 0.0, $$$097 = 0, $$$097$lcssa = 0, $$$097131 = 0, $$$097134 = 0, $$$1 = 0, $$$1$lcssa = 0, $$$1132 = 0, $$$1135 = 0, $$0 = 0, $$0102 = 0.0, $$0103 = 0.0, $$0104$lcssa = 0, $$0104140 = 0, $$0106$lcssa = 0, $$0106146 = 0, $$095147 = 0, $$097 = 0, $$1105 = 0, $$1107 = 0;
 var $$196141 = 0, $$2108$lcssa = 0, $$2108133 = 0, $$3100 = 0, $$3100123 = 0, $$3100124 = 0, $$3109127 = 0, $$4101 = 0, $$4110 = 0, $$4110121 = 0, $$4110122 = 0, $$4128 = 0, $$5 = 0, $$5125 = 0, $$6 = 0, $$lobit = 0, $$lobit130 = 0, $$mask = 0, $$mask112 = 0, $$sroa$0$0 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $9 = 0, $or$cond = 0;
 var $or$cond120 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $4 = (HEAPF32[tempDoublePtr>>2]=$1,HEAP32[tempDoublePtr>>2]|0);
 $5 = $3 >>> 23;
 $6 = $5 & 255;
 $7 = $4 >>> 23;
 $8 = $7 & 255;
 $9 = $3 >>> 31;
 $10 = $4 >>> 31;
 HEAP32[$2>>2] = 0;
 $$mask = $4 & 2147483647;
 $11 = ($$mask|0)==(0);
 do {
  if ($11) {
   label = 3;
  } else {
   $12 = (___FLOAT_BITS_341($1)|0);
   $13 = $12 & 2147483647;
   $14 = ($13>>>0)>(2139095040);
   $15 = ($6|0)==(255);
   $or$cond = $15 | $14;
   if ($or$cond) {
    label = 3;
   } else {
    $$mask112 = $3 & 2147483647;
    $18 = ($$mask112|0)==(0);
    if ($18) {
     $$0102 = $0;
    } else {
     $19 = ($6|0)==(0);
     if ($19) {
      $20 = $3 << 9;
      $21 = ($20|0)>(-1);
      if ($21) {
       $$0106146 = 0;$$095147 = $20;
       while(1) {
        $22 = (($$0106146) + -1)|0;
        $23 = $$095147 << 1;
        $24 = ($23|0)>(-1);
        if ($24) {
         $$0106146 = $22;$$095147 = $23;
        } else {
         $$0106$lcssa = $22;
         break;
        }
       }
      } else {
       $$0106$lcssa = 0;
      }
      $25 = (1 - ($$0106$lcssa))|0;
      $26 = $3 << $25;
      $$0 = $26;$$1107 = $$0106$lcssa;
     } else {
      $27 = $3 & 8388607;
      $28 = $27 | 8388608;
      $$0 = $28;$$1107 = $6;
     }
     $29 = ($8|0)==(0);
     if ($29) {
      $30 = $4 << 9;
      $31 = ($30|0)>(-1);
      if ($31) {
       $$0104140 = 0;$$196141 = $30;
       while(1) {
        $32 = (($$0104140) + -1)|0;
        $33 = $$196141 << 1;
        $34 = ($33|0)>(-1);
        if ($34) {
         $$0104140 = $32;$$196141 = $33;
        } else {
         $$0104$lcssa = $32;
         break;
        }
       }
      } else {
       $$0104$lcssa = 0;
      }
      $35 = (1 - ($$0104$lcssa))|0;
      $36 = $4 << $35;
      $$1105 = $$0104$lcssa;$$sroa$0$0 = $36;
     } else {
      $37 = $4 & 8388607;
      $38 = $37 | 8388608;
      $$1105 = $8;$$sroa$0$0 = $38;
     }
     $39 = ($$1107|0)<($$1105|0);
     if ($39) {
      $43 = (($$1107) + 1)|0;
      $44 = ($43|0)==($$1105|0);
      if ($44) {
       $$3100 = 0;$$4110 = $$1107;$$5 = $$0;
       label = 22;
      } else {
       $$0102 = $0;
       break;
      }
     } else {
      $40 = ($$1107|0)>($$1105|0);
      $41 = (($$0) - ($$sroa$0$0))|0;
      $42 = ($41|0)>(-1);
      $$lobit130 = $41 >>> 31;
      $$$097131 = $$lobit130 ^ 1;
      $$$1132 = $42 ? $41 : $$0;
      if ($40) {
       $$$097134 = $$$097131;$$$1135 = $$$1132;$$2108133 = $$1107;
       while(1) {
        $45 = $$$1135 << 1;
        $46 = $$$097134 << 1;
        $47 = (($$2108133) + -1)|0;
        $48 = ($47|0)>($$1105|0);
        $49 = (($45) - ($$sroa$0$0))|0;
        $50 = ($49|0)>(-1);
        $$lobit = $49 >>> 31;
        $$097 = $$lobit | $46;
        $$$097 = $$097 ^ 1;
        $$$1 = $50 ? $49 : $45;
        if ($48) {
         $$$097134 = $$$097;$$$1135 = $$$1;$$2108133 = $47;
        } else {
         $$$097$lcssa = $$$097;$$$1$lcssa = $$$1;$$2108$lcssa = $$1105;
         break;
        }
       }
      } else {
       $$$097$lcssa = $$$097131;$$$1$lcssa = $$$1132;$$2108$lcssa = $$1107;
      }
      $51 = ($$$1$lcssa|0)==(0);
      if ($51) {
       $$3100124 = $$$097$lcssa;$$4110122 = -30;$$5125 = 0;
       label = 24;
      } else {
       $52 = ($$$1$lcssa>>>0)<(8388608);
       if ($52) {
        $$3109127 = $$2108$lcssa;$$4128 = $$$1$lcssa;
        while(1) {
         $53 = $$4128 << 1;
         $54 = (($$3109127) + -1)|0;
         $55 = ($53>>>0)<(8388608);
         if ($55) {
          $$3109127 = $54;$$4128 = $53;
         } else {
          $$3100 = $$$097$lcssa;$$4110 = $54;$$5 = $53;
          label = 22;
          break;
         }
        }
       } else {
        $$3100 = $$$097$lcssa;$$4110 = $$2108$lcssa;$$5 = $$$1$lcssa;
        label = 22;
       }
      }
     }
     if ((label|0) == 22) {
      $56 = ($$4110|0)>(0);
      if ($56) {
       $57 = (($$5) + -8388608)|0;
       $58 = $$4110 << 23;
       $59 = $57 | $58;
       $$3100123 = $$3100;$$4110121 = $$4110;$$6 = $59;
      } else {
       $$3100124 = $$3100;$$4110122 = $$4110;$$5125 = $$5;
       label = 24;
      }
     }
     if ((label|0) == 24) {
      $60 = (1 - ($$4110122))|0;
      $61 = $$5125 >>> $60;
      $$3100123 = $$3100124;$$4110121 = $$4110122;$$6 = $61;
     }
     $62 = (HEAP32[tempDoublePtr>>2]=$$6,+HEAPF32[tempDoublePtr>>2]);
     $63 = ($10|0)==(0);
     $64 = - $1;
     $$ = $63 ? $1 : $64;
     $65 = ($$4110121|0)==($$1105|0);
     if ($65) {
      label = 29;
     } else {
      $66 = (($$4110121) + 1)|0;
      $67 = ($66|0)==($$1105|0);
      if ($67) {
       $68 = $62 * 2.0;
       $69 = $68 > $$;
       if ($69) {
        label = 29;
       } else {
        $70 = $68 != $$;
        $71 = $$3100123 & 1;
        $72 = ($71|0)==(0);
        $or$cond120 = $72 | $70;
        if ($or$cond120) {
         $$0103 = $62;$$4101 = $$3100123;
        } else {
         label = 29;
        }
       }
      } else {
       $$0103 = $62;$$4101 = $$3100123;
      }
     }
     if ((label|0) == 29) {
      $73 = $62 - $$;
      $74 = (($$3100123) + 1)|0;
      $$0103 = $73;$$4101 = $74;
     }
     $75 = $$4101 & 2147483647;
     $76 = ($9|0)!=($10|0);
     $77 = (0 - ($75))|0;
     $78 = $76 ? $77 : $75;
     HEAP32[$2>>2] = $78;
     $79 = ($9|0)!=(0);
     $80 = - $$0103;
     $81 = $79 ? $80 : $$0103;
     $$0102 = $81;
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $16 = $0 * $1;
  $17 = $16 / $16;
  $$0102 = $17;
 }
 return (+$$0102);
}
function ___FLOAT_BITS_341($0) {
 $0 = +$0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 return ($1|0);
}
function _remainderl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_remainder($0,$1));
 return (+$2);
}
function _remquol($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+_remquo($0,$1,$2));
 return (+$3);
}
function _rint($0) {
 $0 = +$0;
 var $$015 = 0.0, $$sink16 = 0.0, $$sink17 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = $2 & 2146435072;
 $4 = ($3>>>0)>(1126170624);
 $5 = (0)>(0);
 $6 = ($3|0)==(1126170624);
 $7 = $6 & $5;
 $8 = $4 | $7;
 if ($8) {
  $$015 = $0;
 } else {
  $9 = ($2|0)<(0);
  $$sink17 = $9 ? -4503599627370496.0 : 4503599627370496.0;
  $$sink16 = $9 ? 4503599627370496.0 : -4503599627370496.0;
  $10 = $$sink17 + $0;
  $11 = $$sink16 + $10;
  $12 = $11 == 0.0;
  if ($12) {
   $13 = $9 ? -0.0 : 0.0;
   $$015 = $13;
  } else {
   $$015 = $11;
  }
 }
 return (+$$015);
}
function _rintl($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_llvm_rint_f64((+$0)));
 return (+$1);
}
function _scalb($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$0 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___DOUBLE_BITS_344($0)|0);
 $3 = tempRet0;
 $4 = $3 & 2147483647;
 $5 = ($4>>>0)>(2146435072);
 $6 = ($2>>>0)>(0);
 $7 = ($4|0)==(2146435072);
 $8 = $7 & $6;
 $9 = $5 | $8;
 do {
  if ($9) {
   label = 3;
  } else {
   $10 = (___DOUBLE_BITS_344($1)|0);
   $11 = tempRet0;
   $12 = $11 & 2147483647;
   $13 = ($12>>>0)>(2146435072);
   $14 = ($10>>>0)>(0);
   $15 = ($12|0)==(2146435072);
   $16 = $15 & $14;
   $17 = $13 | $16;
   if ($17) {
    label = 3;
   } else {
    $19 = $11 & 2146435072;
    $20 = (0)==(0);
    $21 = ($19|0)==(2146435072);
    $22 = $20 & $21;
    if ($22) {
     $23 = $1 > 0.0;
     if ($23) {
      $24 = $0 * $1;
      $$0 = $24;
      break;
     } else {
      $25 = - $1;
      $26 = $0 / $25;
      $$0 = $26;
      break;
     }
    }
    $27 = (+_llvm_rint_f64((+$1)));
    $28 = $27 != $1;
    if ($28) {
     $29 = $1 - $1;
     $30 = $29 / $29;
     $$0 = $30;
     break;
    }
    $31 = $1 > 65000.0;
    if ($31) {
     $32 = (+_scalbn($0,65000));
     $$0 = $32;
     break;
    }
    $33 = $1 < -65000.0;
    if ($33) {
     $34 = (+_scalbn($0,-65000));
     $$0 = $34;
     break;
    } else {
     $35 = (~~(($1)));
     $36 = (+_scalbn($0,$35));
     $$0 = $36;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $18 = $0 * $1;
  $$0 = $18;
 }
 return (+$$0);
}
function ___DOUBLE_BITS_344($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _scalbf($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$0 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___FLOAT_BITS_345($0)|0);
 $3 = $2 & 2147483647;
 $4 = ($3>>>0)>(2139095040);
 do {
  if ($4) {
   label = 3;
  } else {
   $5 = (___FLOAT_BITS_345($1)|0);
   $6 = $5 & 2147483647;
   $7 = ($6>>>0)>(2139095040);
   if ($7) {
    label = 3;
   } else {
    $9 = $5 & 2139095040;
    $10 = ($9|0)==(2139095040);
    if ($10) {
     $11 = $1 > 0.0;
     if ($11) {
      $12 = $0 * $1;
      $$0 = $12;
      break;
     } else {
      $13 = - $1;
      $14 = $0 / $13;
      $$0 = $14;
      break;
     }
    }
    $15 = (+_rintf((+$1)));
    $16 = $15 != $1;
    if ($16) {
     $17 = $1 - $1;
     $18 = $17 / $17;
     $$0 = $18;
     break;
    }
    $19 = $1 > 65000.0;
    if ($19) {
     $20 = (+_scalbnf($0,65000));
     $$0 = $20;
     break;
    }
    $21 = $1 < -65000.0;
    if ($21) {
     $22 = (+_scalbnf($0,-65000));
     $$0 = $22;
     break;
    } else {
     $23 = (~~(($1)));
     $24 = (+_scalbnf($0,$23));
     $$0 = $24;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $8 = $0 * $1;
  $$0 = $8;
 }
 return (+$$0);
}
function ___FLOAT_BITS_345($0) {
 $0 = +$0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 return ($1|0);
}
function _scalbln($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _scalblnf($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbnf($0,$1));
 return (+$2);
}
function _scalblnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbln($0,$1));
 return (+$2);
}
function _significand($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_ilogb($0)|0);
 $2 = (0 - ($1))|0;
 $3 = (+_scalbn($0,$2));
 return (+$3);
}
function _significandf($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_ilogbf($0)|0);
 $2 = (0 - ($1))|0;
 $3 = (+_scalbnf($0,$2));
 return (+$3);
}
function _sincos($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0.0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAPF64[tempDoublePtr>>3] = $0;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $5 & 2147483647;
 $7 = ($6>>>0)<(1072243196);
 do {
  if ($7) {
   $8 = ($6>>>0)<(1044816030);
   if ($8) {
    HEAPF64[$1>>3] = $0;
    HEAPF64[$2>>3] = 1.0;
    break;
   } else {
    $9 = (+___sin($0,0.0,0));
    HEAPF64[$1>>3] = $9;
    $10 = (+___cos($0,0.0));
    HEAPF64[$2>>3] = $10;
    break;
   }
  } else {
   $11 = ($6>>>0)>(2146435071);
   if ($11) {
    $12 = $0 - $0;
    HEAPF64[$2>>3] = $12;
    HEAPF64[$1>>3] = $12;
    break;
   }
   $13 = (___rem_pio2($0,$3)|0);
   $14 = +HEAPF64[$3>>3];
   $15 = ((($3)) + 8|0);
   $16 = +HEAPF64[$15>>3];
   $17 = (+___sin($14,$16,1));
   $18 = +HEAPF64[$3>>3];
   $19 = +HEAPF64[$15>>3];
   $20 = (+___cos($18,$19));
   $trunc = $13&255;
   $trunc$clear = $trunc & 3;
   switch ($trunc$clear<<24>>24) {
   case 0:  {
    HEAPF64[$1>>3] = $17;
    $$sink = $20;
    break;
   }
   case 1:  {
    HEAPF64[$1>>3] = $20;
    $21 = - $17;
    $$sink = $21;
    break;
   }
   case 2:  {
    $22 = - $17;
    HEAPF64[$1>>3] = $22;
    $23 = - $20;
    $$sink = $23;
    break;
   }
   case 3:  {
    $24 = - $20;
    HEAPF64[$1>>3] = $24;
    $$sink = $17;
    break;
   }
   default: {
    // unreachable;
   }
   }
   HEAPF64[$2>>3] = $$sink;
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sincosf($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0.0, $$sink69 = 0.0, $$sink70 = 0.0, $$v = 0.0, $$v67 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0;
 var $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $storemerge = 0.0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $5 = $4 >>> 31;
 $6 = $4 & 2147483647;
 $7 = ($6>>>0)<(1061752795);
 do {
  if ($7) {
   $8 = ($6>>>0)<(964689920);
   if ($8) {
    HEAPF32[$1>>2] = $0;
    HEAPF32[$2>>2] = 1.0;
    break;
   } else {
    $9 = $0;
    $10 = (+___sindf($9));
    HEAPF32[$1>>2] = $10;
    $11 = (+___cosdf($9));
    HEAPF32[$2>>2] = $11;
    break;
   }
  } else {
   $12 = ($6>>>0)<(1081824210);
   if ($12) {
    $13 = ($6>>>0)<(1075235812);
    $14 = ($5|0)!=(0);
    $15 = $0;
    if (!($13)) {
     $$v67 = $14 ? 3.1415926535897931 : -3.1415926535897931;
     $22 = $$v67 + $15;
     $23 = (+___sindf($22));
     $24 = - $23;
     HEAPF32[$1>>2] = $24;
     $25 = (+___cosdf($22));
     $26 = - $25;
     HEAPF32[$2>>2] = $26;
     break;
    }
    if ($14) {
     $16 = $15 + 1.5707963267948966;
     $17 = (+___cosdf($16));
     $18 = - $17;
     $$sink = $16;$$sink69 = $18;
    } else {
     $19 = 1.5707963267948966 - $15;
     $20 = (+___cosdf($19));
     $$sink = $19;$$sink69 = $20;
    }
    HEAPF32[$1>>2] = $$sink69;
    $21 = (+___sindf($$sink));
    HEAPF32[$2>>2] = $21;
    break;
   }
   $27 = ($6>>>0)<(1088565718);
   if ($27) {
    $28 = ($6>>>0)<(1085271520);
    $29 = ($5|0)!=(0);
    $30 = $0;
    if (!($28)) {
     $$v = $29 ? 6.2831853071795862 : -6.2831853071795862;
     $39 = $$v + $30;
     $40 = (+___sindf($39));
     HEAPF32[$1>>2] = $40;
     $41 = (+___cosdf($39));
     HEAPF32[$2>>2] = $41;
     break;
    }
    if ($29) {
     $31 = $30 + 4.7123889803846897;
     $32 = (+___cosdf($31));
     HEAPF32[$1>>2] = $32;
     $33 = (+___sindf($31));
     $34 = - $33;
     $storemerge = $34;
    } else {
     $35 = $30 + -4.7123889803846897;
     $36 = (+___cosdf($35));
     $37 = - $36;
     HEAPF32[$1>>2] = $37;
     $38 = (+___sindf($35));
     $storemerge = $38;
    }
    HEAPF32[$2>>2] = $storemerge;
    break;
   }
   $42 = ($6>>>0)>(2139095039);
   if ($42) {
    $43 = $0 - $0;
    HEAPF32[$2>>2] = $43;
    HEAPF32[$1>>2] = $43;
    break;
   }
   $44 = (___rem_pio2f($0,$3)|0);
   $45 = +HEAPF64[$3>>3];
   $46 = (+___sindf($45));
   $47 = +HEAPF64[$3>>3];
   $48 = (+___cosdf($47));
   $trunc = $44&255;
   $trunc$clear = $trunc & 3;
   switch ($trunc$clear<<24>>24) {
   case 0:  {
    HEAPF32[$1>>2] = $46;
    $$sink70 = $48;
    break;
   }
   case 1:  {
    HEAPF32[$1>>2] = $48;
    $49 = - $46;
    $$sink70 = $49;
    break;
   }
   case 2:  {
    $50 = - $46;
    HEAPF32[$1>>2] = $50;
    $51 = - $48;
    $$sink70 = $51;
    break;
   }
   case 3:  {
    $52 = - $48;
    HEAPF32[$1>>2] = $52;
    $$sink70 = $46;
    break;
   }
   default: {
    // unreachable;
   }
   }
   HEAPF32[$2>>2] = $$sink70;
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sincosl($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $4 = sp;
 _sincos($0,$3,$4);
 $5 = +HEAPF64[$3>>3];
 HEAPF64[$1>>3] = $5;
 $6 = +HEAPF64[$4>>3];
 HEAPF64[$2>>3] = $6;
 STACKTOP = sp;return;
}
function _sinhl($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_sinh($0));
 return (+$1);
}
function _tanh($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = $2 & 2147483647;
 HEAP32[tempDoublePtr>>2] = $1;HEAP32[tempDoublePtr+4>>2] = $3;$4 = +HEAPF64[tempDoublePtr>>3];
 $5 = ($3>>>0)>(1071748074);
 do {
  if ($5) {
   $6 = ($3>>>0)>(1077149696);
   if ($6) {
    $7 = 0.0 / $4;
    $8 = 1.0 - $7;
    $$0 = $8;
    break;
   } else {
    $9 = $4 * 2.0;
    $10 = (+_expm1($9));
    $11 = $10 + 2.0;
    $12 = 2.0 / $11;
    $13 = 1.0 - $12;
    $$0 = $13;
    break;
   }
  } else {
   $14 = ($3>>>0)>(1070618798);
   if ($14) {
    $15 = $4 * 2.0;
    $16 = (+_expm1($15));
    $17 = $16 + 2.0;
    $18 = $16 / $17;
    $$0 = $18;
    break;
   }
   $19 = ($3>>>0)>(1048575);
   if ($19) {
    $20 = $4 * -2.0;
    $21 = (+_expm1($20));
    $22 = - $21;
    $23 = $21 + 2.0;
    $24 = $22 / $23;
    $$0 = $24;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 $25 = ($2|0)<(0);
 $26 = - $$0;
 $27 = $25 ? $26 : $$0;
 return (+$27);
}
function _tanhf($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 & 2147483647;
 $3 = (HEAP32[tempDoublePtr>>2]=$2,+HEAPF32[tempDoublePtr>>2]);
 $4 = ($2>>>0)>(1057791828);
 do {
  if ($4) {
   $5 = ($2>>>0)>(1092616192);
   if ($5) {
    $6 = 0.0 / $3;
    $7 = $6 + 1.0;
    $$0 = $7;
    break;
   } else {
    $8 = $3 * 2.0;
    $9 = (+_expm1f($8));
    $10 = $9 + 2.0;
    $11 = 2.0 / $10;
    $12 = 1.0 - $11;
    $$0 = $12;
    break;
   }
  } else {
   $13 = ($2>>>0)>(1048757624);
   if ($13) {
    $14 = $3 * 2.0;
    $15 = (+_expm1f($14));
    $16 = $15 + 2.0;
    $17 = $15 / $16;
    $$0 = $17;
    break;
   }
   $18 = ($2>>>0)>(8388607);
   if ($18) {
    $19 = $3 * -2.0;
    $20 = (+_expm1f($19));
    $21 = - $20;
    $22 = $20 + 2.0;
    $23 = $21 / $22;
    $$0 = $23;
   } else {
    $$0 = $3;
   }
  }
 } while(0);
 $24 = ($1|0)<(0);
 $25 = - $$0;
 $26 = $24 ? $25 : $$0;
 return (+$26);
}
function _tanhl($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_tanh($0));
 return (+$1);
}
function _tgamma($0) {
 $0 = +$0;
 var $$ = 0.0, $$0 = 0.0, $$055 = 0.0, $$056 = 0.0, $$057 = 0.0, $$1 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0;
 var $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0;
 var $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = $2 & 2147483647;
 $4 = (_bitshift64Lshr(($1|0),($2|0),63)|0);
 $5 = tempRet0;
 $6 = ($3>>>0)>(2146435071);
 do {
  if ($6) {
   $7 = $0 + inf;
   $$0 = $7;
  } else {
   $8 = ($3>>>0)<(1016070144);
   if ($8) {
    $9 = 1.0 / $0;
    $$0 = $9;
    break;
   }
   $10 = (+Math_floor((+$0)));
   $11 = $10 == $0;
   if ($11) {
    $12 = ($4|0)==(0);
    if (!($12)) {
     $$0 = nan;
     break;
    }
    $13 = !($0 <= 23.0);
    if (!($13)) {
     $14 = (~~(($0)));
     $15 = (($14) + -1)|0;
     $16 = (6656 + ($15<<3)|0);
     $17 = +HEAPF64[$16>>3];
     $$0 = $17;
     break;
    }
   }
   $18 = ($3>>>0)>(1080492031);
   $19 = ($4|0)!=(0);
   if ($18) {
    if ($19) {
     $20 = $10 * 0.5;
     $21 = $0 * 0.5;
     $22 = (+Math_floor((+$21)));
     $23 = $20 == $22;
     $$ = $23 ? 0.0 : -0.0;
     $$0 = $$;
     break;
    } else {
     $24 = $0 * 8.9884656743115795E+307;
     $$0 = $24;
     break;
    }
   } else {
    $25 = - $0;
    $26 = $19 ? $25 : $0;
    $27 = $26 + 5.5246800407767296;
    $28 = $26 > 5.5246800407767296;
    $29 = $27 - $26;
    $30 = $29 + -5.5246800407767296;
    $31 = $27 + -5.5246800407767296;
    $32 = $31 - $26;
    $$057 = $28 ? $30 : $32;
    $33 = $26 + -0.5;
    $34 = (+_S($26));
    $35 = - $27;
    $36 = (+Math_exp((+$35)));
    $37 = $34 * $36;
    $38 = $0 < 0.0;
    if ($38) {
     $39 = - $33;
     $40 = - $$057;
     $41 = (+_sinpi($26));
     $42 = $26 * $41;
     $43 = $37 * $42;
     $44 = -3.1415926535897931 / $43;
     $$055 = $44;$$056 = $39;$$1 = $40;
    } else {
     $$055 = $37;$$056 = $33;$$1 = $$057;
    }
    $45 = $$1 * 6.0246800407767296;
    $46 = $45 * $$055;
    $47 = $46 / $27;
    $48 = $$055 + $47;
    $49 = $$056 * 0.5;
    $50 = (+Math_pow((+$27),(+$49)));
    $51 = $50 * $48;
    $52 = $50 * $51;
    $$0 = $52;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _S($0) {
 $0 = +$0;
 var $$02331 = 0.0, $$02530 = 0.0, $$032 = 0, $$12434 = 0.0, $$12633 = 0.0, $$135 = 0, $$2 = 0.0, $$227 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0;
 var $20 = 0, $21 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 < 8.0;
 if ($1) {
  $$02331 = 0.0;$$02530 = 0.0;$$032 = 12;
  while(1) {
   $2 = $$02530 * $0;
   $3 = (6840 + ($$032<<3)|0);
   $4 = +HEAPF64[$3>>3];
   $5 = $2 + $4;
   $6 = $$02331 * $0;
   $7 = (6944 + ($$032<<3)|0);
   $8 = +HEAPF64[$7>>3];
   $9 = $6 + $8;
   $10 = (($$032) + -1)|0;
   $11 = ($$032|0)>(0);
   if ($11) {
    $$02331 = $9;$$02530 = $5;$$032 = $10;
   } else {
    $$2 = $9;$$227 = $5;
    break;
   }
  }
 } else {
  $$12434 = 0.0;$$12633 = 0.0;$$135 = 0;
  while(1) {
   $12 = $$12633 / $0;
   $13 = (6840 + ($$135<<3)|0);
   $14 = +HEAPF64[$13>>3];
   $15 = $12 + $14;
   $16 = $$12434 / $0;
   $17 = (6944 + ($$135<<3)|0);
   $18 = +HEAPF64[$17>>3];
   $19 = $16 + $18;
   $20 = (($$135) + 1)|0;
   $exitcond = ($20|0)==(13);
   if ($exitcond) {
    $$2 = $19;$$227 = $15;
    break;
   } else {
    $$12434 = $19;$$12633 = $15;$$135 = $20;
   }
  }
 }
 $21 = $$227 / $$2;
 return (+$21);
}
function _sinpi($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = $0 * 0.5;
 $2 = (+Math_floor((+$1)));
 $3 = $1 - $2;
 $4 = $3 * 2.0;
 $5 = $4 * 4.0;
 $6 = (~~(($5)));
 $7 = (($6) + 1)|0;
 $8 = (($7|0) / 2)&-1;
 $9 = (+($8|0));
 $10 = $9 * 0.5;
 $11 = $4 - $10;
 $12 = $11 * 3.1415926535897931;
 switch ($8|0) {
 case 3:  {
  $17 = (+___cos($12,0.0));
  $18 = - $17;
  $$0 = $18;
  break;
 }
 case 1:  {
  $14 = (+___cos($12,0.0));
  $$0 = $14;
  break;
 }
 case 2:  {
  $15 = - $12;
  $16 = (+___sin($15,0.0,0));
  $$0 = $16;
  break;
 }
 default: {
  $13 = (+___sin($12,0.0,0));
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _tgammaf($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = (+_tgamma($1));
 $3 = $2;
 return (+$3);
}
function _tgammal($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_tgamma($0));
 return (+$1);
}
function _trunc($0) {
 $0 = +$0;
 var $$15 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = (_bitshift64Lshr(($1|0),($2|0),52)|0);
 $4 = tempRet0;
 $5 = $3 & 2047;
 $6 = ($5>>>0)>(1074);
 if ($6) {
  return (+$0);
 } else {
  $7 = (($5) + -1011)|0;
  $8 = ($5>>>0)<(1023);
  $9 = (_bitshift64Lshr(-1,-1,($7|0))|0);
  $10 = tempRet0;
  $11 = $8 ? -1 : $9;
  $12 = $8 ? 2147483647 : $10;
  $13 = $11 & $1;
  $14 = $12 & $2;
  $15 = ($13|0)==(0);
  $16 = ($14|0)==(0);
  $17 = $15 & $16;
  $18 = $11 ^ -1;
  $19 = $12 ^ -1;
  $20 = $18 & $1;
  $21 = $19 & $2;
  HEAP32[tempDoublePtr>>2] = $20;HEAP32[tempDoublePtr+4>>2] = $21;$22 = +HEAPF64[tempDoublePtr>>3];
  $$15 = $17 ? $0 : $22;
  return (+$$15);
 }
 return +(0.0);
}
function _truncf($0) {
 $0 = +$0;
 var $$15 = 0.0, $$op = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 >>> 23;
 $3 = $2 & 255;
 $4 = ($3>>>0)>(149);
 if ($4) {
  return (+$0);
 } else {
  $5 = (($3) + -118)|0;
  $6 = ($3>>>0)<(127);
  $$op = -1 >>> $5;
  $7 = $6 ? 2147483647 : $$op;
  $8 = $7 & $1;
  $9 = ($8|0)==(0);
  $10 = $7 ^ -1;
  $11 = $10 & $1;
  $12 = (HEAP32[tempDoublePtr>>2]=$11,+HEAPF32[tempDoublePtr>>2]);
  $$15 = $9 ? $0 : $12;
  return (+$$15);
 }
 return +(0.0);
}
function _truncl($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_llvm_trunc_f64((+$0)));
 return (+$1);
}
function _a64l($0) {
 $0 = $0|0;
 var $$01521 = 0, $$016$lcssa = 0, $$01620 = 0, $$01719 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$01521 = $0;$$01620 = 0;$$01719 = 0;
 while(1) {
  $1 = HEAP8[$$01521>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$016$lcssa = $$01620;
   break;
  }
  $3 = $1 << 24 >> 24;
  $memchr = (_memchr(168047,$3,65)|0);
  $4 = ($memchr|0)==(0|0);
  if ($4) {
   $$016$lcssa = $$01620;
   break;
  }
  $5 = $memchr;
  $6 = (($5) - (168047))|0;
  $7 = $6 << $$01719;
  $8 = $7 | $$01620;
  $9 = (($$01719) + 6)|0;
  $10 = ((($$01521)) + 1|0);
  $11 = ($$01719|0)<(30);
  if ($11) {
   $$01521 = $10;$$01620 = $8;$$01719 = $9;
  } else {
   $$016$lcssa = $8;
   break;
  }
 }
 return ($$016$lcssa|0);
}
function _l64a($0) {
 $0 = $0|0;
 var $$011 = 0, $$09$lcssa = 0, $$0910 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $$09$lcssa = 189240;
 } else {
  $$011 = $0;$$0910 = 189240;
  while(1) {
   $2 = $$011 & 63;
   $3 = (168047 + ($2)|0);
   $4 = HEAP8[$3>>0]|0;
   HEAP8[$$0910>>0] = $4;
   $5 = ((($$0910)) + 1|0);
   $6 = $$011 >>> 6;
   $7 = ($6|0)==(0);
   if ($7) {
    $$09$lcssa = $5;
    break;
   } else {
    $$011 = $6;$$0910 = $5;
   }
  }
 }
 HEAP8[$$09$lcssa>>0] = 0;
 return (189240|0);
}
function _basename($0) {
 $0 = $0|0;
 var $$0 = 0, $$017 = 0, $$018 = 0, $$019 = 0, $$1 = 0, $$1$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$017 = 184252;
 } else {
  $2 = HEAP8[$0>>0]|0;
  $3 = ($2<<24>>24)==(0);
  if ($3) {
   $$017 = 184252;
  } else {
   $4 = (_strlen($0)|0);
   $$018 = (($4) + -1)|0;
   $5 = ($$018|0)==(0);
   L4: do {
    if ($5) {
     $$1 = 0;
    } else {
     $$019 = $$018;
     while(1) {
      $6 = (($0) + ($$019)|0);
      $7 = HEAP8[$6>>0]|0;
      $8 = ($7<<24>>24)==(47);
      if (!($8)) {
       $$1 = $$019;
       break L4;
      }
      HEAP8[$6>>0] = 0;
      $$0 = (($$019) + -1)|0;
      $9 = ($$0|0)==(0);
      if ($9) {
       $$1 = 0;
       break;
      } else {
       $$019 = $$0;
      }
     }
    }
   } while(0);
   while(1) {
    $10 = ($$1|0)==(0);
    if ($10) {
     $$1$lcssa = 0;
     break;
    }
    $11 = (($$1) + -1)|0;
    $12 = (($0) + ($11)|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = ($13<<24>>24)==(47);
    if ($14) {
     $$1$lcssa = $$1;
     break;
    } else {
     $$1 = $11;
    }
   }
   $15 = (($0) + ($$1$lcssa)|0);
   $$017 = $15;
  }
 }
 return ($$017|0);
}
function _dirname($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$in = 0, $$019 = 0, $$127 = 0, $$226 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   $$019 = 184252;
  } else {
   $2 = HEAP8[$0>>0]|0;
   $3 = ($2<<24>>24)==(0);
   if ($3) {
    $$019 = 184252;
   } else {
    $4 = (_strlen($0)|0);
    $$0$in = $4;
    while(1) {
     $$0 = (($$0$in) + -1)|0;
     $5 = (($0) + ($$0)|0);
     $6 = HEAP8[$5>>0]|0;
     $7 = ($6<<24>>24)==(47);
     if (!($7)) {
      $$127 = $$0;
      break;
     }
     $8 = ($$0|0)==(0);
     if ($8) {
      $$019 = 183224;
      break L1;
     } else {
      $$0$in = $$0;
     }
    }
    while(1) {
     $9 = ($$127|0)==(0);
     if ($9) {
      $$019 = 184252;
      break L1;
     }
     $10 = (($$127) + -1)|0;
     $11 = (($0) + ($10)|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(47);
     if ($13) {
      $$226 = $10;
      break;
     } else {
      $$127 = $10;
     }
    }
    while(1) {
     $14 = ($$226|0)==(0);
     if ($14) {
      $$019 = 183224;
      break L1;
     }
     $15 = (($$226) + -1)|0;
     $16 = (($0) + ($15)|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = ($17<<24>>24)==(47);
     if ($18) {
      $$226 = $15;
     } else {
      break;
     }
    }
    $19 = (($0) + ($$226)|0);
    HEAP8[$19>>0] = 0;
    $$019 = $0;
   }
  }
 } while(0);
 return ($$019|0);
}
function ___emscripten_pthread_data_constructor() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(14844)>>2] = (185652);
 return;
}
function _ffs($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $4 = 0;
 } else {
  $2 = (_a_ctz_l($0)|0);
  $3 = (($2) + 1)|0;
  $4 = $3;
 }
 return ($4|0);
}
function _a_ctz_l($0) {
 $0 = $0|0;
 var $$068 = 0, $$07 = 0, $$09 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $$07 = 32;
 } else {
  $2 = $0 & 1;
  $3 = ($2|0)==(0);
  if ($3) {
   $$068 = $0;$$09 = 0;
   while(1) {
    $4 = (($$09) + 1)|0;
    $5 = $$068 >>> 1;
    $6 = $5 & 1;
    $7 = ($6|0)==(0);
    if ($7) {
     $$068 = $5;$$09 = $4;
    } else {
     $$07 = $4;
     break;
    }
   }
  } else {
   $$07 = 0;
  }
 }
 return ($$07|0);
}
function _ffsl($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $4 = 0;
 } else {
  $2 = (_a_ctz_l_363($0)|0);
  $3 = (($2) + 1)|0;
  $4 = $3;
 }
 return ($4|0);
}
function _a_ctz_l_363($0) {
 $0 = $0|0;
 var $$068 = 0, $$07 = 0, $$09 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $$07 = 32;
 } else {
  $2 = $0 & 1;
  $3 = ($2|0)==(0);
  if ($3) {
   $$068 = $0;$$09 = 0;
   while(1) {
    $4 = (($$09) + 1)|0;
    $5 = $$068 >>> 1;
    $6 = $5 & 1;
    $7 = ($6|0)==(0);
    if ($7) {
     $$068 = $5;$$09 = $4;
    } else {
     $$07 = $4;
     break;
    }
   }
  } else {
   $$07 = 0;
  }
 }
 return ($$07|0);
}
function _ffsll($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $7 = 0;
 } else {
  $5 = (_a_ctz_64($0,$1)|0);
  $6 = (($5) + 1)|0;
  $7 = $6;
 }
 return ($7|0);
}
function _a_ctz_64($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $3 = (_a_ctz_l_364($1)|0);
  $4 = (($3) + 32)|0;
  $$0 = $4;
 } else {
  $5 = (_a_ctz_l_364($0)|0);
  $$0 = $5;
 }
 return ($$0|0);
}
function _a_ctz_l_364($0) {
 $0 = $0|0;
 var $$068 = 0, $$07 = 0, $$09 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $$07 = 32;
 } else {
  $2 = $0 & 1;
  $3 = ($2|0)==(0);
  if ($3) {
   $$068 = $0;$$09 = 0;
   while(1) {
    $4 = (($$09) + 1)|0;
    $5 = $$068 >>> 1;
    $6 = $5 & 1;
    $7 = ($6|0)==(0);
    if ($7) {
     $$068 = $5;$$09 = $4;
    } else {
     $$07 = $4;
     break;
    }
   }
  } else {
   $$07 = 0;
  }
 }
 return ($$07|0);
}
function _fmtmsg($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$1 = 0, $$$181 = 0, $$$282 = 0, $$078 = 0, $$07990 = 0, $$08389 = 0, $$091 = 0, $$1 = 0, $$181 = 0, $$282 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $cond = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 72|0;
 $7 = (_getenv((182318|0))|0);
 (_pthread_setcancelstate(1,($6|0))|0);
 switch ($2|0) {
 case 1:  {
  $$078 = 182351;
  break;
 }
 case 2:  {
  $$078 = 182326;
  break;
 }
 case 3:  {
  $$078 = 182334;
  break;
 }
 case 4:  {
  $$078 = 182344;
  break;
 }
 default: {
  $$078 = 0;
 }
 }
 $8 = $0 & 512;
 $9 = ($8|0)==(0);
 if ($9) {
  $$181 = 0;
 } else {
  $10 = (_open(182665,1,$vararg_buffer)|0);
  $11 = ($10|0)<(0);
  if ($11) {
   $$181 = 4;
  } else {
   $12 = ($1|0)!=(0|0);
   $13 = $12 ? $1 : 189597;
   $14 = $12 ? 182831 : 189597;
   $15 = ($2|0)!=(0);
   $16 = $15 ? $$078 : 189597;
   $17 = ($3|0)!=(0|0);
   $18 = $17 ? $3 : 189597;
   $19 = ($4|0)!=(0|0);
   $20 = $19 ? 182358 : 189597;
   $21 = $19 ? $4 : 189597;
   $22 = $19 ? 184089 : 189597;
   $23 = ($5|0)!=(0|0);
   $24 = $23 ? $5 : 189597;
   HEAP32[$vararg_buffer1>>2] = $13;
   $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr3>>2] = $14;
   $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
   HEAP32[$vararg_ptr4>>2] = $16;
   $vararg_ptr5 = ((($vararg_buffer1)) + 12|0);
   HEAP32[$vararg_ptr5>>2] = $18;
   $vararg_ptr6 = ((($vararg_buffer1)) + 16|0);
   HEAP32[$vararg_ptr6>>2] = $20;
   $vararg_ptr7 = ((($vararg_buffer1)) + 20|0);
   HEAP32[$vararg_ptr7>>2] = $21;
   $vararg_ptr8 = ((($vararg_buffer1)) + 24|0);
   HEAP32[$vararg_ptr8>>2] = $22;
   $vararg_ptr9 = ((($vararg_buffer1)) + 28|0);
   HEAP32[$vararg_ptr9>>2] = $24;
   $25 = (_dprintf($10,182368,$vararg_buffer1)|0);
   $26 = ($25|0)<(1);
   $$ = $26 ? 4 : 0;
   (_close($10)|0);
   $$181 = $$;
  }
 }
 $27 = $0 & 256;
 $28 = ($27|0)==(0);
 if ($28) {
  $$282 = $$181;
 } else {
  $29 = ($7|0)==(0|0);
  L13: do {
   if ($29) {
    $$1 = 0;
   } else {
    $$07990 = 0;$$091 = $7;
    while(1) {
     $30 = HEAP8[$$091>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $$1 = $$07990;
      break L13;
     } else {
      $$08389 = 0;
     }
     while(1) {
      $32 = (23852 + ($$08389<<2)|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (__strcolcmp($33,$$091)|0);
      $35 = ($34|0)==(0);
      if ($35) {
       break;
      }
      $36 = (($$08389) + 1)|0;
      $cond = ($36|0)==(5);
      if ($cond) {
       $$1 = 255;
       break L13;
      } else {
       $$08389 = $36;
      }
     }
     $37 = 1 << $$08389;
     $38 = $37 | $$07990;
     $39 = (_strchr($$091,58)|0);
     $40 = ($39|0)==(0|0);
     $41 = ((($39)) + 1|0);
     if ($40) {
      $$1 = $38;
      break;
     } else {
      $$07990 = $38;$$091 = $41;
     }
    }
   }
  } while(0);
  $42 = ($$1|0)==(0);
  $$$1 = $42 ? 255 : $$1;
  $43 = $$$1 & 1;
  $44 = ($43|0)!=(0);
  $45 = ($1|0)!=(0|0);
  $or$cond = $45 & $44;
  $46 = $or$cond ? $1 : 189597;
  $47 = $or$cond ? 182831 : 189597;
  $48 = $$$1 & 2;
  $49 = ($48|0)!=(0);
  $50 = ($2|0)!=(0);
  $or$cond3 = $50 & $49;
  $51 = $or$cond3 ? $$078 : 189597;
  $52 = $$$1 & 4;
  $53 = ($52|0)!=(0);
  $54 = ($3|0)!=(0|0);
  $or$cond5 = $54 & $53;
  $55 = $or$cond5 ? $3 : 189597;
  $56 = $$$1 & 8;
  $57 = ($56|0)!=(0);
  $58 = ($4|0)!=(0|0);
  $59 = $58 & $57;
  $60 = $59 ? 182358 : 189597;
  $61 = $59 ? $4 : 189597;
  $62 = $59 ? 184089 : 189597;
  $63 = $$$1 & 16;
  $64 = ($63|0)!=(0);
  $65 = ($5|0)!=(0|0);
  $or$cond9 = $65 & $64;
  $66 = $or$cond9 ? $5 : 189597;
  HEAP32[$vararg_buffer10>>2] = $46;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $47;
  $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
  HEAP32[$vararg_ptr14>>2] = $51;
  $vararg_ptr15 = ((($vararg_buffer10)) + 12|0);
  HEAP32[$vararg_ptr15>>2] = $55;
  $vararg_ptr16 = ((($vararg_buffer10)) + 16|0);
  HEAP32[$vararg_ptr16>>2] = $60;
  $vararg_ptr17 = ((($vararg_buffer10)) + 20|0);
  HEAP32[$vararg_ptr17>>2] = $61;
  $vararg_ptr18 = ((($vararg_buffer10)) + 24|0);
  HEAP32[$vararg_ptr18>>2] = $62;
  $vararg_ptr19 = ((($vararg_buffer10)) + 28|0);
  HEAP32[$vararg_ptr19>>2] = $66;
  $67 = (_dprintf(2,182368,$vararg_buffer10)|0);
  $68 = ($67|0)<(1);
  $69 = $68&1;
  $$$181 = $$181 | $69;
  $$282 = $$$181;
 }
 $70 = $$282 & 5;
 $71 = ($70|0)==(5);
 $$$282 = $71 ? -1 : $$282;
 $72 = HEAP32[$6>>2]|0;
 (_pthread_setcancelstate(($72|0),(0|0))|0);
 STACKTOP = sp;return ($$$282|0);
}
function _dprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vdprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function __strcolcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$017 = 0, $$020 = 0, $$021 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = ($2<<24>>24)==(0);
 L1: do {
  if ($3) {
   $$020 = 0;
   label = 4;
  } else {
   $$021 = 0;$$pr = $2;
   while(1) {
    $4 = (($1) + ($$021)|0);
    $5 = HEAP8[$4>>0]|0;
    $6 = ($5<<24>>24)!=(0);
    $7 = ($5<<24>>24)==($$pr<<24>>24);
    $or$cond = $6 & $7;
    if (!($or$cond)) {
     $$017 = 1;
     break L1;
    }
    $8 = (($$021) + 1)|0;
    $9 = (($0) + ($8)|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $$020 = $8;
     label = 4;
     break;
    } else {
     $$021 = $8;$$pr = $10;
    }
   }
  }
 } while(0);
 L5: do {
  if ((label|0) == 4) {
   $12 = (($1) + ($$020)|0);
   $13 = HEAP8[$12>>0]|0;
   switch ($13<<24>>24) {
   case 58: case 0:  {
    break;
   }
   default: {
    $$017 = 1;
    break L5;
   }
   }
   $$017 = 0;
  }
 } while(0);
 return ($$017|0);
}
function _vdprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 36|0);
 HEAP32[$4>>2] = 9;
 $5 = ((($3)) + 44|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($3)) + 48|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($3)) + 60|0);
 HEAP32[$7>>2] = $0;
 $8 = ((($3)) + 75|0);
 HEAP8[$8>>0] = -1;
 $9 = ((($3)) + 76|0);
 HEAP32[$9>>2] = -1;
 $10 = (_vfprintf($3,$1,$2)|0);
 STACKTOP = sp;return ($10|0);
}
function _wrap_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___stdio_write($0,$1,$2)|0);
 return ($3|0);
}
function _forkpty($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$09 = 0, $$110 = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $4 = sp + 288|0;
 $5 = sp + 284|0;
 $6 = sp + 280|0;
 $7 = sp + 272|0;
 $8 = sp + 264|0;
 $9 = sp + 136|0;
 $10 = sp + 8|0;
 $11 = sp;
 HEAP32[$6>>2] = 0;
 $12 = (_openpty($4,$5,$1,$2,$3)|0);
 $13 = ($12|0)<(0);
 do {
  if ($13) {
   $$09 = -1;
  } else {
   (_sigfillset(($9|0))|0);
   (_pthread_sigmask(0,($9|0),($10|0))|0);
   (_pthread_setcancelstate(1,($8|0))|0);
   $14 = (_pipe2($7,524288)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    $18 = (_fork()|0);
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = HEAP32[$4>>2]|0;
     (_close($20)|0);
     $21 = HEAP32[$7>>2]|0;
     (_close($21)|0);
     $22 = HEAP32[$5>>2]|0;
     $23 = (_login_tty($22)|0);
     $24 = ($23|0)==(0);
     $25 = ((($7)) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     if ($24) {
      (_close($26)|0);
      $28 = HEAP32[$8>>2]|0;
      (_pthread_setcancelstate(($28|0),(0|0))|0);
      (_pthread_sigmask(2,($10|0),(0|0))|0);
      $$09 = 0;
      break;
     } else {
      $27 = (___errno_location()|0);
      (_write($26,$27,4)|0);
      __exit(127);
      // unreachable;
     }
    }
    $29 = HEAP32[$5>>2]|0;
    (_close($29)|0);
    $30 = ((($7)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    (_close($31)|0);
    $32 = HEAP32[$7>>2]|0;
    $33 = (_read($32,$6,4)|0);
    $34 = ($33|0)>(0);
    if ($34) {
     (_waitpid(($18|0),($11|0),0)|0);
     $35 = HEAP32[$6>>2]|0;
     $36 = (___errno_location()|0);
     HEAP32[$36>>2] = $35;
     $$0 = -1;
    } else {
     $$0 = $18;
    }
    $37 = HEAP32[$7>>2]|0;
    (_close($37)|0);
    $38 = ($$0|0)>(0);
    $39 = HEAP32[$4>>2]|0;
    if ($38) {
     HEAP32[$0>>2] = $39;
     $$110 = $$0;
    } else {
     $$111 = $$0;$40 = $39;
     label = 12;
    }
   } else {
    $16 = HEAP32[$5>>2]|0;
    (_close($16)|0);
    $17 = HEAP32[$4>>2]|0;
    $$111 = -1;$40 = $17;
    label = 12;
   }
   if ((label|0) == 12) {
    (_close($40)|0);
    $$110 = $$111;
   }
   $41 = HEAP32[$8>>2]|0;
   (_pthread_setcancelstate(($41|0),(0|0))|0);
   (_pthread_sigmask(2,($10|0),(0|0))|0);
   $$09 = $$110;
  }
 } while(0);
 STACKTOP = sp;return ($$09|0);
}
function _openpty($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = sp + 48|0;
 $6 = sp + 44|0;
 $7 = sp + 52|0;
 HEAP32[$5>>2] = 0;
 $8 = (_open(182620,258,$vararg_buffer)|0);
 $9 = ($8|0)<(0);
 do {
  if ($9) {
   $$0 = -1;
  } else {
   (_pthread_setcancelstate(1,($6|0))|0);
   HEAP32[$vararg_buffer1>>2] = $5;
   $10 = (_ioctl($8,1074025521,$vararg_buffer1)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    HEAP32[$vararg_buffer3>>2] = $5;
    $12 = (_ioctl($8,-2147199952,$vararg_buffer3)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = ($2|0)==(0|0);
     $$ = $14 ? $7 : $2;
     $15 = HEAP32[$5>>2]|0;
     HEAP32[$vararg_buffer6>>2] = $15;
     (_snprintf($$,20,182608,$vararg_buffer6)|0);
     $16 = (_open($$,258,$vararg_buffer9)|0);
     $17 = ($16|0)<(0);
     if (!($17)) {
      $18 = ($3|0)==(0|0);
      if (!($18)) {
       (_tcsetattr($16,0,$3)|0);
      }
      $19 = ($4|0)==(0|0);
      if (!($19)) {
       HEAP32[$vararg_buffer11>>2] = $4;
       (_ioctl($16,21524,$vararg_buffer11)|0);
      }
      HEAP32[$0>>2] = $8;
      HEAP32[$1>>2] = $16;
      $20 = HEAP32[$6>>2]|0;
      (_pthread_setcancelstate(($20|0),(0|0))|0);
      $$0 = 0;
      break;
     }
    }
   }
   (_close($8)|0);
   $21 = HEAP32[$6>>2]|0;
   (_pthread_setcancelstate(($21|0),(0|0))|0);
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _pipe2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ($1|0)==(0);
 do {
  if ($2) {
   $3 = (_pipe($0)|0);
   $$1 = $3;
  } else {
   $4 = $0;
   HEAP32[$vararg_buffer>>2] = $4;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $1;
   $5 = (___syscall331(331,($vararg_buffer|0))|0);
   $6 = ($5|0)==(-38);
   if (!($6)) {
    $7 = (___syscall_ret($5)|0);
    $$1 = $7;
    break;
   }
   $8 = (_pipe($0)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = $1 & 524288;
    $11 = ($10|0)==(0);
    if (!($11)) {
     $12 = HEAP32[$0>>2]|0;
     HEAP32[$vararg_buffer2>>2] = $12;
     $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
     HEAP32[$vararg_ptr5>>2] = 2;
     $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
     HEAP32[$vararg_ptr6>>2] = 1;
     (___syscall221(221,($vararg_buffer2|0))|0);
     $13 = ((($0)) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     HEAP32[$vararg_buffer7>>2] = $14;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 2;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = 1;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $15 = $1 & 2048;
    $16 = ($15|0)==(0);
    if ($16) {
     $$1 = 0;
    } else {
     $17 = HEAP32[$0>>2]|0;
     HEAP32[$vararg_buffer12>>2] = $17;
     $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
     HEAP32[$vararg_ptr15>>2] = 4;
     $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
     HEAP32[$vararg_ptr16>>2] = 2048;
     (___syscall221(221,($vararg_buffer12|0))|0);
     $18 = ((($0)) + 4|0);
     $19 = HEAP32[$18>>2]|0;
     HEAP32[$vararg_buffer17>>2] = $19;
     $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
     HEAP32[$vararg_ptr20>>2] = 4;
     $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
     HEAP32[$vararg_ptr21>>2] = 2048;
     (___syscall221(221,($vararg_buffer17|0))|0);
     $$1 = 0;
    }
   } else {
    $$1 = $8;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function _login_tty($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 (_setsid()|0);
 HEAP32[$vararg_buffer>>2] = 0;
 $1 = (_ioctl($0,21518,$vararg_buffer)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  (_dup2($0,0)|0);
  (_dup2($0,1)|0);
  (_dup2($0,2)|0);
  $3 = ($0|0)>(2);
  if ($3) {
   (_close($0)|0);
   $$0 = 0;
  } else {
   $$0 = 0;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall4(4,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall3(3,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _setsid() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (___syscall66(66,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _ioctl($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 16|0;
 HEAP32[$2>>2] = $varargs;
 $arglist_current = HEAP32[$2>>2]|0;
 $3 = $arglist_current;
 $4 = ((0) + 4|0);
 $expanded2 = $4;
 $expanded = (($expanded2) - 1)|0;
 $5 = (($3) + ($expanded))|0;
 $6 = ((0) + 4|0);
 $expanded6 = $6;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $7 = $5 & $expanded4;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $arglist_next = ((($8)) + 4|0);
 HEAP32[$2>>2] = $arglist_next;
 $10 = $9;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $10;
 $11 = (___syscall54(54,($vararg_buffer|0))|0);
 $12 = (___syscall_ret($11)|0);
 STACKTOP = sp;return ($12|0);
}
function _dup2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 while(1) {
  HEAP32[$vararg_buffer>>2] = $0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $1;
  $2 = (___syscall63(63,($vararg_buffer|0))|0);
  $3 = ($2|0)==(-16);
  if (!($3)) {
   break;
  }
 }
 $4 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($4|0);
}
function _pipe($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall42(42,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _tcsetattr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = ($1>>>0)>(2);
 if ($3) {
  $4 = (___errno_location()|0);
  HEAP32[$4>>2] = 22;
  $$0 = -1;
 } else {
  $5 = (($1) + 21506)|0;
  HEAP32[$vararg_buffer>>2] = $2;
  $6 = (_ioctl($0,$5,$vararg_buffer)|0);
  $$0 = $6;
 }
 STACKTOP = sp;return ($$0|0);
}
function _get_current_dir_name() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $0 = sp + 76|0;
 $1 = sp;
 $2 = (_getenv((182417|0))|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  label = 8;
 } else {
  $4 = HEAP8[$2>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if ($5) {
   label = 8;
  } else {
   $6 = (_stat($2,$0)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $8 = (_stat(184252,$1)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     $10 = HEAP32[$0>>2]|0;
     $11 = HEAP32[$1>>2]|0;
     $12 = ($10|0)==($11|0);
     if ($12) {
      $13 = ((($0)) + 72|0);
      $14 = HEAP32[$13>>2]|0;
      $15 = ((($1)) + 72|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = ($14|0)==($16|0);
      if ($17) {
       $18 = (FUNCTION_TABLE_ii[10 & 63]($2)|0);
       $$0 = $18;
      } else {
       label = 8;
      }
     } else {
      label = 8;
     }
    } else {
     label = 8;
    }
   } else {
    label = 8;
   }
  }
 }
 if ((label|0) == 8) {
  $19 = (_getcwd(0,0)|0);
  $$0 = $19;
 }
 STACKTOP = sp;return ($$0|0);
}
function _stat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall195(195,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _getcwd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$06 = 0, $$07 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4112|0);
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $$0 = 4096;$$06 = $2;
  label = 4;
 } else {
  $4 = ($1|0)==(0);
  if ($4) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $$07 = 0;
  } else {
   $$0 = $1;$$06 = $0;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $6 = $$06;
  HEAP32[$vararg_buffer>>2] = $6;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $$0;
  $7 = (___syscall183(183,($vararg_buffer|0))|0);
  $8 = (___syscall_ret($7)|0);
  $9 = ($8|0)<(0);
  if ($9) {
   $$07 = 0;
  } else {
   $10 = ($$06|0)==($2|0);
   if ($10) {
    $11 = (FUNCTION_TABLE_ii[10 & 63]($2)|0);
    $$07 = $11;
   } else {
    $$07 = $$06;
   }
  }
 }
 STACKTOP = sp;return ($$07|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  _memcpy(($3|0),($0|0),($2|0))|0;
  $$0 = $3;
 }
 return ($$0|0);
}
function _getauxval($0) {
 $0 = $0|0;
 var $$06 = 0, $$08 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[(185628)>>2]|0;
 $2 = ($0|0)==(23);
 L1: do {
  if ($2) {
   $5 = HEAP32[(185620)>>2]|0;
   $$06 = $5;
  } else {
   $3 = HEAP32[$1>>2]|0;
   $4 = ($3|0)==(0);
   L4: do {
    if (!($4)) {
     $$08 = $1;$7 = $3;
     while(1) {
      $6 = ($7|0)==($0|0);
      if ($6) {
       break;
      }
      $10 = ((($$08)) + 8|0);
      $11 = HEAP32[$10>>2]|0;
      $12 = ($11|0)==(0);
      if ($12) {
       break L4;
      } else {
       $$08 = $10;$7 = $11;
      }
     }
     $8 = ((($$08)) + 4|0);
     $9 = HEAP32[$8>>2]|0;
     $$06 = $9;
     break L1;
    }
   } while(0);
   $13 = (___errno_location()|0);
   HEAP32[$13>>2] = 2;
   $$06 = 0;
  }
 } while(0);
 return ($$06|0);
}
function _getdomainname($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $2 = sp;
 (_uname($2)|0);
 $3 = ($1|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($2)) + 325|0);
  $5 = (_strlen($4)|0);
  $6 = ($5>>>0)<($1>>>0);
  if ($6) {
   (_strcpy($0,$4)|0);
   $$0 = 0;
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 22;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _uname($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall122(122,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _getgrouplist($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$02731 = 0, $$028$ph38 = 0, $$028$ph38$pn = 0, $$pre$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(1);
 if ($5) {
  $$0 = -1;
 } else {
  HEAP32[$2>>2] = $1;
  HEAP32[$3>>2] = 1;
  _setgrent();
  $6 = (_getgrent()|0);
  $7 = ($6|0)==(0|0);
  L3: do {
   if (!($7)) {
    $$028$ph38$pn = $2;$31 = $6;
    while(1) {
     $$028$ph38 = ((($$028$ph38$pn)) + 4|0);
     $11 = $31;
     L6: while(1) {
      $8 = HEAP32[$3>>2]|0;
      $9 = ($8|0)==(2147483647);
      if ($9) {
       break L3;
      }
      $10 = ((($11)) + 12|0);
      $12 = HEAP32[$10>>2]|0;
      $13 = HEAP32[$12>>2]|0;
      $14 = ($13|0)==(0|0);
      L9: do {
       if (!($14)) {
        $$02731 = 0;$$pre$pre = $13;
        while(1) {
         $15 = (_strcmp($0,$$pre$pre)|0);
         $16 = ($15|0)==(0);
         if ($16) {
          break;
         }
         $17 = (($$02731) + 1)|0;
         $18 = (($12) + ($17<<2)|0);
         $19 = HEAP32[$18>>2]|0;
         $20 = ($19|0)==(0|0);
         if ($20) {
          break L9;
         } else {
          $$02731 = $17;$$pre$pre = $19;
         }
        }
        $23 = (($8) + 1)|0;
        HEAP32[$3>>2] = $23;
        $24 = ($23>>>0)>($4>>>0);
        if (!($24)) {
         break L6;
        }
       }
      } while(0);
      $21 = (_getgrent()|0);
      $22 = ($21|0)==(0|0);
      if ($22) {
       break L3;
      } else {
       $11 = $21;
      }
     }
     $25 = ((($11)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     HEAP32[$$028$ph38>>2] = $26;
     $27 = (_getgrent()|0);
     $28 = ($27|0)==(0|0);
     if ($28) {
      break;
     } else {
      $$028$ph38$pn = $$028$ph38;$31 = $27;
     }
    }
   }
  } while(0);
  _endgrent();
  $29 = HEAP32[$3>>2]|0;
  $30 = ($29>>>0)>($4>>>0);
  $$ = $30 ? -1 : $29;
  $$0 = $$;
 }
 return ($$0|0);
}
function _gethostid() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___getopt_msg($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[1870]|0;
 $5 = (___lctrans_cur($1)|0);
 _flockfile($4);
 $6 = (_fputs($0,$4)|0);
 $7 = ($6|0)>(-1);
 if ($7) {
  $8 = (_strlen($5)|0);
  $9 = (_fwrite($5,$8,1,$4)|0);
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = (_fwrite($2,1,$3,$4)|0);
   $12 = ($11|0)==($3|0);
   if ($12) {
    (_putc(10,$4)|0);
   }
  }
 }
 _funlockfile($4);
 return;
}
function _flockfile($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_ftrylockfile($0)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = ((($0)) + 76|0);
  $4 = ((($0)) + 80|0);
  while(1) {
   $5 = HEAP32[$3>>2]|0;
   $6 = ($5|0)==(0);
   if (!($6)) {
    ___wait(($3|0),($4|0),($5|0),1);
   }
   $7 = (_ftrylockfile($0)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    break;
   }
  }
 }
 return;
}
function _fputs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (_fwrite($0,1,$2,$1)|0);
 $4 = ($3|0)!=($2|0);
 $5 = $4 << 31 >> 31;
 return ($5|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $13 = $11;
  } else {
   ___unlockfile($3);
   $13 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $13 = $9;
 }
 $12 = ($13|0)==($4|0);
 if ($12) {
  $15 = $$;
 } else {
  $14 = (($13>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function _putc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _funlockfile($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(1);
 if ($3) {
  ___unlist_locked_file($0);
  HEAP32[$1>>2] = 0;
  ___unlockfile($0);
 } else {
  $4 = (($2) + -1)|0;
  HEAP32[$1>>2] = $4;
 }
 return;
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = $5;
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $8 = HEAP32[$$pre>>2]|0;
   $9 = ((($5)) + 112|0);
   HEAP32[$9>>2] = $8;
  }
  $10 = HEAP32[$$pre>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $13 = (___pthread_self_608()|0);
   $14 = ((($13)) + 232|0);
   $$sink = $14;
  } else {
   $12 = ((($10)) + 116|0);
   $$sink = $12;
  }
  HEAP32[$$sink>>2] = $7;
 }
 return;
}
function ___pthread_self_608() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 63]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ftrylockfile($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_608()|0);
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($3|0);
 if ($6) {
  $7 = ((($0)) + 68|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(2147483647);
  if ($9) {
   $$0 = -1;
  } else {
   $10 = (($8) + 1)|0;
   HEAP32[$7>>2] = $10;
   $$0 = 0;
  }
 } else {
  $11 = HEAP32[$4>>2]|0;
  $12 = ($11|0)<(0);
  if ($12) {
   HEAP32[$4>>2] = 0;
  }
  $13 = HEAP32[$4>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   _a_cas($4,$3);
   $15 = ((($0)) + 68|0);
   HEAP32[$15>>2] = 1;
   $16 = ((($0)) + 112|0);
   HEAP32[$16>>2] = 0;
   $17 = ((($1)) + 232|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($0)) + 116|0);
   HEAP32[$19>>2] = $18;
   $20 = ($18|0)==(0|0);
   if (!($20)) {
    $21 = ((($18)) + 112|0);
    HEAP32[$21>>2] = $0;
   }
   HEAP32[$17>>2] = $0;
   $$0 = 0;
  } else {
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _a_cas($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[$0>>2] = $1;
 }
 return;
}
function _getopt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$049 = 0, $$050 = 0, $$051 = 0, $$1 = 0, $$pre = 0, $$pre52 = 0, $$pre53 = 0, $$pre54 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 $5 = HEAP32[1781]|0;
 $6 = ($5|0)==(0);
 $7 = HEAP32[46428]|0;
 $8 = ($7|0)!=(0);
 $or$cond = $6 | $8;
 if ($or$cond) {
  HEAP32[46428] = 0;
  HEAP32[46429] = 0;
  HEAP32[1781] = 1;
  $10 = 1;
 } else {
  $10 = $5;
 }
 $9 = ($10|0)<($0|0);
 L4: do {
  if ($9) {
   $11 = (($1) + ($10<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   $14 = $12;
   if ($13) {
    $$0 = -1;
   } else {
    $15 = HEAP8[$12>>0]|0;
    $16 = ($15<<24>>24)==(45);
    if (!($16)) {
     $17 = HEAP8[$2>>0]|0;
     $18 = ($17<<24>>24)==(45);
     if (!($18)) {
      $$0 = -1;
      break;
     }
     $19 = (($10) + 1)|0;
     HEAP32[1781] = $19;
     HEAP32[46430] = $14;
     $$0 = 1;
     break;
    }
    $20 = ((($12)) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    switch ($21<<24>>24) {
    case 0:  {
     $$0 = -1;
     break L4;
     break;
    }
    case 45:  {
     $22 = ((($12)) + 2|0);
     $23 = HEAP8[$22>>0]|0;
     $24 = ($23<<24>>24)==(0);
     if ($24) {
      $25 = (($10) + 1)|0;
      HEAP32[1781] = $25;
      $$0 = -1;
      break L4;
     }
     break;
    }
    default: {
    }
    }
    $26 = HEAP32[46429]|0;
    $27 = ($26|0)==(0);
    if ($27) {
     HEAP32[46429] = 1;
     $29 = 1;
    } else {
     $29 = $26;
    }
    $28 = (($12) + ($29)|0);
    $30 = (_mbtowc($3,$28,4)|0);
    $31 = ($30|0)<(0);
    if ($31) {
     HEAP32[$3>>2] = 65533;
     $$050 = 1;$37 = 65533;
    } else {
     $$pre = HEAP32[$3>>2]|0;
     $$050 = $30;$37 = $$pre;
    }
    $32 = HEAP32[1781]|0;
    $33 = (($1) + ($32<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = HEAP32[46429]|0;
    $36 = (($34) + ($35)|0);
    HEAP32[46431] = $37;
    $38 = (($35) + ($$050))|0;
    HEAP32[46429] = $38;
    $39 = (($34) + ($38)|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = ($40<<24>>24)==(0);
    if ($41) {
     $42 = (($32) + 1)|0;
     HEAP32[1781] = $42;
     HEAP32[46429] = 0;
    }
    $43 = HEAP8[$2>>0]|0;
    switch ($43<<24>>24) {
    case 43: case 45:  {
     $44 = ((($2)) + 1|0);
     $$049 = $44;
     break;
    }
    default: {
     $$049 = $2;
    }
    }
    HEAP32[$4>>2] = 0;
    $$051 = 0;
    while(1) {
     $45 = (($$049) + ($$051)|0);
     $46 = (_mbtowc($4,$45,4)|0);
     $47 = ($46|0)>(1);
     $$ = $47 ? $46 : 1;
     $$1 = (($$) + ($$051))|0;
     $48 = ($46|0)==(0);
     $$pre52 = HEAP32[$4>>2]|0;
     $$pre53 = HEAP32[$3>>2]|0;
     $49 = ($$pre52|0)==($$pre53|0);
     if ($48) {
      label = 23;
      break;
     }
     if ($49) {
      $79 = $$pre52;
      break;
     } else {
      $$051 = $$1;
     }
    }
    if ((label|0) == 23) {
     if ($49) {
      $79 = $$pre53;
     } else {
      $50 = HEAP8[$$049>>0]|0;
      $51 = ($50<<24>>24)!=(58);
      $52 = HEAP32[1782]|0;
      $53 = ($52|0)!=(0);
      $or$cond3 = $51 & $53;
      if (!($or$cond3)) {
       $$0 = 63;
       break;
      }
      $54 = HEAP32[$1>>2]|0;
      ___getopt_msg($54,182514,$36,$$050);
      $$0 = 63;
      break;
     }
    }
    $55 = (($$049) + ($$1)|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = ($56<<24>>24)==(58);
    if ($57) {
     $58 = (($$1) + 1)|0;
     $59 = (($$049) + ($58)|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = ($60<<24>>24)==(58);
     do {
      if ($61) {
       HEAP32[46430] = 0;
       $$pre54 = HEAP8[$59>>0]|0;
       $70 = ($$pre54<<24>>24)!=(58);
       $71 = HEAP32[46429]|0;
       $72 = ($71|0)!=(0);
       $or$cond5 = $70 | $72;
       if ($or$cond5) {
        $78 = $71;
       } else {
        $$0 = $79;
        break L4;
       }
      } else {
       $62 = HEAP32[1781]|0;
       $63 = ($62|0)<($0|0);
       if ($63) {
        $64 = HEAP32[46429]|0;
        $78 = $64;
        break;
       }
       $65 = HEAP8[$$049>>0]|0;
       $66 = ($65<<24>>24)==(58);
       if ($66) {
        $$0 = 58;
        break L4;
       }
       $67 = HEAP32[1782]|0;
       $68 = ($67|0)==(0);
       if ($68) {
        $$0 = 63;
        break L4;
       }
       $69 = HEAP32[$1>>2]|0;
       ___getopt_msg($69,182458,$36,$$050);
       $$0 = 63;
       break L4;
      }
     } while(0);
     $73 = HEAP32[1781]|0;
     $74 = (($73) + 1)|0;
     HEAP32[1781] = $74;
     $75 = (($1) + ($73<<2)|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (($76) + ($78)|0);
     HEAP32[46430] = $77;
     HEAP32[46429] = 0;
     $$0 = $79;
    } else {
     $$0 = $79;
    }
   }
  } else {
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _mbtowc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1|0)==(0|0);
 L1: do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ($2|0)==(0);
   do {
    if (!($5)) {
     $6 = ($0|0)==(0|0);
     $$ = $6 ? $3 : $0;
     $7 = HEAP8[$1>>0]|0;
     $8 = ($7<<24>>24)>(-1);
     if ($8) {
      $9 = $7&255;
      HEAP32[$$>>2] = $9;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break L1;
     }
     $12 = (___pthread_self_423()|0);
     $13 = ((($12)) + 188|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(0|0);
     $17 = HEAP8[$1>>0]|0;
     if ($16) {
      $18 = $17 << 24 >> 24;
      $19 = $18 & 57343;
      HEAP32[$$>>2] = $19;
      $$0 = 1;
      break L1;
     }
     $20 = $17&255;
     $21 = (($20) + -194)|0;
     $22 = ($21>>>0)>(50);
     if (!($22)) {
      $23 = ((($1)) + 1|0);
      $24 = (7132 + ($21<<2)|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($2>>>0)<(4);
      if ($26) {
       $27 = ($2*6)|0;
       $28 = (($27) + -6)|0;
       $29 = -2147483648 >>> $28;
       $30 = $25 & $29;
       $31 = ($30|0)==(0);
       if (!($31)) {
        break;
       }
      }
      $32 = HEAP8[$23>>0]|0;
      $33 = $32&255;
      $34 = $33 >>> 3;
      $35 = (($34) + -16)|0;
      $36 = $25 >> 26;
      $37 = (($34) + ($36))|0;
      $38 = $35 | $37;
      $39 = ($38>>>0)>(7);
      if (!($39)) {
       $40 = $25 << 6;
       $41 = (($33) + -128)|0;
       $42 = $41 | $40;
       $43 = ($42|0)<(0);
       if (!($43)) {
        HEAP32[$$>>2] = $42;
        $$0 = 2;
        break L1;
       }
       $44 = ((($1)) + 2|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = $45&255;
       $47 = (($46) + -128)|0;
       $48 = ($47>>>0)>(63);
       if (!($48)) {
        $49 = $42 << 6;
        $50 = $47 | $49;
        $51 = ($50|0)<(0);
        if (!($51)) {
         HEAP32[$$>>2] = $50;
         $$0 = 3;
         break L1;
        }
        $52 = ((($1)) + 3|0);
        $53 = HEAP8[$52>>0]|0;
        $54 = $53&255;
        $55 = (($54) + -128)|0;
        $56 = ($55>>>0)>(63);
        if (!($56)) {
         $57 = $50 << 6;
         $58 = $55 | $57;
         HEAP32[$$>>2] = $58;
         $$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while(0);
   $59 = (___errno_location()|0);
   HEAP32[$59>>2] = 84;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___pthread_self_423() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _getopt_long($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (___getopt_long($0,$1,$2,$3,$4,0)|0);
 return ($5|0);
}
function ___getopt_long($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0454957 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre53 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond56 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = HEAP32[1781]|0;
 $7 = ($6|0)==(0);
 $8 = HEAP32[46428]|0;
 $9 = ($8|0)!=(0);
 $or$cond = $7 | $9;
 if ($or$cond) {
  HEAP32[46428] = 0;
  HEAP32[46429] = 0;
  HEAP32[1781] = 1;
  $11 = 1;
 } else {
  $11 = $6;
 }
 $10 = ($11|0)<($0|0);
 L4: do {
  if ($10) {
   $12 = (($1) + ($11<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   if ($14) {
    $$1 = -1;
   } else {
    $15 = HEAP8[$2>>0]|0;
    switch ($15<<24>>24) {
    case 45: case 43:  {
     $25 = (___getopt_long_core($0,$1,$2,$3,$4,$5)|0);
     $$1 = $25;
     break L4;
     break;
    }
    default: {
     $$0454957 = $11;$17 = $13;
    }
    }
    while(1) {
     $16 = HEAP8[$17>>0]|0;
     $18 = ($16<<24>>24)==(45);
     if ($18) {
      $19 = ((($17)) + 1|0);
      $20 = HEAP8[$19>>0]|0;
      $21 = ($20<<24>>24)==(0);
      if (!($21)) {
       break;
      }
     }
     $22 = (($$0454957) + 1)|0;
     $23 = ($22|0)<($0|0);
     if (!($23)) {
      $$1 = -1;
      break L4;
     }
     $$phi$trans$insert = (($1) + ($22<<2)|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     $24 = ($$pre|0)==(0|0);
     if ($24) {
      $$1 = -1;
      break L4;
     } else {
      $$0454957 = $22;$17 = $$pre;
     }
    }
    HEAP32[1781] = $$0454957;
    $26 = (___getopt_long_core($0,$1,$2,$3,$4,$5)|0);
    $27 = ($$0454957|0)>($11|0);
    if ($27) {
     $28 = HEAP32[1781]|0;
     $29 = (($28) - ($$0454957))|0;
     $30 = ($29|0)>(0);
     if ($30) {
      $31 = (($28) + -1)|0;
      _permute($1,$11,$31);
      $exitcond56 = ($29|0)==(1);
      if (!($exitcond56)) {
       $34 = 1;
       while(1) {
        $$pre53 = HEAP32[1781]|0;
        $32 = (($$pre53) + -1)|0;
        _permute($1,$11,$32);
        $33 = (($34) + 1)|0;
        $exitcond = ($33|0)==($29|0);
        if ($exitcond) {
         break;
        } else {
         $34 = $33;
        }
       }
      }
     }
     $35 = (($29) + ($11))|0;
     HEAP32[1781] = $35;
     $$1 = $26;
    } else {
     $$1 = $26;
    }
   }
  } else {
   $$1 = -1;
  }
 } while(0);
 return ($$1|0);
}
function ___getopt_long_core($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$083105 = 0, $$086111 = 0, $$089110 = 0, $$092108 = 0, $$185$lcssa = 0, $$185104 = 0, $$18799 = 0, $$19098 = 0, $$194 = 0, $$288 = 0, $$291 = 0, $$291126 = 0, $$95 = 0, $$phi$trans$insert = 0, $$pr = 0, $$pr$lcssa = 0, $$pr102 = 0, $$pre = 0, $$pre123 = 0;
 var $$pre124 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $or$cond = 0, $or$cond101 = 0, $or$cond101103 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[46430] = 0;
 $6 = ($3|0)==(0|0);
 L1: do {
  if ($6) {
   label = 34;
  } else {
   $7 = HEAP32[1781]|0;
   $8 = (($1) + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==(45);
   if ($11) {
    $12 = ($5|0)==(0);
    $$phi$trans$insert = ((($9)) + 1|0);
    $$pre = HEAP8[$$phi$trans$insert>>0]|0;
    if ($12) {
     $14 = ($$pre<<24>>24)==(45);
     if (!($14)) {
      label = 34;
      break;
     }
     $15 = ((($9)) + 2|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(0);
     if ($17) {
      label = 34;
      break;
     } else {
      $29 = 45;
     }
    } else {
     $13 = ($$pre<<24>>24)==(0);
     if ($13) {
      label = 34;
      break;
     } else {
      $29 = $$pre;
     }
    }
    $18 = HEAP8[$2>>0]|0;
    $19 = ($18<<24>>24)==(43);
    $20 = ($18<<24>>24)==(45);
    $$ = $19 | $20;
    $21 = $$&1;
    $22 = (($2) + ($21)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = ($23<<24>>24)==(58);
    $25 = HEAP32[$3>>2]|0;
    $26 = ($25|0)==(0|0);
    if ($26) {
     $$291126 = 0;
    } else {
     $27 = ((($9)) + 1|0);
     $28 = ($29<<24>>24)==(45);
     $30 = ((($9)) + 2|0);
     $$95 = $28 ? $30 : $27;
     $$pr102 = HEAP8[$$95>>0]|0;
     $$086111 = 0;$$089110 = 0;$$092108 = 0;$32 = $25;
     L11: while(1) {
      $31 = HEAP8[$32>>0]|0;
      $33 = ($31<<24>>24)!=(0);
      $34 = ($31<<24>>24)==($$pr102<<24>>24);
      $or$cond101103 = $33 & $34;
      if ($or$cond101103) {
       $$083105 = $32;$$185104 = $$95;
       while(1) {
        $35 = ((($$083105)) + 1|0);
        $36 = ((($$185104)) + 1|0);
        $37 = HEAP8[$35>>0]|0;
        $38 = ($37<<24>>24)!=(0);
        $$pr = HEAP8[$36>>0]|0;
        $39 = ($37<<24>>24)==($$pr<<24>>24);
        $or$cond101 = $38 & $39;
        if ($or$cond101) {
         $$083105 = $35;$$185104 = $36;
        } else {
         $$185$lcssa = $36;$$pr$lcssa = $$pr;$41 = $37;
         break;
        }
       }
      } else {
       $$185$lcssa = $$95;$$pr$lcssa = $$pr102;$41 = $31;
      }
      switch ($$pr$lcssa<<24>>24) {
      case 61: case 0:  {
       $40 = ($41<<24>>24)==(0);
       $42 = (($$089110) + 1)|0;
       if ($40) {
        $$288 = $$092108;$$291 = 1;
        break L11;
       } else {
        $$18799 = $$092108;$$19098 = $42;
       }
       break;
      }
      default: {
       $$18799 = $$086111;$$19098 = $$089110;
      }
      }
      $43 = (($$092108) + 1)|0;
      $44 = (($3) + ($43<<4)|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$288 = $$18799;$$291 = $$19098;
       break;
      } else {
       $$086111 = $$18799;$$089110 = $$19098;$$092108 = $43;$32 = $45;
      }
     }
     $47 = ($$291|0)==(1);
     if ($47) {
      $48 = (($7) + 1)|0;
      HEAP32[1781] = $48;
      $49 = (($3) + ($$288<<4)|0);
      $50 = (((($3) + ($$288<<4)|0)) + 12|0);
      $51 = HEAP32[$50>>2]|0;
      HEAP32[46431] = $51;
      $52 = HEAP8[$$185$lcssa>>0]|0;
      $53 = ($52<<24>>24)==(61);
      $54 = (((($3) + ($$288<<4)|0)) + 4|0);
      $55 = HEAP32[$54>>2]|0;
      do {
       if ($53) {
        $56 = ($55|0)==(0);
        if (!($56)) {
         $63 = ((($$185$lcssa)) + 1|0);
         HEAP32[46430] = $63;
         break;
        }
        $57 = $24 ^ 1;
        $58 = HEAP32[1782]|0;
        $59 = ($58|0)!=(0);
        $or$cond = $59 & $57;
        if (!($or$cond)) {
         $$194 = 63;
         break L1;
        }
        $60 = HEAP32[$1>>2]|0;
        $61 = HEAP32[$49>>2]|0;
        $62 = (_strlen($61)|0);
        ___getopt_msg($60,182421,$61,$62);
        $$194 = 63;
        break L1;
       } else {
        $64 = ($55|0)==(1);
        if ($64) {
         $65 = (($1) + ($48<<2)|0);
         $66 = HEAP32[$65>>2]|0;
         HEAP32[46430] = $66;
         $67 = ($66|0)==(0|0);
         if (!($67)) {
          $73 = (($7) + 2)|0;
          HEAP32[1781] = $73;
          break;
         }
         if ($24) {
          $$194 = 58;
          break L1;
         }
         $68 = HEAP32[1782]|0;
         $69 = ($68|0)==(0);
         if ($69) {
          $$194 = 63;
          break L1;
         }
         $70 = HEAP32[$1>>2]|0;
         $71 = HEAP32[$49>>2]|0;
         $72 = (_strlen($71)|0);
         ___getopt_msg($70,182458,$71,$72);
         $$194 = 63;
         break L1;
        }
       }
      } while(0);
      $74 = ($4|0)==(0|0);
      if ($74) {
       $78 = $51;
      } else {
       HEAP32[$4>>2] = $$288;
       $$pre124 = HEAP32[$50>>2]|0;
       $78 = $$pre124;
      }
      $75 = (((($3) + ($$288<<4)|0)) + 8|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($76|0)==(0|0);
      if ($77) {
       $$194 = $78;
       break;
      }
      HEAP32[$76>>2] = $78;
      $$194 = 0;
      break;
     } else {
      $$291126 = $$291;
     }
    }
    $79 = ($29<<24>>24)==(45);
    if ($79) {
     $80 = $24 ^ 1;
     $81 = HEAP32[1782]|0;
     $82 = ($81|0)!=(0);
     $or$cond3 = $82 & $80;
     $83 = ((($9)) + 2|0);
     if ($or$cond3) {
      $84 = ($$291126|0)!=(0);
      $85 = $84 ? 182490 : 182514;
      $86 = HEAP32[$1>>2]|0;
      $87 = (_strlen($83)|0);
      ___getopt_msg($86,$85,$83,$87);
      $$pre123 = HEAP32[1781]|0;
      $89 = $$pre123;
     } else {
      $89 = $7;
     }
     $88 = (($89) + 1)|0;
     HEAP32[1781] = $88;
     $$194 = 63;
    } else {
     label = 34;
    }
   } else {
    label = 34;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $90 = (_getopt($0,$1,$2)|0);
  $$194 = $90;
 }
 return ($$194|0);
}
function _permute($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$018 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (($0) + ($2<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)>($1|0);
 if ($5) {
  $$018 = $2;
  while(1) {
   $6 = (($$018) + -1)|0;
   $7 = (($0) + ($6<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($0) + ($$018<<2)|0);
   HEAP32[$9>>2] = $8;
   $10 = ($6|0)>($1|0);
   if ($10) {
    $$018 = $6;
   } else {
    break;
   }
  }
 }
 $11 = (($0) + ($1<<2)|0);
 HEAP32[$11>>2] = $4;
 return;
}
function _getopt_long_only($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (___getopt_long($0,$1,$2,$3,$4,1)|0);
 return ($5|0);
}
function _getpriority($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $2 = (___syscall96(96,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 $5 = (20 - ($3))|0;
 $$0 = $4 ? $3 : $5;
 STACKTOP = sp;return ($$0|0);
}
function _getresgid($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $5;
 $6 = (___syscall211(211,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _getresuid($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $5;
 $6 = (___syscall209(209,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _getrlimit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 24|0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = 0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 0;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $4 = (___syscall340(340,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $1;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)==(-1);
  $14 = ($12|0)==(-1);
  $15 = $13 & $14;
  if ($15) {
   $16 = $1;
   $17 = $16;
   HEAP32[$17>>2] = -1;
   $18 = (($16) + 4)|0;
   $19 = $18;
   HEAP32[$19>>2] = -1;
  }
  $20 = ((($1)) + 8|0);
  $21 = $20;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = ($23|0)==(-1);
  $28 = ($26|0)==(-1);
  $29 = $27 & $28;
  if ($29) {
   $30 = $20;
   $31 = $30;
   HEAP32[$31>>2] = -1;
   $32 = (($30) + 4)|0;
   $33 = $32;
   HEAP32[$33>>2] = -1;
   $$0 = 0;
  } else {
   $$0 = 0;
  }
 } else {
  $34 = (___errno_location()|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)==(38);
  if ($36) {
   $37 = $2;
   HEAP32[$vararg_buffer4>>2] = $0;
   $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $37;
   $38 = (___syscall191(191,($vararg_buffer4|0))|0);
   $39 = (___syscall_ret($38)|0);
   $40 = ($39|0)<(0);
   if ($40) {
    $$0 = -1;
   } else {
    $41 = HEAP32[$2>>2]|0;
    $42 = ($41|0)==(-1);
    $43 = $42 ? -1 : $41;
    $44 = $42 ? -1 : 0;
    $45 = $1;
    $46 = $45;
    HEAP32[$46>>2] = $43;
    $47 = (($45) + 4)|0;
    $48 = $47;
    HEAP32[$48>>2] = $44;
    $49 = ((($2)) + 4|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($50|0)==(-1);
    $52 = $51 ? -1 : $50;
    $53 = $51 ? -1 : 0;
    $54 = ((($1)) + 8|0);
    $55 = $54;
    $56 = $55;
    HEAP32[$56>>2] = $52;
    $57 = (($55) + 4)|0;
    $58 = $57;
    HEAP32[$58>>2] = $53;
    if ($42) {
     $59 = $1;
     $60 = $59;
     HEAP32[$60>>2] = -1;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = -1;
    }
    if ($51) {
     $63 = $54;
     $64 = $63;
     HEAP32[$64>>2] = -1;
     $65 = (($63) + 4)|0;
     $66 = $65;
     HEAP32[$66>>2] = -1;
     $$0 = 0;
    } else {
     $$0 = 0;
    }
   }
  } else {
   $$0 = $5;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _getrusage($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 $3 = (___syscall77(77,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _getsubopt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$03134 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = 0;
 $4 = (_strchr($3,44)|0);
 HEAP32[$0>>2] = $4;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (_strlen($3)|0);
  $8 = (($3) + ($7)|0);
  HEAP32[$0>>2] = $8;
 } else {
  $6 = ((($4)) + 1|0);
  HEAP32[$0>>2] = $6;
  HEAP8[$4>>0] = 0;
 }
 $9 = HEAP32[$1>>2]|0;
 $10 = ($9|0)==(0|0);
 L5: do {
  if ($10) {
   $$2 = -1;
  } else {
   $$03134 = 0;$11 = $9;
   L6: while(1) {
    $12 = (_strlen($11)|0);
    $13 = (_strncmp($11,$3,$12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $15 = (($3) + ($12)|0);
     $16 = HEAP8[$15>>0]|0;
     switch ($16<<24>>24) {
     case 0:  {
      $$2 = $$03134;
      break L5;
      break;
     }
     case 61:  {
      break L6;
      break;
     }
     default: {
     }
     }
    }
    $18 = (($$03134) + 1)|0;
    $19 = (($1) + ($18<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0|0);
    if ($21) {
     $$2 = -1;
     break L5;
    } else {
     $$03134 = $18;$11 = $20;
    }
   }
   $17 = ((($15)) + 1|0);
   HEAP32[$2>>2] = $17;
   $$2 = $$03134;
  }
 } while(0);
 return ($$2|0);
}
function _initgroups($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $2 = sp + 8|0;
 $3 = sp;
 HEAP32[$3>>2] = 32;
 $4 = (_getgrouplist($0,$1,$2,$3)|0);
 $5 = ($4|0)<(0);
 if ($5) {
  $$0 = -1;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = (_setgroups(($6|0),($2|0))|0);
  $$0 = $7;
 }
 STACKTOP = sp;return ($$0|0);
}
function _issetugid() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(185620)>>2]|0;
 return ($0|0);
}
function _lockf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 24|0;
 HEAP16[$3>>1] = 1;
 $4 = ((($3)) + 2|0);
 HEAP16[$4>>1] = 1;
 $5 = ((($3)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($3)) + 8|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($3)) + 12|0);
 HEAP32[$7>>2] = 0;
 switch ($1|0) {
 case 3:  {
  HEAP16[$3>>1] = 0;
  HEAP32[$vararg_buffer>>2] = $3;
  $8 = (_fcntl($0,12,$vararg_buffer)|0);
  $9 = ($8|0)<(0);
  if ($9) {
   $$0 = -1;
  } else {
   $10 = HEAP16[$3>>1]|0;
   $11 = ($10<<16>>16)==(2);
   if ($11) {
    $$0 = 0;
   } else {
    $12 = HEAP32[$7>>2]|0;
    $13 = (_getpid()|0);
    $14 = ($12|0)==($13|0);
    if ($14) {
     $$0 = 0;
    } else {
     $15 = (___errno_location()|0);
     HEAP32[$15>>2] = 13;
     $$0 = -1;
    }
   }
  }
  break;
 }
 case 0:  {
  HEAP16[$3>>1] = 2;
  label = 7;
  break;
 }
 case 2:  {
  label = 7;
  break;
 }
 case 1:  {
  HEAP32[$vararg_buffer4>>2] = $3;
  $17 = (_fcntl($0,14,$vararg_buffer4)|0);
  $$0 = $17;
  break;
 }
 default: {
  $18 = (___errno_location()|0);
  HEAP32[$18>>2] = 22;
  $$0 = -1;
 }
 }
 if ((label|0) == 7) {
  HEAP32[$vararg_buffer1>>2] = $3;
  $16 = (_fcntl($0,13,$vararg_buffer1)|0);
  $$0 = $16;
 }
 STACKTOP = sp;return ($$0|0);
}
function _getpid() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (___syscall20(20,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _setmntent($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_fopen($0,$1)|0);
 return ($2|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(183604,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $0;
  $8 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $9 = (___syscall5(5,($vararg_buffer|0))|0);
  $10 = (___syscall_ret($9)|0);
  $11 = ($10|0)<(0);
  if ($11) {
   $$0 = 0;
  } else {
   $12 = $6 & 524288;
   $13 = ($12|0)==(0);
   if (!($13)) {
    HEAP32[$vararg_buffer3>>2] = $10;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $14 = (___fdopen($10,$1)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    HEAP32[$vararg_buffer8>>2] = $10;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $14;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)!=(114);
 $$ = $4&1;
 $$0 = $2 ? $$ : 2;
 $5 = (_strchr($0,120)|0);
 $6 = ($5|0)==(0|0);
 $7 = $$0 | 128;
 $$0$ = $6 ? $$0 : $7;
 $8 = (_strchr($0,101)|0);
 $9 = ($8|0)==(0|0);
 $10 = $$0$ | 524288;
 $$2 = $9 ? $$0$ : $10;
 $11 = ($3<<24>>24)==(114);
 $12 = $$2 | 64;
 $$2$ = $11 ? $$2 : $12;
 $13 = ($3<<24>>24)==(119);
 $14 = $$2$ | 512;
 $$4 = $13 ? $14 : $$2$;
 $15 = ($3<<24>>24)==(97);
 $16 = $$4 | 1024;
 $$$4 = $15 ? $16 : $$4;
 return ($$$4|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre31 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(183604,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1156)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $16 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $16 = $$pre;
   }
   $15 = ($16<<24>>24)==(97);
   if ($15) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre31 = HEAP32[$7>>2]|0;
    $29 = $$pre31;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 132|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    $31 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $31;
    $32 = (___syscall54(54,($vararg_buffer12|0))|0);
    $33 = ($32|0)==(0);
    if ($33) {
     HEAP8[$27>>0] = 10;
    }
   }
   $34 = ((($7)) + 32|0);
   HEAP32[$34>>2] = 4;
   $35 = ((($7)) + 36|0);
   HEAP32[$35>>2] = 2;
   $36 = ((($7)) + 40|0);
   HEAP32[$36>>2] = 3;
   $37 = ((($7)) + 12|0);
   HEAP32[$37>>2] = 1;
   $38 = HEAP32[(185616)>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = ((($7)) + 76|0);
    HEAP32[$40>>2] = -1;
   }
   $41 = (___ofl_add($7)|0);
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((185924|0));
 return (185932|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((185924|0));
 return;
}
function _endmntent($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  (_fclose($0)|0);
 }
 return 1;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $30 = $4;
 } else {
  $30 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = $15;
  if (!($16)) {
   $18 = ((($15)) + 52|0);
   HEAP32[$18>>2] = $12;
  }
  $19 = HEAP32[$8>>2]|0;
  $20 = ($19|0)==($0|0);
  if ($20) {
   HEAP32[$8>>2] = $17;
  }
  ___ofl_unlock();
 }
 $21 = (_fflush($0)|0);
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 63]($0)|0);
 $25 = $24 | $21;
 $26 = ((($0)) + 92|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 if ($7) {
  $29 = ($30|0)==(0);
  if (!($29)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($25|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[1968]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[1968]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 63]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 63]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _getmntent_r($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 48|0;
 $5 = ((($1)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($1)) + 20|0);
 HEAP32[$6>>2] = 0;
 (_fgets($2,$3,$0)|0);
 $7 = (_feof($0)|0);
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   $9 = ((($4)) + 4|0);
   $10 = ((($4)) + 8|0);
   $11 = ((($4)) + 12|0);
   $12 = ((($4)) + 16|0);
   $13 = ((($4)) + 20|0);
   $14 = ((($4)) + 24|0);
   $15 = ((($4)) + 28|0);
   while(1) {
    $16 = (_ferror($0)|0);
    $17 = ($16|0)==(0);
    if (!($17)) {
     $$0 = 0;
     break L1;
    }
    $18 = (_strchr($2,10)|0);
    $19 = ($18|0)==(0|0);
    if ($19) {
     label = 5;
     break;
    }
    HEAP32[$vararg_buffer1>>2] = $4;
    $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr3>>2] = $9;
    $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
    HEAP32[$vararg_ptr4>>2] = $10;
    $vararg_ptr5 = ((($vararg_buffer1)) + 12|0);
    HEAP32[$vararg_ptr5>>2] = $11;
    $vararg_ptr6 = ((($vararg_buffer1)) + 16|0);
    HEAP32[$vararg_ptr6>>2] = $12;
    $vararg_ptr7 = ((($vararg_buffer1)) + 20|0);
    HEAP32[$vararg_ptr7>>2] = $13;
    $vararg_ptr8 = ((($vararg_buffer1)) + 24|0);
    HEAP32[$vararg_ptr8>>2] = $14;
    $vararg_ptr9 = ((($vararg_buffer1)) + 28|0);
    HEAP32[$vararg_ptr9>>2] = $15;
    $vararg_ptr10 = ((($vararg_buffer1)) + 32|0);
    HEAP32[$vararg_ptr10>>2] = $5;
    $vararg_ptr11 = ((($vararg_buffer1)) + 36|0);
    HEAP32[$vararg_ptr11>>2] = $6;
    $21 = (_sscanf($2,182550,$vararg_buffer1)|0);
    $22 = ($21|0)<(2);
    if (!($22)) {
     $23 = HEAP32[$4>>2]|0;
     $24 = (($2) + ($23)|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = ($25<<24>>24)==(35);
     if (!($26)) {
      label = 9;
      break;
     }
    }
    (_fgets($2,$3,$0)|0);
    $27 = (_feof($0)|0);
    $28 = ($27|0)==(0);
    if (!($28)) {
     $$0 = 0;
     break L1;
    }
   }
   if ((label|0) == 5) {
    (_fscanf($0,182538,$vararg_buffer)|0);
    $20 = (___errno_location()|0);
    HEAP32[$20>>2] = 34;
    $$0 = 0;
    break;
   }
   else if ((label|0) == 9) {
    $29 = HEAP32[$9>>2]|0;
    $30 = (($2) + ($29)|0);
    HEAP8[$30>>0] = 0;
    $31 = HEAP32[$11>>2]|0;
    $32 = (($2) + ($31)|0);
    HEAP8[$32>>0] = 0;
    $33 = HEAP32[$13>>2]|0;
    $34 = (($2) + ($33)|0);
    HEAP8[$34>>0] = 0;
    $35 = HEAP32[$15>>2]|0;
    $36 = (($2) + ($35)|0);
    HEAP8[$36>>0] = 0;
    HEAP32[$1>>2] = $24;
    $37 = HEAP32[$10>>2]|0;
    $38 = (($2) + ($37)|0);
    $39 = ((($1)) + 4|0);
    HEAP32[$39>>2] = $38;
    $40 = HEAP32[$12>>2]|0;
    $41 = (($2) + ($40)|0);
    $42 = ((($1)) + 8|0);
    HEAP32[$42>>2] = $41;
    $43 = HEAP32[$14>>2]|0;
    $44 = (($2) + ($43)|0);
    $45 = ((($1)) + 12|0);
    HEAP32[$45>>2] = $44;
    $$0 = $1;
    break;
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fgets($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$06266 = 0, $$063 = 0, $$064 = 0, $$1 = 0, $$old2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $6 = (___lockfile($2)|0);
  $16 = $6;
 } else {
  $16 = 0;
 }
 $7 = (($1) + -1)|0;
 $8 = ($1|0)<(2);
 if ($8) {
  $9 = ((($2)) + 74|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = (($11) + 255)|0;
  $13 = $12 | $11;
  $14 = $13&255;
  HEAP8[$9>>0] = $14;
  $15 = ($16|0)==(0);
  if (!($15)) {
   ___unlockfile($2);
  }
  $17 = ($7|0)==(0);
  if ($17) {
   HEAP8[$0>>0] = 0;
   $$0 = $0;
  } else {
   $$0 = 0;
  }
 } else {
  $$old2 = ($7|0)==(0);
  L11: do {
   if ($$old2) {
    $$1 = $0;
    label = 17;
   } else {
    $18 = ((($2)) + 4|0);
    $19 = ((($2)) + 8|0);
    $$063 = $7;$$064 = $0;
    while(1) {
     $20 = HEAP32[$18>>2]|0;
     $21 = HEAP32[$19>>2]|0;
     $22 = $20;
     $23 = (($21) - ($22))|0;
     $24 = (_memchr($20,10,$23)|0);
     $25 = ($24|0)==(0|0);
     $26 = $24;
     $27 = (1 - ($22))|0;
     $28 = (($27) + ($26))|0;
     $29 = $25 ? $23 : $28;
     $30 = ($29>>>0)<($$063>>>0);
     $31 = $30 ? $29 : $$063;
     _memcpy(($$064|0),($20|0),($31|0))|0;
     $32 = HEAP32[$18>>2]|0;
     $33 = (($32) + ($31)|0);
     HEAP32[$18>>2] = $33;
     $34 = (($$064) + ($31)|0);
     $35 = (($$063) - ($31))|0;
     $36 = ($35|0)!=(0);
     $or$cond = $25 & $36;
     if (!($or$cond)) {
      $$1 = $34;
      label = 17;
      break L11;
     }
     $37 = HEAP32[$19>>2]|0;
     $38 = ($33>>>0)<($37>>>0);
     if ($38) {
      $39 = ((($33)) + 1|0);
      HEAP32[$18>>2] = $39;
      $40 = HEAP8[$33>>0]|0;
      $41 = $40&255;
      $50 = $41;
     } else {
      $42 = (___uflow($2)|0);
      $43 = ($42|0)<(0);
      if ($43) {
       break;
      } else {
       $50 = $42;
      }
     }
     $48 = (($35) + -1)|0;
     $49 = $50&255;
     $51 = ((($34)) + 1|0);
     HEAP8[$34>>0] = $49;
     $sext$mask = $50 & 255;
     $52 = ($sext$mask|0)!=(10);
     $53 = ($48|0)!=(0);
     $or$cond3 = $53 & $52;
     if ($or$cond3) {
      $$063 = $48;$$064 = $51;
     } else {
      $$1 = $51;
      label = 17;
      break L11;
     }
    }
    $44 = ($34|0)==($0|0);
    if ($44) {
     $$06266 = 0;
    } else {
     $45 = HEAP32[$2>>2]|0;
     $46 = $45 & 16;
     $47 = ($46|0)==(0);
     if ($47) {
      $$06266 = 0;
     } else {
      $$1 = $34;
      label = 17;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   $54 = ($0|0)==(0|0);
   if ($54) {
    $$06266 = 0;
   } else {
    HEAP8[$$1>>0] = 0;
    $$06266 = $0;
   }
  }
  $55 = ($16|0)==(0);
  if ($55) {
   $$0 = $$06266;
  } else {
   ___unlockfile($2);
   $$0 = $$06266;
  }
 }
 return ($$0|0);
}
function _feof($0) {
 $0 = $0|0;
 var $$lobit = 0, $$lobit8 = 0, $$lobit9 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $6 = (___lockfile($0)|0);
  $phitmp = ($6|0)==(0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 >>> 4;
  $$lobit = $8 & 1;
  if ($phitmp) {
   $$lobit9 = $$lobit;
  } else {
   $$lobit9 = $$lobit;
  }
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = $4 >>> 4;
  $$lobit8 = $5 & 1;
  $$lobit9 = $$lobit8;
 }
 return ($$lobit9|0);
}
function _ferror($0) {
 $0 = $0|0;
 var $$lobit = 0, $$lobit8 = 0, $$lobit9 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $6 = (___lockfile($0)|0);
  $phitmp = ($6|0)==(0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 >>> 5;
  $$lobit = $8 & 1;
  if ($phitmp) {
   $$lobit9 = $$lobit;
  } else {
   $$lobit9 = $$lobit;
  }
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = $4 >>> 5;
  $$lobit8 = $5 & 1;
  $$lobit9 = $$lobit8;
 }
 return ($$lobit9|0);
}
function _fscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _sscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 32|0);
 HEAP32[$4>>2] = 11;
 $5 = ((($3)) + 44|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($3)) + 76|0);
 HEAP32[$6>>2] = -1;
 $7 = ((($3)) + 84|0);
 HEAP32[$7>>2] = $0;
 $8 = (_vfscanf($3,$1,$2)|0);
 STACKTOP = sp;return ($8|0);
}
function _do_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___string_read($0,$1,$2)|0);
 return ($3|0);
}
function _vfscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$0266 = 0, $$$0268 = 0, $$$0305 = 0, $$$3 = 0, $$0266$lcssa = 0, $$0266403 = 0, $$0268 = 0, $$0272 = 0, $$0273415 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph339 = 0, $$0283414 = 0, $$0286406 = 0, $$0288$ = 0, $$0288411 = 0, $$0292 = 0, $$0293 = 0;
 var $$0305409 = 0, $$10 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0, $$2290 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$319 = 0;
 var $$320 = 0, $$321 = 0, $$322 = 0, $$3281 = 0, $$329 = 0, $$3291 = 0, $$330$le423 = 0, $$330$le425 = 0, $$3402 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6$pn = 0, $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7312 = 0;
 var $$8 = 0, $$8313 = 0, $$9 = 0, $$9314 = 0, $$9314$ph = 0, $$lcssa356 = 0, $$not = 0, $$old4 = 0, $$ph = 0, $$ph354 = 0, $$pr = 0, $$pr328 = 0, $$pre = 0, $$pre473 = 0, $$pre475 = 0, $$pre476 = 0, $$pre477 = 0, $$sink = 0, $$sink$in = 0, $$sink333 = 0;
 var $$sroa$2$0$$sroa_idx13 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $factor = 0, $factor335 = 0, $isdigit = 0, $isdigit316 = 0, $isdigit316401 = 0, $isdigittmp = 0;
 var $isdigittmp315 = 0, $isdigittmp315400 = 0, $narrow = 0, $narrow449 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond318 = 0, $or$cond5 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $3 = sp + 8|0;
 $4 = sp + 17|0;
 $5 = sp;
 $6 = sp + 16|0;
 $7 = ((($0)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(-1);
 if ($9) {
  $10 = (___lockfile($0)|0);
  $302 = $10;
 } else {
  $302 = 0;
 }
 $11 = HEAP8[$1>>0]|0;
 $12 = ($11<<24>>24)==(0);
 L4: do {
  if ($12) {
   $$3291 = 0;
  } else {
   $13 = ((($0)) + 4|0);
   $14 = ((($0)) + 100|0);
   $15 = ((($0)) + 108|0);
   $16 = ((($0)) + 8|0);
   $17 = ((($4)) + 10|0);
   $18 = ((($4)) + 33|0);
   $$sroa$2$0$$sroa_idx13 = ((($3)) + 4|0);
   $19 = ((($4)) + 1|0);
   $20 = ((($4)) + 1|0);
   $$0273415 = $1;$$0283414 = 0;$$0288411 = 0;$$0305409 = 0;$100 = 0;$22 = $11;
   L6: while(1) {
    $21 = $22&255;
    $23 = (_isspace($21)|0);
    $24 = ($23|0)==(0);
    L8: do {
     if ($24) {
      $51 = ($22<<24>>24)==(37);
      L10: do {
       if ($51) {
        $52 = ((($$0273415)) + 1|0);
        $53 = HEAP8[$52>>0]|0;
        L12: do {
         switch ($53<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $74 = ((($$0273415)) + 2|0);
          $$0293 = 0;$$2275 = $74;
          break;
         }
         default: {
          $75 = $53&255;
          $isdigittmp = (($75) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $76 = ((($$0273415)) + 2|0);
           $77 = HEAP8[$76>>0]|0;
           $78 = ($77<<24>>24)==(36);
           if ($78) {
            $79 = (_arg_n($2,$isdigittmp)|0);
            $80 = ((($$0273415)) + 3|0);
            $$0293 = $79;$$2275 = $80;
            break L12;
           }
          }
          $arglist_current = HEAP32[$2>>2]|0;
          $81 = $arglist_current;
          $82 = ((0) + 4|0);
          $expanded1 = $82;
          $expanded = (($expanded1) - 1)|0;
          $83 = (($81) + ($expanded))|0;
          $84 = ((0) + 4|0);
          $expanded5 = $84;
          $expanded4 = (($expanded5) - 1)|0;
          $expanded3 = $expanded4 ^ -1;
          $85 = $83 & $expanded3;
          $86 = $85;
          $87 = HEAP32[$86>>2]|0;
          $arglist_next = ((($86)) + 4|0);
          HEAP32[$2>>2] = $arglist_next;
          $$0293 = $87;$$2275 = $52;
         }
         }
        } while(0);
        $88 = HEAP8[$$2275>>0]|0;
        $89 = $88&255;
        $isdigittmp315400 = (($89) + -48)|0;
        $isdigit316401 = ($isdigittmp315400>>>0)<(10);
        if ($isdigit316401) {
         $$0266403 = 0;$$3402 = $$2275;$93 = $89;
         while(1) {
          $90 = ($$0266403*10)|0;
          $91 = (($90) + -48)|0;
          $92 = (($91) + ($93))|0;
          $94 = ((($$3402)) + 1|0);
          $95 = HEAP8[$94>>0]|0;
          $96 = $95&255;
          $isdigittmp315 = (($96) + -48)|0;
          $isdigit316 = ($isdigittmp315>>>0)<(10);
          if ($isdigit316) {
           $$0266403 = $92;$$3402 = $94;$93 = $96;
          } else {
           $$0266$lcssa = $92;$$3$lcssa = $94;$$lcssa356 = $95;
           break;
          }
         }
        } else {
         $$0266$lcssa = 0;$$3$lcssa = $$2275;$$lcssa356 = $88;
        }
        $97 = ($$lcssa356<<24>>24)==(109);
        $98 = ($$0293|0)!=(0|0);
        $99 = ((($$3$lcssa)) + 1|0);
        $$$0305 = $97 ? 0 : $$0305409;
        $$329 = $97 ? 0 : $100;
        $$$3 = $97 ? $99 : $$3$lcssa;
        $narrow = $98 & $97;
        $101 = ((($$$3)) + 1|0);
        $102 = HEAP8[$$$3>>0]|0;
        switch ($102<<24>>24) {
        case 104:  {
         $103 = HEAP8[$101>>0]|0;
         $104 = ($103<<24>>24)==(104);
         $105 = ((($$$3)) + 2|0);
         $$319 = $104 ? $105 : $101;
         $$320 = $104 ? -2 : -1;
         $$0268 = $$320;$$5 = $$319;
         break;
        }
        case 108:  {
         $106 = HEAP8[$101>>0]|0;
         $107 = ($106<<24>>24)==(108);
         $108 = ((($$$3)) + 2|0);
         $$321 = $107 ? $108 : $101;
         $$322 = $107 ? 3 : 1;
         $$0268 = $$322;$$5 = $$321;
         break;
        }
        case 106:  {
         $$0268 = 3;$$5 = $101;
         break;
        }
        case 116: case 122:  {
         $$0268 = 1;$$5 = $101;
         break;
        }
        case 76:  {
         $$0268 = 2;$$5 = $101;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $$0268 = 0;$$5 = $$$3;
         break;
        }
        default: {
         $$7312 = $$$0305;$305 = $$329;$narrow449 = $narrow;
         label = 135;
         break L6;
        }
        }
        $109 = HEAP8[$$5>>0]|0;
        $110 = $109&255;
        $111 = $110 & 47;
        $112 = ($111|0)==(3);
        $113 = $110 | 32;
        $$ = $112 ? $113 : $110;
        $$$0268 = $112 ? 1 : $$0268;
        $trunc = $$&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $114 = ($$0266$lcssa|0)>(1);
         $$$0266 = $114 ? $$0266$lcssa : 1;
         $$1267 = $$$0266;$$1284 = $$0283414;
         break;
        }
        case 91:  {
         $$1267 = $$0266$lcssa;$$1284 = $$0283414;
         break;
        }
        case 110:  {
         $115 = ($$0283414|0)<(0);
         $116 = $115 << 31 >> 31;
         _store_int($$0293,$$$0268,$$0283414,$116);
         $$11 = $$5;$$1289 = $$0288411;$$2285 = $$0283414;$$6311 = $$$0305;$303 = $$329;
         break L8;
         break;
        }
        default: {
         ___shlim($0,0);
         while(1) {
          $117 = HEAP32[$13>>2]|0;
          $118 = HEAP32[$14>>2]|0;
          $119 = ($117>>>0)<($118>>>0);
          if ($119) {
           $120 = ((($117)) + 1|0);
           HEAP32[$13>>2] = $120;
           $121 = HEAP8[$117>>0]|0;
           $122 = $121&255;
           $124 = $122;
          } else {
           $123 = (___shgetc($0)|0);
           $124 = $123;
          }
          $125 = (_isspace($124)|0);
          $126 = ($125|0)==(0);
          if ($126) {
           break;
          }
         }
         $127 = HEAP32[$14>>2]|0;
         $128 = ($127|0)==(0|0);
         if ($128) {
          $$pre473 = HEAP32[$13>>2]|0;
          $136 = $$pre473;
         } else {
          $129 = HEAP32[$13>>2]|0;
          $130 = ((($129)) + -1|0);
          HEAP32[$13>>2] = $130;
          $131 = $130;
          $136 = $131;
         }
         $132 = HEAP32[$15>>2]|0;
         $133 = HEAP32[$16>>2]|0;
         $134 = (($132) + ($$0283414))|0;
         $135 = (($134) + ($136))|0;
         $137 = (($135) - ($133))|0;
         $$1267 = $$0266$lcssa;$$1284 = $137;
        }
        }
        ___shlim($0,$$1267);
        $138 = HEAP32[$13>>2]|0;
        $139 = HEAP32[$14>>2]|0;
        $140 = ($138>>>0)<($139>>>0);
        if ($140) {
         $141 = ((($138)) + 1|0);
         HEAP32[$13>>2] = $141;
         $145 = $139;
        } else {
         $142 = (___shgetc($0)|0);
         $143 = ($142|0)<(0);
         if ($143) {
          $$7312 = $$$0305;$305 = $$329;$narrow449 = $narrow;
          label = 135;
          break L6;
         }
         $$pr328 = HEAP32[$14>>2]|0;
         $145 = $$pr328;
        }
        $144 = ($145|0)==(0|0);
        if (!($144)) {
         $146 = HEAP32[$13>>2]|0;
         $147 = ((($146)) + -1|0);
         HEAP32[$13>>2] = $147;
        }
        L55: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $148 = ($$|0)==(99);
          $149 = $$ | 16;
          $150 = ($149|0)==(115);
          L57: do {
           if ($150) {
            $151 = ($$|0)==(115);
            _memset(($19|0),-1,256)|0;
            HEAP8[$4>>0] = 0;
            if ($151) {
             HEAP8[$18>>0] = 0;
             ;HEAP8[$17>>0]=0|0;HEAP8[$17+1>>0]=0|0;HEAP8[$17+2>>0]=0|0;HEAP8[$17+3>>0]=0|0;HEAP8[$17+4>>0]=0|0;
             $$9 = $$5;
            } else {
             $$9 = $$5;
            }
           } else {
            $152 = ((($$5)) + 1|0);
            $153 = HEAP8[$152>>0]|0;
            $154 = ($153<<24>>24)==(94);
            $155 = ((($$5)) + 2|0);
            $$0292 = $154&1;
            $$6 = $154 ? $155 : $152;
            $156 = $154&1;
            _memset(($20|0),($156|0),256)|0;
            HEAP8[$4>>0] = 0;
            $157 = HEAP8[$$6>>0]|0;
            switch ($157<<24>>24) {
            case 45:  {
             $$6$pn = $$6;$$sink333 = 46;
             label = 63;
             break;
            }
            case 93:  {
             $$6$pn = $$6;$$sink333 = 94;
             label = 63;
             break;
            }
            default: {
             $$7 = $$6;$159 = $157;
            }
            }
            while(1) {
             if ((label|0) == 63) {
              label = 0;
              $$sink$in = $$0292 ^ 1;
              $$sink = $$sink$in&255;
              $158 = (($4) + ($$sink333)|0);
              HEAP8[$158>>0] = $$sink;
              $$7$ph = ((($$6$pn)) + 1|0);
              $$pr = HEAP8[$$7$ph>>0]|0;
              $$7 = $$7$ph;$159 = $$pr;
             }
             L67: do {
              switch ($159<<24>>24) {
              case 0:  {
               $$7312 = $$$0305;$305 = $$329;$narrow449 = $narrow;
               label = 135;
               break L6;
               break;
              }
              case 93:  {
               $$9 = $$7;
               break L57;
               break;
              }
              case 45:  {
               $160 = ((($$7)) + 1|0);
               $161 = HEAP8[$160>>0]|0;
               switch ($161<<24>>24) {
               case 93: case 0:  {
                $$8 = $$7;$174 = 45;
                break L67;
                break;
               }
               default: {
               }
               }
               $162 = ((($$7)) + -1|0);
               $163 = HEAP8[$162>>0]|0;
               $164 = ($163&255)<($161&255);
               if ($164) {
                $165 = $163&255;
                $166 = $$0292 ^ 1;
                $167 = $166&255;
                $$0286406 = $165;
                while(1) {
                 $168 = (($$0286406) + 1)|0;
                 $169 = (($4) + ($168)|0);
                 HEAP8[$169>>0] = $167;
                 $170 = HEAP8[$160>>0]|0;
                 $171 = $170&255;
                 $172 = ($168|0)<($171|0);
                 if ($172) {
                  $$0286406 = $168;
                 } else {
                  $$8 = $160;$174 = $170;
                  break;
                 }
                }
               } else {
                $$8 = $160;$174 = $161;
               }
               break;
              }
              default: {
               $$8 = $$7;$174 = $159;
              }
              }
             } while(0);
             $173 = $174&255;
             $175 = (($173) + 1)|0;
             $$6$pn = $$8;$$sink333 = $175;
             label = 63;
            }
           }
          } while(0);
          $176 = (($$1267) + 1)|0;
          $177 = $148 ? $176 : 31;
          $178 = ($$$0268|0)==(1);
          L75: do {
           if ($178) {
            if ($narrow) {
             $179 = $177 << 2;
             $180 = (_malloc($179)|0);
             $181 = ($180|0)==(0|0);
             if ($181) {
              $$7312 = 0;$305 = 0;$narrow449 = 1;
              label = 135;
              break L6;
             } else {
              $307 = $180;
             }
            } else {
             $307 = $$0293;
            }
            HEAP32[$3>>2] = 0;
            HEAP32[$$sroa$2$0$$sroa_idx13>>2] = 0;
            $$0276$ph = $177;$$0278$ph = 0;$$ph = $307;
            L80: while(1) {
             $182 = ($$ph|0)==(0|0);
             $$0278$ph339 = $$0278$ph;
             while(1) {
              L84: while(1) {
               $183 = HEAP32[$13>>2]|0;
               $184 = HEAP32[$14>>2]|0;
               $185 = ($183>>>0)<($184>>>0);
               if ($185) {
                $186 = ((($183)) + 1|0);
                HEAP32[$13>>2] = $186;
                $187 = HEAP8[$183>>0]|0;
                $188 = $187&255;
                $191 = $188;
               } else {
                $189 = (___shgetc($0)|0);
                $191 = $189;
               }
               $190 = (($191) + 1)|0;
               $192 = (($4) + ($190)|0);
               $193 = HEAP8[$192>>0]|0;
               $194 = ($193<<24>>24)==(0);
               if ($194) {
                break L80;
               }
               $195 = $191&255;
               HEAP8[$6>>0] = $195;
               $196 = (_mbrtowc($5,$6,1,$3)|0);
               switch ($196|0) {
               case -1:  {
                $$7312 = 0;$305 = $$ph;$narrow449 = $narrow;
                label = 135;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L84;
               }
               }
              }
              if ($182) {
               $$1279 = $$0278$ph339;
              } else {
               $197 = (($$ph) + ($$0278$ph339<<2)|0);
               $198 = (($$0278$ph339) + 1)|0;
               $199 = HEAP32[$5>>2]|0;
               HEAP32[$197>>2] = $199;
               $$1279 = $198;
              }
              $200 = ($$1279|0)==($$0276$ph|0);
              $or$cond = $narrow & $200;
              if ($or$cond) {
               break;
              } else {
               $$0278$ph339 = $$1279;
              }
             }
             $factor335 = $$0276$ph << 1;
             $201 = $factor335 | 1;
             $202 = $201 << 2;
             $203 = (_realloc($$ph,$202)|0);
             $204 = ($203|0)==(0|0);
             if ($204) {
              $$7312 = 0;$305 = $$ph;$narrow449 = 1;
              label = 135;
              break L6;
             } else {
              $$0278$ph$phi = $$0276$ph;$$0276$ph = $201;$$ph = $203;$$0278$ph = $$0278$ph$phi;
             }
            }
            $205 = (_mbsinit($3)|0);
            $206 = ($205|0)==(0);
            if ($206) {
             $$7312 = 0;$305 = $$ph;$narrow449 = $narrow;
             label = 135;
             break L6;
            } else {
             $$4282 = $$0278$ph339;$$4309 = 0;$$5299 = $$ph;$308 = $$ph;
            }
           } else {
            if ($narrow) {
             $207 = (_malloc($177)|0);
             $208 = ($207|0)==(0|0);
             if ($208) {
              $$7312 = 0;$305 = 0;$narrow449 = 1;
              label = 135;
              break L6;
             } else {
              $$1277$ph = $177;$$2280$ph = 0;$$2307$ph = $207;
             }
             while(1) {
              $$2280 = $$2280$ph;
              while(1) {
               $209 = HEAP32[$13>>2]|0;
               $210 = HEAP32[$14>>2]|0;
               $211 = ($209>>>0)<($210>>>0);
               if ($211) {
                $212 = ((($209)) + 1|0);
                HEAP32[$13>>2] = $212;
                $213 = HEAP8[$209>>0]|0;
                $214 = $213&255;
                $217 = $214;
               } else {
                $215 = (___shgetc($0)|0);
                $217 = $215;
               }
               $216 = (($217) + 1)|0;
               $218 = (($4) + ($216)|0);
               $219 = HEAP8[$218>>0]|0;
               $220 = ($219<<24>>24)==(0);
               if ($220) {
                $$4282 = $$2280;$$4309 = $$2307$ph;$$5299 = 0;$308 = 0;
                break L75;
               }
               $221 = $217&255;
               $222 = (($$2280) + 1)|0;
               $223 = (($$2307$ph) + ($$2280)|0);
               HEAP8[$223>>0] = $221;
               $224 = ($222|0)==($$1277$ph|0);
               if ($224) {
                break;
               } else {
                $$2280 = $222;
               }
              }
              $factor = $$1277$ph << 1;
              $225 = $factor | 1;
              $226 = (_realloc($$2307$ph,$225)|0);
              $227 = ($226|0)==(0|0);
              if ($227) {
               $$7312 = $$2307$ph;$305 = 0;$narrow449 = 1;
               label = 135;
               break L6;
              } else {
               $$2280$ph$phi = $$1277$ph;$$1277$ph = $225;$$2307$ph = $226;$$2280$ph = $$2280$ph$phi;
              }
             }
            }
            $228 = ($$0293|0)==(0|0);
            if ($228) {
             $246 = $145;
             while(1) {
              $244 = HEAP32[$13>>2]|0;
              $245 = ($244>>>0)<($246>>>0);
              if ($245) {
               $247 = ((($244)) + 1|0);
               HEAP32[$13>>2] = $247;
               $248 = HEAP8[$244>>0]|0;
               $249 = $248&255;
               $252 = $249;
              } else {
               $250 = (___shgetc($0)|0);
               $252 = $250;
              }
              $251 = (($252) + 1)|0;
              $253 = (($4) + ($251)|0);
              $254 = HEAP8[$253>>0]|0;
              $255 = ($254<<24>>24)==(0);
              if ($255) {
               $$4282 = 0;$$4309 = 0;$$5299 = 0;$308 = 0;
               break L75;
              }
              $$pre476 = HEAP32[$14>>2]|0;
              $246 = $$pre476;
             }
            } else {
             $$3281 = 0;$231 = $145;
             while(1) {
              $229 = HEAP32[$13>>2]|0;
              $230 = ($229>>>0)<($231>>>0);
              if ($230) {
               $232 = ((($229)) + 1|0);
               HEAP32[$13>>2] = $232;
               $233 = HEAP8[$229>>0]|0;
               $234 = $233&255;
               $237 = $234;
              } else {
               $235 = (___shgetc($0)|0);
               $237 = $235;
              }
              $236 = (($237) + 1)|0;
              $238 = (($4) + ($236)|0);
              $239 = HEAP8[$238>>0]|0;
              $240 = ($239<<24>>24)==(0);
              if ($240) {
               $$4282 = $$3281;$$4309 = $$0293;$$5299 = 0;$308 = 0;
               break L75;
              }
              $241 = $237&255;
              $242 = (($$3281) + 1)|0;
              $243 = (($$0293) + ($$3281)|0);
              HEAP8[$243>>0] = $241;
              $$pre475 = HEAP32[$14>>2]|0;
              $$3281 = $242;$231 = $$pre475;
             }
            }
           }
          } while(0);
          $256 = HEAP32[$14>>2]|0;
          $257 = ($256|0)==(0|0);
          if ($257) {
           $$pre477 = HEAP32[$13>>2]|0;
           $264 = $$pre477;
          } else {
           $258 = HEAP32[$13>>2]|0;
           $259 = ((($258)) + -1|0);
           HEAP32[$13>>2] = $259;
           $260 = $259;
           $264 = $260;
          }
          $261 = HEAP32[$15>>2]|0;
          $262 = HEAP32[$16>>2]|0;
          $263 = (($264) - ($262))|0;
          $265 = (($263) + ($261))|0;
          $266 = ($265|0)==(0);
          if ($266) {
           $$9314$ph = $$4309;$$ph354 = $308;
           label = 137;
           break L6;
          }
          $$not = $148 ^ 1;
          $267 = ($265|0)==($$1267|0);
          $or$cond318 = $267 | $$not;
          if (!($or$cond318)) {
           $$9314$ph = $$4309;$$ph354 = $308;
           label = 137;
           break L6;
          }
          do {
           if ($narrow) {
            if ($178) {
             HEAP32[$$0293>>2] = $$5299;
             break;
            } else {
             HEAP32[$$0293>>2] = $$4309;
             break;
            }
           }
          } while(0);
          if ($148) {
           $$10 = $$9;$$5310 = $$4309;$306 = $308;
          } else {
           $268 = ($$5299|0)==(0|0);
           if (!($268)) {
            $269 = (($$5299) + ($$4282<<2)|0);
            HEAP32[$269>>2] = 0;
           }
           $270 = ($$4309|0)==(0|0);
           if ($270) {
            $$10 = $$9;$$5310 = 0;$306 = $308;
            break L55;
           }
           $271 = (($$4309) + ($$4282)|0);
           HEAP8[$271>>0] = 0;
           $$10 = $$9;$$5310 = $$4309;$306 = $308;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $$0272 = 16;
          label = 123;
          break;
         }
         case 111:  {
          $$0272 = 8;
          label = 123;
          break;
         }
         case 117: case 100:  {
          $$0272 = 10;
          label = 123;
          break;
         }
         case 105:  {
          $$0272 = 0;
          label = 123;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $281 = (+___floatscan($0,$$$0268,0));
          $282 = HEAP32[$15>>2]|0;
          $283 = HEAP32[$13>>2]|0;
          $284 = HEAP32[$16>>2]|0;
          $285 = (($284) - ($283))|0;
          $286 = ($282|0)==($285|0);
          if ($286) {
           $$9314$ph = $$$0305;$$ph354 = $$329;
           label = 137;
           break L6;
          }
          $287 = ($$0293|0)==(0|0);
          if ($287) {
           $$10 = $$5;$$5310 = $$$0305;$306 = $$329;
          } else {
           switch ($$$0268|0) {
           case 0:  {
            $288 = $281;
            HEAPF32[$$0293>>2] = $288;
            $$10 = $$5;$$5310 = $$$0305;$306 = $$329;
            break L55;
            break;
           }
           case 1:  {
            HEAPF64[$$0293>>3] = $281;
            $$10 = $$5;$$5310 = $$$0305;$306 = $$329;
            break L55;
            break;
           }
           case 2:  {
            HEAPF64[$$0293>>3] = $281;
            $$10 = $$5;$$5310 = $$$0305;$306 = $$329;
            break L55;
            break;
           }
           default: {
            $$10 = $$5;$$5310 = $$$0305;$306 = $$329;
            break L55;
           }
           }
          }
          break;
         }
         default: {
          $$10 = $$5;$$5310 = $$$0305;$306 = $$329;
         }
         }
        } while(0);
        do {
         if ((label|0) == 123) {
          label = 0;
          $272 = (___intscan($0,$$0272,0,-1,-1)|0);
          $273 = tempRet0;
          $274 = HEAP32[$15>>2]|0;
          $275 = HEAP32[$13>>2]|0;
          $276 = HEAP32[$16>>2]|0;
          $277 = (($276) - ($275))|0;
          $278 = ($274|0)==($277|0);
          if ($278) {
           $$9314$ph = $$$0305;$$ph354 = $$329;
           label = 137;
           break L6;
          }
          $279 = ($$|0)==(112);
          $or$cond3 = $98 & $279;
          if ($or$cond3) {
           $280 = $272;
           HEAP32[$$0293>>2] = $280;
           $$10 = $$5;$$5310 = $$$0305;$306 = $$329;
           break;
          } else {
           _store_int($$0293,$$$0268,$272,$273);
           $$10 = $$5;$$5310 = $$$0305;$306 = $$329;
           break;
          }
         }
        } while(0);
        $289 = HEAP32[$15>>2]|0;
        $290 = HEAP32[$13>>2]|0;
        $291 = HEAP32[$16>>2]|0;
        $292 = (($289) + ($$1284))|0;
        $293 = (($292) + ($290))|0;
        $294 = (($293) - ($291))|0;
        $295 = $98&1;
        $$0288$ = (($$0288411) + ($295))|0;
        $$11 = $$10;$$1289 = $$0288$;$$2285 = $294;$$6311 = $$5310;$303 = $306;
        break L8;
       }
      } while(0);
      $54 = $51&1;
      $55 = (($$0273415) + ($54)|0);
      ___shlim($0,0);
      $56 = HEAP32[$13>>2]|0;
      $57 = HEAP32[$14>>2]|0;
      $58 = ($56>>>0)<($57>>>0);
      if ($58) {
       $59 = ((($56)) + 1|0);
       HEAP32[$13>>2] = $59;
       $60 = HEAP8[$56>>0]|0;
       $61 = $60&255;
       $66 = $61;
      } else {
       $62 = (___shgetc($0)|0);
       $66 = $62;
      }
      $63 = HEAP8[$55>>0]|0;
      $64 = $63&255;
      $65 = ($66|0)==($64|0);
      if (!($65)) {
       label = 22;
       break L6;
      }
      $73 = (($$0283414) + 1)|0;
      $$11 = $55;$$1289 = $$0288411;$$2285 = $73;$$6311 = $$0305409;$303 = $100;
     } else {
      $$1274 = $$0273415;
      while(1) {
       $25 = ((($$1274)) + 1|0);
       $26 = HEAP8[$25>>0]|0;
       $27 = $26&255;
       $28 = (_isspace($27)|0);
       $29 = ($28|0)==(0);
       if ($29) {
        break;
       } else {
        $$1274 = $25;
       }
      }
      ___shlim($0,0);
      while(1) {
       $30 = HEAP32[$13>>2]|0;
       $31 = HEAP32[$14>>2]|0;
       $32 = ($30>>>0)<($31>>>0);
       if ($32) {
        $33 = ((($30)) + 1|0);
        HEAP32[$13>>2] = $33;
        $34 = HEAP8[$30>>0]|0;
        $35 = $34&255;
        $37 = $35;
       } else {
        $36 = (___shgetc($0)|0);
        $37 = $36;
       }
       $38 = (_isspace($37)|0);
       $39 = ($38|0)==(0);
       if ($39) {
        break;
       }
      }
      $40 = HEAP32[$14>>2]|0;
      $41 = ($40|0)==(0|0);
      if ($41) {
       $$pre = HEAP32[$13>>2]|0;
       $49 = $$pre;
      } else {
       $42 = HEAP32[$13>>2]|0;
       $43 = ((($42)) + -1|0);
       HEAP32[$13>>2] = $43;
       $44 = $43;
       $49 = $44;
      }
      $45 = HEAP32[$15>>2]|0;
      $46 = HEAP32[$16>>2]|0;
      $47 = (($45) + ($$0283414))|0;
      $48 = (($47) + ($49))|0;
      $50 = (($48) - ($46))|0;
      $$11 = $$1274;$$1289 = $$0288411;$$2285 = $50;$$6311 = $$0305409;$303 = $100;
     }
    } while(0);
    $296 = ((($$11)) + 1|0);
    $297 = HEAP8[$296>>0]|0;
    $298 = ($297<<24>>24)==(0);
    if ($298) {
     $$3291 = $$1289;
     break L4;
    } else {
     $$0273415 = $296;$$0283414 = $$2285;$$0288411 = $$1289;$$0305409 = $$6311;$100 = $303;$22 = $297;
    }
   }
   if ((label|0) == 22) {
    $67 = HEAP32[$14>>2]|0;
    $68 = ($67|0)==(0|0);
    if (!($68)) {
     $69 = HEAP32[$13>>2]|0;
     $70 = ((($69)) + -1|0);
     HEAP32[$13>>2] = $70;
    }
    $71 = ($66|0)>(-1);
    $72 = ($$0288411|0)!=(0);
    $or$cond5 = $72 | $71;
    if ($or$cond5) {
     $$3291 = $$0288411;
     break;
    } else {
     $$1271 = 0;$$8313 = $$0305409;$304 = $100;
     label = 136;
    }
   }
   else if ((label|0) == 135) {
    $$330$le425 = $narrow449&1;
    $$old4 = ($$0288411|0)==(0);
    if ($$old4) {
     $$1271 = $$330$le425;$$8313 = $$7312;$304 = $305;
     label = 136;
    } else {
     $$2 = $$330$le425;$$2290 = $$0288411;$$9314 = $$7312;$300 = $305;
    }
   }
   else if ((label|0) == 137) {
    $$330$le423 = $narrow&1;
    $$2 = $$330$le423;$$2290 = $$0288411;$$9314 = $$9314$ph;$300 = $$ph354;
   }
   if ((label|0) == 136) {
    $$2 = $$1271;$$2290 = -1;$$9314 = $$8313;$300 = $304;
   }
   $299 = ($$2|0)==(0);
   if ($299) {
    $$3291 = $$2290;
   } else {
    _free($$9314);
    _free($300);
    $$3291 = $$2290;
   }
  }
 } while(0);
 $301 = ($302|0)==(0);
 if (!($301)) {
  ___unlockfile($0);
 }
 STACKTOP = sp;return ($$3291|0);
}
function _arg_n($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $vacopy_currentptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $vacopy_currentptr = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $vacopy_currentptr;
 $$0 = $1;
 while(1) {
  $3 = ($$0>>>0)>(1);
  $arglist_current = HEAP32[$2>>2]|0;
  $4 = $arglist_current;
  $5 = ((0) + 4|0);
  $expanded1 = $5;
  $expanded = (($expanded1) - 1)|0;
  $6 = (($4) + ($expanded))|0;
  $7 = ((0) + 4|0);
  $expanded5 = $7;
  $expanded4 = (($expanded5) - 1)|0;
  $expanded3 = $expanded4 ^ -1;
  $8 = $6 & $expanded3;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $arglist_next = ((($9)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $11 = (($$0) + -1)|0;
  if ($3) {
   $$0 = $11;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($10|0);
}
function _store_int($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 L1: do {
  if (!($4)) {
   switch ($1|0) {
   case -2:  {
    $5 = $2&255;
    HEAP8[$0>>0] = $5;
    break L1;
    break;
   }
   case -1:  {
    $6 = $2&65535;
    HEAP16[$0>>1] = $6;
    break L1;
    break;
   }
   case 0:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 1:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 3:  {
    $7 = $0;
    $8 = $7;
    HEAP32[$8>>2] = $2;
    $9 = (($7) + 4)|0;
    $10 = $9;
    HEAP32[$10>>2] = $3;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 return;
}
function _mbsinit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 1;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0);
  $phitmp = $3&1;
  $4 = $phitmp;
 }
 return ($4|0);
}
function ___string_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$027 = 0, $$027$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 256)|0;
 $6 = (_memchr($4,0,$5)|0);
 $7 = ($6|0)==(0|0);
 $8 = $6;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $$027 = $7 ? $5 : $10;
 $11 = ($$027>>>0)<($2>>>0);
 $$027$ = $11 ? $$027 : $2;
 _memcpy(($1|0),($4|0),($$027$|0))|0;
 $12 = (($4) + ($$027$)|0);
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = (($4) + ($$027)|0);
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $14;
 HEAP32[$3>>2] = $14;
 return ($$027$|0);
}
function _getmntent($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_getmntent_r($0,185936,189247,256)|0);
 return ($1|0);
}
function _addmntent($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$lobit = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = (_fseek($0,0,2)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($1)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($1)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($1)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($1)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($1)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $6;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $8;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $10;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $12;
  $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
  HEAP32[$vararg_ptr5>>2] = $14;
  $15 = (_fprintf($0,182589,$vararg_buffer)|0);
  $$lobit = $15 >>> 31;
  $$0 = $$lobit;
 } else {
  $$0 = 1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _fseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___fseeko($0,$1,$2)|0);
 return ($3|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___fseeko($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $7 = (___lockfile($0)|0);
  $phitmp = ($7|0)==(0);
  $8 = (___fseeko_unlocked($0,$1,$2)|0);
  if ($phitmp) {
   $9 = $8;
  } else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else {
  $6 = (___fseeko_unlocked($0,$1,$2)|0);
  $9 = $6;
 }
 return ($9|0);
}
function ___fseeko_unlocked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) - ($5))|0;
  $9 = (($8) + ($7))|0;
  $$019 = $9;
 } else {
  $$019 = $1;
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = ((($0)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiii[$16 & 63]($0,0,0)|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $20 = ((($0)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 63]($0,$$019,$2)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   $$0 = -1;
  } else {
   $24 = ((($0)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = $26 & -17;
   HEAP32[$0>>2] = $27;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _hasmntopt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_strstr($3,$1)|0);
 return ($4|0);
}
function _strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $$0 = $0;
  } else {
   $4 = $2 << 24 >> 24;
   $5 = (_strchr($0,$4)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$0 = 0;
   } else {
    $7 = ((($1)) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $$0 = $5;
    } else {
     $10 = ((($5)) + 1|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(0);
     if ($12) {
      $$0 = 0;
     } else {
      $13 = ((($1)) + 2|0);
      $14 = HEAP8[$13>>0]|0;
      $15 = ($14<<24>>24)==(0);
      if ($15) {
       $16 = (_twobyte_strstr($5,$1)|0);
       $$0 = $16;
       break;
      }
      $17 = ((($5)) + 2|0);
      $18 = HEAP8[$17>>0]|0;
      $19 = ($18<<24>>24)==(0);
      if ($19) {
       $$0 = 0;
      } else {
       $20 = ((($1)) + 3|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = ($21<<24>>24)==(0);
       if ($22) {
        $23 = (_threebyte_strstr($5,$1)|0);
        $$0 = $23;
        break;
       }
       $24 = ((($5)) + 3|0);
       $25 = HEAP8[$24>>0]|0;
       $26 = ($25<<24>>24)==(0);
       if ($26) {
        $$0 = 0;
       } else {
        $27 = ((($1)) + 4|0);
        $28 = HEAP8[$27>>0]|0;
        $29 = ($28<<24>>24)==(0);
        if ($29) {
         $30 = (_fourbyte_strstr($5,$1)|0);
         $$0 = $30;
         break;
        } else {
         $31 = (_twoway_strstr($5,$1)|0);
         $$0 = $31;
         break;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _twobyte_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink$in = 0, $$sink$masked = 0, $$sink17$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 8;
 $5 = ((($1)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $4 | $7;
 $9 = HEAP8[$0>>0]|0;
 $10 = $9&255;
 $$sink$in = $10;$$sink17$sink = $0;
 while(1) {
  $11 = ((($$sink17$sink)) + 1|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   break;
  }
  $$sink = $$sink$in << 8;
  $14 = $12&255;
  $$sink$masked = $$sink & 65280;
  $15 = $$sink$masked | $14;
  $16 = ($15|0)==($8|0);
  if ($16) {
   break;
  } else {
   $$sink$in = $15;$$sink17$sink = $11;
  }
 }
 $17 = ($12<<24>>24)!=(0);
 $18 = $17 ? $$sink17$sink : 0;
 return ($18|0);
}
function _threebyte_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$016$lcssa = 0, $$01618 = 0, $$019 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $or$cond17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 24;
 $5 = ((($1)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 << 16;
 $9 = $8 | $4;
 $10 = ((($1)) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = $9 | $13;
 $15 = HEAP8[$0>>0]|0;
 $16 = $15&255;
 $17 = $16 << 24;
 $18 = ((($0)) + 1|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 << 16;
 $22 = $21 | $17;
 $23 = ((($0)) + 2|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 << 8;
 $27 = $22 | $26;
 $28 = ($24<<24>>24)==(0);
 $29 = ($27|0)==($14|0);
 $or$cond17 = $29 | $28;
 if ($or$cond17) {
  $$016$lcssa = $23;$$lcssa = $24;
 } else {
  $$01618 = $23;$$019 = $27;
  while(1) {
   $30 = ((($$01618)) + 1|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = $$019 | $32;
   $34 = $33 << 8;
   $35 = ($31<<24>>24)==(0);
   $36 = ($34|0)==($14|0);
   $or$cond = $36 | $35;
   if ($or$cond) {
    $$016$lcssa = $30;$$lcssa = $31;
    break;
   } else {
    $$01618 = $30;$$019 = $34;
   }
  }
 }
 $37 = ($$lcssa<<24>>24)!=(0);
 $38 = ((($$016$lcssa)) + -2|0);
 $39 = $37 ? $38 : 0;
 return ($39|0);
}
function _fourbyte_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$lcssa = 0, $$sink21$lcssa = 0, $$sink2123 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 24;
 $5 = ((($1)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 << 16;
 $9 = $8 | $4;
 $10 = ((($1)) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = $9 | $13;
 $15 = ((($1)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $14 | $17;
 $19 = HEAP8[$0>>0]|0;
 $20 = $19&255;
 $21 = $20 << 24;
 $22 = ((($0)) + 1|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 << 16;
 $26 = $25 | $21;
 $27 = ((($0)) + 2|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 << 8;
 $31 = $26 | $30;
 $32 = ((($0)) + 3|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $31 | $34;
 $36 = ($33<<24>>24)==(0);
 $37 = ($35|0)==($18|0);
 $or$cond22 = $36 | $37;
 if ($or$cond22) {
  $$lcssa = $33;$$sink21$lcssa = $32;
 } else {
  $$sink2123 = $32;$39 = $35;
  while(1) {
   $38 = $39 << 8;
   $40 = ((($$sink2123)) + 1|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = $38 | $42;
   $44 = ($41<<24>>24)==(0);
   $45 = ($43|0)==($18|0);
   $or$cond = $44 | $45;
   if ($or$cond) {
    $$lcssa = $41;$$sink21$lcssa = $40;
    break;
   } else {
    $$sink2123 = $40;$39 = $43;
   }
  }
 }
 $46 = ($$lcssa<<24>>24)!=(0);
 $47 = ((($$sink21$lcssa)) + -3|0);
 $48 = $46 ? $47 : 0;
 return ($48|0);
}
function _twoway_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$ph$ph$lcssa216 = 0, $$0175$ph$ph$lcssa216328 = 0, $$0175$ph$ph254 = 0, $$0179242 = 0, $$0183$ph197$ph253 = 0, $$0183$ph197248 = 0, $$0183$ph260 = 0, $$0185$ph$lcssa = 0, $$0185$ph$lcssa327 = 0, $$0185$ph259 = 0, $$0187219$ph325326 = 0, $$0187263 = 0, $$1176$$0175 = 0, $$1176$ph$ph$lcssa208 = 0, $$1176$ph$ph233 = 0;
 var $$1180222 = 0, $$1184$ph193$ph232 = 0, $$1184$ph193227 = 0, $$1184$ph239 = 0, $$1186$$0185 = 0, $$1186$$0185$ = 0, $$1186$ph$lcssa = 0, $$1186$ph238 = 0, $$2181 = 0, $$2181$sink = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182221 = 0, $$4 = 0, $$pr = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $div = 0, $div188 = 0, $or$cond = 0, $or$cond189 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $2 = sp + 1024|0;
 $3 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
 $4 = HEAP8[$1>>0]|0;
 $5 = ($4<<24>>24)==(0);
 L1: do {
  if ($5) {
   $$0175$ph$ph$lcssa216328 = 1;$$0185$ph$lcssa327 = -1;$$0187219$ph325326 = 0;$$1176$ph$ph$lcssa208 = 1;$$1186$ph$lcssa = -1;
   label = 26;
  } else {
   $$0187263 = 0;$10 = $4;
   while(1) {
    $6 = (($0) + ($$0187263)|0);
    $7 = HEAP8[$6>>0]|0;
    $8 = ($7<<24>>24)==(0);
    if ($8) {
     $$3 = 0;
     break L1;
    }
    $9 = $10 & 31;
    $11 = $9&255;
    $12 = 1 << $11;
    $div188 = ($10&255) >>> 5;
    $13 = $div188&255;
    $14 = (($2) + ($13<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 | $12;
    HEAP32[$14>>2] = $16;
    $17 = (($$0187263) + 1)|0;
    $18 = $10&255;
    $19 = (($3) + ($18<<2)|0);
    HEAP32[$19>>2] = $17;
    $20 = (($1) + ($17)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     break;
    } else {
     $$0187263 = $17;$10 = $21;
    }
   }
   $23 = ($17>>>0)>(1);
   if ($23) {
    $$0183$ph260 = 0;$$0185$ph259 = -1;$130 = 1;
    L6: while(1) {
     $$0175$ph$ph254 = 1;$$0183$ph197$ph253 = $$0183$ph260;$131 = $130;
     while(1) {
      $$0183$ph197248 = $$0183$ph197$ph253;$132 = $131;
      L10: while(1) {
       $$0179242 = 1;$25 = $132;
       while(1) {
        $30 = (($$0179242) + ($$0185$ph259))|0;
        $31 = (($1) + ($30)|0);
        $32 = HEAP8[$31>>0]|0;
        $33 = (($1) + ($25)|0);
        $34 = HEAP8[$33>>0]|0;
        $35 = ($32<<24>>24)==($34<<24>>24);
        if (!($35)) {
         break L10;
        }
        $36 = ($$0179242|0)==($$0175$ph$ph254|0);
        $28 = (($$0179242) + 1)|0;
        if ($36) {
         break;
        }
        $27 = (($28) + ($$0183$ph197248))|0;
        $29 = ($27>>>0)<($17>>>0);
        if ($29) {
         $$0179242 = $28;$25 = $27;
        } else {
         $$0175$ph$ph$lcssa216 = $$0175$ph$ph254;$$0185$ph$lcssa = $$0185$ph259;
         break L6;
        }
       }
       $37 = (($$0175$ph$ph254) + ($$0183$ph197248))|0;
       $38 = (($37) + 1)|0;
       $39 = ($38>>>0)<($17>>>0);
       if ($39) {
        $$0183$ph197248 = $37;$132 = $38;
       } else {
        $$0175$ph$ph$lcssa216 = $$0175$ph$ph254;$$0185$ph$lcssa = $$0185$ph259;
        break L6;
       }
      }
      $40 = ($32&255)>($34&255);
      $41 = (($25) - ($$0185$ph259))|0;
      if (!($40)) {
       break;
      }
      $24 = (($25) + 1)|0;
      $26 = ($24>>>0)<($17>>>0);
      if ($26) {
       $$0175$ph$ph254 = $41;$$0183$ph197$ph253 = $25;$131 = $24;
      } else {
       $$0175$ph$ph$lcssa216 = $41;$$0185$ph$lcssa = $$0185$ph259;
       break L6;
      }
     }
     $42 = (($$0183$ph197248) + 1)|0;
     $43 = (($$0183$ph197248) + 2)|0;
     $44 = ($43>>>0)<($17>>>0);
     if ($44) {
      $$0183$ph260 = $42;$$0185$ph259 = $$0183$ph197248;$130 = $43;
     } else {
      $$0175$ph$ph$lcssa216 = 1;$$0185$ph$lcssa = $$0183$ph197248;
      break;
     }
    }
    if ($23) {
     $$1184$ph239 = 0;$$1186$ph238 = -1;$133 = 1;
     while(1) {
      $$1176$ph$ph233 = 1;$$1184$ph193$ph232 = $$1184$ph239;$135 = $133;
      while(1) {
       $$1184$ph193227 = $$1184$ph193$ph232;$134 = $135;
       L25: while(1) {
        $$1180222 = 1;$52 = $134;
        while(1) {
         $48 = (($$1180222) + ($$1186$ph238))|0;
         $49 = (($1) + ($48)|0);
         $50 = HEAP8[$49>>0]|0;
         $51 = (($1) + ($52)|0);
         $53 = HEAP8[$51>>0]|0;
         $54 = ($50<<24>>24)==($53<<24>>24);
         if (!($54)) {
          break L25;
         }
         $55 = ($$1180222|0)==($$1176$ph$ph233|0);
         $46 = (($$1180222) + 1)|0;
         if ($55) {
          break;
         }
         $45 = (($46) + ($$1184$ph193227))|0;
         $47 = ($45>>>0)<($17>>>0);
         if ($47) {
          $$1180222 = $46;$52 = $45;
         } else {
          $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216;$$0185$ph$lcssa327 = $$0185$ph$lcssa;$$0187219$ph325326 = $17;$$1176$ph$ph$lcssa208 = $$1176$ph$ph233;$$1186$ph$lcssa = $$1186$ph238;
          label = 26;
          break L1;
         }
        }
        $56 = (($$1176$ph$ph233) + ($$1184$ph193227))|0;
        $57 = (($56) + 1)|0;
        $58 = ($57>>>0)<($17>>>0);
        if ($58) {
         $$1184$ph193227 = $56;$134 = $57;
        } else {
         $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216;$$0185$ph$lcssa327 = $$0185$ph$lcssa;$$0187219$ph325326 = $17;$$1176$ph$ph$lcssa208 = $$1176$ph$ph233;$$1186$ph$lcssa = $$1186$ph238;
         label = 26;
         break L1;
        }
       }
       $59 = ($50&255)<($53&255);
       $60 = (($52) - ($$1186$ph238))|0;
       if (!($59)) {
        break;
       }
       $64 = (($52) + 1)|0;
       $65 = ($64>>>0)<($17>>>0);
       if ($65) {
        $$1176$ph$ph233 = $60;$$1184$ph193$ph232 = $52;$135 = $64;
       } else {
        $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216;$$0185$ph$lcssa327 = $$0185$ph$lcssa;$$0187219$ph325326 = $17;$$1176$ph$ph$lcssa208 = $60;$$1186$ph$lcssa = $$1186$ph238;
        label = 26;
        break L1;
       }
      }
      $61 = (($$1184$ph193227) + 1)|0;
      $62 = (($$1184$ph193227) + 2)|0;
      $63 = ($62>>>0)<($17>>>0);
      if ($63) {
       $$1184$ph239 = $61;$$1186$ph238 = $$1184$ph193227;$133 = $62;
      } else {
       $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216;$$0185$ph$lcssa327 = $$0185$ph$lcssa;$$0187219$ph325326 = $17;$$1176$ph$ph$lcssa208 = 1;$$1186$ph$lcssa = $$1184$ph193227;
       label = 26;
       break;
      }
     }
    } else {
     $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216;$$0185$ph$lcssa327 = $$0185$ph$lcssa;$$0187219$ph325326 = $17;$$1176$ph$ph$lcssa208 = 1;$$1186$ph$lcssa = -1;
     label = 26;
    }
   } else {
    $$0175$ph$ph$lcssa216328 = 1;$$0185$ph$lcssa327 = -1;$$0187219$ph325326 = $17;$$1176$ph$ph$lcssa208 = 1;$$1186$ph$lcssa = -1;
    label = 26;
   }
  }
 } while(0);
 L35: do {
  if ((label|0) == 26) {
   $66 = (($$1186$ph$lcssa) + 1)|0;
   $67 = (($$0185$ph$lcssa327) + 1)|0;
   $68 = ($66>>>0)>($67>>>0);
   $$1176$$0175 = $68 ? $$1176$ph$ph$lcssa208 : $$0175$ph$ph$lcssa216328;
   $$1186$$0185 = $68 ? $$1186$ph$lcssa : $$0185$ph$lcssa327;
   $69 = (($1) + ($$1176$$0175)|0);
   $70 = (($$1186$$0185) + 1)|0;
   $71 = (_memcmp($1,$69,$70)|0);
   $72 = ($71|0)==(0);
   if ($72) {
    $77 = (($$0187219$ph325326) - ($$1176$$0175))|0;
    $$0168 = $77;$$3178 = $$1176$$0175;
   } else {
    $73 = (($$0187219$ph325326) - ($$1186$$0185))|0;
    $74 = (($73) + -1)|0;
    $75 = ($$1186$$0185>>>0)>($74>>>0);
    $$1186$$0185$ = $75 ? $$1186$$0185 : $74;
    $76 = (($$1186$$0185$) + 1)|0;
    $$0168 = 0;$$3178 = $76;
   }
   $78 = $$0187219$ph325326 | 63;
   $79 = (($$0187219$ph325326) + -1)|0;
   $80 = ($$0168|0)!=(0);
   $81 = (($$0187219$ph325326) - ($$3178))|0;
   $$0166 = $0;$$0169 = 0;$$0170 = $0;
   while(1) {
    $82 = $$0170;
    $83 = $$0166;
    $84 = (($82) - ($83))|0;
    $85 = ($84>>>0)<($$0187219$ph325326>>>0);
    do {
     if ($85) {
      $86 = (_memchr($$0170,0,$78)|0);
      $87 = ($86|0)==(0|0);
      if ($87) {
       $91 = (($$0170) + ($78)|0);
       $$3173 = $91;
       break;
      } else {
       $88 = $86;
       $89 = (($88) - ($83))|0;
       $90 = ($89>>>0)<($$0187219$ph325326>>>0);
       if ($90) {
        $$3 = 0;
        break L35;
       } else {
        $$3173 = $86;
        break;
       }
      }
     } else {
      $$3173 = $$0170;
     }
    } while(0);
    $92 = (($$0166) + ($79)|0);
    $93 = HEAP8[$92>>0]|0;
    $div = ($93&255) >>> 5;
    $94 = $div&255;
    $95 = (($2) + ($94<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $93 & 31;
    $98 = $97&255;
    $99 = 1 << $98;
    $100 = $99 & $96;
    $101 = ($100|0)==(0);
    L49: do {
     if ($101) {
      $$0169$be = 0;$$2181$sink = $$0187219$ph325326;
     } else {
      $102 = $93&255;
      $103 = (($3) + ($102<<2)|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = (($$0187219$ph325326) - ($104))|0;
      $106 = ($105|0)==(0);
      if (!($106)) {
       $107 = ($$0169|0)!=(0);
       $or$cond = $80 & $107;
       $108 = ($105>>>0)<($$3178>>>0);
       $or$cond189 = $or$cond & $108;
       $$2181 = $or$cond189 ? $81 : $105;
       $$0169$be = 0;$$2181$sink = $$2181;
       break;
      }
      $110 = ($70>>>0)>($$0169>>>0);
      $111 = $110 ? $70 : $$0169;
      $112 = (($1) + ($111)|0);
      $113 = HEAP8[$112>>0]|0;
      $114 = ($113<<24>>24)==(0);
      L54: do {
       if ($114) {
        $$4 = $70;
       } else {
        $$3182221 = $111;$$pr = $113;
        while(1) {
         $115 = (($$0166) + ($$3182221)|0);
         $116 = HEAP8[$115>>0]|0;
         $117 = ($$pr<<24>>24)==($116<<24>>24);
         if (!($117)) {
          break;
         }
         $118 = (($$3182221) + 1)|0;
         $119 = (($1) + ($118)|0);
         $120 = HEAP8[$119>>0]|0;
         $121 = ($120<<24>>24)==(0);
         if ($121) {
          $$4 = $70;
          break L54;
         } else {
          $$3182221 = $118;$$pr = $120;
         }
        }
        $122 = (($$3182221) - ($$1186$$0185))|0;
        $$0169$be = 0;$$2181$sink = $122;
        break L49;
       }
      } while(0);
      while(1) {
       $123 = ($$4>>>0)>($$0169>>>0);
       if (!($123)) {
        $$3 = $$0166;
        break L35;
       }
       $124 = (($$4) + -1)|0;
       $125 = (($1) + ($124)|0);
       $126 = HEAP8[$125>>0]|0;
       $127 = (($$0166) + ($124)|0);
       $128 = HEAP8[$127>>0]|0;
       $129 = ($126<<24>>24)==($128<<24>>24);
       if ($129) {
        $$4 = $124;
       } else {
        $$0169$be = $$0168;$$2181$sink = $$3178;
        break;
       }
      }
     }
    } while(0);
    $109 = (($$0166) + ($$2181$sink)|0);
    $$0166 = $109;$$0169 = $$0169$be;$$0170 = $$3173;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function _nftw($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4112|0);
 $4 = sp;
 $5 = sp + 4|0;
 $6 = ($2|0)<(1);
 do {
  if ($6) {
   $$0 = 0;
  } else {
   $7 = (_strlen($0)|0);
   $8 = ($7>>>0)>(4096);
   if ($8) {
    $9 = (___errno_location()|0);
    HEAP32[$9>>2] = 36;
    $$0 = -1;
    break;
   } else {
    $10 = (($7) + 1)|0;
    _memcpy(($5|0),($0|0),($10|0))|0;
    (_pthread_setcancelstate(1,($4|0))|0);
    $11 = (_do_nftw($5,$1,$2,$3,0)|0);
    $12 = HEAP32[$4>>2]|0;
    (_pthread_setcancelstate(($12|0),(0|0))|0);
    $$0 = $11;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _do_nftw($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$$ = 0, $$08799 = 0, $$090 = 0, $$3 = 0, $$97 = 0, $$sink102 = 0, $$sink103 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond6 = 0, $switch$split2D = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $5 = sp + 28|0;
 $6 = sp + 8|0;
 $7 = sp;
 $8 = (_strlen($0)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  label = 3;
 } else {
  $10 = (($8) + -1)|0;
  $11 = (($0) + ($10)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(47);
  if ($13) {
   $87 = $10;
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $87 = $8;
 }
 $14 = $3 & 1;
 $15 = ($14|0)==(0);
 if ($15) {
  $18 = (_stat($0,$5)|0);
  $19 = ($18|0)<(0);
  if ($19) {
   $20 = (___errno_location()|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(2);
   if ($22) {
    $23 = (_lstat($0,$5)|0);
    $24 = ($23|0)==(0);
    if ($24) {
     $$090 = 7;
     label = 13;
    } else {
     label = 9;
    }
   } else {
    label = 9;
   }
  } else {
   label = 10;
  }
 } else {
  $16 = (_lstat($0,$5)|0);
  $17 = ($16|0)==(0);
  if ($17) {
   label = 10;
  } else {
   label = 9;
  }
 }
 L11: do {
  if ((label|0) == 9) {
   $25 = (___errno_location()|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(13);
   if ($27) {
    $$090 = 4;
    label = 13;
   } else {
    $$3 = -1;
   }
  }
  else if ((label|0) == 10) {
   $28 = ((($5)) + 12|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $29 & 61440;
   $trunc = $30&65535;
   $switch$split2D = ($trunc<<16>>16)<(16384);
   if ($switch$split2D) {
    switch ($trunc<<16>>16) {
    case -24576:  {
     break;
    }
    default: {
     $$090 = 1;
     label = 13;
     break L11;
    }
    }
    $36 = $14 << 1;
    $37 = $36 ^ 7;
    $$090 = $37;
    label = 13;
    break;
   } else {
    switch ($trunc<<16>>16) {
    case 16384:  {
     break;
    }
    default: {
     $$090 = 1;
     label = 13;
     break L11;
    }
    }
    $31 = (_access($0,4)|0);
    $32 = ($31|0)<(0);
    $33 = $3 >>> 1;
    $34 = $33 & 4;
    $35 = $34 | 2;
    $$$ = $32 ? 3 : $35;
    $$090 = $$$;
    label = 13;
    break;
   }
  }
 } while(0);
 L19: do {
  if ((label|0) == 13) {
   $38 = $3 & 2;
   $39 = ($38|0)!=(0);
   $40 = ($4|0)!=(0|0);
   $or$cond = $39 & $40;
   $41 = HEAP32[$5>>2]|0;
   if ($or$cond) {
    $42 = ((($4)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($41|0)==($43|0);
    if (!($44)) {
     $$3 = 0;
     break;
    }
   }
   HEAP32[$6>>2] = $4;
   $45 = ((($6)) + 4|0);
   HEAP32[$45>>2] = $41;
   $46 = ((($5)) + 72|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($6)) + 8|0);
   HEAP32[$48>>2] = $47;
   if ($40) {
    $49 = ((($4)) + 12|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($50) + 1)|0;
    $52 = ((($4)) + 16|0);
    $53 = HEAP32[$52>>2]|0;
    $$sink103 = $51;$62 = $53;
   } else {
    $54 = (_strrchr($0,47)|0);
    $55 = ($54|0)==(0|0);
    $56 = $54;
    $57 = $0;
    $58 = (($56) - ($57))|0;
    $$97 = $55 ? 0 : $58;
    $$sink103 = 0;$62 = $$97;
   }
   $$sink102 = (($8) + 1)|0;
   $59 = ((($6)) + 12|0);
   HEAP32[$59>>2] = $$sink103;
   $60 = ((($6)) + 16|0);
   HEAP32[$60>>2] = $$sink102;
   $61 = ((($7)) + 4|0);
   HEAP32[$61>>2] = $$sink103;
   HEAP32[$7>>2] = $62;
   $63 = $3 & 8;
   $64 = ($63|0)!=(0);
   if (!($64)) {
    $65 = (FUNCTION_TABLE_iiiii[$1 & 0]($0,$5,$$090,$7)|0);
    $66 = ($65|0)==(0);
    if (!($66)) {
     $$3 = $65;
     break;
    }
   }
   $67 = ($4|0)==(0|0);
   if (!($67)) {
    $68 = HEAP32[$5>>2]|0;
    $69 = HEAP32[$46>>2]|0;
    $$08799 = $4;
    while(1) {
     $70 = ((($$08799)) + 4|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($71|0)==($68|0);
     if ($72) {
      $73 = ((($$08799)) + 8|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = ($74|0)==($69|0);
      if ($75) {
       $$3 = 0;
       break L19;
      }
     }
     $76 = HEAP32[$$08799>>2]|0;
     $77 = ($76|0)==(0|0);
     if ($77) {
      break;
     } else {
      $$08799 = $76;
     }
    }
   }
   $78 = $$090 | 4;
   $79 = ($78|0)==(6);
   $80 = ($2|0)!=(0);
   $or$cond6 = $80 & $79;
   do {
    if ($or$cond6) {
     $81 = (_opendir($0)|0);
     $82 = ($81|0)==(0|0);
     if ($82) {
      $106 = (___errno_location()|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = ($107|0)==(13);
      if ($108) {
       break;
      } else {
       $$3 = -1;
       break L19;
      }
     }
     $83 = (_readdir($81)|0);
     $84 = ($83|0)==(0|0);
     L44: do {
      if (!($84)) {
       $85 = (4096 - ($8))|0;
       $86 = (($0) + ($87)|0);
       $88 = ((($86)) + 1|0);
       $89 = (($2) + -1)|0;
       $91 = $83;
       while(1) {
        $90 = ((($91)) + 11|0);
        $92 = HEAP8[$90>>0]|0;
        $93 = ($92<<24>>24)==(46);
        L48: do {
         if ($93) {
          $94 = ((($91)) + 12|0);
          $95 = HEAP8[$94>>0]|0;
          switch ($95<<24>>24) {
          case 0:  {
           break L48;
           break;
          }
          case 46:  {
           break;
          }
          default: {
           label = 32;
           break L48;
          }
          }
          $96 = ((($91)) + 13|0);
          $97 = HEAP8[$96>>0]|0;
          $98 = ($97<<24>>24)==(0);
          if (!($98)) {
           label = 32;
          }
         } else {
          label = 32;
         }
        } while(0);
        if ((label|0) == 32) {
         label = 0;
         $99 = (_strlen($90)|0);
         $100 = ($99>>>0)<($85>>>0);
         if (!($100)) {
          label = 33;
          break;
         }
         HEAP8[$86>>0] = 47;
         (_strcpy($88,$90)|0);
         $102 = (_do_nftw($0,$1,$89,$3,$6)|0);
         $103 = ($102|0)==(0);
         if (!($103)) {
          label = 36;
          break;
         }
        }
        $104 = (_readdir($81)|0);
        $105 = ($104|0)==(0|0);
        if ($105) {
         break L44;
        } else {
         $91 = $104;
        }
       }
       if ((label|0) == 33) {
        $101 = (___errno_location()|0);
        HEAP32[$101>>2] = 36;
        (_closedir($81)|0);
        $$3 = -1;
        break L19;
       }
       else if ((label|0) == 36) {
        (_closedir($81)|0);
        $$3 = $102;
        break L19;
       }
      }
     } while(0);
     (_closedir($81)|0);
    }
   } while(0);
   $109 = (($0) + ($8)|0);
   HEAP8[$109>>0] = 0;
   if ($64) {
    $110 = (FUNCTION_TABLE_iiiii[$1 & 0]($0,$5,$$090,$7)|0);
    $111 = ($110|0)==(0);
    if (!($111)) {
     $$3 = $110;
     break;
    }
   }
   $$3 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function _lstat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall196(196,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _access($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $3 = (___syscall33(33,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _strrchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($2) + 1)|0;
 $4 = (___memrchr($0,$1,$3)|0);
 return ($4|0);
}
function ___memrchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$09 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1&255;
 $$09 = $2;
 while(1) {
  $4 = (($$09) + -1)|0;
  $5 = ($$09|0)==(0);
  if ($5) {
   $$0 = 0;
   break;
  }
  $6 = (($0) + ($4)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==($3<<24>>24);
  if ($8) {
   $$0 = $6;
   break;
  } else {
   $$09 = $4;
  }
 }
 return ($$0|0);
}
function _ptsname($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ptsname_r($0,189503,22)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 189503;
 } else {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $1;
  $$0 = 0;
 }
 return ($$0|0);
}
function ___ptsname_r($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$8 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ($1|0)==(0|0);
 $$ = $4 ? 0 : $2;
 $5 = $3;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = -2147199952;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $5;
 $6 = (___syscall54(54,($vararg_buffer|0))|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $9 = HEAP32[$3>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $9;
  $10 = (_snprintf($1,$$,182608,$vararg_buffer3)|0);
  $11 = ($10>>>0)<($$>>>0);
  $$8 = $11 ? 0 : 34;
  $$0 = $$8;
 } else {
  $8 = (0 - ($6))|0;
  $$0 = $8;
 }
 STACKTOP = sp;return ($$0|0);
}
function _posix_openpt($0) {
 $0 = $0|0;
 var $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (_open(182620,$0,$vararg_buffer)|0);
 STACKTOP = sp;return ($1|0);
}
function _grantpt($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _unlockpt($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = sp + 4|0;
 HEAP32[$1>>2] = 0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (_ioctl($0,1074025521,$vararg_buffer)|0);
 STACKTOP = sp;return ($2|0);
}
function _realpath($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4304|0);
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 96|0;
 $3 = sp + 20|0;
 $4 = sp + 4272|0;
 $5 = sp + 176|0;
 $6 = ($0|0)==(0|0);
 do {
  if ($6) {
   $7 = (___errno_location()|0);
   HEAP32[$7>>2] = 22;
   $$0 = 0;
  } else {
   $8 = $0;
   HEAP32[$vararg_buffer>>2] = $8;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 2656256;
   $9 = (___syscall5(5,($vararg_buffer|0))|0);
   $10 = (___syscall_ret($9)|0);
   $11 = ($10|0)<(0);
   if ($11) {
    $$0 = 0;
   } else {
    ___procfdname($4,$10);
    $12 = (_readlink($4,$5,4095)|0);
    $13 = ($12|0)<(0);
    if (!($13)) {
     $14 = (($5) + ($12)|0);
     HEAP8[$14>>0] = 0;
     (_fstat($10,$2)|0);
     $15 = (_stat($5,$3)|0);
     $16 = ($15|0)<(0);
     if (!($16)) {
      $17 = HEAP32[$2>>2]|0;
      $18 = HEAP32[$3>>2]|0;
      $19 = ($17|0)==($18|0);
      if ($19) {
       $20 = ((($2)) + 72|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = ((($3)) + 72|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = ($21|0)==($23|0);
       if ($24) {
        HEAP32[$vararg_buffer2>>2] = $10;
        (___syscall6(6,($vararg_buffer2|0))|0);
        $27 = ($1|0)==(0|0);
        if ($27) {
         $29 = (FUNCTION_TABLE_ii[10 & 63]($5)|0);
         $$0 = $29;
         break;
        } else {
         $28 = (_strcpy($1,$5)|0);
         $$0 = $1;
         break;
        }
       }
      }
      $25 = ($15|0)==(0);
      if ($25) {
       $26 = (___errno_location()|0);
       HEAP32[$26>>2] = 40;
      }
     }
    }
    HEAP32[$vararg_buffer5>>2] = $10;
    (___syscall6(6,($vararg_buffer5|0))|0);
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _readlink($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $5 = (___syscall85(85,($vararg_buffer|0))|0);
 $6 = (___syscall_ret($5)|0);
 STACKTOP = sp;return ($6|0);
}
function _setdomainname($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $3 = (___syscall121(121,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _setpriority($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $3 = (___syscall97(97,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function ___setrlimit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 24|0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = 0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $3;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 0;
 $4 = (___syscall340(340,($vararg_buffer|0))|0);
 $5 = ($4|0)==(-38);
 if ($5) {
  $6 = $1;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + 4)|0;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11>>>0)<(0);
  $13 = ($8>>>0)<(4294967295);
  $14 = ($11|0)==(0);
  $15 = $14 & $13;
  $16 = $12 | $15;
  $17 = $16 ? $8 : -1;
  $16 ? $11 : 0;
  HEAP32[$2>>2] = $17;
  $18 = ((($1)) + 8|0);
  $19 = $18;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24>>>0)<(0);
  $26 = ($21>>>0)<(4294967295);
  $27 = ($24|0)==(0);
  $28 = $27 & $26;
  $29 = $25 | $28;
  $30 = $29 ? $21 : -1;
  $29 ? $24 : 0;
  $31 = ((($2)) + 4|0);
  HEAP32[$31>>2] = $30;
  $32 = $2;
  HEAP32[$vararg_buffer4>>2] = $0;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $32;
  $33 = (___syscall75(75,($vararg_buffer4|0))|0);
  $$0 = $33;
 } else {
  $$0 = $4;
 }
 STACKTOP = sp;return ($$0|0);
}
function _setrlimit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $1;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = -1;
 ___synccall(12,$2);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 0;
 } else {
  $7 = ($5|0)>(0);
  if ($7) {
   $8 = (___errno_location()|0);
   HEAP32[$8>>2] = $5;
   $$0 = -1;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _do_setrlimit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  $4 = ((($0)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$0>>2]|0;
  $7 = (___setrlimit($5,$6)|0);
  $8 = (0 - ($7))|0;
  HEAP32[$1>>2] = $8;
 }
 return;
}
function _setlogmask($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((185960|0));
 $1 = HEAP32[5969]|0;
 $2 = ($0|0)==(0);
 if (!($2)) {
  HEAP32[5969] = $0;
 }
 ___unlock((185960|0));
 return ($1|0);
}
function _closelog() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 (_pthread_setcancelstate(1,($0|0))|0);
 ___lock((185960|0));
 $1 = HEAP32[5970]|0;
 (_close($1)|0);
 HEAP32[5970] = -1;
 ___unlock((185960|0));
 $2 = HEAP32[$0>>2]|0;
 (_pthread_setcancelstate(($2|0),(0|0))|0);
 STACKTOP = sp;return;
}
function _openlog($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 (_pthread_setcancelstate(1,($3|0))|0);
 ___lock((185960|0));
 $4 = ($0|0)==(0|0);
 if ($4) {
  $$sink = 189525;
 } else {
  $5 = (_strnlen($0,31)|0);
  _memcpy((189525|0),($0|0),($5|0))|0;
  $6 = (189525 + ($5)|0);
  $$sink = $6;
 }
 HEAP8[$$sink>>0] = 0;
 HEAP32[46492] = $1;
 HEAP32[5971] = $2;
 $7 = $1 & 8;
 $8 = ($7|0)!=(0);
 $9 = HEAP32[5970]|0;
 $10 = ($9|0)<(0);
 $or$cond = $8 & $10;
 if ($or$cond) {
  ___openlog();
 }
 ___unlock((185960|0));
 $11 = HEAP32[$3>>2]|0;
 (_pthread_setcancelstate(($11|0),(0|0))|0);
 STACKTOP = sp;return;
}
function ___openlog() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_socket(1,524290,0)|0);
 HEAP32[5970] = $0;
 $1 = ($0|0)>(-1);
 if ($1) {
  (_connect($0,147026,12)|0);
 }
 return;
}
function _socket($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$017 = 0, $$old = 0, $$old18 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer2 = 0;
 var $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 72|0;
 $4 = sp + 48|0;
 HEAP32[$3>>2] = $0;
 $5 = ((($3)) + 4|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($3)) + 8|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($3)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($3)) + 16|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 20|0);
 HEAP32[$9>>2] = 0;
 $10 = $3;
 HEAP32[$vararg_buffer>>2] = 1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 $11 = (___syscall102(102,($vararg_buffer|0))|0);
 $12 = (___syscall_ret($11)|0);
 $13 = ($12|0)<(0);
 do {
  if ($13) {
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(22);
   if ($16) {
    $$old = $1 & 526336;
    $$old18 = ($$old|0)==(0);
    if ($$old18) {
     $$017 = $12;
     break;
    }
   } else {
    $17 = (___errno_location()|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)!=(93);
    $20 = $1 & 526336;
    $21 = ($20|0)==(0);
    $or$cond = $21 | $19;
    if ($or$cond) {
     $$017 = $12;
     break;
    }
   }
   HEAP32[$4>>2] = $0;
   $22 = ((($4)) + 4|0);
   $23 = $1 & -526337;
   HEAP32[$22>>2] = $23;
   $24 = ((($4)) + 8|0);
   HEAP32[$24>>2] = $2;
   $25 = ((($4)) + 12|0);
   HEAP32[$25>>2] = 0;
   $26 = ((($4)) + 16|0);
   HEAP32[$26>>2] = 0;
   $27 = ((($4)) + 20|0);
   HEAP32[$27>>2] = 0;
   $28 = $4;
   HEAP32[$vararg_buffer2>>2] = 1;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $28;
   $29 = (___syscall102(102,($vararg_buffer2|0))|0);
   $30 = (___syscall_ret($29)|0);
   $31 = ($30|0)<(0);
   if ($31) {
    $$017 = $30;
   } else {
    $32 = $1 & 524288;
    $33 = ($32|0)==(0);
    if (!($33)) {
     HEAP32[$vararg_buffer6>>2] = $30;
     $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
     HEAP32[$vararg_ptr9>>2] = 2;
     $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
     HEAP32[$vararg_ptr10>>2] = 1;
     (___syscall221(221,($vararg_buffer6|0))|0);
    }
    $34 = $1 & 2048;
    $35 = ($34|0)==(0);
    if ($35) {
     $$017 = $30;
    } else {
     HEAP32[$vararg_buffer11>>2] = $30;
     $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
     HEAP32[$vararg_ptr14>>2] = 4;
     $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
     HEAP32[$vararg_ptr15>>2] = 2048;
     (___syscall221(221,($vararg_buffer11|0))|0);
     $$017 = $30;
    }
   }
  } else {
   $$017 = $12;
  }
 } while(0);
 STACKTOP = sp;return ($$017|0);
}
function _connect($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 HEAP32[$3>>2] = $0;
 $4 = ((($3)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = ((($3)) + 8|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($3)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($3)) + 16|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 20|0);
 HEAP32[$9>>2] = 0;
 $10 = $3;
 HEAP32[$vararg_buffer>>2] = 3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 $11 = (___syscall102(102,($vararg_buffer|0))|0);
 $12 = (___syscall_ret($11)|0);
 STACKTOP = sp;return ($12|0);
}
function ___vsyslog($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[5969]|0;
 $5 = $0 & 7;
 $6 = 1 << $5;
 $7 = $4 & $6;
 $8 = ($7|0)==(0);
 $9 = ($0>>>0)>(1023);
 $or$cond = $9 | $8;
 if (!($or$cond)) {
  (_pthread_setcancelstate(1,($3|0))|0);
  ___lock((185960|0));
  __vsyslog($0,$1,$2);
  ___unlock((185960|0));
  $10 = HEAP32[$3>>2]|0;
  (_pthread_setcancelstate(($10|0),(0|0))|0);
 }
 STACKTOP = sp;return;
}
function __vsyslog($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$033 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1152|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1152|0);
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer = sp;
 $3 = sp + 1136|0;
 $4 = sp + 104|0;
 $5 = sp + 60|0;
 $6 = sp + 112|0;
 $7 = sp + 56|0;
 $8 = (___errno_location()|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[5970]|0;
 $11 = ($10|0)<(0);
 if ($11) {
  ___openlog();
 }
 $12 = $0 & 1016;
 $13 = ($12|0)==(0);
 $14 = HEAP32[5971]|0;
 $15 = $13 ? $14 : 0;
 $$0 = $15 | $0;
 $16 = (_time((0|0))|0);
 HEAP32[$4>>2] = $16;
 (_gmtime_r(($4|0),($5|0))|0);
 (_strftime(($3|0),16,(182630|0),($5|0))|0);
 $17 = HEAP32[46492]|0;
 $18 = $17 & 1;
 $19 = ($18|0)==(0);
 if ($19) {
  $22 = 0;
 } else {
  $20 = (_getpid()|0);
  $22 = $20;
 }
 $21 = ($22|0)==(0);
 $23 = $21&1;
 $24 = (182639 + ($23)|0);
 $25 = (182641 + ($23)|0);
 HEAP32[$vararg_buffer>>2] = $$0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $7;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 189525;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $24;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $22;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $25;
 $26 = (_snprintf($6,1024,182643,$vararg_buffer)|0);
 $27 = (___errno_location()|0);
 HEAP32[$27>>2] = $9;
 $28 = (($6) + ($26)|0);
 $29 = (1024 - ($26))|0;
 $30 = (_vsnprintf($28,$29,$1,$2)|0);
 $31 = ($30|0)>(-1);
 if ($31) {
  $32 = ($30>>>0)<($29>>>0);
  $33 = (($30) + ($26))|0;
  $$033 = $32 ? $33 : 1023;
  $34 = (($$033) + -1)|0;
  $35 = (($6) + ($34)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = ($36<<24>>24)==(10);
  if ($37) {
   $$1 = $$033;
  } else {
   $38 = (($6) + ($$033)|0);
   $39 = (($$033) + 1)|0;
   HEAP8[$38>>0] = 10;
   $$1 = $39;
  }
  $40 = HEAP32[5970]|0;
  $41 = (_send($40,$6,$$1,0)|0);
  $42 = ($41|0)<(0);
  do {
   if ($42) {
    $43 = (___errno_location()|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (_is_lost_conn($44)|0);
    $46 = ($45|0)==(0);
    if (!($46)) {
     $47 = HEAP32[5970]|0;
     $48 = (_connect($47,147026,12)|0);
     $49 = ($48|0)<(0);
     if (!($49)) {
      $50 = HEAP32[5970]|0;
      $51 = (_send($50,$6,$$1,0)|0);
      $52 = ($51|0)<(0);
      if (!($52)) {
       break;
      }
     }
    }
    $53 = HEAP32[46492]|0;
    $54 = $53 & 2;
    $55 = ($54|0)==(0);
    if (!($55)) {
     $56 = (_open(182665,524545,$vararg_buffer7)|0);
     $57 = ($56|0)>(-1);
     if ($57) {
      $58 = HEAP32[$7>>2]|0;
      $59 = (($$1) - ($58))|0;
      $60 = (($6) + ($58)|0);
      HEAP32[$vararg_buffer9>>2] = $59;
      $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
      HEAP32[$vararg_ptr12>>2] = $60;
      (_dprintf($56,182678,$vararg_buffer9)|0);
      (_close($56)|0);
     }
    }
   }
  } while(0);
  $61 = HEAP32[46492]|0;
  $62 = $61 & 32;
  $63 = ($62|0)==(0);
  if (!($63)) {
   $64 = HEAP32[$7>>2]|0;
   $65 = (($$1) - ($64))|0;
   $66 = (($6) + ($64)|0);
   HEAP32[$vararg_buffer13>>2] = $65;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = $66;
   (_dprintf(2,182678,$vararg_buffer13)|0);
  }
 }
 STACKTOP = sp;return;
}
function _send($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_sendto($0,$1,$2,$3,0,0)|0);
 return ($4|0);
}
function _is_lost_conn($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($0|0) {
 case 104: case 107: case 111:  {
  $2 = 1;
  break;
 }
 default: {
  $1 = ($0|0)==(32);
  $phitmp = $1&1;
  $2 = $phitmp;
 }
 }
 return ($2|0);
}
function _sendto($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $6 = sp + 8|0;
 HEAP32[$6>>2] = $0;
 $7 = ((($6)) + 4|0);
 $8 = $1;
 HEAP32[$7>>2] = $8;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = $2;
 $10 = ((($6)) + 12|0);
 HEAP32[$10>>2] = $3;
 $11 = ((($6)) + 16|0);
 $12 = $4;
 HEAP32[$11>>2] = $12;
 $13 = ((($6)) + 20|0);
 HEAP32[$13>>2] = $5;
 $14 = $6;
 HEAP32[$vararg_buffer>>2] = 11;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $14;
 $15 = (___syscall102(102,($vararg_buffer|0))|0);
 $16 = (___syscall_ret($15)|0);
 STACKTOP = sp;return ($16|0);
}
function _syslog($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 ___vsyslog($0,$1,$2);
 STACKTOP = sp;return;
}
function _wordexp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 (_pthread_setcancelstate(1,($3|0))|0);
 $4 = (_do_wordexp($0,$1,$2)|0);
 $5 = HEAP32[$3>>2]|0;
 (_pthread_setcancelstate(($5|0),(0|0))|0);
 STACKTOP = sp;return ($4|0);
}
function _do_wordexp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$0118 = 0, $$$0125 = 0, $$$0127 = 0, $$0 = 0, $$0116 = 0, $$0117 = 0, $$0118146 = 0, $$0123135 = 0, $$0125145 = 0, $$0127144 = 0, $$0129143 = 0, $$1$lcssa = 0, $$1119 = 0, $$1124 = 0, $$1126 = 0, $$1128 = 0, $$1130 = 0, $$1137 = 0, $$2 = 0;
 var $$2120 = 0, $$3 = 0, $$3121136 = 0, $$old1 = 0, $$pre = 0, $$pre148 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 160|0;
 $4 = sp + 32|0;
 $5 = $2 & 16;
 $6 = ($5|0)!=(0);
 $7 = $6 ? 189597 : 182683;
 $8 = $2 & 8;
 $9 = ($8|0)==(0);
 if (!($9)) {
  _wordfree($1);
 }
 $10 = $2 & 4;
 $11 = ($10|0)==(0);
 L4: do {
  if ($11) {
   label = 20;
  } else {
   $12 = HEAP8[$0>>0]|0;
   $13 = ($12<<24>>24)==(0);
   if ($13) {
    label = 20;
   } else {
    $$0118146 = 0;$$0125145 = 0;$$0127144 = 0;$$0129143 = 0;$15 = $12;
    while(1) {
     $14 = $15 << 24 >> 24;
     switch ($14|0) {
     case 92:  {
      $16 = ($$0125145|0)==(0);
      $17 = $16&1;
      $$$0118 = (($$0118146) + ($17))|0;
      $$1119 = $$$0118;$$1126 = $$0125145;$$1128 = $$0127144;$$1130 = $$0129143;
      break;
     }
     case 39:  {
      $18 = ($$0127144|0)==(0);
      $19 = $18&1;
      $$$0125 = $$0125145 ^ $19;
      $$1119 = $$0118146;$$1126 = $$$0125;$$1128 = $$0127144;$$1130 = $$0129143;
      break;
     }
     case 34:  {
      $20 = ($$0125145|0)==(0);
      $21 = $20&1;
      $$$0127 = $$0127144 ^ $21;
      $$1119 = $$0118146;$$1126 = $$0125145;$$1128 = $$$0127;$$1130 = $$0129143;
      break;
     }
     case 40:  {
      $cond = ($$0129143|0)==(0);
      if ($cond) {
       label = 13;
      } else {
       $22 = (($$0129143) + 1)|0;
       $$1119 = $$0118146;$$1126 = $$0125145;$$1128 = $$0127144;$$1130 = $22;
      }
      break;
     }
     case 41:  {
      $23 = ($$0129143|0)==(0);
      if ($23) {
       label = 13;
      } else {
       $24 = (($$0129143) + -1)|0;
       $$1119 = $$0118146;$$1126 = $$0125145;$$1128 = $$0127144;$$1130 = $24;
      }
      break;
     }
     case 125: case 123: case 62: case 60: case 59: case 38: case 124: case 10:  {
      label = 13;
      break;
     }
     case 36:  {
      $28 = ($$0125145|0)==(0);
      if ($28) {
       $29 = (($$0118146) + 1)|0;
       $30 = (($0) + ($29)|0);
       $31 = HEAP8[$30>>0]|0;
       $32 = ($31<<24>>24)==(40);
       if ($32) {
        $33 = (($$0118146) + 2)|0;
        $34 = (($0) + ($33)|0);
        $35 = HEAP8[$34>>0]|0;
        $36 = ($35<<24>>24)==(40);
        if (!($36)) {
         $$0 = 4;
         break L4;
        }
        $37 = (($$0129143) + 2)|0;
        $$1119 = $33;$$1126 = 0;$$1128 = $$0127144;$$1130 = $37;
       } else {
        $$1119 = $$0118146;$$1126 = 0;$$1128 = $$0127144;$$1130 = $$0129143;
       }
      } else {
       $$1119 = $$0118146;$$1126 = $$0125145;$$1128 = $$0127144;$$1130 = $$0129143;
      }
      break;
     }
     case 96:  {
      $$old1 = ($$0125145|0)==(0);
      if ($$old1) {
       $$0 = 4;
       break L4;
      } else {
       $$1119 = $$0118146;$$1126 = $$0125145;$$1128 = $$0127144;$$1130 = $$0129143;
      }
      break;
     }
     default: {
      $$1119 = $$0118146;$$1126 = $$0125145;$$1128 = $$0127144;$$1130 = $$0129143;
     }
     }
     if ((label|0) == 13) {
      label = 0;
      $25 = $$0127144 | $$0129143;
      $26 = $25 | $$0125145;
      $27 = ($26|0)==(0);
      if ($27) {
       $$0 = 2;
       break L4;
      } else {
       $$1119 = $$0118146;$$1126 = $$0125145;$$1128 = $$0127144;$$1130 = $$0129143;
      }
     }
     $38 = (($$1119) + 1)|0;
     $39 = (($0) + ($38)|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==(0);
     if ($41) {
      label = 20;
      break L4;
     } else {
      $$0118146 = $38;$$0125145 = $$1126;$$0127144 = $$1128;$$0129143 = $$1130;$15 = $40;
     }
    }
   }
  }
 } while(0);
 L24: do {
  if ((label|0) == 20) {
   $42 = $2 & 2;
   $43 = ($42|0)!=(0);
   if ($43) {
    $44 = HEAP32[$1>>2]|0;
    $45 = ((($1)) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    $$0116 = $46;$$0117 = $44;$109 = $46;
   } else {
    $$0116 = 0;$$0117 = 0;$109 = 0;
   }
   $47 = $2 & 1;
   $48 = ($47|0)!=(0);
   $49 = ((($1)) + 8|0);
   if ($48) {
    $50 = HEAP32[$49>>2]|0;
    $51 = ($50>>>0)>(268435455);
    if (!($51)) {
     $52 = (($50) + ($$0117))|0;
     $$2120 = $52;
     label = 26;
    }
   } else {
    HEAP32[$49>>2] = 0;
    $$2120 = $$0117;
    label = 26;
   }
   do {
    if ((label|0) == 26) {
     $53 = (_pipe2($3,524288)|0);
     $54 = ($53|0)<(0);
     if (!($54)) {
      ___block_all_sigs(($4|0));
      $55 = (_fork()|0);
      ___restore_sigs(($4|0));
      $56 = ($55|0)<(0);
      if ($56) {
       $57 = HEAP32[$3>>2]|0;
       (_close($57)|0);
       $58 = ((($3)) + 4|0);
       $59 = HEAP32[$58>>2]|0;
       (_close($59)|0);
       break;
      }
      $60 = ($55|0)==(0);
      $61 = ((($3)) + 4|0);
      $62 = HEAP32[$61>>2]|0;
      if ($60) {
       $63 = ($62|0)==(1);
       if ($63) {
        HEAP32[$vararg_buffer>>2] = 0;
        (_fcntl(1,2,$vararg_buffer)|0);
       } else {
        (_dup2($62,1)|0);
       }
       HEAP32[$vararg_buffer1>>2] = 184177;
       $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
       HEAP32[$vararg_ptr4>>2] = 182695;
       $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
       HEAP32[$vararg_ptr5>>2] = 184174;
       $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
       HEAP32[$vararg_ptr6>>2] = $0;
       $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
       HEAP32[$vararg_ptr7>>2] = $7;
       $vararg_ptr8 = ((($vararg_buffer1)) + 20|0);
       HEAP32[$vararg_ptr8>>2] = 0;
       (_execl((184180|0),(184174|0),($vararg_buffer1|0))|0);
       __exit(1);
       // unreachable;
      }
      (_close($62)|0);
      $64 = HEAP32[$3>>2]|0;
      $65 = (FUNCTION_TABLE_iii[13 & 31]($64,182725)|0);
      $66 = ($65|0)==(0|0);
      if ($66) {
       $67 = HEAP32[$3>>2]|0;
       (_close($67)|0);
       (_kill(($55|0),9)|0);
       _reap($55);
       break;
      }
      $68 = (_getword($65)|0);
      _free($68);
      $69 = (_feof($65)|0);
      $70 = ($69|0)==(0);
      if (!($70)) {
       (_fclose($65)|0);
       _reap($55);
       $$0 = 5;
       break L24;
      }
      $71 = (_getword($65)|0);
      $72 = ($71|0)==(0|0);
      L52: do {
       if ($72) {
        $$1$lcssa = $$0116;$94 = $$2120;
       } else {
        $73 = ($$0116|0)!=(0|0);
        $74 = (($$2120) + 1)|0;
        $75 = $73 ? $74 : 0;
        $$0123135 = $75;$$1137 = $$0116;$$3121136 = $$2120;$82 = $109;$86 = $71;
        while(1) {
         $76 = (($$3121136) + 1)|0;
         $77 = ($76>>>0)<($$0123135>>>0);
         if ($77) {
          $$1124 = $$0123135;$$2 = $$1137;$110 = $82;
         } else {
          $78 = $$0123135 >>> 1;
          $79 = (($$0123135) + 10)|0;
          $80 = (($79) + ($78))|0;
          $81 = $80 << 2;
          $83 = (_realloc($82,$81)|0);
          $84 = ($83|0)==(0|0);
          if ($84) {
           $$1$lcssa = $$1137;$94 = $$3121136;
           break L52;
          }
          $$1124 = $80;$$2 = $83;$110 = $83;
         }
         $85 = (($$2) + ($$3121136<<2)|0);
         HEAP32[$85>>2] = $86;
         $87 = (($$2) + ($76<<2)|0);
         HEAP32[$87>>2] = 0;
         $88 = (_getword($65)|0);
         $89 = ($88|0)==(0|0);
         if ($89) {
          $$1$lcssa = $$2;$94 = $76;
          break;
         } else {
          $$0123135 = $$1124;$$1137 = $$2;$$3121136 = $76;$82 = $110;$86 = $88;
         }
        }
       }
      } while(0);
      $90 = (_feof($65)|0);
      $91 = ($90|0)==(0);
      $$ = $91&1;
      (_fclose($65)|0);
      _reap($55);
      $92 = ($$1$lcssa|0)==(0|0);
      if ($92) {
       $93 = (($94) + 1)|0;
       $95 = (_calloc($93,4)|0);
       $$3 = $95;
      } else {
       $$3 = $$1$lcssa;
      }
      $96 = ((($1)) + 4|0);
      HEAP32[$96>>2] = $$3;
      HEAP32[$1>>2] = $94;
      if (!($48)) {
       $$0 = $$;
       break L24;
      }
      $97 = ($$3|0)==(0|0);
      $$pre148 = HEAP32[$49>>2]|0;
      if ($97) {
       $107 = $$pre148;
      } else {
       $98 = ($$pre148|0)==(0);
       if ($98) {
        $107 = 0;
       } else {
        $99 = (($$pre148) + -1)|0;
        $100 = (($$3) + ($99<<2)|0);
        HEAP32[$100>>2] = 0;
        $101 = ($99|0)==(0);
        if ($101) {
         $107 = $$pre148;
        } else {
         $103 = $99;
         while(1) {
          $$pre = HEAP32[$96>>2]|0;
          $102 = (($103) + -1)|0;
          $104 = (($$pre) + ($102<<2)|0);
          HEAP32[$104>>2] = 0;
          $105 = ($102|0)==(0);
          if ($105) {
           $107 = $$pre148;
           break;
          } else {
           $103 = $102;
          }
         }
        }
       }
      }
      $106 = (($94) - ($107))|0;
      HEAP32[$1>>2] = $106;
      $$0 = $$;
      break L24;
     }
    }
   } while(0);
   if ($43) {
    $$0 = 1;
   } else {
    HEAP32[$1>>2] = 0;
    $108 = ((($1)) + 4|0);
    HEAP32[$108>>2] = 0;
    $$0 = 1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _wordfree($0) {
 $0 = $0|0;
 var $$010 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0);
  if ($5) {
   $$lcssa = $2;
  } else {
   $6 = ((($0)) + 8|0);
   $$010 = 0;$10 = $2;
   while(1) {
    $7 = HEAP32[$6>>2]|0;
    $8 = (($7) + ($$010))|0;
    $9 = (($10) + ($8<<2)|0);
    $11 = HEAP32[$9>>2]|0;
    _free($11);
    $12 = (($$010) + 1)|0;
    $13 = HEAP32[$0>>2]|0;
    $14 = ($12>>>0)<($13>>>0);
    $15 = HEAP32[$1>>2]|0;
    if ($14) {
     $$010 = $12;$10 = $15;
    } else {
     $$lcssa = $15;
     break;
    }
   }
  }
  _free($$lcssa);
  HEAP32[$1>>2] = 0;
  HEAP32[$0>>2] = 0;
 }
 return;
}
function _reap($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 while(1) {
  $2 = (_waitpid(($0|0),($1|0),0)|0);
  $3 = ($2|0)<(0);
  if ($3) {
   $4 = (___errno_location()|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(4);
   if ($6) {
    continue;
   } else {
    break;
   }
  } else {
   $7 = HEAP32[$1>>2]|0;
   $8 = $7 & 127;
   $9 = ($8|0)==(0);
   if ($9) {
    break;
   } else {
    continue;
   }
  }
 }
 STACKTOP = sp;return;
}
function _getword($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = 0;
 HEAP32[$2>>2] = 0;
 $3 = (_getdelim($1,$2,0,$0)|0);
 $4 = ($3|0)<(0);
 $5 = HEAP32[$1>>2]|0;
 $6 = $4 ? 0 : $5;
 STACKTOP = sp;return ($6|0);
}
function _getdelim($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$087 = 0, $$088 = 0, $$089 = 0, $$1 = 0, $$190 = 0, $$pre = 0, $$pre97 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($3)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(-1);
 if ($6) {
  $7 = (___lockfile($3)|0);
  $13 = $7;
 } else {
  $13 = 0;
 }
 $8 = ($1|0)!=(0|0);
 $9 = ($0|0)!=(0|0);
 $or$cond = $9 & $8;
 L4: do {
  if ($or$cond) {
   $15 = HEAP32[$0>>2]|0;
   $16 = ($15|0)==(0|0);
   if ($16) {
    HEAP32[$1>>2] = 0;
   }
   $17 = ((($3)) + 4|0);
   $18 = ((($3)) + 8|0);
   $$089 = 0;
   while(1) {
    $19 = HEAP32[$17>>2]|0;
    $20 = HEAP32[$18>>2]|0;
    $21 = $19;
    $22 = (($20) - ($21))|0;
    $23 = (_memchr($19,$2,$22)|0);
    $24 = ($23|0)!=(0|0);
    $25 = $23;
    $26 = (1 - ($21))|0;
    $27 = (($26) + ($25))|0;
    $28 = $24 ? $27 : $22;
    $29 = (($28) + ($$089))|0;
    $30 = (($29) + 1)|0;
    $31 = HEAP32[$1>>2]|0;
    $32 = ($30>>>0)<($31>>>0);
    if ($32) {
     $$pre = HEAP32[$0>>2]|0;
     $47 = $$pre;$48 = $19;
    } else {
     $33 = (2147483647 - ($$089))|0;
     $34 = ($28>>>0)<($33>>>0);
     if (!($34)) {
      label = 27;
      break;
     }
     $35 = (($29) + 2)|0;
     $36 = ($23|0)==(0|0);
     $37 = ($35>>>0)<(1073741823);
     $or$cond3 = $36 & $37;
     $38 = $35 >>> 1;
     $39 = $or$cond3 ? $38 : 0;
     $$0 = (($39) + ($35))|0;
     $40 = HEAP32[$0>>2]|0;
     $41 = (_realloc($40,$$0)|0);
     $42 = ($41|0)==(0|0);
     if ($42) {
      $43 = HEAP32[$0>>2]|0;
      $44 = (_realloc($43,$35)|0);
      $45 = ($44|0)==(0|0);
      if ($45) {
       label = 27;
       break;
      } else {
       $$088 = $44;$$1 = $35;
      }
     } else {
      $$088 = $41;$$1 = $$0;
     }
     HEAP32[$0>>2] = $$088;
     HEAP32[$1>>2] = $$1;
     $$pre97 = HEAP32[$17>>2]|0;
     $47 = $$088;$48 = $$pre97;
    }
    $46 = (($47) + ($$089)|0);
    _memcpy(($46|0),($48|0),($28|0))|0;
    $49 = HEAP32[$17>>2]|0;
    $50 = (($49) + ($28)|0);
    HEAP32[$17>>2] = $50;
    if ($24) {
     $$190 = $29;
     break;
    }
    $51 = HEAP32[$18>>2]|0;
    $52 = ($50>>>0)<($51>>>0);
    if ($52) {
     $53 = ((($50)) + 1|0);
     HEAP32[$17>>2] = $53;
     $54 = HEAP8[$50>>0]|0;
     $55 = $54&255;
     $64 = $55;
    } else {
     $56 = (___uflow($3)|0);
     $57 = ($56|0)==(-1);
     if ($57) {
      label = 20;
      break;
     } else {
      $64 = $56;
     }
    }
    $63 = $64&255;
    $65 = HEAP32[$0>>2]|0;
    $66 = (($65) + ($29)|0);
    HEAP8[$66>>0] = $63;
    $sext = $64 << 24;
    $67 = $sext >> 24;
    $68 = ($67|0)==($2|0);
    if ($68) {
     $$190 = $30;
     break;
    } else {
     $$089 = $30;
    }
   }
   if ((label|0) == 27) {
    $72 = HEAP32[$3>>2]|0;
    $73 = $72 | 32;
    HEAP32[$3>>2] = $73;
    $74 = ($13|0)==(0);
    if (!($74)) {
     ___unlockfile($3);
    }
    $75 = (___errno_location()|0);
    HEAP32[$75>>2] = 12;
    $$087 = -1;
    break;
   }
   do {
    if ((label|0) == 20) {
     $58 = ($29|0)==(0);
     if (!($58)) {
      $59 = HEAP32[$3>>2]|0;
      $60 = $59 & 16;
      $61 = ($60|0)==(0);
      if (!($61)) {
       $$190 = $29;
       break;
      }
     }
     $62 = ($13|0)==(0);
     if ($62) {
      $$087 = -1;
      break L4;
     }
     ___unlockfile($3);
     $$087 = -1;
     break L4;
    }
   } while(0);
   $69 = HEAP32[$0>>2]|0;
   $70 = (($69) + ($$190)|0);
   HEAP8[$70>>0] = 0;
   $71 = ($13|0)==(0);
   if ($71) {
    $$087 = $$190;
   } else {
    ___unlockfile($3);
    $$087 = $$190;
   }
  } else {
   $10 = HEAP32[$3>>2]|0;
   $11 = $10 | 32;
   HEAP32[$3>>2] = $11;
   $12 = ($13|0)==(0);
   if (!($12)) {
    ___unlockfile($3);
   }
   $14 = (___errno_location()|0);
   HEAP32[$14>>2] = 22;
   $$087 = -1;
  }
 } while(0);
 return ($$087|0);
}
function ___madvise($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $0;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall219(219,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _mincore($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $2;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $4;
 $5 = (___syscall218(218,($vararg_buffer|0))|0);
 $6 = (___syscall_ret($5)|0);
 STACKTOP = sp;return ($6|0);
}
function _mlock($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $3 = (___syscall150(150,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _mlockall($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (___syscall152(152,($vararg_buffer|0))|0);
 $2 = (___syscall_ret($1)|0);
 STACKTOP = sp;return ($2|0);
}
function ___mmap($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $6 = ($5|0)<(0);
 $7 = $6 << 31 >> 31;
 $8 = $5 & 4095;
 $9 = $7 & -4096;
 $10 = ($8|0)==(0);
 $11 = ($9|0)==(0);
 $12 = $10 & $11;
 do {
  if ($12) {
   $14 = ($1>>>0)>(2147483646);
   if ($14) {
    $15 = (___errno_location()|0);
    HEAP32[$15>>2] = 12;
    $$0 = (-1);
    break;
   }
   $16 = $3 & 16;
   $17 = ($16|0)==(0);
   if (!($17)) {
    FUNCTION_TABLE_v[8 & 31]();
   }
   $18 = $0;
   $19 = $5 >> 12;
   HEAP32[$vararg_buffer>>2] = $18;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $1;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $2;
   $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $3;
   $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
   HEAP32[$vararg_ptr4>>2] = $4;
   $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
   HEAP32[$vararg_ptr5>>2] = $19;
   $20 = (___syscall192(192,($vararg_buffer|0))|0);
   $21 = (___syscall_ret($20)|0);
   $22 = $21;
   $$0 = $22;
  } else {
   $13 = (___errno_location()|0);
   HEAP32[$13>>2] = 22;
   $$0 = (-1);
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___mprotect($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $3 & -16384;
 $5 = (($0) + ($1)|0);
 $6 = ((($5)) + 16384|0);
 $7 = ((($6)) + -1|0);
 $8 = $7;
 $9 = $8 & -16384;
 $10 = (($9) - ($4))|0;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $11 = (___syscall125(125,($vararg_buffer|0))|0);
 $12 = (___syscall_ret($11)|0);
 STACKTOP = sp;return ($12|0);
}
function ___mremap($0,$1,$2,$3,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $varargs = $varargs|0;
 var $$0 = 0, $$09 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0;
 var $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $phitmp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $4 = sp + 24|0;
 $5 = ($2>>>0)>(2147483646);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 12;
  $$0 = (-1);
 } else {
  $7 = $3 & 2;
  $8 = ($7|0)==(0);
  if ($8) {
   $$09 = 0;
  } else {
   FUNCTION_TABLE_v[8 & 31]();
   HEAP32[$4>>2] = $varargs;
   $arglist_current = HEAP32[$4>>2]|0;
   $9 = $arglist_current;
   $10 = ((0) + 4|0);
   $expanded2 = $10;
   $expanded = (($expanded2) - 1)|0;
   $11 = (($9) + ($expanded))|0;
   $12 = ((0) + 4|0);
   $expanded6 = $12;
   $expanded5 = (($expanded6) - 1)|0;
   $expanded4 = $expanded5 ^ -1;
   $13 = $11 & $expanded4;
   $14 = $13;
   $15 = HEAP32[$14>>2]|0;
   $arglist_next = ((($14)) + 4|0);
   HEAP32[$4>>2] = $arglist_next;
   $phitmp = $15;
   $$09 = $phitmp;
  }
  $16 = $0;
  HEAP32[$vararg_buffer>>2] = $16;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $1;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $2;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $3;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $$09;
  $17 = (___syscall163(163,($vararg_buffer|0))|0);
  $18 = (___syscall_ret($17)|0);
  $19 = $18;
  $$0 = $19;
 }
 STACKTOP = sp;return ($$0|0);
}
function _msync($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $0;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall144(144,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _munlock($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $3 = (___syscall151(151,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _munlockall() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (___syscall153(153,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _posix_madvise($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = ($2|0)==(4);
 if ($3) {
  $$0 = 0;
 } else {
  $4 = $0;
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $1;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $2;
  $5 = (___syscall219(219,($vararg_buffer|0))|0);
  $6 = (0 - ($5))|0;
  $$0 = $6;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___shm_mapname($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$018 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $$018 = $0;
 while(1) {
  $2 = HEAP8[$$018>>0]|0;
  $3 = ($2<<24>>24)==(47);
  $4 = ((($$018)) + 1|0);
  if ($3) {
   $$018 = $4;
  } else {
   break;
  }
 }
 $5 = (___strchrnul($$018,47)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)!=(0);
 $8 = ($5|0)==($$018|0);
 $or$cond = $8 | $7;
 do {
  if ($or$cond) {
   label = 7;
  } else {
   $9 = $5;
   $10 = $$018;
   $11 = (($9) - ($10))|0;
   $12 = ($11|0)<(3);
   if ($12) {
    $13 = HEAP8[$$018>>0]|0;
    $14 = ($13<<24>>24)==(46);
    if ($14) {
     $15 = ((($5)) + -1|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(46);
     if ($17) {
      label = 7;
      break;
     }
    }
   } else {
    $19 = ($11|0)>(255);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 36;
     $$0 = 0;
     break;
    }
   }
   dest=$1; src=182727; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $21 = ((($1)) + 9|0);
   $22 = (($11) + 1)|0;
   _memcpy(($21|0),($$018|0),($22|0))|0;
   $$0 = $1;
  }
 } while(0);
 if ((label|0) == 7) {
  $18 = (___errno_location()|0);
  HEAP32[$18>>2] = 22;
  $$0 = 0;
 }
 return ($$0|0);
}
function _shm_open($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $vararg_buffer = sp;
 $3 = sp + 4|0;
 $4 = sp + 8|0;
 $5 = (___shm_mapname($0,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = -1;
 } else {
  $7 = $1 | 657408;
  (_pthread_setcancelstate(1,($3|0))|0);
  HEAP32[$vararg_buffer>>2] = $2;
  $8 = (_open($5,$7,$vararg_buffer)|0);
  $9 = HEAP32[$3>>2]|0;
  (_pthread_setcancelstate(($9|0),(0|0))|0);
  $$0 = $8;
 }
 STACKTOP = sp;return ($$0|0);
}
function _shm_unlink($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $1 = sp;
 $2 = (___shm_mapname($0,$1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = -1;
 } else {
  $4 = (_unlink($2)|0);
  $$0 = $4;
 }
 STACKTOP = sp;return ($$0|0);
}
function _unlink($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall10(10,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _btowc($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 & 255;
 $2 = ($1>>>0)<(128);
 if ($2) {
  return ($1|0);
 } else {
  $3 = (___pthread_self_412()|0);
  $4 = ((($3)) + 188|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  $8 = ($0|0)!=(-1);
  $or$cond = $8 & $7;
  $sext = $0 << 24;
  $9 = $sext >> 24;
  $10 = $9 & 57343;
  $$ = $or$cond ? $10 : -1;
  return ($$|0);
 }
 return (0)|0;
}
function ___pthread_self_412() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _c16rtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$018 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)!=(0|0);
 $$ = $3 ? $2 : 185972;
 $4 = ($0|0)==(0|0);
 $5 = HEAP32[$$>>2]|0;
 $6 = ($5|0)!=(0);
 do {
  if ($4) {
   if ($6) {
    label = 9;
   } else {
    $$018 = 1;
   }
  } else {
   $7 = $1&65535;
   $$pre = $7 & 64512;
   if ($6) {
    $11 = ($$pre|0)==(56320);
    if (!($11)) {
     label = 9;
     break;
    }
    $12 = (($7) + -56320)|0;
    $13 = (($12) + ($5))|0;
    HEAP32[$$>>2] = 0;
    $$0 = $13;
   } else {
    $8 = ($$pre|0)==(55296);
    if ($8) {
     $9 = $7 << 10;
     $10 = (($9) + -56557568)|0;
     HEAP32[$$>>2] = $10;
     $$018 = 0;
     break;
    } else {
     $$0 = $7;
    }
   }
   $14 = (_wcrtomb($0,$$0,0)|0);
   $$018 = $14;
  }
 } while(0);
 if ((label|0) == 9) {
  HEAP32[$$>>2] = 0;
  $15 = (___errno_location()|0);
  HEAP32[$15>>2] = 84;
  $$018 = -1;
 }
 return ($$018|0);
}
function _c32rtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_wcrtomb($0,$1,$2)|0);
 return ($3|0);
}
function _mblen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_mbtowc(0,$0,$1)|0);
 return ($2|0);
}
function _mbrlen($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)!=(0|0);
 $4 = $3 ? $2 : 185976;
 $5 = (_mbrtowc(0,$0,$1,$4)|0);
 return ($5|0);
}
function _mbrtoc16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($3|0)!=(0|0);
 $$ = $5 ? $3 : 185980;
 $6 = ($1|0)==(0|0);
 do {
  if ($6) {
   $7 = (_mbrtoc16(0,189597,1,$$)|0);
   $$0 = $7;
  } else {
   $8 = HEAP32[$$>>2]|0;
   $9 = ($8|0)>(0);
   if ($9) {
    $10 = ($0|0)==(0|0);
    if (!($10)) {
     $11 = $8&65535;
     HEAP16[$0>>1] = $11;
    }
    HEAP32[$$>>2] = 0;
    $$0 = -3;
    break;
   }
   $12 = (_mbrtowc($4,$1,$2,$$)|0);
   $13 = ($12>>>0)<(5);
   if ($13) {
    $14 = HEAP32[$4>>2]|0;
    $15 = ($14|0)>(65535);
    if ($15) {
     $16 = $14 & 1023;
     $17 = $16 | 56320;
     HEAP32[$$>>2] = $17;
     $18 = $14 >>> 10;
     $19 = (($18) + 55232)|0;
     HEAP32[$4>>2] = $19;
     $22 = $19;
    } else {
     $22 = $14;
    }
    $20 = ($0|0)==(0|0);
    if (!($20)) {
     $21 = $22&65535;
     HEAP16[$0>>1] = $21;
    }
   }
   $$0 = $12;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _mbrtoc32($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($3|0)!=(0|0);
 $$ = $5 ? $3 : 185984;
 $6 = ($1|0)==(0|0);
 if ($6) {
  $7 = (_mbrtoc32(0,189597,1,$$)|0);
  $$0 = $7;
 } else {
  $8 = (_mbrtowc($4,$1,$2,$$)|0);
  $9 = ($8>>>0)<(5);
  $10 = ($0|0)!=(0|0);
  $or$cond = $10 & $9;
  if ($or$cond) {
   $11 = HEAP32[$4>>2]|0;
   HEAP32[$0>>2] = $11;
  }
  $$0 = $8;
 }
 STACKTOP = sp;return ($$0|0);
}
function _mbsnrtowcs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$04975 = 0, $$05274 = 0, $$055$ = 0, $$05573 = 0, $$064 = 0, $$076 = 0, $$1 = 0, $$150 = 0, $$153 = 0, $$156 = 0, $$25170 = 0, $$25469 = 0, $$257 = 0, $$271 = 0, $$3 = 0, $$35868 = 0, $$59 = 0, $$cast = 0, $$pr$pre = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond72 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1040|0);
 $5 = sp + 8|0;
 $6 = sp;
 $7 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $7;
 $8 = ($0|0)!=(0|0);
 $$ = $8 ? $3 : 256;
 $$59 = $8 ? $0 : $5;
 $$cast = $7;
 $9 = ($7|0)!=(0);
 $10 = ($$|0)!=(0);
 $or$cond72 = $10 & $9;
 L1: do {
  if ($or$cond72) {
   $$04975 = 0;$$05274 = $2;$$05573 = $$;$$076 = $$59;$44 = $$cast;
   while(1) {
    $11 = $$05274 >>> 2;
    $12 = ($11>>>0)>=($$05573>>>0);
    $13 = ($$05274>>>0)>(131);
    $14 = $13 | $12;
    if (!($14)) {
     $$064 = $$076;$$150 = $$04975;$$153 = $$05274;$$257 = $$05573;$26 = $44;
     break L1;
    }
    $$055$ = $12 ? $$05573 : $11;
    $15 = (($$05274) - ($$055$))|0;
    $16 = (_mbsrtowcs($$076,$6,$$055$,$4)|0);
    $17 = ($16|0)==(-1);
    if ($17) {
     break;
    }
    $18 = ($$076|0)==($5|0);
    $19 = (($$076) + ($16<<2)|0);
    $20 = $18 ? 0 : $16;
    $$156 = (($$05573) - ($20))|0;
    $$1 = $18 ? $$076 : $19;
    $21 = (($16) + ($$04975))|0;
    $22 = HEAP32[$6>>2]|0;
    $23 = ($22|0)!=(0|0);
    $24 = ($$156|0)!=(0);
    $or$cond = $24 & $23;
    if ($or$cond) {
     $$04975 = $21;$$05274 = $15;$$05573 = $$156;$$076 = $$1;$44 = $22;
    } else {
     $$064 = $$1;$$150 = $21;$$153 = $15;$$257 = $$156;$26 = $22;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$6>>2]|0;
   $$064 = $$076;$$150 = -1;$$153 = $15;$$257 = 0;$26 = $$pr$pre;
  } else {
   $$064 = $$59;$$150 = 0;$$153 = $2;$$257 = $$;$26 = $$cast;
  }
 } while(0);
 $25 = ($26|0)==(0|0);
 L8: do {
  if ($25) {
   $$3 = $$150;
  } else {
   $27 = ($$257|0)!=(0);
   $28 = ($$153|0)!=(0);
   $29 = $27 & $28;
   if ($29) {
    $$25170 = $$150;$$25469 = $$153;$$271 = $$064;$$35868 = $$257;$30 = $26;
    while(1) {
     $31 = (_mbrtowc($$271,$30,$$25469,$4)|0);
     $32 = (($31) + 2)|0;
     $33 = ($32>>>0)<(3);
     if ($33) {
      break;
     }
     $34 = HEAP32[$6>>2]|0;
     $35 = (($34) + ($31)|0);
     HEAP32[$6>>2] = $35;
     $36 = (($$25469) - ($31))|0;
     $37 = ((($$271)) + 4|0);
     $38 = (($$35868) + -1)|0;
     $39 = (($$25170) + 1)|0;
     $40 = ($38|0)!=(0);
     $41 = ($36|0)!=(0);
     $42 = $40 & $41;
     if ($42) {
      $$25170 = $39;$$25469 = $36;$$271 = $37;$$35868 = $38;$30 = $35;
     } else {
      $$3 = $39;
      break L8;
     }
    }
    switch ($31|0) {
    case -1:  {
     $$3 = -1;
     break L8;
     break;
    }
    case 0:  {
     HEAP32[$6>>2] = 0;
     $$3 = $$25170;
     break L8;
     break;
    }
    default: {
     HEAP32[$4>>2] = 0;
     $$3 = $$25170;
     break L8;
    }
    }
   } else {
    $$3 = $$150;
   }
  }
 } while(0);
 if ($8) {
  $43 = HEAP32[$6>>2]|0;
  HEAP32[$1>>2] = $43;
 }
 STACKTOP = sp;return ($$3|0);
}
function _mbsrtowcs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0100$lcssa = 0, $$0100136 = 0, $$0107135 = 0, $$0113134 = 0, $$099 = 0, $$10 = 0, $$1101 = 0, $$1101$ph = 0, $$1108$ph = 0, $$1108138 = 0, $$11124 = 0, $$1114 = 0, $$1114$ph = 0, $$11163 = 0, $$2 = 0, $$2102144 = 0, $$2109 = 0, $$2115143 = 0, $$3103 = 0, $$3110 = 0;
 var $$3116 = 0, $$4 = 0, $$4104 = 0, $$4111 = 0, $$4117 = 0, $$5 = 0, $$5105 = 0, $$5112 = 0, $$5112123 = 0, $$5112162 = 0, $$5118$ph = 0, $$5118137 = 0, $$6 = 0, $$6106$lcssa = 0, $$6106$ph = 0, $$6106139 = 0, $$6119 = 0, $$7 = 0, $$7120 = 0, $$8 = 0;
 var $$8121 = 0, $$9 = 0, $$9$sink = 0, $$9122 = 0, $$9122161 = 0, $$old1 = 0, $$pre$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($3|0)==(0|0);
 if ($5) {
  label = 5;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   label = 5;
  } else {
   $8 = ($0|0)==(0|0);
   if ($8) {
    $$2 = $6;$$4104 = $4;$$4117 = $2;
    label = 25;
   } else {
    HEAP32[$3>>2] = 0;
    $$4 = $6;$$4111 = $0;$$8121 = $2;$$9 = $4;
    label = 43;
   }
  }
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = (___pthread_self_420()|0);
   $10 = ((($9)) + 188|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   $14 = ($0|0)!=(0|0);
   if (!($13)) {
    if ($14) {
     $$1108$ph = $0;$$5118$ph = $2;$$6106$ph = $4;
     label = 15;
     break;
    } else {
     $$1101$ph = $4;$$1114$ph = $2;
     label = 14;
     break;
    }
   }
   if (!($14)) {
    $16 = (_strlen($4)|0);
    $$099 = $16;
    label = 59;
    break;
   }
   $15 = ($2|0)==(0);
   L13: do {
    if ($15) {
     $$0100$lcssa = $4;
    } else {
     $$0100136 = $4;$$0107135 = $0;$$0113134 = $2;
     while(1) {
      $17 = HEAP8[$$0100136>>0]|0;
      $18 = ($17<<24>>24)==(0);
      if ($18) {
       break;
      }
      $19 = ((($$0100136)) + 1|0);
      $20 = $17 << 24 >> 24;
      $21 = $20 & 57343;
      $22 = ((($$0107135)) + 4|0);
      HEAP32[$$0107135>>2] = $21;
      $23 = (($$0113134) + -1)|0;
      $24 = ($23|0)==(0);
      if ($24) {
       $$0100$lcssa = $19;
       break L13;
      } else {
       $$0100136 = $19;$$0107135 = $22;$$0113134 = $23;
      }
     }
     HEAP32[$$0107135>>2] = 0;
     HEAP32[$1>>2] = 0;
     $25 = (($2) - ($$0113134))|0;
     $$099 = $25;
     label = 59;
     break L5;
    }
   } while(0);
   HEAP32[$1>>2] = $$0100$lcssa;
   $$099 = $2;
   label = 59;
  }
 } while(0);
 L19: while(1) {
  L20: do {
   if ((label|0) == 14) {
    label = 0;
    $$1101 = $$1101$ph;$$1114 = $$1114$ph;
    while(1) {
     $27 = HEAP8[$$1101>>0]|0;
     $28 = $27&255;
     $29 = (($28) + -1)|0;
     $30 = ($29>>>0)<(127);
     if ($30) {
      $31 = $$1101;
      $32 = $31 & 3;
      $33 = ($32|0)==(0);
      if ($33) {
       $34 = HEAP32[$$1101>>2]|0;
       $35 = (($34) + -16843009)|0;
       $36 = $35 | $34;
       $37 = $36 & -2139062144;
       $38 = ($37|0)==(0);
       $39 = $34&255;
       if ($38) {
        $$2102144 = $$1101;$$2115143 = $$1114;
        while(1) {
         $40 = ((($$2102144)) + 4|0);
         $41 = (($$2115143) + -4)|0;
         $42 = HEAP32[$40>>2]|0;
         $43 = (($42) + -16843009)|0;
         $44 = $43 | $42;
         $45 = $44 & -2139062144;
         $46 = ($45|0)==(0);
         if ($46) {
          $$2102144 = $40;$$2115143 = $41;
         } else {
          break;
         }
        }
        $47 = $42&255;
        $$3103 = $40;$$3116 = $41;$49 = $47;
       } else {
        $$3103 = $$1101;$$3116 = $$1114;$49 = $39;
       }
      } else {
       $$3103 = $$1101;$$3116 = $$1114;$49 = $27;
      }
     } else {
      $$3103 = $$1101;$$3116 = $$1114;$49 = $27;
     }
     $48 = $49&255;
     $50 = (($48) + -1)|0;
     $51 = ($50>>>0)<(127);
     if (!($51)) {
      break;
     }
     $52 = ((($$3103)) + 1|0);
     $53 = (($$3116) + -1)|0;
     $$1101 = $52;$$1114 = $53;
    }
    $54 = (($48) + -194)|0;
    $55 = ($54>>>0)>(50);
    if ($55) {
     $$11163 = $$3103;$$5112162 = $0;$$9122161 = $$3116;
     label = 53;
    } else {
     $56 = ((($$3103)) + 1|0);
     $57 = (7132 + ($54<<2)|0);
     $58 = HEAP32[$57>>2]|0;
     $$2 = $58;$$4104 = $56;$$4117 = $$3116;
     label = 25;
     continue L19;
    }
   }
   else if ((label|0) == 15) {
    label = 0;
    $26 = ($$5118$ph|0)==(0);
    L22: do {
     if ($26) {
      $$6106$lcssa = $$6106$ph;
     } else {
      $$1108138 = $$1108$ph;$$5118137 = $$5118$ph;$$6106139 = $$6106$ph;
      while(1) {
       $81 = HEAP8[$$6106139>>0]|0;
       $82 = $81&255;
       $83 = (($82) + -1)|0;
       $84 = ($83>>>0)<(127);
       do {
        if ($84) {
         $85 = $$6106139;
         $86 = $85 & 3;
         $87 = ($86|0)==(0);
         $88 = ($$5118137>>>0)>(4);
         $or$cond = $88 & $87;
         if ($or$cond) {
          $$2109 = $$1108138;$$6119 = $$5118137;$$7 = $$6106139;
          while(1) {
           $89 = HEAP32[$$7>>2]|0;
           $90 = (($89) + -16843009)|0;
           $91 = $90 | $89;
           $92 = $91 & -2139062144;
           $93 = ($92|0)==(0);
           if (!($93)) {
            label = 38;
            break;
           }
           $94 = ((($$7)) + 1|0);
           $95 = $89 & 255;
           $96 = ((($$2109)) + 4|0);
           HEAP32[$$2109>>2] = $95;
           $97 = ((($$7)) + 2|0);
           $98 = HEAP8[$94>>0]|0;
           $99 = $98&255;
           $100 = ((($$2109)) + 8|0);
           HEAP32[$96>>2] = $99;
           $101 = ((($$7)) + 3|0);
           $102 = HEAP8[$97>>0]|0;
           $103 = $102&255;
           $104 = ((($$2109)) + 12|0);
           HEAP32[$100>>2] = $103;
           $105 = ((($$7)) + 4|0);
           $106 = HEAP8[$101>>0]|0;
           $107 = $106&255;
           $108 = ((($$2109)) + 16|0);
           HEAP32[$104>>2] = $107;
           $109 = (($$6119) + -4)|0;
           $$old1 = ($109>>>0)>(4);
           if ($$old1) {
            $$2109 = $108;$$6119 = $109;$$7 = $105;
           } else {
            label = 37;
            break;
           }
          }
          if ((label|0) == 37) {
           label = 0;
           $$pre$pre = HEAP8[$105>>0]|0;
           $$3110 = $108;$$7120 = $109;$$8 = $105;$112 = $$pre$pre;
           break;
          }
          else if ((label|0) == 38) {
           label = 0;
           $110 = $89&255;
           $$3110 = $$2109;$$7120 = $$6119;$$8 = $$7;$112 = $110;
           break;
          }
         } else {
          $$3110 = $$1108138;$$7120 = $$5118137;$$8 = $$6106139;$112 = $81;
         }
        } else {
         $$3110 = $$1108138;$$7120 = $$5118137;$$8 = $$6106139;$112 = $81;
        }
       } while(0);
       $111 = $112&255;
       $113 = (($111) + -1)|0;
       $114 = ($113>>>0)<(127);
       if (!($114)) {
        break;
       }
       $115 = ((($$8)) + 1|0);
       $116 = ((($$3110)) + 4|0);
       HEAP32[$$3110>>2] = $111;
       $117 = (($$7120) + -1)|0;
       $118 = ($117|0)==(0);
       if ($118) {
        $$6106$lcssa = $115;
        break L22;
       } else {
        $$1108138 = $116;$$5118137 = $117;$$6106139 = $115;
       }
      }
      $119 = (($111) + -194)|0;
      $120 = ($119>>>0)>(50);
      if ($120) {
       $$11163 = $$8;$$5112162 = $$3110;$$9122161 = $$7120;
       label = 53;
       break L20;
      }
      $121 = ((($$8)) + 1|0);
      $122 = (7132 + ($119<<2)|0);
      $123 = HEAP32[$122>>2]|0;
      $$4 = $123;$$4111 = $$3110;$$8121 = $$7120;$$9 = $121;
      label = 43;
      continue L19;
     }
    } while(0);
    HEAP32[$1>>2] = $$6106$lcssa;
    $$099 = $2;
    label = 59;
    continue L19;
   }
   else if ((label|0) == 25) {
    label = 0;
    $59 = HEAP8[$$4104>>0]|0;
    $60 = $59&255;
    $61 = $60 >>> 3;
    $62 = (($61) + -16)|0;
    $63 = $$2 >> 26;
    $64 = (($61) + ($63))|0;
    $65 = $62 | $64;
    $66 = ($65>>>0)>(7);
    if ($66) {
     $$5112 = $0;$$6 = $$2;$$9$sink = $$4104;$$9122 = $$4117;
     label = 52;
    } else {
     $67 = ((($$4104)) + 1|0);
     $68 = $$2 & 33554432;
     $69 = ($68|0)==(0);
     if ($69) {
      $$5105 = $67;
     } else {
      $70 = HEAP8[$67>>0]|0;
      $71 = $70 & -64;
      $72 = ($71<<24>>24)==(-128);
      if (!($72)) {
       $$5112 = $0;$$6 = $$2;$$9$sink = $$4104;$$9122 = $$4117;
       label = 52;
       break;
      }
      $73 = ((($$4104)) + 2|0);
      $74 = $$2 & 524288;
      $75 = ($74|0)==(0);
      if ($75) {
       $$5105 = $73;
      } else {
       $76 = HEAP8[$73>>0]|0;
       $77 = $76 & -64;
       $78 = ($77<<24>>24)==(-128);
       if (!($78)) {
        $$5112 = $0;$$6 = $$2;$$9$sink = $$4104;$$9122 = $$4117;
        label = 52;
        break;
       }
       $79 = ((($$4104)) + 3|0);
       $$5105 = $79;
      }
     }
     $80 = (($$4117) + -1)|0;
     $$1101$ph = $$5105;$$1114$ph = $80;
     label = 14;
     continue L19;
    }
   }
   else if ((label|0) == 43) {
    label = 0;
    $124 = HEAP8[$$9>>0]|0;
    $125 = $124&255;
    $126 = $125 >>> 3;
    $127 = (($126) + -16)|0;
    $128 = $$4 >> 26;
    $129 = (($126) + ($128))|0;
    $130 = $127 | $129;
    $131 = ($130>>>0)>(7);
    if ($131) {
     $$5112 = $$4111;$$6 = $$4;$$9$sink = $$9;$$9122 = $$8121;
     label = 52;
    } else {
     $132 = $$4 << 6;
     $133 = ((($$9)) + 1|0);
     $134 = (($125) + -128)|0;
     $135 = $134 | $132;
     $136 = ($135|0)<(0);
     do {
      if ($136) {
       $137 = HEAP8[$133>>0]|0;
       $138 = $137&255;
       $139 = (($138) + -128)|0;
       $140 = ($139>>>0)>(63);
       if ($140) {
        $141 = ((($$9)) + -1|0);
        $$11124 = $141;$$5112123 = $$4111;
        break L20;
       }
       $142 = $135 << 6;
       $143 = ((($$9)) + 2|0);
       $144 = $139 | $142;
       $145 = ($144|0)<(0);
       if ($145) {
        $146 = HEAP8[$143>>0]|0;
        $147 = $146&255;
        $148 = (($147) + -128)|0;
        $149 = ($148>>>0)>(63);
        if ($149) {
         $150 = ((($$9)) + -1|0);
         $$11124 = $150;$$5112123 = $$4111;
         break L20;
        } else {
         $151 = $144 << 6;
         $152 = ((($$9)) + 3|0);
         $153 = $148 | $151;
         $$10 = $152;$$5 = $153;
         break;
        }
       } else {
        $$10 = $143;$$5 = $144;
       }
      } else {
       $$10 = $133;$$5 = $135;
      }
     } while(0);
     $154 = ((($$4111)) + 4|0);
     HEAP32[$$4111>>2] = $$5;
     $155 = (($$8121) + -1)|0;
     $$1108$ph = $154;$$5118$ph = $155;$$6106$ph = $$10;
     label = 15;
     continue L19;
    }
   }
   else if ((label|0) == 59) {
    label = 0;
    return ($$099|0);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   $156 = ((($$9$sink)) + -1|0);
   $157 = ($$6|0)==(0);
   if ($157) {
    $$11163 = $156;$$5112162 = $$5112;$$9122161 = $$9122;
    label = 53;
   } else {
    $$11124 = $156;$$5112123 = $$5112;
   }
  }
  if ((label|0) == 53) {
   label = 0;
   $158 = HEAP8[$$11163>>0]|0;
   $159 = ($158<<24>>24)==(0);
   if ($159) {
    $160 = ($$5112162|0)==(0|0);
    if (!($160)) {
     HEAP32[$$5112162>>2] = 0;
     HEAP32[$1>>2] = 0;
    }
    $161 = (($2) - ($$9122161))|0;
    $$099 = $161;
    label = 59;
    continue;
   } else {
    $$11124 = $$11163;$$5112123 = $$5112162;
   }
  }
  $162 = (___errno_location()|0);
  HEAP32[$162>>2] = 84;
  $163 = ($$5112123|0)==(0|0);
  if ($163) {
   $$099 = -1;
   label = 59;
   continue;
  }
  HEAP32[$1>>2] = $$11124;
  $$099 = -1;
  label = 59;
 }
 return (0)|0;
}
function ___pthread_self_420() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _mbstowcs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $1;
 $4 = (_mbsrtowcs($0,$3,$2,0)|0);
 STACKTOP = sp;return ($4|0);
}
function _wcsnrtombs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$04773 = 0, $$05072 = 0, $$053$$050 = 0, $$05371 = 0, $$062 = 0, $$074 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$154 = 0, $$24968 = 0, $$25267 = 0, $$255 = 0, $$269 = 0, $$3 = 0, $$35666 = 0, $$57 = 0, $$cast = 0, $$pr$pre = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond70 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $5 = sp + 8|0;
 $6 = sp;
 $7 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $7;
 $8 = ($0|0)!=(0|0);
 $$ = $8 ? $3 : 256;
 $$57 = $8 ? $0 : $5;
 $$cast = $7;
 $9 = ($7|0)!=(0);
 $10 = ($$|0)!=(0);
 $or$cond70 = $10 & $9;
 L1: do {
  if ($or$cond70) {
   $$04773 = 0;$$05072 = $2;$$05371 = $$;$$074 = $$57;$45 = $$cast;
   while(1) {
    $11 = ($$05072>>>0)>=($$05371>>>0);
    $12 = ($$05072>>>0)>(32);
    $13 = $11 | $12;
    if (!($13)) {
     $$062 = $$074;$$148 = $$04773;$$151 = $$05072;$$255 = $$05371;$25 = $45;
     break L1;
    }
    $$053$$050 = $11 ? $$05371 : $$05072;
    $14 = (($$05072) - ($$053$$050))|0;
    $15 = (_wcsrtombs($$074,$6,$$053$$050,0)|0);
    $16 = ($15|0)==(-1);
    if ($16) {
     break;
    }
    $17 = ($$074|0)==($5|0);
    $18 = (($$074) + ($15)|0);
    $19 = $17 ? 0 : $15;
    $$154 = (($$05371) - ($19))|0;
    $$1 = $17 ? $$074 : $18;
    $20 = (($15) + ($$04773))|0;
    $21 = HEAP32[$6>>2]|0;
    $22 = ($21|0)!=(0|0);
    $23 = ($$154|0)!=(0);
    $or$cond = $23 & $22;
    if ($or$cond) {
     $$04773 = $20;$$05072 = $14;$$05371 = $$154;$$074 = $$1;$45 = $21;
    } else {
     $$062 = $$1;$$148 = $20;$$151 = $14;$$255 = $$154;$25 = $21;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$6>>2]|0;
   $$062 = $$074;$$148 = -1;$$151 = $14;$$255 = 0;$25 = $$pr$pre;
  } else {
   $$062 = $$57;$$148 = 0;$$151 = $2;$$255 = $$;$25 = $$cast;
  }
 } while(0);
 $24 = ($25|0)==(0|0);
 L8: do {
  if ($24) {
   $$3 = $$148;
  } else {
   $26 = ($$255|0)!=(0);
   $27 = ($$151|0)!=(0);
   $28 = $26 & $27;
   if ($28) {
    $$24968 = $$148;$$25267 = $$151;$$269 = $$062;$$35666 = $$255;$30 = $25;
    while(1) {
     $29 = HEAP32[$30>>2]|0;
     $31 = (_wcrtomb($$269,$29,0)|0);
     $32 = (($31) + 1)|0;
     $33 = ($32>>>0)<(2);
     if ($33) {
      break;
     }
     $35 = HEAP32[$6>>2]|0;
     $36 = ((($35)) + 4|0);
     HEAP32[$6>>2] = $36;
     $37 = (($$25267) + -1)|0;
     $38 = (($$269) + ($31)|0);
     $39 = (($$35666) - ($31))|0;
     $40 = (($31) + ($$24968))|0;
     $41 = ($39|0)!=(0);
     $42 = ($37|0)!=(0);
     $43 = $41 & $42;
     if ($43) {
      $$24968 = $40;$$25267 = $37;$$269 = $38;$$35666 = $39;$30 = $36;
     } else {
      $$3 = $40;
      break L8;
     }
    }
    $34 = ($31|0)==(0);
    if ($34) {
     HEAP32[$6>>2] = 0;
     $$3 = $$24968;
    } else {
     $$3 = -1;
    }
   } else {
    $$3 = $$148;
   }
  }
 } while(0);
 if ($8) {
  $44 = HEAP32[$6>>2]|0;
  HEAP32[$1>>2] = $44;
 }
 STACKTOP = sp;return ($$3|0);
}
function _wcsrtombs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$05675 = 0, $$057$lcssa = 0, $$05785 = 0, $$05874 = 0, $$1 = 0, $$159 = 0, $$260$lcssa = 0, $$26084 = 0, $$279 = 0, $$3 = 0, $$361 = 0, $$478 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre100 = 0, $$pre101 = 0, $$pre102 = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==(0|0);
 L1: do {
  if ($5) {
   $7 = HEAP32[$1>>2]|0;
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    $$0 = 0;
   } else {
    $$05675 = $7;$$05874 = 0;$11 = $8;
    while(1) {
     $10 = ($11>>>0)>(127);
     if ($10) {
      $12 = (_wcrtomb($4,$11,0)|0);
      $13 = ($12|0)==(-1);
      if ($13) {
       $$0 = -1;
       break L1;
      } else {
       $$pn = $12;
      }
     } else {
      $$pn = 1;
     }
     $$159 = (($$pn) + ($$05874))|0;
     $14 = ((($$05675)) + 4|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(0);
     if ($16) {
      $$0 = $$159;
      break;
     } else {
      $$05675 = $14;$$05874 = $$159;$11 = $15;
     }
    }
   }
  } else {
   $6 = ($2>>>0)>(3);
   L9: do {
    if ($6) {
     $$pre = HEAP32[$1>>2]|0;
     $$05785 = $0;$$26084 = $2;$19 = $$pre;
     while(1) {
      $18 = HEAP32[$19>>2]|0;
      $20 = (($18) + -1)|0;
      $21 = ($20>>>0)>(126);
      if ($21) {
       $22 = ($18|0)==(0);
       if ($22) {
        break;
       }
       $24 = (_wcrtomb($$05785,$18,0)|0);
       $25 = ($24|0)==(-1);
       if ($25) {
        $$0 = -1;
        break L1;
       }
       $26 = (($$05785) + ($24)|0);
       $27 = (($$26084) - ($24))|0;
       $$1 = $26;$$361 = $27;$32 = $19;
      } else {
       $28 = $18&255;
       $29 = ((($$05785)) + 1|0);
       HEAP8[$$05785>>0] = $28;
       $30 = (($$26084) + -1)|0;
       $$pre100 = HEAP32[$1>>2]|0;
       $$1 = $29;$$361 = $30;$32 = $$pre100;
      }
      $31 = ((($32)) + 4|0);
      HEAP32[$1>>2] = $31;
      $33 = ($$361>>>0)>(3);
      if ($33) {
       $$05785 = $$1;$$26084 = $$361;$19 = $31;
      } else {
       $$057$lcssa = $$1;$$260$lcssa = $$361;
       break L9;
      }
     }
     HEAP8[$$05785>>0] = 0;
     HEAP32[$1>>2] = 0;
     $23 = (($2) - ($$26084))|0;
     $$0 = $23;
     break L1;
    } else {
     $$057$lcssa = $0;$$260$lcssa = $2;
    }
   } while(0);
   $17 = ($$260$lcssa|0)==(0);
   if ($17) {
    $$0 = $2;
   } else {
    $$pre101 = HEAP32[$1>>2]|0;
    $$279 = $$057$lcssa;$$478 = $$260$lcssa;$35 = $$pre101;
    while(1) {
     $34 = HEAP32[$35>>2]|0;
     $36 = (($34) + -1)|0;
     $37 = ($36>>>0)>(126);
     if ($37) {
      $38 = ($34|0)==(0);
      if ($38) {
       label = 19;
       break;
      }
      $40 = (_wcrtomb($4,$34,0)|0);
      $41 = ($40|0)==(-1);
      if ($41) {
       $$0 = -1;
       break L1;
      }
      $42 = ($$478>>>0)<($40>>>0);
      if ($42) {
       label = 22;
       break;
      }
      $44 = HEAP32[$35>>2]|0;
      (_wcrtomb($$279,$44,0)|0);
      $45 = (($$279) + ($40)|0);
      $46 = (($$478) - ($40))|0;
      $$3 = $45;$$5 = $46;$51 = $35;
     } else {
      $47 = $34&255;
      $48 = ((($$279)) + 1|0);
      HEAP8[$$279>>0] = $47;
      $49 = (($$478) + -1)|0;
      $$pre102 = HEAP32[$1>>2]|0;
      $$3 = $48;$$5 = $49;$51 = $$pre102;
     }
     $50 = ((($51)) + 4|0);
     HEAP32[$1>>2] = $50;
     $52 = ($$5|0)==(0);
     if ($52) {
      $$0 = $2;
      break L1;
     } else {
      $$279 = $$3;$$478 = $$5;$35 = $50;
     }
    }
    if ((label|0) == 19) {
     HEAP8[$$279>>0] = 0;
     HEAP32[$1>>2] = 0;
     $39 = (($2) - ($$478))|0;
     $$0 = $39;
     break;
    }
    else if ((label|0) == 22) {
     $43 = (($2) - ($$478))|0;
     $$0 = $43;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _wcstombs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $1;
 $4 = (_wcsrtombs($0,$3,$2,0)|0);
 STACKTOP = sp;return ($4|0);
}
function _wctob($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(128);
 if ($1) {
  return ($0|0);
 } else {
  $2 = (___pthread_self_429()|0);
  $3 = ((($2)) + 188|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = $0 & -128;
  $8 = ($7|0)==(57216);
  $or$cond = $8 & $6;
  $9 = $0 & 255;
  $$ = $or$cond ? $9 : -1;
  return ($$|0);
 }
 return (0)|0;
}
function ___pthread_self_429() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___dns_doqueries($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$0158 = 0, $$$0165 = 0, $$0 = 0, $$0140 = 0, $$0141$lcssa = 0, $$0141251 = 0, $$0143$ph = 0, $$0147$ph = 0, $$0150$ph = 0, $$0154175177 = 0, $$0155 = 0, $$0156$ph = 0, $$0158$ph250 = 0, $$0162$ph249 = 0, $$0165$ph248 = 0, $$0168$lcssa = 0, $$0168232 = 0, $$1142229 = 0, $$1144$ph$lcssa = 0, $$1144$ph223 = 0;
 var $$1148$ph$lcssa = 0, $$1148$ph222 = 0, $$1151$ph$lcssa = 0, $$1151$ph221 = 0, $$1157$ph$lcssa = 0, $$1157$ph220 = 0, $$2145 = 0, $$2149 = 0, $$2152 = 0, $$2160 = 0, $$2164 = 0, $$2167 = 0, $$2196 = 0, $$3$lcssa = 0, $$3146 = 0, $$3153 = 0, $$3198 = 0, $$4 = 0, $$4$$3153 = 0, $$lcssa = 0;
 var $$pr = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $exitcond = 0, $exitcond275 = 0, $exitcond276 = 0, $exitcond317 = 0, $or$cond = 0, $trunc = 0, $trunc$clear = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 880|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(880|0);
 $4 = sp + 144|0;
 $5 = sp + 616|0;
 $6 = sp + 552|0;
 $7 = sp + 116|0;
 $8 = sp + 32|0;
 $9 = sp + 272|0;
 $10 = sp + 24|0;
 $11 = sp + 16|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = (_time((0|0))|0);
 ;HEAP32[$7>>2]=HEAP32[186060>>2]|0;HEAP32[$7+4>>2]=HEAP32[186060+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[186060+8>>2]|0;HEAP32[$7+12>>2]=HEAP32[186060+12>>2]|0;HEAP32[$7+16>>2]=HEAP32[186060+16>>2]|0;HEAP32[$7+20>>2]=HEAP32[186060+20>>2]|0;HEAP32[$7+24>>2]=HEAP32[186060+24>>2]|0;
 dest=$8; stop=dest+84|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 _memset(($9|0),0,280)|0;
 (_pthread_setcancelstate(1,($12|0))|0);
 $16 = (_strlen($1)|0);
 $17 = (($16) + -1)|0;
 $18 = ($17>>>0)>(253);
 L1: do {
  if ($18) {
   $$0 = -2;
  } else {
   $19 = ((($9)) + 5|0);
   HEAP8[$19>>0] = 1;
   $20 = ((($9)) + 2|0);
   HEAP8[$20>>0] = 1;
   $21 = ((($9)) + 13|0);
   (_strcpy($21,$1)|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = ($22<<24>>24)==(0);
   if ($23) {
    $$0141$lcssa = 13;
   } else {
    $$0141251 = 13;
    while(1) {
     $$0140 = $$0141251;
     L6: while(1) {
      $24 = (($9) + ($$0140)|0);
      $25 = HEAP8[$24>>0]|0;
      switch ($25<<24>>24) {
      case 46: case 0:  {
       break L6;
       break;
      }
      default: {
      }
      }
      $26 = (($$0140) + 1)|0;
      $$0140 = $26;
     }
     $27 = (($$0140) - ($$0141251))|0;
     $28 = (($27) + -1)|0;
     $29 = ($28>>>0)>(62);
     if ($29) {
      $$0 = -2;
      break L1;
     }
     $30 = $27&255;
     $31 = (($$0141251) + -1)|0;
     $32 = (($9) + ($31)|0);
     HEAP8[$32>>0] = $30;
     $33 = (($$0140) + 1)|0;
     $34 = (($9) + ($33)|0);
     $35 = HEAP8[$34>>0]|0;
     $36 = ($35<<24>>24)==(0);
     if ($36) {
      $$0141$lcssa = $33;
      break;
     } else {
      $$0141251 = $33;
     }
    }
   }
   $37 = (($$0141$lcssa) + 3)|0;
   $38 = (($9) + ($37)|0);
   HEAP8[$38>>0] = 1;
   $39 = (($$0141$lcssa) + 4)|0;
   (_clock_gettime(0,($10|0))|0);
   $40 = ((($10)) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 >>> 16;
   $43 = (($42) + ($41))|0;
   $44 = $43 & 65535;
   $45 = (___fopen_rb_ca(183127,$4,$5,256)|0);
   $46 = ($45|0)==(0|0);
   do {
    if ($46) {
     label = 22;
    } else {
     $47 = ((($6)) + 10|0);
     $48 = ((($6)) + 11|0);
     $$0158$ph250 = 2;$$0162$ph249 = 0;$$0165$ph248 = 16;
     L14: while(1) {
      $49 = (($8) + (($$0162$ph249*28)|0)|0);
      $50 = (_fgets($6,64,$45)|0);
      $51 = ($50|0)==(0|0);
      if ($51) {
       label = 21;
       break;
      }
      while(1) {
       $52 = (_strncmp($6,183178,10)|0);
       $53 = ($52|0)==(0);
       if ($53) {
        $54 = HEAP8[$47>>0]|0;
        $55 = $54 << 24 >> 24;
        $56 = (_isspace($55)|0);
        $57 = ($56|0)==(0);
        if (!($57)) {
         $$0155 = $48;
         while(1) {
          $58 = HEAP8[$$0155>>0]|0;
          $59 = $58 << 24 >> 24;
          $60 = (_isspace($59)|0);
          $61 = ($60|0)==(0);
          $62 = ((($$0155)) + 1|0);
          if ($61) {
           break;
          } else {
           $$0155 = $62;
          }
         }
         $63 = ($58<<24>>24)==(0);
         L23: do {
          if ($63) {
           $$0168$lcssa = $$0155;
          } else {
           $$0168232 = $$0155;$65 = $58;
           while(1) {
            $64 = $65 << 24 >> 24;
            $66 = (_isspace($64)|0);
            $67 = ($66|0)==(0);
            if (!($67)) {
             $$0168$lcssa = $$0168232;
             break L23;
            }
            $68 = ((($$0168232)) + 1|0);
            $$pr = HEAP8[$68>>0]|0;
            $69 = ($$pr<<24>>24)==(0);
            if ($69) {
             $$0168$lcssa = $68;
             break;
            } else {
             $$0168232 = $68;$65 = $$pr;
            }
           }
          }
         } while(0);
         HEAP8[$$0168$lcssa>>0] = 0;
         $70 = (___ipparse($49,0,$$0155)|0);
         $71 = ($70|0)<(0);
         if (!($71)) {
          break;
         }
        }
       }
       $72 = (_fgets($6,64,$45)|0);
       $73 = ($72|0)==(0|0);
       if ($73) {
        label = 21;
        break L14;
       }
      }
      $74 = (_htons(53)|0);
      $75 = (((($8) + (($$0162$ph249*28)|0)|0)) + 2|0);
      HEAP16[$75>>1] = $74;
      $76 = (($$0162$ph249) + 1)|0;
      $77 = (($8) + (($$0162$ph249*28)|0)|0);
      $78 = HEAP16[$77>>1]|0;
      $79 = ($78<<16>>16)==(10);
      $$$0165 = $79 ? 28 : $$0165$ph248;
      $$$0158 = $79 ? 10 : $$0158$ph250;
      $80 = ($$0162$ph249|0)<(2);
      if ($80) {
       $$0158$ph250 = $$$0158;$$0162$ph249 = $76;$$0165$ph248 = $$$0165;
      } else {
       label = 20;
       break;
      }
     }
     if ((label|0) == 20) {
      (___fclose_ca($45)|0);
      $$2160 = $$$0158;$$2164 = $76;$$2167 = $$$0165;
      break;
     }
     else if ((label|0) == 21) {
      (___fclose_ca($45)|0);
      $81 = ($$0162$ph249|0)==(0);
      if ($81) {
       label = 22;
       break;
      } else {
       $$2160 = $$0158$ph250;$$2164 = $$0162$ph249;$$2167 = $$0165$ph248;
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 22) {
    HEAP16[$8>>1] = 2;
    $82 = (_htons(53)|0);
    $83 = ((($8)) + 2|0);
    HEAP16[$83>>1] = $82;
    $84 = (_htonl(2130706433)|0);
    $85 = ((($8)) + 4|0);
    HEAP32[$85>>2] = $84;
    $$2160 = 2;$$2164 = 1;$$2167 = 16;
   }
   $86 = $$2160&65535;
   HEAP16[$7>>1] = $86;
   $87 = (_socket($$2160,526338,0)|0);
   $88 = ($87|0)<(0);
   if ($88) {
    $89 = (___errno_location()|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ($90|0)==(97);
    $92 = ($$2160|0)==(10);
    $or$cond = $92 & $91;
    if (!($or$cond)) {
     $$0 = -11;
     break;
    }
    $93 = (_socket(2,526338,0)|0);
    $94 = ($93|0)<(0);
    if ($94) {
     $$0 = -11;
     break;
    } else {
     $$0154175177 = $93;
    }
   } else {
    $95 = ($$2160|0)==(10);
    if ($95) {
     HEAP32[$13>>2] = 0;
     (_setsockopt($87,41,26,$13,4)|0);
     $96 = ($$2164|0)>(0);
     if ($96) {
      $$1142229 = 0;
      while(1) {
       $97 = (($8) + (($$1142229*28)|0)|0);
       $98 = HEAP16[$97>>1]|0;
       $99 = ($98<<16>>16)==(2);
       if ($99) {
        $100 = (((($8) + (($$1142229*28)|0)|0)) + 8|0);
        $101 = (((($8) + (($$1142229*28)|0)|0)) + 20|0);
        $102 = (((($8) + (($$1142229*28)|0)|0)) + 4|0);
        $103 = HEAP32[$102>>2]|0;
        HEAP32[$101>>2] = $103;
        dest=$100; src=183114; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
        HEAP16[$97>>1] = 10;
        HEAP32[$102>>2] = 0;
        $104 = (((($8) + (($$1142229*28)|0)|0)) + 24|0);
        HEAP32[$104>>2] = 0;
       }
       $105 = (($$1142229) + 1)|0;
       $exitcond276 = ($105|0)==($$2164|0);
       if ($exitcond276) {
        $$0154175177 = $87;
        break;
       } else {
        $$1142229 = $105;
       }
      }
     } else {
      $$0154175177 = $87;
     }
    } else {
     $$0154175177 = $87;
    }
   }
   $106 = $$0154175177;
   _pthread_cleanup_push((14|0),($106|0));
   $107 = HEAP32[$12>>2]|0;
   (_pthread_setcancelstate(($107|0),(0|0))|0);
   $108 = (_bind($$0154175177,$7,$$2167)|0);
   $109 = ($108|0)<(0);
   L47: do {
    if ($109) {
     $$3153 = 0;$$4 = -11;
    } else {
     HEAP32[$11>>2] = $$0154175177;
     $110 = ((($11)) + 4|0);
     HEAP16[$110>>1] = 1;
     $111 = ($3|0)>(0);
     $112 = ($$2164|0)<(1);
     $113 = ((($9)) + 1|0);
     $114 = (($$0141$lcssa) + 1)|0;
     $115 = (($9) + ($114)|0);
     $116 = ($$2164|0)>(0);
     $exitcond317 = ($$2164|0)==(1);
     $$0143$ph = -3;$$0147$ph = 0;$$0150$ph = 0;$$0156$ph = $0;
     while(1) {
      while(1) {
       $117 = (_time((0|0))|0);
       $118 = (($117) - ($15))|0;
       $119 = ($118|0)<(5);
       if (!($119)) {
        $$3153 = $$0150$ph;$$4 = $$0143$ph;
        break L47;
       }
       if ($111) {
        $$2196 = 0;
        while(1) {
         $120 = (($2) + ($$2196<<2)|0);
         $121 = HEAP32[$120>>2]|0;
         $122 = ($121|0)==(0);
         $brmerge = $122 | $112;
         if (!($brmerge)) {
          $123 = (($$2196) + ($44))|0;
          $124 = $123 >>> 8;
          $125 = $124&255;
          $126 = $123&255;
          HEAP8[$9>>0] = $125;
          HEAP8[$113>>0] = $126;
          $127 = $121&255;
          HEAP8[$115>>0] = $127;
          (_sendto($$0154175177,$9,$39,16384,$8,$$2167)|0);
          if (!($exitcond317)) {
           $130 = 1;
           while(1) {
            $$pre = HEAP32[$120>>2]|0;
            HEAP8[$9>>0] = $125;
            HEAP8[$113>>0] = $126;
            $128 = $$pre&255;
            HEAP8[$115>>0] = $128;
            $129 = (($8) + (($130*28)|0)|0);
            (_sendto($$0154175177,$9,$39,16384,$129,$$2167)|0);
            $131 = (($130) + 1)|0;
            $exitcond = ($131|0)==($$2164|0);
            if ($exitcond) {
             break;
            } else {
             $130 = $131;
            }
           }
          }
         }
         $132 = (($$2196) + 1)|0;
         $exitcond275 = ($132|0)==($3|0);
         if ($exitcond275) {
          break;
         } else {
          $$2196 = $132;
         }
        }
       }
       $133 = (_poll($11,1,1000)|0);
       $134 = ($133|0)<(1);
       if (!($134)) {
        break;
       }
      }
      $135 = (($$0147$ph) + ($$0150$ph))|0;
      $136 = ($135|0)<($3|0);
      L64: do {
       if ($136) {
        $$1144$ph223 = $$0143$ph;$$1148$ph222 = $$0147$ph;$$1151$ph221 = $$0150$ph;$$1157$ph220 = $$0156$ph;$168 = $135;
        while(1) {
         $137 = ((($$1157$ph220)) + 1|0);
         HEAP32[$14>>2] = $$2167;
         $138 = (_recvfrom($$0154175177,$$1157$ph220,512,0,$7,$14)|0);
         $139 = ($138|0)>(1);
         if (!($139)) {
          $$1144$ph$lcssa = $$1144$ph223;$$1148$ph$lcssa = $$1148$ph222;$$1151$ph$lcssa = $$1151$ph221;$$1157$ph$lcssa = $$1157$ph220;$$lcssa = $168;
          break L64;
         }
         while(1) {
          L69: do {
           if ($116) {
            $$3198 = 0;
            while(1) {
             $140 = (($8) + (($$3198*28)|0)|0);
             $141 = (_memcmp($140,$7,$$2167)|0);
             $142 = ($141|0)==(0);
             if ($142) {
              $$3$lcssa = $$3198;
              break L69;
             }
             $143 = (($$3198) + 1)|0;
             $144 = ($143|0)<($$2164|0);
             if ($144) {
              $$3198 = $143;
             } else {
              $$3$lcssa = $143;
              break;
             }
            }
           } else {
            $$3$lcssa = 0;
           }
          } while(0);
          $145 = ($$3$lcssa|0)==($$2164|0);
          if (!($145)) {
           $148 = HEAP8[$$1157$ph220>>0]|0;
           $149 = $148&255;
           $150 = $149 << 8;
           $151 = HEAP8[$137>>0]|0;
           $152 = $151&255;
           $153 = $150 | $152;
           $154 = (($153) - ($43))|0;
           $155 = $154 & 65535;
           $156 = ($155>>>0)<($3>>>0);
           if ($156) {
            $157 = (($2) + ($155<<2)|0);
            $158 = HEAP32[$157>>2]|0;
            $159 = ($158|0)==(0);
            if (!($159)) {
             break;
            }
           }
          }
          HEAP32[$14>>2] = $$2167;
          $146 = (_recvfrom($$0154175177,$$1157$ph220,512,0,$7,$14)|0);
          $147 = ($146|0)>(1);
          if (!($147)) {
           $$1144$ph$lcssa = $$1144$ph223;$$1148$ph$lcssa = $$1148$ph222;$$1151$ph$lcssa = $$1151$ph221;$$1157$ph$lcssa = $$1157$ph220;$$lcssa = $168;
           break L64;
          }
         }
         $160 = ((($$1157$ph220)) + 3|0);
         $trunc = HEAP8[$160>>0]|0;
         $trunc$clear = $trunc & 15;
         switch ($trunc$clear<<24>>24) {
         case 0:  {
          $161 = (($$1151$ph221) + 1)|0;
          $$2149 = $$1148$ph222;$$2152 = $161;$$3146 = $$1144$ph223;
          break;
         }
         case 3:  {
          $$2145 = -2;
          label = 53;
          break;
         }
         default: {
          $$2145 = -4;
          label = 53;
         }
         }
         if ((label|0) == 53) {
          label = 0;
          $162 = (($$1148$ph222) + 1)|0;
          $$2149 = $162;$$2152 = $$1151$ph221;$$3146 = $$2145;
         }
         HEAP32[$157>>2] = 0;
         $163 = ((($$1157$ph220)) + 512|0);
         $164 = (($$2149) + ($$2152))|0;
         $165 = ($164|0)<($3|0);
         if ($165) {
          $$1144$ph223 = $$3146;$$1148$ph222 = $$2149;$$1151$ph221 = $$2152;$$1157$ph220 = $163;$168 = $164;
         } else {
          $$1144$ph$lcssa = $$3146;$$1148$ph$lcssa = $$2149;$$1151$ph$lcssa = $$2152;$$1157$ph$lcssa = $163;$$lcssa = $164;
          break L64;
         }
        }
       } else {
        $$1144$ph$lcssa = $$0143$ph;$$1148$ph$lcssa = $$0147$ph;$$1151$ph$lcssa = $$0150$ph;$$1157$ph$lcssa = $$0156$ph;$$lcssa = $135;
       }
      } while(0);
      $166 = ($$lcssa|0)==($3|0);
      if ($166) {
       $$3153 = $$1151$ph$lcssa;$$4 = $$1144$ph$lcssa;
       break;
      } else {
       $$0143$ph = $$1144$ph$lcssa;$$0147$ph = $$1148$ph$lcssa;$$0150$ph = $$1151$ph$lcssa;$$0156$ph = $$1157$ph$lcssa;
      }
     }
    }
   } while(0);
   _pthread_cleanup_pop(1);
   $167 = ($$3153|0)==(0);
   $$4$$3153 = $167 ? $$4 : $$3153;
   $$0 = $$4$$3153;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___fopen_rb_ca($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 dest=$1; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = $0;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 557056;
 $5 = (___syscall5(5,($vararg_buffer|0))|0);
 $6 = (___syscall_ret($5)|0);
 $7 = ((($1)) + 60|0);
 HEAP32[$7>>2] = $6;
 $8 = ($6|0)<(0);
 if ($8) {
  $$0 = 0;
 } else {
  HEAP32[$vararg_buffer2>>2] = $6;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 2;
  $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
  HEAP32[$vararg_ptr6>>2] = 1;
  (___syscall221(221,($vararg_buffer2|0))|0);
  HEAP32[$1>>2] = 9;
  $9 = ((($2)) + 8|0);
  $10 = ((($1)) + 44|0);
  HEAP32[$10>>2] = $9;
  $11 = (($3) + -8)|0;
  $12 = ((($1)) + 48|0);
  HEAP32[$12>>2] = $11;
  $13 = ((($1)) + 32|0);
  HEAP32[$13>>2] = 4;
  $14 = ((($1)) + 40|0);
  HEAP32[$14>>2] = 3;
  $15 = ((($1)) + 12|0);
  HEAP32[$15>>2] = 1;
  $16 = ((($1)) + 76|0);
  HEAP32[$16>>2] = -1;
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ipparse($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$02933 = 0, $$030 = 0, $$034 = 0, $$132 = 0, $$phi$trans$insert = 0, $$phi$trans$insert36 = 0, $$pre = 0, $$pre$phi38Z2D = 0, $$pre$phiZ2D = 0, $$pre37 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigittmp = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = sp + 8|0;
 $4 = sp;
 dest=$3; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $5 = ($1|0)==(10);
 L1: do {
  if ($5) {
   label = 17;
  } else {
   $$02933 = $2;$$034 = 0;
   L2: while(1) {
    $6 = (_strtoul($$02933,$4,0)|0);
    $7 = (($3) + ($$034<<2)|0);
    HEAP32[$7>>2] = $6;
    $8 = HEAP32[$4>>2]|0;
    $9 = ($8|0)==($$02933|0);
    if ($9) {
     label = 5;
     break;
    }
    $10 = HEAP8[$8>>0]|0;
    switch ($10<<24>>24) {
    case 46: case 0:  {
     break;
    }
    default: {
     label = 5;
     break L2;
    }
    }
    $11 = HEAP8[$$02933>>0]|0;
    $12 = $11 << 24 >> 24;
    $isdigittmp = (($12) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if (!($isdigit)) {
     label = 5;
     break;
    }
    $14 = ($10<<24>>24)==(0);
    if ($14) {
     $$0$lcssa = $$034;
     break;
    }
    $15 = ((($8)) + 1|0);
    $16 = (($$034) + 1)|0;
    $17 = ($$034|0)<(3);
    if ($17) {
     $$02933 = $15;$$034 = $16;
    } else {
     $$0$lcssa = $16;
     break;
    }
   }
   if ((label|0) == 5) {
    $13 = ($1|0)==(2);
    if ($13) {
     $$030 = -1;
     break;
    } else {
     label = 17;
     break;
    }
   }
   switch ($$0$lcssa|0) {
   case 4:  {
    $$030 = -1;
    break L1;
    break;
   }
   case 0:  {
    $18 = HEAP32[$3>>2]|0;
    $19 = $18 & 16777215;
    $20 = ((($3)) + 4|0);
    HEAP32[$20>>2] = $19;
    $21 = $18 >>> 24;
    HEAP32[$3>>2] = $21;
    $$pre$phiZ2D = $20;$23 = $19;
    label = 12;
    break;
   }
   case 1:  {
    $$phi$trans$insert = ((($3)) + 4|0);
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$pre$phiZ2D = $$phi$trans$insert;$23 = $$pre;
    label = 12;
    break;
   }
   case 2:  {
    $$phi$trans$insert36 = ((($3)) + 8|0);
    $$pre37 = HEAP32[$$phi$trans$insert36>>2]|0;
    $$pre$phi38Z2D = $$phi$trans$insert36;$27 = $$pre37;
    label = 13;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 12) {
    $22 = $23 & 65535;
    $24 = ((($3)) + 8|0);
    HEAP32[$24>>2] = $22;
    $25 = $23 >>> 16;
    HEAP32[$$pre$phiZ2D>>2] = $25;
    $$pre$phi38Z2D = $24;$27 = $22;
    label = 13;
   }
   if ((label|0) == 13) {
    $26 = $27 & 255;
    $28 = ((($3)) + 12|0);
    HEAP32[$28>>2] = $26;
    $29 = $27 >>> 8;
    HEAP32[$$pre$phi38Z2D>>2] = $29;
   }
   HEAP16[$0>>1] = 2;
   $30 = ((($0)) + 4|0);
   $$132 = 0;
   while(1) {
    $31 = (($3) + ($$132<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32>>>0)>(255);
    if ($33) {
     $$030 = -1;
     break L1;
    }
    $34 = $32&255;
    $35 = (($30) + ($$132)|0);
    HEAP8[$35>>0] = $34;
    $36 = (($$132) + 1)|0;
    $37 = ($$132|0)<(3);
    if ($37) {
     $$132 = $36;
    } else {
     $$030 = 0;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 17) {
  HEAP16[$0>>1] = 10;
  $38 = ((($0)) + 8|0);
  $39 = (_inet_pton(10,$2,$38)|0);
  $40 = ($39|0)<(1);
  $41 = $40 << 31 >> 31;
  $$030 = $41;
 }
 STACKTOP = sp;return ($$030|0);
}
function _htons($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___bswap_16($0)|0);
 return ($1|0);
}
function ___fclose_ca($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 63]($0)|0);
 return ($3|0);
}
function _htonl($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___bswap_32($0)|0);
 return ($1|0);
}
function _setsockopt($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = sp + 8|0;
 HEAP32[$5>>2] = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $1;
 $7 = ((($5)) + 8|0);
 HEAP32[$7>>2] = $2;
 $8 = ((($5)) + 12|0);
 $9 = $3;
 HEAP32[$8>>2] = $9;
 $10 = ((($5)) + 16|0);
 HEAP32[$10>>2] = $4;
 $11 = ((($5)) + 20|0);
 HEAP32[$11>>2] = 0;
 $12 = $5;
 HEAP32[$vararg_buffer>>2] = 14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $12;
 $13 = (___syscall102(102,($vararg_buffer|0))|0);
 $14 = (___syscall_ret($13)|0);
 STACKTOP = sp;return ($14|0);
}
function _cleanup($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 (_close($1)|0);
 return;
}
function _bind($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 HEAP32[$3>>2] = $0;
 $4 = ((($3)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = ((($3)) + 8|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($3)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($3)) + 16|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 20|0);
 HEAP32[$9>>2] = 0;
 $10 = $3;
 HEAP32[$vararg_buffer>>2] = 2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 $11 = (___syscall102(102,($vararg_buffer|0))|0);
 $12 = (___syscall_ret($11)|0);
 STACKTOP = sp;return ($12|0);
}
function _poll($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $0;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall168(168,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _recvfrom($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $6 = sp + 8|0;
 HEAP32[$6>>2] = $0;
 $7 = ((($6)) + 4|0);
 $8 = $1;
 HEAP32[$7>>2] = $8;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = $2;
 $10 = ((($6)) + 12|0);
 HEAP32[$10>>2] = $3;
 $11 = ((($6)) + 16|0);
 $12 = $4;
 HEAP32[$11>>2] = $12;
 $13 = ((($6)) + 20|0);
 $14 = $5;
 HEAP32[$13>>2] = $14;
 $15 = $6;
 HEAP32[$vararg_buffer>>2] = 12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $16 = (___syscall102(102,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 STACKTOP = sp;return ($17|0);
}
function ___bswap_32($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_llvm_bswap_i32(($0|0))|0);
 return ($1|0);
}
function ___bswap_16($0) {
 $0 = $0|0;
 var $rev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev = (_llvm_bswap_i16(($0|0))|0);
 return ($rev|0);
}
function _inet_pton($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0106 = 0, $$0107 = 0, $$0108128 = 0, $$0108129 = 0, $$0108146 = 0, $$0110131 = 0, $$0110132 = 0, $$0110145 = 0, $$0113149 = 0, $$0116150 = 0, $$0117147 = 0, $$1 = 0, $$1109134 = 0, $$1109154$lcssa = 0, $$1109154211 = 0, $$1111136 = 0, $$1111153$lcssa = 0, $$1111153212 = 0, $$1114 = 0;
 var $$2 = 0, $$2115 = 0, $$2119 = 0, $$3120 = 0, $$3151 = 0, $$4 = 0, $$old1 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$pre = 0, $$pre175 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $exitcond = 0, $isdigit = 0, $isdigittmp = 0, $or$cond = 0, $or$cond11 = 0, $or$cond14 = 0, $or$cond4 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 L1: do {
  switch ($0|0) {
  case 2:  {
   $$0113149 = 0;$$0117147 = $1;
   while(1) {
    $$0108146 = 0;$$0110145 = 0;
    while(1) {
     $4 = (($$0117147) + ($$0110145)|0);
     $5 = HEAP8[$4>>0]|0;
     $6 = $5 << 24 >> 24;
     $isdigittmp = (($6) + -48)|0;
     $isdigit = ($isdigittmp>>>0)<(10);
     if (!($isdigit)) {
      label = 5;
      break;
     }
     $7 = ($$0108146*10)|0;
     $8 = (($7) + -48)|0;
     $9 = (($8) + ($6))|0;
     $10 = (($$0110145) + 1)|0;
     $11 = ($$0110145|0)<(2);
     if ($11) {
      $$0108146 = $9;$$0110145 = $10;
     } else {
      $$0108129 = $9;$$0110132 = $10;
      label = 7;
      break;
     }
    }
    if ((label|0) == 5) {
     label = 0;
     $12 = ($$0110145|0)==(0);
     if ($12) {
      $$0107 = 0;
      break L1;
     }
     $13 = ($$0110145|0)>(1);
     if ($13) {
      $$0108129 = $$0108146;$$0110132 = $$0110145;
      label = 7;
     } else {
      $$old1 = ($$0108146|0)>(255);
      if ($$old1) {
       $$0107 = 0;
       break L1;
      } else {
       $$0108128 = $$0108146;$$0110131 = $$0110145;
      }
     }
    }
    if ((label|0) == 7) {
     label = 0;
     $14 = HEAP8[$$0117147>>0]|0;
     $15 = ($14<<24>>24)==(48);
     $16 = ($$0108129|0)>(255);
     $or$cond = $16 | $15;
     if ($or$cond) {
      $$0107 = 0;
      break L1;
     } else {
      $$0108128 = $$0108129;$$0110131 = $$0110132;
     }
    }
    $17 = $$0108128&255;
    $18 = (($2) + ($$0113149)|0);
    HEAP8[$18>>0] = $17;
    $19 = (($$0117147) + ($$0110131)|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = ($20<<24>>24)==(0);
    $22 = ($$0113149|0)==(3);
    $or$cond4 = $22 & $21;
    if ($or$cond4) {
     $$0107 = 1;
     break L1;
    }
    $23 = ($20<<24>>24)==(46);
    if (!($23)) {
     $$0107 = 0;
     break L1;
    }
    $24 = (($$0110131) + 1)|0;
    $25 = (($$0117147) + ($24)|0);
    $26 = (($$0113149) + 1)|0;
    $27 = ($$0113149|0)<(3);
    if ($27) {
     $$0113149 = $26;$$0117147 = $25;
    } else {
     $$0107 = 0;
     break;
    }
   }
   break;
  }
  case 10:  {
   $29 = HEAP8[$1>>0]|0;
   $30 = ($29<<24>>24)==(58);
   if ($30) {
    $31 = ((($1)) + 1|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = ($32<<24>>24)==(58);
    if ($33) {
     $$0106 = -1;$$1114 = 0;$$2119 = $31;$35 = 58;
    } else {
     $$0107 = 0;
     break L1;
    }
   } else {
    $$0106 = -1;$$1114 = 0;$$2119 = $1;$35 = $29;
   }
   L20: while(1) {
    $34 = ($35<<24>>24)==(58);
    $36 = ($$0106|0)<(0);
    $or$cond7 = $36 & $34;
    if ($or$cond7) {
     $40 = $$1114 & 7;
     $41 = (($3) + ($40<<1)|0);
     HEAP16[$41>>1] = 0;
     $42 = ((($$2119)) + 1|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = ($43<<24>>24)==(0);
     if ($44) {
      $$0 = 0;$$2 = $$1114;$$2115 = $$1114;$$4 = $42;
      break;
     }
     $45 = ($$1114|0)==(7);
     if ($45) {
      $$0107 = 0;
      break L1;
     } else {
      $$1 = $$1114;$$3120 = $42;$$pre = $43;
     }
    } else {
     $37 = $35 << 24 >> 24;
     $38 = (_hexval($37)|0);
     $39 = ($38|0)>(-1);
     L26: do {
      if ($39) {
       $$1109154211 = 0;$$1111153212 = 0;$48 = $38;
       while(1) {
        $46 = $$1109154211 << 4;
        $47 = (($48) + ($46))|0;
        $49 = (($$1111153212) + 1)|0;
        $50 = ($$1111153212|0)<(3);
        if (!($50)) {
         $$1109134 = $47;$$1111136 = $49;
         break L26;
        }
        $$phi$trans$insert = (($$2119) + ($49)|0);
        $$pre175 = HEAP8[$$phi$trans$insert>>0]|0;
        $51 = $$pre175 << 24 >> 24;
        $52 = (_hexval($51)|0);
        $53 = ($52|0)>(-1);
        if ($53) {
         $$1109154211 = $47;$$1111153212 = $49;$48 = $52;
        } else {
         $$1109154$lcssa = $47;$$1111153$lcssa = $49;
         label = 21;
         break;
        }
       }
      } else {
       $$1109154$lcssa = 0;$$1111153$lcssa = 0;
       label = 21;
      }
     } while(0);
     if ((label|0) == 21) {
      label = 0;
      $54 = ($$1111153$lcssa|0)==(0);
      if ($54) {
       $$0107 = 0;
       break L1;
      } else {
       $$1109134 = $$1109154$lcssa;$$1111136 = $$1111153$lcssa;
      }
     }
     $55 = $$1109134&65535;
     $56 = $$1114 & 7;
     $57 = (($3) + ($56<<1)|0);
     HEAP16[$57>>1] = $55;
     $58 = (($$2119) + ($$1111136)|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = ($59<<24>>24)==(0);
     if ($60) {
      $61 = ($$0106|0)>(-1);
      $62 = ($$1114|0)==(7);
      $or$cond11 = $62 | $61;
      if ($or$cond11) {
       $$0 = 0;$$2 = $$0106;$$2115 = $$1114;$$4 = $$2119;
       break;
      }
     }
     $63 = ($$1114|0)==(7);
     if ($63) {
      $$0107 = 0;
      break L1;
     }
     switch ($59<<24>>24) {
     case 46:  {
      label = 26;
      break L20;
      break;
     }
     case 58:  {
      break;
     }
     default: {
      $$0107 = 0;
      break L1;
     }
     }
     $66 = (($$1111136) + 1)|0;
     $67 = (($$2119) + ($66)|0);
     $$pre$pre = HEAP8[$67>>0]|0;
     $$1 = $$0106;$$3120 = $67;$$pre = $$pre$pre;
    }
    $68 = (($$1114) + 1)|0;
    $$0106 = $$1;$$1114 = $68;$$2119 = $$3120;$35 = $$pre;
   }
   if ((label|0) == 26) {
    $64 = ($$1114|0)<(6);
    $or$cond14 = $64 & $36;
    if ($or$cond14) {
     $$0107 = 0;
     break L1;
    }
    $65 = (($$1114) + 1)|0;
    $$0 = 1;$$2 = $$0106;$$2115 = $65;$$4 = $$2119;
   }
   $69 = ($$2|0)>(-1);
   if ($69) {
    $70 = (($3) + ($$2<<1)|0);
    $71 = ((($70)) + 14|0);
    $72 = (0 - ($$2115))|0;
    $73 = (($71) + ($72<<1)|0);
    $74 = (($$2115) + 1)|0;
    $75 = (($74) - ($$2))|0;
    $76 = $75 << 1;
    _memmove(($73|0),($70|0),($76|0))|0;
    $77 = ($$2115|0)<(7);
    if ($77) {
     $78 = $$2115 << 1;
     $79 = (14 - ($78))|0;
     _memset(($70|0),0,($79|0))|0;
     $$0116150 = $2;$$3151 = 0;
    } else {
     $$0116150 = $2;$$3151 = 0;
    }
   } else {
    $$0116150 = $2;$$3151 = 0;
   }
   while(1) {
    $80 = (($3) + ($$3151<<1)|0);
    $81 = HEAP16[$80>>1]|0;
    $82 = ($81&65535) >>> 8;
    $83 = $82&255;
    $84 = ((($$0116150)) + 1|0);
    HEAP8[$$0116150>>0] = $83;
    $85 = HEAP16[$80>>1]|0;
    $86 = $85&255;
    $87 = ((($$0116150)) + 2|0);
    HEAP8[$84>>0] = $86;
    $88 = (($$3151) + 1)|0;
    $exitcond = ($88|0)==(8);
    if ($exitcond) {
     break;
    } else {
     $$0116150 = $87;$$3151 = $88;
    }
   }
   $89 = ($$0|0)==(0);
   if (!($89)) {
    $90 = ((($2)) + 12|0);
    $91 = (_inet_pton(2,$$4,$90)|0);
    $92 = ($91|0)<(1);
    if ($92) {
     $$0107 = 0;
     break L1;
    }
   }
   $$0107 = 1;
   break;
  }
  default: {
   $28 = (___errno_location()|0);
   HEAP32[$28>>2] = 97;
   $$0107 = -1;
  }
  }
 } while(0);
 STACKTOP = sp;return ($$0107|0);
}
function _hexval($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 if ($2) {
  return ($1|0);
 } else {
  $3 = $0 | 32;
  $4 = (($3) + -97)|0;
  $5 = ($4>>>0)<(6);
  $6 = (($3) + -87)|0;
  $$ = $5 ? $6 : -1;
  return ($$|0);
 }
 return (0)|0;
}
function ___dns_query($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$08 = 0, $$pre$phiZ2D = 0, $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = sp + 8|0;
 $5 = sp;
 $6 = ($3|0)==(0);
 $7 = ($2|0)==(10);
 do {
  if ($6) {
   if ($7) {
    HEAP32[$5>>2] = 28;
    $$0 = 1;$$08 = $1;$$pre$phiZ2D = $5;
    break;
   }
   HEAP32[$5>>2] = 1;
   $8 = ($2|0)==(2);
   if ($8) {
    $$0 = 1;$$08 = $1;$$pre$phiZ2D = $5;
   } else {
    $9 = ((($5)) + 4|0);
    HEAP32[$9>>2] = 28;
    $$0 = 2;$$08 = $1;$$pre$phiZ2D = $5;
   }
  } else {
   if ($7) {
    _mkptr6($4,$1);
   } else {
    _mkptr4($4,$1);
   }
   HEAP32[$5>>2] = 12;
   $$0 = 1;$$08 = $4;$$pre$phiZ2D = $5;
  }
 } while(0);
 $10 = (___dns_doqueries($0,$$08,$$pre$phiZ2D,$$0)|0);
 STACKTOP = sp;return ($10|0);
}
function _mkptr6($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01112 = 0, $$013 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $$01112 = $0;$$013 = 15;
 while(1) {
  $2 = (($1) + ($$013)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3 & 15;
  $5 = $4&255;
  $6 = (182762 + ($5)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ((($$01112)) + 1|0);
  HEAP8[$$01112>>0] = $7;
  $9 = ((($$01112)) + 2|0);
  HEAP8[$8>>0] = 46;
  $10 = HEAP8[$2>>0]|0;
  $11 = $10&255;
  $12 = $11 >>> 4;
  $13 = (182762 + ($12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ((($$01112)) + 3|0);
  HEAP8[$9>>0] = $14;
  $16 = ((($$01112)) + 4|0);
  HEAP8[$15>>0] = 46;
  $17 = (($$013) + -1)|0;
  $18 = ($$013|0)>(0);
  if ($18) {
   $$01112 = $16;$$013 = $17;
  } else {
   break;
  }
 }
 $scevgep = ((($0)) + 64|0);
 dest=$scevgep; src=182779; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 return;
}
function _mkptr4($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = ((($1)) + 3|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ((($1)) + 2|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ((($1)) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = HEAP8[$1>>0]|0;
 $12 = $11&255;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $10;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $12;
 (_sprintf($0,182737,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function ___dns_get_rr($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$066110 = 0, $$067$idx$lcssa = 0, $$067$idx132 = 0, $$071108 = 0, $$074107 = 0, $$1 = 0, $$168$add = 0, $$168$add78 = 0, $$168$idx$lcssa = 0, $$168$idx122 = 0, $$168$ptr = 0, $$168$ptr$lcssa = 0, $$168$ptr121 = 0, $$168$ptr123 = 0, $$172 = 0, $$175 = 0, $$2$idx109 = 0, $$273 = 0, $$276 = 0;
 var $$3$add = 0, $$3$add77 = 0, $$3$idx$lcssa = 0, $$3$idx99 = 0, $$3$ptr = 0, $$3$ptr$lcssa = 0, $$3$ptr100 = 0, $$3$ptr98 = 0, $$add = 0, $$in = 0, $$in134 = 0, $$old = 0, $$old87 = 0, $$ptr79$add = 0, $$ptr79$ptr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $or$cond = 0, $or$cond85 = 0, $or$cond88 = 0, $or$cond90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $7 = sp;
 $8 = ((($4)) + 3|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 & 15;
 $11 = ($10<<24>>24)==(0);
 L1: do {
  if ($11) {
   $12 = ((($4)) + 4|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $15 = $14 << 8;
   $16 = ((($4)) + 5|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = $15 | $18;
   $20 = ((($4)) + 6|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = $22 << 8;
   $24 = ((($4)) + 7|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $27 = $23 | $26;
   $28 = (($27) + ($19))|0;
   $29 = ($28>>>0)>(64);
   if ($29) {
    $$0 = -1;
   } else {
    $30 = ($19|0)==(0);
    if ($30) {
     $$067$idx$lcssa = 12;
    } else {
     $$067$idx132 = 12;$$in = $19;
     while(1) {
      $31 = (($$in) + -1)|0;
      $$168$ptr121 = (($4) + ($$067$idx132)|0);
      $32 = ($$067$idx132|0)<(512);
      $33 = HEAP8[$$168$ptr121>>0]|0;
      L7: do {
       if ($32) {
        $$168$idx122 = $$067$idx132;$$168$ptr123 = $$168$ptr121;$38 = $33;
        while(1) {
         $37 = $38&255;
         $39 = (($37) + -1)|0;
         $40 = ($39>>>0)<(127);
         if (!($40)) {
          $$168$idx$lcssa = $$168$idx122;$$168$ptr$lcssa = $$168$ptr123;$44 = $38;
          break L7;
         }
         $$168$add78 = (($$168$idx122) + 1)|0;
         $$168$ptr = (($4) + ($$168$add78)|0);
         $41 = ($$168$idx122|0)<(511);
         $42 = HEAP8[$$168$ptr>>0]|0;
         if ($41) {
          $$168$idx122 = $$168$add78;$$168$ptr123 = $$168$ptr;$38 = $42;
         } else {
          $$168$idx$lcssa = $$168$add78;$$168$ptr$lcssa = $$168$ptr;$44 = $42;
          break;
         }
        }
       } else {
        $$168$idx$lcssa = $$067$idx132;$$168$ptr$lcssa = $$168$ptr121;$44 = $33;
       }
      } while(0);
      $43 = ($44&255)>(193);
      if ($43) {
       $$0 = -1;
       break L1;
      }
      $45 = ($44<<24>>24)==(-63);
      if ($45) {
       $46 = ((($$168$ptr$lcssa)) + 1|0);
       $47 = HEAP8[$46>>0]|0;
       $48 = ($47<<24>>24)==(-1);
       $49 = ($$168$idx$lcssa|0)>(506);
       $or$cond85 = $49 | $48;
       if ($or$cond85) {
        $$0 = -1;
        break L1;
       }
      } else {
       $$old = ($$168$idx$lcssa|0)>(506);
       if ($$old) {
        $$0 = -1;
        break L1;
       }
      }
      $50 = ($44<<24>>24)!=(0);
      $51 = $50 ? 6 : 5;
      $$168$add = (($51) + ($$168$idx$lcssa))|0;
      $52 = ($31|0)==(0);
      if ($52) {
       $$067$idx$lcssa = $$168$add;
       break;
      } else {
       $$067$idx132 = $$168$add;$$in = $31;
      }
     }
    }
    $34 = ($27|0)==(0);
    if ($34) {
     $$0 = 0;
    } else {
     $35 = ((($4)) + 512|0);
     $36 = ($6|0)!=(0);
     $$066110 = 0;$$071108 = $0;$$074107 = $3;$$2$idx109 = $$067$idx$lcssa;$$in134 = $27;
     while(1) {
      $53 = (($$in134) + -1)|0;
      $$3$ptr98 = (($4) + ($$2$idx109)|0);
      $54 = ($$2$idx109|0)<(512);
      $55 = HEAP8[$$3$ptr98>>0]|0;
      L21: do {
       if ($54) {
        $$3$idx99 = $$2$idx109;$$3$ptr100 = $$3$ptr98;$57 = $55;
        while(1) {
         $56 = $57&255;
         $58 = (($56) + -1)|0;
         $59 = ($58>>>0)<(127);
         if (!($59)) {
          $$3$idx$lcssa = $$3$idx99;$$3$ptr$lcssa = $$3$ptr100;$63 = $57;
          break L21;
         }
         $$3$add = (($$3$idx99) + 1)|0;
         $$3$ptr = (($4) + ($$3$add)|0);
         $60 = ($$3$idx99|0)<(511);
         $61 = HEAP8[$$3$ptr>>0]|0;
         if ($60) {
          $$3$idx99 = $$3$add;$$3$ptr100 = $$3$ptr;$57 = $61;
         } else {
          $$3$idx$lcssa = $$3$add;$$3$ptr$lcssa = $$3$ptr;$63 = $61;
          break;
         }
        }
       } else {
        $$3$idx$lcssa = $$2$idx109;$$3$ptr$lcssa = $$3$ptr98;$63 = $55;
       }
      } while(0);
      $62 = ($63&255)>(193);
      if ($62) {
       $$0 = -1;
       break L1;
      }
      $64 = ($63<<24>>24)==(-63);
      if ($64) {
       $65 = ((($$3$ptr$lcssa)) + 1|0);
       $66 = HEAP8[$65>>0]|0;
       $67 = ($66<<24>>24)==(-1);
       $68 = ($$3$idx$lcssa|0)>(506);
       $or$cond88 = $68 | $67;
       if ($or$cond88) {
        $$0 = -1;
        break L1;
       }
      } else {
       $$old87 = ($$3$idx$lcssa|0)>(506);
       if ($$old87) {
        $$0 = -1;
        break L1;
       }
      }
      $69 = ($63<<24>>24)!=(0);
      $70 = $69 ? 2 : 1;
      $$3$add77 = (($70) + ($$3$idx$lcssa))|0;
      $$ptr79$ptr = (($4) + ($$3$add77)|0);
      $71 = ((($$ptr79$ptr)) + 8|0);
      $72 = HEAP8[$71>>0]|0;
      $73 = $72&255;
      $74 = $73 << 8;
      $75 = ((($$ptr79$ptr)) + 9|0);
      $76 = HEAP8[$75>>0]|0;
      $77 = $76&255;
      $78 = $74 | $77;
      $$ptr79$add = (($78) + ($$3$add77))|0;
      $79 = ($$ptr79$add|0)>(512);
      if ($79) {
       $$0 = -1;
       break L1;
      }
      $80 = ((($$ptr79$ptr)) + 1|0);
      $81 = HEAP8[$80>>0]|0;
      $82 = $81&255;
      $83 = ($82|0)!=($5|0);
      $84 = ($78>>>0)>($2>>>0);
      $or$cond90 = $84 | $83;
      if ($or$cond90) {
       $$1 = $$066110;$$273 = $$071108;$$276 = $$074107;
      } else {
       if ($36) {
        $85 = ((($$ptr79$ptr)) + 10|0);
        $86 = (___dn_expand($4,$35,$85,$7,256)|0);
        $87 = ($86|0)<(0);
        if ($87) {
         $$0 = -1;
         break L1;
        }
       }
       $88 = ($$071108|0)!=(0|0);
       $89 = ($$074107|0)!=(0);
       $or$cond = $89 & $88;
       if ($or$cond) {
        if ($36) {
         (_strcpy($$071108,$7)|0);
        } else {
         $90 = ((($$ptr79$ptr)) + 10|0);
         _memcpy(($$071108|0),($90|0),($78|0))|0;
        }
        $91 = (($$071108) + ($1)|0);
        $92 = (($$074107) + -1)|0;
        $$172 = $91;$$175 = $92;
       } else {
        $$172 = $$071108;$$175 = $$074107;
       }
       $93 = (($$066110) + 1)|0;
       $$1 = $93;$$273 = $$172;$$276 = $$175;
      }
      $94 = (($$3$add77) + 10)|0;
      $$add = (($94) + ($78))|0;
      $95 = ($53|0)==(0);
      if ($95) {
       $$0 = $$1;
       break;
      } else {
       $$066110 = $$1;$$071108 = $$273;$$074107 = $$276;$$2$idx109 = $$add;$$in134 = $53;
      }
     }
    }
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___dn_expand($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$05475 = 0, $$05574 = 0, $$056 = 0, $$05773 = 0, $$06172 = 0, $$070 = 0, $$1 = 0, $$158 = 0, $$16268 = 0, $$2 = 0, $$25969 = 0, $$263 = 0, $$3 = 0, $$360 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $scevgep85 = 0, $scevgep86 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($2|0)==($1|0);
 $6 = ($4|0)<(1);
 $or$cond = $5 | $6;
 L1: do {
  if ($or$cond) {
   $$056 = -1;
  } else {
   $7 = $1;
   $8 = $0;
   $9 = (($7) - ($8))|0;
   $10 = ($9|0)>(0);
   if ($10) {
    $11 = ($4|0)<(254);
    $12 = $11 ? $4 : 254;
    $13 = (($3) + ($12)|0);
    $14 = $13;
    $15 = $2;
    $$05475 = 0;$$05574 = -1;$$05773 = $3;$$06172 = $2;
    while(1) {
     $16 = HEAP8[$$06172>>0]|0;
     $17 = $16&255;
     $18 = $17 & 192;
     $19 = ($18|0)==(0);
     if ($19) {
      $33 = ($16<<24>>24)==(0);
      if ($33) {
       break;
      }
      $34 = ($$05773|0)==($3|0);
      if ($34) {
       $$158 = $3;$38 = $16;
      } else {
       $35 = ((($$05773)) + 1|0);
       HEAP8[$$05773>>0] = 46;
       $$pre = HEAP8[$$06172>>0]|0;
       $$158 = $35;$38 = $$pre;
      }
      $36 = ((($$06172)) + 1|0);
      $37 = $38&255;
      $39 = $36;
      $40 = (($7) - ($39))|0;
      $41 = ($40|0)>($37|0);
      if (!($41)) {
       $$056 = -1;
       break L1;
      }
      $42 = $$158;
      $43 = (($14) - ($42))|0;
      $44 = ($43|0)>($37|0);
      if (!($44)) {
       $$056 = -1;
       break L1;
      }
      $45 = ($38<<24>>24)==(0);
      if ($45) {
       $$263 = $36;$$3 = $$05574;$$360 = $$158;
      } else {
       $scevgep85 = (($36) + ($37)|0);
       $$070 = $37;$$16268 = $36;$$25969 = $$158;
       while(1) {
        $46 = (($$070) + -1)|0;
        $47 = ((($$16268)) + 1|0);
        $48 = HEAP8[$$16268>>0]|0;
        $49 = ((($$25969)) + 1|0);
        HEAP8[$$25969>>0] = $48;
        $50 = ($46|0)==(0);
        if ($50) {
         break;
        } else {
         $$070 = $46;$$16268 = $47;$$25969 = $49;
        }
       }
       $scevgep86 = (($$158) + ($37)|0);
       $$263 = $scevgep85;$$3 = $$05574;$$360 = $scevgep86;
      }
     } else {
      $20 = ((($$06172)) + 1|0);
      $21 = ($20|0)==($1|0);
      if ($21) {
       $$056 = -1;
       break L1;
      }
      $22 = $17 << 8;
      $23 = $22 & 16128;
      $24 = HEAP8[$20>>0]|0;
      $25 = $24&255;
      $26 = $23 | $25;
      $27 = ($26|0)<($9|0);
      if (!($27)) {
       $$056 = -1;
       break L1;
      }
      $28 = ($$05574|0)<(0);
      $29 = ((($$06172)) + 2|0);
      $30 = $29;
      $31 = (($30) - ($15))|0;
      $$1 = $28 ? $31 : $$05574;
      $32 = (($0) + ($26)|0);
      $$263 = $32;$$3 = $$1;$$360 = $$05773;
     }
     $55 = (($$05475) + 2)|0;
     $56 = ($55|0)<($9|0);
     if ($56) {
      $$05475 = $55;$$05574 = $$3;$$05773 = $$360;$$06172 = $$263;
     } else {
      $$056 = -1;
      break L1;
     }
    }
    HEAP8[$$05773>>0] = 0;
    $51 = ($$05574|0)<(0);
    $52 = ((($$06172)) + 1|0);
    $53 = $52;
    $54 = (($53) - ($15))|0;
    $$2 = $51 ? $54 : $$05574;
    $$056 = $$2;
   } else {
    $$056 = -1;
   }
  }
 } while(0);
 return ($$056|0);
}
function ___dns_count_addrs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$016 = 0, $$01726 = 0, $$01925 = 0, $$024 = 0, $$123 = 0, $$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$016 = 0;
  } else {
   $$01726 = 0;$$01925 = $0;$$in = $1;
   while(1) {
    $3 = (($$in) + -1)|0;
    $$024 = 0;$$123 = $$01726;
    while(1) {
     $4 = (23888 + ($$024<<3)|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = (((23888 + ($$024<<3)|0)) + 4|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = (___dns_get_rr(0,0,$5,-1,$$01925,$7,0)|0);
     $9 = ($8|0)<(0);
     if ($9) {
      $$016 = $8;
      break L1;
     }
     $10 = (($8) + ($$123))|0;
     $11 = (($$024) + 1)|0;
     $12 = ($$024|0)<(1);
     if ($12) {
      $$024 = $11;$$123 = $10;
     } else {
      break;
     }
    }
    $13 = ((($$01925)) + 512|0);
    $14 = ($3|0)==(0);
    if ($14) {
     $$016 = $10;
     break;
    } else {
     $$01726 = $10;$$01925 = $13;$$in = $3;
    }
   }
  }
 } while(0);
 return ($$016|0);
}
function _accept($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 HEAP32[$3>>2] = $0;
 $4 = ((($3)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = ((($3)) + 8|0);
 $7 = $2;
 HEAP32[$6>>2] = $7;
 $8 = ((($3)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 16|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($3)) + 20|0);
 HEAP32[$10>>2] = 0;
 $11 = $3;
 HEAP32[$vararg_buffer>>2] = 5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $11;
 $12 = (___syscall102(102,($vararg_buffer|0))|0);
 $13 = (___syscall_ret($12)|0);
 STACKTOP = sp;return ($13|0);
}
function _accept4($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 40|0;
 $5 = ($3|0)==(0);
 do {
  if ($5) {
   $6 = (_accept($0,$1,$2)|0);
   $$1 = $6;
  } else {
   HEAP32[$4>>2] = $0;
   $7 = ((($4)) + 4|0);
   $8 = $1;
   HEAP32[$7>>2] = $8;
   $9 = ((($4)) + 8|0);
   $10 = $2;
   HEAP32[$9>>2] = $10;
   $11 = ((($4)) + 12|0);
   HEAP32[$11>>2] = $3;
   $12 = ((($4)) + 16|0);
   HEAP32[$12>>2] = 0;
   $13 = ((($4)) + 20|0);
   HEAP32[$13>>2] = 0;
   $14 = $4;
   HEAP32[$vararg_buffer>>2] = 18;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $14;
   $15 = (___syscall102(102,($vararg_buffer|0))|0);
   $16 = (___syscall_ret($15)|0);
   $17 = ($16|0)>(-1);
   if ($17) {
    $$1 = $16;
   } else {
    $18 = (___errno_location()|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(38);
    if (!($20)) {
     $21 = (___errno_location()|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($22|0)==(22);
     if (!($23)) {
      $$1 = $16;
      break;
     }
    }
    $24 = (_accept($0,$1,$2)|0);
    $25 = ($24|0)<(0);
    if ($25) {
     $$1 = $24;
    } else {
     $26 = $3 & 524288;
     $27 = ($26|0)==(0);
     if (!($27)) {
      HEAP32[$vararg_buffer2>>2] = $24;
      $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
      HEAP32[$vararg_ptr5>>2] = 2;
      $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
      HEAP32[$vararg_ptr6>>2] = 1;
      (___syscall221(221,($vararg_buffer2|0))|0);
     }
     $28 = $3 & 2048;
     $29 = ($28|0)==(0);
     if ($29) {
      $$1 = $24;
     } else {
      HEAP32[$vararg_buffer7>>2] = $24;
      $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = 4;
      $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
      HEAP32[$vararg_ptr11>>2] = 2048;
      (___syscall221(221,($vararg_buffer7|0))|0);
      $$1 = $24;
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function ___dn_comp($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$089 = 0, $$090 = 0, $$091$ph = 0, $$094$ph = 0, $$097$lcssa = 0, $$097109 = 0, $$099108 = 0, $$1 = 0, $$198 = 0, $$198$in = 0, $$2 = 0, $$293 = 0, $$296 = 0, $$pn = 0, $$pn$ph = 0, $$sink = 0, $$sink2 = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond4 = 0, $or$cond6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $5 = sp;
 $6 = sp + 4|0;
 $7 = (_strnlen($0,255)|0);
 $8 = ($7|0)==(0);
 $9 = (($7) + -1)|0;
 if ($8) {
  $$0 = 0;
 } else {
  $10 = (($0) + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)==(46);
  $$ = $12 ? $9 : $7;
  $$0 = $$;
 }
 $13 = ($$0>>>0)>(253);
 $14 = ($2|0)<(1);
 $or$cond = $14 | $13;
 do {
  if ($or$cond) {
   $$089 = -1;
  } else {
   $15 = ($$0|0)==(0);
   if ($15) {
    HEAP8[$1>>0] = 0;
    $$089 = 1;
    break;
   }
   $16 = (($0) + ($$0)|0);
   $17 = (_getlens($6,$0,$$0)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $$089 = -1;
   } else {
    $19 = ($3|0)!=(0|0);
    L10: do {
     if ($19) {
      $20 = HEAP32[$3>>2]|0;
      $21 = ($20|0)==(0|0);
      if ($21) {
       $$1 = $3;$$293 = 0;$$296 = 0;
      } else {
       $$091$ph = 0;$$094$ph = 0;$$pn$ph = $3;
       while(1) {
        $$pn = $$pn$ph;
        while(1) {
         $$090 = ((($$pn)) + 4|0);
         $22 = HEAP32[$$090>>2]|0;
         $23 = ($22|0)==(0|0);
         if ($23) {
          $$1 = $$090;$$293 = $$091$ph;$$296 = $$094$ph;
          break L10;
         }
         $24 = HEAP32[$3>>2]|0;
         $25 = (_match($5,$24,$22,$16,$6,$17)|0);
         $26 = ($25|0)>($$094$ph|0);
         if ($26) {
          break;
         } else {
          $$pn = $$090;
         }
        }
        $27 = HEAP32[$5>>2]|0;
        $28 = ($25|0)==($$0|0);
        if ($28) {
         $$1 = $$090;$$293 = $27;$$296 = $$0;
         break;
        } else {
         $$091$ph = $27;$$094$ph = $25;$$pn$ph = $$090;
        }
       }
      }
     } else {
      $$1 = 0;$$293 = 0;$$296 = 0;
     }
    } while(0);
    $29 = (($$0) - ($$296))|0;
    $30 = (($29) + 2)|0;
    $31 = (($$296) + -1)|0;
    $32 = (($$0) + -1)|0;
    $33 = ($31>>>0)<($32>>>0);
    $34 = $33&1;
    $35 = (($30) + ($34))|0;
    $36 = ($35>>>0)>($2>>>0);
    if ($36) {
     $$089 = -1;
    } else {
     $37 = ((($1)) + 1|0);
     _memcpy(($37|0),($0|0),($29|0))|0;
     $38 = ($29|0)==(0);
     if ($38) {
      $$097$lcssa = 0;
     } else {
      $$097109 = 0;$$099108 = 0;
      while(1) {
       $39 = (($6) + ($$099108)|0);
       $40 = HEAP8[$39>>0]|0;
       $41 = (($1) + ($$097109)|0);
       HEAP8[$41>>0] = $40;
       $42 = (($$099108) + 1)|0;
       $43 = $40&255;
       $44 = (($$097109) + 1)|0;
       $45 = (($44) + ($43))|0;
       $46 = ($45>>>0)<($29>>>0);
       if ($46) {
        $$097109 = $45;$$099108 = $42;
       } else {
        $$097$lcssa = $45;
        break;
       }
      }
     }
     $47 = ($$296|0)==(0);
     if ($47) {
      $$198$in = $$097$lcssa;$$sink = 0;
     } else {
      $48 = (($1) + ($$097$lcssa)|0);
      $49 = (($$097$lcssa) + 1)|0;
      $50 = $$293 >>> 8;
      $51 = $50 | 192;
      $52 = $51&255;
      HEAP8[$48>>0] = $52;
      $53 = $$293&255;
      $$198$in = $49;$$sink = $53;
     }
     $$sink2 = (($1) + ($$198$in)|0);
     $$198 = (($$198$in) + 1)|0;
     HEAP8[$$sink2>>0] = $$sink;
     $54 = ($$198$in|0)>(1);
     $55 = ($4|0)!=(0|0);
     $or$cond4 = $55 & $54;
     $or$cond6 = $19 & $or$cond4;
     if ($or$cond6) {
      $56 = HEAP32[$3>>2]|0;
      $57 = ($56|0)==(0|0);
      if ($57) {
       $$089 = $$198;
      } else {
       $$2 = $$1;
       while(1) {
        $58 = HEAP32[$$2>>2]|0;
        $59 = ($58|0)==(0|0);
        $60 = ((($$2)) + 4|0);
        if ($59) {
         break;
        } else {
         $$2 = $60;
        }
       }
       $61 = ($60>>>0)<($4>>>0);
       if ($61) {
        HEAP32[$$2>>2] = $1;
        HEAP32[$60>>2] = 0;
        $$089 = $$198;
       } else {
        $$089 = $$198;
       }
      }
     } else {
      $$089 = $$198;
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$089|0);
}
function _getlens($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$020 = 0, $$021 = 0, $$022 = 0, $$1$lcssa = 0, $$123 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $$020 = 0;$$021 = 0;
 while(1) {
  $3 = ($$020|0)<($2|0);
  L3: do {
   if ($3) {
    $$123 = $$020;
    while(1) {
     $4 = (($1) + ($$123)|0);
     $5 = HEAP8[$4>>0]|0;
     $6 = ($5<<24>>24)==(46);
     if ($6) {
      $$1$lcssa = $$123;
      break L3;
     }
     $7 = (($$123) + 1)|0;
     $8 = ($7|0)<($2|0);
     if ($8) {
      $$123 = $7;
     } else {
      $$1$lcssa = $7;
      break;
     }
    }
   } else {
    $$1$lcssa = $$020;
   }
  } while(0);
  $9 = (($$1$lcssa) - ($$020))|0;
  $10 = (($9) + -1)|0;
  $11 = ($10>>>0)>(62);
  if ($11) {
   $$022 = 0;
   break;
  }
  $12 = $9&255;
  $13 = (($$021) + 1)|0;
  $14 = (($0) + ($$021)|0);
  HEAP8[$14>>0] = $12;
  $15 = ($$1$lcssa|0)==($2|0);
  $16 = (($$1$lcssa) + 1)|0;
  if ($15) {
   $$022 = $13;
   break;
  } else {
   $$020 = $16;$$021 = $13;
  }
 }
 return ($$022|0);
}
function _match($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$03438 = 0, $$035 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $6 = sp;
 $7 = (_getoffs($6,$1,$2)|0);
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   $$035 = 0;
  } else {
   $9 = (($5) + -1)|0;
   $10 = (($4) + ($9)|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   $13 = (($7) + -1)|0;
   $14 = (($6) + ($13<<1)|0);
   $15 = HEAP16[$14>>1]|0;
   $16 = $15 << 16 >> 16;
   $17 = (($1) + ($16)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ($11<<24>>24)==($18<<24>>24);
   if ($19) {
    $20 = (0 - ($12))|0;
    $21 = (($3) + ($20)|0);
    $$03438 = 0;$23 = $21;$25 = $9;$30 = $13;$40 = $16;$42 = $12;
    while(1) {
     $39 = (($1) + ($40)|0);
     $41 = ((($39)) + 1|0);
     $43 = (_memcmp($41,$23,$42)|0);
     $44 = ($43|0)==(0);
     if (!($44)) {
      $$035 = $$03438;
      break L1;
     }
     HEAP32[$0>>2] = $40;
     $45 = ($25|0)!=(0);
     $46 = $45&1;
     $47 = (($$03438) + ($46))|0;
     $$ = (($47) + ($42))|0;
     $48 = ($30|0)!=(0);
     $or$cond = $45 & $48;
     if (!($or$cond)) {
      $$035 = $$;
      break L1;
     }
     $22 = ((($23)) + -1|0);
     $24 = (($25) + -1)|0;
     $26 = (($4) + ($24)|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = $27&255;
     $29 = (($30) + -1)|0;
     $31 = (($6) + ($29<<1)|0);
     $32 = HEAP16[$31>>1]|0;
     $33 = $32 << 16 >> 16;
     $34 = (0 - ($28))|0;
     $35 = (($22) + ($34)|0);
     $36 = (($1) + ($33)|0);
     $37 = HEAP8[$36>>0]|0;
     $38 = ($27<<24>>24)==($37<<24>>24);
     if ($38) {
      $$03438 = $$;$23 = $35;$25 = $24;$30 = $29;$40 = $33;$42 = $28;
     } else {
      $$035 = $$;
      break;
     }
    }
   } else {
    $$035 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$035|0);
}
function _getoffs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$015 = 0, $$016 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $$0 = 0;$$015 = $2;
 L1: while(1) {
  $$1 = $$015;
  L3: while(1) {
   $4 = HEAP8[$$1>>0]|0;
   $5 = $4&255;
   $6 = $5 & 192;
   $trunc = $6&255;
   switch ($trunc<<24>>24) {
   case 0:  {
    break L3;
    break;
   }
   case -64:  {
    break;
   }
   default: {
    $$016 = 0;
    break L1;
   }
   }
   $7 = $5 << 8;
   $8 = $7 & 16128;
   $9 = ((($$1)) + 1|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $8 | $11;
   $13 = (($1) + ($12)|0);
   $$1 = $13;
  }
  $14 = ($4<<24>>24)==(0);
  if ($14) {
   $$016 = $$0;
   break;
  }
  $15 = $$1;
  $16 = (($15) - ($3))|0;
  $17 = ($16|0)>(16383);
  if ($17) {
   $$016 = 0;
   break;
  }
  $18 = $16&65535;
  $19 = (($$0) + 1)|0;
  $20 = (($0) + ($$0<<1)|0);
  HEAP16[$20>>1] = $18;
  $21 = HEAP8[$$1>>0]|0;
  $22 = $21&255;
  $23 = (($22) + 1)|0;
  $24 = (($$1) + ($23)|0);
  $$0 = $19;$$015 = $24;
 }
 return ($$016|0);
}
function _dn_skipname($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;
 while(1) {
  $2 = ($$0>>>0)<($1>>>0);
  if (!($2)) {
   $$011 = -1;
   break;
  }
  $3 = HEAP8[$$0>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   label = 4;
   break;
  }
  $9 = ($3&255)>(191);
  $10 = ((($$0)) + 1|0);
  if ($9) {
   label = 6;
   break;
  } else {
   $$0 = $10;
  }
 }
 if ((label|0) == 4) {
  $5 = $$0;
  $6 = $0;
  $7 = (1 - ($6))|0;
  $8 = (($7) + ($5))|0;
  $$011 = $8;
 }
 else if ((label|0) == 6) {
  $11 = ($10>>>0)<($1>>>0);
  $12 = $$0;
  $13 = $0;
  $14 = (2 - ($13))|0;
  $15 = (($14) + ($12))|0;
  $$ = $11 ? $15 : -1;
  return ($$|0);
 }
 return ($$011|0);
}
function ___dns_parse($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$056$lcssa = 0, $$05690 = 0, $$1$lcssa = 0, $$183 = 0, $$272 = 0, $$3$lcssa = 0, $$367 = 0, $$in = 0, $$in94 = 0, $$old = 0, $$old92 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($1|0)<(12);
 L1: do {
  if ($4) {
   $$0 = -1;
  } else {
   $5 = ((($0)) + 3|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 & 15;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    $9 = ((($0)) + 12|0);
    $10 = ((($0)) + 4|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = $11&255;
    $13 = $12 << 8;
    $14 = ((($0)) + 5|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15&255;
    $17 = $13 | $16;
    $18 = ((($0)) + 6|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19&255;
    $21 = $20 << 8;
    $22 = ((($0)) + 7|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = $21 | $24;
    $26 = (($25) + ($17))|0;
    $27 = ($26>>>0)>(64);
    if ($27) {
     $$0 = -1;
    } else {
     $28 = ($17|0)==(0);
     if ($28) {
      $$056$lcssa = $9;
     } else {
      $29 = $0;
      $30 = (($0) + ($1)|0);
      $31 = ((($30)) + -6|0);
      $$05690 = $9;$$in = $17;
      while(1) {
       $32 = (($$in) + -1)|0;
       $33 = $$05690;
       $34 = (($33) - ($29))|0;
       $35 = ($34|0)<($1|0);
       $36 = HEAP8[$$05690>>0]|0;
       L9: do {
        if ($35) {
         $$183 = $$05690;$42 = $36;
         while(1) {
          $41 = $42&255;
          $43 = (($41) + -1)|0;
          $44 = ($43>>>0)<(127);
          if (!($44)) {
           $$1$lcssa = $$183;$51 = $42;
           break L9;
          }
          $45 = ((($$183)) + 1|0);
          $46 = $45;
          $47 = (($46) - ($29))|0;
          $48 = ($47|0)<($1|0);
          $49 = HEAP8[$45>>0]|0;
          if ($48) {
           $$183 = $45;$42 = $49;
          } else {
           $$1$lcssa = $45;$51 = $49;
           break;
          }
         }
        } else {
         $$1$lcssa = $$05690;$51 = $36;
        }
       } while(0);
       $50 = ($51&255)>(193);
       if ($50) {
        $$0 = -1;
        break L1;
       }
       $52 = ($51<<24>>24)==(-63);
       if ($52) {
        $53 = ((($$1$lcssa)) + 1|0);
        $54 = HEAP8[$53>>0]|0;
        $55 = ($54<<24>>24)==(-1);
        $56 = ($$1$lcssa>>>0)>($31>>>0);
        $or$cond = $55 | $56;
        if ($or$cond) {
         $$0 = -1;
         break L1;
        }
       } else {
        $$old = ($$1$lcssa>>>0)>($31>>>0);
        if ($$old) {
         $$0 = -1;
         break L1;
        }
       }
       $57 = ($51<<24>>24)!=(0);
       $58 = $57 ? 6 : 5;
       $59 = (($$1$lcssa) + ($58)|0);
       $60 = ($32|0)==(0);
       if ($60) {
        $$056$lcssa = $59;
        break;
       } else {
        $$05690 = $59;$$in = $32;
       }
      }
     }
     $37 = ($25|0)==(0);
     if ($37) {
      $$0 = 0;
     } else {
      $38 = $0;
      $39 = (($0) + ($1)|0);
      $40 = ((($39)) + -6|0);
      $$272 = $$056$lcssa;$$in94 = $25;
      while(1) {
       $61 = (($$in94) + -1)|0;
       $62 = $$272;
       $63 = (($62) - ($38))|0;
       $64 = ($63|0)<($1|0);
       $65 = HEAP8[$$272>>0]|0;
       L23: do {
        if ($64) {
         $$367 = $$272;$67 = $65;
         while(1) {
          $66 = $67&255;
          $68 = (($66) + -1)|0;
          $69 = ($68>>>0)<(127);
          if (!($69)) {
           $$3$lcssa = $$367;$76 = $67;
           break L23;
          }
          $70 = ((($$367)) + 1|0);
          $71 = $70;
          $72 = (($71) - ($38))|0;
          $73 = ($72|0)<($1|0);
          $74 = HEAP8[$70>>0]|0;
          if ($73) {
           $$367 = $70;$67 = $74;
          } else {
           $$3$lcssa = $70;$76 = $74;
           break;
          }
         }
        } else {
         $$3$lcssa = $$272;$76 = $65;
        }
       } while(0);
       $75 = ($76&255)>(193);
       if ($75) {
        $$0 = -1;
        break L1;
       }
       $77 = ($76<<24>>24)==(-63);
       if ($77) {
        $78 = ((($$3$lcssa)) + 1|0);
        $79 = HEAP8[$78>>0]|0;
        $80 = ($79<<24>>24)==(-1);
        $81 = ($$3$lcssa>>>0)>($40>>>0);
        $or$cond93 = $80 | $81;
        if ($or$cond93) {
         $$0 = -1;
         break L1;
        }
       } else {
        $$old92 = ($$3$lcssa>>>0)>($40>>>0);
        if ($$old92) {
         $$0 = -1;
         break L1;
        }
       }
       $82 = ($76<<24>>24)!=(0);
       $83 = $82 ? 2 : 1;
       $84 = (($$3$lcssa) + ($83)|0);
       $85 = ((($84)) + 8|0);
       $86 = HEAP8[$85>>0]|0;
       $87 = $86&255;
       $88 = $87 << 8;
       $89 = ((($84)) + 9|0);
       $90 = HEAP8[$89>>0]|0;
       $91 = $90&255;
       $92 = $88 | $91;
       $93 = (($84) + ($92)|0);
       $94 = ($93>>>0)>($39>>>0);
       if ($94) {
        $$0 = -1;
        break L1;
       }
       $95 = ((($84)) + 1|0);
       $96 = HEAP8[$95>>0]|0;
       $97 = $96&255;
       $98 = ((($84)) + 10|0);
       $99 = (FUNCTION_TABLE_iiiiii[$2 & 31]($3,$97,$98,$92,$0)|0);
       $100 = ($99|0)<(0);
       if ($100) {
        $$0 = -1;
        break L1;
       }
       $101 = (($92) + 10)|0;
       $102 = (($84) + ($101)|0);
       $103 = ($61|0)==(0);
       if ($103) {
        $$0 = 0;
        break;
       } else {
        $$272 = $102;$$in94 = $61;
       }
      }
     }
    }
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function _sethostent($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gethostent() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function _endhostent() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _ether_aton_r($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02031 = 0, $$02130 = 0, $$122 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 $$02031 = 0;$$02130 = $0;
 while(1) {
  $4 = ($$02031|0)==(0);
  if ($4) {
   $$122 = $$02130;
  } else {
   $5 = HEAP8[$$02130>>0]|0;
   $6 = ($5<<24>>24)==(58);
   if (!($6)) {
    $$3 = 0;
    break;
   }
   $7 = ((($$02130)) + 1|0);
   $$122 = $7;
  }
  $8 = (_strtoul($$122,$3,16)|0);
  $9 = ($8>>>0)>(255);
  if ($9) {
   $$3 = 0;
   break;
  }
  $10 = HEAP32[$3>>2]|0;
  $11 = $8&255;
  $12 = (($2) + ($$02031)|0);
  HEAP8[$12>>0] = $11;
  $13 = (($$02031) + 1)|0;
  $14 = ($$02031|0)<(5);
  if ($14) {
   $$02031 = $13;$$02130 = $10;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  $15 = HEAP8[$10>>0]|0;
  $16 = ($15<<24>>24)==(0);
  if ($16) {
   ;HEAP8[$1>>0]=HEAP8[$2>>0]|0;HEAP8[$1+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$1+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$1+3>>0]=HEAP8[$2+3>>0]|0;HEAP8[$1+4>>0]=HEAP8[$2+4>>0]|0;HEAP8[$1+5>>0]=HEAP8[$2+5>>0]|0;
   $$3 = $1;
  } else {
   $$3 = 0;
  }
 }
 STACKTOP = sp;return ($$3|0);
}
function _ether_aton($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_ether_aton_r($0,189557)|0);
 return ($1|0);
}
function _ether_ntoa_r($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01112 = 0, $$013 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $$01112 = $1;$$013 = 0;
 while(1) {
  $2 = ($$013|0)==(0);
  $3 = $2 ? 182788 : 182793;
  $4 = (($0) + ($$013)|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5&255;
  HEAP32[$vararg_buffer>>2] = $6;
  $7 = (_sprintf($$01112,$3,$vararg_buffer)|0);
  $8 = (($$01112) + ($7)|0);
  $9 = (($$013) + 1)|0;
  $exitcond = ($9|0)==(6);
  if ($exitcond) {
   break;
  } else {
   $$01112 = $8;$$013 = $9;
  }
 }
 STACKTOP = sp;return ($1|0);
}
function _ether_ntoa($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_ether_ntoa_r($0,189563)|0);
 return ($1|0);
}
function _ether_line($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function _ether_ntohost($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function _ether_hostton($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function _freeaddrinfo($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function _freeifaddrs($0) {
 $0 = $0|0;
 var $$05 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$05 = $0;
  while(1) {
   $2 = HEAP32[$$05>>2]|0;
   _free($$05);
   $3 = ($2|0)==(0|0);
   if ($3) {
    break;
   } else {
    $$05 = $2;
   }
  }
 }
 return;
}
function _getifaddrs($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $1 = sp;
 _memset(($1|0),0,264)|0;
 $2 = (___rtnetlink_enumerate(0,0,15,$1)|0);
 $3 = ($2|0)==(0);
 $4 = HEAP32[$1>>2]|0;
 if ($3) {
  HEAP32[$0>>2] = $4;
 } else {
  _freeifaddrs($4);
 }
 STACKTOP = sp;return ($2|0);
}
function _netlink_msg_to_ifaddr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0140 = 0, $$0141152 = 0, $$0142 = 0, $$0142155 = 0, $$0142156 = 0, $$1143 = 0, $$1146 = 0, $$2147 = 0, $$pr = 0, $$pre = 0, $$pre$phi166$phZ2D = 0, $$pre$phi174Z2D = 0, $$pre$phi180Z2D = 0, $$pre165 = 0, $$pre169 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp = 0, $phitmp181 = 0, $phitmp191 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 16|0);
 $3 = ((($1)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)==(16);
 L1: do {
  if ($5) {
   $6 = ((($1)) + 32|0);
   $7 = HEAP32[$1>>2]|0;
   $8 = $7 & -4;
   $9 = ($8|0)==(32);
   if ($9) {
    $$0140 = 164;$$1143 = 0;
    label = 10;
   } else {
    $10 = (($1) + ($7)|0);
    $11 = $10;
    $$0141152 = $6;$20 = $6;
    while(1) {
     $12 = ((($$0141152)) + 2|0);
     $13 = HEAP16[$12>>1]|0;
     $14 = ($13<<16>>16)==(7);
     $15 = HEAP16[$$0141152>>1]|0;
     $16 = $15&65535;
     if ($14) {
      break;
     }
     $17 = (($16) + 3)|0;
     $18 = $17 & 131068;
     $19 = (($20) + ($18)|0);
     $21 = $19;
     $22 = (($11) - ($21))|0;
     $23 = ($22>>>0)>(3);
     if ($23) {
      $$0141152 = $19;$20 = $19;
     } else {
      $$0140 = 164;$$1143 = 0;
      label = 10;
      break L1;
     }
    }
    $phitmp191 = (($16) + 160)|0;
    $$0140 = $phitmp191;$$1143 = 0;
    label = 10;
   }
  } else {
   $24 = ((($0)) + 8|0);
   $25 = ((($1)) + 20|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $26 & 63;
   $28 = (($24) + ($27<<2)|0);
   $$0142155 = HEAP32[$28>>2]|0;
   $29 = ($$0142155|0)==(0|0);
   if ($29) {
    $$0 = 0;
   } else {
    $$0142156 = $$0142155;
    while(1) {
     $30 = ((($$0142156)) + 140|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==($26|0);
     if ($32) {
      $$0140 = 164;$$1143 = $$0142156;
      label = 10;
      break L1;
     }
     $33 = ((($$0142156)) + 28|0);
     $$0142 = HEAP32[$33>>2]|0;
     $34 = ($$0142|0)==(0|0);
     if ($34) {
      $$0 = 0;
      break;
     } else {
      $$0142156 = $$0142;
     }
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 10) {
   $35 = (_calloc(1,$$0140)|0);
   $36 = ($35|0)==(0|0);
   if ($36) {
    $$0 = -1;
   } else {
    do {
     if ($5) {
      $37 = ((($1)) + 20|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ((($35)) + 140|0);
      HEAP32[$39>>2] = $38;
      $40 = ((($1)) + 24|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ((($35)) + 8|0);
      HEAP32[$42>>2] = $41;
      $43 = ((($1)) + 32|0);
      $44 = HEAP32[$1>>2]|0;
      $45 = $44 & -4;
      $46 = ($45|0)==(32);
      if ($46) {
       $$pre169 = ((($35)) + 4|0);
       $$pre$phi166$phZ2D = $$pre169;
       label = 41;
       break;
      }
      $47 = ((($35)) + 144|0);
      $48 = ((($35)) + 4|0);
      $49 = ((($35)) + 12|0);
      $50 = ((($35)) + 32|0);
      $51 = ((($2)) + 2|0);
      $52 = ((($35)) + 20|0);
      $53 = ((($35)) + 104|0);
      $54 = ((($35)) + 164|0);
      $55 = ((($35)) + 24|0);
      $$1146 = $43;$84 = $43;
      while(1) {
       $56 = ((($$1146)) + 2|0);
       $57 = HEAP16[$56>>1]|0;
       switch ($57<<16>>16) {
       case 3:  {
        $58 = HEAP16[$$1146>>1]|0;
        $59 = $58&65535;
        $60 = (($59) + -4)|0;
        $61 = ($60>>>0)<(17);
        if ($61) {
         $62 = ((($$1146)) + 4|0);
         _memcpy(($47|0),($62|0),($60|0))|0;
         HEAP32[$48>>2] = $47;
         $$pre$phi174Z2D = $$1146;
        } else {
         $$pre$phi174Z2D = $$1146;
        }
        break;
       }
       case 1:  {
        $63 = ((($$1146)) + 4|0);
        $64 = HEAP16[$$1146>>1]|0;
        $65 = $64&65535;
        $66 = (($65) + -4)|0;
        $67 = HEAP32[$37>>2]|0;
        $68 = HEAP16[$51>>1]|0;
        _copy_lladdr($49,$50,$63,$66,$67,$68);
        $$pre$phi174Z2D = $$1146;
        break;
       }
       case 2:  {
        $69 = ((($$1146)) + 4|0);
        $70 = HEAP16[$$1146>>1]|0;
        $71 = $70&65535;
        $72 = (($71) + -4)|0;
        $73 = HEAP32[$37>>2]|0;
        $74 = HEAP16[$51>>1]|0;
        _copy_lladdr($52,$53,$69,$72,$73,$74);
        $$pre$phi174Z2D = $$1146;
        break;
       }
       case 7:  {
        HEAP32[$55>>2] = $54;
        $75 = ((($$1146)) + 4|0);
        $76 = HEAP16[$$1146>>1]|0;
        $77 = $76&65535;
        $78 = (($77) + -4)|0;
        _memcpy(($54|0),($75|0),($78|0))|0;
        $$pre$phi174Z2D = $$1146;
        break;
       }
       default: {
        $$pre$phi174Z2D = $$1146;
       }
       }
       $79 = HEAP16[$$pre$phi174Z2D>>1]|0;
       $80 = $79&65535;
       $81 = (($80) + 3)|0;
       $82 = $81 & 131068;
       $83 = (($84) + ($82)|0);
       $85 = HEAP32[$1>>2]|0;
       $86 = (($1) + ($85)|0);
       $87 = $86;
       $88 = $83;
       $89 = (($87) - ($88))|0;
       $90 = ($89>>>0)>(3);
       if ($90) {
        $$1146 = $83;$84 = $83;
       } else {
        break;
       }
      }
      $$pre165 = HEAP32[$48>>2]|0;
      $phitmp181 = ($$pre165|0)==(0|0);
      if (!($phitmp181)) {
       $91 = HEAP32[$39>>2]|0;
       $92 = $91 & 63;
       $93 = ((($0)) + 8|0);
       $94 = (($93) + ($92<<2)|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = ((($35)) + 28|0);
       HEAP32[$96>>2] = $95;
       HEAP32[$94>>2] = $35;
       $$pre$phi166$phZ2D = $48;
       label = 41;
      }
     } else {
      $97 = ((($$1143)) + 4|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ((($35)) + 4|0);
      HEAP32[$99>>2] = $98;
      $100 = ((($$1143)) + 8|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = ((($35)) + 8|0);
      HEAP32[$102>>2] = $101;
      $103 = ((($1)) + 24|0);
      $104 = HEAP32[$1>>2]|0;
      $105 = $104 & -4;
      $106 = ($105|0)==(24);
      if ($106) {
       $$pre$phi166$phZ2D = $99;
       label = 41;
      } else {
       $107 = ((($35)) + 12|0);
       $108 = ((($35)) + 32|0);
       $109 = ((($1)) + 20|0);
       $110 = ((($35)) + 20|0);
       $111 = ((($35)) + 104|0);
       $112 = ((($35)) + 144|0);
       $$2147 = $103;$150 = $103;
       while(1) {
        $113 = ((($$2147)) + 2|0);
        $114 = HEAP16[$113>>1]|0;
        L36: do {
         switch ($114<<16>>16) {
         case 1:  {
          $115 = HEAP32[$107>>2]|0;
          $116 = ($115|0)==(0|0);
          $117 = HEAP8[$2>>0]|0;
          $118 = $117&255;
          $119 = ((($$2147)) + 4|0);
          $120 = HEAP16[$$2147>>1]|0;
          $121 = $120&65535;
          $122 = (($121) + -4)|0;
          $123 = HEAP32[$109>>2]|0;
          if ($116) {
           _copy_addr($107,$118,$108,$119,$122,$123);
           $$pre$phi180Z2D = $$2147;
           break L36;
          } else {
           _copy_addr($110,$118,$111,$119,$122,$123);
           $$pre$phi180Z2D = $$2147;
           break L36;
          }
          break;
         }
         case 4:  {
          $124 = HEAP8[$2>>0]|0;
          $125 = $124&255;
          $126 = ((($$2147)) + 4|0);
          $127 = HEAP16[$$2147>>1]|0;
          $128 = $127&65535;
          $129 = (($128) + -4)|0;
          $130 = HEAP32[$109>>2]|0;
          _copy_addr($110,$125,$111,$126,$129,$130);
          $$pre$phi180Z2D = $$2147;
          break;
         }
         case 2:  {
          $131 = HEAP32[$107>>2]|0;
          $132 = ($131|0)==(0|0);
          if (!($132)) {
           dest=$111; src=$108; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
           HEAP32[$110>>2] = $111;
           dest=$108; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
          }
          $133 = HEAP8[$2>>0]|0;
          $134 = $133&255;
          $135 = ((($$2147)) + 4|0);
          $136 = HEAP16[$$2147>>1]|0;
          $137 = $136&65535;
          $138 = (($137) + -4)|0;
          $139 = HEAP32[$109>>2]|0;
          _copy_addr($107,$134,$108,$135,$138,$139);
          $$pre$phi180Z2D = $$2147;
          break;
         }
         case 3:  {
          $140 = HEAP16[$$2147>>1]|0;
          $141 = $140&65535;
          $142 = (($141) + -4)|0;
          $143 = ($142>>>0)<(17);
          if ($143) {
           $144 = ((($$2147)) + 4|0);
           _memcpy(($112|0),($144|0),($142|0))|0;
           HEAP32[$99>>2] = $112;
           $$pre$phi180Z2D = $$2147;
          } else {
           $$pre$phi180Z2D = $$2147;
          }
          break;
         }
         default: {
          $$pre$phi180Z2D = $$2147;
         }
         }
        } while(0);
        $145 = HEAP16[$$pre$phi180Z2D>>1]|0;
        $146 = $145&65535;
        $147 = (($146) + 3)|0;
        $148 = $147 & 131068;
        $149 = (($150) + ($148)|0);
        $151 = HEAP32[$1>>2]|0;
        $152 = (($1) + ($151)|0);
        $153 = $152;
        $154 = $149;
        $155 = (($153) - ($154))|0;
        $156 = ($155>>>0)>(3);
        if ($156) {
         $$2147 = $149;$150 = $149;
        } else {
         break;
        }
       }
       $$pre = HEAP32[$107>>2]|0;
       $phitmp = ($$pre|0)==(0|0);
       if ($phitmp) {
        $$pre$phi166$phZ2D = $99;
        label = 41;
       } else {
        $157 = ((($35)) + 16|0);
        $158 = HEAP8[$2>>0]|0;
        $159 = $158&255;
        $160 = ((($35)) + 68|0);
        $161 = ((($2)) + 1|0);
        $162 = HEAP8[$161>>0]|0;
        $163 = $162&255;
        _gen_netmask($157,$159,$160,$163);
        $$pre$phi166$phZ2D = $99;
        label = 41;
       }
      }
     }
    } while(0);
    if ((label|0) == 41) {
     $$pr = HEAP32[$$pre$phi166$phZ2D>>2]|0;
     $164 = ($$pr|0)==(0|0);
     if (!($164)) {
      $165 = HEAP32[$0>>2]|0;
      $166 = ($165|0)==(0|0);
      if ($166) {
       HEAP32[$0>>2] = $35;
      }
      $167 = ((($0)) + 4|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if (!($169)) {
       HEAP32[$168>>2] = $35;
      }
      HEAP32[$167>>2] = $35;
      $$0 = 0;
      break;
     }
    }
    _free($35);
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___rtnetlink_enumerate($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$015 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $4 = (_socket(16,524291,0)|0);
 $5 = ($4|0)<(0);
 if ($5) {
  $$015 = -1;
 } else {
  $6 = (___netlink_enumerate($4,1,18,$0,$2,$3)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $8 = (___netlink_enumerate($4,2,22,$1,$2,$3)|0);
   $$0 = $8;
  } else {
   $$0 = $6;
  }
  HEAP32[$vararg_buffer>>2] = $4;
  (___syscall6(6,($vararg_buffer|0))|0);
  $$015 = $$0;
 }
 STACKTOP = sp;return ($$015|0);
}
function ___netlink_enumerate($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$ph = 0, $$02427 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8192|0);
 $6 = sp;
 $7 = ((($6)) + 12|0);
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 HEAP32[$6>>2] = 20;
 $12 = $2&65535;
 $13 = ((($6)) + 4|0);
 HEAP16[$13>>1] = $12;
 $14 = ((($6)) + 6|0);
 HEAP16[$14>>1] = 769;
 $15 = ((($6)) + 8|0);
 HEAP32[$15>>2] = $1;
 $16 = $3&255;
 $17 = ((($6)) + 16|0);
 HEAP8[$17>>0] = $16;
 $18 = (_send($0,$6,20,0)|0);
 $19 = ($18|0)<(0);
 L1: do {
  if ($19) {
   $$0 = $18;
  } else {
   $20 = (_recv($0,$6,8192,64)|0);
   $21 = ($20|0)<(1);
   if ($21) {
    $$0 = -1;
   } else {
    $22 = $6;
    $26 = $20;
    L4: while(1) {
     $25 = (($6) + ($26)|0);
     $27 = $25;
     $28 = (($27) - ($22))|0;
     $29 = ($28>>>0)>(15);
     L6: do {
      if ($29) {
       $$02427 = $6;$38 = $6;
       while(1) {
        $30 = ((($$02427)) + 4|0);
        $31 = HEAP16[$30>>1]|0;
        switch ($31<<16>>16) {
        case 2:  {
         $$0 = -1;
         break L1;
         break;
        }
        case 3:  {
         $$0$ph = 0;
         break L4;
         break;
        }
        default: {
        }
        }
        $32 = (FUNCTION_TABLE_iii[$4 & 31]($5,$$02427)|0);
        $33 = ($32|0)==(0);
        if (!($33)) {
         $$0$ph = $32;
         break L4;
        }
        $34 = HEAP32[$$02427>>2]|0;
        $35 = (($34) + 3)|0;
        $36 = $35 & -4;
        $37 = (($38) + ($36)|0);
        $39 = $37;
        $40 = (($27) - ($39))|0;
        $41 = ($40>>>0)>(15);
        if ($41) {
         $$02427 = $37;$38 = $37;
        } else {
         break L6;
        }
       }
      }
     } while(0);
     $23 = (_recv($0,$6,8192,64)|0);
     $24 = ($23|0)<(1);
     if ($24) {
      $$0 = -1;
      break L1;
     } else {
      $26 = $23;
     }
    }
    $$0 = $$0$ph;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _recv($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_recvfrom($0,$1,$2,$3,0,0)|0);
 return ($4|0);
}
function _copy_lladdr($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($3>>>0)>(24);
 if (!($6)) {
  HEAP16[$1>>1] = 17;
  $7 = ((($1)) + 4|0);
  HEAP32[$7>>2] = $4;
  $8 = ((($1)) + 8|0);
  HEAP16[$8>>1] = $5;
  $9 = $3&255;
  $10 = ((($1)) + 11|0);
  HEAP8[$10>>0] = $9;
  $11 = ((($1)) + 12|0);
  _memcpy(($11|0),($2|0),($3|0))|0;
  HEAP32[$0>>2] = $1;
 }
 return;
}
function _copy_addr($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$020 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: do {
  switch ($1|0) {
  case 2:  {
   $6 = ((($2)) + 4|0);
   $$0 = 4;$$020 = $6;
   label = 7;
   break;
  }
  case 10:  {
   $7 = ((($2)) + 8|0);
   $8 = HEAP8[$3>>0]|0;
   switch ($8<<24>>24) {
   case -2:  {
    $9 = ((($3)) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = $10 & -64;
    $12 = ($11<<24>>24)==(-128);
    if (!($12)) {
     $$0 = 16;$$020 = $7;
     label = 7;
     break L1;
    }
    break;
   }
   case -1:  {
    $13 = ((($3)) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = $14 & 15;
    $16 = ($15<<24>>24)==(2);
    if (!($16)) {
     $$0 = 16;$$020 = $7;
     label = 7;
     break L1;
    }
    break;
   }
   default: {
    $$0 = 16;$$020 = $7;
    label = 7;
    break L1;
   }
   }
   $17 = ((($2)) + 24|0);
   HEAP32[$17>>2] = $5;
   $$0 = 16;$$020 = $7;
   label = 7;
   break;
  }
  default: {
  }
  }
 } while(0);
 if ((label|0) == 7) {
  $18 = ($$0>>>0)>($4>>>0);
  if (!($18)) {
   $19 = $1&65535;
   HEAP16[$2>>1] = $19;
   _memcpy(($$020|0),($3|0),($$0|0))|0;
   HEAP32[$0>>2] = $2;
  }
 }
 return;
}
function _gen_netmask($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 dest=$4; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $5 = ($3>>>0)<(128);
 $$ = $5 ? $3 : 128;
 $6 = $$ >>> 3;
 _memset(($4|0),-1,($6|0))|0;
 if ($5) {
  $7 = $$ & 7;
  $8 = (8 - ($7))|0;
  $9 = 255 << $8;
  $10 = $9&255;
  $11 = (($4) + ($6)|0);
  HEAP8[$11>>0] = $10;
 }
 _copy_addr($0,$1,$2,$4,16,0);
 STACKTOP = sp;return;
}
function _getpeername($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 HEAP32[$3>>2] = $0;
 $4 = ((($3)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = ((($3)) + 8|0);
 $7 = $2;
 HEAP32[$6>>2] = $7;
 $8 = ((($3)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 16|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($3)) + 20|0);
 HEAP32[$10>>2] = 0;
 $11 = $3;
 HEAP32[$vararg_buffer>>2] = 7;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $11;
 $12 = (___syscall102(102,($vararg_buffer|0))|0);
 $13 = (___syscall_ret($12)|0);
 STACKTOP = sp;return ($13|0);
}
function _getservbyname($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $getservbyname$se$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (_getservbyname_r($0,$1,185988,186004,8,$2)|0);
 $4 = ($3|0)==(0);
 $getservbyname$se$ = $4 ? 185988 : 0;
 STACKTOP = sp;return ($getservbyname$se$|0);
}
function _getservbyname_r($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$028 = 0, $$cast = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $7 = $3;
 $8 = (0 - ($7))|0;
 $9 = $8 & 3;
 $10 = $9 | 8;
 $11 = ($10>>>0)>($4>>>0);
 do {
  if ($11) {
   $$0 = 34;
  } else {
   $12 = (($3) + ($9)|0);
   $13 = ($1|0)==(0|0);
   if ($13) {
    $$028 = 0;
   } else {
    $14 = (_strcmp($1,182823)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$028 = 6;
    } else {
     $16 = (_strcmp($1,182827)|0);
     $17 = ($16|0)==(0);
     if ($17) {
      $$028 = 17;
     } else {
      $$0 = 22;
      break;
     }
    }
   }
   $18 = (___lookup_serv($6,$0,$$028,0,0)|0);
   $19 = ($18|0)<(0);
   if ($19) {
    $$off = (($18) + 11)|0;
    $switch = ($$off>>>0)<(2);
    $$ = $switch ? 12 : 2;
    $$0 = $$;
    break;
   } else {
    HEAP32[$2>>2] = $0;
    $20 = ((($2)) + 4|0);
    HEAP32[$20>>2] = $12;
    $$cast = $0;
    HEAP32[$12>>2] = $$cast;
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($21)) + 4|0);
    HEAP32[$22>>2] = 0;
    $23 = HEAP16[$6>>1]|0;
    $24 = (_htons($23)|0);
    $25 = $24&65535;
    $26 = ((($2)) + 8|0);
    HEAP32[$26>>2] = $25;
    $27 = ((($6)) + 2|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = ($28<<24>>24)==(6);
    $30 = $29 ? 182823 : 182827;
    $31 = ((($2)) + 12|0);
    HEAP32[$31>>2] = $30;
    HEAP32[$5>>2] = $2;
    $$0 = 0;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lookup_serv($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$082 = 0, $$083 = 0, $$1 = 0, $$185$lcssa = 0, $$18591 = 0, $$2$ph$be = 0, $$2$ph$lcssa = 0, $$2$ph98 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre103 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1296|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1296|0);
 $5 = sp + 1160|0;
 $6 = sp + 124|0;
 $7 = sp + 128|0;
 $8 = sp;
 HEAP32[$6>>2] = 189597;
 switch ($3|0) {
 case 1:  {
  switch ($2|0) {
  case 6: case 0:  {
   $$082 = 6;
   label = 6;
   break;
  }
  default: {
   $$1 = -8;
  }
  }
  break;
 }
 case 2:  {
  switch ($2|0) {
  case 17: case 0:  {
   $$082 = 17;
   label = 6;
   break;
  }
  default: {
   $$1 = -8;
  }
  }
  break;
 }
 case 0:  {
  $$082 = $2;
  label = 6;
  break;
 }
 default: {
  $9 = ($1|0)==(0|0);
  if ($9) {
   HEAP16[$0>>1] = 0;
   $10 = $2&255;
   $11 = ((($0)) + 2|0);
   HEAP8[$11>>0] = $10;
   $12 = $3&255;
   $13 = ((($0)) + 3|0);
   HEAP8[$13>>0] = $12;
   $$1 = 1;
  } else {
   $$1 = -8;
  }
 }
 }
 do {
  if ((label|0) == 6) {
   $14 = ($1|0)==(0|0);
   if ($14) {
    $$083 = 0;$19 = 189597;
   } else {
    $15 = HEAP8[$1>>0]|0;
    $16 = ($15<<24>>24)==(0);
    if ($16) {
     $$1 = -8;
     break;
    }
    $17 = (_strtoul($1,$6,10)|0);
    $$pre = HEAP32[$6>>2]|0;
    $$083 = $17;$19 = $$pre;
   }
   $18 = HEAP8[$19>>0]|0;
   $20 = ($18<<24>>24)==(0);
   if ($20) {
    $21 = ($$083>>>0)>(65535);
    if ($21) {
     $$1 = -8;
     break;
    }
    $22 = ($$082|0)==(17);
    if ($22) {
     $23 = ((($0)) + 3|0);
     $24 = ((($0)) + 2|0);
     $$pre103 = $$083&65535;
     $$pre$phiZ2D = $$pre103;$102 = 1;$32 = $0;$33 = $23;$34 = $24;
    } else {
     $25 = $$083&65535;
     HEAP16[$0>>1] = $25;
     $26 = ((($0)) + 3|0);
     HEAP8[$26>>0] = 1;
     $27 = ((($0)) + 2|0);
     HEAP8[$27>>0] = 6;
     $28 = ($$082|0)==(6);
     $29 = ((($0)) + 4|0);
     $30 = ((($0)) + 7|0);
     $31 = ((($0)) + 6|0);
     if ($28) {
      $$1 = 1;
      break;
     } else {
      $$pre$phiZ2D = $25;$102 = 2;$32 = $29;$33 = $30;$34 = $31;
     }
    }
    HEAP16[$32>>1] = $$pre$phiZ2D;
    HEAP8[$33>>0] = 2;
    HEAP8[$34>>0] = 17;
    $$1 = $102;
    break;
   }
   $35 = $4 & 1024;
   $36 = ($35|0)==(0);
   if ($36) {
    $37 = (_strlen($1)|0);
    $38 = (___fopen_rb_ca(182799,$8,$7,1032)|0);
    $39 = ($38|0)==(0|0);
    L21: do {
     if ($39) {
      $44 = (___errno_location()|0);
      $45 = HEAP32[$44>>2]|0;
      switch ($45|0) {
      case 13: case 20: case 2:  {
       $$0 = -8;
       break L21;
       break;
      }
      default: {
      }
      }
      $$0 = -11;
     } else {
      $40 = (_fgets($5,128,$38)|0);
      $41 = ($40|0)==(0|0);
      L25: do {
       if ($41) {
        $$2$ph$lcssa = 0;
       } else {
        $42 = ($$082|0)==(6);
        $43 = ($$082|0)==(17);
        $$2$ph98 = 0;
        while(1) {
         L29: while(1) {
          $46 = (_strchr($5,35)|0);
          $47 = ($46|0)==(0|0);
          if (!($47)) {
           $48 = ((($46)) + 1|0);
           HEAP8[$46>>0] = 10;
           HEAP8[$48>>0] = 0;
          }
          $49 = (_strstr($5,$1)|0);
          $50 = ($49|0)==(0|0);
          L34: do {
           if (!($50)) {
            $52 = $49;
            while(1) {
             $51 = ($52>>>0)>($5>>>0);
             if ($51) {
              $53 = ((($52)) + -1|0);
              $54 = HEAP8[$53>>0]|0;
              $55 = $54 << 24 >> 24;
              $56 = (_isspace($55)|0);
              $57 = ($56|0)==(0);
              if (!($57)) {
               label = 26;
              }
             } else {
              label = 26;
             }
             if ((label|0) == 26) {
              label = 0;
              $58 = (($52) + ($37)|0);
              $59 = HEAP8[$58>>0]|0;
              $60 = ($59<<24>>24)==(0);
              if ($60) {
               break;
              }
              $63 = $59 << 24 >> 24;
              $64 = (_isspace($63)|0);
              $65 = ($64|0)==(0);
              if (!($65)) {
               break;
              }
             }
             $66 = ((($52)) + 1|0);
             $67 = (_strstr($66,$1)|0);
             $68 = ($67|0)==(0|0);
             if ($68) {
              break L34;
             } else {
              $52 = $67;
             }
            }
            $61 = HEAP8[$5>>0]|0;
            $62 = ($61<<24>>24)==(0);
            L44: do {
             if ($62) {
              $$185$lcssa = $5;
             } else {
              $$18591 = $5;$70 = $61;
              while(1) {
               $69 = $70 << 24 >> 24;
               $71 = (_isspace($69)|0);
               $72 = ($71|0)==(0);
               if (!($72)) {
                $$185$lcssa = $$18591;
                break L44;
               }
               $73 = ((($$18591)) + 1|0);
               $74 = HEAP8[$73>>0]|0;
               $75 = ($74<<24>>24)==(0);
               if ($75) {
                $$185$lcssa = $73;
                break;
               } else {
                $$18591 = $73;$70 = $74;
               }
              }
             }
            } while(0);
            $76 = (_strtoul($$185$lcssa,$6,10)|0);
            $77 = ($76>>>0)>(65535);
            if (!($77)) {
             $78 = HEAP32[$6>>2]|0;
             $79 = ($78|0)==($$185$lcssa|0);
             if (!($79)) {
              $82 = (_strncmp($78,182813,4)|0);
              $83 = ($82|0)==(0);
              if (!($83)) {
               $$3 = $$2$ph98;
               break L29;
              }
              if (!($42)) {
               label = 37;
               break L29;
              }
             }
            }
           }
          } while(0);
          $80 = (_fgets($5,128,$38)|0);
          $81 = ($80|0)==(0|0);
          if ($81) {
           $$2$ph$lcssa = $$2$ph98;
           break L25;
          }
         }
         if ((label|0) == 37) {
          label = 0;
          $84 = $76&65535;
          $85 = (($0) + ($$2$ph98<<2)|0);
          HEAP16[$85>>1] = $84;
          $86 = (((($0) + ($$2$ph98<<2)|0)) + 3|0);
          HEAP8[$86>>0] = 2;
          $87 = (($$2$ph98) + 1)|0;
          $88 = (((($0) + ($$2$ph98<<2)|0)) + 2|0);
          HEAP8[$88>>0] = 17;
          $$3 = $87;
         }
         $89 = (_strncmp($78,182818,4)|0);
         $90 = ($89|0)!=(0);
         $or$cond = $43 | $90;
         if ($or$cond) {
          $$2$ph$be = $$3;
         } else {
          $95 = (((($0) + ($$3<<2)|0)) + 2|0);
          $96 = (($$3) + 1)|0;
          $97 = (((($0) + ($$3<<2)|0)) + 3|0);
          $98 = (($0) + ($$3<<2)|0);
          $99 = $76&65535;
          HEAP16[$98>>1] = $99;
          HEAP8[$97>>0] = 1;
          HEAP8[$95>>0] = 6;
          $$2$ph$be = $96;
         }
         $91 = (_fgets($5,128,$38)|0);
         $92 = ($91|0)!=(0|0);
         $93 = ($$2$ph$be|0)<(2);
         $94 = $93 & $92;
         if ($94) {
          $$2$ph98 = $$2$ph$be;
         } else {
          $$2$ph$lcssa = $$2$ph$be;
          break;
         }
        }
       }
      } while(0);
      (___fclose_ca($38)|0);
      $100 = ($$2$ph$lcssa|0)>(0);
      $101 = $100 ? $$2$ph$lcssa : -8;
      $$0 = $101;
     }
    } while(0);
    $$1 = $$0;
   } else {
    $$1 = -8;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function _getservbyport($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $getservbyport$se$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (_getservbyport_r($0,$1,186012,186028,32,$2)|0);
 $4 = ($3|0)==(0);
 $getservbyport$se$ = $4 ? 186012 : 0;
 STACKTOP = sp;return ($getservbyport$se$|0);
}
function _getservbyport_r($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$044 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 HEAP16[$6>>1] = 2;
 $7 = ((($6)) + 2|0);
 $8 = $0&65535;
 HEAP16[$7>>1] = $8;
 $9 = ((($6)) + 4|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($6)) + 8|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 $15 = ($1|0)==(0|0);
 L1: do {
  if ($15) {
   $16 = (_getservbyport_r($0,182823,$2,$3,$4,$5)|0);
   $17 = ($16|0)==(0);
   if ($17) {
    $$044 = 0;
   } else {
    $18 = (_getservbyport_r($0,182827,$2,$3,$4,$5)|0);
    $$044 = $18;
   }
  } else {
   $19 = $3;
   $20 = $19 & 3;
   $21 = ($20|0)!=(0);
   $$ = $21 ? $20 : 4;
   $22 = (12 - ($$))|0;
   $23 = ($22>>>0)>($4>>>0);
   if ($23) {
    $$044 = 34;
   } else {
    $24 = (4 - ($$))|0;
    $25 = (($3) + ($24)|0);
    $26 = (_strcmp($1,182823)|0);
    $27 = ($26|0)==(0);
    if (!($27)) {
     $28 = (_strcmp($1,182827)|0);
     $29 = ($28|0)==(0);
     if (!($29)) {
      $$044 = 22;
      break;
     }
    }
    $30 = ((($2)) + 8|0);
    HEAP32[$30>>2] = $0;
    $31 = ((($2)) + 12|0);
    HEAP32[$31>>2] = $1;
    $32 = ((($2)) + 4|0);
    HEAP32[$32>>2] = $25;
    $33 = ((($25)) + 8|0);
    $34 = (($4) + -8)|0;
    $35 = (($34) - ($24))|0;
    $36 = ((($25)) + 4|0);
    HEAP32[$36>>2] = 0;
    HEAP32[$2>>2] = $33;
    $37 = HEAP32[$32>>2]|0;
    HEAP32[$37>>2] = $33;
    $38 = (_strcmp($1,182827)|0);
    $39 = ($38|0)!=(0);
    $40 = $39 ? 0 : 16;
    $41 = (_getnameinfo(($6|0),16,(0|0),0,($33|0),($35|0),($40|0))|0);
    switch ($41|0) {
    case -11: case -10:  {
     $$044 = 12;
     break L1;
     break;
    }
    case 0:  {
     HEAP32[$5>>2] = $2;
     $$044 = 0;
     break L1;
     break;
    }
    default: {
     $$044 = 2;
     break L1;
    }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$044|0);
}
function _getsockname($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 HEAP32[$3>>2] = $0;
 $4 = ((($3)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = ((($3)) + 8|0);
 $7 = $2;
 HEAP32[$6>>2] = $7;
 $8 = ((($3)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 16|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($3)) + 20|0);
 HEAP32[$10>>2] = 0;
 $11 = $3;
 HEAP32[$vararg_buffer>>2] = 6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $11;
 $12 = (___syscall102(102,($vararg_buffer|0))|0);
 $13 = (___syscall_ret($12)|0);
 STACKTOP = sp;return ($13|0);
}
function _getsockopt($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = sp + 8|0;
 HEAP32[$5>>2] = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $1;
 $7 = ((($5)) + 8|0);
 HEAP32[$7>>2] = $2;
 $8 = ((($5)) + 12|0);
 $9 = $3;
 HEAP32[$8>>2] = $9;
 $10 = ((($5)) + 16|0);
 $11 = $4;
 HEAP32[$10>>2] = $11;
 $12 = ((($5)) + 20|0);
 HEAP32[$12>>2] = 0;
 $13 = $5;
 HEAP32[$vararg_buffer>>2] = 15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 $14 = (___syscall102(102,($vararg_buffer|0))|0);
 $15 = (___syscall_ret($14)|0);
 STACKTOP = sp;return ($15|0);
}
function ___h_errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (185728|0);
}
function _herror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = HEAP32[1870]|0;
 $2 = ($0|0)!=(0|0);
 $3 = $2 ? $0 : 189597;
 $4 = $2 ? 182831 : 189597;
 $5 = (___h_errno_location()|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_hstrerror($6)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $7;
 (_fprintf($1,182834,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _hstrerror($0) {
 $0 = $0|0;
 var $$$0 = 0, $$0$lcssa = 0, $$010 = 0, $$01011 = 0, $$01013 = 0, $$012 = 0, $$pr = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $$01011 = (($0) + -1)|0;
 $1 = ($$01011|0)==(0);
 L1: do {
  if ($1) {
   $$0$lcssa = 182841;
  } else {
   $$01013 = $$01011;$$012 = 182841;
   while(1) {
    $3 = HEAP8[$$012>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$0$lcssa = $$012;
     break L1;
    }
    $5 = ((($$012)) + 1|0);
    $6 = $5;
    while(1) {
     $$pr = HEAP8[$6>>0]|0;
     $7 = ($$pr<<24>>24)==(0);
     $8 = ((($6)) + 1|0);
     if ($7) {
      break;
     } else {
      $6 = $8;
     }
    }
    $$010 = (($$01013) + -1)|0;
    $2 = ($$010|0)==(0);
    if ($2) {
     $$0$lcssa = $8;
     break;
    } else {
     $$01013 = $$010;$$012 = $8;
    }
   }
  }
 } while(0);
 $9 = HEAP8[$$0$lcssa>>0]|0;
 $10 = ($9<<24>>24)==(0);
 $11 = ((($$0$lcssa)) + 1|0);
 $$$0 = $10 ? $11 : $$0$lcssa;
 $12 = (___lctrans_cur($$$0)|0);
 return ($12|0);
}
function _if_freenameindex($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function _if_indextoname($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 16|0;
 $3 = (_socket(1,524290,0)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = ((($2)) + 16|0);
  HEAP32[$5>>2] = $0;
  HEAP32[$vararg_buffer>>2] = $2;
  $6 = (_ioctl($3,35088,$vararg_buffer)|0);
  HEAP32[$vararg_buffer1>>2] = $3;
  (___syscall6(6,($vararg_buffer1|0))|0);
  $7 = ($6|0)<(0);
  if ($7) {
   $$0 = 0;
  } else {
   $8 = (_strncpy($1,$2,16)|0);
   $$0 = $1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($0,$1,$2)|0);
 return ($0|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03753 = 0, $$038$lcssa = 0, $$03866 = 0, $$039$lcssa = 0, $$03965 = 0, $$041$lcssa = 0, $$04164 = 0, $$054 = 0, $$1$lcssa = 0, $$140$ph = 0, $$14046 = 0, $$142$ph = 0, $$14245 = 0, $$152 = 0, $$2$ph = 0, $$243 = 0, $$247 = 0, $$3 = 0;
 var $$lcssa = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond63 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond63 = $10 & $9;
   if ($or$cond63) {
    $$03866 = $2;$$03965 = $1;$$04164 = $0;
    while(1) {
     $11 = HEAP8[$$03965>>0]|0;
     HEAP8[$$04164>>0] = $11;
     $12 = ($11<<24>>24)==(0);
     if ($12) {
      $$243 = $$04164;$$3 = $$03866;
      break L1;
     }
     $13 = (($$03866) + -1)|0;
     $14 = ((($$03965)) + 1|0);
     $15 = ((($$04164)) + 1|0);
     $16 = $14;
     $17 = $16 & 3;
     $18 = ($17|0)!=(0);
     $19 = ($13|0)!=(0);
     $or$cond = $19 & $18;
     if ($or$cond) {
      $$03866 = $13;$$03965 = $14;$$04164 = $15;
     } else {
      $$038$lcssa = $13;$$039$lcssa = $14;$$041$lcssa = $15;$$lcssa = $19;
      break;
     }
    }
   } else {
    $$038$lcssa = $2;$$039$lcssa = $1;$$041$lcssa = $0;$$lcssa = $10;
   }
   if ($$lcssa) {
    $$pr = HEAP8[$$039$lcssa>>0]|0;
    $20 = ($$pr<<24>>24)==(0);
    if ($20) {
     $$243 = $$041$lcssa;$$3 = $$038$lcssa;
    } else {
     $21 = ($$038$lcssa>>>0)>(3);
     L10: do {
      if ($21) {
       $$03753 = $$041$lcssa;$$054 = $$039$lcssa;$$152 = $$038$lcssa;
       while(1) {
        $22 = HEAP32[$$054>>2]|0;
        $23 = (($22) + -16843009)|0;
        $24 = $22 & -2139062144;
        $25 = $24 ^ -2139062144;
        $26 = $25 & $23;
        $27 = ($26|0)==(0);
        if (!($27)) {
         $$0$lcssa = $$054;$$037$lcssa = $$03753;$$1$lcssa = $$152;
         break L10;
        }
        HEAP32[$$03753>>2] = $22;
        $28 = (($$152) + -4)|0;
        $29 = ((($$054)) + 4|0);
        $30 = ((($$03753)) + 4|0);
        $31 = ($28>>>0)>(3);
        if ($31) {
         $$03753 = $30;$$054 = $29;$$152 = $28;
        } else {
         $$0$lcssa = $29;$$037$lcssa = $30;$$1$lcssa = $28;
         break;
        }
       }
      } else {
       $$0$lcssa = $$039$lcssa;$$037$lcssa = $$041$lcssa;$$1$lcssa = $$038$lcssa;
      }
     } while(0);
     $$140$ph = $$0$lcssa;$$142$ph = $$037$lcssa;$$2$ph = $$1$lcssa;
     label = 11;
    }
   } else {
    $$243 = $$041$lcssa;$$3 = 0;
   }
  } else {
   $$140$ph = $1;$$142$ph = $0;$$2$ph = $2;
   label = 11;
  }
 } while(0);
 L15: do {
  if ((label|0) == 11) {
   $32 = ($$2$ph|0)==(0);
   if ($32) {
    $$243 = $$142$ph;$$3 = 0;
   } else {
    $$14046 = $$140$ph;$$14245 = $$142$ph;$$247 = $$2$ph;
    while(1) {
     $33 = HEAP8[$$14046>>0]|0;
     HEAP8[$$14245>>0] = $33;
     $34 = ($33<<24>>24)==(0);
     if ($34) {
      $$243 = $$14245;$$3 = $$247;
      break L15;
     }
     $35 = (($$247) + -1)|0;
     $36 = ((($$14046)) + 1|0);
     $37 = ((($$14245)) + 1|0);
     $38 = ($35|0)==(0);
     if ($38) {
      $$243 = $37;$$3 = 0;
      break;
     } else {
      $$14046 = $36;$$14245 = $37;$$247 = $35;
     }
    }
   }
  }
 } while(0);
 _memset(($$243|0),0,($$3|0))|0;
 return ($$243|0);
}
function _if_nameindex() {
 var $$03844 = 0, $$03943 = 0, $$040$lcssa = 0, $$04042 = 0, $$041 = 0, $$045 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $0 = sp + 8|0;
 $1 = sp;
 (_pthread_setcancelstate(1,($1|0))|0);
 _memset(($0|0),0,272)|0;
 $2 = (___rtnetlink_enumerate(0,2,16,$0)|0);
 $3 = ($2|0)<(0);
 if ($3) {
  $$041 = 0;
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = $4 << 3;
  $6 = (($5) + 8)|0;
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + ($8))|0;
  $10 = (_malloc($9)|0);
  $11 = ($10|0)==(0|0);
  if ($11) {
   $$041 = $10;
  } else {
   $12 = ($4|0)==(0);
   if ($12) {
    $$040$lcssa = $10;
   } else {
    $13 = ((($0)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($10) + ($4<<3)|0);
    $16 = ((($15)) + 8|0);
    $scevgep = (($10) + ($5)|0);
    $$03844 = $16;$$03943 = $14;$$04042 = $10;$$045 = $4;
    while(1) {
     $17 = ((($$03943)) + 4|0);
     $18 = HEAP32[$17>>2]|0;
     HEAP32[$$04042>>2] = $18;
     $19 = ((($$04042)) + 4|0);
     HEAP32[$19>>2] = $$03844;
     $20 = ((($$03943)) + 9|0);
     $21 = ((($$03943)) + 8|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = $22&255;
     _memcpy(($$03844|0),($20|0),($23|0))|0;
     $24 = HEAP8[$21>>0]|0;
     $25 = $24&255;
     $26 = (($$03844) + ($25)|0);
     $27 = ((($26)) + 1|0);
     HEAP8[$26>>0] = 0;
     $28 = (($$045) + -1)|0;
     $29 = ((($$03943)) + 28|0);
     $30 = ((($$04042)) + 8|0);
     $31 = ($28|0)==(0);
     if ($31) {
      break;
     } else {
      $$03844 = $27;$$03943 = $29;$$04042 = $30;$$045 = $28;
     }
    }
    $$040$lcssa = $scevgep;
   }
   HEAP32[$$040$lcssa>>2] = 0;
   $32 = ((($$040$lcssa)) + 4|0);
   HEAP32[$32>>2] = 0;
   $$041 = $10;
  }
 }
 $33 = HEAP32[$1>>2]|0;
 (_pthread_setcancelstate(($33|0),(0|0))|0);
 $34 = ((($0)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 _free($35);
 $36 = (___errno_location()|0);
 HEAP32[$36>>2] = 105;
 STACKTOP = sp;return ($$041|0);
}
function _netlink_msg_to_nameindex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$082$ph = 0, $$083 = 0, $$08389 = 0, $$08390 = 0, $$1 = 0, $$in = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre99 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(16);
 $5 = ((($1)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 24|0);
 $8 = ((($1)) + 32|0);
 $$082$ph = $4 ? $8 : $7;
 $9 = HEAP32[$1>>2]|0;
 $10 = (($1) + ($9)|0);
 $11 = $10;
 $12 = $$082$ph;
 $13 = (($11) - ($12))|0;
 $14 = ($13>>>0)>(3);
 L1: do {
  if ($14) {
   $$in = $$082$ph;
   while(1) {
    $15 = ((($$in)) + 2|0);
    $16 = HEAP16[$15>>1]|0;
    $17 = ($16<<16>>16)==(3);
    $18 = HEAP16[$$in>>1]|0;
    $19 = $18&65535;
    if ($17) {
     break;
    }
    $71 = (($19) + 3)|0;
    $72 = $71 & 131068;
    $73 = (($$in) + ($72)|0);
    $74 = $73;
    $75 = (($11) - ($74))|0;
    $76 = ($75>>>0)>(3);
    if ($76) {
     $$in = $73;
    } else {
     $$1 = 0;
     break L1;
    }
   }
   $20 = (($19) + -4)|0;
   $21 = (($19) + -5)|0;
   $22 = ($18&65535)>(21);
   if ($22) {
    $$1 = 0;
   } else {
    $23 = (($6|0) % 64)&-1;
    $24 = ((($0)) + 16|0);
    $25 = (($24) + ($23<<2)|0);
    $$08389 = HEAP32[$25>>2]|0;
    $26 = ($$08389|0)==(0);
    if (!($26)) {
     $27 = ((($0)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ((($$in)) + 4|0);
     $$08390 = $$08389;
     while(1) {
      $30 = (($$08390) + -1)|0;
      $31 = (((($28) + (($30*28)|0)|0)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($32|0)==($6|0);
      if ($33) {
       $34 = (((($28) + (($30*28)|0)|0)) + 8|0);
       $35 = HEAP8[$34>>0]|0;
       $36 = $35&255;
       $37 = ($21|0)==($36|0);
       if ($37) {
        $38 = (((($28) + (($30*28)|0)|0)) + 9|0);
        $39 = (_memcmp($38,$29,$21)|0);
        $40 = ($39|0)==(0);
        if ($40) {
         $$1 = 0;
         break L1;
        }
       }
      }
      $41 = (($28) + (($30*28)|0)|0);
      $$083 = HEAP32[$41>>2]|0;
      $42 = ($$083|0)==(0);
      if ($42) {
       break;
      } else {
       $$08390 = $$083;
      }
     }
    }
    $43 = HEAP32[$0>>2]|0;
    $44 = ((($0)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($43>>>0)<($45>>>0);
    if ($46) {
     $$phi$trans$insert = ((($0)) + 12|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     $58 = $$pre;$59 = $43;
    } else {
     $47 = ($45|0)==(0);
     $48 = $45 << 1;
     $49 = $48 | 1;
     $50 = $47 ? 8 : $49;
     $51 = ($50>>>0)>(153391689);
     if ($51) {
      $$1 = -1;
      break;
     }
     $52 = ((($0)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($50*28)|0;
     $55 = (_realloc($53,$54)|0);
     $56 = ($55|0)==(0|0);
     if ($56) {
      $$1 = -1;
      break;
     }
     HEAP32[$52>>2] = $55;
     HEAP32[$44>>2] = $50;
     $$pre99 = HEAP32[$0>>2]|0;
     $58 = $55;$59 = $$pre99;
    }
    $57 = (((($58) + (($59*28)|0)|0)) + 4|0);
    HEAP32[$57>>2] = $6;
    $60 = $21&255;
    $61 = (((($58) + (($59*28)|0)|0)) + 8|0);
    HEAP8[$61>>0] = $60;
    $62 = (((($58) + (($59*28)|0)|0)) + 9|0);
    $63 = ((($$in)) + 4|0);
    _memcpy(($62|0),($63|0),($21|0))|0;
    $64 = ((($0)) + 8|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($20) + ($65))|0;
    HEAP32[$64>>2] = $66;
    $67 = HEAP32[$0>>2]|0;
    $68 = (($67) + 1)|0;
    HEAP32[$0>>2] = $68;
    $69 = HEAP32[$25>>2]|0;
    $70 = (($58) + (($59*28)|0)|0);
    HEAP32[$70>>2] = $69;
    HEAP32[$25>>2] = $68;
    $$1 = 0;
   }
  } else {
   $$1 = 0;
  }
 } while(0);
 return ($$1|0);
}
function _if_nametoindex($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 16|0;
 $2 = (_socket(1,524290,0)|0);
 $3 = ($2|0)<(0);
 if ($3) {
  $$0 = 0;
 } else {
  (_strncpy($1,$0,16)|0);
  HEAP32[$vararg_buffer>>2] = $1;
  $4 = (_ioctl($2,35123,$vararg_buffer)|0);
  HEAP32[$vararg_buffer1>>2] = $2;
  (___syscall6(6,($vararg_buffer1|0))|0);
  $5 = ($4|0)<(0);
  $6 = ((($1)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $5 ? 0 : $7;
  $$0 = $8;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___inet_aton($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$021 = 0, $$02226 = 0, $$027 = 0, $$125 = 0, $$phi$trans$insert = 0, $$phi$trans$insert30 = 0, $$pre = 0, $$pre$phi32Z2D = 0, $$pre$phiZ2D = 0, $$pre31 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 8|0;
 $3 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 $$02226 = $0;$$027 = 0;
 L1: while(1) {
  $4 = (_strtoul($$02226,$3,0)|0);
  $5 = (($2) + ($$027<<2)|0);
  HEAP32[$5>>2] = $4;
  $6 = HEAP32[$3>>2]|0;
  $7 = ($6|0)==($$02226|0);
  if ($7) {
   $$021 = 0;
   break;
  }
  $8 = HEAP8[$6>>0]|0;
  switch ($8<<24>>24) {
  case 46: case 0:  {
   break;
  }
  default: {
   $$021 = 0;
   break L1;
  }
  }
  $9 = HEAP8[$$02226>>0]|0;
  $10 = $9 << 24 >> 24;
  $isdigittmp = (($10) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if (!($isdigit)) {
   $$021 = 0;
   break;
  }
  $11 = ($8<<24>>24)==(0);
  if ($11) {
   $$0$lcssa = $$027;
   label = 7;
   break;
  }
  $12 = ((($6)) + 1|0);
  $13 = (($$027) + 1)|0;
  $14 = ($$027|0)<(3);
  if ($14) {
   $$02226 = $12;$$027 = $13;
  } else {
   $$0$lcssa = $13;
   label = 7;
   break;
  }
 }
 L7: do {
  if ((label|0) == 7) {
   switch ($$0$lcssa|0) {
   case 4:  {
    $$021 = 0;
    break L7;
    break;
   }
   case 0:  {
    $15 = HEAP32[$2>>2]|0;
    $16 = $15 & 16777215;
    $17 = ((($2)) + 4|0);
    HEAP32[$17>>2] = $16;
    $18 = $15 >>> 24;
    HEAP32[$2>>2] = $18;
    $$pre$phiZ2D = $17;$20 = $16;
    label = 11;
    break;
   }
   case 1:  {
    $$phi$trans$insert = ((($2)) + 4|0);
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$pre$phiZ2D = $$phi$trans$insert;$20 = $$pre;
    label = 11;
    break;
   }
   case 2:  {
    $$phi$trans$insert30 = ((($2)) + 8|0);
    $$pre31 = HEAP32[$$phi$trans$insert30>>2]|0;
    $$pre$phi32Z2D = $$phi$trans$insert30;$24 = $$pre31;
    label = 12;
    break;
   }
   default: {
    $$125 = 0;
   }
   }
   if ((label|0) == 11) {
    $19 = $20 & 65535;
    $21 = ((($2)) + 8|0);
    HEAP32[$21>>2] = $19;
    $22 = $20 >>> 16;
    HEAP32[$$pre$phiZ2D>>2] = $22;
    $$pre$phi32Z2D = $21;$24 = $19;
    label = 12;
   }
   if ((label|0) == 12) {
    $23 = $24 & 255;
    $25 = ((($2)) + 12|0);
    HEAP32[$25>>2] = $23;
    $26 = $24 >>> 8;
    HEAP32[$$pre$phi32Z2D>>2] = $26;
    $$125 = 0;
   }
   while(1) {
    $27 = (($2) + ($$125<<2)|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28>>>0)>(255);
    if ($29) {
     $$021 = 0;
     break L7;
    }
    $30 = $28&255;
    $31 = (($1) + ($$125)|0);
    HEAP8[$31>>0] = $30;
    $32 = (($$125) + 1)|0;
    $33 = ($$125|0)<(3);
    if ($33) {
     $$125 = $32;
    } else {
     $$021 = 1;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$021|0);
}
function _inet_network($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_inet_addr(($0|0))|0);
 $2 = (_ntohl($1)|0);
 return ($2|0);
}
function _ntohl($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___bswap_32_484($0)|0);
 return ($1|0);
}
function ___bswap_32_484($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_llvm_bswap_i32(($0|0))|0);
 return ($1|0);
}
function _inet_makeaddr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$sink = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)<(256);
 $3 = ($0>>>0)<(65536);
 $$ = $3 ? 16 : 8;
 $$sink = $2 ? 24 : $$;
 $4 = $0 << $$sink;
 $$0 = $4 | $1;
 return ($$0|0);
}
function _inet_lnaof($0) {
 $0 = $0|0;
 var $$ = 0, $$sink = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 $3 = ($1>>>0)<(3221225472);
 $$ = $3 ? 65535 : 255;
 $$sink = $2 ? 16777215 : $$;
 $4 = $$sink & $1;
 return ($4|0);
}
function _inet_netof($0) {
 $0 = $0|0;
 var $$ = 0, $$sink = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 $3 = ($1>>>0)<(3221225472);
 $$ = $3 ? 16 : 8;
 $$sink = $2 ? 24 : $$;
 $4 = $1 >>> $$sink;
 return ($4|0);
}
function _inet_ntoa($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = ((($0)) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ((($0)) + 2|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ((($0)) + 3|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $8;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $11;
 (_snprintf(189581,16,182925,$vararg_buffer)|0);
 STACKTOP = sp;return (189581|0);
}
function _inet_ntop($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$060 = 0, $$06065 = 0, $$062 = 0, $$063$$0 = 0, $$06364 = 0, $$066 = 0, $$1 = 0, $$161 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $phitmp = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = sp + 88|0;
 switch ($0|0) {
 case 2:  {
  $5 = HEAP8[$1>>0]|0;
  $6 = $5&255;
  $7 = ((($1)) + 1|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = ((($1)) + 2|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ((($1)) + 3|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  HEAP32[$vararg_buffer>>2] = $6;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $12;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $15;
  $16 = (_snprintf($2,$3,182925,$vararg_buffer)|0);
  $17 = ($16>>>0)<($3>>>0);
  if ($17) {
   $$062 = $2;
  } else {
   label = 15;
  }
  break;
 }
 case 10:  {
  $18 = (_memcmp($1,183114,12)|0);
  $19 = ($18|0)==(0);
  $20 = HEAP8[$1>>0]|0;
  $21 = $20&255;
  $22 = $21 << 8;
  $23 = ((($1)) + 1|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $22 | $25;
  $27 = ((($1)) + 2|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = $29 << 8;
  $31 = ((($1)) + 3|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = $30 | $33;
  $35 = ((($1)) + 4|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = $37 << 8;
  $39 = ((($1)) + 5|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $38 | $41;
  $43 = ((($1)) + 6|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = $45 << 8;
  $47 = ((($1)) + 7|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = $46 | $49;
  $51 = ((($1)) + 8|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = $53 << 8;
  $55 = ((($1)) + 9|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = $54 | $57;
  $59 = ((($1)) + 10|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = $61 << 8;
  $63 = ((($1)) + 11|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = $62 | $65;
  $67 = ((($1)) + 12|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  if ($19) {
   $83 = ((($1)) + 13|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = ((($1)) + 14|0);
   $87 = HEAP8[$86>>0]|0;
   $88 = $87&255;
   $89 = ((($1)) + 15|0);
   $90 = HEAP8[$89>>0]|0;
   $91 = $90&255;
   HEAP32[$vararg_buffer14>>2] = $26;
   $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
   HEAP32[$vararg_ptr17>>2] = $34;
   $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
   HEAP32[$vararg_ptr18>>2] = $42;
   $vararg_ptr19 = ((($vararg_buffer14)) + 12|0);
   HEAP32[$vararg_ptr19>>2] = $50;
   $vararg_ptr20 = ((($vararg_buffer14)) + 16|0);
   HEAP32[$vararg_ptr20>>2] = $58;
   $vararg_ptr21 = ((($vararg_buffer14)) + 20|0);
   HEAP32[$vararg_ptr21>>2] = $66;
   $vararg_ptr22 = ((($vararg_buffer14)) + 24|0);
   HEAP32[$vararg_ptr22>>2] = $69;
   $vararg_ptr23 = ((($vararg_buffer14)) + 28|0);
   HEAP32[$vararg_ptr23>>2] = $85;
   $vararg_ptr24 = ((($vararg_buffer14)) + 32|0);
   HEAP32[$vararg_ptr24>>2] = $88;
   $vararg_ptr25 = ((($vararg_buffer14)) + 36|0);
   HEAP32[$vararg_ptr25>>2] = $91;
   (_snprintf($4,100,182961,$vararg_buffer14)|0);
  } else {
   $70 = $69 << 8;
   $71 = ((($1)) + 13|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72&255;
   $74 = $70 | $73;
   $75 = ((($1)) + 14|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&255;
   $78 = $77 << 8;
   $79 = ((($1)) + 15|0);
   $80 = HEAP8[$79>>0]|0;
   $81 = $80&255;
   $82 = $78 | $81;
   HEAP32[$vararg_buffer4>>2] = $26;
   $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $34;
   $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
   HEAP32[$vararg_ptr8>>2] = $42;
   $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
   HEAP32[$vararg_ptr9>>2] = $50;
   $vararg_ptr10 = ((($vararg_buffer4)) + 16|0);
   HEAP32[$vararg_ptr10>>2] = $58;
   $vararg_ptr11 = ((($vararg_buffer4)) + 20|0);
   HEAP32[$vararg_ptr11>>2] = $66;
   $vararg_ptr12 = ((($vararg_buffer4)) + 24|0);
   HEAP32[$vararg_ptr12>>2] = $74;
   $vararg_ptr13 = ((($vararg_buffer4)) + 28|0);
   HEAP32[$vararg_ptr13>>2] = $82;
   (_snprintf($4,100,182937,$vararg_buffer4)|0);
  }
  $92 = HEAP8[$4>>0]|0;
  $93 = ($92<<24>>24)==(0);
  if (!($93)) {
   $$06065 = 2;$$06364 = 0;$$066 = 0;$96 = $92;$97 = $4;
   while(1) {
    $94 = ($$06364|0)==(0);
    $95 = ($96<<24>>24)==(58);
    $or$cond = $94 | $95;
    if ($or$cond) {
     $98 = (_strspn($97,182991)|0);
     $99 = ($98|0)>($$06065|0);
     $$$060 = $99 ? $98 : $$06065;
     $$063$$0 = $99 ? $$06364 : $$066;
     $$1 = $$063$$0;$$161 = $$$060;
    } else {
     $$1 = $$066;$$161 = $$06065;
    }
    $100 = (($$06364) + 1)|0;
    $101 = (($4) + ($100)|0);
    $102 = HEAP8[$101>>0]|0;
    $103 = ($102<<24>>24)==(0);
    if ($103) {
     break;
    } else {
     $$06065 = $$161;$$06364 = $100;$$066 = $$1;$96 = $102;$97 = $101;
    }
   }
   $104 = ($$161|0)>(2);
   $105 = (($4) + ($$1)|0);
   if ($104) {
    $phitmp = (($$06364) + 2)|0;
    $106 = (($phitmp) - ($$161))|0;
    $107 = (($106) - ($$1))|0;
    $108 = (($105) + ($$161)|0);
    $109 = ((($105)) + 2|0);
    $110 = (($$1) + 1)|0;
    $111 = (($4) + ($110)|0);
    HEAP8[$111>>0] = 58;
    HEAP8[$105>>0] = 58;
    _memmove(($109|0),($108|0),($107|0))|0;
   }
  }
  $112 = (_strlen($4)|0);
  $113 = ($112>>>0)<($3>>>0);
  if ($113) {
   (_strcpy($2,$4)|0);
   $$062 = $2;
  } else {
   label = 15;
  }
  break;
 }
 default: {
  $114 = (___errno_location()|0);
  HEAP32[$114>>2] = 97;
  $$062 = 0;
 }
 }
 if ((label|0) == 15) {
  $115 = (___errno_location()|0);
  HEAP32[$115>>2] = 28;
  $$062 = 0;
 }
 STACKTOP = sp;return ($$062|0);
}
function _strspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01925 = 0, $$020 = 0, $$1$lcssa = 0, $$123 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0, $div21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ((($1)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $$020 = $0;
    while(1) {
     $8 = HEAP8[$$020>>0]|0;
     $9 = ($8<<24>>24)==($3<<24>>24);
     $10 = ((($$020)) + 1|0);
     if ($9) {
      $$020 = $10;
     } else {
      break;
     }
    }
    $11 = $$020;
    $12 = $0;
    $13 = (($11) - ($12))|0;
    $$0 = $13;
    break;
   } else {
    $$01925 = $1;$17 = $3;
   }
   while(1) {
    $16 = $17 & 31;
    $18 = $16&255;
    $19 = 1 << $18;
    $div21 = ($17&255) >>> 5;
    $20 = $div21&255;
    $21 = (($2) + ($20<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $22 | $19;
    HEAP32[$21>>2] = $23;
    $24 = ((($$01925)) + 1|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = ($25<<24>>24)==(0);
    if ($26) {
     break;
    } else {
     $$01925 = $24;$17 = $25;
    }
   }
   $14 = HEAP8[$0>>0]|0;
   $15 = ($14<<24>>24)==(0);
   L10: do {
    if ($15) {
     $$1$lcssa = $0;
    } else {
     $$123 = $0;$27 = $14;
     while(1) {
      $div = ($27&255) >>> 5;
      $28 = $div&255;
      $29 = (($2) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = $27 & 31;
      $32 = $31&255;
      $33 = 1 << $32;
      $34 = $30 & $33;
      $35 = ($34|0)==(0);
      if ($35) {
       $$1$lcssa = $$123;
       break L10;
      }
      $36 = ((($$123)) + 1|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = ($37<<24>>24)==(0);
      if ($38) {
       $$1$lcssa = $36;
       break;
      } else {
       $$123 = $36;$27 = $37;
      }
     }
    }
   } while(0);
   $39 = $$1$lcssa;
   $40 = $0;
   $41 = (($39) - ($40))|0;
   $$0 = $41;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _listen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 HEAP32[$2>>2] = $0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($2)) + 8|0);
 $5 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 HEAP32[$vararg_buffer>>2] = 4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 $6 = (___syscall102(102,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 STACKTOP = sp;return ($7|0);
}
function ___lookup_ipliteral($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$029 = 0, $$031 = 0, $$130 = 0, $$2$off0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp + 24|0;
 $4 = sp + 8|0;
 $5 = sp + 32|0;
 $6 = sp;
 $7 = (___inet_aton($1,$3)|0);
 $8 = ($7|0)>(0);
 if ($8) {
  $9 = ($2|0)==(10);
  if ($9) {
   $$130 = -2;
  } else {
   $10 = ((($0)) + 8|0);
   $11 = HEAP32[$3>>2]|0;
   HEAP32[$10>>2] = $11;
   HEAP32[$0>>2] = 2;
   $12 = ((($0)) + 4|0);
   HEAP32[$12>>2] = 0;
   $$130 = 1;
  }
 } else {
  $13 = (_strchr($1,37)|0);
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = $13;
   $16 = $1;
   $17 = (($15) - ($16))|0;
   $18 = ($17|0)<(64);
   if ($18) {
    _memcpy(($5|0),($1|0),($17|0))|0;
    $19 = (($5) + ($17)|0);
    HEAP8[$19>>0] = 0;
    $$031 = $5;
   } else {
    $$031 = $1;
   }
  } else {
   $$031 = $1;
  }
  $20 = (_inet_pton(10,$$031,$4)|0);
  $21 = ($20|0)<(1);
  L9: do {
   if ($21) {
    $$029 = 0;
   } else {
    $22 = ($2|0)==(2);
    if ($22) {
     $$029 = -2;
    } else {
     $23 = ((($0)) + 8|0);
     ;HEAP32[$23>>2]=HEAP32[$4>>2]|0;HEAP32[$23+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$23+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$23+12>>2]=HEAP32[$4+12>>2]|0;
     HEAP32[$0>>2] = 10;
     do {
      if ($14) {
       $24 = ((($13)) + 1|0);
       $25 = HEAP8[$24>>0]|0;
       $26 = $25 << 24 >> 24;
       $isdigittmp = (($26) + -48)|0;
       $isdigit = ($isdigittmp>>>0)<(10);
       if ($isdigit) {
        $27 = (_strtoull($24,$6,10)|0);
        $28 = tempRet0;
        $$pre = HEAP32[$6>>2]|0;
        $30 = $$pre;$44 = $28;$46 = $27;
       } else {
        HEAP32[$6>>2] = $13;
        $30 = $13;$44 = 0;$46 = 0;
       }
       $29 = HEAP8[$30>>0]|0;
       $31 = ($29<<24>>24)==(0);
       if ($31) {
        $43 = ($44>>>0)>(0);
        $45 = ($46>>>0)>(4294967295);
        $47 = ($44|0)==(0);
        $48 = $47 & $45;
        $49 = $43 | $48;
        if ($49) {
         $$029 = -2;
         break L9;
        } else {
         $$2$off0 = $46;
         break;
        }
       }
       $32 = HEAP8[$4>>0]|0;
       switch ($32<<24>>24) {
       case -2:  {
        $33 = ((($4)) + 1|0);
        $34 = HEAP8[$33>>0]|0;
        $35 = $34 & -64;
        $36 = ($35<<24>>24)==(-128);
        if (!($36)) {
         $$029 = -2;
         break L9;
        }
        break;
       }
       case -1:  {
        $37 = ((($4)) + 1|0);
        $38 = HEAP8[$37>>0]|0;
        $39 = $38 & 15;
        $40 = ($39<<24>>24)==(2);
        if (!($40)) {
         $$029 = -2;
         break L9;
        }
        break;
       }
       default: {
        $$029 = -2;
        break L9;
       }
       }
       $41 = (_if_nametoindex($24)|0);
       $42 = ($41|0)==(0);
       if ($42) {
        $$029 = -2;
        break L9;
       } else {
        $$2$off0 = $41;
       }
      } else {
       $$2$off0 = 0;
      }
     } while(0);
     $50 = ((($0)) + 4|0);
     HEAP32[$50>>2] = $$2$off0;
     $$029 = 1;
    }
   }
  } while(0);
  $$130 = $$029;
 }
 STACKTOP = sp;return ($$130|0);
}
function ___lookup_name($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$153 = 0, $$$154 = 0, $$0132 = 0, $$0138169 = 0, $$0147166 = 0, $$1 = 0, $$1133 = 0, $$1137 = 0, $$1139167 = 0, $$1143 = 0, $$1148 = 0, $$154 = 0, $$2 = 0, $$2140164 = 0, $$2144 = 0, $$2176 = 0, $$3 = 0, $$3141161 = 0, $$3145 = 0;
 var $$4160 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond174 = 0, $exitcond175 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 60|0;
 $6 = sp + 32|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP8[$1>>0] = 0;
 $9 = ($2|0)==(0|0);
 if ($9) {
  label = 4;
 } else {
  $10 = (_strnlen($2,255)|0);
  $11 = (($10) + -1)|0;
  $12 = ($11>>>0)>(253);
  if ($12) {
   $$1 = -2;
  } else {
   $13 = (($10) + 1)|0;
   _memcpy(($1|0),($2|0),($13|0))|0;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $14 = $4 & 8;
   $15 = ($14|0)==(0);
   $16 = ($3|0)==(10);
   $17 = (($4) + -8)|0;
   $$154 = $16 ? 0 : $3;
   $18 = $16 | $15;
   $$$153 = $18 ? $4 : $17;
   $$$154 = $15 ? $3 : $$154;
   $19 = (_name_from_null($0,$2,$$$154,$$$153)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $21 = (_name_from_numeric($0,$2,$$$154)|0);
    $22 = $$$153 & 4;
    $23 = $21 | $22;
    $24 = ($23|0)==(0);
    if ($24) {
     $25 = (_name_from_hosts($0,$1,$2,$$$154)|0);
     $26 = ($25|0)==(0);
     if ($26) {
      $27 = (_name_from_dns_search($0,$1,$2,$$$154)|0);
      $$1137 = $27;
     } else {
      $$1137 = $25;
     }
    } else {
     $$1137 = $21;
    }
   } else {
    $$1137 = $19;
   }
   $28 = ($$1137|0)<(1);
   if ($28) {
    $29 = ($$1137|0)!=(0);
    $30 = $29 ? $$1137 : -2;
    $$1 = $30;
    break;
   }
   $31 = $$$153 & 8;
   $32 = ($31|0)==(0);
   if ($32) {
    $$3 = $$1137;
   } else {
    $33 = $$$153 & 16;
    $34 = ($33|0)==(0);
    if ($34) {
     $$0138169 = 0;
     while(1) {
      $35 = (($0) + (($$0138169*28)|0)|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = ($36|0)==(10);
      if ($37) {
       label = 13;
       break;
      }
      $39 = (($$0138169) + 1)|0;
      $40 = ($39|0)<($$1137|0);
      if ($40) {
       $$0138169 = $39;
      } else {
       $$2 = $$1137;
       break;
      }
     }
     if ((label|0) == 13) {
      $38 = ($$0138169|0)<($$1137|0);
      if ($38) {
       $$0147166 = 0;$$1139167 = $$0138169;
      } else {
       $$1 = 0;
       break;
      }
      while(1) {
       $41 = (($0) + (($$1139167*28)|0)|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = ($42|0)==(10);
       if ($43) {
        $44 = (($0) + (($$0147166*28)|0)|0);
        $45 = (($$0147166) + 1)|0;
        ;HEAP32[$44>>2]=HEAP32[$41>>2]|0;HEAP32[$44+4>>2]=HEAP32[$41+4>>2]|0;HEAP32[$44+8>>2]=HEAP32[$41+8>>2]|0;HEAP32[$44+12>>2]=HEAP32[$41+12>>2]|0;HEAP32[$44+16>>2]=HEAP32[$41+16>>2]|0;HEAP32[$44+20>>2]=HEAP32[$41+20>>2]|0;HEAP32[$44+24>>2]=HEAP32[$41+24>>2]|0;
        $$1148 = $45;
       } else {
        $$1148 = $$0147166;
       }
       $46 = (($$1139167) + 1)|0;
       $exitcond175 = ($46|0)==($$1137|0);
       if ($exitcond175) {
        $$2 = $$1148;
        break;
       } else {
        $$0147166 = $$1148;$$1139167 = $46;
       }
      }
     }
     $47 = ($$2|0)>(0);
     if ($47) {
      $$2176 = $$2;
     } else {
      $$1 = $$2;
      break;
     }
    } else {
     $$2176 = $$1137;
    }
    $$2140164 = 0;
    while(1) {
     $48 = (($0) + (($$2140164*28)|0)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49|0)==(2);
     $51 = (((($0) + (($$2140164*28)|0)|0)) + 8|0);
     if ($50) {
      $52 = (((($0) + (($$2140164*28)|0)|0)) + 20|0);
      $53 = HEAPU8[$51>>0]|(HEAPU8[$51+1>>0]<<8)|(HEAPU8[$51+2>>0]<<16)|(HEAPU8[$51+3>>0]<<24);
      HEAP8[$52>>0]=$53&255;HEAP8[$52+1>>0]=($53>>8)&255;HEAP8[$52+2>>0]=($53>>16)&255;HEAP8[$52+3>>0]=$53>>24;
      dest=$51; src=183114; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
      HEAP32[$48>>2] = 10;
     }
     $54 = (($$2140164) + 1)|0;
     $exitcond174 = ($54|0)==($$2176|0);
     if ($exitcond174) {
      $$3 = $$2176;
      break;
     } else {
      $$2140164 = $54;
     }
    }
   }
   $55 = ($$3|0)<(2);
   $56 = ($$$154|0)==(2);
   $or$cond = $56 | $55;
   if ($or$cond) {
    $$1 = $$3;
   } else {
    $57 = HEAP32[$0>>2]|0;
    $58 = ($57|0)==(2);
    if ($58) {
     $$3141161 = 0;
     while(1) {
      $63 = ($$3141161|0)==($$3|0);
      $60 = (($$3141161) + 1)|0;
      if ($63) {
       $$1 = $$3;
       break L4;
      }
      $59 = (($0) + (($60*28)|0)|0);
      $61 = HEAP32[$59>>2]|0;
      $62 = ($61|0)==(2);
      if ($62) {
       $$3141161 = $60;
      } else {
       break;
      }
     }
    }
    (_pthread_setcancelstate(1,($5|0))|0);
    $64 = ($$3|0)>(0);
    if ($64) {
     $65 = ((($7)) + 2|0);
     $66 = ((($7)) + 4|0);
     $67 = ((($7)) + 8|0);
     $68 = ((($7)) + 24|0);
     $69 = ((($6)) + 8|0);
     $70 = ((($7)) + 20|0);
     $$4160 = 0;
     while(1) {
      HEAP16[$7>>1] = 10;
      HEAP16[$65>>1] = -1;
      $71 = (((($0) + (($$4160*28)|0)|0)) + 4|0);
      ;HEAP32[$66>>2]=0|0;HEAP32[$66+4>>2]=0|0;HEAP32[$66+8>>2]=0|0;HEAP32[$66+12>>2]=0|0;HEAP32[$66+16>>2]=0|0;
      $72 = HEAP32[$71>>2]|0;
      HEAP32[$68>>2] = $72;
      $73 = (($0) + (($$4160*28)|0)|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = ($74|0)==(10);
      if ($75) {
       $76 = (((($0) + (($$4160*28)|0)|0)) + 8|0);
       ;HEAP32[$67>>2]=HEAP32[$76>>2]|0;HEAP32[$67+4>>2]=HEAP32[$76+4>>2]|0;HEAP32[$67+8>>2]=HEAP32[$76+8>>2]|0;HEAP32[$67+12>>2]=HEAP32[$76+12>>2]|0;
      } else {
       dest=$67; src=183114; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
       $77 = (((($0) + (($$4160*28)|0)|0)) + 8|0);
       $78 = HEAPU8[$77>>0]|(HEAPU8[$77+1>>0]<<8)|(HEAPU8[$77+2>>0]<<16)|(HEAPU8[$77+3>>0]<<24);
       HEAP32[$70>>2] = $78;
      }
      $79 = (_policyof($67)|0);
      $80 = (_scopeof($67)|0);
      $81 = ((($79)) + 19|0);
      $82 = HEAP8[$81>>0]|0;
      $83 = $82&255;
      $84 = ((($79)) + 18|0);
      $85 = HEAP8[$84>>0]|0;
      $86 = $85&255;
      $87 = (_socket(10,524290,17)|0);
      $88 = ($87|0)>(-1);
      if ($88) {
       $89 = (_connect($87,$7,28)|0);
       $90 = ($89|0)==(0);
       if ($90) {
        HEAP32[$8>>2] = 28;
        $91 = (_getsockname($87,$6,$8)|0);
        $92 = ($91|0)==(0);
        if ($92) {
         $93 = (_scopeof($69)|0);
         $94 = ($80|0)==($93|0);
         $$ = $94 ? 1610612736 : 1073741824;
         $95 = (_labelof($69)|0);
         $96 = ($95|0)==($83|0);
         $97 = $$ | 268435456;
         $$1143 = $96 ? $97 : $$;
         $98 = (_prefixmatch($69,$67)|0);
         $$0132 = $98;$$2144 = $$1143;
        } else {
         $$0132 = 0;$$2144 = 1073741824;
        }
       } else {
        $$0132 = 0;$$2144 = 0;
       }
       (_close($87)|0);
       $$1133 = $$0132;$$3145 = $$2144;
      } else {
       $$1133 = 0;$$3145 = 0;
      }
      $99 = $86 << 20;
      $100 = (15 - ($80))|0;
      $101 = $100 << 16;
      $102 = $$1133 << 8;
      $103 = (48 - ($$4160))|0;
      $104 = $101 | $103;
      $105 = $104 | $99;
      $106 = $105 | $$3145;
      $107 = $106 | $102;
      $108 = (((($0) + (($$4160*28)|0)|0)) + 24|0);
      HEAP32[$108>>2] = $107;
      $109 = (($$4160) + 1)|0;
      $exitcond = ($109|0)==($$3|0);
      if ($exitcond) {
       break;
      } else {
       $$4160 = $109;
      }
     }
    }
    _qsort($0,$$3,28,17);
    $110 = HEAP32[$5>>2]|0;
    (_pthread_setcancelstate(($110|0),(0|0))|0);
    $$1 = $$3;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function _name_from_null($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$136 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$05$0$$sroa_idx = 0, $$sroa$05$0$$sroa_idx33 = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$310$0$$sroa_idx = 0, $$sroa$32$0$$sroa_idx = 0, $$sroa$36$0$$sroa_cast34$in = 0, $$sroa$36$0$$sroa_idx = 0, $$sroa$36$0$$sroa_idx30 = 0, $$sroa$4$0$$sroa_idx3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $5 = ($1|0)==(0|0);
 do {
  if ($5) {
   $6 = $3 & 1;
   $7 = ($6|0)==(0);
   $8 = ($2|0)!=(10);
   if ($7) {
    if ($8) {
     HEAP32[$4>>2] = 2;
     $10 = ((($4)) + 4|0);
     HEAP32[$10>>2] = 0;
     $11 = ((($4)) + 8|0);
     HEAP8[$11>>0] = 127;
     $12 = ((($4)) + 9|0);
     HEAP8[$12>>0] = 0;
     $13 = ((($4)) + 10|0);
     HEAP8[$13>>0] = 0;
     $14 = ((($4)) + 11|0);
     HEAP8[$14>>0] = 1;
     $15 = ((($4)) + 12|0);
     ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;HEAP32[$15+12>>2]=0|0;
     ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$4+20>>2]|0;HEAP32[$0+24>>2]=HEAP32[$4+24>>2]|0;
     $16 = ($2|0)==(2);
     if ($16) {
      $$0 = 1;
      break;
     } else {
      $$136 = 1;
     }
    } else {
     $$136 = 0;
    }
    $17 = (($$136) + 1)|0;
    $$sroa$0$0$$sroa_idx = (($0) + (($$136*28)|0)|0);
    HEAP32[$$sroa$0$0$$sroa_idx>>2] = 10;
    $$sroa$3$0$$sroa_idx = (((($0) + (($$136*28)|0)|0)) + 4|0);
    ;HEAP32[$$sroa$3$0$$sroa_idx>>2]=0|0;HEAP32[$$sroa$3$0$$sroa_idx+4>>2]=0|0;HEAP32[$$sroa$3$0$$sroa_idx+8>>2]=0|0;HEAP32[$$sroa$3$0$$sroa_idx+12>>2]=0|0;HEAP16[$$sroa$3$0$$sroa_idx+16>>1]=0|0;HEAP8[$$sroa$3$0$$sroa_idx+18>>0]=0|0;
    $$sroa$32$0$$sroa_idx = (((($0) + (($$136*28)|0)|0)) + 23|0);
    HEAP8[$$sroa$32$0$$sroa_idx>>0] = 1;
    $$sroa$4$0$$sroa_idx3 = (((($0) + (($$136*28)|0)|0)) + 24|0);
    HEAP32[$$sroa$4$0$$sroa_idx3>>2] = 0;
    $$0 = $17;
    break;
   }
   if ($8) {
    HEAP32[$0>>2] = 2;
    $$sroa$310$0$$sroa_idx = ((($0)) + 4|0);
    ;HEAP32[$$sroa$310$0$$sroa_idx>>2]=0|0;HEAP32[$$sroa$310$0$$sroa_idx+4>>2]=0|0;HEAP32[$$sroa$310$0$$sroa_idx+8>>2]=0|0;HEAP32[$$sroa$310$0$$sroa_idx+12>>2]=0|0;HEAP32[$$sroa$310$0$$sroa_idx+16>>2]=0|0;HEAP32[$$sroa$310$0$$sroa_idx+20>>2]=0|0;
    $9 = ($2|0)==(2);
    $$sroa$05$0$$sroa_idx = ((($0)) + 28|0);
    $$sroa$36$0$$sroa_idx = ((($0)) + 32|0);
    if ($9) {
     $$0 = 1;
     break;
    } else {
     $$sroa$05$0$$sroa_idx33 = $$sroa$05$0$$sroa_idx;$$sroa$36$0$$sroa_cast34$in = $$sroa$36$0$$sroa_idx;$18 = 2;
    }
   } else {
    $$sroa$36$0$$sroa_idx30 = ((($0)) + 4|0);
    $$sroa$05$0$$sroa_idx33 = $0;$$sroa$36$0$$sroa_cast34$in = $$sroa$36$0$$sroa_idx30;$18 = 1;
   }
   HEAP32[$$sroa$05$0$$sroa_idx33>>2] = 10;
   ;HEAP32[$$sroa$36$0$$sroa_cast34$in>>2]=0|0;HEAP32[$$sroa$36$0$$sroa_cast34$in+4>>2]=0|0;HEAP32[$$sroa$36$0$$sroa_cast34$in+8>>2]=0|0;HEAP32[$$sroa$36$0$$sroa_cast34$in+12>>2]=0|0;HEAP32[$$sroa$36$0$$sroa_cast34$in+16>>2]=0|0;HEAP32[$$sroa$36$0$$sroa_cast34$in+20>>2]=0|0;
   $$0 = $18;
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _name_from_numeric($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___lookup_ipliteral($0,$1,$2)|0);
 return ($3|0);
}
function _name_from_hosts($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$lcssa = 0, $$0109 = 0, $$054 = 0, $$055$ph61$lcssa63 = 0, $$055$ph6175 = 0, $$055$ph81 = 0, $$057$ph$lcssa = 0, $$057$ph80 = 0, $$1$lcssa = 0, $$1$pn = 0, $$167 = 0, $$2 = 0, $$ph = 0, $$pr$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1680|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1680|0);
 $4 = sp + 1160|0;
 $5 = sp + 128|0;
 $6 = sp;
 $7 = (_strlen($2)|0);
 $8 = (___fopen_rb_ca(183213,$6,$5,1032)|0);
 $9 = ($8|0)==(0|0);
 L1: do {
  if ($9) {
   $13 = (___errno_location()|0);
   $14 = HEAP32[$13>>2]|0;
   switch ($14|0) {
   case 13: case 20: case 2:  {
    $$054 = 0;
    break L1;
    break;
   }
   default: {
   }
   }
   $$054 = -11;
  } else {
   $10 = (_fgets($4,512,$8)|0);
   $11 = ($10|0)==(0|0);
   L5: do {
    if ($11) {
     $$055$ph61$lcssa63 = 0;$$057$ph$lcssa = 0;
    } else {
     $12 = ((($4)) + 1|0);
     $$055$ph81 = 0;$$057$ph80 = 0;
     while(1) {
      $43 = (($0) + (($$057$ph80*28)|0)|0);
      $$055$ph6175 = $$055$ph81;
      L9: while(1) {
       L11: while(1) {
        $15 = (_strchr($4,35)|0);
        $16 = ($15|0)==(0|0);
        if (!($16)) {
         $17 = ((($15)) + 1|0);
         HEAP8[$15>>0] = 10;
         HEAP8[$17>>0] = 0;
        }
        $18 = (_strstr($12,$2)|0);
        $19 = ($18|0)==(0|0);
        L16: do {
         if (!($19)) {
          $21 = $18;
          while(1) {
           $20 = ((($21)) + -1|0);
           $22 = HEAP8[$20>>0]|0;
           $23 = $22 << 24 >> 24;
           $24 = (_isspace($23)|0);
           $25 = ($24|0)==(0);
           if (!($25)) {
            $26 = (($21) + ($7)|0);
            $27 = HEAP8[$26>>0]|0;
            $28 = $27 << 24 >> 24;
            $29 = (_isspace($28)|0);
            $30 = ($29|0)==(0);
            if (!($30)) {
             break;
            }
           }
           $33 = ((($21)) + 1|0);
           $34 = (_strstr($33,$2)|0);
           $35 = ($34|0)==(0|0);
           if ($35) {
            break L16;
           } else {
            $21 = $34;
           }
          }
          $31 = HEAP8[$4>>0]|0;
          $32 = ($31<<24>>24)==(0);
          L23: do {
           if ($32) {
            $$1$lcssa = $4;
           } else {
            $$167 = $4;$37 = $31;
            while(1) {
             $36 = $37 << 24 >> 24;
             $38 = (_isspace($36)|0);
             $39 = ($38|0)==(0);
             if (!($39)) {
              $$1$lcssa = $$167;
              break L23;
             }
             $40 = ((($$167)) + 1|0);
             $41 = HEAP8[$40>>0]|0;
             $42 = ($41<<24>>24)==(0);
             if ($42) {
              $$1$lcssa = $40;
              break;
             } else {
              $$167 = $40;$37 = $41;
             }
            }
           }
          } while(0);
          HEAP8[$$1$lcssa>>0] = 0;
          $44 = (_name_from_numeric($43,$4,$3)|0);
          switch ($44|0) {
          case 1:  {
           break L9;
           break;
          }
          case 0:  {
           break;
          }
          default: {
           break L11;
          }
          }
         }
        } while(0);
        $45 = (_fgets($4,512,$8)|0);
        $46 = ($45|0)==(0|0);
        if ($46) {
         $$055$ph61$lcssa63 = $$055$ph6175;$$057$ph$lcssa = $$057$ph80;
         break L5;
        }
       }
       $48 = (_fgets($4,512,$8)|0);
       $49 = ($48|0)==(0|0);
       if ($49) {
        $$055$ph61$lcssa63 = -2;$$057$ph$lcssa = $$057$ph80;
        break L5;
       } else {
        $$055$ph6175 = -2;
       }
      }
      $47 = (($$057$ph80) + 1)|0;
      $$1$pn = $$1$lcssa;
      while(1) {
       $$2 = ((($$1$pn)) + 1|0);
       $50 = HEAP8[$$2>>0]|0;
       $51 = ($50<<24>>24)==(0);
       if ($51) {
        $$ph = 0;
        break;
       }
       $52 = $50 << 24 >> 24;
       $53 = (_isspace($52)|0);
       $54 = ($53|0)==(0);
       if ($54) {
        $$ph = $50;
        break;
       } else {
        $$1$pn = $$2;
       }
      }
      $55 = ($$ph<<24>>24)==(0);
      L35: do {
       if ($55) {
        $$0$lcssa = $$2;
       } else {
        $$0109 = $$2;$57 = $$ph;
        while(1) {
         $56 = $57 << 24 >> 24;
         $58 = (_isspace($56)|0);
         $59 = ($58|0)==(0);
         if (!($59)) {
          $$0$lcssa = $$0109;
          break L35;
         }
         $60 = ((($$0109)) + 1|0);
         $$pr$pre = HEAP8[$60>>0]|0;
         $61 = ($$pr$pre<<24>>24)==(0);
         if ($61) {
          $$0$lcssa = $60;
          break;
         } else {
          $$0109 = $60;$57 = $$pr$pre;
         }
        }
       }
      } while(0);
      HEAP8[$$0$lcssa>>0] = 0;
      $62 = (_is_valid_hostname($$2)|0);
      $63 = ($62|0)==(0);
      if (!($63)) {
       $68 = $$0$lcssa;
       $69 = $$2;
       $70 = (1 - ($69))|0;
       $71 = (($70) + ($68))|0;
       _memcpy(($1|0),($$2|0),($71|0))|0;
      }
      $64 = (_fgets($4,512,$8)|0);
      $65 = ($64|0)!=(0|0);
      $66 = ($$057$ph80|0)<(47);
      $67 = $66 & $65;
      if ($67) {
       $$055$ph81 = $$055$ph6175;$$057$ph80 = $47;
      } else {
       $$055$ph61$lcssa63 = $$055$ph6175;$$057$ph$lcssa = $47;
       break;
      }
     }
    }
   } while(0);
   (___fclose_ca($8)|0);
   $72 = ($$057$ph$lcssa|0)!=(0);
   $73 = $72 ? $$057$ph$lcssa : $$055$ph61$lcssa63;
   $$054 = $73;
  }
 } while(0);
 STACKTOP = sp;return ($$054|0);
}
function _name_from_dns_search($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$059$lcssa = 0, $$05968 = 0, $$060 = 0, $$060$ph = 0, $$062 = 0, $$064 = 0, $$161 = 0, $$163 = 0, $$3 = 0, $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(368|0);
 $4 = sp + 104|0;
 $5 = sp;
 $6 = (___get_resolv_conf($5,$4,256)|0);
 $7 = ($6|0)<(0);
 L1: do {
  if ($7) {
   $$3 = -1;
  } else {
   $$062 = 0;$$064 = 0;
   L2: while(1) {
    $8 = (($2) + ($$064)|0);
    $9 = HEAP8[$8>>0]|0;
    switch ($9<<24>>24) {
    case 0:  {
     break L2;
     break;
    }
    case 46:  {
     $10 = (($$062) + 1)|0;
     $$163 = $10;
     break;
    }
    default: {
     $$163 = $$062;
    }
    }
    $11 = (($$064) + 1)|0;
    $$062 = $$163;$$064 = $11;
   }
   $12 = ((($5)) + 92|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($$062>>>0)<($13>>>0);
   if ($14) {
    $15 = (($$064) + -1)|0;
    $16 = (($2) + ($15)|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)==(46);
    if ($18) {
     label = 7;
    }
   } else {
    label = 7;
   }
   if ((label|0) == 7) {
    HEAP8[$4>>0] = 0;
   }
   $19 = ($$064>>>0)>(255);
   if ($19) {
    $$3 = -2;
   } else {
    _memcpy(($1|0),($2|0),($$064|0))|0;
    $20 = (($1) + ($$064)|0);
    HEAP8[$20>>0] = 46;
    $21 = (255 - ($$064))|0;
    $22 = ((($20)) + 1|0);
    $23 = (($$064) + 1)|0;
    $$060$ph = $4;
    L14: while(1) {
     $$pre = HEAP8[$$060$ph>>0]|0;
     $$060 = $$060$ph;$25 = $$pre;
     while(1) {
      $24 = ($25<<24>>24)==(0);
      if ($24) {
       break L14;
      } else {
       $$161 = $$060;
      }
      while(1) {
       $26 = HEAP8[$$161>>0]|0;
       $27 = $26 << 24 >> 24;
       $28 = (_isspace($27)|0);
       $29 = ($28|0)==(0);
       $30 = ((($$161)) + 1|0);
       if ($29) {
        break;
       } else {
        $$161 = $30;
       }
      }
      $31 = ($26<<24>>24)==(0);
      if ($31) {
       break L14;
      } else {
       $$05968 = $$161;$33 = $26;
      }
      while(1) {
       $32 = $33 << 24 >> 24;
       $34 = (_isspace($32)|0);
       $35 = ($34|0)==(0);
       if (!($35)) {
        $$059$lcssa = $$05968;$48 = $33;
        break;
       }
       $36 = ((($$05968)) + 1|0);
       $$pr = HEAP8[$36>>0]|0;
       $37 = ($$pr<<24>>24)==(0);
       if ($37) {
        $$059$lcssa = $36;$48 = 0;
        break;
       } else {
        $$05968 = $36;$33 = $$pr;
       }
      }
      $38 = ($$059$lcssa|0)==($$161|0);
      if ($38) {
       break L14;
      }
      $39 = $$059$lcssa;
      $40 = $$161;
      $41 = (($39) - ($40))|0;
      $42 = ($41>>>0)<($21>>>0);
      if ($42) {
       break;
      } else {
       $$060 = $$059$lcssa;$25 = $48;
      }
     }
     _memcpy(($22|0),($$161|0),($41|0))|0;
     $43 = (($23) + ($41))|0;
     $44 = (($1) + ($43)|0);
     HEAP8[$44>>0] = 0;
     $45 = (_name_from_dns($0,$1,$1,$3,$5)|0);
     $46 = ($45|0)==(0);
     if ($46) {
      $$060$ph = $$059$lcssa;
     } else {
      $$3 = $45;
      break L1;
     }
    }
    HEAP8[$20>>0] = 0;
    $47 = (_name_from_dns($0,$1,$2,$3,$5)|0);
    $$3 = $47;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function _policyof($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = 0;
 while(1) {
  $1 = (182994 + (($$0*20)|0)|0);
  $2 = (((182994 + (($$0*20)|0)|0)) + 16|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = (_memcmp($0,$1,$4)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $7 = (($0) + ($4)|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = (((182994 + (($$0*20)|0)|0)) + 17|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 & $8;
   $12 = ((182994 + (($$0*20)|0)|0) + ($4)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ($11<<24>>24)==($13<<24>>24);
   if ($14) {
    break;
   }
  }
  $16 = (($$0) + 1)|0;
  $$0 = $16;
 }
 $15 = (182994 + (($$0*20)|0)|0);
 return ($15|0);
}
function _scopeof($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 switch ($1<<24>>24) {
 case -1:  {
  $2 = ((($0)) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3 & 15;
  $5 = $4&255;
  $$0 = $5;
  break;
 }
 case -2:  {
  $6 = ((($0)) + 1|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 & -64;
  $9 = ($8<<24>>24)==(-128);
  if ($9) {
   $$0 = 2;
  } else {
   label = 4;
  }
  break;
 }
 default: {
  label = 4;
 }
 }
 do {
  if ((label|0) == 4) {
   $10 = HEAP32[$0>>2]|0;
   $11 = ($10|0)==(0);
   $12 = $10&255;
   if ($11) {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0);
    if ($15) {
     $16 = ((($0)) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($17|0)==(0);
     if ($18) {
      $19 = ((($0)) + 12|0);
      $20 = HEAP8[$19>>0]|0;
      $21 = ($20<<24>>24)==(0);
      if ($21) {
       $22 = ((($0)) + 13|0);
       $23 = HEAP8[$22>>0]|0;
       $24 = ($23<<24>>24)==(0);
       if ($24) {
        $25 = ((($0)) + 14|0);
        $26 = HEAP8[$25>>0]|0;
        $27 = ($26<<24>>24)==(0);
        if ($27) {
         $28 = ((($0)) + 15|0);
         $29 = HEAP8[$28>>0]|0;
         $30 = ($29<<24>>24)==(1);
         if ($30) {
          $$0 = 2;
          break;
         }
        }
       }
      }
     }
    }
   }
   $31 = ($12<<24>>24)==(-2);
   if ($31) {
    $32 = ((($0)) + 1|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = ($33&255)>(191);
    if ($34) {
     $$0 = 5;
     break;
    }
   }
   $$0 = 14;
  }
 } while(0);
 return ($$0|0);
}
function _labelof($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_policyof($0)|0);
 $2 = ((($1)) + 19|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 return ($4|0);
}
function _prefixmatch($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$08 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$08 = 0;
 while(1) {
  $2 = $$08 >>> 3;
  $3 = (($0) + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = (($1) + ($2)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 ^ $4;
  $8 = $7&255;
  $9 = $$08 & 7;
  $10 = 128 >>> $9;
  $11 = $10 & $8;
  $12 = ($11|0)==(0);
  if (!($12)) {
   $$0$lcssa = $$08;
   break;
  }
  $13 = (($$08) + 1)|0;
  $14 = ($13>>>0)<(128);
  if ($14) {
   $$08 = $13;
  } else {
   $$0$lcssa = $13;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _addrcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) - ($5))|0;
 return ($6|0);
}
function ___get_resolv_conf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$072 = 0, $$0 = 0, $$07283 = 0, $$073 = 0, $$174 = 0, $$2 = 0, $$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $isdigit = 0, $isdigit76 = 0, $isdigit78 = 0, $isdigittmp = 0, $isdigittmp75 = 0, $isdigittmp77 = 0;
 var $or$cond = 0, $storemerge81 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(640|0);
 $3 = sp + 384|0;
 $4 = sp + 128|0;
 $5 = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 92|0);
 HEAP32[$7>>2] = 1;
 $8 = ((($0)) + 96|0);
 HEAP32[$8>>2] = 5;
 $9 = ((($0)) + 88|0);
 HEAP32[$9>>2] = 2;
 $10 = ($1|0)!=(0|0);
 if ($10) {
  HEAP8[$1>>0] = 0;
 }
 $11 = (___fopen_rb_ca(183127,$5,$4,256)|0);
 $12 = ($11|0)==(0|0);
 do {
  if ($12) {
   $19 = (___errno_location()|0);
   $20 = HEAP32[$19>>2]|0;
   switch ($20|0) {
   case 13: case 20: case 2:  {
    label = 42;
    break;
   }
   default: {
    $$0 = -1;
   }
   }
  } else {
   $13 = (_fgets($3,256,$11)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    (___fclose_ca($11)|0);
    label = 42;
    break;
   }
   $15 = ((($3)) + 7|0);
   $16 = ((($3)) + 10|0);
   $17 = ((($3)) + 11|0);
   $18 = ((($3)) + 6|0);
   $$07283 = 0;
   while(1) {
    $21 = (_strchr($3,10)|0);
    $22 = ($21|0)==(0|0);
    L12: do {
     if ($22) {
      $23 = HEAP32[$11>>2]|0;
      $24 = $23 & 16;
      $25 = ($24|0)==(0);
      if ($25) {
       while(1) {
        $26 = (_getc($11)|0);
        switch ($26|0) {
        case 10: case -1:  {
         $$2 = $$07283;
         break L12;
         break;
        }
        default: {
        }
        }
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } while(0);
    do {
     if ((label|0) == 11) {
      label = 0;
      $27 = (_strncmp($3,183144,7)|0);
      $28 = ($27|0)==(0);
      if ($28) {
       $29 = HEAP8[$15>>0]|0;
       $30 = $29 << 24 >> 24;
       $31 = (_isspace($30)|0);
       $32 = ($31|0)==(0);
       if (!($32)) {
        $33 = (_strstr($3,183152)|0);
        $34 = ($33|0)==(0|0);
        if (!($34)) {
         $35 = ((($33)) + 6|0);
         $36 = HEAP8[$35>>0]|0;
         $37 = $36 << 24 >> 24;
         $isdigittmp77 = (($37) + -48)|0;
         $isdigit78 = ($isdigittmp77>>>0)<(10);
         if ($isdigit78) {
          $38 = (_strtoul($35,$6,10)|0);
          $39 = HEAP32[$6>>2]|0;
          $40 = ($39|0)==($35|0);
          if (!($40)) {
           $41 = ($38>>>0)<(15);
           $42 = $41 ? $38 : 15;
           HEAP32[$7>>2] = $42;
          }
         }
        }
        $43 = (_strstr($3,183159)|0);
        $44 = ($43|0)==(0|0);
        if (!($44)) {
         $45 = ((($43)) + 6|0);
         $46 = HEAP8[$45>>0]|0;
         $47 = $46 << 24 >> 24;
         $isdigittmp75 = (($47) + -48)|0;
         $isdigit76 = ($isdigittmp75>>>0)<(10);
         if ($isdigit76) {
          $48 = (_strtoul($45,$6,10)|0);
          $49 = HEAP32[$6>>2]|0;
          $50 = ($49|0)==($45|0);
          if (!($50)) {
           $51 = ($48>>>0)<(10);
           $52 = $51 ? $48 : 10;
           HEAP32[$9>>2] = $52;
          }
         }
        }
        $53 = (_strstr($3,183169)|0);
        $54 = ($53|0)==(0|0);
        if ($54) {
         $$2 = $$07283;
         break;
        }
        $55 = ((($53)) + 8|0);
        $56 = HEAP8[$55>>0]|0;
        $57 = $56 << 24 >> 24;
        $isdigittmp = (($57) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        $58 = ($56<<24>>24)==(46);
        $or$cond = $58 | $isdigit;
        if (!($or$cond)) {
         $$2 = $$07283;
         break;
        }
        $59 = (_strtoul($55,$6,10)|0);
        $60 = HEAP32[$6>>2]|0;
        $61 = ($60|0)==($55|0);
        if ($61) {
         $$2 = $$07283;
         break;
        }
        $62 = ($59>>>0)<(60);
        $63 = $62 ? $59 : 60;
        HEAP32[$8>>2] = $63;
        $$2 = $$07283;
        break;
       }
      }
      $64 = (_strncmp($3,183178,10)|0);
      $65 = ($64|0)==(0);
      if ($65) {
       $66 = HEAP8[$16>>0]|0;
       $67 = $66 << 24 >> 24;
       $68 = (_isspace($67)|0);
       $69 = ($68|0)==(0);
       if (!($69)) {
        $70 = ($$07283|0)>(2);
        if ($70) {
         $$2 = $$07283;
         break;
        } else {
         $$073 = $17;
        }
        while(1) {
         $71 = HEAP8[$$073>>0]|0;
         $72 = $71 << 24 >> 24;
         $73 = (_isspace($72)|0);
         $74 = ($73|0)==(0);
         $75 = ((($$073)) + 1|0);
         if ($74) {
          break;
         } else {
          $$073 = $75;
         }
        }
        HEAP32[$6>>2] = $$073;
        $76 = HEAP8[$$073>>0]|0;
        $77 = ($76<<24>>24)==(0);
        L41: do {
         if ($77) {
          $85 = $$073;
         } else {
          $82 = $76;$storemerge81 = $$073;
          while(1) {
           $81 = $82 << 24 >> 24;
           $83 = (_isspace($81)|0);
           $84 = ($83|0)==(0);
           $78 = ((($storemerge81)) + 1|0);
           if (!($84)) {
            $85 = $storemerge81;
            break L41;
           }
           HEAP32[$6>>2] = $78;
           $79 = HEAP8[$78>>0]|0;
           $80 = ($79<<24>>24)==(0);
           if ($80) {
            $85 = $78;
            break;
           } else {
            $82 = $79;$storemerge81 = $78;
           }
          }
         }
        } while(0);
        HEAP8[$85>>0] = 0;
        $86 = (($0) + (($$07283*28)|0)|0);
        $87 = (___lookup_ipliteral($86,$$073,0)|0);
        $88 = ($87|0)>(0);
        $89 = $88&1;
        $$$072 = (($$07283) + ($89))|0;
        $$2 = $$$072;
        break;
       }
      }
      if ($10) {
       $90 = (_strncmp($3,183189,6)|0);
       $91 = ($90|0)==(0);
       if (!($91)) {
        $92 = (_strncmp($3,183196,6)|0);
        $93 = ($92|0)==(0);
        if (!($93)) {
         $$2 = $$07283;
         break;
        }
       }
       $94 = HEAP8[$18>>0]|0;
       $95 = $94 << 24 >> 24;
       $96 = (_isspace($95)|0);
       $97 = ($96|0)==(0);
       if ($97) {
        $$2 = $$07283;
       } else {
        $$174 = $15;
        while(1) {
         $98 = HEAP8[$$174>>0]|0;
         $99 = $98 << 24 >> 24;
         $100 = (_isspace($99)|0);
         $101 = ($100|0)==(0);
         $102 = ((($$174)) + 1|0);
         if ($101) {
          break;
         } else {
          $$174 = $102;
         }
        }
        $103 = (_strlen($$174)|0);
        $104 = ($103>>>0)<($2>>>0);
        if ($104) {
         $105 = (($103) + 1)|0;
         _memcpy(($1|0),($$174|0),($105|0))|0;
         $$2 = $$07283;
        } else {
         $$2 = $$07283;
        }
       }
      } else {
       $$2 = $$07283;
      }
     }
    } while(0);
    $106 = (_fgets($3,256,$11)|0);
    $107 = ($106|0)==(0|0);
    if ($107) {
     break;
    } else {
     $$07283 = $$2;
    }
   }
   (___fclose_ca($11)|0);
   $108 = ($$2|0)==(0);
   if ($108) {
    label = 42;
   } else {
    $$4 = $$2;
    label = 43;
   }
  }
 } while(0);
 if ((label|0) == 42) {
  (___lookup_ipliteral($0,183203,0)|0);
  $$4 = 1;
  label = 43;
 }
 if ((label|0) == 43) {
  $109 = ((($0)) + 84|0);
  HEAP32[$109>>2] = $$4;
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _name_from_dns($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$02227 = 0, $$024 = 0, $$028 = 0, $$1 = 0, $$12326 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1632|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1632|0);
 $5 = sp + 1072|0;
 $6 = sp + 48|0;
 $7 = sp + 40|0;
 $8 = sp + 32|0;
 $9 = sp + 24|0;
 $10 = sp + 16|0;
 $11 = sp;
 HEAP32[$7>>2] = $5;
 $12 = ((($7)) + 4|0);
 $13 = ((($5)) + 280|0);
 HEAP32[$12>>2] = $13;
 HEAP32[$8>>2] = $6;
 $14 = ((($8)) + 4|0);
 $15 = ((($6)) + 512|0);
 HEAP32[$14>>2] = $15;
 HEAP32[$11>>2] = $0;
 $16 = ((($11)) + 4|0);
 HEAP32[$16>>2] = $1;
 $17 = ((($11)) + 8|0);
 HEAP32[$17>>2] = 0;
 $$02227 = 0;$$028 = 0;
 while(1) {
  $18 = (23904 + ($$02227<<3)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==($3|0);
  if ($20) {
   $$1 = $$028;
  } else {
   $21 = (((23904 + ($$02227<<3)|0)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($5) + (($$028*280)|0)|0);
   $24 = (___res_mkquery(0,$2,1,$22,0,0,0,$23,280)|0);
   $25 = (($9) + ($$028<<2)|0);
   HEAP32[$25>>2] = $24;
   $26 = ($24|0)==(-1);
   if ($26) {
    $$024 = -2;
    break;
   }
   $27 = (($$028) + 1)|0;
   $$1 = $27;
  }
  $28 = (($$02227) + 1)|0;
  $29 = ($$02227|0)<(1);
  if ($29) {
   $$02227 = $28;$$028 = $$1;
  } else {
   label = 6;
   break;
  }
 }
 L7: do {
  if ((label|0) == 6) {
   $30 = (___res_msend_rc($$1,$7,$9,$8,$10,512,$4)|0);
   $31 = ($30|0)<(0);
   if ($31) {
    $$024 = -11;
   } else {
    $32 = ($$1|0)>(0);
    if ($32) {
     $$12326 = 0;
     while(1) {
      $33 = (($6) + ($$12326<<9)|0);
      $34 = (($10) + ($$12326<<2)|0);
      $35 = HEAP32[$34>>2]|0;
      (___dns_parse($33,$35,18,$11)|0);
      $36 = (($$12326) + 1)|0;
      $exitcond = ($36|0)==($$1|0);
      if ($exitcond) {
       break;
      } else {
       $$12326 = $36;
      }
     }
    }
    $37 = HEAP32[$17>>2]|0;
    $38 = ($37|0)==(0);
    if ($38) {
     $39 = HEAP32[$10>>2]|0;
     $40 = ($39|0)<(4);
     if ($40) {
      $$024 = -3;
     } else {
      $41 = ((($6)) + 3|0);
      $trunc = HEAP8[$41>>0]|0;
      $trunc$clear = $trunc & 15;
      switch ($trunc$clear<<24>>24) {
      case 2:  {
       $$024 = -3;
       break L7;
       break;
      }
      case 0:  {
       $$024 = -2;
       break L7;
       break;
      }
      case 3:  {
       $$024 = 0;
       break L7;
       break;
      }
      default: {
       $$024 = -4;
       break L7;
      }
      }
     }
    } else {
     $$024 = $37;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$024|0);
}
function ___res_mkquery($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$ = 0, $$0 = 0, $$05154 = 0, $$052 = 0, $$053$lcssa = 0, $$05356 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $9 = sp + 8|0;
 $10 = sp;
 $11 = (_strnlen($1,255)|0);
 $12 = ($11|0)==(0);
 $13 = (($11) + -1)|0;
 if ($12) {
  $$05154 = 0;$23 = 17;
  label = 3;
 } else {
  $14 = (($1) + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)==(46);
  $$ = $16 ? $13 : $11;
  $17 = (($$) + 17)|0;
  $18 = ($$|0)!=(0);
  $19 = $18&1;
  $20 = (($17) + ($19))|0;
  $21 = ($$>>>0)>(253);
  if ($21) {
   $$0 = -1;
  } else {
   $$05154 = $$;$23 = $20;
   label = 3;
  }
 }
 L3: do {
  if ((label|0) == 3) {
   $22 = ($23|0)>($8|0);
   $24 = ($0>>>0)>(15);
   $or$cond = $24 | $22;
   $25 = $3 | $2;
   $26 = ($25>>>0)>(255);
   $27 = $26 | $or$cond;
   if ($27) {
    $$0 = -1;
   } else {
    _memset(($9|0),0,($23|0))|0;
    $28 = $0 << 3;
    $29 = $28 | 1;
    $30 = $29&255;
    $31 = ((($9)) + 2|0);
    HEAP8[$31>>0] = $30;
    $32 = ((($9)) + 5|0);
    HEAP8[$32>>0] = 1;
    $33 = ((($9)) + 13|0);
    _memcpy(($33|0),($1|0),($$05154|0))|0;
    $34 = HEAP8[$33>>0]|0;
    $35 = ($34<<24>>24)==(0);
    if ($35) {
     $$053$lcssa = 13;
    } else {
     $$05356 = 13;
     while(1) {
      $$052 = $$05356;
      L9: while(1) {
       $36 = (($9) + ($$052)|0);
       $37 = HEAP8[$36>>0]|0;
       switch ($37<<24>>24) {
       case 46: case 0:  {
        break L9;
        break;
       }
       default: {
       }
       }
       $38 = (($$052) + 1)|0;
       $$052 = $38;
      }
      $39 = (($$052) - ($$05356))|0;
      $40 = (($39) + -1)|0;
      $41 = ($40>>>0)>(62);
      if ($41) {
       $$0 = -1;
       break L3;
      }
      $42 = $39&255;
      $43 = (($$05356) + -1)|0;
      $44 = (($9) + ($43)|0);
      HEAP8[$44>>0] = $42;
      $45 = (($$052) + 1)|0;
      $46 = (($9) + ($45)|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = ($47<<24>>24)==(0);
      if ($48) {
       $$053$lcssa = $45;
       break;
      } else {
       $$05356 = $45;
      }
     }
    }
    $49 = $3&255;
    $50 = (($$053$lcssa) + 1)|0;
    $51 = (($9) + ($50)|0);
    HEAP8[$51>>0] = $49;
    $52 = $2&255;
    $53 = (($$053$lcssa) + 3)|0;
    $54 = (($9) + ($53)|0);
    HEAP8[$54>>0] = $52;
    (_clock_gettime(0,($10|0))|0);
    $55 = ((($10)) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $56 >>> 16;
    $58 = (($57) + ($56))|0;
    $59 = $58 >>> 8;
    $60 = $59&255;
    HEAP8[$9>>0] = $60;
    $61 = $58&255;
    $62 = ((($9)) + 1|0);
    HEAP8[$62>>0] = $61;
    _memcpy(($7|0),($9|0),($23|0))|0;
    $$0 = $23;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___res_msend_rc($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0163220 = 0, $$0164219 = 0, $$0164219$mux = 0, $$0165 = 0, $$0166195 = 0, $$0168223 = 0, $$0170218 = 0, $$0173217 = 0, $$0173217$mux = 0, $$0177$lcssa = 0, $$0177228 = 0, $$0180$lcssa = 0, $$0180227 = 0, $$0181$lcssa = 0, $$0181226 = 0, $$1 = 0, $$1167$lcssa = 0, $$1167198 = 0, $$1169196 = 0;
 var $$1171$be = 0, $$1171213 = 0, $$1174 = 0, $$1178 = 0, $$1182 = 0, $$2$lcssa = 0, $$2172207 = 0, $$2175$be = 0, $$2175212 = 0, $$2179 = 0, $$2202 = 0, $$3 = 0, $$3176 = 0, $$4 = 0, $$sink = 0, $$sink241 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge237 = 0, $exitcond = 0, $exitcond239 = 0, $exitcond240 = 0, $or$cond = 0, $trunc = 0;
 var $trunc$clear = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $7 = sp + 104|0;
 $8 = sp + 20|0;
 $9 = sp + 16|0;
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 $12 = sp;
 ;HEAP32[$7>>2]=HEAP32[186060>>2]|0;HEAP32[$7+4>>2]=HEAP32[186060+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[186060+8>>2]|0;HEAP32[$7+12>>2]=HEAP32[186060+12>>2]|0;HEAP32[$7+16>>2]=HEAP32[186060+16>>2]|0;HEAP32[$7+20>>2]=HEAP32[186060+20>>2]|0;HEAP32[$7+24>>2]=HEAP32[186060+24>>2]|0;
 dest=$8; stop=dest+84|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 (_pthread_setcancelstate(1,($9|0))|0);
 $13 = ((($6)) + 96|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14*1000)|0;
 $16 = ((($6)) + 88|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($6)) + 84|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  $$0177$lcssa = 2;$$0180$lcssa = 0;$$0181$lcssa = 16;
 } else {
  $$0177228 = 2;$$0180227 = 0;$$0181226 = 16;
  while(1) {
   $21 = (($6) + (($$0180227*28)|0)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(2);
   if ($23) {
    $24 = (((($8) + (($$0180227*28)|0)|0)) + 4|0);
    $25 = (((($6) + (($$0180227*28)|0)|0)) + 8|0);
    $26 = HEAP32[$25>>2]|0;
    HEAP32[$24>>2] = $26;
    $27 = (_htons(53)|0);
    $$1178 = $$0177228;$$1182 = $$0181226;$$sink = 2;$$sink241 = $27;
   } else {
    $28 = (((($8) + (($$0180227*28)|0)|0)) + 8|0);
    $29 = (((($6) + (($$0180227*28)|0)|0)) + 8|0);
    ;HEAP32[$28>>2]=HEAP32[$29>>2]|0;HEAP32[$28+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$28+8>>2]=HEAP32[$29+8>>2]|0;HEAP32[$28+12>>2]=HEAP32[$29+12>>2]|0;
    $30 = (_htons(53)|0);
    $31 = (((($6) + (($$0180227*28)|0)|0)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (((($8) + (($$0180227*28)|0)|0)) + 24|0);
    HEAP32[$33>>2] = $32;
    $$1178 = 10;$$1182 = 28;$$sink = 10;$$sink241 = $30;
   }
   $34 = (((($8) + (($$0180227*28)|0)|0)) + 2|0);
   HEAP16[$34>>1] = $$sink241;
   $35 = (($8) + (($$0180227*28)|0)|0);
   HEAP16[$35>>1] = $$sink;
   $36 = (($$0180227) + 1)|0;
   $37 = ($36>>>0)<($19>>>0);
   if ($37) {
    $$0177228 = $$1178;$$0180227 = $36;$$0181226 = $$1182;
   } else {
    $$0177$lcssa = $$1178;$$0180$lcssa = $36;$$0181$lcssa = $$1182;
    break;
   }
  }
 }
 $38 = $$0177$lcssa&65535;
 HEAP16[$7>>1] = $38;
 $39 = (_socket($$0177$lcssa,526338,0)|0);
 $40 = ($39|0)<(0);
 $41 = ($$0177$lcssa|0)==(10);
 $or$cond = $41 & $40;
 if ($or$cond) {
  $42 = (___errno_location()|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(97);
  if ($44) {
   $45 = (_socket(2,526338,0)|0);
   $$0165 = $45;$$2179 = 2;
   label = 9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0165 = $39;$$2179 = $$0177$lcssa;
  label = 9;
 }
 if ((label|0) == 9) {
  $46 = ($$0165|0)<(0);
  if ($46) {
   $$0 = -1;
  } else {
   $47 = (_bind($$0165,$7,$$0181$lcssa)|0);
   $48 = ($47|0)<(0);
   if ($48) {
    $$0 = -1;
   } else {
    $49 = $$0165;
    _pthread_cleanup_push((19|0),($49|0));
    $50 = HEAP32[$9>>2]|0;
    (_pthread_setcancelstate(($50|0),(0|0))|0);
    $51 = ($$2179|0)==(10);
    if ($51) {
     HEAP32[$11>>2] = 0;
     (_setsockopt($$0165,41,26,$11,4)|0);
     $52 = ($$0180$lcssa|0)>(0);
     if ($52) {
      $$0168223 = 0;
      while(1) {
       $53 = (($8) + (($$0168223*28)|0)|0);
       $54 = HEAP16[$53>>1]|0;
       $55 = ($54<<16>>16)==(2);
       if ($55) {
        $56 = (((($8) + (($$0168223*28)|0)|0)) + 8|0);
        $57 = (((($8) + (($$0168223*28)|0)|0)) + 20|0);
        $58 = (((($8) + (($$0168223*28)|0)|0)) + 4|0);
        $59 = HEAP32[$58>>2]|0;
        HEAP32[$57>>2] = $59;
        dest=$56; src=183114; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
        HEAP16[$53>>1] = 10;
        HEAP32[$58>>2] = 0;
        $60 = (((($8) + (($$0168223*28)|0)|0)) + 24|0);
        HEAP32[$60>>2] = 0;
       }
       $61 = (($$0168223) + 1)|0;
       $exitcond240 = ($61|0)==($$0180$lcssa|0);
       if ($exitcond240) {
        break;
       } else {
        $$0168223 = $61;
       }
      }
     }
    }
    $62 = $0 << 2;
    _memset(($4|0),0,($62|0))|0;
    HEAP32[$10>>2] = $$0165;
    $63 = ((($10)) + 4|0);
    HEAP16[$63>>1] = 1;
    $64 = (($15|0) / ($17|0))&-1;
    $65 = (_mtime()|0);
    $66 = ($15|0)==(0);
    L24: do {
     if (!($66)) {
      $67 = (($65) - ($64))|0;
      $68 = ($$0180$lcssa|0)>(0);
      $69 = ($0|0)<(1);
      $70 = $0 << 1;
      $71 = ($$0180$lcssa|0)<(1);
      $$0163220 = $65;$$0164219 = $67;$$0170218 = 0;$$0173217 = 0;
      while(1) {
       $72 = (($$0163220) - ($$0164219))|0;
       $73 = ($72>>>0)<($64>>>0);
       $brmerge = $73 | $69;
       $$0173217$mux = $73 ? $$0173217 : $70;
       $$0164219$mux = $73 ? $$0164219 : $$0163220;
       if ($brmerge) {
        $$1 = $$0164219$mux;$$1174 = $$0173217$mux;
       } else {
        $$1169196 = 0;
        while(1) {
         $74 = (($4) + ($$1169196<<2)|0);
         $75 = HEAP32[$74>>2]|0;
         $76 = ($75|0)!=(0);
         $brmerge237 = $76 | $71;
         if (!($brmerge237)) {
          $77 = (($1) + ($$1169196<<2)|0);
          $78 = (($2) + ($$1169196<<2)|0);
          $$0166195 = 0;
          while(1) {
           $79 = HEAP32[$77>>2]|0;
           $80 = HEAP32[$78>>2]|0;
           $81 = (($8) + (($$0166195*28)|0)|0);
           (_sendto($$0165,$79,$80,16384,$81,$$0181$lcssa)|0);
           $82 = (($$0166195) + 1)|0;
           $exitcond = ($82|0)==($$0180$lcssa|0);
           if ($exitcond) {
            break;
           } else {
            $$0166195 = $82;
           }
          }
         }
         $83 = (($$1169196) + 1)|0;
         $exitcond239 = ($83|0)==($0|0);
         if ($exitcond239) {
          $$1 = $$0163220;$$1174 = $70;
          break;
         } else {
          $$1169196 = $83;
         }
        }
       }
       $84 = (($64) - ($$0163220))|0;
       $85 = (($84) + ($$1))|0;
       $86 = (_poll($10,1,$85)|0);
       $87 = ($86|0)<(1);
       if ($87) {
        $$3176 = $$1174;$$4 = $$0170218;
       } else {
        $88 = (($3) + ($$0170218<<2)|0);
        $89 = HEAP32[$88>>2]|0;
        HEAP32[$12>>2] = $$0181$lcssa;
        $90 = (_recvfrom($$0165,$89,$5,0,$7,$12)|0);
        $91 = ($90|0)>(-1);
        if ($91) {
         $$1171213 = $$0170218;$$2175212 = $$1174;$106 = $88;$93 = $90;
         while(1) {
          $92 = ($93|0)<(4);
          L41: do {
           if ($92) {
            $$1171$be = $$1171213;$$2175$be = $$2175212;
           } else {
            L43: do {
             if ($68) {
              $$1167198 = 0;
              while(1) {
               $98 = (($8) + (($$1167198*28)|0)|0);
               $99 = (_memcmp($98,$7,$$0181$lcssa)|0);
               $100 = ($99|0)==(0);
               if ($100) {
                $$1167$lcssa = $$1167198;
                break L43;
               }
               $101 = (($$1167198) + 1)|0;
               $102 = ($101|0)<($$0180$lcssa|0);
               if ($102) {
                $$1167198 = $101;
               } else {
                $$1167$lcssa = $101;
                break;
               }
              }
             } else {
              $$1167$lcssa = 0;
             }
            } while(0);
            $103 = ($$1167$lcssa|0)==($$0180$lcssa|0);
            if ($103) {
             $$1171$be = $$1171213;$$2175$be = $$2175212;
            } else {
             $104 = ($$1171213|0)<($0|0);
             L49: do {
              if ($104) {
               $105 = HEAP32[$106>>2]|0;
               $107 = HEAP8[$105>>0]|0;
               $108 = ((($105)) + 1|0);
               $$2202 = $$1171213;
               while(1) {
                $109 = (($1) + ($$2202<<2)|0);
                $110 = HEAP32[$109>>2]|0;
                $111 = HEAP8[$110>>0]|0;
                $112 = ($107<<24>>24)==($111<<24>>24);
                if ($112) {
                 $113 = HEAP8[$108>>0]|0;
                 $114 = ((($110)) + 1|0);
                 $115 = HEAP8[$114>>0]|0;
                 $116 = ($113<<24>>24)==($115<<24>>24);
                 if ($116) {
                  $$2$lcssa = $$2202;
                  break L49;
                 }
                }
                $117 = (($$2202) + 1)|0;
                $118 = ($117|0)<($0|0);
                if ($118) {
                 $$2202 = $117;
                } else {
                 $$2$lcssa = $117;
                 break;
                }
               }
              } else {
               $$2$lcssa = $$1171213;
              }
             } while(0);
             $119 = ($$2$lcssa|0)==($0|0);
             if ($119) {
              $$1171$be = $$1171213;$$2175$be = $$2175212;
             } else {
              $120 = (($4) + ($$2$lcssa<<2)|0);
              $121 = HEAP32[$120>>2]|0;
              $122 = ($121|0)==(0);
              if (!($122)) {
               $$1171$be = $$1171213;$$2175$be = $$2175212;
               break;
              }
              $123 = HEAP32[$106>>2]|0;
              $124 = ((($123)) + 3|0);
              $trunc = HEAP8[$124>>0]|0;
              $trunc$clear = $trunc & 15;
              switch ($trunc$clear<<24>>24) {
              case 3: case 0:  {
               break;
              }
              case 2:  {
               $125 = ($$2175212|0)==(0);
               if ($125) {
                $$1171$be = $$1171213;$$2175$be = 0;
                break L41;
               }
               $126 = (($8) + (($$1167$lcssa*28)|0)|0);
               $127 = (($2) + ($$2$lcssa<<2)|0);
               $128 = (($1) + ($$2$lcssa<<2)|0);
               $129 = (($$2175212) + -1)|0;
               $130 = HEAP32[$128>>2]|0;
               $131 = HEAP32[$127>>2]|0;
               (_sendto($$0165,$130,$131,16384,$126,$$0181$lcssa)|0);
               $$1171$be = $$1171213;$$2175$be = $129;
               break L41;
               break;
              }
              default: {
               $$1171$be = $$1171213;$$2175$be = $$2175212;
               break L41;
              }
              }
              HEAP32[$120>>2] = $93;
              $132 = ($$2$lcssa|0)==($$1171213|0);
              L63: do {
               if ($132) {
                if ($104) {
                 $$2172207 = $$1171213;
                } else {
                 $$3 = $$1171213;
                 break;
                }
                while(1) {
                 $133 = (($4) + ($$2172207<<2)|0);
                 $134 = HEAP32[$133>>2]|0;
                 $135 = ($134|0)==(0);
                 if ($135) {
                  $$3 = $$2172207;
                  break L63;
                 }
                 $136 = (($$2172207) + 1)|0;
                 $137 = ($136|0)<($0|0);
                 if ($137) {
                  $$2172207 = $136;
                 } else {
                  $$3 = $136;
                  break;
                 }
                }
               } else {
                $138 = (($3) + ($$2$lcssa<<2)|0);
                $139 = HEAP32[$138>>2]|0;
                _memcpy(($139|0),($123|0),($93|0))|0;
                $$3 = $$1171213;
               }
              } while(0);
              $140 = ($$3|0)==($0|0);
              if ($140) {
               break L24;
              } else {
               $$1171$be = $$3;$$2175$be = $$2175212;
              }
             }
            }
           }
          } while(0);
          $94 = (($3) + ($$1171$be<<2)|0);
          $95 = HEAP32[$94>>2]|0;
          HEAP32[$12>>2] = $$0181$lcssa;
          $96 = (_recvfrom($$0165,$95,$5,0,$7,$12)|0);
          $97 = ($96|0)>(-1);
          if ($97) {
           $$1171213 = $$1171$be;$$2175212 = $$2175$be;$106 = $94;$93 = $96;
          } else {
           $$3176 = $$2175$be;$$4 = $$1171$be;
           break;
          }
         }
        } else {
         $$3176 = $$1174;$$4 = $$0170218;
        }
       }
       $141 = (_mtime()|0);
       $142 = (($141) - ($65))|0;
       $143 = ($142>>>0)<($15>>>0);
       if ($143) {
        $$0163220 = $141;$$0164219 = $$1;$$0170218 = $$4;$$0173217 = $$3176;
       } else {
        break;
       }
      }
     }
    } while(0);
    _pthread_cleanup_pop(1);
    $$0 = 0;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _dns_parse_callback($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 switch ($1|0) {
 case 1:  {
  $6 = ($3|0)==(4);
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + (($9*28)|0)|0);
   HEAP32[$10>>2] = 2;
   $11 = (((($7) + (($9*28)|0)|0)) + 4|0);
   HEAP32[$11>>2] = 0;
   $12 = (($9) + 1)|0;
   HEAP32[$8>>2] = $12;
   $13 = (((($7) + (($9*28)|0)|0)) + 8|0);
   $14 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
   HEAP8[$13>>0]=$14&255;HEAP8[$13+1>>0]=($14>>8)&255;HEAP8[$13+2>>0]=($14>>16)&255;HEAP8[$13+3>>0]=$14>>24;
   $$0 = 0;
  } else {
   $$0 = -1;
  }
  break;
 }
 case 28:  {
  $15 = ($3|0)==(16);
  if ($15) {
   $16 = HEAP32[$0>>2]|0;
   $17 = ((($0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($16) + (($18*28)|0)|0);
   HEAP32[$19>>2] = 10;
   $20 = (((($16) + (($18*28)|0)|0)) + 4|0);
   HEAP32[$20>>2] = 0;
   $21 = (($18) + 1)|0;
   HEAP32[$17>>2] = $21;
   $22 = (((($16) + (($18*28)|0)|0)) + 8|0);
   dest=$22; src=$2; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $$0 = 0;
  } else {
   $$0 = -1;
  }
  break;
 }
 case 5:  {
  $23 = ((($4)) + 512|0);
  $24 = (___dn_expand($4,$23,$2,$5,256)|0);
  $25 = ($24|0)>(0);
  if ($25) {
   $26 = (_is_valid_hostname($5)|0);
   $27 = ($26|0)==(0);
   if ($27) {
    $$0 = 0;
   } else {
    $28 = ((($0)) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    (_strcpy($29,$5)|0);
    $$0 = 0;
   }
  } else {
   $$0 = 0;
  }
  break;
 }
 default: {
  $$0 = 0;
 }
 }
 STACKTOP = sp;return ($$0|0);
}
function _is_valid_hostname($0) {
 $0 = $0|0;
 var $$0 = 0, $$012 = 0, $$off = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strnlen($0,255)|0);
 $2 = (($1) + -1)|0;
 $3 = ($2>>>0)>(253);
 if ($3) {
  $$012 = 0;
 } else {
  $4 = (_mbstowcs(0,$0,0)|0);
  $5 = ($4|0)==(-1);
  if ($5) {
   $$012 = 0;
  } else {
   $$0 = $0;
   while(1) {
    $6 = HEAP8[$$0>>0]|0;
    $7 = ($6<<24>>24)<(0);
    $$off = (($6) + -45)<<24>>24;
    $switch = ($$off&255)<(2);
    $or$cond = $7 | $switch;
    if (!($or$cond)) {
     $8 = $6&255;
     $9 = (_isalnum($8)|0);
     $10 = ($9|0)==(0);
     if ($10) {
      break;
     }
    }
    $11 = ((($$0)) + 1|0);
    $$0 = $11;
   }
   $12 = ($6<<24>>24)==(0);
   $13 = $12&1;
   $$012 = $13;
  }
 }
 return ($$012|0);
}
function _cleanup_494($0) {
 $0 = $0|0;
 var $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 (___syscall6(6,($vararg_buffer|0))|0);
 STACKTOP = sp;return;
}
function _mtime() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 (_clock_gettime(0,($0|0))|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1*1000)|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4|0) / 1000000)&-1;
 $6 = (($5) + ($2))|0;
 STACKTOP = sp;return ($6|0);
}
function _getc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (___lockfile($0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $15 = ((($0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = ((($16)) + 1|0);
    HEAP32[$15>>2] = $20;
    $21 = HEAP8[$16>>0]|0;
    $22 = $21&255;
    $24 = $22;
   } else {
    $23 = (___uflow($0)|0);
    $24 = $23;
   }
   $$0 = $24;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = ((($0)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = ((($7)) + 1|0);
    HEAP32[$6>>2] = $11;
    $12 = HEAP8[$7>>0]|0;
    $13 = $12&255;
    $$0 = $13;
    break;
   } else {
    $14 = (___uflow($0)|0);
    $$0 = $14;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _getnetbyaddr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function _getnetbyname($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function _ns_get16($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 << 8;
 $4 = ((($0)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $3 | $6;
 return ($7|0);
}
function _ns_get32($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 << 24;
 $4 = ((($0)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 << 16;
 $8 = $7 | $3;
 $9 = ((($0)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 << 8;
 $13 = $8 | $12;
 $14 = ((($0)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $13 | $16;
 return ($17|0);
}
function _ns_put16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 >>> 8;
 $3 = $2&255;
 $4 = ((($1)) + 1|0);
 HEAP8[$1>>0] = $3;
 $5 = $0&255;
 HEAP8[$4>>0] = $5;
 return;
}
function _ns_put32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 >>> 24;
 $3 = $2&255;
 $4 = ((($1)) + 1|0);
 HEAP8[$1>>0] = $3;
 $5 = $0 >>> 16;
 $6 = $5&255;
 $7 = ((($1)) + 2|0);
 HEAP8[$4>>0] = $6;
 $8 = $0 >>> 8;
 $9 = $8&255;
 $10 = ((($1)) + 3|0);
 HEAP8[$7>>0] = $9;
 $11 = $0&255;
 HEAP8[$10>>0] = $11;
 return;
}
function _ns_skiprr($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$be = 0, $$0$lcssa = 0, $$025 = 0, $$027 = 0, $$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $$0$lcssa = $0;
   label = 10;
  } else {
   $5 = $1;
   $6 = ($2|0)==(0);
   $$027 = $0;$$in = $3;
   while(1) {
    $7 = (($$in) + -1)|0;
    $8 = (_dn_skipname($$027,$1)|0);
    $9 = ($8|0)<(0);
    if ($9) {
     break;
    }
    $10 = (($8) + 4)|0;
    $11 = $$027;
    $12 = (($5) - ($11))|0;
    $13 = ($10|0)>($12|0);
    if ($13) {
     break;
    }
    $14 = (($$027) + ($10)|0);
    if ($6) {
     $$0$be = $14;
    } else {
     $15 = $14;
     $16 = (($5) - ($15))|0;
     $17 = ($16|0)<(6);
     if ($17) {
      break;
     }
     $18 = ((($14)) + 4|0);
     $19 = ((($18)) + 2|0);
     $20 = ((($19)) + -2|0);
     $21 = (_ns_get16($20)|0);
     $22 = $19;
     $23 = (($5) - ($22))|0;
     $24 = ($21|0)>($23|0);
     if ($24) {
      break;
     }
     $25 = (($19) + ($21)|0);
     $$0$be = $25;
    }
    $26 = ($7|0)==(0);
    if ($26) {
     $$0$lcssa = $$0$be;
     label = 10;
     break L1;
    } else {
     $$027 = $$0$be;$$in = $7;
    }
   }
   $30 = (___errno_location()|0);
   HEAP32[$30>>2] = 90;
   $$025 = -1;
  }
 } while(0);
 if ((label|0) == 10) {
  $27 = $$0$lcssa;
  $28 = $0;
  $29 = (($27) - ($28))|0;
  $$025 = $29;
 }
 return ($$025|0);
}
function _ns_initparse($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04047 = 0, $$04146 = 0, $$14244 = 0, $$145 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 $3 = (($0) + ($1)|0);
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = ($1|0)<(12);
 L1: do {
  if ($5) {
   label = 12;
  } else {
   $6 = (_ns_get16($0)|0);
   $7 = $6&65535;
   $8 = ((($2)) + 8|0);
   HEAP16[$8>>1] = $7;
   $9 = ((($0)) + 4|0);
   $10 = ((($0)) + 2|0);
   $11 = (_ns_get16($10)|0);
   $12 = $11&65535;
   $13 = ((($2)) + 10|0);
   HEAP16[$13>>1] = $12;
   $$04047 = 0;$$04146 = $9;
   while(1) {
    $14 = ((($$04146)) + 2|0);
    $15 = (_ns_get16($$04146)|0);
    $16 = $15&65535;
    $17 = (((($2)) + 12|0) + ($$04047<<1)|0);
    HEAP16[$17>>1] = $16;
    $18 = (($$04047) + 1)|0;
    $exitcond = ($18|0)==(4);
    if ($exitcond) {
     break;
    } else {
     $$04047 = $18;$$04146 = $14;
    }
   }
   $scevgep = ((($0)) + 12|0);
   $$14244 = $scevgep;$$145 = 0;
   while(1) {
    $19 = (((($2)) + 12|0) + ($$145<<1)|0);
    $20 = HEAP16[$19>>1]|0;
    $21 = ($20<<16>>16)==(0);
    $22 = (((($2)) + 20|0) + ($$145<<2)|0);
    if ($21) {
     HEAP32[$22>>2] = 0;
     $$2 = $$14244;
    } else {
     HEAP32[$22>>2] = $$14244;
     $23 = HEAP32[$4>>2]|0;
     $24 = HEAP16[$19>>1]|0;
     $25 = $24&65535;
     $26 = (_ns_skiprr($$14244,$23,$$145,$25)|0);
     $27 = ($26|0)<(0);
     if ($27) {
      $$0 = -1;
      break L1;
     }
     $28 = (($$14244) + ($26)|0);
     $$2 = $28;
    }
    $29 = (($$145) + 1)|0;
    $30 = ($$145|0)<(3);
    if ($30) {
     $$14244 = $$2;$$145 = $29;
    } else {
     break;
    }
   }
   $31 = HEAP32[$4>>2]|0;
   $32 = ($$2|0)==($31|0);
   if ($32) {
    $33 = ((($2)) + 36|0);
    HEAP32[$33>>2] = 4;
    $34 = ((($2)) + 40|0);
    HEAP32[$34>>2] = -1;
    $35 = ((($2)) + 44|0);
    HEAP32[$35>>2] = 0;
    $$0 = 0;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 12) {
  $36 = (___errno_location()|0);
  HEAP32[$36>>2] = 90;
  $$0 = -1;
 }
 return ($$0|0);
}
function _ns_name_uncompress($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (FUNCTION_TABLE_iiiiii[20 & 31]($0,$1,$2,$3,$4)|0);
 $6 = ($5|0)<(0);
 if ($6) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 90;
 }
 return ($5|0);
}
function _ns_parserr($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$073 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($1>>>0)>(3);
 L1: do {
  if ($4) {
   label = 24;
  } else {
   $5 = ((($0)) + 36|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==($1|0);
   if (!($7)) {
    $8 = ((($0)) + 44|0);
    $9 = (((($0)) + 20|0) + ($1<<2)|0);
    $10 = ((($0)) + 40|0);
    HEAP32[$5>>2] = $1;
    HEAP32[$10>>2] = 0;
    $11 = HEAP32[$9>>2]|0;
    HEAP32[$8>>2] = $11;
   }
   $12 = ($2|0)==(-1);
   if ($12) {
    $13 = ((($0)) + 40|0);
    $14 = HEAP32[$13>>2]|0;
    $$073 = $14;
   } else {
    $$073 = $2;
   }
   $15 = ($$073|0)<(0);
   if ($15) {
    label = 24;
   } else {
    $16 = (((($0)) + 12|0) + ($1<<1)|0);
    $17 = HEAP16[$16>>1]|0;
    $18 = $17&65535;
    $19 = ($$073|0)<($18|0);
    if ($19) {
     $20 = ((($0)) + 40|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($$073|0)<($21|0);
     if ($22) {
      $23 = ((($0)) + 44|0);
      $24 = (((($0)) + 20|0) + ($1<<2)|0);
      HEAP32[$20>>2] = 0;
      $25 = HEAP32[$24>>2]|0;
      HEAP32[$23>>2] = $25;
      $27 = 0;
     } else {
      $27 = $21;
     }
     $26 = ($$073|0)>($27|0);
     $28 = ((($0)) + 44|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ((($0)) + 4|0);
     if ($26) {
      $31 = HEAP32[$30>>2]|0;
      $32 = (($$073) - ($27))|0;
      $33 = (_ns_skiprr($29,$31,$1,$32)|0);
      $34 = ($33|0)<(0);
      if ($34) {
       $$0 = -1;
       break;
      }
      $35 = HEAP32[$28>>2]|0;
      $36 = (($35) + ($33)|0);
      HEAP32[$28>>2] = $36;
      HEAP32[$20>>2] = $$073;
      $39 = $36;
     } else {
      $39 = $29;
     }
     $37 = HEAP32[$0>>2]|0;
     $38 = HEAP32[$30>>2]|0;
     $40 = (_ns_name_uncompress($37,$38,$39,$3,1025)|0);
     $41 = ($40|0)<(0);
     if ($41) {
      $$0 = -1;
     } else {
      $42 = HEAP32[$28>>2]|0;
      $43 = (($42) + ($40)|0);
      HEAP32[$28>>2] = $43;
      $44 = HEAP32[$30>>2]|0;
      $45 = $43;
      $46 = (($44) - ($45))|0;
      $47 = ($46|0)<(4);
      do {
       if (!($47)) {
        $48 = ((($43)) + 2|0);
        HEAP32[$28>>2] = $48;
        $49 = ((($48)) + -2|0);
        $50 = (_ns_get16($49)|0);
        $51 = $50&65535;
        $52 = ((($3)) + 1026|0);
        HEAP16[$52>>1] = $51;
        $53 = ((($48)) + 2|0);
        HEAP32[$28>>2] = $53;
        $54 = (_ns_get16($48)|0);
        $55 = $54&65535;
        $56 = ((($3)) + 1028|0);
        HEAP16[$56>>1] = $55;
        $57 = ($1|0)==(0);
        if ($57) {
         $75 = ((($3)) + 1032|0);
         HEAP32[$75>>2] = 0;
         $76 = ((($3)) + 1036|0);
         HEAP16[$76>>1] = 0;
         $77 = ((($3)) + 1040|0);
         HEAP32[$77>>2] = 0;
        } else {
         $58 = $53;
         $59 = (($44) - ($58))|0;
         $60 = ($59|0)<(6);
         if ($60) {
          break;
         }
         $61 = ((($53)) + 4|0);
         HEAP32[$28>>2] = $61;
         $62 = (_ns_get32($53)|0);
         $63 = ((($3)) + 1032|0);
         HEAP32[$63>>2] = $62;
         $64 = ((($61)) + 2|0);
         HEAP32[$28>>2] = $64;
         $65 = (_ns_get16($61)|0);
         $66 = $65&65535;
         $67 = ((($3)) + 1036|0);
         HEAP16[$67>>1] = $66;
         $68 = $65 & 65535;
         $69 = $64;
         $70 = (($44) - ($69))|0;
         $71 = ($68|0)>($70|0);
         if ($71) {
          break;
         }
         $72 = ((($3)) + 1040|0);
         HEAP32[$72>>2] = $64;
         $73 = $65 & 65535;
         $74 = (($64) + ($73)|0);
         HEAP32[$28>>2] = $74;
        }
        $78 = HEAP32[$20>>2]|0;
        $79 = (($78) + 1)|0;
        HEAP32[$20>>2] = $79;
        $80 = HEAP16[$16>>1]|0;
        $81 = $80&65535;
        $82 = ($78|0)<($81|0);
        if ($82) {
         $$0 = 0;
         break L1;
        }
        $83 = (($1) + 1)|0;
        HEAP32[$5>>2] = $83;
        $84 = ($83|0)==(4);
        if ($84) {
         HEAP32[$20>>2] = -1;
         HEAP32[$28>>2] = 0;
         $$0 = 0;
         break L1;
        } else {
         HEAP32[$20>>2] = 0;
         $$0 = 0;
         break L1;
        }
       }
      } while(0);
      $86 = (___errno_location()|0);
      HEAP32[$86>>2] = 90;
      $$0 = -1;
     }
    } else {
     label = 24;
    }
   }
  }
 } while(0);
 if ((label|0) == 24) {
  $85 = (___errno_location()|0);
  HEAP32[$85>>2] = 19;
  $$0 = -1;
 }
 return ($$0|0);
}
function _ntohs($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___bswap_16_485($0)|0);
 return ($1|0);
}
function ___bswap_16_485($0) {
 $0 = $0|0;
 var $rev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev = (_llvm_bswap_i16(($0|0))|0);
 return ($rev|0);
}
function _recvmmsg($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $1;
 $6 = $4;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $6;
 $7 = (___syscall337(337,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 STACKTOP = sp;return ($8|0);
}
function _recvmsg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 HEAP32[$3>>2] = $0;
 $4 = ((($3)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = ((($3)) + 8|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($3)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($3)) + 16|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 20|0);
 HEAP32[$9>>2] = 0;
 $10 = $3;
 HEAP32[$vararg_buffer>>2] = 17;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 $11 = (___syscall102(102,($vararg_buffer|0))|0);
 $12 = (___syscall_ret($11)|0);
 STACKTOP = sp;return ($12|0);
}
function _res_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___res_msend($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $6 = sp;
 $7 = (___get_resolv_conf($6,0,0)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = (___res_msend_rc($0,$1,$2,$3,$4,$5,$6)|0);
  $$0 = $9;
 }
 STACKTOP = sp;return ($$0|0);
}
function _res_querydomain($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $6 = sp;
 $7 = (_strnlen($0,255)|0);
 $8 = (_strnlen($1,255)|0);
 $9 = (($7) + 1)|0;
 $10 = (($9) + ($8))|0;
 $11 = ($10>>>0)>(254);
 $12 = (($6) + ($7)|0);
 if ($11) {
  $$0 = -1;
 } else {
  $13 = (($8) + 1)|0;
  $14 = ((($12)) + 1|0);
  _memcpy(($6|0),($0|0),($7|0))|0;
  HEAP8[$12>>0] = 46;
  _memcpy(($14|0),($1|0),($13|0))|0;
  $15 = (_res_query(($6|0),($2|0),($3|0),($4|0),($5|0))|0);
  $$0 = $15;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___res_send($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 HEAP32[$7>>2] = $3;
 $8 = (___res_msend(1,$4,$5,$6,$7,$3)|0);
 $9 = ($8|0)<(0);
 $10 = HEAP32[$7>>2]|0;
 $11 = $9 ? $8 : $10;
 STACKTOP = sp;return ($11|0);
}
function ___res_state() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (186088|0);
}
function _sendmmsg($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $4 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $5 = (___syscall345(345,($vararg_buffer|0))|0);
 $6 = (___syscall_ret($5)|0);
 STACKTOP = sp;return ($6|0);
}
function _sendmsg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 HEAP32[$3>>2] = $0;
 $4 = ((($3)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = ((($3)) + 8|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($3)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($3)) + 16|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 20|0);
 HEAP32[$9>>2] = 0;
 $10 = $3;
 HEAP32[$vararg_buffer>>2] = 16;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 $11 = (___syscall102(102,($vararg_buffer|0))|0);
 $12 = (___syscall_ret($11)|0);
 STACKTOP = sp;return ($12|0);
}
function _endservent() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _setservent($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _getservent() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function _shutdown($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 HEAP32[$2>>2] = $0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($2)) + 8|0);
 $5 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 HEAP32[$vararg_buffer>>2] = 13;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 $6 = (___syscall102(102,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _sockatmark($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = sp + 4|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (_ioctl($0,35077,$vararg_buffer)|0);
 $3 = ($2|0)<(0);
 $4 = HEAP32[$1>>2]|0;
 $$0 = $3 ? -1 : $4;
 STACKTOP = sp;return ($$0|0);
}
function _socketpair($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$020 = 0, $$old = 0, $$old21 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer16 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer21 = sp + 64|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 104|0;
 $5 = sp + 80|0;
 HEAP32[$4>>2] = $0;
 $6 = ((($4)) + 4|0);
 HEAP32[$6>>2] = $1;
 $7 = ((($4)) + 8|0);
 HEAP32[$7>>2] = $2;
 $8 = ((($4)) + 12|0);
 $9 = $3;
 HEAP32[$8>>2] = $9;
 $10 = ((($4)) + 16|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($4)) + 20|0);
 HEAP32[$11>>2] = 0;
 $12 = $4;
 HEAP32[$vararg_buffer>>2] = 8;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $12;
 $13 = (___syscall102(102,($vararg_buffer|0))|0);
 $14 = (___syscall_ret($13)|0);
 $15 = ($14|0)<(0);
 do {
  if ($15) {
   $16 = (___errno_location()|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(22);
   if ($18) {
    $$old = $1 & 526336;
    $$old21 = ($$old|0)==(0);
    if ($$old21) {
     $$020 = $14;
     break;
    }
   } else {
    $19 = (___errno_location()|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)!=(93);
    $22 = $1 & 526336;
    $23 = ($22|0)==(0);
    $or$cond = $23 | $21;
    if ($or$cond) {
     $$020 = $14;
     break;
    }
   }
   HEAP32[$5>>2] = $0;
   $24 = ((($5)) + 4|0);
   $25 = $1 & -526337;
   HEAP32[$24>>2] = $25;
   $26 = ((($5)) + 8|0);
   HEAP32[$26>>2] = $2;
   $27 = ((($5)) + 12|0);
   HEAP32[$27>>2] = $9;
   $28 = ((($5)) + 16|0);
   HEAP32[$28>>2] = 0;
   $29 = ((($5)) + 20|0);
   HEAP32[$29>>2] = 0;
   $30 = $5;
   HEAP32[$vararg_buffer2>>2] = 8;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $30;
   $31 = (___syscall102(102,($vararg_buffer2|0))|0);
   $32 = (___syscall_ret($31)|0);
   $33 = ($32|0)<(0);
   if ($33) {
    $$020 = $32;
   } else {
    $34 = $1 & 524288;
    $35 = ($34|0)==(0);
    if (!($35)) {
     $36 = HEAP32[$3>>2]|0;
     HEAP32[$vararg_buffer6>>2] = $36;
     $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
     HEAP32[$vararg_ptr9>>2] = 2;
     $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
     HEAP32[$vararg_ptr10>>2] = 1;
     (___syscall221(221,($vararg_buffer6|0))|0);
     $37 = ((($3)) + 4|0);
     $38 = HEAP32[$37>>2]|0;
     HEAP32[$vararg_buffer11>>2] = $38;
     $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
     HEAP32[$vararg_ptr14>>2] = 2;
     $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
     HEAP32[$vararg_ptr15>>2] = 1;
     (___syscall221(221,($vararg_buffer11|0))|0);
    }
    $39 = $1 & 2048;
    $40 = ($39|0)==(0);
    if ($40) {
     $$020 = $32;
    } else {
     $41 = HEAP32[$3>>2]|0;
     HEAP32[$vararg_buffer16>>2] = $41;
     $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
     HEAP32[$vararg_ptr19>>2] = 4;
     $vararg_ptr20 = ((($vararg_buffer16)) + 8|0);
     HEAP32[$vararg_ptr20>>2] = 2048;
     (___syscall221(221,($vararg_buffer16|0))|0);
     $42 = ((($3)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     HEAP32[$vararg_buffer21>>2] = $43;
     $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
     HEAP32[$vararg_ptr24>>2] = 4;
     $vararg_ptr25 = ((($vararg_buffer21)) + 8|0);
     HEAP32[$vararg_ptr25>>2] = 2048;
     (___syscall221(221,($vararg_buffer21|0))|0);
     $$020 = $32;
    }
   }
  } else {
   $$020 = $14;
  }
 } while(0);
 STACKTOP = sp;return ($$020|0);
}
function ___rand48_step($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP16[$0>>1]|0;
 $3 = $2&65535;
 $4 = ((($0)) + 2|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = $6 << 16;
 $8 = $7 | $3;
 $9 = ((($0)) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = HEAP16[$1>>1]|0;
 $13 = $12&65535;
 $14 = ((($1)) + 2|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = $16 << 16;
 $18 = $17 | $13;
 $19 = ((($1)) + 4|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = (___muldi3(($18|0),($21|0),($8|0),($11|0))|0);
 $23 = tempRet0;
 $24 = ((($1)) + 6|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25&65535;
 $27 = (_i64Add(($22|0),($23|0),($26|0),0)|0);
 $28 = tempRet0;
 $29 = $27&65535;
 HEAP16[$0>>1] = $29;
 $30 = (_bitshift64Lshr(($27|0),($28|0),16)|0);
 $31 = tempRet0;
 $32 = $30&65535;
 HEAP16[$4>>1] = $32;
 $33 = $28&65535;
 HEAP16[$9>>1] = $33;
 $34 = $28 & 65535;
 tempRet0 = ($34);
 return ($27|0);
}
function _erand48($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___rand48_step($0,(24754))|0);
 $2 = tempRet0;
 $3 = (_bitshift64Shl(($1|0),($2|0),4)|0);
 $4 = tempRet0;
 $5 = $4 | 1072693248;
 HEAP32[tempDoublePtr>>2] = $3;HEAP32[tempDoublePtr+4>>2] = $5;$6 = +HEAPF64[tempDoublePtr>>3];
 $7 = $6 + -1.0;
 return (+$7);
}
function _drand48() {
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_erand48(24748));
 return (+$0);
}
function _lcong48($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP16[24748>>1]=HEAP16[$0>>1]|0;HEAP16[24748+2>>1]=HEAP16[$0+2>>1]|0;HEAP16[24748+4>>1]=HEAP16[$0+4>>1]|0;HEAP16[24748+6>>1]=HEAP16[$0+6>>1]|0;HEAP16[24748+8>>1]=HEAP16[$0+8>>1]|0;HEAP16[24748+10>>1]=HEAP16[$0+10>>1]|0;HEAP16[24748+12>>1]=HEAP16[$0+12>>1]|0;
 return;
}
function _nrand48($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___rand48_step($0,(24754))|0);
 $2 = tempRet0;
 $3 = (_bitshift64Lshr(($1|0),($2|0),17)|0);
 $4 = tempRet0;
 return ($3|0);
}
function _lrand48() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_nrand48(24748)|0);
 return ($0|0);
}
function _jrand48($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___rand48_step($0,(24754))|0);
 $2 = tempRet0;
 $3 = (_bitshift64Lshr(($1|0),($2|0),16)|0);
 $4 = tempRet0;
 return ($3|0);
}
function _mrand48() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_jrand48(24748)|0);
 return ($0|0);
}
function _srand($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -1)|0;
 $2 = 184976;
 $3 = $2;
 HEAP32[$3>>2] = $1;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 184976;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 184976;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 return ($14|0);
}
function _rand_r($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = Math_imul($1, 1103515245)|0;
 $3 = (($2) + 12345)|0;
 HEAP32[$0>>2] = $3;
 $4 = (_temper($3)|0);
 $5 = $4 >>> 1;
 return ($5|0);
}
function _temper($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 >>> 11;
 $2 = $1 ^ $0;
 $3 = $2 << 7;
 $4 = $3 & -1658038656;
 $5 = $4 ^ $2;
 $6 = $5 << 15;
 $7 = $6 & -272236544;
 $8 = $7 ^ $5;
 $9 = $8 >>> 18;
 $10 = $9 ^ $8;
 return ($10|0);
}
function _srandom($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((186600|0));
 ___srandom($0);
 ___unlock((186600|0));
 return;
}
function ___srandom($0) {
 $0 = $0|0;
 var $$01011 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[5980]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP32[5981]|0;
  HEAP32[$3>>2] = $0;
 } else {
  $4 = ($1|0)==(31);
  $5 = ($1|0)==(7);
  $6 = $4 | $5;
  $7 = $6 ? 3 : 1;
  HEAP32[5982] = $7;
  HEAP32[46652] = 0;
  $8 = ($1|0)>(0);
  if ($8) {
   $9 = HEAP32[5981]|0;
   $$01011 = 0;$10 = $0;$11 = 0;
   while(1) {
    $12 = (_lcg64($10,$11)|0);
    $13 = tempRet0;
    $14 = (($9) + ($$01011<<2)|0);
    HEAP32[$14>>2] = $13;
    $15 = (($$01011) + 1)|0;
    $16 = ($15|0)<($1|0);
    if ($16) {
     $$01011 = $15;$10 = $12;$11 = $13;
    } else {
     $18 = $9;
     break;
    }
   }
  } else {
   $$pre = HEAP32[5981]|0;
   $18 = $$pre;
  }
  $17 = HEAP32[$18>>2]|0;
  $19 = $17 | 1;
  HEAP32[$18>>2] = $19;
 }
 return;
}
function _lcg64($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___muldi3(($0|0),($1|0),1284865837,1481765933)|0);
 $3 = tempRet0;
 $4 = (_i64Add(($2|0),($3|0),1,0)|0);
 $5 = tempRet0;
 tempRet0 = ($5);
 return ($4|0);
}
function _initstate($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$sink = 0, $$0 = 0, $$sink = 0, $$sink$sink$sink$sink = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)<(8);
 if ($3) {
  $$0 = 0;
 } else {
  ___lock((186600|0));
  $4 = (_savestate()|0);
  $5 = ($2>>>0)<(32);
  if ($5) {
   $$sink$sink$sink$sink = 0;
  } else {
   $6 = ($2>>>0)<(64);
   if ($6) {
    $$sink$sink$sink$sink = 7;
   } else {
    $7 = ($2>>>0)<(128);
    $8 = ($2>>>0)<(256);
    $$sink = $8 ? 31 : 63;
    $$$sink = $7 ? 15 : $$sink;
    $$sink$sink$sink$sink = $$$sink;
   }
  }
  HEAP32[5980] = $$sink$sink$sink$sink;
  $9 = ((($1)) + 4|0);
  HEAP32[5981] = $9;
  ___srandom($0);
  (_savestate()|0);
  ___unlock((186600|0));
  $$0 = $4;
 }
 return ($$0|0);
}
function _savestate() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5980]|0;
 $1 = $0 << 16;
 $2 = HEAP32[5982]|0;
 $3 = $2 << 8;
 $4 = $3 | $1;
 $5 = HEAP32[46652]|0;
 $6 = $4 | $5;
 $7 = HEAP32[5981]|0;
 $8 = ((($7)) + -4|0);
 HEAP32[$8>>2] = $6;
 return ($8|0);
}
function _setstate($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((186600|0));
 $1 = (_savestate()|0);
 _loadstate($0);
 ___unlock((186600|0));
 return ($1|0);
}
function _loadstate($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 HEAP32[5981] = $1;
 $2 = HEAP32[$0>>2]|0;
 $3 = $2 >>> 16;
 HEAP32[5980] = $3;
 $4 = $2 >>> 8;
 $5 = $4 & 255;
 HEAP32[5982] = $5;
 $6 = $2 & 255;
 HEAP32[46652] = $6;
 return;
}
function _random() {
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((186600|0));
 $0 = HEAP32[5980]|0;
 $1 = ($0|0)==(0);
 $2 = HEAP32[5981]|0;
 if ($1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (_lcg31($3)|0);
  HEAP32[$2>>2] = $4;
  $$0 = $4;
 } else {
  $5 = HEAP32[46652]|0;
  $6 = (($2) + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[5982]|0;
  $9 = (($2) + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($7))|0;
  HEAP32[$9>>2] = $11;
  $12 = $11 >>> 1;
  $13 = (($8) + 1)|0;
  $14 = ($13|0)==($0|0);
  $$ = $14 ? 0 : $13;
  HEAP32[5982] = $$;
  $15 = (($5) + 1)|0;
  $16 = ($15|0)==($0|0);
  $$1 = $16 ? 0 : $15;
  HEAP32[46652] = $$1;
  $$0 = $12;
 }
 ___unlock((186600|0));
 return ($$0|0);
}
function _lcg31($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = Math_imul($0, 1103515245)|0;
 $2 = (($1) + 12345)|0;
 $3 = $2 & 2147483647;
 return ($3|0);
}
function _seed48($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP16[186620>>1]=HEAP16[24748>>1]|0;HEAP16[186620+2>>1]=HEAP16[24748+2>>1]|0;HEAP16[186620+4>>1]=HEAP16[24748+4>>1]|0;
 ;HEAP16[24748>>1]=HEAP16[$0>>1]|0;HEAP16[24748+2>>1]=HEAP16[$0+2>>1]|0;HEAP16[24748+4>>1]=HEAP16[$0+4>>1]|0;
 return (186620|0);
}
function _srand48($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP16[$1>>1] = 13070;
 $2 = ((($1)) + 2|0);
 $3 = $0&65535;
 HEAP16[$2>>1] = $3;
 $4 = ((($1)) + 4|0);
 $5 = $0 >>> 16;
 $6 = $5&65535;
 HEAP16[$4>>1] = $6;
 (_seed48($1)|0);
 STACKTOP = sp;return;
}
function _fnmatch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$042 = 0, $$043 = 0, $$044 = 0, $$045 = 0, $$1 = 0, $$mux = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $brmerge = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = $2 & 1;
 $5 = ($4|0)==(0);
 $6 = $2 & 8;
 $7 = ($6|0)==(0);
 L1: do {
  if ($5) {
   L3: do {
    if (!($7)) {
     $29 = $1;
     $$1 = $1;
     while(1) {
      $30 = HEAP8[$$1>>0]|0;
      switch ($30<<24>>24) {
      case 0:  {
       break L3;
       break;
      }
      case 47:  {
       $31 = $$1;
       $32 = (($31) - ($29))|0;
       $33 = (_fnmatch_internal($0,-1,$1,$32,$2)|0);
       $34 = ($33|0)==(0);
       if ($34) {
        $$0 = 0;
        break L1;
       }
       break;
      }
      default: {
      }
      }
      $35 = ((($$1)) + 1|0);
      $$1 = $35;
     }
    }
   } while(0);
   $36 = (_fnmatch_internal($0,-1,$1,-1,$2)|0);
   $$0 = $36;
  } else {
   $$044 = $0;$$045 = $1;
   while(1) {
    $$043 = $$045;
    L13: while(1) {
     $8 = HEAP8[$$043>>0]|0;
     switch ($8<<24>>24) {
     case 47: case 0:  {
      $$042 = $$044;
      break L13;
      break;
     }
     default: {
     }
     }
     $9 = ((($$043)) + 1|0);
     $$043 = $9;
    }
    L16: while(1) {
     $10 = (_pat_next($$042,-1,$3,$2)|0);
     switch ($10|0) {
     case 0: case 47:  {
      break L16;
      break;
     }
     default: {
     }
     }
     $11 = HEAP32[$3>>2]|0;
     $12 = (($$042) + ($11)|0);
     $$042 = $12;
    }
    $13 = HEAP8[$$043>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = ($10|0)!=($14|0);
    $16 = ($13<<24>>24)==(0);
    $or$cond = $7 | $16;
    $or$cond53 = $15 & $or$cond;
    if ($or$cond53) {
     $$0 = 1;
     break L1;
    }
    $17 = ($10|0)==(0);
    $18 = $$042;
    $19 = $$044;
    $20 = (($18) - ($19))|0;
    $21 = $$043;
    $22 = $$045;
    $23 = (($21) - ($22))|0;
    $24 = (_fnmatch_internal($$044,$20,$$045,$23,$2)|0);
    $25 = ($24|0)!=(0);
    $brmerge = $17 | $25;
    $$mux = $25&1;
    if ($brmerge) {
     $$0 = $$mux;
     break L1;
    }
    $26 = ((($$043)) + 1|0);
    $27 = HEAP32[$3>>2]|0;
    $28 = (($$042) + ($27)|0);
    $$044 = $28;$$045 = $26;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _pat_next($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$$090 = 0, $$0 = 0, $$089 = 0, $$090 = 0, $$094 = 0, $$1 = 0, $$101 = 0, $$102 = 0, $$191$ph = 0, $$191109 = 0, $$2 = 0, $$292$lcssa = 0, $$292$ph = 0, $$292104 = 0, $$3 = 0, $$4 = 0, $$97 = 0, $$pre = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $or$cond96 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($1|0)==(0);
 L1: do {
  if ($5) {
   label = 3;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 3;
   } else {
    HEAP32[$2>>2] = 1;
    $8 = HEAP8[$0>>0]|0;
    switch ($8<<24>>24) {
    case 42:  {
     $$2 = -5;
     break L1;
     break;
    }
    case 92:  {
     $9 = ((($0)) + 1|0);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)!=(0);
     $12 = $3 & 2;
     $13 = ($12|0)==(0);
     $or$cond = $13 & $11;
     if ($or$cond) {
      HEAP32[$2>>2] = 2;
      $$pre = HEAP8[$9>>0]|0;
      $$089 = $9;$$094 = 1;$60 = $$pre;
      label = 30;
     } else {
      $66 = 92;
     }
     break;
    }
    case 91:  {
     $14 = ($1>>>0)>(1);
     L8: do {
      if ($14) {
       $15 = ((($0)) + 1|0);
       $16 = HEAP8[$15>>0]|0;
       switch ($16<<24>>24) {
       case 33: case 94:  {
        break;
       }
       default: {
        $$090 = 1;
        break L8;
       }
       }
       $$090 = 2;
      } else {
       $$090 = 1;
      }
     } while(0);
     $17 = ($$090>>>0)<($1>>>0);
     if ($17) {
      $18 = (($0) + ($$090)|0);
      $19 = HEAP8[$18>>0]|0;
      $20 = ($19<<24>>24)==(93);
      $21 = $20&1;
      $$$090 = (($$090) + ($21))|0;
      $$191$ph = $$$090;
     } else {
      $$191$ph = $$090;
     }
     $22 = ($$191$ph>>>0)<($1>>>0);
     L15: do {
      if ($22) {
       $$191109 = $$191$ph;
       while(1) {
        $23 = (($0) + ($$191109)|0);
        $24 = HEAP8[$23>>0]|0;
        switch ($24<<24>>24) {
        case 93: case 0:  {
         $$4 = $$191109;
         label = 26;
         break L15;
         break;
        }
        default: {
        }
        }
        $25 = (($$191109) + 1)|0;
        $26 = ($25>>>0)<($1>>>0);
        L19: do {
         if ($26) {
          $27 = (($0) + ($25)|0);
          $28 = HEAP8[$27>>0]|0;
          $29 = ($28<<24>>24)!=(0);
          $30 = ($24<<24>>24)==(91);
          $or$cond96 = $30 & $29;
          if ($or$cond96) {
           switch ($28<<24>>24) {
           case 61: case 46: case 58:  {
            break;
           }
           default: {
            $$3 = $$191109;
            break L19;
           }
           }
           $31 = (($$191109) + 2)|0;
           $32 = ($31>>>0)<($1>>>0);
           if ($32) {
            $33 = (($$191109) + 3)|0;
            $34 = (($0) + ($31)|0);
            $35 = HEAP8[$34>>0]|0;
            $36 = ($35<<24>>24)==(0);
            $$ = $36 ? $31 : $33;
            $$292$ph = $$;
           } else {
            $$292$ph = $31;
           }
           $37 = ($$292$ph>>>0)<($1>>>0);
           L26: do {
            if ($37) {
             $$292104 = $$292$ph;
             while(1) {
              $38 = (($0) + ($$292104)|0);
              $39 = HEAP8[$38>>0]|0;
              $40 = ($39<<24>>24)==(0);
              if ($40) {
               $$292$lcssa = $$292104;
               break L26;
              }
              $41 = (($$292104) + -1)|0;
              $42 = (($0) + ($41)|0);
              $43 = HEAP8[$42>>0]|0;
              $44 = ($43<<24>>24)!=($28<<24>>24);
              $45 = ($39<<24>>24)!=(93);
              $$97 = $45 | $44;
              if (!($$97)) {
               $$292$lcssa = $$292104;
               break L26;
              }
              $46 = (($$292104) + 1)|0;
              $47 = ($46>>>0)<($1>>>0);
              if ($47) {
               $$292104 = $46;
              } else {
               $$292$lcssa = $46;
               break;
              }
             }
            } else {
             $$292$lcssa = $$292$ph;
            }
           } while(0);
           $48 = ($$292$lcssa|0)==($1|0);
           if ($48) {
            $$0 = 91;$storemerge = 1;
            break L15;
           }
           $49 = (($0) + ($$292$lcssa)|0);
           $50 = HEAP8[$49>>0]|0;
           $51 = ($50<<24>>24)==(0);
           if ($51) {
            $$4 = $$292$lcssa;
            label = 26;
            break L15;
           } else {
            $$3 = $$292$lcssa;
           }
          } else {
           $$3 = $$191109;
          }
         } else {
          $$3 = $$191109;
         }
        } while(0);
        $52 = (($$3) + 1)|0;
        $53 = ($52>>>0)<($1>>>0);
        if ($53) {
         $$191109 = $52;
        } else {
         $$4 = $52;
         label = 26;
         break L15;
        }
       }
      } else {
       $$4 = $$191$ph;
       label = 26;
      }
     } while(0);
     if ((label|0) == 26) {
      $54 = ($$4|0)==($1|0);
      if ($54) {
       $$0 = 91;$storemerge = 1;
      } else {
       $55 = (($$4) + 1)|0;
       $56 = (($0) + ($$4)|0);
       $57 = HEAP8[$56>>0]|0;
       $58 = ($57<<24>>24)==(0);
       $$101 = $58 ? 1 : $55;
       $$102 = $58 ? 91 : -3;
       $$0 = $$102;$storemerge = $$101;
      }
     }
     HEAP32[$2>>2] = $storemerge;
     $$2 = $$0;
     break L1;
     break;
    }
    case 63:  {
     $$2 = -4;
     break L1;
     break;
    }
    default: {
     $$089 = $0;$$094 = 0;$60 = $8;
     label = 30;
    }
    }
    if ((label|0) == 30) {
     $59 = ($60<<24>>24)<(0);
     if ($59) {
      $61 = (_mbtowc($4,$$089,$1)|0);
      $62 = ($61|0)<(0);
      if ($62) {
       HEAP32[$2>>2] = 0;
       $$1 = -2;
      } else {
       $63 = (($61) + ($$094))|0;
       HEAP32[$2>>2] = $63;
       $64 = HEAP32[$4>>2]|0;
       $$1 = $64;
      }
      $$2 = $$1;
      break;
     } else {
      $66 = $60;
     }
    }
    $65 = $66 << 24 >> 24;
    $$2 = $65;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  HEAP32[$2>>2] = 0;
  $$2 = 0;
 }
 STACKTOP = sp;return ($$2|0);
}
function _fnmatch_internal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$0141 = 0, $$0142$lcssa = 0, $$0142208 = 0, $$0145$lcssa$idx = 0, $$0145$lcssa$ptr = 0, $$0145215$idx = 0, $$0147214$add = 0, $$0147214$add223 = 0, $$0147214$idx = 0, $$0147214$ptr = 0, $$0150 = 0, $$0153 = 0, $$0154 = 0, $$0158 = 0, $$0216 = 0, $$1 = 0, $$1143 = 0, $$1146$idx = 0, $$1151$ph204 = 0;
 var $$1155$ph203 = 0, $$1155202$be = 0, $$1155202309 = 0, $$2144 = 0, $$2156$pn = 0, $$2209 = 0, $$3157 = 0, $$3205 = 0, $$4$lcssa = 0, $$4198 = 0, $$add = 0, $$lcssa = 0, $$lcssa181 = 0, $$lcssa184 = 0, $$ptr$ptr = 0, $$ptr222 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $or$cond159 = 0, $or$cond160 = 0, $or$cond161 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp + 4|0;
 $6 = sp;
 $7 = $4 & 4;
 $8 = ($7|0)==(0);
 if ($8) {
  label = 4;
 } else {
  $9 = HEAP8[$2>>0]|0;
  $10 = ($9<<24>>24)==(46);
  if ($10) {
   $11 = HEAP8[$0>>0]|0;
   $12 = ($11<<24>>24)==(46);
   if ($12) {
    label = 4;
   } else {
    $$0141 = 1;
   }
  } else {
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $13 = $4 & 16;
   $14 = ($13|0)==(0);
   $$0150 = $0;$$0153 = $3;$$0154 = $2;$$0158 = $1;
   L6: while(1) {
    $15 = (_pat_next($$0150,$$0158,$5,$4)|0);
    switch ($15|0) {
    case -2:  {
     $$0141 = 1;
     break L4;
     break;
    }
    case -5:  {
     break L6;
     break;
    }
    default: {
    }
    }
    $20 = (_str_next($$0154,$$0153,$6)|0);
    $21 = ($20|0)<(1);
    if ($21) {
     label = 9;
     break;
    }
    $24 = HEAP32[$6>>2]|0;
    $25 = (($$0154) + ($24)|0);
    $26 = (($$0153) - ($24))|0;
    if ($14) {
     $28 = $20;
    } else {
     $27 = (_casefold($20)|0);
     $28 = $27;
    }
    switch ($15|0) {
    case -3:  {
     $29 = (_match_bracket($$0150,$20,$28)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      $$0141 = 1;
      break L4;
     }
     break;
    }
    case -4:  {
     break;
    }
    default: {
     $31 = ($20|0)==($15|0);
     $32 = ($28|0)==($15|0);
     $or$cond = $31 | $32;
     if (!($or$cond)) {
      $$0141 = 1;
      break L4;
     }
    }
    }
    $33 = HEAP32[$5>>2]|0;
    $34 = (($$0150) + ($33)|0);
    $35 = (($$0158) - ($33))|0;
    $$0150 = $34;$$0153 = $26;$$0154 = $25;$$0158 = $35;
   }
   if ((label|0) == 9) {
    $22 = ($15|0)!=(0);
    $23 = $22&1;
    $$0141 = $23;
    break;
   }
   $$ptr$ptr = ((($$0150)) + 1|0);
   $16 = (($$0158) + -1)|0;
   $17 = (_strnlen($$ptr$ptr,$16)|0);
   $$add = (($17) + 1)|0;
   $$ptr222 = (($$0150) + ($$add)|0);
   $18 = ($17|0)>(0);
   L20: do {
    if ($18) {
     $19 = $$ptr222;
     $$0145215$idx = 1;$$0147214$idx = 1;$$0216 = 0;
     while(1) {
      $$0147214$ptr = (($$0150) + ($$0147214$idx)|0);
      $36 = $$0147214$ptr;
      $37 = (($19) - ($36))|0;
      $38 = (_pat_next($$0147214$ptr,$37,$5,$4)|0);
      switch ($38|0) {
      case -2:  {
       $$0141 = 1;
       break L4;
       break;
      }
      case -5:  {
       $$0147214$add = (($$0147214$idx) + 1)|0;
       $$1 = 0;$$1146$idx = $$0147214$add;
       break;
      }
      default: {
       $39 = (($$0216) + 1)|0;
       $$1 = $39;$$1146$idx = $$0145215$idx;
      }
      }
      $40 = HEAP32[$5>>2]|0;
      $$0147214$add223 = (($$0147214$idx) + ($40))|0;
      $41 = ($$0147214$add223|0)>($17|0);
      if ($41) {
       $$0$lcssa = $$1;$$0145$lcssa$idx = $$1146$idx;
       break L20;
      } else {
       $$0145215$idx = $$1146$idx;$$0147214$idx = $$0147214$add223;$$0216 = $$1;
      }
     }
    } else {
     $$0$lcssa = 0;$$0145$lcssa$idx = 1;
    }
   } while(0);
   $$0145$lcssa$ptr = (($$0150) + ($$0145$lcssa$idx)|0);
   $42 = (_strnlen($$0154,$$0153)|0);
   $43 = (($$0154) + ($42)|0);
   $44 = ($42>>>0)<($$0$lcssa>>>0);
   if ($44) {
    $$0141 = 1;
   } else {
    $45 = ($42|0)>(0);
    $46 = ($$0$lcssa|0)!=(0);
    $47 = $45 & $46;
    if ($47) {
     $$0142208 = $43;$$2209 = $$0$lcssa;
     while(1) {
      $48 = ((($$0142208)) + -1|0);
      $49 = HEAP8[$48>>0]|0;
      $50 = ($49<<24>>24)>(-1);
      if ($50) {
       $$2144 = $48;
      } else {
       $51 = (___pthread_self_516()|0);
       $52 = ((($51)) + 188|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = HEAP32[$53>>2]|0;
       $55 = ($54|0)==(0|0);
       if ($55) {
        $$2144 = $48;
       } else {
        $$1143 = $$0142208;
        while(1) {
         $56 = ((($$1143)) + -1|0);
         $57 = HEAP8[$56>>0]|0;
         $58 = $57 & -64;
         $59 = ($58<<24>>24)==(-128);
         $60 = ($56>>>0)>($$0154>>>0);
         $or$cond159 = $60 & $59;
         if ($or$cond159) {
          $$1143 = $56;
         } else {
          $$2144 = $56;
          break;
         }
        }
       }
      }
      $61 = (($$2209) + -1)|0;
      $62 = ($$2144>>>0)>($$0154>>>0);
      $63 = ($61|0)!=(0);
      $64 = $62 & $63;
      if ($64) {
       $$0142208 = $$2144;$$2209 = $61;
      } else {
       $$0142$lcssa = $$2144;$$lcssa184 = $63;
       break;
      }
     }
    } else {
     $$0142$lcssa = $43;$$lcssa184 = $46;
    }
    if ($$lcssa184) {
     $$0141 = 1;
    } else {
     $65 = $$ptr222;
     $66 = $$0145$lcssa$ptr;
     $67 = (($65) - ($66))|0;
     $68 = (_pat_next($$0145$lcssa$ptr,$67,$5,$4)|0);
     $69 = HEAP32[$5>>2]|0;
     $70 = $43;
     $71 = $$0142$lcssa;
     $72 = (($70) - ($71))|0;
     $73 = (_str_next($$0142$lcssa,$72,$6)|0);
     $74 = ($73|0)<(1);
     L40: do {
      if ($74) {
       $$lcssa181 = $68;
      } else {
       $75 = (($$0145$lcssa$ptr) + ($69)|0);
       $$3205 = $$0142$lcssa;$80 = $73;$82 = $68;$84 = $69;$86 = $75;
       while(1) {
        $78 = HEAP32[$6>>2]|0;
        $79 = (($$3205) + ($78)|0);
        if ($14) {
         $87 = $80;
        } else {
         $81 = (_casefold($80)|0);
         $87 = $81;
        }
        switch ($82|0) {
        case -3:  {
         $83 = (0 - ($84))|0;
         $85 = (($86) + ($83)|0);
         $88 = (_match_bracket($85,$80,$87)|0);
         $89 = ($88|0)==(0);
         if ($89) {
          $$0141 = 1;
          break L4;
         }
         break;
        }
        case -4:  {
         break;
        }
        default: {
         $90 = ($80|0)==($82|0);
         $91 = ($87|0)==($82|0);
         $or$cond160 = $90 | $91;
         if (!($or$cond160)) {
          $$0141 = 1;
          break L4;
         }
        }
        }
        $92 = $86;
        $93 = (($65) - ($92))|0;
        $94 = (_pat_next($86,$93,$5,$4)|0);
        $95 = HEAP32[$5>>2]|0;
        $96 = (($86) + ($95)|0);
        $97 = $79;
        $98 = (($70) - ($97))|0;
        $99 = (_str_next($79,$98,$6)|0);
        $100 = ($99|0)<(1);
        if ($100) {
         $$lcssa181 = $94;
         break L40;
        } else {
         $$3205 = $79;$80 = $99;$82 = $94;$84 = $95;$86 = $96;
        }
       }
      }
     } while(0);
     $76 = ($$lcssa181|0)==(0);
     if ($76) {
      $77 = ($$0145$lcssa$idx|0)>(1);
      if ($77) {
       $$1151$ph204 = $$ptr$ptr;$$1155$ph203 = $$0154;
       while(1) {
        $102 = $$1151$ph204;
        $103 = (($66) - ($102))|0;
        $104 = (_pat_next($$1151$ph204,$103,$5,$4)|0);
        $105 = HEAP32[$5>>2]|0;
        $106 = (($$1151$ph204) + ($105)|0);
        $107 = ($104|0)==(-5);
        L55: do {
         if ($107) {
          $$4$lcssa = $$1155$ph203;$$lcssa = $106;
         } else {
          $$1155202309 = $$1155$ph203;$145 = $106;$146 = $105;$147 = $104;
          while(1) {
           $$4198 = $$1155202309;$113 = $147;$115 = $146;$117 = $145;
           L58: while(1) {
            $108 = $$4198;
            $109 = (($71) - ($108))|0;
            $110 = (_str_next($$4198,$109,$6)|0);
            $111 = ($110|0)==(0);
            if ($111) {
             $$0141 = 1;
             break L4;
            }
            if ($14) {
             $118 = $110;
            } else {
             $112 = (_casefold($110)|0);
             $118 = $112;
            }
            switch ($113|0) {
            case -3:  {
             $114 = (0 - ($115))|0;
             $116 = (($117) + ($114)|0);
             $119 = (_match_bracket($116,$110,$118)|0);
             $120 = ($119|0)==(0);
             if ($120) {
              break L58;
             }
             break;
            }
            case -4:  {
             break;
            }
            default: {
             $121 = ($110|0)==($113|0);
             $122 = ($118|0)==($113|0);
             $or$cond161 = $121 | $122;
             if (!($or$cond161)) {
              break L58;
             }
            }
            }
            $123 = HEAP32[$6>>2]|0;
            $124 = (($$4198) + ($123)|0);
            $125 = $117;
            $126 = (($66) - ($125))|0;
            $127 = (_pat_next($117,$126,$5,$4)|0);
            $128 = HEAP32[$5>>2]|0;
            $129 = (($117) + ($128)|0);
            $130 = ($127|0)==(-5);
            if ($130) {
             $$4$lcssa = $124;$$lcssa = $129;
             break L55;
            } else {
             $$4198 = $124;$113 = $127;$115 = $128;$117 = $129;
            }
           }
           $131 = $$1155202309;
           $132 = (($71) - ($131))|0;
           $133 = (_str_next($$1155202309,$132,$6)|0);
           $134 = ($133|0)>(0);
           if ($134) {
            $135 = HEAP32[$6>>2]|0;
            $136 = (($$1155202309) + ($135)|0);
            $$1155202$be = $136;
           } else {
            $$2156$pn = $$1155202309;
            while(1) {
             $$3157 = ((($$2156$pn)) + 1|0);
             $141 = $$3157;
             $142 = (($71) - ($141))|0;
             $143 = (_str_next($$3157,$142,$6)|0);
             $144 = ($143|0)<(0);
             if ($144) {
              $$2156$pn = $$3157;
             } else {
              $$1155202$be = $$3157;
              break;
             }
            }
           }
           $137 = (_pat_next($$1151$ph204,$103,$5,$4)|0);
           $138 = HEAP32[$5>>2]|0;
           $139 = (($$1151$ph204) + ($138)|0);
           $140 = ($137|0)==(-5);
           if ($140) {
            $$4$lcssa = $$1155202$be;$$lcssa = $139;
            break;
           } else {
            $$1155202309 = $$1155202$be;$145 = $139;$146 = $138;$147 = $137;
           }
          }
         }
        } while(0);
        $101 = ($$lcssa>>>0)<($$0145$lcssa$ptr>>>0);
        if ($101) {
         $$1151$ph204 = $$lcssa;$$1155$ph203 = $$4$lcssa;
        } else {
         $$0141 = 0;
         break;
        }
       }
      } else {
       $$0141 = 0;
      }
     } else {
      $$0141 = 1;
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0141|0);
}
function _str_next($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1|0)==(0);
 do {
  if ($4) {
   HEAP32[$2>>2] = 0;
   $$1 = 0;
  } else {
   $5 = HEAP8[$0>>0]|0;
   $6 = ($5<<24>>24)<(0);
   if (!($6)) {
    HEAP32[$2>>2] = 1;
    $10 = HEAP8[$0>>0]|0;
    $11 = $10 << 24 >> 24;
    $$1 = $11;
    break;
   }
   $7 = (_mbtowc($3,$0,$1)|0);
   $8 = ($7|0)<(0);
   if ($8) {
    HEAP32[$2>>2] = 1;
    $$0 = -1;
   } else {
    HEAP32[$2>>2] = $7;
    $9 = HEAP32[$3>>2]|0;
    $$0 = $9;
   }
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function _casefold($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_towupper($0)|0);
 $2 = ($1|0)==($0|0);
 if ($2) {
  $3 = (_towlower($0)|0);
  $4 = $3;
 } else {
  $4 = $1;
 }
 return ($4|0);
}
function _match_bracket($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$072 = 0, $$080 = 0, $$1$ph = 0, $$173 = 0, $$274 = 0, $$476 = 0, $$678 = 0, $$779 = 0, $$8 = 0, $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond86 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 4|0;
 $4 = sp;
 $5 = sp + 8|0;
 $6 = ((($0)) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 switch ($7<<24>>24) {
 case 33: case 94:  {
  $8 = ((($0)) + 2|0);
  $$pr = HEAP8[$8>>0]|0;
  $$072 = $8;$$080 = 1;$9 = $$pr;
  break;
 }
 default: {
  $$072 = $6;$$080 = 0;$9 = $7;
 }
 }
 L4: do {
  switch ($9<<24>>24) {
  case 93:  {
   $10 = ($1|0)==(93);
   if ($10) {
    $11 = $$080 ^ 1;
    $$8 = $11;
    break L4;
   } else {
    $12 = ((($$072)) + 1|0);
    $$173 = $12;
    label = 10;
    break L4;
   }
   break;
  }
  case 45:  {
   $13 = ($1|0)==(45);
   if ($13) {
    $14 = $$080 ^ 1;
    $$8 = $14;
    break L4;
   } else {
    $15 = ((($$072)) + 1|0);
    $$173 = $15;
    label = 10;
    break L4;
   }
   break;
  }
  default: {
   $$173 = $$072;
   label = 10;
  }
  }
 } while(0);
 L13: do {
  if ((label|0) == 10) {
   $16 = ((($$173)) + -1|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17 << 24 >> 24;
   HEAP32[$3>>2] = $18;
   $$274 = $$173;
   L15: while(1) {
    $19 = HEAP8[$$274>>0]|0;
    L17: do {
     switch ($19<<24>>24) {
     case 93:  {
      $$8 = $$080;
      break L13;
      break;
     }
     case 45:  {
      $20 = ((($$274)) + 1|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(93);
      if ($22) {
       label = 31;
      } else {
       $23 = (_mbtowc($4,$20,4)|0);
       $24 = ($23|0)<(0);
       if ($24) {
        $$1$ph = 0;
        break L15;
       }
       $25 = HEAP32[$3>>2]|0;
       $26 = HEAP32[$4>>2]|0;
       $27 = ($26|0)<($25|0);
       if (!($27)) {
        $28 = (($1) - ($25))|0;
        $29 = (($26) - ($25))|0;
        $30 = ($28>>>0)>($29>>>0);
        $31 = (($2) - ($25))|0;
        $32 = ($31>>>0)>($29>>>0);
        $or$cond = $30 & $32;
        if (!($or$cond)) {
         label = 16;
         break L15;
        }
       }
       $34 = (($23) + -1)|0;
       $35 = (($$274) + ($34)|0);
       $$779 = $35;
      }
      break;
     }
     case 91:  {
      $36 = ((($$274)) + 1|0);
      $37 = HEAP8[$36>>0]|0;
      switch ($37<<24>>24) {
      case 61: case 46: case 58:  {
       break;
      }
      default: {
       label = 31;
       break L17;
      }
      }
      $38 = ((($$274)) + 3|0);
      $$476 = $38;
      while(1) {
       $39 = ((($$476)) + -1|0);
       $40 = HEAP8[$39>>0]|0;
       $41 = ($40<<24>>24)==($37<<24>>24);
       if ($41) {
        $42 = HEAP8[$$476>>0]|0;
        $43 = ($42<<24>>24)==(93);
        if ($43) {
         break;
        }
       }
       $44 = ((($$476)) + 1|0);
       $$476 = $44;
      }
      $45 = ((($$274)) + 2|0);
      $46 = ($37<<24>>24)==(58);
      if ($46) {
       $47 = $39;
       $48 = $45;
       $49 = (($47) - ($48))|0;
       $50 = ($49|0)<(16);
       if ($50) {
        _memcpy(($5|0),($45|0),($49|0))|0;
        $51 = (($5) + ($49)|0);
        HEAP8[$51>>0] = 0;
        $52 = (_wctype($5)|0);
        $53 = (_iswctype($1,$52)|0);
        $54 = ($53|0)==(0);
        if (!($54)) {
         label = 29;
         break L15;
        }
        $55 = (_wctype($5)|0);
        $56 = (_iswctype($2,$55)|0);
        $57 = ($56|0)==(0);
        if (!($57)) {
         label = 29;
         break L15;
        }
        $$779 = $$476;
       } else {
        $$779 = $$476;
       }
      } else {
       $$779 = $$476;
      }
      break;
     }
     default: {
      $59 = ($19<<24>>24)>(-1);
      if ($59) {
       label = 31;
      } else {
       $61 = (_mbtowc($3,$$274,4)|0);
       $62 = ($61|0)<(0);
       if ($62) {
        $$8 = 0;
        break L13;
       }
       $63 = (($61) + -1)|0;
       $64 = (($$274) + ($63)|0);
       $$pre = HEAP32[$3>>2]|0;
       $$678 = $64;$66 = $$pre;
       label = 34;
      }
     }
     }
    } while(0);
    if ((label|0) == 31) {
     label = 0;
     $60 = $19&255;
     HEAP32[$3>>2] = $60;
     $$678 = $$274;$66 = $60;
     label = 34;
    }
    if ((label|0) == 34) {
     label = 0;
     $65 = ($66|0)==($1|0);
     $67 = ($66|0)==($2|0);
     $or$cond86 = $65 | $67;
     if ($or$cond86) {
      label = 35;
      break;
     } else {
      $$779 = $$678;
     }
    }
    $69 = ((($$779)) + 1|0);
    $$274 = $69;
   }
   if ((label|0) == 16) {
    $33 = $$080 ^ 1;
    $$1$ph = $33;
   }
   else if ((label|0) == 29) {
    $58 = $$080 ^ 1;
    $$8 = $58;
    break;
   }
   else if ((label|0) == 35) {
    $68 = $$080 ^ 1;
    $$8 = $68;
    break;
   }
   $$8 = $$1$ph;
  }
 } while(0);
 STACKTOP = sp;return ($$8|0);
}
function ___pthread_self_516() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _glob($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$07687108109 = 0, $$07687108110 = 0, $$08195 = 0, $$083 = 0, $$08499 = 0, $$1 = 0, $$178 = 0, $$18091 = 0, $$182 = 0, $$185 = 0, $$cast = 0, $$in = 0, $$pr = 0, $$pre = 0, $$pre$phi107111Z2D = 0, $$pre$phi107112Z2D = 0, $$pre102 = 0, $$sink94 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $ignore_err$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = sp + 8|0;
 $6 = $4;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 HEAP32[$5>>2] = $4;
 $10 = $1 & 8;
 $11 = ($10|0)==(0);
 if ($11) {
  $24 = 0;
 } else {
  $12 = ((($3)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $24 = $13;
 }
 $14 = HEAP8[$0>>0]|0;
 $15 = ($14<<24>>24)==(47);
 if ($15) {
  $$08499 = $0;
  while(1) {
   $16 = ((($$08499)) + 1|0);
   $$pr = HEAP8[$16>>0]|0;
   $17 = ($$pr<<24>>24)==(47);
   if ($17) {
    $$08499 = $16;
   } else {
    $$083 = 183224;$$185 = $16;$76 = $$pr;
    break;
   }
  }
 } else {
  $$083 = 189597;$$185 = $0;$76 = $14;
 }
 $18 = (_strlen($$185)|0);
 $19 = ($18>>>0)>(4096);
 L8: do {
  if ($19) {
   $$1 = 1;
  } else {
   $20 = ($2|0)==(0|0);
   $ignore_err$ = $20 ? 21 : $2;
   $21 = $1 & 32;
   $22 = ($21|0)!=(0);
   if ($22) {
    $27 = $76;
   } else {
    $23 = ((($3)) + 8|0);
    HEAP32[$23>>2] = $24;
    HEAP32[$3>>2] = 0;
    $25 = ((($3)) + 4|0);
    HEAP32[$25>>2] = 0;
    $$pre = HEAP8[$$185>>0]|0;
    $27 = $$pre;
   }
   $26 = ($27<<24>>24)==(0);
   if ($26) {
    HEAP32[$5>>2] = 0;
    $$07687108110 = 0;$$pre$phi107112Z2D = $4;$77 = $5;
    label = 15;
   } else {
    $28 = (_match_in_dir($$083,$$185,$1,$ignore_err$,$5)|0);
    $29 = ($28|0)==(1);
    if ($29) {
     _freelist($4);
     $$1 = 1;
     break;
    }
    $$pre102 = HEAP32[$4>>2]|0;
    HEAP32[$5>>2] = $$pre102;
    $30 = ($$pre102|0)==(0);
    if ($30) {
     $$07687108110 = $28;$$pre$phi107112Z2D = $4;$77 = $5;
     label = 15;
    } else {
     $$08195 = 0;$$sink94 = $$pre102;
     while(1) {
      $31 = $$sink94;
      $32 = HEAP32[$31>>2]|0;
      HEAP32[$5>>2] = $32;
      $33 = (($$08195) + 1)|0;
      $34 = ($32|0)==(0);
      if ($34) {
       break;
      } else {
       $$08195 = $33;$$sink94 = $32;
      }
     }
     $35 = ($33|0)==(0);
     if ($35) {
      $$07687108110 = $28;$$pre$phi107112Z2D = $4;$77 = $5;
      label = 15;
     } else {
      $$07687108109 = $28;$$182 = $33;$$pre$phi107111Z2D = $4;$60 = $5;
     }
    }
   }
   if ((label|0) == 15) {
    $36 = $1 & 16;
    $37 = ($36|0)==(0);
    if ($37) {
     $$1 = 3;
     break;
    }
    HEAP32[$5>>2] = $4;
    $38 = (_strlen($0)|0);
    $39 = (_append($5,$0,$38,0)|0);
    $40 = ($39|0)==(0);
    if ($40) {
     $$07687108109 = $$07687108110;$$182 = 1;$$pre$phi107111Z2D = $$pre$phi107112Z2D;$60 = $77;
    } else {
     $$1 = 1;
     break;
    }
   }
   do {
    if ($22) {
     $41 = ((($3)) + 4|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = HEAP32[$3>>2]|0;
     $44 = (($$182) + ($24))|0;
     $45 = (($44) + ($43))|0;
     $46 = $45 << 2;
     $47 = (($46) + 4)|0;
     $48 = (_realloc($42,$47)|0);
     $49 = ($48|0)==(0|0);
     if ($49) {
      _freelist($4);
      $$1 = 1;
      break L8;
     } else {
      HEAP32[$41>>2] = $48;
      $50 = (($43) + ($24))|0;
      $$178 = $50;$65 = $48;
      break;
     }
    } else {
     $51 = (($$182) + ($24))|0;
     $52 = $51 << 2;
     $53 = (($52) + 4)|0;
     $54 = (_malloc($53)|0);
     $55 = ((($3)) + 4|0);
     HEAP32[$55>>2] = $54;
     $56 = ($54|0)==(0|0);
     if ($56) {
      _freelist($4);
      $$1 = 1;
      break L8;
     }
     $57 = ($24|0)==(0);
     if ($57) {
      $$178 = 0;$65 = $54;
     } else {
      $58 = $24 << 2;
      _memset(($54|0),0,($58|0))|0;
      $$178 = $24;$65 = $54;
     }
    }
   } while(0);
   $59 = HEAP32[$$pre$phi107111Z2D>>2]|0;
   HEAP32[$60>>2] = $59;
   $$18091 = 0;$$in = $59;
   while(1) {
    $61 = $$in;
    $62 = ((($61)) + 4|0);
    $63 = (($$18091) + ($$178))|0;
    $64 = (($65) + ($63<<2)|0);
    HEAP32[$64>>2] = $62;
    $$cast = $$in;
    $66 = HEAP32[$$cast>>2]|0;
    HEAP32[$60>>2] = $66;
    $67 = (($$18091) + 1)|0;
    $68 = ($67>>>0)<($$182>>>0);
    if ($68) {
     $$18091 = $67;$$in = $66;
    } else {
     break;
    }
   }
   $69 = (($$182) + ($$178))|0;
   $70 = (($65) + ($69<<2)|0);
   HEAP32[$70>>2] = 0;
   $71 = HEAP32[$3>>2]|0;
   $72 = (($71) + ($$182))|0;
   HEAP32[$3>>2] = $72;
   $73 = $1 & 4;
   $74 = ($73|0)==(0);
   if ($74) {
    $75 = (($65) + ($$178<<2)|0);
    _qsort($75,$$182,4,22);
    $$1 = $$07687108109;
   } else {
    $$1 = $$07687108109;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function _ignore_err($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _match_in_dir($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$0$shrunk = 0, $$0100 = 0, $$0102 = 0, $$094 = 0, $$099 = 0, $$103 = 0, $$107 = 0, $$1101 = 0, $$4 = 0, $$5 = 0, $$alloca_mul = 0, $$alloca_mul5 = 0, $$lcssa = 0, $$lcssa115 = 0, $$lobit = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $not$ = 0, $not$121 = 0, $switch$split2D = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(432|0);
 $5 = sp + 156|0;
 $6 = sp + 152|0;
 $7 = sp + 76|0;
 $8 = sp;
 $9 = (_strlen($1)|0);
 $10 = (($9) + 1)|0;
 $11 = (_llvm_stacksave()|0);
 $$alloca_mul = $10;
 $12 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $13 = (_strlen($0)|0);
 $14 = $2 & 64;
 $15 = $14 >>> 5;
 $16 = $2 >>> 5;
 $17 = $16 & 4;
 $18 = $17 | $15;
 $19 = $18 ^ 4;
 $20 = (_strchr($1,47)|0);
 $21 = ($20|0)==(0|0);
 if ($21) {
  $$099 = $1;$$1101 = 0;
 } else {
  (_strcpy($12,$1)|0);
  $22 = $20;
  $23 = $1;
  $24 = (($22) - ($23))|0;
  $25 = (($12) + ($24)|0);
  HEAP8[$25>>0] = 0;
  $$0100 = $20;
  while(1) {
   $26 = HEAP8[$$0100>>0]|0;
   $27 = ($26<<24>>24)==(47);
   $28 = ((($$0100)) + 1|0);
   if ($27) {
    $$0100 = $28;
   } else {
    $$099 = $12;$$1101 = $$0100;
    break;
   }
  }
 }
 $$lobit = $14 >>> 6;
 $29 = $$lobit ^ 1;
 $30 = (_is_literal($$099,$29)|0);
 $31 = HEAP8[$0>>0]|0;
 $32 = ($31<<24>>24)==(47);
 if ($32) {
  $33 = ((($0)) + 1|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = ($34<<24>>24)==(0);
  $$ = $35 ? 0 : $13;
  $$0102 = $$;
 } else {
  $$0102 = $13;
 }
 $36 = ($31<<24>>24)!=(0);
 $37 = $36 ? $0 : 184252;
 $38 = (_opendir($37)|0);
 $39 = (___errno_location()|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($38|0)==(0|0);
 L9: do {
  if ($41) {
   switch ($40|0) {
   case 20:  {
    $$5 = 0;
    break L9;
    break;
   }
   case 13:  {
    $42 = HEAP8[$$099>>0]|0;
    $43 = ($42<<24>>24)==(0);
    if ($43) {
     $44 = (_stat($0,$7)|0);
     $45 = ($44|0)==(0);
     if ($45) {
      $46 = ((($7)) + 12|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = $47 & 61440;
      $49 = ($48|0)==(16384);
      if ($49) {
       $50 = (_append($4,$0,$$0102,$$0102)|0);
       $51 = ($50|0)!=(0);
       $$103 = $51&1;
       $$5 = $$103;
       break L9;
      }
     }
    }
    break;
   }
   default: {
   }
   }
   $52 = (FUNCTION_TABLE_iii[$3 & 31]($0,$40)|0);
   $53 = $2 & 1;
   $54 = $52 | $53;
   $55 = ($54|0)==(0);
   $$107 = $55 ? 0 : 2;
   $$5 = $$107;
  } else {
   $56 = HEAP8[$$099>>0]|0;
   $57 = ($56<<24>>24)==(0);
   if ($57) {
    $70 = (_append($4,$0,$$0102,$$0102)|0);
    $71 = ($70|0)!=(0);
    $72 = $71&1;
    (_closedir($38)|0);
    $$5 = $72;
    break;
   }
   $58 = (_readdir_r($38,$5,$6)|0);
   $59 = ($58|0)!=(0);
   $60 = HEAP32[$6>>2]|0;
   $61 = ($60|0)!=(0|0);
   $not$121 = $59 ^ 1;
   $62 = $61 & $not$121;
   L23: do {
    if ($62) {
     $63 = (($$0102) + 2)|0;
     $64 = ($30|0)==(0);
     $65 = ($$1101|0)!=(0|0);
     $66 = $2 & 2;
     $67 = ($66|0)==(0);
     $68 = (($$0102) + 1)|0;
     $69 = ((($8)) + 12|0);
     $74 = $60;
     L25: while(1) {
      $73 = ((($74)) + 8|0);
      $75 = HEAP16[$73>>1]|0;
      $76 = $75&65535;
      $77 = (($63) + ($76))|0;
      $78 = (_llvm_stacksave()|0);
      $$alloca_mul5 = $77;
      $79 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul5)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul5)|0)+15)&-16)|0);;
      $80 = HEAP32[$6>>2]|0;
      $81 = ((($80)) + 11|0);
      if ($64) {
       $82 = (_fnmatch($$099,$81,$19)|0);
       $83 = ($82|0)==(0);
       if ($83) {
        label = 21;
       }
      } else {
       $84 = (_strcmp($$099,$81)|0);
       $85 = ($84|0)==(0);
       if ($85) {
        label = 21;
       }
      }
      L30: do {
       if ((label|0) == 21) {
        label = 0;
        L32: do {
         if ($65) {
          $86 = HEAP32[$6>>2]|0;
          $87 = ((($86)) + 10|0);
          $88 = HEAP8[$87>>0]|0;
          $89 = ($88<<24>>24)==(0);
          if (!($89)) {
           $90 = $88&255;
           $91 = $90 << 12;
           $trunc = $91&65535;
           $switch$split2D = ($trunc<<16>>16)<(16384);
           if ($switch$split2D) {
            switch ($trunc<<16>>16) {
            case -24576:  {
             break L32;
             break;
            }
            default: {
             break L30;
            }
            }
           } else {
            switch ($trunc<<16>>16) {
            case 16384:  {
             break L32;
             break;
            }
            default: {
             break L30;
            }
            }
           }
          }
         }
        } while(0);
        $92 = HEAP8[$0>>0]|0;
        $93 = ($92<<24>>24)==(0);
        if ($93) {
         $98 = HEAP32[$6>>2]|0;
         $99 = ((($98)) + 11|0);
         $$094 = $99;
        } else {
         _memcpy(($79|0),($0|0),($$0102|0))|0;
         $94 = (($79) + ($$0102)|0);
         HEAP8[$94>>0] = 47;
         $95 = ((($94)) + 1|0);
         $96 = HEAP32[$6>>2]|0;
         $97 = ((($96)) + 11|0);
         (_strcpy($95,$97)|0);
         $$094 = $79;
        }
        if ($65) {
         $100 = (_match_in_dir($$094,$$1101,$2,$3,$4)|0);
         $101 = ($100|0)==(0);
         if ($101) {
          break;
         } else {
          label = 29;
          break L25;
         }
        }
        do {
         if ($67) {
          $$0$shrunk = 0;
         } else {
          $102 = HEAP32[$6>>2]|0;
          $103 = ((($102)) + 10|0);
          $104 = HEAP8[$103>>0]|0;
          $105 = ($104<<24>>24)==(0);
          if (!($105)) {
           $106 = $104&255;
           $107 = $106 << 12;
           $108 = $107 & 61440;
           $109 = ($108|0)==(40960);
           if (!($109)) {
            $110 = ($108|0)==(16384);
            $$0$shrunk = $110;
            break;
           }
          }
          (_stat($$094,$8)|0);
          $111 = HEAP32[$69>>2]|0;
          $112 = $111 & 61440;
          $113 = ($112|0)==(16384);
          $$0$shrunk = $113;
         }
        } while(0);
        $$0 = $$0$shrunk&1;
        $114 = HEAP32[$6>>2]|0;
        $115 = ((($114)) + 8|0);
        $116 = HEAP16[$115>>1]|0;
        $117 = $116&65535;
        $118 = (($68) + ($117))|0;
        $119 = (_append($4,$$094,$118,$$0)|0);
        $120 = ($119|0)==(0);
        if (!($120)) {
         label = 36;
         break L25;
        }
       }
      } while(0);
      _llvm_stackrestore(($78|0));
      $121 = (_readdir_r($38,$5,$6)|0);
      $122 = ($121|0)!=(0);
      $123 = HEAP32[$6>>2]|0;
      $124 = ($123|0)!=(0|0);
      $not$ = $122 ^ 1;
      $125 = $124 & $not$;
      if ($125) {
       $74 = $123;
      } else {
       $$lcssa = $122;$$lcssa115 = $121;
       break L23;
      }
     }
     if ((label|0) == 29) {
      (_closedir($38)|0);
      $$4 = $100;
     }
     else if ((label|0) == 36) {
      (_closedir($38)|0);
      $$4 = 1;
     }
     _llvm_stackrestore(($78|0));
     $$5 = $$4;
     break L9;
    } else {
     $$lcssa = $59;$$lcssa115 = $58;
    }
   } while(0);
   (_closedir($38)|0);
   if ($$lcssa) {
    $126 = (FUNCTION_TABLE_iii[$3 & 31]($0,$$lcssa115)|0);
    $127 = $2 & 1;
    $128 = $126 | $127;
    $129 = ($128|0)==(0);
    if (!($129)) {
     $$5 = 2;
     break;
    }
   }
   $$5 = 0;
  }
 } while(0);
 _llvm_stackrestore(($11|0));
 STACKTOP = sp;return ($$5|0);
}
function _freelist($0) {
 $0 = $0|0;
 var $$in89 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$in89 = $1;
  while(1) {
   $3 = HEAP32[$$in89>>2]|0;
   _free($$in89);
   $4 = ($3|0)==(0|0);
   if ($4) {
    break;
   } else {
    $$in89 = $3;
   }
  }
 }
 return;
}
function _append($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endptr = 0, $strlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (($2) + 9)|0;
 $5 = (_malloc($4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = -1;
 } else {
  $7 = HEAP32[$0>>2]|0;
  HEAP32[$7>>2] = $5;
  HEAP32[$5>>2] = 0;
  $8 = ((($5)) + 4|0);
  (_strcpy($8,$1)|0);
  $9 = ($3|0)==(0);
  if (!($9)) {
   $strlen = (_strlen($8)|0);
   $endptr = (($8) + ($strlen)|0);
   HEAP8[$endptr>>0]=47&255;HEAP8[$endptr+1>>0]=47>>8;
  }
  HEAP32[$0>>2] = $5;
  $$0 = 0;
 }
 return ($$0|0);
}
function _sort($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_strcmp($2,$3)|0);
 return ($4|0);
}
function _is_literal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$06 = 0, $$078 = 0, $$09 = 0, $$1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = ($2<<24>>24)==(0);
 L1: do {
  if ($3) {
   $$06 = 1;
  } else {
   $4 = ($1|0)==(0);
   $$078 = $0;$$09 = 0;$6 = $2;
   while(1) {
    $5 = $6 << 24 >> 24;
    switch ($5|0) {
    case 42: case 63:  {
     $$06 = 0;
     break L1;
     break;
    }
    case 92:  {
     if ($4) {
      $$1 = $$09;
     } else {
      $$06 = 0;
      break L1;
     }
     break;
    }
    case 91:  {
     $$1 = 1;
     break;
    }
    case 93:  {
     $7 = ($$09|0)==(0);
     if ($7) {
      $$1 = 0;
     } else {
      $$06 = 0;
      break L1;
     }
     break;
    }
    default: {
     $$1 = $$09;
    }
    }
    $8 = ((($$078)) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(0);
    if ($10) {
     $$06 = 1;
     break L1;
    } else {
     $$078 = $8;$$09 = $$1;$6 = $9;
    }
   }
  }
 } while(0);
 return ($$06|0);
}
function _globfree($0) {
 $0 = $0|0;
 var $$010 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 if ($2) {
  $$lcssa = $4;
 } else {
  $5 = ((($0)) + 8|0);
  $$010 = 0;$9 = $4;
  while(1) {
   $6 = HEAP32[$5>>2]|0;
   $7 = (($6) + ($$010))|0;
   $8 = (($9) + ($7<<2)|0);
   $10 = HEAP32[$8>>2]|0;
   $11 = ((($10)) + -4|0);
   _free($11);
   $12 = (($$010) + 1)|0;
   $13 = HEAP32[$0>>2]|0;
   $14 = ($12>>>0)<($13>>>0);
   $15 = HEAP32[$3>>2]|0;
   if ($14) {
    $$010 = $12;$9 = $15;
   } else {
    $$lcssa = $15;
    break;
   }
  }
 }
 _free($$lcssa);
 HEAP32[$0>>2] = 0;
 HEAP32[$3>>2] = 0;
 return;
}
function _regcomp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0188 = 0, $$0190 = 0, $$0192 = 0, $$0193 = 0, $$0195 = 0, $$0196$lcssa = 0, $$0196210 = 0, $$0201 = 0, $$1191 = 0, $$1198209 = 0, $$2199 = 0, $$3 = 0, $$3200$lcssa = 0, $$3200207 = 0, $$lobit = 0, $$lobit$not = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp;
 $4 = (_tre_stack_new()|0);
 $5 = ($4|0)==(0|0);
 L1: do {
  if ($5) {
   $$0188 = 12;
  } else {
   $6 = (___tre_mem_new_impl(0,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    _tre_stack_destroy($4);
    $$0188 = 12;
    break;
   }
   $8 = ((($3)) + 8|0);
   ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;HEAP32[$8+12>>2]=0|0;HEAP32[$8+16>>2]=0|0;
   HEAP32[$3>>2] = $6;
   $9 = ((($3)) + 4|0);
   HEAP32[$9>>2] = $4;
   $10 = ((($3)) + 16|0);
   HEAP32[$10>>2] = $1;
   $11 = ((($3)) + 32|0);
   HEAP32[$11>>2] = $2;
   $12 = ((($3)) + 28|0);
   HEAP32[$12>>2] = -1;
   $13 = (_tre_parse($3)|0);
   $14 = ($13|0)==(0);
   L6: do {
    if ($14) {
     $15 = ((($3)) + 20|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($16) + -1)|0;
     HEAP32[$0>>2] = $17;
     $18 = ((($3)) + 8|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = HEAP32[$12>>2]|0;
     $21 = ($20|0)<($16|0);
     if ($21) {
      $22 = (_calloc(1,68)|0);
      $23 = ($22|0)==(0|0);
      if ($23) {
       $$0192 = $22;$$0195 = 0;$$0201 = 0;$$3 = 12;$136 = 0;$138 = 0;
      } else {
       $$lobit = $20 >>> 31;
       $$lobit$not = $$lobit ^ 1;
       $24 = ((($22)) + 60|0);
       HEAP32[$24>>2] = $$lobit$not;
       $25 = ((($22)) + 28|0);
       HEAP32[$25>>2] = $16;
       $26 = ($$lobit$not|0)!=(0);
       $27 = $2 & 8;
       $28 = ($27|0)==(0);
       $or$cond = $28 | $26;
       if ($or$cond) {
        $29 = (_tre_add_tags(0,$4,$19,$22)|0);
        $30 = ($29|0)==(0);
        if (!($30)) {
         $$0192 = $22;$$0195 = 0;$$0201 = 0;$$3 = $29;$136 = 0;$138 = 0;
         break;
        }
        $31 = ((($22)) + 40|0);
        $32 = HEAP32[$31>>2]|0;
        $33 = ($32|0)>(0);
        if ($33) {
         $34 = $32 << 2;
         $35 = (($34) + 4)|0;
         $36 = (_malloc($35)|0);
         $37 = ($36|0)==(0|0);
         if ($37) {
          $$0192 = $22;$$0195 = 0;$$0201 = 0;$$3 = 12;$136 = 0;$138 = 0;
          break;
         }
         $38 = ((($22)) + 32|0);
         HEAP32[$38>>2] = $36;
         _memset(($36|0),-1,($35|0))|0;
         $$0190 = $36;
        } else {
         $$0190 = 0;
        }
        $39 = $32 << 1;
        $40 = $39 | 1;
        $41 = (_calloc($40,4)|0);
        $42 = ((($22)) + 36|0);
        HEAP32[$42>>2] = $41;
        $43 = ($41|0)==(0|0);
        if ($43) {
         $$0192 = $22;$$0195 = 0;$$0201 = 0;$$3 = 12;$136 = 0;$138 = 0;
         break;
        }
        $44 = HEAP32[$15>>2]|0;
        $45 = (_calloc($44,12)|0);
        $46 = ($45|0)==(0|0);
        if ($46) {
         $$0192 = $22;$$0195 = 0;$$0201 = 0;$$3 = 12;$136 = 0;$138 = 0;
         break;
        }
        $47 = ((($22)) + 16|0);
        HEAP32[$47>>2] = $45;
        $48 = (_tre_add_tags($6,$4,$19,$22)|0);
        $49 = ($48|0)==(0);
        if ($49) {
         $$1191 = $$0190;
        } else {
         $$0192 = $22;$$0195 = 0;$$0201 = 0;$$3 = $48;$136 = 0;$138 = 0;
         break;
        }
       } else {
        $$1191 = 0;
       }
       $50 = ((($3)) + 24|0);
       $51 = (_tre_expand_ast($6,$4,$19,$50,$$1191)|0);
       $52 = ($51|0)==(0);
       if ($52) {
        $53 = HEAP32[$50>>2]|0;
        $54 = (($53) + 1)|0;
        HEAP32[$50>>2] = $54;
        $55 = (_tre_ast_new_literal($6,0,0,$53)|0);
        $56 = ($55|0)==(0|0);
        if ($56) {
         $$0192 = $22;$$0195 = 0;$$0201 = 0;$$3 = 12;$136 = 0;$138 = 0;
        } else {
         $57 = (_tre_ast_new_catenation($6,$19,$55)|0);
         $58 = ($57|0)==(0|0);
         if ($58) {
          $$0192 = $22;$$0195 = 0;$$0201 = 0;$$3 = 12;$136 = 0;$138 = 0;
         } else {
          $59 = (_tre_compute_nfl($6,$4,$57)|0);
          $60 = ($59|0)==(0);
          if ($60) {
           $61 = HEAP32[$50>>2]|0;
           $62 = $61 << 2;
           $63 = (_malloc($62)|0);
           $64 = ($63|0)==(0|0);
           if ($64) {
            $$0192 = $22;$$0195 = $63;$$0201 = 0;$$3 = 12;$136 = 0;$138 = 0;
           } else {
            $65 = (_malloc($62)|0);
            $66 = ($65|0)==(0|0);
            if ($66) {
             $$0192 = $22;$$0195 = $63;$$0201 = $65;$$3 = 12;$136 = $63;$138 = 0;
            } else {
             $67 = ($61|0)>(0);
             if ($67) {
              $68 = $61 << 2;
              _memset(($63|0),0,($68|0))|0;
             }
             (_tre_ast_to_tnfa($57,0,$63,0)|0);
             $69 = HEAP32[$50>>2]|0;
             $70 = ($69|0)>(0);
             if ($70) {
              $$0196210 = 0;$$1198209 = 0;
              while(1) {
               $71 = (($65) + ($$1198209<<2)|0);
               HEAP32[$71>>2] = $$0196210;
               $72 = (($63) + ($$1198209<<2)|0);
               $73 = HEAP32[$72>>2]|0;
               $74 = (($$0196210) + 1)|0;
               $75 = (($74) + ($73))|0;
               HEAP32[$72>>2] = 0;
               $76 = (($$1198209) + 1)|0;
               $77 = ($76|0)<($69|0);
               if ($77) {
                $$0196210 = $75;$$1198209 = $76;
               } else {
                $$0196$lcssa = $75;
                break;
               }
              }
             } else {
              $$0196$lcssa = 0;
             }
             $78 = (($$0196$lcssa) + 1)|0;
             $79 = (_calloc($78,32)|0);
             $80 = ($79|0)==(0|0);
             if ($80) {
              $$0192 = $22;$$0195 = $63;$$0201 = $65;$$3 = 12;$136 = $63;$138 = $65;
             } else {
              HEAP32[$22>>2] = $79;
              $81 = ((($22)) + 4|0);
              HEAP32[$81>>2] = $$0196$lcssa;
              $82 = (_tre_ast_to_tnfa($57,$79,$63,$65)|0);
              $83 = ($82|0)==(0);
              if ($83) {
               $84 = ((($22)) + 20|0);
               HEAP32[$84>>2] = 0;
               $85 = ((($57)) + 24|0);
               $86 = HEAP32[$85>>2]|0;
               $$0193 = $86;$$2199 = 0;
               while(1) {
                $87 = HEAP32[$$0193>>2]|0;
                $88 = ($87|0)>(-1);
                $89 = (($$2199) + 1)|0;
                $90 = ((($$0193)) + 32|0);
                if ($88) {
                 $$0193 = $90;$$2199 = $89;
                } else {
                 break;
                }
               }
               $91 = (_calloc($89,32)|0);
               $92 = ($91|0)==(0|0);
               if ($92) {
                $$0192 = $22;$$0195 = $63;$$0201 = $65;$$3 = 12;$136 = $63;$138 = $65;
               } else {
                $93 = ((($22)) + 8|0);
                HEAP32[$93>>2] = $91;
                $94 = HEAP32[$85>>2]|0;
                $95 = HEAP32[$94>>2]|0;
                $96 = ($95|0)>(-1);
                if ($96) {
                 $$3200207 = 0;$105 = $94;$98 = $95;
                 while(1) {
                  $97 = (($65) + ($98<<2)|0);
                  $99 = HEAP32[$97>>2]|0;
                  $100 = (($79) + ($99<<5)|0);
                  $101 = (((($91) + ($$3200207<<5)|0)) + 8|0);
                  HEAP32[$101>>2] = $100;
                  $102 = (((($91) + ($$3200207<<5)|0)) + 12|0);
                  HEAP32[$102>>2] = $98;
                  $103 = (((($91) + ($$3200207<<5)|0)) + 16|0);
                  HEAP32[$103>>2] = 0;
                  $104 = ((($105)) + 12|0);
                  $106 = HEAP32[$104>>2]|0;
                  $107 = ($106|0)==(0|0);
                  if (!($107)) {
                   $$0 = 0;
                   while(1) {
                    $108 = (($106) + ($$0<<2)|0);
                    $109 = HEAP32[$108>>2]|0;
                    $110 = ($109|0)>(-1);
                    $111 = (($$0) + 1)|0;
                    if ($110) {
                     $$0 = $111;
                    } else {
                     break;
                    }
                   }
                   $112 = $111 << 2;
                   $113 = (_malloc($112)|0);
                   HEAP32[$103>>2] = $113;
                   $114 = ($113|0)==(0|0);
                   if ($114) {
                    $$0192 = $22;$$0195 = $63;$$0201 = $65;$$3 = 12;$136 = $63;$138 = $65;
                    break L6;
                   }
                   $115 = HEAP32[$104>>2]|0;
                   _memcpy(($113|0),($115|0),($112|0))|0;
                  }
                  $116 = ((($105)) + 16|0);
                  $117 = HEAP32[$116>>2]|0;
                  $118 = (((($91) + ($$3200207<<5)|0)) + 20|0);
                  HEAP32[$118>>2] = $117;
                  $119 = (($$3200207) + 1)|0;
                  $120 = ((($105)) + 32|0);
                  $121 = HEAP32[$120>>2]|0;
                  $122 = ($121|0)>(-1);
                  if ($122) {
                   $$3200207 = $119;$105 = $120;$98 = $121;
                  } else {
                   $$3200$lcssa = $119;
                   break;
                  }
                 }
                } else {
                 $$3200$lcssa = 0;
                }
                $123 = (((($91) + ($$3200$lcssa<<5)|0)) + 8|0);
                HEAP32[$123>>2] = 0;
                HEAP32[$81>>2] = $$0196$lcssa;
                $124 = ((($57)) + 28|0);
                $125 = HEAP32[$124>>2]|0;
                $126 = HEAP32[$125>>2]|0;
                $127 = (($65) + ($126<<2)|0);
                $128 = HEAP32[$127>>2]|0;
                $129 = (($79) + ($128<<5)|0);
                $130 = ((($22)) + 12|0);
                HEAP32[$130>>2] = $129;
                $131 = HEAP32[$50>>2]|0;
                $132 = ((($22)) + 52|0);
                HEAP32[$132>>2] = $131;
                $133 = ((($22)) + 56|0);
                HEAP32[$133>>2] = $2;
                ___tre_mem_destroy($6);
                _tre_stack_destroy($4);
                _free($63);
                _free($65);
                $134 = ((($0)) + 4|0);
                HEAP32[$134>>2] = $22;
                $$0188 = 0;
                break L1;
               }
              } else {
               $$0192 = $22;$$0195 = $63;$$0201 = $65;$$3 = $82;$136 = $63;$138 = $65;
              }
             }
            }
           }
          } else {
           $$0192 = $22;$$0195 = 0;$$0201 = 0;$$3 = $59;$136 = 0;$138 = 0;
          }
         }
        }
       } else {
        $$0192 = $22;$$0195 = 0;$$0201 = 0;$$3 = $51;$136 = 0;$138 = 0;
       }
      }
     } else {
      $$0192 = 0;$$0195 = 0;$$0201 = 0;$$3 = 6;$136 = 0;$138 = 0;
     }
    } else {
     $$0192 = 0;$$0195 = 0;$$0201 = 0;$$3 = $13;$136 = 0;$138 = 0;
    }
   } while(0);
   ___tre_mem_destroy($6);
   _tre_stack_destroy($4);
   $135 = ($$0195|0)==(0|0);
   if (!($135)) {
    _free($136);
   }
   $137 = ($$0201|0)==(0|0);
   if (!($137)) {
    _free($138);
   }
   $139 = ((($0)) + 4|0);
   HEAP32[$139>>2] = $$0192;
   _regfree($0);
   $$0188 = $$3;
  }
 } while(0);
 STACKTOP = sp;return ($$0188|0);
}
function _tre_stack_new() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(20)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = $0;
  } else {
   $2 = (_malloc(2048)|0);
   $3 = ((($0)) + 16|0);
   HEAP32[$3>>2] = $2;
   $4 = ($2|0)==(0|0);
   if ($4) {
    _free($0);
    $$0 = 0;
    break;
   } else {
    HEAP32[$0>>2] = 512;
    $5 = ((($0)) + 4|0);
    HEAP32[$5>>2] = 1024000;
    $6 = ((($0)) + 8|0);
    HEAP32[$6>>2] = 128;
    $7 = ((($0)) + 12|0);
    HEAP32[$7>>2] = 0;
    $$0 = $0;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___tre_mem_new_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$in = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $3 = (_calloc(1,24)|0);
  $$0$in = $3;
 } else {
  ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
  $$0$in = $1;
 }
 return ($$0$in|0);
}
function _tre_stack_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 _free($0);
 return;
}
function _tre_parse($0) {
 $0 = $0|0;
 var $$ = 0, $$$3153 = 0, $$$6 = 0, $$0143 = 0, $$0146 = 0, $$0146$ph = 0, $$0149$ph = 0, $$0150 = 0, $$0150$ph = 0, $$0156 = 0, $$1144 = 0, $$1147 = 0, $$1157 = 0, $$2152 = 0, $$3153 = 0, $$5 = 0, $$5155342 = 0, $$5155343 = 0, $$6$ph = 0, $$7 = 0;
 var $$pr167 = 0, $$pre = 0, $$sink = 0, $$sink166 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond399 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ((($0)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_tre_stack_push_int($9,0)|0);
 $11 = ($10|0)==(0);
 L1: do {
  if ($11) {
   $12 = ($5|0)!=(0);
   $13 = ((($0)) + 8|0);
   $14 = ((($0)) + 12|0);
   $$0146$ph = 0;$$0149$ph = 1;$$0150$ph = $7;
   L3: while(1) {
    $$0143 = 0;$$0146 = $$0146$ph;$$0150 = $$0150$ph;$$0156 = 0;
    L5: while(1) {
     $15 = HEAP8[$$0150>>0]|0;
     if ($12) {
      $19 = ($15<<24>>24)==(40);
      if ($19) {
       break;
      }
      $30 = ($15<<24>>24)==(41);
      $31 = ($$0146|0)!=(0);
      $or$cond = $31 & $30;
      if ($or$cond) {
       label = 13;
      } else {
       label = 14;
      }
     } else {
      $16 = ($15<<24>>24)==(92);
      if ($16) {
       $17 = ((($$0150)) + 1|0);
       $18 = HEAP8[$17>>0]|0;
       switch ($18<<24>>24) {
       case 40:  {
        break L5;
        break;
       }
       case 41:  {
        label = 13;
        break;
       }
       default: {
        label = 14;
       }
       }
      } else {
       label = 14;
      }
     }
     if ((label|0) == 13) {
      label = 0;
      $32 = HEAP32[$0>>2]|0;
      $33 = (_tre_ast_new_literal($32,-1,-1,-1)|0);
      HEAP32[$13>>2] = $33;
      $34 = ($33|0)==(0|0);
      if ($34) {
       $$5 = 12;
       break L1;
      } else {
       $$1144 = $$0143;$$1147 = $$0146;$$1157 = $$0156;$$2152 = $$0150;
      }
     }
     else if ((label|0) == 14) {
      label = 0;
      $35 = (_parse_atom($0,$$0150)|0);
      $36 = ($35|0)==(0);
      if (!($36)) {
       $$5 = $35;
       break L1;
      }
      $37 = HEAP32[$14>>2]|0;
      $$1144 = $$0143;$$1147 = $$0146;$$1157 = $$0156;$$2152 = $37;
     }
     L16: while(1) {
      $$3153 = $$2152;
      L18: while(1) {
       $38 = HEAP8[$$3153>>0]|0;
       switch ($38<<24>>24) {
       case 42: case 92:  {
        break;
       }
       default: {
        if (!($12)) {
         $$6$ph = $$3153;
         break L18;
        }
        switch ($38<<24>>24) {
        case 123: case 63: case 43:  {
         break;
        }
        default: {
         $$6$ph = $$3153;
         break L18;
        }
        }
       }
       }
       $39 = ($38<<24>>24)==(92);
       $or$cond3 = $12 & $39;
       if ($or$cond3) {
        $$6$ph = $$3153;
        break;
       }
       $40 = ((($$3153)) + 1|0);
       if ($39) {
        $41 = HEAP8[$40>>0]|0;
        switch ($41<<24>>24) {
        case 123: case 63: case 43:  {
         break;
        }
        default: {
         $$6$ph = $$3153;
         break L18;
        }
        }
       }
       $$$3153 = $39 ? $40 : $$3153;
       if (!($12)) {
        $42 = HEAP32[$6>>2]|0;
        $43 = ((($42)) + 1|0);
        $44 = ($$$3153|0)==($43|0);
        if ($44) {
         $45 = ((($$$3153)) + -1|0);
         $46 = HEAP8[$45>>0]|0;
         $47 = ($46<<24>>24)==(94);
         if ($47) {
          $$6$ph = $$$3153;
          break;
         }
        }
       }
       $48 = HEAP8[$$$3153>>0]|0;
       $49 = ($48<<24>>24)==(123);
       if ($49) {
        $50 = ((($$$3153)) + 1|0);
        $51 = (_parse_dup($50,$5,$1,$2)|0);
        $52 = ($51|0)==(0|0);
        if ($52) {
         label = 28;
         break L3;
        }
        $$pre = HEAP32[$2>>2]|0;
        $59 = ($$pre|0)==(0);
        $60 = HEAP32[$0>>2]|0;
        if ($59) {
         $61 = (_tre_ast_new_literal($60,-1,-1,-1)|0);
         $$5155342 = $51;$$sink = $61;
        } else {
         $$5155343 = $51;$64 = $60;$65 = $$pre;
         label = 36;
        }
       } else {
        HEAP32[$1>>2] = 0;
        HEAP32[$2>>2] = -1;
        $53 = HEAP8[$$$3153>>0]|0;
        $54 = ($53<<24>>24)==(43);
        if ($54) {
         HEAP32[$1>>2] = 1;
         $$pr167 = HEAP8[$$$3153>>0]|0;
         $56 = $$pr167;
        } else {
         $56 = $53;
        }
        $55 = ($56<<24>>24)==(63);
        if ($55) {
         HEAP32[$2>>2] = 1;
         $103 = 1;
        } else {
         $103 = -1;
        }
        $57 = ((($$$3153)) + 1|0);
        $58 = HEAP32[$0>>2]|0;
        $$5155343 = $57;$64 = $58;$65 = $103;
        label = 36;
       }
       if ((label|0) == 36) {
        label = 0;
        $62 = HEAP32[$13>>2]|0;
        $63 = HEAP32[$1>>2]|0;
        $66 = (_tre_ast_new_iter($64,$62,$63,$65,0)|0);
        $$5155342 = $$5155343;$$sink = $66;
       }
       HEAP32[$13>>2] = $$sink;
       $71 = ($$sink|0)==(0|0);
       if ($71) {
        $$5 = 12;
        break L1;
       } else {
        $$3153 = $$5155342;
       }
      }
      $67 = HEAP32[$0>>2]|0;
      $68 = HEAP32[$13>>2]|0;
      $69 = (_tre_ast_new_catenation($67,$$1144,$68)|0);
      $70 = HEAP8[$$6$ph>>0]|0;
      L47: do {
       if ($12) {
        $72 = ($70<<24>>24)==(124);
        if ($72) {
         label = 40;
         break L16;
        }
        $75 = ($70<<24>>24)==(41);
        $76 = ($$1147|0)!=(0);
        $or$cond7 = $76 & $75;
        $77 = ($70<<24>>24)==(0);
        $or$cond399 = $or$cond7 | $77;
        if ($or$cond399) {
         label = 47;
        } else {
         $$0143 = $69;$$0146 = $$1147;$$0150 = $$6$ph;$$0156 = $$1157;
         continue L5;
        }
       } else {
        switch ($70<<24>>24) {
        case 0:  {
         label = 47;
         break L47;
         break;
        }
        case 92:  {
         break;
        }
        default: {
         $$0143 = $69;$$0146 = $$1147;$$0150 = $$6$ph;$$0156 = $$1157;
         continue L5;
        }
        }
        $78 = ((($$6$ph)) + 1|0);
        $79 = HEAP8[$78>>0]|0;
        switch ($79<<24>>24) {
        case 124: case 41:  {
         break;
        }
        default: {
         $$0143 = $69;$$0146 = $$1147;$$0150 = $$6$ph;$$0156 = $$1157;
         continue L5;
        }
        }
        $80 = HEAP32[$0>>2]|0;
        $81 = (_tre_ast_new_union($80,$$1157,$69)|0);
        $82 = ((($$6$ph)) + 1|0);
        $83 = HEAP8[$82>>0]|0;
        $84 = ($83<<24>>24)==(124);
        if ($84) {
         $$sink166 = 2;$104 = $81;
         break L16;
        }
        $85 = ($$1147|0)==(0);
        if ($85) {
         $$5 = 8;
         break L1;
        }
        $86 = ((($$6$ph)) + 2|0);
        $$7 = $86;$93 = $81;$97 = 92;
       }
      } while(0);
      if ((label|0) == 47) {
       label = 0;
       $87 = HEAP32[$0>>2]|0;
       $88 = (_tre_ast_new_union($87,$$1157,$69)|0);
       $89 = ($70<<24>>24)==(41);
       $90 = ((($$6$ph)) + 1|0);
       $$$6 = $89 ? $90 : $$6$ph;
       $$7 = $$$6;$93 = $88;$97 = $70;
      }
      $91 = (($$1147) + -1)|0;
      $92 = (_tre_stack_pop_int($9)|0);
      $94 = (_marksub($0,$93,$92)|0);
      $95 = ($94|0)==(0);
      if (!($95)) {
       $$5 = $94;
       break L1;
      }
      $96 = ($97<<24>>24)==(0);
      $98 = ($$1147|0)<(1);
      $or$cond9 = $98 & $96;
      if ($or$cond9) {
       label = 50;
       break L3;
      }
      $or$cond11 = $98 | $96;
      if ($or$cond11) {
       $$5 = 8;
       break L1;
      }
      $101 = (_tre_stack_pop_voidptr($9)|0);
      $102 = (_tre_stack_pop_voidptr($9)|0);
      $$1144 = $101;$$1147 = $91;$$1157 = $102;$$2152 = $$7;
     }
     if ((label|0) == 40) {
      label = 0;
      $73 = HEAP32[$0>>2]|0;
      $74 = (_tre_ast_new_union($73,$$1157,$69)|0);
      $$sink166 = 1;$104 = $74;
     }
     $100 = (($$6$ph) + ($$sink166)|0);
     $$0143 = 0;$$0146 = $$1147;$$0150 = $100;$$0156 = $104;
    }
    $20 = (_tre_stack_push_voidptr($9,$$0156)|0);
    $21 = ($20|0)==(0);
    if (!($21)) {
     $$5 = $20;
     break L1;
    }
    $22 = (_tre_stack_push_voidptr($9,$$0143)|0);
    $23 = ($22|0)==(0);
    if (!($23)) {
     $$5 = $22;
     break L1;
    }
    $24 = (_tre_stack_push_int($9,$$0149$ph)|0);
    $25 = ($24|0)==(0);
    if (!($25)) {
     $$5 = $24;
     break L1;
    }
    $26 = (($$0149$ph) + 1)|0;
    $27 = ((($$0150)) + 1|0);
    $28 = ((($$0150)) + 2|0);
    $$ = $12 ? $27 : $28;
    $29 = (($$0146) + 1)|0;
    $$0146$ph = $29;$$0149$ph = $26;$$0150$ph = $$;
   }
   if ((label|0) == 28) {
    $$5 = 10;
    break;
   }
   else if ((label|0) == 50) {
    $99 = ((($0)) + 20|0);
    HEAP32[$99>>2] = $$0149$ph;
    $$5 = 0;
    break;
   }
  } else {
   $$5 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($$5|0);
}
function _tre_add_tags($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$0486 = 0, $$$0501 = 0, $$0 = 0, $$0458 = 0, $$0459$be = 0, $$0459$lcssa = 0, $$0460$be = 0, $$0460$lcssa = 0, $$0460587 = 0, $$0462$be = 0, $$0462$lcssa = 0, $$0462584 = 0, $$0471$be = 0, $$0471$lcssa = 0, $$0471581 = 0, $$0486$be = 0, $$0486$lcssa = 0, $$0486578 = 0, $$0496 = 0, $$0497 = 0;
 var $$0498 = 0, $$0499 = 0, $$0500 = 0, $$0501$ = 0, $$0501$be = 0, $$0501575 = 0, $$0512$ = 0, $$0512$be = 0, $$0512$lcssa = 0, $$0512572 = 0, $$0527$ = 0, $$0527$be = 0, $$0527569 = 0, $$0531 = 0, $$0534 = 0, $$0535 = 0, $$0536 = 0, $$0538 = 0, $$0541 = 0, $$10481 = 0;
 var $$10511 = 0, $$10522 = 0, $$11 = 0, $$11482 = 0, $$11523 = 0, $$12 = 0, $$13484 = 0, $$13525 = 0, $$14 = 0, $$14485 = 0, $$14526 = 0, $$1461 = 0, $$1472 = 0, $$15 = 0, $$1513 = 0, $$1537 = 0, $$1539 = 0, $$16 = 0, $$2473 = 0, $$2514 = 0;
 var $$2529 = 0, $$2540567 = 0, $$3504 = 0, $$3530 = 0, $$4 = 0, $$543 = 0, $$5467 = 0, $$5476 = 0, $$5491 = 0, $$5517 = 0, $$6477 = 0, $$6492 = 0, $$6518 = 0, $$7469 = 0, $$7508 = 0, $$8 = 0, $$8494 = 0, $$8509 = 0, $$9480 = 0, $$9521 = 0;
 var $$lcssa558 = 0, $$lobit = 0, $$lobit$not = 0, $$pn = 0, $$pre = 0, $$pre$phi606Z2D = 0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond542 = 0, $or$cond6 = 0, $or$cond6568 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_tre_stack_num_objects($1)|0);
 $5 = ($0|0)==(0|0);
 $6 = ($3|0)==(0|0);
 $7 = $5 | $6;
 if (!($7)) {
  $8 = ((($3)) + 48|0);
  HEAP32[$8>>2] = 0;
  $9 = ((($3)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  HEAP32[$10>>2] = -1;
 }
 $11 = ((($3)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 << 3;
 $14 = (($13) + 8)|0;
 $15 = (_malloc($14)|0);
 $16 = ($15|0)==(0|0);
 do {
  if ($16) {
   $$0458 = 12;
  } else {
   HEAP32[$15>>2] = -1;
   $17 = $12 << 2;
   $18 = (($17) + 4)|0;
   $19 = (_malloc($18)|0);
   $20 = ($19|0)==(0|0);
   if ($20) {
    _free($15);
    $$0458 = 12;
    break;
   }
   HEAP32[$19>>2] = -1;
   $$0535 = 0;
   while(1) {
    $21 = ($$0535>>>0)>($12>>>0);
    $22 = (($$0535) + 1)|0;
    if ($21) {
     break;
    } else {
     $$0535 = $22;
    }
   }
   (_tre_stack_push_voidptr($1,$2)|0);
   $23 = (_tre_stack_push_int($1,0)|0);
   $24 = (_tre_stack_num_objects($1)|0);
   $25 = ($24|0)<=($4|0);
   $26 = ($23|0)!=(0);
   $or$cond6568 = $26 | $25;
   L12: do {
    if ($or$cond6568) {
     $$0459$lcssa = $23;$$0460$lcssa = $15;$$0462$lcssa = 0;$$0471$lcssa = 0;$$0486$lcssa = 0;$$0512$lcssa = -1;
    } else {
     $27 = ((($3)) + 32|0);
     $28 = ((($3)) + 36|0);
     $29 = ((($3)) + 16|0);
     $$0460587 = $15;$$0462584 = 0;$$0471581 = 0;$$0486578 = 0;$$0501575 = 1;$$0512572 = -1;$$0527569 = 0;
     while(1) {
      $30 = (_tre_stack_pop_int($1)|0);
      L16: do {
       switch ($30|0) {
       case 6:  {
        $34 = (_tre_stack_pop_int($1)|0);
        $$0536 = 0;
        while(1) {
         $35 = (($$0460587) + ($$0536<<2)|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ($36|0)>(-1);
         $38 = (($$0536) + 1)|0;
         if ($37) {
          $$0536 = $38;
         } else {
          break;
         }
        }
        $39 = $34 << 1;
        $40 = $39 | 1;
        HEAP32[$35>>2] = $40;
        $41 = (($$0460587) + ($38<<2)|0);
        HEAP32[$41>>2] = -1;
        $$1537 = 0;
        while(1) {
         $42 = (($19) + ($$1537<<2)|0);
         $43 = HEAP32[$42>>2]|0;
         $44 = ($43|0)>(-1);
         $45 = (($$1537) + 1)|0;
         if ($44) {
          $$1537 = $45;
         } else {
          break;
         }
        }
        $46 = (($$1537) + -1)|0;
        $47 = (($19) + ($46<<2)|0);
        HEAP32[$47>>2] = -1;
        $$0459$be = 0;$$0460$be = $$0460587;$$0462$be = $$0462584;$$0471$be = $$0471581;$$0486$be = $$0486578;$$0501$be = $$0501575;$$0512$be = $$0512572;$$0527$be = $$0527569;
        break;
       }
       case 0:  {
        $48 = (_tre_stack_pop_voidptr($1)|0);
        $49 = ((($48)) + 12|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = ($50|0)>(-1);
        if ($51) {
         $$0538 = 0;
         while(1) {
          $52 = (($$0460587) + ($$0538<<2)|0);
          $53 = HEAP32[$52>>2]|0;
          $54 = ($53|0)>(-1);
          $55 = (($$0538) + 1)|0;
          if ($54) {
           $$0538 = $55;
          } else {
           break;
          }
         }
         $56 = $50 << 1;
         HEAP32[$52>>2] = $56;
         $57 = (($$0460587) + ($55<<2)|0);
         HEAP32[$57>>2] = -1;
         if (!($7)) {
          $$1539 = 0;
          while(1) {
           $58 = (($19) + ($$1539<<2)|0);
           $59 = HEAP32[$58>>2]|0;
           $60 = ($59|0)>(-1);
           $61 = (($$1539) + 1)|0;
           if ($60) {
            $$1539 = $61;
           } else {
            break;
           }
          }
          $62 = HEAP32[$29>>2]|0;
          $63 = (((($62) + (($50*12)|0)|0)) + 8|0);
          HEAP32[$63>>2] = 0;
          $64 = ($$1539|0)>(0);
          if ($64) {
           $65 = $$1539 << 2;
           $66 = (($65) + 4)|0;
           $67 = (_malloc($66)|0);
           $68 = ($67|0)==(0|0);
           if ($68) {
            $$0459$be = 12;$$0460$be = $$0460587;$$0462$be = $$0462584;$$0471$be = $$0471581;$$0486$be = $$0486578;$$0501$be = $$0501575;$$0512$be = $$0512572;$$0527$be = $$0527569;
            break L16;
           }
           HEAP32[$63>>2] = $67;
           $69 = HEAP32[$19>>2]|0;
           $70 = ($69|0)>(-1);
           if ($70) {
            $$2540567 = 0;$71 = $69;$72 = $67;
            while(1) {
             HEAP32[$72>>2] = $71;
             $73 = (($$2540567) + 1)|0;
             $74 = (($19) + ($73<<2)|0);
             $75 = HEAP32[$74>>2]|0;
             $76 = ($75|0)>(-1);
             $77 = (($67) + ($73<<2)|0);
             if ($76) {
              $$2540567 = $73;$71 = $75;$72 = $77;
             } else {
              $$lcssa558 = $77;
              break;
             }
            }
           } else {
            $$lcssa558 = $67;
           }
           HEAP32[$$lcssa558>>2] = -1;
          }
         }
         $78 = HEAP32[$49>>2]|0;
         $79 = (_tre_stack_push_int($1,$78)|0);
         $80 = ($79|0)==(0);
         if (!($80)) {
          $$0459$be = $79;$$0460$be = $$0460587;$$0462$be = $$0462584;$$0471$be = $$0471581;$$0486$be = $$0486578;$$0501$be = $$0501575;$$0512$be = $$0512572;$$0527$be = $$0527569;
          break L16;
         }
         $81 = (_tre_stack_push_int($1,6)|0);
         $82 = ($81|0)==(0);
         if (!($82)) {
          $$0459$be = $81;$$0460$be = $$0460587;$$0462$be = $$0462584;$$0471$be = $$0471581;$$0486$be = $$0486578;$$0501$be = $$0501575;$$0512$be = $$0512572;$$0527$be = $$0527569;
          break L16;
         }
        }
        $83 = HEAP32[$48>>2]|0;
        L42: do {
         switch ($83|0) {
         case 0:  {
          $84 = ((($48)) + 4|0);
          $85 = HEAP32[$84>>2]|0;
          $86 = HEAP32[$85>>2]|0;
          $87 = ($86|0)>(-1);
          $88 = ($86|0)==(-4);
          $or$cond542 = $87 | $88;
          if ($or$cond542) {
           $89 = HEAP32[$$0460587>>2]|0;
           $90 = ($89|0)>(-1);
           if ($90) {
            if ($7) {
             $104 = ((($48)) + 20|0);
             HEAP32[$104>>2] = 1;
             $$2473 = $$0471581;$$2514 = $$0512572;$$4 = 0;
            } else {
             $91 = (_tre_add_tag_left($0,$48,$$0486578)|0);
             $92 = HEAP32[$27>>2]|0;
             $93 = (($92) + ($$0486578<<2)|0);
             HEAP32[$93>>2] = $$0527569;
             $94 = ($$0512572|0)>(-1);
             if ($94) {
              $95 = HEAP32[$28>>2]|0;
              $$0541 = 0;
              while(1) {
               $96 = (($95) + ($$0541<<2)|0);
               $97 = HEAP32[$96>>2]|0;
               $98 = ($97|0)>(-1);
               $99 = (($$0541) + 1)|0;
               if ($98) {
                $$0541 = $99;
               } else {
                break;
               }
              }
              HEAP32[$96>>2] = $$0486578;
              $100 = (($95) + ($99<<2)|0);
              HEAP32[$100>>2] = $$0512572;
              $101 = (($$0541) + 2)|0;
              $102 = (($95) + ($101<<2)|0);
              HEAP32[$102>>2] = -1;
              $103 = (($$0471581) + 1)|0;
              $$1472 = $103;$$1513 = -1;
             } else {
              $$1472 = $$0471581;$$1513 = $$0512572;
             }
             _tre_purge_regset($$0460587,$3,$$0486578);
             $$2473 = $$1472;$$2514 = $$1513;$$4 = $91;
            }
            HEAP32[$$0460587>>2] = -1;
            $105 = (($$0462584) + 1)|0;
            $106 = (($$0501575) + 1)|0;
            $$10511 = $106;$$13484 = $$2473;$$13525 = $$2514;$$14 = $$4;$$2529 = $$0527569;$$7469 = $105;$$8494 = $$0501575;
           } else {
            $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = 0;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
           }
          } else {
           $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = 0;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
          }
          break;
         }
         case 1:  {
          $107 = ((($48)) + 4|0);
          $108 = HEAP32[$107>>2]|0;
          $109 = HEAP32[$108>>2]|0;
          $110 = ((($108)) + 4|0);
          $111 = HEAP32[$110>>2]|0;
          $112 = (_tre_stack_push_voidptr($1,$48)|0);
          $113 = ($112|0)==(0);
          if ($113) {
           $114 = (_tre_stack_push_int($1,5)|0);
           $115 = ($114|0)==(0);
           if ($115) {
            $116 = (_tre_stack_push_voidptr($1,$111)|0);
            $117 = ($116|0)==(0);
            if ($117) {
             $118 = (_tre_stack_push_int($1,0)|0);
             $119 = ($118|0)==(0);
             if ($119) {
              $120 = ((($109)) + 20|0);
              $121 = HEAP32[$120>>2]|0;
              $122 = (($121) + ($$0501575))|0;
              $123 = (_tre_stack_push_int($1,$122)|0);
              $124 = ($123|0)==(0);
              if ($124) {
               $125 = HEAP32[$120>>2]|0;
               $126 = ($125|0)>(0);
               if ($126) {
                $127 = ((($111)) + 20|0);
                $128 = HEAP32[$127>>2]|0;
                $129 = ($128|0)>(0);
                $$0501$ = $129 ? $$0501575 : -1;
                $130 = $129&1;
                $$$0501 = (($$0501575) + ($130))|0;
                $$0534 = $$0501$;$$3504 = $$$0501;
               } else {
                $$0534 = -1;$$3504 = $$0501575;
               }
               $131 = (_tre_stack_push_int($1,$$0534)|0);
               $132 = ($131|0)==(0);
               if ($132) {
                $133 = (_tre_stack_push_int($1,4)|0);
                $134 = ($133|0)==(0);
                if ($134) {
                 $135 = (_tre_stack_push_voidptr($1,$109)|0);
                 $136 = ($135|0)==(0);
                 if ($136) {
                  $137 = (_tre_stack_push_int($1,0)|0);
                  $$10511 = $$3504;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $137;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
                 } else {
                  $$10511 = $$3504;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $135;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
                 }
                } else {
                 $$10511 = $$3504;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $133;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
                }
               } else {
                $$10511 = $$3504;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $131;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
               }
              } else {
               $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $123;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
              }
             } else {
              $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $118;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
             }
            } else {
             $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $116;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
            }
           } else {
            $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $114;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
           }
          } else {
           $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $112;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
          }
          break;
         }
         case 2:  {
          $138 = ((($48)) + 4|0);
          $139 = HEAP32[$138>>2]|0;
          if ($7) {
           $140 = HEAP32[$$0460587>>2]|0;
           $141 = ($140|0)>(-1);
           if ($141) {
            $147 = 1;
           } else {
            $142 = ((($139)) + 12|0);
            $143 = HEAP8[$142>>0]|0;
            $144 = $143 & 1;
            $145 = ($144<<24>>24)!=(0);
            $147 = $145;
           }
           $146 = $147&1;
           $148 = (_tre_stack_push_int($1,$146)|0);
           $149 = ($148|0)==(0);
           if (!($149)) {
            $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $148;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
            break L42;
           }
          } else {
           $150 = (_tre_stack_push_int($1,$$0486578)|0);
           $151 = ($150|0)==(0);
           if (!($151)) {
            $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $150;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
            break L42;
           }
           $152 = ((($139)) + 12|0);
           $153 = HEAP8[$152>>0]|0;
           $154 = $153 & 1;
           $155 = $154&255;
           $156 = (_tre_stack_push_int($1,$155)|0);
           $157 = ($156|0)==(0);
           if (!($157)) {
            $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $156;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
            break L42;
           }
          }
          $158 = (_tre_stack_push_voidptr($1,$48)|0);
          $159 = ($158|0)==(0);
          if ($159) {
           $160 = (_tre_stack_push_int($1,1)|0);
           $161 = ($160|0)==(0);
           if ($161) {
            $162 = HEAP32[$139>>2]|0;
            $163 = (_tre_stack_push_voidptr($1,$162)|0);
            $164 = ($163|0)==(0);
            if ($164) {
             $165 = (_tre_stack_push_int($1,0)|0);
             $166 = ($165|0)==(0);
             if ($166) {
              $167 = HEAP32[$$0460587>>2]|0;
              $168 = ($167|0)>(-1);
              if (!($168)) {
               $169 = ((($139)) + 12|0);
               $170 = HEAP8[$169>>0]|0;
               $171 = $170 & 1;
               $172 = ($171<<24>>24)==(0);
               if ($172) {
                $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = 0;$$2529 = 0;$$7469 = $$0462584;$$8494 = $$0486578;
                break L42;
               }
              }
              if ($7) {
               $$6477 = $$0471581;$$6518 = $$0512572;$$8 = 0;
              } else {
               $173 = (_tre_add_tag_left($0,$48,$$0486578)|0);
               $174 = ((($139)) + 12|0);
               $175 = HEAP8[$174>>0]|0;
               $176 = $175 & 1;
               $177 = ($176<<24>>24)==(0);
               $$0527$ = $177 ? $$0527569 : 1;
               $$pn = HEAP32[$27>>2]|0;
               $$sink2 = (($$pn) + ($$0486578<<2)|0);
               HEAP32[$$sink2>>2] = $$0527$;
               $178 = ($$0512572|0)>(-1);
               if ($178) {
                $179 = HEAP32[$28>>2]|0;
                $$0531 = 0;
                while(1) {
                 $180 = (($179) + ($$0531<<2)|0);
                 $181 = HEAP32[$180>>2]|0;
                 $182 = ($181|0)>(-1);
                 $183 = (($$0531) + 1)|0;
                 if ($182) {
                  $$0531 = $183;
                 } else {
                  break;
                 }
                }
                HEAP32[$180>>2] = $$0486578;
                $184 = (($179) + ($183<<2)|0);
                HEAP32[$184>>2] = $$0512572;
                $185 = (($$0531) + 2)|0;
                $186 = (($179) + ($185<<2)|0);
                HEAP32[$186>>2] = -1;
                $187 = (($$0471581) + 1)|0;
                $$5476 = $187;$$5517 = -1;
               } else {
                $$5476 = $$0471581;$$5517 = $$0512572;
               }
               _tre_purge_regset($$0460587,$3,$$0486578);
               $$6477 = $$5476;$$6518 = $$5517;$$8 = $173;
              }
              HEAP32[$$0460587>>2] = -1;
              $188 = (($$0462584) + 1)|0;
              $189 = (($$0501575) + 1)|0;
              $$10511 = $189;$$13484 = $$6477;$$13525 = $$6518;$$14 = $$8;$$2529 = 0;$$7469 = $188;$$8494 = $$0501575;
             } else {
              $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $165;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
             }
            } else {
             $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $163;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
            }
           } else {
            $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $160;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
           }
          } else {
           $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $158;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
          }
          break;
         }
         case 3:  {
          $190 = ((($48)) + 4|0);
          $191 = HEAP32[$190>>2]|0;
          $192 = HEAP32[$191>>2]|0;
          $193 = ((($191)) + 4|0);
          $194 = HEAP32[$193>>2]|0;
          $195 = HEAP32[$$0460587>>2]|0;
          $196 = ($195|0)>(-1);
          $197 = (($$0501575) + 1)|0;
          $$0499 = $196 ? $197 : $$0501575;
          $198 = (_tre_stack_push_int($1,$$0499)|0);
          $199 = ($198|0)==(0);
          if ($199) {
           $$0500 = $196 ? $$0501575 : $$0486578;
           $200 = (_tre_stack_push_int($1,$$0500)|0);
           $201 = ($200|0)==(0);
           if ($201) {
            $202 = (_tre_stack_push_voidptr($1,$$0460587)|0);
            $203 = ($202|0)==(0);
            if ($203) {
             $204 = HEAP32[$$0460587>>2]|0;
             $$lobit = $204 >>> 31;
             $$lobit$not = $$lobit ^ 1;
             $205 = (_tre_stack_push_int($1,$$lobit$not)|0);
             $206 = ($205|0)==(0);
             if ($206) {
              $207 = (_tre_stack_push_voidptr($1,$48)|0);
              $208 = ($207|0)==(0);
              if ($208) {
               $209 = (_tre_stack_push_voidptr($1,$194)|0);
               $210 = ($209|0)==(0);
               if ($210) {
                $211 = (_tre_stack_push_voidptr($1,$192)|0);
                $212 = ($211|0)==(0);
                if ($212) {
                 $213 = (_tre_stack_push_int($1,3)|0);
                 $214 = ($213|0)==(0);
                 if ($214) {
                  $215 = (_tre_stack_push_voidptr($1,$194)|0);
                  $216 = ($215|0)==(0);
                  if ($216) {
                   $217 = (_tre_stack_push_int($1,0)|0);
                   $218 = ($217|0)==(0);
                   if ($218) {
                    $219 = (_tre_stack_push_int($1,2)|0);
                    $220 = ($219|0)==(0);
                    if (!($220)) {
                     $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $219;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
                     break L42;
                    }
                    $221 = (_tre_stack_push_voidptr($1,$192)|0);
                    $222 = ($221|0)==(0);
                    if (!($222)) {
                     $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $221;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
                     break L42;
                    }
                    $223 = (_tre_stack_push_int($1,0)|0);
                    $224 = ($223|0)==(0);
                    if (!($224)) {
                     $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $223;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
                     break L42;
                    }
                    $225 = HEAP32[$$0460587>>2]|0;
                    $226 = ($225|0)>(-1);
                    if ($226) {
                     if ($7) {
                      $$10481 = $$0471581;$$10522 = $$0512572;$$11 = 0;
                     } else {
                      $227 = (_tre_add_tag_left($0,$48,$$0486578)|0);
                      $228 = HEAP32[$27>>2]|0;
                      $229 = (($228) + ($$0486578<<2)|0);
                      HEAP32[$229>>2] = $$0527569;
                      $230 = ($$0512572|0)>(-1);
                      if ($230) {
                       $231 = HEAP32[$28>>2]|0;
                       $$0498 = 0;
                       while(1) {
                        $232 = (($231) + ($$0498<<2)|0);
                        $233 = HEAP32[$232>>2]|0;
                        $234 = ($233|0)>(-1);
                        $235 = (($$0498) + 1)|0;
                        if ($234) {
                         $$0498 = $235;
                        } else {
                         break;
                        }
                       }
                       HEAP32[$232>>2] = $$0486578;
                       $236 = (($231) + ($235<<2)|0);
                       HEAP32[$236>>2] = $$0512572;
                       $237 = (($$0498) + 2)|0;
                       $238 = (($231) + ($237<<2)|0);
                       HEAP32[$238>>2] = -1;
                       $239 = (($$0471581) + 1)|0;
                       $$9480 = $239;$$9521 = -1;
                      } else {
                       $$9480 = $$0471581;$$9521 = $$0512572;
                      }
                      _tre_purge_regset($$0460587,$3,$$0486578);
                      $$10481 = $$9480;$$10522 = $$9521;$$11 = $227;
                     }
                     HEAP32[$$0460587>>2] = -1;
                     $240 = (($$0462584) + 1)|0;
                     $$11482 = $$10481;$$11523 = $$10522;$$12 = $$11;$$5467 = $240;$$5491 = $$0501575;$$7508 = $197;
                    } else {
                     $$11482 = $$0471581;$$11523 = $$0512572;$$12 = 0;$$5467 = $$0462584;$$5491 = $$0486578;$$7508 = $$0501575;
                    }
                    $241 = ((($48)) + 16|0);
                    $242 = HEAP32[$241>>2]|0;
                    $243 = ($242|0)>(0);
                    $244 = (($$7508) + 1)|0;
                    $245 = (($$7508) + 2)|0;
                    $$8509 = $243 ? $245 : $$7508;
                    $$6492 = $243 ? $244 : $$5491;
                    $$10511 = $$8509;$$13484 = $$11482;$$13525 = $$11523;$$14 = $$12;$$2529 = $$0527569;$$7469 = $$5467;$$8494 = $$6492;
                   } else {
                    $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $217;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
                   }
                  } else {
                   $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $215;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
                  }
                 } else {
                  $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $213;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
                 }
                } else {
                 $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $211;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
                }
               } else {
                $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $209;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
               }
              } else {
               $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $207;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
              }
             } else {
              $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $205;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
             }
            } else {
             $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $202;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
            }
           } else {
            $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $200;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
           }
          } else {
           $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = $198;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
          }
          break;
         }
         default: {
          $$10511 = $$0501575;$$13484 = $$0471581;$$13525 = $$0512572;$$14 = 0;$$2529 = $$0527569;$$7469 = $$0462584;$$8494 = $$0486578;
         }
         }
        } while(0);
        $246 = HEAP32[$49>>2]|0;
        $247 = ($246|0)>(-1);
        if ($247) {
         $$0497 = 0;
         while(1) {
          $248 = (($19) + ($$0497<<2)|0);
          $249 = HEAP32[$248>>2]|0;
          $250 = ($249|0)>(-1);
          $251 = (($$0497) + 1)|0;
          if ($250) {
           $$0497 = $251;
          } else {
           break;
          }
         }
         HEAP32[$248>>2] = $246;
         $252 = (($19) + ($251<<2)|0);
         HEAP32[$252>>2] = -1;
         $$0459$be = $$14;$$0460$be = $$0460587;$$0462$be = $$7469;$$0471$be = $$13484;$$0486$be = $$8494;$$0501$be = $$10511;$$0512$be = $$13525;$$0527$be = $$2529;
        } else {
         $$0459$be = $$14;$$0460$be = $$0460587;$$0462$be = $$7469;$$0471$be = $$13484;$$0486$be = $$8494;$$0501$be = $$10511;$$0512$be = $$13525;$$0527$be = $$2529;
        }
        break;
       }
       case 1:  {
        $253 = (_tre_stack_pop_voidptr($1)|0);
        if ($7) {
         $254 = ((($253)) + 4|0);
         $255 = HEAP32[$254>>2]|0;
         $256 = HEAP32[$255>>2]|0;
         $257 = ((($256)) + 20|0);
         $258 = HEAP32[$257>>2]|0;
         $259 = (_tre_stack_pop_int($1)|0);
         $260 = (($259) + ($258))|0;
         $261 = ((($253)) + 20|0);
         HEAP32[$261>>2] = $260;
         $$0496 = 0;$$14526 = -1;
        } else {
         $262 = (_tre_stack_pop_int($1)|0);
         $263 = (_tre_stack_pop_int($1)|0);
         $264 = ($262|0)==(0);
         $$0512$ = $264 ? $$0512572 : $263;
         $$0496 = $262;$$14526 = $$0512$;
        }
        $265 = ($$0496|0)==(0);
        $$543 = $265&1;
        $$3530 = $7 ? $$0527569 : $$543;
        $$0459$be = 0;$$0460$be = $$0460587;$$0462$be = $$0462584;$$0471$be = $$0471581;$$0486$be = $$0486578;$$0501$be = $$0501575;$$0512$be = $$14526;$$0527$be = $$3530;
        break;
       }
       case 4:  {
        $266 = (_tre_stack_pop_int($1)|0);
        $267 = (_tre_stack_pop_int($1)|0);
        $268 = ($266|0)>(-1);
        $$$0486 = $268 ? $266 : $$0486578;
        $$0459$be = 0;$$0460$be = $$0460587;$$0462$be = $$0462584;$$0471$be = $$0471581;$$0486$be = $$$0486;$$0501$be = $267;$$0512$be = $$0512572;$$0527$be = $$0527569;
        break;
       }
       case 5:  {
        $269 = (_tre_stack_pop_voidptr($1)|0);
        if ($7) {
         $270 = ((($269)) + 4|0);
         $271 = HEAP32[$270>>2]|0;
         $272 = HEAP32[$271>>2]|0;
         $273 = ((($272)) + 20|0);
         $274 = HEAP32[$273>>2]|0;
         $275 = ((($271)) + 4|0);
         $276 = HEAP32[$275>>2]|0;
         $277 = ((($276)) + 20|0);
         $278 = HEAP32[$277>>2]|0;
         $279 = (($278) + ($274))|0;
         $280 = ((($269)) + 20|0);
         HEAP32[$280>>2] = $279;
         $$0459$be = 0;$$0460$be = $$0460587;$$0462$be = $$0462584;$$0471$be = $$0471581;$$0486$be = $$0486578;$$0501$be = $$0501575;$$0512$be = $$0512572;$$0527$be = $$0527569;
        } else {
         $$0459$be = 0;$$0460$be = $$0460587;$$0462$be = $$0462584;$$0471$be = $$0471581;$$0486$be = $$0486578;$$0501$be = $$0501575;$$0512$be = $$0512572;$$0527$be = $$0527569;
        }
        break;
       }
       case 2:  {
        $$1461 = $$0460587;
        while(1) {
         $281 = HEAP32[$$1461>>2]|0;
         $282 = ($281|0)>(-1);
         $283 = ((($$1461)) + 4|0);
         if ($282) {
          $$1461 = $283;
         } else {
          $$0459$be = 0;$$0460$be = $$1461;$$0462$be = $$0462584;$$0471$be = $$0471581;$$0486$be = $$0486578;$$0501$be = $$0501575;$$0512$be = $$0512572;$$0527$be = $$0527569;
          break;
         }
        }
        break;
       }
       case 3:  {
        $284 = (_tre_stack_pop_voidptr($1)|0);
        $285 = (_tre_stack_pop_voidptr($1)|0);
        $286 = (_tre_stack_pop_voidptr($1)|0);
        $287 = (_tre_stack_pop_int($1)|0);
        if ($7) {
         $288 = ((($286)) + 4|0);
         $289 = HEAP32[$288>>2]|0;
         $290 = HEAP32[$289>>2]|0;
         $291 = ((($290)) + 20|0);
         $292 = HEAP32[$291>>2]|0;
         $293 = ((($289)) + 4|0);
         $294 = HEAP32[$293>>2]|0;
         $295 = ((($294)) + 20|0);
         $296 = HEAP32[$295>>2]|0;
         $297 = ((($286)) + 16|0);
         $298 = HEAP32[$297>>2]|0;
         $299 = ($298|0)>(0);
         $300 = $299 ? 2 : 0;
         $301 = (($292) + ($287))|0;
         $302 = (($301) + ($296))|0;
         $303 = (($302) + ($300))|0;
         $304 = ((($286)) + 20|0);
         HEAP32[$304>>2] = $303;
         $$pre$phi606Z2D = $297;
        } else {
         $$pre = ((($286)) + 16|0);
         $$pre$phi606Z2D = $$pre;
        }
        $305 = (_tre_stack_pop_voidptr($1)|0);
        $306 = (_tre_stack_pop_int($1)|0);
        $307 = (_tre_stack_pop_int($1)|0);
        $308 = HEAP32[$$pre$phi606Z2D>>2]|0;
        $309 = ($308|0)>(0);
        if ($309) {
         if ($7) {
          $$16 = 0;
         } else {
          $310 = (_tre_add_tag_right($0,$284,$306)|0);
          $311 = HEAP32[$27>>2]|0;
          $312 = (($311) + ($306<<2)|0);
          HEAP32[$312>>2] = 1;
          $313 = ($310|0)==(0);
          if ($313) {
           $314 = (_tre_add_tag_right($0,$285,$307)|0);
           $$15 = $314;
          } else {
           $$15 = $310;
          }
          $315 = HEAP32[$27>>2]|0;
          $316 = (($315) + ($307<<2)|0);
          HEAP32[$316>>2] = 1;
          $$16 = $$15;
         }
         $317 = (($$0462584) + 2)|0;
         $$0459$be = $$16;$$0460$be = $305;$$0462$be = $317;$$0471$be = $$0471581;$$0486$be = $$0486578;$$0501$be = $$0501575;$$0512$be = $$0512572;$$0527$be = 1;
        } else {
         $$0459$be = 0;$$0460$be = $305;$$0462$be = $$0462584;$$0471$be = $$0471581;$$0486$be = $$0486578;$$0501$be = $$0501575;$$0512$be = $$0512572;$$0527$be = 1;
        }
        break;
       }
       default: {
        $$0459$be = 0;$$0460$be = $$0460587;$$0462$be = $$0462584;$$0471$be = $$0471581;$$0486$be = $$0486578;$$0501$be = $$0501575;$$0512$be = $$0512572;$$0527$be = $$0527569;
       }
       }
      } while(0);
      $31 = (_tre_stack_num_objects($1)|0);
      $32 = ($31|0)<=($4|0);
      $33 = ($$0459$be|0)!=(0);
      $or$cond6 = $33 | $32;
      if ($or$cond6) {
       $$0459$lcssa = $$0459$be;$$0460$lcssa = $$0460$be;$$0462$lcssa = $$0462$be;$$0471$lcssa = $$0471$be;$$0486$lcssa = $$0486$be;$$0512$lcssa = $$0512$be;
       break L12;
      } else {
       $$0460587 = $$0460$be;$$0462584 = $$0462$be;$$0471581 = $$0471$be;$$0486578 = $$0486$be;$$0501575 = $$0501$be;$$0512572 = $$0512$be;$$0527569 = $$0527$be;
      }
     }
    }
   } while(0);
   if ($7) {
    $$14485 = $$0471$lcssa;
   } else {
    _tre_purge_regset($$0460$lcssa,$3,$$0486$lcssa);
    $318 = ($$0512$lcssa|0)>(-1);
    if ($318) {
     $319 = ((($3)) + 36|0);
     $320 = HEAP32[$319>>2]|0;
     $$0 = 0;
     while(1) {
      $321 = (($320) + ($$0<<2)|0);
      $322 = HEAP32[$321>>2]|0;
      $323 = ($322|0)>(-1);
      $324 = (($$0) + 1)|0;
      if ($323) {
       $$0 = $324;
      } else {
       break;
      }
     }
     HEAP32[$321>>2] = $$0486$lcssa;
     $325 = (($320) + ($324<<2)|0);
     HEAP32[$325>>2] = $$0512$lcssa;
     $326 = (($$0) + 2)|0;
     $327 = (($320) + ($326<<2)|0);
     HEAP32[$327>>2] = -1;
     $328 = (($$0471$lcssa) + 1)|0;
     $$14485 = $328;
    } else {
     $$14485 = $$0471$lcssa;
    }
   }
   $329 = ((($3)) + 48|0);
   HEAP32[$329>>2] = $$0462$lcssa;
   $330 = ((($3)) + 40|0);
   HEAP32[$330>>2] = $$0462$lcssa;
   $331 = ((($3)) + 44|0);
   HEAP32[$331>>2] = $$14485;
   _free($15);
   _free($19);
   $$0458 = $$0459$lcssa;
  }
 } while(0);
 return ($$0458|0);
}
function _tre_expand_ast($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0167$lcssa = 0, $$0180$lcssa = 0, $$0185$lcssa = 0, $$0185241279 = 0, $$0189249$be = 0, $$0189249$lcssa = 0, $$0189249284 = 0, $$0194248$be = 0, $$0194248285 = 0, $$1184245 = 0, $$1186 = 0, $$13 = 0, $$210 = 0, $$2182 = 0, $$3188 = 0, $$3188217 = 0, $$4$ph = 0, $$6$ph = 0, $$8$ph = 0, $$be = 0;
 var $$lcssa = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 $10 = (_tre_stack_num_objects($1)|0);
 HEAP32[$5>>2] = 0;
 HEAP32[$6>>2] = 0;
 $11 = (_tre_stack_push_voidptr($1,$2)|0);
 $12 = ($11|0)==(0);
 L1: do {
  if ($12) {
   $13 = (_tre_stack_push_int($1,0)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $15 = (_tre_stack_num_objects($1)|0);
    $16 = ($15|0)>($10|0);
    L4: do {
     if ($16) {
      $$0189249284 = 0;$$0194248285 = 0;$28 = 0;
      L5: while(1) {
       $17 = (_tre_stack_pop_int($1)|0);
       $18 = (_tre_stack_pop_voidptr($1)|0);
       L7: do {
        switch ($17|0) {
        case 0:  {
         $19 = HEAP32[$18>>2]|0;
         switch ($19|0) {
         case 0:  {
          $20 = ((($18)) + 4|0);
          $21 = HEAP32[$20>>2]|0;
          $22 = HEAP32[$21>>2]|0;
          $23 = ($22|0)>(-1);
          $24 = ($22|0)==(-4);
          $or$cond = $23 | $24;
          if (!($or$cond)) {
           $$0189249$be = $$0189249284;$$0194248$be = $$0194248285;$$be = $28;
           break L7;
          }
          $25 = ((($21)) + 8|0);
          $26 = HEAP32[$25>>2]|0;
          $27 = (($26) + ($28))|0;
          HEAP32[$25>>2] = $27;
          $29 = HEAP32[$6>>2]|0;
          $30 = ($27|0)>($29|0);
          if (!($30)) {
           $$0189249$be = $$0189249284;$$0194248$be = $$0194248285;$$be = $28;
           break L7;
          }
          HEAP32[$6>>2] = $27;
          $$0189249$be = $$0189249284;$$0194248$be = $$0194248285;$$be = $28;
          break L7;
          break;
         }
         case 3:  {
          $31 = ((($18)) + 4|0);
          $32 = HEAP32[$31>>2]|0;
          $33 = ((($32)) + 4|0);
          $34 = HEAP32[$33>>2]|0;
          $35 = (_tre_stack_push_voidptr($1,$34)|0);
          $36 = ($35|0)==(0);
          if (!($36)) {
           $$0167$lcssa = $35;$$0189249$lcssa = $$0189249284;
           break L4;
          }
          $37 = (_tre_stack_push_int($1,0)|0);
          $38 = ($37|0)==(0);
          if (!($38)) {
           $$0167$lcssa = $37;$$0189249$lcssa = $$0189249284;
           break L4;
          }
          $39 = HEAP32[$32>>2]|0;
          $40 = (_tre_stack_push_voidptr($1,$39)|0);
          $41 = ($40|0)==(0);
          if (!($41)) {
           $$0167$lcssa = $40;$$0189249$lcssa = $$0189249284;
           break L4;
          }
          break;
         }
         case 1:  {
          $42 = ((($18)) + 4|0);
          $43 = HEAP32[$42>>2]|0;
          $44 = ((($43)) + 4|0);
          $45 = HEAP32[$44>>2]|0;
          $46 = (_tre_stack_push_voidptr($1,$45)|0);
          $47 = ($46|0)==(0);
          if (!($47)) {
           $$0167$lcssa = $46;$$0189249$lcssa = $$0189249284;
           break L4;
          }
          $48 = (_tre_stack_push_int($1,0)|0);
          $49 = ($48|0)==(0);
          if (!($49)) {
           $$0167$lcssa = $48;$$0189249$lcssa = $$0189249284;
           break L4;
          }
          $50 = HEAP32[$43>>2]|0;
          $51 = (_tre_stack_push_voidptr($1,$50)|0);
          $52 = ($51|0)==(0);
          if (!($52)) {
           $$0167$lcssa = $51;$$0189249$lcssa = $$0189249284;
           break L4;
          }
          break;
         }
         case 2:  {
          $53 = ((($18)) + 4|0);
          $54 = HEAP32[$53>>2]|0;
          $55 = (_tre_stack_push_int($1,$28)|0);
          $56 = ($55|0)==(0);
          if (!($56)) {
           $$0167$lcssa = $55;$$0189249$lcssa = $$0189249284;
           break L4;
          }
          $57 = (_tre_stack_push_voidptr($1,$18)|0);
          $58 = ($57|0)==(0);
          if (!($58)) {
           $$0167$lcssa = $57;$$0189249$lcssa = $$0189249284;
           break L4;
          }
          $59 = (_tre_stack_push_int($1,1)|0);
          $60 = ($59|0)==(0);
          if (!($60)) {
           $$0167$lcssa = $59;$$0189249$lcssa = $$0189249284;
           break L4;
          }
          $61 = HEAP32[$54>>2]|0;
          $62 = (_tre_stack_push_voidptr($1,$61)|0);
          $63 = ($62|0)==(0);
          if (!($63)) {
           $$0167$lcssa = $62;$$0189249$lcssa = $$0189249284;
           break L4;
          }
          $64 = (_tre_stack_push_int($1,0)|0);
          $65 = ($64|0)==(0);
          if (!($65)) {
           $$0167$lcssa = $64;$$0189249$lcssa = $$0189249284;
           break L4;
          }
          $66 = ((($54)) + 4|0);
          $67 = HEAP32[$66>>2]|0;
          $68 = ($67|0)>(1);
          if ($68) {
           label = 22;
          } else {
           $69 = ((($54)) + 8|0);
           $70 = HEAP32[$69>>2]|0;
           $71 = ($70|0)>(1);
           if ($71) {
            label = 22;
           } else {
            $152 = $28;
           }
          }
          if ((label|0) == 22) {
           label = 0;
           HEAP32[$5>>2] = 0;
           $152 = 0;
          }
          $72 = (($$0194248285) + 1)|0;
          $$0189249$be = $$0189249284;$$0194248$be = $72;$$be = $152;
          break L7;
          break;
         }
         default: {
          $$0189249$be = $$0189249284;$$0194248$be = $$0194248285;$$be = $28;
          break L7;
         }
         }
         $73 = (_tre_stack_push_int($1,0)|0);
         $74 = ($73|0)==(0);
         if ($74) {
          $$0189249$be = $$0189249284;$$0194248$be = $$0194248285;$$be = $28;
         } else {
          $$0167$lcssa = $73;$$0189249$lcssa = $$0189249284;
          break L4;
         }
         break;
        }
        case 1:  {
         $77 = ((($18)) + 4|0);
         $78 = HEAP32[$77>>2]|0;
         $79 = (_tre_stack_pop_int($1)|0);
         HEAP32[$5>>2] = $79;
         $80 = ((($78)) + 4|0);
         $81 = HEAP32[$80>>2]|0;
         $82 = ($81|0)>(1);
         if ($82) {
          HEAP32[$7>>2] = 0;
          label = 30;
         } else {
          $83 = ((($78)) + 8|0);
          $84 = HEAP32[$83>>2]|0;
          $85 = ($84|0)>(1);
          if ($85) {
           HEAP32[$7>>2] = 0;
           $86 = ($81|0)>(0);
           if ($86) {
            label = 30;
           } else {
            $$0180$lcssa = $79;$$0185$lcssa = 0;$$lcssa = $81;
            label = 37;
           }
          } else {
           $145 = $79;
          }
         }
         L36: do {
          if ((label|0) == 30) {
           label = 0;
           $87 = ($81|0)>(1);
           $88 = $87 ? 1 : 2;
           $89 = HEAP32[$78>>2]|0;
           $90 = (_tre_copy_ast($0,$1,$89,$88,$5,$4,$8,$6)|0);
           $91 = ($90|0)==(0);
           if ($91) {
            $$0185241279 = 0;$153 = $79;$98 = 1;
           } else {
            $$4$ph = $90;
            label = 34;
            break L5;
           }
           while(1) {
            $92 = ($$0185241279|0)==(0|0);
            $93 = HEAP32[$8>>2]|0;
            if ($92) {
             $$1186 = $93;
            } else {
             $94 = (_tre_ast_new_catenation($0,$$0185241279,$93)|0);
             $$1186 = $94;
            }
            $95 = ($$1186|0)==(0|0);
            if ($95) {
             $$4$ph = 12;
             label = 34;
             break L5;
            }
            $96 = HEAP32[$80>>2]|0;
            $97 = ($98|0)<($96|0);
            if (!($97)) {
             $$0180$lcssa = $153;$$0185$lcssa = $$1186;$$lcssa = $96;
             label = 37;
             break L36;
            }
            $$pre = HEAP32[$5>>2]|0;
            $99 = (($98) + 1)|0;
            $100 = ($99|0)<($96|0);
            $101 = $100 ? 1 : 2;
            $102 = HEAP32[$78>>2]|0;
            $103 = (_tre_copy_ast($0,$1,$102,$101,$5,$4,$8,$6)|0);
            $104 = ($103|0)==(0);
            if ($104) {
             $$0185241279 = $$1186;$153 = $$pre;$98 = $99;
            } else {
             $$4$ph = $103;
             label = 34;
             break L5;
            }
           }
          }
         } while(0);
         if ((label|0) == 37) {
          label = 0;
          $105 = ((($78)) + 8|0);
          $106 = HEAP32[$105>>2]|0;
          $107 = ($106|0)==(-1);
          if ($107) {
           $109 = HEAP32[$5>>2]|0;
           $110 = HEAP32[$78>>2]|0;
           $111 = (_tre_copy_ast($0,$1,$110,0,$5,0,$7,$6)|0);
           $112 = ($111|0)==(0);
           if (!($112)) {
            $$8$ph = $111;
            break L5;
           }
           $113 = HEAP32[$7>>2]|0;
           $114 = (_tre_ast_new_iter($0,$113,0,-1,0)|0);
           HEAP32[$7>>2] = $114;
           $115 = ($114|0)==(0|0);
           if ($115) {
            $$8$ph = 12;
            break L5;
           } else {
            $$2182 = $109;$137 = $114;
           }
          } else {
           $108 = ($$lcssa|0)<($106|0);
           if ($108) {
            $$1184245 = $$lcssa;$121 = 0;
            while(1) {
             $116 = HEAP32[$5>>2]|0;
             $117 = HEAP32[$78>>2]|0;
             $118 = (_tre_copy_ast($0,$1,$117,0,$5,0,$9,$6)|0);
             $119 = ($118|0)==(0);
             if (!($119)) {
              $$6$ph = $118;
              label = 49;
              break L5;
             }
             $120 = ($121|0)==(0|0);
             if ($120) {
              $124 = HEAP32[$9>>2]|0;
              HEAP32[$7>>2] = $124;
              $125 = $124;
              $127 = $125;
             } else {
              $122 = HEAP32[$9>>2]|0;
              $123 = (_tre_ast_new_catenation($0,$122,$121)|0);
              HEAP32[$7>>2] = $123;
              $127 = $123;
             }
             $126 = ($127|0)==(0|0);
             if ($126) {
              $$6$ph = 12;
              label = 49;
              break L5;
             }
             $128 = (_tre_ast_new_literal($0,-1,-1,-1)|0);
             $129 = ($128|0)==(0|0);
             if ($129) {
              $$6$ph = 12;
              label = 49;
              break L5;
             }
             $130 = (_tre_ast_new_union($0,$128,$127)|0);
             HEAP32[$7>>2] = $130;
             $131 = ($130|0)==(0|0);
             if ($131) {
              $$6$ph = 12;
              label = 49;
              break L5;
             }
             $132 = (($$1184245) + 1)|0;
             $133 = HEAP32[$105>>2]|0;
             $134 = ($132|0)<($133|0);
             if ($134) {
              $$1184245 = $132;$121 = $130;
             } else {
              $$2182 = $116;$137 = $130;
              break;
             }
            }
           } else {
            $$2182 = $$0180$lcssa;$137 = 0;
           }
          }
          HEAP32[$5>>2] = $$2182;
          $135 = ($$0185$lcssa|0)==(0|0);
          if ($135) {
           $$3188 = $137;
           label = 54;
          } else {
           $136 = ($137|0)==(0|0);
           if ($136) {
            $$3188217 = $$0185$lcssa;
           } else {
            $138 = (_tre_ast_new_catenation($0,$$0185$lcssa,$137)|0);
            $$3188 = $138;
            label = 54;
           }
          }
          if ((label|0) == 54) {
           label = 0;
           $139 = ($$3188|0)==(0|0);
           if ($139) {
            $$8$ph = 12;
            break L5;
           } else {
            $$3188217 = $$3188;
           }
          }
          $140 = ((($$3188217)) + 4|0);
          $141 = HEAP32[$140>>2]|0;
          HEAP32[$77>>2] = $141;
          $142 = HEAP32[$$3188217>>2]|0;
          HEAP32[$18>>2] = $142;
          $145 = $$2182;
         }
         $143 = (($$0194248285) + -1)|0;
         $144 = (($145) - ($79))|0;
         $146 = (($144) + ($$0189249284))|0;
         $147 = ($143|0)==(0);
         if ($147) {
          HEAP32[$5>>2] = $146;
          $$0189249$be = $146;$$0194248$be = 0;$$be = $146;
         } else {
          $$0189249$be = $146;$$0194248$be = $143;$$be = $145;
         }
         break;
        }
        default: {
         $$0189249$be = $$0189249284;$$0194248$be = $$0194248285;$$be = $28;
        }
        }
       } while(0);
       $75 = (_tre_stack_num_objects($1)|0);
       $76 = ($75|0)>($10|0);
       if ($76) {
        $$0189249284 = $$0189249$be;$$0194248285 = $$0194248$be;$28 = $$be;
       } else {
        $$0167$lcssa = 0;$$0189249$lcssa = $$0189249$be;
        break L4;
       }
      }
      if ((label|0) == 34) {
       $$8$ph = $$4$ph;
      }
      else if ((label|0) == 49) {
       $$8$ph = $$6$ph;
      }
      $$13 = $$8$ph;
      break L1;
     } else {
      $$0167$lcssa = 0;$$0189249$lcssa = 0;
     }
    } while(0);
    $148 = HEAP32[$3>>2]|0;
    $149 = (($148) + ($$0189249$lcssa))|0;
    $150 = HEAP32[$6>>2]|0;
    $151 = ($150|0)>($149|0);
    $$210 = $151 ? $150 : $149;
    HEAP32[$3>>2] = $$210;
    $$13 = $$0167$lcssa;
   } else {
    $$13 = $13;
   }
  } else {
   $$13 = $11;
  }
 } while(0);
 STACKTOP = sp;return ($$13|0);
}
function _tre_ast_new_literal($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (___tre_mem_alloc_impl($0,0,0,1,20)|0);
 $5 = (_tre_ast_new_node($0,0,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
 } else {
  HEAP32[$4>>2] = $1;
  $7 = ((($4)) + 4|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($4)) + 8|0);
  HEAP32[$8>>2] = $3;
  $$0 = $5;
 }
 return ($$0|0);
}
function _tre_ast_new_catenation($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0|0);
 if ($3) {
  $$0 = $2;
 } else {
  $4 = (___tre_mem_alloc_impl($0,0,0,1,8)|0);
  $5 = (_tre_ast_new_node($0,1,$4)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   $$0 = 0;
  } else {
   HEAP32[$4>>2] = $1;
   $7 = ((($4)) + 4|0);
   HEAP32[$7>>2] = $2;
   $8 = ((($1)) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($2)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + ($9))|0;
   $13 = ((($5)) + 16|0);
   HEAP32[$13>>2] = $12;
   $$0 = $5;
  }
 }
 return ($$0|0);
}
function _tre_compute_nfl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$21$ph = 0, $$24 = 0, $$316 = 0, $$pre = 0, $$pre$phi390Z2D = 0, $$pre389 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (_tre_stack_num_objects($1)|0);
 $6 = (_tre_stack_push_voidptr($1,$2)|0);
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $8 = (_tre_stack_push_int($1,0)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = (_tre_stack_num_objects($1)|0);
    $11 = ($10|0)>($5|0);
    if ($11) {
     L5: while(1) {
      $12 = (_tre_stack_pop_int($1)|0);
      $13 = (_tre_stack_pop_voidptr($1)|0);
      L7: do {
       switch ($12|0) {
       case 0:  {
        $14 = HEAP32[$13>>2]|0;
        switch ($14|0) {
        case 0:  {
         $15 = ((($13)) + 4|0);
         $16 = HEAP32[$15>>2]|0;
         $17 = HEAP32[$16>>2]|0;
         $18 = ($17|0)==(-4);
         if ($18) {
          $19 = ((($13)) + 8|0);
          HEAP32[$19>>2] = 0;
          $20 = ((($16)) + 8|0);
          $21 = HEAP32[$20>>2]|0;
          $22 = (_tre_set_one($0,$21,0,1114111,0,0,-1)|0);
          $23 = ((($13)) + 24|0);
          HEAP32[$23>>2] = $22;
          $24 = ($22|0)==(0|0);
          if ($24) {
           $$24 = 12;
           break L1;
          }
          $25 = HEAP32[$20>>2]|0;
          $26 = ((($16)) + 4|0);
          $27 = HEAP32[$26>>2]|0;
          $28 = (_tre_set_one($0,$25,0,1114111,0,0,$27)|0);
          $29 = ((($13)) + 28|0);
          HEAP32[$29>>2] = $28;
          $30 = ($28|0)==(0|0);
          if ($30) {
           $$24 = 12;
           break L1;
          } else {
           break L7;
          }
         }
         $31 = ($17|0)<(0);
         $32 = ((($13)) + 8|0);
         if ($31) {
          HEAP32[$32>>2] = 1;
          $33 = (_tre_set_empty($0)|0);
          $34 = ((($13)) + 24|0);
          HEAP32[$34>>2] = $33;
          $35 = ($33|0)==(0|0);
          if ($35) {
           $$24 = 12;
           break L1;
          }
          $36 = (_tre_set_empty($0)|0);
          $37 = ((($13)) + 28|0);
          HEAP32[$37>>2] = $36;
          $38 = ($36|0)==(0|0);
          if ($38) {
           $$24 = 12;
           break L1;
          } else {
           break L7;
          }
         } else {
          HEAP32[$32>>2] = 0;
          $39 = ((($16)) + 8|0);
          $40 = HEAP32[$39>>2]|0;
          $41 = ((($16)) + 4|0);
          $42 = HEAP32[$41>>2]|0;
          $43 = (_tre_set_one($0,$40,$17,$42,0,0,-1)|0);
          $44 = ((($13)) + 24|0);
          HEAP32[$44>>2] = $43;
          $45 = ($43|0)==(0|0);
          if ($45) {
           $$24 = 12;
           break L1;
          }
          $46 = HEAP32[$39>>2]|0;
          $47 = HEAP32[$16>>2]|0;
          $48 = HEAP32[$41>>2]|0;
          $49 = ((($16)) + 12|0);
          $50 = HEAP32[$49>>2]|0;
          $51 = ((($16)) + 16|0);
          $52 = HEAP32[$51>>2]|0;
          $53 = (_tre_set_one($0,$46,$47,$48,$50,$52,-1)|0);
          $54 = ((($13)) + 28|0);
          HEAP32[$54>>2] = $53;
          $55 = ($53|0)==(0|0);
          if ($55) {
           $$24 = 12;
           break L1;
          } else {
           break L7;
          }
         }
         break;
        }
        case 3:  {
         $56 = (_tre_stack_push_voidptr($1,$13)|0);
         $57 = ($56|0)==(0);
         if (!($57)) {
          $$24 = $56;
          break L1;
         }
         $58 = (_tre_stack_push_int($1,1)|0);
         $59 = ($58|0)==(0);
         if (!($59)) {
          $$24 = $58;
          break L1;
         }
         $60 = ((($13)) + 4|0);
         $61 = HEAP32[$60>>2]|0;
         $62 = ((($61)) + 4|0);
         $63 = HEAP32[$62>>2]|0;
         $64 = (_tre_stack_push_voidptr($1,$63)|0);
         $65 = ($64|0)==(0);
         if (!($65)) {
          $$24 = $64;
          break L1;
         }
         $66 = (_tre_stack_push_int($1,0)|0);
         $67 = ($66|0)==(0);
         if (!($67)) {
          $$24 = $66;
          break L1;
         }
         $68 = HEAP32[$60>>2]|0;
         $69 = HEAP32[$68>>2]|0;
         $70 = (_tre_stack_push_voidptr($1,$69)|0);
         $71 = ($70|0)==(0);
         if (!($71)) {
          $$24 = $70;
          break L1;
         }
         $72 = (_tre_stack_push_int($1,0)|0);
         $73 = ($72|0)==(0);
         if ($73) {
          break L7;
         } else {
          $$24 = $72;
          break L1;
         }
         break;
        }
        case 1:  {
         $74 = (_tre_stack_push_voidptr($1,$13)|0);
         $75 = ($74|0)==(0);
         if (!($75)) {
          $$24 = $74;
          break L1;
         }
         $76 = (_tre_stack_push_int($1,2)|0);
         $77 = ($76|0)==(0);
         if (!($77)) {
          $$24 = $76;
          break L1;
         }
         $78 = ((($13)) + 4|0);
         $79 = HEAP32[$78>>2]|0;
         $80 = ((($79)) + 4|0);
         $81 = HEAP32[$80>>2]|0;
         $82 = (_tre_stack_push_voidptr($1,$81)|0);
         $83 = ($82|0)==(0);
         if (!($83)) {
          $$24 = $82;
          break L1;
         }
         $84 = (_tre_stack_push_int($1,0)|0);
         $85 = ($84|0)==(0);
         if (!($85)) {
          $$24 = $84;
          break L1;
         }
         $86 = HEAP32[$78>>2]|0;
         $87 = HEAP32[$86>>2]|0;
         $88 = (_tre_stack_push_voidptr($1,$87)|0);
         $89 = ($88|0)==(0);
         if (!($89)) {
          $$24 = $88;
          break L1;
         }
         $90 = (_tre_stack_push_int($1,0)|0);
         $91 = ($90|0)==(0);
         if ($91) {
          break L7;
         } else {
          $$24 = $90;
          break L1;
         }
         break;
        }
        case 2:  {
         $92 = (_tre_stack_push_voidptr($1,$13)|0);
         $93 = ($92|0)==(0);
         if (!($93)) {
          $$24 = $92;
          break L1;
         }
         $94 = (_tre_stack_push_int($1,3)|0);
         $95 = ($94|0)==(0);
         if (!($95)) {
          $$24 = $94;
          break L1;
         }
         $96 = ((($13)) + 4|0);
         $97 = HEAP32[$96>>2]|0;
         $98 = HEAP32[$97>>2]|0;
         $99 = (_tre_stack_push_voidptr($1,$98)|0);
         $100 = ($99|0)==(0);
         if (!($100)) {
          $$24 = $99;
          break L1;
         }
         $101 = (_tre_stack_push_int($1,0)|0);
         $102 = ($101|0)==(0);
         if ($102) {
          break L7;
         } else {
          $$24 = $101;
          break L1;
         }
         break;
        }
        default: {
         break L7;
        }
        }
        break;
       }
       case 1:  {
        $103 = ((($13)) + 4|0);
        $104 = HEAP32[$103>>2]|0;
        $105 = HEAP32[$104>>2]|0;
        $106 = ((($105)) + 8|0);
        $107 = HEAP32[$106>>2]|0;
        $108 = ($107|0)==(0);
        $109 = ((($104)) + 4|0);
        $110 = HEAP32[$109>>2]|0;
        if ($108) {
         $111 = ((($110)) + 8|0);
         $112 = HEAP32[$111>>2]|0;
         $113 = ($112|0)!=(0);
         $115 = $113;
        } else {
         $115 = 1;
        }
        $114 = $115&1;
        $116 = ((($13)) + 8|0);
        HEAP32[$116>>2] = $114;
        $117 = ((($105)) + 24|0);
        $118 = HEAP32[$117>>2]|0;
        $119 = ((($110)) + 24|0);
        $120 = HEAP32[$119>>2]|0;
        $121 = (_tre_set_union($0,$118,$120,0,0)|0);
        $122 = ((($13)) + 24|0);
        HEAP32[$122>>2] = $121;
        $123 = ($121|0)==(0|0);
        if ($123) {
         $$24 = 12;
         break L1;
        }
        $124 = HEAP32[$104>>2]|0;
        $125 = ((($124)) + 28|0);
        $126 = HEAP32[$125>>2]|0;
        $127 = HEAP32[$109>>2]|0;
        $128 = ((($127)) + 28|0);
        $129 = HEAP32[$128>>2]|0;
        $130 = (_tre_set_union($0,$126,$129,0,0)|0);
        $131 = ((($13)) + 28|0);
        HEAP32[$131>>2] = $130;
        $132 = ($130|0)==(0|0);
        if ($132) {
         $$24 = 12;
         break L1;
        }
        break;
       }
       case 3:  {
        $133 = ((($13)) + 4|0);
        $134 = HEAP32[$133>>2]|0;
        $135 = ((($134)) + 4|0);
        $136 = HEAP32[$135>>2]|0;
        $137 = ($136|0)==(0);
        $$pre = HEAP32[$134>>2]|0;
        if ($137) {
         $$sink = 1;
        } else {
         $138 = ((($$pre)) + 8|0);
         $139 = HEAP32[$138>>2]|0;
         $140 = ($139|0)!=(0);
         $$316 = $140&1;
         $$sink = $$316;
        }
        $141 = ((($13)) + 8|0);
        HEAP32[$141>>2] = $$sink;
        $142 = ((($$pre)) + 24|0);
        $143 = HEAP32[$142>>2]|0;
        $144 = ((($13)) + 24|0);
        HEAP32[$144>>2] = $143;
        $145 = ((($$pre)) + 28|0);
        $146 = HEAP32[$145>>2]|0;
        $147 = ((($13)) + 28|0);
        HEAP32[$147>>2] = $146;
        break;
       }
       case 2:  {
        $150 = ((($13)) + 4|0);
        $151 = HEAP32[$150>>2]|0;
        $152 = HEAP32[$151>>2]|0;
        $153 = ((($152)) + 8|0);
        $154 = HEAP32[$153>>2]|0;
        $155 = ($154|0)==(0);
        if ($155) {
         $162 = 0;
        } else {
         $156 = ((($151)) + 4|0);
         $157 = HEAP32[$156>>2]|0;
         $158 = ((($157)) + 8|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = ($159|0)!=(0);
         $162 = $160;
        }
        $161 = $162&1;
        $163 = ((($13)) + 8|0);
        HEAP32[$163>>2] = $161;
        $164 = HEAP32[$153>>2]|0;
        $165 = ($164|0)==(0);
        if ($165) {
         $188 = ((($152)) + 24|0);
         $189 = HEAP32[$188>>2]|0;
         $190 = ((($13)) + 24|0);
         HEAP32[$190>>2] = $189;
         $$pre389 = ((($151)) + 4|0);
         $$pre$phi390Z2D = $$pre389;
        } else {
         $166 = (_tre_match_empty($1,$152,0,0,$3)|0);
         $167 = ($166|0)==(0);
         if (!($167)) {
          $$21$ph = $166;
          break L5;
         }
         $168 = HEAP32[$3>>2]|0;
         $169 = $168 << 2;
         $170 = (($169) + 4)|0;
         $171 = (_malloc($170)|0);
         $172 = ($171|0)==(0|0);
         if ($172) {
          $$21$ph = 12;
          break L5;
         }
         HEAP32[$171>>2] = -1;
         HEAP32[$4>>2] = 0;
         $173 = HEAP32[$151>>2]|0;
         $174 = (_tre_match_empty($1,$173,$171,$4,0)|0);
         $175 = ($174|0)==(0);
         if (!($175)) {
          label = 45;
          break L5;
         }
         $176 = ((($151)) + 4|0);
         $177 = HEAP32[$176>>2]|0;
         $178 = ((($177)) + 24|0);
         $179 = HEAP32[$178>>2]|0;
         $180 = HEAP32[$151>>2]|0;
         $181 = ((($180)) + 24|0);
         $182 = HEAP32[$181>>2]|0;
         $183 = HEAP32[$4>>2]|0;
         $184 = (_tre_set_union($0,$179,$182,$171,$183)|0);
         $185 = ((($13)) + 24|0);
         HEAP32[$185>>2] = $184;
         _free($171);
         $186 = HEAP32[$185>>2]|0;
         $187 = ($186|0)==(0|0);
         if ($187) {
          $$21$ph = 12;
          break L5;
         } else {
          $$pre$phi390Z2D = $176;
         }
        }
        $191 = HEAP32[$$pre$phi390Z2D>>2]|0;
        $192 = ((($191)) + 8|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==(0);
        if ($194) {
         $216 = ((($191)) + 28|0);
         $217 = HEAP32[$216>>2]|0;
         $218 = ((($13)) + 28|0);
         HEAP32[$218>>2] = $217;
        } else {
         $195 = (_tre_match_empty($1,$191,0,0,$3)|0);
         $196 = ($195|0)==(0);
         if (!($196)) {
          $$21$ph = $195;
          break L5;
         }
         $197 = HEAP32[$3>>2]|0;
         $198 = $197 << 2;
         $199 = (($198) + 4)|0;
         $200 = (_malloc($199)|0);
         $201 = ($200|0)==(0|0);
         if ($201) {
          $$21$ph = 12;
          break L5;
         }
         HEAP32[$200>>2] = -1;
         HEAP32[$4>>2] = 0;
         $202 = HEAP32[$$pre$phi390Z2D>>2]|0;
         $203 = (_tre_match_empty($1,$202,$200,$4,0)|0);
         $204 = ($203|0)==(0);
         if (!($204)) {
          label = 52;
          break L5;
         }
         $205 = HEAP32[$151>>2]|0;
         $206 = ((($205)) + 28|0);
         $207 = HEAP32[$206>>2]|0;
         $208 = HEAP32[$$pre$phi390Z2D>>2]|0;
         $209 = ((($208)) + 28|0);
         $210 = HEAP32[$209>>2]|0;
         $211 = HEAP32[$4>>2]|0;
         $212 = (_tre_set_union($0,$207,$210,$200,$211)|0);
         $213 = ((($13)) + 28|0);
         HEAP32[$213>>2] = $212;
         _free($200);
         $214 = HEAP32[$213>>2]|0;
         $215 = ($214|0)==(0|0);
         if ($215) {
          $$21$ph = 12;
          break L5;
         }
        }
        break;
       }
       default: {
       }
       }
      } while(0);
      $148 = (_tre_stack_num_objects($1)|0);
      $149 = ($148|0)>($5|0);
      if (!($149)) {
       $$24 = 0;
       break L1;
      }
     }
     if ((label|0) == 45) {
      _free($171);
      $$21$ph = $174;
     }
     else if ((label|0) == 52) {
      _free($200);
      $$21$ph = $203;
     }
     $$24 = $$21$ph;
    } else {
     $$24 = 0;
    }
   } else {
    $$24 = $8;
   }
  } else {
   $$24 = $6;
  }
 } while(0);
 STACKTOP = sp;return ($$24|0);
}
function _tre_ast_to_tnfa($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$051 = 0, $$sink52 = 0, $$tr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$tr = $0;
 L1: while(1) {
  $4 = HEAP32[$$tr>>2]|0;
  switch ($4|0) {
  case 2:  {
   $25 = ((($$tr)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(-1);
   if ($29) {
    $30 = HEAP32[$26>>2]|0;
    $31 = ((($30)) + 28|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ((($30)) + 24|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (_tre_make_trans($32,$34,$1,$2,$3)|0);
    $36 = ($35|0)==(0);
    if ($36) {
     $$sink52 = $26;
    } else {
     $$051 = $35;
     break L1;
    }
   } else {
    $$sink52 = $26;
   }
   break;
  }
  case 3:  {
   $5 = ((($$tr)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = HEAP32[$6>>2]|0;
   $8 = (_tre_ast_to_tnfa($7,$1,$2,$3)|0);
   $9 = ($8|0)==(0);
   if (!($9)) {
    $$051 = $8;
    break L1;
   }
   $10 = ((($6)) + 4|0);
   $$sink52 = $10;
   break;
  }
  case 1:  {
   $11 = ((($$tr)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($13)) + 28|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($12)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 24|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (_tre_make_trans($15,$19,$1,$2,$3)|0);
   $21 = ($20|0)==(0);
   if (!($21)) {
    $$051 = $20;
    break L1;
   }
   $22 = HEAP32[$12>>2]|0;
   $23 = (_tre_ast_to_tnfa($22,$1,$2,$3)|0);
   $24 = ($23|0)==(0);
   if ($24) {
    $$sink52 = $16;
   } else {
    $$051 = $23;
    break L1;
   }
   break;
  }
  default: {
   $$051 = 0;
   break L1;
  }
  }
  $37 = HEAP32[$$sink52>>2]|0;
  $$tr = $37;
 }
 return ($$051|0);
}
function ___tre_mem_destroy($0) {
 $0 = $0|0;
 var $$in1011 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$in1011 = $1;
  while(1) {
   $3 = HEAP32[$$in1011>>2]|0;
   _free($3);
   $4 = ((($$in1011)) + 4|0);
   $5 = HEAP32[$4>>2]|0;
   _free($$in1011);
   $6 = ($5|0)==(0|0);
   if ($6) {
    break;
   } else {
    $$in1011 = $5;
   }
  }
 }
 _free($0);
 return;
}
function _regfree($0) {
 $0 = $0|0;
 var $$04250 = 0, $$047 = 0, $$146 = 0, $$lcssa = 0, $$lcssa45 = 0, $$pre = 0, $$pre57 = 0, $$pre58 = 0, $$pre59 = 0, $$pre60 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($2)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  $7 = HEAP32[$2>>2]|0;
  if ($6) {
   $$lcssa45 = $7;
  } else {
   $$04250 = 0;$9 = $7;
   while(1) {
    $8 = (((($9) + ($$04250<<5)|0)) + 8|0);
    $10 = HEAP32[$8>>2]|0;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $59 = $9;
    } else {
     $12 = (((($9) + ($$04250<<5)|0)) + 16|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)==(0|0);
     if ($14) {
      $16 = $9;
     } else {
      _free($13);
      $$pre = HEAP32[$2>>2]|0;
      $16 = $$pre;
     }
     $15 = (((($16) + ($$04250<<5)|0)) + 28|0);
     $17 = HEAP32[$15>>2]|0;
     $18 = ($17|0)==(0|0);
     if ($18) {
      $59 = $16;
     } else {
      _free($17);
      $$pre57 = HEAP32[$2>>2]|0;
      $59 = $$pre57;
     }
    }
    $19 = (($$04250) + 1)|0;
    $20 = HEAP32[$4>>2]|0;
    $21 = ($19>>>0)<($20>>>0);
    if ($21) {
     $$04250 = $19;$9 = $59;
    } else {
     $$lcssa45 = $59;
     break;
    }
   }
  }
  $22 = ($$lcssa45|0)==(0|0);
  if (!($22)) {
   _free($$lcssa45);
  }
  $23 = ((($2)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   $26 = ((($24)) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    $36 = $24;
   } else {
    $$047 = $24;
    while(1) {
     $29 = ((($$047)) + 16|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==(0|0);
     if (!($31)) {
      _free($30);
     }
     $32 = ((($$047)) + 32|0);
     $33 = ((($$047)) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)==(0|0);
     if ($35) {
      break;
     } else {
      $$047 = $32;
     }
    }
    $$pre58 = HEAP32[$23>>2]|0;
    $36 = $$pre58;
   }
   _free($36);
  }
  $37 = ((($2)) + 16|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0|0);
  if (!($39)) {
   $40 = ((($2)) + 28|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(0);
   if ($42) {
    $$lcssa = $38;
   } else {
    $$146 = 0;$44 = $38;$60 = $41;
    while(1) {
     $43 = (((($44) + (($$146*12)|0)|0)) + 8|0);
     $45 = HEAP32[$43>>2]|0;
     $46 = ($45|0)==(0|0);
     if ($46) {
      $49 = $60;$61 = $44;
     } else {
      _free($45);
      $$pre59 = HEAP32[$40>>2]|0;
      $$pre60 = HEAP32[$37>>2]|0;
      $49 = $$pre59;$61 = $$pre60;
     }
     $47 = (($$146) + 1)|0;
     $48 = ($47>>>0)<($49>>>0);
     if ($48) {
      $$146 = $47;$44 = $61;$60 = $49;
     } else {
      $$lcssa = $61;
      break;
     }
    }
   }
   _free($$lcssa);
  }
  $50 = ((($2)) + 32|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==(0|0);
  if (!($52)) {
   _free($51);
  }
  $53 = ((($2)) + 20|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)==(0|0);
  if (!($55)) {
   _free($54);
  }
  $56 = ((($2)) + 36|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)==(0|0);
  if (!($58)) {
   _free($57);
  }
  _free($2);
 }
 return;
}
function _tre_make_trans($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$ph175 = 0, $$0119171 = 0, $$0120167 = 0, $$0121 = 0, $$0124 = 0, $$0127 = 0, $$0128 = 0, $$0131$ph174 = 0, $$0131158 = 0, $$1 = 0, $$1122 = 0, $$1125161 = 0, $$2 = 0, $$2123169 = 0, $$2126 = 0, $$3 = 0, $$4164 = 0, $$5 = 0, $$lcssa155 = 0, $$pre189 = 0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($2|0)==(0|0);
 $6 = HEAP32[$0>>2]|0;
 $7 = ($6|0)>(-1);
 L1: do {
  if ($5) {
   if ($7) {
    $8 = ((($1)) + 32|0);
    $137 = $6;$142 = $0;
    while(1) {
     $134 = HEAP32[$1>>2]|0;
     $135 = ($134|0)>(-1);
     if ($135) {
      $136 = (($3) + ($137<<2)|0);
      $138 = HEAP32[$136>>2]|0;
      $139 = (($138) + 1)|0;
      HEAP32[$136>>2] = $139;
      $140 = HEAP32[$8>>2]|0;
      $141 = ($140|0)>(-1);
      if ($141) {
       $147 = $8;
       while(1) {
        $$pre189 = HEAP32[$142>>2]|0;
        $143 = (($3) + ($$pre189<<2)|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = (($144) + 1)|0;
        HEAP32[$143>>2] = $145;
        $146 = ((($147)) + 32|0);
        $148 = HEAP32[$146>>2]|0;
        $149 = ($148|0)>(-1);
        if ($149) {
         $147 = $146;
        } else {
         break;
        }
       }
      }
     }
     $150 = ((($142)) + 32|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)>(-1);
     if ($152) {
      $137 = $151;$142 = $150;
     } else {
      $$0128 = 0;
      break;
     }
    }
   } else {
    $$0128 = 0;
   }
  } else {
   if ($7) {
    $12 = $0;
    while(1) {
     $9 = HEAP32[$1>>2]|0;
     $10 = ($9|0)>(-1);
     L15: do {
      if ($10) {
       $11 = ((($12)) + 4|0);
       $13 = ((($12)) + 8|0);
       $14 = ((($12)) + 16|0);
       $15 = ((($12)) + 20|0);
       $16 = ((($12)) + 24|0);
       $17 = ((($12)) + 28|0);
       $18 = ((($12)) + 12|0);
       $$0$ph175 = -1;$$0131$ph174 = $1;$153 = $9;
       while(1) {
        $$0131158 = $$0131$ph174;$20 = $153;
        while(1) {
         $19 = ($20|0)==($$0$ph175|0);
         if (!($19)) {
          break;
         }
         $21 = ((($$0131158)) + 32|0);
         $22 = HEAP32[$21>>2]|0;
         $23 = ($22|0)>(-1);
         if ($23) {
          $$0131158 = $21;$20 = $22;
         } else {
          break L15;
         }
        }
        $24 = HEAP32[$12>>2]|0;
        $25 = (($4) + ($24<<2)|0);
        $26 = HEAP32[$25>>2]|0;
        $27 = (($2) + ($26<<5)|0);
        $$0127 = $27;
        while(1) {
         $28 = ((($$0127)) + 8|0);
         $29 = HEAP32[$28>>2]|0;
         $30 = ($29|0)==(0|0);
         $31 = ((($$0127)) + 32|0);
         if ($30) {
          break;
         } else {
          $$0127 = $31;
         }
        }
        $32 = ((($$0127)) + 40|0);
        HEAP32[$32>>2] = 0;
        $33 = HEAP32[$11>>2]|0;
        HEAP32[$$0127>>2] = $33;
        $34 = HEAP32[$13>>2]|0;
        $35 = ((($$0127)) + 4|0);
        HEAP32[$35>>2] = $34;
        $36 = (($4) + ($20<<2)|0);
        $37 = HEAP32[$36>>2]|0;
        $38 = (($2) + ($37<<5)|0);
        HEAP32[$28>>2] = $38;
        $39 = ((($$0127)) + 12|0);
        HEAP32[$39>>2] = $20;
        $40 = HEAP32[$14>>2]|0;
        $41 = ((($$0131158)) + 16|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = $42 | $40;
        $44 = HEAP32[$15>>2]|0;
        $45 = ($44|0)!=(0);
        $46 = $45 ? 4 : 0;
        $47 = $43 | $46;
        $48 = HEAP32[$16>>2]|0;
        $49 = ($48|0)!=(0|0);
        $50 = $49 ? 8 : 0;
        $51 = $47 | $50;
        $52 = ((($$0127)) + 20|0);
        HEAP32[$52>>2] = $51;
        $53 = HEAP32[$17>>2]|0;
        $54 = ($53|0)>(-1);
        if ($54) {
         $55 = $51 | 256;
         HEAP32[$52>>2] = $55;
         $$sink = $53;
        } else {
         $$sink = $44;
        }
        $56 = ((($$0127)) + 24|0);
        HEAP32[$56>>2] = $$sink;
        $57 = HEAP32[$16>>2]|0;
        $58 = ($57|0)==(0|0);
        if ($58) {
         $77 = ((($$0127)) + 28|0);
         HEAP32[$77>>2] = 0;
        } else {
         $$0124 = 0;
         while(1) {
          $59 = (($57) + ($$0124<<2)|0);
          $60 = HEAP32[$59>>2]|0;
          $61 = ($60|0)==(0);
          $62 = (($$0124) + 1)|0;
          if ($61) {
           break;
          } else {
           $$0124 = $62;
          }
         }
         $63 = $62 << 2;
         $64 = (_malloc($63)|0);
         $65 = ((($$0127)) + 28|0);
         HEAP32[$65>>2] = $64;
         $66 = ($64|0)==(0|0);
         if ($66) {
          $$0128 = 12;
          break L1;
         }
         $67 = HEAP32[$16>>2]|0;
         $68 = HEAP32[$67>>2]|0;
         $69 = ($68|0)==(0);
         if ($69) {
          $$lcssa155 = $64;
         } else {
          $$1125161 = 0;$70 = $68;$71 = $64;
          while(1) {
           HEAP32[$71>>2] = $70;
           $72 = (($$1125161) + 1)|0;
           $73 = (($67) + ($72<<2)|0);
           $74 = HEAP32[$73>>2]|0;
           $75 = ($74|0)==(0);
           $76 = (($64) + ($72<<2)|0);
           if ($75) {
            $$lcssa155 = $76;
            break;
           } else {
            $$1125161 = $72;$70 = $74;$71 = $76;
           }
          }
         }
         HEAP32[$$lcssa155>>2] = 0;
        }
        $78 = HEAP32[$18>>2]|0;
        $79 = ($78|0)==(0|0);
        if ($79) {
         $$3 = 0;
        } else {
         $$2126 = 0;
         while(1) {
          $80 = (($78) + ($$2126<<2)|0);
          $81 = HEAP32[$80>>2]|0;
          $82 = ($81|0)>(-1);
          $83 = (($$2126) + 1)|0;
          if ($82) {
           $$2126 = $83;
          } else {
           $$3 = $$2126;
           break;
          }
         }
        }
        $84 = ((($$0131158)) + 12|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = ($85|0)==(0|0);
        if ($86) {
         $$1122 = 0;
        } else {
         $$0121 = 0;
         while(1) {
          $87 = (($85) + ($$0121<<2)|0);
          $88 = HEAP32[$87>>2]|0;
          $89 = ($88|0)>(-1);
          $90 = (($$0121) + 1)|0;
          if ($89) {
           $$0121 = $90;
          } else {
           $$1122 = $$0121;
           break;
          }
         }
        }
        $91 = ((($$0127)) + 16|0);
        $92 = HEAP32[$91>>2]|0;
        $93 = ($92|0)==(0|0);
        if (!($93)) {
         _free($92);
        }
        HEAP32[$91>>2] = 0;
        $94 = (($$1122) + ($$3))|0;
        $95 = ($94|0)>(0);
        if ($95) {
         $96 = $94 << 2;
         $97 = (($96) + 4)|0;
         $98 = (_malloc($97)|0);
         HEAP32[$91>>2] = $98;
         $99 = ($98|0)==(0|0);
         if ($99) {
          $$0128 = 12;
          break L1;
         }
         $100 = HEAP32[$18>>2]|0;
         $101 = ($100|0)==(0|0);
         if ($101) {
          $$5 = 0;
         } else {
          $102 = HEAP32[$100>>2]|0;
          $103 = ($102|0)>(-1);
          if ($103) {
           $$4164 = 0;$105 = $102;
           while(1) {
            $104 = (($98) + ($$4164<<2)|0);
            HEAP32[$104>>2] = $105;
            $106 = (($$4164) + 1)|0;
            $107 = (($100) + ($106<<2)|0);
            $108 = HEAP32[$107>>2]|0;
            $109 = ($108|0)>(-1);
            if ($109) {
             $$4164 = $106;$105 = $108;
            } else {
             $$5 = $106;
             break;
            }
           }
          } else {
           $$5 = 0;
          }
         }
         $110 = HEAP32[$84>>2]|0;
         $111 = ($110|0)==(0|0);
         if ($111) {
          $$2 = $$5;
         } else {
          $112 = HEAP32[$110>>2]|0;
          $113 = ($112|0)>(-1);
          if ($113) {
           $114 = ($$5|0)>(0);
           $$0119171 = $$5;$$2123169 = 0;$120 = $112;
           while(1) {
            L64: do {
             if ($114) {
              $$0120167 = 0;
              while(1) {
               $117 = (($98) + ($$0120167<<2)|0);
               $118 = HEAP32[$117>>2]|0;
               $119 = ($118|0)==($120|0);
               $116 = (($$0120167) + 1)|0;
               if ($119) {
                $$1 = $$0119171;
                break L64;
               }
               $115 = ($116|0)<($$5|0);
               if ($115) {
                $$0120167 = $116;
               } else {
                label = 39;
                break;
               }
              }
             } else {
              label = 39;
             }
            } while(0);
            if ((label|0) == 39) {
             label = 0;
             $121 = (($$0119171) + 1)|0;
             $122 = (($98) + ($$0119171<<2)|0);
             HEAP32[$122>>2] = $120;
             $$1 = $121;
            }
            $123 = (($$2123169) + 1)|0;
            $124 = (($110) + ($123<<2)|0);
            $125 = HEAP32[$124>>2]|0;
            $126 = ($125|0)>(-1);
            if ($126) {
             $$0119171 = $$1;$$2123169 = $123;$120 = $125;
            } else {
             $$2 = $$1;
             break;
            }
           }
          } else {
           $$2 = $$5;
          }
         }
         $127 = (($98) + ($$2<<2)|0);
         HEAP32[$127>>2] = -1;
        }
        $128 = ((($$0131158)) + 32|0);
        $129 = HEAP32[$128>>2]|0;
        $130 = ($129|0)>(-1);
        if ($130) {
         $$0$ph175 = $20;$$0131$ph174 = $128;$153 = $129;
        } else {
         break;
        }
       }
      }
     } while(0);
     $131 = ((($12)) + 32|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($132|0)>(-1);
     if ($133) {
      $12 = $131;
     } else {
      $$0128 = 0;
      break;
     }
    }
   } else {
    $$0128 = 0;
   }
  }
 } while(0);
 return ($$0128|0);
}
function _tre_stack_num_objects($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _tre_stack_push_voidptr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
 $3 = (_tre_stack_push($0,$$byval_copy)|0);
 STACKTOP = sp;return ($3|0);
}
function _tre_stack_push_int($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
 $3 = (_tre_stack_push($0,$$byval_copy)|0);
 STACKTOP = sp;return ($3|0);
}
function _tre_stack_pop_int($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -1)|0;
 HEAP32[$3>>2] = $5;
 $6 = (($2) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 return ($7|0);
}
function _tre_stack_pop_voidptr($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -1)|0;
 HEAP32[$3>>2] = $5;
 $6 = (($2) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 return ($7|0);
}
function _tre_set_one($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (___tre_mem_alloc_impl($0,0,0,1,64)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = 0;
 } else {
  HEAP32[$7>>2] = $1;
  $9 = ((($7)) + 4|0);
  HEAP32[$9>>2] = $2;
  $10 = ((($7)) + 8|0);
  HEAP32[$10>>2] = $3;
  $11 = ((($7)) + 20|0);
  HEAP32[$11>>2] = $4;
  $12 = ((($7)) + 24|0);
  HEAP32[$12>>2] = $5;
  $13 = ((($7)) + 28|0);
  HEAP32[$13>>2] = $6;
  $14 = ((($7)) + 32|0);
  HEAP32[$14>>2] = -1;
  $15 = ((($7)) + 36|0);
  HEAP32[$15>>2] = -1;
  $16 = ((($7)) + 40|0);
  HEAP32[$16>>2] = -1;
  $$0 = $7;
 }
 return ($$0|0);
}
function _tre_set_empty($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___tre_mem_alloc_impl($0,0,0,1,32)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  HEAP32[$1>>2] = -1;
  $3 = ((($1)) + 4|0);
  HEAP32[$3>>2] = -1;
  $4 = ((($1)) + 8|0);
  HEAP32[$4>>2] = -1;
  $$0 = $1;
 }
 return ($$0|0);
}
function _tre_set_union($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$0173 = 0, $$0174$lcssa = 0, $$0174202 = 0, $$0175$lcssa = 0, $$0175197 = 0, $$0177 = 0, $$0179 = 0, $$0212 = 0, $$1$lcssa = 0, $$1176$lcssa = 0, $$1176205 = 0, $$1178193 = 0, $$1180$lcssa = 0, $$1180209 = 0, $$1192 = 0, $$2 = 0, $$lcssa = 0, $$sink = 0, $$sink5 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond = 0, $exitcond226 = 0, $exitcond227 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($3|0)==(0|0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$0212 = 0;
  while(1) {
   $6 = (($3) + ($$0212<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)>(-1);
   $9 = (($$0212) + 1)|0;
   if ($8) {
    $$0212 = $9;
   } else {
    $$0$lcssa = $$0212;
    break;
   }
  }
 }
 $$0179 = 0;
 while(1) {
  $10 = (($1) + ($$0179<<5)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)>(-1);
  $13 = (($$0179) + 1)|0;
  if ($12) {
   $$0179 = $13;
  } else {
   $$0177 = 0;
   break;
  }
 }
 while(1) {
  $14 = (($2) + ($$0177<<5)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)>(-1);
  $17 = (($$0177) + 1)|0;
  if ($16) {
   $$0177 = $17;
  } else {
   break;
  }
 }
 $18 = (($$0177) + ($$0179))|0;
 $19 = $18 << 5;
 $20 = (($19) + 32)|0;
 $21 = (___tre_mem_alloc_impl($0,0,0,1,$20)|0);
 $22 = ($21|0)==(0|0);
 L10: do {
  if ($22) {
   $$0173 = 0;
  } else {
   $23 = HEAP32[$1>>2]|0;
   $24 = ($23|0)>(-1);
   if ($24) {
    $25 = ($$0$lcssa|0)>(0);
    $$1180209 = 0;$30 = $23;
    while(1) {
     $29 = (($21) + ($$1180209<<5)|0);
     HEAP32[$29>>2] = $30;
     $31 = (((($1) + ($$1180209<<5)|0)) + 4|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (((($21) + ($$1180209<<5)|0)) + 4|0);
     HEAP32[$33>>2] = $32;
     $34 = (((($1) + ($$1180209<<5)|0)) + 8|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = (((($21) + ($$1180209<<5)|0)) + 8|0);
     HEAP32[$36>>2] = $35;
     $37 = (((($1) + ($$1180209<<5)|0)) + 16|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = $38 | $4;
     $40 = (((($21) + ($$1180209<<5)|0)) + 16|0);
     HEAP32[$40>>2] = $39;
     $41 = (((($1) + ($$1180209<<5)|0)) + 20|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (((($21) + ($$1180209<<5)|0)) + 20|0);
     HEAP32[$43>>2] = $42;
     $44 = (((($1) + ($$1180209<<5)|0)) + 24|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (((($21) + ($$1180209<<5)|0)) + 24|0);
     HEAP32[$46>>2] = $45;
     $47 = (((($1) + ($$1180209<<5)|0)) + 28|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (((($21) + ($$1180209<<5)|0)) + 28|0);
     HEAP32[$49>>2] = $48;
     $50 = (((($1) + ($$1180209<<5)|0)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==(0|0);
     $or$cond = $5 & $52;
     if ($or$cond) {
      $$sink = 0;
     } else {
      if ($52) {
       $$0175$lcssa = 0;
      } else {
       $$0175197 = 0;
       while(1) {
        $53 = (($51) + ($$0175197<<2)|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = ($54|0)>(-1);
        $56 = (($$0175197) + 1)|0;
        if ($55) {
         $$0175197 = $56;
        } else {
         $$0175$lcssa = $$0175197;
         break;
        }
       }
      }
      $57 = (($$0175$lcssa) + ($$0$lcssa))|0;
      $58 = $57 << 2;
      $59 = (($58) + 4)|0;
      $60 = (___tre_mem_alloc_impl($0,0,0,0,$59)|0);
      $61 = ($60|0)==(0|0);
      if ($61) {
       $$0173 = 0;
       break L10;
      }
      $62 = ($$0175$lcssa|0)>(0);
      if ($62) {
       $63 = HEAP32[$50>>2]|0;
       $$0174202 = 0;
       while(1) {
        $64 = (($63) + ($$0174202<<2)|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = (($60) + ($$0174202<<2)|0);
        HEAP32[$66>>2] = $65;
        $67 = (($$0174202) + 1)|0;
        $exitcond226 = ($67|0)==($$0175$lcssa|0);
        if ($exitcond226) {
         $$0174$lcssa = $$0175$lcssa;
         break;
        } else {
         $$0174202 = $67;
        }
       }
      } else {
       $$0174$lcssa = 0;
      }
      if ($25) {
       $$1176205 = 0;
       while(1) {
        $68 = (($3) + ($$1176205<<2)|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = (($$1176205) + ($$0174$lcssa))|0;
        $71 = (($60) + ($70<<2)|0);
        HEAP32[$71>>2] = $69;
        $72 = (($$1176205) + 1)|0;
        $exitcond227 = ($72|0)==($$0$lcssa|0);
        if ($exitcond227) {
         $$1176$lcssa = $$0$lcssa;
         break;
        } else {
         $$1176205 = $72;
        }
       }
      } else {
       $$1176$lcssa = 0;
      }
      $73 = (($$1176$lcssa) + ($$0174$lcssa))|0;
      $74 = (($60) + ($73<<2)|0);
      HEAP32[$74>>2] = -1;
      $$sink = $60;
     }
     $75 = (((($21) + ($$1180209<<5)|0)) + 12|0);
     HEAP32[$75>>2] = $$sink;
     $76 = (($$1180209) + 1)|0;
     $77 = (($1) + ($76<<5)|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = ($78|0)>(-1);
     if ($79) {
      $$1180209 = $76;$30 = $78;
     } else {
      $$1180$lcssa = $76;
      break;
     }
    }
   } else {
    $$1180$lcssa = 0;
   }
   $26 = HEAP32[$2>>2]|0;
   $27 = ($26|0)>(-1);
   $28 = (($21) + ($$1180$lcssa<<5)|0);
   if ($27) {
    $$1178193 = 0;$80 = $26;$81 = $28;$85 = $$1180$lcssa;
    while(1) {
     HEAP32[$81>>2] = $80;
     $82 = (((($2) + ($$1178193<<5)|0)) + 4|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = (((($21) + ($85<<5)|0)) + 4|0);
     HEAP32[$84>>2] = $83;
     $86 = (((($2) + ($$1178193<<5)|0)) + 8|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (((($21) + ($85<<5)|0)) + 8|0);
     HEAP32[$88>>2] = $87;
     $89 = (((($2) + ($$1178193<<5)|0)) + 16|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = (((($21) + ($85<<5)|0)) + 16|0);
     HEAP32[$91>>2] = $90;
     $92 = (((($2) + ($$1178193<<5)|0)) + 20|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = (((($21) + ($85<<5)|0)) + 20|0);
     HEAP32[$94>>2] = $93;
     $95 = (((($2) + ($$1178193<<5)|0)) + 24|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (((($21) + ($85<<5)|0)) + 24|0);
     HEAP32[$97>>2] = $96;
     $98 = (((($2) + ($$1178193<<5)|0)) + 28|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = (((($21) + ($85<<5)|0)) + 28|0);
     HEAP32[$100>>2] = $99;
     $101 = (((($2) + ($$1178193<<5)|0)) + 12|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = ($102|0)==(0|0);
     if ($103) {
      $$sink5 = 0;
     } else {
      $$2 = 0;
      while(1) {
       $104 = (($102) + ($$2<<2)|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = ($105|0)>(-1);
       $107 = (($$2) + 1)|0;
       if ($106) {
        $$2 = $107;
       } else {
        break;
       }
      }
      $108 = $$2 << 2;
      $109 = (($108) + 4)|0;
      $110 = (___tre_mem_alloc_impl($0,0,0,0,$109)|0);
      $111 = ($110|0)==(0|0);
      if ($111) {
       $$0173 = 0;
       break L10;
      }
      $112 = ($$2|0)>(0);
      if ($112) {
       $113 = HEAP32[$101>>2]|0;
       $$1192 = 0;
       while(1) {
        $114 = (($113) + ($$1192<<2)|0);
        $115 = HEAP32[$114>>2]|0;
        $116 = (($110) + ($$1192<<2)|0);
        HEAP32[$116>>2] = $115;
        $117 = (($$1192) + 1)|0;
        $exitcond = ($117|0)==($$2|0);
        if ($exitcond) {
         $$1$lcssa = $$2;
         break;
        } else {
         $$1192 = $117;
        }
       }
      } else {
       $$1$lcssa = 0;
      }
      $118 = (($110) + ($$1$lcssa<<2)|0);
      HEAP32[$118>>2] = -1;
      $$sink5 = $110;
     }
     $119 = (((($21) + ($85<<5)|0)) + 12|0);
     HEAP32[$119>>2] = $$sink5;
     $120 = (($$1178193) + 1)|0;
     $121 = (($2) + ($120<<5)|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = ($122|0)>(-1);
     $124 = (($120) + ($$1180$lcssa))|0;
     $125 = (($21) + ($124<<5)|0);
     if ($123) {
      $$1178193 = $120;$80 = $122;$81 = $125;$85 = $124;
     } else {
      $$lcssa = $125;
      break;
     }
    }
   } else {
    $$lcssa = $28;
   }
   HEAP32[$$lcssa>>2] = -1;
   $$0173 = $21;
  }
 } while(0);
 return ($$0173|0);
}
function _tre_match_empty($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$062 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_tre_stack_num_objects($0)|0);
 $6 = ($4|0)!=(0|0);
 if ($6) {
  HEAP32[$4>>2] = 0;
 }
 $7 = (_tre_stack_push_voidptr($0,$1)|0);
 $8 = ($7|0)==(0);
 L4: do {
  if ($8) {
   $9 = ($2|0)==(0|0);
   $10 = ($3|0)==(0|0);
   $11 = (_tre_stack_num_objects($0)|0);
   $12 = ($11|0)>($5|0);
   if ($12) {
    while(1) {
     $13 = (_tre_stack_pop_voidptr($0)|0);
     $14 = HEAP32[$13>>2]|0;
     L8: do {
      switch ($14|0) {
      case 0:  {
       $19 = ((($13)) + 4|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = HEAP32[$20>>2]|0;
       switch ($21|0) {
       case -3:  {
        break;
       }
       case -2:  {
        if ($10) {
         break L8;
        }
        $34 = ((($20)) + 4|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = HEAP32[$3>>2]|0;
        $37 = $36 | $35;
        HEAP32[$3>>2] = $37;
        break L8;
        break;
       }
       default: {
        break L8;
       }
       }
       $22 = ((($20)) + 4|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = ($23|0)>(-1);
       if ($24) {
        L15: do {
         if (!($9)) {
          $$062 = 0;
          while(1) {
           $25 = (($2) + ($$062<<2)|0);
           $26 = HEAP32[$25>>2]|0;
           $27 = ($26|0)>(-1);
           if (!($27)) {
            break;
           }
           $28 = ($26|0)==($23|0);
           $29 = (($$062) + 1)|0;
           if ($28) {
            break L15;
           } else {
            $$062 = $29;
           }
          }
          $30 = (($$062) + 1)|0;
          $31 = (($2) + ($30<<2)|0);
          HEAP32[$25>>2] = $23;
          HEAP32[$31>>2] = -1;
         }
        } while(0);
        if ($6) {
         $32 = HEAP32[$4>>2]|0;
         $33 = (($32) + 1)|0;
         HEAP32[$4>>2] = $33;
        }
       }
       break;
      }
      case 3:  {
       $38 = ((($13)) + 4|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = HEAP32[$39>>2]|0;
       $41 = ((($40)) + 8|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = ($42|0)==(0);
       if (!($43)) {
        $$sink = $40;
        label = 6;
        break L8;
       }
       $44 = ((($39)) + 4|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = ((($45)) + 8|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($47|0)==(0);
       if (!($48)) {
        $$sink = $45;
        label = 6;
       }
       break;
      }
      case 1:  {
       $49 = ((($13)) + 4|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = HEAP32[$50>>2]|0;
       $52 = (_tre_stack_push_voidptr($0,$51)|0);
       $53 = ($52|0)==(0);
       if (!($53)) {
        $$0$lcssa = $52;
        break L4;
       }
       $54 = ((($50)) + 4|0);
       $55 = HEAP32[$54>>2]|0;
       $$sink = $55;
       label = 6;
       break;
      }
      case 2:  {
       $56 = ((($13)) + 4|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = HEAP32[$57>>2]|0;
       $59 = ((($58)) + 8|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ($60|0)==(0);
       if (!($61)) {
        $$sink = $58;
        label = 6;
       }
       break;
      }
      default: {
      }
      }
     } while(0);
     if ((label|0) == 6) {
      label = 0;
      $15 = (_tre_stack_push_voidptr($0,$$sink)|0);
      $16 = ($15|0)==(0);
      if (!($16)) {
       $$0$lcssa = $15;
       break L4;
      }
     }
     $17 = (_tre_stack_num_objects($0)|0);
     $18 = ($17|0)>($5|0);
     if (!($18)) {
      $$0$lcssa = 0;
      break L4;
     }
    }
   } else {
    $$0$lcssa = 0;
   }
  } else {
   $$0$lcssa = $7;
  }
 } while(0);
 return ($$0$lcssa|0);
}
function ___tre_mem_alloc_impl($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$3 = 0, $$55 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre61$pre$phiZZ2D = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $8 = ((($0)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9>>>0)<($4>>>0);
   if ($10) {
    $12 = ($1|0)==(0);
    do {
     if ($12) {
      $16 = $4 << 3;
      $17 = ($16>>>0)>(1024);
      $$ = $17 ? $16 : 1024;
      $18 = (_malloc(8)|0);
      $19 = ($18|0)==(0|0);
      if ($19) {
       HEAP32[$5>>2] = 1;
       $$3 = 0;
       break L1;
      }
      $20 = (_malloc($$)|0);
      HEAP32[$18>>2] = $20;
      $21 = ($20|0)==(0|0);
      $22 = $20;
      if ($21) {
       _free($18);
       HEAP32[$5>>2] = 1;
       $$3 = 0;
       break L1;
      }
      $23 = ((($18)) + 4|0);
      HEAP32[$23>>2] = 0;
      $24 = ((($0)) + 4|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($25|0)==(0|0);
      if (!($26)) {
       $27 = ((($25)) + 4|0);
       HEAP32[$27>>2] = $18;
      }
      $28 = HEAP32[$0>>2]|0;
      $29 = ($28|0)==(0|0);
      if ($29) {
       HEAP32[$0>>2] = $18;
      }
      HEAP32[$24>>2] = $18;
      $30 = ((($0)) + 8|0);
      HEAP32[$30>>2] = $22;
      $$pre61$pre$phiZZ2D = $30;$$sink = $$;$42 = $20;$43 = $22;
     } else {
      $13 = ($2|0)==(0|0);
      if ($13) {
       HEAP32[$5>>2] = 1;
       $$3 = 0;
       break L1;
      } else {
       $14 = ((($0)) + 8|0);
       HEAP32[$14>>2] = $2;
       $15 = $2;
       $$pre61$pre$phiZZ2D = $14;$$sink = 1024;$42 = $2;$43 = $15;
       break;
      }
     }
    } while(0);
    HEAP32[$8>>2] = $$sink;
    $$pre$phiZ2D = $$pre61$pre$phiZZ2D;$32 = $43;$38 = $42;$40 = $$sink;
   } else {
    $$phi$trans$insert = ((($0)) + 8|0);
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $11 = $$pre;
    $$pre$phiZ2D = $$phi$trans$insert;$32 = $$pre;$38 = $11;$40 = $9;
   }
   $31 = (($32) + ($4))|0;
   $33 = $31 & 3;
   $34 = ($33|0)==(0);
   $35 = (4 - ($33))|0;
   $$55 = $34 ? 0 : $35;
   $36 = (($$55) + ($4))|0;
   $37 = (($38) + ($36)|0);
   HEAP32[$$pre$phiZ2D>>2] = $37;
   $39 = (($40) - ($36))|0;
   HEAP32[$8>>2] = $39;
   $41 = ($3|0)==(0);
   if ($41) {
    $$3 = $38;
   } else {
    _memset(($38|0),0,($36|0))|0;
    $$3 = $38;
   }
  } else {
   $$3 = 0;
  }
 } while(0);
 return ($$3|0);
}
function _tre_stack_push($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($3|0)<($4|0);
 if ($5) {
  $6 = ((($0)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($3<<2)|0);
  $9 = HEAP32[$1>>2]|0;
  HEAP32[$8>>2] = $9;
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$2>>2] = $11;
  $$1 = 0;
 } else {
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($4|0)<($13|0);
  if ($14) {
   $15 = ((($0)) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + ($4))|0;
   $18 = ($17|0)>($13|0);
   $$ = $18 ? $13 : $17;
   $19 = ((($0)) + 16|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $$ << 2;
   $22 = (_realloc($20,$21)|0);
   $23 = ($22|0)==(0|0);
   if ($23) {
    $$1 = 12;
   } else {
    HEAP32[$0>>2] = $$;
    HEAP32[$19>>2] = $22;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
    (_tre_stack_push($0,$$byval_copy)|0);
    $$1 = 0;
   }
  } else {
   $$1 = 12;
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function _tre_ast_new_node($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___tre_mem_alloc_impl($0,0,0,1,32)|0);
 $4 = ($3|0)!=(0|0);
 $5 = ($2|0)!=(0|0);
 $or$cond = $5 & $4;
 if ($or$cond) {
  $6 = ((($3)) + 4|0);
  HEAP32[$6>>2] = $2;
  HEAP32[$3>>2] = $1;
  $7 = ((($3)) + 8|0);
  HEAP32[$7>>2] = -1;
  $8 = ((($3)) + 12|0);
  HEAP32[$8>>2] = -1;
  $$0 = $3;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function _tre_copy_ast($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0146$ph$ph = 0, $$0151$ph$ph = 0, $$0155$ph$be = 0, $$0155$ph$ph = 0, $$0155$ph194 = 0, $$0162 = 0, $$0163 = 0, $$0164 = 0, $$1 = 0, $$1147 = 0, $$1152 = 0, $$3149 = 0, $$3154 = 0, $$4150 = 0, $$5160 = 0, $$6 = 0, $$7 = 0, $$old2 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond165 = 0, $or$cond167 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = (_tre_stack_num_objects($1)|0);
 (_tre_stack_push_voidptr($1,$2)|0);
 $9 = (_tre_stack_push_int($1,0)|0);
 $$old2 = ($9|0)==(0);
 L1: do {
  if ($$old2) {
   $10 = $3 & 1;
   $11 = ($10|0)==(0);
   $12 = $3 & 2;
   $13 = ($12|0)!=(0);
   $$0146$ph$ph = 0;$$0151$ph$ph = 1;$$0155$ph$ph = $6;
   while(1) {
    $14 = (_tre_stack_num_objects($1)|0);
    $15 = ($14|0)>($8|0);
    if ($15) {
     $$0155$ph194 = $$0155$ph$ph;
    } else {
     $$4150 = $$0146$ph$ph;$$7 = 0;
     break L1;
    }
    L5: while(1) {
     L7: while(1) {
      $16 = (_tre_stack_pop_int($1)|0);
      switch ($16|0) {
      case 1:  {
       label = 7;
       break L7;
       break;
      }
      case 0:  {
       $20 = (_tre_stack_pop_voidptr($1)|0);
       $21 = HEAP32[$20>>2]|0;
       switch ($21|0) {
       case 0:  {
        label = 9;
        break L5;
        break;
       }
       case 3:  {
        label = 19;
        break L5;
        break;
       }
       case 1:  {
        label = 26;
        break L5;
        break;
       }
       case 2:  {
        label = 33;
        break L7;
        break;
       }
       default: {
       }
       }
       break;
      }
      default: {
      }
      }
      $17 = (_tre_stack_num_objects($1)|0);
      $18 = ($17|0)>($8|0);
      if (!($18)) {
       $$4150 = $$0146$ph$ph;$$7 = 0;
       break L1;
      }
     }
     if ((label|0) == 7) {
      label = 0;
      $19 = (_tre_stack_pop_voidptr($1)|0);
      $$0155$ph$be = $19;
     }
     else if ((label|0) == 33) {
      label = 0;
      $96 = ((($20)) + 4|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = HEAP32[$97>>2]|0;
      $99 = (_tre_stack_push_voidptr($1,$98)|0);
      $100 = ($99|0)==(0);
      if (!($100)) {
       $$4150 = $$0146$ph$ph;$$7 = $99;
       break L1;
      }
      $101 = (_tre_stack_push_int($1,0)|0);
      $102 = ($101|0)==(0);
      if (!($102)) {
       $$4150 = $$0146$ph$ph;$$7 = $101;
       break L1;
      }
      $103 = HEAP32[$97>>2]|0;
      $104 = ((($97)) + 4|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = ((($97)) + 8|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = ((($97)) + 12|0);
      $109 = HEAP8[$108>>0]|0;
      $110 = $109 & 1;
      $111 = $110&255;
      $112 = (_tre_ast_new_iter($0,$103,$105,$107,$111)|0);
      HEAP32[$$0155$ph194>>2] = $112;
      $113 = ($112|0)==(0|0);
      if ($113) {
       $$4150 = $$0146$ph$ph;$$7 = 12;
       break L1;
      }
      $114 = ((($112)) + 4|0);
      $115 = HEAP32[$114>>2]|0;
      $$0155$ph$be = $115;
     }
     $116 = (_tre_stack_num_objects($1)|0);
     $117 = ($116|0)>($8|0);
     if ($117) {
      $$0155$ph194 = $$0155$ph$be;
     } else {
      $$4150 = $$0146$ph$ph;$$7 = 0;
      break L1;
     }
    }
    if ((label|0) == 9) {
     label = 0;
     $22 = ((($20)) + 4|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ((($23)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = HEAP32[$23>>2]|0;
     $27 = ((($23)) + 4|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($26|0)>(-1);
     $30 = ($26|0)==(-4);
     $or$cond165 = $29 | $30;
     if ($or$cond165) {
      $31 = HEAP32[$4>>2]|0;
      $32 = (($31) + ($25))|0;
      $33 = (($$0146$ph$ph) + 1)|0;
      $$0162 = $28;$$0163 = $26;$$0164 = $32;$$1147 = $33;$$1152 = $$0151$ph$ph;
     } else {
      $34 = ($26|0)!=(-3);
      $or$cond167 = $11 | $34;
      if ($or$cond167) {
       $35 = ($26|0)==(-3);
       if ($35) {
        $36 = ($$0151$ph$ph|0)!=(0);
        $or$cond = $13 & $36;
        if ($or$cond) {
         $37 = (($5) + ($28<<2)|0);
         HEAP32[$37>>2] = 1;
         $$0162 = $28;$$0163 = -3;$$0164 = $25;$$1147 = $$0146$ph$ph;$$1152 = 0;
        } else {
         $$0162 = $28;$$0163 = -3;$$0164 = $25;$$1147 = $$0146$ph$ph;$$1152 = $$0151$ph$ph;
        }
       } else {
        $$0162 = $28;$$0163 = $26;$$0164 = $25;$$1147 = $$0146$ph$ph;$$1152 = $$0151$ph$ph;
       }
      } else {
       $$0162 = -1;$$0163 = -1;$$0164 = -1;$$1147 = $$0146$ph$ph;$$1152 = $$0151$ph$ph;
      }
     }
     $38 = (_tre_ast_new_literal($0,$$0163,$$0162,$$0164)|0);
     HEAP32[$$0155$ph194>>2] = $38;
     $39 = ($38|0)==(0|0);
     if ($39) {
      $$1 = 12;
     } else {
      $40 = ((($38)) + 4|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ((($23)) + 12|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ((($41)) + 12|0);
      HEAP32[$44>>2] = $43;
      $45 = ((($23)) + 16|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = ((($41)) + 16|0);
      HEAP32[$47>>2] = $46;
      $$1 = 0;
     }
     $48 = HEAP32[$7>>2]|0;
     $49 = ($$0164|0)>($48|0);
     if ($49) {
      HEAP32[$7>>2] = $$0164;
      $$3149 = $$1147;$$3154 = $$1152;$$5160 = $$0155$ph194;$$6 = $$1;
     } else {
      $$3149 = $$1147;$$3154 = $$1152;$$5160 = $$0155$ph194;$$6 = $$1;
     }
    }
    else if ((label|0) == 19) {
     label = 0;
     $50 = ((($20)) + 4|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = HEAP32[$51>>2]|0;
     $53 = ((($51)) + 4|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (_tre_ast_new_union($0,$52,$54)|0);
     HEAP32[$$0155$ph194>>2] = $55;
     $56 = ($55|0)==(0|0);
     if ($56) {
      $$4150 = $$0146$ph$ph;$$7 = 12;
      break L1;
     }
     $57 = ((($55)) + 4|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = HEAP32[$53>>2]|0;
     $60 = (_tre_stack_push_voidptr($1,$59)|0);
     $61 = ($60|0)==(0);
     if (!($61)) {
      $$4150 = $$0146$ph$ph;$$7 = $60;
      break L1;
     }
     $62 = (_tre_stack_push_int($1,0)|0);
     $63 = ($62|0)==(0);
     if (!($63)) {
      $$4150 = $$0146$ph$ph;$$7 = $62;
      break L1;
     }
     $64 = ((($58)) + 4|0);
     $65 = (_tre_stack_push_voidptr($1,$64)|0);
     $66 = ($65|0)==(0);
     if (!($66)) {
      $$4150 = $$0146$ph$ph;$$7 = $65;
      break L1;
     }
     $67 = (_tre_stack_push_int($1,1)|0);
     $68 = ($67|0)==(0);
     if (!($68)) {
      $$4150 = $$0146$ph$ph;$$7 = $67;
      break L1;
     }
     $69 = HEAP32[$51>>2]|0;
     $70 = (_tre_stack_push_voidptr($1,$69)|0);
     $71 = ($70|0)==(0);
     if (!($71)) {
      $$4150 = $$0146$ph$ph;$$7 = $70;
      break L1;
     }
     $72 = (_tre_stack_push_int($1,0)|0);
     $$3149 = $$0146$ph$ph;$$3154 = $$0151$ph$ph;$$5160 = $58;$$6 = $72;
    }
    else if ((label|0) == 26) {
     label = 0;
     $73 = ((($20)) + 4|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = HEAP32[$74>>2]|0;
     $76 = ((($74)) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (_tre_ast_new_catenation($0,$75,$77)|0);
     HEAP32[$$0155$ph194>>2] = $78;
     $79 = ($78|0)==(0|0);
     if ($79) {
      $$4150 = $$0146$ph$ph;$$7 = 12;
      break L1;
     }
     $80 = ((($78)) + 4|0);
     $81 = HEAP32[$80>>2]|0;
     HEAP32[$81>>2] = 0;
     $82 = ((($81)) + 4|0);
     HEAP32[$82>>2] = 0;
     $83 = HEAP32[$76>>2]|0;
     $84 = (_tre_stack_push_voidptr($1,$83)|0);
     $85 = ($84|0)==(0);
     if (!($85)) {
      $$4150 = $$0146$ph$ph;$$7 = $84;
      break L1;
     }
     $86 = (_tre_stack_push_int($1,0)|0);
     $87 = ($86|0)==(0);
     if (!($87)) {
      $$4150 = $$0146$ph$ph;$$7 = $86;
      break L1;
     }
     $88 = (_tre_stack_push_voidptr($1,$82)|0);
     $89 = ($88|0)==(0);
     if (!($89)) {
      $$4150 = $$0146$ph$ph;$$7 = $88;
      break L1;
     }
     $90 = (_tre_stack_push_int($1,1)|0);
     $91 = ($90|0)==(0);
     if (!($91)) {
      $$4150 = $$0146$ph$ph;$$7 = $90;
      break L1;
     }
     $92 = HEAP32[$74>>2]|0;
     $93 = (_tre_stack_push_voidptr($1,$92)|0);
     $94 = ($93|0)==(0);
     if (!($94)) {
      $$4150 = $$0146$ph$ph;$$7 = $93;
      break L1;
     }
     $95 = (_tre_stack_push_int($1,0)|0);
     $$3149 = $$0146$ph$ph;$$3154 = $$0151$ph$ph;$$5160 = $81;$$6 = $95;
    }
    $118 = ($$6|0)==(0);
    if ($118) {
     $$0146$ph$ph = $$3149;$$0151$ph$ph = $$3154;$$0155$ph$ph = $$5160;
    } else {
     $$4150 = $$3149;$$7 = $$6;
     break;
    }
   }
  } else {
   $$4150 = 0;$$7 = $9;
  }
 } while(0);
 $119 = HEAP32[$4>>2]|0;
 $120 = (($119) + ($$4150))|0;
 HEAP32[$4>>2] = $120;
 return ($$7|0);
}
function _tre_ast_new_iter($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (___tre_mem_alloc_impl($0,0,0,1,16)|0);
 $6 = (_tre_ast_new_node($0,2,$5)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
 } else {
  HEAP32[$5>>2] = $1;
  $8 = ((($5)) + 4|0);
  HEAP32[$8>>2] = $2;
  $9 = ((($5)) + 8|0);
  HEAP32[$9>>2] = $3;
  $10 = ((($5)) + 12|0);
  $11 = $4&255;
  $12 = HEAP8[$10>>0]|0;
  $13 = $11 & 1;
  $14 = $12 & -2;
  $15 = $14 | $13;
  HEAP8[$10>>0] = $15;
  $16 = ((($1)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($6)) + 16|0);
  HEAP32[$18>>2] = $17;
  $$0 = $6;
 }
 return ($$0|0);
}
function _tre_ast_new_union($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0|0);
 if ($3) {
  $$0 = $2;
 } else {
  $4 = (___tre_mem_alloc_impl($0,0,0,1,8)|0);
  $5 = (_tre_ast_new_node($0,3,$4)|0);
  $6 = ($5|0)!=(0|0);
  $7 = ($2|0)!=(0|0);
  $or$cond = $7 & $6;
  if ($or$cond) {
   HEAP32[$4>>2] = $1;
   $8 = ((($4)) + 4|0);
   HEAP32[$8>>2] = $2;
   $9 = ((($1)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($2)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) + ($10))|0;
   $14 = ((($5)) + 16|0);
   HEAP32[$14>>2] = $13;
   $$0 = $5;
  } else {
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _tre_add_tag_left($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___tre_mem_alloc_impl($0,0,0,0,8)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 12;
 } else {
  $5 = (_tre_ast_new_literal($0,-3,$2,-1)|0);
  HEAP32[$3>>2] = $5;
  $6 = ($5|0)==(0|0);
  if ($6) {
   $$0 = 12;
  } else {
   $7 = (___tre_mem_alloc_impl($0,0,0,0,32)|0);
   $8 = ((($3)) + 4|0);
   HEAP32[$8>>2] = $7;
   $9 = ($7|0)==(0|0);
   if ($9) {
    $$0 = 12;
   } else {
    $10 = ((($1)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($7)) + 4|0);
    HEAP32[$12>>2] = $11;
    $13 = HEAP32[$1>>2]|0;
    HEAP32[$7>>2] = $13;
    $14 = ((($7)) + 8|0);
    HEAP32[$14>>2] = -1;
    $15 = ((($7)) + 12|0);
    HEAP32[$15>>2] = -1;
    $16 = ((($7)) + 16|0);
    ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;HEAP32[$16+12>>2]=0|0;
    HEAP32[$10>>2] = $3;
    HEAP32[$1>>2] = 1;
    $$0 = 0;
   }
  }
 }
 return ($$0|0);
}
function _tre_purge_regset($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$016 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)>(-1);
 if ($4) {
  $5 = ((($1)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $$016 = 0;$8 = $3;
  while(1) {
   $7 = $8 >>> 1;
   $9 = $8 & 1;
   $10 = ($9|0)==(0);
   $11 = (((($6) + (($7*12)|0)|0)) + 4|0);
   $12 = (($6) + (($7*12)|0)|0);
   $$sink = $10 ? $12 : $11;
   HEAP32[$$sink>>2] = $2;
   $13 = (($$016) + 1)|0;
   $14 = (($0) + ($13<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)>(-1);
   if ($16) {
    $$016 = $13;$8 = $15;
   } else {
    break;
   }
  }
 }
 HEAP32[$0>>2] = -1;
 return;
}
function _tre_add_tag_right($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___tre_mem_alloc_impl($0,0,0,0,8)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 12;
 } else {
  $5 = (_tre_ast_new_literal($0,-3,$2,-1)|0);
  $6 = ((($3)) + 4|0);
  HEAP32[$6>>2] = $5;
  $7 = ($5|0)==(0|0);
  if ($7) {
   $$0 = 12;
  } else {
   $8 = (___tre_mem_alloc_impl($0,0,0,0,32)|0);
   HEAP32[$3>>2] = $8;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$0 = 12;
   } else {
    $10 = ((($1)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($8)) + 4|0);
    HEAP32[$12>>2] = $11;
    $13 = HEAP32[$1>>2]|0;
    HEAP32[$8>>2] = $13;
    $14 = ((($8)) + 8|0);
    HEAP32[$14>>2] = -1;
    $15 = ((($8)) + 12|0);
    HEAP32[$15>>2] = -1;
    $16 = ((($8)) + 16|0);
    ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;HEAP32[$16+12>>2]=0|0;
    HEAP32[$10>>2] = $3;
    HEAP32[$1>>2] = 1;
    $$0 = 0;
   }
  }
 }
 return ($$0|0);
}
function _parse_atom($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$0125 = 0, $$0130$lcssa = 0, $$0130139 = 0, $$0131$lcssa = 0, $$0131138 = 0, $$1 = 0, $$132 = 0, $$133 = 0, $$2 = 0, $$2127 = 0, $$3 = 0, $$4 = 0, $$4129 = 0, $$5 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond134 = 0, $cond135 = 0, $or$cond = 0, $or$cond137 = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = HEAP8[$1>>0]|0;
 $7 = $6 << 24 >> 24;
 L1: do {
  switch ($7|0) {
  case 91:  {
   $8 = ((($1)) + 1|0);
   $9 = (_parse_bracket($0,$8)|0);
   $$0 = $9;
   break;
  }
  case 92:  {
   $10 = ((($1)) + 1|0);
   $11 = (_tre_expand_macro($10)|0);
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    $13 = (_parse_atom($0,$11)|0);
    $14 = ((($1)) + 2|0);
    $15 = ((($0)) + 12|0);
    HEAP32[$15>>2] = $14;
    $$0 = $13;
    break L1;
   }
   $16 = HEAP8[$10>>0]|0;
   $17 = $16 << 24 >> 24;
   switch ($17|0) {
   case 0:  {
    $$0 = 5;
    break L1;
    break;
   }
   case 98:  {
    $18 = HEAP32[$0>>2]|0;
    $19 = (_tre_ast_new_literal($18,-2,64,-1)|0);
    $$0125 = $19;$$2 = $10;
    break;
   }
   case 66:  {
    $20 = HEAP32[$0>>2]|0;
    $21 = (_tre_ast_new_literal($20,-2,128,-1)|0);
    $$0125 = $21;$$2 = $10;
    break;
   }
   case 60:  {
    $22 = HEAP32[$0>>2]|0;
    $23 = (_tre_ast_new_literal($22,-2,16,-1)|0);
    $$0125 = $23;$$2 = $10;
    break;
   }
   case 62:  {
    $24 = HEAP32[$0>>2]|0;
    $25 = (_tre_ast_new_literal($24,-2,32,-1)|0);
    $$0125 = $25;$$2 = $10;
    break;
   }
   case 120:  {
    $26 = ((($1)) + 2|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = ($27<<24>>24)==(123);
    $29 = ((($1)) + 3|0);
    $$ = $28 ? 8 : 2;
    $$132 = $28 ? $29 : $26;
    $$0130139 = 0;$$0131138 = 0;
    while(1) {
     $30 = (($$132) + ($$0130139)|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = $31 << 24 >> 24;
     $33 = (_hexval_520($32)|0);
     $34 = ($33|0)<(0);
     if ($34) {
      $$0130$lcssa = $$0130139;$$0131$lcssa = $$0131138;
      break;
     }
     $35 = $$0131138 << 4;
     $36 = (($33) + ($35))|0;
     $37 = (($$0130139) + 1)|0;
     $38 = ($37|0)<($$|0);
     $39 = ($36|0)<(1114112);
     $40 = $39 & $38;
     if ($40) {
      $$0130139 = $37;$$0131138 = $36;
     } else {
      $$0130$lcssa = $37;$$0131$lcssa = $36;
      break;
     }
    }
    $41 = (($$132) + ($$0130$lcssa)|0);
    if ($28) {
     $42 = HEAP8[$41>>0]|0;
     $43 = ($42<<24>>24)==(125);
     if (!($43)) {
      $$0 = 9;
      break L1;
     }
     $44 = ((($41)) + 1|0);
     $$1 = $44;
    } else {
     $$1 = $41;
    }
    $45 = HEAP32[$0>>2]|0;
    $46 = ((($0)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + 1)|0;
    HEAP32[$46>>2] = $48;
    $49 = (_tre_ast_new_literal($45,$$0131$lcssa,$$0131$lcssa,$47)|0);
    $50 = ((($$1)) + -1|0);
    $$0125 = $49;$$2 = $50;
    break;
   }
   case 63: case 43: case 123:  {
    $cond = ($5|0)==(0);
    if ($cond) {
     $$0 = 13;
     break L1;
    } else {
     $$3 = $10;
     label = 37;
     break L1;
    }
    break;
   }
   case 124:  {
    $cond134 = ($5|0)==(0);
    if (!($cond134)) {
     $$3 = $10;
     label = 37;
     break L1;
    }
    $51 = HEAP32[$0>>2]|0;
    $52 = (_tre_ast_new_literal($51,-1,-1,-1)|0);
    $$4 = $1;$$5 = $52;
    label = 45;
    break L1;
    break;
   }
   default: {
    $53 = ($5|0)==(0);
    $54 = (($17) + -49)|0;
    $55 = ($54>>>0)<(9);
    $or$cond137 = $53 & $55;
    if (!($or$cond137)) {
     $$3 = $10;
     label = 37;
     break L1;
    }
    $56 = (($17) + -48)|0;
    $57 = HEAP32[$0>>2]|0;
    $58 = ((($0)) + 24|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (($59) + 1)|0;
    HEAP32[$58>>2] = $60;
    $61 = (_tre_ast_new_literal($57,-4,$56,$59)|0);
    $62 = ((($0)) + 28|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($56|0)<($63|0);
    $$133 = $64 ? $63 : $56;
    HEAP32[$62>>2] = $$133;
    $$0125 = $61;$$2 = $10;
   }
   }
   $65 = ((($$2)) + 1|0);
   $$4 = $65;$$5 = $$0125;
   label = 45;
   break;
  }
  case 46:  {
   $66 = $4 & 4;
   $67 = ($66|0)==(0);
   $68 = HEAP32[$0>>2]|0;
   $69 = ((($0)) + 24|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($70) + 1)|0;
   HEAP32[$69>>2] = $71;
   if ($67) {
    $81 = (_tre_ast_new_literal($68,0,1114111,$70)|0);
    $$2127 = $81;
   } else {
    $72 = (_tre_ast_new_literal($68,0,9,$70)|0);
    $73 = HEAP32[$0>>2]|0;
    $74 = HEAP32[$69>>2]|0;
    $75 = (($74) + 1)|0;
    HEAP32[$69>>2] = $75;
    $76 = (_tre_ast_new_literal($73,11,1114111,$74)|0);
    $77 = ($72|0)!=(0|0);
    $78 = ($76|0)!=(0|0);
    $or$cond = $77 & $78;
    if ($or$cond) {
     $79 = HEAP32[$0>>2]|0;
     $80 = (_tre_ast_new_union($79,$72,$76)|0);
     $$2127 = $80;
    } else {
     $$2127 = 0;
    }
   }
   $82 = ((($1)) + 1|0);
   $$4 = $82;$$5 = $$2127;
   label = 45;
   break;
  }
  case 94:  {
   $83 = ($5|0)==(0);
   if ($83) {
    $84 = ((($0)) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)==($1|0);
    if (!($86)) {
     $$3 = $1;
     label = 37;
     break L1;
    }
   }
   $87 = HEAP32[$0>>2]|0;
   $88 = (_tre_ast_new_literal($87,-2,1,-1)|0);
   $89 = ((($1)) + 1|0);
   $$4 = $89;$$5 = $88;
   label = 45;
   break;
  }
  case 36:  {
   $90 = ($5|0)==(0);
   $91 = ((($1)) + 1|0);
   if ($90) {
    $92 = HEAP8[$91>>0]|0;
    $93 = ($92<<24>>24)==(0);
    if (!($93)) {
     $$3 = $1;
     label = 37;
     break L1;
    }
   }
   $94 = HEAP32[$0>>2]|0;
   $95 = (_tre_ast_new_literal($94,-2,2,-1)|0);
   $$4 = $91;$$5 = $95;
   label = 45;
   break;
  }
  case 63: case 43: case 123: case 42:  {
   $cond135 = ($5|0)==(0);
   if ($cond135) {
    $$3 = $1;
    label = 37;
   } else {
    $$0 = 13;
   }
   break;
  }
  case 124:  {
   $96 = ($5|0)==(0);
   if ($96) {
    $$3 = $1;
    label = 37;
   } else {
    label = 36;
   }
   break;
  }
  case 0:  {
   label = 36;
   break;
  }
  default: {
   $$3 = $1;
   label = 37;
  }
  }
 } while(0);
 if ((label|0) == 36) {
  $97 = HEAP32[$0>>2]|0;
  $98 = (_tre_ast_new_literal($97,-1,-1,-1)|0);
  $$4 = $1;$$5 = $98;
  label = 45;
 }
 else if ((label|0) == 37) {
  $99 = (_mbtowc($2,$$3,-1)|0);
  $100 = ($99|0)<(0);
  if ($100) {
   $$0 = 2;
  } else {
   $101 = HEAP32[$3>>2]|0;
   $102 = $101 & 2;
   $103 = ($102|0)==(0);
   do {
    if ($103) {
     label = 43;
    } else {
     $104 = HEAP32[$2>>2]|0;
     $105 = (_iswupper($104)|0);
     $106 = ($105|0)==(0);
     if ($106) {
      $107 = HEAP32[$2>>2]|0;
      $108 = (_iswlower($107)|0);
      $109 = ($108|0)==(0);
      if ($109) {
       label = 43;
       break;
      }
     }
     $110 = HEAP32[$0>>2]|0;
     $111 = HEAP32[$2>>2]|0;
     $112 = (_towupper($111)|0);
     $113 = HEAP32[$2>>2]|0;
     $114 = (_towupper($113)|0);
     $115 = ((($0)) + 24|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = (_tre_ast_new_literal($110,$112,$114,$116)|0);
     $118 = HEAP32[$0>>2]|0;
     $119 = HEAP32[$2>>2]|0;
     $120 = (_towlower($119)|0);
     $121 = HEAP32[$2>>2]|0;
     $122 = (_towlower($121)|0);
     $123 = HEAP32[$115>>2]|0;
     $124 = (_tre_ast_new_literal($118,$120,$122,$123)|0);
     $125 = ($117|0)!=(0|0);
     $126 = ($124|0)!=(0|0);
     $or$cond3 = $125 & $126;
     if ($or$cond3) {
      $127 = HEAP32[$0>>2]|0;
      $128 = (_tre_ast_new_union($127,$117,$124)|0);
      $$4129 = $128;$$pre$phiZ2D = $115;
     } else {
      $$4129 = 0;$$pre$phiZ2D = $115;
     }
    }
   } while(0);
   if ((label|0) == 43) {
    $129 = HEAP32[$0>>2]|0;
    $130 = HEAP32[$2>>2]|0;
    $131 = ((($0)) + 24|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = (_tre_ast_new_literal($129,$130,$130,$132)|0);
    $$4129 = $133;$$pre$phiZ2D = $131;
   }
   $134 = HEAP32[$$pre$phiZ2D>>2]|0;
   $135 = (($134) + 1)|0;
   HEAP32[$$pre$phiZ2D>>2] = $135;
   $136 = (($$3) + ($99)|0);
   $$4 = $136;$$5 = $$4129;
   label = 45;
  }
 }
 if ((label|0) == 45) {
  $137 = ($$5|0)==(0|0);
  if ($137) {
   $$0 = 12;
  } else {
   $138 = ((($0)) + 8|0);
   HEAP32[$138>>2] = $$5;
   $139 = ((($0)) + 12|0);
   HEAP32[$139>>2] = $$4;
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _parse_dup($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$016 = 0, $$1 = 0, $$pre = 0, $$pre17 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 4|0;
 $5 = sp;
 $6 = (_parse_dup_count($0,$4)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(44);
 if ($8) {
  $9 = ((($6)) + 1|0);
  $10 = (_parse_dup_count($9,$5)|0);
  $$pre = HEAP32[$5>>2]|0;
  $$pre17 = HEAP32[$4>>2]|0;
  $$016 = $10;$13 = $$pre;$14 = $$pre17;
 } else {
  $11 = HEAP32[$4>>2]|0;
  HEAP32[$5>>2] = $11;
  $$016 = $6;$13 = $11;$14 = $11;
 }
 $12 = ($13|0)<($14|0);
 $15 = ($13|0)>(-1);
 $or$cond = $15 & $12;
 $16 = ($13|0)>(255);
 $or$cond3 = $16 | $or$cond;
 $17 = ($14>>>0)>(255);
 $18 = $17 | $or$cond3;
 do {
  if ($18) {
   $$0 = 0;
  } else {
   $19 = ($1|0)==(0);
   if ($19) {
    $20 = ((($$016)) + 1|0);
    $21 = HEAP8[$$016>>0]|0;
    $22 = ($21<<24>>24)==(92);
    if ($22) {
     $$1 = $20;
    } else {
     $$0 = 0;
     break;
    }
   } else {
    $$1 = $$016;
   }
   $23 = HEAP8[$$1>>0]|0;
   $24 = ($23<<24>>24)==(125);
   if ($24) {
    $25 = ((($$1)) + 1|0);
    HEAP32[$2>>2] = $14;
    HEAP32[$3>>2] = $13;
    $$0 = $25;
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _marksub($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1 = 0, $$119 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (_tre_ast_new_literal($6,-1,-1,-1)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$1 = 12;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = (_tre_ast_new_catenation($9,$7,$1)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $$1 = 12;
   } else {
    $12 = ((($1)) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($10)) + 16|0);
    HEAP32[$14>>2] = $13;
    $$119 = $10;$18 = $13;
    label = 6;
   }
  }
 } else {
  $$phi$trans$insert = ((($1)) + 16|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$119 = $1;$18 = $$pre;
  label = 6;
 }
 if ((label|0) == 6) {
  $15 = ((($$119)) + 12|0);
  HEAP32[$15>>2] = $2;
  $16 = ((($$119)) + 16|0);
  $17 = (($18) + 1)|0;
  HEAP32[$16>>2] = $17;
  $19 = ((($0)) + 8|0);
  HEAP32[$19>>2] = $$119;
  $$1 = 0;
 }
 return ($$1|0);
}
function _parse_dup_count($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$012 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit14 = 0, $isdigittmp = 0, $isdigittmp13 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$1>>2] = -1;
 $2 = HEAP8[$0>>0]|0;
 $3 = $2 << 24 >> 24;
 $isdigittmp = (($3) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  HEAP32[$1>>2] = 0;
  $$pre = HEAP8[$0>>0]|0;
  $$012 = $0;$5 = 0;$7 = $$pre;
  while(1) {
   $4 = ($5*10)|0;
   $6 = $7 << 24 >> 24;
   $8 = (($4) + -48)|0;
   $9 = (($8) + ($6))|0;
   HEAP32[$1>>2] = $9;
   $10 = ((($$012)) + 1|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11 << 24 >> 24;
   $isdigittmp13 = (($12) + -48)|0;
   $isdigit14 = ($isdigittmp13>>>0)>(9);
   $13 = ($9|0)>(255);
   $or$cond = $13 | $isdigit14;
   if ($or$cond) {
    $$0 = $10;
    break;
   } else {
    $$012 = $10;$5 = $9;$7 = $11;
   }
  }
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function _parse_bracket($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$064 = 0, $$065 = 0, $$06674 = 0, $$06773 = 0, $$07172 = 0, $$1 = 0, $$168 = 0, $$2 = 0, $$269 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $2 = sp + 264|0;
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $4;
 $5 = ((($2)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($2)) + 12|0);
 HEAP32[$6>>2] = 32;
 $7 = (_malloc(128)|0);
 $8 = ((($2)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = ($7|0)==(0|0);
 if ($9) {
  $$065 = 12;
 } else {
  $10 = ((($3)) + 4|0);
  HEAP32[$10>>2] = 0;
  $11 = HEAP8[$1>>0]|0;
  $12 = ($11<<24>>24)==(94);
  $13 = $12&1;
  HEAP32[$3>>2] = $13;
  $14 = ((($1)) + 1|0);
  $$ = $12 ? $14 : $1;
  $15 = (_parse_bracket_terms($0,$$,$2,$3)|0);
  $16 = ($15|0)==(0);
  L3: do {
   if ($16) {
    $17 = HEAP32[$3>>2]|0;
    $18 = ($17|0)==(0);
    if ($18) {
     $$064 = 0;
    } else {
     $19 = HEAP32[$8>>2]|0;
     $20 = HEAP32[$5>>2]|0;
     _qsort($19,$20,4,23);
     $21 = (_tre_new_lit($2)|0);
     $22 = ($21|0)==(0|0);
     if ($22) {
      $$0 = 12;$$2 = 0;
      break;
     }
     HEAP32[$21>>2] = 1114112;
     $23 = ((($21)) + 4|0);
     HEAP32[$23>>2] = 1114112;
     $24 = ((($21)) + 8|0);
     HEAP32[$24>>2] = -1;
     $25 = HEAP32[$10>>2]|0;
     $26 = ($25|0)==(0);
     if ($26) {
      $$064 = 0;
     } else {
      $27 = HEAP32[$0>>2]|0;
      $28 = $25 << 2;
      $29 = (($28) + 4)|0;
      $30 = (___tre_mem_alloc_impl($27,0,0,0,$29)|0);
      $31 = ($30|0)==(0|0);
      if ($31) {
       $$0 = 12;$$2 = 0;
       break;
      }
      $32 = ((($3)) + 8|0);
      _memcpy(($30|0),($32|0),($28|0))|0;
      $33 = (($30) + ($25<<2)|0);
      HEAP32[$33>>2] = 0;
      $$064 = $30;
     }
    }
    $34 = HEAP32[$5>>2]|0;
    $35 = ($34|0)>(0);
    if ($35) {
     $36 = HEAP32[$8>>2]|0;
     $37 = ((($0)) + 24|0);
     $$06674 = 0;$$06773 = 0;$$07172 = 0;
     while(1) {
      $38 = (($36) + ($$07172<<2)|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = HEAP32[$39>>2]|0;
      $41 = ((($39)) + 4|0);
      $42 = HEAP32[$41>>2]|0;
      do {
       if ($18) {
        $$168 = $$06773;
        label = 14;
       } else {
        $43 = ($40|0)>($$06773|0);
        if ($43) {
         $47 = (($40) + -1)|0;
         HEAP32[$39>>2] = $$06773;
         HEAP32[$41>>2] = $47;
         $48 = (($42) + 1)|0;
         $$168 = $48;
         label = 14;
         break;
        } else {
         $44 = (($42) + 1)|0;
         $45 = ($44|0)>=($$06773|0);
         $46 = $45 ? $44 : $$06773;
         $$1 = $$06674;$$269 = $46;
         break;
        }
       }
      } while(0);
      if ((label|0) == 14) {
       label = 0;
       $49 = HEAP32[$37>>2]|0;
       $50 = ((($39)) + 8|0);
       HEAP32[$50>>2] = $49;
       $51 = ((($39)) + 16|0);
       HEAP32[$51>>2] = $$064;
       $52 = HEAP32[$0>>2]|0;
       $53 = (_tre_ast_new_node($52,0,$39)|0);
       $54 = HEAP32[$0>>2]|0;
       $55 = (_tre_ast_new_union($54,$$06674,$53)|0);
       $56 = ($55|0)==(0|0);
       if ($56) {
        $$0 = 12;$$2 = 0;
        break L3;
       } else {
        $$1 = $55;$$269 = $$168;
       }
      }
      $57 = (($$07172) + 1)|0;
      $58 = ($57|0)<($34|0);
      if ($58) {
       $$06674 = $$1;$$06773 = $$269;$$07172 = $57;
      } else {
       $$0 = 0;$$2 = $$1;
       break;
      }
     }
    } else {
     $$0 = 0;$$2 = 0;
    }
   } else {
    $$0 = $15;$$2 = 0;
   }
  } while(0);
  $59 = HEAP32[$8>>2]|0;
  _free($59);
  $60 = ((($0)) + 24|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + 1)|0;
  HEAP32[$60>>2] = $62;
  $63 = ((($0)) + 8|0);
  HEAP32[$63>>2] = $$2;
  $$065 = $$0;
 }
 STACKTOP = sp;return ($$065|0);
}
function _tre_expand_macro($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$05 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $$05 = 0;
 while(1) {
  $2 = (24060 + ($$05<<3)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==($1<<24>>24);
  if ($4) {
   $$0$lcssa = $$05;
   break;
  }
  $5 = (($$05) + 1)|0;
  $6 = ($5|0)==(12);
  if ($6) {
   $$0$lcssa = 12;
   break;
  } else {
   $$05 = $5;
  }
 }
 $7 = (((24060 + ($$0$lcssa<<3)|0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 return ($8|0);
}
function _hexval_520($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 if ($2) {
  return ($1|0);
 } else {
  $3 = $0 | 32;
  $4 = (($3) + -97)|0;
  $5 = ($4>>>0)<(6);
  $6 = (($3) + -87)|0;
  $$ = $5 ? $6 : -1;
  return ($$|0);
 }
 return (0)|0;
}
function _parse_bracket_terms($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$082119 = 0, $$091$be = 0, $$091120 = 0, $$190101 = 0, $$285103 = 0, $$288102 = 0, $$293100 = 0, $$4 = 0, $$lcssa110 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond94 = 0, $or$cond95 = 0, $or$cond96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $5 = sp + 4|0;
 $6 = (_mbtowc($4,$1,-1)|0);
 $7 = ($6|0)<(1);
 $8 = HEAP8[$1>>0]|0;
 L1: do {
  if ($7) {
   $$lcssa110 = $8;
   label = 3;
  } else {
   $9 = ((($3)) + 4|0);
   $10 = ((($0)) + 32|0);
   $$091120 = $1;$14 = $8;$43 = $6;
   L3: while(1) {
    $13 = ($14<<24>>24)!=(93);
    $15 = ($$091120|0)==($1|0);
    $or$cond94 = $15 | $13;
    if (!($or$cond94)) {
     label = 5;
     break;
    }
    $18 = ($14<<24>>24)!=(45);
    $or$cond95 = $15 | $18;
    L6: do {
     if (!($or$cond95)) {
      $19 = ((($$091120)) + 1|0);
      $20 = HEAP8[$19>>0]|0;
      switch ($20<<24>>24) {
      case 93:  {
       break L6;
       break;
      }
      case 45:  {
       break;
      }
      default: {
       $$4 = 11;
       break L1;
      }
      }
      $21 = ((($$091120)) + 2|0);
      $22 = HEAP8[$21>>0]|0;
      $23 = ($22<<24>>24)==(93);
      if ($23) {
       $$4 = 11;
       break L1;
      }
     }
    } while(0);
    $24 = ($14<<24>>24)==(91);
    L10: do {
     if ($24) {
      $25 = ((($$091120)) + 1|0);
      $26 = HEAP8[$25>>0]|0;
      switch ($26<<24>>24) {
      case 61: case 46:  {
       $$4 = 3;
       break L1;
       break;
      }
      case 58:  {
       break;
      }
      default: {
       label = 17;
       break L10;
      }
      }
      $27 = ((($$091120)) + 2|0);
      $$082119 = 0;
      L13: while(1) {
       $28 = (($27) + ($$082119)|0);
       $29 = HEAP8[$28>>0]|0;
       switch ($29<<24>>24) {
       case 0:  {
        label = 16;
        break L3;
        break;
       }
       case 58:  {
        break L13;
        break;
       }
       default: {
       }
       }
       $30 = (($$082119) + 1)|0;
       $31 = ($$082119|0)<(13);
       if ($31) {
        $$082119 = $30;
       } else {
        label = 16;
        break L3;
       }
      }
      _memcpy(($5|0),($27|0),($$082119|0))|0;
      $32 = (($5) + ($$082119)|0);
      HEAP8[$32>>0] = 0;
      $33 = (_wctype($5)|0);
      $34 = ($33|0)==(0);
      if ($34) {
       label = 16;
       break L3;
      }
      $35 = (($$082119) + 1)|0;
      $36 = (($27) + ($35)|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = ($37<<24>>24)==(93);
      $39 = (($$082119) + 2)|0;
      $40 = (($27) + ($39)|0);
      if (!($38)) {
       label = 16;
       break L3;
      }
      $54 = HEAP32[$3>>2]|0;
      $55 = ($54|0)==(0);
      if ($55) {
       $$190101 = $33;$$285103 = 1114111;$$288102 = 0;$$293100 = $40;$71 = 1;
       label = 25;
      } else {
       $56 = HEAP32[$9>>2]|0;
       $57 = ($56|0)>(63);
       if ($57) {
        $$4 = 12;
        break L1;
       }
       $58 = (($56) + 1)|0;
       HEAP32[$9>>2] = $58;
       $59 = (((($3)) + 8|0) + ($56<<2)|0);
       HEAP32[$59>>2] = $33;
       $$091$be = $40;
      }
     } else {
      label = 17;
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     $41 = HEAP32[$4>>2]|0;
     $42 = (($$091120) + ($43)|0);
     $44 = HEAP8[$42>>0]|0;
     $45 = ($44<<24>>24)==(45);
     if ($45) {
      $46 = ((($42)) + 1|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = ($47<<24>>24)==(93);
      if ($48) {
       $$190101 = 0;$$285103 = $41;$$288102 = $41;$$293100 = $42;$71 = 0;
       label = 25;
      } else {
       $49 = (_mbtowc($4,$46,-1)|0);
       $50 = HEAP32[$4>>2]|0;
       $51 = ($49|0)<(1);
       $52 = ($41|0)>($50|0);
       $or$cond96 = $51 | $52;
       if ($or$cond96) {
        $$4 = 11;
        break L1;
       }
       $53 = (($46) + ($49)|0);
       $$190101 = 0;$$285103 = $50;$$288102 = $41;$$293100 = $53;$71 = 0;
       label = 25;
      }
     } else {
      $$190101 = 0;$$285103 = $41;$$288102 = $41;$$293100 = $42;$71 = 0;
      label = 25;
     }
    }
    if ((label|0) == 25) {
     label = 0;
     $63 = (_tre_new_lit($2)|0);
     $64 = ($63|0)==(0|0);
     if ($64) {
      $$4 = 12;
      break L1;
     }
     HEAP32[$63>>2] = $$288102;
     $65 = ((($63)) + 4|0);
     HEAP32[$65>>2] = $$285103;
     $66 = ((($63)) + 12|0);
     HEAP32[$66>>2] = $$190101;
     $67 = ((($63)) + 8|0);
     HEAP32[$67>>2] = -1;
     $68 = HEAP32[$10>>2]|0;
     $69 = $68 & 2;
     $70 = ($69|0)==(0);
     $or$cond = $71 | $70;
     if ($or$cond) {
      $$091$be = $$293100;
     } else {
      $72 = (_add_icase_literals($2,$$288102,$$285103)|0);
      $73 = ($72|0)==(0);
      if ($73) {
       $$091$be = $$293100;
      } else {
       $$4 = 12;
       break L1;
      }
     }
    }
    $60 = (_mbtowc($4,$$091$be,-1)|0);
    $61 = ($60|0)<(1);
    $62 = HEAP8[$$091$be>>0]|0;
    if ($61) {
     $$lcssa110 = $62;
     label = 3;
     break L1;
    } else {
     $$091120 = $$091$be;$14 = $62;$43 = $60;
    }
   }
   if ((label|0) == 5) {
    $16 = ((($$091120)) + 1|0);
    $17 = ((($0)) + 12|0);
    HEAP32[$17>>2] = $16;
    $$4 = 0;
    break;
   }
   else if ((label|0) == 16) {
    $$4 = 4;
    break;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $11 = ($$lcssa110<<24>>24)!=(0);
  $12 = $11 ? 2 : 7;
  $$4 = $12;
 }
 STACKTOP = sp;return ($$4|0);
}
function _tre_compare_lit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) - ($5))|0;
 return ($6|0);
}
function _tre_new_lit($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre16 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)<($4|0);
 if ($5) {
  $$phi$trans$insert = ((($0)) + 4|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $14 = $2;$16 = $$pre;
  label = 6;
 } else {
  $6 = ($4|0)>(32767);
  if ($6) {
   $$0 = 0;
  } else {
   $7 = $4 << 1;
   HEAP32[$3>>2] = $7;
   $8 = ((($0)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $4 << 3;
   $11 = (_realloc($9,$10)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    $$0 = 0;
   } else {
    HEAP32[$8>>2] = $11;
    $$pre16 = HEAP32[$1>>2]|0;
    $14 = $$pre16;$16 = $11;
    label = 6;
   }
  }
 }
 if ((label|0) == 6) {
  $13 = (($14) + 1)|0;
  HEAP32[$1>>2] = $13;
  $15 = (($16) + ($14<<2)|0);
  $17 = HEAP32[$0>>2]|0;
  $18 = (___tre_mem_alloc_impl($17,0,0,1,20)|0);
  HEAP32[$15>>2] = $18;
  $$0 = $18;
 }
 return ($$0|0);
}
function _add_icase_literals($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$be = 0, $$036 = 0, $$036$in = 0, $$039 = 0, $$040 = 0, $$042 = 0, $$1 = 0, $$1$in = 0, $$137 = 0, $$137$in = 0, $$2 = 0, $$2$in = 0, $$238 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)>($2|0);
 L1: do {
  if ($3) {
   $$040 = 0;
  } else {
   $$042 = $1;
   while(1) {
    $4 = (_iswlower($$042)|0);
    $5 = ($4|0)==(0);
    L4: do {
     if ($5) {
      $10 = (_iswupper($$042)|0);
      $11 = ($10|0)==(0);
      if ($11) {
       $16 = (($$042) + 1)|0;
       $$0$be = $16;
       break;
      }
      $12 = (_towlower($$042)|0);
      $$137$in = $12;$$2$in = $$042;
      while(1) {
       $$2 = (($$2$in) + 1)|0;
       $$137 = (($$137$in) + 1)|0;
       $13 = ($$2$in|0)<($2|0);
       if (!($13)) {
        $$039 = $12;$$238 = $$137;$$3 = $$2;
        label = 12;
        break L4;
       }
       $14 = (_towlower($$2)|0);
       $15 = ($14|0)==($$137|0);
       if ($15) {
        $$137$in = $$137;$$2$in = $$2;
       } else {
        $$039 = $12;$$238 = $$137;$$3 = $$2;
        label = 12;
        break;
       }
      }
     } else {
      $6 = (_towupper($$042)|0);
      $$036$in = $6;$$1$in = $$042;
      while(1) {
       $$1 = (($$1$in) + 1)|0;
       $$036 = (($$036$in) + 1)|0;
       $7 = ($$1$in|0)<($2|0);
       if (!($7)) {
        $$039 = $6;$$238 = $$036;$$3 = $$1;
        label = 12;
        break L4;
       }
       $8 = (_towupper($$1)|0);
       $9 = ($8|0)==($$036|0);
       if ($9) {
        $$036$in = $$036;$$1$in = $$1;
       } else {
        $$039 = $6;$$238 = $$036;$$3 = $$1;
        label = 12;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 12) {
     label = 0;
     $18 = (_tre_new_lit($0)|0);
     $19 = ($18|0)==(0|0);
     if ($19) {
      $$040 = -1;
      break L1;
     }
     HEAP32[$18>>2] = $$039;
     $20 = (($$238) + -1)|0;
     $21 = ((($18)) + 4|0);
     HEAP32[$21>>2] = $20;
     $22 = ((($18)) + 8|0);
     HEAP32[$22>>2] = -1;
     $$0$be = $$3;
    }
    $17 = ($$0$be|0)>($2|0);
    if ($17) {
     $$040 = 0;
     break;
    } else {
     $$042 = $$0$be;
    }
   }
  }
 } while(0);
 return ($$040|0);
}
function _regerror($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$0 = 0, $$0$lcssa = 0, $$01112 = 0, $$013 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $4 = ($0|0)==(0);
 L1: do {
  if ($4) {
   $$0$lcssa = 183315;
  } else {
   $$01112 = $0;$$013 = 183315;
   while(1) {
    $5 = HEAP8[$$013>>0]|0;
    $6 = ($5<<24>>24)==(0);
    if ($6) {
     $$0$lcssa = $$013;
     break L1;
    }
    $7 = (($$01112) + -1)|0;
    $8 = (_strlen($$013)|0);
    $9 = (($8) + 1)|0;
    $10 = (($$013) + ($9)|0);
    $11 = ($7|0)==(0);
    if ($11) {
     $$0$lcssa = $10;
     break;
    } else {
     $$01112 = $7;$$013 = $10;
    }
   }
  }
 } while(0);
 $12 = HEAP8[$$0$lcssa>>0]|0;
 $13 = ($12<<24>>24)==(0);
 $14 = ((($$0$lcssa)) + 1|0);
 $$$0 = $13 ? $14 : $$0$lcssa;
 $15 = (___lctrans_cur($$$0)|0);
 HEAP32[$vararg_buffer>>2] = $15;
 $16 = (_snprintf($2,$3,183601,$vararg_buffer)|0);
 $17 = (($16) + 1)|0;
 STACKTOP = sp;return ($17|0);
}
function _regexec($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$026 = 0, $$027 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 8;
 $11 = ($10|0)==(0);
 $$ = $11 ? $2 : 0;
 $12 = ((($7)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)>(0);
 $15 = ($$|0)!=(0);
 $or$cond = $14 & $15;
 if ($or$cond) {
  $16 = $13 << 2;
  $17 = (_malloc($16)|0);
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$027 = 12;
  } else {
   $$0 = $17;$28 = $17;
   label = 3;
  }
 } else {
  $$0 = 0;$28 = 0;
  label = 3;
 }
 if ((label|0) == 3) {
  $19 = ((($7)) + 60|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = (_tre_tnfa_run_parallel($7,$1,$$0,$4,$5)|0);
   $$026 = $23;
  } else {
   $22 = (_tre_tnfa_run_backtrack($7,$1,$$0,$4,$5)|0);
   $$026 = $22;
  }
  $24 = ($$026|0)==(0);
  if ($24) {
   $25 = HEAP32[$8>>2]|0;
   $26 = HEAP32[$5>>2]|0;
   _tre_fill_pmatch($$,$3,$25,$7,$$0,$26);
  }
  $27 = ($$0|0)==(0|0);
  if ($27) {
   $$027 = $$026;
  } else {
   _free($28);
   $$027 = $$026;
  }
 }
 STACKTOP = sp;return ($$027|0);
}
function _tre_tnfa_run_backtrack($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0450619673 = 0, $$0452615 = 0, $$0458 = 0, $$0463 = 0, $$0463$pn = 0, $$0467 = 0, $$0476 = 0, $$0477640 = 0, $$0479630 = 0, $$0481595 = 0, $$0482 = 0, $$0486591 = 0, $$0487586 = 0, $$0501 = 0, $$0503601 = 0, $$0505 = 0, $$0519598 = 0, $$0529$ph = 0, $$0531597 = 0;
 var $$0535 = 0, $$0611 = 0, $$11516 = 0, $$12517 = 0, $$13518 = 0, $$14 = 0, $$1459 = 0, $$1468 = 0, $$1480 = 0, $$1483 = 0, $$1502 = 0, $$1504627 = 0, $$1506599 = 0, $$1520 = 0, $$1530 = 0, $$1532 = 0, $$1536 = 0, $$2455 = 0, $$2465 = 0, $$2469 = 0;
 var $$2484 = 0, $$2521608 = 0, $$2533 = 0, $$3461 = 0, $$3466 = 0, $$3470 = 0, $$3485 = 0, $$3508 = 0, $$3522 = 0, $$3534 = 0, $$4462 = 0, $$4523 = 0, $$5472 = 0, $$5510 = 0, $$5524623 = 0, $$6473 = 0, $$6500 = 0, $$6511 = 0, $$6525 = 0, $$7474 = 0;
 var $$7512624 = 0, $$7526637 = 0, $$8475 = 0, $$8527 = 0, $$9514 = 0, $$9528 = 0, $$old = 0, $$old11 = 0, $$old37 = 0, $$old38 = 0, $$ph = 0, $$pr = 0, $$pr537 = 0, $$pr545 = 0, $$pr547 = 0, $$pre = 0, $$pre653 = 0, $$pre655 = 0, $$pre659 = 0, $$pre661 = 0;
 var $$pre662 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge642 = 0, $brmerge645 = 0, $brmerge646 = 0, $not$ = 0, $or$cond$not = 0, $or$cond10 = 0, $or$cond12 = 0, $or$cond15 = 0, $or$cond18 = 0, $or$cond21 = 0;
 var $or$cond24 = 0, $or$cond27$not = 0, $or$cond30 = 0, $or$cond36 = 0, $or$cond39 = 0, $or$cond42 = 0, $or$cond45 = 0, $or$cond48 = 0, $or$cond51 = 0, $or$cond6 = 0, $or$cond644 = 0, $or$cond648 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = $3 & 1;
 $7 = $3 & 2;
 $8 = ((($0)) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 4;
 $11 = (___tre_mem_new_impl(0,0)|0);
 $12 = ($11|0)==(0|0);
 L1: do {
  if ($12) {
   $$14 = 12;
  } else {
   $13 = (___tre_mem_alloc_impl($11,0,0,0,32)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    ___tre_mem_destroy($11);
    $$14 = 12;
    break;
   }
   $15 = ((($13)) + 24|0);
   HEAP32[$15>>2] = 0;
   $16 = ((($13)) + 28|0);
   HEAP32[$16>>2] = 0;
   $17 = ((($0)) + 40|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0);
   if ($19) {
    $$0535 = 0;$134 = 0;
    label = 6;
   } else {
    $20 = $18 << 2;
    $21 = (_malloc($20)|0);
    $22 = ($21|0)==(0|0);
    if ($22) {
     $$1502 = 0;$$1530 = 0;$$1536 = $21;$$6500 = 12;$447 = 0;$449 = 0;$451 = 0;
    } else {
     $$0535 = $21;$134 = $21;
     label = 6;
    }
   }
   L8: do {
    if ((label|0) == 6) {
     $23 = ((($0)) + 28|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(0);
     if ($25) {
      $$0501 = 0;$136 = 0;
     } else {
      $26 = $24 << 3;
      $27 = (_malloc($26)|0);
      $28 = ($27|0)==(0|0);
      if ($28) {
       $$1502 = $27;$$1530 = 0;$$1536 = $$0535;$$6500 = 12;$447 = $134;$449 = 0;$451 = 0;
       break;
      } else {
       $$0501 = $27;$136 = $27;
      }
     }
     $29 = ((($0)) + 52|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==(0);
     if ($31) {
      $$0529$ph = 0;$$ph = 0;
     } else {
      $32 = $30 << 2;
      $33 = (_malloc($32)|0);
      $34 = ($33|0)==(0|0);
      if ($34) {
       $$1502 = $$0501;$$1530 = $33;$$1536 = $$0535;$$6500 = 12;$447 = $134;$449 = $136;$451 = 0;
       break;
      } else {
       $$0529$ph = $33;$$ph = $33;
      }
     }
     $35 = ((($0)) + 8|0);
     $36 = ((($0)) + 12|0);
     $37 = ($2|0)==(0|0);
     $38 = ($2|0)!=(0|0);
     $39 = ((($0)) + 32|0);
     $40 = ($10|0)!=(0);
     $41 = ($6|0)==(0);
     $$0458 = $1;$$0467 = 1;$$0476 = -1;$$0482 = -1;$$0505 = $13;$43 = $18;$64 = 0;
     L16: while(1) {
      $42 = ($43|0)>(0);
      if ($42) {
       $$0487586 = 0;$452 = $43;
       while(1) {
        $47 = (($$0535) + ($$0487586<<2)|0);
        HEAP32[$47>>2] = -1;
        if ($37) {
         $51 = $452;
        } else {
         $48 = (($2) + ($$0487586<<2)|0);
         HEAP32[$48>>2] = -1;
         $$pre653 = HEAP32[$17>>2]|0;
         $51 = $$pre653;
        }
        $49 = (($$0487586) + 1)|0;
        $50 = ($49|0)<($51|0);
        if ($50) {
         $$0487586 = $49;$452 = $51;
        } else {
         break;
        }
       }
      }
      $44 = HEAP32[$29>>2]|0;
      $45 = ($44|0)>(0);
      if ($45) {
       $46 = $44 << 2;
       _memset(($$ph|0),0,($46|0))|0;
      }
      $52 = (($$0467) + ($$0476))|0;
      $53 = (_mbtowc($5,$$0458,4)|0);
      $54 = ($53|0)<(1);
      if ($54) {
       $55 = ($53|0)<(0);
       if ($55) {
        $$1502 = $$0501;$$1530 = $$0529$ph;$$1536 = $$0535;$$6500 = 1;$447 = $134;$449 = $136;$451 = $$ph;
        break L8;
       } else {
        $$1468 = 1;
       }
      } else {
       $$1468 = $53;
      }
      $56 = (($$0458) + ($$1468)|0);
      $57 = HEAP32[$5>>2]|0;
      $58 = HEAP32[$35>>2]|0;
      $59 = ((($58)) + 8|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if ($61) {
       $$12517 = $$0505;$$2484 = $$0482;$$7474 = $$1468;$$8527 = 0;
       label = 171;
      } else {
       $62 = ($52|0)!=(0);
       $63 = ($64|0)==(95);
       $65 = ($52|0)==(0);
       $66 = ($52|0)<(1);
       $67 = ($64|0)==(10);
       $or$cond6 = $40 & $67;
       $or$cond$not = $66 & $41;
       $$0503601 = $58;$$0519598 = 0;$$0531597 = 0;$$1506599 = $$0505;$125 = $59;
       while(1) {
        $68 = ((($$0503601)) + 20|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = ($69|0)==(0);
        L35: do {
         if ($70) {
          label = 49;
         } else {
          $71 = $69 & 1;
          $72 = ($71|0)==(0);
          $brmerge = $72 | $or$cond$not;
          $brmerge642 = $brmerge | $or$cond6;
          if ($brmerge642) {
           $73 = $69 & 2;
           $74 = ($73|0)==(0);
           if (!($74)) {
            $75 = HEAP32[$5>>2]|0;
            $76 = $75 | $7;
            $77 = ($76|0)==(0);
            $78 = ($75|0)==(10);
            $or$cond10 = $40 & $78;
            $or$cond644 = $77 | $or$cond10;
            if (!($or$cond644)) {
             $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
             break;
            }
           }
           $79 = $69 & 16;
           $80 = ($79|0)==(0);
           do {
            if (!($80)) {
             if ($63) {
              $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
              break L35;
             }
             $81 = (_iswalnum($64)|0);
             $82 = ($81|0)==(0);
             if (!($82)) {
              $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
              break L35;
             }
             $83 = HEAP32[$5>>2]|0;
             $84 = ($83|0)==(95);
             if ($84) {
              break;
             }
             $85 = (_iswalnum($83)|0);
             $86 = ($85|0)==(0);
             if ($86) {
              $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
              break L35;
             }
            }
           } while(0);
           $87 = HEAP32[$68>>2]|0;
           $88 = $87 & 32;
           $89 = ($88|0)==(0);
           if ($89) {
            $98 = $87;
           } else {
            if ($63) {
             $$old = HEAP32[$5>>2]|0;
             $$old11 = ($$old|0)==(95);
             if ($$old11) {
              $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
              break;
             } else {
              $94 = $$old;
             }
            } else {
             $90 = (_iswalnum($64)|0);
             $91 = ($90|0)==(0);
             $92 = HEAP32[$5>>2]|0;
             $93 = ($92|0)==(95);
             $or$cond12 = $91 | $93;
             if ($or$cond12) {
              $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
              break;
             } else {
              $94 = $92;
             }
            }
            $95 = (_iswalnum($94)|0);
            $96 = ($95|0)==(0);
            if (!($96)) {
             $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
             break;
            }
            $$pre655 = HEAP32[$68>>2]|0;
            $98 = $$pre655;
           }
           $97 = $98 & 64;
           $99 = ($97|0)!=(0);
           $or$cond15 = $62 & $99;
           $100 = HEAP32[$5>>2]|0;
           $101 = ($100|0)!=(0);
           $or$cond18 = $101 & $or$cond15;
           do {
            if ($or$cond18) {
             if ($63) {
              $105 = $100;$109 = 1;
             } else {
              $102 = (_iswalnum($64)|0);
              $103 = ($102|0)!=(0);
              $$pr = HEAP32[$5>>2]|0;
              $105 = $$pr;$109 = $103;
             }
             $104 = ($105|0)==(95);
             if ($104) {
              if ($109) {
               $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
               break L35;
              } else {
               break;
              }
             } else {
              $106 = (_iswalnum($105)|0);
              $107 = ($106|0)!=(0);
              $108 = $109 ^ $107;
              if ($108) {
               break;
              } else {
               $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
               break L35;
              }
             }
            }
           } while(0);
           $110 = HEAP32[$68>>2]|0;
           $111 = $110 & 128;
           $112 = ($111|0)==(0);
           if ($112) {
            label = 49;
            break;
           }
           $113 = HEAP32[$5>>2]|0;
           $114 = ($113|0)==(0);
           $or$cond21 = $65 | $114;
           if ($or$cond21) {
            $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
            break;
           }
           if ($63) {
            $118 = $113;$122 = 1;
           } else {
            $115 = (_iswalnum($64)|0);
            $116 = ($115|0)!=(0);
            $$pr537 = HEAP32[$5>>2]|0;
            $118 = $$pr537;$122 = $116;
           }
           $117 = ($118|0)==(95);
           if ($117) {
            if ($122) {
             label = 49;
             break;
            } else {
             $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
             break;
            }
           } else {
            $119 = (_iswalnum($118)|0);
            $120 = ($119|0)!=(0);
            $121 = $122 ^ $120;
            if ($121) {
             $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
             break;
            } else {
             label = 49;
             break;
            }
           }
          } else {
           $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
          }
         }
        } while(0);
        do {
         if ((label|0) == 49) {
          label = 0;
          $123 = ($$0531597|0)==(0|0);
          if ($123) {
           $124 = HEAP32[$125>>2]|0;
           $126 = ((($$0503601)) + 16|0);
           $127 = HEAP32[$126>>2]|0;
           $$1520 = $127;$$1532 = $124;$$5510 = $$1506599;
           break;
          }
          $128 = ((($$1506599)) + 28|0);
          $129 = HEAP32[$128>>2]|0;
          $130 = ($129|0)==(0|0);
          if ($130) {
           $131 = (___tre_mem_alloc_impl($11,0,0,0,32)|0);
           $132 = ($131|0)==(0|0);
           if ($132) {
            label = 53;
            break L16;
           }
           $138 = ((($131)) + 24|0);
           HEAP32[$138>>2] = $$1506599;
           $139 = ((($131)) + 28|0);
           HEAP32[$139>>2] = 0;
           $140 = HEAP32[$17>>2]|0;
           $141 = $140 << 2;
           $142 = (___tre_mem_alloc_impl($11,0,0,0,$141)|0);
           $143 = ((($131)) + 20|0);
           HEAP32[$143>>2] = $142;
           $144 = ($142|0)==(0|0);
           if ($144) {
            label = 60;
            break L16;
           }
           HEAP32[$128>>2] = $131;
           $$3508 = $131;
          } else {
           $$3508 = $129;
          }
          HEAP32[$$3508>>2] = $52;
          $148 = ((($$3508)) + 4|0);
          HEAP32[$148>>2] = $56;
          $149 = HEAP32[$125>>2]|0;
          $150 = ((($$3508)) + 8|0);
          HEAP32[$150>>2] = $149;
          $151 = ((($$0503601)) + 12|0);
          $152 = HEAP32[$151>>2]|0;
          $153 = ((($$3508)) + 12|0);
          HEAP32[$153>>2] = $152;
          $154 = HEAP32[$5>>2]|0;
          $155 = ((($$3508)) + 16|0);
          HEAP32[$155>>2] = $154;
          $156 = HEAP32[$17>>2]|0;
          $157 = ($156|0)>(0);
          if ($157) {
           $158 = ((($$3508)) + 20|0);
           $159 = HEAP32[$158>>2]|0;
           $$0486591 = 0;
           while(1) {
            $160 = (($$0535) + ($$0486591<<2)|0);
            $161 = HEAP32[$160>>2]|0;
            $162 = (($159) + ($$0486591<<2)|0);
            HEAP32[$162>>2] = $161;
            $163 = (($$0486591) + 1)|0;
            $164 = HEAP32[$17>>2]|0;
            $165 = ($163|0)<($164|0);
            if ($165) {
             $$0486591 = $163;
            } else {
             break;
            }
           }
          }
          $166 = ((($$0503601)) + 16|0);
          $167 = HEAP32[$166>>2]|0;
          $168 = ($167|0)==(0|0);
          if ($168) {
           $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$3508;
          } else {
           $169 = HEAP32[$167>>2]|0;
           $170 = ($169|0)>(-1);
           if (!($170)) {
            $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$3508;
            break;
           }
           $171 = ((($$3508)) + 20|0);
           $172 = HEAP32[$171>>2]|0;
           $$0481595 = $167;$175 = $169;
           while(1) {
            $173 = ((($$0481595)) + 4|0);
            $174 = (($172) + ($175<<2)|0);
            HEAP32[$174>>2] = $52;
            $176 = HEAP32[$173>>2]|0;
            $177 = ($176|0)>(-1);
            if ($177) {
             $$0481595 = $173;$175 = $176;
            } else {
             $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$3508;
             break;
            }
           }
          }
         }
        } while(0);
        $178 = ((($$0503601)) + 32|0);
        $179 = ((($$0503601)) + 40|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if ($181) {
         break;
        } else {
         $$0503601 = $178;$$0519598 = $$1520;$$0531597 = $$1532;$$1506599 = $$5510;$125 = $179;
        }
       }
       $182 = ($$1520|0)==(0|0);
       if ($182) {
        $$3522 = 0;
       } else {
        $183 = HEAP32[$$1520>>2]|0;
        $184 = ($183|0)>(-1);
        if ($184) {
         $$2521608 = $$1520;$186 = $183;
         while(1) {
          $185 = (($$0535) + ($186<<2)|0);
          HEAP32[$185>>2] = $52;
          $187 = ((($$2521608)) + 4|0);
          $188 = HEAP32[$187>>2]|0;
          $189 = ($188|0)>(-1);
          if ($189) {
           $$2521608 = $187;$186 = $188;
          } else {
           $$3522 = $187;
           break;
          }
         }
        } else {
         $$3522 = $$1520;
        }
       }
       $190 = ($$1532|0)==(0|0);
       if ($190) {
        $$12517 = $$5510;$$2484 = $$0482;$$7474 = $$1468;$$8527 = $$3522;
        label = 171;
       } else {
        $$0463 = $52;$$1459 = $56;$$1483 = $$0482;$$2469 = $$1468;$$2533 = $$1532;$$4523 = $$3522;$$6511 = $$5510;
        label = 79;
       }
      }
      L98: while(1) {
       if ((label|0) == 79) {
        label = 0;
        $191 = HEAP32[$36>>2]|0;
        $192 = ($$2533|0)==($191|0);
        if ($192) {
         $193 = ($$1483|0)<($$0463|0);
         if ($193) {
          if ($37) {
           $$12517 = $$6511;$$2484 = $$0463;$$7474 = $$2469;$$8527 = $$4523;
           label = 171;
           continue;
          }
          $$pre662 = HEAP32[$17>>2]|0;
          $200 = $$pre662;
         } else {
          $194 = ($$1483|0)==($$0463|0);
          $or$cond24 = $38 & $194;
          if (!($or$cond24)) {
           $$12517 = $$6511;$$2484 = $$1483;$$7474 = $$2469;$$8527 = $$4523;
           label = 171;
           continue;
          }
          $195 = HEAP32[$17>>2]|0;
          $196 = HEAP32[$39>>2]|0;
          $197 = (_tre_tag_order($195,$196,$$0535,$2)|0);
          $198 = ($197|0)==(0);
          if ($198) {
           $$12517 = $$6511;$$2484 = $$1483;$$7474 = $$2469;$$8527 = $$4523;
           label = 171;
           continue;
          } else {
           $200 = $195;
          }
         }
         $199 = ($200|0)>(0);
         if ($199) {
          $$0477640 = 0;
         } else {
          $$12517 = $$6511;$$2484 = $$0463;$$7474 = $$2469;$$8527 = $$4523;
          label = 171;
          continue;
         }
         while(1) {
          $201 = (($$0535) + ($$0477640<<2)|0);
          $202 = HEAP32[$201>>2]|0;
          $203 = (($2) + ($$0477640<<2)|0);
          HEAP32[$203>>2] = $202;
          $204 = (($$0477640) + 1)|0;
          $205 = HEAP32[$17>>2]|0;
          $206 = ($204|0)<($205|0);
          if ($206) {
           $$0477640 = $204;
          } else {
           $$12517 = $$6511;$$2484 = $$0463;$$7474 = $$2469;$$8527 = $$4523;
           label = 171;
           continue L98;
          }
         }
        }
        $207 = ((($$2533)) + 8|0);
        $208 = HEAP32[$207>>2]|0;
        $209 = ($208|0)==(0|0);
        if ($209) {
         label = 95;
        } else {
         $210 = ((($$2533)) + 20|0);
         $211 = HEAP32[$210>>2]|0;
         $212 = $211 & 256;
         $213 = ($212|0)==(0);
         if ($213) {
          label = 95;
         } else {
          $214 = ((($$2533)) + 24|0);
          $215 = HEAP32[$214>>2]|0;
          $216 = (($215) + 1)|0;
          $217 = HEAP32[$8>>2]|0;
          $218 = $217 & -9;
          _tre_fill_pmatch($216,$$0501,$218,$0,$$0535,$$0463);
          $219 = (($$0501) + ($215<<3)|0);
          $220 = HEAP32[$219>>2]|0;
          $221 = (((($$0501) + ($215<<3)|0)) + 4|0);
          $222 = HEAP32[$221>>2]|0;
          $223 = (($222) - ($220))|0;
          $224 = (($1) + ($220)|0);
          $225 = ((($$1459)) + -1|0);
          $226 = (_strncmp($224,$225,$223)|0);
          $227 = ($226|0)==(0);
          if (!($227)) {
           $$12517 = $$6511;$$2484 = $$1483;$$7474 = $$2469;$$8527 = $$4523;
           label = 171;
           continue;
          }
          $228 = ($223|0)==(0);
          $$ = $228&1;
          $229 = ((($$2533)) + 12|0);
          $230 = HEAP32[$229>>2]|0;
          if ($228) {
           $231 = (($$0529$ph) + ($230<<2)|0);
           $232 = HEAP32[$231>>2]|0;
           $233 = ($232|0)==(0);
           if (!($233)) {
            $$12517 = $$6511;$$2484 = $$1483;$$7474 = $$2469;$$8527 = $$4523;
            label = 171;
            continue;
           }
          }
          $234 = (($$0529$ph) + ($230<<2)|0);
          HEAP32[$234>>2] = $$;
          $235 = (($223) + -1)|0;
          $236 = (($$1459) + ($235)|0);
          $237 = (($235) + ($$0463))|0;
          $238 = HEAP32[$5>>2]|0;
          $239 = (_mbtowc($5,$236,4)|0);
          $240 = ($239|0)<(1);
          if ($240) {
           $241 = ($239|0)<(0);
           if ($241) {
            $$1502 = $$0501;$$1530 = $$0529$ph;$$1536 = $$0535;$$6500 = 1;$447 = $134;$449 = $136;$451 = $$ph;
            break L8;
           } else {
            $$3470 = 1;
           }
          } else {
           $$3470 = $239;
          }
          $242 = (($236) + ($$3470)|0);
          $$0463$pn = $237;$$2455 = $238;$$3461 = $242;$$6473 = $$3470;
         }
        }
        if ((label|0) == 95) {
         label = 0;
         $243 = HEAP32[$5>>2]|0;
         $244 = ($243|0)==(0);
         if ($244) {
          $$12517 = $$6511;$$2484 = $$1483;$$7474 = $$2469;$$8527 = $$4523;
          label = 171;
          continue;
         }
         $245 = (_mbtowc($5,$$1459,4)|0);
         $246 = ($245|0)<(1);
         if ($246) {
          $247 = ($245|0)<(0);
          if ($247) {
           $$1502 = $$0501;$$1530 = $$0529$ph;$$1536 = $$0535;$$6500 = 1;$447 = $134;$449 = $136;$451 = $$ph;
           break L8;
          } else {
           $$5472 = 1;
          }
         } else {
          $$5472 = $245;
         }
         $248 = (($$1459) + ($$5472)|0);
         $$0463$pn = $$0463;$$2455 = $243;$$3461 = $248;$$6473 = $$5472;
        }
        $$2465 = (($$0463$pn) + ($$2469))|0;
        $249 = HEAP32[$207>>2]|0;
        $250 = ($249|0)==(0|0);
        if ($250) {
         $$12517 = $$6511;$$2484 = $$1483;$$7474 = $$6473;$$8527 = $$4523;
         label = 171;
         continue;
        }
        $251 = ($$2465|0)!=(0);
        $252 = ($$2455|0)==(95);
        $253 = ($$2465|0)==(0);
        $254 = ($$2465|0)<(1);
        $255 = ($$2455|0)==(10);
        $or$cond30 = $40 & $255;
        $or$cond27$not = $254 & $41;
        $$0479630 = 0;$$1504627 = $$2533;$$5524623 = $$4523;$$7512624 = $$6511;$352 = $207;
        while(1) {
         $256 = HEAP32[$$1504627>>2]|0;
         $257 = ($256>>>0)>($$2455>>>0);
         L140: do {
          if ($257) {
           $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
          } else {
           $258 = ((($$1504627)) + 4|0);
           $259 = HEAP32[$258>>2]|0;
           $260 = ($259>>>0)<($$2455>>>0);
           if ($260) {
            $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
            break;
           }
           $261 = ((($$1504627)) + 20|0);
           $262 = HEAP32[$261>>2]|0;
           $263 = ($262|0)==(0);
           do {
            if (!($263)) {
             $264 = $262 & 1;
             $265 = ($264|0)==(0);
             $brmerge645 = $265 | $or$cond27$not;
             $brmerge646 = $brmerge645 | $or$cond30;
             if (!($brmerge646)) {
              $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
              break L140;
             }
             $266 = $262 & 2;
             $267 = ($266|0)==(0);
             if (!($267)) {
              $268 = HEAP32[$5>>2]|0;
              $269 = $268 | $7;
              $270 = ($269|0)==(0);
              $271 = ($268|0)==(10);
              $or$cond36 = $40 & $271;
              $or$cond648 = $270 | $or$cond36;
              if (!($or$cond648)) {
               $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
               break L140;
              }
             }
             $272 = $262 & 16;
             $273 = ($272|0)==(0);
             do {
              if (!($273)) {
               if ($252) {
                $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                break L140;
               }
               $274 = (_iswalnum($$2455)|0);
               $275 = ($274|0)==(0);
               if (!($275)) {
                $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                break L140;
               }
               $276 = HEAP32[$5>>2]|0;
               $277 = ($276|0)==(95);
               if ($277) {
                break;
               }
               $278 = (_iswalnum($276)|0);
               $279 = ($278|0)==(0);
               if ($279) {
                $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                break L140;
               }
              }
             } while(0);
             $280 = HEAP32[$261>>2]|0;
             $281 = $280 & 32;
             $282 = ($281|0)==(0);
             if ($282) {
              $291 = $280;
             } else {
              if ($252) {
               $$old37 = HEAP32[$5>>2]|0;
               $$old38 = ($$old37|0)==(95);
               if ($$old38) {
                $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                break L140;
               } else {
                $287 = $$old37;
               }
              } else {
               $283 = (_iswalnum($$2455)|0);
               $284 = ($283|0)==(0);
               $285 = HEAP32[$5>>2]|0;
               $286 = ($285|0)==(95);
               $or$cond39 = $284 | $286;
               if ($or$cond39) {
                $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                break L140;
               } else {
                $287 = $285;
               }
              }
              $288 = (_iswalnum($287)|0);
              $289 = ($288|0)==(0);
              if (!($289)) {
               $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
               break L140;
              }
              $$pre659 = HEAP32[$261>>2]|0;
              $291 = $$pre659;
             }
             $290 = $291 & 64;
             $292 = ($290|0)!=(0);
             $or$cond42 = $251 & $292;
             $293 = HEAP32[$5>>2]|0;
             $294 = ($293|0)!=(0);
             $or$cond45 = $294 & $or$cond42;
             do {
              if ($or$cond45) {
               if ($252) {
                $298 = $293;$302 = 1;
               } else {
                $295 = (_iswalnum($$2455)|0);
                $296 = ($295|0)!=(0);
                $$pr545 = HEAP32[$5>>2]|0;
                $298 = $$pr545;$302 = $296;
               }
               $297 = ($298|0)==(95);
               if ($297) {
                if ($302) {
                 $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                 break L140;
                } else {
                 break;
                }
               } else {
                $299 = (_iswalnum($298)|0);
                $300 = ($299|0)!=(0);
                $301 = $302 ^ $300;
                if ($301) {
                 break;
                } else {
                 $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                 break L140;
                }
               }
              }
             } while(0);
             $303 = HEAP32[$261>>2]|0;
             $304 = $303 & 128;
             $305 = ($304|0)==(0);
             do {
              if (!($305)) {
               $306 = HEAP32[$5>>2]|0;
               $307 = ($306|0)==(0);
               $or$cond48 = $253 | $307;
               if ($or$cond48) {
                $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                break L140;
               }
               if ($252) {
                $311 = $306;$315 = 1;
               } else {
                $308 = (_iswalnum($$2455)|0);
                $309 = ($308|0)!=(0);
                $$pr547 = HEAP32[$5>>2]|0;
                $311 = $$pr547;$315 = $309;
               }
               $310 = ($311|0)==(95);
               if ($310) {
                if ($315) {
                 break;
                } else {
                 $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                 break L140;
                }
               } else {
                $312 = (_iswalnum($311)|0);
                $313 = ($312|0)!=(0);
                $314 = $315 ^ $313;
                if ($314) {
                 $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                 break L140;
                } else {
                 break;
                }
               }
              }
             } while(0);
             $316 = HEAP32[$261>>2]|0;
             $317 = $316 & 4;
             $318 = ($317|0)==(0);
             do {
              if ($318) {
               $327 = $316;
              } else {
               $319 = HEAP32[$8>>2]|0;
               $320 = $319 & 2;
               $321 = ($320|0)==(0);
               if (!($321)) {
                $327 = $316;
                break;
               }
               $322 = ((($$1504627)) + 24|0);
               $323 = HEAP32[$322>>2]|0;
               $324 = (_iswctype($$2455,$323)|0);
               $325 = ($324|0)==(0);
               if ($325) {
                $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                break L140;
               }
               $$pre661 = HEAP32[$261>>2]|0;
               $327 = $$pre661;
              }
             } while(0);
             $326 = $327 & 4;
             $328 = ($326|0)==(0);
             do {
              if (!($328)) {
               $329 = HEAP32[$8>>2]|0;
               $330 = $329 & 2;
               $331 = ($330|0)==(0);
               if ($331) {
                break;
               }
               $332 = (_towlower($$2455)|0);
               $333 = ((($$1504627)) + 24|0);
               $334 = HEAP32[$333>>2]|0;
               $335 = (_iswctype($332,$334)|0);
               $336 = ($335|0)==(0);
               if (!($336)) {
                break;
               }
               $337 = (_towupper($$2455)|0);
               $338 = HEAP32[$333>>2]|0;
               $339 = (_iswctype($337,$338)|0);
               $340 = ($339|0)==(0);
               if ($340) {
                $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                break L140;
               }
              }
             } while(0);
             $341 = HEAP32[$261>>2]|0;
             $342 = $341 & 8;
             $343 = ($342|0)==(0);
             if ($343) {
              break;
             }
             $344 = ((($$1504627)) + 28|0);
             $345 = HEAP32[$344>>2]|0;
             $346 = HEAP32[$8>>2]|0;
             $347 = $346 & 2;
             $348 = (_tre_neg_char_classes_match($345,$$2455,$347)|0);
             $349 = ($348|0)==(0);
             if (!($349)) {
              $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
              break L140;
             }
            }
           } while(0);
           $350 = ($$0479630|0)==(0|0);
           if ($350) {
            $351 = HEAP32[$352>>2]|0;
            $353 = ((($$1504627)) + 16|0);
            $354 = HEAP32[$353>>2]|0;
            $$11516 = $$7512624;$$1480 = $351;$$6525 = $354;
            break;
           }
           $355 = ((($$7512624)) + 28|0);
           $356 = HEAP32[$355>>2]|0;
           $357 = ($356|0)==(0|0);
           if ($357) {
            $358 = (___tre_mem_alloc_impl($11,0,0,0,32)|0);
            $359 = ($358|0)==(0|0);
            if ($359) {
             label = 145;
             break L16;
            }
            $363 = ((($358)) + 24|0);
            HEAP32[$363>>2] = $$7512624;
            $364 = ((($358)) + 28|0);
            HEAP32[$364>>2] = 0;
            $365 = HEAP32[$17>>2]|0;
            $366 = $365 << 2;
            $367 = (___tre_mem_alloc_impl($11,0,0,0,$366)|0);
            $368 = ((($358)) + 20|0);
            HEAP32[$368>>2] = $367;
            $369 = ($367|0)==(0|0);
            if ($369) {
             label = 152;
             break L16;
            }
            HEAP32[$355>>2] = $358;
            $$9514 = $358;
           } else {
            $$9514 = $356;
           }
           HEAP32[$$9514>>2] = $$2465;
           $373 = ((($$9514)) + 4|0);
           HEAP32[$373>>2] = $$3461;
           $374 = HEAP32[$352>>2]|0;
           $375 = ((($$9514)) + 8|0);
           HEAP32[$375>>2] = $374;
           $376 = ((($$1504627)) + 12|0);
           $377 = HEAP32[$376>>2]|0;
           $378 = ((($$9514)) + 12|0);
           HEAP32[$378>>2] = $377;
           $379 = HEAP32[$5>>2]|0;
           $380 = ((($$9514)) + 16|0);
           HEAP32[$380>>2] = $379;
           $381 = HEAP32[$17>>2]|0;
           $382 = ($381|0)>(0);
           if ($382) {
            $383 = ((($$9514)) + 20|0);
            $384 = HEAP32[$383>>2]|0;
            $$0452615 = 0;
            while(1) {
             $385 = (($$0535) + ($$0452615<<2)|0);
             $386 = HEAP32[$385>>2]|0;
             $387 = (($384) + ($$0452615<<2)|0);
             HEAP32[$387>>2] = $386;
             $388 = (($$0452615) + 1)|0;
             $389 = HEAP32[$17>>2]|0;
             $390 = ($388|0)<($389|0);
             if ($390) {
              $$0452615 = $388;
             } else {
              break;
             }
            }
           }
           $391 = ((($$1504627)) + 16|0);
           $392 = HEAP32[$391>>2]|0;
           $393 = ($392|0)==(0|0);
           if ($393) {
            $$11516 = $$9514;$$1480 = $$0479630;$$6525 = $$5524623;
            break;
           }
           $394 = ((($$9514)) + 20|0);
           $395 = HEAP32[$392>>2]|0;
           $396 = ($395|0)>(-1);
           if (!($396)) {
            $$11516 = $$9514;$$1480 = $$0479630;$$6525 = $$5524623;
            break;
           }
           $397 = HEAP32[$394>>2]|0;
           $$0450619673 = $392;$399 = $395;
           while(1) {
            $398 = (($397) + ($399<<2)|0);
            HEAP32[$398>>2] = $$2465;
            $400 = ((($$0450619673)) + 4|0);
            $401 = HEAP32[$400>>2]|0;
            $402 = ($401|0)>(-1);
            if ($402) {
             $$0450619673 = $400;$399 = $401;
            } else {
             $$11516 = $$9514;$$1480 = $$0479630;$$6525 = $$5524623;
             break;
            }
           }
          }
         } while(0);
         $403 = ((($$1504627)) + 32|0);
         $404 = ((($$1504627)) + 40|0);
         $405 = HEAP32[$404>>2]|0;
         $406 = ($405|0)==(0|0);
         if ($406) {
          break;
         } else {
          $$0479630 = $$1480;$$1504627 = $403;$$5524623 = $$6525;$$7512624 = $$11516;$352 = $404;
         }
        }
        $407 = ($$1480|0)==(0|0);
        if ($407) {
         $$12517 = $$11516;$$2484 = $$1483;$$7474 = $$6473;$$8527 = $$6525;
         label = 171;
         continue;
        }
        $408 = ($$6525|0)==(0|0);
        if ($408) {
         $$13518 = $$11516;$$3466 = $$2465;$$3485 = $$1483;$$3534 = $$1480;$$4462 = $$3461;$$8475 = $$6473;$$9528 = 0;
        } else {
         $409 = HEAP32[$$6525>>2]|0;
         $410 = ($409|0)>(-1);
         if ($410) {
          $$7526637 = $$6525;$413 = $409;
          while(1) {
           $411 = ((($$7526637)) + 4|0);
           $412 = (($$0535) + ($413<<2)|0);
           HEAP32[$412>>2] = $$2465;
           $414 = HEAP32[$411>>2]|0;
           $415 = ($414|0)>(-1);
           if ($415) {
            $$7526637 = $411;$413 = $414;
           } else {
            $$13518 = $$11516;$$3466 = $$2465;$$3485 = $$1483;$$3534 = $$1480;$$4462 = $$3461;$$8475 = $$6473;$$9528 = $411;
            break;
           }
          }
         } else {
          $$13518 = $$11516;$$3466 = $$2465;$$3485 = $$1483;$$3534 = $$1480;$$4462 = $$3461;$$8475 = $$6473;$$9528 = $$6525;
         }
        }
       }
       else if ((label|0) == 171) {
        label = 0;
        $416 = ((($$12517)) + 24|0);
        $417 = HEAP32[$416>>2]|0;
        $418 = ($417|0)==(0|0);
        if ($418) {
         break;
        }
        $419 = ((($$12517)) + 8|0);
        $420 = HEAP32[$419>>2]|0;
        $421 = ((($420)) + 20|0);
        $422 = HEAP32[$421>>2]|0;
        $423 = $422 & 256;
        $424 = ($423|0)==(0);
        if (!($424)) {
         $425 = ((($$12517)) + 12|0);
         $426 = HEAP32[$425>>2]|0;
         $427 = (($$0529$ph) + ($426<<2)|0);
         HEAP32[$427>>2] = 0;
        }
        $428 = HEAP32[$$12517>>2]|0;
        $429 = ((($$12517)) + 4|0);
        $430 = HEAP32[$429>>2]|0;
        $431 = ((($$12517)) + 16|0);
        $432 = HEAP32[$431>>2]|0;
        HEAP32[$5>>2] = $432;
        $433 = HEAP32[$17>>2]|0;
        $434 = ($433|0)>(0);
        if ($434) {
         $435 = ((($$12517)) + 20|0);
         $436 = HEAP32[$435>>2]|0;
         $$0611 = 0;
         while(1) {
          $437 = (($436) + ($$0611<<2)|0);
          $438 = HEAP32[$437>>2]|0;
          $439 = (($$0535) + ($$0611<<2)|0);
          HEAP32[$439>>2] = $438;
          $440 = (($$0611) + 1)|0;
          $441 = ($440|0)<($433|0);
          if ($441) {
           $$0611 = $440;
          } else {
           $$13518 = $417;$$3466 = $428;$$3485 = $$2484;$$3534 = $420;$$4462 = $430;$$8475 = $$7474;$$9528 = $$8527;
           break;
          }
         }
        } else {
         $$13518 = $417;$$3466 = $428;$$3485 = $$2484;$$3534 = $420;$$4462 = $430;$$8475 = $$7474;$$9528 = $$8527;
        }
       }
       $$0463 = $$3466;$$1459 = $$4462;$$1483 = $$3485;$$2469 = $$8475;$$2533 = $$3534;$$4523 = $$9528;$$6511 = $$13518;
       label = 79;
      }
      $442 = ($$2484|0)>(-1);
      $443 = HEAP32[$5>>2]|0;
      $444 = ($443|0)==(0);
      $or$cond51 = $442 | $444;
      if ($or$cond51) {
       label = 180;
       break;
      }
      HEAP32[$5>>2] = $57;
      $$pre = HEAP32[$17>>2]|0;
      $$0458 = $56;$$0467 = $$7474;$$0476 = $52;$$0482 = $$2484;$$0505 = $$12517;$43 = $$pre;$64 = $57;
     }
     if ((label|0) == 53) {
      ___tre_mem_destroy($11);
      $133 = ($$0535|0)==(0|0);
      if (!($133)) {
       _free($134);
      }
      $135 = ($$0501|0)==(0|0);
      if (!($135)) {
       _free($136);
      }
      $137 = ($$0529$ph|0)==(0|0);
      if ($137) {
       $$14 = 12;
       break L1;
      }
      _free($$ph);
      $$14 = 12;
      break L1;
     }
     else if ((label|0) == 60) {
      ___tre_mem_destroy($11);
      $145 = ($$0535|0)==(0|0);
      if (!($145)) {
       _free($134);
      }
      $146 = ($$0501|0)==(0|0);
      if (!($146)) {
       _free($136);
      }
      $147 = ($$0529$ph|0)==(0|0);
      if ($147) {
       $$14 = 12;
       break L1;
      }
      _free($$ph);
      $$14 = 12;
      break L1;
     }
     else if ((label|0) == 145) {
      ___tre_mem_destroy($11);
      $360 = ($$0535|0)==(0|0);
      if (!($360)) {
       _free($134);
      }
      $361 = ($$0501|0)==(0|0);
      if (!($361)) {
       _free($136);
      }
      $362 = ($$0529$ph|0)==(0|0);
      if ($362) {
       $$14 = 12;
       break L1;
      }
      _free($$ph);
      $$14 = 12;
      break L1;
     }
     else if ((label|0) == 152) {
      ___tre_mem_destroy($11);
      $370 = ($$0535|0)==(0|0);
      if (!($370)) {
       _free($134);
      }
      $371 = ($$0501|0)==(0|0);
      if (!($371)) {
       _free($136);
      }
      $372 = ($$0529$ph|0)==(0|0);
      if ($372) {
       $$14 = 12;
       break L1;
      }
      _free($$ph);
      $$14 = 12;
      break L1;
     }
     else if ((label|0) == 180) {
      $not$ = $442 ^ 1;
      $445 = $not$&1;
      HEAP32[$4>>2] = $$2484;
      $$1502 = $$0501;$$1530 = $$0529$ph;$$1536 = $$0535;$$6500 = $445;$447 = $134;$449 = $136;$451 = $$ph;
      break;
     }
    }
   } while(0);
   ___tre_mem_destroy($11);
   $446 = ($$1536|0)==(0|0);
   if (!($446)) {
    _free($447);
   }
   $448 = ($$1502|0)==(0|0);
   if (!($448)) {
    _free($449);
   }
   $450 = ($$1530|0)==(0|0);
   if ($450) {
    $$14 = $$6500;
   } else {
    _free($451);
    $$14 = $$6500;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$14|0);
}
function _tre_tnfa_run_parallel($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0415 = 0, $$0420587 = 0, $$0421 = 0, $$0422 = 0, $$0423 = 0, $$0426 = 0, $$0427$ph533 = 0, $$0427511 = 0, $$0432 = 0, $$0437 = 0, $$0448586 = 0, $$0456 = 0, $$0457523 = 0, $$0460 = 0, $$0468540 = 0, $$1 = 0, $$10 = 0, $$10447 = 0, $$10447$lobit = 0;
 var $$1424 = 0, $$1428565 = 0, $$1430 = 0, $$1433$ph$lcssa = 0, $$1433$ph531 = 0, $$1433$ph532$mux = 0, $$1438$ph$lcssa = 0, $$1438$ph529 = 0, $$1438$ph530$mux = 0, $$1449584 = 0, $$1458549 = 0, $$1461$ph$lcssa = 0, $$1461$ph527 = 0, $$1469574 = 0, $$1471 = 0, $$1474 = 0, $$2425 = 0, $$2431$lcssa = 0, $$2431578 = 0, $$2434 = 0;
 var $$2439 = 0, $$2462 = 0, $$2472 = 0, $$2475 = 0, $$3$lcssa = 0, $$3435 = 0, $$3440 = 0, $$3451525 = 0, $$3463$lcssa = 0, $$3463542 = 0, $$4 = 0, $$4436 = 0, $$4441 = 0, $$4452537 = 0, $$4464 = 0, $$476 = 0, $$5 = 0, $$5442$lcssa = 0, $$5442576 = 0, $$5453546 = 0;
 var $$5465$lcssa = 0, $$5465575 = 0, $$6$lcssa = 0, $$6443$lcssa = 0, $$6443556 = 0, $$6454553 = 0, $$6466$lcssa = 0, $$6466555 = 0, $$6577 = 0, $$7$lcssa = 0, $$7444 = 0, $$7455551 = 0, $$7467 = 0, $$7559 = 0, $$8 = 0, $$9446 = 0, $$old = 0, $$old34 = 0, $$old35 = 0, $$old46 = 0;
 var $$old47 = 0, $$old8 = 0, $$pr = 0, $$pr481 = 0, $$pr485 = 0, $$pr487 = 0, $$pre = 0, $$pre$phi624Z2D = 0, $$pre$phi626Z2D = 0, $$pre618 = 0, $$pre620 = 0, $$pre622 = 0, $$pre625 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge590 = 0, $brmerge593 = 0, $brmerge594 = 0, $brmerge598 = 0, $exitcond = 0, $exitcond613 = 0, $exitcond615 = 0, $or$cond$not = 0, $or$cond12 = 0, $or$cond15 = 0, $or$cond18 = 0, $or$cond21 = 0;
 var $or$cond24$not = 0, $or$cond27 = 0, $or$cond3 = 0, $or$cond33 = 0, $or$cond36 = 0, $or$cond39 = 0, $or$cond42 = 0, $or$cond45 = 0, $or$cond48 = 0, $or$cond592 = 0, $or$cond596 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = $3 & 1;
 $7 = $3 & 2;
 $8 = ((($0)) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 4;
 $11 = ($2|0)==(0|0);
 if ($11) {
  $$0456 = 0;
 } else {
  $12 = ((($0)) + 40|0);
  $13 = HEAP32[$12>>2]|0;
  $$0456 = $13;
 }
 $14 = $$0456 << 2;
 $15 = ((($0)) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 << 3;
 $18 = (($17) + 8)|0;
 $19 = Math_imul($14, $16)|0;
 $20 = (($18) + ($19))|0;
 $21 = $20 << 1;
 $22 = (($14) + 12)|0;
 $23 = (($22) + ($17))|0;
 $24 = (($23) + ($21))|0;
 $25 = (_malloc($24)|0);
 $26 = ($25|0)==(0|0);
 if ($26) {
  $$1 = 12;
 } else {
  _memset(($25|0),0,($24|0))|0;
  $27 = (($25) + ($14)|0);
  $28 = $27;
  $29 = $28 & 3;
  $30 = ($29|0)==(0);
  $31 = (4 - ($29))|0;
  $$ = $30 ? 0 : $31;
  $32 = (($27) + ($$)|0);
  $33 = (($32) + ($18)|0);
  $34 = $33;
  $35 = $34 & 3;
  $36 = ($35|0)==(0);
  $37 = (4 - ($35))|0;
  $38 = $36 ? 0 : $37;
  $39 = (($33) + ($38)|0);
  $40 = (($39) + ($18)|0);
  $41 = $40;
  $42 = $41 & 3;
  $43 = ($42|0)==(0);
  $44 = (4 - ($42))|0;
  $$476 = $43 ? 0 : $44;
  $45 = (($40) + ($$476)|0);
  $46 = (($45) + ($17)|0);
  $47 = $46;
  $48 = $47 & 3;
  $49 = ($16|0)>(0);
  if ($49) {
   $50 = ($48|0)==(0);
   $51 = (4 - ($48))|0;
   $52 = $50 ? 0 : $51;
   $53 = (($46) + ($52)|0);
   $$0420587 = $53;$$0448586 = 0;
   while(1) {
    $54 = (((($39) + ($$0448586<<3)|0)) + 4|0);
    HEAP32[$54>>2] = $$0420587;
    $55 = (($$0420587) + ($14)|0);
    $56 = (((($32) + ($$0448586<<3)|0)) + 4|0);
    HEAP32[$56>>2] = $55;
    $57 = (($55) + ($14)|0);
    $58 = (($$0448586) + 1)|0;
    $59 = ($58|0)<($16|0);
    if ($59) {
     $$0420587 = $57;$$0448586 = $58;
    } else {
     break;
    }
   }
   if ($49) {
    $$1449584 = 0;
    while(1) {
     $60 = (($45) + ($$1449584<<3)|0);
     HEAP32[$60>>2] = -1;
     $61 = (($$1449584) + 1)|0;
     $62 = ($61|0)<($16|0);
     if ($62) {
      $$1449584 = $61;
     } else {
      break;
     }
    }
   }
  }
  $63 = (_mbtowc($5,$1,4)|0);
  $64 = ($63|0)<(1);
  if ($64) {
   $65 = ($63|0)<(0);
   if ($65) {
    $$0426 = 1;
   } else {
    $$0423 = 1;
    label = 11;
   }
  } else {
   $$0423 = $63;
   label = 11;
  }
  L16: do {
   if ((label|0) == 11) {
    $66 = (($1) + ($$0423)|0);
    $67 = ((($0)) + 8|0);
    $68 = ($10|0)!=(0);
    $69 = ($6|0)==(0);
    $70 = ($$0456|0)>(0);
    $71 = ((($0)) + 12|0);
    $72 = ($$0456|0)<(1);
    $73 = ((($0)) + 44|0);
    $74 = ((($0)) + 32|0);
    $75 = ((($0)) + 36|0);
    $76 = ($$0456|0)==(0);
    $$0415 = 0;$$0421 = $66;$$0422 = 0;$$0432 = 0;$$0437 = -1;$$0460 = $32;$$1424 = $$0423;$$1430 = $25;$$1471 = $32;$$1474 = $39;
    while(1) {
     $77 = ($$0437|0)<(0);
     if ($77) {
      $78 = HEAP32[$67>>2]|0;
      $79 = ((($78)) + 8|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ($80|0)==(0|0);
      L22: do {
       if ($81) {
        $$1433$ph$lcssa = $$0432;$$1438$ph$lcssa = $$0437;$$1461$ph$lcssa = $$0460;
       } else {
        $82 = ($$0422|0)!=(0);
        $83 = ($$0415|0)==(95);
        $84 = ($$0422|0)==(0);
        $85 = ($$0422|0)<(1);
        $86 = ($$0415|0)==(10);
        $or$cond3 = $68 & $86;
        $or$cond$not = $85 & $69;
        $$0427$ph533 = $78;$$1433$ph531 = $$0432;$$1438$ph529 = $$0437;$$1461$ph527 = $$0460;$398 = $79;
        while(1) {
         $$0427511 = $$0427$ph533;$152 = $398;
         L26: while(1) {
          $87 = ((($$0427511)) + 12|0);
          $88 = HEAP32[$87>>2]|0;
          $89 = (($45) + ($88<<3)|0);
          $90 = HEAP32[$89>>2]|0;
          $91 = ($90|0)<($$0422|0);
          if (!($91)) {
           $$2462 = $$1461$ph527;$$3435 = $$1433$ph531;$$3440 = $$1438$ph529;
           break;
          }
          $92 = ((($$0427511)) + 20|0);
          $93 = HEAP32[$92>>2]|0;
          $94 = ($93|0)==(0);
          if ($94) {
           label = 46;
           break;
          }
          $95 = $93 & 1;
          $96 = ($95|0)==(0);
          $brmerge = $96 | $or$cond$not;
          $brmerge590 = $brmerge | $or$cond3;
          L30: do {
           if ($brmerge590) {
            $97 = $93 & 2;
            $98 = ($97|0)==(0);
            if (!($98)) {
             $99 = HEAP32[$5>>2]|0;
             $100 = $99 | $7;
             $101 = ($100|0)==(0);
             $102 = ($99|0)==(10);
             $or$cond7 = $68 & $102;
             $or$cond592 = $101 | $or$cond7;
             if (!($or$cond592)) {
              break;
             }
            }
            $103 = $93 & 16;
            $104 = ($103|0)==(0);
            do {
             if (!($104)) {
              if ($83) {
               break L30;
              }
              $105 = (_iswalnum($$0415)|0);
              $106 = ($105|0)==(0);
              if (!($106)) {
               break L30;
              }
              $107 = HEAP32[$5>>2]|0;
              $108 = ($107|0)==(95);
              if ($108) {
               break;
              }
              $109 = (_iswalnum($107)|0);
              $110 = ($109|0)==(0);
              if ($110) {
               break L30;
              }
             }
            } while(0);
            $111 = HEAP32[$92>>2]|0;
            $112 = $111 & 32;
            $113 = ($112|0)==(0);
            if ($113) {
             $122 = $111;
            } else {
             if ($83) {
              $$old = HEAP32[$5>>2]|0;
              $$old8 = ($$old|0)==(95);
              if ($$old8) {
               break;
              } else {
               $118 = $$old;
              }
             } else {
              $114 = (_iswalnum($$0415)|0);
              $115 = ($114|0)==(0);
              $116 = HEAP32[$5>>2]|0;
              $117 = ($116|0)==(95);
              $or$cond9 = $115 | $117;
              if ($or$cond9) {
               break;
              } else {
               $118 = $116;
              }
             }
             $119 = (_iswalnum($118)|0);
             $120 = ($119|0)==(0);
             if (!($120)) {
              break;
             }
             $$pre = HEAP32[$92>>2]|0;
             $122 = $$pre;
            }
            $121 = $122 & 64;
            $123 = ($121|0)!=(0);
            $or$cond12 = $82 & $123;
            $124 = HEAP32[$5>>2]|0;
            $125 = ($124|0)!=(0);
            $or$cond15 = $125 & $or$cond12;
            do {
             if ($or$cond15) {
              if ($83) {
               $129 = $124;$133 = 1;
              } else {
               $126 = (_iswalnum($$0415)|0);
               $127 = ($126|0)!=(0);
               $$pr = HEAP32[$5>>2]|0;
               $129 = $$pr;$133 = $127;
              }
              $128 = ($129|0)==(95);
              if ($128) {
               if ($133) {
                break L30;
               } else {
                break;
               }
              } else {
               $130 = (_iswalnum($129)|0);
               $131 = ($130|0)!=(0);
               $132 = $133 ^ $131;
               if ($132) {
                break;
               } else {
                break L30;
               }
              }
             }
            } while(0);
            $134 = HEAP32[$92>>2]|0;
            $135 = $134 & 128;
            $136 = ($135|0)==(0);
            if ($136) {
             label = 46;
             break L26;
            }
            $137 = HEAP32[$5>>2]|0;
            $138 = ($137|0)==(0);
            $or$cond18 = $84 | $138;
            if ($or$cond18) {
             break;
            }
            if ($83) {
             $142 = $137;$146 = 1;
            } else {
             $139 = (_iswalnum($$0415)|0);
             $140 = ($139|0)!=(0);
             $$pr481 = HEAP32[$5>>2]|0;
             $142 = $$pr481;$146 = $140;
            }
            $141 = ($142|0)==(95);
            if ($141) {
             if ($146) {
              label = 46;
              break L26;
             } else {
              break;
             }
            } else {
             $143 = (_iswalnum($142)|0);
             $144 = ($143|0)!=(0);
             $145 = $146 ^ $144;
             if ($145) {
              break;
             } else {
              label = 46;
              break L26;
             }
            }
           }
          } while(0);
          $147 = ((($$0427511)) + 32|0);
          $148 = ((($$0427511)) + 40|0);
          $149 = HEAP32[$148>>2]|0;
          $150 = ($149|0)==(0|0);
          if ($150) {
           $$1433$ph$lcssa = $$1433$ph531;$$1438$ph$lcssa = $$1438$ph529;$$1461$ph$lcssa = $$1461$ph527;
           break L22;
          } else {
           $$0427511 = $147;$152 = $148;
          }
         }
         if ((label|0) == 46) {
          label = 0;
          $151 = HEAP32[$152>>2]|0;
          HEAP32[$$1461$ph527>>2] = $151;
          if ($70) {
           $153 = ((($$1461$ph527)) + 4|0);
           $154 = HEAP32[$153>>2]|0;
           _memset(($154|0),-1,($14|0))|0;
          }
          $155 = ((($$0427511)) + 16|0);
          $156 = HEAP32[$155>>2]|0;
          $157 = ($156|0)==(0|0);
          if (!($157)) {
           $158 = HEAP32[$156>>2]|0;
           $159 = ($158|0)>(-1);
           if ($159) {
            $160 = ((($$1461$ph527)) + 4|0);
            $$0457523 = $156;$162 = $158;
            while(1) {
             $161 = ($162|0)<($$0456|0);
             if ($161) {
              $163 = HEAP32[$160>>2]|0;
              $164 = (($163) + ($162<<2)|0);
              HEAP32[$164>>2] = $$0422;
             }
             $165 = ((($$0457523)) + 4|0);
             $166 = HEAP32[$165>>2]|0;
             $167 = ($166|0)>(-1);
             if ($167) {
              $$0457523 = $165;$162 = $166;
             } else {
              break;
             }
            }
           }
          }
          $168 = HEAP32[$$1461$ph527>>2]|0;
          $169 = HEAP32[$71>>2]|0;
          $170 = ($168|0)!=($169|0);
          $brmerge598 = $170 | $72;
          if ($brmerge598) {
           $$1433$ph532$mux = $170 ? $$1433$ph531 : 1;
           $$1438$ph530$mux = $170 ? $$1438$ph529 : $$0422;
           $$pre625 = ((($$1461$ph527)) + 4|0);
           $$2434 = $$1433$ph532$mux;$$2439 = $$1438$ph530$mux;$$pre$phi626Z2D = $$pre625;
          } else {
           $171 = ((($$1461$ph527)) + 4|0);
           $172 = HEAP32[$171>>2]|0;
           $$3451525 = 0;
           while(1) {
            $173 = (($172) + ($$3451525<<2)|0);
            $174 = HEAP32[$173>>2]|0;
            $175 = (($2) + ($$3451525<<2)|0);
            HEAP32[$175>>2] = $174;
            $176 = (($$3451525) + 1)|0;
            $exitcond = ($176|0)==($$0456|0);
            if ($exitcond) {
             $$2434 = 1;$$2439 = $$0422;$$pre$phi626Z2D = $171;
             break;
            } else {
             $$3451525 = $176;
            }
           }
          }
          $177 = HEAP32[$87>>2]|0;
          $178 = (($45) + ($177<<3)|0);
          HEAP32[$178>>2] = $$0422;
          $179 = (((($45) + ($177<<3)|0)) + 4|0);
          HEAP32[$179>>2] = $$pre$phi626Z2D;
          $180 = ((($$1461$ph527)) + 8|0);
          $$2462 = $180;$$3435 = $$2434;$$3440 = $$2439;
         }
         $181 = ((($$0427511)) + 32|0);
         $182 = ((($$0427511)) + 40|0);
         $183 = HEAP32[$182>>2]|0;
         $184 = ($183|0)==(0|0);
         if ($184) {
          $$1433$ph$lcssa = $$3435;$$1438$ph$lcssa = $$3440;$$1461$ph$lcssa = $$2462;
          break;
         } else {
          $$0427$ph533 = $181;$$1433$ph531 = $$3435;$$1438$ph529 = $$3440;$$1461$ph527 = $$2462;$398 = $182;
         }
        }
       }
      } while(0);
      HEAP32[$$1461$ph$lcssa>>2] = 0;
      $$old46 = HEAP32[$5>>2]|0;
      $$old47 = ($$old46|0)==(0);
      if ($$old47) {
       $$10447 = $$1438$ph$lcssa;
       break;
      } else {
       $$4436 = $$1433$ph$lcssa;$$4441 = $$1438$ph$lcssa;$235 = $$old46;
      }
     } else {
      if ($76) {
       $$10447 = $$0437;
       break;
      }
      $185 = ($$0460|0)!=($$1471|0);
      $186 = HEAP32[$5>>2]|0;
      $187 = ($186|0)!=(0);
      $or$cond48 = $185 & $187;
      if ($or$cond48) {
       $$4436 = $$0432;$$4441 = $$0437;$235 = $186;
      } else {
       $$10447 = $$0437;
       break;
      }
     }
     $188 = (($$0422) + ($$1424))|0;
     $189 = (_mbtowc($5,$$0421,4)|0);
     $190 = ($189|0)<(1);
     if ($190) {
      $191 = ($189|0)<(0);
      if ($191) {
       $$0426 = 1;
       break L16;
      } else {
       $$2425 = 1;
      }
     } else {
      $$2425 = $189;
     }
     $192 = (($$0421) + ($$2425)|0);
     $193 = HEAP32[$73>>2]|0;
     $194 = ($193|0)!=(0);
     $195 = ($$4436|0)!=(0);
     $or$cond21 = $195 & $194;
     if ($or$cond21) {
      $196 = HEAP32[$$1471>>2]|0;
      $197 = ($196|0)==(0|0);
      if ($197) {
       $$3463$lcssa = $$1474;
      } else {
       $198 = HEAP32[$75>>2]|0;
       $199 = HEAP32[$198>>2]|0;
       $200 = ($199|0)>(-1);
       $$0468540 = $$1471;$$3463542 = $$1474;
       while(1) {
        $201 = ((($$0468540)) + 4|0);
        L101: do {
         if ($200) {
          $$4452537 = 0;$206 = $199;
          while(1) {
           $202 = $$4452537 | 1;
           $203 = (($198) + ($202<<2)|0);
           $204 = HEAP32[$203>>2]|0;
           $205 = ($206|0)<($$0456|0);
           if (!($205)) {
            $$4464 = $$3463542;
            break L101;
           }
           $207 = HEAP32[$201>>2]|0;
           $208 = (($207) + ($204<<2)|0);
           $209 = HEAP32[$208>>2]|0;
           $210 = (($2) + ($204<<2)|0);
           $211 = HEAP32[$210>>2]|0;
           $212 = ($209|0)==($211|0);
           if ($212) {
            $213 = (($207) + ($206<<2)|0);
            $214 = HEAP32[$213>>2]|0;
            $215 = (($2) + ($206<<2)|0);
            $216 = HEAP32[$215>>2]|0;
            $217 = ($214|0)<($216|0);
            if ($217) {
             $$4464 = $$3463542;
             break L101;
            }
           }
           $218 = (($$4452537) + 2)|0;
           $219 = (($198) + ($218<<2)|0);
           $220 = HEAP32[$219>>2]|0;
           $221 = ($220|0)>(-1);
           if ($221) {
            $$4452537 = $218;$206 = $220;
           } else {
            break;
           }
          }
          $222 = $207;
          $$pre$phi624Z2D = $201;$226 = $222;
          label = 75;
         } else {
          $$pre618 = HEAP32[$201>>2]|0;
          $$pre$phi624Z2D = $201;$226 = $$pre618;
          label = 75;
         }
        } while(0);
        if ((label|0) == 75) {
         label = 0;
         $223 = HEAP32[$$0468540>>2]|0;
         HEAP32[$$3463542>>2] = $223;
         $224 = ((($$3463542)) + 4|0);
         $225 = HEAP32[$224>>2]|0;
         HEAP32[$224>>2] = $226;
         HEAP32[$$pre$phi624Z2D>>2] = $225;
         $227 = ((($$3463542)) + 8|0);
         $$4464 = $227;
        }
        $228 = ((($$0468540)) + 8|0);
        $229 = HEAP32[$228>>2]|0;
        $230 = ($229|0)==(0|0);
        if ($230) {
         $$3463$lcssa = $$4464;
         break;
        } else {
         $$0468540 = $228;$$3463542 = $$4464;
        }
       }
      }
      HEAP32[$$3463$lcssa>>2] = 0;
      $$2472 = $$1471;$$2475 = $$1474;$$5 = 0;
     } else {
      $$2472 = $$1474;$$2475 = $$1471;$$5 = $$4436;
     }
     $231 = HEAP32[$$2475>>2]|0;
     $232 = ($231|0)==(0|0);
     if ($232) {
      $$2431$lcssa = $$1430;$$5442$lcssa = $$4441;$$5465$lcssa = $$2472;$$6$lcssa = $$5;
     } else {
      $233 = ($188|0)!=(0);
      $234 = ($235|0)==(95);
      $236 = ($188|0)==(0);
      $237 = ($188|0)<(1);
      $238 = ($235|0)==(10);
      $or$cond27 = $68 & $238;
      $or$cond24$not = $237 & $69;
      $$1469574 = $$2475;$$2431578 = $$1430;$$5442576 = $$4441;$$5465575 = $$2472;$$6577 = $$5;$240 = $231;
      while(1) {
       $239 = ((($240)) + 8|0);
       $241 = HEAP32[$239>>2]|0;
       $242 = ($241|0)==(0|0);
       if ($242) {
        $$3$lcssa = $$2431578;$$6443$lcssa = $$5442576;$$6466$lcssa = $$5465575;$$7$lcssa = $$6577;
       } else {
        $243 = ((($$1469574)) + 4|0);
        $$1428565 = $240;$$6443556 = $$5442576;$$6466555 = $$5465575;$$7559 = $$6577;$342 = $$2431578;$361 = $239;
        while(1) {
         $244 = HEAP32[$$1428565>>2]|0;
         $245 = ($244>>>0)>($235>>>0);
         L123: do {
          if ($245) {
           $$10 = $$7559;$$4 = $342;$$7467 = $$6466555;$$9446 = $$6443556;
          } else {
           $246 = ((($$1428565)) + 4|0);
           $247 = HEAP32[$246>>2]|0;
           $248 = ($247>>>0)<($235>>>0);
           if ($248) {
            $$10 = $$7559;$$4 = $342;$$7467 = $$6466555;$$9446 = $$6443556;
           } else {
            $249 = ((($$1428565)) + 20|0);
            $250 = HEAP32[$249>>2]|0;
            $251 = ($250|0)==(0);
            do {
             if (!($251)) {
              $252 = $250 & 1;
              $253 = ($252|0)==(0);
              $brmerge593 = $253 | $or$cond24$not;
              $brmerge594 = $brmerge593 | $or$cond27;
              if (!($brmerge594)) {
               $$10 = $$7559;$$4 = $342;$$7467 = $$6466555;$$9446 = $$6443556;
               break L123;
              }
              $254 = $250 & 2;
              $255 = ($254|0)==(0);
              if (!($255)) {
               $256 = HEAP32[$5>>2]|0;
               $257 = $256 | $7;
               $258 = ($257|0)==(0);
               $259 = ($256|0)==(10);
               $or$cond33 = $68 & $259;
               $or$cond596 = $258 | $or$cond33;
               if (!($or$cond596)) {
                $$10 = $$7559;$$4 = $342;$$7467 = $$6466555;$$9446 = $$6443556;
                break L123;
               }
              }
              $260 = $250 & 16;
              $261 = ($260|0)==(0);
              do {
               if (!($261)) {
                if ($234) {
                 $$10 = $$7559;$$4 = $342;$$7467 = $$6466555;$$9446 = $$6443556;
                 break L123;
                }
                $262 = (_iswalnum($235)|0);
                $263 = ($262|0)==(0);
                if (!($263)) {
                 $$10 = $$7559;$$4 = $342;$$7467 = $$6466555;$$9446 = $$6443556;
                 break L123;
                }
                $264 = HEAP32[$5>>2]|0;
                $265 = ($264|0)==(95);
                if ($265) {
                 break;
                }
                $266 = (_iswalnum($264)|0);
                $267 = ($266|0)==(0);
                if ($267) {
                 $$10 = $$7559;$$4 = $342;$$7467 = $$6466555;$$9446 = $$6443556;
                 break L123;
                }
               }
              } while(0);
              $268 = HEAP32[$249>>2]|0;
              $269 = $268 & 32;
              $270 = ($269|0)==(0);
              if ($270) {
               $279 = $268;
              } else {
               if ($234) {
                $$old34 = HEAP32[$5>>2]|0;
                $$old35 = ($$old34|0)==(95);
                if ($$old35) {
                 $$10 = $$7559;$$4 = $342;$$7467 = $$6466555;$$9446 = $$6443556;
                 break L123;
                } else {
                 $275 = $$old34;
                }
               } else {
                $271 = (_iswalnum($235)|0);
                $272 = ($271|0)==(0);
                $273 = HEAP32[$5>>2]|0;
                $274 = ($273|0)==(95);
                $or$cond36 = $272 | $274;
                if ($or$cond36) {
                 $$10 = $$7559;$$4 = $342;$$7467 = $$6466555;$$9446 = $$6443556;
                 break L123;
                } else {
                 $275 = $273;
                }
               }
               $276 = (_iswalnum($275)|0);
               $277 = ($276|0)==(0);
               if (!($277)) {
                $$10 = $$7559;$$4 = $342;$$7467 = $$6466555;$$9446 = $$6443556;
                break L123;
               }
               $$pre620 = HEAP32[$249>>2]|0;
               $279 = $$pre620;
              }
              $278 = $279 & 64;
              $280 = ($278|0)!=(0);
              $or$cond39 = $233 & $280;
              $281 = HEAP32[$5>>2]|0;
              $282 = ($281|0)!=(0);
              $or$cond42 = $282 & $or$cond39;
              do {
               if ($or$cond42) {
                if ($234) {
                 $286 = $281;$290 = 1;
                } else {
                 $283 = (_iswalnum($235)|0);
                 $284 = ($283|0)!=(0);
                 $$pr485 = HEAP32[$5>>2]|0;
                 $286 = $$pr485;$290 = $284;
                }
                $285 = ($286|0)==(95);
                if ($285) {
                 if ($290) {
                  $$10 = $$7559;$$4 = $342;$$7467 = $$6466555;$$9446 = $$6443556;
                  break L123;
                 } else {
                  break;
                 }
                } else {
                 $287 = (_iswalnum($286)|0);
                 $288 = ($287|0)!=(0);
                 $289 = $290 ^ $288;
                 if ($289) {
                  break;
                 } else {
                  $$10 = $$7559;$$4 = $342;$$7467 = $$6466555;$$9446 = $$6443556;
                  break L123;
                 }
                }
               }
              } while(0);
              $291 = HEAP32[$249>>2]|0;
              $292 = $291 & 128;
              $293 = ($292|0)==(0);
              do {
               if (!($293)) {
                $294 = HEAP32[$5>>2]|0;
                $295 = ($294|0)==(0);
                $or$cond45 = $236 | $295;
                if ($or$cond45) {
                 $$10 = $$7559;$$4 = $342;$$7467 = $$6466555;$$9446 = $$6443556;
                 break L123;
                }
                if ($234) {
                 $299 = $294;$303 = 1;
                } else {
                 $296 = (_iswalnum($235)|0);
                 $297 = ($296|0)!=(0);
                 $$pr487 = HEAP32[$5>>2]|0;
                 $299 = $$pr487;$303 = $297;
                }
                $298 = ($299|0)==(95);
                if ($298) {
                 if ($303) {
                  break;
                 } else {
                  $$10 = $$7559;$$4 = $342;$$7467 = $$6466555;$$9446 = $$6443556;
                  break L123;
                 }
                } else {
                 $300 = (_iswalnum($299)|0);
                 $301 = ($300|0)!=(0);
                 $302 = $303 ^ $301;
                 if ($302) {
                  $$10 = $$7559;$$4 = $342;$$7467 = $$6466555;$$9446 = $$6443556;
                  break L123;
                 } else {
                  break;
                 }
                }
               }
              } while(0);
              $304 = HEAP32[$249>>2]|0;
              $305 = $304 & 4;
              $306 = ($305|0)==(0);
              do {
               if ($306) {
                $315 = $304;
               } else {
                $307 = HEAP32[$8>>2]|0;
                $308 = $307 & 2;
                $309 = ($308|0)==(0);
                if (!($309)) {
                 $315 = $304;
                 break;
                }
                $310 = ((($$1428565)) + 24|0);
                $311 = HEAP32[$310>>2]|0;
                $312 = (_iswctype($235,$311)|0);
                $313 = ($312|0)==(0);
                if ($313) {
                 $$10 = $$7559;$$4 = $342;$$7467 = $$6466555;$$9446 = $$6443556;
                 break L123;
                }
                $$pre622 = HEAP32[$249>>2]|0;
                $315 = $$pre622;
               }
              } while(0);
              $314 = $315 & 4;
              $316 = ($314|0)==(0);
              do {
               if (!($316)) {
                $317 = HEAP32[$8>>2]|0;
                $318 = $317 & 2;
                $319 = ($318|0)==(0);
                if ($319) {
                 break;
                }
                $320 = (_towlower($235)|0);
                $321 = ((($$1428565)) + 24|0);
                $322 = HEAP32[$321>>2]|0;
                $323 = (_iswctype($320,$322)|0);
                $324 = ($323|0)==(0);
                if (!($324)) {
                 break;
                }
                $325 = (_towupper($235)|0);
                $326 = HEAP32[$321>>2]|0;
                $327 = (_iswctype($325,$326)|0);
                $328 = ($327|0)==(0);
                if ($328) {
                 $$10 = $$7559;$$4 = $342;$$7467 = $$6466555;$$9446 = $$6443556;
                 break L123;
                }
               }
              } while(0);
              $329 = HEAP32[$249>>2]|0;
              $330 = $329 & 8;
              $331 = ($330|0)==(0);
              if ($331) {
               break;
              }
              $332 = ((($$1428565)) + 28|0);
              $333 = HEAP32[$332>>2]|0;
              $334 = HEAP32[$8>>2]|0;
              $335 = $334 & 2;
              $336 = (_tre_neg_char_classes_match($333,$235,$335)|0);
              $337 = ($336|0)==(0);
              if (!($337)) {
               $$10 = $$7559;$$4 = $342;$$7467 = $$6466555;$$9446 = $$6443556;
               break L123;
              }
             }
            } while(0);
            if ($70) {
             $338 = HEAP32[$243>>2]|0;
             $$5453546 = 0;
             while(1) {
              $339 = (($338) + ($$5453546<<2)|0);
              $340 = HEAP32[$339>>2]|0;
              $341 = (($342) + ($$5453546<<2)|0);
              HEAP32[$341>>2] = $340;
              $343 = (($$5453546) + 1)|0;
              $exitcond613 = ($343|0)==($$0456|0);
              if ($exitcond613) {
               break;
              } else {
               $$5453546 = $343;
              }
             }
            }
            $344 = ((($$1428565)) + 16|0);
            $345 = HEAP32[$344>>2]|0;
            $346 = ($345|0)==(0|0);
            do {
             if (!($346)) {
              $347 = HEAP32[$345>>2]|0;
              $348 = ($347|0)>(-1);
              if ($348) {
               $$1458549 = $345;$350 = $347;
              } else {
               break;
              }
              while(1) {
               $349 = ($350|0)<($$0456|0);
               if ($349) {
                $351 = (($342) + ($350<<2)|0);
                HEAP32[$351>>2] = $188;
               }
               $352 = ((($$1458549)) + 4|0);
               $353 = HEAP32[$352>>2]|0;
               $354 = ($353|0)>(-1);
               if ($354) {
                $$1458549 = $352;$350 = $353;
               } else {
                break;
               }
              }
             }
            } while(0);
            $355 = ((($$1428565)) + 12|0);
            $356 = HEAP32[$355>>2]|0;
            $357 = (($45) + ($356<<3)|0);
            $358 = HEAP32[$357>>2]|0;
            $359 = ($358|0)<($188|0);
            if (!($359)) {
             $378 = HEAP32[$74>>2]|0;
             $379 = (((($45) + ($356<<3)|0)) + 4|0);
             $380 = HEAP32[$379>>2]|0;
             $381 = HEAP32[$380>>2]|0;
             $382 = (_tre_tag_order($$0456,$378,$342,$381)|0);
             $383 = ($382|0)==(0);
             if ($383) {
              $$10 = $$7559;$$4 = $342;$$7467 = $$6466555;$$9446 = $$6443556;
              break;
             }
             HEAP32[$380>>2] = $342;
             $384 = HEAP32[$361>>2]|0;
             $385 = HEAP32[$71>>2]|0;
             $386 = ($384|0)==($385|0);
             if (!($386)) {
              $$10 = $$7559;$$4 = $381;$$7467 = $$6466555;$$9446 = $$6443556;
              break;
             }
             if ($70) {
              $$7455551 = 0;
             } else {
              $$10 = 1;$$4 = $381;$$7467 = $$6466555;$$9446 = $188;
              break;
             }
             while(1) {
              $387 = (($342) + ($$7455551<<2)|0);
              $388 = HEAP32[$387>>2]|0;
              $389 = (($2) + ($$7455551<<2)|0);
              HEAP32[$389>>2] = $388;
              $390 = (($$7455551) + 1)|0;
              $exitcond615 = ($390|0)==($$0456|0);
              if ($exitcond615) {
               $$10 = 1;$$4 = $381;$$7467 = $$6466555;$$9446 = $188;
               break L123;
              } else {
               $$7455551 = $390;
              }
             }
            }
            $360 = HEAP32[$361>>2]|0;
            HEAP32[$$6466555>>2] = $360;
            $362 = ((($$6466555)) + 4|0);
            $363 = HEAP32[$362>>2]|0;
            HEAP32[$362>>2] = $342;
            HEAP32[$357>>2] = $188;
            $364 = (((($45) + ($356<<3)|0)) + 4|0);
            HEAP32[$364>>2] = $362;
            $365 = $360;
            $366 = HEAP32[$71>>2]|0;
            $367 = ($366|0)==($365|0);
            do {
             if ($367) {
              $368 = ($$6443556|0)==(-1);
              if ($368) {
               if ($70) {
                $$6454553 = 0;
               } else {
                $$7444 = $188;$$8 = 1;
                break;
               }
              } else {
               if (!($70)) {
                $$7444 = $$6443556;$$8 = $$7559;
                break;
               }
               $369 = HEAP32[$342>>2]|0;
               $370 = HEAP32[$2>>2]|0;
               $371 = ($369|0)>($370|0);
               if ($371) {
                $$7444 = $$6443556;$$8 = $$7559;
                break;
               } else {
                $$6454553 = 0;
               }
              }
              while(1) {
               $372 = (($342) + ($$6454553<<2)|0);
               $373 = HEAP32[$372>>2]|0;
               $374 = (($2) + ($$6454553<<2)|0);
               HEAP32[$374>>2] = $373;
               $375 = (($$6454553) + 1)|0;
               $376 = ($375|0)<($$0456|0);
               if ($376) {
                $$6454553 = $375;
               } else {
                $$7444 = $188;$$8 = 1;
                break;
               }
              }
             } else {
              $$7444 = $$6443556;$$8 = $$7559;
             }
            } while(0);
            $377 = ((($$6466555)) + 8|0);
            $$10 = $$8;$$4 = $363;$$7467 = $377;$$9446 = $$7444;
           }
          }
         } while(0);
         $391 = ((($$1428565)) + 32|0);
         $392 = ((($$1428565)) + 40|0);
         $393 = HEAP32[$392>>2]|0;
         $394 = ($393|0)==(0|0);
         if ($394) {
          $$3$lcssa = $$4;$$6443$lcssa = $$9446;$$6466$lcssa = $$7467;$$7$lcssa = $$10;
          break;
         } else {
          $$1428565 = $391;$$6443556 = $$9446;$$6466555 = $$7467;$$7559 = $$10;$342 = $$4;$361 = $392;
         }
        }
       }
       $395 = ((($$1469574)) + 8|0);
       $396 = HEAP32[$395>>2]|0;
       $397 = ($396|0)==(0|0);
       if ($397) {
        $$2431$lcssa = $$3$lcssa;$$5442$lcssa = $$6443$lcssa;$$5465$lcssa = $$6466$lcssa;$$6$lcssa = $$7$lcssa;
        break;
       } else {
        $$1469574 = $395;$$2431578 = $$3$lcssa;$$5442576 = $$6443$lcssa;$$5465575 = $$6466$lcssa;$$6577 = $$7$lcssa;$240 = $396;
       }
      }
     }
     HEAP32[$$5465$lcssa>>2] = 0;
     $$0415 = $235;$$0421 = $192;$$0422 = $188;$$0432 = $$6$lcssa;$$0437 = $$5442$lcssa;$$0460 = $$5465$lcssa;$$1424 = $$2425;$$1430 = $$2431$lcssa;$$1471 = $$2472;$$1474 = $$2475;
    }
    HEAP32[$4>>2] = $$10447;
    $$10447$lobit = $$10447 >>> 31;
    $$0426 = $$10447$lobit;
   }
  } while(0);
  _free($25);
  $$1 = $$0426;
 }
 STACKTOP = sp;return ($$1|0);
}
function _tre_fill_pmatch($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$08490 = 0, $$096 = 0, $$193 = 0, $$2$ph = 0, $$pre = 0, $$pre101 = 0, $$sink3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $or$cond86 = 0, $or$cond8695 = 0, $or$cond87 = 0, $or$cond88 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($5|0)>(-1);
 $7 = $2 & 8;
 $8 = ($7|0)==(0);
 $or$cond = $8 & $6;
 if ($or$cond) {
  $12 = ((($3)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($3)) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0);
  $17 = ($0|0)!=(0);
  $or$cond8695 = $17 & $16;
  if ($or$cond8695) {
   $18 = ((($3)) + 48|0);
   $$pre = HEAP32[$18>>2]|0;
   $$096 = 0;
   while(1) {
    $19 = (($13) + (($$096*12)|0)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($$pre|0);
    if ($21) {
     $25 = $5;
    } else {
     $22 = (($4) + ($20<<2)|0);
     $23 = HEAP32[$22>>2]|0;
     $25 = $23;
    }
    $24 = (($1) + ($$096<<3)|0);
    HEAP32[$24>>2] = $25;
    $26 = (((($13) + (($$096*12)|0)|0)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==($$pre|0);
    if ($28) {
     $$sink3 = $5;
    } else {
     $29 = (($4) + ($27<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $$sink3 = $30;
    }
    $31 = (((($1) + ($$096<<3)|0)) + 4|0);
    HEAP32[$31>>2] = $$sink3;
    $32 = ($25|0)==(-1);
    $33 = ($$sink3|0)==(-1);
    $or$cond88 = $33 | $32;
    if ($or$cond88) {
     HEAP32[$31>>2] = -1;
     HEAP32[$24>>2] = -1;
    }
    $34 = (($$096) + 1)|0;
    $35 = ($34>>>0)<($15>>>0);
    $36 = ($34>>>0)<($0>>>0);
    $or$cond86 = $36 & $35;
    if ($or$cond86) {
     $$096 = $34;
    } else {
     break;
    }
   }
   if ($or$cond8695) {
    $$193 = 0;
    while(1) {
     $37 = (((($1) + ($$193<<3)|0)) + 4|0);
     $38 = (((($13) + (($$193*12)|0)|0)) + 8|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if (!($40)) {
      $41 = HEAP32[$39>>2]|0;
      $42 = ($41|0)>(-1);
      if ($42) {
       $43 = (($1) + ($$193<<3)|0);
       $$pre101 = HEAP32[$43>>2]|0;
       $$08490 = 0;$45 = $41;$48 = $$pre101;
       while(1) {
        $44 = (($1) + ($45<<3)|0);
        $46 = HEAP32[$44>>2]|0;
        $47 = ($48|0)<($46|0);
        if ($47) {
         label = 19;
        } else {
         $49 = HEAP32[$37>>2]|0;
         $50 = (((($1) + ($45<<3)|0)) + 4|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = ($49|0)>($51|0);
         if ($52) {
          label = 19;
         } else {
          $60 = $48;
         }
        }
        if ((label|0) == 19) {
         label = 0;
         HEAP32[$37>>2] = -1;
         HEAP32[$43>>2] = -1;
         $60 = -1;
        }
        $53 = (($$08490) + 1)|0;
        $54 = (($39) + ($53<<2)|0);
        $55 = HEAP32[$54>>2]|0;
        $56 = ($55|0)>(-1);
        if ($56) {
         $$08490 = $53;$45 = $55;$48 = $60;
        } else {
         break;
        }
       }
      }
     }
     $57 = (($$193) + 1)|0;
     $58 = ($57>>>0)<($15>>>0);
     $59 = ($57>>>0)<($0>>>0);
     $or$cond87 = $59 & $58;
     if ($or$cond87) {
      $$193 = $57;
     } else {
      $$2$ph = $57;
      break;
     }
    }
   } else {
    $$2$ph = 0;
   }
  } else {
   $$2$ph = 0;
  }
 } else {
  $$2$ph = 0;
 }
 $9 = ($$2$ph>>>0)<($0>>>0);
 if ($9) {
  $scevgep = (($1) + ($$2$ph<<3)|0);
  $10 = (($0) - ($$2$ph))|0;
  $11 = $10 << 3;
  _memset(($scevgep|0),-1,($11|0))|0;
 }
 return;
}
function _tre_neg_char_classes_match($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ($2|0)==(0);
   $$01011 = $0;$6 = $3;
   while(1) {
    if ($5) {
     $7 = (_iswctype($1,$6)|0);
     $8 = ($7|0)==(0);
     if (!($8)) {
      $$0 = 1;
      break L1;
     }
    } else {
     $9 = (_towupper($1)|0);
     $10 = HEAP32[$$01011>>2]|0;
     $11 = (_iswctype($9,$10)|0);
     $12 = ($11|0)==(0);
     if (!($12)) {
      $$0 = 1;
      break L1;
     }
     $13 = (_towlower($1)|0);
     $14 = HEAP32[$$01011>>2]|0;
     $15 = (_iswctype($13,$14)|0);
     $16 = ($15|0)==(0);
     if (!($16)) {
      $$0 = 1;
      break L1;
     }
    }
    $17 = ((($$01011)) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(0);
    if ($19) {
     $$0 = 0;
     break;
    } else {
     $$01011 = $17;$6 = $18;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _tre_tag_order($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$018 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)>(0);
 L1: do {
  if ($4) {
   $$019 = 0;
   while(1) {
    $5 = (($1) + ($$019<<2)|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==(0);
    $8 = (($2) + ($$019<<2)|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($3) + ($$019<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    if ($7) {
     $12 = ($9|0)<($11|0);
     if ($12) {
      $$018 = 1;
      break L1;
     }
     $13 = ($9|0)>($11|0);
     if ($13) {
      $$018 = 0;
      break L1;
     }
    } else {
     $14 = ($9|0)>($11|0);
     if ($14) {
      $$018 = 1;
      break L1;
     }
     $15 = ($9|0)<($11|0);
     if ($15) {
      $$018 = 0;
      break L1;
     }
    }
    $16 = (($$019) + 1)|0;
    $17 = ($16|0)<($0|0);
    if ($17) {
     $$019 = $16;
    } else {
     $$018 = 0;
     break;
    }
   }
  } else {
   $$018 = 0;
  }
 } while(0);
 return ($$018|0);
}
function _pselect($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp + 8|0;
 $6 = sp + 32|0;
 $7 = sp;
 $8 = $5;
 HEAP32[$6>>2] = $8;
 $9 = ((($6)) + 4|0);
 HEAP32[$9>>2] = 8;
 $10 = ($4|0)!=(0|0);
 if ($10) {
  $11 = $4;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = $7;
  $18 = $17;
  HEAP32[$18>>2] = $13;
  $19 = (($17) + 4)|0;
  $20 = $19;
  HEAP32[$20>>2] = $16;
 }
 $21 = $1;
 $22 = $2;
 $23 = $3;
 $24 = $7;
 $25 = $10 ? $24 : 0;
 $26 = $6;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $21;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $22;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $23;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $25;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $26;
 $27 = (___syscall308(308,($vararg_buffer|0))|0);
 $28 = (___syscall_ret($27)|0);
 STACKTOP = sp;return ($28|0);
}
function _select($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $6;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $7;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $8;
 $9 = (___syscall142(142,($vararg_buffer|0))|0);
 $10 = (___syscall_ret($9)|0);
 STACKTOP = sp;return ($10|0);
}
function ___fxstat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_fstat($1,$2)|0);
 return ($3|0);
}
function ___fxstatat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_fstatat($1,$2,$3,$4)|0);
 return ($5|0);
}
function _fstatat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $4 = $1;
 $5 = $2;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $5;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $6 = (___syscall300(300,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 STACKTOP = sp;return ($7|0);
}
function ___lxstat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_lstat($1,$2)|0);
 return ($3|0);
}
function ___xstat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_stat($1,$2)|0);
 return ($3|0);
}
function ___xmknod($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$3>>2]|0;
 $5 = (_mknod($1,$2,$4)|0);
 return ($5|0);
}
function _mknod($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $0;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall14(14,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___xmknodat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$4>>2]|0;
 $6 = (_mknodat($1,$2,$3,$5)|0);
 return ($6|0);
}
function _mknodat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $4 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $5 = (___syscall297(297,($vararg_buffer|0))|0);
 $6 = (___syscall_ret($5)|0);
 STACKTOP = sp;return ($6|0);
}
function _chmod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $3 = (___syscall15(15,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _fchmod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 24|0;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $3 = (___syscall94(94,($vararg_buffer|0))|0);
 $4 = ($3|0)==(-9);
 if ($4) {
  HEAP32[$vararg_buffer2>>2] = $0;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 1;
  $5 = (___syscall221(221,($vararg_buffer2|0))|0);
  $6 = ($5|0)<(0);
  if ($6) {
   label = 3;
  } else {
   ___procfdname($2,$0);
   $8 = $2;
   HEAP32[$vararg_buffer6>>2] = $8;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $1;
   $9 = (___syscall15(15,($vararg_buffer6|0))|0);
   $10 = (___syscall_ret($9)|0);
   $$0 = $10;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $7 = (___syscall_ret($3)|0);
  $$0 = $7;
 }
 STACKTOP = sp;return ($$0|0);
}
function _fchmodat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$022 = 0, $$022$sink = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer15 = 0, $vararg_buffer21 = 0, $vararg_buffer26 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer26 = sp + 80|0;
 $vararg_buffer21 = sp + 64|0;
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = sp + 84|0;
 $5 = sp + 160|0;
 switch ($3|0) {
 case 0:  {
  $6 = $1;
  HEAP32[$vararg_buffer>>2] = $0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $6;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $2;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = 0;
  $7 = (___syscall306(306,($vararg_buffer|0))|0);
  $8 = (___syscall_ret($7)|0);
  $$1 = $8;
  break;
 }
 case 256:  {
  $10 = $1;
  $11 = $4;
  HEAP32[$vararg_buffer4>>2] = $0;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $10;
  $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = $11;
  $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
  HEAP32[$vararg_ptr9>>2] = 256;
  $12 = (___syscall300(300,($vararg_buffer4|0))|0);
  $13 = ($12|0)==(0);
  do {
   if ($13) {
    $14 = ((($4)) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & 61440;
    $17 = ($16|0)==(40960);
    if ($17) {
     $$022$sink = -95;
    } else {
     HEAP32[$vararg_buffer10>>2] = $0;
     $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
     HEAP32[$vararg_ptr13>>2] = $10;
     $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
     HEAP32[$vararg_ptr14>>2] = 2752768;
     $18 = (___syscall295(295,($vararg_buffer10|0))|0);
     $19 = ($18|0)<(0);
     if ($19) {
      $20 = ($18|0)==(-40);
      $$ = $20 ? -95 : $18;
      $$022$sink = $$;
      break;
     }
     ___procfdname($5,$18);
     $21 = $5;
     HEAP32[$vararg_buffer15>>2] = -100;
     $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
     HEAP32[$vararg_ptr18>>2] = $21;
     $vararg_ptr19 = ((($vararg_buffer15)) + 8|0);
     HEAP32[$vararg_ptr19>>2] = $11;
     $vararg_ptr20 = ((($vararg_buffer15)) + 12|0);
     HEAP32[$vararg_ptr20>>2] = 0;
     $22 = (___syscall300(300,($vararg_buffer15|0))|0);
     $23 = ($22|0)==(0);
     if ($23) {
      $24 = HEAP32[$14>>2]|0;
      $25 = $24 & 61440;
      $26 = ($25|0)==(40960);
      if ($26) {
       $$022 = -95;
      } else {
       HEAP32[$vararg_buffer21>>2] = -100;
       $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
       HEAP32[$vararg_ptr24>>2] = $21;
       $vararg_ptr25 = ((($vararg_buffer21)) + 8|0);
       HEAP32[$vararg_ptr25>>2] = $2;
       $27 = (___syscall306(306,($vararg_buffer21|0))|0);
       $$022 = $27;
      }
     } else {
      $$022 = $22;
     }
     HEAP32[$vararg_buffer26>>2] = $18;
     (___syscall6(6,($vararg_buffer26|0))|0);
     $$022$sink = $$022;
    }
   } else {
    $$022$sink = $12;
   }
  } while(0);
  $28 = (___syscall_ret($$022$sink)|0);
  $$1 = $28;
  break;
 }
 default: {
  $9 = (___syscall_ret(-22)|0);
  $$1 = $9;
 }
 }
 STACKTOP = sp;return ($$1|0);
}
function _futimens($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_utimensat($0,0,$1,0)|0);
 return ($2|0);
}
function _utimensat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $4 = $1;
 $5 = $2;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $5;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $6 = (___syscall320(320,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 STACKTOP = sp;return ($7|0);
}
function ___futimesat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01618 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($2|0)!=(0|0);
 L1: do {
  if ($4) {
   $$01618 = 0;
   while(1) {
    $5 = (((($2) + ($$01618<<3)|0)) + 4|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6>>>0)>(999999);
    if ($7) {
     break;
    }
    $8 = (($2) + ($$01618<<3)|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($3) + ($$01618<<3)|0);
    HEAP32[$10>>2] = $9;
    $11 = ($6*1000)|0;
    $12 = (((($3) + ($$01618<<3)|0)) + 4|0);
    HEAP32[$12>>2] = $11;
    $13 = (($$01618) + 1)|0;
    $14 = ($$01618|0)<(1);
    if ($14) {
     $$01618 = $13;
    } else {
     label = 5;
     break L1;
    }
   }
   $15 = (___syscall_ret(-22)|0);
   $$1 = $15;
  } else {
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  $16 = $4 ? $3 : 0;
  $17 = (_utimensat($0,$1,$16,0)|0);
  $$1 = $17;
 }
 STACKTOP = sp;return ($$1|0);
}
function _lchmod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_fchmodat(-100,$0,$1,256)|0);
 return ($2|0);
}
function _mkdir($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $3 = (___syscall39(39,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _mkdirat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall296(296,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _mkfifo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 | 4096;
 $3 = (_mknod($0,$2,0)|0);
 return ($3|0);
}
function _mkfifoat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 | 4096;
 $4 = (_mknodat($0,$1,$3,0)|0);
 return ($4|0);
}
function ___statfs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 dest=$1; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 64;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $3;
 $4 = (___syscall268(268,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___fstatfs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $1;
 dest=$1; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 64;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $3 = (___syscall269(269,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _statvfs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = sp;
 $3 = (___statfs($0,$2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  $$0 = -1;
 } else {
  _fixup($1,$2);
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _fixup($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$3$0$$sroa_idx = 0, $$val26 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $$sroa$3$0$$sroa_idx = ((($0)) + 4|0);
 $2 = ((($1)) + 4|0);
 $3 = ((($0)) + 4|0);
 dest=$3; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $4;
 $5 = ((($1)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $$val26 = HEAP32[$2>>2]|0;
 $8 = $7 ? $6 : $$val26;
 HEAP32[$$sroa$3$0$$sroa_idx>>2] = $8;
 $9 = ((($1)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 8|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($1)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 12|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($1)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($0)) + 16|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($1)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 20|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($1)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($0)) + 24|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($0)) + 28|0);
 HEAP32[$24>>2] = $22;
 $25 = ((($1)) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($0)) + 32|0);
 HEAP32[$27>>2] = $26;
 $28 = ((($1)) + 44|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($0)) + 40|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($1)) + 36|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($0)) + 44|0);
 HEAP32[$33>>2] = $32;
 return;
}
function _fstatvfs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = sp;
 $3 = (___fstatfs($0,$2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  $$0 = -1;
 } else {
  _fixup($1,$2);
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _umask($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (___syscall60(60,($vararg_buffer|0))|0);
 $2 = (___syscall_ret($1)|0);
 STACKTOP = sp;return ($2|0);
}
function ___stdio_exit() {
 var $$0 = 0, $$04 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ofl_lock()|0);
 $$04 = HEAP32[$0>>2]|0;
 $1 = ($$04|0)==(0|0);
 if (!($1)) {
  $$05 = $$04;
  while(1) {
   _close_file($$05);
   $2 = ((($$05)) + 56|0);
   $$0 = HEAP32[$2>>2]|0;
   $3 = ($$0|0)==(0|0);
   if ($3) {
    break;
   } else {
    $$05 = $$0;
   }
  }
 }
 $4 = HEAP32[1935]|0;
 _close_file($4);
 $5 = HEAP32[1968]|0;
 _close_file($5);
 return;
}
function _close_file($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = ((($0)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   (___lockfile($0)|0);
  }
  $5 = ((($0)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($0)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6>>>0)>($8>>>0);
  if ($9) {
   $10 = ((($0)) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   (FUNCTION_TABLE_iiii[$11 & 63]($0,0,0)|0);
  }
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($13>>>0)<($15>>>0);
  if ($16) {
   $17 = $13;
   $18 = $15;
   $19 = (($17) - ($18))|0;
   $20 = ((($0)) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   (FUNCTION_TABLE_iiii[$21 & 63]($0,$19,1)|0);
  }
 }
 return;
}
function ___toread_needs_stdio_exit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_v[24 & 31]();
 return;
}
function ___towrite_needs_stdio_exit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_v[24 & 31]();
 return;
}
function _asprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vasprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vasprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $4 = (_vsnprintf(0,0,$1,$3)|0);
 $5 = ($4|0)<(0);
 if ($5) {
  $$0 = -1;
 } else {
  $6 = (($4) + 1)|0;
  $7 = (_malloc($6)|0);
  HEAP32[$0>>2] = $7;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   $9 = (_vsnprintf($7,$6,$1,$2)|0);
   $$0 = $9;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _clearerr($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $phitmp = ($4|0)==(0);
  $5 = HEAP32[$0>>2]|0;
  $6 = $5 & -49;
  HEAP32[$0>>2] = $6;
  if (!($phitmp)) {
   ___unlockfile($0);
  }
 } else {
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 & -49;
  HEAP32[$0>>2] = $8;
 }
 return;
}
function __flushlbf() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_fflush(0)|0);
 return;
}
function ___fsetlocking($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___fwriting($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 4;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(0|0);
  $phitmp = $6&1;
  $7 = $phitmp;
 } else {
  $7 = 1;
 }
 return ($7|0);
}
function ___freading($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 8;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(0|0);
  $phitmp = $6&1;
  $7 = $phitmp;
 } else {
  $7 = 1;
 }
 return ($7|0);
}
function ___freadable($0) {
 $0 = $0|0;
 var $$lobit = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >>> 2;
 $$lobit = $2 & 1;
 $3 = $$lobit ^ 1;
 return ($3|0);
}
function ___fwritable($0) {
 $0 = $0|0;
 var $$lobit = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >>> 3;
 $$lobit = $2 & 1;
 $3 = $$lobit ^ 1;
 return ($3|0);
}
function ___flbf($0) {
 $0 = $0|0;
 var $$lobit = 0, $$not = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 75|0);
 $2 = HEAP8[$1>>0]|0;
 $$lobit = ($2&255) >>> 7;
 $3 = $$lobit ^ 1;
 $$not = $3&255;
 return ($$not|0);
}
function ___fbufsize($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function ___fpending($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $9 = 0;
 } else {
  $4 = ((($0)) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) - ($7))|0;
  $9 = $8;
 }
 return ($9|0);
}
function ___fpurge($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 28|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = 0;
 return 0;
}
function ___freadahead($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) - ($4))|0;
 return ($5|0);
}
function ___freadptr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) - ($5))|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 0;
 } else {
  $8 = $5;
  HEAP32[$1>>2] = $6;
  $$0 = $8;
 }
 return ($$0|0);
}
function ___freadptrinc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1)|0);
 HEAP32[$2>>2] = $4;
 return;
}
function ___fseterr($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 | 32;
 HEAP32[$0>>2] = $2;
 return;
}
function _fgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (___lockfile($0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $15 = ((($0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = ((($16)) + 1|0);
    HEAP32[$15>>2] = $20;
    $21 = HEAP8[$16>>0]|0;
    $22 = $21&255;
    $24 = $22;
   } else {
    $23 = (___uflow($0)|0);
    $24 = $23;
   }
   $$0 = $24;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = ((($0)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = ((($7)) + 1|0);
    HEAP32[$6>>2] = $11;
    $12 = HEAP8[$7>>0]|0;
    $13 = $12&255;
    $$0 = $13;
    break;
   } else {
    $14 = (___uflow($0)|0);
    $$0 = $14;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fgetln($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $6 = (___lockfile($0)|0);
  $31 = $6;
 } else {
  $31 = 0;
 }
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)<($10>>>0);
 if ($11) {
  $12 = ((($8)) + 1|0);
  HEAP32[$7>>2] = $12;
  $13 = HEAP8[$8>>0]|0;
  $14 = $13&255;
  $16 = $14;
 } else {
  $15 = (___uflow($0)|0);
  $16 = $15;
 }
 (_ungetc($16,$0)|0);
 $17 = HEAP32[$7>>2]|0;
 $18 = HEAP32[$9>>2]|0;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $21 = (_memchr($17,10,$20)|0);
 $22 = ($21|0)==(0|0);
 if ($22) {
  $26 = ((($0)) + 92|0);
  HEAP32[$2>>2] = 0;
  $27 = (_getline($26,$2,$0)|0);
  $28 = ($27|0)>(0);
  if ($28) {
   HEAP32[$1>>2] = $27;
   $29 = HEAP32[$26>>2]|0;
   $$0 = $29;
  } else {
   $$0 = 0;
  }
 } else {
  $23 = ((($21)) + 1|0);
  $24 = $23;
  $25 = (($24) - ($19))|0;
  HEAP32[$1>>2] = $25;
  HEAP32[$7>>2] = $23;
  $$0 = $17;
 }
 $30 = ($31|0)==(0);
 if (!($30)) {
  ___unlockfile($0);
 }
 STACKTOP = sp;return ($$0|0);
}
function _ungetc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(-1);
 do {
  if ($2) {
   $$1 = -1;
  } else {
   $3 = ((($1)) + 76|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)>(-1);
   if ($5) {
    $6 = (___lockfile($1)|0);
    $17 = $6;
   } else {
    $17 = 0;
   }
   $7 = ((($1)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    (___toread($1)|0);
    $$pr = HEAP32[$7>>2]|0;
    $10 = ($$pr|0)==(0|0);
    if (!($10)) {
     $15 = $$pr;
     label = 6;
    }
   } else {
    $15 = $8;
    label = 6;
   }
   if ((label|0) == 6) {
    $11 = ((($1)) + 44|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($12)) + -8|0);
    $14 = ($15>>>0)>($13>>>0);
    if ($14) {
     $18 = $0&255;
     $19 = ((($15)) + -1|0);
     HEAP32[$7>>2] = $19;
     HEAP8[$19>>0] = $18;
     $20 = HEAP32[$1>>2]|0;
     $21 = $20 & -17;
     HEAP32[$1>>2] = $21;
     $22 = ($17|0)==(0);
     if ($22) {
      $$1 = $0;
      break;
     }
     ___unlockfile($1);
     $$1 = $0;
     break;
    }
   }
   $16 = ($17|0)==(0);
   if ($16) {
    $$1 = -1;
   } else {
    ___unlockfile($1);
    $$1 = -1;
   }
  }
 } while(0);
 return ($$1|0);
}
function _getline($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_getdelim($0,$1,10,$2)|0);
 return ($3|0);
}
function _fgetpos($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___ftello($0)|0);
 $3 = ($2|0)<(0);
 if ($3) {
  $$0 = -1;
 } else {
  HEAP32[$1>>2] = $2;
  $$0 = 0;
 }
 return ($$0|0);
}
function ___ftello($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($0)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___ftello_unlocked($0)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   $7 = $6;
  }
 } else {
  $4 = (___ftello_unlocked($0)|0);
  $7 = $4;
 }
 return ($7|0);
}
function ___ftello_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 128;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = 1;
 } else {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7>>>0)>($9>>>0);
  $phitmp = $10 ? 2 : 1;
  $11 = $phitmp;
 }
 $12 = (FUNCTION_TABLE_iiii[$2 & 63]($0,0,$11)|0);
 $13 = ($12|0)<(0);
 if ($13) {
  $$0 = $12;
 } else {
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($0)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($12) - ($15))|0;
  $23 = (($22) + ($17))|0;
  $24 = (($23) + ($19))|0;
  $25 = (($24) - ($21))|0;
  $$0 = $25;
 }
 return ($$0|0);
}
function ___fgetwc_unlocked($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_589()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 74|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(1);
 if ($6) {
  (_fwide($0,1)|0);
 }
 $7 = ((($0)) + 120|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$2>>2] = $8;
 $9 = (___fgetwc_unlocked_internal($0)|0);
 HEAP32[$2>>2] = $3;
 return ($9|0);
}
function ___pthread_self_589() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _fwide($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(-1);
 if ($4) {
  $5 = (___lockfile($0)|0);
  $24 = $5;
 } else {
  $24 = 0;
 }
 $6 = ($1|0)==(0);
 if ($6) {
  $$phi$trans$insert = ((($0)) + 74|0);
  $$pre = HEAP8[$$phi$trans$insert>>0]|0;
  $22 = $$pre;
 } else {
  $7 = ((($0)) + 120|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $10 = (___pthread_self_618()|0);
   $11 = ((($10)) + 188|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   $15 = $14 ? 185684 : 7100;
   HEAP32[$7>>2] = $15;
  }
  $16 = ((($0)) + 74|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $19 = ($1|0)>(0);
   $20 = $19 ? 1 : -1;
   HEAP8[$16>>0] = $20;
   $22 = $20;
  } else {
   $22 = $17;
  }
 }
 $21 = $22 << 24 >> 24;
 $23 = ($24|0)==(0);
 if (!($23)) {
  ___unlockfile($0);
 }
 return ($21|0);
}
function ___fgetwc_unlocked_internal($0) {
 $0 = $0|0;
 var $$0 = 0, $$019 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = sp + 8|0;
 $3 = sp + 12|0;
 $4 = $1;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9>>>0)<($11>>>0);
 do {
  if ($12) {
   $13 = $11;
   $14 = $9;
   $15 = (($13) - ($14))|0;
   $16 = (_mbrtowc($2,$9,$15,$1)|0);
   $17 = ($16>>>0)<(4294967294);
   if ($17) {
    $18 = ($16|0)==(0);
    $19 = $18&1;
    $20 = (($16) + ($19))|0;
    $21 = HEAP32[$8>>2]|0;
    $22 = (($21) + ($20)|0);
    HEAP32[$8>>2] = $22;
    $23 = HEAP32[$2>>2]|0;
    $$019 = $23;
    break;
   }
   $24 = ($16|0)==(-1);
   if ($24) {
    $25 = HEAP32[$8>>2]|0;
    $26 = ((($25)) + 1|0);
    HEAP32[$8>>2] = $26;
    $$019 = -1;
   } else {
    $$0 = -2;
    label = 6;
   }
  } else {
   $$0 = -2;
   label = 6;
  }
 } while(0);
 L7: do {
  if ((label|0) == 6) {
   while(1) {
    label = 0;
    $27 = ($$0|0)==(-2);
    if (!($27)) {
     label = 13;
     break;
    }
    $28 = HEAP32[$8>>2]|0;
    $29 = HEAP32[$10>>2]|0;
    $30 = ($28>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($28)) + 1|0);
     HEAP32[$8>>2] = $31;
     $32 = HEAP8[$28>>0]|0;
     HEAP8[$3>>0] = $32;
    } else {
     $33 = (___uflow($0)|0);
     $34 = $33&255;
     HEAP8[$3>>0] = $34;
     $35 = ($33|0)<(0);
     if ($35) {
      break;
     }
    }
    $39 = (_mbrtowc($2,$3,1,$1)|0);
    $40 = ($39|0)==(-1);
    if ($40) {
     $$019 = -1;
     break L7;
    } else {
     $$0 = $39;
     label = 6;
    }
   }
   if ((label|0) == 13) {
    $41 = HEAP32[$2>>2]|0;
    $$019 = $41;
    break;
   }
   $36 = (_mbsinit($1)|0);
   $37 = ($36|0)==(0);
   if ($37) {
    $38 = (___errno_location()|0);
    HEAP32[$38>>2] = 84;
    $$019 = -1;
   } else {
    $$019 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$019|0);
}
function ___pthread_self_618() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _fgetwc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($0)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___fgetwc_unlocked($0)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($0);
   $7 = $6;
  }
 } else {
  $4 = (___fgetwc_unlocked($0)|0);
  $7 = $4;
 }
 return ($7|0);
}
function _fgetws($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$026 = 0, $$026$in = 0, $$028 = 0, $$2 = 0, $$2$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0);
 if ($3) {
  $$0 = $0;
 } else {
  $4 = ((($2)) + 76|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)>(-1);
  if ($6) {
   $7 = (___lockfile($2)|0);
   $17 = $7;
  } else {
   $17 = 0;
  }
  $$026$in = $1;$$028 = $0;
  while(1) {
   $$026 = (($$026$in) + -1)|0;
   $8 = ($$026|0)==(0);
   if ($8) {
    $$2 = $$028;
    break;
   }
   $9 = (___fgetwc_unlocked($2)|0);
   $10 = ($9|0)==(-1);
   $11 = ((($$028)) + 4|0);
   if ($10) {
    $$2 = $$028;
    break;
   }
   $12 = ($9|0)==(10);
   HEAP32[$$028>>2] = $9;
   if ($12) {
    $$2 = $11;
    break;
   } else {
    $$026$in = $$026;$$028 = $11;
   }
  }
  HEAP32[$$2>>2] = 0;
  $13 = HEAP32[$2>>2]|0;
  $14 = $13 & 32;
  $15 = ($14|0)==(0);
  $$2$ = $15 ? $$2 : $0;
  $16 = ($17|0)==(0);
  if (!($16)) {
   ___unlockfile($2);
  }
  $18 = ($$2$|0)==($0|0);
  $19 = $18 ? 0 : $0;
  $$0 = $19;
 }
 return ($$0|0);
}
function _fileno($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $phitmp = ($4|0)==(0);
  if (!($phitmp)) {
  }
 }
 $5 = ((($0)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _fmemopen($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$op = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $memchr = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strchr($2,43)|0);
 $4 = ($3|0)==(0|0);
 $5 = ($1|0)==(0);
 do {
  if ($5) {
   label = 3;
  } else {
   $6 = HEAP8[$2>>0]|0;
   $7 = $6 << 24 >> 24;
   $memchr = (_memchr(183604,$7,4)|0);
   $8 = ($memchr|0)==(0|0);
   if ($8) {
    label = 3;
   } else {
    $10 = ($0|0)==(0|0);
    $11 = ($1>>>0)>(4294966139);
    $or$cond = $10 & $11;
    if ($or$cond) {
     $12 = (___errno_location()|0);
     HEAP32[$12>>2] = 12;
     $$0 = 0;
     break;
    }
    $13 = ($0|0)!=(0|0);
    $$op = (($1) + 1176)|0;
    $14 = $13 ? 1176 : $$op;
    $15 = (_calloc($14,1)|0);
    $16 = ($15|0)==(0|0);
    if ($16) {
     $$0 = 0;
    } else {
     $17 = ((($15)) + 124|0);
     $18 = ((($15)) + 84|0);
     HEAP32[$18>>2] = $17;
     $19 = ((($15)) + 60|0);
     HEAP32[$19>>2] = -1;
     $20 = ((($15)) + 75|0);
     HEAP8[$20>>0] = -1;
     $21 = ((($15)) + 152|0);
     $22 = ((($15)) + 44|0);
     HEAP32[$22>>2] = $21;
     $23 = ((($15)) + 48|0);
     HEAP32[$23>>2] = 1024;
     $24 = ((($15)) + 1176|0);
     $$ = $13 ? $0 : $24;
     $25 = ((($15)) + 136|0);
     HEAP32[$25>>2] = $$;
     $26 = ((($15)) + 132|0);
     HEAP32[$26>>2] = $1;
     $27 = ((($15)) + 140|0);
     HEAP32[$27>>2] = $7;
     if ($4) {
      $28 = ($6<<24>>24)==(114);
      $29 = $28 ? 8 : 4;
      HEAP32[$15>>2] = $29;
     }
     switch ($6<<24>>24) {
     case 114:  {
      $$sink = $1;
      label = 11;
      break;
     }
     case 97:  {
      $30 = (_strnlen($$,$1)|0);
      HEAP32[$17>>2] = $30;
      $$sink = $30;
      label = 11;
      break;
     }
     default: {
     }
     }
     if ((label|0) == 11) {
      $31 = ((($15)) + 128|0);
      HEAP32[$31>>2] = $$sink;
     }
     $32 = ((($15)) + 32|0);
     HEAP32[$32>>2] = 25;
     $33 = ((($15)) + 36|0);
     HEAP32[$33>>2] = 26;
     $34 = ((($15)) + 40|0);
     HEAP32[$34>>2] = 27;
     $35 = ((($15)) + 12|0);
     HEAP32[$35>>2] = 28;
     $36 = HEAP32[(185616)>>2]|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $38 = ((($15)) + 76|0);
      HEAP32[$38>>2] = -1;
     }
     $39 = (___ofl_add($15)|0);
     $$0 = $15;
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $9 = (___errno_location()|0);
  HEAP32[$9>>2] = 22;
  $$0 = 0;
 }
 return ($$0|0);
}
function _mread($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$034 = 0, $$36 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = (($6) - ($7))|0;
 $9 = ($6>>>0)<($7>>>0);
 $$ = $9 ? 0 : $8;
 $10 = ($$>>>0)<($2>>>0);
 if ($10) {
  $11 = HEAP32[$0>>2]|0;
  $12 = $11 | 16;
  HEAP32[$0>>2] = $12;
  $$034 = $$;
 } else {
  $$034 = $2;
 }
 $13 = ((($4)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($7)|0);
 _memcpy(($1|0),($15|0),($$034|0))|0;
 $16 = HEAP32[$4>>2]|0;
 $17 = (($16) + ($$034))|0;
 HEAP32[$4>>2] = $17;
 $18 = (($$) - ($$034))|0;
 $19 = ((($0)) + 48|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($18>>>0)>($20>>>0);
 $$36 = $21 ? $20 : $18;
 $22 = ((($0)) + 44|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($0)) + 4|0);
 HEAP32[$24>>2] = $23;
 $$cast = $23;
 $25 = (($$cast) + ($$36)|0);
 $26 = ((($0)) + 8|0);
 HEAP32[$26>>2] = $25;
 $27 = HEAP32[$13>>2]|0;
 $28 = (($27) + ($17)|0);
 _memcpy(($$cast|0),($28|0),($$36|0))|0;
 $29 = HEAP32[$4>>2]|0;
 $30 = (($29) + ($$36))|0;
 HEAP32[$4>>2] = $30;
 return ($$034|0);
}
function _mwrite($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$pre = 0, $$pre$phi44Z2D = 0, $$pre$phiZ2D = 0, $$pre43 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8;
 $10 = (($6) - ($9))|0;
 $11 = ($10|0)==(0);
 if ($11) {
  label = 3;
 } else {
  HEAP32[$5>>2] = $8;
  $12 = (_mwrite($0,$8,$10)|0);
  $13 = ($12>>>0)<($10>>>0);
  if ($13) {
   $$0 = 0;
  } else {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $14 = ((($4)) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(97);
   if ($16) {
    $17 = ((($4)) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    HEAP32[$4>>2] = $18;
    $$pre$phi44Z2D = $17;$$pre$phiZ2D = $4;$22 = $18;
   } else {
    $$pre = HEAP32[$4>>2]|0;
    $$pre43 = ((($4)) + 4|0);
    $$pre$phi44Z2D = $$pre43;$$pre$phiZ2D = $4;$22 = $$pre;
   }
   $19 = ((($4)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) - ($22))|0;
   $23 = ($21>>>0)<($2>>>0);
   $$ = $23 ? $21 : $2;
   $24 = ((($4)) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + ($22)|0);
   _memcpy(($26|0),($1|0),($$|0))|0;
   $27 = HEAP32[$$pre$phiZ2D>>2]|0;
   $28 = (($27) + ($$))|0;
   HEAP32[$$pre$phiZ2D>>2] = $28;
   $29 = HEAP32[$$pre$phi44Z2D>>2]|0;
   $30 = ($28>>>0)>($29>>>0);
   if ($30) {
    HEAP32[$$pre$phi44Z2D>>2] = $28;
    $31 = HEAP32[$19>>2]|0;
    $32 = ($28>>>0)<($31>>>0);
    if ($32) {
     $33 = HEAP32[$24>>2]|0;
     $34 = (($33) + ($28)|0);
     HEAP8[$34>>0] = 0;
     $$0 = $$;
     break;
    }
    $35 = HEAP32[$0>>2]|0;
    $36 = $35 & 4;
    $37 = ($36|0)==(0);
    $38 = ($31|0)==(0);
    $or$cond = $38 | $37;
    if ($or$cond) {
     $$0 = $$;
    } else {
     $39 = (($31) + -1)|0;
     $40 = HEAP32[$24>>2]|0;
     $41 = (($40) + ($39)|0);
     HEAP8[$41>>0] = 0;
     $$0 = $$;
    }
   } else {
    $$0 = $$;
   }
  }
 } while(0);
 return ($$0|0);
}
function _mseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 84|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($2>>>0)>(2);
 if ($6) {
  label = 2;
 } else {
  HEAP32[$3>>2] = 0;
  $8 = ((($3)) + 4|0);
  $9 = HEAP32[$5>>2]|0;
  HEAP32[$8>>2] = $9;
  $10 = ((($3)) + 8|0);
  $11 = ((($5)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$10>>2] = $12;
  $13 = (($3) + ($2<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (0 - ($14))|0;
  $16 = ($15|0)>($1|0);
  if ($16) {
   label = 2;
  } else {
   $17 = ((($5)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) - ($14))|0;
   $20 = ($19|0)<($1|0);
   if ($20) {
    label = 2;
   } else {
    $21 = (($14) + ($1))|0;
    HEAP32[$5>>2] = $21;
    $$0 = $21;
   }
  }
 }
 if ((label|0) == 2) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 22;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _mclose($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function ___fputwc_unlocked($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$035 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (___pthread_self_600()|0);
 $4 = ((($3)) + 188|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 74|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)<(1);
 if ($8) {
  (_fwide($1,1)|0);
 }
 $9 = ((($1)) + 120|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $10;
 $11 = ($0>>>0)<(128);
 do {
  if ($11) {
   $12 = $0&255;
   $13 = $0 & 255;
   $14 = ((($1)) + 75|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15 << 24 >> 24;
   $17 = ($13|0)==($16|0);
   if (!($17)) {
    $18 = ((($1)) + 20|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($1)) + 16|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19>>>0)<($21>>>0);
    if ($22) {
     $23 = ((($19)) + 1|0);
     HEAP32[$18>>2] = $23;
     HEAP8[$19>>0] = $12;
     $$035 = $13;
     break;
    }
   }
   $24 = (___overflow($1,$0)|0);
   $$0 = $24;
   label = 13;
  } else {
   $25 = ((($1)) + 20|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 4|0);
   $28 = ((($1)) + 16|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($27>>>0)<($29>>>0);
   if ($30) {
    $31 = (_wctomb($26,$0)|0);
    $32 = ($31|0)<(0);
    if ($32) {
     label = 14;
     break;
    }
    $33 = HEAP32[$25>>2]|0;
    $34 = (($33) + ($31)|0);
    HEAP32[$25>>2] = $34;
    $$0 = $0;
    label = 13;
    break;
   } else {
    $35 = (_wctomb($2,$0)|0);
    $36 = ($35|0)<(0);
    if ($36) {
     label = 14;
     break;
    }
    $37 = (___fwritex($2,$35,$1)|0);
    $38 = ($37>>>0)<($35>>>0);
    if ($38) {
     label = 14;
     break;
    } else {
     $$0 = $0;
     label = 13;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 13) {
  $39 = ($$0|0)==(-1);
  if ($39) {
   label = 14;
  } else {
   $$035 = $$0;
  }
 }
 if ((label|0) == 14) {
  $40 = HEAP32[$1>>2]|0;
  $41 = $40 | 32;
  HEAP32[$1>>2] = $41;
  $$035 = -1;
 }
 HEAP32[$4>>2] = $5;
 STACKTOP = sp;return ($$035|0);
}
function ___pthread_self_600() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _fputwc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(-1);
 if ($4) {
  $6 = (___lockfile($1)|0);
  $phitmp = ($6|0)==(0);
  $7 = (___fputwc_unlocked($0,$1)|0);
  if ($phitmp) {
   $8 = $7;
  } else {
   ___unlockfile($1);
   $8 = $7;
  }
 } else {
  $5 = (___fputwc_unlocked($0,$1)|0);
  $8 = $5;
 }
 return ($8|0);
}
function _fputws($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1040|0);
 $2 = sp;
 $3 = sp + 8|0;
 HEAP32[$2>>2] = $0;
 $4 = (___pthread_self_601()|0);
 $5 = ((($4)) + 188|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(-1);
 if ($9) {
  $10 = (___lockfile($1)|0);
  $21 = $10;
 } else {
  $21 = 0;
 }
 (_fwide($1,1)|0);
 $11 = ((($1)) + 120|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$5>>2] = $12;
 $13 = ($0|0)==(0|0);
 L4: do {
  if ($13) {
   $$1 = 0;
   label = 9;
  } else {
   while(1) {
    $14 = (_wcsrtombs($3,$2,1024,0)|0);
    $15 = (($14) + 1)|0;
    $16 = ($15>>>0)>(1);
    if (!($16)) {
     $$1 = $14;
     label = 9;
     break L4;
    }
    $17 = (___fwritex($3,$14,$1)|0);
    $18 = ($17>>>0)<($14>>>0);
    if ($18) {
     break;
    }
    $$pre = HEAP32[$2>>2]|0;
    $19 = ($$pre|0)==(0|0);
    if ($19) {
     $$1 = $14;
     label = 9;
     break L4;
    }
   }
   $20 = ($21|0)==(0);
   if ($20) {
    $$0 = -1;
   } else {
    ___unlockfile($1);
    $$0 = -1;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $22 = ($21|0)==(0);
  if ($22) {
   $$0 = $$1;
  } else {
   ___unlockfile($1);
   $$0 = $$1;
  }
 }
 HEAP32[$5>>2] = $6;
 STACKTOP = sp;return ($$0|0);
}
function ___pthread_self_601() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054$ph = 0, $$05460 = 0, $$056$ph = 0, $$05659 = 0, $$57 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $36 = $9;
 } else {
  $36 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) - ($19))|0;
 $21 = ($20|0)>(0);
 $22 = ($20>>>0)<($4>>>0);
 $$57 = $22 ? $20 : $4;
 $23 = $19;
 if ($21) {
  $24 = (($4) - ($$57))|0;
  $25 = (($0) + ($$57)|0);
  _memcpy(($0|0),($23|0),($$57|0))|0;
  $26 = (($23) + ($$57)|0);
  HEAP32[$18>>2] = $26;
  $$054$ph = $24;$$056$ph = $25;
 } else {
  $$054$ph = $4;$$056$ph = $0;
 }
 $27 = ($$054$ph|0)==(0);
 L7: do {
  if ($27) {
   label = 13;
  } else {
   $28 = ((($3)) + 32|0);
   $$05460 = $$054$ph;$$05659 = $$056$ph;
   while(1) {
    $29 = (___toread($3)|0);
    $30 = ($29|0)==(0);
    if (!($30)) {
     break;
    }
    $31 = HEAP32[$28>>2]|0;
    $32 = (FUNCTION_TABLE_iiii[$31 & 63]($3,$$05659,$$05460)|0);
    $33 = (($32) + 1)|0;
    $34 = ($33>>>0)<(2);
    if ($34) {
     break;
    }
    $39 = (($$05460) - ($32))|0;
    $40 = (($$05659) + ($32)|0);
    $41 = ($39|0)==(0);
    if ($41) {
     label = 13;
     break L7;
    } else {
     $$05460 = $39;$$05659 = $40;
    }
   }
   $35 = ($36|0)==(0);
   if (!($35)) {
    ___unlockfile($3);
   }
   $37 = (($4) - ($$05460))|0;
   $38 = (($37>>>0) / ($1>>>0))&-1;
   $$0 = $38;
  }
 } while(0);
 if ((label|0) == 13) {
  $42 = ($36|0)==(0);
  if ($42) {
   $$0 = $$;
  } else {
   ___unlockfile($3);
   $$0 = $$;
  }
 }
 return ($$0|0);
}
function _freopen($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = (___fmodeflags($1)|0);
 $4 = ((($2)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(-1);
 if ($6) {
  $7 = (___lockfile($2)|0);
  $44 = $7;
 } else {
  $44 = 0;
 }
 (_fflush($2)|0);
 $8 = ($0|0)==(0|0);
 do {
  if ($8) {
   $9 = $3 & 524288;
   $10 = ($9|0)==(0);
   $$pre = ((($2)) + 60|0);
   if (!($10)) {
    $11 = HEAP32[$$pre>>2]|0;
    HEAP32[$vararg_buffer>>2] = $11;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
   }
   $12 = $3 & -524481;
   $13 = HEAP32[$$pre>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $13;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = 4;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $12;
   $14 = (___syscall221(221,($vararg_buffer3|0))|0);
   $15 = (___syscall_ret($14)|0);
   $16 = ($15|0)<(0);
   if ($16) {
    label = 15;
   } else {
    label = 12;
   }
  } else {
   $17 = (_fopen($0,$1)|0);
   $18 = ($17|0)==(0|0);
   if ($18) {
    label = 15;
   } else {
    $19 = ((($17)) + 60|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($2)) + 60|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($20|0)==($22|0);
    if ($23) {
     HEAP32[$19>>2] = -1;
    } else {
     $24 = $3 & 524288;
     $25 = (___dup3($20,$22,$24)|0);
     $26 = ($25|0)<(0);
     if ($26) {
      (_fclose($17)|0);
      label = 15;
      break;
     }
    }
    $27 = HEAP32[$2>>2]|0;
    $28 = $27 & 1;
    $29 = HEAP32[$17>>2]|0;
    $30 = $28 | $29;
    HEAP32[$2>>2] = $30;
    $31 = ((($17)) + 32|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ((($2)) + 32|0);
    HEAP32[$33>>2] = $32;
    $34 = ((($17)) + 36|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ((($2)) + 36|0);
    HEAP32[$36>>2] = $35;
    $37 = ((($17)) + 40|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ((($2)) + 40|0);
    HEAP32[$39>>2] = $38;
    $40 = ((($17)) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ((($2)) + 12|0);
    HEAP32[$42>>2] = $41;
    (_fclose($17)|0);
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 12) {
  $43 = ($44|0)==(0);
  if ($43) {
   $$0 = $2;
  } else {
   ___unlockfile($2);
   $$0 = $2;
  }
 }
 else if ((label|0) == 15) {
  (_fclose($2)|0);
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___dup3($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = ($0|0)==($1|0);
 L1: do {
  if ($3) {
   $$sink = -22;
  } else {
   $4 = $2 & 524288;
   $5 = ($4|0)!=(0);
   L3: do {
    if ($5) {
     while(1) {
      HEAP32[$vararg_buffer>>2] = $0;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $1;
      $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
      HEAP32[$vararg_ptr2>>2] = $2;
      $6 = (___syscall330(330,($vararg_buffer|0))|0);
      switch ($6|0) {
      case -38:  {
       break L3;
       break;
      }
      case -16:  {
       break;
      }
      default: {
       $$sink = $6;
       break L1;
      }
      }
     }
    }
   } while(0);
   while(1) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $1;
    $7 = (___syscall63(63,($vararg_buffer3|0))|0);
    $8 = ($7|0)==(-16);
    if (!($8)) {
     break;
    }
   }
   if ($5) {
    HEAP32[$vararg_buffer7>>2] = $1;
    $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
    HEAP32[$vararg_ptr10>>2] = 2;
    $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
    HEAP32[$vararg_ptr11>>2] = 1;
    (___syscall221(221,($vararg_buffer7|0))|0);
    $$sink = $7;
   } else {
    $$sink = $7;
   }
  }
 } while(0);
 $9 = (___syscall_ret($$sink)|0);
 STACKTOP = sp;return ($9|0);
}
function _fsetpos($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = (___fseeko($0,$2,0)|0);
 return ($3|0);
}
function _ftell($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ftello($0)|0);
 return ($1|0);
}
function ___do_orphaned_stdio_locks() {
 var $$0 = 0, $$04 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self_608()|0);
 $1 = ((($0)) + 232|0);
 $$04 = HEAP32[$1>>2]|0;
 $2 = ($$04|0)==(0|0);
 if (!($2)) {
  $$05 = $$04;
  while(1) {
   $3 = ((($$05)) + 76|0);
   _a_store_609($3);
   $4 = ((($$05)) + 116|0);
   $$0 = HEAP32[$4>>2]|0;
   $5 = ($$0|0)==(0|0);
   if ($5) {
    break;
   } else {
    $$05 = $$0;
   }
  }
 }
 return;
}
function _a_store_609($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 1073741824;
 return;
}
function _fwprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfwprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vfwprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $phitmp = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp + 112|0;
 $4 = sp + 72|0;
 $5 = sp;
 dest=$4; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $6 = (_wprintf_core(0,$1,$3,$5,$4)|0);
 $7 = ($6|0)<(0);
 if ($7) {
  $$0 = -1;
 } else {
  $8 = ((($0)) + 76|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)>(-1);
  if ($10) {
   $11 = (___lockfile($0)|0);
   $phitmp = ($11|0)!=(0);
   $20 = $phitmp;
  } else {
   $20 = 0;
  }
  (_fwide($0,1)|0);
  $12 = HEAP32[$0>>2]|0;
  $13 = $12 & 32;
  $14 = $12 & -33;
  HEAP32[$0>>2] = $14;
  $15 = (_wprintf_core($0,$1,$3,$5,$4)|0);
  $16 = HEAP32[$0>>2]|0;
  $17 = $16 & 32;
  $18 = ($17|0)!=(0);
  $$ = $18 ? -1 : $15;
  $19 = $16 | $13;
  HEAP32[$0>>2] = $19;
  if ($20) {
   ___unlockfile($0);
  }
  $$0 = $$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wprintf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$$0181 = 0, $$$0184 = 0, $$$0188 = 0, $$0 = 0, $$0170228 = 0, $$0171 = 0, $$0174 = 0, $$0177 = 0, $$0179 = 0, $$0180 = 0, $$0181 = 0, $$0184 = 0, $$0188$lcssa = 0, $$0188221 = 0, $$0190 = 0, $$0190$phi = 0, $$1175$$1185 = 0, $$1175211 = 0, $$1175227 = 0, $$1178 = 0;
 var $$1182 = 0, $$1182$$1185 = 0, $$1185 = 0, $$1189 = 0, $$1191 = 0, $$1232 = 0, $$2$lcssa = 0, $$2176231 = 0, $$2192 = 0, $$2219 = 0, $$3193 = 0, $$3217 = 0, $$lcssa205 = 0, $$lcssa206 = 0, $$lobit = 0, $$lobit195 = 0, $$lobit196 = 0, $$lobit197 = 0, $$pre = 0, $$pre250 = 0;
 var $$pre252 = 0, $$pre253 = 0, $$pre253$pre = 0, $$pre254 = 0, $$pre256 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $brmerge = 0, $brmerge220 = 0, $expanded = 0, $expanded36 = 0, $expanded38 = 0, $expanded39 = 0, $expanded40 = 0, $expanded42 = 0;
 var $expanded43 = 0, $expanded45 = 0, $expanded46 = 0, $expanded47 = 0, $isdigit = 0, $isdigittmp = 0, $or$cond = 0, $storemerge198 = 0, $trunc = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer26 = 0, $vararg_buffer31 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0;
 var $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer31 = sp + 88|0;
 $vararg_buffer26 = sp + 72|0;
 $vararg_buffer17 = sp + 40|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $5 = sp + 108|0;
 $6 = sp;
 $7 = sp + 112|0;
 $8 = sp + 104|0;
 HEAP32[$5>>2] = $1;
 $9 = ($0|0)!=(0|0);
 $$0174 = 0;$$0177 = 0;$$0190 = 0;
 L1: while(1) {
  $10 = ($$0177|0)>(-1);
  do {
   if ($10) {
    $11 = (2147483647 - ($$0177))|0;
    $12 = ($$0174|0)>($11|0);
    if (!($12)) {
     $17 = (($$0174) + ($$0177))|0;
     $$1178 = $17;
     break;
    }
    $13 = HEAP32[$0>>2]|0;
    $14 = $13 & 32;
    $15 = ($14|0)==(0);
    if ($15) {
     $16 = (___errno_location()|0);
     HEAP32[$16>>2] = 75;
     $$1178 = -1;
    } else {
     $$1178 = -1;
    }
   } else {
    $$1178 = $$0177;
   }
  } while(0);
  $18 = HEAP32[$5>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0);
  if ($20) {
   label = 82;
   break;
  } else {
   $21 = $19;$23 = $18;
  }
  L10: while(1) {
   switch ($21|0) {
   case 37: case 0:  {
    break L10;
    break;
   }
   default: {
   }
   }
   $22 = ((($23)) + 4|0);
   HEAP32[$5>>2] = $22;
   $$pre = HEAP32[$22>>2]|0;
   $21 = $$pre;$23 = $22;
  }
  $24 = (_wcsspn($23,24164)|0);
  $25 = $24 >>> 1;
  $26 = HEAP32[$5>>2]|0;
  $27 = (($26) + ($25<<2)|0);
  $28 = $24 & -2;
  $29 = (($26) + ($28<<2)|0);
  HEAP32[$5>>2] = $29;
  $30 = $27;
  $31 = $18;
  $32 = (($30) - ($31))|0;
  $33 = $32 >> 2;
  if ($9) {
   _out_692($0,$18,$33);
  }
  $34 = ($33|0)==(0);
  if (!($34)) {
   $$0190$phi = $$0190;$$0174 = $33;$$0177 = $$1178;$$0190 = $$0190$phi;
   continue;
  }
  $35 = HEAP32[$5>>2]|0;
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (_iswdigit($37)|0);
  $39 = ($38|0)==(0);
  $$pre250 = HEAP32[$5>>2]|0;
  if ($39) {
   $$0180 = -1;$$1191 = $$0190;$$sink = 1;
  } else {
   $40 = ((($$pre250)) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(36);
   if ($42) {
    $43 = ((($$pre250)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) + -48)|0;
    $$0180 = $45;$$1191 = 1;$$sink = 3;
   } else {
    $$0180 = -1;$$1191 = $$0190;$$sink = 1;
   }
  }
  $46 = (($$pre250) + ($$sink<<2)|0);
  HEAP32[$5>>2] = $46;
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + -32)|0;
  $49 = ($48>>>0)>(31);
  $50 = 1 << $48;
  $51 = $50 & 75913;
  $52 = ($51|0)==(0);
  $brmerge220 = $49 | $52;
  if ($brmerge220) {
   $$0188$lcssa = 0;$$lcssa205 = $47;$$lcssa206 = $46;
  } else {
   $$0188221 = 0;$54 = $47;$58 = $46;
   while(1) {
    $53 = (($54) + -32)|0;
    $55 = 1 << $53;
    $56 = $55 | $$0188221;
    $57 = ((($58)) + 4|0);
    $59 = HEAP32[$57>>2]|0;
    $60 = (($59) + -32)|0;
    $61 = ($60>>>0)>(31);
    $62 = 1 << $60;
    $63 = $62 & 75913;
    $64 = ($63|0)==(0);
    $brmerge = $61 | $64;
    if ($brmerge) {
     break;
    } else {
     $$0188221 = $56;$54 = $59;$58 = $57;
    }
   }
   HEAP32[$5>>2] = $57;
   $$0188$lcssa = $56;$$lcssa205 = $59;$$lcssa206 = $57;
  }
  $65 = ($$lcssa205|0)==(42);
  if ($65) {
   $66 = ((($$lcssa206)) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (_iswdigit($67)|0);
   $69 = ($68|0)==(0);
   if ($69) {
    label = 23;
   } else {
    $70 = HEAP32[$5>>2]|0;
    $71 = ((($70)) + 8|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)==(36);
    if ($73) {
     $74 = ((($70)) + 4|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (($75) + -48)|0;
     $77 = (($4) + ($76<<2)|0);
     HEAP32[$77>>2] = 10;
     $78 = HEAP32[$74>>2]|0;
     $79 = (($78) + -48)|0;
     $80 = (($3) + ($79<<3)|0);
     $81 = $80;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $84 = (($81) + 4)|0;
     $85 = $84;
     $86 = HEAP32[$85>>2]|0;
     $87 = ((($70)) + 12|0);
     $$0184 = $83;$$2192 = 1;$storemerge198 = $87;
    } else {
     label = 23;
    }
   }
   if ((label|0) == 23) {
    label = 0;
    $88 = ($$1191|0)==(0);
    if (!($88)) {
     $$0 = -1;
     break;
    }
    if ($9) {
     $arglist_current = HEAP32[$2>>2]|0;
     $89 = $arglist_current;
     $90 = ((0) + 4|0);
     $expanded36 = $90;
     $expanded = (($expanded36) - 1)|0;
     $91 = (($89) + ($expanded))|0;
     $92 = ((0) + 4|0);
     $expanded40 = $92;
     $expanded39 = (($expanded40) - 1)|0;
     $expanded38 = $expanded39 ^ -1;
     $93 = $91 & $expanded38;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next = ((($94)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $284 = $95;
    } else {
     $284 = 0;
    }
    $96 = HEAP32[$5>>2]|0;
    $97 = ((($96)) + 4|0);
    $$0184 = $284;$$2192 = 0;$storemerge198 = $97;
   }
   HEAP32[$5>>2] = $storemerge198;
   $98 = ($$0184|0)<(0);
   $99 = $$0188$lcssa | 8192;
   $100 = (0 - ($$0184))|0;
   $$$0188 = $98 ? $99 : $$0188$lcssa;
   $$$0184 = $98 ? $100 : $$0184;
   $$1185 = $$$0184;$$1189 = $$$0188;$$3193 = $$2192;$104 = $storemerge198;
  } else {
   $101 = (_getint_693($5)|0);
   $102 = ($101|0)<(0);
   if ($102) {
    $$0 = -1;
    break;
   }
   $$pre252 = HEAP32[$5>>2]|0;
   $$1185 = $101;$$1189 = $$0188$lcssa;$$3193 = $$1191;$104 = $$pre252;
  }
  $103 = HEAP32[$104>>2]|0;
  $105 = ($103|0)==(46);
  do {
   if ($105) {
    $106 = ((($104)) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($107|0)==(42);
    if (!($108)) {
     $133 = ((($104)) + 4|0);
     HEAP32[$5>>2] = $133;
     $134 = (_getint_693($5)|0);
     $$pre253$pre = HEAP32[$5>>2]|0;
     $$0181 = $134;$$pre253 = $$pre253$pre;
     break;
    }
    $109 = ((($104)) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $isdigittmp = (($110) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if ($isdigit) {
     $111 = ((($104)) + 12|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==(36);
     if ($113) {
      $114 = (($4) + ($isdigittmp<<2)|0);
      HEAP32[$114>>2] = 10;
      $115 = HEAP32[$109>>2]|0;
      $116 = (($115) + -48)|0;
      $117 = (($3) + ($116<<3)|0);
      $118 = $117;
      $119 = $118;
      $120 = HEAP32[$119>>2]|0;
      $121 = (($118) + 4)|0;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = ((($104)) + 16|0);
      HEAP32[$5>>2] = $124;
      $$0181 = $120;$$pre253 = $124;
      break;
     }
    }
    $125 = ($$3193|0)==(0);
    if (!($125)) {
     $$0 = -1;
     break L1;
    }
    if ($9) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $126 = $arglist_current2;
     $127 = ((0) + 4|0);
     $expanded43 = $127;
     $expanded42 = (($expanded43) - 1)|0;
     $128 = (($126) + ($expanded42))|0;
     $129 = ((0) + 4|0);
     $expanded47 = $129;
     $expanded46 = (($expanded47) - 1)|0;
     $expanded45 = $expanded46 ^ -1;
     $130 = $128 & $expanded45;
     $131 = $130;
     $132 = HEAP32[$131>>2]|0;
     $arglist_next3 = ((($131)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $285 = $132;
    } else {
     $285 = 0;
    }
    HEAP32[$5>>2] = $109;
    $$0181 = $285;$$pre253 = $109;
   } else {
    $$0181 = -1;$$pre253 = $104;
   }
  } while(0);
  $$0179 = 0;$136 = $$pre253;
  while(1) {
   $135 = HEAP32[$136>>2]|0;
   $137 = (($135) + -65)|0;
   $138 = ($137>>>0)>(57);
   if ($138) {
    $$0 = -1;
    break L1;
   }
   $139 = ((($136)) + 4|0);
   HEAP32[$5>>2] = $139;
   $140 = ((183608 + (($$0179*58)|0)|0) + ($137)|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (($142) + -1)|0;
   $144 = ($143>>>0)<(8);
   if ($144) {
    $$0179 = $142;$136 = $139;
   } else {
    break;
   }
  }
  $145 = ($141<<24>>24)==(0);
  if ($145) {
   $$0 = -1;
   break;
  }
  $146 = ($141<<24>>24)==(19);
  $147 = ($$0180|0)>(-1);
  do {
   if ($146) {
    if ($147) {
     $$0 = -1;
     break L1;
    } else {
     label = 50;
    }
   } else {
    if ($147) {
     $148 = (($4) + ($$0180<<2)|0);
     HEAP32[$148>>2] = $142;
     $149 = (($3) + ($$0180<<3)|0);
     $150 = $149;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $153 = (($150) + 4)|0;
     $154 = $153;
     $155 = HEAP32[$154>>2]|0;
     $156 = $6;
     $157 = $156;
     HEAP32[$157>>2] = $152;
     $158 = (($156) + 4)|0;
     $159 = $158;
     HEAP32[$159>>2] = $155;
     label = 50;
     break;
    }
    if (!($9)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_695($6,$142,$2);
    $$pre254 = HEAP32[$5>>2]|0;
    $161 = $$pre254;
   }
  } while(0);
  if ((label|0) == 50) {
   label = 0;
   if ($9) {
    $161 = $139;
   } else {
    $$0174 = 0;$$0177 = $$1178;$$0190 = $$3193;
    continue;
   }
  }
  $160 = ((($161)) + -4|0);
  $162 = HEAP32[$160>>2]|0;
  $163 = ($$0179|0)!=(0);
  $164 = $162 & 15;
  $165 = ($164|0)==(3);
  $or$cond = $163 & $165;
  $166 = $162 & -33;
  $$0171 = $or$cond ? $166 : $162;
  switch ($$0171|0) {
  case 110:  {
   $trunc = $$0179&255;
   switch ($trunc<<24>>24) {
   case 0:  {
    $167 = HEAP32[$6>>2]|0;
    HEAP32[$167>>2] = $$1178;
    $$0174 = 0;$$0177 = $$1178;$$0190 = $$3193;
    continue L1;
    break;
   }
   case 1:  {
    $168 = HEAP32[$6>>2]|0;
    HEAP32[$168>>2] = $$1178;
    $$0174 = 0;$$0177 = $$1178;$$0190 = $$3193;
    continue L1;
    break;
   }
   case 2:  {
    $169 = ($$1178|0)<(0);
    $170 = $169 << 31 >> 31;
    $171 = HEAP32[$6>>2]|0;
    $172 = $171;
    $173 = $172;
    HEAP32[$173>>2] = $$1178;
    $174 = (($172) + 4)|0;
    $175 = $174;
    HEAP32[$175>>2] = $170;
    $$0174 = 0;$$0177 = $$1178;$$0190 = $$3193;
    continue L1;
    break;
   }
   case 3:  {
    $176 = $$1178&65535;
    $177 = HEAP32[$6>>2]|0;
    HEAP16[$177>>1] = $176;
    $$0174 = 0;$$0177 = $$1178;$$0190 = $$3193;
    continue L1;
    break;
   }
   case 4:  {
    $178 = $$1178&255;
    $179 = HEAP32[$6>>2]|0;
    HEAP8[$179>>0] = $178;
    $$0174 = 0;$$0177 = $$1178;$$0190 = $$3193;
    continue L1;
    break;
   }
   case 6:  {
    $180 = HEAP32[$6>>2]|0;
    HEAP32[$180>>2] = $$1178;
    $$0174 = 0;$$0177 = $$1178;$$0190 = $$3193;
    continue L1;
    break;
   }
   case 7:  {
    $181 = ($$1178|0)<(0);
    $182 = $181 << 31 >> 31;
    $183 = HEAP32[$6>>2]|0;
    $184 = $183;
    $185 = $184;
    HEAP32[$185>>2] = $$1178;
    $186 = (($184) + 4)|0;
    $187 = $186;
    HEAP32[$187>>2] = $182;
    $$0174 = 0;$$0177 = $$1178;$$0190 = $$3193;
    continue L1;
    break;
   }
   default: {
    $$0174 = 0;$$0177 = $$1178;$$0190 = $$3193;
    continue L1;
   }
   }
   break;
  }
  case 99:  {
   $188 = $6;
   $189 = $188;
   $190 = HEAP32[$189>>2]|0;
   $191 = (($188) + 4)|0;
   $192 = $191;
   $193 = HEAP32[$192>>2]|0;
   $194 = (_btowc($190)|0);
   (_fputwc($194,$0)|0);
   $$0174 = 1;$$0177 = $$1178;$$0190 = $$3193;
   continue L1;
   break;
  }
  case 67:  {
   $195 = $6;
   $196 = $195;
   $197 = HEAP32[$196>>2]|0;
   $198 = (($195) + 4)|0;
   $199 = $198;
   $200 = HEAP32[$199>>2]|0;
   (_fputwc($197,$0)|0);
   $$0174 = 1;$$0177 = $$1178;$$0190 = $$3193;
   continue L1;
   break;
  }
  case 83:  {
   $201 = HEAP32[$6>>2]|0;
   $202 = (_wmemchr($201,0,$$0181)|0);
   $203 = ($202|0)==(0|0);
   $204 = $202;
   $205 = $201;
   $206 = (($204) - ($205))|0;
   $207 = $206 >> 2;
   $$1182 = $203 ? $$0181 : $207;
   $208 = ($$1185|0)<($$1182|0);
   $$1182$$1185 = $208 ? $$1182 : $$1185;
   $209 = $$1189 & 8192;
   $210 = ($209|0)==(0);
   if ($210) {
    $211 = (($$1182$$1185) - ($$1182))|0;
    HEAP32[$vararg_buffer>>2] = $211;
    $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = 189597;
    (_fprintf($0,184072,$vararg_buffer)|0);
    _out_692($0,$201,$$1182);
    $$0174 = $$1182$$1185;$$0177 = $$1178;$$0190 = $$3193;
    continue L1;
   } else {
    _out_692($0,$201,$$1182);
    $212 = (($$1182$$1185) - ($$1182))|0;
    HEAP32[$vararg_buffer5>>2] = $212;
    $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
    HEAP32[$vararg_ptr8>>2] = 189597;
    (_fprintf($0,184072,$vararg_buffer5)|0);
    $$0174 = $$1182$$1185;$$0177 = $$1178;$$0190 = $$3193;
    continue L1;
   }
   break;
  }
  case 109:  {
   $213 = (___errno_location()|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = (_strerror($214)|0);
   HEAP32[$6>>2] = $215;
   $217 = $215;
   break;
  }
  case 115:  {
   $$pre256 = HEAP32[$6>>2]|0;
   $217 = $$pre256;
   break;
  }
  default: {
   $237 = $$1189 >>> 3;
   $$lobit = $237 & 1;
   $238 = $$lobit ^ 1;
   $239 = (184083 + ($238)|0);
   $240 = $$1189 >>> 11;
   $$lobit195 = $240 & 1;
   $241 = $$lobit195 ^ 1;
   $242 = (184085 + ($241)|0);
   $243 = $$1189 >>> 13;
   $$lobit196 = $243 & 1;
   $244 = $$lobit196 ^ 1;
   $245 = (184087 + ($244)|0);
   $246 = $$1189 & 1;
   $247 = $246 ^ 1;
   $248 = (184089 + ($247)|0);
   $249 = $$1189 >>> 16;
   $$lobit197 = $249 & 1;
   $250 = $$lobit197 ^ 1;
   $251 = (184250 + ($250)|0);
   $252 = $$0171 | 32;
   $253 = (($252) + -97)|0;
   $254 = (184091 + ($253)|0);
   $255 = HEAP8[$254>>0]|0;
   $256 = $255 << 24 >> 24;
   HEAP32[$vararg_buffer17>>2] = $239;
   $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
   HEAP32[$vararg_ptr20>>2] = $242;
   $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
   HEAP32[$vararg_ptr21>>2] = $245;
   $vararg_ptr22 = ((($vararg_buffer17)) + 12|0);
   HEAP32[$vararg_ptr22>>2] = $248;
   $vararg_ptr23 = ((($vararg_buffer17)) + 16|0);
   HEAP32[$vararg_ptr23>>2] = $251;
   $vararg_ptr24 = ((($vararg_buffer17)) + 20|0);
   HEAP32[$vararg_ptr24>>2] = $256;
   $vararg_ptr25 = ((($vararg_buffer17)) + 24|0);
   HEAP32[$vararg_ptr25>>2] = $$0171;
   (_snprintf($7,16,184115,$vararg_buffer17)|0);
   switch ($252|0) {
   case 103: case 102: case 101: case 97:  {
    $257 = +HEAPF64[$6>>3];
    HEAP32[$vararg_buffer26>>2] = $$1185;
    $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
    HEAP32[$vararg_ptr29>>2] = $$0181;
    $vararg_ptr30 = ((($vararg_buffer26)) + 8|0);
    HEAPF64[$vararg_ptr30>>3] = $257;
    $258 = (_fprintf($0,$7,$vararg_buffer26)|0);
    $$0174 = $258;$$0177 = $$1178;$$0190 = $$3193;
    continue L1;
    break;
   }
   case 112: case 120: case 117: case 111: case 105: case 100:  {
    $259 = $6;
    $260 = $259;
    $261 = HEAP32[$260>>2]|0;
    $262 = (($259) + 4)|0;
    $263 = $262;
    $264 = HEAP32[$263>>2]|0;
    HEAP32[$vararg_buffer31>>2] = $$1185;
    $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
    HEAP32[$vararg_ptr34>>2] = $$0181;
    $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
    $265 = $vararg_ptr35;
    $266 = $265;
    HEAP32[$266>>2] = $261;
    $267 = (($265) + 4)|0;
    $268 = $267;
    HEAP32[$268>>2] = $264;
    $269 = (_fprintf($0,$7,$vararg_buffer31)|0);
    $$0174 = $269;$$0177 = $$1178;$$0190 = $$3193;
    continue L1;
    break;
   }
   default: {
    $$0174 = 0;$$0177 = $$1178;$$0190 = $$3193;
    continue L1;
   }
   }
  }
  }
  $216 = ($217|0)==(0|0);
  if ($216) {
   HEAP32[$6>>2] = 184076;
   $286 = 184076;
  } else {
   $286 = $217;
  }
  $218 = ($$0181>>>0)<(2147483647);
  $$$0181 = $218 ? $$0181 : 2147483647;
  $219 = ($$$0181|0)>(0);
  L97: do {
   if ($219) {
    $$0170228 = $286;$$1175227 = 0;
    while(1) {
     $220 = (_mbtowc($8,$$0170228,4)|0);
     $221 = ($220|0)>(0);
     if (!($221)) {
      break;
     }
     $222 = (($$0170228) + ($220)|0);
     $223 = (($$1175227) + 1)|0;
     $224 = ($223|0)<($$$0181|0);
     if ($224) {
      $$0170228 = $222;$$1175227 = $223;
     } else {
      $$1175211 = $223;
      break L97;
     }
    }
    $225 = ($220|0)<(0);
    if ($225) {
     $$0 = -1;
     break L1;
    } else {
     $$1175211 = $$1175227;
    }
   } else {
    $$1175211 = 0;
   }
  } while(0);
  $226 = ($$1185|0)<($$1175211|0);
  $$1175$$1185 = $226 ? $$1175211 : $$1185;
  $227 = $$1189 & 8192;
  $228 = ($227|0)!=(0);
  if (!($228)) {
   $229 = (($$1175$$1185) - ($$1175211))|0;
   HEAP32[$vararg_buffer9>>2] = $229;
   $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
   HEAP32[$vararg_ptr12>>2] = 189597;
   (_fprintf($0,184072,$vararg_buffer9)|0);
  }
  $230 = ($$1175211|0)==(0);
  if (!($230)) {
   $$1232 = $286;$$2176231 = $$1175211;
   while(1) {
    $231 = (($$2176231) + -1)|0;
    $232 = (_mbtowc($8,$$1232,4)|0);
    $233 = (($$1232) + ($232)|0);
    $234 = HEAP32[$8>>2]|0;
    (_fputwc($234,$0)|0);
    $235 = ($231|0)==(0);
    if ($235) {
     break;
    } else {
     $$1232 = $233;$$2176231 = $231;
    }
   }
  }
  if (!($228)) {
   $$0174 = $$1175$$1185;$$0177 = $$1178;$$0190 = $$3193;
   continue;
  }
  $236 = (($$1175$$1185) - ($$1175211))|0;
  HEAP32[$vararg_buffer13>>2] = $236;
  $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
  HEAP32[$vararg_ptr16>>2] = 189597;
  (_fprintf($0,184072,$vararg_buffer13)|0);
  $$0174 = $$1175$$1185;$$0177 = $$1178;$$0190 = $$3193;
 }
 L111: do {
  if ((label|0) == 82) {
   $270 = ($0|0)==(0|0);
   if ($270) {
    $271 = ($$0190|0)==(0);
    if ($271) {
     $$0 = 0;
    } else {
     $$2219 = 1;
     while(1) {
      $272 = (($4) + ($$2219<<2)|0);
      $273 = HEAP32[$272>>2]|0;
      $274 = ($273|0)==(0);
      if ($274) {
       $$2$lcssa = $$2219;
       break;
      }
      $276 = (($3) + ($$2219<<3)|0);
      _pop_arg_695($276,$273,$2);
      $277 = (($$2219) + 1)|0;
      $278 = ($$2219|0)<(9);
      if ($278) {
       $$2219 = $277;
      } else {
       $$2$lcssa = $277;
       break;
      }
     }
     $275 = ($$2$lcssa|0)<(10);
     if ($275) {
      $$3217 = $$2$lcssa;
      while(1) {
       $281 = (($4) + ($$3217<<2)|0);
       $282 = HEAP32[$281>>2]|0;
       $283 = ($282|0)==(0);
       if (!($283)) {
        $$0 = -1;
        break L111;
       }
       $279 = (($$3217) + 1)|0;
       $280 = ($$3217|0)<(9);
       if ($280) {
        $$3217 = $279;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $$1178;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _wcsspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$08 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$0$lcssa = $0;
  } else {
   $$08 = $0;$4 = $2;
   while(1) {
    $5 = (_wcschr($1,$4)|0);
    $6 = ($5|0)==(0|0);
    if ($6) {
     $$0$lcssa = $$08;
     break L1;
    }
    $7 = ((($$08)) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==(0);
    if ($9) {
     $$0$lcssa = $7;
     break;
    } else {
     $$08 = $7;$4 = $8;
    }
   }
  }
 } while(0);
 $10 = $$0$lcssa;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = $12 >> 2;
 return ($13|0);
}
function _out_692($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$034 = 0, $$in = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if (!($3)) {
   $$034 = $1;$$in = $2;
   while(1) {
    $4 = (($$in) + -1)|0;
    $5 = HEAP32[$0>>2]|0;
    $6 = $5 & 32;
    $7 = ($6|0)==(0);
    if (!($7)) {
     break L1;
    }
    $8 = ((($$034)) + 4|0);
    $9 = HEAP32[$$034>>2]|0;
    (_fputwc($9,$0)|0);
    $10 = ($4|0)==(0);
    if ($10) {
     break;
    } else {
     $$034 = $8;$$in = $4;
    }
   }
  }
 } while(0);
 return;
}
function _getint_693($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_iswdigit($2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $5 = ($$04*10)|0;
   $6 = HEAP32[$0>>2]|0;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + -48)|0;
   $9 = (($8) + ($7))|0;
   $10 = ((($6)) + 4|0);
   HEAP32[$0>>2] = $10;
   $11 = HEAP32[$10>>2]|0;
   $12 = (_iswdigit($11)|0);
   $13 = ($12|0)==(0);
   if ($13) {
    $$0$lcssa = $9;
    break;
   } else {
    $$04 = $9;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg_695($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _wmemchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$067 = 0, $$08 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $9 = 0;
  } else {
   $$067 = $0;$$08 = $2;
   while(1) {
    $4 = HEAP32[$$067>>2]|0;
    $5 = ($4|0)==($1|0);
    if ($5) {
     $9 = $$067;
     break L1;
    }
    $6 = (($$08) + -1)|0;
    $7 = ((($$067)) + 4|0);
    $8 = ($6|0)==(0);
    if ($8) {
     $9 = 0;
     break;
    } else {
     $$067 = $7;$$08 = $6;
    }
   }
  }
 } while(0);
 return ($9|0);
}
function _fwscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfwscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vfwscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$0245 = 0, $$$0245320 = 0, $$$0249 = 0, $$$2 = 0, $$$6 = 0, $$0245$lcssa = 0, $$0245442 = 0, $$0249 = 0, $$0251449 = 0, $$0252 = 0, $$0255471 = 0, $$0261469 = 0, $$0268378 = 0, $$0268447 = 0, $$0271 = 0, $$0272468 = 0, $$0280$ = 0, $$0280461 = 0, $$0284 = 0;
 var $$0286 = 0, $$0297459 = 0, $$10 = 0, $$10307 = 0, $$11 = 0, $$1253 = 0, $$1256 = 0, $$1262$ph = 0, $$1262372 = 0, $$1262448 = 0, $$1273 = 0, $$1281 = 0, $$1285 = 0, $$1298 = 0, $$1310 = 0, $$1310330 = 0, $$2 = 0, $$2254 = 0, $$2257 = 0, $$2270 = 0;
 var $$2274 = 0, $$2282 = 0, $$2289$ph = 0, $$2289390 = 0, $$2289445 = 0, $$2299$ph = 0, $$2299406 = 0, $$2299444 = 0, $$321 = 0, $$322 = 0, $$323 = 0, $$324 = 0, $$3258$lcssa = 0, $$3258441 = 0, $$3275 = 0, $$3275331 = 0, $$3283 = 0, $$4259 = 0, $$4265 = 0, $$4276334 = 0;
 var $$4291 = 0, $$4313$ph343 = 0, $$4450 = 0, $$5260 = 0, $$5266 = 0, $$5277384 = 0, $$5277446 = 0, $$6 = 0, $$6267 = 0, $$6278 = 0, $$6303 = 0, $$7 = 0, $$7279 = 0, $$7304 = 0, $$8 = 0, $$8305 = 0, $$9 = 0, $$9306 = 0, $$old10 = 0, $$ph = 0;
 var $$pr = 0, $$pre = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded9 = 0, $factor = 0, $factor346 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0;
 var $or$cond316 = 0, $or$cond318 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $3 = sp + 120|0;
 $4 = sp + 124|0;
 $5 = sp + 32|0;
 $6 = ((($0)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($0)|0);
  $257 = $9;
 } else {
  $257 = 0;
 }
 (_fwide($0,1)|0);
 $10 = HEAP32[$1>>2]|0;
 $11 = ($10|0)==(0);
 L4: do {
  if ($11) {
   $$3283 = 0;
  } else {
   $12 = ((($0)) + 4|0);
   $13 = ((($0)) + 8|0);
   $14 = ((($5)) + 4|0);
   $15 = ((($5)) + 8|0);
   $16 = ((($5)) + 12|0);
   $17 = ((($5)) + 16|0);
   $18 = ((($5)) + 20|0);
   $19 = ((($5)) + 24|0);
   $20 = ((($5)) + 28|0);
   $21 = ((($5)) + 32|0);
   $22 = ((($5)) + 36|0);
   $23 = ((($5)) + 40|0);
   $24 = ((($5)) + 44|0);
   $25 = ((($5)) + 48|0);
   $26 = ((($5)) + 52|0);
   $27 = ((($5)) + 56|0);
   $28 = ((($5)) + 60|0);
   $29 = ((($5)) + 64|0);
   $30 = ((($5)) + 68|0);
   $31 = ((($5)) + 72|0);
   $32 = ((($5)) + 76|0);
   $33 = ((($5)) + 80|0);
   $34 = ((($5)) + 84|0);
   $$0255471 = $1;$$0261469 = 0;$$0272468 = 0;$$0280461 = 0;$$0297459 = 0;$258 = 0;$35 = $10;
   L6: while(1) {
    $36 = (_iswspace($35)|0);
    $37 = ($36|0)==(0);
    L8: do {
     if ($37) {
      $60 = HEAP32[$$0255471>>2]|0;
      $61 = ($60|0)==(37);
      L10: do {
       if ($61) {
        $62 = ((($$0255471)) + 4|0);
        $63 = HEAP32[$62>>2]|0;
        L12: do {
         switch ($63|0) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $86 = ((($$0255471)) + 8|0);
          $$0286 = 0;$$2257 = $86;
          break;
         }
         default: {
          $87 = (_iswdigit($63)|0);
          $88 = ($87|0)==(0);
          if (!($88)) {
           $89 = ((($$0255471)) + 8|0);
           $90 = HEAP32[$89>>2]|0;
           $91 = ($90|0)==(36);
           if ($91) {
            $92 = HEAP32[$62>>2]|0;
            $93 = (($92) + -48)|0;
            $94 = (_arg_n_707($2,$93)|0);
            $95 = ((($$0255471)) + 12|0);
            $$0286 = $94;$$2257 = $95;
            break L12;
           }
          }
          $arglist_current = HEAP32[$2>>2]|0;
          $96 = $arglist_current;
          $97 = ((0) + 4|0);
          $expanded9 = $97;
          $expanded = (($expanded9) - 1)|0;
          $98 = (($96) + ($expanded))|0;
          $99 = ((0) + 4|0);
          $expanded13 = $99;
          $expanded12 = (($expanded13) - 1)|0;
          $expanded11 = $expanded12 ^ -1;
          $100 = $98 & $expanded11;
          $101 = $100;
          $102 = HEAP32[$101>>2]|0;
          $arglist_next = ((($101)) + 4|0);
          HEAP32[$2>>2] = $arglist_next;
          $$0286 = $102;$$2257 = $62;
         }
         }
        } while(0);
        $103 = HEAP32[$$2257>>2]|0;
        $104 = (_iswdigit($103)|0);
        $105 = ($104|0)==(0);
        if ($105) {
         $$0245$lcssa = 0;$$3258$lcssa = $$2257;
        } else {
         $$0245442 = 0;$$3258441 = $$2257;
         while(1) {
          $106 = ($$0245442*10)|0;
          $107 = HEAP32[$$3258441>>2]|0;
          $108 = (($106) + -48)|0;
          $109 = (($108) + ($107))|0;
          $110 = ((($$3258441)) + 4|0);
          $111 = HEAP32[$110>>2]|0;
          $112 = (_iswdigit($111)|0);
          $113 = ($112|0)==(0);
          if ($113) {
           $$0245$lcssa = $109;$$3258$lcssa = $110;
           break;
          } else {
           $$0245442 = $109;$$3258441 = $110;
          }
         }
        }
        $114 = HEAP32[$$3258$lcssa>>2]|0;
        $115 = ($114|0)==(109);
        $116 = ((($$3258$lcssa)) + 4|0);
        if ($115) {
         $117 = ($$0286|0)!=(0|0);
         $118 = $117&1;
         $$pr = HEAP32[$116>>2]|0;
         $$0252 = $118;$$1298 = 0;$$4259 = $116;$120 = $$pr;$261 = 0;
        } else {
         $$0252 = 0;$$1298 = $$0297459;$$4259 = $$3258$lcssa;$120 = $114;$261 = $258;
        }
        $119 = ((($$4259)) + 4|0);
        switch ($120|0) {
        case 104:  {
         $121 = HEAP32[$119>>2]|0;
         $122 = ($121|0)==(104);
         $123 = ((($$4259)) + 8|0);
         $$321 = $122 ? $123 : $119;
         $$322 = $122 ? -2 : -1;
         $$0249 = $$322;$$5260 = $$321;
         break;
        }
        case 108:  {
         $124 = HEAP32[$119>>2]|0;
         $125 = ($124|0)==(108);
         $126 = ((($$4259)) + 8|0);
         $$323 = $125 ? $126 : $119;
         $$324 = $125 ? 3 : 1;
         $$0249 = $$324;$$5260 = $$323;
         break;
        }
        case 106:  {
         $$0249 = 3;$$5260 = $119;
         break;
        }
        case 116: case 122:  {
         $$0249 = 1;$$5260 = $119;
         break;
        }
        case 76:  {
         $$0249 = 2;$$5260 = $119;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $$0249 = 0;$$5260 = $$4259;
         break;
        }
        default: {
         $$9306 = $$1298;$262 = $261;
         label = 100;
         break L6;
        }
        }
        $127 = HEAP32[$$5260>>2]|0;
        $128 = $127 & 47;
        $129 = ($128|0)==(3);
        $130 = $127 | 32;
        $$ = $129 ? $130 : $127;
        $$$0249 = $129 ? 1 : $$0249;
        switch ($$|0) {
        case 110:  {
         $$4276334 = $$0272468;
         break;
        }
        case 91:  {
         label = 48;
         break;
        }
        default: {
         $131 = ($130|0)==(99);
         if ($131) {
          label = 48;
         } else {
          $$2274 = $$0272468;
          while(1) {
           $132 = HEAP32[$12>>2]|0;
           $133 = HEAP32[$13>>2]|0;
           $134 = ($132>>>0)<($133>>>0);
           if ($134) {
            $135 = HEAP8[$132>>0]|0;
            $136 = ($135<<24>>24)>(-1);
            if ($136) {
             $137 = ((($132)) + 1|0);
             HEAP32[$12>>2] = $137;
             $138 = HEAP8[$132>>0]|0;
             $139 = $138&255;
             $141 = $139;
            } else {
             label = 46;
            }
           } else {
            label = 46;
           }
           if ((label|0) == 46) {
            label = 0;
            $140 = (_getwc($0)|0);
            $141 = $140;
           }
           $142 = (_iswspace($141)|0);
           $143 = ($142|0)==(0);
           $144 = (($$2274) + 1)|0;
           if ($143) {
            $$1310 = $141;$$3275 = $$2274;
            label = 52;
            break;
           } else {
            $$2274 = $144;
           }
          }
         }
        }
        }
        do {
         if ((label|0) == 48) {
          label = 0;
          $145 = HEAP32[$12>>2]|0;
          $146 = HEAP32[$13>>2]|0;
          $147 = ($145>>>0)<($146>>>0);
          if ($147) {
           $148 = HEAP8[$145>>0]|0;
           $149 = ($148<<24>>24)>(-1);
           if ($149) {
            $150 = ((($145)) + 1|0);
            HEAP32[$12>>2] = $150;
            $151 = HEAP8[$145>>0]|0;
            $152 = $151&255;
            $$1310330 = $152;$$3275331 = $$0272468;$156 = $146;
            label = 54;
            break;
           }
          }
          $153 = (_getwc($0)|0);
          $$1310 = $153;$$3275 = $$0272468;
          label = 52;
         }
        } while(0);
        if ((label|0) == 52) {
         label = 0;
         $154 = ($$1310|0)<(0);
         if ($154) {
          $$9306 = $$1298;$262 = $261;
          label = 100;
          break L6;
         }
         $$pre = HEAP32[$13>>2]|0;
         $$1310330 = $$1310;$$3275331 = $$3275;$156 = $$pre;
         label = 54;
        }
        L53: do {
         if ((label|0) == 54) {
          label = 0;
          $155 = ($156|0)!=(0|0);
          $157 = ($$1310330>>>0)<(128);
          $or$cond5 = $157 & $155;
          if ($or$cond5) {
           $158 = HEAP32[$12>>2]|0;
           $159 = ((($158)) + -1|0);
           HEAP32[$12>>2] = $159;
          } else {
           (_ungetwc($$1310330,$0)|0);
          }
          switch ($$|0) {
          case 110:  {
           $$4276334 = $$3275331;
           break L53;
           break;
          }
          case 91: case 99: case 115:  {
           $162 = ($$|0)==(99);
           L61: do {
            if ($162) {
             $163 = ($$0245$lcssa|0)>(1);
             $$$0245 = $163 ? $$0245$lcssa : 1;
             $$0271 = 186612;$$1285 = 1;$$2 = $$$0245;$$8 = $$5260;
            } else {
             $164 = ($$|0)==(115);
             if ($164) {
              HEAP32[$5>>2] = 32;
              HEAP32[$14>>2] = 9;
              HEAP32[$15>>2] = 10;
              HEAP32[$16>>2] = 13;
              HEAP32[$17>>2] = 11;
              HEAP32[$18>>2] = 12;
              HEAP32[$19>>2] = 133;
              HEAP32[$20>>2] = 8192;
              HEAP32[$21>>2] = 8193;
              HEAP32[$22>>2] = 8194;
              HEAP32[$23>>2] = 8195;
              HEAP32[$24>>2] = 8196;
              HEAP32[$25>>2] = 8197;
              HEAP32[$26>>2] = 8198;
              HEAP32[$27>>2] = 8200;
              HEAP32[$28>>2] = 8201;
              HEAP32[$29>>2] = 8202;
              HEAP32[$30>>2] = 8232;
              HEAP32[$31>>2] = 8233;
              HEAP32[$32>>2] = 8287;
              HEAP32[$33>>2] = 12288;
              HEAP32[$34>>2] = 0;
              $$0271 = $5;$$1285 = 1;$$2 = $$0245$lcssa;$$8 = $$5260;
              break;
             }
             $165 = ((($$5260)) + 4|0);
             $166 = HEAP32[$165>>2]|0;
             $167 = ($166|0)==(94);
             $168 = ((($$5260)) + 8|0);
             $$0284 = $167&1;
             $$6 = $167 ? $168 : $165;
             $169 = HEAP32[$$6>>2]|0;
             $170 = ($169|0)==(93);
             $171 = ((($$6)) + 4|0);
             $$$6 = $170 ? $171 : $$6;
             $$7 = $$$6;
             while(1) {
              $172 = HEAP32[$$7>>2]|0;
              switch ($172|0) {
              case 0:  {
               $$9306 = $$1298;$262 = $261;
               label = 100;
               break L6;
               break;
              }
              case 93:  {
               $$0271 = $$6;$$1285 = $$0284;$$2 = $$0245$lcssa;$$8 = $$7;
               break L61;
               break;
              }
              default: {
              }
              }
              $173 = ((($$7)) + 4|0);
              $$7 = $173;
             }
            }
           } while(0);
           $174 = ($$$0249|0)==(0);
           $175 = $174 ? $$0286 : 0;
           $176 = ($$$0249|0)==(1);
           $177 = $176 ? $$0286 : 0;
           $178 = ($$2|0)<(1);
           $$$2 = $178 ? -1 : $$2;
           $179 = ($$0252|0)!=(0);
           do {
            if ($179) {
             $180 = (($$$2) + 1)|0;
             $181 = $162 ? $180 : 31;
             if ($176) {
              $182 = $181 << 2;
              $183 = (_malloc($182)|0);
              $184 = ($183|0)==(0|0);
              if ($184) {
               $$9306 = $175;$262 = 0;
               label = 100;
               break L6;
              } else {
               $$1262$ph = $181;$$2289$ph = $183;$$2299$ph = $175;$$ph = $183;
               break;
              }
             } else {
              $185 = (_malloc($181)|0);
              $186 = ($185|0)==(0|0);
              if ($186) {
               $$9306 = 0;$262 = 0;
               label = 100;
               break L6;
              } else {
               $$1262$ph = $181;$$2289$ph = $177;$$2299$ph = $185;$$ph = 0;
               break;
              }
             }
            } else {
             $$1262$ph = $$0261469;$$2289$ph = $177;$$2299$ph = $175;$$ph = $177;
            }
           } while(0);
           $187 = ($$$2|0)==(0);
           L77: do {
            if ($187) {
             $$0268378 = 0;$$1262372 = $$1262$ph;$$2289390 = $$2289$ph;$$2299406 = $$2299$ph;$$5277384 = $$3275331;$233 = $$ph;$263 = $$ph;
            } else {
             $$0251449 = 0;$$0268447 = 0;$$1262448 = $$1262$ph;$$2289445 = $$2289$ph;$$2299444 = $$2299$ph;$$4450 = $$$2;$$5277446 = $$3275331;$207 = $$ph;$264 = $$ph;
             while(1) {
              $188 = HEAP32[$12>>2]|0;
              $189 = HEAP32[$13>>2]|0;
              $190 = ($188>>>0)<($189>>>0);
              do {
               if ($190) {
                $191 = HEAP8[$188>>0]|0;
                $192 = ($191<<24>>24)>(-1);
                if (!($192)) {
                 label = 74;
                 break;
                }
                $193 = ((($188)) + 1|0);
                HEAP32[$12>>2] = $193;
                $194 = HEAP8[$188>>0]|0;
                $195 = $194&255;
                $198 = $195;
               } else {
                label = 74;
               }
              } while(0);
              if ((label|0) == 74) {
               label = 0;
               $196 = (_getwc($0)|0);
               $197 = ($196|0)<(0);
               if ($197) {
                $$4313$ph343 = $196;
                label = 86;
                break;
               } else {
                $198 = $196;
               }
              }
              $199 = (_in_set($$0271,$198)|0);
              $200 = ($199|0)==($$1285|0);
              if ($200) {
               label = 84;
               break;
              }
              $201 = ($$2289445|0)==(0|0);
              do {
               if ($201) {
                if ($176) {
                 $$2270 = $$0268447;$$4265 = $$1262448;$$4291 = 0;$$6303 = $$2299444;$265 = $264;$266 = $207;
                 break;
                }
                $210 = ($$2299444|0)!=(0|0);
                $211 = (($$2299444) + ($$0268447)|0);
                $212 = $210 ? $211 : $4;
                $213 = (_wctomb($212,$198)|0);
                $214 = ($213|0)<(0);
                if ($214) {
                 $$9306 = $$2299444;$262 = $264;
                 label = 100;
                 break L6;
                }
                $215 = (($213) + ($$0268447))|0;
                $216 = (($$1262448) + -4)|0;
                $217 = ($215>>>0)>($216>>>0);
                $or$cond318 = $179 & $217;
                if (!($or$cond318)) {
                 $$2270 = $215;$$4265 = $$1262448;$$4291 = 0;$$6303 = $$2299444;$265 = $264;$266 = $207;
                 break;
                }
                $factor346 = $$1262448 << 1;
                $218 = $factor346 | 1;
                $219 = (_realloc($$2299444,$218)|0);
                $220 = ($219|0)==(0|0);
                if ($220) {
                 $$9306 = $$2299444;$262 = $264;
                 label = 100;
                 break L6;
                } else {
                 $$2270 = $215;$$4265 = $218;$$4291 = 0;$$6303 = $219;$265 = $264;$266 = $207;
                }
               } else {
                $202 = (($$0268447) + 1)|0;
                $203 = (($$2289445) + ($$0268447<<2)|0);
                HEAP32[$203>>2] = $198;
                $204 = ($202|0)==($$1262448|0);
                $or$cond316 = $179 & $204;
                if (!($or$cond316)) {
                 $$2270 = $202;$$4265 = $$1262448;$$4291 = $$2289445;$$6303 = $$2299444;$265 = $264;$266 = $207;
                 break;
                }
                $factor = $$1262448 << 1;
                $205 = $factor | 1;
                $206 = $205 << 2;
                $208 = (_realloc($207,$206)|0);
                $209 = ($208|0)==(0|0);
                if ($209) {
                 $$9306 = $$2299444;$262 = $264;
                 label = 100;
                 break L6;
                } else {
                 $$2270 = $$1262448;$$4265 = $205;$$4291 = $208;$$6303 = $$2299444;$265 = $208;$266 = $208;
                }
               }
              } while(0);
              $221 = (($$5277446) + 1)|0;
              $222 = ($$4450|0)>(0);
              $223 = $222&1;
              $224 = (($$4450) - ($223))|0;
              $225 = ($224|0)==(0);
              if ($225) {
               $$0268378 = $$2270;$$1262372 = $$4265;$$2289390 = $$4291;$$2299406 = $$6303;$$5277384 = $221;$233 = $266;$263 = $265;
               break L77;
              } else {
               $$0251449 = 1;$$0268447 = $$2270;$$1262448 = $$4265;$$2289445 = $$4291;$$2299444 = $$6303;$$4450 = $224;$$5277446 = $221;$207 = $266;$264 = $265;
              }
             }
             if ((label|0) == 84) {
              label = 0;
              $226 = HEAP32[$13>>2]|0;
              $227 = ($226|0)!=(0|0);
              $228 = ($198>>>0)<(128);
              $or$cond7 = $228 & $227;
              if ($or$cond7) {
               $229 = HEAP32[$12>>2]|0;
               $230 = ((($229)) + -1|0);
               HEAP32[$12>>2] = $230;
              } else {
               $$4313$ph343 = $198;
               label = 86;
              }
             }
             if ((label|0) == 86) {
              label = 0;
              (_ungetwc($$4313$ph343,$0)|0);
             }
             $231 = ($$|0)!=(99);
             $232 = ($$0251449|0)!=(0);
             $or$cond9 = $231 & $232;
             if ($or$cond9) {
              $$0268378 = $$0268447;$$1262372 = $$1262448;$$2289390 = $$2289445;$$2299406 = $$2299444;$$5277384 = $$5277446;$233 = $207;$263 = $264;
             } else {
              $$11 = $$2299444;$$2254 = $$0252;$$2282 = $$0280461;$255 = $264;
              break L6;
             }
            }
           } while(0);
           if ($179) {
            $$sink = $176 ? $233 : $$2299406;
            HEAP32[$$0286>>2] = $$sink;
           }
           if ($162) {
            $$5266 = $$1262372;$$6278 = $$5277384;$$7304 = $$2299406;$$9 = $$8;$267 = $263;
           } else {
            $234 = ($$2289390|0)==(0|0);
            if (!($234)) {
             $235 = (($$2289390) + ($$0268378<<2)|0);
             HEAP32[$235>>2] = 0;
            }
            $236 = ($$2299406|0)==(0|0);
            if ($236) {
             $$5266 = $$1262372;$$6278 = $$5277384;$$7304 = 0;$$9 = $$8;$267 = $263;
            } else {
             $237 = (($$2299406) + ($$0268378)|0);
             HEAP8[$237>>0] = 0;
             $$5266 = $$1262372;$$6278 = $$5277384;$$7304 = $$2299406;$$9 = $$8;$267 = $263;
            }
           }
           break;
          }
          case 112: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
           $238 = ($$0245$lcssa|0)>(0);
           $$$0245320 = $238 ? $$0245$lcssa : 0;
           $239 = ($$0286|0)!=(0|0);
           $240 = $239 ? 1 : 2;
           $241 = (($$$0249) + 2)|0;
           $242 = (184135 + (($241*3)|0)|0);
           HEAP32[$vararg_buffer>>2] = $240;
           $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
           HEAP32[$vararg_ptr1>>2] = 184171;
           $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
           HEAP32[$vararg_ptr2>>2] = $$$0245320;
           $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
           HEAP32[$vararg_ptr3>>2] = $242;
           $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
           HEAP32[$vararg_ptr4>>2] = $$;
           (_snprintf($4,22,184153,$vararg_buffer)|0);
           HEAP32[$3>>2] = 0;
           $243 = $239 ? $$0286 : $3;
           HEAP32[$vararg_buffer5>>2] = $243;
           $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
           HEAP32[$vararg_ptr8>>2] = $3;
           $244 = (_fscanf($0,$4,$vararg_buffer5)|0);
           $245 = ($244|0)==(-1);
           if ($245) {
            $$9306 = $$1298;$262 = $261;
            label = 100;
            break L6;
           }
           $246 = HEAP32[$3>>2]|0;
           $247 = ($246|0)==(0);
           if ($247) {
            $$11 = $$1298;$$2254 = $$0252;$$2282 = $$0280461;$255 = $261;
            break L6;
           }
           $248 = (($246) + ($$3275331))|0;
           $$5266 = $$0261469;$$6278 = $248;$$7304 = $$1298;$$9 = $$5260;$267 = $261;
           break;
          }
          default: {
           $$9306 = $$1298;$262 = $261;
           label = 100;
           break L6;
          }
          }
          $249 = ($$0286|0)!=(0|0);
          $250 = $249&1;
          $$0280$ = (($$0280461) + ($250))|0;
          $$10 = $$9;$$1281 = $$0280$;$$6267 = $$5266;$$7279 = $$6278;$$8305 = $$7304;$259 = $267;
          break L8;
         }
        } while(0);
        $160 = ($$4276334|0)<(0);
        $161 = $160 << 31 >> 31;
        _store_int_708($$0286,$$$0249,$$4276334,$161);
        $$10 = $$5260;$$1281 = $$0280461;$$6267 = $$0261469;$$7279 = $$4276334;$$8305 = $$1298;$259 = $261;
        break L8;
       }
      } while(0);
      $64 = $61&1;
      $65 = (($$0255471) + ($64<<2)|0);
      $66 = HEAP32[$12>>2]|0;
      $67 = HEAP32[$13>>2]|0;
      $68 = ($66>>>0)<($67>>>0);
      if ($68) {
       $69 = HEAP8[$66>>0]|0;
       $70 = ($69<<24>>24)>(-1);
       if ($70) {
        $71 = ((($66)) + 1|0);
        HEAP32[$12>>2] = $71;
        $72 = HEAP8[$66>>0]|0;
        $73 = $72&255;
        $77 = $73;
       } else {
        label = 20;
       }
      } else {
       label = 20;
      }
      if ((label|0) == 20) {
       label = 0;
       $74 = (_getwc($0)|0);
       $77 = $74;
      }
      $75 = HEAP32[$65>>2]|0;
      $76 = ($77|0)==($75|0);
      if (!($76)) {
       label = 22;
       break L6;
      }
      $85 = (($$0272468) + 1)|0;
      $$10 = $65;$$1281 = $$0280461;$$6267 = $$0261469;$$7279 = $85;$$8305 = $$0297459;$259 = $258;
     } else {
      $$1256 = $$0255471;
      while(1) {
       $38 = ((($$1256)) + 4|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = (_iswspace($39)|0);
       $41 = ($40|0)==(0);
       if ($41) {
        $$1273 = $$0272468;
        break;
       } else {
        $$1256 = $38;
       }
      }
      while(1) {
       $42 = HEAP32[$12>>2]|0;
       $43 = HEAP32[$13>>2]|0;
       $44 = ($42>>>0)<($43>>>0);
       if ($44) {
        $45 = HEAP8[$42>>0]|0;
        $46 = ($45<<24>>24)>(-1);
        if ($46) {
         $47 = ((($42)) + 1|0);
         HEAP32[$12>>2] = $47;
         $48 = HEAP8[$42>>0]|0;
         $49 = $48&255;
         $51 = $49;
        } else {
         label = 10;
        }
       } else {
        label = 10;
       }
       if ((label|0) == 10) {
        label = 0;
        $50 = (_getwc($0)|0);
        $51 = $50;
       }
       $52 = (_iswspace($51)|0);
       $53 = ($52|0)==(0);
       $54 = (($$1273) + 1)|0;
       if ($53) {
        break;
       } else {
        $$1273 = $54;
       }
      }
      $55 = HEAP32[$13>>2]|0;
      $56 = ($55|0)!=(0|0);
      $57 = ($51>>>0)<(128);
      $or$cond = $57 & $56;
      if ($or$cond) {
       $58 = HEAP32[$12>>2]|0;
       $59 = ((($58)) + -1|0);
       HEAP32[$12>>2] = $59;
       $$10 = $$1256;$$1281 = $$0280461;$$6267 = $$0261469;$$7279 = $$1273;$$8305 = $$0297459;$259 = $258;
       break;
      } else {
       (_ungetwc($51,$0)|0);
       $$10 = $$1256;$$1281 = $$0280461;$$6267 = $$0261469;$$7279 = $$1273;$$8305 = $$0297459;$259 = $258;
       break;
      }
     }
    } while(0);
    $251 = ((($$10)) + 4|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = ($252|0)==(0);
    if ($253) {
     $$3283 = $$1281;
     break L4;
    } else {
     $$0255471 = $251;$$0261469 = $$6267;$$0272468 = $$7279;$$0280461 = $$1281;$$0297459 = $$8305;$258 = $259;$35 = $252;
    }
   }
   do {
    if ((label|0) == 22) {
     $78 = HEAP32[$13>>2]|0;
     $79 = ($78|0)!=(0|0);
     $80 = ($77>>>0)<(128);
     $or$cond3 = $80 & $79;
     if ($or$cond3) {
      $81 = HEAP32[$12>>2]|0;
      $82 = ((($81)) + -1|0);
      HEAP32[$12>>2] = $82;
      $$3283 = $$0280461;
      break L4;
     } else {
      (_ungetwc($77,$0)|0);
      $83 = ($77|0)>(-1);
      $84 = ($$0280461|0)!=(0);
      $or$cond11 = $84 | $83;
      if ($or$cond11) {
       $$3283 = $$0280461;
       break L4;
      } else {
       $$10307 = $$0297459;$$1253 = 0;$260 = $258;
       label = 101;
       break;
      }
     }
    }
    else if ((label|0) == 100) {
     $$old10 = ($$0280461|0)==(0);
     if ($$old10) {
      $$10307 = $$9306;$$1253 = $$0252;$260 = $262;
      label = 101;
     } else {
      $$11 = $$9306;$$2254 = $$0252;$$2282 = $$0280461;$255 = $262;
     }
    }
   } while(0);
   if ((label|0) == 101) {
    $$11 = $$10307;$$2254 = $$1253;$$2282 = -1;$255 = $260;
   }
   $254 = ($$2254|0)==(0);
   if ($254) {
    $$3283 = $$2282;
   } else {
    _free($$11);
    _free($255);
    $$3283 = $$2282;
   }
  }
 } while(0);
 $256 = ($257|0)==(0);
 if (!($256)) {
  ___unlockfile($0);
 }
 STACKTOP = sp;return ($$3283|0);
}
function _getwc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_fgetwc($0)|0);
 return ($1|0);
}
function _ungetwc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (___pthread_self_670()|0);
 $4 = ((($3)) + 188|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($1)|0);
  $30 = $9;
 } else {
  $30 = 0;
 }
 $10 = ((($1)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)<(1);
 if ($12) {
  (_fwide($1,1)|0);
 }
 $13 = ((($1)) + 120|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$4>>2] = $14;
 $15 = ((($1)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  (___toread($1)|0);
  $$pre = HEAP32[$15>>2]|0;
  $19 = $$pre;
 } else {
  $19 = $16;
 }
 $18 = ($19|0)==(0|0);
 $20 = ($0|0)==(-1);
 $or$cond = $20 | $18;
 if ($or$cond) {
  label = 10;
 } else {
  $21 = (_wcrtomb($2,$0,0)|0);
  $22 = ($21|0)<(0);
  if ($22) {
   label = 10;
  } else {
   $23 = HEAP32[$15>>2]|0;
   $24 = ((($1)) + 44|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($25)) + -8|0);
   $27 = (($26) + ($21)|0);
   $28 = ($23>>>0)<($27>>>0);
   if ($28) {
    label = 10;
   } else {
    $31 = ($0>>>0)<(128);
    if ($31) {
     $32 = $0&255;
     $33 = ((($23)) + -1|0);
     HEAP32[$15>>2] = $33;
     HEAP8[$33>>0] = $32;
    } else {
     $34 = (0 - ($21))|0;
     $35 = (($23) + ($34)|0);
     HEAP32[$15>>2] = $35;
     _memcpy(($35|0),($2|0),($21|0))|0;
    }
    $36 = HEAP32[$1>>2]|0;
    $37 = $36 & -17;
    HEAP32[$1>>2] = $37;
    $38 = ($30|0)==(0);
    if ($38) {
     $$0 = $0;
    } else {
     ___unlockfile($1);
     $$0 = $0;
    }
   }
  }
 }
 if ((label|0) == 10) {
  $29 = ($30|0)==(0);
  if ($29) {
   $$0 = -1;
  } else {
   ___unlockfile($1);
   $$0 = -1;
  }
 }
 HEAP32[$4>>2] = $5;
 STACKTOP = sp;return ($$0|0);
}
function _arg_n_707($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $vacopy_currentptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $vacopy_currentptr = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $vacopy_currentptr;
 $$0 = $1;
 while(1) {
  $3 = ($$0>>>0)>(1);
  $arglist_current = HEAP32[$2>>2]|0;
  $4 = $arglist_current;
  $5 = ((0) + 4|0);
  $expanded1 = $5;
  $expanded = (($expanded1) - 1)|0;
  $6 = (($4) + ($expanded))|0;
  $7 = ((0) + 4|0);
  $expanded5 = $7;
  $expanded4 = (($expanded5) - 1)|0;
  $expanded3 = $expanded4 ^ -1;
  $8 = $6 & $expanded3;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $arglist_next = ((($9)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $11 = (($$0) + -1)|0;
  if ($3) {
   $$0 = $11;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($10|0);
}
function _store_int_708($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 L1: do {
  if (!($4)) {
   switch ($1|0) {
   case -2:  {
    $5 = $2&255;
    HEAP8[$0>>0] = $5;
    break L1;
    break;
   }
   case -1:  {
    $6 = $2&65535;
    HEAP16[$0>>1] = $6;
    break L1;
    break;
   }
   case 0:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 1:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 3:  {
    $7 = $0;
    $8 = $7;
    HEAP32[$8>>2] = $2;
    $9 = (($7) + 4)|0;
    $10 = $9;
    HEAP32[$10>>2] = $3;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 return;
}
function _in_set($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$02426 = 0, $$025 = 0, $$1 = 0, $$1$sink = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 switch ($2|0) {
 case 45:  {
  $3 = ($1|0)==(45);
  if ($3) {
   $$025 = 1;
   label = 11;
  } else {
   $$1$sink = $0;
   label = 4;
  }
  break;
 }
 case 93:  {
  $4 = ($1|0)==(93);
  if ($4) {
   $$025 = 1;
   label = 11;
  } else {
   $$1$sink = $0;
   label = 4;
  }
  break;
 }
 default: {
  $$0 = $0;$6 = $2;
  label = 5;
 }
 }
 L4: while(1) {
  if ((label|0) == 4) {
   label = 0;
   $5 = ((($$1$sink)) + 4|0);
   $$pr = HEAP32[$5>>2]|0;
   $$0 = $5;$6 = $$pr;
   label = 5;
   continue;
  }
  else if ((label|0) == 5) {
   label = 0;
   L9: do {
    switch ($6|0) {
    case 93: case 0:  {
     $$025 = 0;
     label = 11;
     continue L4;
     break;
    }
    case 45:  {
     $7 = ((($$0)) + 4|0);
     $8 = HEAP32[$7>>2]|0;
     switch ($8|0) {
     case 93: case 0:  {
      $$1 = $$0;
      break L9;
      break;
     }
     default: {
     }
     }
     $9 = ((($$0)) + -4|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ($10|0)<($8|0);
     if ($11) {
      $$02426 = $10;
      while(1) {
       $14 = ($$02426|0)==($1|0);
       $13 = (($$02426) + 1)|0;
       if ($14) {
        $$025 = 1;
        label = 11;
        continue L4;
       }
       $12 = ($13|0)<($8|0);
       if ($12) {
        $$02426 = $13;
       } else {
        $$1 = $7;
        break;
       }
      }
     } else {
      $$1 = $7;
     }
     break;
    }
    default: {
     $$1 = $$0;
    }
    }
   } while(0);
   $15 = HEAP32[$$1>>2]|0;
   $16 = ($15|0)==($1|0);
   if ($16) {
    $$025 = 1;
    label = 11;
    continue;
   } else {
    $$1$sink = $$1;
    label = 4;
    continue;
   }
  }
  else if ((label|0) == 11) {
   label = 0;
   return ($$025|0);
  }
 }
 return (0)|0;
}
function ___pthread_self_670() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _getc_unlocked($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 if ($5) {
  $6 = ((($2)) + 1|0);
  HEAP32[$1>>2] = $6;
  $7 = HEAP8[$2>>0]|0;
  $8 = $7&255;
  $10 = $8;
 } else {
  $9 = (___uflow($0)|0);
  $10 = $9;
 }
 return ($10|0);
}
function _getchar() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1903]|0;
 $1 = (_fgetc($0)|0);
 return ($1|0);
}
function _getchar_unlocked() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1903]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 if ($5) {
  $6 = ((($2)) + 1|0);
  HEAP32[$1>>2] = $6;
  $7 = HEAP8[$2>>0]|0;
  $8 = $7&255;
  $10 = $8;
 } else {
  $9 = (___uflow($0)|0);
  $10 = $9;
 }
 return ($10|0);
}
function _gets($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[1903]|0;
 $2 = (_fgets($0,2147483647,$1)|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = (_strlen($0)|0);
  $5 = (($4) + -1)|0;
  $6 = (($0) + ($5)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(10);
  if ($8) {
   HEAP8[$6>>0] = 0;
  }
 }
 return ($2|0);
}
function _getw($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (_fread($1,4,1,$0)|0);
 $3 = ($2|0)!=(0);
 $4 = HEAP32[$1>>2]|0;
 $5 = $3 ? $4 : -1;
 STACKTOP = sp;return ($5|0);
}
function _getwchar() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1903]|0;
 $1 = (_fgetwc($0)|0);
 return ($1|0);
}
function _open_memstream($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $2 = (_malloc(1172)|0);
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $$0 = 0;
  } else {
   $4 = (_malloc(1)|0);
   $5 = ($4|0)==(0|0);
   if ($5) {
    _free($2);
    $$0 = 0;
    break;
   }
   $6 = ((($2)) + 4|0);
   dest=$6; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $7 = ((($2)) + 124|0);
   $8 = ((($2)) + 84|0);
   HEAP32[$8>>2] = $7;
   HEAP32[$7>>2] = $0;
   $9 = ((($2)) + 128|0);
   HEAP32[$9>>2] = $1;
   HEAP32[$1>>2] = 0;
   $10 = ((($2)) + 144|0);
   HEAP32[$10>>2] = 0;
   $11 = ((($2)) + 140|0);
   HEAP32[$11>>2] = 0;
   $12 = ((($2)) + 132|0);
   HEAP32[$12>>2] = 0;
   HEAP32[$0>>2] = $4;
   $13 = ((($2)) + 136|0);
   HEAP32[$13>>2] = $4;
   HEAP8[$4>>0] = 0;
   HEAP32[$2>>2] = 4;
   $14 = ((($2)) + 60|0);
   HEAP32[$14>>2] = -1;
   $15 = ((($2)) + 148|0);
   $16 = ((($2)) + 44|0);
   HEAP32[$16>>2] = $15;
   $17 = ((($2)) + 48|0);
   HEAP32[$17>>2] = 1024;
   $18 = ((($2)) + 75|0);
   HEAP8[$18>>0] = -1;
   $19 = ((($2)) + 36|0);
   HEAP32[$19>>2] = 29;
   $20 = ((($2)) + 40|0);
   HEAP32[$20>>2] = 30;
   $21 = ((($2)) + 12|0);
   HEAP32[$21>>2] = 31;
   $22 = HEAP32[(185616)>>2]|0;
   $23 = ($22|0)==(0);
   if ($23) {
    $24 = ((($2)) + 76|0);
    HEAP32[$24>>2] = -1;
   }
   $25 = (___ofl_add($2)|0);
   $$0 = $2;
  }
 } while(0);
 return ($$0|0);
}
function _ms_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre46 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8;
 $10 = (($6) - ($9))|0;
 $11 = ($10|0)==(0);
 if ($11) {
  label = 3;
 } else {
  HEAP32[$5>>2] = $8;
  $12 = (_ms_write($0,$8,$10)|0);
  $13 = ($12>>>0)<($10>>>0);
  if ($13) {
   $$0 = 0;
  } else {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $14 = ((($4)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($15) + ($2))|0;
   $17 = ((($4)) + 20|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $$pre46 = ((($4)) + 12|0);
    $$pre$phiZ2D = $$pre46;$35 = $15;
   } else {
    $20 = $18 << 1;
    $21 = (($16) + 1)|0;
    $22 = $21 | $20;
    $23 = $22 | 1;
    $24 = ((($4)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (_realloc($25,$23)|0);
    $27 = ($26|0)==(0|0);
    if ($27) {
     $$0 = 0;
     break;
    }
    HEAP32[$24>>2] = $26;
    $28 = HEAP32[$4>>2]|0;
    HEAP32[$28>>2] = $26;
    $29 = HEAP32[$24>>2]|0;
    $30 = HEAP32[$17>>2]|0;
    $31 = (($29) + ($30)|0);
    $32 = (($23) - ($30))|0;
    _memset(($31|0),0,($32|0))|0;
    HEAP32[$17>>2] = $23;
    $$pre = HEAP32[$14>>2]|0;
    $$pre$phiZ2D = $24;$35 = $$pre;
   }
   $33 = HEAP32[$$pre$phiZ2D>>2]|0;
   $34 = (($33) + ($35)|0);
   _memcpy(($34|0),($1|0),($2|0))|0;
   $36 = HEAP32[$14>>2]|0;
   $37 = (($36) + ($2))|0;
   HEAP32[$14>>2] = $37;
   $38 = ((($4)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($37>>>0)<($39>>>0);
   if (!($40)) {
    HEAP32[$38>>2] = $37;
   }
   $41 = ((($4)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   HEAP32[$42>>2] = $37;
   $$0 = $2;
  }
 } while(0);
 return ($$0|0);
}
function _ms_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 84|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($2>>>0)>(2);
 if ($6) {
  label = 2;
 } else {
  HEAP32[$3>>2] = 0;
  $8 = ((($3)) + 4|0);
  $9 = ((($5)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  HEAP32[$8>>2] = $10;
  $11 = ((($3)) + 8|0);
  $12 = ((($5)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$11>>2] = $13;
  $14 = (($3) + ($2<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (0 - ($15))|0;
  $17 = ($16|0)>($1|0);
  $18 = (2147483647 - ($15))|0;
  $19 = ($18|0)<($1|0);
  $or$cond = $17 | $19;
  if ($or$cond) {
   label = 2;
  } else {
   $20 = (($15) + ($1))|0;
   HEAP32[$9>>2] = $20;
   $$0 = $20;
  }
 }
 if ((label|0) == 2) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 22;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _ms_close($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _open_wmemstream($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_malloc(156)|0);
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $$0 = 0;
  } else {
   $4 = (_malloc(4)|0);
   $5 = ($4|0)==(0|0);
   if ($5) {
    _free($2);
    $$0 = 0;
    break;
   }
   $6 = ((($2)) + 4|0);
   _memset(($6|0),0,152)|0;
   $7 = ((($2)) + 124|0);
   $8 = ((($2)) + 84|0);
   HEAP32[$8>>2] = $7;
   HEAP32[$7>>2] = $0;
   $9 = ((($2)) + 128|0);
   HEAP32[$9>>2] = $1;
   HEAP32[$1>>2] = 0;
   $10 = ((($2)) + 144|0);
   HEAP32[$10>>2] = 0;
   $11 = ((($2)) + 140|0);
   HEAP32[$11>>2] = 0;
   $12 = ((($2)) + 132|0);
   HEAP32[$12>>2] = 0;
   HEAP32[$0>>2] = $4;
   $13 = ((($2)) + 136|0);
   HEAP32[$13>>2] = $4;
   HEAP32[$4>>2] = 0;
   HEAP32[$2>>2] = 4;
   $14 = ((($2)) + 60|0);
   HEAP32[$14>>2] = -1;
   $15 = ((($2)) + 156|0);
   $16 = ((($2)) + 44|0);
   HEAP32[$16>>2] = $15;
   $17 = ((($2)) + 48|0);
   HEAP32[$17>>2] = 0;
   $18 = ((($2)) + 75|0);
   HEAP8[$18>>0] = -1;
   $19 = ((($2)) + 36|0);
   HEAP32[$19>>2] = 32;
   $20 = ((($2)) + 40|0);
   HEAP32[$20>>2] = 33;
   $21 = ((($2)) + 12|0);
   HEAP32[$21>>2] = 34;
   $22 = HEAP32[(185616)>>2]|0;
   $23 = ($22|0)==(0);
   if ($23) {
    $24 = ((($2)) + 76|0);
    HEAP32[$24>>2] = -1;
   }
   $25 = (___ofl_add($2)|0);
   $$0 = $2;
  }
 } while(0);
 return ($$0|0);
}
function _wms_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre41 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $1;
 $4 = ((($0)) + 84|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($2))|0;
 $9 = ((($5)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)<($10>>>0);
 if ($11) {
  $$pre41 = ((($5)) + 12|0);
  $$pre$phiZ2D = $$pre41;$30 = $7;$32 = $10;
  label = 6;
 } else {
  $12 = $10 << 1;
  $13 = (($8) + 1)|0;
  $14 = $13 | $12;
  $15 = $14 | 1;
  $16 = ($15>>>0)>(536870911);
  if ($16) {
   $$0 = 0;
  } else {
   $17 = ((($5)) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $15 << 2;
   $20 = (_realloc($18,$19)|0);
   $21 = ($20|0)==(0|0);
   if ($21) {
    $$0 = 0;
   } else {
    HEAP32[$17>>2] = $20;
    $22 = HEAP32[$5>>2]|0;
    HEAP32[$22>>2] = $20;
    $23 = HEAP32[$17>>2]|0;
    $24 = HEAP32[$9>>2]|0;
    $25 = (($23) + ($24<<2)|0);
    $26 = (($15) - ($24))|0;
    $27 = $26 << 2;
    _memset(($25|0),0,($27|0))|0;
    HEAP32[$9>>2] = $15;
    $$pre = HEAP32[$6>>2]|0;
    $$pre$phiZ2D = $17;$30 = $$pre;$32 = $15;
    label = 6;
   }
  }
 }
 if ((label|0) == 6) {
  $28 = HEAP32[$$pre$phiZ2D>>2]|0;
  $29 = (($28) + ($30<<2)|0);
  $31 = (($32) - ($30))|0;
  $33 = ((($5)) + 24|0);
  $34 = (_mbsnrtowcs($29,$3,$2,$31,$33)|0);
  $35 = ($34|0)==(-1);
  if ($35) {
   $$0 = 0;
  } else {
   $36 = HEAP32[$6>>2]|0;
   $37 = (($36) + ($34))|0;
   HEAP32[$6>>2] = $37;
   $38 = ((($5)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($37>>>0)<($39>>>0);
   if (!($40)) {
    HEAP32[$38>>2] = $37;
   }
   $41 = ((($5)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   HEAP32[$42>>2] = $37;
   $$0 = $2;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _wms_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 84|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($2>>>0)>(2);
 if ($6) {
  label = 2;
 } else {
  HEAP32[$3>>2] = 0;
  $8 = ((($3)) + 4|0);
  $9 = ((($5)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  HEAP32[$8>>2] = $10;
  $11 = ((($3)) + 8|0);
  $12 = ((($5)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$11>>2] = $13;
  $14 = (($3) + ($2<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (0 - ($15))|0;
  $17 = ($16|0)>($1|0);
  $18 = (536870911 - ($15))|0;
  $19 = ($18|0)<($1|0);
  $or$cond = $17 | $19;
  if ($or$cond) {
   label = 2;
  } else {
   $20 = ((($5)) + 24|0);
   $21 = $20;
   $22 = $21;
   HEAP32[$22>>2] = 0;
   $23 = (($21) + 4)|0;
   $24 = $23;
   HEAP32[$24>>2] = 0;
   $25 = (($15) + ($1))|0;
   HEAP32[$9>>2] = $25;
   $$0 = $25;
  }
 }
 if ((label|0) == 2) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 22;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wms_close($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _pclose($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $1 = sp + 16|0;
 $2 = ((($0)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 (_fclose($0)|0);
 $4 = $1;
 while(1) {
  HEAP32[$vararg_buffer>>2] = $3;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $4;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 0;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = 0;
  $5 = (___syscall114(114,($vararg_buffer|0))|0);
  $6 = ($5|0)==(-4);
  if (!($6)) {
   break;
  }
 }
 $7 = ($5|0)<(0);
 if ($7) {
  $8 = (___syscall_ret($5)|0);
  $$0 = $8;
 } else {
  $9 = HEAP32[$1>>2]|0;
  $$0 = $9;
 }
 STACKTOP = sp;return ($$0|0);
}
function _perror($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[1870]|0;
 $2 = (___errno_location()|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_strerror($3)|0);
 $5 = ((($1)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(-1);
 if ($7) {
  $8 = (___lockfile($1)|0);
  $15 = $8;
 } else {
  $15 = 0;
 }
 $9 = ($0|0)==(0|0);
 if (!($9)) {
  $10 = HEAP8[$0>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if (!($11)) {
   $12 = (_strlen($0)|0);
   (_fwrite($0,$12,1,$1)|0);
   (_fputc(58,$1)|0);
   (_fputc(32,$1)|0);
  }
 }
 $13 = (_strlen($4)|0);
 (_fwrite($4,$13,1,$1)|0);
 (_fputc(10,$1)|0);
 $14 = ($15|0)==(0);
 if (!($14)) {
  ___unlockfile($1);
 }
 return;
}
function _popen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$037 = 0, $$1 = 0, $$140 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 152|0;
 $3 = sp + 148|0;
 $4 = sp + 72|0;
 $5 = sp + 56|0;
 $6 = HEAP8[$1>>0]|0;
 switch ($6<<24>>24) {
 case 114:  {
  $$037 = 0;
  label = 4;
  break;
 }
 case 119:  {
  $$037 = 1;
  label = 4;
  break;
 }
 default: {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 22;
  $$1 = 0;
 }
 }
 do {
  if ((label|0) == 4) {
   $8 = (_pipe2($2,524288)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = (($2) + ($$037<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (FUNCTION_TABLE_iii[13 & 31]($11,$1)|0);
    $13 = ($12|0)==(0|0);
    if ($13) {
     $14 = HEAP32[$2>>2]|0;
     HEAP32[$vararg_buffer>>2] = $14;
     (___syscall6(6,($vararg_buffer|0))|0);
     $15 = ((($2)) + 4|0);
     $16 = HEAP32[$15>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $16;
     (___syscall6(6,($vararg_buffer1|0))|0);
     $$1 = 0;
     break;
    }
    $17 = ((($12)) + 76|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)>(-1);
    if ($19) {
     $20 = (___lockfile($12)|0);
     $48 = $20;
    } else {
     $48 = 0;
    }
    $21 = $$037 ^ 1;
    $22 = (($2) + ($21<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==($21|0);
    do {
     if ($24) {
      HEAP32[$vararg_buffer4>>2] = 0;
      $25 = (_fcntl($21,1030,$vararg_buffer4)|0);
      $26 = ($25|0)<(0);
      if ($26) {
       $28 = (___errno_location()|0);
       $29 = HEAP32[$28>>2]|0;
       $$2 = $29;
       break;
      } else {
       $27 = HEAP32[$22>>2]|0;
       HEAP32[$vararg_buffer7>>2] = $27;
       (___syscall6(6,($vararg_buffer7|0))|0);
       HEAP32[$22>>2] = $25;
       label = 13;
       break;
      }
     } else {
      label = 13;
     }
    } while(0);
    if ((label|0) == 13) {
     $30 = (_posix_spawn_file_actions_init(($4|0))|0);
     $31 = ($30|0)==(0);
     if ($31) {
      $32 = HEAP32[$22>>2]|0;
      $33 = (_posix_spawn_file_actions_adddup2(($4|0),($32|0),($21|0))|0);
      $34 = ($33|0)==(0);
      if ($34) {
       HEAP32[$5>>2] = 184174;
       $35 = ((($5)) + 4|0);
       HEAP32[$35>>2] = 184177;
       $36 = ((($5)) + 8|0);
       HEAP32[$36>>2] = $0;
       $37 = ((($5)) + 12|0);
       HEAP32[$37>>2] = 0;
       $38 = HEAP32[___environ>>2]|0;
       $39 = (_posix_spawn(($3|0),(184180|0),($4|0),(0|0),($5|0),($38|0))|0);
       $40 = ($39|0)==(0);
       if ($40) {
        (_posix_spawn_file_actions_destroy(($4|0))|0);
        $41 = HEAP32[$3>>2]|0;
        $42 = ((($12)) + 64|0);
        HEAP32[$42>>2] = $41;
        $43 = (_strchr($1,101)|0);
        $44 = ($43|0)==(0|0);
        if ($44) {
         $45 = HEAP32[$10>>2]|0;
         HEAP32[$vararg_buffer10>>2] = 0;
         (_fcntl($45,2,$vararg_buffer10)|0);
        }
        $46 = HEAP32[$22>>2]|0;
        HEAP32[$vararg_buffer13>>2] = $46;
        (___syscall6(6,($vararg_buffer13|0))|0);
        $47 = ($48|0)==(0);
        if ($47) {
         $$1 = $12;
         break;
        }
        ___unlockfile($12);
        $$1 = $12;
        break;
       } else {
        $$140 = $39;
       }
      } else {
       $$140 = 12;
      }
      (_posix_spawn_file_actions_destroy(($4|0))|0);
      $$2 = $$140;
     } else {
      $$2 = 12;
     }
    }
    (_fclose($12)|0);
    $49 = HEAP32[$22>>2]|0;
    HEAP32[$vararg_buffer16>>2] = $49;
    (___syscall6(6,($vararg_buffer16|0))|0);
    $50 = (___errno_location()|0);
    HEAP32[$50>>2] = $$2;
    $$1 = 0;
   } else {
    $$1 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[1936]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 STACKTOP = sp;return ($3|0);
}
function _putc_unlocked($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0&255;
 $3 = $0 & 255;
 $4 = ((($1)) + 75|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($3|0)==($6|0);
 if ($7) {
  label = 4;
 } else {
  $8 = ((($1)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($1)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9>>>0)<($11>>>0);
  if ($12) {
   $13 = ((($9)) + 1|0);
   HEAP32[$8>>2] = $13;
   HEAP8[$9>>0] = $2;
   $15 = $3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $14 = (___overflow($1,$0)|0);
  $15 = $14;
 }
 return ($15|0);
}
function _putchar($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[1936]|0;
 $2 = (_fputc($0,$1)|0);
 return ($2|0);
}
function _putchar_unlocked($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&255;
 $2 = $0 & 255;
 $3 = HEAP32[1936]|0;
 $4 = ((($3)) + 75|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($2|0)==($6|0);
 if ($7) {
  label = 4;
 } else {
  $8 = ((($3)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($3)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9>>>0)<($11>>>0);
  if ($12) {
   $13 = ((($9)) + 1|0);
   HEAP32[$8>>2] = $13;
   HEAP8[$9>>0] = $1;
   $15 = $2;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $14 = (___overflow($3,$0)|0);
  $15 = $14;
 }
 return ($15|0);
}
function _puts($0) {
 $0 = $0|0;
 var $$lobit = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[1936]|0;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(-1);
 if ($4) {
  $5 = (___lockfile($1)|0);
  $19 = $5;
 } else {
  $19 = 0;
 }
 $6 = (_fputs($0,$1)|0);
 $7 = ($6|0)<(0);
 do {
  if ($7) {
   $20 = -1;
  } else {
   $8 = ((($1)) + 75|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(10);
   if (!($10)) {
    $11 = ((($1)) + 20|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($1)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($12>>>0)<($14>>>0);
    if ($15) {
     $16 = ((($12)) + 1|0);
     HEAP32[$11>>2] = $16;
     HEAP8[$12>>0] = 10;
     $20 = 0;
     break;
    }
   }
   $17 = (___overflow($1,10)|0);
   $$lobit = $17 >> 31;
   $20 = $$lobit;
  }
 } while(0);
 $18 = ($19|0)==(0);
 if (!($18)) {
  ___unlockfile($1);
 }
 return ($20|0);
}
function _putw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = (_fwrite($2,4,1,$1)|0);
 $4 = (($3) + -1)|0;
 STACKTOP = sp;return ($4|0);
}
function _putwc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_fputwc($0,$1)|0);
 return ($2|0);
}
function _putwchar($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[1936]|0;
 $2 = (_fputwc($0,$1)|0);
 return ($2|0);
}
function _remove($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall10(10,($vararg_buffer|0))|0);
 $3 = ($2|0)==(-21);
 if ($3) {
  HEAP32[$vararg_buffer1>>2] = $1;
  $4 = (___syscall40(40,($vararg_buffer1|0))|0);
  $$0 = $4;
 } else {
  $$0 = $2;
 }
 $5 = (___syscall_ret($$0)|0);
 STACKTOP = sp;return ($5|0);
}
function _rename($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall38(38,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _rewind($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $phitmp = ($4|0)==(0);
  (___fseeko_unlocked($0,0,0)|0);
  $5 = HEAP32[$0>>2]|0;
  $6 = $5 & -33;
  HEAP32[$0>>2] = $6;
  if (!($phitmp)) {
   ___unlockfile($0);
  }
 } else {
  (___fseeko_unlocked($0,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 & -33;
  HEAP32[$0>>2] = $8;
 }
 return;
}
function _scanf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = (_vscanf($0,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _vscanf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[1903]|0;
 $3 = (_vfscanf($2,$0,$1)|0);
 return ($3|0);
}
function _setbuf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)!=(0|0);
 $3 = $2 ? 0 : 2;
 (_setvbuf($0,$1,$3,1024)|0);
 return;
}
function _setvbuf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 75|0);
 HEAP8[$4>>0] = -1;
 switch ($2|0) {
 case 2:  {
  $5 = ((($0)) + 48|0);
  HEAP32[$5>>2] = 0;
  break;
 }
 case 1:  {
  HEAP8[$4>>0] = 10;
  break;
 }
 default: {
 }
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = $6 | 64;
 HEAP32[$0>>2] = $7;
 return 0;
}
function _setbuffer($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)!=(0|0);
 $4 = $3 ? 0 : 2;
 (_setvbuf($0,$1,$4,$2)|0);
 return;
}
function _setlinebuf($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_setvbuf($0,0,1,0)|0);
 return;
}
function _swprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vswprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _vswprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $4 = sp + 8|0;
 $5 = sp + 136|0;
 $6 = sp;
 HEAP32[$6>>2] = $0;
 $7 = ((($6)) + 4|0);
 $8 = (($1) + -1)|0;
 HEAP32[$7>>2] = $8;
 dest=$4; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $9 = ((($4)) + 75|0);
 HEAP8[$9>>0] = -1;
 $10 = ((($4)) + 36|0);
 HEAP32[$10>>2] = 35;
 $11 = ((($4)) + 48|0);
 HEAP32[$11>>2] = 256;
 $12 = ((($4)) + 44|0);
 HEAP32[$12>>2] = $5;
 $13 = ((($4)) + 76|0);
 HEAP32[$13>>2] = -1;
 $14 = ((($4)) + 84|0);
 HEAP32[$14>>2] = $6;
 $15 = ($1|0)==(0);
 do {
  if ($15) {
   $$0 = -1;
  } else {
   $16 = ($1|0)<(0);
   if ($16) {
    $17 = (___errno_location()|0);
    HEAP32[$17>>2] = 75;
    $$0 = -1;
    break;
   } else {
    $18 = (_vfwprintf($4,$2,$3)|0);
    (_sw_write($4,0,0)|0);
    $19 = ($18>>>0)>=($1>>>0);
    $20 = $19 ? -1 : $18;
    $$0 = $20;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sw_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$03034 = 0, $$03133 = 0, $$1 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==($1|0);
 if ($7) {
  label = 3;
 } else {
  $8 = ((($0)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $6;
  $11 = (($9) - ($10))|0;
  $12 = (_sw_write($0,$6,$11)|0);
  $13 = ($12|0)==(-1);
  if ($13) {
   $$0 = -1;
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $14 = ((($4)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0);
  $17 = ($2|0)!=(0);
  $or$cond32 = $17 & $16;
  L5: do {
   if ($or$cond32) {
    $$pre = HEAP32[$4>>2]|0;
    $$03034 = $1;$$03133 = $2;$18 = $$pre;
    while(1) {
     $19 = (_mbtowc($18,$$03034,$$03133)|0);
     $20 = ($19|0)>(-1);
     if (!($20)) {
      $$1 = $19;
      break L5;
     }
     $21 = (($$03034) + ($19)|0);
     $22 = (($$03133) - ($19))|0;
     $23 = HEAP32[$14>>2]|0;
     $24 = (($23) + -1)|0;
     HEAP32[$14>>2] = $24;
     $25 = HEAP32[$4>>2]|0;
     $26 = ((($25)) + 4|0);
     HEAP32[$4>>2] = $26;
     $27 = ($24|0)!=(0);
     $28 = ($22|0)!=(0);
     $or$cond = $28 & $27;
     if ($or$cond) {
      $$03034 = $21;$$03133 = $22;$18 = $26;
     } else {
      $$1 = $19;
      break;
     }
    }
   } else {
    $$1 = 0;
   }
  } while(0);
  $29 = HEAP32[$4>>2]|0;
  HEAP32[$29>>2] = 0;
  $30 = ($$1|0)<(0);
  $31 = $30 ? $$1 : $2;
  $$0 = $31;
 }
 return ($$0|0);
}
function _swscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vswscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vswscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $3 = sp + 128|0;
 $4 = sp;
 dest=$4; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $5 = ((($4)) + 32|0);
 HEAP32[$5>>2] = 36;
 $6 = ((($4)) + 44|0);
 HEAP32[$6>>2] = $3;
 $7 = ((($4)) + 48|0);
 HEAP32[$7>>2] = 256;
 $8 = ((($4)) + 76|0);
 HEAP32[$8>>2] = -1;
 $9 = ((($4)) + 84|0);
 HEAP32[$9>>2] = $0;
 $10 = (_vfwscanf($4,$1,$2)|0);
 STACKTOP = sp;return ($10|0);
}
function _wstring_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 84|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $$0 = 0;
  } else {
   $7 = ((($0)) + 44|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($0)) + 48|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (_wcsrtombs($8,$3,$10,0)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $13 = ((($0)) + 8|0);
    HEAP32[$13>>2] = 0;
    $14 = ((($0)) + 4|0);
    HEAP32[$14>>2] = 0;
    $$0 = 0;
    break;
   }
   $15 = HEAP32[$7>>2]|0;
   $16 = ((($0)) + 4|0);
   HEAP32[$16>>2] = $15;
   $$cast = $15;
   $17 = (($$cast) + ($11)|0);
   $18 = ((($0)) + 8|0);
   HEAP32[$18>>2] = $17;
   $19 = HEAP32[$3>>2]|0;
   HEAP32[$4>>2] = $19;
   $20 = ($2|0)!=(0);
   $21 = ($11|0)!=(0);
   $or$cond = $20 & $21;
   if ($or$cond) {
    $22 = ((($$cast)) + 1|0);
    HEAP32[$16>>2] = $22;
    $23 = HEAP8[$$cast>>0]|0;
    HEAP8[$1>>0] = $23;
    $$0 = 1;
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _tempnam($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$02932 = 0, $$031 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4192|0);
 $vararg_buffer = sp;
 $2 = sp + 88|0;
 $3 = sp + 8|0;
 $4 = ($0|0)==(0|0);
 $$ = $4 ? 184188 : $0;
 $5 = ($1|0)==(0|0);
 $$031 = $5 ? 184193 : $1;
 $6 = (_strlen($$)|0);
 $7 = (_strlen($$031)|0);
 $8 = (($6) + 1)|0;
 $9 = (($8) + ($7))|0;
 $10 = (($9) + 7)|0;
 $11 = ($10>>>0)>(4095);
 L1: do {
  if ($11) {
   $12 = (___errno_location()|0);
   HEAP32[$12>>2] = 36;
   $$0 = 0;
  } else {
   _memcpy(($2|0),($$|0),($6|0))|0;
   $13 = (($2) + ($6)|0);
   HEAP8[$13>>0] = 47;
   $14 = ((($13)) + 1|0);
   _memcpy(($14|0),($$031|0),($7|0))|0;
   $15 = (($2) + ($9)|0);
   HEAP8[$15>>0] = 95;
   $16 = (($2) + ($10)|0);
   HEAP8[$16>>0] = 0;
   $17 = ((($16)) + -6|0);
   $18 = $2;
   $19 = $3;
   $$02932 = 0;
   while(1) {
    (___randname($17)|0);
    dest=$3; stop=dest+76|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$vararg_buffer>>2] = $18;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $19;
    $22 = (___syscall196(196,($vararg_buffer|0))|0);
    $23 = ($22|0)==(-2);
    if ($23) {
     break;
    }
    $20 = (($$02932) + 1)|0;
    $21 = ($$02932|0)<(99);
    if ($21) {
     $$02932 = $20;
    } else {
     $$0 = 0;
     break L1;
    }
   }
   $24 = (FUNCTION_TABLE_ii[10 & 63]($2)|0);
   $$0 = $24;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___randname($0) {
 $0 = $0|0;
 var $$01112 = 0, $$013 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 (___clock_gettime(0,($1|0))|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3*65537)|0;
 $5 = $1;
 $6 = $5 >>> 4;
 $7 = $0;
 $8 = (($6) + ($7))|0;
 $9 = $4 ^ $8;
 $$01112 = 0;$$013 = $9;
 while(1) {
  $10 = $$013 & 15;
  $11 = (($10) + 65)|0;
  $12 = $$013 << 1;
  $13 = $12 & 32;
  $14 = $11 | $13;
  $15 = $14&255;
  $16 = (($0) + ($$01112)|0);
  HEAP8[$16>>0] = $15;
  $17 = (($$01112) + 1)|0;
  $18 = $$013 >>> 5;
  $exitcond = ($17|0)==(6);
  if ($exitcond) {
   break;
  } else {
   $$01112 = $17;$$013 = $18;
  }
 }
 STACKTOP = sp;return ($0|0);
}
function _tmpfile() {
 var $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 28|0;
 dest=$0; src=184198; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $1 = ((($0)) + 13|0);
 $2 = $0;
 $$014 = 0;
 while(1) {
  (___randname($1)|0);
  HEAP32[$vararg_buffer>>2] = $2;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 32962;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 384;
  $5 = (___syscall5(5,($vararg_buffer|0))|0);
  $6 = (___syscall_ret($5)|0);
  $7 = ($6|0)>(-1);
  if ($7) {
   label = 4;
   break;
  }
  $3 = (($$014) + 1)|0;
  $4 = ($$014|0)<(99);
  if ($4) {
   $$014 = $3;
  } else {
   $$012 = 0;
   break;
  }
 }
 if ((label|0) == 4) {
  HEAP32[$vararg_buffer3>>2] = $2;
  (___syscall10(10,($vararg_buffer3|0))|0);
  $8 = (___fdopen($6,184218)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   HEAP32[$vararg_buffer6>>2] = $6;
   (___syscall6(6,($vararg_buffer6|0))|0);
   $$012 = 0;
  } else {
   $$012 = $8;
  }
 }
 STACKTOP = sp;return ($$012|0);
}
function _tmpnam($0) {
 $0 = $0|0;
 var $$0 = 0, $$089 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer = sp;
 $1 = sp + 84|0;
 $2 = sp + 8|0;
 dest=$1; src=184221; stop=dest+19|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $3 = ((($1)) + 12|0);
 $4 = $1;
 $5 = $2;
 $$089 = 0;
 while(1) {
  (___randname($3)|0);
  dest=$2; stop=dest+76|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $8 = (___syscall196(196,($vararg_buffer|0))|0);
  $9 = ($8|0)==(-2);
  if ($9) {
   label = 4;
   break;
  }
  $6 = (($$089) + 1)|0;
  $7 = ($$089|0)<(99);
  if ($7) {
   $$089 = $6;
  } else {
   $$0 = 0;
   break;
  }
 }
 if ((label|0) == 4) {
  $10 = ($0|0)!=(0|0);
  $11 = $10 ? $0 : 189598;
  $12 = (_strcpy($11,$1)|0);
  $$0 = $11;
 }
 STACKTOP = sp;return ($$0|0);
}
function _vprintf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[1936]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 return ($3|0);
}
function _vwprintf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[1936]|0;
 $3 = (_vfwprintf($2,$0,$1)|0);
 return ($3|0);
}
function _vwscanf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[1903]|0;
 $3 = (_vfwscanf($2,$0,$1)|0);
 return ($3|0);
}
function _wprintf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = (_vwprintf($0,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _wscanf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = (_vwscanf($0,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _atof($0) {
 $0 = $0|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_strtod($0,0));
 return (+$1);
}
function _strtod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox($0,$1,1));
 return (+$2);
}
function _strtox($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = (-1);
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($3)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($3,0);
 $8 = (+___floatscan($3,$2,1));
 $9 = ((($3)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($10))|0;
 $15 = ($1|0)==(0|0);
 if (!($15)) {
  $16 = ($14|0)!=(0);
  $17 = (($0) + ($14)|0);
  $18 = $16 ? $17 : $0;
  HEAP32[$1>>2] = $18;
 }
 STACKTOP = sp;return (+$8);
}
function _atoi($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01016 = 0, $$011 = 0, $$1$ph = 0, $$112$ph = 0, $$11215 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit14 = 0, $isdigittmp = 0, $isdigittmp13 = 0, $isdigittmp17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 switch ($2|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = 0;$$112$ph = $$011;$7 = $1;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$1$ph = $$0;$$112$ph = $5;$7 = $$pre;
 }
 $6 = $7 << 24 >> 24;
 $isdigittmp13 = (($6) + -48)|0;
 $isdigit14 = ($isdigittmp13>>>0)<(10);
 if ($isdigit14) {
  $$01016 = 0;$$11215 = $$112$ph;$isdigittmp17 = $isdigittmp13;
  while(1) {
   $8 = ($$01016*10)|0;
   $9 = ((($$11215)) + 1|0);
   $10 = (($8) - ($isdigittmp17))|0;
   $11 = HEAP8[$9>>0]|0;
   $12 = $11 << 24 >> 24;
   $isdigittmp = (($12) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$01016 = $10;$$11215 = $9;$isdigittmp17 = $isdigittmp;
   } else {
    $$010$lcssa = $10;
    break;
   }
  }
 } else {
  $$010$lcssa = 0;
 }
 $13 = ($$1$ph|0)!=(0);
 $14 = (0 - ($$010$lcssa))|0;
 $15 = $13 ? $$010$lcssa : $14;
 return ($15|0);
}
function _atol($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01016 = 0, $$011 = 0, $$1$ph = 0, $$112$ph = 0, $$11215 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit14 = 0, $isdigittmp = 0, $isdigittmp13 = 0, $isdigittmp17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 switch ($2|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = 0;$$112$ph = $$011;$7 = $1;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$1$ph = $$0;$$112$ph = $5;$7 = $$pre;
 }
 $6 = $7 << 24 >> 24;
 $isdigittmp13 = (($6) + -48)|0;
 $isdigit14 = ($isdigittmp13>>>0)<(10);
 if ($isdigit14) {
  $$01016 = 0;$$11215 = $$112$ph;$isdigittmp17 = $isdigittmp13;
  while(1) {
   $8 = ($$01016*10)|0;
   $9 = ((($$11215)) + 1|0);
   $10 = (($8) - ($isdigittmp17))|0;
   $11 = HEAP8[$9>>0]|0;
   $12 = $11 << 24 >> 24;
   $isdigittmp = (($12) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$01016 = $10;$$11215 = $9;$isdigittmp17 = $isdigittmp;
   } else {
    $$010$lcssa = $10;
    break;
   }
  }
 } else {
  $$010$lcssa = 0;
 }
 $13 = ($$1$ph|0)!=(0);
 $14 = (0 - ($$010$lcssa))|0;
 $15 = $13 ? $$010$lcssa : $14;
 return ($15|0);
}
function _atoll($0) {
 $0 = $0|0;
 var $$0 = 0, $$011 = 0, $$1$ph = 0, $$112$ph = 0, $$11215 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit14 = 0, $isdigittmp = 0, $isdigittmp13 = 0, $isdigittmp17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 switch ($2|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = 0;$$112$ph = $$011;$7 = $1;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$1$ph = $$0;$$112$ph = $5;$7 = $$pre;
 }
 $6 = $7 << 24 >> 24;
 $isdigittmp13 = (($6) + -48)|0;
 $isdigit14 = ($isdigittmp13>>>0)<(10);
 if ($isdigit14) {
  $$11215 = $$112$ph;$8 = 0;$9 = 0;$isdigittmp17 = $isdigittmp13;
  while(1) {
   $10 = (___muldi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = ((($$11215)) + 1|0);
   $13 = ($isdigittmp17|0)<(0);
   $14 = $13 << 31 >> 31;
   $15 = (_i64Subtract(($10|0),($11|0),($isdigittmp17|0),($14|0))|0);
   $16 = tempRet0;
   $17 = HEAP8[$12>>0]|0;
   $18 = $17 << 24 >> 24;
   $isdigittmp = (($18) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$11215 = $12;$8 = $15;$9 = $16;$isdigittmp17 = $isdigittmp;
   } else {
    $20 = $15;$21 = $16;
    break;
   }
  }
 } else {
  $20 = 0;$21 = 0;
 }
 $19 = ($$1$ph|0)!=(0);
 $22 = (_i64Subtract(0,0,($20|0),($21|0))|0);
 $23 = tempRet0;
 $24 = $19 ? $20 : $22;
 $25 = $19 ? $21 : $23;
 tempRet0 = ($25);
 return ($24|0);
}
function _bsearch($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$018$ = 0, $$01821 = 0, $$01920 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($2|0)==(0);
 L1: do {
  if ($5) {
   $$0 = 0;
  } else {
   $$01821 = $1;$$01920 = $2;
   while(1) {
    $6 = $$01920 >>> 1;
    $7 = Math_imul($6, $3)|0;
    $8 = (($$01821) + ($7)|0);
    $9 = (FUNCTION_TABLE_iii[$4 & 31]($0,$8)|0);
    $10 = ($9|0)==(0);
    if ($10) {
     $$0 = $8;
     break L1;
    }
    $11 = ($$01920|0)==(1);
    if ($11) {
     $$0 = 0;
     break L1;
    }
    $12 = ($9|0)<(0);
    $13 = (($$01920) - ($6))|0;
    $$ = $12 ? $6 : $13;
    $$018$ = $12 ? $$01821 : $8;
    $14 = ($$|0)==(0);
    if ($14) {
     $$0 = 0;
     break;
    } else {
     $$01821 = $$018$;$$01920 = $$;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _div($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (($1|0) / ($2|0))&-1;
 HEAP32[$0>>2] = $3;
 $4 = ((($0)) + 4|0);
 $5 = (($1|0) % ($2|0))&-1;
 HEAP32[$4>>2] = $5;
 return;
}
function _ecvt($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$01417 = 0, $$018 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = (($1) + -1)|0;
 $6 = ($5>>>0)>(15);
 $7 = $6 ? 14 : $5;
 HEAP32[$vararg_buffer>>2] = $7;
 $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
 HEAPF64[$vararg_ptr1>>3] = $0;
 (_sprintf($4,184240,$vararg_buffer)|0);
 $8 = HEAP8[$4>>0]|0;
 $9 = ($8<<24>>24)==(45);
 $10 = $9&1;
 HEAP32[$3>>2] = $10;
 $11 = (($4) + ($10)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(101);
 if ($13) {
  $$lcssa = 189618;$25 = $10;
 } else {
  $$01417 = $10;$$018 = 0;$14 = $12;$15 = 189618;
  while(1) {
   HEAP8[$15>>0] = $14;
   $16 = (($$01417) + 1)|0;
   $17 = ($14<<24>>24)!=(46);
   $18 = $17&1;
   $19 = (($$018) + ($18))|0;
   $20 = (($4) + ($16)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)==(101);
   $23 = (189618 + ($19)|0);
   if ($22) {
    $$lcssa = $23;$25 = $16;
    break;
   } else {
    $$01417 = $16;$$018 = $19;$14 = $21;$15 = $23;
   }
  }
 }
 $24 = (($4) + ($25)|0);
 HEAP8[$$lcssa>>0] = 0;
 $26 = ((($24)) + 1|0);
 $27 = (_atoi($26)|0);
 $28 = (($27) + 1)|0;
 HEAP32[$2>>2] = $28;
 STACKTOP = sp;return (189618|0);
}
function _fcvt($0,$1,$2,$3) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$020 = 0, $$op = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1520|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1520|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = ($1>>>0)<(1400);
 $$ = $5 ? $1 : 1400;
 HEAP32[$vararg_buffer>>2] = $$;
 $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
 HEAPF64[$vararg_ptr1>>3] = $0;
 (_sprintf($4,184245,$vararg_buffer)|0);
 $6 = HEAP8[$4>>0]|0;
 $7 = ($6<<24>>24)==(45);
 $8 = $7&1;
 $9 = (($4) + ($8)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(48);
 if ($11) {
  $12 = ((($9)) + 2|0);
  $13 = (_strspn($12,184250)|0);
  $$0 = $13;
 } else {
  $14 = (_strcspn($9,184252)|0);
  $15 = (0 - ($14))|0;
  $$0 = $15;
 }
 $16 = ($$|0)>($$0|0);
 if ($16) {
  $20 = (($$) - ($$0))|0;
  $21 = (_ecvt($0,$20,$2,$3)|0);
  $$020 = $21;
 } else {
  HEAP32[$3>>2] = $8;
  HEAP32[$2>>2] = 1;
  $17 = ($$>>>0)<(14);
  $$op = (0 - ($1))|0;
  $18 = $17 ? $$op : -14;
  $19 = ((184268) + ($18)|0);
  $$020 = $19;
 }
 STACKTOP = sp;return ($$020|0);
}
function _strcspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01824 = 0, $$019$sink = 0, $$01922 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0;
 var $div20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 L1: do {
  if ($4) {
   label = 3;
  } else {
   $5 = ((($1)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 3;
   } else {
    ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
    $$01824 = $1;$13 = $3;
    while(1) {
     $12 = $13 & 31;
     $14 = $12&255;
     $15 = 1 << $14;
     $div20 = ($13&255) >>> 5;
     $16 = $div20&255;
     $17 = (($2) + ($16<<2)|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = $18 | $15;
     HEAP32[$17>>2] = $19;
     $20 = ((($$01824)) + 1|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      break;
     } else {
      $$01824 = $20;$13 = $21;
     }
    }
    $10 = HEAP8[$0>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $$019$sink = $0;
    } else {
     $$01922 = $0;$23 = $10;
     while(1) {
      $div = ($23&255) >>> 5;
      $24 = $div&255;
      $25 = (($2) + ($24<<2)|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = $23 & 31;
      $28 = $27&255;
      $29 = 1 << $28;
      $30 = $26 & $29;
      $31 = ($30|0)==(0);
      if (!($31)) {
       $$019$sink = $$01922;
       break L1;
      }
      $32 = ((($$01922)) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if ($34) {
       $$019$sink = $32;
       break;
      } else {
       $$01922 = $32;$23 = $33;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $8 = $3 << 24 >> 24;
  $9 = (___strchrnul($0,$8)|0);
  $$019$sink = $9;
 }
 $35 = $$019$sink;
 $36 = $0;
 $37 = (($35) - ($36))|0;
 STACKTOP = sp;return ($37|0);
}
function _gcvt($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
 HEAPF64[$vararg_ptr1>>3] = $0;
 (_sprintf($2,184270,$vararg_buffer)|0);
 STACKTOP = sp;return ($2|0);
}
function _imaxabs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(0);
 $3 = ($0>>>0)>(0);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 $7 = (_i64Subtract(0,0,($0|0),($1|0))|0);
 $8 = tempRet0;
 $9 = $6 ? $0 : $7;
 $10 = $6 ? $1 : $8;
 tempRet0 = ($10);
 return ($9|0);
}
function _imaxdiv($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (___divdi3(($1|0),($2|0),($3|0),($4|0))|0);
 $6 = tempRet0;
 $7 = $0;
 $8 = $7;
 HEAP32[$8>>2] = $5;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = ((($0)) + 8|0);
 $12 = (___remdi3(($1|0),($2|0),($3|0),($4|0))|0);
 $13 = tempRet0;
 $14 = $11;
 $15 = $14;
 HEAP32[$15>>2] = $12;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $13;
 return;
}
function _labs($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)>(0);
 $2 = (0 - ($0))|0;
 $3 = $1 ? $0 : $2;
 return ($3|0);
}
function _ldiv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (($1|0) / ($2|0))&-1;
 HEAP32[$0>>2] = $3;
 $4 = ((($0)) + 4|0);
 $5 = (($1|0) % ($2|0))&-1;
 HEAP32[$4>>2] = $5;
 return;
}
function _llabs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(0);
 $3 = ($0>>>0)>(0);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 $7 = (_i64Subtract(0,0,($0|0),($1|0))|0);
 $8 = tempRet0;
 $9 = $6 ? $0 : $7;
 $10 = $6 ? $1 : $8;
 tempRet0 = ($10);
 return ($9|0);
}
function _lldiv($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (___divdi3(($1|0),($2|0),($3|0),($4|0))|0);
 $6 = tempRet0;
 $7 = $0;
 $8 = $7;
 HEAP32[$8>>2] = $5;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = ((($0)) + 8|0);
 $12 = (___remdi3(($1|0),($2|0),($3|0),($4|0))|0);
 $13 = tempRet0;
 $14 = $11;
 $15 = $14;
 HEAP32[$15>>2] = $12;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $13;
 return;
}
function _strtof($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox($0,$1,0));
 $3 = $2;
 return (+$3);
}
function _strtold($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox($0,$1,2));
 return (+$2);
}
function _strtof_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+_strtof($0,$1));
 return (+$3);
}
function _strtod_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+_strtod($0,$1));
 return (+$3);
}
function _strtold_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+_strtold($0,$1));
 return (+$3);
}
function _strtoimax($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtoll($0,$1,$2)|0);
 $4 = tempRet0;
 tempRet0 = ($4);
 return ($3|0);
}
function _strtoumax($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtoull($0,$1,$2)|0);
 $4 = tempRet0;
 tempRet0 = ($4);
 return ($3|0);
}
function _wcstof($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_wcstox($0,$1,0));
 $3 = $2;
 return (+$3);
}
function _wcstox($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $3 = sp + 128|0;
 $4 = sp;
 $5 = ((($4)) + 8|0);
 $6 = ((($4)) + 4|0);
 $7 = ((($3)) + 4|0);
 $8 = ((($4)) + 44|0);
 dest=$4; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$8>>2] = $7;
 $9 = ((($4)) + 48|0);
 HEAP32[$9>>2] = 60;
 $10 = ((($4)) + 76|0);
 HEAP32[$10>>2] = -1;
 $11 = ((($4)) + 32|0);
 HEAP32[$11>>2] = 37;
 $$0 = $0;
 while(1) {
  $12 = HEAP32[$$0>>2]|0;
  $13 = (_iswspace($12)|0);
  $14 = ($13|0)==(0);
  $15 = ((($$0)) + 4|0);
  if ($14) {
   break;
  } else {
   $$0 = $15;
  }
 }
 $16 = ((($4)) + 84|0);
 HEAP32[$16>>2] = $$0;
 ___shlim($4,0);
 $17 = (+___floatscan($4,$2,1));
 $18 = ($1|0)==(0|0);
 if (!($18)) {
  $19 = ((($4)) + 108|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$6>>2]|0;
  $22 = HEAP32[$5>>2]|0;
  $23 = (($21) - ($22))|0;
  $24 = (($23) + ($20))|0;
  $25 = ($24|0)==(0);
  $26 = (($$0) + ($24<<2)|0);
  $27 = $25 ? $0 : $26;
  HEAP32[$1>>2] = $27;
 }
 STACKTOP = sp;return (+$17);
}
function _do_read_744($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0$lcssa = 0, $$029 = 0, $$031 = 0, $$cast = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 $$ = $6 ? $4 : 24172;
 $7 = ((($0)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 $$pre = ((($0)) + 44|0);
 L1: do {
  if ($9) {
   $$0$lcssa = 0;
  } else {
   $$031 = 0;
   while(1) {
    $10 = (($$) + ($$031<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0);
    if ($12) {
     $$0$lcssa = $$031;
     break L1;
    }
    $13 = ($11|0)<(128);
    $14 = $11&255;
    $15 = $13 ? $14 : 64;
    $16 = HEAP32[$$pre>>2]|0;
    $17 = (($16) + ($$031)|0);
    HEAP8[$17>>0] = $15;
    $18 = (($$031) + 1)|0;
    $19 = HEAP32[$7>>2]|0;
    $20 = ($18>>>0)<($19>>>0);
    if ($20) {
     $$031 = $18;
    } else {
     $$0$lcssa = $18;
     break;
    }
   }
  }
 } while(0);
 $21 = HEAP32[$$pre>>2]|0;
 $22 = ((($0)) + 4|0);
 HEAP32[$22>>2] = $21;
 $$cast = $21;
 $23 = (($$cast) + ($$0$lcssa)|0);
 $24 = ((($0)) + 8|0);
 HEAP32[$24>>2] = $23;
 $25 = (($$) + ($$0$lcssa<<2)|0);
 HEAP32[$3>>2] = $25;
 $26 = ($$0$lcssa|0)!=(0);
 $27 = ($2|0)!=(0);
 $or$cond = $27 & $26;
 if ($or$cond) {
  $28 = ((($$cast)) + 1|0);
  HEAP32[$22>>2] = $28;
  $29 = HEAP8[$$cast>>0]|0;
  HEAP8[$1>>0] = $29;
  $$029 = 1;
 } else {
  $$029 = 0;
 }
 return ($$029|0);
}
function _wcstod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_wcstox($0,$1,1));
 return (+$2);
}
function _wcstold($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_wcstox($0,$1,2));
 return (+$2);
}
function _wcstoull($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_wcstox_746($0,$1,$2,-1,-1)|0);
 $4 = tempRet0;
 tempRet0 = ($4);
 return ($3|0);
}
function _wcstox_746($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $5 = sp + 128|0;
 $6 = sp;
 $7 = ((($6)) + 8|0);
 $8 = ((($6)) + 4|0);
 $9 = ((($5)) + 4|0);
 $10 = ((($6)) + 44|0);
 dest=$6; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$10>>2] = $9;
 $11 = ((($6)) + 48|0);
 HEAP32[$11>>2] = 60;
 $12 = ((($6)) + 76|0);
 HEAP32[$12>>2] = -1;
 $13 = ((($6)) + 32|0);
 HEAP32[$13>>2] = 38;
 $$0 = $0;
 while(1) {
  $14 = HEAP32[$$0>>2]|0;
  $15 = (_iswspace($14)|0);
  $16 = ($15|0)==(0);
  $17 = ((($$0)) + 4|0);
  if ($16) {
   break;
  } else {
   $$0 = $17;
  }
 }
 $18 = ((($6)) + 84|0);
 HEAP32[$18>>2] = $$0;
 ___shlim($6,0);
 $19 = (___intscan($6,$2,1,$3,$4)|0);
 $20 = tempRet0;
 $21 = ($1|0)==(0|0);
 if (!($21)) {
  $22 = ((($6)) + 108|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$8>>2]|0;
  $25 = HEAP32[$7>>2]|0;
  $26 = (($24) - ($25))|0;
  $27 = (($26) + ($23))|0;
  $28 = ($27|0)==(0);
  $29 = (($$0) + ($27<<2)|0);
  $30 = $28 ? $0 : $29;
  HEAP32[$1>>2] = $30;
 }
 tempRet0 = ($20);
 STACKTOP = sp;return ($19|0);
}
function _do_read_747($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0$lcssa = 0, $$029 = 0, $$031 = 0, $$cast = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 $$ = $6 ? $4 : 24172;
 $7 = ((($0)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 $$pre = ((($0)) + 44|0);
 L1: do {
  if ($9) {
   $$0$lcssa = 0;
  } else {
   $$031 = 0;
   while(1) {
    $10 = (($$) + ($$031<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0);
    if ($12) {
     $$0$lcssa = $$031;
     break L1;
    }
    $13 = ($11|0)<(128);
    $14 = $11&255;
    $15 = $13 ? $14 : 64;
    $16 = HEAP32[$$pre>>2]|0;
    $17 = (($16) + ($$031)|0);
    HEAP8[$17>>0] = $15;
    $18 = (($$031) + 1)|0;
    $19 = HEAP32[$7>>2]|0;
    $20 = ($18>>>0)<($19>>>0);
    if ($20) {
     $$031 = $18;
    } else {
     $$0$lcssa = $18;
     break;
    }
   }
  }
 } while(0);
 $21 = HEAP32[$$pre>>2]|0;
 $22 = ((($0)) + 4|0);
 HEAP32[$22>>2] = $21;
 $$cast = $21;
 $23 = (($$cast) + ($$0$lcssa)|0);
 $24 = ((($0)) + 8|0);
 HEAP32[$24>>2] = $23;
 $25 = (($$) + ($$0$lcssa<<2)|0);
 HEAP32[$3>>2] = $25;
 $26 = ($$0$lcssa|0)!=(0);
 $27 = ($2|0)!=(0);
 $or$cond = $27 & $26;
 if ($or$cond) {
  $28 = ((($$cast)) + 1|0);
  HEAP32[$22>>2] = $28;
  $29 = HEAP8[$$cast>>0]|0;
  HEAP8[$1>>0] = $29;
  $$029 = 1;
 } else {
  $$029 = 0;
 }
 return ($$029|0);
}
function _wcstoll($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_wcstox_746($0,$1,$2,0,-2147483648)|0);
 $4 = tempRet0;
 tempRet0 = ($4);
 return ($3|0);
}
function _wcstoul($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_wcstox_746($0,$1,$2,-1,0)|0);
 $4 = tempRet0;
 return ($3|0);
}
function _wcstol($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_wcstox_746($0,$1,$2,-2147483648,0)|0);
 $4 = tempRet0;
 return ($3|0);
}
function _wcstoimax($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_wcstoll($0,$1,$2)|0);
 $4 = tempRet0;
 tempRet0 = ($4);
 return ($3|0);
}
function _wcstoumax($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_wcstoull($0,$1,$2)|0);
 $4 = tempRet0;
 tempRet0 = ($4);
 return ($3|0);
}
function _bcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_memcmp($0,$1,$2)|0);
 return ($3|0);
}
function _bcopy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _memmove(($1|0),($0|0),($2|0))|0;
 return;
}
function _bzero($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _memset(($0|0),0,($1|0))|0;
 return;
}
function _index($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strchr($0,$1)|0);
 return ($2|0);
}
function _memccpy($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$lcssa = 0, $$051 = 0, $$052$lcssa = 0, $$05269 = 0, $$053$lcssa = 0, $$05382 = 0, $$054$lcssa = 0, $$05481 = 0, $$057$lcssa = 0, $$05780 = 0, $$070 = 0, $$1$ph = 0, $$155$ph = 0, $$15562 = 0, $$158$lcssa = 0, $$15868 = 0, $$163 = 0, $$2 = 0, $$256 = 0, $$259$ph = 0;
 var $$25961 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond79 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $2 & 255;
 $5 = $1;
 $6 = $0;
 $7 = $5 ^ $6;
 $8 = $7 & 3;
 $9 = ($8|0)==(0);
 L1: do {
  if ($9) {
   $10 = $5 & 3;
   $11 = ($10|0)!=(0);
   $12 = ($3|0)!=(0);
   $or$cond79 = $12 & $11;
   if ($or$cond79) {
    $13 = $2&255;
    $$05382 = $1;$$05481 = $0;$$05780 = $3;
    while(1) {
     $14 = HEAP8[$$05382>>0]|0;
     HEAP8[$$05481>>0] = $14;
     $15 = ($14<<24>>24)==($13<<24>>24);
     if ($15) {
      $$2 = $$05382;$$256 = $$05481;
      break L1;
     }
     $16 = (($$05780) + -1)|0;
     $17 = ((($$05382)) + 1|0);
     $18 = ((($$05481)) + 1|0);
     $19 = $17;
     $20 = $19 & 3;
     $21 = ($20|0)!=(0);
     $22 = ($16|0)!=(0);
     $or$cond = $22 & $21;
     if ($or$cond) {
      $$05382 = $17;$$05481 = $18;$$05780 = $16;
     } else {
      $$053$lcssa = $17;$$054$lcssa = $18;$$057$lcssa = $16;$$lcssa = $21;
      break;
     }
    }
   } else {
    $$053$lcssa = $1;$$054$lcssa = $0;$$057$lcssa = $3;$$lcssa = $11;
   }
   if ($$lcssa) {
    $$2 = $$053$lcssa;$$256 = $$054$lcssa;
   } else {
    $23 = Math_imul($4, 16843009)|0;
    $24 = ($$057$lcssa>>>0)>(3);
    L10: do {
     if ($24) {
      $$05269 = $$054$lcssa;$$070 = $$053$lcssa;$$15868 = $$057$lcssa;
      while(1) {
       $25 = HEAP32[$$070>>2]|0;
       $26 = $25 ^ $23;
       $27 = (($26) + -16843009)|0;
       $28 = $26 & -2139062144;
       $29 = $28 ^ -2139062144;
       $30 = $29 & $27;
       $31 = ($30|0)==(0);
       if (!($31)) {
        $$0$lcssa = $$070;$$052$lcssa = $$05269;$$158$lcssa = $$15868;
        break L10;
       }
       HEAP32[$$05269>>2] = $25;
       $32 = (($$15868) + -4)|0;
       $33 = ((($$070)) + 4|0);
       $34 = ((($$05269)) + 4|0);
       $35 = ($32>>>0)>(3);
       if ($35) {
        $$05269 = $34;$$070 = $33;$$15868 = $32;
       } else {
        $$0$lcssa = $33;$$052$lcssa = $34;$$158$lcssa = $32;
        break;
       }
      }
     } else {
      $$0$lcssa = $$053$lcssa;$$052$lcssa = $$054$lcssa;$$158$lcssa = $$057$lcssa;
     }
    } while(0);
    $$1$ph = $$0$lcssa;$$155$ph = $$052$lcssa;$$259$ph = $$158$lcssa;
    label = 11;
   }
  } else {
   $$1$ph = $1;$$155$ph = $0;$$259$ph = $3;
   label = 11;
  }
 } while(0);
 L15: do {
  if ((label|0) == 11) {
   $36 = ($$259$ph|0)==(0);
   if ($36) {
    $$2 = $$1$ph;$$256 = $$155$ph;
   } else {
    $37 = $2&255;
    $$15562 = $$155$ph;$$163 = $$1$ph;$$25961 = $$259$ph;
    while(1) {
     $38 = HEAP8[$$163>>0]|0;
     HEAP8[$$15562>>0] = $38;
     $39 = ($38<<24>>24)==($37<<24>>24);
     if ($39) {
      $$2 = $$163;$$256 = $$15562;
      break L15;
     }
     $40 = (($$25961) + -1)|0;
     $41 = ((($$163)) + 1|0);
     $42 = ((($$15562)) + 1|0);
     $43 = ($40|0)==(0);
     if ($43) {
      $$2 = $41;$$256 = $42;
      break;
     } else {
      $$15562 = $42;$$163 = $41;$$25961 = $40;
     }
    }
   }
  }
 } while(0);
 $44 = HEAP8[$$2>>0]|0;
 $45 = $2&255;
 $46 = ($44<<24>>24)==($45<<24>>24);
 $47 = ((($$256)) + 1|0);
 $$051 = $46 ? $47 : 0;
 return ($$051|0);
}
function _memmem($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $$0 = $0;
  } else {
   $5 = ($1>>>0)<($3>>>0);
   if ($5) {
    $$0 = 0;
   } else {
    $6 = HEAP8[$2>>0]|0;
    $7 = $6&255;
    $8 = (_memchr($0,$7,$1)|0);
    $9 = ($8|0)==(0|0);
    $10 = ($3|0)==(1);
    $or$cond = $10 | $9;
    if ($or$cond) {
     $$0 = $8;
    } else {
     $11 = $8;
     $12 = $0;
     $13 = (($12) - ($11))|0;
     $14 = (($13) + ($1))|0;
     $15 = ($14>>>0)<($3>>>0);
     if ($15) {
      $$0 = 0;
     } else {
      switch ($3|0) {
      case 2:  {
       $16 = (_twobyte_memmem($8,$14,$2)|0);
       $$0 = $16;
       break L1;
       break;
      }
      case 3:  {
       $17 = (_threebyte_memmem($8,$14,$2)|0);
       $$0 = $17;
       break L1;
       break;
      }
      case 4:  {
       $18 = (_fourbyte_memmem($8,$14,$2)|0);
       $$0 = $18;
       break L1;
       break;
      }
      default: {
       $19 = (($8) + ($14)|0);
       $20 = (_twoway_memmem($8,$19,$2,$3)|0);
       $$0 = $20;
       break L1;
      }
      }
     }
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _twobyte_memmem($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$016 = 0, $$018 = 0, $$018$in = 0, $$sink = 0, $$sink$in = 0, $$sink$masked = 0, $$sink21$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 << 8;
 $6 = ((($2)) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $5 | $8;
 $10 = HEAP8[$0>>0]|0;
 $11 = $10&255;
 $$018$in = $1;$$sink$in = $11;$$sink21$sink = $0;
 while(1) {
  $12 = ((($$sink21$sink)) + 1|0);
  $$018 = (($$018$in) + -1)|0;
  $13 = ($$018|0)==(0);
  if ($13) {
   $$016 = 0;
   break;
  }
  $$sink = $$sink$in << 8;
  $14 = HEAP8[$12>>0]|0;
  $15 = $14&255;
  $$sink$masked = $$sink & 65280;
  $16 = $$sink$masked | $15;
  $17 = ($16|0)==($9|0);
  if ($17) {
   $$016 = $$sink21$sink;
   break;
  } else {
   $$018$in = $$018;$$sink$in = $16;$$sink21$sink = $12;
  }
 }
 return ($$016|0);
}
function _threebyte_memmem($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$018 = 0, $$01923 = 0, $$02022 = 0, $$024 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 << 24;
 $6 = ((($2)) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 << 16;
 $10 = $9 | $5;
 $11 = ((($2)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $13 << 8;
 $15 = $10 | $14;
 $16 = ((($0)) + 2|0);
 $17 = (($1) + -2)|0;
 $18 = ($17|0)==(0);
 L1: do {
  if ($18) {
   $$018 = 0;
  } else {
   $19 = ((($0)) + 1|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = $21 << 16;
   $23 = HEAP8[$0>>0]|0;
   $24 = $23&255;
   $25 = $24 << 24;
   $26 = $22 | $25;
   $27 = HEAP8[$16>>0]|0;
   $28 = $27&255;
   $29 = $28 << 8;
   $30 = $26 | $29;
   $$01923 = $16;$$02022 = $17;$$024 = $30;
   while(1) {
    $31 = ($$024|0)==($15|0);
    if ($31) {
     break;
    }
    $33 = (($$02022) + -1)|0;
    $34 = ((($$01923)) + 1|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35&255;
    $37 = $$024 | $36;
    $38 = $37 << 8;
    $39 = ($33|0)==(0);
    if ($39) {
     $$018 = 0;
     break L1;
    } else {
     $$01923 = $34;$$02022 = $33;$$024 = $38;
    }
   }
   $32 = ((($$01923)) + -2|0);
   $$018 = $32;
  }
 } while(0);
 return ($$018|0);
}
function _fourbyte_memmem($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$020 = 0, $$02125 = 0, $$02224 = 0, $$026 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 << 24;
 $6 = ((($2)) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 << 16;
 $10 = $9 | $5;
 $11 = ((($2)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $13 << 8;
 $15 = $10 | $14;
 $16 = ((($2)) + 3|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $15 | $18;
 $20 = ((($0)) + 3|0);
 $21 = (($1) + -3)|0;
 $22 = ($21|0)==(0);
 L1: do {
  if ($22) {
   $$020 = 0;
  } else {
   $23 = ((($0)) + 1|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = $25 << 16;
   $27 = HEAP8[$0>>0]|0;
   $28 = $27&255;
   $29 = $28 << 24;
   $30 = $26 | $29;
   $31 = ((($0)) + 2|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = $33 << 8;
   $35 = $30 | $34;
   $36 = HEAP8[$20>>0]|0;
   $37 = $36&255;
   $38 = $35 | $37;
   $$02125 = $20;$$02224 = $21;$$026 = $38;
   while(1) {
    $39 = ($$026|0)==($19|0);
    if ($39) {
     break;
    }
    $41 = (($$02224) + -1)|0;
    $42 = $$026 << 8;
    $43 = ((($$02125)) + 1|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $46 = $42 | $45;
    $47 = ($41|0)==(0);
    if ($47) {
     $$020 = 0;
     break L1;
    } else {
     $$02125 = $43;$$02224 = $41;$$026 = $46;
    }
   }
   $40 = ((($$02125)) + -3|0);
   $$020 = $40;
  }
 } while(0);
 return ($$020|0);
}
function _twoway_memmem($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0146$be = 0, $$0146190 = 0, $$0147 = 0, $$0149$ph$ph$lcssa187 = 0, $$0149$ph$ph$lcssa187285 = 0, $$0149$ph$ph224 = 0, $$0150212 = 0, $$0154$ph169$ph223 = 0, $$0154$ph169218 = 0, $$0154$ph230 = 0, $$0156$ph$lcssa = 0, $$0156$ph$lcssa284 = 0, $$0156$ph229 = 0, $$0158233 = 0, $$0159189 = 0, $$1$$0149 = 0, $$1$ph$ph$lcssa179 = 0, $$1$ph$ph203 = 0, $$1151192 = 0;
 var $$1155$ph165$ph202 = 0, $$1155$ph165197 = 0, $$1155$ph209 = 0, $$1157$$0156 = 0, $$1157$$0156$ = 0, $$1157$ph$lcssa = 0, $$1157$ph208 = 0, $$2152 = 0, $$2152$sink = 0, $$3 = 0, $$3153188 = 0, $$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $div = 0, $div160 = 0, $exitcond = 0, $or$cond = 0, $or$cond161 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $4 = sp + 1024|0;
 $5 = sp;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;HEAP32[$4+16>>2]=0|0;HEAP32[$4+20>>2]=0|0;HEAP32[$4+24>>2]=0|0;HEAP32[$4+28>>2]=0|0;
 $6 = ($3|0)==(0);
 L1: do {
  if ($6) {
   $$0149$ph$ph$lcssa187285 = 1;$$0156$ph$lcssa284 = -1;$$1$ph$ph$lcssa179 = 1;$$1157$ph$lcssa = -1;
  } else {
   $$0158233 = 0;
   while(1) {
    $8 = (($2) + ($$0158233)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9 & 31;
    $11 = $10&255;
    $12 = 1 << $11;
    $div160 = ($9&255) >>> 5;
    $13 = $div160&255;
    $14 = (($4) + ($13<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $12 | $15;
    HEAP32[$14>>2] = $16;
    $17 = (($$0158233) + 1)|0;
    $18 = $9&255;
    $19 = (($5) + ($18<<2)|0);
    HEAP32[$19>>2] = $17;
    $exitcond = ($17|0)==($3|0);
    if ($exitcond) {
     break;
    } else {
     $$0158233 = $17;
    }
   }
   $7 = ($3>>>0)>(1);
   if ($7) {
    $$0154$ph230 = 0;$$0156$ph229 = -1;$120 = 1;
    L5: while(1) {
     $$0149$ph$ph224 = 1;$$0154$ph169$ph223 = $$0154$ph230;$123 = $120;
     while(1) {
      $$0154$ph169218 = $$0154$ph169$ph223;$122 = $123;
      L9: while(1) {
       $$0150212 = 1;$27 = $122;
       while(1) {
        $23 = (($$0150212) + ($$0156$ph229))|0;
        $24 = (($2) + ($23)|0);
        $25 = HEAP8[$24>>0]|0;
        $26 = (($2) + ($27)|0);
        $28 = HEAP8[$26>>0]|0;
        $29 = ($25<<24>>24)==($28<<24>>24);
        if (!($29)) {
         break L9;
        }
        $30 = ($$0150212|0)==($$0149$ph$ph224|0);
        $21 = (($$0150212) + 1)|0;
        if ($30) {
         break;
        }
        $20 = (($21) + ($$0154$ph169218))|0;
        $22 = ($20>>>0)<($3>>>0);
        if ($22) {
         $$0150212 = $21;$27 = $20;
        } else {
         $$0149$ph$ph$lcssa187 = $$0149$ph$ph224;$$0156$ph$lcssa = $$0156$ph229;
         break L5;
        }
       }
       $31 = (($$0149$ph$ph224) + ($$0154$ph169218))|0;
       $32 = (($31) + 1)|0;
       $33 = ($32>>>0)<($3>>>0);
       if ($33) {
        $$0154$ph169218 = $31;$122 = $32;
       } else {
        $$0149$ph$ph$lcssa187 = $$0149$ph$ph224;$$0156$ph$lcssa = $$0156$ph229;
        break L5;
       }
      }
      $34 = ($25&255)>($28&255);
      $35 = (($27) - ($$0156$ph229))|0;
      if (!($34)) {
       break;
      }
      $39 = (($27) + 1)|0;
      $40 = ($39>>>0)<($3>>>0);
      if ($40) {
       $$0149$ph$ph224 = $35;$$0154$ph169$ph223 = $27;$123 = $39;
      } else {
       $$0149$ph$ph$lcssa187 = $35;$$0156$ph$lcssa = $$0156$ph229;
       break L5;
      }
     }
     $36 = (($$0154$ph169218) + 1)|0;
     $37 = (($$0154$ph169218) + 2)|0;
     $38 = ($37>>>0)<($3>>>0);
     if ($38) {
      $$0154$ph230 = $36;$$0156$ph229 = $$0154$ph169218;$120 = $37;
     } else {
      $$0149$ph$ph$lcssa187 = 1;$$0156$ph$lcssa = $$0154$ph169218;
      break;
     }
    }
    if ($7) {
     $$1155$ph209 = 0;$$1157$ph208 = -1;$121 = 1;
     while(1) {
      $$1$ph$ph203 = 1;$$1155$ph165$ph202 = $$1155$ph209;$125 = $121;
      while(1) {
       $$1155$ph165197 = $$1155$ph165$ph202;$124 = $125;
       L24: while(1) {
        $$1151192 = 1;$48 = $124;
        while(1) {
         $44 = (($$1151192) + ($$1157$ph208))|0;
         $45 = (($2) + ($44)|0);
         $46 = HEAP8[$45>>0]|0;
         $47 = (($2) + ($48)|0);
         $49 = HEAP8[$47>>0]|0;
         $50 = ($46<<24>>24)==($49<<24>>24);
         if (!($50)) {
          break L24;
         }
         $51 = ($$1151192|0)==($$1$ph$ph203|0);
         $42 = (($$1151192) + 1)|0;
         if ($51) {
          break;
         }
         $41 = (($42) + ($$1155$ph165197))|0;
         $43 = ($41>>>0)<($3>>>0);
         if ($43) {
          $$1151192 = $42;$48 = $41;
         } else {
          $$0149$ph$ph$lcssa187285 = $$0149$ph$ph$lcssa187;$$0156$ph$lcssa284 = $$0156$ph$lcssa;$$1$ph$ph$lcssa179 = $$1$ph$ph203;$$1157$ph$lcssa = $$1157$ph208;
          break L1;
         }
        }
        $52 = (($$1$ph$ph203) + ($$1155$ph165197))|0;
        $53 = (($52) + 1)|0;
        $54 = ($53>>>0)<($3>>>0);
        if ($54) {
         $$1155$ph165197 = $52;$124 = $53;
        } else {
         $$0149$ph$ph$lcssa187285 = $$0149$ph$ph$lcssa187;$$0156$ph$lcssa284 = $$0156$ph$lcssa;$$1$ph$ph$lcssa179 = $$1$ph$ph203;$$1157$ph$lcssa = $$1157$ph208;
         break L1;
        }
       }
       $55 = ($46&255)<($49&255);
       $56 = (($48) - ($$1157$ph208))|0;
       if (!($55)) {
        break;
       }
       $60 = (($48) + 1)|0;
       $61 = ($60>>>0)<($3>>>0);
       if ($61) {
        $$1$ph$ph203 = $56;$$1155$ph165$ph202 = $48;$125 = $60;
       } else {
        $$0149$ph$ph$lcssa187285 = $$0149$ph$ph$lcssa187;$$0156$ph$lcssa284 = $$0156$ph$lcssa;$$1$ph$ph$lcssa179 = $56;$$1157$ph$lcssa = $$1157$ph208;
        break L1;
       }
      }
      $57 = (($$1155$ph165197) + 1)|0;
      $58 = (($$1155$ph165197) + 2)|0;
      $59 = ($58>>>0)<($3>>>0);
      if ($59) {
       $$1155$ph209 = $57;$$1157$ph208 = $$1155$ph165197;$121 = $58;
      } else {
       $$0149$ph$ph$lcssa187285 = $$0149$ph$ph$lcssa187;$$0156$ph$lcssa284 = $$0156$ph$lcssa;$$1$ph$ph$lcssa179 = 1;$$1157$ph$lcssa = $$1155$ph165197;
       break;
      }
     }
    } else {
     $$0149$ph$ph$lcssa187285 = $$0149$ph$ph$lcssa187;$$0156$ph$lcssa284 = $$0156$ph$lcssa;$$1$ph$ph$lcssa179 = 1;$$1157$ph$lcssa = -1;
    }
   } else {
    $$0149$ph$ph$lcssa187285 = 1;$$0156$ph$lcssa284 = -1;$$1$ph$ph$lcssa179 = 1;$$1157$ph$lcssa = -1;
   }
  }
 } while(0);
 $62 = (($$1157$ph$lcssa) + 1)|0;
 $63 = (($$0156$ph$lcssa284) + 1)|0;
 $64 = ($62>>>0)>($63>>>0);
 $$1$$0149 = $64 ? $$1$ph$ph$lcssa179 : $$0149$ph$ph$lcssa187285;
 $$1157$$0156 = $64 ? $$1157$ph$lcssa : $$0156$ph$lcssa284;
 $65 = (($2) + ($$1$$0149)|0);
 $66 = (($$1157$$0156) + 1)|0;
 $67 = (_memcmp($2,$65,$66)|0);
 $68 = ($67|0)==(0);
 if ($68) {
  $73 = (($3) - ($$1$$0149))|0;
  $$0 = $73;$$3 = $$1$$0149;
 } else {
  $69 = (($3) - ($$1157$$0156))|0;
  $70 = (($69) + -1)|0;
  $71 = ($$1157$$0156>>>0)>($70>>>0);
  $$1157$$0156$ = $71 ? $$1157$$0156 : $70;
  $72 = (($$1157$$0156$) + 1)|0;
  $$0 = 0;$$3 = $72;
 }
 $74 = $1;
 $75 = $0;
 $76 = (($74) - ($75))|0;
 $77 = ($76>>>0)<($3>>>0);
 L39: do {
  if ($77) {
   $$0147 = 0;
  } else {
   $78 = (($3) + -1)|0;
   $79 = ($$0|0)!=(0);
   $80 = (($3) - ($$3))|0;
   $$0146190 = 0;$$0159189 = $0;
   while(1) {
    $81 = (($$0159189) + ($78)|0);
    $82 = HEAP8[$81>>0]|0;
    $div = ($82&255) >>> 5;
    $83 = $div&255;
    $84 = (($4) + ($83<<2)|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $82 & 31;
    $87 = $86&255;
    $88 = 1 << $87;
    $89 = $88 & $85;
    $90 = ($89|0)==(0);
    L43: do {
     if ($90) {
      $$0146$be = 0;$$2152$sink = $3;
     } else {
      $91 = $82&255;
      $92 = (($5) + ($91<<2)|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = (($3) - ($93))|0;
      $95 = ($94|0)==(0);
      if (!($95)) {
       $96 = ($$0146190|0)!=(0);
       $or$cond = $79 & $96;
       $97 = ($94>>>0)<($$3>>>0);
       $or$cond161 = $or$cond & $97;
       $$2152 = $or$cond161 ? $80 : $94;
       $$0146$be = 0;$$2152$sink = $$2152;
       break;
      }
      $102 = ($66>>>0)>($$0146190>>>0);
      $103 = $102 ? $66 : $$0146190;
      $104 = ($103>>>0)<($3>>>0);
      L48: do {
       if ($104) {
        $$3153188 = $103;
        while(1) {
         $105 = (($2) + ($$3153188)|0);
         $106 = HEAP8[$105>>0]|0;
         $107 = (($$0159189) + ($$3153188)|0);
         $108 = HEAP8[$107>>0]|0;
         $109 = ($106<<24>>24)==($108<<24>>24);
         if (!($109)) {
          break;
         }
         $110 = (($$3153188) + 1)|0;
         $111 = ($110>>>0)<($3>>>0);
         if ($111) {
          $$3153188 = $110;
         } else {
          $$4 = $66;
          break L48;
         }
        }
        $112 = (($$3153188) - ($$1157$$0156))|0;
        $$0146$be = 0;$$2152$sink = $112;
        break L43;
       } else {
        $$4 = $66;
       }
      } while(0);
      while(1) {
       $113 = ($$4>>>0)>($$0146190>>>0);
       if (!($113)) {
        $$0147 = $$0159189;
        break L39;
       }
       $114 = (($$4) + -1)|0;
       $115 = (($2) + ($114)|0);
       $116 = HEAP8[$115>>0]|0;
       $117 = (($$0159189) + ($114)|0);
       $118 = HEAP8[$117>>0]|0;
       $119 = ($116<<24>>24)==($118<<24>>24);
       if ($119) {
        $$4 = $114;
       } else {
        $$0146$be = $$0;$$2152$sink = $$3;
        break;
       }
      }
     }
    } while(0);
    $98 = (($$0159189) + ($$2152$sink)|0);
    $99 = $98;
    $100 = (($74) - ($99))|0;
    $101 = ($100>>>0)<($3>>>0);
    if ($101) {
     $$0147 = 0;
     break;
    } else {
     $$0146190 = $$0146$be;$$0159189 = $98;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0147|0);
}
function _mempcpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _memcpy(($0|0),($1|0),($2|0))|0;
 $3 = (($0) + ($2)|0);
 return ($3|0);
}
function _rindex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strrchr($0,$1)|0);
 return ($2|0);
}
function ___strcasecmp_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strcasecmp($0,$1)|0);
 return ($3|0);
}
function _strcasestr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$078 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)==(0);
 L1: do {
  if ($4) {
   $$0 = 0;
  } else {
   $$078 = $0;
   while(1) {
    $5 = (_strncasecmp($$078,$1,$2)|0);
    $6 = ($5|0)==(0);
    if ($6) {
     $$0 = $$078;
     break L1;
    }
    $7 = ((($$078)) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $$0 = 0;
     break;
    } else {
     $$078 = $7;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strcat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($0) + ($2)|0);
 (_strcpy($3,$1)|0);
 return ($0|0);
}
function _strerror_r($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strerror($0)|0);
 $4 = (_strlen($3)|0);
 $5 = ($4>>>0)<($2>>>0);
 if ($5) {
  $9 = (($4) + 1)|0;
  _memcpy(($1|0),($3|0),($9|0))|0;
  $$0 = 0;
 } else {
  $6 = ($2|0)==(0);
  $7 = (($2) + -1)|0;
  if ($6) {
   $$0 = 34;
  } else {
   $8 = (($1) + ($7)|0);
   _memcpy(($1|0),($3|0),($7|0))|0;
   HEAP8[$8>>0] = 0;
   $$0 = 34;
  }
 }
 return ($$0|0);
}
function _strlcat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$pn = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strnlen($0,$2)|0);
 $4 = ($3|0)==($2|0);
 if ($4) {
  $5 = (_strlen($1)|0);
  $$pn = $5;
 } else {
  $6 = (($0) + ($3)|0);
  $7 = (($2) - ($3))|0;
  $8 = (_strlcpy($6,$1,$7)|0);
  $$pn = $8;
 }
 $$0 = (($$pn) + ($3))|0;
 return ($$0|0);
}
function _strlcpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$042$lcssa = 0, $$04259 = 0, $$043$lcssa = 0, $$043$lcssa85 = 0, $$04372 = 0, $$044$lcssa = 0, $$044$lcssa84 = 0, $$04471 = 0, $$047$lcssa = 0, $$047$lcssa83 = 0, $$04770 = 0, $$060 = 0, $$1$lcssa = 0, $$1$ph = 0, $$145$lcssa = 0, $$14558 = 0, $$148$lcssa = 0, $$148$ph = 0, $$14851 = 0;
 var $$153 = 0, $$2 = 0, $$246$ph = 0, $$24652 = 0, $$249 = 0, $$lcssa = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond69 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (($2) + -1)|0;
 $4 = ($2|0)==(0);
 if ($4) {
  $$pre = $0;
  $$2 = $0;$$249 = $1;$$pre$phiZ2D = $$pre;
 } else {
  $5 = $1;
  $6 = $0;
  $7 = $5 ^ $6;
  $8 = $7 & 3;
  $9 = ($8|0)==(0);
  do {
   if ($9) {
    $10 = $5 & 3;
    $11 = ($10|0)!=(0);
    $12 = ($3|0)!=(0);
    $or$cond69 = $12 & $11;
    L6: do {
     if ($or$cond69) {
      $$04372 = $0;$$04471 = $3;$$04770 = $1;
      while(1) {
       $13 = HEAP8[$$04770>>0]|0;
       HEAP8[$$04372>>0] = $13;
       $14 = ($13<<24>>24)==(0);
       if ($14) {
        $$043$lcssa85 = $$04372;$$044$lcssa84 = $$04471;$$047$lcssa83 = $$04770;
        break L6;
       }
       $15 = (($$04471) + -1)|0;
       $16 = ((($$04770)) + 1|0);
       $17 = ((($$04372)) + 1|0);
       $18 = $16;
       $19 = $18 & 3;
       $20 = ($19|0)!=(0);
       $21 = ($15|0)!=(0);
       $or$cond = $21 & $20;
       if ($or$cond) {
        $$04372 = $17;$$04471 = $15;$$04770 = $16;
       } else {
        $$043$lcssa = $17;$$044$lcssa = $15;$$047$lcssa = $16;$$lcssa = $21;
        label = 7;
        break;
       }
      }
     } else {
      $$043$lcssa = $0;$$044$lcssa = $3;$$047$lcssa = $1;$$lcssa = $12;
      label = 7;
     }
    } while(0);
    if ((label|0) == 7) {
     if ($$lcssa) {
      $$043$lcssa85 = $$043$lcssa;$$044$lcssa84 = $$044$lcssa;$$047$lcssa83 = $$047$lcssa;
     } else {
      $$1$lcssa = $$043$lcssa;$$148$lcssa = $$047$lcssa;
      break;
     }
    }
    $22 = HEAP8[$$047$lcssa83>>0]|0;
    $23 = ($22<<24>>24)==(0);
    if ($23) {
     $$1$ph = $$043$lcssa85;$$148$ph = $$047$lcssa83;$$246$ph = $$044$lcssa84;
     label = 13;
    } else {
     $24 = ($$044$lcssa84>>>0)>(3);
     L14: do {
      if ($24) {
       $$04259 = $$043$lcssa85;$$060 = $$047$lcssa83;$$14558 = $$044$lcssa84;
       while(1) {
        $25 = HEAP32[$$060>>2]|0;
        $26 = (($25) + -16843009)|0;
        $27 = $25 & -2139062144;
        $28 = $27 ^ -2139062144;
        $29 = $28 & $26;
        $30 = ($29|0)==(0);
        if (!($30)) {
         $$0$lcssa = $$060;$$042$lcssa = $$04259;$$145$lcssa = $$14558;
         break L14;
        }
        HEAP32[$$04259>>2] = $25;
        $31 = (($$14558) + -4)|0;
        $32 = ((($$060)) + 4|0);
        $33 = ((($$04259)) + 4|0);
        $34 = ($31>>>0)>(3);
        if ($34) {
         $$04259 = $33;$$060 = $32;$$14558 = $31;
        } else {
         $$0$lcssa = $32;$$042$lcssa = $33;$$145$lcssa = $31;
         break;
        }
       }
      } else {
       $$0$lcssa = $$047$lcssa83;$$042$lcssa = $$043$lcssa85;$$145$lcssa = $$044$lcssa84;
      }
     } while(0);
     $$1$ph = $$042$lcssa;$$148$ph = $$0$lcssa;$$246$ph = $$145$lcssa;
     label = 13;
    }
   } else {
    $$1$ph = $0;$$148$ph = $1;$$246$ph = $3;
    label = 13;
   }
  } while(0);
  L19: do {
   if ((label|0) == 13) {
    $35 = ($$246$ph|0)==(0);
    if ($35) {
     $$1$lcssa = $$1$ph;$$148$lcssa = $$148$ph;
    } else {
     $$14851 = $$148$ph;$$153 = $$1$ph;$$24652 = $$246$ph;
     while(1) {
      $36 = HEAP8[$$14851>>0]|0;
      HEAP8[$$153>>0] = $36;
      $37 = ($36<<24>>24)==(0);
      if ($37) {
       $$1$lcssa = $$153;$$148$lcssa = $$14851;
       break L19;
      }
      $38 = (($$24652) + -1)|0;
      $39 = ((($$14851)) + 1|0);
      $40 = ((($$153)) + 1|0);
      $41 = ($38|0)==(0);
      if ($41) {
       $$1$lcssa = $40;$$148$lcssa = $39;
       break;
      } else {
       $$14851 = $39;$$153 = $40;$$24652 = $38;
      }
     }
    }
   }
  } while(0);
  HEAP8[$$1$lcssa>>0] = 0;
  $$2 = $$1$lcssa;$$249 = $$148$lcssa;$$pre$phiZ2D = $6;
 }
 $42 = $$2;
 $43 = (($42) - ($$pre$phiZ2D))|0;
 $44 = (_strlen($$249)|0);
 $45 = (($43) + ($44))|0;
 return ($45|0);
}
function ___strncasecmp_l($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_strncasecmp($0,$1,$2)|0);
 return ($4|0);
}
function _strncat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01013 = 0, $$01112 = 0, $$014 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strlen($0)|0);
 $4 = (($0) + ($3)|0);
 $5 = ($2|0)==(0);
 L1: do {
  if ($5) {
   $$0$lcssa = $4;
  } else {
   $$01013 = $2;$$01112 = $1;$$014 = $4;
   while(1) {
    $6 = HEAP8[$$01112>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $$0$lcssa = $$014;
     break L1;
    }
    $8 = (($$01013) + -1)|0;
    $9 = ((($$01112)) + 1|0);
    $10 = ((($$014)) + 1|0);
    HEAP8[$$014>>0] = $6;
    $11 = ($8|0)==(0);
    if ($11) {
     $$0$lcssa = $10;
     break;
    } else {
     $$01013 = $8;$$01112 = $9;$$014 = $10;
    }
   }
  }
 } while(0);
 HEAP8[$$0$lcssa>>0] = 0;
 return ($0|0);
}
function _strndup($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strnlen($0,$1)|0);
 $3 = (($2) + 1)|0;
 $4 = (_malloc($3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
 } else {
  _memcpy(($4|0),($0|0),($2|0))|0;
  $6 = (($4) + ($2)|0);
  HEAP8[$6>>0] = 0;
  $$0 = $4;
 }
 return ($$0|0);
}
function _strpbrk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strcspn($0,$1)|0);
 $3 = (($0) + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)!=(0);
 $6 = $5 ? $3 : 0;
 return ($6|0);
}
function _strsep($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$014 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$014 = 0;
 } else {
  $4 = (_strcspn($2,$1)|0);
  $5 = (($2) + ($4)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $$0 = 0;
  } else {
   $8 = ((($5)) + 1|0);
   HEAP8[$5>>0] = 0;
   $$0 = $8;
  }
  HEAP32[$0>>2] = $$0;
  $$014 = $2;
 }
 return ($$014|0);
}
function _strsignal($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$07 = 0, $$1 = 0, $$in = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -1)|0;
 $2 = ($1>>>0)>(63);
 $3 = ($0|0)==(0);
 $4 = $2 | $3;
 if ($4) {
  $$0$lcssa = 184275;
 } else {
  $$07 = 184275;$$in = $0;
  while(1) {
   $$1 = $$07;
   while(1) {
    $7 = HEAP8[$$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($$1)) + 1|0);
    if ($8) {
     break;
    } else {
     $$1 = $9;
    }
   }
   $5 = (($$in) + -1)|0;
   $6 = ($5|0)==(0);
   if ($6) {
    $$0$lcssa = $9;
    break;
   } else {
    $$07 = $9;$$in = $5;
   }
  }
 }
 $10 = (___lctrans_cur($$0$lcssa)|0);
 return ($10|0);
}
function _strtok($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$010 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = HEAP32[46654]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 0;
  } else {
   $$010 = $3;
   label = 3;
  }
 } else {
  $$010 = $0;
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $5 = (_strspn($$010,$1)|0);
   $6 = (($$010) + ($5)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    HEAP32[46654] = 0;
    $$0 = 0;
    break;
   }
   $9 = (_strcspn($6,$1)|0);
   $10 = (($6) + ($9)|0);
   HEAP32[46654] = $10;
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    HEAP32[46654] = 0;
    $$0 = $6;
    break;
   } else {
    $13 = ((($10)) + 1|0);
    HEAP32[46654] = $13;
    HEAP8[$10>>0] = 0;
    $$0 = $6;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _strtok_r($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $4 = HEAP32[$2>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   $$015 = $4;
   label = 3;
  }
 } else {
  $$015 = $0;
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $6 = (_strspn($$015,$1)|0);
   $7 = (($$015) + ($6)|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    HEAP32[$2>>2] = 0;
    $$0 = 0;
    break;
   }
   $10 = (_strcspn($7,$1)|0);
   $11 = (($7) + ($10)|0);
   HEAP32[$2>>2] = $11;
   $12 = HEAP8[$11>>0]|0;
   $13 = ($12<<24>>24)==(0);
   if ($13) {
    HEAP32[$2>>2] = 0;
    $$0 = $7;
    break;
   } else {
    $14 = ((($11)) + 1|0);
    HEAP32[$2>>2] = $14;
    HEAP8[$11>>0] = 0;
    $$0 = $7;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _swab($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01215 = 0, $$01314 = 0, $$016 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)>(1);
 if ($3) {
  $$01215 = $0;$$01314 = $2;$$016 = $1;
  while(1) {
   $4 = ((($$01215)) + 1|0);
   $5 = HEAP8[$4>>0]|0;
   HEAP8[$$016>>0] = $5;
   $6 = HEAP8[$$01215>>0]|0;
   $7 = ((($$016)) + 1|0);
   HEAP8[$7>>0] = $6;
   $8 = ((($$016)) + 2|0);
   $9 = ((($$01215)) + 2|0);
   $10 = (($$01314) + -2)|0;
   $11 = ($$01314|0)>(3);
   if ($11) {
    $$01215 = $9;$$01314 = $10;$$016 = $8;
   } else {
    break;
   }
  }
 }
 return;
}
function _wcpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_wcscpy($0,$1)|0);
 $3 = (_wcslen($1)|0);
 $4 = (($0) + ($3<<2)|0);
 return ($4|0);
}
function _wcscpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$05 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;$$05 = $1;
 while(1) {
  $2 = ((($$05)) + 4|0);
  $3 = HEAP32[$$05>>2]|0;
  $4 = ((($$0)) + 4|0);
  HEAP32[$$0>>2] = $3;
  $5 = ($3|0)==(0);
  if ($5) {
   break;
  } else {
   $$0 = $4;$$05 = $2;
  }
 }
 return ($0|0);
}
function _wcpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_wcsncpy($0,$1,$2)|0);
 $4 = (_wcsnlen($1,$2)|0);
 $5 = (($0) + ($4<<2)|0);
 return ($5|0);
}
function _wcsncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01011 = 0, $$013 = 0, $$09$lcssa = 0, $$0912 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$0$lcssa = $0;$$09$lcssa = 0;
  } else {
   $$01011 = $1;$$013 = $0;$$0912 = $2;
   while(1) {
    $4 = HEAP32[$$01011>>2]|0;
    $5 = ($4|0)==(0);
    if ($5) {
     $$0$lcssa = $$013;$$09$lcssa = $$0912;
     break L1;
    }
    $6 = (($$0912) + -1)|0;
    $7 = ((($$01011)) + 4|0);
    $8 = ((($$013)) + 4|0);
    HEAP32[$$013>>2] = $4;
    $9 = ($6|0)==(0);
    if ($9) {
     $$0$lcssa = $8;$$09$lcssa = 0;
     break;
    } else {
     $$01011 = $7;$$013 = $8;$$0912 = $6;
    }
   }
  }
 } while(0);
 (_wmemset($$0$lcssa,0,$$09$lcssa)|0);
 return ($0|0);
}
function _wcsnlen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_wmemchr($0,0,$1)|0);
 $3 = ($2|0)==(0|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $$0 = $3 ? $1 : $7;
 return ($$0|0);
}
function _wmemset($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$056 = 0, $$07 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$056 = $2;$$07 = $0;
  while(1) {
   $4 = (($$056) + -1)|0;
   $5 = ((($$07)) + 4|0);
   HEAP32[$$07>>2] = $1;
   $6 = ($4|0)==(0);
   if ($6) {
    break;
   } else {
    $$056 = $4;$$07 = $5;
   }
  }
 }
 return ($0|0);
}
function _wcscasecmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_wcsncasecmp($0,$1,-1)|0);
 return ($2|0);
}
function _wcsncasecmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$016$lcssa = 0, $$01621 = 0, $$01720 = 0, $$018 = 0, $$022 = 0, $$022$in = 0, $$pre$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$018 = 0;
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0);
  L3: do {
   if ($5) {
    $$016$lcssa = $1;$19 = 0;
   } else {
    $$01621 = $1;$$01720 = $0;$$022$in = $2;$10 = $4;
    while(1) {
     $$022 = (($$022$in) + -1)|0;
     $6 = HEAP32[$$01621>>2]|0;
     $7 = ($6|0)!=(0);
     $8 = ($$022|0)!=(0);
     $or$cond = $8 & $7;
     if (!($or$cond)) {
      $$016$lcssa = $$01621;$19 = $10;
      break L3;
     }
     $9 = ($10|0)==($6|0);
     if (!($9)) {
      $11 = (_towlower($10)|0);
      $12 = HEAP32[$$01621>>2]|0;
      $13 = (_towlower($12)|0);
      $14 = ($11|0)==($13|0);
      if (!($14)) {
       break;
      }
     }
     $15 = ((($$01720)) + 4|0);
     $16 = ((($$01621)) + 4|0);
     $17 = HEAP32[$15>>2]|0;
     $18 = ($17|0)==(0);
     if ($18) {
      $$016$lcssa = $16;$19 = 0;
      break L3;
     } else {
      $$01621 = $16;$$01720 = $15;$$022$in = $$022;$10 = $17;
     }
    }
    $$pre$pre = HEAP32[$$01720>>2]|0;
    $$016$lcssa = $$01621;$19 = $$pre$pre;
   }
  } while(0);
  $20 = (_towlower($19)|0);
  $21 = HEAP32[$$016$lcssa>>2]|0;
  $22 = (_towlower($21)|0);
  $23 = (($20) - ($22))|0;
  $$018 = $23;
 }
 return ($$018|0);
}
function _wcscasecmp_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_wcscasecmp($0,$1)|0);
 return ($3|0);
}
function _wcscat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_wcslen($0)|0);
 $3 = (($0) + ($2<<2)|0);
 (_wcscpy($3,$1)|0);
 return ($0|0);
}
function _wcscspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$015$lcssa = 0, $$01516 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $4 = (_wcslen($0)|0);
   $$0 = $4;
  } else {
   $5 = ((($1)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0);
   if ($7) {
    $10 = (_wcschr($0,$2)|0);
    $11 = ($10|0)==(0|0);
    if ($11) {
     $16 = (_wcslen($0)|0);
     $$0 = $16;
     break;
    } else {
     $12 = $10;
     $13 = $0;
     $14 = (($12) - ($13))|0;
     $15 = $14 >> 2;
     $$0 = $15;
     break;
    }
   }
   $8 = HEAP32[$0>>2]|0;
   $9 = ($8|0)==(0);
   L10: do {
    if ($9) {
     $$015$lcssa = $0;
    } else {
     $$01516 = $0;$17 = $8;
     while(1) {
      $18 = (_wcschr($1,$17)|0);
      $19 = ($18|0)==(0|0);
      if (!($19)) {
       $$015$lcssa = $$01516;
       break L10;
      }
      $20 = ((($$01516)) + 4|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = ($21|0)==(0);
      if ($22) {
       $$015$lcssa = $20;
       break;
      } else {
       $$01516 = $20;$17 = $21;
      }
     }
    }
   } while(0);
   $23 = $$015$lcssa;
   $24 = $0;
   $25 = (($23) - ($24))|0;
   $26 = $25 >> 2;
   $$0 = $26;
  }
 } while(0);
 return ($$0|0);
}
function _wcsdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_wcslen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = $2 << 2;
 $4 = (_malloc($3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
 } else {
  $6 = (_wmemcpy($4,$0,$2)|0);
  $$0 = $4;
 }
 return ($$0|0);
}
function _wcsncasecmp_l($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_wcsncasecmp($0,$1,$2)|0);
 return ($4|0);
}
function _wcsncat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01013 = 0, $$01112 = 0, $$014 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_wcslen($0)|0);
 $4 = (($0) + ($3<<2)|0);
 $5 = ($2|0)==(0);
 L1: do {
  if ($5) {
   $$0$lcssa = $4;
  } else {
   $$01013 = $2;$$01112 = $1;$$014 = $4;
   while(1) {
    $6 = HEAP32[$$01112>>2]|0;
    $7 = ($6|0)==(0);
    if ($7) {
     $$0$lcssa = $$014;
     break L1;
    }
    $8 = (($$01013) + -1)|0;
    $9 = ((($$01112)) + 4|0);
    $10 = ((($$014)) + 4|0);
    HEAP32[$$014>>2] = $6;
    $11 = ($8|0)==(0);
    if ($11) {
     $$0$lcssa = $10;
     break;
    } else {
     $$01013 = $8;$$01112 = $9;$$014 = $10;
    }
   }
  }
 } while(0);
 HEAP32[$$0$lcssa>>2] = 0;
 return ($0|0);
}
function _wcsncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01218 = 0, $$01317 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01218 = $1;$$01317 = $0;$$019 = $2;
   while(1) {
    $4 = HEAP32[$$01317>>2]|0;
    $5 = HEAP32[$$01218>>2]|0;
    $6 = ($4|0)!=($5|0);
    $7 = ($4|0)==(0);
    $or$cond = $7 | $6;
    $8 = ($5|0)==(0);
    $or$cond14 = $8 | $or$cond;
    if ($or$cond14) {
     break;
    }
    $9 = (($$019) + -1)|0;
    $10 = ((($$01317)) + 4|0);
    $11 = ((($$01218)) + 4|0);
    $12 = ($9|0)==(0);
    if ($12) {
     $14 = 0;
     break L1;
    } else {
     $$01218 = $11;$$01317 = $10;$$019 = $9;
    }
   }
   $13 = (($4) - ($5))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _wcspbrk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_wcscspn($0,$1)|0);
 $3 = (($0) + ($2<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 $6 = $5 ? $3 : 0;
 return ($6|0);
}
function _wcsrchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$010 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_wcslen($0)|0);
 $3 = ($2|0)>(-1);
 L1: do {
  if ($3) {
   $4 = (($0) + ($2<<2)|0);
   $$010 = $4;
   while(1) {
    $5 = HEAP32[$$010>>2]|0;
    $6 = ($5|0)==($1|0);
    if ($6) {
     $9 = $$010;
     break L1;
    }
    $7 = ((($$010)) + -4|0);
    $8 = ($7>>>0)<($0>>>0);
    if ($8) {
     $9 = 0;
     break;
    } else {
     $$010 = $7;
    }
   }
  } else {
   $9 = 0;
  }
 } while(0);
 return ($9|0);
}
function _wcsstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = $0;
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = 0;
  } else {
   $6 = (_wcschr($0,$2)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$0 = 0;
   } else {
    $8 = ((($1)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==(0);
    if ($10) {
     $$0 = $6;
    } else {
     $11 = ((($6)) + 4|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ($12|0)==(0);
     if ($13) {
      $$0 = 0;
     } else {
      $14 = (_twoway_wcsstr($6,$1)|0);
      $$0 = $14;
     }
    }
   }
  }
 }
 return ($$0|0);
}
function _twoway_wcsstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0145 = 0, $$0147 = 0, $$0148 = 0, $$0148$be = 0, $$0149 = 0, $$0154$ph$ph$lcssa191 = 0, $$0154$ph$ph$lcssa191299 = 0, $$0154$ph$ph228 = 0, $$0158216 = 0, $$0162$ph172$ph227 = 0, $$0162$ph172222 = 0, $$0162$ph234 = 0, $$0164$ph$lcssa = 0, $$0164$ph$lcssa298 = 0, $$0164$ph233 = 0, $$0166194296297 = 0, $$0166237 = 0, $$1155$$0154 = 0, $$1155$ph$ph$lcssa183 = 0, $$1155$ph$ph207 = 0;
 var $$1159196 = 0, $$1163$ph170$ph206 = 0, $$1163$ph170201 = 0, $$1163$ph213 = 0, $$1165$$0164 = 0, $$1165$$0164$ = 0, $$1165$ph$lcssa = 0, $$1165$ph212 = 0, $$2160195 = 0, $$3 = 0, $$3152 = 0, $$3157 = 0, $$3161 = 0, $$pr167 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$0154$ph$ph$lcssa191299 = 1;$$0164$ph$lcssa298 = -1;$$0166194296297 = 0;$$1155$ph$ph$lcssa183 = 1;$$1165$ph$lcssa = -1;
   label = 26;
  } else {
   $$0166237 = 0;
   while(1) {
    $4 = (($0) + ($$0166237<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)==(0);
    if ($6) {
     $$3 = 0;
     break L1;
    }
    $7 = (($$0166237) + 1)|0;
    $8 = (($1) + ($7<<2)|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==(0);
    if ($10) {
     break;
    } else {
     $$0166237 = $7;
    }
   }
   $11 = ($7>>>0)>(1);
   if ($11) {
    $$0162$ph234 = 0;$$0164$ph233 = -1;$100 = 1;
    L6: while(1) {
     $$0154$ph$ph228 = 1;$$0162$ph172$ph227 = $$0162$ph234;$101 = $100;
     while(1) {
      $$0162$ph172222 = $$0162$ph172$ph227;$102 = $101;
      L10: while(1) {
       $$0158216 = 1;$13 = $102;
       while(1) {
        $18 = (($$0158216) + ($$0164$ph233))|0;
        $19 = (($1) + ($18<<2)|0);
        $20 = HEAP32[$19>>2]|0;
        $21 = (($1) + ($13<<2)|0);
        $22 = HEAP32[$21>>2]|0;
        $23 = ($20|0)==($22|0);
        if (!($23)) {
         break L10;
        }
        $24 = ($$0158216|0)==($$0154$ph$ph228|0);
        $16 = (($$0158216) + 1)|0;
        if ($24) {
         break;
        }
        $15 = (($16) + ($$0162$ph172222))|0;
        $17 = ($15>>>0)<($7>>>0);
        if ($17) {
         $$0158216 = $16;$13 = $15;
        } else {
         $$0154$ph$ph$lcssa191 = $$0154$ph$ph228;$$0164$ph$lcssa = $$0164$ph233;
         break L6;
        }
       }
       $25 = (($$0154$ph$ph228) + ($$0162$ph172222))|0;
       $26 = (($25) + 1)|0;
       $27 = ($26>>>0)<($7>>>0);
       if ($27) {
        $$0162$ph172222 = $25;$102 = $26;
       } else {
        $$0154$ph$ph$lcssa191 = $$0154$ph$ph228;$$0164$ph$lcssa = $$0164$ph233;
        break L6;
       }
      }
      $28 = ($20|0)>($22|0);
      $29 = (($13) - ($$0164$ph233))|0;
      if (!($28)) {
       break;
      }
      $12 = (($13) + 1)|0;
      $14 = ($12>>>0)<($7>>>0);
      if ($14) {
       $$0154$ph$ph228 = $29;$$0162$ph172$ph227 = $13;$101 = $12;
      } else {
       $$0154$ph$ph$lcssa191 = $29;$$0164$ph$lcssa = $$0164$ph233;
       break L6;
      }
     }
     $30 = (($$0162$ph172222) + 1)|0;
     $31 = (($$0162$ph172222) + 2)|0;
     $32 = ($31>>>0)<($7>>>0);
     if ($32) {
      $$0162$ph234 = $30;$$0164$ph233 = $$0162$ph172222;$100 = $31;
     } else {
      $$0154$ph$ph$lcssa191 = 1;$$0164$ph$lcssa = $$0162$ph172222;
      break;
     }
    }
    if ($11) {
     $$1163$ph213 = 0;$$1165$ph212 = -1;$103 = 1;
     while(1) {
      $$1155$ph$ph207 = 1;$$1163$ph170$ph206 = $$1163$ph213;$105 = $103;
      while(1) {
       $$1163$ph170201 = $$1163$ph170$ph206;$104 = $105;
       L25: while(1) {
        $$1159196 = 1;$40 = $104;
        while(1) {
         $36 = (($$1159196) + ($$1165$ph212))|0;
         $37 = (($1) + ($36<<2)|0);
         $38 = HEAP32[$37>>2]|0;
         $39 = (($1) + ($40<<2)|0);
         $41 = HEAP32[$39>>2]|0;
         $42 = ($38|0)==($41|0);
         if (!($42)) {
          break L25;
         }
         $43 = ($$1159196|0)==($$1155$ph$ph207|0);
         $34 = (($$1159196) + 1)|0;
         if ($43) {
          break;
         }
         $33 = (($34) + ($$1163$ph170201))|0;
         $35 = ($33>>>0)<($7>>>0);
         if ($35) {
          $$1159196 = $34;$40 = $33;
         } else {
          $$0154$ph$ph$lcssa191299 = $$0154$ph$ph$lcssa191;$$0164$ph$lcssa298 = $$0164$ph$lcssa;$$0166194296297 = $7;$$1155$ph$ph$lcssa183 = $$1155$ph$ph207;$$1165$ph$lcssa = $$1165$ph212;
          label = 26;
          break L1;
         }
        }
        $44 = (($$1155$ph$ph207) + ($$1163$ph170201))|0;
        $45 = (($44) + 1)|0;
        $46 = ($45>>>0)<($7>>>0);
        if ($46) {
         $$1163$ph170201 = $44;$104 = $45;
        } else {
         $$0154$ph$ph$lcssa191299 = $$0154$ph$ph$lcssa191;$$0164$ph$lcssa298 = $$0164$ph$lcssa;$$0166194296297 = $7;$$1155$ph$ph$lcssa183 = $$1155$ph$ph207;$$1165$ph$lcssa = $$1165$ph212;
         label = 26;
         break L1;
        }
       }
       $47 = ($38|0)<($41|0);
       $48 = (($40) - ($$1165$ph212))|0;
       if (!($47)) {
        break;
       }
       $52 = (($40) + 1)|0;
       $53 = ($52>>>0)<($7>>>0);
       if ($53) {
        $$1155$ph$ph207 = $48;$$1163$ph170$ph206 = $40;$105 = $52;
       } else {
        $$0154$ph$ph$lcssa191299 = $$0154$ph$ph$lcssa191;$$0164$ph$lcssa298 = $$0164$ph$lcssa;$$0166194296297 = $7;$$1155$ph$ph$lcssa183 = $48;$$1165$ph$lcssa = $$1165$ph212;
        label = 26;
        break L1;
       }
      }
      $49 = (($$1163$ph170201) + 1)|0;
      $50 = (($$1163$ph170201) + 2)|0;
      $51 = ($50>>>0)<($7>>>0);
      if ($51) {
       $$1163$ph213 = $49;$$1165$ph212 = $$1163$ph170201;$103 = $50;
      } else {
       $$0154$ph$ph$lcssa191299 = $$0154$ph$ph$lcssa191;$$0164$ph$lcssa298 = $$0164$ph$lcssa;$$0166194296297 = $7;$$1155$ph$ph$lcssa183 = 1;$$1165$ph$lcssa = $$1163$ph170201;
       label = 26;
       break;
      }
     }
    } else {
     $$0154$ph$ph$lcssa191299 = $$0154$ph$ph$lcssa191;$$0164$ph$lcssa298 = $$0164$ph$lcssa;$$0166194296297 = $7;$$1155$ph$ph$lcssa183 = 1;$$1165$ph$lcssa = -1;
     label = 26;
    }
   } else {
    $$0154$ph$ph$lcssa191299 = 1;$$0164$ph$lcssa298 = -1;$$0166194296297 = $7;$$1155$ph$ph$lcssa183 = 1;$$1165$ph$lcssa = -1;
    label = 26;
   }
  }
 } while(0);
 L35: do {
  if ((label|0) == 26) {
   $54 = (($$1165$ph$lcssa) + 1)|0;
   $55 = (($$0164$ph$lcssa298) + 1)|0;
   $56 = ($54>>>0)>($55>>>0);
   $$1155$$0154 = $56 ? $$1155$ph$ph$lcssa183 : $$0154$ph$ph$lcssa191299;
   $$1165$$0164 = $56 ? $$1165$ph$lcssa : $$0164$ph$lcssa298;
   $57 = (($1) + ($$1155$$0154<<2)|0);
   $58 = (($$1165$$0164) + 1)|0;
   $59 = (_wmemcmp($1,$57,$58)|0);
   $60 = ($59|0)==(0);
   if ($60) {
    $65 = (($$0166194296297) - ($$1155$$0154))|0;
    $$0147 = $65;$$3157 = $$1155$$0154;
   } else {
    $61 = (($$0166194296297) - ($$1165$$0164))|0;
    $62 = (($61) + -1)|0;
    $63 = ($$1165$$0164>>>0)>($62>>>0);
    $$1165$$0164$ = $63 ? $$1165$$0164 : $62;
    $64 = (($$1165$$0164$) + 1)|0;
    $$0147 = 0;$$3157 = $64;
   }
   $66 = $$0166194296297 | 63;
   $$0145 = $0;$$0148 = 0;$$0149 = $0;
   while(1) {
    $67 = $$0149;
    $68 = $$0145;
    $69 = (($67) - ($68))|0;
    $70 = $69 >> 2;
    $71 = ($70>>>0)<($$0166194296297>>>0);
    do {
     if ($71) {
      $72 = (_wmemchr($$0149,0,$66)|0);
      $73 = ($72|0)==(0|0);
      if ($73) {
       $78 = (($$0149) + ($66<<2)|0);
       $$3152 = $78;
       break;
      } else {
       $74 = $72;
       $75 = (($74) - ($68))|0;
       $76 = $75 >> 2;
       $77 = ($76>>>0)<($$0166194296297>>>0);
       if ($77) {
        $$3 = 0;
        break L35;
       } else {
        $$3152 = $72;
        break;
       }
      }
     } else {
      $$3152 = $$0149;
     }
    } while(0);
    $79 = ($58>>>0)>($$0148>>>0);
    $80 = $79 ? $58 : $$0148;
    $81 = (($1) + ($80<<2)|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==(0);
    L49: do {
     if ($83) {
      $$3161 = $58;
      label = 39;
     } else {
      $$2160195 = $80;$$pr167 = $82;
      while(1) {
       $84 = (($$0145) + ($$2160195<<2)|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ($$pr167|0)==($85|0);
       if (!($86)) {
        break;
       }
       $87 = (($$2160195) + 1)|0;
       $88 = (($1) + ($87<<2)|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = ($89|0)==(0);
       if ($90) {
        $$3161 = $58;
        label = 39;
        break L49;
       } else {
        $$2160195 = $87;$$pr167 = $89;
       }
      }
      $91 = (($$2160195) - ($$1165$$0164))|0;
      $$0148$be = 0;$$sink = $91;
     }
    } while(0);
    if ((label|0) == 39) {
     while(1) {
      label = 0;
      $93 = ($$3161>>>0)>($$0148>>>0);
      if (!($93)) {
       $$3 = $$0145;
       break L35;
      }
      $94 = (($$3161) + -1)|0;
      $95 = (($1) + ($94<<2)|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = (($$0145) + ($94<<2)|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($96|0)==($98|0);
      if ($99) {
       $$3161 = $94;
       label = 39;
      } else {
       $$0148$be = $$0147;$$sink = $$3157;
       break;
      }
     }
    }
    $92 = (($$0145) + ($$sink<<2)|0);
    $$0145 = $92;$$0148 = $$0148$be;$$0149 = $$3152;
   }
  }
 } while(0);
 return ($$3|0);
}
function _wmemcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$014 = 0, $$0813 = 0, $$0912 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $12 = 0;
  } else {
   $$014 = $2;$$0813 = $1;$$0912 = $0;
   while(1) {
    $4 = HEAP32[$$0912>>2]|0;
    $5 = HEAP32[$$0813>>2]|0;
    $6 = ($4|0)==($5|0);
    if (!($6)) {
     break;
    }
    $7 = (($$014) + -1)|0;
    $8 = ((($$0912)) + 4|0);
    $9 = ((($$0813)) + 4|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $12 = 0;
     break L1;
    } else {
     $$014 = $7;$$0813 = $9;$$0912 = $8;
    }
   }
   $11 = (($4) - ($5))|0;
   $12 = $11;
  }
 } while(0);
 return ($12|0);
}
function _wcstok($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $4 = HEAP32[$2>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   $$015 = $4;
   label = 3;
  }
 } else {
  $$015 = $0;
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $6 = (_wcsspn($$015,$1)|0);
   $7 = (($$015) + ($6<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$2>>2] = 0;
    $$0 = 0;
    break;
   }
   $10 = (_wcscspn($7,$1)|0);
   $11 = (($7) + ($10<<2)|0);
   HEAP32[$2>>2] = $11;
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0);
   if ($13) {
    HEAP32[$2>>2] = 0;
    $$0 = $7;
    break;
   } else {
    $14 = ((($11)) + 4|0);
    HEAP32[$2>>2] = $14;
    HEAP32[$11>>2] = 0;
    $$0 = $7;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wcswcs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_wcsstr($0,$1)|0);
 return ($2|0);
}
function _wmemmove($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01417 = 0, $$019 = 0, $$118 = 0, $$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $1;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($2>>>0);
 if ($7) {
  $$in = $2;
  while(1) {
   $9 = (($$in) + -1)|0;
   $10 = (($1) + ($9<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($0) + ($9<<2)|0);
   HEAP32[$12>>2] = $11;
   $13 = ($9|0)==(0);
   if ($13) {
    break;
   } else {
    $$in = $9;
   }
  }
 } else {
  $8 = ($2|0)==(0);
  if (!($8)) {
   $$01417 = $1;$$019 = $0;$$118 = $2;
   while(1) {
    $14 = (($$118) + -1)|0;
    $15 = ((($$01417)) + 4|0);
    $16 = HEAP32[$$01417>>2]|0;
    $17 = ((($$019)) + 4|0);
    HEAP32[$$019>>2] = $16;
    $18 = ($14|0)==(0);
    if ($18) {
     break;
    } else {
     $$01417 = $15;$$019 = $17;$$118 = $14;
    }
   }
  }
 }
 return ($0|0);
}
function _mkdtemp($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = ($1>>>0)<(6);
 L1: do {
  if ($2) {
   label = 3;
  } else {
   $3 = (($0) + ($1)|0);
   $4 = ((($3)) + -6|0);
   $5 = (_memcmp($4,184946,6)|0);
   $6 = ($5|0)==(0);
   if ($6) {
    $$0 = 100;
    while(1) {
     (___randname($4)|0);
     $8 = (_mkdir($0,448)|0);
     $9 = ($8|0)==(0);
     if ($9) {
      $$014 = $0;
      break L1;
     }
     $10 = (($$0) + -1)|0;
     $11 = ($10|0)==(0);
     if ($11) {
      break;
     }
     $12 = (___errno_location()|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)==(17);
     if ($14) {
      $$0 = $10;
     } else {
      break;
     }
    }
    ;HEAP8[$4>>0]=HEAP8[184946>>0]|0;HEAP8[$4+1>>0]=HEAP8[184946+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[184946+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[184946+3>>0]|0;HEAP8[$4+4>>0]=HEAP8[184946+4>>0]|0;HEAP8[$4+5>>0]=HEAP8[184946+5>>0]|0;
    $$014 = 0;
   } else {
    label = 3;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 22;
  $$014 = 0;
 }
 return ($$014|0);
}
function _mkostemp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___mkostemps($0,0,$1)|0);
 return ($2|0);
}
function ___mkostemps($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = (_strlen($0)|0);
 $4 = ($3>>>0)<(6);
 $5 = (($3) + -6)|0;
 $6 = ($5>>>0)<($1>>>0);
 $or$cond = $4 | $6;
 L1: do {
  if ($or$cond) {
   label = 3;
  } else {
   $7 = (($0) + ($3)|0);
   $8 = (0 - ($1))|0;
   $9 = (($7) + ($8)|0);
   $10 = ((($9)) + -6|0);
   $11 = (_memcmp($10,184946,6)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    $14 = $2 & -2097348;
    $15 = $14 | 194;
    $$0 = 100;
    while(1) {
     (___randname($10)|0);
     HEAP32[$vararg_buffer>>2] = 384;
     $16 = (_open($0,$15,$vararg_buffer)|0);
     $17 = ($16|0)>(-1);
     if ($17) {
      $$1 = $16;
      break L1;
     }
     $18 = (($$0) + -1)|0;
     $19 = ($18|0)==(0);
     if ($19) {
      break;
     }
     $20 = (___errno_location()|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(17);
     if ($22) {
      $$0 = $18;
     } else {
      break;
     }
    }
    ;HEAP8[$10>>0]=HEAP8[184946>>0]|0;HEAP8[$10+1>>0]=HEAP8[184946+1>>0]|0;HEAP8[$10+2>>0]=HEAP8[184946+2>>0]|0;HEAP8[$10+3>>0]=HEAP8[184946+3>>0]|0;HEAP8[$10+4>>0]=HEAP8[184946+4>>0]|0;HEAP8[$10+5>>0]=HEAP8[184946+5>>0]|0;
    $$1 = -1;
   } else {
    label = 3;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $13 = (___errno_location()|0);
  HEAP32[$13>>2] = 22;
  $$1 = -1;
 }
 STACKTOP = sp;return ($$1|0);
}
function _mkstemp($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___mkostemps($0,0,0)|0);
 return ($1|0);
}
function _mkstemps($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___mkostemps($0,$1,0)|0);
 return ($2|0);
}
function _mktemp($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $1 = sp;
 $2 = (_strlen($0)|0);
 $3 = ($2>>>0)<(6);
 do {
  if ($3) {
   label = 3;
  } else {
   $4 = (($0) + ($2)|0);
   $5 = ((($4)) + -6|0);
   $6 = (_memcmp($5,184946,6)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $$0 = 100;
    while(1) {
     (___randname($5)|0);
     $9 = (_stat($0,$1)|0);
     $10 = ($9|0)==(0);
     if (!($10)) {
      break;
     }
     $14 = (($$0) + -1)|0;
     $15 = ($14|0)==(0);
     if ($15) {
      label = 8;
      break;
     } else {
      $$0 = $14;
     }
    }
    if ((label|0) == 8) {
     HEAP8[$0>>0] = 0;
     $16 = (___errno_location()|0);
     HEAP32[$16>>2] = 17;
     break;
    }
    $11 = (___errno_location()|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(2);
    if (!($13)) {
     HEAP8[$0>>0] = 0;
    }
   } else {
    label = 3;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $8 = (___errno_location()|0);
  HEAP32[$8>>2] = 22;
  HEAP8[$0>>0] = 0;
 }
 STACKTOP = sp;return ($0|0);
}
function _cfgetospeed($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 4111;
 return ($3|0);
}
function _cfgetispeed($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_cfgetospeed($0)|0);
 return ($1|0);
}
function _cfmakeraw($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -1516;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & -2;
 HEAP32[$3>>2] = $5;
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & -32844;
 HEAP32[$6>>2] = $8;
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & -305;
 $12 = $11 | 48;
 HEAP32[$9>>2] = $12;
 $13 = ((($0)) + 23|0);
 HEAP8[$13>>0] = 1;
 $14 = ((($0)) + 22|0);
 HEAP8[$14>>0] = 0;
 return;
}
function _cfsetospeed($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & -4112;
 $3 = ($2|0)==(0);
 if ($3) {
  $5 = ((($0)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & -4112;
  $8 = $7 | $1;
  HEAP32[$5>>2] = $8;
  $$0 = 0;
 } else {
  $4 = (___errno_location()|0);
  HEAP32[$4>>2] = 22;
  $$0 = -1;
 }
 return ($$0|0);
}
function _cfsetispeed($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  $4 = 0;
 } else {
  $3 = (_cfsetospeed($0,$1)|0);
  $4 = $3;
 }
 return ($4|0);
}
function _tcdrain($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 21513;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 1;
 $1 = (___syscall54(54,($vararg_buffer|0))|0);
 $2 = (___syscall_ret($1)|0);
 STACKTOP = sp;return ($2|0);
}
function _tcflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (_ioctl($0,21514,$vararg_buffer)|0);
 STACKTOP = sp;return ($2|0);
}
function _tcflush($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (_ioctl($0,21515,$vararg_buffer)|0);
 STACKTOP = sp;return ($2|0);
}
function _tcgetattr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (_ioctl($0,21505,$vararg_buffer)|0);
 $3 = ($2|0)!=(0);
 $$ = $3 << 31 >> 31;
 STACKTOP = sp;return ($$|0);
}
function _tcgetsid($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = sp + 4|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (_ioctl($0,21545,$vararg_buffer)|0);
 $3 = ($2|0)<(0);
 $4 = HEAP32[$1>>2]|0;
 $$0 = $3 ? -1 : $4;
 STACKTOP = sp;return ($$0|0);
}
function _tcsendbreak($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = 0;
 $2 = (_ioctl($0,21513,$vararg_buffer)|0);
 STACKTOP = sp;return ($2|0);
}
function _acct($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall51(51,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _chdir($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall12(12,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _chown($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $0;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall212(212,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _ctermid($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = 184953;
 } else {
  dest=$0; src=184953; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $2 = $0;
 }
 return ($2|0);
}
function _dup($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (___syscall41(41,($vararg_buffer|0))|0);
 $2 = (___syscall_ret($1)|0);
 STACKTOP = sp;return ($2|0);
}
function _faccessat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$016 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1216|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1216|0);
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = sp + 184|0;
 $5 = sp + 56|0;
 $6 = sp + 44|0;
 $7 = sp + 40|0;
 L1: do {
  switch ($3|0) {
  case 0:  {
   label = 4;
   break;
  }
  case 512:  {
   $8 = (_getuid()|0);
   $9 = (_geteuid()|0);
   $10 = ($8|0)==($9|0);
   if ($10) {
    $11 = (_getgid()|0);
    $12 = (_getegid()|0);
    $13 = ($11|0)==($12|0);
    if ($13) {
     label = 4;
     break L1;
    }
   }
   HEAP32[$6>>2] = $0;
   $18 = ((($6)) + 4|0);
   HEAP32[$18>>2] = $1;
   $19 = ((($6)) + 8|0);
   HEAP32[$19>>2] = $2;
   ___block_all_sigs(($5|0));
   $20 = ((($4)) + 1024|0);
   $21 = (___clone((39|0),($20|0),0,($6|0),($vararg_buffer4|0))|0);
   $22 = ($21|0)>(0);
   if ($22) {
    $23 = $7;
    while(1) {
     HEAP32[$vararg_buffer6>>2] = $21;
     $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
     HEAP32[$vararg_ptr9>>2] = $23;
     $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
     HEAP32[$vararg_ptr10>>2] = -2147483648;
     $vararg_ptr11 = ((($vararg_buffer6)) + 12|0);
     HEAP32[$vararg_ptr11>>2] = 0;
     (___syscall114(114,($vararg_buffer6|0))|0);
     $24 = HEAP32[$7>>2]|0;
     $25 = $24 & 127;
     $26 = ($25|0)==(0);
     if ($26) {
      label = 10;
      break;
     }
     $27 = $24 & 65535;
     $28 = (($27) + -1)|0;
     $29 = ($28>>>0)>(254);
     if (!($29)) {
      $$0 = -16;
      break;
     }
    }
    if ((label|0) == 10) {
     $30 = $24 >>> 8;
     $31 = $30 & 255;
     $32 = (24180 + ($31<<2)|0);
     $33 = HEAP32[$32>>2]|0;
     $$0 = $33;
    }
    $$1 = $$0;
   } else {
    $$1 = -16;
   }
   ___restore_sigs(($5|0));
   $34 = (___syscall_ret($$1)|0);
   $$016 = $34;
   break;
  }
  default: {
   $17 = (___syscall_ret(-22)|0);
   $$016 = $17;
  }
  }
 } while(0);
 if ((label|0) == 4) {
  $14 = $1;
  HEAP32[$vararg_buffer>>2] = $0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $14;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $2;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $3;
  $15 = (___syscall307(307,($vararg_buffer|0))|0);
  $16 = (___syscall_ret($15)|0);
  $$016 = $16;
 }
 STACKTOP = sp;return ($$016|0);
}
function _getuid() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (___syscall199(199,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _geteuid() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (___syscall201(201,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _getgid() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (___syscall200(200,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _getegid() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (___syscall202(202,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _checker($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$013 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr3 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = (___syscall202(202,($vararg_buffer|0))|0);
 HEAP32[$vararg_buffer1>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr3>>2] = -1;
 $2 = (___syscall204(204,($vararg_buffer1|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = (___syscall201(201,($vararg_buffer4|0))|0);
  HEAP32[$vararg_buffer6>>2] = $4;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = -1;
  $5 = (___syscall203(203,($vararg_buffer6|0))|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer10>>2] = 1;
  (___syscall1(1,($vararg_buffer10|0))|0);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$vararg_buffer13>>2] = $7;
 $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
 HEAP32[$vararg_ptr16>>2] = $9;
 $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
 HEAP32[$vararg_ptr17>>2] = $11;
 $vararg_ptr18 = ((($vararg_buffer13)) + 12|0);
 HEAP32[$vararg_ptr18>>2] = 0;
 $12 = (___syscall307(307,($vararg_buffer13|0))|0);
 $$013 = 0;
 while(1) {
  $13 = (24180 + ($$013<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($12|0)==($14|0);
  if ($15) {
   $$0$lcssa = $$013;
   break;
  }
  $16 = (($$013) + 1)|0;
  $17 = ($16>>>0)<(13);
  if ($17) {
   $$013 = $16;
  } else {
   $$0$lcssa = $16;
   break;
  }
 }
 STACKTOP = sp;return ($$0$lcssa|0);
}
function _fchdir($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 20|0;
 HEAP32[$vararg_buffer>>2] = $0;
 $2 = (___syscall133(133,($vararg_buffer|0))|0);
 $3 = ($2|0)==(-9);
 if ($3) {
  HEAP32[$vararg_buffer1>>2] = $0;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 1;
  $4 = (___syscall221(221,($vararg_buffer1|0))|0);
  $5 = ($4|0)<(0);
  if ($5) {
   label = 3;
  } else {
   ___procfdname($1,$0);
   $7 = $1;
   HEAP32[$vararg_buffer5>>2] = $7;
   $8 = (___syscall12(12,($vararg_buffer5|0))|0);
   $9 = (___syscall_ret($8)|0);
   $$0 = $9;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $6 = (___syscall_ret($2)|0);
  $$0 = $6;
 }
 STACKTOP = sp;return ($$0|0);
}
function _fchown($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 36|0;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall207(207,($vararg_buffer|0))|0);
 $5 = ($4|0)==(-9);
 if ($5) {
  HEAP32[$vararg_buffer3>>2] = $0;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 1;
  $6 = (___syscall221(221,($vararg_buffer3|0))|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 3;
  } else {
   ___procfdname($3,$0);
   $9 = $3;
   HEAP32[$vararg_buffer7>>2] = $9;
   $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
   HEAP32[$vararg_ptr10>>2] = $1;
   $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
   HEAP32[$vararg_ptr11>>2] = $2;
   $10 = (___syscall212(212,($vararg_buffer7|0))|0);
   $11 = (___syscall_ret($10)|0);
   $$0 = $11;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $8 = (___syscall_ret($4)|0);
  $$0 = $8;
 }
 STACKTOP = sp;return ($$0|0);
}
function _fchownat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $4;
 $6 = (___syscall298(298,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _fdatasync($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (___syscall148(148,($vararg_buffer|0))|0);
 $2 = (___syscall_ret($1)|0);
 STACKTOP = sp;return ($2|0);
}
function _fsync($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (___syscall118(118,($vararg_buffer|0))|0);
 $2 = (___syscall_ret($1)|0);
 STACKTOP = sp;return ($2|0);
}
function _ftruncate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $1 >> 31;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $2;
 $3 = (___syscall194(194,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _getgroups($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 $3 = (___syscall205(205,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _gethostname($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0$lcssa = 0, $$013 = 0, $$014 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $2 = sp;
 $3 = (_uname($2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ($1>>>0)<(65);
  $$ = $5 ? $1 : 65;
  $6 = ($$|0)==(0);
  L3: do {
   if ($6) {
    $$0$lcssa = 0;
   } else {
    $$014 = 0;
    while(1) {
     $7 = (((($2)) + 65|0) + ($$014)|0);
     $8 = HEAP8[$7>>0]|0;
     $9 = (($0) + ($$014)|0);
     HEAP8[$9>>0] = $8;
     $10 = ($8<<24>>24)==(0);
     if ($10) {
      $$0$lcssa = $$014;
      break L3;
     }
     $11 = (($$014) + 1)|0;
     $12 = ($11>>>0)<($$>>>0);
     if ($12) {
      $$014 = $11;
     } else {
      $$0$lcssa = $11;
      break;
     }
    }
   }
  } while(0);
  $13 = ($$0$lcssa|0)==($$|0);
  if ($13) {
   $14 = (($$) + -1)|0;
   $15 = (($0) + ($14)|0);
   HEAP8[$15>>0] = 0;
   $$013 = 0;
  } else {
   $$013 = 0;
  }
 } else {
  $$013 = -1;
 }
 STACKTOP = sp;return ($$013|0);
}
function _getlogin() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_getenv((184962|0))|0);
 return ($0|0);
}
function _getlogin_r($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_getlogin()|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 6;
 } else {
  $4 = (_strlen($2)|0);
  $5 = ($4>>>0)<($1>>>0);
  if ($5) {
   (_strcpy($0,$2)|0);
   $$0 = 0;
  } else {
   $$0 = 34;
  }
 }
 return ($$0|0);
}
function _getpgid($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (___syscall132(132,($vararg_buffer|0))|0);
 $2 = (___syscall_ret($1)|0);
 STACKTOP = sp;return ($2|0);
}
function _getpgrp() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = 0;
 $0 = (___syscall132(132,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _getppid() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (___syscall64(64,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _getsid($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (___syscall147(147,($vararg_buffer|0))|0);
 $2 = (___syscall_ret($1)|0);
 STACKTOP = sp;return ($2|0);
}
function _isatty($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $1 = sp + 16|0;
 $2 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 21523;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $3 = (___syscall54(54,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 $5 = ($4|0)==(0);
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function _lchown($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $0;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall198(198,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _link($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall9(9,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _linkat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $1;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $4;
 $7 = (___syscall303(303,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 STACKTOP = sp;return ($8|0);
}
function _nice($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (___syscall34(34,($vararg_buffer|0))|0);
 $2 = (___syscall_ret($1)|0);
 STACKTOP = sp;return ($2|0);
}
function _pause() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (___syscall29(29,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _posix_close($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_close($0)|0);
 return ($2|0);
}
function _pread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $1;
 $5 = $3 >> 31;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 0;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $3;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $5;
 $6 = (___syscall180(180,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _preadv($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = 0;
 $5 = (___syscall333(333,($vararg_buffer|0))|0);
 $6 = (___syscall_ret($5)|0);
 STACKTOP = sp;return ($6|0);
}
function _pwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $1;
 $5 = $3 >> 31;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 0;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $3;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $5;
 $6 = (___syscall181(181,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _pwritev($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = 0;
 $5 = (___syscall334(334,($vararg_buffer|0))|0);
 $6 = (___syscall_ret($5)|0);
 STACKTOP = sp;return ($6|0);
}
function _readlinkat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $4 = $1;
 $5 = $2;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $5;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $6 = (___syscall305(305,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _readv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall145(145,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _renameat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $4 = $1;
 $5 = $3;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $5;
 $6 = (___syscall302(302,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _rmdir($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall40(40,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _setegid($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___setxid(210,-1,$0,-1)|0);
 return ($1|0);
}
function ___setxid($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 HEAP32[$4>>2] = $1;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = $3;
 $7 = ((($4)) + 12|0);
 HEAP32[$7>>2] = $0;
 $8 = ((($4)) + 16|0);
 HEAP32[$8>>2] = -1;
 ___synccall(40,$4);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = 0;
 } else {
  $11 = ($9|0)>(0);
  if ($11) {
   $12 = (___errno_location()|0);
   HEAP32[$12>>2] = $9;
   $$0 = -1;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _do_setxid($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  HEAP32[$1>>2] = 1;
 }
 return;
}
function _seteuid($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___setxid(208,-1,$0,-1)|0);
 return ($1|0);
}
function _setgid($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___setxid(214,$0,0,0)|0);
 return ($1|0);
}
function _setpgid($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $2 = (___syscall57(57,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _setpgrp() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_setpgid(0,0)|0);
 return ($0|0);
}
function _setregid($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___setxid(204,$0,$1,0)|0);
 return ($2|0);
}
function _setresgid($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___setxid(210,$0,$1,$2)|0);
 return ($3|0);
}
function _setresuid($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___setxid(208,$0,$1,$2)|0);
 return ($3|0);
}
function _setreuid($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___setxid(203,$0,$1,0)|0);
 return ($2|0);
}
function _setuid($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___setxid(213,$0,0,0)|0);
 return ($1|0);
}
function _sleep($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = (_nanosleep(($1|0),($1|0))|0);
 $4 = ($3|0)==(0);
 $5 = HEAP32[$1>>2]|0;
 $$0 = $4 ? 0 : $5;
 STACKTOP = sp;return ($$0|0);
}
function _symlink($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall83(83,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _symlinkat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $2;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $4;
 $5 = (___syscall304(304,($vararg_buffer|0))|0);
 $6 = (___syscall_ret($5)|0);
 STACKTOP = sp;return ($6|0);
}
function _sync() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 (___syscall36(36,($vararg_buffer|0))|0);
 STACKTOP = sp;return;
}
function _tcgetpgrp($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = sp + 4|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (_ioctl($0,21519,$vararg_buffer)|0);
 $3 = ($2|0)<(0);
 $4 = HEAP32[$1>>2]|0;
 $$0 = $3 ? -1 : $4;
 STACKTOP = sp;return ($$0|0);
}
function _tcsetpgrp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = sp + 4|0;
 HEAP32[$2>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 $3 = (_ioctl($0,21520,$vararg_buffer)|0);
 STACKTOP = sp;return ($3|0);
}
function _truncate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1 >> 31;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $4 = (___syscall193(193,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _ttyname($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_ttyname_r($0,189634,32)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 189634;
 } else {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $1;
  $$0 = 0;
 }
 return ($$0|0);
}
function _ttyname_r($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = (_isatty($0)|0);
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $$0 = 25;
  } else {
   ___procfdname($3,$0);
   $6 = (_readlink($3,$1,$2)|0);
   $7 = ($6|0)<(0);
   if ($7) {
    $8 = (___errno_location()|0);
    $9 = HEAP32[$8>>2]|0;
    $$0 = $9;
    break;
   }
   $10 = ($6|0)==($2|0);
   if ($10) {
    $$0 = 34;
   } else {
    $11 = (($1) + ($6)|0);
    HEAP8[$11>>0] = 0;
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ualarm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = 0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 12|0);
 HEAP32[$5>>2] = $0;
 (_setitimer(0,($2|0),($2|0))|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = ($6*1000000)|0;
 $8 = HEAP32[$5>>2]|0;
 $9 = (($7) + ($8))|0;
 STACKTOP = sp;return ($9|0);
}
function _unlinkat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall301(301,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _writev($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall146(146,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function runPostSets() {
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
    $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
    $4$1 = tempRet0;
    $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
    $7$0 = $2$0 ^ $1$0;
    $7$1 = $2$1 ^ $1$1;
    $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
    $10$0 = _i64Subtract($8$0 ^ $7$0 | 0, tempRet0 ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
    return $10$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
    $4$1 = tempRet0;
    $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
    ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
    $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0 | 0, HEAP32[$rem + 4 >> 2] ^ $1$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
    $10$1 = tempRet0;
    STACKTOP = __stackBase__;
    return (tempRet0 = $10$1, $10$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_bswap_i16(x) {
    x = x|0;
    return (((x&0xff)<<8) | ((x>>8)&0xff))|0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _round(d) {
    d = +d;
    return d >= +0 ? +Math_floor(d + +0.5) : +Math_ceil(d - +0.5);
}
function _llvm_rint_f64(f) {
    f = +f;
    return (f - +Math_floor(f) != .5) ? +_round(f) : +_round(f / +2) * +2;
}
function _llvm_round_f64(d) {
    d = +d;
    return d >= +0 ? +Math_floor(d + +0.5) : +Math_ceil(d - +0.5);
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _rintf(f) {
    f = +f;
    return (f - +Math_floor(f) != .5) ? +_round(f) : +_round(f / +2) * +2;
}
function _roundf(d) {
    d = +d;
    return d >= +0 ? +Math_floor(d + +0.5) : +Math_ceil(d - +0.5);
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&63](a1|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&31](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&0](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&31]();
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&63](a1|0);
}

function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(1);return 0;
}
function b2(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(2);return 0;
}
function b3(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(3);return 0;
}
function b4(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(4);return 0;
}
function b5() {
 ; nullFunc_v(5);
}
function b6(p0) {
 p0 = p0|0; nullFunc_vi(6);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,___stdio_close,b0,b0,b0,b0,b0,_dummy_565,b0,b0,___strdup,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_mclose
,b0,b0,_ms_close,b0,b0,_wms_close,b0,b0,b0,b0,_checker,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_iii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,___fdopen,b1,_netlink_msg_to_ifaddr,_netlink_msg_to_nameindex,_addrcmp,b1,b1,b1,_ignore_err,_sort,_tre_compare_lit,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_iiii = [b2,b2,___stdio_write,___stdio_seek,___stdio_read,___stdout_write,_sn_write,b2,b2,_wrap_write,b2,_do_read,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_mread,_mwrite,_mseek,b2
,_ms_write,_ms_seek,b2,_wms_write,_wms_seek,b2,_sw_write,_wstring_read,_do_read_744,_do_read_747,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_iiiii = [b3];
var FUNCTION_TABLE_iiiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_dns_parse_callback,b4,___dn_expand,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_v = [b5,b5,b5,b5,b5,b5,b5,b5,_dummy_408,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,___stdio_exit,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_vi = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_do_setrlimit,b6,_cleanup,b6,b6,b6,b6,_cleanup_494,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_do_setxid,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];

  return { ___divdi3: ___divdi3, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___remdi3: ___remdi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Ashr: _bitshift64Ashr, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _controller_10msec_timer: _controller_10msec_timer, _controller_handle: _controller_handle, _controller_init: _controller_init, _fflush: _fflush, _free: _free, _htons: _htons, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i16: _llvm_bswap_i16, _llvm_bswap_i32: _llvm_bswap_i32, _llvm_rint_f64: _llvm_rint_f64, _llvm_round_f64: _llvm_round_f64, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _rintf: _rintf, _roundf: _roundf, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real____divdi3 = asm["___divdi3"]; asm["___divdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____divdi3.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____remdi3 = asm["___remdi3"]; asm["___remdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____remdi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Ashr = asm["_bitshift64Ashr"]; asm["_bitshift64Ashr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Ashr.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__controller_10msec_timer = asm["_controller_10msec_timer"]; asm["_controller_10msec_timer"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__controller_10msec_timer.apply(null, arguments);
};

var real__controller_handle = asm["_controller_handle"]; asm["_controller_handle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__controller_handle.apply(null, arguments);
};

var real__controller_init = asm["_controller_init"]; asm["_controller_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__controller_init.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__htons = asm["_htons"]; asm["_htons"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__htons.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i16 = asm["_llvm_bswap_i16"]; asm["_llvm_bswap_i16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i16.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__llvm_rint_f64 = asm["_llvm_rint_f64"]; asm["_llvm_rint_f64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_rint_f64.apply(null, arguments);
};

var real__llvm_round_f64 = asm["_llvm_round_f64"]; asm["_llvm_round_f64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_round_f64.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__rintf = asm["_rintf"]; asm["_rintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__rintf.apply(null, arguments);
};

var real__roundf = asm["_roundf"]; asm["_roundf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__roundf.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var ___divdi3 = Module["___divdi3"] = asm["___divdi3"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___remdi3 = Module["___remdi3"] = asm["___remdi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _controller_10msec_timer = Module["_controller_10msec_timer"] = asm["_controller_10msec_timer"];
var _controller_handle = Module["_controller_handle"] = asm["_controller_handle"];
var _controller_init = Module["_controller_init"] = asm["_controller_init"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _htons = Module["_htons"] = asm["_htons"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i16 = Module["_llvm_bswap_i16"] = asm["_llvm_bswap_i16"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _llvm_rint_f64 = Module["_llvm_rint_f64"] = asm["_llvm_rint_f64"];
var _llvm_round_f64 = Module["_llvm_round_f64"] = asm["_llvm_round_f64"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _rintf = Module["_rintf"] = asm["_rintf"];
var _roundf = Module["_roundf"] = asm["_roundf"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["getValue"] = getValue;
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["UTF8ToString"] = UTF8ToString;
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



"use strict";

// This javascript code initializes the demo on DOMContentLoaded event.

// Document elements expected to exist:
//   <canvas id="cvs"></canvas>
//   <pre id="midiLog"></pre>

// Global state:
var ui_modified = false;
var fsw_state = 0;
var led_state_top = 0;
var led_state_bot = 0;
var lcd_rows = ['01234567890123456789', '01234567890123456789', '01234567890123456789', '01234567890123456789'];
var lcd_rows_text_ptrs = [0,0,0,0];
var label_rows_text_ptrs = [0,0];
/** @const */var flash_size = 4096;
var flash = null;

var midiAccess = null;
var midiSupport = null;
var midiOutput = null;
var sysexMsg = null;

// ----------------------------- UI code:

var midiLog;
var midiLogHeight = 240;

var cvs, ctx;
var dpi = 50;
/** @const */var mmToIn = 0.0393701;

/** @const */var labels = [
    ["CH1", "CH1S", "CH2", "CH2S", "CH3", "CH3S", "TAP/STORE", "CANCEL"],
    ["COMP", "FILTER", "PITCH", "CHORUS", "DELAY", "REVERB", "PREV", "NEXT"]
];

/** @const */var keylabels = [
    ["A", "S", "D", "F", "G", "H", "J", "K"],
    ["Q", "W", "E", "R", "T", "Y", "U", "I"]
];

// Total width, height in inches:
/** @const */var inWidth = 20.078;
/** @const */var inHeight = 6.305;

// Position and spacing of footswitches (from centers):
/** @const */var hLeft = 1.0;
/** @const */var hSpacing = 2.5714285714285714285714285714286;

/** @const */var vStart = 5.6;
/** @const */var vSpacing = 2.15;

/** @const */var vLEDOffset = -0.65;

/** @const */var inLEDOuterDiam = (12 /*mm*/ * mmToIn);
/** @const */var inFswOuterDiam = (12.2 /*mm*/ * mmToIn);
/** @const */var inFswInnerDiam = (10 /*mm*/ * mmToIn);

function dpi_MoveTo(X, Y) {
    ctx.moveTo(X * dpi, Y * dpi);
}

function dpi_LineTo(X, Y) {
    ctx.lineTo(X * dpi, Y * dpi);
}

function dpi_CenterCircle(cX, cY, r) {
    ctx.arc(cX * dpi, cY * dpi, r * dpi, 0, 2 * Math.PI);
}

function dpi_FillRect(l, t, r, b) {
    ctx.fillRect(l * dpi, t * dpi, (r - l) * dpi, (b - t) * dpi);
}

function dpi_FillAndStrokeCircle(cX, cY, r) {
    ctx.beginPath();
    ctx.arc(cX * dpi, cY * dpi, r * dpi, 0, 2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(cX * dpi, cY * dpi, r * dpi, 0, 2 * Math.PI);
    ctx.stroke();
}

function dpi_TextOut(nXStart, nYStart, lpString) {
    ctx.fillText(lpString, nXStart * dpi, nYStart * dpi);
}

function renderUI() {
    ctx.save();
    ctx.clearRect(0, 0, cvs.width, cvs.height);

    ctx.fillStyle = "#000";
    ctx.fillRect(0, 0, cvs.width, cvs.height);
    ctx.strokeStyle = "#808080";
    ctx.strokeRect(0, 0, cvs.width, cvs.height);

    var h, inH, v, inV;

    if (false) {
        // draw grid:
        ctx.strokeStyle = "#202020";
        h = 0;
        for (inH = 0; inH <= inWidth; inH += 0.1, h = (h + 1) % 10) {
            if (h == 0) {
                ctx.lineWidth = 2;
            } else {
                ctx.lineWidth = 1;
            }
            ctx.beginPath();
            dpi_MoveTo(inH, 0);
            dpi_LineTo(inH, inHeight);
            ctx.stroke();

            v = 0;
            for (inV = 0; inV <= inHeight; inV += 0.1, v = (v + 1) % 10) {
                if (v == 0) {
                    ctx.lineWidth = 2;
                } else {
                    ctx.lineWidth = 1;
                }
                ctx.beginPath();
                dpi_MoveTo(0, inV);
                dpi_LineTo(inWidth, inV);
                ctx.stroke();
            }
        }
    }

    // draw LCD display (4x20 chars):
    /** @const */var lcdCenterX = (inWidth * 0.5);
    /** @const */var lcdCenterY = 1.25;

    ctx.fillStyle = "#000090";
    dpi_FillRect(lcdCenterX - ((76 * mmToIn) * 0.5), lcdCenterY - (25.2 * mmToIn * 0.5), lcdCenterX + ((76 * mmToIn) * 0.5), lcdCenterY + (25.2 * mmToIn * 0.5));

    ctx.textAlign = "left";
    ctx.textBaseline = "top";
    ctx.font = '' + ((7/40)*dpi).toString() + 'pt Courier New';
    ctx.lineWidth = 1;
    ctx.fillStyle = "#C0C0C0";
    for (v = 0; v < 4; ++v) {
        if (lcd_rows[v] === undefined) continue;
        dpi_TextOut(lcdCenterX - (70.4 * mmToIn * 0.5), lcdCenterY - (20.8 * mmToIn * 0.5) + (v * 4.76 * mmToIn), lcd_rows[v]);
    }

    ctx.textAlign = "center";
    ctx.font = '' + ((9/40)*dpi).toString() + 'pt Arial Bold';

    // draw 2 rows of foot switches and LEDs, starting at bottom row and moving up:
    for (v = 0; v < 2; ++v) {
        var led_state = (v == 0) ? led_state_bot : led_state_top;

        // draw 8 evenly spaced foot-switches
        var b = 1 << (v * 8);
        for (h = 0; h < 8; ++h, b <<= 1) {
            ctx.lineWidth = 2;
            ctx.strokeStyle = "#808080";
            ctx.fillStyle = "#C0C0C0";
            dpi_FillAndStrokeCircle(hLeft + (h * hSpacing), vStart - (v * vSpacing), inFswOuterDiam * 0.5);

            ctx.lineWidth = 1;
            dpi_FillAndStrokeCircle(hLeft + (h * hSpacing), vStart - (v * vSpacing), inFswInnerDiam * 0.5);
            if (fsw_state & b) {
                // Foot switch is depressed:
                ctx.fillStyle = "#606060";
                dpi_FillAndStrokeCircle(hLeft + (h * hSpacing), vStart - (v * vSpacing), inFswOuterDiam * 0.5);
            }

            // Set label color:
            if (v == 0 && h < 6)
                ctx.fillStyle = "#4040C0";
            else if (v == 1 && h < 6)
                ctx.fillStyle = "#40C040";
            else
                ctx.fillStyle = "#E0E0E0";

            ctx.lineWidth = 1;
            ctx.textBaseline = "top";
            dpi_TextOut(hLeft + (h * hSpacing), vStart + 0.25 - (v * vSpacing), labels[v][h]);

            // Label w/ the keyboard key:
            ctx.fillStyle = "#601010";
            ctx.textBaseline = "alphabetic";
            dpi_TextOut(hLeft + (h * hSpacing), vStart + 0.10 - (v * vSpacing), keylabels[v][h]);
        }

        // 8 evenly spaced 8mm (203.2mil) LEDs above 1-4 preset switches

        // draw inactive LEDs:
        ctx.lineWidth = 2;
        ctx.strokeStyle = "#202020";
        ctx.fillStyle = "#081E03";
        b = 1;
        for (h = 0; h < 8; ++h, b <<= 1) {
            if ((led_state & b) == 0) {
                dpi_FillAndStrokeCircle(hLeft + (h * hSpacing), vStart + vLEDOffset - (v * vSpacing), inLEDOuterDiam * 0.5);
            }
        }

        // draw active LEDs:
        ctx.fillStyle = "#19FA05";
        b = 1;
        for (h = 0; h < 8; ++h, b <<= 1) {
            if (led_state & b) {
                dpi_FillAndStrokeCircle(hLeft + (h * hSpacing), vStart + vLEDOffset - (v * vSpacing), inLEDOuterDiam * 0.5);
            }
        }
    }

    ctx.restore();
}

function keydown(e) {
    if (e.ctrlKey || e.altKey || e.shiftKey || e.metaKey) return false;

    // ASDFGHJK for bottom row:
    if (e.keyCode == 65) fsw_state |= 1;
    else if (e.keyCode == 83) fsw_state |= 2;
    else if (e.keyCode == 68) fsw_state |= 4;
    else if (e.keyCode == 70) fsw_state |= 8;
    else if (e.keyCode == 71) fsw_state |= 16;
    else if (e.keyCode == 72) fsw_state |= 32;
    else if (e.keyCode == 74) fsw_state |= 64;
    else if (e.keyCode == 75) fsw_state |= 128;
        // QWERTYUI for top row:
    else if (e.keyCode == 81) fsw_state |= 256;
    else if (e.keyCode == 87) fsw_state |= 512;
    else if (e.keyCode == 69) fsw_state |= 1024;
    else if (e.keyCode == 82) fsw_state |= 2048;
    else if (e.keyCode == 84) fsw_state |= 4096;
    else if (e.keyCode == 89) fsw_state |= 8192;
    else if (e.keyCode == 85) fsw_state |= 16384;
    else if (e.keyCode == 73) fsw_state |= 32768;
    else return true;

    ui_modified = true;
    e.preventDefault();
    return false;
}

function keyup(e) {
    if (e.ctrlKey || e.altKey || e.shiftKey || e.metaKey) return false;

    // ASDFGHJK for bottom row:
    if (e.keyCode == 65) fsw_state &= 1 ^ 65535;
    else if (e.keyCode == 83) fsw_state &= 2 ^ 65535;
    else if (e.keyCode == 68) fsw_state &= 4 ^ 65535;
    else if (e.keyCode == 70) fsw_state &= 8 ^ 65535;
    else if (e.keyCode == 71) fsw_state &= 16 ^ 65535;
    else if (e.keyCode == 72) fsw_state &= 32 ^ 65535;
    else if (e.keyCode == 74) fsw_state &= 64 ^ 65535;
    else if (e.keyCode == 75) fsw_state &= 128 ^ 65535;
        // QWERTYUI for top row:
    else if (e.keyCode == 81) fsw_state &= 256 ^ 65535;
    else if (e.keyCode == 87) fsw_state &= 512 ^ 65535;
    else if (e.keyCode == 69) fsw_state &= 1024 ^ 65535;
    else if (e.keyCode == 82) fsw_state &= 2048 ^ 65535;
    else if (e.keyCode == 84) fsw_state &= 4096 ^ 65535;
    else if (e.keyCode == 89) fsw_state &= 8192 ^ 65535;
    else if (e.keyCode == 85) fsw_state &= 16384 ^ 65535;
    else if (e.keyCode == 73) fsw_state &= 32768 ^ 65535;
    else return true;

    ui_modified = true;
    e.preventDefault();
    return false;
}

// mouse button held down inside canvas:
function mousedown(e) {
    var old_fsw_state = fsw_state;

    // FF does not have offsetX/Y pairs.
    // e.offsetX, e.offsetY is relative mouse position from top-left of canvas:
    var hasOffset = e.offsetX != undefined,
        // TODO: should really recurse into e.target for a general solution
        ex = hasOffset ? e.offsetX : (e.layerX - e.target.offsetLeft),
        ey = hasOffset ? e.offsetY : (e.layerY - e.target.offsetTop);
    var x = ex / dpi, y = ey / dpi;
    var r_sqr = (inFswOuterDiam * 0.5) * (inFswOuterDiam * 0.5);
    var dist;

    // Find out which foot-switch we're nearest to:
    var h = 0, v = 0, b = 0;
    for (v = 0; v < 2; ++v) {
        var b = 1 << (v * 8);
        for (h = 0; h < 8; ++h, b <<= 1) {
            dist = (x - (hLeft + (h * hSpacing))) * (x - (hLeft + (h * hSpacing))) + (y - (vStart - (v * vSpacing))) * (y - (vStart - (v * vSpacing)));
            if (dist < r_sqr) {
                fsw_state |= b;
            }
        }
    }

    if (old_fsw_state !== fsw_state) ui_modified = true;
}

// mouse button released inside canvas:
function mouseup(e) {
    fsw_state = 0;
    ui_modified = true;
}

function touchstart(e) {
    e.preventDefault();

    var old_fsw_state = fsw_state;

    var target = e.target;
    var r_sqr = (inFswOuterDiam * 0.5) * (inFswOuterDiam * 0.5) * 3;
    var dist;

    var t = e.targetTouches;
    for (i = 0; i < t.length; i++) {
        var ex = (t[i].pageX - target.offsetLeft),
            ey = (t[i].pageY - target.offsetTop);
        var x = ex / dpi, y = ey / dpi;

        // Find out which foot-switch we're nearest to:
        var h = 0, v = 0, b = 0;
        for (v = 0; v < 2; ++v) {
            var b = 1 << (v * 8);
            for (h = 0; h < 8; ++h, b <<= 1) {
                dist = (x - (hLeft + (h * hSpacing))) * (x - (hLeft + (h * hSpacing))) + (y - (vStart - (v * vSpacing))) * (y - (vStart - (v * vSpacing)));
                if (dist < r_sqr) {
                    fsw_state |= b;
                }
            }
        }
    }

    if (old_fsw_state !== fsw_state) ui_modified = true;

    return false;
}

function touchend(e) {
    e.preventDefault();

    fsw_state = 0;
    ui_modified = true;

    return false;
}

// ----------------------------- Utility functions:

// fix signed to unsigned:
function i8tou8(v) {
    if (v < 0) {
        return (255 - ~v) & 0xFF;
    }
    return v;
}

function hex2(v) {
    var h = v.toString(16).toUpperCase();
    return ("00" + h).substring(h.length);
}

// ----------------------------- MIDI controller "hardware" interface:

// Pass back the LCD text buffer for the given row:
// char *lcd_row_get(u8 row)
function _lcd_row_get(row) {
    // malloc a 20-byte buffer for the asked-for row of text (0-3):
    if (lcd_rows_text_ptrs[row] == 0) {
        lcd_rows_text_ptrs[row] = Module._malloc(20);
    }
    return lcd_rows_text_ptrs[row];
}

// poll all 16 foot switches' state in a 16-bit word:
function _fsw_poll() { return fsw_state; }

// called to set the new state of the LEDs in a top and bottom row, each 8-bit words:
function _led_set(leds) {
    var bot = leds & 255;
    var top = (leds >>> 8) & 255;

    if (led_state_bot != bot) ui_modified = true;
    if (led_state_top != top) ui_modified = true;

    led_state_bot = bot;
    led_state_top = top;
}

function _lcd_updated_row(row) {
    //assert(row < 4);

    var text_ptr = lcd_rows_text_ptrs[row];
    var prevRowText = lcd_rows[row];
    lcd_rows[row] = '';

    var i;
    for (i = 0; i < 20; ++i) {
        // Read char from RAM:
        var c = Module.getValue(text_ptr + i, 'i8');
        if (c == 0) break;

        // Assume ASCII and append char to string:
        lcd_rows[row] += String.fromCharCode(c & 127);
    }
    // Fill the rest with spaces:
    for (; i < 20; ++i)
        lcd_rows[row] += " ";

    // Notify UI of update if necessary:
    if (prevRowText !== lcd_rows[row])
        ui_modified = true;
}

function _lcd_updated_all() {
    _lcd_updated_row(0);
    _lcd_updated_row(1);
    _lcd_updated_row(2);
    _lcd_updated_row(3);
}

// called to send MIDI command with one data byte:
function _midi_send_cmd1_impl(cmd, data1) {
    cmd = i8tou8(cmd);
    data1 = i8tou8(data1);

    // TODO: add commentary about recognized commands
    var f = "" + hex2(cmd) + " " + hex2(data1) + "\n";
    midi_log(f);

    if (!midiSupport) return;
    if (!midiOutput) return;
    // TODO: maybe queue up bytes and deliver at end of main loop?
    try {
        midiOutput.send([cmd, data1]);
    } catch (e) {
        console.error(e);
    }
}

// called to send MIDI command with two data bytes:
function _midi_send_cmd2_impl(cmd, data1, data2) {
    cmd = i8tou8(cmd);
    data1 = i8tou8(data1);
    data2 = i8tou8(data2);

    // TODO: add commentary about recognized commands
    var f = "" + hex2(cmd) + " " + hex2(data1) + " " + hex2(data2) + "\n";
    midi_log(f);

    if (!midiSupport) return;
    if (!midiOutput) return;
    // TODO: maybe queue up bytes and deliver at end of main loop?
    try {
        midiOutput.send([cmd, data1, data2]);
    } catch (e) {
        console.error(e);
    }
}

function _midi_send_sysex(byte) {
    byte = i8tou8(byte);

    if (sysexMsg === null) {
         if (byte === 0xF0) {
            sysexMsg = [0xF0];
         } else {
            console.error("Attempting to start SysEx message without 0xF0! " + byte);
         }
    } else {
        sysexMsg.push(byte);
        if (byte === 0xF7) {
            if (midiSupport && midiOutput) {
                try {
                    midiOutput.send(sysexMsg);
                } catch (e) {
                    console.error(e);
                }
            }

            try {
                str = ""
                for (var i = 0; i < sysexMsg.length; i++) {
                    str += hex2(sysexMsg[i]) + " ";
                }
                midi_log("" + str + "\n");
            } catch (e) {
                console.error(e);
            }
        }
    }
}

function _midi_log_cwrap(text_ptr) {
    midi_log(Module.UTF8ToString(text_ptr) + "\n");
}

function midi_log(text) {
    midiLog.appendChild(document.createTextNode(text));
    midiLog.scrollTop = midiLog.scrollHeight - midiLogHeight;
}

function _label_row_get(row) {
    if (label_rows_text_ptrs[row] === 0) {
        label_rows_text_ptrs[row] = Module._malloc(8 * 4);
    }
    return label_rows_text_ptrs[row];
}

function _label_row_update(row) {
    var i;
    for (i = 0; i < 8; i++) {
        var p = label_rows_text_ptrs[row] + (4 * i);
        var t = Module.getValue(p, 'i8*');
        labels[row][i] = Module.UTF8ToString(t);
    }
    ui_modified = true;
}

// ----------------------------- Startup:

// Document initialization:
function init() {
    // Polyfill for `requestAnimationFrame`:
    window.requestAnimFrame = (function () {
        return window.requestAnimationFrame ||
                window.webkitRequestAnimationFrame ||
                window.mozRequestAnimationFrame ||
                window.oRequestAnimationFrame ||
                window.msRequestAnimationFrame ||
                function (/* function */ callback, /* DOMElement */ element) {
                    window.setTimeout(callback, 1000 / 60);
                };
    })();

    // Set up a scrollable <pre> element to display the MIDI commands sent:
    midiLog = document.getElementById('midiLog');
    midiLogHeight = midiLog.clientHeight;
    //midiLog.style.height = "" + midiLogHeight + "px";
    if (midiLog.style['overflow-y'] !== undefined) {
        midiLog.style['overflow-y'] = "scroll";
    } else {
        // FireFox hack:
        midiLog.style.overflow = '-moz-scrollbars-vertical';
    }

    // Get canvas and its drawing context:
    cvs = document.getElementById('cvs');
    ctx = cvs.getContext('2d');

    // Set up canvas:
    cvs.setAttribute('width', inWidth * dpi);
    cvs.setAttribute('height', inHeight * dpi);

    // Mouse handlers:
    cvs.addEventListener('mousedown', mousedown, true);
    cvs.addEventListener('mouseup', mouseup, true);

    // Touch handlers (mobile):
    cvs.addEventListener('touchstart', touchstart, true);
    cvs.addEventListener('touchend', touchend, true);

    // Keyboard handlers (only work if tabindex attribute is present on canvas element):
    cvs.addEventListener("keydown", keydown, false);
    cvs.addEventListener("keyup", keyup, false);

    // Give the canvas focus:
    cvs.focus();

    var clearMidiOut = document.getElementById('clearMidiOut');
    if (clearMidiOut)
        clearMidiOut.addEventListener('click', function (e) {
            e.preventDefault();
            var c = midiLog.childNodes;
            for (var i = c.length - 1; i >= 0; i--) {
                midiLog.removeChild(c[i]);
            }
            cvs.focus();
            return false;
        });

    // check for web-midi with sysex access:
    midiSupport = null;
    if (navigator.requestMIDIAccess) {
        navigator.requestMIDIAccess({sysex: true})
            .then(
                function (access) {
                    midiAccess = access;
                    midiSupport = true;
                    midiOutput = null;

                    var midiSelect = document.getElementById("midiSelect");

                    // onchange event:
                    if (midiSelect) {
                        midiSelect.addEventListener("change", function (e) {
                            if (midiSelect.value == 0) {
                                console.log("disable MIDI");
                                midiOutput = null;
                                return;
                            }

                            midiOutput = midiAccess.outputs.get(parseInt(midiSelect.value, 10));
                            if (midiOutput) {
                                console.log("change MIDI to " + midiOutput.name);
                            } else {
                                console.error("failed to find MIDI by key=" + midiSelect.value);
                            }
                        });
                    }

                    // Could be 0..n outputs; try to select first if any:
                    midiAccess.outputs.forEach(function(output, key) {
                        if (midiSelect) {
                            // Create an <option> for the MIDI output port:
                            var opt = document.createElement("option");
                            opt.setAttribute("value", key);
                            opt.appendChild(document.createTextNode(output.name));
                            midiSelect.appendChild(opt);

                            if (midiOutput === null) {
                                midiOutput = output;
                                midiSelect.value = key;
                            }
                        } else {
                            if (midiOutput === null) {
                                midiOutput = output;
                            }
                        }
                    });

                    startMachine();
                },
                function (err) {
                    midiSupport = false;
                    startMachine();
                }
            );
    } else {
        midiSupport = false;
        startMachine();
    }
}

function startMachine() {
    // Initialize controller:
    // NOTE(jsd): `Module` is the name of the emscripten compiled module; exported functions have a leading '_'.
    Module._controller_init();
    // Render initial UI:
    requestAnimFrame(renderUI);

    // Setup a refresh rate of 10ms:
    setInterval(function () {
        // Handle controller timers and logic:
        Module._controller_10msec_timer();
        Module._controller_handle();

        // Update UI only on changes:
        if (ui_modified) {
            requestAnimFrame(renderUI);
            ui_modified = false;
        }
    }, 10);
}

if (!document.addEventListener) {
    document.attachEvent("onload", init);
} else {
    document.addEventListener("DOMContentLoaded", init, false);
}
