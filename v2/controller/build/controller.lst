gplink-1.5.0 #1285 (Sep 12 2016)
Copyright (c) 1998-2016 gputils project
Listing File Generated: 12-14-2016  09:12:07


Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           	radix	dec
                                           	CONFIG	PLLDIV=2,CPUDIV=OSC2_PLL3,USBDIV=2
                                           	CONFIG	FOSC=HSPLL_HS,FCMEN=OFF,IESO=OFF
                                           	CONFIG	VREGEN=ON,PWRT=ON,BOR=ON,BORV=0
                                           	CONFIG	CCP2MX=ON,PBADEN=OFF,LPT1OSC=OFF,MCLRE=ON
                                           	CONFIG	STVREN=ON,LVP=OFF,ICPRT=OFF,XINST=OFF
                                           	CONFIG	CP0=OFF,CP1=OFF,CP2=OFF
                                           	CONFIG	CPB=OFF,CPD=OFF
                                           	CONFIG	WRT0=OFF,WRT1=OFF,WRT2=OFF
                                           	CONFIG	WRTC=OFF,WRTB=OFF,WRTD=OFF
                                           	CONFIG	EBTR0=OFF,EBTR1=OFF,EBTR2=OFF
                                           	CONFIG	EBTRB=OFF
                                           	CONFIG	DEBUG=OFF


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_main

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_SPPCFGbits
                                           	extern	_SPPEPSbits
                                           	extern	_SPPCONbits
                                           	extern	_UFRMLbits
                                           	extern	_UFRMHbits
                                           	extern	_UIRbits
                                           	extern	_UIEbits
                                           	extern	_UEIRbits
                                           	extern	_UEIEbits
                                           	extern	_USTATbits
                                           	extern	_UCONbits
                                           	extern	_UADDRbits
                                           	extern	_UCFGbits
                                           	extern	_UEP0bits
                                           	extern	_UEP1bits
                                           	extern	_UEP2bits
                                           	extern	_UEP3bits
                                           	extern	_UEP4bits
                                           	extern	_UEP5bits
                                           	extern	_UEP6bits
                                           	extern	_UEP7bits
                                           	extern	_UEP8bits
                                           	extern	_UEP9bits
                                           	extern	_UEP10bits
                                           	extern	_UEP11bits
                                           	extern	_UEP12bits
                                           	extern	_UEP13bits
                                           	extern	_UEP14bits
                                           	extern	_UEP15bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_CCP1ASbits
                                           	extern	_ECCP1ASbits
                                           	extern	_CCP1DELbits
                                           	extern	_ECCP1DELbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ECCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_CommFlags1
                                           	extern	_ArbFlags1
                                           	extern	_ArbFlags2
                                           	extern	_ProgMemAddr
                                           	extern	_ProgmemBuffer
                                           	extern	_NVRCommAddr
                                           	extern	_RAMCommAddr
                                           	extern	_ROMCommAddr
                                           	extern	_LedStatesTop
                                           	extern	_LedStatesBot
                                           	extern	_ButtonStateTop
                                           	extern	_ButtonStateBot
                                           	extern	_SystickCntr
                                           	extern	_SystickCntr2
                                           	extern	_SystickCntr3
                                           	extern	_SystickCntr4
                                           	extern	_SystickCntr5
                                           	extern	_MIDITxBuffer
                                           	extern	_MIDITxBufPtr
                                           	extern	_MIDITxBufOutPtr
                                           	extern	_swuart_tx_buffer
                                           	extern	_swuart_tx_bufptr
                                           	extern	_swuart_tx_bufoutptr
                                           	extern	_swuart_txbyte
                                           	extern	_swuart_txmask
                                           	extern	_swuart_mode
                                           	extern	_swuart_started
                                           	extern	_LCDUpdateStage
                                           	extern	_tTimer1Value
                                           	extern	_LCDRamMap
                                           	extern	_SPPDATA
                                           	extern	_SPPCFG
                                           	extern	_SPPEPS
                                           	extern	_SPPCON
                                           	extern	_UFRM
                                           	extern	_UFRML
                                           	extern	_UFRMH
                                           	extern	_UIR
                                           	extern	_UIE
                                           	extern	_UEIR
                                           	extern	_UEIE
                                           	extern	_USTAT
                                           	extern	_UCON
                                           	extern	_UADDR
                                           	extern	_UCFG
                                           	extern	_UEP0
                                           	extern	_UEP1
                                           	extern	_UEP2
                                           	extern	_UEP3
                                           	extern	_UEP4
                                           	extern	_UEP5
                                           	extern	_UEP6
                                           	extern	_UEP7
                                           	extern	_UEP8
                                           	extern	_UEP9
                                           	extern	_UEP10
                                           	extern	_UEP11
                                           	extern	_UEP12
                                           	extern	_UEP13
                                           	extern	_UEP14
                                           	extern	_UEP15
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_CCP1AS
                                           	extern	_ECCP1AS
                                           	extern	_CCP1DEL
                                           	extern	_ECCP1DEL
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_ECCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_WriteProgMem
                                           	extern	_SystemTimeRoutine
                                           	extern	_init
                                           	extern	_UpdateLeds
                                           	extern	_ReadButtons
                                           	extern	_midi_tx
                                           	extern	_lcd_init
                                           	extern	_lcd_enqueue
                                           	extern	_lcd_update_screen
                                           	extern	_controller_init
                                           	extern	_controller_10msec_timer
                                           	extern	_controller_handle
                                           	extern	_ROM_SAVEDATA

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5

                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
003496   0004     clrwdt                   	CLRWDT
                                           ;	.line	31; PIC/main.c	init();
003498   ecc2     call    0x003f84, 0x0    	CALL	_init
00349a   f01f
00349c   0004     clrwdt                   	CLRWDT
                                           ;	.line	35; PIC/main.c	lcd_init();
00349e   ec33     call    0x004266, 0x0    	CALL	_lcd_init
0034a0   f021
0034a2   0004     clrwdt                   	CLRWDT
                                           ;	.line	39; PIC/main.c	lcd_enqueue(0xFE);
0034a4   0efe     movlw   0xfe             	MOVLW	0xfe
0034a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0034a8   ec23     call    0x004046, 0x0    	CALL	_lcd_enqueue
0034aa   f020
0034ac   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	40; PIC/main.c	lcd_enqueue(0x51);
0034ae   0e51     movlw   0x51             	MOVLW	0x51
0034b0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0034b2   ec23     call    0x004046, 0x0    	CALL	_lcd_enqueue
0034b4   f020
0034b6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	43; PIC/main.c	lcd_enqueue(0xFE);
0034b8   0efe     movlw   0xfe             	MOVLW	0xfe
0034ba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0034bc   ec23     call    0x004046, 0x0    	CALL	_lcd_enqueue
0034be   f020
0034c0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	44; PIC/main.c	lcd_enqueue(0x52);
0034c2   0e52     movlw   0x52             	MOVLW	0x52
0034c4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0034c6   ec23     call    0x004046, 0x0    	CALL	_lcd_enqueue
0034c8   f020
0034ca   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	45; PIC/main.c	lcd_enqueue(20);
0034cc   0e14     movlw   0x14             	MOVLW	0x14
0034ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0034d0   ec23     call    0x004046, 0x0    	CALL	_lcd_enqueue
0034d2   f020
0034d4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	48; PIC/main.c	ReadButtons();
0034d6   ec1b     call    0x002c36, 0x0    	CALL	_ReadButtons
0034d8   f016
                                           ;	.line	49; PIC/main.c	controller_init();
0034da   ec0a     call    0x001e14, 0x0    	CALL	_controller_init
0034dc   f00f
                                           _00126_DS_:
0034de   0004     clrwdt                   	CLRWDT
                                           ;	.line	54; PIC/main.c	ENABLE_ALL_INTERRUPTS();
0034e0   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
0034e2   8cf2     bsf     0xf2, 0x6, 0x0   	BSF	_INTCONbits, 6
                                           ;	.line	56; PIC/main.c	if (Write0Pending) {
0034e4   a75b     btfss   0x5b, 0x3, 0x1   	BTFSS	_ArbFlags1, 3, B
0034e6   d006     bra     0x0034f4         	BRA	_00106_DS_
                                           ;	.line	57; PIC/main.c	Write0Pending = false;
0034e8   975b     bcf     0x5b, 0x3, 0x1   	BCF	_ArbFlags1, 3, B
                                           ;	.line	58; PIC/main.c	WriteProgMem(0);            //write first set of 32 bytes.
0034ea   0e00     movlw   0x00             	MOVLW	0x00
0034ec   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0034ee   ec02     call    0x001004, 0x0    	CALL	_WriteProgMem
0034f0   f008
0034f2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00106_DS_:
                                           ;	.line	61; PIC/main.c	if (Write32Pending) {
0034f4   a95b     btfss   0x5b, 0x4, 0x1   	BTFSS	_ArbFlags1, 4, B
0034f6   d006     bra     0x003504         	BRA	_00108_DS_
                                           ;	.line	62; PIC/main.c	Write32Pending = false;
0034f8   995b     bcf     0x5b, 0x4, 0x1   	BCF	_ArbFlags1, 4, B
                                           ;	.line	63; PIC/main.c	WriteProgMem(32);           //write second set of 32 bytes.
0034fa   0e20     movlw   0x20             	MOVLW	0x20
0034fc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0034fe   ec02     call    0x001004, 0x0    	CALL	_WriteProgMem
003500   f008
003502   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00108_DS_:
                                           ;	.line	66; PIC/main.c	if (Systick) {
003504   a15b     btfss   0x5b, 0x0, 0x1   	BTFSS	_ArbFlags1, 0, B
003506   d003     bra     0x00350e         	BRA	_00110_DS_
                                           ;	.line	67; PIC/main.c	Systick = false;
003508   915b     bcf     0x5b, 0x0, 0x1   	BCF	_ArbFlags1, 0, B
                                           ;	.line	68; PIC/main.c	SystemTimeRoutine();        //1mS system time routine
00350a   ec19     call    0x004232, 0x0    	CALL	_SystemTimeRoutine
00350c   f021
                                           _00110_DS_:
                                           ;	.line	71; PIC/main.c	if (CheckButtons) {
00350e   a15c     btfss   0x5c, 0x0, 0x1   	BTFSS	_ArbFlags2, 0, B
003510   d003     bra     0x003518         	BRA	_00112_DS_
                                           ;	.line	72; PIC/main.c	CheckButtons = false;
003512   915c     bcf     0x5c, 0x0, 0x1   	BCF	_ArbFlags2, 0, B
                                           ;	.line	73; PIC/main.c	ReadButtons();              //read buttons off the multiplexor
003514   ec1b     call    0x002c36, 0x0    	CALL	_ReadButtons
003516   f016
                                           _00112_DS_:
                                           ;	.line	76; PIC/main.c	if (HandleLeds) {
003518   ab5b     btfss   0x5b, 0x5, 0x1   	BTFSS	_ArbFlags1, 5, B
00351a   d003     bra     0x003522         	BRA	_00114_DS_
                                           ;	.line	77; PIC/main.c	HandleLeds = false;
00351c   9b5b     bcf     0x5b, 0x5, 0x1   	BCF	_ArbFlags1, 5, B
                                           ;	.line	78; PIC/main.c	UpdateLeds();               //handle leds
00351e   eca0     call    0x003140, 0x0    	CALL	_UpdateLeds
003520   f018
                                           _00114_DS_:
                                           ;	.line	81; PIC/main.c	if (ControllerTiming) {
003522   a35c     btfss   0x5c, 0x1, 0x1   	BTFSS	_ArbFlags2, 1, B
003524   d003     bra     0x00352c         	BRA	_00116_DS_
                                           ;	.line	82; PIC/main.c	ControllerTiming = false;
003526   935c     bcf     0x5c, 0x1, 0x1   	BCF	_ArbFlags2, 1, B
                                           ;	.line	83; PIC/main.c	controller_10msec_timer();  //controller timing functions
003528   ec35     call    0x00226a, 0x0    	CALL	_controller_10msec_timer
00352a   f011
                                           _00116_DS_:
                                           ;	.line	86; PIC/main.c	if (HandleController) {
00352c   af5b     btfss   0x5b, 0x7, 0x1   	BTFSS	_ArbFlags1, 7, B
00352e   d003     bra     0x003536         	BRA	_00118_DS_
                                           ;	.line	87; PIC/main.c	HandleController = false;
003530   9f5b     bcf     0x5b, 0x7, 0x1   	BCF	_ArbFlags1, 7, B
                                           ;	.line	88; PIC/main.c	controller_handle();        //handle UI and other midi commands
003532   ec06     call    0x00000c, 0x0    	CALL	_controller_handle
003534   f000
                                           _00118_DS_:
                                           ;	.line	91; PIC/main.c	if (LCDUpdateRequest && !LCDUpdate) {
003536   a75c     btfss   0x5c, 0x3, 0x1   	BTFSS	_ArbFlags2, 3, B
003538   d004     bra     0x003542         	BRA	_00120_DS_
00353a   b55c     btfsc   0x5c, 0x2, 0x1   	BTFSC	_ArbFlags2, 2, B
00353c   d002     bra     0x003542         	BRA	_00120_DS_
                                           ;	.line	92; PIC/main.c	LCDUpdate = true;
00353e   855c     bsf     0x5c, 0x2, 0x1   	BSF	_ArbFlags2, 2, B
                                           ;	.line	93; PIC/main.c	LCDUpdateRequest = false;
003540   975c     bcf     0x5c, 0x3, 0x1   	BCF	_ArbFlags2, 3, B
                                           _00120_DS_:
                                           ;	.line	95; PIC/main.c	if (LCDUpdate && (swuart_mode == SWUARTMODE_TX_IDLE)) {
003542   a55c     btfss   0x5c, 0x2, 0x1   	BTFSS	_ArbFlags2, 2, B
003544   d004     bra     0x00354e         	BRA	_00123_DS_
003546   516d     movf    0x6d, 0x0, 0x1   	MOVF	_swuart_mode, W, B
003548   e102     bnz     0x00354e         	BNZ	_00123_DS_
                                           ;	.line	96; PIC/main.c	lcd_update_screen();
00354a   ec3d     call    0x002e7a, 0x0    	CALL	_lcd_update_screen
00354c   f017
                                           _00123_DS_:
                                           ;	.line	99; PIC/main.c	midi_tx();      //handles sending/receiving midi data
00354e   ec9a     call    0x004134, 0x0    	CALL	_midi_tx
003550   f020
003552   d7c5     bra     0x0034de         	BRA	_00126_DS_
003554   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  192 (0x00c0) bytes ( 0.15%)
                                           ;           	   96 (0x0060) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_lcd_init
                                           	global	_lcd_update_screen
                                           	global	_lcd_enqueue
                                           	global	_swuart_tx_start
                                           	global	_swuart_tx_interrupt

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_SPPCFGbits
                                           	extern	_SPPEPSbits
                                           	extern	_SPPCONbits
                                           	extern	_UFRMLbits
                                           	extern	_UFRMHbits
                                           	extern	_UIRbits
                                           	extern	_UIEbits
                                           	extern	_UEIRbits
                                           	extern	_UEIEbits
                                           	extern	_USTATbits
                                           	extern	_UCONbits
                                           	extern	_UADDRbits
                                           	extern	_UCFGbits
                                           	extern	_UEP0bits
                                           	extern	_UEP1bits
                                           	extern	_UEP2bits
                                           	extern	_UEP3bits
                                           	extern	_UEP4bits
                                           	extern	_UEP5bits
                                           	extern	_UEP6bits
                                           	extern	_UEP7bits
                                           	extern	_UEP8bits
                                           	extern	_UEP9bits
                                           	extern	_UEP10bits
                                           	extern	_UEP11bits
                                           	extern	_UEP12bits
                                           	extern	_UEP13bits
                                           	extern	_UEP14bits
                                           	extern	_UEP15bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_CCP1ASbits
                                           	extern	_ECCP1ASbits
                                           	extern	_CCP1DELbits
                                           	extern	_ECCP1DELbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ECCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_CommFlags1
                                           	extern	_ArbFlags1
                                           	extern	_ArbFlags2
                                           	extern	_ProgMemAddr
                                           	extern	_ProgmemBuffer
                                           	extern	_NVRCommAddr
                                           	extern	_RAMCommAddr
                                           	extern	_ROMCommAddr
                                           	extern	_LedStatesTop
                                           	extern	_LedStatesBot
                                           	extern	_ButtonStateTop
                                           	extern	_ButtonStateBot
                                           	extern	_SystickCntr
                                           	extern	_SystickCntr2
                                           	extern	_SystickCntr3
                                           	extern	_SystickCntr4
                                           	extern	_SystickCntr5
                                           	extern	_MIDITxBuffer
                                           	extern	_MIDITxBufPtr
                                           	extern	_MIDITxBufOutPtr
                                           	extern	_swuart_tx_buffer
                                           	extern	_swuart_tx_bufptr
                                           	extern	_swuart_tx_bufoutptr
                                           	extern	_swuart_txbyte
                                           	extern	_swuart_txmask
                                           	extern	_swuart_mode
                                           	extern	_swuart_started
                                           	extern	_LCDUpdateStage
                                           	extern	_tTimer1Value
                                           	extern	_LCDRamMap
                                           	extern	_SPPDATA
                                           	extern	_SPPCFG
                                           	extern	_SPPEPS
                                           	extern	_SPPCON
                                           	extern	_UFRM
                                           	extern	_UFRML
                                           	extern	_UFRMH
                                           	extern	_UIR
                                           	extern	_UIE
                                           	extern	_UEIR
                                           	extern	_UEIE
                                           	extern	_USTAT
                                           	extern	_UCON
                                           	extern	_UADDR
                                           	extern	_UCFG
                                           	extern	_UEP0
                                           	extern	_UEP1
                                           	extern	_UEP2
                                           	extern	_UEP3
                                           	extern	_UEP4
                                           	extern	_UEP5
                                           	extern	_UEP6
                                           	extern	_UEP7
                                           	extern	_UEP8
                                           	extern	_UEP9
                                           	extern	_UEP10
                                           	extern	_UEP11
                                           	extern	_UEP12
                                           	extern	_UEP13
                                           	extern	_UEP14
                                           	extern	_UEP15
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_CCP1AS
                                           	extern	_ECCP1AS
                                           	extern	_CCP1DEL
                                           	extern	_ECCP1DEL
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_ECCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_ROM_SAVEDATA

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_comm_lcd__swuart_tx_interrupt	code
                                           _swuart_tx_interrupt:
                                           ;	.line	94; PIC/comm_lcd.c	void swuart_tx_interrupt(void) {
003770   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003772   ffe5
003774   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003776   ffe5
                                           ;	.line	96; PIC/comm_lcd.c	PIR1bits.TMR1IF = 0;
003778   909e     bcf     0x9e, 0x0, 0x0   	BCF	_PIR1bits, 0
                                           ;	.line	97; PIC/comm_lcd.c	T1CONbits.TMR1ON = 0;
00377a   90cd     bcf     0xcd, 0x0, 0x0   	BCF	_T1CONbits, 0
                                           ;	.line	98; PIC/comm_lcd.c	TMR1L = ((unsigned short)0xFFFF - ((unsigned short)TMR1_BAUD9600_PERIOD - (unsigned short)TMR1_ISR_LATENCY)) & 0xFF;    // 0x80
00377c   0e7b     movlw   0x7b             	MOVLW	0x7b
00377e   6ece     movwf   0xce, 0x0        	MOVWF	_TMR1L
                                           ;	.line	99; PIC/comm_lcd.c	TMR1H = (((unsigned short)0xFFFF - ((unsigned short)TMR1_BAUD9600_PERIOD - (unsigned short)TMR1_ISR_LATENCY)) >> 8) & 0xFF; // 0xFE
003780   0efd     movlw   0xfd             	MOVLW	0xfd
003782   6ecf     movwf   0xcf, 0x0        	MOVWF	_TMR1H
                                           ;	.line	100; PIC/comm_lcd.c	T1CONbits.TMR1ON = 1;
003784   80cd     bsf     0xcd, 0x0, 0x0   	BSF	_T1CONbits, 0
                                           ;	.line	102; PIC/comm_lcd.c	switch (swuart_mode) {
003786   516d     movf    0x6d, 0x0, 0x1   	MOVF	_swuart_mode, W, B
003788   e101     bnz     0x00378c         	BNZ	_00218_DS_
00378a   d041     bra     0x00380e         	BRA	_00197_DS_
                                           _00218_DS_:
00378c   516d     movf    0x6d, 0x0, 0x1   	MOVF	_swuart_mode, W, B
00378e   0a02     xorlw   0x02             	XORLW	0x02
003790   e004     bz      0x00379a         	BZ	_00187_DS_
003792   516d     movf    0x6d, 0x0, 0x1   	MOVF	_swuart_mode, W, B
003794   0a03     xorlw   0x03             	XORLW	0x03
003796   e013     bz      0x0037be         	BZ	_00188_DS_
003798   d03a     bra     0x00380e         	BRA	_00197_DS_
                                           _00187_DS_:
                                           ;	.line	107; PIC/comm_lcd.c	swuart_mode = SWUARTMODE_TX_BYTE;
00379a   0e03     movlw   0x03             	MOVLW	0x03
00379c   6f6d     movwf   0x6d, 0x1        	MOVWF	_swuart_mode, B
                                           ;	.line	108; PIC/comm_lcd.c	swuart_txmask = 0x01;
00379e   0e01     movlw   0x01             	MOVLW	0x01
0037a0   6f6c     movwf   0x6c, 0x1        	MOVWF	_swuart_txmask, B
                                           ;	.line	109; PIC/comm_lcd.c	swuart_txbyte = swuart_tx_buffer[swuart_tx_bufoutptr];
0037a2   0e00     movlw   0x00             	MOVLW	LOW(_swuart_tx_buffer)
0037a4   256a     addwf   0x6a, 0x0, 0x1   	ADDWF	_swuart_tx_bufoutptr, W, B
0037a6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0037a8   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0037aa   0e02     movlw   0x02             	MOVLW	HIGH(_swuart_tx_buffer)
0037ac   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0037ae   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0037b0   ffe9
0037b2   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0037b4   ffea
0037b6   cfef     movff   0xfef, 0x26b     	MOVFF	INDF0, _swuart_txbyte
0037b8   f26b
                                           ;	.line	112; PIC/comm_lcd.c	SWUART_TX_LAT_BIT = 0;
0037ba   9e8c     bcf     0x8c, 0x7, 0x0   	BCF	_LATDbits, 7
                                           ;	.line	113; PIC/comm_lcd.c	break;
0037bc   d028     bra     0x00380e         	BRA	_00197_DS_
                                           _00188_DS_:
                                           ;	.line	115; PIC/comm_lcd.c	if (swuart_txmask == 0) {
0037be   516c     movf    0x6c, 0x0, 0x1   	MOVF	_swuart_txmask, W, B
0037c0   e11d     bnz     0x0037fc         	BNZ	_00192_DS_
                                           ;	.line	117; PIC/comm_lcd.c	SWUART_TX_LAT_BIT = 1;
0037c2   8e8c     bsf     0x8c, 0x7, 0x0   	BSF	_LATDbits, 7
                                           ;	.line	119; PIC/comm_lcd.c	++swuart_tx_bufoutptr;
0037c4   2b6a     incf    0x6a, 0x1, 0x1   	INCF	_swuart_tx_bufoutptr, F, B
                                           ;	.line	120; PIC/comm_lcd.c	if (swuart_tx_bufoutptr >= swuart_tx_bufptr) {
0037c6   5169     movf    0x69, 0x0, 0x1   	MOVF	_swuart_tx_bufptr, W, B
0037c8   5d6a     subwf   0x6a, 0x0, 0x1   	SUBWF	_swuart_tx_bufoutptr, W, B
0037ca   e309     bnc     0x0037de         	BNC	_00190_DS_
                                           ;	.line	122; PIC/comm_lcd.c	swuart_mode = SWUARTMODE_TX_IDLE;
0037cc   6b6d     clrf    0x6d, 0x1        	CLRF	_swuart_mode, B
                                           ;	.line	123; PIC/comm_lcd.c	swuart_started = 0;
0037ce   6b6e     clrf    0x6e, 0x1        	CLRF	_swuart_started, B
                                           ;	.line	125; PIC/comm_lcd.c	swuart_tx_bufoutptr = 0;
0037d0   6b6a     clrf    0x6a, 0x1        	CLRF	_swuart_tx_bufoutptr, B
                                           ;	.line	126; PIC/comm_lcd.c	swuart_tx_bufptr = 0;
0037d2   6b69     clrf    0x69, 0x1        	CLRF	_swuart_tx_bufptr, B
                                           ;	.line	129; PIC/comm_lcd.c	stopTimer1();
0037d4   90cd     bcf     0xcd, 0x0, 0x0   	BCF	_T1CONbits, 0
0037d6   909e     bcf     0x9e, 0x0, 0x0   	BCF	_PIR1bits, 0
0037d8   6ace     clrf    0xce, 0x0        	CLRF	_TMR1L
0037da   6acf     clrf    0xcf, 0x0        	CLRF	_TMR1H
                                           ;	.line	130; PIC/comm_lcd.c	break;
0037dc   d018     bra     0x00380e         	BRA	_00197_DS_
                                           _00190_DS_:
                                           ;	.line	134; PIC/comm_lcd.c	swuart_txbyte = swuart_tx_buffer[swuart_tx_bufoutptr];
0037de   0e00     movlw   0x00             	MOVLW	LOW(_swuart_tx_buffer)
0037e0   256a     addwf   0x6a, 0x0, 0x1   	ADDWF	_swuart_tx_bufoutptr, W, B
0037e2   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0037e4   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0037e6   0e02     movlw   0x02             	MOVLW	HIGH(_swuart_tx_buffer)
0037e8   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0037ea   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0037ec   ffe9
0037ee   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0037f0   ffea
0037f2   cfef     movff   0xfef, 0x26b     	MOVFF	INDF0, _swuart_txbyte
0037f4   f26b
                                           ;	.line	135; PIC/comm_lcd.c	swuart_mode = SWUARTMODE_TX_START_BIT;
0037f6   0e02     movlw   0x02             	MOVLW	0x02
0037f8   6f6d     movwf   0x6d, 0x1        	MOVWF	_swuart_mode, B
                                           ;	.line	136; PIC/comm_lcd.c	break;
0037fa   d009     bra     0x00380e         	BRA	_00197_DS_
                                           _00192_DS_:
                                           ;	.line	140; PIC/comm_lcd.c	if (swuart_txbyte & 1) {
0037fc   a16b     btfss   0x6b, 0x0, 0x1   	BTFSS	_swuart_txbyte, 0, B
0037fe   d002     bra     0x003804         	BRA	_00194_DS_
                                           ;	.line	141; PIC/comm_lcd.c	SWUART_TX_LAT_BIT = 1;
003800   8e8c     bsf     0x8c, 0x7, 0x0   	BSF	_LATDbits, 7
003802   d001     bra     0x003806         	BRA	_00195_DS_
                                           _00194_DS_:
                                           ;	.line	143; PIC/comm_lcd.c	SWUART_TX_LAT_BIT = 0;
003804   9e8c     bcf     0x8c, 0x7, 0x0   	BCF	_LATDbits, 7
                                           _00195_DS_:
                                           ;	.line	146; PIC/comm_lcd.c	swuart_txbyte >>= 1;
003806   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
003808   336b     rrcf    0x6b, 0x1, 0x1   	RRCF	_swuart_txbyte, F, B
                                           ;	.line	147; PIC/comm_lcd.c	swuart_txmask <<= 1;
00380a   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00380c   376c     rlcf    0x6c, 0x1, 0x1   	RLCF	_swuart_txmask, F, B
                                           _00197_DS_:
                                           ;	.line	149; PIC/comm_lcd.c	}
00380e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003810   f001
003812   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003814   f000
003816   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_comm_lcd__swuart_tx_start	code
                                           _swuart_tx_start:
                                           ;	.line	83; PIC/comm_lcd.c	swuart_mode = SWUARTMODE_TX_START_BIT;
0043b2   0e02     movlw   0x02             	MOVLW	0x02
0043b4   6f6d     movwf   0x6d, 0x1        	MOVWF	_swuart_mode, B
                                           ;	.line	84; PIC/comm_lcd.c	swuart_started = 1;
0043b6   0e01     movlw   0x01             	MOVLW	0x01
0043b8   6f6e     movwf   0x6e, 0x1        	MOVWF	_swuart_started, B
                                           ;	.line	87; PIC/comm_lcd.c	T1CONbits.TMR1ON = 0;
0043ba   90cd     bcf     0xcd, 0x0, 0x0   	BCF	_T1CONbits, 0
                                           ;	.line	88; PIC/comm_lcd.c	TMR1L = ((unsigned short)0xFFFF - ((unsigned short)TMR1_BAUD9600_PERIOD) - (unsigned short)2) & 0xFF;   // 0x80
0043bc   0ebc     movlw   0xbc             	MOVLW	0xbc
0043be   6ece     movwf   0xce, 0x0        	MOVWF	_TMR1L
                                           ;	.line	89; PIC/comm_lcd.c	TMR1H = (((unsigned short)0xFFFF - ((unsigned short)TMR1_BAUD9600_PERIOD) - (unsigned short)2) >> 8) & 0xFF;    // 0xFE
0043c0   0efc     movlw   0xfc             	MOVLW	0xfc
0043c2   6ecf     movwf   0xcf, 0x0        	MOVWF	_TMR1H
                                           ;	.line	90; PIC/comm_lcd.c	T1CONbits.TMR1ON = 1;
0043c4   80cd     bsf     0xcd, 0x0, 0x0   	BSF	_T1CONbits, 0
0043c6   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_comm_lcd__lcd_enqueue	code
                                           _lcd_enqueue:
                                           ;	.line	68; PIC/comm_lcd.c	void lcd_enqueue(unsigned char v) {
004046   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004048   ffe5
00404a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00404c   ffd9
00404e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004050   ffe5
004052   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
004054   ffe5
004056   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
004058   ffe5
00405a   0e02     movlw   0x02             	MOVLW	0x02
00405c   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00405e   f000
                                           ;	.line	69; PIC/comm_lcd.c	if (swuart_tx_bufptr >= MAX_LCD_TX_LENGTH) return;
004060   0e2a     movlw   0x2a             	MOVLW	0x2a
004062   5d69     subwf   0x69, 0x0, 0x1   	SUBWF	_swuart_tx_bufptr, W, B
004064   e211     bc      0x004088         	BC	_00168_DS_
                                           ;	.line	70; PIC/comm_lcd.c	swuart_tx_buffer[swuart_tx_bufptr] = v;
004066   0e00     movlw   0x00             	MOVLW	LOW(_swuart_tx_buffer)
004068   2569     addwf   0x69, 0x0, 0x1   	ADDWF	_swuart_tx_bufptr, W, B
00406a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00406c   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00406e   0e02     movlw   0x02             	MOVLW	HIGH(_swuart_tx_buffer)
004070   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
004072   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
004074   ffe9
004076   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
004078   ffea
00407a   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00407c   ffef
                                           ;	.line	71; PIC/comm_lcd.c	swuart_tx_bufptr++;
00407e   2b69     incf    0x69, 0x1, 0x1   	INCF	_swuart_tx_bufptr, F, B
                                           ;	.line	73; PIC/comm_lcd.c	if (swuart_started) return;
004080   516e     movf    0x6e, 0x0, 0x1   	MOVF	_swuart_started, W, B
004082   e102     bnz     0x004088         	BNZ	_00168_DS_
                                           ;	.line	74; PIC/comm_lcd.c	swuart_tx_start();
004084   ecd9     call    0x0043b2, 0x0    	CALL	_swuart_tx_start
004086   f021
                                           _00168_DS_:
004088   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00408a   f002
00408c   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00408e   f001
004090   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004092   f000
004094   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004096   ffd9
004098   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_comm_lcd__lcd_update_screen	code
                                           _lcd_update_screen:
                                           ;	.line	41; PIC/comm_lcd.c	void lcd_update_screen(void) {
002e7a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002e7c   ffe5
002e7e   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002e80   ffe5
002e82   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002e84   ffe5
002e86   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002e88   ffe5
002e8a   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
002e8c   ffe5
                                           ;	.line	44; PIC/comm_lcd.c	row = LCDUpdateStage;
002e8e   c26f     movff   0x26f, 0x000     	MOVFF	_LCDUpdateStage, r0x00
002e90   f000
                                           ;	.line	47; PIC/comm_lcd.c	lcd_enqueue(0xFE);
002e92   0efe     movlw   0xfe             	MOVLW	0xfe
002e94   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002e96   ec23     call    0x004046, 0x0    	CALL	_lcd_enqueue
002e98   f020
002e9a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	48; PIC/comm_lcd.c	lcd_enqueue(0x45);
002e9c   0e45     movlw   0x45             	MOVLW	0x45
002e9e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ea0   ec23     call    0x004046, 0x0    	CALL	_lcd_enqueue
002ea2   f020
002ea4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	49; PIC/comm_lcd.c	switch (row) {
002ea6   0e04     movlw   0x04             	MOVLW	0x04
002ea8   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
002eaa   e22e     bc      0x002f08         	BC	_00144_DS_
002eac   6afa     clrf    0xfa, 0x0        	CLRF	PCLATH
002eae   6afb     clrf    0xfb, 0x0        	CLRF	PCLATU
002eb0   3400     rlcf    0x00, 0x0, 0x0   	RLCF	r0x00, W
002eb2   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
002eb4   34e8     rlcf    0xe8, 0x0, 0x0   	RLCF	WREG, W
002eb6   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
002eb8   0bfc     andlw   0xfc             	ANDLW	0xfc
002eba   0fca     addlw   0xca             	ADDLW	LOW(_00157_DS_)
002ebc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ebe   0e2e     movlw   0x2e             	MOVLW	HIGH(_00157_DS_)
002ec0   22fa     addwfc  0xfa, 0x1, 0x0   	ADDWFC	PCLATH, F
002ec2   0e00     movlw   0x00             	MOVLW	UPPER(_00157_DS_)
002ec4   22fb     addwfc  0xfb, 0x1, 0x0   	ADDWFC	PCLATU, F
002ec6   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002ec8   6ef9     movwf   0xf9, 0x0        	MOVWF	PCL
                                           _00157_DS_:
002eca   ef6d     goto    0x002eda         	GOTO	_00131_DS_
002ecc   f017
002ece   ef73     goto    0x002ee6         	GOTO	_00132_DS_
002ed0   f017
002ed2   ef79     goto    0x002ef2         	GOTO	_00133_DS_
002ed4   f017
002ed6   ef7f     goto    0x002efe         	GOTO	_00134_DS_
002ed8   f017
                                           _00131_DS_:
                                           ;	.line	50; PIC/comm_lcd.c	case 0: lcd_enqueue(0x00); break;
002eda   0e00     movlw   0x00             	MOVLW	0x00
002edc   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002ede   ec23     call    0x004046, 0x0    	CALL	_lcd_enqueue
002ee0   f020
002ee2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002ee4   d011     bra     0x002f08         	BRA	_00144_DS_
                                           _00132_DS_:
                                           ;	.line	51; PIC/comm_lcd.c	case 1: lcd_enqueue(0x40); break;
002ee6   0e40     movlw   0x40             	MOVLW	0x40
002ee8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002eea   ec23     call    0x004046, 0x0    	CALL	_lcd_enqueue
002eec   f020
002eee   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002ef0   d00b     bra     0x002f08         	BRA	_00144_DS_
                                           _00133_DS_:
                                           ;	.line	52; PIC/comm_lcd.c	case 2: lcd_enqueue(0x14); break;
002ef2   0e14     movlw   0x14             	MOVLW	0x14
002ef4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ef6   ec23     call    0x004046, 0x0    	CALL	_lcd_enqueue
002ef8   f020
002efa   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002efc   d005     bra     0x002f08         	BRA	_00144_DS_
                                           _00134_DS_:
                                           ;	.line	53; PIC/comm_lcd.c	case 3: lcd_enqueue(0x54); break;
002efe   0e54     movlw   0x54             	MOVLW	0x54
002f00   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002f02   ec23     call    0x004046, 0x0    	CALL	_lcd_enqueue
002f04   f020
002f06   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ; ;multiply lit val:0x14 by variable r0x00 and store in r0x00
                                           _00144_DS_:
                                           ;	.line	57; PIC/comm_lcd.c	for (i = 0; i < LCD_COLS; ++i) {
002f08   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002f0a   0d14     mullw   0x14             	MULLW	0x14
002f0c   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
002f0e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002f10   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
002f12   f000
002f14   0e60     movlw   0x60             	MOVLW	LOW(_LCDRamMap)
002f16   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002f18   0e00     movlw   0x00             	MOVLW	HIGH(_LCDRamMap)
002f1a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
002f1c   6a02     clrf    0x02, 0x0        	CLRF	r0x02
                                           _00139_DS_:
                                           ;	.line	58; PIC/comm_lcd.c	lcd_enqueue(LCDRamMap[row][i]);
002f1e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002f20   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002f22   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
002f24   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002f26   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002f28   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002f2a   c003     movff   0x003, 0xfe9     	MOVFF	r0x03, FSR0L
002f2c   ffe9
002f2e   c004     movff   0x004, 0xfea     	MOVFF	r0x04, FSR0H
002f30   ffea
002f32   cfef     movff   0xfef, 0x003     	MOVFF	INDF0, r0x03
002f34   f003
002f36   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002f38   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002f3a   ec23     call    0x004046, 0x0    	CALL	_lcd_enqueue
002f3c   f020
002f3e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	57; PIC/comm_lcd.c	for (i = 0; i < LCD_COLS; ++i) {
002f40   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
002f42   0e14     movlw   0x14             	MOVLW	0x14
002f44   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
002f46   e3eb     bnc     0x002f1e         	BNC	_00139_DS_
                                           ;	.line	61; PIC/comm_lcd.c	LCDUpdateStage++;
002f48   2b6f     incf    0x6f, 0x1, 0x1   	INCF	_LCDUpdateStage, F, B
                                           ;	.line	62; PIC/comm_lcd.c	if (LCDUpdateStage >= LCD_ROWS) {
002f4a   0e04     movlw   0x04             	MOVLW	0x04
002f4c   5d6f     subwf   0x6f, 0x0, 0x1   	SUBWF	_LCDUpdateStage, W, B
002f4e   e302     bnc     0x002f54         	BNC	_00141_DS_
                                           ;	.line	63; PIC/comm_lcd.c	LCDUpdateStage = 0;
002f50   6b6f     clrf    0x6f, 0x1        	CLRF	_LCDUpdateStage, B
                                           ;	.line	64; PIC/comm_lcd.c	LCDUpdate = false;
002f52   955c     bcf     0x5c, 0x2, 0x1   	BCF	_ArbFlags2, 2, B
                                           _00141_DS_:
002f54   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
002f56   f004
002f58   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002f5a   f003
002f5c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002f5e   f002
002f60   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002f62   f001
002f64   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002f66   f000
002f68   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_comm_lcd__lcd_init	code
                                           _lcd_init:
                                           ;	.line	15; PIC/comm_lcd.c	void lcd_init(void) {
004266   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004268   ffe5
                                           ;	.line	19; PIC/comm_lcd.c	DISABLE_ALL_INTERRUPTS();
00426a   9ef2     bcf     0xf2, 0x7, 0x0   	BCF	_INTCONbits, 7
00426c   9cf2     bcf     0xf2, 0x6, 0x0   	BCF	_INTCONbits, 6
                                           ;	.line	20; PIC/comm_lcd.c	PIE1bits.TMR1IE = 0;
00426e   909d     bcf     0x9d, 0x0, 0x0   	BCF	_PIE1bits, 0
                                           ;	.line	23; PIC/comm_lcd.c	SWUART_TX_LAT_BIT = 1;
004270   8e8c     bsf     0x8c, 0x7, 0x0   	BSF	_LATDbits, 7
                                           ;	.line	24; PIC/comm_lcd.c	for (i=0; i<80; ++i) {
004272   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00109_DS_:
                                           ;	.line	26; PIC/comm_lcd.c	T1CONbits.TMR1ON = 0;
004274   90cd     bcf     0xcd, 0x0, 0x0   	BCF	_T1CONbits, 0
                                           ;	.line	27; PIC/comm_lcd.c	PIR1bits.TMR1IF = 0;
004276   909e     bcf     0x9e, 0x0, 0x0   	BCF	_PIR1bits, 0
                                           ;	.line	28; PIC/comm_lcd.c	TMR1L = 0x00;
004278   6ace     clrf    0xce, 0x0        	CLRF	_TMR1L
                                           ;	.line	29; PIC/comm_lcd.c	TMR1H = 0x00;
00427a   6acf     clrf    0xcf, 0x0        	CLRF	_TMR1H
                                           ;	.line	30; PIC/comm_lcd.c	T1CONbits.TMR1ON = 1;
00427c   80cd     bsf     0xcd, 0x0, 0x0   	BSF	_T1CONbits, 0
                                           _00105_DS_:
                                           ;	.line	31; PIC/comm_lcd.c	while (PIR1bits.TMR1IF == 0);
00427e   a09e     btfss   0x9e, 0x0, 0x0   	BTFSS	_PIR1bits, 0
004280   d7fe     bra     0x00427e         	BRA	_00105_DS_
                                           ;	.line	32; PIC/comm_lcd.c	PIR1bits.TMR1IF = 0;
004282   909e     bcf     0x9e, 0x0, 0x0   	BCF	_PIR1bits, 0
                                           ;	.line	24; PIC/comm_lcd.c	for (i=0; i<80; ++i) {
004284   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
004286   0e50     movlw   0x50             	MOVLW	0x50
004288   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
00428a   e3f4     bnc     0x004274         	BNC	_00109_DS_
                                           ;	.line	35; PIC/comm_lcd.c	PIE1bits.TMR1IE = 1;
00428c   809d     bsf     0x9d, 0x0, 0x0   	BSF	_PIE1bits, 0
                                           ;	.line	38; PIC/comm_lcd.c	ENABLE_ALL_INTERRUPTS();
00428e   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
004290   8cf2     bsf     0xf2, 0x6, 0x0   	BSF	_INTCONbits, 6
004292   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004294   f000
004296   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  564 (0x0234) bytes ( 0.43%)
                                           ;           	  282 (0x011a) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    5 (0x0005) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_CLEAR_RAM
                                           	global	_init

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_SPPCFGbits
                                           	extern	_SPPEPSbits
                                           	extern	_SPPCONbits
                                           	extern	_UFRMLbits
                                           	extern	_UFRMHbits
                                           	extern	_UIRbits
                                           	extern	_UIEbits
                                           	extern	_UEIRbits
                                           	extern	_UEIEbits
                                           	extern	_USTATbits
                                           	extern	_UCONbits
                                           	extern	_UADDRbits
                                           	extern	_UCFGbits
                                           	extern	_UEP0bits
                                           	extern	_UEP1bits
                                           	extern	_UEP2bits
                                           	extern	_UEP3bits
                                           	extern	_UEP4bits
                                           	extern	_UEP5bits
                                           	extern	_UEP6bits
                                           	extern	_UEP7bits
                                           	extern	_UEP8bits
                                           	extern	_UEP9bits
                                           	extern	_UEP10bits
                                           	extern	_UEP11bits
                                           	extern	_UEP12bits
                                           	extern	_UEP13bits
                                           	extern	_UEP14bits
                                           	extern	_UEP15bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_CCP1ASbits
                                           	extern	_ECCP1ASbits
                                           	extern	_CCP1DELbits
                                           	extern	_ECCP1DELbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ECCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_CommFlags1
                                           	extern	_ArbFlags1
                                           	extern	_ArbFlags2
                                           	extern	_ProgMemAddr
                                           	extern	_ProgmemBuffer
                                           	extern	_NVRCommAddr
                                           	extern	_RAMCommAddr
                                           	extern	_ROMCommAddr
                                           	extern	_LedStatesTop
                                           	extern	_LedStatesBot
                                           	extern	_ButtonStateTop
                                           	extern	_ButtonStateBot
                                           	extern	_SystickCntr
                                           	extern	_SystickCntr2
                                           	extern	_SystickCntr3
                                           	extern	_SystickCntr4
                                           	extern	_SystickCntr5
                                           	extern	_MIDITxBuffer
                                           	extern	_MIDITxBufPtr
                                           	extern	_MIDITxBufOutPtr
                                           	extern	_swuart_tx_buffer
                                           	extern	_swuart_tx_bufptr
                                           	extern	_swuart_tx_bufoutptr
                                           	extern	_swuart_txbyte
                                           	extern	_swuart_txmask
                                           	extern	_swuart_mode
                                           	extern	_swuart_started
                                           	extern	_LCDUpdateStage
                                           	extern	_tTimer1Value
                                           	extern	_LCDRamMap
                                           	extern	_SPPDATA
                                           	extern	_SPPCFG
                                           	extern	_SPPEPS
                                           	extern	_SPPCON
                                           	extern	_UFRM
                                           	extern	_UFRML
                                           	extern	_UFRMH
                                           	extern	_UIR
                                           	extern	_UIE
                                           	extern	_UEIR
                                           	extern	_UEIE
                                           	extern	_USTAT
                                           	extern	_UCON
                                           	extern	_UADDR
                                           	extern	_UCFG
                                           	extern	_UEP0
                                           	extern	_UEP1
                                           	extern	_UEP2
                                           	extern	_UEP3
                                           	extern	_UEP4
                                           	extern	_UEP5
                                           	extern	_UEP6
                                           	extern	_UEP7
                                           	extern	_UEP8
                                           	extern	_UEP9
                                           	extern	_UEP10
                                           	extern	_UEP11
                                           	extern	_UEP12
                                           	extern	_UEP13
                                           	extern	_UEP14
                                           	extern	_UEP15
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_CCP1AS
                                           	extern	_ECCP1AS
                                           	extern	_CCP1DEL
                                           	extern	_ECCP1DEL
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_ECCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_ROM_SAVEDATA

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_init__init	code
                                           _init:
                                           ;	.line	30; PIC/init.c	CLEAR_RAM();
003f84   ec04     call    0x001008, 0x0    	CALL	_CLEAR_RAM
003f86   f008
                                           ;	.line	32; PIC/init.c	LATA = INIT_LATA;
003f88   6a89     clrf    0x89, 0x0        	CLRF	_LATA
                                           ;	.line	33; PIC/init.c	LATB = INIT_LATB;
003f8a   6a8a     clrf    0x8a, 0x0        	CLRF	_LATB
                                           ;	.line	34; PIC/init.c	LATC = INIT_LATC;
003f8c   6a8b     clrf    0x8b, 0x0        	CLRF	_LATC
                                           ;	.line	35; PIC/init.c	LATD = INIT_LATD;
003f8e   6a8c     clrf    0x8c, 0x0        	CLRF	_LATD
                                           ;	.line	36; PIC/init.c	LATE = INIT_LATE;
003f90   6a8d     clrf    0x8d, 0x0        	CLRF	_LATE
                                           ;	.line	38; PIC/init.c	TRISA = INIT_TRISA;
003f92   6a92     clrf    0x92, 0x0        	CLRF	_TRISA
                                           ;	.line	39; PIC/init.c	TRISB = INIT_TRISB;
003f94   0e10     movlw   0x10             	MOVLW	0x10
003f96   6e93     movwf   0x93, 0x0        	MOVWF	_TRISB
                                           ;	.line	40; PIC/init.c	TRISC = INIT_TRISC;
003f98   0ef8     movlw   0xf8             	MOVLW	0xf8
003f9a   6e94     movwf   0x94, 0x0        	MOVWF	_TRISC
                                           ;	.line	41; PIC/init.c	TRISD = INIT_TRISD;
003f9c   6a95     clrf    0x95, 0x0        	CLRF	_TRISD
                                           ;	.line	42; PIC/init.c	TRISE = INIT_TRISE;
003f9e   0e02     movlw   0x02             	MOVLW	0x02
003fa0   6e96     movwf   0x96, 0x0        	MOVWF	_TRISE
                                           ;	.line	45; PIC/init.c	TXSTA = INIT_TXSTA;
003fa2   0ea6     movlw   0xa6             	MOVLW	0xa6
003fa4   6eac     movwf   0xac, 0x0        	MOVWF	_TXSTA
                                           ;	.line	46; PIC/init.c	RCSTA = INIT_RCSTA;
003fa6   0e90     movlw   0x90             	MOVLW	0x90
003fa8   6eab     movwf   0xab, 0x0        	MOVWF	_RCSTA
                                           ;	.line	48; PIC/init.c	SPBRG = INIT_SPBRG;
003faa   0e3f     movlw   0x3f             	MOVLW	0x3f
003fac   6eaf     movwf   0xaf, 0x0        	MOVWF	_SPBRG
                                           ;	.line	49; PIC/init.c	SPBRGH = INIT_SPBRGH;
003fae   6ab0     clrf    0xb0, 0x0        	CLRF	_SPBRGH
                                           ;	.line	52; PIC/init.c	ADCON0  = INIT_ADCON0;
003fb0   0e40     movlw   0x40             	MOVLW	0x40
003fb2   6ec2     movwf   0xc2, 0x0        	MOVWF	_ADCON0
                                           ;	.line	53; PIC/init.c	ADCON1  = INIT_ADCON1;
003fb4   0e0e     movlw   0x0e             	MOVLW	0x0e
003fb6   6ec1     movwf   0xc1, 0x0        	MOVWF	_ADCON1
                                           ;	.line	54; PIC/init.c	ADCON2  = INIT_ADCON2;
003fb8   0e06     movlw   0x06             	MOVLW	0x06
003fba   6ec0     movwf   0xc0, 0x0        	MOVWF	_ADCON2
                                           ;	.line	57; PIC/init.c	INTCON = INIT_INTCON;
003fbc   0e20     movlw   0x20             	MOVLW	0x20
003fbe   6ef2     movwf   0xf2, 0x0        	MOVWF	_INTCON
                                           ;	.line	58; PIC/init.c	INTCON2 = INIT_INTCON2;
003fc0   0e80     movlw   0x80             	MOVLW	0x80
003fc2   6ef1     movwf   0xf1, 0x0        	MOVWF	_INTCON2
                                           ;	.line	59; PIC/init.c	RCONbits.IPEN = 1;            //enable priority levels
003fc4   8ed0     bsf     0xd0, 0x7, 0x0   	BSF	_RCONbits, 7
                                           ;	.line	61; PIC/init.c	TMR0H = 0;                    //clear timer
003fc6   6ad7     clrf    0xd7, 0x0        	CLRF	_TMR0H
                                           ;	.line	62; PIC/init.c	TMR0L = 0;                    //clear timer
003fc8   6ad6     clrf    0xd6, 0x0        	CLRF	_TMR0L
                                           ;	.line	63; PIC/init.c	T0CON = INIT_T0CON;           //set up timer0
003fca   0e42     movlw   0x42             	MOVLW	0x42
003fcc   6ed5     movwf   0xd5, 0x0        	MOVWF	_T0CON
                                           ;	.line	65; PIC/init.c	TMR1H = 0;                    //clear timer
003fce   6acf     clrf    0xcf, 0x0        	CLRF	_TMR1H
                                           ;	.line	66; PIC/init.c	TMR1L = 0;                    //clear timer
003fd0   6ace     clrf    0xce, 0x0        	CLRF	_TMR1L
                                           ;	.line	67; PIC/init.c	T1CON = INIT_T1CON;           //set up timer1
003fd2   6acd     clrf    0xcd, 0x0        	CLRF	_T1CON
                                           ;	.line	69; PIC/init.c	TMR2 = 0;
003fd4   6acc     clrf    0xcc, 0x0        	CLRF	_TMR2
                                           ;	.line	70; PIC/init.c	PR2 = INIT_PR2;
003fd6   0ef9     movlw   0xf9             	MOVLW	0xf9
003fd8   6ecb     movwf   0xcb, 0x0        	MOVWF	_PR2
                                           ;	.line	71; PIC/init.c	T2CON = INIT_T2CON;             //enable the timer and set up the scalars
003fda   0e0d     movlw   0x0d             	MOVLW	0x0d
003fdc   6eca     movwf   0xca, 0x0        	MOVWF	_T2CON
                                           ;	.line	73; PIC/init.c	PIE1 = INIT_PIE1;
003fde   0e03     movlw   0x03             	MOVLW	0x03
003fe0   6e9d     movwf   0x9d, 0x0        	MOVWF	_PIE1
                                           ;	.line	74; PIC/init.c	INTCONbits.GIEH = 1;          //enable interrupts
003fe2   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
003fe4   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_init__CLEAR_RAM	code
                                           _CLEAR_RAM:
001008   6aea     clrf    0xea, 0x0        	clrf	_FSR0H
00100a   6ae9     clrf    0xe9, 0x0        	clrf	_FSR0L
                                           RAMCLEAR1:
00100c   0004     clrwdt                   	CLRWDT
00100e   6aee     clrf    0xee, 0x0        	clrf	_POSTINC0
001010   a6ea     btfss   0xea, 0x3, 0x0   	btfss	_FSR0H, 3
001012   d7fc     bra     0x00100c         	bra	RAMCLEAR1
001014   0012     return  0x0              	return
                                           	


                                           ; Statistics:
                                           ; code size:	  116 (0x0074) bytes ( 0.09%)
                                           ;           	   58 (0x003a) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_InterruptHandlerHigh

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_SPPCFGbits
                                           	extern	_SPPEPSbits
                                           	extern	_SPPCONbits
                                           	extern	_UFRMLbits
                                           	extern	_UFRMHbits
                                           	extern	_UIRbits
                                           	extern	_UIEbits
                                           	extern	_UEIRbits
                                           	extern	_UEIEbits
                                           	extern	_USTATbits
                                           	extern	_UCONbits
                                           	extern	_UADDRbits
                                           	extern	_UCFGbits
                                           	extern	_UEP0bits
                                           	extern	_UEP1bits
                                           	extern	_UEP2bits
                                           	extern	_UEP3bits
                                           	extern	_UEP4bits
                                           	extern	_UEP5bits
                                           	extern	_UEP6bits
                                           	extern	_UEP7bits
                                           	extern	_UEP8bits
                                           	extern	_UEP9bits
                                           	extern	_UEP10bits
                                           	extern	_UEP11bits
                                           	extern	_UEP12bits
                                           	extern	_UEP13bits
                                           	extern	_UEP14bits
                                           	extern	_UEP15bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_CCP1ASbits
                                           	extern	_ECCP1ASbits
                                           	extern	_CCP1DELbits
                                           	extern	_ECCP1DELbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ECCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_CommFlags1
                                           	extern	_ArbFlags1
                                           	extern	_ArbFlags2
                                           	extern	_ProgMemAddr
                                           	extern	_ProgmemBuffer
                                           	extern	_NVRCommAddr
                                           	extern	_RAMCommAddr
                                           	extern	_ROMCommAddr
                                           	extern	_LedStatesTop
                                           	extern	_LedStatesBot
                                           	extern	_ButtonStateTop
                                           	extern	_ButtonStateBot
                                           	extern	_SystickCntr
                                           	extern	_SystickCntr2
                                           	extern	_SystickCntr3
                                           	extern	_SystickCntr4
                                           	extern	_SystickCntr5
                                           	extern	_MIDITxBuffer
                                           	extern	_MIDITxBufPtr
                                           	extern	_MIDITxBufOutPtr
                                           	extern	_swuart_tx_buffer
                                           	extern	_swuart_tx_bufptr
                                           	extern	_swuart_tx_bufoutptr
                                           	extern	_swuart_txbyte
                                           	extern	_swuart_txmask
                                           	extern	_swuart_mode
                                           	extern	_swuart_started
                                           	extern	_LCDUpdateStage
                                           	extern	_tTimer1Value
                                           	extern	_LCDRamMap
                                           	extern	_SPPDATA
                                           	extern	_SPPCFG
                                           	extern	_SPPEPS
                                           	extern	_SPPCON
                                           	extern	_UFRM
                                           	extern	_UFRML
                                           	extern	_UFRMH
                                           	extern	_UIR
                                           	extern	_UIE
                                           	extern	_UEIR
                                           	extern	_UEIE
                                           	extern	_USTAT
                                           	extern	_UCON
                                           	extern	_UADDR
                                           	extern	_UCFG
                                           	extern	_UEP0
                                           	extern	_UEP1
                                           	extern	_UEP2
                                           	extern	_UEP3
                                           	extern	_UEP4
                                           	extern	_UEP5
                                           	extern	_UEP6
                                           	extern	_UEP7
                                           	extern	_UEP8
                                           	extern	_UEP9
                                           	extern	_UEP10
                                           	extern	_UEP11
                                           	extern	_UEP12
                                           	extern	_UEP13
                                           	extern	_UEP14
                                           	extern	_UEP15
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_CCP1AS
                                           	extern	_ECCP1AS
                                           	extern	_CCP1DEL
                                           	extern	_ECCP1DEL
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_ECCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_swuart_tx_interrupt
                                           	extern	_ROM_SAVEDATA

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_intslct_ivec_0x1_InterruptHandlerHigh	code	0X000008
                                           ivec_0x1_InterruptHandlerHigh:
000008   eff3     goto    0x003fe6         	GOTO	_InterruptHandlerHigh
00000a   f01f

                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_intslct__InterruptHandlerHigh	code
                                           _InterruptHandlerHigh:
                                           ;	.line	32; PIC/intslct.c	void InterruptHandlerHigh (void)
003fe6   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
003fe8   ffe5
003fea   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
003fec   ffe5
003fee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003ff0   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
003ff2   ffe5
003ff4   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
003ff6   ffe5
003ff8   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
003ffa   ffe5
003ffc   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
003ffe   ffe5
004000   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
004002   ffe5
004004   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
004006   ffe5
                                           ;	.line	37; PIC/intslct.c	if (PIR1bits.TMR1IF) {
004008   a09e     btfss   0x9e, 0x0, 0x0   	BTFSS	_PIR1bits, 0
00400a   d002     bra     0x004010         	BRA	_00106_DS_
                                           ;	.line	39; PIC/intslct.c	swuart_tx_interrupt();
00400c   ecb8     call    0x003770, 0x0    	CALL	_swuart_tx_interrupt
00400e   f01b
                                           _00106_DS_:
                                           ;	.line	42; PIC/intslct.c	if (PIR1bits.TMR2IF) {
004010   a29e     btfss   0x9e, 0x1, 0x0   	BTFSS	_PIR1bits, 1
004012   d007     bra     0x004022         	BRA	_00111_DS_
                                           ;	.line	43; PIC/intslct.c	PIR1bits.TMR2IF = 0;            //clear interrupt flag
004014   929e     bcf     0x9e, 0x1, 0x0   	BCF	_PIR1bits, 1
                                           ;	.line	46; PIC/intslct.c	SystickCntr++;
004016   2b62     incf    0x62, 0x1, 0x1   	INCF	_SystickCntr, F, B
                                           ;	.line	47; PIC/intslct.c	if (SystickCntr == SYSTEM_TIME_1MS) {
004018   5162     movf    0x62, 0x0, 0x1   	MOVF	_SystickCntr, W, B
00401a   0a04     xorlw   0x04             	XORLW	0x04
00401c   e102     bnz     0x004022         	BNZ	_00111_DS_
                                           ;	.line	48; PIC/intslct.c	SystickCntr = 0;
00401e   6b62     clrf    0x62, 0x1        	CLRF	_SystickCntr, B
                                           ;	.line	51; PIC/intslct.c	Systick = true;
004020   815b     bsf     0x5b, 0x0, 0x1   	BSF	_ArbFlags1, 0, B
                                           _00111_DS_:
004022   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
004024   fffb
004026   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
004028   fffa
00402a   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
00402c   ffea
00402e   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
004030   ffe9
004032   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
004034   fff4
004036   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
004038   fff3
00403a   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00403c   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
00403e   ffe0
004040   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
004042   ffd8
004044   0010     retfie  0x0              	RETFIE	



                                           ; Statistics:
                                           ; code size:	   98 (0x0062) bytes ( 0.07%)
                                           ;           	   49 (0x0031) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_LCDRamMap
                                           	global	_LCDUpdateStage
                                           	global	_tTimer1Value
                                           	global	_swuart_started
                                           	global	_swuart_mode
                                           	global	_swuart_txmask
                                           	global	_swuart_txbyte
                                           	global	_swuart_tx_bufoutptr
                                           	global	_swuart_tx_bufptr
                                           	global	_swuart_tx_buffer
                                           	global	_MIDITxBufOutPtr
                                           	global	_MIDITxBufPtr
                                           	global	_MIDITxBuffer
                                           	global	_SystickCntr5
                                           	global	_SystickCntr4
                                           	global	_SystickCntr3
                                           	global	_SystickCntr2
                                           	global	_SystickCntr
                                           	global	_ButtonStateBot
                                           	global	_ButtonStateTop
                                           	global	_LedStatesBot
                                           	global	_LedStatesTop
                                           	global	_ROMCommAddr
                                           	global	_RAMCommAddr
                                           	global	_NVRCommAddr
                                           	global	_ProgmemBuffer
                                           	global	_MiscFlags1
                                           	global	_ArbFlags2
                                           	global	_ArbFlags1
                                           	global	_CommFlags1
                                           	global	_ProgMemAddr
                                           	global	_ROM_SAVEDATA

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_SPPCFGbits
                                           	extern	_SPPEPSbits
                                           	extern	_SPPCONbits
                                           	extern	_UFRMLbits
                                           	extern	_UFRMHbits
                                           	extern	_UIRbits
                                           	extern	_UIEbits
                                           	extern	_UEIRbits
                                           	extern	_UEIEbits
                                           	extern	_USTATbits
                                           	extern	_UCONbits
                                           	extern	_UADDRbits
                                           	extern	_UCFGbits
                                           	extern	_UEP0bits
                                           	extern	_UEP1bits
                                           	extern	_UEP2bits
                                           	extern	_UEP3bits
                                           	extern	_UEP4bits
                                           	extern	_UEP5bits
                                           	extern	_UEP6bits
                                           	extern	_UEP7bits
                                           	extern	_UEP8bits
                                           	extern	_UEP9bits
                                           	extern	_UEP10bits
                                           	extern	_UEP11bits
                                           	extern	_UEP12bits
                                           	extern	_UEP13bits
                                           	extern	_UEP14bits
                                           	extern	_UEP15bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_CCP1ASbits
                                           	extern	_ECCP1ASbits
                                           	extern	_CCP1DELbits
                                           	extern	_ECCP1DELbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ECCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_SPPDATA
                                           	extern	_SPPCFG
                                           	extern	_SPPEPS
                                           	extern	_SPPCON
                                           	extern	_UFRM
                                           	extern	_UFRML
                                           	extern	_UFRMH
                                           	extern	_UIR
                                           	extern	_UIE
                                           	extern	_UEIR
                                           	extern	_UEIE
                                           	extern	_USTAT
                                           	extern	_UCON
                                           	extern	_UADDR
                                           	extern	_UCFG
                                           	extern	_UEP0
                                           	extern	_UEP1
                                           	extern	_UEP2
                                           	extern	_UEP3
                                           	extern	_UEP4
                                           	extern	_UEP5
                                           	extern	_UEP6
                                           	extern	_UEP7
                                           	extern	_UEP8
                                           	extern	_UEP9
                                           	extern	_UEP10
                                           	extern	_UEP11
                                           	extern	_UEP12
                                           	extern	_UEP13
                                           	extern	_UEP14
                                           	extern	_UEP15
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_CCP1AS
                                           	extern	_ECCP1AS
                                           	extern	_CCP1DEL
                                           	extern	_ECCP1DEL
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_ECCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU


                                           gpr1	udata
                                           _ProgMemAddr	res	2

                                           udata_ram_def_0	udata
                                           _CommFlags1	res	1

                                           udata_ram_def_1	udata
                                           _ArbFlags1	res	1

                                           udata_ram_def_2	udata
                                           _ArbFlags2	res	1

                                           udata_ram_def_3	udata
                                           _MiscFlags1	res	1

                                           udata_ram_def_4	udata
                                           _ProgmemBuffer	res	64

                                           udata_ram_def_5	udata
                                           _NVRCommAddr	res	2

                                           udata_ram_def_6	udata
                                           _RAMCommAddr	res	2

                                           udata_ram_def_7	udata
                                           _ROMCommAddr	res	2

                                           udata_ram_def_8	udata
                                           _LedStatesTop	res	1

                                           udata_ram_def_9	udata
                                           _LedStatesBot	res	1

                                           udata_ram_def_10	udata
                                           _ButtonStateTop	res	1

                                           udata_ram_def_11	udata
                                           _ButtonStateBot	res	1

                                           udata_ram_def_12	udata
                                           _SystickCntr	res	1

                                           udata_ram_def_13	udata
                                           _SystickCntr2	res	1

                                           udata_ram_def_14	udata
                                           _SystickCntr3	res	1

                                           udata_ram_def_15	udata
                                           _SystickCntr4	res	1

                                           udata_ram_def_16	udata
                                           _SystickCntr5	res	1

                                           udata_ram_def_17	udata
                                           _MIDITxBuffer	res	42

                                           udata_ram_def_18	udata
                                           _MIDITxBufPtr	res	1

                                           udata_ram_def_19	udata
                                           _MIDITxBufOutPtr	res	1

                                           udata_ram_def_20	udata
                                           _swuart_tx_buffer	res	42

                                           udata_ram_def_21	udata
                                           _swuart_tx_bufptr	res	1

                                           udata_ram_def_22	udata
                                           _swuart_tx_bufoutptr	res	1

                                           udata_ram_def_23	udata
                                           _swuart_txbyte	res	1

                                           udata_ram_def_24	udata
                                           _swuart_txmask	res	1

                                           udata_ram_def_25	udata
                                           _swuart_mode	res	1

                                           udata_ram_def_26	udata
                                           _swuart_started	res	1

                                           udata_ram_def_27	udata
                                           _tTimer1Value	res	2

                                           udata_ram_def_28	udata
                                           _LCDUpdateStage	res	1

                                           udata_ram_def_29	udata
                                           _LCDRamMap	res	80

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute Ival
                                           S_ram_def__ROM_SAVEDATA	code	0X005000
                                           _ROM_SAVEDATA:
005000   0001     halt                     	DB	0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x00
005002   0100     movlb   0x0              
005004   0100     movlb   0x0              
005006   0062     dw      0x0062           
005008   6201     cpfseq  0x01, 0x0        
00500a   0000     nop                      
00500c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00500e   0000     nop                      
005010   0000     nop                      
005012   0000     nop                      
005014   0000     nop                      
005016   0000     nop                      
005018   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00501a   0000     nop                      
00501c   0000     nop                      
00501e   0000     nop                      
005020   0000     nop                      
005022   0000     nop                      
005024   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005026   0000     nop                      
005028   0000     nop                      
00502a   0000     nop                      
00502c   0000     nop                      
00502e   0000     nop                      
005030   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005032   0000     nop                      
005034   0000     nop                      
005036   0000     nop                      
005038   0000     nop                      
00503a   0000     nop                      
00503c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x01, 0x62, 0x00
00503e   0000     nop                      
005040   0002     dw      0x0002           
005042   0100     movlb   0x0              
005044   0100     movlb   0x0              
005046   0062     dw      0x0062           
005048   6201     cpfseq  0x01, 0x0        	DB	0x01, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00504a   0000     nop                      
00504c   0000     nop                      
00504e   0000     nop                      
005050   0000     nop                      
005052   0000     nop                      
005054   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005056   0000     nop                      
005058   0000     nop                      
00505a   0000     nop                      
00505c   0000     nop                      
00505e   0000     nop                      
005060   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005062   0000     nop                      
005064   0000     nop                      
005066   0000     nop                      
005068   0000     nop                      
00506a   0000     nop                      
00506c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00506e   0000     nop                      
005070   0000     nop                      
005072   0000     nop                      
005074   0000     nop                      
005076   0000     nop                      
005078   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x07
00507a   0000     nop                      
00507c   0000     nop                      
00507e   0000     nop                      
005080   0003     sleep                    
005082   0700     decf    0x00, 0x1, 0x1   
005084   0160     dw      0x0160           	DB	0x60, 0x01, 0x62, 0x60, 0x01, 0x62, 0x60, 0x01, 0x62, 0x60, 0x15, 0x7f
005086   6062     cpfslt  0x62, 0x0        
005088   6201     cpfseq  0x01, 0x0        
00508a   0160     dw      0x0160           
00508c   6062     cpfslt  0x62, 0x0        
00508e   7f15     btg     0x15, 0x7, 0x1   
005090   0160     dw      0x0160           	DB	0x60, 0x01, 0x62, 0x60, 0x01, 0x62, 0x60, 0x01, 0x62, 0x60, 0x15, 0x7f
005092   6062     cpfslt  0x62, 0x0        
005094   6201     cpfseq  0x01, 0x0        
005096   0160     dw      0x0160           
005098   6062     cpfslt  0x62, 0x0        
00509a   7f15     btg     0x15, 0x7, 0x1   
00509c   0160     dw      0x0160           	DB	0x60, 0x01, 0x62, 0x60, 0x01, 0x62, 0x60, 0x01, 0x62, 0x60, 0x11, 0x7f
00509e   6062     cpfslt  0x62, 0x0        
0050a0   6201     cpfseq  0x01, 0x0        
0050a2   0160     dw      0x0160           
0050a4   6062     cpfslt  0x62, 0x0        
0050a6   7f11     btg     0x11, 0x7, 0x1   
0050a8   0160     dw      0x0160           	DB	0x60, 0x01, 0x62, 0x60, 0x01, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0050aa   6062     cpfslt  0x62, 0x0        
0050ac   6201     cpfseq  0x01, 0x0        
0050ae   0000     nop                      
0050b0   0000     nop                      
0050b2   0000     nop                      
0050b4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0050b6   0000     nop                      
0050b8   0000     nop                      
0050ba   0000     nop                      
0050bc   0000     nop                      
0050be   0000     nop                      
0050c0   0004     clrwdt                   	DB	0x04, 0x00, 0x00, 0x01, 0x00, 0x01, 0x62, 0x00, 0x01, 0x7f, 0x00, 0x00
0050c2   0100     movlb   0x0              
0050c4   0100     movlb   0x0              
0050c6   0062     dw      0x0062           
0050c8   7f01     btg     0x01, 0x7, 0x1   
0050ca   0000     nop                      
0050cc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0050ce   0000     nop                      
0050d0   0000     nop                      
0050d2   0000     nop                      
0050d4   0000     nop                      
0050d6   0000     nop                      
0050d8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0050da   0000     nop                      
0050dc   0000     nop                      
0050de   0000     nop                      
0050e0   0000     nop                      
0050e2   0000     nop                      
0050e4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0050e6   0000     nop                      
0050e8   0000     nop                      
0050ea   0000     nop                      
0050ec   0000     nop                      
0050ee   0000     nop                      
0050f0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0050f2   0000     nop                      
0050f4   0000     nop                      
0050f6   0000     nop                      
0050f8   0000     nop                      
0050fa   0000     nop                      
0050fc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x03, 0x00, 0x01, 0x62, 0x00
0050fe   0000     nop                      
005100   0005     push                     
005102   0300     mulwf   0x00, 0x1        
005104   0100     movlb   0x0              
005106   0062     dw      0x0062           
005108   6201     cpfseq  0x01, 0x0        	DB	0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x11, 0x7f, 0x00, 0x01, 0x62, 0x00
00510a   0100     movlb   0x0              
00510c   0062     dw      0x0062           
00510e   7f11     btg     0x11, 0x7, 0x1   
005110   0100     movlb   0x0              
005112   0062     dw      0x0062           
005114   6201     cpfseq  0x01, 0x0        	DB	0x01, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005116   0000     nop                      
005118   0000     nop                      
00511a   0000     nop                      
00511c   0000     nop                      
00511e   0000     nop                      
005120   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005122   0000     nop                      
005124   0000     nop                      
005126   0000     nop                      
005128   0000     nop                      
00512a   0000     nop                      
00512c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00512e   0000     nop                      
005130   0000     nop                      
005132   0000     nop                      
005134   0000     nop                      
005136   0000     nop                      
005138   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x01
00513a   0000     nop                      
00513c   0000     nop                      
00513e   0000     nop                      
005140   0006     pop                      
005142   0100     movlb   0x0              
005144   0100     movlb   0x0              	DB	0x00, 0x01, 0x62, 0x00, 0x09, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005146   0062     dw      0x0062           
005148   6209     cpfseq  0x09, 0x0        
00514a   0000     nop                      
00514c   0000     nop                      
00514e   0000     nop                      
005150   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005152   0000     nop                      
005154   0000     nop                      
005156   0000     nop                      
005158   0000     nop                      
00515a   0000     nop                      
00515c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00515e   0000     nop                      
005160   0000     nop                      
005162   0000     nop                      
005164   0000     nop                      
005166   0000     nop                      
005168   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00516a   0000     nop                      
00516c   0000     nop                      
00516e   0000     nop                      
005170   0000     nop                      
005172   0000     nop                      
005174   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005176   0000     nop                      
005178   0000     nop                      
00517a   0000     nop                      
00517c   0000     nop                      
00517e   0000     nop                      
005180   0007     daw                      	DB	0x07, 0x00, 0x00, 0x01, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x00
005182   0100     movlb   0x0              
005184   0100     movlb   0x0              
005186   0062     dw      0x0062           
005188   6201     cpfseq  0x01, 0x0        
00518a   0000     nop                      
00518c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00518e   0000     nop                      
005190   0000     nop                      
005192   0000     nop                      
005194   0000     nop                      
005196   0000     nop                      
005198   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00519a   0000     nop                      
00519c   0000     nop                      
00519e   0000     nop                      
0051a0   0000     nop                      
0051a2   0000     nop                      
0051a4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0051a6   0000     nop                      
0051a8   0000     nop                      
0051aa   0000     nop                      
0051ac   0000     nop                      
0051ae   0000     nop                      
0051b0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0051b2   0000     nop                      
0051b4   0000     nop                      
0051b6   0000     nop                      
0051b8   0000     nop                      
0051ba   0000     nop                      
0051bc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x03, 0x1a, 0x00, 0x62, 0x1a
0051be   0000     nop                      
0051c0   0008     tblrd*                   
0051c2   0300     mulwf   0x00, 0x1        
0051c4   001a     dw      0x001a           
0051c6   1a62     xorwf   0x62, 0x1, 0x0   
0051c8   6200     cpfseq  0x00, 0x0        	DB	0x00, 0x62, 0x1a, 0x19, 0x7f, 0x1a, 0x00, 0x62, 0x1a, 0x00, 0x62, 0x1a
0051ca   191a     xorwf   0x1a, 0x0, 0x1   
0051cc   1a7f     xorwf   0x7f, 0x1, 0x0   
0051ce   6200     cpfseq  0x00, 0x0        
0051d0   001a     dw      0x001a           
0051d2   1a62     xorwf   0x62, 0x1, 0x0   
0051d4   6200     cpfseq  0x00, 0x0        	DB	0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0051d6   0000     nop                      
0051d8   0000     nop                      
0051da   0000     nop                      
0051dc   0000     nop                      
0051de   0000     nop                      
0051e0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0051e2   0000     nop                      
0051e4   0000     nop                      
0051e6   0000     nop                      
0051e8   0000     nop                      
0051ea   0000     nop                      
0051ec   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0051ee   0000     nop                      
0051f0   0000     nop                      
0051f2   0000     nop                      
0051f4   0000     nop                      
0051f6   0000     nop                      
0051f8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x03
0051fa   0000     nop                      
0051fc   0000     nop                      
0051fe   0000     nop                      
005200   0009     tblrd*+                  
005202   0300     mulwf   0x00, 0x1        
005204   0100     movlb   0x0              	DB	0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x11, 0x7f
005206   0062     dw      0x0062           
005208   6201     cpfseq  0x01, 0x0        
00520a   0100     movlb   0x0              
00520c   0062     dw      0x0062           
00520e   7f11     btg     0x11, 0x7, 0x1   
005210   0100     movlb   0x0              	DB	0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005212   0062     dw      0x0062           
005214   6201     cpfseq  0x01, 0x0        
005216   0000     nop                      
005218   0000     nop                      
00521a   0000     nop                      
00521c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00521e   0000     nop                      
005220   0000     nop                      
005222   0000     nop                      
005224   0000     nop                      
005226   0000     nop                      
005228   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00522a   0000     nop                      
00522c   0000     nop                      
00522e   0000     nop                      
005230   0000     nop                      
005232   0000     nop                      
005234   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005236   0000     nop                      
005238   0000     nop                      
00523a   0000     nop                      
00523c   0000     nop                      
00523e   0000     nop                      
005240   000a     tblrd*-                  	DB	0x0a, 0x00, 0x00, 0x07, 0x00, 0x01, 0x62, 0x00, 0x11, 0x7f, 0x00, 0x01
005242   0700     decf    0x00, 0x1, 0x1   
005244   0100     movlb   0x0              
005246   0062     dw      0x0062           
005248   7f11     btg     0x11, 0x7, 0x1   
00524a   0100     movlb   0x0              
00524c   0062     dw      0x0062           	DB	0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x11, 0x7f, 0x00, 0x01
00524e   6201     cpfseq  0x01, 0x0        
005250   0100     movlb   0x0              
005252   0062     dw      0x0062           
005254   7f11     btg     0x11, 0x7, 0x1   
005256   0100     movlb   0x0              
005258   0062     dw      0x0062           	DB	0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x11, 0x7f, 0x00, 0x01
00525a   6201     cpfseq  0x01, 0x0        
00525c   0100     movlb   0x0              
00525e   0062     dw      0x0062           
005260   7f11     btg     0x11, 0x7, 0x1   
005262   0100     movlb   0x0              
005264   0062     dw      0x0062           	DB	0x62, 0x00, 0x11, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x00
005266   6211     cpfseq  0x11, 0x0        
005268   0100     movlb   0x0              
00526a   0062     dw      0x0062           
00526c   6201     cpfseq  0x01, 0x0        
00526e   0000     nop                      
005270   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005272   0000     nop                      
005274   0000     nop                      
005276   0000     nop                      
005278   0000     nop                      
00527a   0000     nop                      
00527c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x09, 0x00, 0x00, 0x62, 0x00
00527e   0000     nop                      
005280   000b     tblrd+*                  
005282   0900     iorlw   0x00             
005284   0000     nop                      
005286   0062     dw      0x0062           
005288   5d00     subwf   0x00, 0x0, 0x1   	DB	0x00, 0x5d, 0x00, 0x01, 0x62, 0x00, 0x01, 0x54, 0x00, 0x01, 0x62, 0x00
00528a   0100     movlb   0x0              
00528c   0062     dw      0x0062           
00528e   5401     subfwb  0x01, 0x0, 0x0   
005290   0100     movlb   0x0              
005292   0062     dw      0x0062           
005294   6201     cpfseq  0x01, 0x0        	DB	0x01, 0x62, 0x00, 0x01, 0x62, 0x60, 0x11, 0x7f, 0x00, 0x00, 0x62, 0x60
005296   0100     movlb   0x0              
005298   6062     cpfslt  0x62, 0x0        
00529a   7f11     btg     0x11, 0x7, 0x1   
00529c   0000     nop                      
00529e   6062     cpfslt  0x62, 0x0        
0052a0   6b11     clrf    0x11, 0x1        	DB	0x11, 0x6b, 0x00, 0x00, 0x62, 0x00, 0x00, 0x62, 0x00, 0x01, 0x62, 0x00
0052a2   0000     nop                      
0052a4   0062     dw      0x0062           
0052a6   6200     cpfseq  0x00, 0x0        
0052a8   0100     movlb   0x0              
0052aa   0062     dw      0x0062           
0052ac   6200     cpfseq  0x00, 0x0        	DB	0x00, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x60
0052ae   0100     movlb   0x0              
0052b0   0062     dw      0x0062           
0052b2   6201     cpfseq  0x01, 0x0        
0052b4   0100     movlb   0x0              
0052b6   6062     cpfslt  0x62, 0x0        
0052b8   7f11     btg     0x11, 0x7, 0x1   	DB	0x11, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x08
0052ba   0000     nop                      
0052bc   0000     nop                      
0052be   0000     nop                      
0052c0   000c     tblwt*                   
0052c2   0800     sublw   0x00             
0052c4   0100     movlb   0x0              	DB	0x00, 0x01, 0x62, 0x20, 0x31, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62
0052c6   2062     addwfc  0x62, 0x0, 0x0   
0052c8   6231     cpfseq  0x31, 0x0        
0052ca   0100     movlb   0x0              
0052cc   0062     dw      0x0062           
0052ce   6201     cpfseq  0x01, 0x0        
0052d0   0100     movlb   0x0              	DB	0x00, 0x01, 0x62, 0x20, 0x31, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62
0052d2   2062     addwfc  0x62, 0x0, 0x0   
0052d4   6231     cpfseq  0x31, 0x0        
0052d6   0100     movlb   0x0              
0052d8   0062     dw      0x0062           
0052da   6201     cpfseq  0x01, 0x0        
0052dc   0100     movlb   0x0              	DB	0x00, 0x01, 0x62, 0x20, 0x31, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62
0052de   2062     addwfc  0x62, 0x0, 0x0   
0052e0   6231     cpfseq  0x31, 0x0        
0052e2   0100     movlb   0x0              
0052e4   0062     dw      0x0062           
0052e6   6201     cpfseq  0x01, 0x0        
0052e8   0100     movlb   0x0              	DB	0x00, 0x01, 0x62, 0x20, 0x31, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62
0052ea   2062     addwfc  0x62, 0x0, 0x0   
0052ec   6231     cpfseq  0x31, 0x0        
0052ee   0100     movlb   0x0              
0052f0   0062     dw      0x0062           
0052f2   6201     cpfseq  0x01, 0x0        
0052f4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0052f6   0000     nop                      
0052f8   0000     nop                      
0052fa   0000     nop                      
0052fc   0000     nop                      
0052fe   0000     nop                      
005300   000d     tblwt*+                  	DB	0x0d, 0x00, 0x00, 0x06, 0x60, 0x01, 0x62, 0x60, 0x00, 0x62, 0x60, 0x01
005302   0600     decf    0x00, 0x1, 0x0   
005304   0160     dw      0x0160           
005306   6062     cpfslt  0x62, 0x0        
005308   6200     cpfseq  0x00, 0x0        
00530a   0160     dw      0x0160           
00530c   6062     cpfslt  0x62, 0x0        	DB	0x62, 0x60, 0x01, 0x62, 0x60, 0x01, 0x62, 0x60, 0x00, 0x62, 0x60, 0x01
00530e   6201     cpfseq  0x01, 0x0        
005310   0160     dw      0x0160           
005312   6062     cpfslt  0x62, 0x0        
005314   6200     cpfseq  0x00, 0x0        
005316   0160     dw      0x0160           
005318   6062     cpfslt  0x62, 0x0        	DB	0x62, 0x60, 0x01, 0x62, 0x60, 0x01, 0x62, 0x60, 0x00, 0x62, 0x60, 0x01
00531a   6201     cpfseq  0x01, 0x0        
00531c   0160     dw      0x0160           
00531e   6062     cpfslt  0x62, 0x0        
005320   6200     cpfseq  0x00, 0x0        
005322   0160     dw      0x0160           
005324   6062     cpfslt  0x62, 0x0        	DB	0x62, 0x60, 0x01, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005326   6201     cpfseq  0x01, 0x0        
005328   0000     nop                      
00532a   0000     nop                      
00532c   0000     nop                      
00532e   0000     nop                      
005330   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005332   0000     nop                      
005334   0000     nop                      
005336   0000     nop                      
005338   0000     nop                      
00533a   0000     nop                      
00533c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x01, 0x00, 0x01, 0x62, 0x00
00533e   0000     nop                      
005340   000e     tblwt*-                  
005342   0100     movlb   0x0              
005344   0100     movlb   0x0              
005346   0062     dw      0x0062           
005348   6201     cpfseq  0x01, 0x0        	DB	0x01, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00534a   0000     nop                      
00534c   0000     nop                      
00534e   0000     nop                      
005350   0000     nop                      
005352   0000     nop                      
005354   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005356   0000     nop                      
005358   0000     nop                      
00535a   0000     nop                      
00535c   0000     nop                      
00535e   0000     nop                      
005360   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005362   0000     nop                      
005364   0000     nop                      
005366   0000     nop                      
005368   0000     nop                      
00536a   0000     nop                      
00536c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00536e   0000     nop                      
005370   0000     nop                      
005372   0000     nop                      
005374   0000     nop                      
005376   0000     nop                      
005378   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x01
00537a   0000     nop                      
00537c   0000     nop                      
00537e   0000     nop                      
005380   000f     tblwt+*                  
005382   0100     movlb   0x0              
005384   0100     movlb   0x0              	DB	0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005386   0062     dw      0x0062           
005388   6201     cpfseq  0x01, 0x0        
00538a   0000     nop                      
00538c   0000     nop                      
00538e   0000     nop                      
005390   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005392   0000     nop                      
005394   0000     nop                      
005396   0000     nop                      
005398   0000     nop                      
00539a   0000     nop                      
00539c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00539e   0000     nop                      
0053a0   0000     nop                      
0053a2   0000     nop                      
0053a4   0000     nop                      
0053a6   0000     nop                      
0053a8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0053aa   0000     nop                      
0053ac   0000     nop                      
0053ae   0000     nop                      
0053b0   0000     nop                      
0053b2   0000     nop                      
0053b4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0053b6   0000     nop                      
0053b8   0000     nop                      
0053ba   0000     nop                      
0053bc   0000     nop                      
0053be   0000     nop                      
0053c0   0010     retfie  0x0              	DB	0x10, 0x00, 0x00, 0x09, 0x00, 0x01, 0x62, 0x00, 0x11, 0x62, 0x00, 0x01
0053c2   0900     iorlw   0x00             
0053c4   0100     movlb   0x0              
0053c6   0062     dw      0x0062           
0053c8   6211     cpfseq  0x11, 0x0        
0053ca   0100     movlb   0x0              
0053cc   0062     dw      0x0062           	DB	0x62, 0x00, 0x18, 0x62, 0x00, 0x01, 0x62, 0x00, 0x11, 0x62, 0x00, 0x01
0053ce   6218     cpfseq  0x18, 0x0        
0053d0   0100     movlb   0x0              
0053d2   0062     dw      0x0062           
0053d4   6211     cpfseq  0x11, 0x0        
0053d6   0100     movlb   0x0              
0053d8   0062     dw      0x0062           	DB	0x62, 0x00, 0x18, 0x62, 0x00, 0x01, 0x62, 0x00, 0x11, 0x62, 0x00, 0x01
0053da   6218     cpfseq  0x18, 0x0        
0053dc   0100     movlb   0x0              
0053de   0062     dw      0x0062           
0053e0   6211     cpfseq  0x11, 0x0        
0053e2   0100     movlb   0x0              
0053e4   0062     dw      0x0062           	DB	0x62, 0x00, 0x11, 0x7f, 0x00, 0x01, 0x62, 0x00, 0x18, 0x62, 0x00, 0x01
0053e6   7f11     btg     0x11, 0x7, 0x1   
0053e8   0100     movlb   0x0              
0053ea   0062     dw      0x0062           
0053ec   6218     cpfseq  0x18, 0x0        
0053ee   0100     movlb   0x0              
0053f0   0062     dw      0x0062           	DB	0x62, 0x00, 0x11, 0x62, 0x00, 0x01, 0x62, 0x00, 0x11, 0x7f, 0x00, 0x00
0053f2   6211     cpfseq  0x11, 0x0        
0053f4   0100     movlb   0x0              
0053f6   0062     dw      0x0062           
0053f8   7f11     btg     0x11, 0x7, 0x1   
0053fa   0000     nop                      
0053fc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x03, 0x00, 0x01, 0x62, 0x00
0053fe   0000     nop                      
005400   0011     retfie  0x1              
005402   0300     mulwf   0x00, 0x1        
005404   0100     movlb   0x0              
005406   0062     dw      0x0062           
005408   6201     cpfseq  0x01, 0x0        	DB	0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x7f, 0x00, 0x01, 0x62, 0x00
00540a   0100     movlb   0x0              
00540c   0062     dw      0x0062           
00540e   7f01     btg     0x01, 0x7, 0x1   
005410   0100     movlb   0x0              
005412   0062     dw      0x0062           
005414   6201     cpfseq  0x01, 0x0        	DB	0x01, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005416   0000     nop                      
005418   0000     nop                      
00541a   0000     nop                      
00541c   0000     nop                      
00541e   0000     nop                      
005420   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005422   0000     nop                      
005424   0000     nop                      
005426   0000     nop                      
005428   0000     nop                      
00542a   0000     nop                      
00542c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00542e   0000     nop                      
005430   0000     nop                      
005432   0000     nop                      
005434   0000     nop                      
005436   0000     nop                      
005438   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x03
00543a   0000     nop                      
00543c   0000     nop                      
00543e   0000     nop                      
005440   0012     return  0x0              
005442   0300     mulwf   0x00, 0x1        
005444   0100     movlb   0x0              	DB	0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x11, 0x7f
005446   0062     dw      0x0062           
005448   6201     cpfseq  0x01, 0x0        
00544a   0100     movlb   0x0              
00544c   0062     dw      0x0062           
00544e   7f11     btg     0x11, 0x7, 0x1   
005450   0100     movlb   0x0              	DB	0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005452   0062     dw      0x0062           
005454   6201     cpfseq  0x01, 0x0        
005456   0000     nop                      
005458   0000     nop                      
00545a   0000     nop                      
00545c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00545e   0000     nop                      
005460   0000     nop                      
005462   0000     nop                      
005464   0000     nop                      
005466   0000     nop                      
005468   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00546a   0000     nop                      
00546c   0000     nop                      
00546e   0000     nop                      
005470   0000     nop                      
005472   0000     nop                      
005474   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005476   0000     nop                      
005478   0000     nop                      
00547a   0000     nop                      
00547c   0000     nop                      
00547e   0000     nop                      
005480   0013     return  0x1              	DB	0x13, 0x00, 0x00, 0x01, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x00
005482   0100     movlb   0x0              
005484   0100     movlb   0x0              
005486   0062     dw      0x0062           
005488   6201     cpfseq  0x01, 0x0        
00548a   0000     nop                      
00548c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00548e   0000     nop                      
005490   0000     nop                      
005492   0000     nop                      
005494   0000     nop                      
005496   0000     nop                      
005498   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00549a   0000     nop                      
00549c   0000     nop                      
00549e   0000     nop                      
0054a0   0000     nop                      
0054a2   0000     nop                      
0054a4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0054a6   0000     nop                      
0054a8   0000     nop                      
0054aa   0000     nop                      
0054ac   0000     nop                      
0054ae   0000     nop                      
0054b0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0054b2   0000     nop                      
0054b4   0000     nop                      
0054b6   0000     nop                      
0054b8   0000     nop                      
0054ba   0000     nop                      
0054bc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x01, 0x00, 0x01, 0x62, 0x00
0054be   0000     nop                      
0054c0   0014     dw      0x0014           
0054c2   0100     movlb   0x0              
0054c4   0100     movlb   0x0              
0054c6   0062     dw      0x0062           
0054c8   6201     cpfseq  0x01, 0x0        	DB	0x01, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0054ca   0000     nop                      
0054cc   0000     nop                      
0054ce   0000     nop                      
0054d0   0000     nop                      
0054d2   0000     nop                      
0054d4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0054d6   0000     nop                      
0054d8   0000     nop                      
0054da   0000     nop                      
0054dc   0000     nop                      
0054de   0000     nop                      
0054e0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0054e2   0000     nop                      
0054e4   0000     nop                      
0054e6   0000     nop                      
0054e8   0000     nop                      
0054ea   0000     nop                      
0054ec   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0054ee   0000     nop                      
0054f0   0000     nop                      
0054f2   0000     nop                      
0054f4   0000     nop                      
0054f6   0000     nop                      
0054f8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x03
0054fa   0000     nop                      
0054fc   0000     nop                      
0054fe   0000     nop                      
005500   0015     dw      0x0015           
005502   0300     mulwf   0x00, 0x1        
005504   0100     movlb   0x0              	DB	0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x11, 0x7f, 0x00, 0x01, 0x62
005506   0062     dw      0x0062           
005508   6201     cpfseq  0x01, 0x0        
00550a   1100     iorwf   0x00, 0x0, 0x1   
00550c   007f     dw      0x007f           
00550e   6201     cpfseq  0x01, 0x0        
005510   0100     movlb   0x0              	DB	0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005512   0062     dw      0x0062           
005514   6201     cpfseq  0x01, 0x0        
005516   0000     nop                      
005518   0000     nop                      
00551a   0000     nop                      
00551c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00551e   0000     nop                      
005520   0000     nop                      
005522   0000     nop                      
005524   0000     nop                      
005526   0000     nop                      
005528   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00552a   0000     nop                      
00552c   0000     nop                      
00552e   0000     nop                      
005530   0000     nop                      
005532   0000     nop                      
005534   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005536   0000     nop                      
005538   0000     nop                      
00553a   0000     nop                      
00553c   0000     nop                      
00553e   0000     nop                      
005540   0016     dw      0x0016           	DB	0x16, 0x00, 0x00, 0x03, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01
005542   0300     mulwf   0x00, 0x1        
005544   0100     movlb   0x0              
005546   0062     dw      0x0062           
005548   6201     cpfseq  0x01, 0x0        
00554a   0100     movlb   0x0              
00554c   0062     dw      0x0062           	DB	0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x00
00554e   6201     cpfseq  0x01, 0x0        
005550   0100     movlb   0x0              
005552   0062     dw      0x0062           
005554   6201     cpfseq  0x01, 0x0        
005556   0000     nop                      
005558   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00555a   0000     nop                      
00555c   0000     nop                      
00555e   0000     nop                      
005560   0000     nop                      
005562   0000     nop                      
005564   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005566   0000     nop                      
005568   0000     nop                      
00556a   0000     nop                      
00556c   0000     nop                      
00556e   0000     nop                      
005570   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005572   0000     nop                      
005574   0000     nop                      
005576   0000     nop                      
005578   0000     nop                      
00557a   0000     nop                      
00557c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x01, 0x00, 0x01, 0x62, 0x00
00557e   0000     nop                      
005580   0017     dw      0x0017           
005582   0100     movlb   0x0              
005584   0100     movlb   0x0              
005586   0062     dw      0x0062           
005588   6201     cpfseq  0x01, 0x0        	DB	0x01, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00558a   0000     nop                      
00558c   0000     nop                      
00558e   0000     nop                      
005590   0000     nop                      
005592   0000     nop                      
005594   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005596   0000     nop                      
005598   0000     nop                      
00559a   0000     nop                      
00559c   0000     nop                      
00559e   0000     nop                      
0055a0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0055a2   0000     nop                      
0055a4   0000     nop                      
0055a6   0000     nop                      
0055a8   0000     nop                      
0055aa   0000     nop                      
0055ac   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0055ae   0000     nop                      
0055b0   0000     nop                      
0055b2   0000     nop                      
0055b4   0000     nop                      
0055b6   0000     nop                      
0055b8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x03
0055ba   0000     nop                      
0055bc   0000     nop                      
0055be   0000     nop                      
0055c0   0018     dw      0x0018           
0055c2   0300     mulwf   0x00, 0x1        
0055c4   0100     movlb   0x0              	DB	0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x19, 0x62
0055c6   0062     dw      0x0062           
0055c8   6201     cpfseq  0x01, 0x0        
0055ca   0100     movlb   0x0              
0055cc   0062     dw      0x0062           
0055ce   6219     cpfseq  0x19, 0x0        
0055d0   0100     movlb   0x0              	DB	0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0055d2   0062     dw      0x0062           
0055d4   6201     cpfseq  0x01, 0x0        
0055d6   0000     nop                      
0055d8   0000     nop                      
0055da   0000     nop                      
0055dc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0055de   0000     nop                      
0055e0   0000     nop                      
0055e2   0000     nop                      
0055e4   0000     nop                      
0055e6   0000     nop                      
0055e8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0055ea   0000     nop                      
0055ec   0000     nop                      
0055ee   0000     nop                      
0055f0   0000     nop                      
0055f2   0000     nop                      
0055f4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0055f6   0000     nop                      
0055f8   0000     nop                      
0055fa   0000     nop                      
0055fc   0000     nop                      
0055fe   0000     nop                      
005600   0019     dw      0x0019           	DB	0x19, 0x00, 0x00, 0x01, 0x00, 0x00, 0x62, 0x00, 0x18, 0x62, 0x00, 0x00
005602   0100     movlb   0x0              
005604   0000     nop                      
005606   0062     dw      0x0062           
005608   6218     cpfseq  0x18, 0x0        
00560a   0000     nop                      
00560c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00560e   0000     nop                      
005610   0000     nop                      
005612   0000     nop                      
005614   0000     nop                      
005616   0000     nop                      
005618   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00561a   0000     nop                      
00561c   0000     nop                      
00561e   0000     nop                      
005620   0000     nop                      
005622   0000     nop                      
005624   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005626   0000     nop                      
005628   0000     nop                      
00562a   0000     nop                      
00562c   0000     nop                      
00562e   0000     nop                      
005630   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005632   0000     nop                      
005634   0000     nop                      
005636   0000     nop                      
005638   0000     nop                      
00563a   0000     nop                      
00563c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x01, 0x00, 0x01, 0x62, 0x00
00563e   0000     nop                      
005640   001a     dw      0x001a           
005642   0100     movlb   0x0              
005644   0100     movlb   0x0              
005646   0062     dw      0x0062           
005648   6201     cpfseq  0x01, 0x0        	DB	0x01, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00564a   0000     nop                      
00564c   0000     nop                      
00564e   0000     nop                      
005650   0000     nop                      
005652   0000     nop                      
005654   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005656   0000     nop                      
005658   0000     nop                      
00565a   0000     nop                      
00565c   0000     nop                      
00565e   0000     nop                      
005660   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005662   0000     nop                      
005664   0000     nop                      
005666   0000     nop                      
005668   0000     nop                      
00566a   0000     nop                      
00566c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00566e   0000     nop                      
005670   0000     nop                      
005672   0000     nop                      
005674   0000     nop                      
005676   0000     nop                      
005678   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x01
00567a   0000     nop                      
00567c   0000     nop                      
00567e   0000     nop                      
005680   001b     dw      0x001b           
005682   0100     movlb   0x0              
005684   0100     movlb   0x0              	DB	0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005686   0062     dw      0x0062           
005688   6201     cpfseq  0x01, 0x0        
00568a   0000     nop                      
00568c   0000     nop                      
00568e   0000     nop                      
005690   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005692   0000     nop                      
005694   0000     nop                      
005696   0000     nop                      
005698   0000     nop                      
00569a   0000     nop                      
00569c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00569e   0000     nop                      
0056a0   0000     nop                      
0056a2   0000     nop                      
0056a4   0000     nop                      
0056a6   0000     nop                      
0056a8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0056aa   0000     nop                      
0056ac   0000     nop                      
0056ae   0000     nop                      
0056b0   0000     nop                      
0056b2   0000     nop                      
0056b4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0056b6   0000     nop                      
0056b8   0000     nop                      
0056ba   0000     nop                      
0056bc   0000     nop                      
0056be   0000     nop                      
0056c0   001c     dw      0x001c           	DB	0x1c, 0x00, 0x00, 0x01, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x00
0056c2   0100     movlb   0x0              
0056c4   0100     movlb   0x0              
0056c6   0062     dw      0x0062           
0056c8   6201     cpfseq  0x01, 0x0        
0056ca   0000     nop                      
0056cc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0056ce   0000     nop                      
0056d0   0000     nop                      
0056d2   0000     nop                      
0056d4   0000     nop                      
0056d6   0000     nop                      
0056d8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0056da   0000     nop                      
0056dc   0000     nop                      
0056de   0000     nop                      
0056e0   0000     nop                      
0056e2   0000     nop                      
0056e4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0056e6   0000     nop                      
0056e8   0000     nop                      
0056ea   0000     nop                      
0056ec   0000     nop                      
0056ee   0000     nop                      
0056f0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0056f2   0000     nop                      
0056f4   0000     nop                      
0056f6   0000     nop                      
0056f8   0000     nop                      
0056fa   0000     nop                      
0056fc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x62, 0x00
0056fe   0000     nop                      
005700   001d     dw      0x001d           
005702   0a00     xorlw   0x00             
005704   0000     nop                      
005706   0062     dw      0x0062           
005708   6200     cpfseq  0x00, 0x0        	DB	0x00, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00
00570a   0100     movlb   0x0              
00570c   0062     dw      0x0062           
00570e   6201     cpfseq  0x01, 0x0        
005710   0100     movlb   0x0              
005712   0062     dw      0x0062           
005714   6200     cpfseq  0x00, 0x0        	DB	0x00, 0x62, 0x00, 0x00, 0x62, 0x00, 0x00, 0x62, 0x00, 0x01, 0x62, 0x00
005716   0000     nop                      
005718   0062     dw      0x0062           
00571a   6200     cpfseq  0x00, 0x0        
00571c   0100     movlb   0x0              
00571e   0062     dw      0x0062           
005720   6201     cpfseq  0x01, 0x0        	DB	0x01, 0x62, 0x00, 0x11, 0x7f, 0x00, 0x01, 0x62, 0x00, 0x11, 0x7f, 0x00
005722   1100     iorwf   0x00, 0x0, 0x1   
005724   007f     dw      0x007f           
005726   6201     cpfseq  0x01, 0x0        
005728   1100     iorwf   0x00, 0x0, 0x1   
00572a   007f     dw      0x007f           
00572c   6200     cpfseq  0x00, 0x0        	DB	0x00, 0x62, 0x00, 0x00, 0x62, 0x00, 0x00, 0x62, 0x00, 0x01, 0x62, 0x00
00572e   0000     nop                      
005730   0062     dw      0x0062           
005732   6200     cpfseq  0x00, 0x0        
005734   0100     movlb   0x0              
005736   0062     dw      0x0062           
005738   6201     cpfseq  0x01, 0x0        	DB	0x01, 0x62, 0x00, 0x11, 0x7f, 0x00, 0x01, 0x62, 0x1e, 0x00, 0x00, 0x01
00573a   1100     iorwf   0x00, 0x0, 0x1   
00573c   007f     dw      0x007f           
00573e   6201     cpfseq  0x01, 0x0        
005740   001e     dw      0x001e           
005742   0100     movlb   0x0              
005744   0100     movlb   0x0              	DB	0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005746   0062     dw      0x0062           
005748   6201     cpfseq  0x01, 0x0        
00574a   0000     nop                      
00574c   0000     nop                      
00574e   0000     nop                      
005750   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005752   0000     nop                      
005754   0000     nop                      
005756   0000     nop                      
005758   0000     nop                      
00575a   0000     nop                      
00575c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00575e   0000     nop                      
005760   0000     nop                      
005762   0000     nop                      
005764   0000     nop                      
005766   0000     nop                      
005768   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00576a   0000     nop                      
00576c   0000     nop                      
00576e   0000     nop                      
005770   0000     nop                      
005772   0000     nop                      
005774   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005776   0000     nop                      
005778   0000     nop                      
00577a   0000     nop                      
00577c   0000     nop                      
00577e   0000     nop                      
005780   001f     dw      0x001f           	DB	0x1f, 0x00, 0x00, 0x01, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x00
005782   0100     movlb   0x0              
005784   0100     movlb   0x0              
005786   0062     dw      0x0062           
005788   6201     cpfseq  0x01, 0x0        
00578a   0000     nop                      
00578c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00578e   0000     nop                      
005790   0000     nop                      
005792   0000     nop                      
005794   0000     nop                      
005796   0000     nop                      
005798   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00579a   0000     nop                      
00579c   0000     nop                      
00579e   0000     nop                      
0057a0   0000     nop                      
0057a2   0000     nop                      
0057a4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0057a6   0000     nop                      
0057a8   0000     nop                      
0057aa   0000     nop                      
0057ac   0000     nop                      
0057ae   0000     nop                      
0057b0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0057b2   0000     nop                      
0057b4   0000     nop                      
0057b6   0000     nop                      
0057b8   0000     nop                      
0057ba   0000     nop                      
0057bc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x01, 0x00, 0x01, 0x62, 0x00
0057be   0000     nop                      
0057c0   0020     dw      0x0020           
0057c2   0100     movlb   0x0              
0057c4   0100     movlb   0x0              
0057c6   0062     dw      0x0062           
0057c8   6201     cpfseq  0x01, 0x0        	DB	0x01, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0057ca   0000     nop                      
0057cc   0000     nop                      
0057ce   0000     nop                      
0057d0   0000     nop                      
0057d2   0000     nop                      
0057d4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0057d6   0000     nop                      
0057d8   0000     nop                      
0057da   0000     nop                      
0057dc   0000     nop                      
0057de   0000     nop                      
0057e0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0057e2   0000     nop                      
0057e4   0000     nop                      
0057e6   0000     nop                      
0057e8   0000     nop                      
0057ea   0000     nop                      
0057ec   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0057ee   0000     nop                      
0057f0   0000     nop                      
0057f2   0000     nop                      
0057f4   0000     nop                      
0057f6   0000     nop                      
0057f8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x04
0057fa   0000     nop                      
0057fc   0000     nop                      
0057fe   0000     nop                      
005800   0021     dw      0x0021           
005802   0400     decf    0x00, 0x0, 0x0   
005804   0100     movlb   0x0              	DB	0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x75
005806   0062     dw      0x0062           
005808   6201     cpfseq  0x01, 0x0        
00580a   0100     movlb   0x0              
00580c   0062     dw      0x0062           
00580e   7501     btg     0x01, 0x2, 0x1   
005810   0100     movlb   0x0              	DB	0x00, 0x01, 0x62, 0x00, 0x31, 0x5d, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62
005812   0062     dw      0x0062           
005814   5d31     subwf   0x31, 0x0, 0x1   
005816   0100     movlb   0x0              
005818   0062     dw      0x0062           
00581a   6201     cpfseq  0x01, 0x0        
00581c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00581e   0000     nop                      
005820   0000     nop                      
005822   0000     nop                      
005824   0000     nop                      
005826   0000     nop                      
005828   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00582a   0000     nop                      
00582c   0000     nop                      
00582e   0000     nop                      
005830   0000     nop                      
005832   0000     nop                      
005834   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005836   0000     nop                      
005838   0000     nop                      
00583a   0000     nop                      
00583c   0000     nop                      
00583e   0000     nop                      
005840   0022     dw      0x0022           	DB	0x22, 0x00, 0x00, 0x08, 0x00, 0x00, 0x62, 0x00, 0x00, 0x62, 0x00, 0x01
005842   0800     sublw   0x00             
005844   0000     nop                      
005846   0062     dw      0x0062           
005848   6200     cpfseq  0x00, 0x0        
00584a   0100     movlb   0x0              
00584c   0062     dw      0x0062           	DB	0x62, 0x00, 0x01, 0x62, 0x00, 0x00, 0x62, 0x00, 0x00, 0x62, 0x00, 0x00
00584e   6201     cpfseq  0x01, 0x0        
005850   0000     nop                      
005852   0062     dw      0x0062           
005854   6200     cpfseq  0x00, 0x0        
005856   0000     nop                      
005858   0062     dw      0x0062           	DB	0x62, 0x00, 0x11, 0x54, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x00
00585a   5411     subfwb  0x11, 0x0, 0x0   
00585c   0100     movlb   0x0              
00585e   0062     dw      0x0062           
005860   6201     cpfseq  0x01, 0x0        
005862   0000     nop                      
005864   0062     dw      0x0062           	DB	0x62, 0x00, 0x00, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01
005866   6200     cpfseq  0x00, 0x0        
005868   0100     movlb   0x0              
00586a   0062     dw      0x0062           
00586c   6201     cpfseq  0x01, 0x0        
00586e   0100     movlb   0x0              
005870   0062     dw      0x0062           	DB	0x62, 0x00, 0x09, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005872   7509     btg     0x09, 0x2, 0x1   
005874   0000     nop                      
005876   0000     nop                      
005878   0000     nop                      
00587a   0000     nop                      
00587c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x01, 0x00, 0x01, 0x62, 0x00
00587e   0000     nop                      
005880   0023     dw      0x0023           
005882   0100     movlb   0x0              
005884   0100     movlb   0x0              
005886   0062     dw      0x0062           
005888   7011     btg     0x11, 0x0, 0x0   	DB	0x11, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00588a   0000     nop                      
00588c   0000     nop                      
00588e   0000     nop                      
005890   0000     nop                      
005892   0000     nop                      
005894   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005896   0000     nop                      
005898   0000     nop                      
00589a   0000     nop                      
00589c   0000     nop                      
00589e   0000     nop                      
0058a0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0058a2   0000     nop                      
0058a4   0000     nop                      
0058a6   0000     nop                      
0058a8   0000     nop                      
0058aa   0000     nop                      
0058ac   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0058ae   0000     nop                      
0058b0   0000     nop                      
0058b2   0000     nop                      
0058b4   0000     nop                      
0058b6   0000     nop                      
0058b8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x01
0058ba   0000     nop                      
0058bc   0000     nop                      
0058be   0000     nop                      
0058c0   0024     dw      0x0024           
0058c2   0100     movlb   0x0              
0058c4   0100     movlb   0x0              	DB	0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0058c6   0062     dw      0x0062           
0058c8   6201     cpfseq  0x01, 0x0        
0058ca   0000     nop                      
0058cc   0000     nop                      
0058ce   0000     nop                      
0058d0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0058d2   0000     nop                      
0058d4   0000     nop                      
0058d6   0000     nop                      
0058d8   0000     nop                      
0058da   0000     nop                      
0058dc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0058de   0000     nop                      
0058e0   0000     nop                      
0058e2   0000     nop                      
0058e4   0000     nop                      
0058e6   0000     nop                      
0058e8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0058ea   0000     nop                      
0058ec   0000     nop                      
0058ee   0000     nop                      
0058f0   0000     nop                      
0058f2   0000     nop                      
0058f4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0058f6   0000     nop                      
0058f8   0000     nop                      
0058fa   0000     nop                      
0058fc   0000     nop                      
0058fe   0000     nop                      
005900   0025     dw      0x0025           	DB	0x25, 0x00, 0x00, 0x02, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01
005902   0200     mulwf   0x00, 0x0        
005904   0100     movlb   0x0              
005906   0062     dw      0x0062           
005908   6201     cpfseq  0x01, 0x0        
00590a   0100     movlb   0x0              
00590c   0062     dw      0x0062           	DB	0x62, 0x00, 0x11, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00590e   7f11     btg     0x11, 0x7, 0x1   
005910   0000     nop                      
005912   0000     nop                      
005914   0000     nop                      
005916   0000     nop                      
005918   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00591a   0000     nop                      
00591c   0000     nop                      
00591e   0000     nop                      
005920   0000     nop                      
005922   0000     nop                      
005924   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005926   0000     nop                      
005928   0000     nop                      
00592a   0000     nop                      
00592c   0000     nop                      
00592e   0000     nop                      
005930   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005932   0000     nop                      
005934   0000     nop                      
005936   0000     nop                      
005938   0000     nop                      
00593a   0000     nop                      
00593c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x05, 0x00, 0x01, 0x62, 0x00
00593e   0000     nop                      
005940   0026     dw      0x0026           
005942   0500     decf    0x00, 0x0, 0x1   
005944   0100     movlb   0x0              
005946   0062     dw      0x0062           
005948   6201     cpfseq  0x01, 0x0        	DB	0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x6b, 0x00, 0x01, 0x62, 0x00
00594a   0100     movlb   0x0              
00594c   0062     dw      0x0062           
00594e   6b01     clrf    0x01, 0x1        
005950   0100     movlb   0x0              
005952   0062     dw      0x0062           
005954   7501     btg     0x01, 0x2, 0x1   	DB	0x01, 0x75, 0x00, 0x01, 0x62, 0x00, 0x11, 0x6b, 0x00, 0x01, 0x62, 0x00
005956   0100     movlb   0x0              
005958   0062     dw      0x0062           
00595a   6b11     clrf    0x11, 0x1        
00595c   0100     movlb   0x0              
00595e   0062     dw      0x0062           
005960   6201     cpfseq  0x01, 0x0        	DB	0x01, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005962   0000     nop                      
005964   0000     nop                      
005966   0000     nop                      
005968   0000     nop                      
00596a   0000     nop                      
00596c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00596e   0000     nop                      
005970   0000     nop                      
005972   0000     nop                      
005974   0000     nop                      
005976   0000     nop                      
005978   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x05
00597a   0000     nop                      
00597c   0000     nop                      
00597e   0000     nop                      
005980   0027     dw      0x0027           
005982   0500     decf    0x00, 0x0, 0x1   
005984   0000     nop                      	DB	0x00, 0x00, 0x62, 0x00, 0x00, 0x62, 0x00, 0x00, 0x62, 0x00, 0x00, 0x7f
005986   0062     dw      0x0062           
005988   6200     cpfseq  0x00, 0x0        
00598a   0000     nop                      
00598c   0062     dw      0x0062           
00598e   7f00     btg     0x00, 0x7, 0x1   
005990   0000     nop                      	DB	0x00, 0x00, 0x62, 0x00, 0x00, 0x62, 0x00, 0x00, 0x62, 0x00, 0x00, 0x7f
005992   0062     dw      0x0062           
005994   6200     cpfseq  0x00, 0x0        
005996   0000     nop                      
005998   0062     dw      0x0062           
00599a   7f00     btg     0x00, 0x7, 0x1   
00599c   0000     nop                      	DB	0x00, 0x00, 0x62, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00599e   0062     dw      0x0062           
0059a0   6200     cpfseq  0x00, 0x0        
0059a2   0000     nop                      
0059a4   0000     nop                      
0059a6   0000     nop                      
0059a8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0059aa   0000     nop                      
0059ac   0000     nop                      
0059ae   0000     nop                      
0059b0   0000     nop                      
0059b2   0000     nop                      
0059b4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0059b6   0000     nop                      
0059b8   0000     nop                      
0059ba   0000     nop                      
0059bc   0000     nop                      
0059be   0000     nop                      
0059c0   0028     dw      0x0028           	DB	0x28, 0x00, 0x00, 0x07, 0x00, 0x00, 0x62, 0x00, 0x00, 0x62, 0x00, 0x01
0059c2   0700     decf    0x00, 0x1, 0x1   
0059c4   0000     nop                      
0059c6   0062     dw      0x0062           
0059c8   6200     cpfseq  0x00, 0x0        
0059ca   0100     movlb   0x0              
0059cc   0062     dw      0x0062           	DB	0x62, 0x00, 0x01, 0x62, 0x00, 0x00, 0x62, 0x00, 0x00, 0x62, 0x00, 0x01
0059ce   6201     cpfseq  0x01, 0x0        
0059d0   0000     nop                      
0059d2   0062     dw      0x0062           
0059d4   6200     cpfseq  0x00, 0x0        
0059d6   0100     movlb   0x0              
0059d8   0062     dw      0x0062           	DB	0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x75, 0x00, 0x01
0059da   6201     cpfseq  0x01, 0x0        
0059dc   0100     movlb   0x0              
0059de   0062     dw      0x0062           
0059e0   7501     btg     0x01, 0x2, 0x1   
0059e2   0100     movlb   0x0              
0059e4   0062     dw      0x0062           	DB	0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x00, 0x62, 0x00, 0x00
0059e6   6201     cpfseq  0x01, 0x0        
0059e8   0100     movlb   0x0              
0059ea   0062     dw      0x0062           
0059ec   6200     cpfseq  0x00, 0x0        
0059ee   0000     nop                      
0059f0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0059f2   0000     nop                      
0059f4   0000     nop                      
0059f6   0000     nop                      
0059f8   0000     nop                      
0059fa   0000     nop                      
0059fc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x03, 0x30, 0x01, 0x62, 0x30
0059fe   0000     nop                      
005a00   0029     dw      0x0029           
005a02   0300     mulwf   0x00, 0x1        
005a04   0130     dw      0x0130           
005a06   3062     rrcf    0x62, 0x0, 0x0   
005a08   6201     cpfseq  0x01, 0x0        	DB	0x01, 0x62, 0x30, 0x01, 0x62, 0x6c, 0x01, 0x7f, 0x30, 0x01, 0x62, 0x30
005a0a   0130     dw      0x0130           
005a0c   6c62     negf    0x62, 0x0        
005a0e   7f01     btg     0x01, 0x7, 0x1   
005a10   0130     dw      0x0130           
005a12   3062     rrcf    0x62, 0x0, 0x0   
005a14   6201     cpfseq  0x01, 0x0        	DB	0x01, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005a16   0000     nop                      
005a18   0000     nop                      
005a1a   0000     nop                      
005a1c   0000     nop                      
005a1e   0000     nop                      
005a20   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005a22   0000     nop                      
005a24   0000     nop                      
005a26   0000     nop                      
005a28   0000     nop                      
005a2a   0000     nop                      
005a2c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005a2e   0000     nop                      
005a30   0000     nop                      
005a32   0000     nop                      
005a34   0000     nop                      
005a36   0000     nop                      
005a38   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x01
005a3a   0000     nop                      
005a3c   0000     nop                      
005a3e   0000     nop                      
005a40   002a     dw      0x002a           
005a42   0100     movlb   0x0              
005a44   0100     movlb   0x0              	DB	0x00, 0x01, 0x62, 0x00, 0x01, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005a46   0062     dw      0x0062           
005a48   6201     cpfseq  0x01, 0x0        
005a4a   0000     nop                      
005a4c   0000     nop                      
005a4e   0000     nop                      
005a50   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005a52   0000     nop                      
005a54   0000     nop                      
005a56   0000     nop                      
005a58   0000     nop                      
005a5a   0000     nop                      
005a5c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005a5e   0000     nop                      
005a60   0000     nop                      
005a62   0000     nop                      
005a64   0000     nop                      
005a66   0000     nop                      
005a68   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005a6a   0000     nop                      
005a6c   0000     nop                      
005a6e   0000     nop                      
005a70   0000     nop                      
005a72   0000     nop                      
005a74   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005a76   0000     nop                      
005a78   0000     nop                      
005a7a   0000     nop                      
005a7c   0000     nop                      
005a7e   0000     nop                      
005a80   002b     dw      0x002b           	DB	0x2b, 0x00, 0x00, 0x01, 0x60, 0x01, 0x62, 0x60, 0x01, 0x62, 0x00, 0x00
005a82   0100     movlb   0x0              
005a84   0160     dw      0x0160           
005a86   6062     cpfslt  0x62, 0x0        
005a88   6201     cpfseq  0x01, 0x0        
005a8a   0000     nop                      
005a8c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005a8e   0000     nop                      
005a90   0000     nop                      
005a92   0000     nop                      
005a94   0000     nop                      
005a96   0000     nop                      
005a98   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005a9a   0000     nop                      
005a9c   0000     nop                      
005a9e   0000     nop                      
005aa0   0000     nop                      
005aa2   0000     nop                      
005aa4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005aa6   0000     nop                      
005aa8   0000     nop                      
005aaa   0000     nop                      
005aac   0000     nop                      
005aae   0000     nop                      
005ab0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005ab2   0000     nop                      
005ab4   0000     nop                      
005ab6   0000     nop                      
005ab8   0000     nop                      
005aba   0000     nop                      
005abc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x06, 0x60, 0x01, 0x62, 0x60
005abe   0000     nop                      
005ac0   002c     dw      0x002c           
005ac2   0600     decf    0x00, 0x1, 0x0   
005ac4   0160     dw      0x0160           
005ac6   6062     cpfslt  0x62, 0x0        
005ac8   6200     cpfseq  0x00, 0x0        	DB	0x00, 0x62, 0x60, 0x01, 0x62, 0x60, 0x01, 0x62, 0x60, 0x01, 0x62, 0x60
005aca   0160     dw      0x0160           
005acc   6062     cpfslt  0x62, 0x0        
005ace   6201     cpfseq  0x01, 0x0        
005ad0   0160     dw      0x0160           
005ad2   6062     cpfslt  0x62, 0x0        
005ad4   6200     cpfseq  0x00, 0x0        	DB	0x00, 0x62, 0x60, 0x01, 0x62, 0x60, 0x01, 0x62, 0x60, 0x01, 0x62, 0x60
005ad6   0160     dw      0x0160           
005ad8   6062     cpfslt  0x62, 0x0        
005ada   6201     cpfseq  0x01, 0x0        
005adc   0160     dw      0x0160           
005ade   6062     cpfslt  0x62, 0x0        
005ae0   6200     cpfseq  0x00, 0x0        	DB	0x00, 0x62, 0x60, 0x01, 0x62, 0x60, 0x01, 0x62, 0x00, 0x00, 0x00, 0x00
005ae2   0160     dw      0x0160           
005ae4   6062     cpfslt  0x62, 0x0        
005ae6   6201     cpfseq  0x01, 0x0        
005ae8   0000     nop                      
005aea   0000     nop                      
005aec   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005aee   0000     nop                      
005af0   0000     nop                      
005af2   0000     nop                      
005af4   0000     nop                      
005af6   0000     nop                      
005af8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x07
005afa   0000     nop                      
005afc   0000     nop                      
005afe   0000     nop                      
005b00   002d     dw      0x002d           
005b02   0700     decf    0x00, 0x1, 0x1   
005b04   0000     nop                      	DB	0x00, 0x00, 0x62, 0x00, 0x00, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62
005b06   0062     dw      0x0062           
005b08   6200     cpfseq  0x00, 0x0        
005b0a   0100     movlb   0x0              
005b0c   0062     dw      0x0062           
005b0e   6201     cpfseq  0x01, 0x0        
005b10   0000     nop                      	DB	0x00, 0x00, 0x62, 0x00, 0x00, 0x62, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62
005b12   0062     dw      0x0062           
005b14   6200     cpfseq  0x00, 0x0        
005b16   0100     movlb   0x0              
005b18   0062     dw      0x0062           
005b1a   6201     cpfseq  0x01, 0x0        
005b1c   0100     movlb   0x0              	DB	0x00, 0x01, 0x62, 0x00, 0x11, 0x7f, 0x00, 0x01, 0x62, 0x00, 0x01, 0x62
005b1e   0062     dw      0x0062           
005b20   7f11     btg     0x11, 0x7, 0x1   
005b22   0100     movlb   0x0              
005b24   0062     dw      0x0062           
005b26   6201     cpfseq  0x01, 0x0        
005b28   0100     movlb   0x0              	DB	0x00, 0x01, 0x62, 0x00, 0x11, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005b2a   0062     dw      0x0062           
005b2c   7f11     btg     0x11, 0x7, 0x1   
005b2e   0000     nop                      
005b30   0000     nop                      
005b32   0000     nop                      
005b34   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005b36   0000     nop                      
005b38   0000     nop                      
005b3a   0000     nop                      
005b3c   0000     nop                      
005b3e   0000     nop                      
005b40   002e     dw      0x002e           	DB	0x2e, 0x00, 0x00, 0x03, 0x2a, 0x01, 0x62, 0x2a, 0x01, 0x62, 0x2a, 0x01
005b42   0300     mulwf   0x00, 0x1        
005b44   012a     dw      0x012a           
005b46   2a62     incf    0x62, 0x1, 0x0   
005b48   6201     cpfseq  0x01, 0x0        
005b4a   012a     dw      0x012a           
005b4c   5062     movf    0x62, 0x0, 0x0   	DB	0x62, 0x50, 0x01, 0x7f, 0x2a, 0x01, 0x62, 0x2a, 0x01, 0x62, 0x00, 0x00
005b4e   7f01     btg     0x01, 0x7, 0x1   
005b50   012a     dw      0x012a           
005b52   2a62     incf    0x62, 0x1, 0x0   
005b54   6201     cpfseq  0x01, 0x0        
005b56   0000     nop                      
005b58   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005b5a   0000     nop                      
005b5c   0000     nop                      
005b5e   0000     nop                      
005b60   0000     nop                      
005b62   0000     nop                      
005b64   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005b66   0000     nop                      
005b68   0000     nop                      
005b6a   0000     nop                      
005b6c   0000     nop                      
005b6e   0000     nop                      
005b70   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005b72   0000     nop                      
005b74   0000     nop                      
005b76   0000     nop                      
005b78   0000     nop                      
005b7a   0000     nop                      
005b7c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x03, 0x2a, 0x01, 0x62, 0x2a
005b7e   0000     nop                      
005b80   002f     dw      0x002f           
005b82   0300     mulwf   0x00, 0x1        
005b84   012a     dw      0x012a           
005b86   2a62     incf    0x62, 0x1, 0x0   
005b88   6201     cpfseq  0x01, 0x0        	DB	0x01, 0x62, 0x2a, 0x01, 0x62, 0x2a, 0x01, 0x7f, 0x2a, 0x01, 0x62, 0x2a
005b8a   012a     dw      0x012a           
005b8c   2a62     incf    0x62, 0x1, 0x0   
005b8e   7f01     btg     0x01, 0x7, 0x1   
005b90   012a     dw      0x012a           
005b92   2a62     incf    0x62, 0x1, 0x0   
005b94   6201     cpfseq  0x01, 0x0        	DB	0x01, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005b96   0000     nop                      
005b98   0000     nop                      
005b9a   0000     nop                      
005b9c   0000     nop                      
005b9e   0000     nop                      
005ba0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005ba2   0000     nop                      
005ba4   0000     nop                      
005ba6   0000     nop                      
005ba8   0000     nop                      
005baa   0000     nop                      
005bac   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005bae   0000     nop                      
005bb0   0000     nop                      
005bb2   0000     nop                      
005bb4   0000     nop                      
005bb6   0000     nop                      
005bb8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005bba   0000     nop                      
005bbc   0000     nop                      
005bbe   0000     nop                      
005bc0   0000     nop                      
005bc2   0000     nop                      
005bc4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005bc6   0000     nop                      
005bc8   0000     nop                      
005bca   0000     nop                      
005bcc   0000     nop                      
005bce   0000     nop                      
005bd0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005bd2   0000     nop                      
005bd4   0000     nop                      
005bd6   0000     nop                      
005bd8   0000     nop                      
005bda   0000     nop                      
005bdc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005bde   0000     nop                      
005be0   0000     nop                      
005be2   0000     nop                      
005be4   0000     nop                      
005be6   0000     nop                      
005be8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005bea   0000     nop                      
005bec   0000     nop                      
005bee   0000     nop                      
005bf0   0000     nop                      
005bf2   0000     nop                      
005bf4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005bf6   0000     nop                      
005bf8   0000     nop                      
005bfa   0000     nop                      
005bfc   0000     nop                      
005bfe   0000     nop                      
005c00   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005c02   0000     nop                      
005c04   0000     nop                      
005c06   0000     nop                      
005c08   0000     nop                      
005c0a   0000     nop                      
005c0c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005c0e   0000     nop                      
005c10   0000     nop                      
005c12   0000     nop                      
005c14   0000     nop                      
005c16   0000     nop                      
005c18   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005c1a   0000     nop                      
005c1c   0000     nop                      
005c1e   0000     nop                      
005c20   0000     nop                      
005c22   0000     nop                      
005c24   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005c26   0000     nop                      
005c28   0000     nop                      
005c2a   0000     nop                      
005c2c   0000     nop                      
005c2e   0000     nop                      
005c30   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005c32   0000     nop                      
005c34   0000     nop                      
005c36   0000     nop                      
005c38   0000     nop                      
005c3a   0000     nop                      
005c3c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005c3e   0000     nop                      
005c40   0000     nop                      
005c42   0000     nop                      
005c44   0000     nop                      
005c46   0000     nop                      
005c48   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005c4a   0000     nop                      
005c4c   0000     nop                      
005c4e   0000     nop                      
005c50   0000     nop                      
005c52   0000     nop                      
005c54   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005c56   0000     nop                      
005c58   0000     nop                      
005c5a   0000     nop                      
005c5c   0000     nop                      
005c5e   0000     nop                      
005c60   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005c62   0000     nop                      
005c64   0000     nop                      
005c66   0000     nop                      
005c68   0000     nop                      
005c6a   0000     nop                      
005c6c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005c6e   0000     nop                      
005c70   0000     nop                      
005c72   0000     nop                      
005c74   0000     nop                      
005c76   0000     nop                      
005c78   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005c7a   0000     nop                      
005c7c   0000     nop                      
005c7e   0000     nop                      
005c80   0000     nop                      
005c82   0000     nop                      
005c84   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005c86   0000     nop                      
005c88   0000     nop                      
005c8a   0000     nop                      
005c8c   0000     nop                      
005c8e   0000     nop                      
005c90   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005c92   0000     nop                      
005c94   0000     nop                      
005c96   0000     nop                      
005c98   0000     nop                      
005c9a   0000     nop                      
005c9c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005c9e   0000     nop                      
005ca0   0000     nop                      
005ca2   0000     nop                      
005ca4   0000     nop                      
005ca6   0000     nop                      
005ca8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005caa   0000     nop                      
005cac   0000     nop                      
005cae   0000     nop                      
005cb0   0000     nop                      
005cb2   0000     nop                      
005cb4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005cb6   0000     nop                      
005cb8   0000     nop                      
005cba   0000     nop                      
005cbc   0000     nop                      
005cbe   0000     nop                      
005cc0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005cc2   0000     nop                      
005cc4   0000     nop                      
005cc6   0000     nop                      
005cc8   0000     nop                      
005cca   0000     nop                      
005ccc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005cce   0000     nop                      
005cd0   0000     nop                      
005cd2   0000     nop                      
005cd4   0000     nop                      
005cd6   0000     nop                      
005cd8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005cda   0000     nop                      
005cdc   0000     nop                      
005cde   0000     nop                      
005ce0   0000     nop                      
005ce2   0000     nop                      
005ce4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005ce6   0000     nop                      
005ce8   0000     nop                      
005cea   0000     nop                      
005cec   0000     nop                      
005cee   0000     nop                      
005cf0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005cf2   0000     nop                      
005cf4   0000     nop                      
005cf6   0000     nop                      
005cf8   0000     nop                      
005cfa   0000     nop                      
005cfc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005cfe   0000     nop                      
005d00   0000     nop                      
005d02   0000     nop                      
005d04   0000     nop                      
005d06   0000     nop                      
005d08   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005d0a   0000     nop                      
005d0c   0000     nop                      
005d0e   0000     nop                      
005d10   0000     nop                      
005d12   0000     nop                      
005d14   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005d16   0000     nop                      
005d18   0000     nop                      
005d1a   0000     nop                      
005d1c   0000     nop                      
005d1e   0000     nop                      
005d20   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005d22   0000     nop                      
005d24   0000     nop                      
005d26   0000     nop                      
005d28   0000     nop                      
005d2a   0000     nop                      
005d2c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005d2e   0000     nop                      
005d30   0000     nop                      
005d32   0000     nop                      
005d34   0000     nop                      
005d36   0000     nop                      
005d38   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005d3a   0000     nop                      
005d3c   0000     nop                      
005d3e   0000     nop                      
005d40   0000     nop                      
005d42   0000     nop                      
005d44   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005d46   0000     nop                      
005d48   0000     nop                      
005d4a   0000     nop                      
005d4c   0000     nop                      
005d4e   0000     nop                      
005d50   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005d52   0000     nop                      
005d54   0000     nop                      
005d56   0000     nop                      
005d58   0000     nop                      
005d5a   0000     nop                      
005d5c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005d5e   0000     nop                      
005d60   0000     nop                      
005d62   0000     nop                      
005d64   0000     nop                      
005d66   0000     nop                      
005d68   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005d6a   0000     nop                      
005d6c   0000     nop                      
005d6e   0000     nop                      
005d70   0000     nop                      
005d72   0000     nop                      
005d74   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005d76   0000     nop                      
005d78   0000     nop                      
005d7a   0000     nop                      
005d7c   0000     nop                      
005d7e   0000     nop                      
005d80   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005d82   0000     nop                      
005d84   0000     nop                      
005d86   0000     nop                      
005d88   0000     nop                      
005d8a   0000     nop                      
005d8c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005d8e   0000     nop                      
005d90   0000     nop                      
005d92   0000     nop                      
005d94   0000     nop                      
005d96   0000     nop                      
005d98   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005d9a   0000     nop                      
005d9c   0000     nop                      
005d9e   0000     nop                      
005da0   0000     nop                      
005da2   0000     nop                      
005da4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005da6   0000     nop                      
005da8   0000     nop                      
005daa   0000     nop                      
005dac   0000     nop                      
005dae   0000     nop                      
005db0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005db2   0000     nop                      
005db4   0000     nop                      
005db6   0000     nop                      
005db8   0000     nop                      
005dba   0000     nop                      
005dbc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005dbe   0000     nop                      
005dc0   0000     nop                      
005dc2   0000     nop                      
005dc4   0000     nop                      
005dc6   0000     nop                      
005dc8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005dca   0000     nop                      
005dcc   0000     nop                      
005dce   0000     nop                      
005dd0   0000     nop                      
005dd2   0000     nop                      
005dd4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005dd6   0000     nop                      
005dd8   0000     nop                      
005dda   0000     nop                      
005ddc   0000     nop                      
005dde   0000     nop                      
005de0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005de2   0000     nop                      
005de4   0000     nop                      
005de6   0000     nop                      
005de8   0000     nop                      
005dea   0000     nop                      
005dec   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005dee   0000     nop                      
005df0   0000     nop                      
005df2   0000     nop                      
005df4   0000     nop                      
005df6   0000     nop                      
005df8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005dfa   0000     nop                      
005dfc   0000     nop                      
005dfe   0000     nop                      
005e00   0000     nop                      
005e02   0000     nop                      
005e04   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005e06   0000     nop                      
005e08   0000     nop                      
005e0a   0000     nop                      
005e0c   0000     nop                      
005e0e   0000     nop                      
005e10   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005e12   0000     nop                      
005e14   0000     nop                      
005e16   0000     nop                      
005e18   0000     nop                      
005e1a   0000     nop                      
005e1c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005e1e   0000     nop                      
005e20   0000     nop                      
005e22   0000     nop                      
005e24   0000     nop                      
005e26   0000     nop                      
005e28   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005e2a   0000     nop                      
005e2c   0000     nop                      
005e2e   0000     nop                      
005e30   0000     nop                      
005e32   0000     nop                      
005e34   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005e36   0000     nop                      
005e38   0000     nop                      
005e3a   0000     nop                      
005e3c   0000     nop                      
005e3e   0000     nop                      
005e40   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005e42   0000     nop                      
005e44   0000     nop                      
005e46   0000     nop                      
005e48   0000     nop                      
005e4a   0000     nop                      
005e4c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005e4e   0000     nop                      
005e50   0000     nop                      
005e52   0000     nop                      
005e54   0000     nop                      
005e56   0000     nop                      
005e58   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005e5a   0000     nop                      
005e5c   0000     nop                      
005e5e   0000     nop                      
005e60   0000     nop                      
005e62   0000     nop                      
005e64   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005e66   0000     nop                      
005e68   0000     nop                      
005e6a   0000     nop                      
005e6c   0000     nop                      
005e6e   0000     nop                      
005e70   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005e72   0000     nop                      
005e74   0000     nop                      
005e76   0000     nop                      
005e78   0000     nop                      
005e7a   0000     nop                      
005e7c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005e7e   0000     nop                      
005e80   0000     nop                      
005e82   0000     nop                      
005e84   0000     nop                      
005e86   0000     nop                      
005e88   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005e8a   0000     nop                      
005e8c   0000     nop                      
005e8e   0000     nop                      
005e90   0000     nop                      
005e92   0000     nop                      
005e94   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005e96   0000     nop                      
005e98   0000     nop                      
005e9a   0000     nop                      
005e9c   0000     nop                      
005e9e   0000     nop                      
005ea0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005ea2   0000     nop                      
005ea4   0000     nop                      
005ea6   0000     nop                      
005ea8   0000     nop                      
005eaa   0000     nop                      
005eac   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005eae   0000     nop                      
005eb0   0000     nop                      
005eb2   0000     nop                      
005eb4   0000     nop                      
005eb6   0000     nop                      
005eb8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005eba   0000     nop                      
005ebc   0000     nop                      
005ebe   0000     nop                      
005ec0   0000     nop                      
005ec2   0000     nop                      
005ec4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005ec6   0000     nop                      
005ec8   0000     nop                      
005eca   0000     nop                      
005ecc   0000     nop                      
005ece   0000     nop                      
005ed0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005ed2   0000     nop                      
005ed4   0000     nop                      
005ed6   0000     nop                      
005ed8   0000     nop                      
005eda   0000     nop                      
005edc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005ede   0000     nop                      
005ee0   0000     nop                      
005ee2   0000     nop                      
005ee4   0000     nop                      
005ee6   0000     nop                      
005ee8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005eea   0000     nop                      
005eec   0000     nop                      
005eee   0000     nop                      
005ef0   0000     nop                      
005ef2   0000     nop                      
005ef4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005ef6   0000     nop                      
005ef8   0000     nop                      
005efa   0000     nop                      
005efc   0000     nop                      
005efe   0000     nop                      
005f00   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005f02   0000     nop                      
005f04   0000     nop                      
005f06   0000     nop                      
005f08   0000     nop                      
005f0a   0000     nop                      
005f0c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005f0e   0000     nop                      
005f10   0000     nop                      
005f12   0000     nop                      
005f14   0000     nop                      
005f16   0000     nop                      
005f18   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005f1a   0000     nop                      
005f1c   0000     nop                      
005f1e   0000     nop                      
005f20   0000     nop                      
005f22   0000     nop                      
005f24   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005f26   0000     nop                      
005f28   0000     nop                      
005f2a   0000     nop                      
005f2c   0000     nop                      
005f2e   0000     nop                      
005f30   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005f32   0000     nop                      
005f34   0000     nop                      
005f36   0000     nop                      
005f38   0000     nop                      
005f3a   0000     nop                      
005f3c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005f3e   0000     nop                      
005f40   0000     nop                      
005f42   0000     nop                      
005f44   0000     nop                      
005f46   0000     nop                      
005f48   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005f4a   0000     nop                      
005f4c   0000     nop                      
005f4e   0000     nop                      
005f50   0000     nop                      
005f52   0000     nop                      
005f54   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005f56   0000     nop                      
005f58   0000     nop                      
005f5a   0000     nop                      
005f5c   0000     nop                      
005f5e   0000     nop                      
005f60   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005f62   0000     nop                      
005f64   0000     nop                      
005f66   0000     nop                      
005f68   0000     nop                      
005f6a   0000     nop                      
005f6c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005f6e   0000     nop                      
005f70   0000     nop                      
005f72   0000     nop                      
005f74   0000     nop                      
005f76   0000     nop                      
005f78   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005f7a   0000     nop                      
005f7c   0000     nop                      
005f7e   0000     nop                      
005f80   0000     nop                      
005f82   0000     nop                      
005f84   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005f86   0000     nop                      
005f88   0000     nop                      
005f8a   0000     nop                      
005f8c   0000     nop                      
005f8e   0000     nop                      
005f90   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005f92   0000     nop                      
005f94   0000     nop                      
005f96   0000     nop                      
005f98   0000     nop                      
005f9a   0000     nop                      
005f9c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005f9e   0000     nop                      
005fa0   0000     nop                      
005fa2   0000     nop                      
005fa4   0000     nop                      
005fa6   0000     nop                      
005fa8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005faa   0000     nop                      
005fac   0000     nop                      
005fae   0000     nop                      
005fb0   0000     nop                      
005fb2   0000     nop                      
005fb4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005fb6   0000     nop                      
005fb8   0000     nop                      
005fba   0000     nop                      
005fbc   0000     nop                      
005fbe   0000     nop                      
005fc0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005fc2   0000     nop                      
005fc4   0000     nop                      
005fc6   0000     nop                      
005fc8   0000     nop                      
005fca   0000     nop                      
005fcc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005fce   0000     nop                      
005fd0   0000     nop                      
005fd2   0000     nop                      
005fd4   0000     nop                      
005fd6   0000     nop                      
005fd8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005fda   0000     nop                      
005fdc   0000     nop                      
005fde   0000     nop                      
005fe0   0000     nop                      
005fe2   0000     nop                      
005fe4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005fe6   0000     nop                      
005fe8   0000     nop                      
005fea   0000     nop                      
005fec   0000     nop                      
005fee   0000     nop                      
005ff0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005ff2   0000     nop                      
005ff4   0000     nop                      
005ff6   0000     nop                      
005ff8   0000     nop                      
005ffa   0000     nop                      
005ffc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
005ffe   0000     nop                      
006000   0000     nop                      
006002   0000     nop                      
006004   0000     nop                      
006006   0000     nop                      
006008   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00600a   0000     nop                      
00600c   0000     nop                      
00600e   0000     nop                      
006010   0000     nop                      
006012   0000     nop                      
006014   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006016   0000     nop                      
006018   0000     nop                      
00601a   0000     nop                      
00601c   0000     nop                      
00601e   0000     nop                      
006020   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006022   0000     nop                      
006024   0000     nop                      
006026   0000     nop                      
006028   0000     nop                      
00602a   0000     nop                      
00602c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00602e   0000     nop                      
006030   0000     nop                      
006032   0000     nop                      
006034   0000     nop                      
006036   0000     nop                      
006038   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00603a   0000     nop                      
00603c   0000     nop                      
00603e   0000     nop                      
006040   0000     nop                      
006042   0000     nop                      
006044   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006046   0000     nop                      
006048   0000     nop                      
00604a   0000     nop                      
00604c   0000     nop                      
00604e   0000     nop                      
006050   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006052   0000     nop                      
006054   0000     nop                      
006056   0000     nop                      
006058   0000     nop                      
00605a   0000     nop                      
00605c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00605e   0000     nop                      
006060   0000     nop                      
006062   0000     nop                      
006064   0000     nop                      
006066   0000     nop                      
006068   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00606a   0000     nop                      
00606c   0000     nop                      
00606e   0000     nop                      
006070   0000     nop                      
006072   0000     nop                      
006074   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006076   0000     nop                      
006078   0000     nop                      
00607a   0000     nop                      
00607c   0000     nop                      
00607e   0000     nop                      
006080   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006082   0000     nop                      
006084   0000     nop                      
006086   0000     nop                      
006088   0000     nop                      
00608a   0000     nop                      
00608c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00608e   0000     nop                      
006090   0000     nop                      
006092   0000     nop                      
006094   0000     nop                      
006096   0000     nop                      
006098   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00609a   0000     nop                      
00609c   0000     nop                      
00609e   0000     nop                      
0060a0   0000     nop                      
0060a2   0000     nop                      
0060a4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0060a6   0000     nop                      
0060a8   0000     nop                      
0060aa   0000     nop                      
0060ac   0000     nop                      
0060ae   0000     nop                      
0060b0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0060b2   0000     nop                      
0060b4   0000     nop                      
0060b6   0000     nop                      
0060b8   0000     nop                      
0060ba   0000     nop                      
0060bc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0060be   0000     nop                      
0060c0   0000     nop                      
0060c2   0000     nop                      
0060c4   0000     nop                      
0060c6   0000     nop                      
0060c8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0060ca   0000     nop                      
0060cc   0000     nop                      
0060ce   0000     nop                      
0060d0   0000     nop                      
0060d2   0000     nop                      
0060d4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0060d6   0000     nop                      
0060d8   0000     nop                      
0060da   0000     nop                      
0060dc   0000     nop                      
0060de   0000     nop                      
0060e0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0060e2   0000     nop                      
0060e4   0000     nop                      
0060e6   0000     nop                      
0060e8   0000     nop                      
0060ea   0000     nop                      
0060ec   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0060ee   0000     nop                      
0060f0   0000     nop                      
0060f2   0000     nop                      
0060f4   0000     nop                      
0060f6   0000     nop                      
0060f8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0060fa   0000     nop                      
0060fc   0000     nop                      
0060fe   0000     nop                      
006100   0000     nop                      
006102   0000     nop                      
006104   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006106   0000     nop                      
006108   0000     nop                      
00610a   0000     nop                      
00610c   0000     nop                      
00610e   0000     nop                      
006110   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006112   0000     nop                      
006114   0000     nop                      
006116   0000     nop                      
006118   0000     nop                      
00611a   0000     nop                      
00611c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00611e   0000     nop                      
006120   0000     nop                      
006122   0000     nop                      
006124   0000     nop                      
006126   0000     nop                      
006128   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00612a   0000     nop                      
00612c   0000     nop                      
00612e   0000     nop                      
006130   0000     nop                      
006132   0000     nop                      
006134   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006136   0000     nop                      
006138   0000     nop                      
00613a   0000     nop                      
00613c   0000     nop                      
00613e   0000     nop                      
006140   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006142   0000     nop                      
006144   0000     nop                      
006146   0000     nop                      
006148   0000     nop                      
00614a   0000     nop                      
00614c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00614e   0000     nop                      
006150   0000     nop                      
006152   0000     nop                      
006154   0000     nop                      
006156   0000     nop                      
006158   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00615a   0000     nop                      
00615c   0000     nop                      
00615e   0000     nop                      
006160   0000     nop                      
006162   0000     nop                      
006164   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006166   0000     nop                      
006168   0000     nop                      
00616a   0000     nop                      
00616c   0000     nop                      
00616e   0000     nop                      
006170   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006172   0000     nop                      
006174   0000     nop                      
006176   0000     nop                      
006178   0000     nop                      
00617a   0000     nop                      
00617c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00617e   0000     nop                      
006180   0000     nop                      
006182   0000     nop                      
006184   0000     nop                      
006186   0000     nop                      
006188   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00618a   0000     nop                      
00618c   0000     nop                      
00618e   0000     nop                      
006190   0000     nop                      
006192   0000     nop                      
006194   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006196   0000     nop                      
006198   0000     nop                      
00619a   0000     nop                      
00619c   0000     nop                      
00619e   0000     nop                      
0061a0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0061a2   0000     nop                      
0061a4   0000     nop                      
0061a6   0000     nop                      
0061a8   0000     nop                      
0061aa   0000     nop                      
0061ac   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0061ae   0000     nop                      
0061b0   0000     nop                      
0061b2   0000     nop                      
0061b4   0000     nop                      
0061b6   0000     nop                      
0061b8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0061ba   0000     nop                      
0061bc   0000     nop                      
0061be   0000     nop                      
0061c0   0000     nop                      
0061c2   0000     nop                      
0061c4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0061c6   0000     nop                      
0061c8   0000     nop                      
0061ca   0000     nop                      
0061cc   0000     nop                      
0061ce   0000     nop                      
0061d0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0061d2   0000     nop                      
0061d4   0000     nop                      
0061d6   0000     nop                      
0061d8   0000     nop                      
0061da   0000     nop                      
0061dc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0061de   0000     nop                      
0061e0   0000     nop                      
0061e2   0000     nop                      
0061e4   0000     nop                      
0061e6   0000     nop                      
0061e8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0061ea   0000     nop                      
0061ec   0000     nop                      
0061ee   0000     nop                      
0061f0   0000     nop                      
0061f2   0000     nop                      
0061f4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0061f6   0000     nop                      
0061f8   0000     nop                      
0061fa   0000     nop                      
0061fc   0000     nop                      
0061fe   0000     nop                      
006200   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006202   0000     nop                      
006204   0000     nop                      
006206   0000     nop                      
006208   0000     nop                      
00620a   0000     nop                      
00620c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00620e   0000     nop                      
006210   0000     nop                      
006212   0000     nop                      
006214   0000     nop                      
006216   0000     nop                      
006218   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00621a   0000     nop                      
00621c   0000     nop                      
00621e   0000     nop                      
006220   0000     nop                      
006222   0000     nop                      
006224   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006226   0000     nop                      
006228   0000     nop                      
00622a   0000     nop                      
00622c   0000     nop                      
00622e   0000     nop                      
006230   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006232   0000     nop                      
006234   0000     nop                      
006236   0000     nop                      
006238   0000     nop                      
00623a   0000     nop                      
00623c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00623e   0000     nop                      
006240   0000     nop                      
006242   0000     nop                      
006244   0000     nop                      
006246   0000     nop                      
006248   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00624a   0000     nop                      
00624c   0000     nop                      
00624e   0000     nop                      
006250   0000     nop                      
006252   0000     nop                      
006254   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006256   0000     nop                      
006258   0000     nop                      
00625a   0000     nop                      
00625c   0000     nop                      
00625e   0000     nop                      
006260   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006262   0000     nop                      
006264   0000     nop                      
006266   0000     nop                      
006268   0000     nop                      
00626a   0000     nop                      
00626c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00626e   0000     nop                      
006270   0000     nop                      
006272   0000     nop                      
006274   0000     nop                      
006276   0000     nop                      
006278   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00627a   0000     nop                      
00627c   0000     nop                      
00627e   0000     nop                      
006280   0000     nop                      
006282   0000     nop                      
006284   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006286   0000     nop                      
006288   0000     nop                      
00628a   0000     nop                      
00628c   0000     nop                      
00628e   0000     nop                      
006290   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006292   0000     nop                      
006294   0000     nop                      
006296   0000     nop                      
006298   0000     nop                      
00629a   0000     nop                      
00629c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00629e   0000     nop                      
0062a0   0000     nop                      
0062a2   0000     nop                      
0062a4   0000     nop                      
0062a6   0000     nop                      
0062a8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0062aa   0000     nop                      
0062ac   0000     nop                      
0062ae   0000     nop                      
0062b0   0000     nop                      
0062b2   0000     nop                      
0062b4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0062b6   0000     nop                      
0062b8   0000     nop                      
0062ba   0000     nop                      
0062bc   0000     nop                      
0062be   0000     nop                      
0062c0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0062c2   0000     nop                      
0062c4   0000     nop                      
0062c6   0000     nop                      
0062c8   0000     nop                      
0062ca   0000     nop                      
0062cc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0062ce   0000     nop                      
0062d0   0000     nop                      
0062d2   0000     nop                      
0062d4   0000     nop                      
0062d6   0000     nop                      
0062d8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0062da   0000     nop                      
0062dc   0000     nop                      
0062de   0000     nop                      
0062e0   0000     nop                      
0062e2   0000     nop                      
0062e4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0062e6   0000     nop                      
0062e8   0000     nop                      
0062ea   0000     nop                      
0062ec   0000     nop                      
0062ee   0000     nop                      
0062f0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0062f2   0000     nop                      
0062f4   0000     nop                      
0062f6   0000     nop                      
0062f8   0000     nop                      
0062fa   0000     nop                      
0062fc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0062fe   0000     nop                      
006300   0000     nop                      
006302   0000     nop                      
006304   0000     nop                      
006306   0000     nop                      
006308   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00630a   0000     nop                      
00630c   0000     nop                      
00630e   0000     nop                      
006310   0000     nop                      
006312   0000     nop                      
006314   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006316   0000     nop                      
006318   0000     nop                      
00631a   0000     nop                      
00631c   0000     nop                      
00631e   0000     nop                      
006320   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006322   0000     nop                      
006324   0000     nop                      
006326   0000     nop                      
006328   0000     nop                      
00632a   0000     nop                      
00632c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00632e   0000     nop                      
006330   0000     nop                      
006332   0000     nop                      
006334   0000     nop                      
006336   0000     nop                      
006338   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00633a   0000     nop                      
00633c   0000     nop                      
00633e   0000     nop                      
006340   0000     nop                      
006342   0000     nop                      
006344   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006346   0000     nop                      
006348   0000     nop                      
00634a   0000     nop                      
00634c   0000     nop                      
00634e   0000     nop                      
006350   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006352   0000     nop                      
006354   0000     nop                      
006356   0000     nop                      
006358   0000     nop                      
00635a   0000     nop                      
00635c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00635e   0000     nop                      
006360   0000     nop                      
006362   0000     nop                      
006364   0000     nop                      
006366   0000     nop                      
006368   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00636a   0000     nop                      
00636c   0000     nop                      
00636e   0000     nop                      
006370   0000     nop                      
006372   0000     nop                      
006374   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006376   0000     nop                      
006378   0000     nop                      
00637a   0000     nop                      
00637c   0000     nop                      
00637e   0000     nop                      
006380   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006382   0000     nop                      
006384   0000     nop                      
006386   0000     nop                      
006388   0000     nop                      
00638a   0000     nop                      
00638c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00638e   0000     nop                      
006390   0000     nop                      
006392   0000     nop                      
006394   0000     nop                      
006396   0000     nop                      
006398   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00639a   0000     nop                      
00639c   0000     nop                      
00639e   0000     nop                      
0063a0   0000     nop                      
0063a2   0000     nop                      
0063a4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0063a6   0000     nop                      
0063a8   0000     nop                      
0063aa   0000     nop                      
0063ac   0000     nop                      
0063ae   0000     nop                      
0063b0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0063b2   0000     nop                      
0063b4   0000     nop                      
0063b6   0000     nop                      
0063b8   0000     nop                      
0063ba   0000     nop                      
0063bc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0063be   0000     nop                      
0063c0   0000     nop                      
0063c2   0000     nop                      
0063c4   0000     nop                      
0063c6   0000     nop                      
0063c8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0063ca   0000     nop                      
0063cc   0000     nop                      
0063ce   0000     nop                      
0063d0   0000     nop                      
0063d2   0000     nop                      
0063d4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0063d6   0000     nop                      
0063d8   0000     nop                      
0063da   0000     nop                      
0063dc   0000     nop                      
0063de   0000     nop                      
0063e0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0063e2   0000     nop                      
0063e4   0000     nop                      
0063e6   0000     nop                      
0063e8   0000     nop                      
0063ea   0000     nop                      
0063ec   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0063ee   0000     nop                      
0063f0   0000     nop                      
0063f2   0000     nop                      
0063f4   0000     nop                      
0063f6   0000     nop                      
0063f8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0063fa   0000     nop                      
0063fc   0000     nop                      
0063fe   0000     nop                      
006400   0000     nop                      
006402   0000     nop                      
006404   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006406   0000     nop                      
006408   0000     nop                      
00640a   0000     nop                      
00640c   0000     nop                      
00640e   0000     nop                      
006410   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006412   0000     nop                      
006414   0000     nop                      
006416   0000     nop                      
006418   0000     nop                      
00641a   0000     nop                      
00641c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00641e   0000     nop                      
006420   0000     nop                      
006422   0000     nop                      
006424   0000     nop                      
006426   0000     nop                      
006428   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00642a   0000     nop                      
00642c   0000     nop                      
00642e   0000     nop                      
006430   0000     nop                      
006432   0000     nop                      
006434   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006436   0000     nop                      
006438   0000     nop                      
00643a   0000     nop                      
00643c   0000     nop                      
00643e   0000     nop                      
006440   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006442   0000     nop                      
006444   0000     nop                      
006446   0000     nop                      
006448   0000     nop                      
00644a   0000     nop                      
00644c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00644e   0000     nop                      
006450   0000     nop                      
006452   0000     nop                      
006454   0000     nop                      
006456   0000     nop                      
006458   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00645a   0000     nop                      
00645c   0000     nop                      
00645e   0000     nop                      
006460   0000     nop                      
006462   0000     nop                      
006464   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006466   0000     nop                      
006468   0000     nop                      
00646a   0000     nop                      
00646c   0000     nop                      
00646e   0000     nop                      
006470   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006472   0000     nop                      
006474   0000     nop                      
006476   0000     nop                      
006478   0000     nop                      
00647a   0000     nop                      
00647c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00647e   0000     nop                      
006480   0000     nop                      
006482   0000     nop                      
006484   0000     nop                      
006486   0000     nop                      
006488   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00648a   0000     nop                      
00648c   0000     nop                      
00648e   0000     nop                      
006490   0000     nop                      
006492   0000     nop                      
006494   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006496   0000     nop                      
006498   0000     nop                      
00649a   0000     nop                      
00649c   0000     nop                      
00649e   0000     nop                      
0064a0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0064a2   0000     nop                      
0064a4   0000     nop                      
0064a6   0000     nop                      
0064a8   0000     nop                      
0064aa   0000     nop                      
0064ac   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0064ae   0000     nop                      
0064b0   0000     nop                      
0064b2   0000     nop                      
0064b4   0000     nop                      
0064b6   0000     nop                      
0064b8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0064ba   0000     nop                      
0064bc   0000     nop                      
0064be   0000     nop                      
0064c0   0000     nop                      
0064c2   0000     nop                      
0064c4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0064c6   0000     nop                      
0064c8   0000     nop                      
0064ca   0000     nop                      
0064cc   0000     nop                      
0064ce   0000     nop                      
0064d0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0064d2   0000     nop                      
0064d4   0000     nop                      
0064d6   0000     nop                      
0064d8   0000     nop                      
0064da   0000     nop                      
0064dc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0064de   0000     nop                      
0064e0   0000     nop                      
0064e2   0000     nop                      
0064e4   0000     nop                      
0064e6   0000     nop                      
0064e8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0064ea   0000     nop                      
0064ec   0000     nop                      
0064ee   0000     nop                      
0064f0   0000     nop                      
0064f2   0000     nop                      
0064f4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0064f6   0000     nop                      
0064f8   0000     nop                      
0064fa   0000     nop                      
0064fc   0000     nop                      
0064fe   0000     nop                      
006500   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006502   0000     nop                      
006504   0000     nop                      
006506   0000     nop                      
006508   0000     nop                      
00650a   0000     nop                      
00650c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00650e   0000     nop                      
006510   0000     nop                      
006512   0000     nop                      
006514   0000     nop                      
006516   0000     nop                      
006518   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00651a   0000     nop                      
00651c   0000     nop                      
00651e   0000     nop                      
006520   0000     nop                      
006522   0000     nop                      
006524   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006526   0000     nop                      
006528   0000     nop                      
00652a   0000     nop                      
00652c   0000     nop                      
00652e   0000     nop                      
006530   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006532   0000     nop                      
006534   0000     nop                      
006536   0000     nop                      
006538   0000     nop                      
00653a   0000     nop                      
00653c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00653e   0000     nop                      
006540   0000     nop                      
006542   0000     nop                      
006544   0000     nop                      
006546   0000     nop                      
006548   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00654a   0000     nop                      
00654c   0000     nop                      
00654e   0000     nop                      
006550   0000     nop                      
006552   0000     nop                      
006554   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006556   0000     nop                      
006558   0000     nop                      
00655a   0000     nop                      
00655c   0000     nop                      
00655e   0000     nop                      
006560   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006562   0000     nop                      
006564   0000     nop                      
006566   0000     nop                      
006568   0000     nop                      
00656a   0000     nop                      
00656c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00656e   0000     nop                      
006570   0000     nop                      
006572   0000     nop                      
006574   0000     nop                      
006576   0000     nop                      
006578   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00657a   0000     nop                      
00657c   0000     nop                      
00657e   0000     nop                      
006580   0000     nop                      
006582   0000     nop                      
006584   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006586   0000     nop                      
006588   0000     nop                      
00658a   0000     nop                      
00658c   0000     nop                      
00658e   0000     nop                      
006590   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006592   0000     nop                      
006594   0000     nop                      
006596   0000     nop                      
006598   0000     nop                      
00659a   0000     nop                      
00659c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00659e   0000     nop                      
0065a0   0000     nop                      
0065a2   0000     nop                      
0065a4   0000     nop                      
0065a6   0000     nop                      
0065a8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0065aa   0000     nop                      
0065ac   0000     nop                      
0065ae   0000     nop                      
0065b0   0000     nop                      
0065b2   0000     nop                      
0065b4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0065b6   0000     nop                      
0065b8   0000     nop                      
0065ba   0000     nop                      
0065bc   0000     nop                      
0065be   0000     nop                      
0065c0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0065c2   0000     nop                      
0065c4   0000     nop                      
0065c6   0000     nop                      
0065c8   0000     nop                      
0065ca   0000     nop                      
0065cc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0065ce   0000     nop                      
0065d0   0000     nop                      
0065d2   0000     nop                      
0065d4   0000     nop                      
0065d6   0000     nop                      
0065d8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0065da   0000     nop                      
0065dc   0000     nop                      
0065de   0000     nop                      
0065e0   0000     nop                      
0065e2   0000     nop                      
0065e4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0065e6   0000     nop                      
0065e8   0000     nop                      
0065ea   0000     nop                      
0065ec   0000     nop                      
0065ee   0000     nop                      
0065f0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0065f2   0000     nop                      
0065f4   0000     nop                      
0065f6   0000     nop                      
0065f8   0000     nop                      
0065fa   0000     nop                      
0065fc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0065fe   0000     nop                      
006600   0000     nop                      
006602   0000     nop                      
006604   0000     nop                      
006606   0000     nop                      
006608   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00660a   0000     nop                      
00660c   0000     nop                      
00660e   0000     nop                      
006610   0000     nop                      
006612   0000     nop                      
006614   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006616   0000     nop                      
006618   0000     nop                      
00661a   0000     nop                      
00661c   0000     nop                      
00661e   0000     nop                      
006620   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006622   0000     nop                      
006624   0000     nop                      
006626   0000     nop                      
006628   0000     nop                      
00662a   0000     nop                      
00662c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00662e   0000     nop                      
006630   0000     nop                      
006632   0000     nop                      
006634   0000     nop                      
006636   0000     nop                      
006638   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00663a   0000     nop                      
00663c   0000     nop                      
00663e   0000     nop                      
006640   0000     nop                      
006642   0000     nop                      
006644   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006646   0000     nop                      
006648   0000     nop                      
00664a   0000     nop                      
00664c   0000     nop                      
00664e   0000     nop                      
006650   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006652   0000     nop                      
006654   0000     nop                      
006656   0000     nop                      
006658   0000     nop                      
00665a   0000     nop                      
00665c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00665e   0000     nop                      
006660   0000     nop                      
006662   0000     nop                      
006664   0000     nop                      
006666   0000     nop                      
006668   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00666a   0000     nop                      
00666c   0000     nop                      
00666e   0000     nop                      
006670   0000     nop                      
006672   0000     nop                      
006674   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006676   0000     nop                      
006678   0000     nop                      
00667a   0000     nop                      
00667c   0000     nop                      
00667e   0000     nop                      
006680   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006682   0000     nop                      
006684   0000     nop                      
006686   0000     nop                      
006688   0000     nop                      
00668a   0000     nop                      
00668c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00668e   0000     nop                      
006690   0000     nop                      
006692   0000     nop                      
006694   0000     nop                      
006696   0000     nop                      
006698   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00669a   0000     nop                      
00669c   0000     nop                      
00669e   0000     nop                      
0066a0   0000     nop                      
0066a2   0000     nop                      
0066a4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0066a6   0000     nop                      
0066a8   0000     nop                      
0066aa   0000     nop                      
0066ac   0000     nop                      
0066ae   0000     nop                      
0066b0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0066b2   0000     nop                      
0066b4   0000     nop                      
0066b6   0000     nop                      
0066b8   0000     nop                      
0066ba   0000     nop                      
0066bc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0066be   0000     nop                      
0066c0   0000     nop                      
0066c2   0000     nop                      
0066c4   0000     nop                      
0066c6   0000     nop                      
0066c8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0066ca   0000     nop                      
0066cc   0000     nop                      
0066ce   0000     nop                      
0066d0   0000     nop                      
0066d2   0000     nop                      
0066d4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0066d6   0000     nop                      
0066d8   0000     nop                      
0066da   0000     nop                      
0066dc   0000     nop                      
0066de   0000     nop                      
0066e0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0066e2   0000     nop                      
0066e4   0000     nop                      
0066e6   0000     nop                      
0066e8   0000     nop                      
0066ea   0000     nop                      
0066ec   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0066ee   0000     nop                      
0066f0   0000     nop                      
0066f2   0000     nop                      
0066f4   0000     nop                      
0066f6   0000     nop                      
0066f8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0066fa   0000     nop                      
0066fc   0000     nop                      
0066fe   0000     nop                      
006700   0000     nop                      
006702   0000     nop                      
006704   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006706   0000     nop                      
006708   0000     nop                      
00670a   0000     nop                      
00670c   0000     nop                      
00670e   0000     nop                      
006710   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006712   0000     nop                      
006714   0000     nop                      
006716   0000     nop                      
006718   0000     nop                      
00671a   0000     nop                      
00671c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00671e   0000     nop                      
006720   0000     nop                      
006722   0000     nop                      
006724   0000     nop                      
006726   0000     nop                      
006728   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00672a   0000     nop                      
00672c   0000     nop                      
00672e   0000     nop                      
006730   0000     nop                      
006732   0000     nop                      
006734   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006736   0000     nop                      
006738   0000     nop                      
00673a   0000     nop                      
00673c   0000     nop                      
00673e   0000     nop                      
006740   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006742   0000     nop                      
006744   0000     nop                      
006746   0000     nop                      
006748   0000     nop                      
00674a   0000     nop                      
00674c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00674e   0000     nop                      
006750   0000     nop                      
006752   0000     nop                      
006754   0000     nop                      
006756   0000     nop                      
006758   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00675a   0000     nop                      
00675c   0000     nop                      
00675e   0000     nop                      
006760   0000     nop                      
006762   0000     nop                      
006764   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006766   0000     nop                      
006768   0000     nop                      
00676a   0000     nop                      
00676c   0000     nop                      
00676e   0000     nop                      
006770   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006772   0000     nop                      
006774   0000     nop                      
006776   0000     nop                      
006778   0000     nop                      
00677a   0000     nop                      
00677c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00677e   0000     nop                      
006780   0000     nop                      
006782   0000     nop                      
006784   0000     nop                      
006786   0000     nop                      
006788   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00678a   0000     nop                      
00678c   0000     nop                      
00678e   0000     nop                      
006790   0000     nop                      
006792   0000     nop                      
006794   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006796   0000     nop                      
006798   0000     nop                      
00679a   0000     nop                      
00679c   0000     nop                      
00679e   0000     nop                      
0067a0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0067a2   0000     nop                      
0067a4   0000     nop                      
0067a6   0000     nop                      
0067a8   0000     nop                      
0067aa   0000     nop                      
0067ac   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0067ae   0000     nop                      
0067b0   0000     nop                      
0067b2   0000     nop                      
0067b4   0000     nop                      
0067b6   0000     nop                      
0067b8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0067ba   0000     nop                      
0067bc   0000     nop                      
0067be   0000     nop                      
0067c0   0000     nop                      
0067c2   0000     nop                      
0067c4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0067c6   0000     nop                      
0067c8   0000     nop                      
0067ca   0000     nop                      
0067cc   0000     nop                      
0067ce   0000     nop                      
0067d0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0067d2   0000     nop                      
0067d4   0000     nop                      
0067d6   0000     nop                      
0067d8   0000     nop                      
0067da   0000     nop                      
0067dc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0067de   0000     nop                      
0067e0   0000     nop                      
0067e2   0000     nop                      
0067e4   0000     nop                      
0067e6   0000     nop                      
0067e8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0067ea   0000     nop                      
0067ec   0000     nop                      
0067ee   0000     nop                      
0067f0   0000     nop                      
0067f2   0000     nop                      
0067f4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0067f6   0000     nop                      
0067f8   0000     nop                      
0067fa   0000     nop                      
0067fc   0000     nop                      
0067fe   0000     nop                      
006800   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006802   0000     nop                      
006804   0000     nop                      
006806   0000     nop                      
006808   0000     nop                      
00680a   0000     nop                      
00680c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00680e   0000     nop                      
006810   0000     nop                      
006812   0000     nop                      
006814   0000     nop                      
006816   0000     nop                      
006818   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00681a   0000     nop                      
00681c   0000     nop                      
00681e   0000     nop                      
006820   0000     nop                      
006822   0000     nop                      
006824   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006826   0000     nop                      
006828   0000     nop                      
00682a   0000     nop                      
00682c   0000     nop                      
00682e   0000     nop                      
006830   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006832   0000     nop                      
006834   0000     nop                      
006836   0000     nop                      
006838   0000     nop                      
00683a   0000     nop                      
00683c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00683e   0000     nop                      
006840   0000     nop                      
006842   0000     nop                      
006844   0000     nop                      
006846   0000     nop                      
006848   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00684a   0000     nop                      
00684c   0000     nop                      
00684e   0000     nop                      
006850   0000     nop                      
006852   0000     nop                      
006854   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006856   0000     nop                      
006858   0000     nop                      
00685a   0000     nop                      
00685c   0000     nop                      
00685e   0000     nop                      
006860   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006862   0000     nop                      
006864   0000     nop                      
006866   0000     nop                      
006868   0000     nop                      
00686a   0000     nop                      
00686c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00686e   0000     nop                      
006870   0000     nop                      
006872   0000     nop                      
006874   0000     nop                      
006876   0000     nop                      
006878   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00687a   0000     nop                      
00687c   0000     nop                      
00687e   0000     nop                      
006880   0000     nop                      
006882   0000     nop                      
006884   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006886   0000     nop                      
006888   0000     nop                      
00688a   0000     nop                      
00688c   0000     nop                      
00688e   0000     nop                      
006890   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006892   0000     nop                      
006894   0000     nop                      
006896   0000     nop                      
006898   0000     nop                      
00689a   0000     nop                      
00689c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00689e   0000     nop                      
0068a0   0000     nop                      
0068a2   0000     nop                      
0068a4   0000     nop                      
0068a6   0000     nop                      
0068a8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0068aa   0000     nop                      
0068ac   0000     nop                      
0068ae   0000     nop                      
0068b0   0000     nop                      
0068b2   0000     nop                      
0068b4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0068b6   0000     nop                      
0068b8   0000     nop                      
0068ba   0000     nop                      
0068bc   0000     nop                      
0068be   0000     nop                      
0068c0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0068c2   0000     nop                      
0068c4   0000     nop                      
0068c6   0000     nop                      
0068c8   0000     nop                      
0068ca   0000     nop                      
0068cc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0068ce   0000     nop                      
0068d0   0000     nop                      
0068d2   0000     nop                      
0068d4   0000     nop                      
0068d6   0000     nop                      
0068d8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0068da   0000     nop                      
0068dc   0000     nop                      
0068de   0000     nop                      
0068e0   0000     nop                      
0068e2   0000     nop                      
0068e4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0068e6   0000     nop                      
0068e8   0000     nop                      
0068ea   0000     nop                      
0068ec   0000     nop                      
0068ee   0000     nop                      
0068f0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0068f2   0000     nop                      
0068f4   0000     nop                      
0068f6   0000     nop                      
0068f8   0000     nop                      
0068fa   0000     nop                      
0068fc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0068fe   0000     nop                      
006900   0000     nop                      
006902   0000     nop                      
006904   0000     nop                      
006906   0000     nop                      
006908   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00690a   0000     nop                      
00690c   0000     nop                      
00690e   0000     nop                      
006910   0000     nop                      
006912   0000     nop                      
006914   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006916   0000     nop                      
006918   0000     nop                      
00691a   0000     nop                      
00691c   0000     nop                      
00691e   0000     nop                      
006920   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006922   0000     nop                      
006924   0000     nop                      
006926   0000     nop                      
006928   0000     nop                      
00692a   0000     nop                      
00692c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00692e   0000     nop                      
006930   0000     nop                      
006932   0000     nop                      
006934   0000     nop                      
006936   0000     nop                      
006938   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00693a   0000     nop                      
00693c   0000     nop                      
00693e   0000     nop                      
006940   0000     nop                      
006942   0000     nop                      
006944   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006946   0000     nop                      
006948   0000     nop                      
00694a   0000     nop                      
00694c   0000     nop                      
00694e   0000     nop                      
006950   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006952   0000     nop                      
006954   0000     nop                      
006956   0000     nop                      
006958   0000     nop                      
00695a   0000     nop                      
00695c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00695e   0000     nop                      
006960   0000     nop                      
006962   0000     nop                      
006964   0000     nop                      
006966   0000     nop                      
006968   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00696a   0000     nop                      
00696c   0000     nop                      
00696e   0000     nop                      
006970   0000     nop                      
006972   0000     nop                      
006974   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006976   0000     nop                      
006978   0000     nop                      
00697a   0000     nop                      
00697c   0000     nop                      
00697e   0000     nop                      
006980   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006982   0000     nop                      
006984   0000     nop                      
006986   0000     nop                      
006988   0000     nop                      
00698a   0000     nop                      
00698c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00698e   0000     nop                      
006990   0000     nop                      
006992   0000     nop                      
006994   0000     nop                      
006996   0000     nop                      
006998   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00699a   0000     nop                      
00699c   0000     nop                      
00699e   0000     nop                      
0069a0   0000     nop                      
0069a2   0000     nop                      
0069a4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0069a6   0000     nop                      
0069a8   0000     nop                      
0069aa   0000     nop                      
0069ac   0000     nop                      
0069ae   0000     nop                      
0069b0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0069b2   0000     nop                      
0069b4   0000     nop                      
0069b6   0000     nop                      
0069b8   0000     nop                      
0069ba   0000     nop                      
0069bc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0069be   0000     nop                      
0069c0   0000     nop                      
0069c2   0000     nop                      
0069c4   0000     nop                      
0069c6   0000     nop                      
0069c8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0069ca   0000     nop                      
0069cc   0000     nop                      
0069ce   0000     nop                      
0069d0   0000     nop                      
0069d2   0000     nop                      
0069d4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0069d6   0000     nop                      
0069d8   0000     nop                      
0069da   0000     nop                      
0069dc   0000     nop                      
0069de   0000     nop                      
0069e0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0069e2   0000     nop                      
0069e4   0000     nop                      
0069e6   0000     nop                      
0069e8   0000     nop                      
0069ea   0000     nop                      
0069ec   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0069ee   0000     nop                      
0069f0   0000     nop                      
0069f2   0000     nop                      
0069f4   0000     nop                      
0069f6   0000     nop                      
0069f8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0069fa   0000     nop                      
0069fc   0000     nop                      
0069fe   0000     nop                      
006a00   0000     nop                      
006a02   0000     nop                      
006a04   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006a06   0000     nop                      
006a08   0000     nop                      
006a0a   0000     nop                      
006a0c   0000     nop                      
006a0e   0000     nop                      
006a10   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006a12   0000     nop                      
006a14   0000     nop                      
006a16   0000     nop                      
006a18   0000     nop                      
006a1a   0000     nop                      
006a1c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006a1e   0000     nop                      
006a20   0000     nop                      
006a22   0000     nop                      
006a24   0000     nop                      
006a26   0000     nop                      
006a28   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006a2a   0000     nop                      
006a2c   0000     nop                      
006a2e   0000     nop                      
006a30   0000     nop                      
006a32   0000     nop                      
006a34   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006a36   0000     nop                      
006a38   0000     nop                      
006a3a   0000     nop                      
006a3c   0000     nop                      
006a3e   0000     nop                      
006a40   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006a42   0000     nop                      
006a44   0000     nop                      
006a46   0000     nop                      
006a48   0000     nop                      
006a4a   0000     nop                      
006a4c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006a4e   0000     nop                      
006a50   0000     nop                      
006a52   0000     nop                      
006a54   0000     nop                      
006a56   0000     nop                      
006a58   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006a5a   0000     nop                      
006a5c   0000     nop                      
006a5e   0000     nop                      
006a60   0000     nop                      
006a62   0000     nop                      
006a64   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006a66   0000     nop                      
006a68   0000     nop                      
006a6a   0000     nop                      
006a6c   0000     nop                      
006a6e   0000     nop                      
006a70   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006a72   0000     nop                      
006a74   0000     nop                      
006a76   0000     nop                      
006a78   0000     nop                      
006a7a   0000     nop                      
006a7c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006a7e   0000     nop                      
006a80   0000     nop                      
006a82   0000     nop                      
006a84   0000     nop                      
006a86   0000     nop                      
006a88   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006a8a   0000     nop                      
006a8c   0000     nop                      
006a8e   0000     nop                      
006a90   0000     nop                      
006a92   0000     nop                      
006a94   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006a96   0000     nop                      
006a98   0000     nop                      
006a9a   0000     nop                      
006a9c   0000     nop                      
006a9e   0000     nop                      
006aa0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006aa2   0000     nop                      
006aa4   0000     nop                      
006aa6   0000     nop                      
006aa8   0000     nop                      
006aaa   0000     nop                      
006aac   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006aae   0000     nop                      
006ab0   0000     nop                      
006ab2   0000     nop                      
006ab4   0000     nop                      
006ab6   0000     nop                      
006ab8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006aba   0000     nop                      
006abc   0000     nop                      
006abe   0000     nop                      
006ac0   0000     nop                      
006ac2   0000     nop                      
006ac4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006ac6   0000     nop                      
006ac8   0000     nop                      
006aca   0000     nop                      
006acc   0000     nop                      
006ace   0000     nop                      
006ad0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006ad2   0000     nop                      
006ad4   0000     nop                      
006ad6   0000     nop                      
006ad8   0000     nop                      
006ada   0000     nop                      
006adc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006ade   0000     nop                      
006ae0   0000     nop                      
006ae2   0000     nop                      
006ae4   0000     nop                      
006ae6   0000     nop                      
006ae8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006aea   0000     nop                      
006aec   0000     nop                      
006aee   0000     nop                      
006af0   0000     nop                      
006af2   0000     nop                      
006af4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006af6   0000     nop                      
006af8   0000     nop                      
006afa   0000     nop                      
006afc   0000     nop                      
006afe   0000     nop                      
006b00   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006b02   0000     nop                      
006b04   0000     nop                      
006b06   0000     nop                      
006b08   0000     nop                      
006b0a   0000     nop                      
006b0c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006b0e   0000     nop                      
006b10   0000     nop                      
006b12   0000     nop                      
006b14   0000     nop                      
006b16   0000     nop                      
006b18   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006b1a   0000     nop                      
006b1c   0000     nop                      
006b1e   0000     nop                      
006b20   0000     nop                      
006b22   0000     nop                      
006b24   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006b26   0000     nop                      
006b28   0000     nop                      
006b2a   0000     nop                      
006b2c   0000     nop                      
006b2e   0000     nop                      
006b30   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006b32   0000     nop                      
006b34   0000     nop                      
006b36   0000     nop                      
006b38   0000     nop                      
006b3a   0000     nop                      
006b3c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006b3e   0000     nop                      
006b40   0000     nop                      
006b42   0000     nop                      
006b44   0000     nop                      
006b46   0000     nop                      
006b48   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006b4a   0000     nop                      
006b4c   0000     nop                      
006b4e   0000     nop                      
006b50   0000     nop                      
006b52   0000     nop                      
006b54   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006b56   0000     nop                      
006b58   0000     nop                      
006b5a   0000     nop                      
006b5c   0000     nop                      
006b5e   0000     nop                      
006b60   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006b62   0000     nop                      
006b64   0000     nop                      
006b66   0000     nop                      
006b68   0000     nop                      
006b6a   0000     nop                      
006b6c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006b6e   0000     nop                      
006b70   0000     nop                      
006b72   0000     nop                      
006b74   0000     nop                      
006b76   0000     nop                      
006b78   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006b7a   0000     nop                      
006b7c   0000     nop                      
006b7e   0000     nop                      
006b80   0000     nop                      
006b82   0000     nop                      
006b84   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006b86   0000     nop                      
006b88   0000     nop                      
006b8a   0000     nop                      
006b8c   0000     nop                      
006b8e   0000     nop                      
006b90   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006b92   0000     nop                      
006b94   0000     nop                      
006b96   0000     nop                      
006b98   0000     nop                      
006b9a   0000     nop                      
006b9c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006b9e   0000     nop                      
006ba0   0000     nop                      
006ba2   0000     nop                      
006ba4   0000     nop                      
006ba6   0000     nop                      
006ba8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006baa   0000     nop                      
006bac   0000     nop                      
006bae   0000     nop                      
006bb0   0000     nop                      
006bb2   0000     nop                      
006bb4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006bb6   0000     nop                      
006bb8   0000     nop                      
006bba   0000     nop                      
006bbc   0000     nop                      
006bbe   0000     nop                      
006bc0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006bc2   0000     nop                      
006bc4   0000     nop                      
006bc6   0000     nop                      
006bc8   0000     nop                      
006bca   0000     nop                      
006bcc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006bce   0000     nop                      
006bd0   0000     nop                      
006bd2   0000     nop                      
006bd4   0000     nop                      
006bd6   0000     nop                      
006bd8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006bda   0000     nop                      
006bdc   0000     nop                      
006bde   0000     nop                      
006be0   0000     nop                      
006be2   0000     nop                      
006be4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006be6   0000     nop                      
006be8   0000     nop                      
006bea   0000     nop                      
006bec   0000     nop                      
006bee   0000     nop                      
006bf0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006bf2   0000     nop                      
006bf4   0000     nop                      
006bf6   0000     nop                      
006bf8   0000     nop                      
006bfa   0000     nop                      
006bfc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006bfe   0000     nop                      
006c00   0000     nop                      
006c02   0000     nop                      
006c04   0000     nop                      
006c06   0000     nop                      
006c08   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006c0a   0000     nop                      
006c0c   0000     nop                      
006c0e   0000     nop                      
006c10   0000     nop                      
006c12   0000     nop                      
006c14   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006c16   0000     nop                      
006c18   0000     nop                      
006c1a   0000     nop                      
006c1c   0000     nop                      
006c1e   0000     nop                      
006c20   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006c22   0000     nop                      
006c24   0000     nop                      
006c26   0000     nop                      
006c28   0000     nop                      
006c2a   0000     nop                      
006c2c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006c2e   0000     nop                      
006c30   0000     nop                      
006c32   0000     nop                      
006c34   0000     nop                      
006c36   0000     nop                      
006c38   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006c3a   0000     nop                      
006c3c   0000     nop                      
006c3e   0000     nop                      
006c40   0000     nop                      
006c42   0000     nop                      
006c44   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006c46   0000     nop                      
006c48   0000     nop                      
006c4a   0000     nop                      
006c4c   0000     nop                      
006c4e   0000     nop                      
006c50   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006c52   0000     nop                      
006c54   0000     nop                      
006c56   0000     nop                      
006c58   0000     nop                      
006c5a   0000     nop                      
006c5c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006c5e   0000     nop                      
006c60   0000     nop                      
006c62   0000     nop                      
006c64   0000     nop                      
006c66   0000     nop                      
006c68   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006c6a   0000     nop                      
006c6c   0000     nop                      
006c6e   0000     nop                      
006c70   0000     nop                      
006c72   0000     nop                      
006c74   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006c76   0000     nop                      
006c78   0000     nop                      
006c7a   0000     nop                      
006c7c   0000     nop                      
006c7e   0000     nop                      
006c80   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006c82   0000     nop                      
006c84   0000     nop                      
006c86   0000     nop                      
006c88   0000     nop                      
006c8a   0000     nop                      
006c8c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006c8e   0000     nop                      
006c90   0000     nop                      
006c92   0000     nop                      
006c94   0000     nop                      
006c96   0000     nop                      
006c98   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006c9a   0000     nop                      
006c9c   0000     nop                      
006c9e   0000     nop                      
006ca0   0000     nop                      
006ca2   0000     nop                      
006ca4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006ca6   0000     nop                      
006ca8   0000     nop                      
006caa   0000     nop                      
006cac   0000     nop                      
006cae   0000     nop                      
006cb0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006cb2   0000     nop                      
006cb4   0000     nop                      
006cb6   0000     nop                      
006cb8   0000     nop                      
006cba   0000     nop                      
006cbc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006cbe   0000     nop                      
006cc0   0000     nop                      
006cc2   0000     nop                      
006cc4   0000     nop                      
006cc6   0000     nop                      
006cc8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006cca   0000     nop                      
006ccc   0000     nop                      
006cce   0000     nop                      
006cd0   0000     nop                      
006cd2   0000     nop                      
006cd4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006cd6   0000     nop                      
006cd8   0000     nop                      
006cda   0000     nop                      
006cdc   0000     nop                      
006cde   0000     nop                      
006ce0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006ce2   0000     nop                      
006ce4   0000     nop                      
006ce6   0000     nop                      
006ce8   0000     nop                      
006cea   0000     nop                      
006cec   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006cee   0000     nop                      
006cf0   0000     nop                      
006cf2   0000     nop                      
006cf4   0000     nop                      
006cf6   0000     nop                      
006cf8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006cfa   0000     nop                      
006cfc   0000     nop                      
006cfe   0000     nop                      
006d00   0000     nop                      
006d02   0000     nop                      
006d04   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006d06   0000     nop                      
006d08   0000     nop                      
006d0a   0000     nop                      
006d0c   0000     nop                      
006d0e   0000     nop                      
006d10   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006d12   0000     nop                      
006d14   0000     nop                      
006d16   0000     nop                      
006d18   0000     nop                      
006d1a   0000     nop                      
006d1c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006d1e   0000     nop                      
006d20   0000     nop                      
006d22   0000     nop                      
006d24   0000     nop                      
006d26   0000     nop                      
006d28   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006d2a   0000     nop                      
006d2c   0000     nop                      
006d2e   0000     nop                      
006d30   0000     nop                      
006d32   0000     nop                      
006d34   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006d36   0000     nop                      
006d38   0000     nop                      
006d3a   0000     nop                      
006d3c   0000     nop                      
006d3e   0000     nop                      
006d40   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006d42   0000     nop                      
006d44   0000     nop                      
006d46   0000     nop                      
006d48   0000     nop                      
006d4a   0000     nop                      
006d4c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006d4e   0000     nop                      
006d50   0000     nop                      
006d52   0000     nop                      
006d54   0000     nop                      
006d56   0000     nop                      
006d58   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006d5a   0000     nop                      
006d5c   0000     nop                      
006d5e   0000     nop                      
006d60   0000     nop                      
006d62   0000     nop                      
006d64   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006d66   0000     nop                      
006d68   0000     nop                      
006d6a   0000     nop                      
006d6c   0000     nop                      
006d6e   0000     nop                      
006d70   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006d72   0000     nop                      
006d74   0000     nop                      
006d76   0000     nop                      
006d78   0000     nop                      
006d7a   0000     nop                      
006d7c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006d7e   0000     nop                      
006d80   0000     nop                      
006d82   0000     nop                      
006d84   0000     nop                      
006d86   0000     nop                      
006d88   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006d8a   0000     nop                      
006d8c   0000     nop                      
006d8e   0000     nop                      
006d90   0000     nop                      
006d92   0000     nop                      
006d94   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006d96   0000     nop                      
006d98   0000     nop                      
006d9a   0000     nop                      
006d9c   0000     nop                      
006d9e   0000     nop                      
006da0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006da2   0000     nop                      
006da4   0000     nop                      
006da6   0000     nop                      
006da8   0000     nop                      
006daa   0000     nop                      
006dac   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006dae   0000     nop                      
006db0   0000     nop                      
006db2   0000     nop                      
006db4   0000     nop                      
006db6   0000     nop                      
006db8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006dba   0000     nop                      
006dbc   0000     nop                      
006dbe   0000     nop                      
006dc0   0000     nop                      
006dc2   0000     nop                      
006dc4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006dc6   0000     nop                      
006dc8   0000     nop                      
006dca   0000     nop                      
006dcc   0000     nop                      
006dce   0000     nop                      
006dd0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006dd2   0000     nop                      
006dd4   0000     nop                      
006dd6   0000     nop                      
006dd8   0000     nop                      
006dda   0000     nop                      
006ddc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006dde   0000     nop                      
006de0   0000     nop                      
006de2   0000     nop                      
006de4   0000     nop                      
006de6   0000     nop                      
006de8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006dea   0000     nop                      
006dec   0000     nop                      
006dee   0000     nop                      
006df0   0000     nop                      
006df2   0000     nop                      
006df4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006df6   0000     nop                      
006df8   0000     nop                      
006dfa   0000     nop                      
006dfc   0000     nop                      
006dfe   0000     nop                      
006e00   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006e02   0000     nop                      
006e04   0000     nop                      
006e06   0000     nop                      
006e08   0000     nop                      
006e0a   0000     nop                      
006e0c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006e0e   0000     nop                      
006e10   0000     nop                      
006e12   0000     nop                      
006e14   0000     nop                      
006e16   0000     nop                      
006e18   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006e1a   0000     nop                      
006e1c   0000     nop                      
006e1e   0000     nop                      
006e20   0000     nop                      
006e22   0000     nop                      
006e24   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006e26   0000     nop                      
006e28   0000     nop                      
006e2a   0000     nop                      
006e2c   0000     nop                      
006e2e   0000     nop                      
006e30   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006e32   0000     nop                      
006e34   0000     nop                      
006e36   0000     nop                      
006e38   0000     nop                      
006e3a   0000     nop                      
006e3c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006e3e   0000     nop                      
006e40   0000     nop                      
006e42   0000     nop                      
006e44   0000     nop                      
006e46   0000     nop                      
006e48   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006e4a   0000     nop                      
006e4c   0000     nop                      
006e4e   0000     nop                      
006e50   0000     nop                      
006e52   0000     nop                      
006e54   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006e56   0000     nop                      
006e58   0000     nop                      
006e5a   0000     nop                      
006e5c   0000     nop                      
006e5e   0000     nop                      
006e60   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006e62   0000     nop                      
006e64   0000     nop                      
006e66   0000     nop                      
006e68   0000     nop                      
006e6a   0000     nop                      
006e6c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006e6e   0000     nop                      
006e70   0000     nop                      
006e72   0000     nop                      
006e74   0000     nop                      
006e76   0000     nop                      
006e78   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006e7a   0000     nop                      
006e7c   0000     nop                      
006e7e   0000     nop                      
006e80   0000     nop                      
006e82   0000     nop                      
006e84   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006e86   0000     nop                      
006e88   0000     nop                      
006e8a   0000     nop                      
006e8c   0000     nop                      
006e8e   0000     nop                      
006e90   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006e92   0000     nop                      
006e94   0000     nop                      
006e96   0000     nop                      
006e98   0000     nop                      
006e9a   0000     nop                      
006e9c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006e9e   0000     nop                      
006ea0   0000     nop                      
006ea2   0000     nop                      
006ea4   0000     nop                      
006ea6   0000     nop                      
006ea8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006eaa   0000     nop                      
006eac   0000     nop                      
006eae   0000     nop                      
006eb0   0000     nop                      
006eb2   0000     nop                      
006eb4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006eb6   0000     nop                      
006eb8   0000     nop                      
006eba   0000     nop                      
006ebc   0000     nop                      
006ebe   0000     nop                      
006ec0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006ec2   0000     nop                      
006ec4   0000     nop                      
006ec6   0000     nop                      
006ec8   0000     nop                      
006eca   0000     nop                      
006ecc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006ece   0000     nop                      
006ed0   0000     nop                      
006ed2   0000     nop                      
006ed4   0000     nop                      
006ed6   0000     nop                      
006ed8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006eda   0000     nop                      
006edc   0000     nop                      
006ede   0000     nop                      
006ee0   0000     nop                      
006ee2   0000     nop                      
006ee4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006ee6   0000     nop                      
006ee8   0000     nop                      
006eea   0000     nop                      
006eec   0000     nop                      
006eee   0000     nop                      
006ef0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006ef2   0000     nop                      
006ef4   0000     nop                      
006ef6   0000     nop                      
006ef8   0000     nop                      
006efa   0000     nop                      
006efc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006efe   0000     nop                      
006f00   0000     nop                      
006f02   0000     nop                      
006f04   0000     nop                      
006f06   0000     nop                      
006f08   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006f0a   0000     nop                      
006f0c   0000     nop                      
006f0e   0000     nop                      
006f10   0000     nop                      
006f12   0000     nop                      
006f14   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006f16   0000     nop                      
006f18   0000     nop                      
006f1a   0000     nop                      
006f1c   0000     nop                      
006f1e   0000     nop                      
006f20   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006f22   0000     nop                      
006f24   0000     nop                      
006f26   0000     nop                      
006f28   0000     nop                      
006f2a   0000     nop                      
006f2c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006f2e   0000     nop                      
006f30   0000     nop                      
006f32   0000     nop                      
006f34   0000     nop                      
006f36   0000     nop                      
006f38   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006f3a   0000     nop                      
006f3c   0000     nop                      
006f3e   0000     nop                      
006f40   0000     nop                      
006f42   0000     nop                      
006f44   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006f46   0000     nop                      
006f48   0000     nop                      
006f4a   0000     nop                      
006f4c   0000     nop                      
006f4e   0000     nop                      
006f50   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006f52   0000     nop                      
006f54   0000     nop                      
006f56   0000     nop                      
006f58   0000     nop                      
006f5a   0000     nop                      
006f5c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006f5e   0000     nop                      
006f60   0000     nop                      
006f62   0000     nop                      
006f64   0000     nop                      
006f66   0000     nop                      
006f68   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006f6a   0000     nop                      
006f6c   0000     nop                      
006f6e   0000     nop                      
006f70   0000     nop                      
006f72   0000     nop                      
006f74   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006f76   0000     nop                      
006f78   0000     nop                      
006f7a   0000     nop                      
006f7c   0000     nop                      
006f7e   0000     nop                      
006f80   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006f82   0000     nop                      
006f84   0000     nop                      
006f86   0000     nop                      
006f88   0000     nop                      
006f8a   0000     nop                      
006f8c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006f8e   0000     nop                      
006f90   0000     nop                      
006f92   0000     nop                      
006f94   0000     nop                      
006f96   0000     nop                      
006f98   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006f9a   0000     nop                      
006f9c   0000     nop                      
006f9e   0000     nop                      
006fa0   0000     nop                      
006fa2   0000     nop                      
006fa4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006fa6   0000     nop                      
006fa8   0000     nop                      
006faa   0000     nop                      
006fac   0000     nop                      
006fae   0000     nop                      
006fb0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006fb2   0000     nop                      
006fb4   0000     nop                      
006fb6   0000     nop                      
006fb8   0000     nop                      
006fba   0000     nop                      
006fbc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006fbe   0000     nop                      
006fc0   0000     nop                      
006fc2   0000     nop                      
006fc4   0000     nop                      
006fc6   0000     nop                      
006fc8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006fca   0000     nop                      
006fcc   0000     nop                      
006fce   0000     nop                      
006fd0   0000     nop                      
006fd2   0000     nop                      
006fd4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006fd6   0000     nop                      
006fd8   0000     nop                      
006fda   0000     nop                      
006fdc   0000     nop                      
006fde   0000     nop                      
006fe0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006fe2   0000     nop                      
006fe4   0000     nop                      
006fe6   0000     nop                      
006fe8   0000     nop                      
006fea   0000     nop                      
006fec   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
006fee   0000     nop                      
006ff0   0000     nop                      
006ff2   0000     nop                      
006ff4   0000     nop                      
006ff6   0000     nop                      
006ff8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x16, 0x05, 0x02
006ffa   0000     nop                      
006ffc   0000     nop                      
006ffe   0000     nop                      
007000   160c     andwf   0x0c, 0x1, 0x0   
007002   0205     mulwf   0x05, 0x0        
007004   1d1f     comf    0x1f, 0x0, 0x1   	DB	0x1f, 0x1d, 0x16, 0x0c, 0x27, 0x13, 0x29, 0x04, 0x0a, 0x25, 0x08, 0xff
007006   0c16     retlw   0x16             
007008   1327     iorwf   0x27, 0x1, 0x1   
00700a   0429     decf    0x29, 0x0, 0x0   
00700c   250a     addwf   0x0a, 0x0, 0x1   
00700e   ff08     dw      0xff08           
007010   ffff     dw      0xffff           	DB	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
007012   ffff     dw      0xffff           
007014   ffff     dw      0xffff           
007016   ffff     dw      0xffff           
007018   ffff     dw      0xffff           
00701a   ffff     dw      0xffff           
00701c   ffff     dw      0xffff           	DB	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
00701e   ffff     dw      0xffff           
007020   ffff     dw      0xffff           
007022   ffff     dw      0xffff           
007024   ffff     dw      0xffff           
007026   ffff     dw      0xffff           
007028   ffff     dw      0xffff           	DB	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
00702a   ffff     dw      0xffff           
00702c   ffff     dw      0xffff           
00702e   ffff     dw      0xffff           
007030   ffff     dw      0xffff           
007032   ffff     dw      0xffff           
007034   ffff     dw      0xffff           	DB	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
007036   ffff     dw      0xffff           
007038   ffff     dw      0xffff           
00703a   ffff     dw      0xffff           
00703c   ffff     dw      0xffff           
00703e   ffff     dw      0xffff           
007040   6f4d     movwf   0x4d, 0x1        	DB	0x4d, 0x6f, 0x6e, 0x6b, 0x65, 0x79, 0x20, 0x57, 0x72, 0x65, 0x6e, 0x63
007042   6b6e     clrf    0x6e, 0x1        
007044   7965     btg     0x65, 0x4, 0x1   
007046   5720     subfwb  0x20, 0x1, 0x1   
007048   6572     cpfsgt  0x72, 0x1        
00704a   636e     cpfseq  0x6e, 0x1        
00704c   0068     dw      0x0068           	DB	0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x76, 0x65, 0x6e
00704e   0000     nop                      
007050   0000     nop                      
007052   0000     nop                      
007054   7645     btg     0x45, 0x3, 0x0   
007056   6e65     movwf   0x65, 0x0        
007058   4620     rlncf   0x20, 0x1, 0x0   	DB	0x20, 0x46, 0x6c, 0x6f, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00705a   6f6c     movwf   0x6c, 0x1        
00705c   0077     dw      0x0077           
00705e   0000     nop                      
007060   0000     nop                      
007062   0000     nop                      
007064   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x5a, 0x65, 0x72, 0x6f, 0x00, 0x00, 0x00, 0x00
007066   0000     nop                      
007068   655a     cpfsgt  0x5a, 0x1        
00706a   6f72     movwf   0x72, 0x1        
00706c   0000     nop                      
00706e   0000     nop                      
007070   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007072   0000     nop                      
007074   0000     nop                      
007076   0000     nop                      
007078   0000     nop                      
00707a   0000     nop                      
00707c   6f57     movwf   0x57, 0x1        	DB	0x57, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x77, 0x61, 0x6c, 0x6c, 0x00, 0x00
00707e   646e     cpfsgt  0x6e, 0x0        
007080   7265     btg     0x65, 0x1, 0x0   
007082   6177     cpfslt  0x77, 0x1        
007084   6c6c     negf    0x6c, 0x0        
007086   0000     nop                      
007088   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x75, 0x64, 0x64
00708a   0000     nop                      
00708c   0000     nop                      
00708e   0000     nop                      
007090   7542     btg     0x42, 0x2, 0x1   
007092   6464     cpfsgt  0x64, 0x0        
007094   2079     addwfc  0x79, 0x0, 0x0   	DB	0x79, 0x20, 0x48, 0x6f, 0x6c, 0x6c, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00
007096   6f48     movwf   0x48, 0x1        
007098   6c6c     negf    0x6c, 0x0        
00709a   0079     dw      0x0079           
00709c   0000     nop                      
00709e   0000     nop                      
0070a0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x50, 0x6c, 0x75, 0x73, 0x68, 0x00, 0x00, 0x00
0070a2   0000     nop                      
0070a4   6c50     negf    0x50, 0x0        
0070a6   7375     btg     0x75, 0x1, 0x1   
0070a8   0068     dw      0x0068           
0070aa   0000     nop                      
0070ac   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0070ae   0000     nop                      
0070b0   0000     nop                      
0070b2   0000     nop                      
0070b4   0000     nop                      
0070b6   0000     nop                      
0070b8   6f43     movwf   0x43, 0x1        	DB	0x43, 0x6f, 0x6d, 0x65, 0x20, 0x4f, 0x75, 0x74, 0x00, 0x00, 0x00, 0x00
0070ba   656d     cpfsgt  0x6d, 0x1        
0070bc   4f20     dcfsnz  0x20, 0x1, 0x1   
0070be   7475     btg     0x75, 0x2, 0x0   
0070c0   0000     nop                      
0070c2   0000     nop                      
0070c4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x72, 0x69, 0x76
0070c6   0000     nop                      
0070c8   0000     nop                      
0070ca   0000     nop                      
0070cc   7244     btg     0x44, 0x1, 0x0   
0070ce   7669     btg     0x69, 0x3, 0x0   
0070d0   0065     dw      0x0065           	DB	0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0070d2   0000     nop                      
0070d4   0000     nop                      
0070d6   0000     nop                      
0070d8   0000     nop                      
0070da   0000     nop                      
0070dc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x43, 0x6f, 0x6d, 0x65, 0x20, 0x41, 0x72, 0x6f
0070de   0000     nop                      
0070e0   6f43     movwf   0x43, 0x1        
0070e2   656d     cpfsgt  0x6d, 0x1        
0070e4   4120     rrncf   0x20, 0x0, 0x1   
0070e6   6f72     movwf   0x72, 0x1        
0070e8   6e75     movwf   0x75, 0x0        	DB	0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0070ea   0064     dw      0x0064           
0070ec   0000     nop                      
0070ee   0000     nop                      
0070f0   0000     nop                      
0070f2   0000     nop                      
0070f4   655a     cpfsgt  0x5a, 0x1        	DB	0x5a, 0x65, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0070f6   006e     dw      0x006e           
0070f8   0000     nop                      
0070fa   0000     nop                      
0070fc   0000     nop                      
0070fe   0000     nop                      
007100   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x61, 0x6e, 0x64
007102   0000     nop                      
007104   0000     nop                      
007106   0000     nop                      
007108   6153     cpfslt  0x53, 0x1        
00710a   646e     cpfsgt  0x6e, 0x0        
00710c   616d     cpfslt  0x6d, 0x1        	DB	0x6d, 0x61, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00710e   006e     dw      0x006e           
007110   0000     nop                      
007112   0000     nop                      
007114   0000     nop                      
007116   0000     nop                      
007118   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x69, 0x6e, 0x67
00711a   0000     nop                      
00711c   7243     btg     0x43, 0x1, 0x0   
00711e   7761     btg     0x61, 0x3, 0x1   
007120   696c     setf    0x6c, 0x1        
007122   676e     tstfsz  0x6e, 0x1        
007124   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007126   0000     nop                      
007128   0000     nop                      
00712a   0000     nop                      
00712c   0000     nop                      
00712e   0000     nop                      
007130   6f53     movwf   0x53, 0x1        	DB	0x53, 0x6f, 0x6e, 0x67, 0x20, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007132   676e     tstfsz  0x6e, 0x1        
007134   3220     rrcf    0x20, 0x1, 0x0   
007136   0000     nop                      
007138   0000     nop                      
00713a   0000     nop                      
00713c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x65, 0x78, 0x20
00713e   0000     nop                      
007140   0000     nop                      
007142   0000     nop                      
007144   6553     cpfsgt  0x53, 0x1        
007146   2078     addwfc  0x78, 0x0, 0x0   
007148   7954     btg     0x54, 0x4, 0x1   	DB	0x54, 0x79, 0x70, 0x65, 0x20, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x00, 0x00
00714a   6570     cpfsgt  0x70, 0x1        
00714c   5420     subfwb  0x20, 0x0, 0x0   
00714e   6968     setf    0x68, 0x1        
007150   676e     tstfsz  0x6e, 0x1        
007152   0000     nop                      
007154   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x4d, 0x72, 0x20, 0x4a, 0x6f, 0x6e, 0x65, 0x73
007156   0000     nop                      
007158   724d     btg     0x4d, 0x1, 0x0   
00715a   4a20     infsnz  0x20, 0x1, 0x0   
00715c   6e6f     movwf   0x6f, 0x0        
00715e   7365     btg     0x65, 0x1, 0x1   
007160   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007162   0000     nop                      
007164   0000     nop                      
007166   0000     nop                      
007168   0000     nop                      
00716a   0000     nop                      
00716c   6c42     negf    0x42, 0x0        	DB	0x42, 0x6c, 0x75, 0x65, 0x20, 0x43, 0x61, 0x72, 0x73, 0x00, 0x00, 0x00
00716e   6575     cpfsgt  0x75, 0x1        
007170   4320     rrncf   0x20, 0x1, 0x1   
007172   7261     btg     0x61, 0x1, 0x0   
007174   0073     dw      0x0073           
007176   0000     nop                      
007178   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x6e, 0x20, 0x42
00717a   0000     nop                      
00717c   0000     nop                      
00717e   0000     nop                      
007180   6e49     movwf   0x49, 0x0        
007182   4220     rrncf   0x20, 0x1, 0x0   
007184   6f6c     movwf   0x6c, 0x1        	DB	0x6c, 0x6f, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007186   6d6f     negf    0x6f, 0x1        
007188   0000     nop                      
00718a   0000     nop                      
00718c   0000     nop                      
00718e   0000     nop                      
007190   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x48, 0x61, 0x73, 0x68, 0x20, 0x50, 0x69, 0x70
007192   0000     nop                      
007194   6148     cpfslt  0x48, 0x1        
007196   6873     setf    0x73, 0x0        
007198   5020     movf    0x20, 0x0, 0x0   
00719a   7069     btg     0x69, 0x0, 0x0   
00719c   0065     dw      0x0065           	DB	0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00719e   0000     nop                      
0071a0   0000     nop                      
0071a2   0000     nop                      
0071a4   0000     nop                      
0071a6   0000     nop                      
0071a8   794d     btg     0x4d, 0x4, 0x1   	DB	0x4d, 0x79, 0x20, 0x48, 0x65, 0x72, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00
0071aa   4820     infsnz  0x20, 0x0, 0x0   
0071ac   7265     btg     0x65, 0x1, 0x0   
0071ae   006f     dw      0x006f           
0071b0   0000     nop                      
0071b2   0000     nop                      
0071b4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x61, 0x63, 0x68
0071b6   0000     nop                      
0071b8   0000     nop                      
0071ba   0000     nop                      
0071bc   614d     cpfslt  0x4d, 0x1        
0071be   6863     setf    0x63, 0x0        
0071c0   6e69     movwf   0x69, 0x0        	DB	0x69, 0x6e, 0x65, 0x68, 0x65, 0x61, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00
0071c2   6865     setf    0x65, 0x0        
0071c4   6165     cpfslt  0x65, 0x1        
0071c6   0064     dw      0x0064           
0071c8   0000     nop                      
0071ca   0000     nop                      
0071cc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x00
0071ce   0000     nop                      
0071d0   6f48     movwf   0x48, 0x1        
0071d2   696c     setf    0x6c, 0x1        
0071d4   6164     cpfslt  0x64, 0x1        
0071d6   0079     dw      0x0079           
0071d8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0071da   0000     nop                      
0071dc   0000     nop                      
0071de   0000     nop                      
0071e0   0000     nop                      
0071e2   0000     nop                      
0071e4   6c43     negf    0x43, 0x0        	DB	0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x54, 0x69, 0x6d, 0x65
0071e6   736f     btg     0x6f, 0x1, 0x1   
0071e8   6e69     movwf   0x69, 0x0        
0071ea   2067     addwfc  0x67, 0x0, 0x0   
0071ec   6954     setf    0x54, 0x1        
0071ee   656d     cpfsgt  0x6d, 0x1        
0071f0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x72, 0x61, 0x69
0071f2   0000     nop                      
0071f4   0000     nop                      
0071f6   0000     nop                      
0071f8   7242     btg     0x42, 0x1, 0x0   
0071fa   6961     setf    0x61, 0x1        
0071fc   206e     addwfc  0x6e, 0x0, 0x0   	DB	0x6e, 0x20, 0x53, 0x74, 0x65, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0071fe   7453     btg     0x53, 0x2, 0x0   
007200   7765     btg     0x65, 0x3, 0x1   
007202   0000     nop                      
007204   0000     nop                      
007206   0000     nop                      
007208   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00
00720a   0000     nop                      
00720c   6f42     movwf   0x42, 0x1        
00720e   6e75     movwf   0x75, 0x0        
007210   0064     dw      0x0064           
007212   0000     nop                      
007214   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007216   0000     nop                      
007218   0000     nop                      
00721a   0000     nop                      
00721c   0000     nop                      
00721e   0000     nop                      
007220   2049     addwfc  0x49, 0x0, 0x0   	DB	0x49, 0x20, 0x41, 0x6c, 0x6f, 0x6e, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00
007222   6c41     negf    0x41, 0x0        
007224   6e6f     movwf   0x6f, 0x0        
007226   0065     dw      0x0065           
007228   0000     nop                      
00722a   0000     nop                      
00722c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x75, 0x6d, 0x62
00722e   0000     nop                      
007230   0000     nop                      
007232   0000     nop                      
007234   7543     btg     0x43, 0x2, 0x1   
007236   626d     cpfseq  0x6d, 0x0        
007238   7265     btg     0x65, 0x1, 0x0   	DB	0x65, 0x72, 0x73, 0x6f, 0x6d, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00723a   6f73     movwf   0x73, 0x1        
00723c   656d     cpfsgt  0x6d, 0x1        
00723e   0000     nop                      
007240   0000     nop                      
007242   0000     nop                      
007244   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x4c, 0x75, 0x6d, 0x70, 0x00, 0x00, 0x00, 0x00
007246   0000     nop                      
007248   754c     btg     0x4c, 0x2, 0x1   
00724a   706d     btg     0x6d, 0x0, 0x0   
00724c   0000     nop                      
00724e   0000     nop                      
007250   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007252   0000     nop                      
007254   0000     nop                      
007256   0000     nop                      
007258   0000     nop                      
00725a   0000     nop                      
00725c   6548     cpfsgt  0x48, 0x1        	DB	0x48, 0x65, 0x79, 0x20, 0x4a, 0x65, 0x61, 0x6c, 0x6f, 0x75, 0x73, 0x79
00725e   2079     addwfc  0x79, 0x0, 0x0   
007260   654a     cpfsgt  0x4a, 0x1        
007262   6c61     negf    0x61, 0x0        
007264   756f     btg     0x6f, 0x2, 0x1   
007266   7973     btg     0x73, 0x4, 0x1   
007268   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4b, 0x72, 0x79, 0x70
00726a   0000     nop                      
00726c   0000     nop                      
00726e   0000     nop                      
007270   724b     btg     0x4b, 0x1, 0x0   
007272   7079     btg     0x79, 0x0, 0x0   
007274   6f74     movwf   0x74, 0x1        	DB	0x74, 0x6f, 0x6e, 0x69, 0x74, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007276   696e     setf    0x6e, 0x1        
007278   6574     cpfsgt  0x74, 0x1        
00727a   0000     nop                      
00727c   0000     nop                      
00727e   0000     nop                      
007280   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x44, 0x61, 0x6d, 0x6d, 0x69, 0x74, 0x00, 0x00
007282   0000     nop                      
007284   6144     cpfslt  0x44, 0x1        
007286   6d6d     negf    0x6d, 0x1        
007288   7469     btg     0x69, 0x2, 0x0   
00728a   0000     nop                      
00728c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00728e   0000     nop                      
007290   0000     nop                      
007292   0000     nop                      
007294   0000     nop                      
007296   0000     nop                      
007298   6553     cpfsgt  0x53, 0x1        	DB	0x53, 0x65, 0x6d, 0x69, 0x2d, 0x63, 0x68, 0x61, 0x72, 0x6d, 0x65, 0x64
00729a   696d     setf    0x6d, 0x1        
00729c   632d     cpfseq  0x2d, 0x1        
00729e   6168     cpfslt  0x68, 0x1        
0072a0   6d72     negf    0x72, 0x1        
0072a2   6465     cpfsgt  0x65, 0x0        
0072a4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x79, 0x20, 0x4f
0072a6   0000     nop                      
0072a8   0000     nop                      
0072aa   0000     nop                      
0072ac   794d     btg     0x4d, 0x4, 0x1   
0072ae   4f20     dcfsnz  0x20, 0x1, 0x1   
0072b0   6e77     movwf   0x77, 0x0        	DB	0x77, 0x6e, 0x20, 0x57, 0x6f, 0x72, 0x73, 0x74, 0x20, 0x45, 0x6e, 0x65
0072b2   5720     subfwb  0x20, 0x1, 0x1   
0072b4   726f     btg     0x6f, 0x1, 0x0   
0072b6   7473     btg     0x73, 0x2, 0x0   
0072b8   4520     rlncf   0x20, 0x0, 0x1   
0072ba   656e     cpfsgt  0x6e, 0x1        
0072bc   796d     btg     0x6d, 0x4, 0x1   	DB	0x6d, 0x79, 0x00, 0x00, 0x54, 0x68, 0x65, 0x20, 0x4d, 0x69, 0x64, 0x64
0072be   0000     nop                      
0072c0   6854     setf    0x54, 0x0        
0072c2   2065     addwfc  0x65, 0x0, 0x0   
0072c4   694d     setf    0x4d, 0x1        
0072c6   6464     cpfsgt  0x64, 0x0        
0072c8   656c     cpfsgt  0x6c, 0x1        	DB	0x6c, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0072ca   0000     nop                      
0072cc   0000     nop                      
0072ce   0000     nop                      
0072d0   0000     nop                      
0072d2   0000     nop                      
0072d4   7542     btg     0x42, 0x2, 0x1   	DB	0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0072d6   6c6c     negf    0x6c, 0x0        
0072d8   7465     btg     0x65, 0x2, 0x0   
0072da   0000     nop                      
0072dc   0000     nop                      
0072de   0000     nop                      
0072e0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x66, 0x20, 0x59
0072e2   0000     nop                      
0072e4   0000     nop                      
0072e6   0000     nop                      
0072e8   6649     tstfsz  0x49, 0x0        
0072ea   5920     subwfb  0x20, 0x0, 0x1   
0072ec   756f     btg     0x6f, 0x2, 0x1   	DB	0x6f, 0x75, 0x20, 0x43, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x4f, 0x6e, 0x6c
0072ee   4320     rrncf   0x20, 0x1, 0x1   
0072f0   756f     btg     0x6f, 0x2, 0x1   
0072f2   646c     cpfsgt  0x6c, 0x0        
0072f4   4f20     dcfsnz  0x20, 0x1, 0x1   
0072f6   6c6e     negf    0x6e, 0x0        
0072f8   0079     dw      0x0079           	DB	0x79, 0x00, 0x00, 0x00, 0x42, 0x65, 0x61, 0x75, 0x74, 0x69, 0x66, 0x75
0072fa   0000     nop                      
0072fc   6542     cpfsgt  0x42, 0x1        
0072fe   7561     btg     0x61, 0x2, 0x1   
007300   6974     setf    0x74, 0x1        
007302   7566     btg     0x66, 0x2, 0x1   
007304   206c     addwfc  0x6c, 0x0, 0x0   	DB	0x6c, 0x20, 0x44, 0x69, 0x73, 0x61, 0x73, 0x74, 0x65, 0x72, 0x00, 0x00
007306   6944     setf    0x44, 0x1        
007308   6173     cpfslt  0x73, 0x1        
00730a   7473     btg     0x73, 0x2, 0x0   
00730c   7265     btg     0x65, 0x1, 0x0   
00730e   0000     nop                      
007310   6542     cpfsgt  0x42, 0x1        	DB	0x42, 0x65, 0x6c, 0x6c, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007312   6c6c     negf    0x6c, 0x0        
007314   0073     dw      0x0073           
007316   0000     nop                      
007318   0000     nop                      
00731a   0000     nop                      
00731c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x75, 0x65, 0x6c
00731e   0000     nop                      
007320   0000     nop                      
007322   0000     nop                      
007324   7546     btg     0x46, 0x2, 0x1   
007326   6c65     negf    0x65, 0x0        
007328   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00732a   0000     nop                      
00732c   0000     nop                      
00732e   0000     nop                      
007330   0000     nop                      
007332   0000     nop                      
007334   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x57, 0x68, 0x61, 0x74, 0x20, 0x49, 0x20, 0x47
007336   0000     nop                      
007338   6857     setf    0x57, 0x0        
00733a   7461     btg     0x61, 0x2, 0x0   
00733c   4920     infsnz  0x20, 0x0, 0x1   
00733e   4720     rlncf   0x20, 0x1, 0x1   
007340   746f     btg     0x6f, 0x2, 0x0   	DB	0x6f, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007342   0000     nop                      
007344   0000     nop                      
007346   0000     nop                      
007348   0000     nop                      
00734a   0000     nop                      
00734c   6153     cpfslt  0x53, 0x1        	DB	0x53, 0x61, 0x79, 0x20, 0x49, 0x74, 0x20, 0x41, 0x69, 0x6e, 0x74, 0x20
00734e   2079     addwfc  0x79, 0x0, 0x0   
007350   7449     btg     0x49, 0x2, 0x0   
007352   4120     rrncf   0x20, 0x0, 0x1   
007354   6e69     movwf   0x69, 0x0        
007356   2074     addwfc  0x74, 0x0, 0x0   
007358   6f53     movwf   0x53, 0x1        	DB	0x53, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x68, 0x69, 0x6e
00735a   0000     nop                      
00735c   0000     nop                      
00735e   0000     nop                      
007360   6853     setf    0x53, 0x0        
007362   6e69     movwf   0x69, 0x0        
007364   0065     dw      0x0065           	DB	0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007366   0000     nop                      
007368   0000     nop                      
00736a   0000     nop                      
00736c   0000     nop                      
00736e   0000     nop                      
007370   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x61
007372   0000     nop                      
007374   6142     cpfslt  0x42, 0x1        
007376   6b73     clrf    0x73, 0x1        
007378   7465     btg     0x65, 0x2, 0x0   
00737a   6163     cpfslt  0x63, 0x1        
00737c   6573     cpfsgt  0x73, 0x1        	DB	0x73, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00737e   0000     nop                      
007380   0000     nop                      
007382   0000     nop                      
007384   0000     nop                      
007386   0000     nop                      
007388   7242     btg     0x42, 0x1, 0x0   	DB	0x42, 0x72, 0x65, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00738a   6565     cpfsgt  0x65, 0x1        
00738c   0064     dw      0x0064           
00738e   0000     nop                      
007390   0000     nop                      
007392   0000     nop                      
007394   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x69, 0x74, 0x68
007396   0000     nop                      
007398   0000     nop                      
00739a   0000     nop                      
00739c   694c     setf    0x4c, 0x1        
00739e   6874     setf    0x74, 0x0        
0073a0   7569     btg     0x69, 0x2, 0x1   	DB	0x69, 0x75, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0073a2   006d     dw      0x006d           
0073a4   0000     nop                      
0073a6   0000     nop                      
0073a8   0000     nop                      
0073aa   0000     nop                      
0073ac   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x00, 0x00
0073ae   0000     nop                      
0073b0   6e55     movwf   0x55, 0x0        
0073b2   6f64     movwf   0x64, 0x1        
0073b4   656e     cpfsgt  0x6e, 0x1        
0073b6   0000     nop                      
0073b8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0073ba   0000     nop                      
0073bc   0000     nop                      
0073be   0000     nop                      
0073c0   0000     nop                      
0073c2   0000     nop                      
0073c4   7453     btg     0x53, 0x2, 0x0   	DB	0x53, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x47
0073c6   726f     btg     0x6f, 0x1, 0x0   
0073c8   2079     addwfc  0x79, 0x0, 0x0   
0073ca   666f     tstfsz  0x6f, 0x0        
0073cc   6120     cpfslt  0x20, 0x1        
0073ce   4720     rlncf   0x20, 0x1, 0x1   
0073d0   7269     btg     0x69, 0x1, 0x0   	DB	0x69, 0x72, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x72, 0x69, 0x70
0073d2   006c     dw      0x006c           
0073d4   0000     nop                      
0073d6   0000     nop                      
0073d8   7254     btg     0x54, 0x1, 0x0   
0073da   7069     btg     0x69, 0x0, 0x0   
0073dc   6970     setf    0x70, 0x1        	DB	0x70, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0073de   006e     dw      0x006e           
0073e0   0000     nop                      
0073e2   0000     nop                      
0073e4   0000     nop                      
0073e6   0000     nop                      
0073e8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0073ea   0000     nop                      
0073ec   0000     nop                      
0073ee   0000     nop                      
0073f0   0000     nop                      
0073f2   0000     nop                      
0073f4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0073f6   0000     nop                      
0073f8   0000     nop                      
0073fa   0000     nop                      
0073fc   0000     nop                      
0073fe   0000     nop                      
007400   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007402   0000     nop                      
007404   0000     nop                      
007406   0000     nop                      
007408   0000     nop                      
00740a   0000     nop                      
00740c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00740e   0000     nop                      
007410   0000     nop                      
007412   0000     nop                      
007414   0000     nop                      
007416   0000     nop                      
007418   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00741a   0000     nop                      
00741c   0000     nop                      
00741e   0000     nop                      
007420   0000     nop                      
007422   0000     nop                      
007424   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007426   0000     nop                      
007428   0000     nop                      
00742a   0000     nop                      
00742c   0000     nop                      
00742e   0000     nop                      
007430   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007432   0000     nop                      
007434   0000     nop                      
007436   0000     nop                      
007438   0000     nop                      
00743a   0000     nop                      
00743c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00743e   0000     nop                      
007440   0000     nop                      
007442   0000     nop                      
007444   0000     nop                      
007446   0000     nop                      
007448   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00744a   0000     nop                      
00744c   0000     nop                      
00744e   0000     nop                      
007450   0000     nop                      
007452   0000     nop                      
007454   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007456   0000     nop                      
007458   0000     nop                      
00745a   0000     nop                      
00745c   0000     nop                      
00745e   0000     nop                      
007460   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007462   0000     nop                      
007464   0000     nop                      
007466   0000     nop                      
007468   0000     nop                      
00746a   0000     nop                      
00746c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00746e   0000     nop                      
007470   0000     nop                      
007472   0000     nop                      
007474   0000     nop                      
007476   0000     nop                      
007478   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00747a   0000     nop                      
00747c   0000     nop                      
00747e   0000     nop                      
007480   0000     nop                      
007482   0000     nop                      
007484   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007486   0000     nop                      
007488   0000     nop                      
00748a   0000     nop                      
00748c   0000     nop                      
00748e   0000     nop                      
007490   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007492   0000     nop                      
007494   0000     nop                      
007496   0000     nop                      
007498   0000     nop                      
00749a   0000     nop                      
00749c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00749e   0000     nop                      
0074a0   0000     nop                      
0074a2   0000     nop                      
0074a4   0000     nop                      
0074a6   0000     nop                      
0074a8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0074aa   0000     nop                      
0074ac   0000     nop                      
0074ae   0000     nop                      
0074b0   0000     nop                      
0074b2   0000     nop                      
0074b4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0074b6   0000     nop                      
0074b8   0000     nop                      
0074ba   0000     nop                      
0074bc   0000     nop                      
0074be   0000     nop                      
0074c0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0074c2   0000     nop                      
0074c4   0000     nop                      
0074c6   0000     nop                      
0074c8   0000     nop                      
0074ca   0000     nop                      
0074cc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0074ce   0000     nop                      
0074d0   0000     nop                      
0074d2   0000     nop                      
0074d4   0000     nop                      
0074d6   0000     nop                      
0074d8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0074da   0000     nop                      
0074dc   0000     nop                      
0074de   0000     nop                      
0074e0   0000     nop                      
0074e2   0000     nop                      
0074e4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0074e6   0000     nop                      
0074e8   0000     nop                      
0074ea   0000     nop                      
0074ec   0000     nop                      
0074ee   0000     nop                      
0074f0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0074f2   0000     nop                      
0074f4   0000     nop                      
0074f6   0000     nop                      
0074f8   0000     nop                      
0074fa   0000     nop                      
0074fc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0074fe   0000     nop                      
007500   0000     nop                      
007502   0000     nop                      
007504   0000     nop                      
007506   0000     nop                      
007508   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00750a   0000     nop                      
00750c   0000     nop                      
00750e   0000     nop                      
007510   0000     nop                      
007512   0000     nop                      
007514   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007516   0000     nop                      
007518   0000     nop                      
00751a   0000     nop                      
00751c   0000     nop                      
00751e   0000     nop                      
007520   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007522   0000     nop                      
007524   0000     nop                      
007526   0000     nop                      
007528   0000     nop                      
00752a   0000     nop                      
00752c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00752e   0000     nop                      
007530   0000     nop                      
007532   0000     nop                      
007534   0000     nop                      
007536   0000     nop                      
007538   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00753a   0000     nop                      
00753c   0000     nop                      
00753e   0000     nop                      
007540   0000     nop                      
007542   0000     nop                      
007544   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007546   0000     nop                      
007548   0000     nop                      
00754a   0000     nop                      
00754c   0000     nop                      
00754e   0000     nop                      
007550   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007552   0000     nop                      
007554   0000     nop                      
007556   0000     nop                      
007558   0000     nop                      
00755a   0000     nop                      
00755c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00755e   0000     nop                      
007560   0000     nop                      
007562   0000     nop                      
007564   0000     nop                      
007566   0000     nop                      
007568   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00756a   0000     nop                      
00756c   0000     nop                      
00756e   0000     nop                      
007570   0000     nop                      
007572   0000     nop                      
007574   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007576   0000     nop                      
007578   0000     nop                      
00757a   0000     nop                      
00757c   0000     nop                      
00757e   0000     nop                      
007580   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007582   0000     nop                      
007584   0000     nop                      
007586   0000     nop                      
007588   0000     nop                      
00758a   0000     nop                      
00758c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00758e   0000     nop                      
007590   0000     nop                      
007592   0000     nop                      
007594   0000     nop                      
007596   0000     nop                      
007598   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00759a   0000     nop                      
00759c   0000     nop                      
00759e   0000     nop                      
0075a0   0000     nop                      
0075a2   0000     nop                      
0075a4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0075a6   0000     nop                      
0075a8   0000     nop                      
0075aa   0000     nop                      
0075ac   0000     nop                      
0075ae   0000     nop                      
0075b0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0075b2   0000     nop                      
0075b4   0000     nop                      
0075b6   0000     nop                      
0075b8   0000     nop                      
0075ba   0000     nop                      
0075bc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0075be   0000     nop                      
0075c0   0000     nop                      
0075c2   0000     nop                      
0075c4   0000     nop                      
0075c6   0000     nop                      
0075c8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0075ca   0000     nop                      
0075cc   0000     nop                      
0075ce   0000     nop                      
0075d0   0000     nop                      
0075d2   0000     nop                      
0075d4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0075d6   0000     nop                      
0075d8   0000     nop                      
0075da   0000     nop                      
0075dc   0000     nop                      
0075de   0000     nop                      
0075e0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0075e2   0000     nop                      
0075e4   0000     nop                      
0075e6   0000     nop                      
0075e8   0000     nop                      
0075ea   0000     nop                      
0075ec   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0075ee   0000     nop                      
0075f0   0000     nop                      
0075f2   0000     nop                      
0075f4   0000     nop                      
0075f6   0000     nop                      
0075f8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0075fa   0000     nop                      
0075fc   0000     nop                      
0075fe   0000     nop                      
007600   0000     nop                      
007602   0000     nop                      
007604   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007606   0000     nop                      
007608   0000     nop                      
00760a   0000     nop                      
00760c   0000     nop                      
00760e   0000     nop                      
007610   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007612   0000     nop                      
007614   0000     nop                      
007616   0000     nop                      
007618   0000     nop                      
00761a   0000     nop                      
00761c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00761e   0000     nop                      
007620   0000     nop                      
007622   0000     nop                      
007624   0000     nop                      
007626   0000     nop                      
007628   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00762a   0000     nop                      
00762c   0000     nop                      
00762e   0000     nop                      
007630   0000     nop                      
007632   0000     nop                      
007634   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007636   0000     nop                      
007638   0000     nop                      
00763a   0000     nop                      
00763c   0000     nop                      
00763e   0000     nop                      
007640   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007642   0000     nop                      
007644   0000     nop                      
007646   0000     nop                      
007648   0000     nop                      
00764a   0000     nop                      
00764c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00764e   0000     nop                      
007650   0000     nop                      
007652   0000     nop                      
007654   0000     nop                      
007656   0000     nop                      
007658   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00765a   0000     nop                      
00765c   0000     nop                      
00765e   0000     nop                      
007660   0000     nop                      
007662   0000     nop                      
007664   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007666   0000     nop                      
007668   0000     nop                      
00766a   0000     nop                      
00766c   0000     nop                      
00766e   0000     nop                      
007670   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007672   0000     nop                      
007674   0000     nop                      
007676   0000     nop                      
007678   0000     nop                      
00767a   0000     nop                      
00767c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00767e   0000     nop                      
007680   0000     nop                      
007682   0000     nop                      
007684   0000     nop                      
007686   0000     nop                      
007688   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00768a   0000     nop                      
00768c   0000     nop                      
00768e   0000     nop                      
007690   0000     nop                      
007692   0000     nop                      
007694   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007696   0000     nop                      
007698   0000     nop                      
00769a   0000     nop                      
00769c   0000     nop                      
00769e   0000     nop                      
0076a0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0076a2   0000     nop                      
0076a4   0000     nop                      
0076a6   0000     nop                      
0076a8   0000     nop                      
0076aa   0000     nop                      
0076ac   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0076ae   0000     nop                      
0076b0   0000     nop                      
0076b2   0000     nop                      
0076b4   0000     nop                      
0076b6   0000     nop                      
0076b8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0076ba   0000     nop                      
0076bc   0000     nop                      
0076be   0000     nop                      
0076c0   0000     nop                      
0076c2   0000     nop                      
0076c4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0076c6   0000     nop                      
0076c8   0000     nop                      
0076ca   0000     nop                      
0076cc   0000     nop                      
0076ce   0000     nop                      
0076d0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0076d2   0000     nop                      
0076d4   0000     nop                      
0076d6   0000     nop                      
0076d8   0000     nop                      
0076da   0000     nop                      
0076dc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0076de   0000     nop                      
0076e0   0000     nop                      
0076e2   0000     nop                      
0076e4   0000     nop                      
0076e6   0000     nop                      
0076e8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0076ea   0000     nop                      
0076ec   0000     nop                      
0076ee   0000     nop                      
0076f0   0000     nop                      
0076f2   0000     nop                      
0076f4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0076f6   0000     nop                      
0076f8   0000     nop                      
0076fa   0000     nop                      
0076fc   0000     nop                      
0076fe   0000     nop                      
007700   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007702   0000     nop                      
007704   0000     nop                      
007706   0000     nop                      
007708   0000     nop                      
00770a   0000     nop                      
00770c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00770e   0000     nop                      
007710   0000     nop                      
007712   0000     nop                      
007714   0000     nop                      
007716   0000     nop                      
007718   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00771a   0000     nop                      
00771c   0000     nop                      
00771e   0000     nop                      
007720   0000     nop                      
007722   0000     nop                      
007724   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007726   0000     nop                      
007728   0000     nop                      
00772a   0000     nop                      
00772c   0000     nop                      
00772e   0000     nop                      
007730   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007732   0000     nop                      
007734   0000     nop                      
007736   0000     nop                      
007738   0000     nop                      
00773a   0000     nop                      
00773c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00773e   0000     nop                      
007740   0000     nop                      
007742   0000     nop                      
007744   0000     nop                      
007746   0000     nop                      
007748   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00774a   0000     nop                      
00774c   0000     nop                      
00774e   0000     nop                      
007750   0000     nop                      
007752   0000     nop                      
007754   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007756   0000     nop                      
007758   0000     nop                      
00775a   0000     nop                      
00775c   0000     nop                      
00775e   0000     nop                      
007760   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007762   0000     nop                      
007764   0000     nop                      
007766   0000     nop                      
007768   0000     nop                      
00776a   0000     nop                      
00776c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00776e   0000     nop                      
007770   0000     nop                      
007772   0000     nop                      
007774   0000     nop                      
007776   0000     nop                      
007778   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00777a   0000     nop                      
00777c   0000     nop                      
00777e   0000     nop                      
007780   0000     nop                      
007782   0000     nop                      
007784   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007786   0000     nop                      
007788   0000     nop                      
00778a   0000     nop                      
00778c   0000     nop                      
00778e   0000     nop                      
007790   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007792   0000     nop                      
007794   0000     nop                      
007796   0000     nop                      
007798   0000     nop                      
00779a   0000     nop                      
00779c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00779e   0000     nop                      
0077a0   0000     nop                      
0077a2   0000     nop                      
0077a4   0000     nop                      
0077a6   0000     nop                      
0077a8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0077aa   0000     nop                      
0077ac   0000     nop                      
0077ae   0000     nop                      
0077b0   0000     nop                      
0077b2   0000     nop                      
0077b4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0077b6   0000     nop                      
0077b8   0000     nop                      
0077ba   0000     nop                      
0077bc   0000     nop                      
0077be   0000     nop                      
0077c0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0077c2   0000     nop                      
0077c4   0000     nop                      
0077c6   0000     nop                      
0077c8   0000     nop                      
0077ca   0000     nop                      
0077cc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0077ce   0000     nop                      
0077d0   0000     nop                      
0077d2   0000     nop                      
0077d4   0000     nop                      
0077d6   0000     nop                      
0077d8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0077da   0000     nop                      
0077dc   0000     nop                      
0077de   0000     nop                      
0077e0   0000     nop                      
0077e2   0000     nop                      
0077e4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0077e6   0000     nop                      
0077e8   0000     nop                      
0077ea   0000     nop                      
0077ec   0000     nop                      
0077ee   0000     nop                      
0077f0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0077f2   0000     nop                      
0077f4   0000     nop                      
0077f6   0000     nop                      
0077f8   0000     nop                      
0077fa   0000     nop                      
0077fc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0077fe   0000     nop                      
007800   0000     nop                      
007802   0000     nop                      
007804   0000     nop                      
007806   0000     nop                      
007808   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00780a   0000     nop                      
00780c   0000     nop                      
00780e   0000     nop                      
007810   0000     nop                      
007812   0000     nop                      
007814   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007816   0000     nop                      
007818   0000     nop                      
00781a   0000     nop                      
00781c   0000     nop                      
00781e   0000     nop                      
007820   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007822   0000     nop                      
007824   0000     nop                      
007826   0000     nop                      
007828   0000     nop                      
00782a   0000     nop                      
00782c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00782e   0000     nop                      
007830   0000     nop                      
007832   0000     nop                      
007834   0000     nop                      
007836   0000     nop                      
007838   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00783a   0000     nop                      
00783c   0000     nop                      
00783e   0000     nop                      
007840   0000     nop                      
007842   0000     nop                      
007844   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007846   0000     nop                      
007848   0000     nop                      
00784a   0000     nop                      
00784c   0000     nop                      
00784e   0000     nop                      
007850   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007852   0000     nop                      
007854   0000     nop                      
007856   0000     nop                      
007858   0000     nop                      
00785a   0000     nop                      
00785c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00785e   0000     nop                      
007860   0000     nop                      
007862   0000     nop                      
007864   0000     nop                      
007866   0000     nop                      
007868   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00786a   0000     nop                      
00786c   0000     nop                      
00786e   0000     nop                      
007870   0000     nop                      
007872   0000     nop                      
007874   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007876   0000     nop                      
007878   0000     nop                      
00787a   0000     nop                      
00787c   0000     nop                      
00787e   0000     nop                      
007880   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007882   0000     nop                      
007884   0000     nop                      
007886   0000     nop                      
007888   0000     nop                      
00788a   0000     nop                      
00788c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00788e   0000     nop                      
007890   0000     nop                      
007892   0000     nop                      
007894   0000     nop                      
007896   0000     nop                      
007898   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00789a   0000     nop                      
00789c   0000     nop                      
00789e   0000     nop                      
0078a0   0000     nop                      
0078a2   0000     nop                      
0078a4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0078a6   0000     nop                      
0078a8   0000     nop                      
0078aa   0000     nop                      
0078ac   0000     nop                      
0078ae   0000     nop                      
0078b0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0078b2   0000     nop                      
0078b4   0000     nop                      
0078b6   0000     nop                      
0078b8   0000     nop                      
0078ba   0000     nop                      
0078bc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0078be   0000     nop                      
0078c0   0000     nop                      
0078c2   0000     nop                      
0078c4   0000     nop                      
0078c6   0000     nop                      
0078c8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0078ca   0000     nop                      
0078cc   0000     nop                      
0078ce   0000     nop                      
0078d0   0000     nop                      
0078d2   0000     nop                      
0078d4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0078d6   0000     nop                      
0078d8   0000     nop                      
0078da   0000     nop                      
0078dc   0000     nop                      
0078de   0000     nop                      
0078e0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0078e2   0000     nop                      
0078e4   0000     nop                      
0078e6   0000     nop                      
0078e8   0000     nop                      
0078ea   0000     nop                      
0078ec   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0078ee   0000     nop                      
0078f0   0000     nop                      
0078f2   0000     nop                      
0078f4   0000     nop                      
0078f6   0000     nop                      
0078f8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0078fa   0000     nop                      
0078fc   0000     nop                      
0078fe   0000     nop                      
007900   0000     nop                      
007902   0000     nop                      
007904   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007906   0000     nop                      
007908   0000     nop                      
00790a   0000     nop                      
00790c   0000     nop                      
00790e   0000     nop                      
007910   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007912   0000     nop                      
007914   0000     nop                      
007916   0000     nop                      
007918   0000     nop                      
00791a   0000     nop                      
00791c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00791e   0000     nop                      
007920   0000     nop                      
007922   0000     nop                      
007924   0000     nop                      
007926   0000     nop                      
007928   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00792a   0000     nop                      
00792c   0000     nop                      
00792e   0000     nop                      
007930   0000     nop                      
007932   0000     nop                      
007934   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007936   0000     nop                      
007938   0000     nop                      
00793a   0000     nop                      
00793c   0000     nop                      
00793e   0000     nop                      
007940   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007942   0000     nop                      
007944   0000     nop                      
007946   0000     nop                      
007948   0000     nop                      
00794a   0000     nop                      
00794c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00794e   0000     nop                      
007950   0000     nop                      
007952   0000     nop                      
007954   0000     nop                      
007956   0000     nop                      
007958   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00795a   0000     nop                      
00795c   0000     nop                      
00795e   0000     nop                      
007960   0000     nop                      
007962   0000     nop                      
007964   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007966   0000     nop                      
007968   0000     nop                      
00796a   0000     nop                      
00796c   0000     nop                      
00796e   0000     nop                      
007970   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007972   0000     nop                      
007974   0000     nop                      
007976   0000     nop                      
007978   0000     nop                      
00797a   0000     nop                      
00797c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00797e   0000     nop                      
007980   0000     nop                      
007982   0000     nop                      
007984   0000     nop                      
007986   0000     nop                      
007988   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00798a   0000     nop                      
00798c   0000     nop                      
00798e   0000     nop                      
007990   0000     nop                      
007992   0000     nop                      
007994   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007996   0000     nop                      
007998   0000     nop                      
00799a   0000     nop                      
00799c   0000     nop                      
00799e   0000     nop                      
0079a0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0079a2   0000     nop                      
0079a4   0000     nop                      
0079a6   0000     nop                      
0079a8   0000     nop                      
0079aa   0000     nop                      
0079ac   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0079ae   0000     nop                      
0079b0   0000     nop                      
0079b2   0000     nop                      
0079b4   0000     nop                      
0079b6   0000     nop                      
0079b8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0079ba   0000     nop                      
0079bc   0000     nop                      
0079be   0000     nop                      
0079c0   0000     nop                      
0079c2   0000     nop                      
0079c4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0079c6   0000     nop                      
0079c8   0000     nop                      
0079ca   0000     nop                      
0079cc   0000     nop                      
0079ce   0000     nop                      
0079d0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0079d2   0000     nop                      
0079d4   0000     nop                      
0079d6   0000     nop                      
0079d8   0000     nop                      
0079da   0000     nop                      
0079dc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0079de   0000     nop                      
0079e0   0000     nop                      
0079e2   0000     nop                      
0079e4   0000     nop                      
0079e6   0000     nop                      
0079e8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0079ea   0000     nop                      
0079ec   0000     nop                      
0079ee   0000     nop                      
0079f0   0000     nop                      
0079f2   0000     nop                      
0079f4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0079f6   0000     nop                      
0079f8   0000     nop                      
0079fa   0000     nop                      
0079fc   0000     nop                      
0079fe   0000     nop                      
007a00   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007a02   0000     nop                      
007a04   0000     nop                      
007a06   0000     nop                      
007a08   0000     nop                      
007a0a   0000     nop                      
007a0c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007a0e   0000     nop                      
007a10   0000     nop                      
007a12   0000     nop                      
007a14   0000     nop                      
007a16   0000     nop                      
007a18   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007a1a   0000     nop                      
007a1c   0000     nop                      
007a1e   0000     nop                      
007a20   0000     nop                      
007a22   0000     nop                      
007a24   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007a26   0000     nop                      
007a28   0000     nop                      
007a2a   0000     nop                      
007a2c   0000     nop                      
007a2e   0000     nop                      
007a30   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007a32   0000     nop                      
007a34   0000     nop                      
007a36   0000     nop                      
007a38   0000     nop                      
007a3a   0000     nop                      
007a3c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007a3e   0000     nop                      
007a40   0000     nop                      
007a42   0000     nop                      
007a44   0000     nop                      
007a46   0000     nop                      
007a48   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007a4a   0000     nop                      
007a4c   0000     nop                      
007a4e   0000     nop                      
007a50   0000     nop                      
007a52   0000     nop                      
007a54   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007a56   0000     nop                      
007a58   0000     nop                      
007a5a   0000     nop                      
007a5c   0000     nop                      
007a5e   0000     nop                      
007a60   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007a62   0000     nop                      
007a64   0000     nop                      
007a66   0000     nop                      
007a68   0000     nop                      
007a6a   0000     nop                      
007a6c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007a6e   0000     nop                      
007a70   0000     nop                      
007a72   0000     nop                      
007a74   0000     nop                      
007a76   0000     nop                      
007a78   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007a7a   0000     nop                      
007a7c   0000     nop                      
007a7e   0000     nop                      
007a80   0000     nop                      
007a82   0000     nop                      
007a84   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007a86   0000     nop                      
007a88   0000     nop                      
007a8a   0000     nop                      
007a8c   0000     nop                      
007a8e   0000     nop                      
007a90   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007a92   0000     nop                      
007a94   0000     nop                      
007a96   0000     nop                      
007a98   0000     nop                      
007a9a   0000     nop                      
007a9c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007a9e   0000     nop                      
007aa0   0000     nop                      
007aa2   0000     nop                      
007aa4   0000     nop                      
007aa6   0000     nop                      
007aa8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007aaa   0000     nop                      
007aac   0000     nop                      
007aae   0000     nop                      
007ab0   0000     nop                      
007ab2   0000     nop                      
007ab4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007ab6   0000     nop                      
007ab8   0000     nop                      
007aba   0000     nop                      
007abc   0000     nop                      
007abe   0000     nop                      
007ac0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007ac2   0000     nop                      
007ac4   0000     nop                      
007ac6   0000     nop                      
007ac8   0000     nop                      
007aca   0000     nop                      
007acc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007ace   0000     nop                      
007ad0   0000     nop                      
007ad2   0000     nop                      
007ad4   0000     nop                      
007ad6   0000     nop                      
007ad8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007ada   0000     nop                      
007adc   0000     nop                      
007ade   0000     nop                      
007ae0   0000     nop                      
007ae2   0000     nop                      
007ae4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007ae6   0000     nop                      
007ae8   0000     nop                      
007aea   0000     nop                      
007aec   0000     nop                      
007aee   0000     nop                      
007af0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007af2   0000     nop                      
007af4   0000     nop                      
007af6   0000     nop                      
007af8   0000     nop                      
007afa   0000     nop                      
007afc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007afe   0000     nop                      
007b00   0000     nop                      
007b02   0000     nop                      
007b04   0000     nop                      
007b06   0000     nop                      
007b08   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007b0a   0000     nop                      
007b0c   0000     nop                      
007b0e   0000     nop                      
007b10   0000     nop                      
007b12   0000     nop                      
007b14   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007b16   0000     nop                      
007b18   0000     nop                      
007b1a   0000     nop                      
007b1c   0000     nop                      
007b1e   0000     nop                      
007b20   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007b22   0000     nop                      
007b24   0000     nop                      
007b26   0000     nop                      
007b28   0000     nop                      
007b2a   0000     nop                      
007b2c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007b2e   0000     nop                      
007b30   0000     nop                      
007b32   0000     nop                      
007b34   0000     nop                      
007b36   0000     nop                      
007b38   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007b3a   0000     nop                      
007b3c   0000     nop                      
007b3e   0000     nop                      
007b40   0000     nop                      
007b42   0000     nop                      
007b44   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007b46   0000     nop                      
007b48   0000     nop                      
007b4a   0000     nop                      
007b4c   0000     nop                      
007b4e   0000     nop                      
007b50   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007b52   0000     nop                      
007b54   0000     nop                      
007b56   0000     nop                      
007b58   0000     nop                      
007b5a   0000     nop                      
007b5c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007b5e   0000     nop                      
007b60   0000     nop                      
007b62   0000     nop                      
007b64   0000     nop                      
007b66   0000     nop                      
007b68   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007b6a   0000     nop                      
007b6c   0000     nop                      
007b6e   0000     nop                      
007b70   0000     nop                      
007b72   0000     nop                      
007b74   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007b76   0000     nop                      
007b78   0000     nop                      
007b7a   0000     nop                      
007b7c   0000     nop                      
007b7e   0000     nop                      
007b80   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007b82   0000     nop                      
007b84   0000     nop                      
007b86   0000     nop                      
007b88   0000     nop                      
007b8a   0000     nop                      
007b8c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007b8e   0000     nop                      
007b90   0000     nop                      
007b92   0000     nop                      
007b94   0000     nop                      
007b96   0000     nop                      
007b98   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007b9a   0000     nop                      
007b9c   0000     nop                      
007b9e   0000     nop                      
007ba0   0000     nop                      
007ba2   0000     nop                      
007ba4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007ba6   0000     nop                      
007ba8   0000     nop                      
007baa   0000     nop                      
007bac   0000     nop                      
007bae   0000     nop                      
007bb0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007bb2   0000     nop                      
007bb4   0000     nop                      
007bb6   0000     nop                      
007bb8   0000     nop                      
007bba   0000     nop                      
007bbc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007bbe   0000     nop                      
007bc0   0000     nop                      
007bc2   0000     nop                      
007bc4   0000     nop                      
007bc6   0000     nop                      
007bc8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007bca   0000     nop                      
007bcc   0000     nop                      
007bce   0000     nop                      
007bd0   0000     nop                      
007bd2   0000     nop                      
007bd4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007bd6   0000     nop                      
007bd8   0000     nop                      
007bda   0000     nop                      
007bdc   0000     nop                      
007bde   0000     nop                      
007be0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007be2   0000     nop                      
007be4   0000     nop                      
007be6   0000     nop                      
007be8   0000     nop                      
007bea   0000     nop                      
007bec   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007bee   0000     nop                      
007bf0   0000     nop                      
007bf2   0000     nop                      
007bf4   0000     nop                      
007bf6   0000     nop                      
007bf8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007bfa   0000     nop                      
007bfc   0000     nop                      
007bfe   0000     nop                      
007c00   0000     nop                      
007c02   0000     nop                      
007c04   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007c06   0000     nop                      
007c08   0000     nop                      
007c0a   0000     nop                      
007c0c   0000     nop                      
007c0e   0000     nop                      
007c10   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007c12   0000     nop                      
007c14   0000     nop                      
007c16   0000     nop                      
007c18   0000     nop                      
007c1a   0000     nop                      
007c1c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007c1e   0000     nop                      
007c20   0000     nop                      
007c22   0000     nop                      
007c24   0000     nop                      
007c26   0000     nop                      
007c28   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007c2a   0000     nop                      
007c2c   0000     nop                      
007c2e   0000     nop                      
007c30   0000     nop                      
007c32   0000     nop                      
007c34   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007c36   0000     nop                      
007c38   0000     nop                      
007c3a   0000     nop                      
007c3c   0000     nop                      
007c3e   0000     nop                      
007c40   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007c42   0000     nop                      
007c44   0000     nop                      
007c46   0000     nop                      
007c48   0000     nop                      
007c4a   0000     nop                      
007c4c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007c4e   0000     nop                      
007c50   0000     nop                      
007c52   0000     nop                      
007c54   0000     nop                      
007c56   0000     nop                      
007c58   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007c5a   0000     nop                      
007c5c   0000     nop                      
007c5e   0000     nop                      
007c60   0000     nop                      
007c62   0000     nop                      
007c64   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007c66   0000     nop                      
007c68   0000     nop                      
007c6a   0000     nop                      
007c6c   0000     nop                      
007c6e   0000     nop                      
007c70   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007c72   0000     nop                      
007c74   0000     nop                      
007c76   0000     nop                      
007c78   0000     nop                      
007c7a   0000     nop                      
007c7c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007c7e   0000     nop                      
007c80   0000     nop                      
007c82   0000     nop                      
007c84   0000     nop                      
007c86   0000     nop                      
007c88   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007c8a   0000     nop                      
007c8c   0000     nop                      
007c8e   0000     nop                      
007c90   0000     nop                      
007c92   0000     nop                      
007c94   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007c96   0000     nop                      
007c98   0000     nop                      
007c9a   0000     nop                      
007c9c   0000     nop                      
007c9e   0000     nop                      
007ca0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007ca2   0000     nop                      
007ca4   0000     nop                      
007ca6   0000     nop                      
007ca8   0000     nop                      
007caa   0000     nop                      
007cac   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007cae   0000     nop                      
007cb0   0000     nop                      
007cb2   0000     nop                      
007cb4   0000     nop                      
007cb6   0000     nop                      
007cb8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007cba   0000     nop                      
007cbc   0000     nop                      
007cbe   0000     nop                      
007cc0   0000     nop                      
007cc2   0000     nop                      
007cc4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007cc6   0000     nop                      
007cc8   0000     nop                      
007cca   0000     nop                      
007ccc   0000     nop                      
007cce   0000     nop                      
007cd0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007cd2   0000     nop                      
007cd4   0000     nop                      
007cd6   0000     nop                      
007cd8   0000     nop                      
007cda   0000     nop                      
007cdc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007cde   0000     nop                      
007ce0   0000     nop                      
007ce2   0000     nop                      
007ce4   0000     nop                      
007ce6   0000     nop                      
007ce8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007cea   0000     nop                      
007cec   0000     nop                      
007cee   0000     nop                      
007cf0   0000     nop                      
007cf2   0000     nop                      
007cf4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007cf6   0000     nop                      
007cf8   0000     nop                      
007cfa   0000     nop                      
007cfc   0000     nop                      
007cfe   0000     nop                      
007d00   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007d02   0000     nop                      
007d04   0000     nop                      
007d06   0000     nop                      
007d08   0000     nop                      
007d0a   0000     nop                      
007d0c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007d0e   0000     nop                      
007d10   0000     nop                      
007d12   0000     nop                      
007d14   0000     nop                      
007d16   0000     nop                      
007d18   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007d1a   0000     nop                      
007d1c   0000     nop                      
007d1e   0000     nop                      
007d20   0000     nop                      
007d22   0000     nop                      
007d24   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007d26   0000     nop                      
007d28   0000     nop                      
007d2a   0000     nop                      
007d2c   0000     nop                      
007d2e   0000     nop                      
007d30   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007d32   0000     nop                      
007d34   0000     nop                      
007d36   0000     nop                      
007d38   0000     nop                      
007d3a   0000     nop                      
007d3c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007d3e   0000     nop                      
007d40   0000     nop                      
007d42   0000     nop                      
007d44   0000     nop                      
007d46   0000     nop                      
007d48   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007d4a   0000     nop                      
007d4c   0000     nop                      
007d4e   0000     nop                      
007d50   0000     nop                      
007d52   0000     nop                      
007d54   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007d56   0000     nop                      
007d58   0000     nop                      
007d5a   0000     nop                      
007d5c   0000     nop                      
007d5e   0000     nop                      
007d60   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007d62   0000     nop                      
007d64   0000     nop                      
007d66   0000     nop                      
007d68   0000     nop                      
007d6a   0000     nop                      
007d6c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007d6e   0000     nop                      
007d70   0000     nop                      
007d72   0000     nop                      
007d74   0000     nop                      
007d76   0000     nop                      
007d78   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007d7a   0000     nop                      
007d7c   0000     nop                      
007d7e   0000     nop                      
007d80   0000     nop                      
007d82   0000     nop                      
007d84   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007d86   0000     nop                      
007d88   0000     nop                      
007d8a   0000     nop                      
007d8c   0000     nop                      
007d8e   0000     nop                      
007d90   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007d92   0000     nop                      
007d94   0000     nop                      
007d96   0000     nop                      
007d98   0000     nop                      
007d9a   0000     nop                      
007d9c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007d9e   0000     nop                      
007da0   0000     nop                      
007da2   0000     nop                      
007da4   0000     nop                      
007da6   0000     nop                      
007da8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007daa   0000     nop                      
007dac   0000     nop                      
007dae   0000     nop                      
007db0   0000     nop                      
007db2   0000     nop                      
007db4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007db6   0000     nop                      
007db8   0000     nop                      
007dba   0000     nop                      
007dbc   0000     nop                      
007dbe   0000     nop                      
007dc0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007dc2   0000     nop                      
007dc4   0000     nop                      
007dc6   0000     nop                      
007dc8   0000     nop                      
007dca   0000     nop                      
007dcc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007dce   0000     nop                      
007dd0   0000     nop                      
007dd2   0000     nop                      
007dd4   0000     nop                      
007dd6   0000     nop                      
007dd8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007dda   0000     nop                      
007ddc   0000     nop                      
007dde   0000     nop                      
007de0   0000     nop                      
007de2   0000     nop                      
007de4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007de6   0000     nop                      
007de8   0000     nop                      
007dea   0000     nop                      
007dec   0000     nop                      
007dee   0000     nop                      
007df0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007df2   0000     nop                      
007df4   0000     nop                      
007df6   0000     nop                      
007df8   0000     nop                      
007dfa   0000     nop                      
007dfc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007dfe   0000     nop                      
007e00   0000     nop                      
007e02   0000     nop                      
007e04   0000     nop                      
007e06   0000     nop                      
007e08   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007e0a   0000     nop                      
007e0c   0000     nop                      
007e0e   0000     nop                      
007e10   0000     nop                      
007e12   0000     nop                      
007e14   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007e16   0000     nop                      
007e18   0000     nop                      
007e1a   0000     nop                      
007e1c   0000     nop                      
007e1e   0000     nop                      
007e20   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007e22   0000     nop                      
007e24   0000     nop                      
007e26   0000     nop                      
007e28   0000     nop                      
007e2a   0000     nop                      
007e2c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007e2e   0000     nop                      
007e30   0000     nop                      
007e32   0000     nop                      
007e34   0000     nop                      
007e36   0000     nop                      
007e38   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007e3a   0000     nop                      
007e3c   0000     nop                      
007e3e   0000     nop                      
007e40   0000     nop                      
007e42   0000     nop                      
007e44   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007e46   0000     nop                      
007e48   0000     nop                      
007e4a   0000     nop                      
007e4c   0000     nop                      
007e4e   0000     nop                      
007e50   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007e52   0000     nop                      
007e54   0000     nop                      
007e56   0000     nop                      
007e58   0000     nop                      
007e5a   0000     nop                      
007e5c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007e5e   0000     nop                      
007e60   0000     nop                      
007e62   0000     nop                      
007e64   0000     nop                      
007e66   0000     nop                      
007e68   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007e6a   0000     nop                      
007e6c   0000     nop                      
007e6e   0000     nop                      
007e70   0000     nop                      
007e72   0000     nop                      
007e74   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007e76   0000     nop                      
007e78   0000     nop                      
007e7a   0000     nop                      
007e7c   0000     nop                      
007e7e   0000     nop                      
007e80   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007e82   0000     nop                      
007e84   0000     nop                      
007e86   0000     nop                      
007e88   0000     nop                      
007e8a   0000     nop                      
007e8c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007e8e   0000     nop                      
007e90   0000     nop                      
007e92   0000     nop                      
007e94   0000     nop                      
007e96   0000     nop                      
007e98   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007e9a   0000     nop                      
007e9c   0000     nop                      
007e9e   0000     nop                      
007ea0   0000     nop                      
007ea2   0000     nop                      
007ea4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007ea6   0000     nop                      
007ea8   0000     nop                      
007eaa   0000     nop                      
007eac   0000     nop                      
007eae   0000     nop                      
007eb0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007eb2   0000     nop                      
007eb4   0000     nop                      
007eb6   0000     nop                      
007eb8   0000     nop                      
007eba   0000     nop                      
007ebc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007ebe   0000     nop                      
007ec0   0000     nop                      
007ec2   0000     nop                      
007ec4   0000     nop                      
007ec6   0000     nop                      
007ec8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007eca   0000     nop                      
007ecc   0000     nop                      
007ece   0000     nop                      
007ed0   0000     nop                      
007ed2   0000     nop                      
007ed4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007ed6   0000     nop                      
007ed8   0000     nop                      
007eda   0000     nop                      
007edc   0000     nop                      
007ede   0000     nop                      
007ee0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007ee2   0000     nop                      
007ee4   0000     nop                      
007ee6   0000     nop                      
007ee8   0000     nop                      
007eea   0000     nop                      
007eec   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007eee   0000     nop                      
007ef0   0000     nop                      
007ef2   0000     nop                      
007ef4   0000     nop                      
007ef6   0000     nop                      
007ef8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007efa   0000     nop                      
007efc   0000     nop                      
007efe   0000     nop                      
007f00   0000     nop                      
007f02   0000     nop                      
007f04   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007f06   0000     nop                      
007f08   0000     nop                      
007f0a   0000     nop                      
007f0c   0000     nop                      
007f0e   0000     nop                      
007f10   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007f12   0000     nop                      
007f14   0000     nop                      
007f16   0000     nop                      
007f18   0000     nop                      
007f1a   0000     nop                      
007f1c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007f1e   0000     nop                      
007f20   0000     nop                      
007f22   0000     nop                      
007f24   0000     nop                      
007f26   0000     nop                      
007f28   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007f2a   0000     nop                      
007f2c   0000     nop                      
007f2e   0000     nop                      
007f30   0000     nop                      
007f32   0000     nop                      
007f34   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007f36   0000     nop                      
007f38   0000     nop                      
007f3a   0000     nop                      
007f3c   0000     nop                      
007f3e   0000     nop                      
007f40   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007f42   0000     nop                      
007f44   0000     nop                      
007f46   0000     nop                      
007f48   0000     nop                      
007f4a   0000     nop                      
007f4c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007f4e   0000     nop                      
007f50   0000     nop                      
007f52   0000     nop                      
007f54   0000     nop                      
007f56   0000     nop                      
007f58   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007f5a   0000     nop                      
007f5c   0000     nop                      
007f5e   0000     nop                      
007f60   0000     nop                      
007f62   0000     nop                      
007f64   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007f66   0000     nop                      
007f68   0000     nop                      
007f6a   0000     nop                      
007f6c   0000     nop                      
007f6e   0000     nop                      
007f70   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007f72   0000     nop                      
007f74   0000     nop                      
007f76   0000     nop                      
007f78   0000     nop                      
007f7a   0000     nop                      
007f7c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007f7e   0000     nop                      
007f80   0000     nop                      
007f82   0000     nop                      
007f84   0000     nop                      
007f86   0000     nop                      
007f88   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007f8a   0000     nop                      
007f8c   0000     nop                      
007f8e   0000     nop                      
007f90   0000     nop                      
007f92   0000     nop                      
007f94   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007f96   0000     nop                      
007f98   0000     nop                      
007f9a   0000     nop                      
007f9c   0000     nop                      
007f9e   0000     nop                      
007fa0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007fa2   0000     nop                      
007fa4   0000     nop                      
007fa6   0000     nop                      
007fa8   0000     nop                      
007faa   0000     nop                      
007fac   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007fae   0000     nop                      
007fb0   0000     nop                      
007fb2   0000     nop                      
007fb4   0000     nop                      
007fb6   0000     nop                      
007fb8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007fba   0000     nop                      
007fbc   0000     nop                      
007fbe   0000     nop                      
007fc0   0000     nop                      
007fc2   0000     nop                      
007fc4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007fc6   0000     nop                      
007fc8   0000     nop                      
007fca   0000     nop                      
007fcc   0000     nop                      
007fce   0000     nop                      
007fd0   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007fd2   0000     nop                      
007fd4   0000     nop                      
007fd6   0000     nop                      
007fd8   0000     nop                      
007fda   0000     nop                      
007fdc   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007fde   0000     nop                      
007fe0   0000     nop                      
007fe2   0000     nop                      
007fe4   0000     nop                      
007fe6   0000     nop                      
007fe8   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007fea   0000     nop                      
007fec   0000     nop                      
007fee   0000     nop                      
007ff0   0000     nop                      
007ff2   0000     nop                      
007ff4   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
007ff6   0000     nop                      
007ff8   0000     nop                      
007ffa   0000     nop                      
007ffc   0000     nop                      
007ffe   0000     nop                      

                                           ; I code from now on!


                                           ; Statistics:
                                           ; code size:	 2048 (0x0800) bytes ( 1.56%)
                                           ;           	 1024 (0x0400) words
                                           ; udata size:	  260 (0x0104) bytes (14.51%)
                                           ; access size:	    0 (0x0000) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_SystemTimeRoutine

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_SPPCFGbits
                                           	extern	_SPPEPSbits
                                           	extern	_SPPCONbits
                                           	extern	_UFRMLbits
                                           	extern	_UFRMHbits
                                           	extern	_UIRbits
                                           	extern	_UIEbits
                                           	extern	_UEIRbits
                                           	extern	_UEIEbits
                                           	extern	_USTATbits
                                           	extern	_UCONbits
                                           	extern	_UADDRbits
                                           	extern	_UCFGbits
                                           	extern	_UEP0bits
                                           	extern	_UEP1bits
                                           	extern	_UEP2bits
                                           	extern	_UEP3bits
                                           	extern	_UEP4bits
                                           	extern	_UEP5bits
                                           	extern	_UEP6bits
                                           	extern	_UEP7bits
                                           	extern	_UEP8bits
                                           	extern	_UEP9bits
                                           	extern	_UEP10bits
                                           	extern	_UEP11bits
                                           	extern	_UEP12bits
                                           	extern	_UEP13bits
                                           	extern	_UEP14bits
                                           	extern	_UEP15bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_CCP1ASbits
                                           	extern	_ECCP1ASbits
                                           	extern	_CCP1DELbits
                                           	extern	_ECCP1DELbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ECCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_CommFlags1
                                           	extern	_ArbFlags1
                                           	extern	_ArbFlags2
                                           	extern	_ProgMemAddr
                                           	extern	_ProgmemBuffer
                                           	extern	_NVRCommAddr
                                           	extern	_RAMCommAddr
                                           	extern	_ROMCommAddr
                                           	extern	_LedStatesTop
                                           	extern	_LedStatesBot
                                           	extern	_ButtonStateTop
                                           	extern	_ButtonStateBot
                                           	extern	_SystickCntr
                                           	extern	_SystickCntr2
                                           	extern	_SystickCntr3
                                           	extern	_SystickCntr4
                                           	extern	_SystickCntr5
                                           	extern	_MIDITxBuffer
                                           	extern	_MIDITxBufPtr
                                           	extern	_MIDITxBufOutPtr
                                           	extern	_swuart_tx_buffer
                                           	extern	_swuart_tx_bufptr
                                           	extern	_swuart_tx_bufoutptr
                                           	extern	_swuart_txbyte
                                           	extern	_swuart_txmask
                                           	extern	_swuart_mode
                                           	extern	_swuart_started
                                           	extern	_LCDUpdateStage
                                           	extern	_tTimer1Value
                                           	extern	_LCDRamMap
                                           	extern	_SPPDATA
                                           	extern	_SPPCFG
                                           	extern	_SPPEPS
                                           	extern	_SPPCON
                                           	extern	_UFRM
                                           	extern	_UFRML
                                           	extern	_UFRMH
                                           	extern	_UIR
                                           	extern	_UIE
                                           	extern	_UEIR
                                           	extern	_UEIE
                                           	extern	_USTAT
                                           	extern	_UCON
                                           	extern	_UADDR
                                           	extern	_UCFG
                                           	extern	_UEP0
                                           	extern	_UEP1
                                           	extern	_UEP2
                                           	extern	_UEP3
                                           	extern	_UEP4
                                           	extern	_UEP5
                                           	extern	_UEP6
                                           	extern	_UEP7
                                           	extern	_UEP8
                                           	extern	_UEP9
                                           	extern	_UEP10
                                           	extern	_UEP11
                                           	extern	_UEP12
                                           	extern	_UEP13
                                           	extern	_UEP14
                                           	extern	_UEP15
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_CCP1AS
                                           	extern	_ECCP1AS
                                           	extern	_CCP1DEL
                                           	extern	_ECCP1DEL
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_ECCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_ROM_SAVEDATA

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_systick__SystemTimeRoutine	code
                                           _SystemTimeRoutine:
                                           ;	.line	16; PIC/systick.c	SystickCntr2++;
004232   2b63     incf    0x63, 0x1, 0x1   	INCF	_SystickCntr2, F, B
                                           ;	.line	17; PIC/systick.c	if (SystickCntr2 == SYSTEM_TIME_10MS) {
004234   5163     movf    0x63, 0x0, 0x1   	MOVF	_SystickCntr2, W, B
004236   0a0a     xorlw   0x0a             	XORLW	0x0a
004238   e115     bnz     0x004264         	BNZ	_00113_DS_
                                           ;	.line	18; PIC/systick.c	SystickCntr2 = 0;
00423a   6b63     clrf    0x63, 0x1        	CLRF	_SystickCntr2, B
                                           ;	.line	21; PIC/systick.c	HandleController = true;
00423c   8f5b     bsf     0x5b, 0x7, 0x1   	BSF	_ArbFlags1, 7, B
                                           ;	.line	22; PIC/systick.c	HandleLeds = true;
00423e   8b5b     bsf     0x5b, 0x5, 0x1   	BSF	_ArbFlags1, 5, B
                                           ;	.line	23; PIC/systick.c	ControllerTiming = true;
004240   835c     bsf     0x5c, 0x1, 0x1   	BSF	_ArbFlags2, 1, B
                                           ;	.line	25; PIC/systick.c	SystickCntr4++;
004242   2b65     incf    0x65, 0x1, 0x1   	INCF	_SystickCntr4, F, B
                                           ;	.line	26; PIC/systick.c	if (SystickCntr4 == SYSTEM_TIME_40MS) {
004244   5165     movf    0x65, 0x0, 0x1   	MOVF	_SystickCntr4, W, B
004246   0a04     xorlw   0x04             	XORLW	0x04
004248   e102     bnz     0x00424e         	BNZ	_00106_DS_
                                           ;	.line	27; PIC/systick.c	SystickCntr4 = 0;
00424a   6b65     clrf    0x65, 0x1        	CLRF	_SystickCntr4, B
                                           ;	.line	29; PIC/systick.c	CheckButtons = true;
00424c   815c     bsf     0x5c, 0x0, 0x1   	BSF	_ArbFlags2, 0, B
                                           _00106_DS_:
                                           ;	.line	32; PIC/systick.c	SystickCntr5++;
00424e   2b66     incf    0x66, 0x1, 0x1   	INCF	_SystickCntr5, F, B
                                           ;	.line	33; PIC/systick.c	if (SystickCntr5 == 2) {
004250   5166     movf    0x66, 0x0, 0x1   	MOVF	_SystickCntr5, W, B
004252   0a02     xorlw   0x02             	XORLW	0x02
004254   e101     bnz     0x004258         	BNZ	_00108_DS_
                                           ;	.line	34; PIC/systick.c	SystickCntr5 = 0;
004256   6b66     clrf    0x66, 0x1        	CLRF	_SystickCntr5, B
                                           _00108_DS_:
                                           ;	.line	38; PIC/systick.c	SystickCntr3++;
004258   2b64     incf    0x64, 0x1, 0x1   	INCF	_SystickCntr3, F, B
                                           ;	.line	39; PIC/systick.c	if (SystickCntr3 == SYSTEM_TIME_1S) {
00425a   5164     movf    0x64, 0x0, 0x1   	MOVF	_SystickCntr3, W, B
00425c   0a64     xorlw   0x64             	XORLW	0x64
00425e   e102     bnz     0x004264         	BNZ	_00113_DS_
                                           ;	.line	40; PIC/systick.c	SystickCntr3 = 0;
004260   6b64     clrf    0x64, 0x1        	CLRF	_SystickCntr3, B
                                           ;	.line	43; PIC/systick.c	LCDUpdate = true;
004262   855c     bsf     0x5c, 0x2, 0x1   	BSF	_ArbFlags2, 2, B
                                           _00113_DS_:
004264   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	   52 (0x0034) bytes ( 0.04%)
                                           ;           	   26 (0x001a) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_app_sig
                                           	global	_app_ver

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute Ival
                                           S_UserAppCode__app_sig	code	0X001006
                                           _app_sig:
001006   600d     cpfslt  0x0d, 0x0        	DB	0x0d, 0x60

                                           ; ; Starting pCode block for absolute Ival
                                           S_UserAppCode__app_ver	code	0X001016
                                           _app_ver:
001016   0100     movlb   0x0              	DB	0x00, 0x01

                                           ; I code from now on!


                                           ; Statistics:
                                           ; code size:	    4 (0x0004) bytes ( 0.00%)
                                           ;           	    2 (0x0002) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_WriteProgMem
                                           	global	_EraseProgMem
                                           	global	_StartWrite

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_SPPCFGbits
                                           	extern	_SPPEPSbits
                                           	extern	_SPPCONbits
                                           	extern	_UFRMLbits
                                           	extern	_UFRMHbits
                                           	extern	_UIRbits
                                           	extern	_UIEbits
                                           	extern	_UEIRbits
                                           	extern	_UEIEbits
                                           	extern	_USTATbits
                                           	extern	_UCONbits
                                           	extern	_UADDRbits
                                           	extern	_UCFGbits
                                           	extern	_UEP0bits
                                           	extern	_UEP1bits
                                           	extern	_UEP2bits
                                           	extern	_UEP3bits
                                           	extern	_UEP4bits
                                           	extern	_UEP5bits
                                           	extern	_UEP6bits
                                           	extern	_UEP7bits
                                           	extern	_UEP8bits
                                           	extern	_UEP9bits
                                           	extern	_UEP10bits
                                           	extern	_UEP11bits
                                           	extern	_UEP12bits
                                           	extern	_UEP13bits
                                           	extern	_UEP14bits
                                           	extern	_UEP15bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_CCP1ASbits
                                           	extern	_ECCP1ASbits
                                           	extern	_CCP1DELbits
                                           	extern	_ECCP1DELbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ECCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_CommFlags1
                                           	extern	_ArbFlags1
                                           	extern	_ArbFlags2
                                           	extern	_ProgMemAddr
                                           	extern	_ProgmemBuffer
                                           	extern	_NVRCommAddr
                                           	extern	_RAMCommAddr
                                           	extern	_ROMCommAddr
                                           	extern	_LedStatesTop
                                           	extern	_LedStatesBot
                                           	extern	_ButtonStateTop
                                           	extern	_ButtonStateBot
                                           	extern	_SystickCntr
                                           	extern	_SystickCntr2
                                           	extern	_SystickCntr3
                                           	extern	_SystickCntr4
                                           	extern	_SystickCntr5
                                           	extern	_MIDITxBuffer
                                           	extern	_MIDITxBufPtr
                                           	extern	_MIDITxBufOutPtr
                                           	extern	_swuart_tx_buffer
                                           	extern	_swuart_tx_bufptr
                                           	extern	_swuart_tx_bufoutptr
                                           	extern	_swuart_txbyte
                                           	extern	_swuart_txmask
                                           	extern	_swuart_mode
                                           	extern	_swuart_started
                                           	extern	_LCDUpdateStage
                                           	extern	_tTimer1Value
                                           	extern	_LCDRamMap
                                           	extern	_SPPDATA
                                           	extern	_SPPCFG
                                           	extern	_SPPEPS
                                           	extern	_SPPCON
                                           	extern	_UFRM
                                           	extern	_UFRML
                                           	extern	_UFRMH
                                           	extern	_UIR
                                           	extern	_UIE
                                           	extern	_UEIR
                                           	extern	_UEIE
                                           	extern	_USTAT
                                           	extern	_UCON
                                           	extern	_UADDR
                                           	extern	_UCFG
                                           	extern	_UEP0
                                           	extern	_UEP1
                                           	extern	_UEP2
                                           	extern	_UEP3
                                           	extern	_UEP4
                                           	extern	_UEP5
                                           	extern	_UEP6
                                           	extern	_UEP7
                                           	extern	_UEP8
                                           	extern	_UEP9
                                           	extern	_UEP10
                                           	extern	_UEP11
                                           	extern	_UEP12
                                           	extern	_UEP13
                                           	extern	_UEP14
                                           	extern	_UEP15
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_CCP1AS
                                           	extern	_ECCP1AS
                                           	extern	_CCP1DEL
                                           	extern	_ECCP1DEL
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_ECCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_ROM_SAVEDATA

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_writeprogmem__EraseProgMem	code
                                           _EraseProgMem:
                                           ;	.line	68; PIC/writeprogmem.c	}
000006   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_writeprogmem__WriteProgMem	code
                                           _WriteProgMem:
                                           ;	.line	49; PIC/writeprogmem.c	}
001004   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_writeprogmem__StartWrite	code
                                           _StartWrite:
                                           ;	.line	17; PIC/writeprogmem.c	EECON2 = 0x55;
00441e   0e55     movlw   0x55             	MOVLW	0x55
004420   6ea7     movwf   0xa7, 0x0        	MOVWF	_EECON2
                                           ;	.line	18; PIC/writeprogmem.c	EECON2 = 0xAA;
004422   0eaa     movlw   0xaa             	MOVLW	0xaa
004424   6ea7     movwf   0xa7, 0x0        	MOVWF	_EECON2
                                           ;	.line	19; PIC/writeprogmem.c	EECON1bits.WR = 1;      //processor stall for approx 2mS..
004426   82a6     bsf     0xa6, 0x1, 0x0   	BSF	_EECON1bits, 1
004428   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	   16 (0x0010) bytes ( 0.01%)
                                           ;           	    8 (0x0008) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_midi_tx
                                           	global	_midi_enq
                                           	global	_midi_clear_buffer

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_SPPCFGbits
                                           	extern	_SPPEPSbits
                                           	extern	_SPPCONbits
                                           	extern	_UFRMLbits
                                           	extern	_UFRMHbits
                                           	extern	_UIRbits
                                           	extern	_UIEbits
                                           	extern	_UEIRbits
                                           	extern	_UEIEbits
                                           	extern	_USTATbits
                                           	extern	_UCONbits
                                           	extern	_UADDRbits
                                           	extern	_UCFGbits
                                           	extern	_UEP0bits
                                           	extern	_UEP1bits
                                           	extern	_UEP2bits
                                           	extern	_UEP3bits
                                           	extern	_UEP4bits
                                           	extern	_UEP5bits
                                           	extern	_UEP6bits
                                           	extern	_UEP7bits
                                           	extern	_UEP8bits
                                           	extern	_UEP9bits
                                           	extern	_UEP10bits
                                           	extern	_UEP11bits
                                           	extern	_UEP12bits
                                           	extern	_UEP13bits
                                           	extern	_UEP14bits
                                           	extern	_UEP15bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_CCP1ASbits
                                           	extern	_ECCP1ASbits
                                           	extern	_CCP1DELbits
                                           	extern	_ECCP1DELbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ECCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_CommFlags1
                                           	extern	_ArbFlags1
                                           	extern	_ArbFlags2
                                           	extern	_ProgMemAddr
                                           	extern	_ProgmemBuffer
                                           	extern	_NVRCommAddr
                                           	extern	_RAMCommAddr
                                           	extern	_ROMCommAddr
                                           	extern	_LedStatesTop
                                           	extern	_LedStatesBot
                                           	extern	_ButtonStateTop
                                           	extern	_ButtonStateBot
                                           	extern	_SystickCntr
                                           	extern	_SystickCntr2
                                           	extern	_SystickCntr3
                                           	extern	_SystickCntr4
                                           	extern	_SystickCntr5
                                           	extern	_MIDITxBuffer
                                           	extern	_MIDITxBufPtr
                                           	extern	_MIDITxBufOutPtr
                                           	extern	_swuart_tx_buffer
                                           	extern	_swuart_tx_bufptr
                                           	extern	_swuart_tx_bufoutptr
                                           	extern	_swuart_txbyte
                                           	extern	_swuart_txmask
                                           	extern	_swuart_mode
                                           	extern	_swuart_started
                                           	extern	_LCDUpdateStage
                                           	extern	_tTimer1Value
                                           	extern	_LCDRamMap
                                           	extern	_SPPDATA
                                           	extern	_SPPCFG
                                           	extern	_SPPEPS
                                           	extern	_SPPCON
                                           	extern	_UFRM
                                           	extern	_UFRML
                                           	extern	_UFRMH
                                           	extern	_UIR
                                           	extern	_UIE
                                           	extern	_UEIR
                                           	extern	_UEIE
                                           	extern	_USTAT
                                           	extern	_UCON
                                           	extern	_UADDR
                                           	extern	_UCFG
                                           	extern	_UEP0
                                           	extern	_UEP1
                                           	extern	_UEP2
                                           	extern	_UEP3
                                           	extern	_UEP4
                                           	extern	_UEP5
                                           	extern	_UEP6
                                           	extern	_UEP7
                                           	extern	_UEP8
                                           	extern	_UEP9
                                           	extern	_UEP10
                                           	extern	_UEP11
                                           	extern	_UEP12
                                           	extern	_UEP13
                                           	extern	_UEP14
                                           	extern	_UEP15
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_CCP1AS
                                           	extern	_ECCP1AS
                                           	extern	_CCP1DEL
                                           	extern	_ECCP1DEL
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_ECCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_ROM_SAVEDATA

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_comm_midi__midi_clear_buffer	code
                                           _midi_clear_buffer:
                                           ;	.line	40; PIC/comm_midi.c	MIDITxBufPtr = 0;       //Point to buffer start.
000000   6b67     clrf    0x67, 0x1        	CLRF	_MIDITxBufPtr, B
                                           ;	.line	41; PIC/comm_midi.c	MIDITxBufOutPtr = 0;        //Point to buffer start.
000002   6b68     clrf    0x68, 0x1        	CLRF	_MIDITxBufOutPtr, B
000004   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_comm_midi__midi_enq	code
                                           _midi_enq:
                                           ;	.line	31; PIC/comm_midi.c	void midi_enq(unsigned char Input) {
0040e8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0040ea   ffe5
0040ec   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0040ee   ffd9
0040f0   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0040f2   ffe5
0040f4   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0040f6   ffe5
0040f8   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0040fa   ffe5
0040fc   0e02     movlw   0x02             	MOVLW	0x02
0040fe   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004100   f000
                                           ;	.line	32; PIC/comm_midi.c	if (MIDITxBufPtr >= MAX_MIDI_TX_LENGTH) return;     //Exit if buffer full.
004102   0e2a     movlw   0x2a             	MOVLW	0x2a
004104   5d67     subwf   0x67, 0x0, 0x1   	SUBWF	_MIDITxBufPtr, W, B
004106   e20d     bc      0x004122         	BC	_00130_DS_
                                           ;	.line	33; PIC/comm_midi.c	MIDITxBuffer[MIDITxBufPtr] = Input; //Store value in buffer.
004108   0ec0     movlw   0xc0             	MOVLW	LOW(_MIDITxBuffer)
00410a   2567     addwf   0x67, 0x0, 0x1   	ADDWF	_MIDITxBufPtr, W, B
00410c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00410e   6a02     clrf    0x02, 0x0        	CLRF	r0x02
004110   0e01     movlw   0x01             	MOVLW	HIGH(_MIDITxBuffer)
004112   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
004114   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
004116   ffe9
004118   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
00411a   ffea
00411c   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00411e   ffef
                                           ;	.line	34; PIC/comm_midi.c	MIDITxBufPtr++;                 //Update input ptr.
004120   2b67     incf    0x67, 0x1, 0x1   	INCF	_MIDITxBufPtr, F, B
                                           _00130_DS_:
004122   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
004124   f002
004126   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
004128   f001
00412a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00412c   f000
00412e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004130   ffd9
004132   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_comm_midi__midi_tx	code
                                           _midi_tx:
                                           ;	.line	11; PIC/comm_midi.c	void midi_tx() {
004134   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004136   ffe5
004138   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00413a   ffe5
                                           ;	.line	13; PIC/comm_midi.c	if (PIR1bits.RCIF) return;
00413c   aa9e     btfss   0x9e, 0x5, 0x0   	BTFSS	_PIR1bits, 5
00413e   d001     bra     0x004142         	BRA	_00106_DS_
004140   d016     bra     0x00416e         	BRA	_00111_DS_
                                           _00106_DS_:
                                           ;	.line	16; PIC/comm_midi.c	if (MIDITxBufOutPtr == MIDITxBufPtr) {
004142   5168     movf    0x68, 0x0, 0x1   	MOVF	_MIDITxBufOutPtr, W, B
004144   1967     xorwf   0x67, 0x0, 0x1   	XORWF	_MIDITxBufPtr, W, B
004146   e103     bnz     0x00414e         	BNZ	_00108_DS_
                                           ;	.line	17; PIC/comm_midi.c	midi_clear_buffer();        //no data to send, so reset transmit buffer.
004148   ec00     call    0x000000, 0x0    	CALL	_midi_clear_buffer
00414a   f000
                                           ;	.line	18; PIC/comm_midi.c	return;                     //and exit
00414c   d010     bra     0x00416e         	BRA	_00111_DS_
                                           _00108_DS_:
                                           ;	.line	21; PIC/comm_midi.c	if (!PIR1bits.TXIF) return;         //USART is still transmitting data
00414e   b89e     btfsc   0x9e, 0x4, 0x0   	BTFSC	_PIR1bits, 4
004150   d001     bra     0x004154         	BRA	_00110_DS_
004152   d00d     bra     0x00416e         	BRA	_00111_DS_
                                           _00110_DS_:
                                           ;	.line	23; PIC/comm_midi.c	TXREG = MIDITxBuffer[MIDITxBufOutPtr];          //send out the byte
004154   0ec0     movlw   0xc0             	MOVLW	LOW(_MIDITxBuffer)
004156   2568     addwf   0x68, 0x0, 0x1   	ADDWF	_MIDITxBufOutPtr, W, B
004158   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00415a   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00415c   0e01     movlw   0x01             	MOVLW	HIGH(_MIDITxBuffer)
00415e   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
004160   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
004162   ffe9
004164   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
004166   ffea
004168   cfef     movff   0xfef, 0xfad     	MOVFF	INDF0, _TXREG
00416a   ffad
                                           ;	.line	24; PIC/comm_midi.c	MIDITxBufOutPtr++;                          //increment transmit out pointer.
00416c   2b68     incf    0x68, 0x1, 0x1   	INCF	_MIDITxBufOutPtr, F, B
                                           _00111_DS_:
                                           ;	.line	26; PIC/comm_midi.c	return;
00416e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
004170   f001
004172   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004174   f000
004176   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  150 (0x0096) bytes ( 0.11%)
                                           ;           	   75 (0x004b) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    3 (0x0003) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_SendDataToShiftReg16
                                           	global	_ReadButtons
                                           	global	_SetDipAddress
                                           	global	_fsw_poll
                                           	global	_UpdateLeds
                                           	global	_led_set
                                           	global	_lcd_row_get
                                           	global	_lcd_updated_all
                                           	global	_midi_send_cmd1
                                           	global	_midi_send_cmd2
                                           	global	_flash_load
                                           	global	_flash_store
                                           	global	_flash_addr

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrput1
                                           	extern	__gptrget1
                                           	extern	_SPPCFGbits
                                           	extern	_SPPEPSbits
                                           	extern	_SPPCONbits
                                           	extern	_UFRMLbits
                                           	extern	_UFRMHbits
                                           	extern	_UIRbits
                                           	extern	_UIEbits
                                           	extern	_UEIRbits
                                           	extern	_UEIEbits
                                           	extern	_USTATbits
                                           	extern	_UCONbits
                                           	extern	_UADDRbits
                                           	extern	_UCFGbits
                                           	extern	_UEP0bits
                                           	extern	_UEP1bits
                                           	extern	_UEP2bits
                                           	extern	_UEP3bits
                                           	extern	_UEP4bits
                                           	extern	_UEP5bits
                                           	extern	_UEP6bits
                                           	extern	_UEP7bits
                                           	extern	_UEP8bits
                                           	extern	_UEP9bits
                                           	extern	_UEP10bits
                                           	extern	_UEP11bits
                                           	extern	_UEP12bits
                                           	extern	_UEP13bits
                                           	extern	_UEP14bits
                                           	extern	_UEP15bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_CCP1ASbits
                                           	extern	_ECCP1ASbits
                                           	extern	_CCP1DELbits
                                           	extern	_ECCP1DELbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ECCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_CommFlags1
                                           	extern	_ArbFlags1
                                           	extern	_ArbFlags2
                                           	extern	_ProgMemAddr
                                           	extern	_ProgmemBuffer
                                           	extern	_NVRCommAddr
                                           	extern	_RAMCommAddr
                                           	extern	_ROMCommAddr
                                           	extern	_LedStatesTop
                                           	extern	_LedStatesBot
                                           	extern	_ButtonStateTop
                                           	extern	_ButtonStateBot
                                           	extern	_SystickCntr
                                           	extern	_SystickCntr2
                                           	extern	_SystickCntr3
                                           	extern	_SystickCntr4
                                           	extern	_SystickCntr5
                                           	extern	_MIDITxBuffer
                                           	extern	_MIDITxBufPtr
                                           	extern	_MIDITxBufOutPtr
                                           	extern	_swuart_tx_buffer
                                           	extern	_swuart_tx_bufptr
                                           	extern	_swuart_tx_bufoutptr
                                           	extern	_swuart_txbyte
                                           	extern	_swuart_txmask
                                           	extern	_swuart_mode
                                           	extern	_swuart_started
                                           	extern	_LCDUpdateStage
                                           	extern	_tTimer1Value
                                           	extern	_LCDRamMap
                                           	extern	_SPPDATA
                                           	extern	_SPPCFG
                                           	extern	_SPPEPS
                                           	extern	_SPPCON
                                           	extern	_UFRM
                                           	extern	_UFRML
                                           	extern	_UFRMH
                                           	extern	_UIR
                                           	extern	_UIE
                                           	extern	_UEIR
                                           	extern	_UEIE
                                           	extern	_USTAT
                                           	extern	_UCON
                                           	extern	_UADDR
                                           	extern	_UCFG
                                           	extern	_UEP0
                                           	extern	_UEP1
                                           	extern	_UEP2
                                           	extern	_UEP3
                                           	extern	_UEP4
                                           	extern	_UEP5
                                           	extern	_UEP6
                                           	extern	_UEP7
                                           	extern	_UEP8
                                           	extern	_UEP9
                                           	extern	_UEP10
                                           	extern	_UEP11
                                           	extern	_UEP12
                                           	extern	_UEP13
                                           	extern	_UEP14
                                           	extern	_UEP15
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_CCP1AS
                                           	extern	_ECCP1AS
                                           	extern	_CCP1DEL
                                           	extern	_ECCP1DEL
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_ECCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_EraseProgMem
                                           	extern	_midi_enq
                                           	extern	__mulint
                                           	extern	_ROM_SAVEDATA

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1

                                           udata_hwcalls_0	udata
                                           _ReadButtons_TempButtons0_1_41	res	1

                                           udata_hwcalls_1	udata
                                           _ReadButtons_TempButtons1_1_41	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_hwcalls__flash_addr	code
                                           _flash_addr:
                                           ;	.line	253; PIC/hwcalls.c	rom const u8 *flash_addr(u16 addr) {
003a08   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003a0a   ffe5
003a0c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003a0e   ffd9
003a10   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003a12   ffe5
003a14   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003a16   ffe5
003a18   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003a1a   ffe5
003a1c   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003a1e   ffe5
003a20   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
003a22   ffe5
003a24   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
003a26   ffe5
003a28   0e02     movlw   0x02             	MOVLW	0x02
003a2a   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003a2c   f000
003a2e   0e03     movlw   0x03             	MOVLW	0x03
003a30   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003a32   f001
                                           ;	.line	256; PIC/hwcalls.c	bank = (u8)(addr >> 12);
003a34   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
003a36   0b0f     andlw   0x0f             	ANDLW	0x0f
003a38   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
                                           ;	.line	257; PIC/hwcalls.c	addr &= 0x0FFF;
003a3a   0e0f     movlw   0x0f             	MOVLW	0x0f
003a3c   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
                                           ;	.line	258; PIC/hwcalls.c	return (rom const u8 *)&ROM_SAVEDATA[bank][addr];
003a3e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003a40   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003a42   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003a44   0e10     movlw   0x10             	MOVLW	0x10
003a46   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003a48   0e00     movlw   0x00             	MOVLW	0x00
003a4a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003a4c   ecb4     call    0x003968, 0x0    	CALL	__mulint
003a4e   f01c
003a50   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
003a52   cff3     movff   0xff3, 0x003     	MOVFF	PRODL, r0x03
003a54   f003
003a56   0e04     movlw   0x04             	MOVLW	0x04
003a58   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
003a5a   6a04     clrf    0x04, 0x0        	CLRF	r0x04
003a5c   0e00     movlw   0x00             	MOVLW	LOW(_ROM_SAVEDATA)
003a5e   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
003a60   0e50     movlw   0x50             	MOVLW	HIGH(_ROM_SAVEDATA)
003a62   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
003a64   0e00     movlw   0x00             	MOVLW	UPPER(_ROM_SAVEDATA)
003a66   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
003a68   6a05     clrf    0x05, 0x0        	CLRF	r0x05
003a6a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003a6c   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
003a6e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
003a70   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
003a72   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
003a74   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
003a76   c005     movff   0x005, 0xff4     	MOVFF	r0x05, PRODH
003a78   fff4
003a7a   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
003a7c   fff3
003a7e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003a80   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
003a82   f005
003a84   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
003a86   f004
003a88   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003a8a   f003
003a8c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003a8e   f002
003a90   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003a92   f001
003a94   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003a96   f000
003a98   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003a9a   ffd9
003a9c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_hwcalls__flash_store	code
                                           _flash_store:
                                           ;	.line	219; PIC/hwcalls.c	void flash_store(u16 addr, u16 count, u8 *data) {
002488   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00248a   ffe5
00248c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00248e   ffd9
002490   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002492   ffe5
002494   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002496   ffe5
002498   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00249a   ffe5
00249c   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00249e   ffe5
0024a0   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
0024a2   ffe5
0024a4   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
0024a6   ffe5
0024a8   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
0024aa   ffe5
0024ac   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
0024ae   ffe5
0024b0   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
0024b2   ffe5
0024b4   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
0024b6   ffe5
0024b8   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0024ba   ffe5
0024bc   c00b     movff   0x00b, 0xfe5     	MOVFF	r0x0b, POSTDEC1
0024be   ffe5
0024c0   c00c     movff   0x00c, 0xfe5     	MOVFF	r0x0c, POSTDEC1
0024c2   ffe5
0024c4   c00d     movff   0x00d, 0xfe5     	MOVFF	r0x0d, POSTDEC1
0024c6   ffe5
0024c8   c00e     movff   0x00e, 0xfe5     	MOVFF	r0x0e, POSTDEC1
0024ca   ffe5
0024cc   c00f     movff   0x00f, 0xfe5     	MOVFF	r0x0f, POSTDEC1
0024ce   ffe5
0024d0   c010     movff   0x010, 0xfe5     	MOVFF	r0x10, POSTDEC1
0024d2   ffe5
0024d4   c011     movff   0x011, 0xfe5     	MOVFF	r0x11, POSTDEC1
0024d6   ffe5
0024d8   0e02     movlw   0x02             	MOVLW	0x02
0024da   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0024dc   f000
0024de   0e03     movlw   0x03             	MOVLW	0x03
0024e0   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0024e2   f001
0024e4   0e04     movlw   0x04             	MOVLW	0x04
0024e6   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
0024e8   f002
0024ea   0e05     movlw   0x05             	MOVLW	0x05
0024ec   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
0024ee   f003
0024f0   0e06     movlw   0x06             	MOVLW	0x06
0024f2   cfdb     movff   0xfdb, 0x004     	MOVFF	PLUSW2, r0x04
0024f4   f004
0024f6   0e07     movlw   0x07             	MOVLW	0x07
0024f8   cfdb     movff   0xfdb, 0x005     	MOVFF	PLUSW2, r0x05
0024fa   f005
0024fc   0e08     movlw   0x08             	MOVLW	0x08
0024fe   cfdb     movff   0xfdb, 0x006     	MOVFF	PLUSW2, r0x06
002500   f006
                                           ;	.line	229; PIC/hwcalls.c	bank = (u8)(addr >> 12);
002502   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
002504   0b0f     andlw   0x0f             	ANDLW	0x0f
002506   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
                                           ;	.line	230; PIC/hwcalls.c	bankedaddr = addr & 0x0FFF;
002508   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00250a   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
00250c   0e0f     movlw   0x0f             	MOVLW	0x0f
00250e   1401     andwf   0x01, 0x0, 0x0   	ANDWF	r0x01, W
002510   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
                                           ;	.line	233; PIC/hwcalls.c	saddr = bankedaddr & ~63;
002512   0ec0     movlw   0xc0             	MOVLW	0xc0
002514   1608     andwf   0x08, 0x1, 0x0   	ANDWF	r0x08, F
                                           ;	.line	234; PIC/hwcalls.c	for (i = 0; i < 64; i++, saddr++) {
002516   6a0a     clrf    0x0a, 0x0        	CLRF	r0x0a
002518   c008     movff   0x008, 0x00b     	MOVFF	r0x08, r0x0b
00251a   f00b
00251c   c009     movff   0x009, 0x00c     	MOVFF	r0x09, r0x0c
00251e   f00c
                                           _00307_DS_:
                                           ;	.line	235; PIC/hwcalls.c	ProgmemBuffer[i] = ROM_SAVEDATA[bank][saddr];
002520   0eb0     movlw   0xb0             	MOVLW	LOW(_ProgmemBuffer)
002522   240a     addwf   0x0a, 0x0, 0x0   	ADDWF	r0x0a, W
002524   6e0d     movwf   0x0d, 0x0        	MOVWF	r0x0d
002526   6a0e     clrf    0x0e, 0x0        	CLRF	r0x0e
002528   0e00     movlw   0x00             	MOVLW	HIGH(_ProgmemBuffer)
00252a   220e     addwfc  0x0e, 0x1, 0x0   	ADDWFC	r0x0e, F
00252c   c007     movff   0x007, 0x00f     	MOVFF	r0x07, r0x0f
00252e   f00f
002530   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002532   500f     movf    0x0f, 0x0, 0x0   	MOVF	r0x0f, W
002534   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002536   0e10     movlw   0x10             	MOVLW	0x10
002538   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00253a   0e00     movlw   0x00             	MOVLW	0x00
00253c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00253e   ecb4     call    0x003968, 0x0    	CALL	__mulint
002540   f01c
002542   6e0f     movwf   0x0f, 0x0        	MOVWF	r0x0f
002544   cff3     movff   0xff3, 0x010     	MOVFF	PRODL, r0x10
002546   f010
002548   0e04     movlw   0x04             	MOVLW	0x04
00254a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00254c   6a11     clrf    0x11, 0x0        	CLRF	r0x11
00254e   0e00     movlw   0x00             	MOVLW	LOW(_ROM_SAVEDATA)
002550   260f     addwf   0x0f, 0x1, 0x0   	ADDWF	r0x0f, F
002552   0e50     movlw   0x50             	MOVLW	HIGH(_ROM_SAVEDATA)
002554   2210     addwfc  0x10, 0x1, 0x0   	ADDWFC	r0x10, F
002556   0e00     movlw   0x00             	MOVLW	UPPER(_ROM_SAVEDATA)
002558   2211     addwfc  0x11, 0x1, 0x0   	ADDWFC	r0x11, F
00255a   500b     movf    0x0b, 0x0, 0x0   	MOVF	r0x0b, W
00255c   260f     addwf   0x0f, 0x1, 0x0   	ADDWF	r0x0f, F
00255e   500c     movf    0x0c, 0x0, 0x0   	MOVF	r0x0c, W
002560   2210     addwfc  0x10, 0x1, 0x0   	ADDWFC	r0x10, F
002562   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002564   2211     addwfc  0x11, 0x1, 0x0   	ADDWFC	r0x11, F
002566   c00f     movff   0x00f, 0xff6     	MOVFF	r0x0f, TBLPTRL
002568   fff6
00256a   c010     movff   0x010, 0xff7     	MOVFF	r0x10, TBLPTRH
00256c   fff7
00256e   c011     movff   0x011, 0xff8     	MOVFF	r0x11, TBLPTRU
002570   fff8
002572   0009     tblrd*+                  	TBLRD*+	
002574   cff5     movff   0xff5, 0x00f     	MOVFF	TABLAT, r0x0f
002576   f00f
002578   c00d     movff   0x00d, 0xfe9     	MOVFF	r0x0d, FSR0L
00257a   ffe9
00257c   c00e     movff   0x00e, 0xfea     	MOVFF	r0x0e, FSR0H
00257e   ffea
002580   c00f     movff   0x00f, 0xfef     	MOVFF	r0x0f, INDF0
002582   ffef
                                           ;	.line	234; PIC/hwcalls.c	for (i = 0; i < 64; i++, saddr++) {
002584   2a0a     incf    0x0a, 0x1, 0x0   	INCF	r0x0a, F
002586   4a0b     infsnz  0x0b, 0x1, 0x0   	INFSNZ	r0x0b, F
002588   2a0c     incf    0x0c, 0x1, 0x0   	INCF	r0x0c, F
00258a   0e40     movlw   0x40             	MOVLW	0x40
00258c   5c0a     subwf   0x0a, 0x0, 0x0   	SUBWF	r0x0a, W
00258e   e3c8     bnc     0x002520         	BNC	_00307_DS_
                                           ;	.line	239; PIC/hwcalls.c	saddr = addr & ~63;
002590   0ec0     movlw   0xc0             	MOVLW	0xc0
002592   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
002594   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002596   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002598   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
00259a   c007     movff   0x007, 0x008     	MOVFF	r0x07, r0x08
00259c   f008
00259e   c00a     movff   0x00a, 0x009     	MOVFF	r0x0a, r0x09
0025a0   f009
                                           ;	.line	240; PIC/hwcalls.c	daddr = addr - saddr;
0025a2   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
0025a4   5e00     subwf   0x00, 0x1, 0x0   	SUBWF	r0x00, F
0025a6   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0025a8   5a01     subwfb  0x01, 0x1, 0x0   	SUBWFB	r0x01, F
                                           ;	.line	241; PIC/hwcalls.c	for (i = 0; i < count; i++, daddr++)
0025aa   6a08     clrf    0x08, 0x0        	CLRF	r0x08
                                           _00310_DS_:
0025ac   c008     movff   0x008, 0x009     	MOVFF	r0x08, r0x09
0025ae   f009
0025b0   6a0b     clrf    0x0b, 0x0        	CLRF	r0x0b
0025b2   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0025b4   5c0b     subwf   0x0b, 0x0, 0x0   	SUBWF	r0x0b, W
0025b6   e102     bnz     0x0025bc         	BNZ	_00332_DS_
0025b8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0025ba   5c09     subwf   0x09, 0x0, 0x0   	SUBWF	r0x09, W
                                           _00332_DS_:
0025bc   e21f     bc      0x0025fc         	BC	_00306_DS_
                                           ;	.line	242; PIC/hwcalls.c	ProgmemBuffer[daddr] = data[i];
0025be   0eb0     movlw   0xb0             	MOVLW	LOW(_ProgmemBuffer)
0025c0   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
0025c2   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
0025c4   0e00     movlw   0x00             	MOVLW	HIGH(_ProgmemBuffer)
0025c6   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
0025c8   6e0b     movwf   0x0b, 0x0        	MOVWF	r0x0b
0025ca   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
0025cc   2404     addwf   0x04, 0x0, 0x0   	ADDWF	r0x04, W
0025ce   6e0c     movwf   0x0c, 0x0        	MOVWF	r0x0c
0025d0   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0025d2   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
0025d4   6e0d     movwf   0x0d, 0x0        	MOVWF	r0x0d
0025d6   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0025d8   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
0025da   c00c     movff   0x00c, 0xfe9     	MOVFF	r0x0c, FSR0L
0025dc   ffe9
0025de   c00d     movff   0x00d, 0xff3     	MOVFF	r0x0d, PRODL
0025e0   fff3
0025e2   ec93     call    0x004326, 0x0    	CALL	__gptrget1
0025e4   f021
0025e6   6e0c     movwf   0x0c, 0x0        	MOVWF	r0x0c
0025e8   c009     movff   0x009, 0xfe9     	MOVFF	r0x09, FSR0L
0025ea   ffe9
0025ec   c00b     movff   0x00b, 0xfea     	MOVFF	r0x0b, FSR0H
0025ee   ffea
0025f0   c00c     movff   0x00c, 0xfef     	MOVFF	r0x0c, INDF0
0025f2   ffef
                                           ;	.line	241; PIC/hwcalls.c	for (i = 0; i < count; i++, daddr++)
0025f4   2a08     incf    0x08, 0x1, 0x0   	INCF	r0x08, F
0025f6   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
0025f8   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0025fa   d7d8     bra     0x0025ac         	BRA	_00310_DS_
                                           _00306_DS_:
                                           ;	.line	245; PIC/hwcalls.c	ProgMemAddr.s_form = (addr & ~63) + WRITABLE_SEG_ADDR;
0025fc   0e50     movlw   0x50             	MOVLW	0x50
0025fe   260a     addwf   0x0a, 0x1, 0x0   	ADDWF	r0x0a, F
002600   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
002602   6ffc     movwf   0xfc, 0x1        	MOVWF	_ProgMemAddr, B
002604   500a     movf    0x0a, 0x0, 0x0   	MOVF	r0x0a, W
002606   6ffd     movwf   0xfd, 0x1        	MOVWF	(_ProgMemAddr + 1), B
                                           ;	.line	246; PIC/hwcalls.c	EraseProgMem();
002608   ec03     call    0x000006, 0x0    	CALL	_EraseProgMem
00260a   f000
                                           ;	.line	249; PIC/hwcalls.c	Write0Pending = true;
00260c   875b     bsf     0x5b, 0x3, 0x1   	BSF	_ArbFlags1, 3, B
                                           ;	.line	250; PIC/hwcalls.c	Write32Pending = true;
00260e   895b     bsf     0x5b, 0x4, 0x1   	BSF	_ArbFlags1, 4, B
002610   cfe4     movff   0xfe4, 0x011     	MOVFF	PREINC1, r0x11
002612   f011
002614   cfe4     movff   0xfe4, 0x010     	MOVFF	PREINC1, r0x10
002616   f010
002618   cfe4     movff   0xfe4, 0x00f     	MOVFF	PREINC1, r0x0f
00261a   f00f
00261c   cfe4     movff   0xfe4, 0x00e     	MOVFF	PREINC1, r0x0e
00261e   f00e
002620   cfe4     movff   0xfe4, 0x00d     	MOVFF	PREINC1, r0x0d
002622   f00d
002624   cfe4     movff   0xfe4, 0x00c     	MOVFF	PREINC1, r0x0c
002626   f00c
002628   cfe4     movff   0xfe4, 0x00b     	MOVFF	PREINC1, r0x0b
00262a   f00b
00262c   cfe4     movff   0xfe4, 0x00a     	MOVFF	PREINC1, r0x0a
00262e   f00a
002630   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
002632   f009
002634   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
002636   f008
002638   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
00263a   f007
00263c   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
00263e   f006
002640   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
002642   f005
002644   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
002646   f004
002648   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00264a   f003
00264c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00264e   f002
002650   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002652   f001
002654   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002656   f000
002658   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00265a   ffd9
00265c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_hwcalls__flash_load	code
                                           _flash_load:
                                           ;	.line	201; PIC/hwcalls.c	void flash_load(u16 addr, u16 count, u8 *data) {
002aee   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002af0   ffe5
002af2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002af4   ffd9
002af6   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002af8   ffe5
002afa   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002afc   ffe5
002afe   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002b00   ffe5
002b02   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002b04   ffe5
002b06   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
002b08   ffe5
002b0a   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
002b0c   ffe5
002b0e   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
002b10   ffe5
002b12   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
002b14   ffe5
002b16   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
002b18   ffe5
002b1a   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
002b1c   ffe5
002b1e   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
002b20   ffe5
002b22   c00b     movff   0x00b, 0xfe5     	MOVFF	r0x0b, POSTDEC1
002b24   ffe5
002b26   c00c     movff   0x00c, 0xfe5     	MOVFF	r0x0c, POSTDEC1
002b28   ffe5
002b2a   c00d     movff   0x00d, 0xfe5     	MOVFF	r0x0d, POSTDEC1
002b2c   ffe5
002b2e   c00e     movff   0x00e, 0xfe5     	MOVFF	r0x0e, POSTDEC1
002b30   ffe5
002b32   0e02     movlw   0x02             	MOVLW	0x02
002b34   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
002b36   f000
002b38   0e03     movlw   0x03             	MOVLW	0x03
002b3a   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
002b3c   f001
002b3e   0e04     movlw   0x04             	MOVLW	0x04
002b40   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
002b42   f002
002b44   0e05     movlw   0x05             	MOVLW	0x05
002b46   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
002b48   f003
002b4a   0e06     movlw   0x06             	MOVLW	0x06
002b4c   cfdb     movff   0xfdb, 0x004     	MOVFF	PLUSW2, r0x04
002b4e   f004
002b50   0e07     movlw   0x07             	MOVLW	0x07
002b52   cfdb     movff   0xfdb, 0x005     	MOVFF	PLUSW2, r0x05
002b54   f005
002b56   0e08     movlw   0x08             	MOVLW	0x08
002b58   cfdb     movff   0xfdb, 0x006     	MOVFF	PLUSW2, r0x06
002b5a   f006
                                           ;	.line	211; PIC/hwcalls.c	bank = (u8)(addr >> 12);
002b5c   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
002b5e   0b0f     andlw   0x0f             	ANDLW	0x0f
002b60   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002b62   6a08     clrf    0x08, 0x0        	CLRF	r0x08
                                           ;	.line	212; PIC/hwcalls.c	addr &= 0x0FFF;
002b64   0e0f     movlw   0x0f             	MOVLW	0x0f
002b66   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
                                           _00288_DS_:
                                           ;	.line	215; PIC/hwcalls.c	for (i = 0, saddr = addr; i < count; i++, saddr++)
002b68   c008     movff   0x008, 0x009     	MOVFF	r0x08, r0x09
002b6a   f009
002b6c   6a0a     clrf    0x0a, 0x0        	CLRF	r0x0a
002b6e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002b70   5c0a     subwf   0x0a, 0x0, 0x0   	SUBWF	r0x0a, W
002b72   e102     bnz     0x002b78         	BNZ	_00300_DS_
002b74   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002b76   5c09     subwf   0x09, 0x0, 0x0   	SUBWF	r0x09, W
                                           _00300_DS_:
002b78   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
002b7a   d03c     bra     0x002bf4         	BRA	_00290_DS_
                                           ;	.line	216; PIC/hwcalls.c	data[i] = ROM_SAVEDATA[bank][saddr];
002b7c   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
002b7e   2404     addwf   0x04, 0x0, 0x0   	ADDWF	r0x04, W
002b80   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
002b82   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002b84   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
002b86   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
002b88   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002b8a   2006     addwfc  0x06, 0x0, 0x0   	ADDWFC	r0x06, W
002b8c   6e0b     movwf   0x0b, 0x0        	MOVWF	r0x0b
002b8e   c007     movff   0x007, 0x00c     	MOVFF	r0x07, r0x0c
002b90   f00c
002b92   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002b94   500c     movf    0x0c, 0x0, 0x0   	MOVF	r0x0c, W
002b96   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b98   0e10     movlw   0x10             	MOVLW	0x10
002b9a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b9c   0e00     movlw   0x00             	MOVLW	0x00
002b9e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002ba0   ecb4     call    0x003968, 0x0    	CALL	__mulint
002ba2   f01c
002ba4   6e0c     movwf   0x0c, 0x0        	MOVWF	r0x0c
002ba6   cff3     movff   0xff3, 0x00d     	MOVFF	PRODL, r0x0d
002ba8   f00d
002baa   0e04     movlw   0x04             	MOVLW	0x04
002bac   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002bae   6a0e     clrf    0x0e, 0x0        	CLRF	r0x0e
002bb0   0e00     movlw   0x00             	MOVLW	LOW(_ROM_SAVEDATA)
002bb2   260c     addwf   0x0c, 0x1, 0x0   	ADDWF	r0x0c, F
002bb4   0e50     movlw   0x50             	MOVLW	HIGH(_ROM_SAVEDATA)
002bb6   220d     addwfc  0x0d, 0x1, 0x0   	ADDWFC	r0x0d, F
002bb8   0e00     movlw   0x00             	MOVLW	UPPER(_ROM_SAVEDATA)
002bba   220e     addwfc  0x0e, 0x1, 0x0   	ADDWFC	r0x0e, F
002bbc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002bbe   260c     addwf   0x0c, 0x1, 0x0   	ADDWF	r0x0c, F
002bc0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002bc2   220d     addwfc  0x0d, 0x1, 0x0   	ADDWFC	r0x0d, F
002bc4   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002bc6   220e     addwfc  0x0e, 0x1, 0x0   	ADDWFC	r0x0e, F
002bc8   c00c     movff   0x00c, 0xff6     	MOVFF	r0x0c, TBLPTRL
002bca   fff6
002bcc   c00d     movff   0x00d, 0xff7     	MOVFF	r0x0d, TBLPTRH
002bce   fff7
002bd0   c00e     movff   0x00e, 0xff8     	MOVFF	r0x0e, TBLPTRU
002bd2   fff8
002bd4   0009     tblrd*+                  	TBLRD*+	
002bd6   cff5     movff   0xff5, 0x00c     	MOVFF	TABLAT, r0x0c
002bd8   f00c
002bda   c00c     movff   0x00c, 0xfe5     	MOVFF	r0x0c, POSTDEC1
002bdc   ffe5
002bde   c009     movff   0x009, 0xfe9     	MOVFF	r0x09, FSR0L
002be0   ffe9
002be2   c00a     movff   0x00a, 0xff3     	MOVFF	r0x0a, PRODL
002be4   fff3
002be6   500b     movf    0x0b, 0x0, 0x0   	MOVF	r0x0b, W
002be8   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
002bea   f021
                                           ;	.line	215; PIC/hwcalls.c	for (i = 0, saddr = addr; i < count; i++, saddr++)
002bec   2a08     incf    0x08, 0x1, 0x0   	INCF	r0x08, F
002bee   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
002bf0   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
002bf2   d7ba     bra     0x002b68         	BRA	_00288_DS_
                                           _00290_DS_:
002bf4   cfe4     movff   0xfe4, 0x00e     	MOVFF	PREINC1, r0x0e
002bf6   f00e
002bf8   cfe4     movff   0xfe4, 0x00d     	MOVFF	PREINC1, r0x0d
002bfa   f00d
002bfc   cfe4     movff   0xfe4, 0x00c     	MOVFF	PREINC1, r0x0c
002bfe   f00c
002c00   cfe4     movff   0xfe4, 0x00b     	MOVFF	PREINC1, r0x0b
002c02   f00b
002c04   cfe4     movff   0xfe4, 0x00a     	MOVFF	PREINC1, r0x0a
002c06   f00a
002c08   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
002c0a   f009
002c0c   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
002c0e   f008
002c10   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
002c12   f007
002c14   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
002c16   f006
002c18   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
002c1a   f005
002c1c   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
002c1e   f004
002c20   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002c22   f003
002c24   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002c26   f002
002c28   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002c2a   f001
002c2c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002c2e   f000
002c30   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002c32   ffd9
002c34   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_hwcalls__midi_send_cmd2	code
                                           _midi_send_cmd2:
                                           ;	.line	190; PIC/hwcalls.c	void midi_send_cmd2(u8 cmd, u8 channel, u8 data1, u8 data2) {
003cc6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003cc8   ffe5
003cca   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003ccc   ffd9
003cce   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003cd0   ffe5
003cd2   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003cd4   ffe5
003cd6   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003cd8   ffe5
003cda   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003cdc   ffe5
003cde   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
003ce0   ffe5
003ce2   0e02     movlw   0x02             	MOVLW	0x02
003ce4   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003ce6   f000
003ce8   0e03     movlw   0x03             	MOVLW	0x03
003cea   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003cec   f001
003cee   0e04     movlw   0x04             	MOVLW	0x04
003cf0   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
003cf2   f002
003cf4   0e05     movlw   0x05             	MOVLW	0x05
003cf6   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
003cf8   f003
                                           ;	.line	191; PIC/hwcalls.c	midi_enq(((cmd & 0xF) << 4) | (channel & 0xF));
003cfa   0e0f     movlw   0x0f             	MOVLW	0x0f
003cfc   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
003cfe   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
003d00   0bf0     andlw   0xf0             	ANDLW	0xf0
003d02   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
003d04   0e0f     movlw   0x0f             	MOVLW	0x0f
003d06   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
003d08   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003d0a   1204     iorwf   0x04, 0x1, 0x0   	IORWF	r0x04, F
003d0c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
003d0e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003d10   ec74     call    0x0040e8, 0x0    	CALL	_midi_enq
003d12   f020
003d14   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	192; PIC/hwcalls.c	midi_enq(data1);
003d16   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003d18   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003d1a   ec74     call    0x0040e8, 0x0    	CALL	_midi_enq
003d1c   f020
003d1e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	193; PIC/hwcalls.c	midi_enq(data2);
003d20   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
003d22   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003d24   ec74     call    0x0040e8, 0x0    	CALL	_midi_enq
003d26   f020
003d28   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003d2a   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
003d2c   f004
003d2e   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003d30   f003
003d32   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003d34   f002
003d36   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003d38   f001
003d3a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003d3c   f000
003d3e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003d40   ffd9
003d42   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_hwcalls__midi_send_cmd1	code
                                           _midi_send_cmd1:
                                           ;	.line	178; PIC/hwcalls.c	void midi_send_cmd1(u8 cmd, u8 channel, u8 data1) {
003f1e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003f20   ffe5
003f22   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003f24   ffd9
003f26   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003f28   ffe5
003f2a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003f2c   ffe5
003f2e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003f30   ffe5
003f32   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003f34   ffe5
003f36   0e02     movlw   0x02             	MOVLW	0x02
003f38   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003f3a   f000
003f3c   0e03     movlw   0x03             	MOVLW	0x03
003f3e   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003f40   f001
003f42   0e04     movlw   0x04             	MOVLW	0x04
003f44   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
003f46   f002
                                           ;	.line	179; PIC/hwcalls.c	midi_enq(((cmd & 0xF) << 4) | (channel & 0xF));
003f48   0e0f     movlw   0x0f             	MOVLW	0x0f
003f4a   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
003f4c   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
003f4e   0bf0     andlw   0xf0             	ANDLW	0xf0
003f50   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
003f52   0e0f     movlw   0x0f             	MOVLW	0x0f
003f54   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
003f56   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003f58   1203     iorwf   0x03, 0x1, 0x0   	IORWF	r0x03, F
003f5a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
003f5c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003f5e   ec74     call    0x0040e8, 0x0    	CALL	_midi_enq
003f60   f020
003f62   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	180; PIC/hwcalls.c	midi_enq(data1);
003f64   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003f66   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003f68   ec74     call    0x0040e8, 0x0    	CALL	_midi_enq
003f6a   f020
003f6c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003f6e   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003f70   f003
003f72   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003f74   f002
003f76   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003f78   f001
003f7a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003f7c   f000
003f7e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003f80   ffd9
003f82   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_hwcalls__lcd_updated_all	code
                                           _lcd_updated_all:
                                           ;	.line	167; PIC/hwcalls.c	LCDUpdateRequest = true;
00442a   875c     bsf     0x5c, 0x3, 0x1   	BSF	_ArbFlags2, 3, B
00442c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_hwcalls__lcd_row_get	code
                                           _lcd_row_get:
                                           ;	.line	160; PIC/hwcalls.c	char *lcd_row_get(u8 row) {
00409a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00409c   ffe5
00409e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0040a0   ffd9
0040a2   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0040a4   ffe5
0040a6   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0040a8   ffe5
0040aa   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0040ac   ffe5
0040ae   0e02     movlw   0x02             	MOVLW	0x02
0040b0   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0040b2   f000
                                           ; ;multiply lit val:0x14 by variable r0x00 and store in r0x00
                                           ;	.line	162; PIC/hwcalls.c	return LCDRamMap[row];
0040b4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0040b6   0d14     mullw   0x14             	MULLW	0x14
0040b8   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0040ba   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0040bc   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0040be   f000
0040c0   0e60     movlw   0x60             	MOVLW	LOW(_LCDRamMap)
0040c2   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0040c4   0e00     movlw   0x00             	MOVLW	HIGH(_LCDRamMap)
0040c6   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0040c8   0e80     movlw   0x80             	MOVLW	0x80
0040ca   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0040cc   c002     movff   0x002, 0xff4     	MOVFF	r0x02, PRODH
0040ce   fff4
0040d0   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0040d2   fff3
0040d4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0040d6   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0040d8   f002
0040da   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0040dc   f001
0040de   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0040e0   f000
0040e2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0040e4   ffd9
0040e6   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_hwcalls__led_set	code
                                           _led_set:
                                           ;	.line	155; PIC/hwcalls.c	void led_set(u16 leds){
004298   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00429a   ffe5
00429c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00429e   ffd9
0042a0   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0042a2   ffe5
0042a4   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0042a6   ffe5
0042a8   0e02     movlw   0x02             	MOVLW	0x02
0042aa   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0042ac   f000
0042ae   0e03     movlw   0x03             	MOVLW	0x03
0042b0   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0042b2   f001
                                           ;	.line	156; PIC/hwcalls.c	LedStatesTop = (leds >> 8) & 0xFF;
0042b4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0042b6   6f5e     movwf   0x5e, 0x1        	MOVWF	_LedStatesTop, B
                                           ;	.line	157; PIC/hwcalls.c	LedStatesBot = leds & 0xFF;
0042b8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0042ba   6f5f     movwf   0x5f, 0x1        	MOVWF	_LedStatesBot, B
0042bc   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0042be   f001
0042c0   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0042c2   f000
0042c4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0042c6   ffd9
0042c8   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_hwcalls__UpdateLeds	code
                                           _UpdateLeds:
                                           ;	.line	135; PIC/hwcalls.c	void UpdateLeds(void) {
003140   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003142   ffe5
003144   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003146   ffe5
003148   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00314a   ffe5
00314c   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00314e   ffe5
                                           ;	.line	140; PIC/hwcalls.c	top = LedStatesTop;
003150   c25e     movff   0x25e, 0x000     	MOVFF	_LedStatesTop, r0x00
003152   f000
                                           ;	.line	141; PIC/hwcalls.c	top = ((top & (u8)0xF0) >> (u8)4) | ((top & (u8)0x0F) << (u8)4);
003154   0ef0     movlw   0xf0             	MOVLW	0xf0
003156   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
003158   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00315a   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
00315c   0b0f     andlw   0x0f             	ANDLW	0x0f
00315e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
003160   0e0f     movlw   0x0f             	MOVLW	0x0f
003162   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
003164   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
003166   3802     swapf   0x02, 0x0, 0x0   	SWAPF	r0x02, W
003168   0bf0     andlw   0xf0             	ANDLW	0xf0
00316a   1001     iorwf   0x01, 0x0, 0x0   	IORWF	r0x01, W
00316c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           ;	.line	142; PIC/hwcalls.c	top = ((top & (u8)0xCC) >> (u8)2) | ((top & (u8)0x33) << (u8)2);
00316e   0ecc     movlw   0xcc             	MOVLW	0xcc
003170   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
003172   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
003174   4001     rrncf   0x01, 0x0, 0x0   	RRNCF	r0x01, W
003176   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
003178   0b3f     andlw   0x3f             	ANDLW	0x3f
00317a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00317c   0e33     movlw   0x33             	MOVLW	0x33
00317e   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
003180   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
003182   4402     rlncf   0x02, 0x0, 0x0   	RLNCF	r0x02, W
003184   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
003186   0bfc     andlw   0xfc             	ANDLW	0xfc
003188   1001     iorwf   0x01, 0x0, 0x0   	IORWF	r0x01, W
00318a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           ;	.line	143; PIC/hwcalls.c	top = ((top & (u8)0xAA) >> (u8)1) | ((top & (u8)0x55) << (u8)1);
00318c   0eaa     movlw   0xaa             	MOVLW	0xaa
00318e   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
003190   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
003192   4001     rrncf   0x01, 0x0, 0x0   	RRNCF	r0x01, W
003194   0b7f     andlw   0x7f             	ANDLW	0x7f
003196   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
003198   0e55     movlw   0x55             	MOVLW	0x55
00319a   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
00319c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00319e   4402     rlncf   0x02, 0x0, 0x0   	RLNCF	r0x02, W
0031a0   0bfe     andlw   0xfe             	ANDLW	0xfe
0031a2   1001     iorwf   0x01, 0x0, 0x0   	IORWF	r0x01, W
0031a4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           ;	.line	146; PIC/hwcalls.c	bot = LedStatesBot;
0031a6   c25f     movff   0x25f, 0x001     	MOVFF	_LedStatesBot, r0x01
0031a8   f001
                                           ;	.line	147; PIC/hwcalls.c	bot = ((bot & (u8)0xF0) >> (u8)4) | ((bot & (u8)0x0F) << (u8)4);
0031aa   0ef0     movlw   0xf0             	MOVLW	0xf0
0031ac   1401     andwf   0x01, 0x0, 0x0   	ANDWF	r0x01, W
0031ae   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0031b0   3802     swapf   0x02, 0x0, 0x0   	SWAPF	r0x02, W
0031b2   0b0f     andlw   0x0f             	ANDLW	0x0f
0031b4   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0031b6   0e0f     movlw   0x0f             	MOVLW	0x0f
0031b8   1401     andwf   0x01, 0x0, 0x0   	ANDWF	r0x01, W
0031ba   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0031bc   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
0031be   0bf0     andlw   0xf0             	ANDLW	0xf0
0031c0   1002     iorwf   0x02, 0x0, 0x0   	IORWF	r0x02, W
0031c2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           ;	.line	148; PIC/hwcalls.c	bot = ((bot & (u8)0xCC) >> (u8)2) | ((bot & (u8)0x33) << (u8)2);
0031c4   0ecc     movlw   0xcc             	MOVLW	0xcc
0031c6   1401     andwf   0x01, 0x0, 0x0   	ANDWF	r0x01, W
0031c8   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0031ca   4002     rrncf   0x02, 0x0, 0x0   	RRNCF	r0x02, W
0031cc   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
0031ce   0b3f     andlw   0x3f             	ANDLW	0x3f
0031d0   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0031d2   0e33     movlw   0x33             	MOVLW	0x33
0031d4   1401     andwf   0x01, 0x0, 0x0   	ANDWF	r0x01, W
0031d6   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0031d8   4403     rlncf   0x03, 0x0, 0x0   	RLNCF	r0x03, W
0031da   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
0031dc   0bfc     andlw   0xfc             	ANDLW	0xfc
0031de   1002     iorwf   0x02, 0x0, 0x0   	IORWF	r0x02, W
0031e0   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           ;	.line	149; PIC/hwcalls.c	bot = ((bot & (u8)0xAA) >> (u8)1) | ((bot & (u8)0x55) << (u8)1);
0031e2   0eaa     movlw   0xaa             	MOVLW	0xaa
0031e4   1401     andwf   0x01, 0x0, 0x0   	ANDWF	r0x01, W
0031e6   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0031e8   4002     rrncf   0x02, 0x0, 0x0   	RRNCF	r0x02, W
0031ea   0b7f     andlw   0x7f             	ANDLW	0x7f
0031ec   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0031ee   0e55     movlw   0x55             	MOVLW	0x55
0031f0   1401     andwf   0x01, 0x0, 0x0   	ANDWF	r0x01, W
0031f2   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0031f4   4403     rlncf   0x03, 0x0, 0x0   	RLNCF	r0x03, W
0031f6   0bfe     andlw   0xfe             	ANDLW	0xfe
0031f8   1002     iorwf   0x02, 0x0, 0x0   	IORWF	r0x02, W
0031fa   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           ;	.line	151; PIC/hwcalls.c	SendDataToShiftReg16(bot, top);
0031fc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0031fe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003200   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003202   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003204   ecc5     call    0x000f8a, 0x0    	CALL	_SendDataToShiftReg16
003206   f007
003208   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00320a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00320c   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00320e   f003
003210   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003212   f002
003214   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003216   f001
003218   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00321a   f000
00321c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_hwcalls__fsw_poll	code
                                           _fsw_poll:
                                           ;	.line	127; PIC/hwcalls.c	u16 fsw_poll() {
004178   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00417a   ffe5
00417c   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00417e   ffe5
004180   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
004182   ffe5
004184   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
004186   ffe5
                                           ;	.line	130; PIC/hwcalls.c	fsw = ButtonStateBot | ((u16)ButtonStateTop << 8);
004188   c260     movff   0x260, 0x000     	MOVFF	_ButtonStateTop, r0x00
00418a   f000
00418c   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00418e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004190   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
004192   6a02     clrf    0x02, 0x0        	CLRF	r0x02
004194   c261     movff   0x261, 0x000     	MOVFF	_ButtonStateBot, r0x00
004196   f000
004198   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00419a   1202     iorwf   0x02, 0x1, 0x0   	IORWF	r0x02, F
00419c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00419e   1203     iorwf   0x03, 0x1, 0x0   	IORWF	r0x03, F
                                           ;	.line	132; PIC/hwcalls.c	return fsw;
0041a0   c003     movff   0x003, 0xff3     	MOVFF	r0x03, PRODL
0041a2   fff3
0041a4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0041a6   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0041a8   f003
0041aa   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0041ac   f002
0041ae   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0041b0   f001
0041b2   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0041b4   f000
0041b6   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_hwcalls__SetDipAddress	code
                                           _SetDipAddress:
                                           ;	.line	115; PIC/hwcalls.c	void SetDipAddress(unsigned char Address) {
0041f6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0041f8   ffe5
0041fa   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0041fc   ffd9
0041fe   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004200   ffe5
004202   0e02     movlw   0x02             	MOVLW	0x02
004204   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004206   f000
                                           ;	.line	116; PIC/hwcalls.c	BTN_S0_LAT_BIT = false;
004208   9889     bcf     0x89, 0x4, 0x0   	BCF	_LATAbits, 4
                                           ;	.line	117; PIC/hwcalls.c	BTN_S1_LAT_BIT = false;
00420a   9a89     bcf     0x89, 0x5, 0x0   	BCF	_LATAbits, 5
                                           ;	.line	118; PIC/hwcalls.c	BTN_S2_LAT_BIT = false;
00420c   908d     bcf     0x8d, 0x0, 0x0   	BCF	_LATEbits, 0
                                           ;	.line	119; PIC/hwcalls.c	BTN_S3_LAT_BIT = false;
00420e   9089     bcf     0x89, 0x0, 0x0   	BCF	_LATAbits, 0
                                           ;	.line	120; PIC/hwcalls.c	if (chkbit(Address,0)) BTN_S0_LAT_BIT = true;
004210   a000     btfss   0x00, 0x0, 0x0   	BTFSS	r0x00, 0
004212   d001     bra     0x004216         	BRA	_00222_DS_
004214   8889     bsf     0x89, 0x4, 0x0   	BSF	_LATAbits, 4
                                           _00222_DS_:
                                           ;	.line	121; PIC/hwcalls.c	if (chkbit(Address,1)) BTN_S1_LAT_BIT = true;
004216   a200     btfss   0x00, 0x1, 0x0   	BTFSS	r0x00, 1
004218   d001     bra     0x00421c         	BRA	_00224_DS_
00421a   8a89     bsf     0x89, 0x5, 0x0   	BSF	_LATAbits, 5
                                           _00224_DS_:
                                           ;	.line	122; PIC/hwcalls.c	if (chkbit(Address,2)) BTN_S2_LAT_BIT = true;
00421c   a400     btfss   0x00, 0x2, 0x0   	BTFSS	r0x00, 2
00421e   d001     bra     0x004222         	BRA	_00226_DS_
004220   808d     bsf     0x8d, 0x0, 0x0   	BSF	_LATEbits, 0
                                           _00226_DS_:
                                           ;	.line	123; PIC/hwcalls.c	if (chkbit(Address,3)) BTN_S3_LAT_BIT = true;
004222   a600     btfss   0x00, 0x3, 0x0   	BTFSS	r0x00, 3
004224   d001     bra     0x004228         	BRA	_00229_DS_
004226   8089     bsf     0x89, 0x0, 0x0   	BSF	_LATAbits, 0
                                           _00229_DS_:
004228   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00422a   f000
00422c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00422e   ffd9
004230   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_hwcalls__ReadButtons	code
                                           _ReadButtons:
                                           ;	.line	60; PIC/hwcalls.c	void ReadButtons(void) {
002c36   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002c38   ffe5
002c3a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002c3c   ffe5
002c3e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002c40   ffe5
                                           ;	.line	66; PIC/hwcalls.c	TempButtons0.byte = 0;
002c42   6b70     clrf    0x70, 0x1        	CLRF	_ReadButtons_TempButtons0_1_41, B
                                           ;	.line	67; PIC/hwcalls.c	bitloc = 1;
002c44   0e01     movlw   0x01             	MOVLW	0x01
002c46   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           ;	.line	68; PIC/hwcalls.c	for (BtnAddress = 0; BtnAddress < 8; BtnAddress++) {
002c48   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00167_DS_:
                                           ;	.line	69; PIC/hwcalls.c	SetDipAddress(BtnAddress);
002c4a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002c4c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c4e   ecfb     call    0x0041f6, 0x0    	CALL	_SetDipAddress
002c50   f020
002c52   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	71; PIC/hwcalls.c	for (i = BTN_SAMPLE_DELAY;i!=0;i--);        //delay for a sampling delay
002c54   0e05     movlw   0x05             	MOVLW	0x05
002c56   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
                                           _00166_DS_:
002c58   2e02     decfsz  0x02, 0x1, 0x0   	DECFSZ	r0x02, F
002c5a   d7fe     bra     0x002c58         	BRA	_00166_DS_
                                           ;	.line	73; PIC/hwcalls.c	if (BTN_IN_PIN) TempButtons0.byte |= bitloc;     //Or in the current bit if it is set.
002c5c   a284     btfss   0x84, 0x1, 0x0   	BTFSS	_PORTEbits, 1
002c5e   d005     bra     0x002c6a         	BRA	_00159_DS_
002c60   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002c62   1170     iorwf   0x70, 0x0, 0x1   	IORWF	_ReadButtons_TempButtons0_1_41, W, B
002c64   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002c66   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002c68   6f70     movwf   0x70, 0x1        	MOVWF	_ReadButtons_TempButtons0_1_41, B
                                           _00159_DS_:
                                           ;	.line	74; PIC/hwcalls.c	bitloc <<= 1;                                       //shift the bit over to the next
002c6a   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
002c6c   3600     rlcf    0x00, 0x1, 0x0   	RLCF	r0x00, F
                                           ;	.line	68; PIC/hwcalls.c	for (BtnAddress = 0; BtnAddress < 8; BtnAddress++) {
002c6e   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
002c70   0e08     movlw   0x08             	MOVLW	0x08
002c72   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
002c74   e3ea     bnc     0x002c4a         	BNC	_00167_DS_
                                           ;	.line	79; PIC/hwcalls.c	TempButtons1.byte = 0;
002c76   6b71     clrf    0x71, 0x1        	CLRF	_ReadButtons_TempButtons1_1_41, B
                                           ;	.line	80; PIC/hwcalls.c	bitloc = 1;
002c78   0e01     movlw   0x01             	MOVLW	0x01
002c7a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           ;	.line	81; PIC/hwcalls.c	for (BtnAddress = 8; BtnAddress < 16; BtnAddress++) {
002c7c   0e08     movlw   0x08             	MOVLW	0x08
002c7e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           _00171_DS_:
                                           ;	.line	82; PIC/hwcalls.c	SetDipAddress(BtnAddress);
002c80   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002c82   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c84   ecfb     call    0x0041f6, 0x0    	CALL	_SetDipAddress
002c86   f020
002c88   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	84; PIC/hwcalls.c	for (i = BTN_SAMPLE_DELAY;i!=0;i--);        //delay for a sampling delay
002c8a   0e05     movlw   0x05             	MOVLW	0x05
002c8c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
                                           _00170_DS_:
002c8e   2e02     decfsz  0x02, 0x1, 0x0   	DECFSZ	r0x02, F
002c90   d7fe     bra     0x002c8e         	BRA	_00170_DS_
                                           ;	.line	86; PIC/hwcalls.c	if (BTN_IN_PIN) TempButtons1.byte |= bitloc;     //Or in the current bit if it is set.
002c92   a284     btfss   0x84, 0x1, 0x0   	BTFSS	_PORTEbits, 1
002c94   d005     bra     0x002ca0         	BRA	_00163_DS_
002c96   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002c98   1171     iorwf   0x71, 0x0, 0x1   	IORWF	_ReadButtons_TempButtons1_1_41, W, B
002c9a   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002c9c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002c9e   6f71     movwf   0x71, 0x1        	MOVWF	_ReadButtons_TempButtons1_1_41, B
                                           _00163_DS_:
                                           ;	.line	87; PIC/hwcalls.c	bitloc <<= 1;                                       //shift the bit over to the next
002ca0   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
002ca2   3600     rlcf    0x00, 0x1, 0x0   	RLCF	r0x00, F
                                           ;	.line	81; PIC/hwcalls.c	for (BtnAddress = 8; BtnAddress < 16; BtnAddress++) {
002ca4   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
002ca6   0e10     movlw   0x10             	MOVLW	0x10
002ca8   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
002caa   e3ea     bnc     0x002c80         	BNC	_00171_DS_
                                           ;	.line	92; PIC/hwcalls.c	TempButtons0.byte = ~TempButtons0.byte;
002cac   1d70     comf    0x70, 0x0, 0x1   	COMF	_ReadButtons_TempButtons0_1_41, W, B
002cae   6f70     movwf   0x70, 0x1        	MOVWF	_ReadButtons_TempButtons0_1_41, B
                                           ;	.line	94; PIC/hwcalls.c	((TempButtons0.byte & (u8)(1 << 0)) << 2)
002cb0   0e01     movlw   0x01             	MOVLW	0x01
002cb2   1570     andwf   0x70, 0x0, 0x1   	ANDWF	_ReadButtons_TempButtons0_1_41, W, B
002cb4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002cb6   4400     rlncf   0x00, 0x0, 0x0   	RLNCF	r0x00, W
002cb8   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
002cba   0bfc     andlw   0xfc             	ANDLW	0xfc
002cbc   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           ;	.line	95; PIC/hwcalls.c	| ((TempButtons0.byte & (u8)(1 << 1)))
002cbe   0e02     movlw   0x02             	MOVLW	0x02
002cc0   1570     andwf   0x70, 0x0, 0x1   	ANDWF	_ReadButtons_TempButtons0_1_41, W, B
002cc2   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
                                           ;	.line	96; PIC/hwcalls.c	| ((TempButtons0.byte & (u8)(1 << 2)) >> 2)
002cc4   0e04     movlw   0x04             	MOVLW	0x04
002cc6   1570     andwf   0x70, 0x0, 0x1   	ANDWF	_ReadButtons_TempButtons0_1_41, W, B
002cc8   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002cca   4000     rrncf   0x00, 0x0, 0x0   	RRNCF	r0x00, W
002ccc   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
002cce   0b3f     andlw   0x3f             	ANDLW	0x3f
002cd0   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
                                           ;	.line	97; PIC/hwcalls.c	| ((TempButtons0.byte & (u8)(1 << 3)))
002cd2   0e08     movlw   0x08             	MOVLW	0x08
002cd4   1570     andwf   0x70, 0x0, 0x1   	ANDWF	_ReadButtons_TempButtons0_1_41, W, B
002cd6   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
                                           ;	.line	98; PIC/hwcalls.c	| ((TempButtons0.byte & (u8)(1 << 4)) << 3)
002cd8   0e10     movlw   0x10             	MOVLW	0x10
002cda   1570     andwf   0x70, 0x0, 0x1   	ANDWF	_ReadButtons_TempButtons0_1_41, W, B
002cdc   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002cde   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
002ce0   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
002ce2   0bf8     andlw   0xf8             	ANDLW	0xf8
002ce4   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
                                           ;	.line	99; PIC/hwcalls.c	| ((TempButtons0.byte & (u8)(1 << 5)) >> 1)
002ce6   0e20     movlw   0x20             	MOVLW	0x20
002ce8   1570     andwf   0x70, 0x0, 0x1   	ANDWF	_ReadButtons_TempButtons0_1_41, W, B
002cea   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002cec   4000     rrncf   0x00, 0x0, 0x0   	RRNCF	r0x00, W
002cee   0b7f     andlw   0x7f             	ANDLW	0x7f
002cf0   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
                                           ;	.line	100; PIC/hwcalls.c	| ((TempButtons0.byte & (u8)(1 << 6)))
002cf2   0e40     movlw   0x40             	MOVLW	0x40
002cf4   1570     andwf   0x70, 0x0, 0x1   	ANDWF	_ReadButtons_TempButtons0_1_41, W, B
002cf6   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
                                           ;	.line	101; PIC/hwcalls.c	| ((TempButtons0.byte & (u8)(1 << 7)) >> 2);
002cf8   0e80     movlw   0x80             	MOVLW	0x80
002cfa   1570     andwf   0x70, 0x0, 0x1   	ANDWF	_ReadButtons_TempButtons0_1_41, W, B
002cfc   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002cfe   4000     rrncf   0x00, 0x0, 0x0   	RRNCF	r0x00, W
002d00   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
002d02   0b3f     andlw   0x3f             	ANDLW	0x3f
002d04   1001     iorwf   0x01, 0x0, 0x0   	IORWF	r0x01, W
002d06   6f61     movwf   0x61, 0x1        	MOVWF	_ButtonStateBot, B
                                           ;	.line	103; PIC/hwcalls.c	TempButtons1.byte = ~TempButtons1.byte;
002d08   1d71     comf    0x71, 0x0, 0x1   	COMF	_ReadButtons_TempButtons1_1_41, W, B
002d0a   6f71     movwf   0x71, 0x1        	MOVWF	_ReadButtons_TempButtons1_1_41, B
                                           ;	.line	105; PIC/hwcalls.c	((TempButtons1.byte & (u8)(1 << 0)) << 2)
002d0c   0e01     movlw   0x01             	MOVLW	0x01
002d0e   1571     andwf   0x71, 0x0, 0x1   	ANDWF	_ReadButtons_TempButtons1_1_41, W, B
002d10   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002d12   4400     rlncf   0x00, 0x0, 0x0   	RLNCF	r0x00, W
002d14   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
002d16   0bfc     andlw   0xfc             	ANDLW	0xfc
002d18   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           ;	.line	106; PIC/hwcalls.c	| ((TempButtons1.byte & (u8)(1 << 1)))
002d1a   0e02     movlw   0x02             	MOVLW	0x02
002d1c   1571     andwf   0x71, 0x0, 0x1   	ANDWF	_ReadButtons_TempButtons1_1_41, W, B
002d1e   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
                                           ;	.line	107; PIC/hwcalls.c	| ((TempButtons1.byte & (u8)(1 << 2)) >> 2)
002d20   0e04     movlw   0x04             	MOVLW	0x04
002d22   1571     andwf   0x71, 0x0, 0x1   	ANDWF	_ReadButtons_TempButtons1_1_41, W, B
002d24   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002d26   4000     rrncf   0x00, 0x0, 0x0   	RRNCF	r0x00, W
002d28   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
002d2a   0b3f     andlw   0x3f             	ANDLW	0x3f
002d2c   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
                                           ;	.line	108; PIC/hwcalls.c	| ((TempButtons1.byte & (u8)(1 << 3)))
002d2e   0e08     movlw   0x08             	MOVLW	0x08
002d30   1571     andwf   0x71, 0x0, 0x1   	ANDWF	_ReadButtons_TempButtons1_1_41, W, B
002d32   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
                                           ;	.line	109; PIC/hwcalls.c	| ((TempButtons1.byte & (u8)(1 << 4)) << 3)
002d34   0e10     movlw   0x10             	MOVLW	0x10
002d36   1571     andwf   0x71, 0x0, 0x1   	ANDWF	_ReadButtons_TempButtons1_1_41, W, B
002d38   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002d3a   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
002d3c   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
002d3e   0bf8     andlw   0xf8             	ANDLW	0xf8
002d40   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
                                           ;	.line	110; PIC/hwcalls.c	| ((TempButtons1.byte & (u8)(1 << 5)) >> 1)
002d42   0e20     movlw   0x20             	MOVLW	0x20
002d44   1571     andwf   0x71, 0x0, 0x1   	ANDWF	_ReadButtons_TempButtons1_1_41, W, B
002d46   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002d48   4000     rrncf   0x00, 0x0, 0x0   	RRNCF	r0x00, W
002d4a   0b7f     andlw   0x7f             	ANDLW	0x7f
002d4c   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
                                           ;	.line	111; PIC/hwcalls.c	| ((TempButtons1.byte & (u8)(1 << 6)))
002d4e   0e40     movlw   0x40             	MOVLW	0x40
002d50   1571     andwf   0x71, 0x0, 0x1   	ANDWF	_ReadButtons_TempButtons1_1_41, W, B
002d52   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
                                           ;	.line	112; PIC/hwcalls.c	| ((TempButtons1.byte & (u8)(1 << 7)) >> 2);
002d54   0e80     movlw   0x80             	MOVLW	0x80
002d56   1571     andwf   0x71, 0x0, 0x1   	ANDWF	_ReadButtons_TempButtons1_1_41, W, B
002d58   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002d5a   4000     rrncf   0x00, 0x0, 0x0   	RRNCF	r0x00, W
002d5c   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
002d5e   0b3f     andlw   0x3f             	ANDLW	0x3f
002d60   1001     iorwf   0x01, 0x0, 0x0   	IORWF	r0x01, W
002d62   6f60     movwf   0x60, 0x1        	MOVWF	_ButtonStateTop, B
002d64   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002d66   f002
002d68   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002d6a   f001
002d6c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002d6e   f000
002d70   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_hwcalls__SendDataToShiftReg16	code
                                           _SendDataToShiftReg16:
                                           ;	.line	17; PIC/hwcalls.c	void SendDataToShiftReg16(unsigned char lo, unsigned char hi) {
000f8a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000f8c   ffe5
000f8e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000f90   ffd9
000f92   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000f94   ffe5
000f96   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000f98   ffe5
000f9a   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
000f9c   ffe5
000f9e   0e02     movlw   0x02             	MOVLW	0x02
000fa0   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000fa2   f000
000fa4   0e03     movlw   0x03             	MOVLW	0x03
000fa6   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
000fa8   f001
                                           ;	.line	23; PIC/hwcalls.c	SHIFTREG_RCK_LAT_BIT = true;            //Flush out garbage
000faa   8489     bsf     0x89, 0x2, 0x0   	BSF	_LATAbits, 2
                                           ;	.line	24; PIC/hwcalls.c	SHIFTREG_RCK_LAT_BIT = false;
000fac   9489     bcf     0x89, 0x2, 0x0   	BCF	_LATAbits, 2
                                           ;	.line	26; PIC/hwcalls.c	do {
000fae   0e08     movlw   0x08             	MOVLW	0x08
000fb0   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
                                           _00108_DS_:
                                           ;	.line	27; PIC/hwcalls.c	SHIFTREG_SRCK_LAT_BIT = false;              //Clear strobe pin
000fb2   9289     bcf     0x89, 0x1, 0x0   	BCF	_LATAbits, 1
                                           ;	.line	28; PIC/hwcalls.c	if (!chkbit(hi, 7)) {       //MSB high?
000fb4   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
000fb6   d002     bra     0x000fbc         	BRA	_00106_DS_
                                           ;	.line	29; PIC/hwcalls.c	SHIFTREG_SER_IN_LAT_BIT = false;        //No, set data signal low
000fb8   9689     bcf     0x89, 0x3, 0x0   	BCF	_LATAbits, 3
000fba   d001     bra     0x000fbe         	BRA	_00107_DS_
                                           _00106_DS_:
                                           ;	.line	31; PIC/hwcalls.c	SHIFTREG_SER_IN_LAT_BIT = true;     //No, release data signal
000fbc   8689     bsf     0x89, 0x3, 0x0   	BSF	_LATAbits, 3
                                           _00107_DS_:
                                           ;	.line	33; PIC/hwcalls.c	hi <<= 1;                   //Shift next bit to MSB position
000fbe   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
000fc0   3601     rlcf    0x01, 0x1, 0x0   	RLCF	r0x01, F
                                           ;	.line	34; PIC/hwcalls.c	SHIFTREG_SRCK_LAT_BIT = true;
000fc2   8289     bsf     0x89, 0x1, 0x0   	BSF	_LATAbits, 1
                                           ;	.line	35; PIC/hwcalls.c	} while (--DataCounter!=0);             //All 8 bits transfered? No, go transfer next bit
000fc4   2e02     decfsz  0x02, 0x1, 0x0   	DECFSZ	r0x02, F
000fc6   d7f5     bra     0x000fb2         	BRA	_00108_DS_
                                           ;	.line	38; PIC/hwcalls.c	do {
000fc8   0e08     movlw   0x08             	MOVLW	0x08
000fca   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           _00114_DS_:
                                           ;	.line	39; PIC/hwcalls.c	SHIFTREG_SRCK_LAT_BIT = false;              //Clear strobe pin
000fcc   9289     bcf     0x89, 0x1, 0x0   	BCF	_LATAbits, 1
                                           ;	.line	40; PIC/hwcalls.c	if (!chkbit(lo, 7)) {       //MSB high?
000fce   be00     btfsc   0x00, 0x7, 0x0   	BTFSC	r0x00, 7
000fd0   d002     bra     0x000fd6         	BRA	_00112_DS_
                                           ;	.line	41; PIC/hwcalls.c	SHIFTREG_SER_IN_LAT_BIT = false;        //No, set data signal low
000fd2   9689     bcf     0x89, 0x3, 0x0   	BCF	_LATAbits, 3
000fd4   d001     bra     0x000fd8         	BRA	_00113_DS_
                                           _00112_DS_:
                                           ;	.line	43; PIC/hwcalls.c	SHIFTREG_SER_IN_LAT_BIT = true;     //No, release data signal
000fd6   8689     bsf     0x89, 0x3, 0x0   	BSF	_LATAbits, 3
                                           _00113_DS_:
                                           ;	.line	45; PIC/hwcalls.c	lo <<= 1;                   //Shift next bit to MSB position
000fd8   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
000fda   3600     rlcf    0x00, 0x1, 0x0   	RLCF	r0x00, F
                                           ;	.line	46; PIC/hwcalls.c	SHIFTREG_SRCK_LAT_BIT = true;
000fdc   8289     bsf     0x89, 0x1, 0x0   	BSF	_LATAbits, 1
                                           ;	.line	47; PIC/hwcalls.c	} while (--DataCounter!=0);             //All 8 bits transfered? No, go transfer next bit
000fde   2e01     decfsz  0x01, 0x1, 0x0   	DECFSZ	r0x01, F
000fe0   d7f5     bra     0x000fcc         	BRA	_00114_DS_
                                           ;	.line	49; PIC/hwcalls.c	SHIFTREG_RCK_LAT_BIT = true;            //Strobe the data
000fe2   8489     bsf     0x89, 0x2, 0x0   	BSF	_LATAbits, 2
                                           ;	.line	51; PIC/hwcalls.c	for (DataCounter = LATCH_STROBE_DELAY; DataCounter !=0;DataCounter--);      //Pause for data transfer from external latch_1's input to its output
000fe4   0e10     movlw   0x10             	MOVLW	0x10
000fe6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           _00119_DS_:
000fe8   2e00     decfsz  0x00, 0x1, 0x0   	DECFSZ	r0x00, F
000fea   d7fe     bra     0x000fe8         	BRA	_00119_DS_
                                           ;	.line	53; PIC/hwcalls.c	SHIFTREG_RCK_LAT_BIT = false;
000fec   9489     bcf     0x89, 0x2, 0x0   	BCF	_LATAbits, 2
                                           ;	.line	54; PIC/hwcalls.c	SHIFTREG_SER_IN_LAT_BIT = true;             //Release data signal
000fee   8689     bsf     0x89, 0x3, 0x0   	BSF	_LATAbits, 3
                                           ;	.line	55; PIC/hwcalls.c	SHIFTREG_SRCK_LAT_BIT = true;           //Release serial clk
000ff0   8289     bsf     0x89, 0x1, 0x0   	BSF	_LATAbits, 1
000ff2   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
000ff4   f002
000ff6   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
000ff8   f001
000ffa   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000ffc   f000
000ffe   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001000   ffd9
001002   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	 2092 (0x082c) bytes ( 1.60%)
                                           ;           	 1046 (0x0416) words
                                           ; udata size:	    2 (0x0002) bytes ( 0.11%)
                                           ; access size:	   18 (0x0012) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_controller_init
                                           	global	_controller_10msec_timer
                                           	global	_controller_handle
                                           	global	_lcd_rows
                                           	global	_curr
                                           	global	_last
                                           	global	_sl_max
                                           	global	_sl
                                           	global	_pr
                                           	global	_origpr
                                           	global	_bcd_tmp
                                           	global	_timers
                                           	global	_dB_bcd_lookup
                                           	global	_hex

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrput1
                                           	extern	__moduchar
                                           	extern	__divuchar
                                           	extern	_fsw_poll
                                           	extern	_led_set
                                           	extern	_lcd_row_get
                                           	extern	_lcd_updated_all
                                           	extern	_midi_send_cmd2
                                           	extern	_flash_load
                                           	extern	_flash_store
                                           	extern	_flash_addr
                                           	extern	__mulint

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1

                                           udata_controller_axe_0	udata
                                           _bcd_tmp	res	6

                                           udata_controller_axe_1	udata
                                           _curr	res	22

                                           udata_controller_axe_2	udata
                                           _last	res	22

                                           udata_controller_axe_3	udata
                                           _lcd_rows	res	12

                                           udata_controller_axe_4	udata
                                           _sl	res	64

                                           udata_controller_axe_5	udata
                                           _pr	res	64

                                           udata_controller_axe_6	udata
                                           _sl_max	res	1

                                           udata_controller_axe_7	udata
                                           _origpr	res	64

                                           udata_controller_axe_8	udata
                                           _timers	res	8

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_controller_axe__program_save	code
                                           _program_save:
                                           ;	.line	1332; common/controller-axe.c	static void program_save() {
00298c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00298e   ffe5
002990   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002992   ffe5
002994   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002996   ffe5
002998   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00299a   ffe5
00299c   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
00299e   ffe5
                                           ;	.line	1333; common/controller-axe.c	u8 program = sl.entries[curr.sl_idx].program;
0029a0   0e03     movlw   0x03             	MOVLW	LOW(_sl + 3)
0029a2   25f3     addwf   0xf3, 0x0, 0x1   	ADDWF	(_curr + 9), W, B
0029a4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0029a6   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0029a8   0e01     movlw   0x01             	MOVLW	HIGH(_sl + 3)
0029aa   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0029ac   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0029ae   ffe9
0029b0   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0029b2   ffea
0029b4   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0029b6   f000
                                           ; ;multiply lit val:0x40 by variable r0x00 and store in r0x00
                                           ;	.line	1334; common/controller-axe.c	u16 addr = (u16)(program * sizeof(struct program));
0029b8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0029ba   0d40     mullw   0x40             	MULLW	0x40
0029bc   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0029be   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0029c0   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0029c2   f000
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x02
                                           ;	.line	1337; common/controller-axe.c	struct_copy_amp(pr.scene[curr.sc_idx].amp[0], curr.amp[0]);
0029c4   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
0029c6   0d06     mullw   0x06             	MULLW	0x06
0029c8   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
0029ca   f002
0029cc   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0029ce   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
0029d0   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
0029d2   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
0029d4   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
0029d6   c1f8     movff   0x1f8, 0x004     	MOVFF	(_curr + 14), r0x04
0029d8   f004
0029da   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
0029dc   ffe9
0029de   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
0029e0   ffea
0029e2   c004     movff   0x004, 0xfef     	MOVFF	r0x04, INDF0
0029e4   ffef
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x02
0029e6   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
0029e8   0d06     mullw   0x06             	MULLW	0x06
0029ea   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
0029ec   f002
0029ee   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0029f0   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
0029f2   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
0029f4   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
0029f6   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
0029f8   4a02     infsnz  0x02, 0x1, 0x0   	INFSNZ	r0x02, F
0029fa   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
0029fc   c1f9     movff   0x1f9, 0x004     	MOVFF	(_curr + 15), r0x04
0029fe   f004
002a00   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
002a02   ffe9
002a04   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
002a06   ffea
002a08   c004     movff   0x004, 0xfef     	MOVFF	r0x04, INDF0
002a0a   ffef
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x02
002a0c   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
002a0e   0d06     mullw   0x06             	MULLW	0x06
002a10   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002a12   f002
002a14   6a03     clrf    0x03, 0x0        	CLRF	r0x03
002a16   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
002a18   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
002a1a   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
002a1c   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
002a1e   0e02     movlw   0x02             	MOVLW	0x02
002a20   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
002a22   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
002a24   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
002a26   c1fa     movff   0x1fa, 0x004     	MOVFF	(_curr + 16), r0x04
002a28   f004
002a2a   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
002a2c   ffe9
002a2e   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
002a30   ffea
002a32   c004     movff   0x004, 0xfef     	MOVFF	r0x04, INDF0
002a34   ffef
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x02
                                           ;	.line	1338; common/controller-axe.c	struct_copy_amp(pr.scene[curr.sc_idx].amp[1], curr.amp[1]);
002a36   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
002a38   0d06     mullw   0x06             	MULLW	0x06
002a3a   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002a3c   f002
002a3e   6a03     clrf    0x03, 0x0        	CLRF	r0x03
002a40   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
002a42   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
002a44   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
002a46   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
002a48   0e03     movlw   0x03             	MOVLW	0x03
002a4a   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
002a4c   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
002a4e   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
002a50   c1fb     movff   0x1fb, 0x004     	MOVFF	(_curr + 17), r0x04
002a52   f004
002a54   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
002a56   ffe9
002a58   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
002a5a   ffea
002a5c   c004     movff   0x004, 0xfef     	MOVFF	r0x04, INDF0
002a5e   ffef
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x02
002a60   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
002a62   0d06     mullw   0x06             	MULLW	0x06
002a64   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002a66   f002
002a68   6a03     clrf    0x03, 0x0        	CLRF	r0x03
002a6a   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
002a6c   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
002a6e   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
002a70   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
002a72   0e04     movlw   0x04             	MOVLW	0x04
002a74   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
002a76   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
002a78   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
002a7a   c1fc     movff   0x1fc, 0x004     	MOVFF	(_curr + 18), r0x04
002a7c   f004
002a7e   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
002a80   ffe9
002a82   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
002a84   ffea
002a86   c004     movff   0x004, 0xfef     	MOVFF	r0x04, INDF0
002a88   ffef
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x02
002a8a   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
002a8c   0d06     mullw   0x06             	MULLW	0x06
002a8e   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002a90   f002
002a92   6a03     clrf    0x03, 0x0        	CLRF	r0x03
002a94   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
002a96   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
002a98   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
002a9a   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
002a9c   0e05     movlw   0x05             	MOVLW	0x05
002a9e   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
002aa0   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
002aa2   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
002aa4   c1fd     movff   0x1fd, 0x004     	MOVFF	(_curr + 19), r0x04
002aa6   f004
002aa8   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
002aaa   ffe9
002aac   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
002aae   ffea
002ab0   c004     movff   0x004, 0xfef     	MOVFF	r0x04, INDF0
002ab2   ffef
                                           ;	.line	1342; common/controller-axe.c	flash_store(addr, sizeof(struct program), (u8 *)&pr);
002ab4   0e80     movlw   0x80             	MOVLW	0x80
002ab6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ab8   0e01     movlw   0x01             	MOVLW	HIGH(_pr)
002aba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002abc   0e40     movlw   0x40             	MOVLW	LOW(_pr)
002abe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ac0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002ac2   0e40     movlw   0x40             	MOVLW	0x40
002ac4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ac6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002ac8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002aca   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002acc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ace   ec44     call    0x002488, 0x0    	CALL	_flash_store
002ad0   f012
002ad2   0e07     movlw   0x07             	MOVLW	0x07
002ad4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	1344; common/controller-axe.c	curr.modified = 0;
002ad6   6bff     clrf    0xff, 0x1        	CLRF	(_curr + 21), B
002ad8   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
002ada   f004
002adc   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002ade   f003
002ae0   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002ae2   f002
002ae4   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002ae6   f001
002ae8   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002aea   f000
002aec   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__curr_amp_toggle	code
                                           _curr_amp_toggle:
                                           ;	.line	1325; common/controller-axe.c	if (curr.gain_mode == (u8)0) {
0043de   51fe     movf    0xfe, 0x0, 0x1   	MOVF	(_curr + 20), W, B
0043e0   e103     bnz     0x0043e8         	BNZ	_01720_DS_
                                           ;	.line	1326; common/controller-axe.c	curr_amp_gain_toggle();
0043e2   ecdc     call    0x0041b8, 0x0    	CALL	_curr_amp_gain_toggle
0043e4   f020
0043e6   d002     bra     0x0043ec         	BRA	_01722_DS_
                                           _01720_DS_:
                                           ;	.line	1328; common/controller-axe.c	curr_amp_vol_toggle();
0043e8   ec4f     call    0x003a9e, 0x0    	CALL	_curr_amp_vol_toggle
0043ea   f01d
                                           _01722_DS_:
0043ec   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__curr_amp_dec	code
                                           _curr_amp_dec:
                                           ;	.line	1317; common/controller-axe.c	if (curr.gain_mode == (u8)0) {
0043ee   51fe     movf    0xfe, 0x0, 0x1   	MOVF	(_curr + 20), W, B
0043f0   e103     bnz     0x0043f8         	BNZ	_01712_DS_
                                           ;	.line	1318; common/controller-axe.c	curr_amp_gain_decrease();
0043f2   ec79     call    0x0032f2, 0x0    	CALL	_curr_amp_gain_decrease
0043f4   f019
0043f6   d002     bra     0x0043fc         	BRA	_01714_DS_
                                           _01712_DS_:
                                           ;	.line	1320; common/controller-axe.c	curr_amp_vol_decrease();
0043f8   eca2     call    0x003d44, 0x0    	CALL	_curr_amp_vol_decrease
0043fa   f01e
                                           _01714_DS_:
0043fc   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__curr_amp_inc	code
                                           _curr_amp_inc:
                                           ;	.line	1309; common/controller-axe.c	if (curr.gain_mode == (u8)0) {
0043fe   51fe     movf    0xfe, 0x0, 0x1   	MOVF	(_curr + 20), W, B
004400   e103     bnz     0x004408         	BNZ	_01704_DS_
                                           ;	.line	1310; common/controller-axe.c	curr_amp_gain_increase();
004402   ece2     call    0x0033c4, 0x0    	CALL	_curr_amp_gain_increase
004404   f019
004406   d002     bra     0x00440c         	BRA	_01706_DS_
                                           _01704_DS_:
                                           ;	.line	1312; common/controller-axe.c	curr_amp_vol_increase();
004408   ec22     call    0x003c44, 0x0    	CALL	_curr_amp_vol_increase
00440a   f01e
                                           _01706_DS_:
00440c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__curr_amp_gain_decrease	code
                                           _curr_amp_gain_decrease:
                                           ;	.line	1289; common/controller-axe.c	static void curr_amp_gain_decrease() {
0032f2   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0032f4   ffe5
0032f6   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0032f8   ffe5
0032fa   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0032fc   ffe5
0032fe   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003300   ffe5
                                           ;	.line	1290; common/controller-axe.c	if (curr.selected_both) {
003302   51f7     movf    0xf7, 0x0, 0x1   	MOVF	(_curr + 13), W, B
003304   e032     bz      0x00336a         	BZ	_01653_DS_
                                           ;	.line	1291; common/controller-axe.c	u8 gain = min(or_default(curr.amp[0].gain), or_default(curr.amp[1].gain));
003306   c1f8     movff   0x1f8, 0x000     	MOVFF	(_curr + 14), r0x00
003308   f000
00330a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00330c   e103     bnz     0x003314         	BNZ	_01659_DS_
00330e   0e40     movlw   0x40             	MOVLW	0x40
003310   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
003312   d002     bra     0x003318         	BRA	_01660_DS_
                                           _01659_DS_:
003314   c000     movff   0x000, 0x001     	MOVFF	r0x00, r0x01
003316   f001
                                           _01660_DS_:
003318   c1fb     movff   0x1fb, 0x002     	MOVFF	(_curr + 17), r0x02
00331a   f002
00331c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00331e   e103     bnz     0x003326         	BNZ	_01661_DS_
003320   0e40     movlw   0x40             	MOVLW	0x40
003322   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
003324   d002     bra     0x00332a         	BRA	_01662_DS_
                                           _01661_DS_:
003326   c002     movff   0x002, 0x003     	MOVFF	r0x02, r0x03
003328   f003
                                           _01662_DS_:
00332a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00332c   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
00332e   e20a     bc      0x003344         	BC	_01657_DS_
003330   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003332   e103     bnz     0x00333a         	BNZ	_01663_DS_
003334   0e40     movlw   0x40             	MOVLW	0x40
003336   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
003338   d002     bra     0x00333e         	BRA	_01664_DS_
                                           _01663_DS_:
00333a   c000     movff   0x000, 0x001     	MOVFF	r0x00, r0x01
00333c   f001
                                           _01664_DS_:
00333e   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
003340   f000
003342   d009     bra     0x003356         	BRA	_01658_DS_
                                           _01657_DS_:
003344   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003346   e103     bnz     0x00334e         	BNZ	_01665_DS_
003348   0e40     movlw   0x40             	MOVLW	0x40
00334a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00334c   d002     bra     0x003352         	BRA	_01666_DS_
                                           _01665_DS_:
00334e   c002     movff   0x002, 0x001     	MOVFF	r0x02, r0x01
003350   f001
                                           _01666_DS_:
003352   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
003354   f000
                                           _01658_DS_:
                                           ;	.line	1292; common/controller-axe.c	if (gain > (u8)1) {
003356   0e02     movlw   0x02             	MOVLW	0x02
003358   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
00335a   e32b     bnc     0x0033b2         	BNC	_01655_DS_
                                           ;	.line	1293; common/controller-axe.c	gain--;
00335c   0600     decf    0x00, 0x1, 0x0   	DECF	r0x00, F
                                           ;	.line	1294; common/controller-axe.c	curr.amp[0].gain = gain;
00335e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003360   6ff8     movwf   0xf8, 0x1        	MOVWF	(_curr + 14), B
                                           ;	.line	1295; common/controller-axe.c	curr.amp[1].gain = gain;
003362   6ffb     movwf   0xfb, 0x1        	MOVWF	(_curr + 17), B
                                           ;	.line	1296; common/controller-axe.c	calc_gain_modified();
003364   ec60     call    0x0038c0, 0x0    	CALL	_calc_gain_modified
003366   f01c
003368   d024     bra     0x0033b2         	BRA	_01655_DS_
                                           ; ;multiply lit val:0x03 by variable (_curr + 12) and store in r0x00
                                           _01653_DS_:
                                           ;	.line	1299; common/controller-axe.c	u8 gain = or_default(curr.amp[curr.selected_amp].gain);
00336a   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
00336c   0d03     mullw   0x03             	MULLW	0x03
00336e   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
003370   f000
003372   6a01     clrf    0x01, 0x0        	CLRF	r0x01
003374   0ef8     movlw   0xf8             	MOVLW	LOW(_curr + 14)
003376   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
003378   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 14)
00337a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00337c   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00337e   ffe9
003380   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
003382   ffea
003384   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
003386   f002
003388   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00338a   e103     bnz     0x003392         	BNZ	_01667_DS_
00338c   0e40     movlw   0x40             	MOVLW	0x40
00338e   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
003390   d002     bra     0x003396         	BRA	_01668_DS_
                                           _01667_DS_:
003392   c002     movff   0x002, 0x003     	MOVFF	r0x02, r0x03
003394   f003
                                           _01668_DS_:
003396   c003     movff   0x003, 0x002     	MOVFF	r0x03, r0x02
003398   f002
                                           ;	.line	1300; common/controller-axe.c	if (gain > (u8)1) {
00339a   0e02     movlw   0x02             	MOVLW	0x02
00339c   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
00339e   e309     bnc     0x0033b2         	BNC	_01655_DS_
                                           ;	.line	1301; common/controller-axe.c	gain--;
0033a0   0602     decf    0x02, 0x1, 0x0   	DECF	r0x02, F
                                           ;	.line	1302; common/controller-axe.c	curr.amp[curr.selected_amp].gain = gain;
0033a2   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0033a4   ffe9
0033a6   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0033a8   ffea
0033aa   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
0033ac   ffef
                                           ;	.line	1303; common/controller-axe.c	calc_gain_modified();
0033ae   ec60     call    0x0038c0, 0x0    	CALL	_calc_gain_modified
0033b0   f01c
                                           _01655_DS_:
0033b2   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0033b4   f003
0033b6   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0033b8   f002
0033ba   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0033bc   f001
0033be   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0033c0   f000
0033c2   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__curr_amp_gain_increase	code
                                           _curr_amp_gain_increase:
                                           ;	.line	1270; common/controller-axe.c	static void curr_amp_gain_increase() {
0033c4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0033c6   ffe5
0033c8   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0033ca   ffe5
0033cc   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0033ce   ffe5
0033d0   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0033d2   ffe5
                                           ;	.line	1271; common/controller-axe.c	if (curr.selected_both) {
0033d4   51f7     movf    0xf7, 0x0, 0x1   	MOVF	(_curr + 13), W, B
0033d6   e032     bz      0x00343c         	BZ	_01598_DS_
                                           ;	.line	1272; common/controller-axe.c	u8 gain = max(or_default(curr.amp[0].gain), or_default(curr.amp[1].gain));
0033d8   c1f8     movff   0x1f8, 0x000     	MOVFF	(_curr + 14), r0x00
0033da   f000
0033dc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0033de   e103     bnz     0x0033e6         	BNZ	_01604_DS_
0033e0   0e40     movlw   0x40             	MOVLW	0x40
0033e2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0033e4   d002     bra     0x0033ea         	BRA	_01605_DS_
                                           _01604_DS_:
0033e6   c000     movff   0x000, 0x001     	MOVFF	r0x00, r0x01
0033e8   f001
                                           _01605_DS_:
0033ea   c1fb     movff   0x1fb, 0x002     	MOVFF	(_curr + 17), r0x02
0033ec   f002
0033ee   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0033f0   e103     bnz     0x0033f8         	BNZ	_01606_DS_
0033f2   0e40     movlw   0x40             	MOVLW	0x40
0033f4   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0033f6   d002     bra     0x0033fc         	BRA	_01607_DS_
                                           _01606_DS_:
0033f8   c002     movff   0x002, 0x003     	MOVFF	r0x02, r0x03
0033fa   f003
                                           _01607_DS_:
0033fc   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0033fe   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
003400   e20a     bc      0x003416         	BC	_01602_DS_
003402   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003404   e103     bnz     0x00340c         	BNZ	_01608_DS_
003406   0e40     movlw   0x40             	MOVLW	0x40
003408   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00340a   d002     bra     0x003410         	BRA	_01609_DS_
                                           _01608_DS_:
00340c   c000     movff   0x000, 0x001     	MOVFF	r0x00, r0x01
00340e   f001
                                           _01609_DS_:
003410   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
003412   f000
003414   d009     bra     0x003428         	BRA	_01603_DS_
                                           _01602_DS_:
003416   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003418   e103     bnz     0x003420         	BNZ	_01610_DS_
00341a   0e40     movlw   0x40             	MOVLW	0x40
00341c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00341e   d002     bra     0x003424         	BRA	_01611_DS_
                                           _01610_DS_:
003420   c002     movff   0x002, 0x001     	MOVFF	r0x02, r0x01
003422   f001
                                           _01611_DS_:
003424   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
003426   f000
                                           _01603_DS_:
                                           ;	.line	1273; common/controller-axe.c	if (gain < (u8)127) {
003428   0e7f     movlw   0x7f             	MOVLW	0x7f
00342a   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
00342c   e22b     bc      0x003484         	BC	_01600_DS_
                                           ;	.line	1274; common/controller-axe.c	gain++;
00342e   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
                                           ;	.line	1275; common/controller-axe.c	curr.amp[0].gain = gain;
003430   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003432   6ff8     movwf   0xf8, 0x1        	MOVWF	(_curr + 14), B
                                           ;	.line	1276; common/controller-axe.c	curr.amp[1].gain = gain;
003434   6ffb     movwf   0xfb, 0x1        	MOVWF	(_curr + 17), B
                                           ;	.line	1277; common/controller-axe.c	calc_gain_modified();
003436   ec60     call    0x0038c0, 0x0    	CALL	_calc_gain_modified
003438   f01c
00343a   d024     bra     0x003484         	BRA	_01600_DS_
                                           ; ;multiply lit val:0x03 by variable (_curr + 12) and store in r0x00
                                           _01598_DS_:
                                           ;	.line	1280; common/controller-axe.c	u8 gain = or_default(curr.amp[curr.selected_amp].gain);
00343c   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
00343e   0d03     mullw   0x03             	MULLW	0x03
003440   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
003442   f000
003444   6a01     clrf    0x01, 0x0        	CLRF	r0x01
003446   0ef8     movlw   0xf8             	MOVLW	LOW(_curr + 14)
003448   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00344a   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 14)
00344c   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00344e   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003450   ffe9
003452   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
003454   ffea
003456   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
003458   f002
00345a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00345c   e103     bnz     0x003464         	BNZ	_01612_DS_
00345e   0e40     movlw   0x40             	MOVLW	0x40
003460   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
003462   d002     bra     0x003468         	BRA	_01613_DS_
                                           _01612_DS_:
003464   c002     movff   0x002, 0x003     	MOVFF	r0x02, r0x03
003466   f003
                                           _01613_DS_:
003468   c003     movff   0x003, 0x002     	MOVFF	r0x03, r0x02
00346a   f002
                                           ;	.line	1281; common/controller-axe.c	if (gain < (u8)127) {
00346c   0e7f     movlw   0x7f             	MOVLW	0x7f
00346e   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
003470   e209     bc      0x003484         	BC	_01600_DS_
                                           ;	.line	1282; common/controller-axe.c	gain++;
003472   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
                                           ;	.line	1283; common/controller-axe.c	curr.amp[curr.selected_amp].gain = gain;
003474   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003476   ffe9
003478   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
00347a   ffea
00347c   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
00347e   ffef
                                           ;	.line	1284; common/controller-axe.c	calc_gain_modified();
003480   ec60     call    0x0038c0, 0x0    	CALL	_calc_gain_modified
003482   f01c
                                           _01600_DS_:
003484   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003486   f003
003488   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00348a   f002
00348c   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00348e   f001
003490   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003492   f000
003494   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__curr_amp_gain_toggle	code
                                           _curr_amp_gain_toggle:
                                           ;	.line	1259; common/controller-axe.c	static void curr_amp_gain_toggle() {
0041b8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0041ba   ffe5
0041bc   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0041be   ffe5
                                           ;	.line	1261; common/controller-axe.c	if (curr.selected_both) {
0041c0   51f7     movf    0xf7, 0x0, 0x1   	MOVF	(_curr + 13), W, B
0041c2   e003     bz      0x0041ca         	BZ	_01586_DS_
                                           ;	.line	1262; common/controller-axe.c	curr.amp[0].gain = 0;
0041c4   6bf8     clrf    0xf8, 0x1        	CLRF	(_curr + 14), B
                                           ;	.line	1263; common/controller-axe.c	curr.amp[1].gain = 0;
0041c6   6bfb     clrf    0xfb, 0x1        	CLRF	(_curr + 17), B
0041c8   d00f     bra     0x0041e8         	BRA	_01587_DS_
                                           ; ;multiply lit val:0x03 by variable (_curr + 12) and store in r0x00
                                           _01586_DS_:
                                           ;	.line	1265; common/controller-axe.c	curr.amp[curr.selected_amp].gain = 0;
0041ca   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
0041cc   0d03     mullw   0x03             	MULLW	0x03
0041ce   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0041d0   f000
0041d2   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0041d4   0ef8     movlw   0xf8             	MOVLW	LOW(_curr + 14)
0041d6   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0041d8   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 14)
0041da   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0041dc   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0041de   ffe9
0041e0   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0041e2   ffea
0041e4   0e00     movlw   0x00             	MOVLW	0x00
0041e6   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           _01587_DS_:
                                           ;	.line	1267; common/controller-axe.c	calc_gain_modified();
0041e8   ec60     call    0x0038c0, 0x0    	CALL	_calc_gain_modified
0041ea   f01c
0041ec   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0041ee   f001
0041f0   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0041f2   f000
0041f4   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__curr_amp_vol_decrease	code
                                           _curr_amp_vol_decrease:
                                           ;	.line	1240; common/controller-axe.c	static void curr_amp_vol_decrease() {
003d44   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003d46   ffe5
003d48   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003d4a   ffe5
003d4c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003d4e   ffe5
                                           ;	.line	1241; common/controller-axe.c	if (curr.selected_both) {
003d50   51f7     movf    0xf7, 0x0, 0x1   	MOVF	(_curr + 13), W, B
003d52   e012     bz      0x003d78         	BZ	_01562_DS_
                                           ;	.line	1242; common/controller-axe.c	u8 volume = min((curr.amp[0].volume), (curr.amp[1].volume));
003d54   c1fa     movff   0x1fa, 0x000     	MOVFF	(_curr + 16), r0x00
003d56   f000
003d58   c1fd     movff   0x1fd, 0x001     	MOVFF	(_curr + 19), r0x01
003d5a   f001
003d5c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003d5e   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
003d60   e302     bnc     0x003d66         	BNC	_01567_DS_
003d62   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
003d64   f000
                                           _01567_DS_:
                                           ;	.line	1243; common/controller-axe.c	if (volume > (u8)0) {
003d66   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003d68   e025     bz      0x003db4         	BZ	_01564_DS_
                                           ;	.line	1244; common/controller-axe.c	volume--;
003d6a   0600     decf    0x00, 0x1, 0x0   	DECF	r0x00, F
                                           ;	.line	1245; common/controller-axe.c	curr.amp[0].volume = volume;
003d6c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003d6e   6ffa     movwf   0xfa, 0x1        	MOVWF	(_curr + 16), B
                                           ;	.line	1246; common/controller-axe.c	curr.amp[1].volume = volume;
003d70   6ffd     movwf   0xfd, 0x1        	MOVWF	(_curr + 19), B
                                           ;	.line	1247; common/controller-axe.c	calc_volume_modified();
003d72   ec63     call    0x0036c6, 0x0    	CALL	_calc_volume_modified
003d74   f01b
003d76   d01e     bra     0x003db4         	BRA	_01564_DS_
                                           ; ;multiply lit val:0x03 by variable (_curr + 12) and store in r0x00
                                           _01562_DS_:
                                           ;	.line	1250; common/controller-axe.c	u8 volume = (curr.amp[curr.selected_amp].volume);
003d78   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
003d7a   0d03     mullw   0x03             	MULLW	0x03
003d7c   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
003d7e   f000
003d80   6a01     clrf    0x01, 0x0        	CLRF	r0x01
003d82   0ef8     movlw   0xf8             	MOVLW	LOW(_curr + 14)
003d84   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
003d86   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 14)
003d88   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
003d8a   0e02     movlw   0x02             	MOVLW	0x02
003d8c   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
003d8e   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
003d90   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
003d92   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003d94   ffe9
003d96   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
003d98   ffea
003d9a   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
003d9c   f002
                                           ;	.line	1251; common/controller-axe.c	if (volume > (u8)0) {
003d9e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003da0   e009     bz      0x003db4         	BZ	_01564_DS_
                                           ;	.line	1252; common/controller-axe.c	volume--;
003da2   0602     decf    0x02, 0x1, 0x0   	DECF	r0x02, F
                                           ;	.line	1253; common/controller-axe.c	curr.amp[curr.selected_amp].volume = volume;
003da4   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003da6   ffe9
003da8   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
003daa   ffea
003dac   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
003dae   ffef
                                           ;	.line	1254; common/controller-axe.c	calc_volume_modified();
003db0   ec63     call    0x0036c6, 0x0    	CALL	_calc_volume_modified
003db2   f01b
                                           _01564_DS_:
003db4   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003db6   f002
003db8   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003dba   f001
003dbc   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003dbe   f000
003dc0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__curr_amp_vol_increase	code
                                           _curr_amp_vol_increase:
                                           ;	.line	1221; common/controller-axe.c	static void curr_amp_vol_increase() {
003c44   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003c46   ffe5
003c48   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003c4a   ffe5
003c4c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003c4e   ffe5
                                           ;	.line	1222; common/controller-axe.c	if (curr.selected_both) {
003c50   51f7     movf    0xf7, 0x0, 0x1   	MOVF	(_curr + 13), W, B
003c52   e013     bz      0x003c7a         	BZ	_01532_DS_
                                           ;	.line	1223; common/controller-axe.c	u8 volume = max((curr.amp[0].volume), (curr.amp[1].volume));
003c54   c1fa     movff   0x1fa, 0x000     	MOVFF	(_curr + 16), r0x00
003c56   f000
003c58   c1fd     movff   0x1fd, 0x001     	MOVFF	(_curr + 19), r0x01
003c5a   f001
003c5c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003c5e   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
003c60   e302     bnc     0x003c66         	BNC	_01537_DS_
003c62   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
003c64   f000
                                           _01537_DS_:
                                           ;	.line	1224; common/controller-axe.c	if (volume < (u8)127) {
003c66   0e7f     movlw   0x7f             	MOVLW	0x7f
003c68   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
003c6a   e226     bc      0x003cb8         	BC	_01534_DS_
                                           ;	.line	1225; common/controller-axe.c	volume++;
003c6c   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
                                           ;	.line	1226; common/controller-axe.c	curr.amp[0].volume = volume;
003c6e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003c70   6ffa     movwf   0xfa, 0x1        	MOVWF	(_curr + 16), B
                                           ;	.line	1227; common/controller-axe.c	curr.amp[1].volume = volume;
003c72   6ffd     movwf   0xfd, 0x1        	MOVWF	(_curr + 19), B
                                           ;	.line	1228; common/controller-axe.c	calc_volume_modified();
003c74   ec63     call    0x0036c6, 0x0    	CALL	_calc_volume_modified
003c76   f01b
003c78   d01f     bra     0x003cb8         	BRA	_01534_DS_
                                           ; ;multiply lit val:0x03 by variable (_curr + 12) and store in r0x00
                                           _01532_DS_:
                                           ;	.line	1231; common/controller-axe.c	u8 volume = (curr.amp[curr.selected_amp].volume);
003c7a   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
003c7c   0d03     mullw   0x03             	MULLW	0x03
003c7e   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
003c80   f000
003c82   6a01     clrf    0x01, 0x0        	CLRF	r0x01
003c84   0ef8     movlw   0xf8             	MOVLW	LOW(_curr + 14)
003c86   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
003c88   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 14)
003c8a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
003c8c   0e02     movlw   0x02             	MOVLW	0x02
003c8e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
003c90   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
003c92   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
003c94   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003c96   ffe9
003c98   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
003c9a   ffea
003c9c   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
003c9e   f002
                                           ;	.line	1232; common/controller-axe.c	if (volume < (u8)127) {
003ca0   0e7f     movlw   0x7f             	MOVLW	0x7f
003ca2   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
003ca4   e209     bc      0x003cb8         	BC	_01534_DS_
                                           ;	.line	1233; common/controller-axe.c	volume++;
003ca6   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
                                           ;	.line	1234; common/controller-axe.c	curr.amp[curr.selected_amp].volume = volume;
003ca8   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003caa   ffe9
003cac   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
003cae   ffea
003cb0   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
003cb2   ffef
                                           ;	.line	1235; common/controller-axe.c	calc_volume_modified();
003cb4   ec63     call    0x0036c6, 0x0    	CALL	_calc_volume_modified
003cb6   f01b
                                           _01534_DS_:
003cb8   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003cba   f002
003cbc   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003cbe   f001
003cc0   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003cc2   f000
003cc4   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__curr_amp_vol_toggle	code
                                           _curr_amp_vol_toggle:
                                           ;	.line	1200; common/controller-axe.c	static void curr_amp_vol_toggle() {
003a9e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003aa0   ffe5
003aa2   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003aa4   ffe5
003aa6   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003aa8   ffe5
                                           ;	.line	1202; common/controller-axe.c	if (curr.selected_both) {
003aaa   51f7     movf    0xf7, 0x0, 0x1   	MOVF	(_curr + 13), W, B
003aac   e014     bz      0x003ad6         	BZ	_01500_DS_
                                           ;	.line	1203; common/controller-axe.c	u8 volume = max((curr.amp[0].volume), (curr.amp[1].volume));
003aae   c1fa     movff   0x1fa, 0x000     	MOVFF	(_curr + 16), r0x00
003ab0   f000
003ab2   c1fd     movff   0x1fd, 0x001     	MOVFF	(_curr + 19), r0x01
003ab4   f001
003ab6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003ab8   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
003aba   e302     bnc     0x003ac0         	BNC	_01505_DS_
003abc   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
003abe   f000
                                           _01505_DS_:
                                           ;	.line	1204; common/controller-axe.c	if (volume == volume_0dB) {
003ac0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003ac2   0a62     xorlw   0x62             	XORLW	0x62
003ac4   e104     bnz     0x003ace         	BNZ	_01494_DS_
                                           ;	.line	1205; common/controller-axe.c	curr.amp[0].volume = volume_6dB;
003ac6   0e7f     movlw   0x7f             	MOVLW	0x7f
003ac8   6ffa     movwf   0xfa, 0x1        	MOVWF	(_curr + 16), B
                                           ;	.line	1206; common/controller-axe.c	curr.amp[1].volume = volume_6dB;
003aca   6ffd     movwf   0xfd, 0x1        	MOVWF	(_curr + 19), B
003acc   d027     bra     0x003b1c         	BRA	_01501_DS_
                                           _01494_DS_:
                                           ;	.line	1208; common/controller-axe.c	curr.amp[0].volume = volume_0dB;
003ace   0e62     movlw   0x62             	MOVLW	0x62
003ad0   6ffa     movwf   0xfa, 0x1        	MOVWF	(_curr + 16), B
                                           ;	.line	1209; common/controller-axe.c	curr.amp[1].volume = volume_0dB;
003ad2   6ffd     movwf   0xfd, 0x1        	MOVWF	(_curr + 19), B
003ad4   d023     bra     0x003b1c         	BRA	_01501_DS_
                                           ; ;multiply lit val:0x03 by variable (_curr + 12) and store in r0x00
                                           _01500_DS_:
                                           ;	.line	1212; common/controller-axe.c	if (curr.amp[curr.selected_amp].volume == volume_0dB) {
003ad6   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
003ad8   0d03     mullw   0x03             	MULLW	0x03
003ada   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
003adc   f000
003ade   6a01     clrf    0x01, 0x0        	CLRF	r0x01
003ae0   0ef8     movlw   0xf8             	MOVLW	LOW(_curr + 14)
003ae2   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
003ae4   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 14)
003ae6   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
003ae8   0e02     movlw   0x02             	MOVLW	0x02
003aea   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
003aec   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
003aee   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
003af0   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003af2   ffe9
003af4   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
003af6   ffea
003af8   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
003afa   f002
003afc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003afe   0a62     xorlw   0x62             	XORLW	0x62
003b00   e107     bnz     0x003b10         	BNZ	_01497_DS_
                                           ;	.line	1213; common/controller-axe.c	curr.amp[curr.selected_amp].volume = volume_6dB;
003b02   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003b04   ffe9
003b06   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
003b08   ffea
003b0a   0e7f     movlw   0x7f             	MOVLW	0x7f
003b0c   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
003b0e   d006     bra     0x003b1c         	BRA	_01501_DS_
                                           _01497_DS_:
                                           ;	.line	1215; common/controller-axe.c	curr.amp[curr.selected_amp].volume = volume_0dB;
003b10   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003b12   ffe9
003b14   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
003b16   ffea
003b18   0e62     movlw   0x62             	MOVLW	0x62
003b1a   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           _01501_DS_:
                                           ;	.line	1218; common/controller-axe.c	calc_volume_modified();
003b1c   ec63     call    0x0036c6, 0x0    	CALL	_calc_volume_modified
003b1e   f01b
003b20   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003b22   f002
003b24   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003b26   f001
003b28   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003b2a   f000
003b2c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__prev_scene	code
                                           _prev_scene:
                                           ;	.line	1190; common/controller-axe.c	static void prev_scene() {
004382   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004384   ffe5
                                           ;	.line	1191; common/controller-axe.c	if (curr.sc_idx > 0) {
004386   c1f5     movff   0x1f5, 0x000     	MOVFF	(_curr + 11), r0x00
004388   f000
00438a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00438c   e003     bz      0x004394         	BZ	_01488_DS_
                                           ;	.line	1193; common/controller-axe.c	curr.sc_idx--;
00438e   0600     decf    0x00, 0x1, 0x0   	DECF	r0x00, F
004390   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004392   6ff5     movwf   0xf5, 0x1        	MOVWF	(_curr + 11), B
                                           _01488_DS_:
004394   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004396   f000
004398   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__next_scene	code
                                           _next_scene:
                                           ;	.line	1183; common/controller-axe.c	static void next_scene() {
004368   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00436a   ffe5
                                           ;	.line	1184; common/controller-axe.c	if (curr.sc_idx < scene_count_max - 1) {
00436c   c1f5     movff   0x1f5, 0x000     	MOVFF	(_curr + 11), r0x00
00436e   f000
004370   0e09     movlw   0x09             	MOVLW	0x09
004372   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
004374   e203     bc      0x00437c         	BC	_01476_DS_
                                           ;	.line	1186; common/controller-axe.c	curr.sc_idx++;
004376   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
004378   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00437a   6ff5     movwf   0xf5, 0x1        	MOVWF	(_curr + 11), B
                                           _01476_DS_:
00437c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00437e   f000
004380   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__prev_song	code
                                           _prev_song:
                                           ;	.line	1169; common/controller-axe.c	static void prev_song() {
0042fa   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0042fc   ffe5
                                           ;	.line	1170; common/controller-axe.c	if (curr.setlist_mode == 0) {
0042fe   51f2     movf    0xf2, 0x0, 0x1   	MOVF	(_curr + 8), W, B
004300   e108     bnz     0x004312         	BNZ	_01467_DS_
                                           ;	.line	1171; common/controller-axe.c	if (curr.pr_idx > 0) {
004302   c1f4     movff   0x1f4, 0x000     	MOVFF	(_curr + 10), r0x00
004304   f000
004306   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004308   e00b     bz      0x004320         	BZ	_01469_DS_
                                           ;	.line	1173; common/controller-axe.c	curr.pr_idx--;
00430a   0600     decf    0x00, 0x1, 0x0   	DECF	r0x00, F
00430c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00430e   6ff4     movwf   0xf4, 0x1        	MOVWF	(_curr + 10), B
004310   d007     bra     0x004320         	BRA	_01469_DS_
                                           _01467_DS_:
                                           ;	.line	1176; common/controller-axe.c	if (curr.sl_idx > 0) {
004312   c1f3     movff   0x1f3, 0x000     	MOVFF	(_curr + 9), r0x00
004314   f000
004316   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004318   e003     bz      0x004320         	BZ	_01469_DS_
                                           ;	.line	1178; common/controller-axe.c	curr.sl_idx--;
00431a   0600     decf    0x00, 0x1, 0x0   	DECF	r0x00, F
00431c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00431e   6ff3     movwf   0xf3, 0x1        	MOVWF	(_curr + 9), B
                                           _01469_DS_:
004320   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004322   f000
004324   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__next_song	code
                                           _next_song:
                                           ;	.line	1155; common/controller-axe.c	static void next_song() {
0042ca   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0042cc   ffe5
                                           ;	.line	1156; common/controller-axe.c	if (curr.setlist_mode == 0) {
0042ce   51f2     movf    0xf2, 0x0, 0x1   	MOVF	(_curr + 8), W, B
0042d0   e109     bnz     0x0042e4         	BNZ	_01443_DS_
                                           ;	.line	1157; common/controller-axe.c	if (curr.pr_idx < 127) {
0042d2   c1f4     movff   0x1f4, 0x000     	MOVFF	(_curr + 10), r0x00
0042d4   f000
0042d6   0e7f     movlw   0x7f             	MOVLW	0x7f
0042d8   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
0042da   e20c     bc      0x0042f4         	BC	_01445_DS_
                                           ;	.line	1159; common/controller-axe.c	curr.pr_idx++;
0042dc   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
0042de   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0042e0   6ff4     movwf   0xf4, 0x1        	MOVWF	(_curr + 10), B
0042e2   d008     bra     0x0042f4         	BRA	_01445_DS_
                                           _01443_DS_:
                                           ;	.line	1162; common/controller-axe.c	if (curr.sl_idx < sl_max) {
0042e4   c1f3     movff   0x1f3, 0x000     	MOVFF	(_curr + 9), r0x00
0042e6   f000
0042e8   5172     movf    0x72, 0x0, 0x1   	MOVF	_sl_max, W, B
0042ea   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
0042ec   e203     bc      0x0042f4         	BC	_01445_DS_
                                           ;	.line	1164; common/controller-axe.c	curr.sl_idx++;
0042ee   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
0042f0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0042f2   6ff3     movwf   0xf3, 0x1        	MOVWF	(_curr + 9), B
                                           _01445_DS_:
0042f4   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0042f6   f000
0042f8   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__curr_amp_reset	code
                                           _curr_amp_reset:
                                           ;	.line	1141; common/controller-axe.c	static void curr_amp_reset() {
003556   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003558   ffe5
00355a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00355c   ffe5
00355e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003560   ffe5
003562   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003564   ffe5
                                           ;	.line	1142; common/controller-axe.c	if (curr.selected_both) {
003566   51f7     movf    0xf7, 0x0, 0x1   	MOVF	(_curr + 13), W, B
003568   e009     bz      0x00357c         	BZ	_01431_DS_
                                           ;	.line	1144; common/controller-axe.c	last.amp[0].fx = ~curr.amp[0].fx;
00356a   1df9     comf    0xf9, 0x0, 0x1   	COMF	(_curr + 15), W, B
00356c   6f39     movwf   0x39, 0x1        	MOVWF	(_last + 15), B
                                           ;	.line	1145; common/controller-axe.c	last.amp[0].volume = ~curr.amp[0].volume;
00356e   1dfa     comf    0xfa, 0x0, 0x1   	COMF	(_curr + 16), W, B
003570   6f3a     movwf   0x3a, 0x1        	MOVWF	(_last + 16), B
                                           ;	.line	1146; common/controller-axe.c	last.amp[1].fx = ~curr.amp[1].fx;
003572   1dfc     comf    0xfc, 0x0, 0x1   	COMF	(_curr + 18), W, B
003574   6f3c     movwf   0x3c, 0x1        	MOVWF	(_last + 18), B
                                           ;	.line	1147; common/controller-axe.c	last.amp[1].volume = ~curr.amp[1].volume;
003576   1dfd     comf    0xfd, 0x0, 0x1   	COMF	(_curr + 19), W, B
003578   6f3d     movwf   0x3d, 0x1        	MOVWF	(_last + 19), B
00357a   d044     bra     0x003604         	BRA	_01433_DS_
                                           ; ;multiply lit val:0x03 by variable (_curr + 12) and store in r0x00
                                           _01431_DS_:
                                           ;	.line	1150; common/controller-axe.c	last.amp[curr.selected_amp].fx = ~curr.amp[curr.selected_amp].fx;
00357c   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
00357e   0d03     mullw   0x03             	MULLW	0x03
003580   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
003582   f000
003584   0e38     movlw   0x38             	MOVLW	LOW(_last + 14)
003586   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
003588   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00358a   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00358c   0e02     movlw   0x02             	MOVLW	HIGH(_last + 14)
00358e   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
003590   4a01     infsnz  0x01, 0x1, 0x0   	INFSNZ	r0x01, F
003592   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
003594   6a03     clrf    0x03, 0x0        	CLRF	r0x03
003596   0ef8     movlw   0xf8             	MOVLW	LOW(_curr + 14)
003598   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00359a   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 14)
00359c   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
00359e   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
0035a0   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
0035a2   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0035a4   ffe9
0035a6   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
0035a8   ffea
0035aa   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0035ac   f000
0035ae   1e00     comf    0x00, 0x1, 0x0   	COMF	r0x00, F
0035b0   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
0035b2   ffe9
0035b4   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
0035b6   ffea
0035b8   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0035ba   ffef
                                           ; ;multiply lit val:0x03 by variable (_curr + 12) and store in r0x00
                                           ;	.line	1151; common/controller-axe.c	last.amp[curr.selected_amp].volume = ~curr.amp[curr.selected_amp].volume;
0035bc   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
0035be   0d03     mullw   0x03             	MULLW	0x03
0035c0   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0035c2   f000
0035c4   0e38     movlw   0x38             	MOVLW	LOW(_last + 14)
0035c6   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
0035c8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0035ca   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0035cc   0e02     movlw   0x02             	MOVLW	HIGH(_last + 14)
0035ce   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
0035d0   0e02     movlw   0x02             	MOVLW	0x02
0035d2   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
0035d4   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0035d6   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
0035d8   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0035da   0ef8     movlw   0xf8             	MOVLW	LOW(_curr + 14)
0035dc   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0035de   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 14)
0035e0   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
0035e2   0e02     movlw   0x02             	MOVLW	0x02
0035e4   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0035e6   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0035e8   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
0035ea   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0035ec   ffe9
0035ee   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
0035f0   ffea
0035f2   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0035f4   f000
0035f6   1e00     comf    0x00, 0x1, 0x0   	COMF	r0x00, F
0035f8   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
0035fa   ffe9
0035fc   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
0035fe   ffea
003600   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
003602   ffef
                                           _01433_DS_:
003604   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003606   f003
003608   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00360a   f002
00360c   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00360e   f001
003610   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003612   f000
003614   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__toggle_setlist_mode	code
                                           _toggle_setlist_mode:
                                           ;	.line	1120; common/controller-axe.c	static void toggle_setlist_mode() {
003bbc   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003bbe   ffe5
003bc0   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003bc2   ffe5
003bc4   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003bc6   ffe5
003bc8   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003bca   ffe5
                                           ;	.line	1122; common/controller-axe.c	curr.setlist_mode ^= (u8)1;
003bcc   0e01     movlw   0x01             	MOVLW	0x01
003bce   19f2     xorwf   0xf2, 0x0, 0x1   	XORWF	(_curr + 8), W, B
003bd0   6ff2     movwf   0xf2, 0x1        	MOVWF	(_curr + 8), B
                                           ;	.line	1123; common/controller-axe.c	if (curr.setlist_mode == 1) {
003bd2   0a01     xorlw   0x01             	XORLW	0x01
003bd4   e11e     bnz     0x003c12         	BNZ	_01401_DS_
                                           ;	.line	1126; common/controller-axe.c	sl_max = sl.count - (u8)1;
003bd6   0500     decf    0x00, 0x0, 0x1   	DECF	_sl, W, B
003bd8   6f72     movwf   0x72, 0x1        	MOVWF	_sl_max, B
                                           ;	.line	1127; common/controller-axe.c	curr.sl_idx = 0;
003bda   6bf3     clrf    0xf3, 0x1        	CLRF	(_curr + 9), B
                                           ;	.line	1128; common/controller-axe.c	for (i = 0; i < sl.count; i++) {
003bdc   6a00     clrf    0x00, 0x0        	CLRF	r0x00
003bde   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _01404_DS_:
003be0   5100     movf    0x00, 0x0, 0x1   	MOVF	_sl, W, B
003be2   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
003be4   e226     bc      0x003c32         	BC	_01406_DS_
                                           ;	.line	1129; common/controller-axe.c	if (sl.entries[i].program == curr.pr_idx) {
003be6   0e03     movlw   0x03             	MOVLW	LOW(_sl + 3)
003be8   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
003bea   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
003bec   6a03     clrf    0x03, 0x0        	CLRF	r0x03
003bee   0e01     movlw   0x01             	MOVLW	HIGH(_sl + 3)
003bf0   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
003bf2   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
003bf4   ffe9
003bf6   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
003bf8   ffea
003bfa   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
003bfc   f002
003bfe   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003c00   19f4     xorwf   0xf4, 0x0, 0x1   	XORWF	(_curr + 10), W, B
003c02   e103     bnz     0x003c0a         	BNZ	_01405_DS_
                                           ;	.line	1130; common/controller-axe.c	curr.sl_idx = i;
003c04   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003c06   6ff3     movwf   0xf3, 0x1        	MOVWF	(_curr + 9), B
                                           ;	.line	1131; common/controller-axe.c	break;
003c08   d014     bra     0x003c32         	BRA	_01406_DS_
                                           _01405_DS_:
                                           ;	.line	1128; common/controller-axe.c	for (i = 0; i < sl.count; i++) {
003c0a   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
003c0c   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
003c0e   f000
003c10   d7e7     bra     0x003be0         	BRA	_01404_DS_
                                           _01401_DS_:
                                           ;	.line	1136; common/controller-axe.c	sl_max = 127;
003c12   0e7f     movlw   0x7f             	MOVLW	0x7f
003c14   6f72     movwf   0x72, 0x1        	MOVWF	_sl_max, B
                                           ;	.line	1137; common/controller-axe.c	curr.pr_idx = sl.entries[curr.sl_idx].program;
003c16   0e03     movlw   0x03             	MOVLW	LOW(_sl + 3)
003c18   25f3     addwf   0xf3, 0x0, 0x1   	ADDWF	(_curr + 9), W, B
003c1a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
003c1c   6a01     clrf    0x01, 0x0        	CLRF	r0x01
003c1e   0e01     movlw   0x01             	MOVLW	HIGH(_sl + 3)
003c20   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
003c22   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003c24   ffe9
003c26   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
003c28   ffea
003c2a   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
003c2c   f000
003c2e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003c30   6ff4     movwf   0xf4, 0x1        	MOVWF	(_curr + 10), B
                                           _01406_DS_:
003c32   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003c34   f003
003c36   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003c38   f002
003c3a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003c3c   f001
003c3e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003c40   f000
003c42   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__scene_default	code
                                           _scene_default:
                                           ;	.line	1110; common/controller-axe.c	void scene_default(void) {
00305a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00305c   ffe5
00305e   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003060   ffe5
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x00
                                           ;	.line	1112; common/controller-axe.c	pr.scene[curr.sc_idx].amp[0].gain = 0;
003062   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
003064   0d06     mullw   0x06             	MULLW	0x06
003066   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
003068   f000
00306a   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00306c   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
00306e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
003070   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
003072   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
003074   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003076   ffe9
003078   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
00307a   ffea
00307c   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x00
                                           ;	.line	1113; common/controller-axe.c	pr.scene[curr.sc_idx].amp[0].fx = fxm_dirty;
00307e   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
003080   0d06     mullw   0x06             	MULLW	0x06
003082   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
003084   f000
003086   6a01     clrf    0x01, 0x0        	CLRF	r0x01
003088   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
00308a   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00308c   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
00308e   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
003090   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
003092   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
003094   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003096   ffe9
003098   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
00309a   ffea
00309c   0e01     movlw   0x01             	MOVLW	0x01
00309e   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x00
                                           ;	.line	1114; common/controller-axe.c	pr.scene[curr.sc_idx].amp[0].volume = volume_0dB;
0030a0   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
0030a2   0d06     mullw   0x06             	MULLW	0x06
0030a4   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0030a6   f000
0030a8   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0030aa   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
0030ac   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0030ae   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
0030b0   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0030b2   0e02     movlw   0x02             	MOVLW	0x02
0030b4   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0030b6   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0030b8   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0030ba   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0030bc   ffe9
0030be   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0030c0   ffea
0030c2   0e62     movlw   0x62             	MOVLW	0x62
0030c4   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x00
                                           ;	.line	1115; common/controller-axe.c	pr.scene[curr.sc_idx].amp[1].gain = 0;
0030c6   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
0030c8   0d06     mullw   0x06             	MULLW	0x06
0030ca   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0030cc   f000
0030ce   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0030d0   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
0030d2   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0030d4   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
0030d6   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0030d8   0e03     movlw   0x03             	MOVLW	0x03
0030da   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0030dc   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0030de   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0030e0   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0030e2   ffe9
0030e4   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0030e6   ffea
0030e8   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x00
                                           ;	.line	1116; common/controller-axe.c	pr.scene[curr.sc_idx].amp[1].fx = fxm_dirty;
0030ea   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
0030ec   0d06     mullw   0x06             	MULLW	0x06
0030ee   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0030f0   f000
0030f2   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0030f4   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
0030f6   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0030f8   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
0030fa   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0030fc   0e04     movlw   0x04             	MOVLW	0x04
0030fe   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
003100   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
003102   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
003104   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003106   ffe9
003108   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
00310a   ffea
00310c   0e01     movlw   0x01             	MOVLW	0x01
00310e   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x00
                                           ;	.line	1117; common/controller-axe.c	pr.scene[curr.sc_idx].amp[1].volume = volume_0dB;
003110   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
003112   0d06     mullw   0x06             	MULLW	0x06
003114   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
003116   f000
003118   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00311a   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
00311c   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00311e   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
003120   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
003122   0e05     movlw   0x05             	MOVLW	0x05
003124   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
003126   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
003128   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
00312a   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00312c   ffe9
00312e   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
003130   ffea
003132   0e62     movlw   0x62             	MOVLW	0x62
003134   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
003136   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003138   f001
00313a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00313c   f000
00313e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__controller_handle	code
                                           _controller_handle:
                                           ;	.line	934; common/controller-axe.c	void controller_handle(void) {
00000c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00000e   ffe5
000010   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000012   ffe5
000014   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
000016   ffe5
000018   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00001a   ffe5
00001c   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
00001e   ffe5
000020   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
000022   ffe5
                                           ;	.line	936; common/controller-axe.c	u16 tmp = fsw_poll();
000024   ecbc     call    0x004178, 0x0    	CALL	_fsw_poll
000026   f020
000028   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00002a   f001
                                           ;	.line	937; common/controller-axe.c	curr.fsw.bot.byte = (u8)(tmp & (u8)0xFF);
00002c   6fea     movwf   0xea, 0x1        	MOVWF	_curr, B
                                           ;	.line	938; common/controller-axe.c	curr.fsw.top.byte = (u8)((tmp >> (u8)8) & (u8)0xFF);
00002e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000030   6feb     movwf   0xeb, 0x1        	MOVWF	(_curr + 1), B
                                           ;	.line	942; common/controller-axe.c	if (is_bot_button_pressed(M_1)) {
000032   512a     movf    0x2a, 0x0, 0x1   	MOVF	_last, W, B
000034   e106     bnz     0x000042         	BNZ	_00938_DS_
000036   51ea     movf    0xea, 0x0, 0x1   	MOVF	_curr, W, B
000038   0a01     xorlw   0x01             	XORLW	0x01
00003a   e103     bnz     0x000042         	BNZ	_00938_DS_
                                           ;	.line	943; common/controller-axe.c	curr.selected_both ^= 1;
00003c   0e01     movlw   0x01             	MOVLW	0x01
00003e   19f7     xorwf   0xf7, 0x0, 0x1   	XORWF	(_curr + 13), W, B
000040   6ff7     movwf   0xf7, 0x1        	MOVWF	(_curr + 13), B
                                           _00938_DS_:
                                           ;	.line	947; common/controller-axe.c	if (is_bot_button_pressed(M_2)) {
000042   c22a     movff   0x22a, 0x000     	MOVFF	_last, r0x00
000044   f000
000046   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000048   e106     bnz     0x000056         	BNZ	_00946_DS_
00004a   51ea     movf    0xea, 0x0, 0x1   	MOVF	_curr, W, B
00004c   0a02     xorlw   0x02             	XORLW	0x02
00004e   e103     bnz     0x000056         	BNZ	_00946_DS_
                                           ;	.line	948; common/controller-axe.c	timers.bot_2 = (u8)0x80;
000050   0e80     movlw   0x80             	MOVLW	0x80
000052   6f45     movwf   0x45, 0x1        	MOVWF	(_timers + 5), B
000054   d013     bra     0x00007c         	BRA	_00947_DS_
                                           _00946_DS_:
                                           ;	.line	949; common/controller-axe.c	} else if (is_bot_button_released(M_2)) {
000056   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000058   0e02     movlw   0x02             	MOVLW	0x02
00005a   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
00005c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00005e   0a02     xorlw   0x02             	XORLW	0x02
000060   e102     bnz     0x000066         	BNZ	_01265_DS_
000062   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000064   e001     bz      0x000068         	BZ	_01266_DS_
                                           _01265_DS_:
000066   d00a     bra     0x00007c         	BRA	_00947_DS_
                                           _01266_DS_:
000068   c1ea     movff   0x1ea, 0x000     	MOVFF	_curr, r0x00
00006a   f000
00006c   b200     btfsc   0x00, 0x1, 0x0   	BTFSC	r0x00, 1
00006e   d006     bra     0x00007c         	BRA	_00947_DS_
                                           ;	.line	950; common/controller-axe.c	if ((timers.bot_2 & (u8)0x80) != (u8)0) {
000070   af45     btfss   0x45, 0x7, 0x1   	BTFSS	(_timers + 5), 7
000072   d003     bra     0x00007a         	BRA	_00941_DS_
                                           ;	.line	951; common/controller-axe.c	curr.selected_amp ^= 1;
000074   0e01     movlw   0x01             	MOVLW	0x01
000076   19f6     xorwf   0xf6, 0x0, 0x1   	XORWF	(_curr + 12), W, B
000078   6ff6     movwf   0xf6, 0x1        	MOVWF	(_curr + 12), B
                                           _00941_DS_:
                                           ;	.line	954; common/controller-axe.c	timers.bot_2 = (u8)0;
00007a   6b45     clrf    0x45, 0x1        	CLRF	(_timers + 5), B
                                           _00947_DS_:
                                           ;	.line	958; common/controller-axe.c	if (is_bot_button_pressed(M_3)) {
00007c   c22a     movff   0x22a, 0x000     	MOVFF	_last, r0x00
00007e   f000
000080   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000082   e106     bnz     0x000090         	BNZ	_00955_DS_
000084   51ea     movf    0xea, 0x0, 0x1   	MOVF	_curr, W, B
000086   0a04     xorlw   0x04             	XORLW	0x04
000088   e103     bnz     0x000090         	BNZ	_00955_DS_
                                           ;	.line	959; common/controller-axe.c	timers.bot_3 = (u8)0x80;
00008a   0e80     movlw   0x80             	MOVLW	0x80
00008c   6f46     movwf   0x46, 0x1        	MOVWF	(_timers + 6), B
00008e   d013     bra     0x0000b6         	BRA	_00956_DS_
                                           _00955_DS_:
                                           ;	.line	960; common/controller-axe.c	} else if (is_bot_button_released(M_3)) {
000090   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000092   0e04     movlw   0x04             	MOVLW	0x04
000094   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
000096   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000098   0a04     xorlw   0x04             	XORLW	0x04
00009a   e102     bnz     0x0000a0         	BNZ	_01273_DS_
00009c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00009e   e001     bz      0x0000a2         	BZ	_01274_DS_
                                           _01273_DS_:
0000a0   d00a     bra     0x0000b6         	BRA	_00956_DS_
                                           _01274_DS_:
0000a2   c1ea     movff   0x1ea, 0x000     	MOVFF	_curr, r0x00
0000a4   f000
0000a6   b400     btfsc   0x00, 0x2, 0x0   	BTFSC	r0x00, 2
0000a8   d006     bra     0x0000b6         	BRA	_00956_DS_
                                           ;	.line	961; common/controller-axe.c	if ((timers.bot_3 & (u8)0x80) != (u8)0) {
0000aa   af46     btfss   0x46, 0x7, 0x1   	BTFSS	(_timers + 6), 7
0000ac   d003     bra     0x0000b4         	BRA	_00950_DS_
                                           ;	.line	962; common/controller-axe.c	curr.gain_mode ^= (u8)1;
0000ae   0e01     movlw   0x01             	MOVLW	0x01
0000b0   19fe     xorwf   0xfe, 0x0, 0x1   	XORWF	(_curr + 20), W, B
0000b2   6ffe     movwf   0xfe, 0x1        	MOVWF	(_curr + 20), B
                                           _00950_DS_:
                                           ;	.line	964; common/controller-axe.c	timers.bot_3 = (u8)0;
0000b4   6b46     clrf    0x46, 0x1        	CLRF	(_timers + 6), B
                                           _00956_DS_:
                                           ;	.line	968; common/controller-axe.c	if (is_bot_button_pressed(M_4)) {
0000b6   c22a     movff   0x22a, 0x000     	MOVFF	_last, r0x00
0000b8   f000
0000ba   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0000bc   e108     bnz     0x0000ce         	BNZ	_00962_DS_
0000be   51ea     movf    0xea, 0x0, 0x1   	MOVF	_curr, W, B
0000c0   0a08     xorlw   0x08             	XORLW	0x08
0000c2   e105     bnz     0x0000ce         	BNZ	_00962_DS_
                                           ;	.line	969; common/controller-axe.c	timers.bot_4 = (u8)0x80;
0000c4   0e80     movlw   0x80             	MOVLW	0x80
0000c6   6f40     movwf   0x40, 0x1        	MOVWF	_timers, B
                                           ;	.line	970; common/controller-axe.c	curr_amp_dec();
0000c8   ecf7     call    0x0043ee, 0x0    	CALL	_curr_amp_dec
0000ca   f021
0000cc   d010     bra     0x0000ee         	BRA	_00963_DS_
                                           _00962_DS_:
                                           ;	.line	971; common/controller-axe.c	} else if (is_bot_button_released(M_4)) {
0000ce   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0000d0   0e08     movlw   0x08             	MOVLW	0x08
0000d2   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
0000d4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0000d6   0a08     xorlw   0x08             	XORLW	0x08
0000d8   e102     bnz     0x0000de         	BNZ	_01281_DS_
0000da   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0000dc   e001     bz      0x0000e0         	BZ	_01282_DS_
                                           _01281_DS_:
0000de   d007     bra     0x0000ee         	BRA	_00963_DS_
                                           _01282_DS_:
0000e0   c1ea     movff   0x1ea, 0x000     	MOVFF	_curr, r0x00
0000e2   f000
0000e4   b600     btfsc   0x00, 0x3, 0x0   	BTFSC	r0x00, 3
0000e6   d003     bra     0x0000ee         	BRA	_00963_DS_
                                           ;	.line	972; common/controller-axe.c	timers.bot_4 &= ~(u8)0xC0;
0000e8   0e3f     movlw   0x3f             	MOVLW	0x3f
0000ea   1540     andwf   0x40, 0x0, 0x1   	ANDWF	_timers, W, B
0000ec   6f40     movwf   0x40, 0x1        	MOVWF	_timers, B
                                           _00963_DS_:
                                           ;	.line	976; common/controller-axe.c	if (is_bot_button_pressed(M_5)) {
0000ee   c22a     movff   0x22a, 0x000     	MOVFF	_last, r0x00
0000f0   f000
0000f2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0000f4   e108     bnz     0x000106         	BNZ	_00969_DS_
0000f6   51ea     movf    0xea, 0x0, 0x1   	MOVF	_curr, W, B
0000f8   0a10     xorlw   0x10             	XORLW	0x10
0000fa   e105     bnz     0x000106         	BNZ	_00969_DS_
                                           ;	.line	977; common/controller-axe.c	timers.bot_5 = (u8)0x80;
0000fc   0e80     movlw   0x80             	MOVLW	0x80
0000fe   6f41     movwf   0x41, 0x1        	MOVWF	(_timers + 1), B
                                           ;	.line	978; common/controller-axe.c	curr_amp_inc();
000100   ecff     call    0x0043fe, 0x0    	CALL	_curr_amp_inc
000102   f021
000104   d010     bra     0x000126         	BRA	_00970_DS_
                                           _00969_DS_:
                                           ;	.line	979; common/controller-axe.c	} else if (is_bot_button_released(M_5)) {
000106   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000108   0e10     movlw   0x10             	MOVLW	0x10
00010a   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
00010c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00010e   0a10     xorlw   0x10             	XORLW	0x10
000110   e102     bnz     0x000116         	BNZ	_01288_DS_
000112   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000114   e001     bz      0x000118         	BZ	_01289_DS_
                                           _01288_DS_:
000116   d007     bra     0x000126         	BRA	_00970_DS_
                                           _01289_DS_:
000118   c1ea     movff   0x1ea, 0x000     	MOVFF	_curr, r0x00
00011a   f000
00011c   b800     btfsc   0x00, 0x4, 0x0   	BTFSC	r0x00, 4
00011e   d003     bra     0x000126         	BRA	_00970_DS_
                                           ;	.line	980; common/controller-axe.c	timers.bot_5 &= ~(u8)0xC0;
000120   0e3f     movlw   0x3f             	MOVLW	0x3f
000122   1541     andwf   0x41, 0x0, 0x1   	ANDWF	(_timers + 1), W, B
000124   6f41     movwf   0x41, 0x1        	MOVWF	(_timers + 1), B
                                           _00970_DS_:
                                           ;	.line	984; common/controller-axe.c	if (is_bot_button_pressed(M_6)) {
000126   c22a     movff   0x22a, 0x000     	MOVFF	_last, r0x00
000128   f000
00012a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00012c   e114     bnz     0x000156         	BNZ	_00976_DS_
00012e   51ea     movf    0xea, 0x0, 0x1   	MOVF	_curr, W, B
000130   0a20     xorlw   0x20             	XORLW	0x20
000132   e111     bnz     0x000156         	BNZ	_00976_DS_
                                           ;	.line	986; common/controller-axe.c	timers.bot_6 = (u8)0x80;
000134   0e80     movlw   0x80             	MOVLW	0x80
000136   6f47     movwf   0x47, 0x1        	MOVWF	(_timers + 7), B
                                           ;	.line	987; common/controller-axe.c	curr.tap ^= (u8)0x7F;
000138   0e7f     movlw   0x7f             	MOVLW	0x7f
00013a   19f1     xorwf   0xf1, 0x0, 0x1   	XORWF	(_curr + 7), W, B
00013c   6ff1     movwf   0xf1, 0x1        	MOVWF	(_curr + 7), B
                                           ;	.line	988; common/controller-axe.c	midi_set_axe_cc(axe_cc_taptempo, curr.tap);
00013e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000140   0e0e     movlw   0x0e             	MOVLW	0x0e
000142   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000144   0e02     movlw   0x02             	MOVLW	0x02
000146   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000148   0e0b     movlw   0x0b             	MOVLW	0x0b
00014a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00014c   ec63     call    0x003cc6, 0x0    	CALL	_midi_send_cmd2
00014e   f01e
000150   0e04     movlw   0x04             	MOVLW	0x04
000152   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000154   d006     bra     0x000162         	BRA	_00977_DS_
                                           _00976_DS_:
                                           ;	.line	989; common/controller-axe.c	} else if (is_bot_button_pressed(M_6)) {
000156   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000158   e104     bnz     0x000162         	BNZ	_00977_DS_
00015a   51ea     movf    0xea, 0x0, 0x1   	MOVF	_curr, W, B
00015c   0a20     xorlw   0x20             	XORLW	0x20
00015e   e101     bnz     0x000162         	BNZ	_00977_DS_
                                           ;	.line	990; common/controller-axe.c	timers.bot_6 = (u8)0x00;
000160   6b47     clrf    0x47, 0x1        	CLRF	(_timers + 7), B
                                           _00977_DS_:
                                           ;	.line	994; common/controller-axe.c	if (is_bot_button_pressed(M_7)) {
000162   512a     movf    0x2a, 0x0, 0x1   	MOVF	_last, W, B
000164   e105     bnz     0x000170         	BNZ	_00980_DS_
000166   51ea     movf    0xea, 0x0, 0x1   	MOVF	_curr, W, B
000168   0a40     xorlw   0x40             	XORLW	0x40
00016a   e102     bnz     0x000170         	BNZ	_00980_DS_
                                           ;	.line	995; common/controller-axe.c	prev_scene();
00016c   ecc1     call    0x004382, 0x0    	CALL	_prev_scene
00016e   f021
                                           _00980_DS_:
                                           ;	.line	997; common/controller-axe.c	if (is_bot_button_pressed(M_8)) {
000170   c22a     movff   0x22a, 0x000     	MOVFF	_last, r0x00
000172   f000
000174   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000176   e106     bnz     0x000184         	BNZ	_00988_DS_
000178   51ea     movf    0xea, 0x0, 0x1   	MOVF	_curr, W, B
00017a   0a80     xorlw   0x80             	XORLW	0x80
00017c   e103     bnz     0x000184         	BNZ	_00988_DS_
                                           ;	.line	998; common/controller-axe.c	timers.bot_8 = (u8)0x80;
00017e   0e80     movlw   0x80             	MOVLW	0x80
000180   6f42     movwf   0x42, 0x1        	MOVWF	(_timers + 2), B
000182   d012     bra     0x0001a8         	BRA	_00989_DS_
                                           _00988_DS_:
                                           ;	.line	999; common/controller-axe.c	} else if (is_bot_button_released(M_8)) {
000184   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000186   0e80     movlw   0x80             	MOVLW	0x80
000188   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
00018a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00018c   0a80     xorlw   0x80             	XORLW	0x80
00018e   e102     bnz     0x000194         	BNZ	_01302_DS_
000190   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000192   e001     bz      0x000196         	BZ	_01303_DS_
                                           _01302_DS_:
000194   d009     bra     0x0001a8         	BRA	_00989_DS_
                                           _01303_DS_:
000196   c1ea     movff   0x1ea, 0x000     	MOVFF	_curr, r0x00
000198   f000
00019a   be00     btfsc   0x00, 0x7, 0x0   	BTFSC	r0x00, 7
00019c   d005     bra     0x0001a8         	BRA	_00989_DS_
                                           ;	.line	1000; common/controller-axe.c	if ((timers.bot_8 & (u8)0x80) != (u8)0) {
00019e   af42     btfss   0x42, 0x7, 0x1   	BTFSS	(_timers + 2), 7
0001a0   d002     bra     0x0001a6         	BRA	_00983_DS_
                                           ;	.line	1001; common/controller-axe.c	next_scene();
0001a2   ecb4     call    0x004368, 0x0    	CALL	_next_scene
0001a4   f021
                                           _00983_DS_:
                                           ;	.line	1003; common/controller-axe.c	timers.bot_8 = (u8)0x00;
0001a6   6b42     clrf    0x42, 0x1        	CLRF	(_timers + 2), B
                                           _00989_DS_:
                                           ;	.line	1018; common/controller-axe.c	if (is_top_button_pressed(M_1)) {
0001a8   512b     movf    0x2b, 0x0, 0x1   	MOVF	(_last + 1), W, B
0001aa   e134     bnz     0x000214         	BNZ	_00995_DS_
0001ac   51eb     movf    0xeb, 0x0, 0x1   	MOVF	(_curr + 1), W, B
0001ae   0a01     xorlw   0x01             	XORLW	0x01
0001b0   e131     bnz     0x000214         	BNZ	_00995_DS_
                                           ;	.line	1019; common/controller-axe.c	toggle_fx(dirty)
0001b2   51f7     movf    0xf7, 0x0, 0x1   	MOVF	(_curr + 13), W, B
0001b4   e015     bz      0x0001e0         	BZ	_00992_DS_
0001b6   51fc     movf    0xfc, 0x0, 0x1   	MOVF	(_curr + 18), W, B
0001b8   11f9     iorwf   0xf9, 0x0, 0x1   	IORWF	(_curr + 15), W, B
0001ba   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0001bc   0e01     movlw   0x01             	MOVLW	0x01
0001be   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
0001c0   7000     btg     0x00, 0x0, 0x0   	BTG	r0x00, 0
0001c2   0efe     movlw   0xfe             	MOVLW	0xfe
0001c4   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
0001c6   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0001c8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0001ca   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
0001cc   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0001ce   6ff9     movwf   0xf9, 0x1        	MOVWF	(_curr + 15), B
0001d0   0efe     movlw   0xfe             	MOVLW	0xfe
0001d2   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
0001d4   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
0001d6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0001d8   6ffc     movwf   0xfc, 0x1        	MOVWF	(_curr + 18), B
0001da   ec0c     call    0x003818, 0x0    	CALL	_calc_fx_modified
0001dc   f01c
0001de   d01a     bra     0x000214         	BRA	_00995_DS_
                                           ; ;multiply lit val:0x03 by variable (_curr + 12) and store in r0x00
                                           _00992_DS_:
0001e0   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
0001e2   0d03     mullw   0x03             	MULLW	0x03
0001e4   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0001e6   f000
0001e8   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0001ea   0ef8     movlw   0xf8             	MOVLW	LOW(_curr + 14)
0001ec   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0001ee   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 14)
0001f0   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0001f2   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
0001f4   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0001f6   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0001f8   ffe9
0001fa   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0001fc   ffea
0001fe   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000200   f002
000202   7002     btg     0x02, 0x0, 0x0   	BTG	r0x02, 0
000204   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000206   ffe9
000208   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
00020a   ffea
00020c   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
00020e   ffef
000210   ec0c     call    0x003818, 0x0    	CALL	_calc_fx_modified
000212   f01c
                                           _00995_DS_:
                                           ;	.line	1021; common/controller-axe.c	if (is_top_button_pressed(M_2)) {
000214   512b     movf    0x2b, 0x0, 0x1   	MOVF	(_last + 1), W, B
000216   e134     bnz     0x000280         	BNZ	_01001_DS_
000218   51eb     movf    0xeb, 0x0, 0x1   	MOVF	(_curr + 1), W, B
00021a   0a02     xorlw   0x02             	XORLW	0x02
00021c   e131     bnz     0x000280         	BNZ	_01001_DS_
                                           ;	.line	1022; common/controller-axe.c	toggle_fx(xy)
00021e   51f7     movf    0xf7, 0x0, 0x1   	MOVF	(_curr + 13), W, B
000220   e015     bz      0x00024c         	BZ	_00998_DS_
000222   51fc     movf    0xfc, 0x0, 0x1   	MOVF	(_curr + 18), W, B
000224   11f9     iorwf   0xf9, 0x0, 0x1   	IORWF	(_curr + 15), W, B
000226   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000228   0e02     movlw   0x02             	MOVLW	0x02
00022a   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
00022c   7200     btg     0x00, 0x1, 0x0   	BTG	r0x00, 1
00022e   0efd     movlw   0xfd             	MOVLW	0xfd
000230   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
000232   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000234   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000236   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
000238   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00023a   6ff9     movwf   0xf9, 0x1        	MOVWF	(_curr + 15), B
00023c   0efd     movlw   0xfd             	MOVLW	0xfd
00023e   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
000240   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
000242   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000244   6ffc     movwf   0xfc, 0x1        	MOVWF	(_curr + 18), B
000246   ec0c     call    0x003818, 0x0    	CALL	_calc_fx_modified
000248   f01c
00024a   d01a     bra     0x000280         	BRA	_01001_DS_
                                           ; ;multiply lit val:0x03 by variable (_curr + 12) and store in r0x00
                                           _00998_DS_:
00024c   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
00024e   0d03     mullw   0x03             	MULLW	0x03
000250   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000252   f000
000254   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000256   0ef8     movlw   0xf8             	MOVLW	LOW(_curr + 14)
000258   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00025a   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 14)
00025c   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00025e   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
000260   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000262   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000264   ffe9
000266   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000268   ffea
00026a   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
00026c   f002
00026e   7202     btg     0x02, 0x1, 0x0   	BTG	r0x02, 1
000270   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000272   ffe9
000274   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000276   ffea
000278   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
00027a   ffef
00027c   ec0c     call    0x003818, 0x0    	CALL	_calc_fx_modified
00027e   f01c
                                           _01001_DS_:
                                           ;	.line	1024; common/controller-axe.c	if (is_top_button_pressed(M_3)) {
000280   512b     movf    0x2b, 0x0, 0x1   	MOVF	(_last + 1), W, B
000282   e134     bnz     0x0002ec         	BNZ	_01007_DS_
000284   51eb     movf    0xeb, 0x0, 0x1   	MOVF	(_curr + 1), W, B
000286   0a04     xorlw   0x04             	XORLW	0x04
000288   e131     bnz     0x0002ec         	BNZ	_01007_DS_
                                           ;	.line	1025; common/controller-axe.c	toggle_fx(pitch)
00028a   51f7     movf    0xf7, 0x0, 0x1   	MOVF	(_curr + 13), W, B
00028c   e015     bz      0x0002b8         	BZ	_01004_DS_
00028e   51fc     movf    0xfc, 0x0, 0x1   	MOVF	(_curr + 18), W, B
000290   11f9     iorwf   0xf9, 0x0, 0x1   	IORWF	(_curr + 15), W, B
000292   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000294   0e04     movlw   0x04             	MOVLW	0x04
000296   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
000298   7400     btg     0x00, 0x2, 0x0   	BTG	r0x00, 2
00029a   0efb     movlw   0xfb             	MOVLW	0xfb
00029c   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
00029e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0002a0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0002a2   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
0002a4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0002a6   6ff9     movwf   0xf9, 0x1        	MOVWF	(_curr + 15), B
0002a8   0efb     movlw   0xfb             	MOVLW	0xfb
0002aa   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
0002ac   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
0002ae   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0002b0   6ffc     movwf   0xfc, 0x1        	MOVWF	(_curr + 18), B
0002b2   ec0c     call    0x003818, 0x0    	CALL	_calc_fx_modified
0002b4   f01c
0002b6   d01a     bra     0x0002ec         	BRA	_01007_DS_
                                           ; ;multiply lit val:0x03 by variable (_curr + 12) and store in r0x00
                                           _01004_DS_:
0002b8   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
0002ba   0d03     mullw   0x03             	MULLW	0x03
0002bc   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0002be   f000
0002c0   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0002c2   0ef8     movlw   0xf8             	MOVLW	LOW(_curr + 14)
0002c4   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0002c6   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 14)
0002c8   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0002ca   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
0002cc   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0002ce   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0002d0   ffe9
0002d2   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0002d4   ffea
0002d6   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
0002d8   f002
0002da   7402     btg     0x02, 0x2, 0x0   	BTG	r0x02, 2
0002dc   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0002de   ffe9
0002e0   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0002e2   ffea
0002e4   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
0002e6   ffef
0002e8   ec0c     call    0x003818, 0x0    	CALL	_calc_fx_modified
0002ea   f01c
                                           _01007_DS_:
                                           ;	.line	1027; common/controller-axe.c	if (is_top_button_pressed(M_4)) {
0002ec   512b     movf    0x2b, 0x0, 0x1   	MOVF	(_last + 1), W, B
0002ee   e134     bnz     0x000358         	BNZ	_01013_DS_
0002f0   51eb     movf    0xeb, 0x0, 0x1   	MOVF	(_curr + 1), W, B
0002f2   0a08     xorlw   0x08             	XORLW	0x08
0002f4   e131     bnz     0x000358         	BNZ	_01013_DS_
                                           ;	.line	1028; common/controller-axe.c	toggle_fx(chorus)
0002f6   51f7     movf    0xf7, 0x0, 0x1   	MOVF	(_curr + 13), W, B
0002f8   e015     bz      0x000324         	BZ	_01010_DS_
0002fa   51fc     movf    0xfc, 0x0, 0x1   	MOVF	(_curr + 18), W, B
0002fc   11f9     iorwf   0xf9, 0x0, 0x1   	IORWF	(_curr + 15), W, B
0002fe   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000300   0e08     movlw   0x08             	MOVLW	0x08
000302   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
000304   7600     btg     0x00, 0x3, 0x0   	BTG	r0x00, 3
000306   0ef7     movlw   0xf7             	MOVLW	0xf7
000308   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
00030a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00030c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00030e   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
000310   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000312   6ff9     movwf   0xf9, 0x1        	MOVWF	(_curr + 15), B
000314   0ef7     movlw   0xf7             	MOVLW	0xf7
000316   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
000318   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
00031a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00031c   6ffc     movwf   0xfc, 0x1        	MOVWF	(_curr + 18), B
00031e   ec0c     call    0x003818, 0x0    	CALL	_calc_fx_modified
000320   f01c
000322   d01a     bra     0x000358         	BRA	_01013_DS_
                                           ; ;multiply lit val:0x03 by variable (_curr + 12) and store in r0x00
                                           _01010_DS_:
000324   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
000326   0d03     mullw   0x03             	MULLW	0x03
000328   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
00032a   f000
00032c   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00032e   0ef8     movlw   0xf8             	MOVLW	LOW(_curr + 14)
000330   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000332   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 14)
000334   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000336   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
000338   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
00033a   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00033c   ffe9
00033e   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000340   ffea
000342   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000344   f002
000346   7602     btg     0x02, 0x3, 0x0   	BTG	r0x02, 3
000348   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00034a   ffe9
00034c   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
00034e   ffea
000350   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
000352   ffef
000354   ec0c     call    0x003818, 0x0    	CALL	_calc_fx_modified
000356   f01c
                                           _01013_DS_:
                                           ;	.line	1030; common/controller-axe.c	if (is_top_button_pressed(M_5)) {
000358   512b     movf    0x2b, 0x0, 0x1   	MOVF	(_last + 1), W, B
00035a   e134     bnz     0x0003c4         	BNZ	_01019_DS_
00035c   51eb     movf    0xeb, 0x0, 0x1   	MOVF	(_curr + 1), W, B
00035e   0a10     xorlw   0x10             	XORLW	0x10
000360   e131     bnz     0x0003c4         	BNZ	_01019_DS_
                                           ;	.line	1031; common/controller-axe.c	toggle_fx(delay)
000362   51f7     movf    0xf7, 0x0, 0x1   	MOVF	(_curr + 13), W, B
000364   e015     bz      0x000390         	BZ	_01016_DS_
000366   51fc     movf    0xfc, 0x0, 0x1   	MOVF	(_curr + 18), W, B
000368   11f9     iorwf   0xf9, 0x0, 0x1   	IORWF	(_curr + 15), W, B
00036a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00036c   0e10     movlw   0x10             	MOVLW	0x10
00036e   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
000370   7800     btg     0x00, 0x4, 0x0   	BTG	r0x00, 4
000372   0eef     movlw   0xef             	MOVLW	0xef
000374   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
000376   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000378   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00037a   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
00037c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00037e   6ff9     movwf   0xf9, 0x1        	MOVWF	(_curr + 15), B
000380   0eef     movlw   0xef             	MOVLW	0xef
000382   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
000384   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
000386   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000388   6ffc     movwf   0xfc, 0x1        	MOVWF	(_curr + 18), B
00038a   ec0c     call    0x003818, 0x0    	CALL	_calc_fx_modified
00038c   f01c
00038e   d01a     bra     0x0003c4         	BRA	_01019_DS_
                                           ; ;multiply lit val:0x03 by variable (_curr + 12) and store in r0x00
                                           _01016_DS_:
000390   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
000392   0d03     mullw   0x03             	MULLW	0x03
000394   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000396   f000
000398   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00039a   0ef8     movlw   0xf8             	MOVLW	LOW(_curr + 14)
00039c   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00039e   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 14)
0003a0   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0003a2   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
0003a4   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0003a6   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0003a8   ffe9
0003aa   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0003ac   ffea
0003ae   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
0003b0   f002
0003b2   7802     btg     0x02, 0x4, 0x0   	BTG	r0x02, 4
0003b4   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0003b6   ffe9
0003b8   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0003ba   ffea
0003bc   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
0003be   ffef
0003c0   ec0c     call    0x003818, 0x0    	CALL	_calc_fx_modified
0003c2   f01c
                                           _01019_DS_:
                                           ;	.line	1033; common/controller-axe.c	if (is_top_button_pressed(M_6)) {
0003c4   512b     movf    0x2b, 0x0, 0x1   	MOVF	(_last + 1), W, B
0003c6   e134     bnz     0x000430         	BNZ	_01025_DS_
0003c8   51eb     movf    0xeb, 0x0, 0x1   	MOVF	(_curr + 1), W, B
0003ca   0a20     xorlw   0x20             	XORLW	0x20
0003cc   e131     bnz     0x000430         	BNZ	_01025_DS_
                                           ;	.line	1034; common/controller-axe.c	toggle_fx(filter)
0003ce   51f7     movf    0xf7, 0x0, 0x1   	MOVF	(_curr + 13), W, B
0003d0   e015     bz      0x0003fc         	BZ	_01022_DS_
0003d2   51fc     movf    0xfc, 0x0, 0x1   	MOVF	(_curr + 18), W, B
0003d4   11f9     iorwf   0xf9, 0x0, 0x1   	IORWF	(_curr + 15), W, B
0003d6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0003d8   0e20     movlw   0x20             	MOVLW	0x20
0003da   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
0003dc   7a00     btg     0x00, 0x5, 0x0   	BTG	r0x00, 5
0003de   0edf     movlw   0xdf             	MOVLW	0xdf
0003e0   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
0003e2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0003e4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0003e6   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
0003e8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0003ea   6ff9     movwf   0xf9, 0x1        	MOVWF	(_curr + 15), B
0003ec   0edf     movlw   0xdf             	MOVLW	0xdf
0003ee   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
0003f0   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
0003f2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0003f4   6ffc     movwf   0xfc, 0x1        	MOVWF	(_curr + 18), B
0003f6   ec0c     call    0x003818, 0x0    	CALL	_calc_fx_modified
0003f8   f01c
0003fa   d01a     bra     0x000430         	BRA	_01025_DS_
                                           ; ;multiply lit val:0x03 by variable (_curr + 12) and store in r0x00
                                           _01022_DS_:
0003fc   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
0003fe   0d03     mullw   0x03             	MULLW	0x03
000400   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000402   f000
000404   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000406   0ef8     movlw   0xf8             	MOVLW	LOW(_curr + 14)
000408   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00040a   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 14)
00040c   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00040e   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
000410   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000412   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000414   ffe9
000416   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000418   ffea
00041a   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
00041c   f002
00041e   7a02     btg     0x02, 0x5, 0x0   	BTG	r0x02, 5
000420   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000422   ffe9
000424   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000426   ffea
000428   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
00042a   ffef
00042c   ec0c     call    0x003818, 0x0    	CALL	_calc_fx_modified
00042e   f01c
                                           _01025_DS_:
                                           ;	.line	1038; common/controller-axe.c	if (is_top_button_pressed(M_7)) {
000430   512b     movf    0x2b, 0x0, 0x1   	MOVF	(_last + 1), W, B
000432   e108     bnz     0x000444         	BNZ	_01031_DS_
000434   51eb     movf    0xeb, 0x0, 0x1   	MOVF	(_curr + 1), W, B
000436   0a40     xorlw   0x40             	XORLW	0x40
000438   e105     bnz     0x000444         	BNZ	_01031_DS_
                                           ;	.line	1039; common/controller-axe.c	prev_song();
00043a   ec7d     call    0x0042fa, 0x0    	CALL	_prev_song
00043c   f021
                                           ;	.line	1040; common/controller-axe.c	timers.top_7 = (u8)0x80;
00043e   0e80     movlw   0x80             	MOVLW	0x80
000440   6f43     movwf   0x43, 0x1        	MOVWF	(_timers + 3), B
000442   d010     bra     0x000464         	BRA	_01032_DS_
                                           _01031_DS_:
                                           ;	.line	1041; common/controller-axe.c	} else if (is_top_button_released(M_7)) {
000444   c22b     movff   0x22b, 0x000     	MOVFF	(_last + 1), r0x00
000446   f000
000448   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00044a   0e40     movlw   0x40             	MOVLW	0x40
00044c   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
00044e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000450   0a40     xorlw   0x40             	XORLW	0x40
000452   e102     bnz     0x000458         	BNZ	_01369_DS_
000454   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000456   e001     bz      0x00045a         	BZ	_01370_DS_
                                           _01369_DS_:
000458   d005     bra     0x000464         	BRA	_01032_DS_
                                           _01370_DS_:
00045a   c1eb     movff   0x1eb, 0x000     	MOVFF	(_curr + 1), r0x00
00045c   f000
00045e   bc00     btfsc   0x00, 0x6, 0x0   	BTFSC	r0x00, 6
000460   d001     bra     0x000464         	BRA	_01032_DS_
                                           ;	.line	1042; common/controller-axe.c	timers.top_7 = (u8)0x00;
000462   6b43     clrf    0x43, 0x1        	CLRF	(_timers + 3), B
                                           _01032_DS_:
                                           ;	.line	1044; common/controller-axe.c	if (is_top_button_pressed(M_8)) {
000464   512b     movf    0x2b, 0x0, 0x1   	MOVF	(_last + 1), W, B
000466   e108     bnz     0x000478         	BNZ	_01038_DS_
000468   51eb     movf    0xeb, 0x0, 0x1   	MOVF	(_curr + 1), W, B
00046a   0a80     xorlw   0x80             	XORLW	0x80
00046c   e105     bnz     0x000478         	BNZ	_01038_DS_
                                           ;	.line	1045; common/controller-axe.c	next_song();
00046e   ec65     call    0x0042ca, 0x0    	CALL	_next_song
000470   f021
                                           ;	.line	1046; common/controller-axe.c	timers.top_8 = (u8)0x80;
000472   0e80     movlw   0x80             	MOVLW	0x80
000474   6f44     movwf   0x44, 0x1        	MOVWF	(_timers + 4), B
000476   d010     bra     0x000498         	BRA	_01039_DS_
                                           _01038_DS_:
                                           ;	.line	1047; common/controller-axe.c	} else if (is_top_button_released(M_8)) {
000478   c22b     movff   0x22b, 0x000     	MOVFF	(_last + 1), r0x00
00047a   f000
00047c   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00047e   0e80     movlw   0x80             	MOVLW	0x80
000480   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
000482   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000484   0a80     xorlw   0x80             	XORLW	0x80
000486   e102     bnz     0x00048c         	BNZ	_01375_DS_
000488   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00048a   e001     bz      0x00048e         	BZ	_01376_DS_
                                           _01375_DS_:
00048c   d005     bra     0x000498         	BRA	_01039_DS_
                                           _01376_DS_:
00048e   c1eb     movff   0x1eb, 0x000     	MOVFF	(_curr + 1), r0x00
000490   f000
000492   be00     btfsc   0x00, 0x7, 0x0   	BTFSC	r0x00, 7
000494   d001     bra     0x000498         	BRA	_01039_DS_
                                           ;	.line	1048; common/controller-axe.c	timers.top_8 = (u8)0x00;
000496   6b44     clrf    0x44, 0x1        	CLRF	(_timers + 4), B
                                           _01039_DS_:
                                           ;	.line	1052; common/controller-axe.c	if ((curr.setlist_mode != last.setlist_mode) || (curr.sl_idx != last.sl_idx) || (curr.pr_idx != last.pr_idx)) {
000498   c1f2     movff   0x1f2, 0x000     	MOVFF	(_curr + 8), r0x00
00049a   f000
00049c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00049e   1932     xorwf   0x32, 0x0, 0x1   	XORWF	(_last + 8), W, B
0004a0   e106     bnz     0x0004ae         	BNZ	_01046_DS_
0004a2   51f3     movf    0xf3, 0x0, 0x1   	MOVF	(_curr + 9), W, B
0004a4   1933     xorwf   0x33, 0x0, 0x1   	XORWF	(_last + 9), W, B
0004a6   e103     bnz     0x0004ae         	BNZ	_01046_DS_
0004a8   51f4     movf    0xf4, 0x0, 0x1   	MOVF	(_curr + 10), W, B
0004aa   1934     xorwf   0x34, 0x0, 0x1   	XORWF	(_last + 10), W, B
0004ac   e032     bz      0x000512         	BZ	_01047_DS_
                                           _01046_DS_:
                                           ;	.line	1056; common/controller-axe.c	if (curr.setlist_mode == 1) {
0004ae   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0004b0   0a01     xorlw   0x01             	XORLW	0x01
0004b2   e10d     bnz     0x0004ce         	BNZ	_01042_DS_
                                           ;	.line	1057; common/controller-axe.c	pr_num = sl.entries[curr.sl_idx].program;
0004b4   0e03     movlw   0x03             	MOVLW	LOW(_sl + 3)
0004b6   25f3     addwf   0xf3, 0x0, 0x1   	ADDWF	(_curr + 9), W, B
0004b8   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0004ba   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0004bc   0e01     movlw   0x01             	MOVLW	HIGH(_sl + 3)
0004be   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0004c0   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0004c2   ffe9
0004c4   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0004c6   ffea
0004c8   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0004ca   f000
0004cc   d002     bra     0x0004d2         	BRA	_01043_DS_
                                           _01042_DS_:
                                           ;	.line	1059; common/controller-axe.c	pr_num = curr.pr_idx;
0004ce   c1f4     movff   0x1f4, 0x000     	MOVFF	(_curr + 10), r0x00
0004d0   f000
                                           ; ;multiply lit val:0x40 by variable r0x00 and store in r0x00
                                           _01043_DS_:
                                           ;	.line	1064; common/controller-axe.c	flash_load((u16) (pr_num * sizeof(struct program)), sizeof(struct program), (u8 *) &pr);
0004d2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0004d4   0d40     mullw   0x40             	MULLW	0x40
0004d6   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0004d8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0004da   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0004dc   f000
0004de   0e80     movlw   0x80             	MOVLW	0x80
0004e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004e2   0e01     movlw   0x01             	MOVLW	HIGH(_pr)
0004e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004e6   0e40     movlw   0x40             	MOVLW	LOW(_pr)
0004e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004ea   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0004ec   0e40     movlw   0x40             	MOVLW	0x40
0004ee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004f0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0004f2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004f4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0004f6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004f8   ec77     call    0x002aee, 0x0    	CALL	_flash_load
0004fa   f015
0004fc   0e07     movlw   0x07             	MOVLW	0x07
0004fe   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	1065; common/controller-axe.c	curr.modified = 0;
000500   6bff     clrf    0xff, 0x1        	CLRF	(_curr + 21), B
                                           ;	.line	1068; common/controller-axe.c	curr.sc_idx = 0;
000502   6bf5     clrf    0xf5, 0x1        	CLRF	(_curr + 11), B
                                           ;	.line	1069; common/controller-axe.c	if (pr.name_index == (u16)0) {
000504   5140     movf    0x40, 0x0, 0x1   	MOVF	_pr, W, B
000506   1141     iorwf   0x41, 0x0, 0x1   	IORWF	(_pr + 1), W, B
000508   e102     bnz     0x00050e         	BNZ	_01045_DS_
                                           ;	.line	1070; common/controller-axe.c	scene_default();
00050a   ec2d     call    0x00305a, 0x0    	CALL	_scene_default
00050c   f018
                                           _01045_DS_:
                                           ;	.line	1074; common/controller-axe.c	last.sc_idx = ~curr.sc_idx;
00050e   1df5     comf    0xf5, 0x0, 0x1   	COMF	(_curr + 11), W, B
000510   6f35     movwf   0x35, 0x1        	MOVWF	(_last + 11), B
                                           _01047_DS_:
                                           ;	.line	1077; common/controller-axe.c	if (curr.sc_idx != last.sc_idx) {
000512   c235     movff   0x235, 0x000     	MOVFF	(_last + 11), r0x00
000514   f000
000516   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
000518   1800     xorwf   0x00, 0x0, 0x0   	XORWF	r0x00, W
00051a   e102     bnz     0x000520         	BNZ	_01387_DS_
00051c   efa2     goto    0x000944         	GOTO	_01056_DS_
00051e   f004
                                           ; ;multiply lit val:0x06 by variable r0x00 and store in r0x00
                                           _01387_DS_:
                                           ;	.line	1081; common/controller-axe.c	struct_copy_amp(pr.scene[last.sc_idx].amp[0], curr.amp[0]);
000520   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000522   0d06     mullw   0x06             	MULLW	0x06
000524   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000526   f000
000528   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00052a   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
00052c   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00052e   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
000530   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000532   c1f8     movff   0x1f8, 0x002     	MOVFF	(_curr + 14), r0x02
000534   f002
000536   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000538   ffe9
00053a   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
00053c   ffea
00053e   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
000540   ffef
                                           ; ;multiply lit val:0x06 by variable (_last + 11) and store in r0x00
000542   5135     movf    0x35, 0x0, 0x1   	MOVF	(_last + 11), W, B
000544   0d06     mullw   0x06             	MULLW	0x06
000546   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000548   f000
00054a   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00054c   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
00054e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000550   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
000552   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000554   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
000556   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000558   c1f9     movff   0x1f9, 0x002     	MOVFF	(_curr + 15), r0x02
00055a   f002
00055c   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00055e   ffe9
000560   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000562   ffea
000564   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
000566   ffef
                                           ; ;multiply lit val:0x06 by variable (_last + 11) and store in r0x00
000568   5135     movf    0x35, 0x0, 0x1   	MOVF	(_last + 11), W, B
00056a   0d06     mullw   0x06             	MULLW	0x06
00056c   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
00056e   f000
000570   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000572   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
000574   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000576   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
000578   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00057a   0e02     movlw   0x02             	MOVLW	0x02
00057c   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00057e   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
000580   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000582   c1fa     movff   0x1fa, 0x002     	MOVFF	(_curr + 16), r0x02
000584   f002
000586   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000588   ffe9
00058a   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
00058c   ffea
00058e   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
000590   ffef
                                           ; ;multiply lit val:0x06 by variable (_last + 11) and store in r0x00
                                           ;	.line	1082; common/controller-axe.c	struct_copy_amp(pr.scene[last.sc_idx].amp[1], curr.amp[1]);
000592   5135     movf    0x35, 0x0, 0x1   	MOVF	(_last + 11), W, B
000594   0d06     mullw   0x06             	MULLW	0x06
000596   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000598   f000
00059a   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00059c   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
00059e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0005a0   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
0005a2   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0005a4   0e03     movlw   0x03             	MOVLW	0x03
0005a6   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0005a8   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0005aa   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0005ac   c1fb     movff   0x1fb, 0x002     	MOVFF	(_curr + 17), r0x02
0005ae   f002
0005b0   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0005b2   ffe9
0005b4   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0005b6   ffea
0005b8   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
0005ba   ffef
                                           ; ;multiply lit val:0x06 by variable (_last + 11) and store in r0x00
0005bc   5135     movf    0x35, 0x0, 0x1   	MOVF	(_last + 11), W, B
0005be   0d06     mullw   0x06             	MULLW	0x06
0005c0   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0005c2   f000
0005c4   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0005c6   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
0005c8   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0005ca   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
0005cc   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0005ce   0e04     movlw   0x04             	MOVLW	0x04
0005d0   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0005d2   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0005d4   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0005d6   c1fc     movff   0x1fc, 0x002     	MOVFF	(_curr + 18), r0x02
0005d8   f002
0005da   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0005dc   ffe9
0005de   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0005e0   ffea
0005e2   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
0005e4   ffef
                                           ; ;multiply lit val:0x06 by variable (_last + 11) and store in r0x00
0005e6   5135     movf    0x35, 0x0, 0x1   	MOVF	(_last + 11), W, B
0005e8   0d06     mullw   0x06             	MULLW	0x06
0005ea   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0005ec   f000
0005ee   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0005f0   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
0005f2   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0005f4   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
0005f6   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0005f8   0e05     movlw   0x05             	MOVLW	0x05
0005fa   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0005fc   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0005fe   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000600   c1fd     movff   0x1fd, 0x002     	MOVFF	(_curr + 19), r0x02
000602   f002
000604   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000606   ffe9
000608   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
00060a   ffea
00060c   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
00060e   ffef
                                           ;	.line	1085; common/controller-axe.c	if ((pr.scene[curr.sc_idx].amp[0].gain == 0) && (pr.scene[curr.sc_idx].amp[0].volume == 0) &&
000610   c1f5     movff   0x1f5, 0x000     	MOVFF	(_curr + 11), r0x00
000612   f000
                                           ; ;multiply lit val:0x06 by variable r0x00 and store in r0x01
000614   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000616   0d06     mullw   0x06             	MULLW	0x06
000618   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00061a   f001
00061c   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
00061e   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
000620   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
000622   6a03     clrf    0x03, 0x0        	CLRF	r0x03
000624   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
000626   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
000628   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
00062a   ffe9
00062c   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
00062e   ffea
000630   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000632   f002
000634   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000636   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
000638   d106     bra     0x000846         	BRA	_01051_DS_
00063a   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
00063c   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
00063e   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
000640   6a03     clrf    0x03, 0x0        	CLRF	r0x03
000642   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
000644   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
000646   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000648   0f02     addlw   0x02             	ADDLW	0x02
00064a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00064c   0e00     movlw   0x00             	MOVLW	0x00
00064e   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
000650   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000652   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000654   ffe9
000656   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
000658   ffea
00065a   cfef     movff   0xfef, 0x004     	MOVFF	INDF0, r0x04
00065c   f004
00065e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000660   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
000662   d0f1     bra     0x000846         	BRA	_01051_DS_
                                           ;	.line	1086; common/controller-axe.c	(pr.scene[curr.sc_idx].amp[1].gain == 0) && (pr.scene[curr.sc_idx].amp[1].volume == 0)) {
000664   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000666   0f03     addlw   0x03             	ADDLW	0x03
000668   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00066a   0e00     movlw   0x00             	MOVLW	0x00
00066c   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
00066e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000670   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000672   ffe9
000674   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
000676   ffea
000678   cfef     movff   0xfef, 0x004     	MOVFF	INDF0, r0x04
00067a   f004
00067c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00067e   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
000680   d0e2     bra     0x000846         	BRA	_01051_DS_
000682   0e05     movlw   0x05             	MOVLW	0x05
000684   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
000686   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
000688   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
00068a   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
00068c   ffe9
00068e   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
000690   ffea
000692   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000694   f002
000696   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000698   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
00069a   d0d5     bra     0x000846         	BRA	_01051_DS_
                                           ;	.line	1088; common/controller-axe.c	struct_copy_amp(pr.scene[curr.sc_idx].amp[0], pr.scene[curr.sc_idx-1].amp[0]);
00069c   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00069e   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
0006a0   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
0006a2   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
0006a4   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
0006a6   0600     decf    0x00, 0x1, 0x0   	DECF	r0x00, F
                                           ; ;multiply lit val:0x06 by variable r0x00 and store in r0x00
0006a8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0006aa   0d06     mullw   0x06             	MULLW	0x06
0006ac   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0006ae   f000
0006b0   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0006b2   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
0006b4   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0006b6   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
0006b8   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
0006ba   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0006bc   ffe9
0006be   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
0006c0   ffea
0006c2   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0006c4   f000
0006c6   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
0006c8   ffe9
0006ca   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
0006cc   ffea
0006ce   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0006d0   ffef
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x00
0006d2   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
0006d4   0d06     mullw   0x06             	MULLW	0x06
0006d6   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0006d8   f000
0006da   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0006dc   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
0006de   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0006e0   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
0006e2   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0006e4   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
0006e6   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0006e8   05f5     decf    0xf5, 0x0, 0x1   	DECF	(_curr + 11), W, B
                                           ; ;multiply lit val:0x06 by variable r0x02 and store in r0x02
0006ea   0d06     mullw   0x06             	MULLW	0x06
0006ec   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
0006ee   f002
0006f0   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0006f2   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
0006f4   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
0006f6   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
0006f8   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
0006fa   4a02     infsnz  0x02, 0x1, 0x0   	INFSNZ	r0x02, F
0006fc   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
0006fe   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
000700   ffe9
000702   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
000704   ffea
000706   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000708   f002
00070a   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00070c   ffe9
00070e   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000710   ffea
000712   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
000714   ffef
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x00
000716   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
000718   0d06     mullw   0x06             	MULLW	0x06
00071a   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
00071c   f000
00071e   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000720   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
000722   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000724   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
000726   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000728   0e02     movlw   0x02             	MOVLW	0x02
00072a   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00072c   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
00072e   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000730   05f5     decf    0xf5, 0x0, 0x1   	DECF	(_curr + 11), W, B
                                           ; ;multiply lit val:0x06 by variable r0x02 and store in r0x02
000732   0d06     mullw   0x06             	MULLW	0x06
000734   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
000736   f002
000738   6a03     clrf    0x03, 0x0        	CLRF	r0x03
00073a   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
00073c   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
00073e   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
000740   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
000742   0e02     movlw   0x02             	MOVLW	0x02
000744   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
000746   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
000748   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
00074a   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
00074c   ffe9
00074e   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
000750   ffea
000752   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000754   f002
000756   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000758   ffe9
00075a   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
00075c   ffea
00075e   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
000760   ffef
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x00
                                           ;	.line	1089; common/controller-axe.c	struct_copy_amp(pr.scene[curr.sc_idx].amp[1], pr.scene[curr.sc_idx-1].amp[1]);
000762   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
000764   0d06     mullw   0x06             	MULLW	0x06
000766   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000768   f000
00076a   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00076c   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
00076e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000770   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
000772   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000774   0e03     movlw   0x03             	MOVLW	0x03
000776   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000778   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
00077a   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
00077c   05f5     decf    0xf5, 0x0, 0x1   	DECF	(_curr + 11), W, B
                                           ; ;multiply lit val:0x06 by variable r0x02 and store in r0x02
00077e   0d06     mullw   0x06             	MULLW	0x06
000780   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
000782   f002
000784   6a03     clrf    0x03, 0x0        	CLRF	r0x03
000786   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
000788   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
00078a   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
00078c   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
00078e   0e03     movlw   0x03             	MOVLW	0x03
000790   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
000792   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
000794   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
000796   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
000798   ffe9
00079a   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
00079c   ffea
00079e   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
0007a0   f002
0007a2   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0007a4   ffe9
0007a6   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0007a8   ffea
0007aa   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
0007ac   ffef
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x00
0007ae   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
0007b0   0d06     mullw   0x06             	MULLW	0x06
0007b2   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0007b4   f000
0007b6   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0007b8   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
0007ba   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0007bc   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
0007be   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0007c0   0e04     movlw   0x04             	MOVLW	0x04
0007c2   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0007c4   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0007c6   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0007c8   05f5     decf    0xf5, 0x0, 0x1   	DECF	(_curr + 11), W, B
                                           ; ;multiply lit val:0x06 by variable r0x02 and store in r0x02
0007ca   0d06     mullw   0x06             	MULLW	0x06
0007cc   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
0007ce   f002
0007d0   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0007d2   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
0007d4   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
0007d6   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
0007d8   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
0007da   0e04     movlw   0x04             	MOVLW	0x04
0007dc   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
0007de   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0007e0   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
0007e2   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
0007e4   ffe9
0007e6   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
0007e8   ffea
0007ea   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
0007ec   f002
0007ee   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0007f0   ffe9
0007f2   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0007f4   ffea
0007f6   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
0007f8   ffef
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x00
0007fa   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
0007fc   0d06     mullw   0x06             	MULLW	0x06
0007fe   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000800   f000
000802   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000804   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
000806   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000808   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
00080a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00080c   0e05     movlw   0x05             	MOVLW	0x05
00080e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000810   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
000812   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000814   05f5     decf    0xf5, 0x0, 0x1   	DECF	(_curr + 11), W, B
                                           ; ;multiply lit val:0x06 by variable r0x02 and store in r0x02
000816   0d06     mullw   0x06             	MULLW	0x06
000818   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
00081a   f002
00081c   6a03     clrf    0x03, 0x0        	CLRF	r0x03
00081e   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
000820   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
000822   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
000824   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
000826   0e05     movlw   0x05             	MOVLW	0x05
000828   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
00082a   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
00082c   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
00082e   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
000830   ffe9
000832   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
000834   ffea
000836   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000838   f002
00083a   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00083c   ffe9
00083e   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000840   ffea
000842   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
000844   ffef
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x00
                                           _01051_DS_:
                                           ;	.line	1093; common/controller-axe.c	struct_copy_amp(curr.amp[0], pr.scene[curr.sc_idx].amp[0]);
000846   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
000848   0d06     mullw   0x06             	MULLW	0x06
00084a   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
00084c   f000
00084e   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000850   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
000852   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000854   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
000856   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000858   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00085a   ffe9
00085c   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
00085e   ffea
000860   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
000862   f000
000864   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000866   6ff8     movwf   0xf8, 0x1        	MOVWF	(_curr + 14), B
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x00
000868   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
00086a   0d06     mullw   0x06             	MULLW	0x06
00086c   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
00086e   f000
000870   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000872   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
000874   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000876   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
000878   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00087a   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
00087c   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
00087e   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000880   ffe9
000882   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000884   ffea
000886   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
000888   f000
00088a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00088c   6ff9     movwf   0xf9, 0x1        	MOVWF	(_curr + 15), B
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x00
00088e   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
000890   0d06     mullw   0x06             	MULLW	0x06
000892   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000894   f000
000896   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000898   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
00089a   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00089c   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
00089e   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0008a0   0e02     movlw   0x02             	MOVLW	0x02
0008a2   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0008a4   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0008a6   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0008a8   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0008aa   ffe9
0008ac   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0008ae   ffea
0008b0   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0008b2   f000
0008b4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0008b6   6ffa     movwf   0xfa, 0x1        	MOVWF	(_curr + 16), B
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x00
                                           ;	.line	1094; common/controller-axe.c	struct_copy_amp(curr.amp[1], pr.scene[curr.sc_idx].amp[1]);
0008b8   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
0008ba   0d06     mullw   0x06             	MULLW	0x06
0008bc   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0008be   f000
0008c0   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0008c2   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
0008c4   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0008c6   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
0008c8   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0008ca   0e03     movlw   0x03             	MOVLW	0x03
0008cc   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0008ce   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0008d0   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0008d2   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0008d4   ffe9
0008d6   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0008d8   ffea
0008da   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0008dc   f000
0008de   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0008e0   6ffb     movwf   0xfb, 0x1        	MOVWF	(_curr + 17), B
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x00
0008e2   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
0008e4   0d06     mullw   0x06             	MULLW	0x06
0008e6   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0008e8   f000
0008ea   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0008ec   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
0008ee   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0008f0   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
0008f2   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0008f4   0e04     movlw   0x04             	MOVLW	0x04
0008f6   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0008f8   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0008fa   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0008fc   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0008fe   ffe9
000900   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000902   ffea
000904   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
000906   f000
000908   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00090a   6ffc     movwf   0xfc, 0x1        	MOVWF	(_curr + 18), B
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x00
00090c   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
00090e   0d06     mullw   0x06             	MULLW	0x06
000910   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000912   f000
000914   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000916   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
000918   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00091a   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
00091c   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00091e   0e05     movlw   0x05             	MOVLW	0x05
000920   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000922   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
000924   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000926   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000928   ffe9
00092a   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
00092c   ffea
00092e   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
000930   f000
000932   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000934   6ffd     movwf   0xfd, 0x1        	MOVWF	(_curr + 19), B
                                           ;	.line	1097; common/controller-axe.c	curr.modified = 0;
000936   6bff     clrf    0xff, 0x1        	CLRF	(_curr + 21), B
                                           ;	.line	1098; common/controller-axe.c	calc_volume_modified();
000938   ec63     call    0x0036c6, 0x0    	CALL	_calc_volume_modified
00093a   f01b
                                           ;	.line	1099; common/controller-axe.c	calc_fx_modified();
00093c   ec0c     call    0x003818, 0x0    	CALL	_calc_fx_modified
00093e   f01c
                                           ;	.line	1100; common/controller-axe.c	calc_gain_modified();
000940   ec60     call    0x0038c0, 0x0    	CALL	_calc_gain_modified
000942   f01c
                                           _01056_DS_:
                                           ;	.line	1103; common/controller-axe.c	calc_midi();
000944   ec3b     call    0x001876, 0x0    	CALL	_calc_midi
000946   f00c
                                           ;	.line	1104; common/controller-axe.c	calc_leds();
000948   ecdf     call    0x0009be, 0x0    	CALL	_calc_leds
00094a   f004
                                           ;	.line	1107; common/controller-axe.c	struct_copy_state(last, curr);
00094c   51ea     movf    0xea, 0x0, 0x1   	MOVF	_curr, W, B
00094e   6f2a     movwf   0x2a, 0x1        	MOVWF	_last, B
000950   51eb     movf    0xeb, 0x0, 0x1   	MOVF	(_curr + 1), W, B
000952   6f2b     movwf   0x2b, 0x1        	MOVWF	(_last + 1), B
000954   51ec     movf    0xec, 0x0, 0x1   	MOVF	(_curr + 2), W, B
000956   6f2c     movwf   0x2c, 0x1        	MOVWF	(_last + 2), B
000958   51ed     movf    0xed, 0x0, 0x1   	MOVF	(_curr + 3), W, B
00095a   6f2d     movwf   0x2d, 0x1        	MOVWF	(_last + 3), B
00095c   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
00095e   6f2e     movwf   0x2e, 0x1        	MOVWF	(_last + 4), B
000960   51ef     movf    0xef, 0x0, 0x1   	MOVF	(_curr + 5), W, B
000962   6f2f     movwf   0x2f, 0x1        	MOVWF	(_last + 5), B
000964   51f0     movf    0xf0, 0x0, 0x1   	MOVF	(_curr + 6), W, B
000966   6f30     movwf   0x30, 0x1        	MOVWF	(_last + 6), B
000968   51f1     movf    0xf1, 0x0, 0x1   	MOVF	(_curr + 7), W, B
00096a   6f31     movwf   0x31, 0x1        	MOVWF	(_last + 7), B
00096c   51f2     movf    0xf2, 0x0, 0x1   	MOVF	(_curr + 8), W, B
00096e   6f32     movwf   0x32, 0x1        	MOVWF	(_last + 8), B
000970   51f3     movf    0xf3, 0x0, 0x1   	MOVF	(_curr + 9), W, B
000972   6f33     movwf   0x33, 0x1        	MOVWF	(_last + 9), B
000974   51f4     movf    0xf4, 0x0, 0x1   	MOVF	(_curr + 10), W, B
000976   6f34     movwf   0x34, 0x1        	MOVWF	(_last + 10), B
000978   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
00097a   6f35     movwf   0x35, 0x1        	MOVWF	(_last + 11), B
00097c   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
00097e   6f36     movwf   0x36, 0x1        	MOVWF	(_last + 12), B
000980   51f7     movf    0xf7, 0x0, 0x1   	MOVF	(_curr + 13), W, B
000982   6f37     movwf   0x37, 0x1        	MOVWF	(_last + 13), B
000984   51f8     movf    0xf8, 0x0, 0x1   	MOVF	(_curr + 14), W, B
000986   6f38     movwf   0x38, 0x1        	MOVWF	(_last + 14), B
000988   51f9     movf    0xf9, 0x0, 0x1   	MOVF	(_curr + 15), W, B
00098a   6f39     movwf   0x39, 0x1        	MOVWF	(_last + 15), B
00098c   51fa     movf    0xfa, 0x0, 0x1   	MOVF	(_curr + 16), W, B
00098e   6f3a     movwf   0x3a, 0x1        	MOVWF	(_last + 16), B
000990   51fb     movf    0xfb, 0x0, 0x1   	MOVF	(_curr + 17), W, B
000992   6f3b     movwf   0x3b, 0x1        	MOVWF	(_last + 17), B
000994   51fc     movf    0xfc, 0x0, 0x1   	MOVF	(_curr + 18), W, B
000996   6f3c     movwf   0x3c, 0x1        	MOVWF	(_last + 18), B
000998   51fd     movf    0xfd, 0x0, 0x1   	MOVF	(_curr + 19), W, B
00099a   6f3d     movwf   0x3d, 0x1        	MOVWF	(_last + 19), B
00099c   51fe     movf    0xfe, 0x0, 0x1   	MOVF	(_curr + 20), W, B
00099e   6f3e     movwf   0x3e, 0x1        	MOVWF	(_last + 20), B
0009a0   51ff     movf    0xff, 0x0, 0x1   	MOVF	(_curr + 21), W, B
0009a2   6f3f     movwf   0x3f, 0x1        	MOVWF	(_last + 21), B
0009a4   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
0009a6   f005
0009a8   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
0009aa   f004
0009ac   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0009ae   f003
0009b0   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0009b2   f002
0009b4   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0009b6   f001
0009b8   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0009ba   f000
0009bc   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__calc_volume_modified	code
                                           _calc_volume_modified:
                                           ;	.line	927; common/controller-axe.c	static void calc_volume_modified(void) {
0036c6   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0036c8   ffe5
0036ca   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0036cc   ffe5
0036ce   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0036d0   ffe5
0036d2   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0036d4   ffe5
                                           ;	.line	928; common/controller-axe.c	curr.modified = (curr.modified & ~(u8) 0x44) |
0036d6   0ebb     movlw   0xbb             	MOVLW	0xbb
0036d8   15ff     andwf   0xff, 0x0, 0x1   	ANDWF	(_curr + 21), W, B
0036da   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x01
                                           ;	.line	929; common/controller-axe.c	((u8) (curr.amp[0].volume != origpr.scene[curr.sc_idx].amp[0].volume) << (u8) 2) |
0036dc   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
0036de   0d06     mullw   0x06             	MULLW	0x06
0036e0   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0036e2   f001
0036e4   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0036e6   0e84     movlw   0x84             	MOVLW	LOW(_origpr + 4)
0036e8   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
0036ea   0e01     movlw   0x01             	MOVLW	HIGH(_origpr + 4)
0036ec   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
0036ee   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0036f0   0f02     addlw   0x02             	ADDLW	0x02
0036f2   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0036f4   0e00     movlw   0x00             	MOVLW	0x00
0036f6   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
0036f8   c003     movff   0x003, 0xfe9     	MOVFF	r0x03, FSR0L
0036fa   ffe9
                                           ; =DF= MOVFF: SRC op r0x04 replaced by WREG
0036fc   6eea     movwf   0xea, 0x0        	MOVWF	FSR0H
0036fe   cfef     movff   0xfef, 0x003     	MOVFF	INDF0, r0x03
003700   f003
003702   51fa     movf    0xfa, 0x0, 0x1   	MOVF	(_curr + 16), W, B
003704   1803     xorwf   0x03, 0x0, 0x0   	XORWF	r0x03, W
003706   e103     bnz     0x00370e         	BNZ	_00928_DS_
003708   6a03     clrf    0x03, 0x0        	CLRF	r0x03
00370a   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
00370c   d001     bra     0x003710         	BRA	_00929_DS_
                                           _00928_DS_:
00370e   6a03     clrf    0x03, 0x0        	CLRF	r0x03
                                           _00929_DS_:
003710   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
003712   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
003714   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
003716   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
003718   6a03     clrf    0x03, 0x0        	CLRF	r0x03
00371a   3603     rlcf    0x03, 0x1, 0x0   	RLCF	r0x03, F
00371c   4403     rlncf   0x03, 0x0, 0x0   	RLNCF	r0x03, W
00371e   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
003720   0bfc     andlw   0xfc             	ANDLW	0xfc
003722   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
                                           ;	.line	930; common/controller-axe.c	((u8) (curr.amp[1].volume != origpr.scene[curr.sc_idx].amp[1].volume) << (u8) 6);
003724   0e05     movlw   0x05             	MOVLW	0x05
003726   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
003728   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
00372a   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
00372c   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
00372e   ffe9
003730   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
003732   ffea
003734   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
003736   f001
003738   51fd     movf    0xfd, 0x0, 0x1   	MOVF	(_curr + 19), W, B
00373a   1801     xorwf   0x01, 0x0, 0x0   	XORWF	r0x01, W
00373c   e103     bnz     0x003744         	BNZ	_00931_DS_
00373e   6a01     clrf    0x01, 0x0        	CLRF	r0x01
003740   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
003742   d001     bra     0x003746         	BRA	_00932_DS_
                                           _00931_DS_:
003744   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00932_DS_:
003746   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003748   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
00374a   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
00374c   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00374e   6a01     clrf    0x01, 0x0        	CLRF	r0x01
003750   3601     rlcf    0x01, 0x1, 0x0   	RLCF	r0x01, F
003752   4001     rrncf   0x01, 0x0, 0x0   	RRNCF	r0x01, W
003754   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
003756   0bc0     andlw   0xc0             	ANDLW	0xc0
003758   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
00375a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00375c   6fff     movwf   0xff, 0x1        	MOVWF	(_curr + 21), B
00375e   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003760   f003
003762   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003764   f002
003766   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003768   f001
00376a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00376c   f000
00376e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__calc_fx_modified	code
                                           _calc_fx_modified:
                                           ;	.line	921; common/controller-axe.c	static void calc_fx_modified(void) {
003818   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00381a   ffe5
00381c   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00381e   ffe5
003820   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003822   ffe5
003824   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003826   ffe5
                                           ;	.line	922; common/controller-axe.c	curr.modified = (curr.modified & ~(u8) 0x22) |
003828   0edd     movlw   0xdd             	MOVLW	0xdd
00382a   15ff     andwf   0xff, 0x0, 0x1   	ANDWF	(_curr + 21), W, B
00382c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x01
                                           ;	.line	923; common/controller-axe.c	((u8) (curr.amp[0].fx != origpr.scene[curr.sc_idx].amp[0].fx) << (u8) 1) |
00382e   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
003830   0d06     mullw   0x06             	MULLW	0x06
003832   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
003834   f001
003836   6a02     clrf    0x02, 0x0        	CLRF	r0x02
003838   0e84     movlw   0x84             	MOVLW	LOW(_origpr + 4)
00383a   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
00383c   0e01     movlw   0x01             	MOVLW	HIGH(_origpr + 4)
00383e   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
003840   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003842   0f01     addlw   0x01             	ADDLW	0x01
003844   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
003846   0e00     movlw   0x00             	MOVLW	0x00
003848   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
00384a   c003     movff   0x003, 0xfe9     	MOVFF	r0x03, FSR0L
00384c   ffe9
                                           ; =DF= MOVFF: SRC op r0x04 replaced by WREG
00384e   6eea     movwf   0xea, 0x0        	MOVWF	FSR0H
003850   cfef     movff   0xfef, 0x003     	MOVFF	INDF0, r0x03
003852   f003
003854   51f9     movf    0xf9, 0x0, 0x1   	MOVF	(_curr + 15), W, B
003856   1803     xorwf   0x03, 0x0, 0x0   	XORWF	r0x03, W
003858   e103     bnz     0x003860         	BNZ	_00916_DS_
00385a   6a03     clrf    0x03, 0x0        	CLRF	r0x03
00385c   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
00385e   d001     bra     0x003862         	BRA	_00917_DS_
                                           _00916_DS_:
003860   6a03     clrf    0x03, 0x0        	CLRF	r0x03
                                           _00917_DS_:
003862   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
003864   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
003866   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
003868   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00386a   6a03     clrf    0x03, 0x0        	CLRF	r0x03
00386c   3603     rlcf    0x03, 0x1, 0x0   	RLCF	r0x03, F
00386e   4403     rlncf   0x03, 0x0, 0x0   	RLNCF	r0x03, W
003870   0bfe     andlw   0xfe             	ANDLW	0xfe
003872   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
                                           ;	.line	924; common/controller-axe.c	((u8) (curr.amp[1].fx != origpr.scene[curr.sc_idx].amp[1].fx) << (u8) 5);
003874   0e04     movlw   0x04             	MOVLW	0x04
003876   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
003878   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
00387a   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
00387c   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
00387e   ffe9
003880   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
003882   ffea
003884   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
003886   f001
003888   51fc     movf    0xfc, 0x0, 0x1   	MOVF	(_curr + 18), W, B
00388a   1801     xorwf   0x01, 0x0, 0x0   	XORWF	r0x01, W
00388c   e103     bnz     0x003894         	BNZ	_00919_DS_
00388e   6a01     clrf    0x01, 0x0        	CLRF	r0x01
003890   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
003892   d001     bra     0x003896         	BRA	_00920_DS_
                                           _00919_DS_:
003894   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00920_DS_:
003896   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003898   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
00389a   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
00389c   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00389e   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0038a0   3601     rlcf    0x01, 0x1, 0x0   	RLCF	r0x01, F
0038a2   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
0038a4   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
0038a6   0be0     andlw   0xe0             	ANDLW	0xe0
0038a8   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
0038aa   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0038ac   6fff     movwf   0xff, 0x1        	MOVWF	(_curr + 21), B
0038ae   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0038b0   f003
0038b2   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0038b4   f002
0038b6   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0038b8   f001
0038ba   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0038bc   f000
0038be   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__calc_gain_modified	code
                                           _calc_gain_modified:
                                           ;	.line	915; common/controller-axe.c	static void calc_gain_modified(void) {
0038c0   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0038c2   ffe5
0038c4   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0038c6   ffe5
0038c8   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0038ca   ffe5
0038cc   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0038ce   ffe5
                                           ;	.line	916; common/controller-axe.c	curr.modified = (curr.modified & ~(u8) 0x11) |
0038d0   0eee     movlw   0xee             	MOVLW	0xee
0038d2   15ff     andwf   0xff, 0x0, 0x1   	ANDWF	(_curr + 21), W, B
0038d4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x01
                                           ;	.line	917; common/controller-axe.c	((u8) (curr.amp[0].gain != origpr.scene[curr.sc_idx].amp[0].gain) << (u8) 0) |
0038d6   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
0038d8   0d06     mullw   0x06             	MULLW	0x06
0038da   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0038dc   f001
0038de   0e84     movlw   0x84             	MOVLW	LOW(_origpr + 4)
0038e0   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
0038e2   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0038e4   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0038e6   0e01     movlw   0x01             	MOVLW	HIGH(_origpr + 4)
0038e8   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
0038ea   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
0038ec   ffe9
0038ee   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
0038f0   ffea
0038f2   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
0038f4   f002
0038f6   51f8     movf    0xf8, 0x0, 0x1   	MOVF	(_curr + 14), W, B
0038f8   1802     xorwf   0x02, 0x0, 0x0   	XORWF	r0x02, W
0038fa   e103     bnz     0x003902         	BNZ	_00904_DS_
0038fc   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0038fe   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
003900   d001     bra     0x003904         	BRA	_00905_DS_
                                           _00904_DS_:
003902   6a02     clrf    0x02, 0x0        	CLRF	r0x02
                                           _00905_DS_:
003904   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003906   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
003908   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
00390a   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00390c   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00390e   3602     rlcf    0x02, 0x1, 0x0   	RLCF	r0x02, F
003910   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003912   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
                                           ;	.line	918; common/controller-axe.c	((u8) (curr.amp[1].gain != origpr.scene[curr.sc_idx].amp[1].gain) << (u8) 4);
003914   6a02     clrf    0x02, 0x0        	CLRF	r0x02
003916   0e84     movlw   0x84             	MOVLW	LOW(_origpr + 4)
003918   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
00391a   0e01     movlw   0x01             	MOVLW	HIGH(_origpr + 4)
00391c   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
00391e   0e03     movlw   0x03             	MOVLW	0x03
003920   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
003922   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
003924   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
003926   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
003928   ffe9
00392a   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
00392c   ffea
00392e   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
003930   f001
003932   51fb     movf    0xfb, 0x0, 0x1   	MOVF	(_curr + 17), W, B
003934   1801     xorwf   0x01, 0x0, 0x0   	XORWF	r0x01, W
003936   e103     bnz     0x00393e         	BNZ	_00907_DS_
003938   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00393a   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
00393c   d001     bra     0x003940         	BRA	_00908_DS_
                                           _00907_DS_:
00393e   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00908_DS_:
003940   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003942   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
003944   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
003946   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
003948   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00394a   3601     rlcf    0x01, 0x1, 0x0   	RLCF	r0x01, F
00394c   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
00394e   0bf0     andlw   0xf0             	ANDLW	0xf0
003950   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
003952   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003954   6fff     movwf   0xff, 0x1        	MOVWF	(_curr + 21), B
003956   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003958   f003
00395a   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00395c   f002
00395e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003960   f001
003962   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003964   f000
003966   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__controller_10msec_timer	code
                                           _controller_10msec_timer:
                                           ;	.line	855; common/controller-axe.c	void controller_10msec_timer(void) {
00226a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00226c   ffe5
00226e   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002270   ffe5
                                           ;	.line	881; common/controller-axe.c	one_shot(bot,2,0x1F,curr_amp_reset)
002272   51ea     movf    0xea, 0x0, 0x1   	MOVF	_curr, W, B
002274   0a02     xorlw   0x02             	XORLW	0x02
002276   e117     bnz     0x0022a6         	BNZ	_00628_DS_
002278   c245     movff   0x245, 0x000     	MOVFF	(_timers + 5), r0x00
00227a   f000
00227c   0e80     movlw   0x80             	MOVLW	0x80
00227e   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
002280   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002282   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002284   e010     bz      0x0022a6         	BZ	_00628_DS_
002286   9e00     bcf     0x00, 0x7, 0x0   	BCF	r0x00, 7
002288   0e1f     movlw   0x1f             	MOVLW	0x1f
00228a   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
00228c   e20c     bc      0x0022a6         	BC	_00628_DS_
00228e   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
002290   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002292   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
002294   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002296   6f45     movwf   0x45, 0x1        	MOVWF	(_timers + 5), B
002298   9e01     bcf     0x01, 0x7, 0x0   	BCF	r0x01, 7
00229a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00229c   0a1f     xorlw   0x1f             	XORLW	0x1f
00229e   e103     bnz     0x0022a6         	BNZ	_00628_DS_
0022a0   6b45     clrf    0x45, 0x1        	CLRF	(_timers + 5), B
0022a2   ecab     call    0x003556, 0x0    	CALL	_curr_amp_reset
0022a4   f01a
                                           _00628_DS_:
                                           ;	.line	882; common/controller-axe.c	one_shot(bot,3,0x1F,curr_amp_toggle)
0022a6   51ea     movf    0xea, 0x0, 0x1   	MOVF	_curr, W, B
0022a8   0a04     xorlw   0x04             	XORLW	0x04
0022aa   e117     bnz     0x0022da         	BNZ	_00635_DS_
0022ac   c246     movff   0x246, 0x000     	MOVFF	(_timers + 6), r0x00
0022ae   f000
0022b0   0e80     movlw   0x80             	MOVLW	0x80
0022b2   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
0022b4   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0022b6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0022b8   e010     bz      0x0022da         	BZ	_00635_DS_
0022ba   9e00     bcf     0x00, 0x7, 0x0   	BCF	r0x00, 7
0022bc   0e1f     movlw   0x1f             	MOVLW	0x1f
0022be   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
0022c0   e20c     bc      0x0022da         	BC	_00635_DS_
0022c2   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
0022c4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0022c6   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
0022c8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0022ca   6f46     movwf   0x46, 0x1        	MOVWF	(_timers + 6), B
0022cc   9e01     bcf     0x01, 0x7, 0x0   	BCF	r0x01, 7
0022ce   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0022d0   0a1f     xorlw   0x1f             	XORLW	0x1f
0022d2   e103     bnz     0x0022da         	BNZ	_00635_DS_
0022d4   6b46     clrf    0x46, 0x1        	CLRF	(_timers + 6), B
0022d6   ecef     call    0x0043de, 0x0    	CALL	_curr_amp_toggle
0022d8   f021
                                           _00635_DS_:
                                           ;	.line	884; common/controller-axe.c	repeater(bot,4,0x20,0x01,curr_amp_dec)
0022da   51ea     movf    0xea, 0x0, 0x1   	MOVF	_curr, W, B
0022dc   0a08     xorlw   0x08             	XORLW	0x08
0022de   e124     bnz     0x002328         	BNZ	_00646_DS_
0022e0   c240     movff   0x240, 0x000     	MOVFF	_timers, r0x00
0022e2   f000
0022e4   0ec0     movlw   0xc0             	MOVLW	0xc0
0022e6   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
0022e8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0022ea   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0022ec   e008     bz      0x0022fe         	BZ	_00638_DS_
0022ee   0e3f     movlw   0x3f             	MOVLW	0x3f
0022f0   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
0022f2   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
0022f4   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
0022f6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0022f8   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
0022fa   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0022fc   6f40     movwf   0x40, 0x1        	MOVWF	_timers, B
                                           _00638_DS_:
0022fe   c240     movff   0x240, 0x000     	MOVFF	_timers, r0x00
002300   f000
002302   ae00     btfss   0x00, 0x7, 0x0   	BTFSS	r0x00, 7
002304   d009     bra     0x002318         	BRA	_00640_DS_
002306   0e3f     movlw   0x3f             	MOVLW	0x3f
002308   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
00230a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00230c   0e20     movlw   0x20             	MOVLW	0x20
00230e   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
002310   e303     bnc     0x002318         	BNC	_00640_DS_
002312   8c00     bsf     0x00, 0x6, 0x0   	BSF	r0x00, 6
002314   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002316   6f40     movwf   0x40, 0x1        	MOVWF	_timers, B
                                           _00640_DS_:
002318   c240     movff   0x240, 0x000     	MOVFF	_timers, r0x00
00231a   f000
00231c   ac00     btfss   0x00, 0x6, 0x0   	BTFSS	r0x00, 6
00231e   d004     bra     0x002328         	BRA	_00646_DS_
002320   b000     btfsc   0x00, 0x0, 0x0   	BTFSC	r0x00, 0
002322   d002     bra     0x002328         	BRA	_00646_DS_
002324   ecf7     call    0x0043ee, 0x0    	CALL	_curr_amp_dec
002326   f021
                                           _00646_DS_:
                                           ;	.line	885; common/controller-axe.c	repeater(bot,5,0x20,0x01,curr_amp_inc)
002328   51ea     movf    0xea, 0x0, 0x1   	MOVF	_curr, W, B
00232a   0a10     xorlw   0x10             	XORLW	0x10
00232c   e124     bnz     0x002376         	BNZ	_00656_DS_
00232e   c241     movff   0x241, 0x000     	MOVFF	(_timers + 1), r0x00
002330   f000
002332   0ec0     movlw   0xc0             	MOVLW	0xc0
002334   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
002336   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002338   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00233a   e008     bz      0x00234c         	BZ	_00648_DS_
00233c   0e3f     movlw   0x3f             	MOVLW	0x3f
00233e   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
002340   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
002342   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
002344   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002346   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
002348   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00234a   6f41     movwf   0x41, 0x1        	MOVWF	(_timers + 1), B
                                           _00648_DS_:
00234c   c241     movff   0x241, 0x000     	MOVFF	(_timers + 1), r0x00
00234e   f000
002350   ae00     btfss   0x00, 0x7, 0x0   	BTFSS	r0x00, 7
002352   d009     bra     0x002366         	BRA	_00650_DS_
002354   0e3f     movlw   0x3f             	MOVLW	0x3f
002356   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
002358   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00235a   0e20     movlw   0x20             	MOVLW	0x20
00235c   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
00235e   e303     bnc     0x002366         	BNC	_00650_DS_
002360   8c00     bsf     0x00, 0x6, 0x0   	BSF	r0x00, 6
002362   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002364   6f41     movwf   0x41, 0x1        	MOVWF	(_timers + 1), B
                                           _00650_DS_:
002366   c241     movff   0x241, 0x000     	MOVFF	(_timers + 1), r0x00
002368   f000
00236a   ac00     btfss   0x00, 0x6, 0x0   	BTFSS	r0x00, 6
00236c   d004     bra     0x002376         	BRA	_00656_DS_
00236e   b000     btfsc   0x00, 0x0, 0x0   	BTFSC	r0x00, 0
002370   d002     bra     0x002376         	BRA	_00656_DS_
002372   ecff     call    0x0043fe, 0x0    	CALL	_curr_amp_inc
002374   f021
                                           _00656_DS_:
                                           ;	.line	887; common/controller-axe.c	one_shot(bot,6,0x1F,toggle_setlist_mode)
002376   51ea     movf    0xea, 0x0, 0x1   	MOVF	_curr, W, B
002378   0a20     xorlw   0x20             	XORLW	0x20
00237a   e117     bnz     0x0023aa         	BNZ	_00662_DS_
00237c   c247     movff   0x247, 0x000     	MOVFF	(_timers + 7), r0x00
00237e   f000
002380   0e80     movlw   0x80             	MOVLW	0x80
002382   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
002384   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002386   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002388   e010     bz      0x0023aa         	BZ	_00662_DS_
00238a   9e00     bcf     0x00, 0x7, 0x0   	BCF	r0x00, 7
00238c   0e1f     movlw   0x1f             	MOVLW	0x1f
00238e   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
002390   e20c     bc      0x0023aa         	BC	_00662_DS_
002392   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
002394   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002396   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
002398   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00239a   6f47     movwf   0x47, 0x1        	MOVWF	(_timers + 7), B
00239c   9e01     bcf     0x01, 0x7, 0x0   	BCF	r0x01, 7
00239e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0023a0   0a1f     xorlw   0x1f             	XORLW	0x1f
0023a2   e103     bnz     0x0023aa         	BNZ	_00662_DS_
0023a4   6b47     clrf    0x47, 0x1        	CLRF	(_timers + 7), B
0023a6   ecde     call    0x003bbc, 0x0    	CALL	_toggle_setlist_mode
0023a8   f01d
                                           _00662_DS_:
                                           ;	.line	889; common/controller-axe.c	one_shot(bot,8,0x1F,program_save)
0023aa   51ea     movf    0xea, 0x0, 0x1   	MOVF	_curr, W, B
0023ac   0a80     xorlw   0x80             	XORLW	0x80
0023ae   e117     bnz     0x0023de         	BNZ	_00669_DS_
0023b0   c242     movff   0x242, 0x000     	MOVFF	(_timers + 2), r0x00
0023b2   f000
0023b4   0e80     movlw   0x80             	MOVLW	0x80
0023b6   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
0023b8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0023ba   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0023bc   e010     bz      0x0023de         	BZ	_00669_DS_
0023be   9e00     bcf     0x00, 0x7, 0x0   	BCF	r0x00, 7
0023c0   0e1f     movlw   0x1f             	MOVLW	0x1f
0023c2   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
0023c4   e20c     bc      0x0023de         	BC	_00669_DS_
0023c6   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
0023c8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0023ca   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
0023cc   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0023ce   6f42     movwf   0x42, 0x1        	MOVWF	(_timers + 2), B
0023d0   9e01     bcf     0x01, 0x7, 0x0   	BCF	r0x01, 7
0023d2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0023d4   0a1f     xorlw   0x1f             	XORLW	0x1f
0023d6   e103     bnz     0x0023de         	BNZ	_00669_DS_
0023d8   6b42     clrf    0x42, 0x1        	CLRF	(_timers + 2), B
0023da   ecc6     call    0x00298c, 0x0    	CALL	_program_save
0023dc   f014
                                           _00669_DS_:
                                           ;	.line	891; common/controller-axe.c	repeater(top,7,0x20,0x03,prev_song)
0023de   51eb     movf    0xeb, 0x0, 0x1   	MOVF	(_curr + 1), W, B
0023e0   0a40     xorlw   0x40             	XORLW	0x40
0023e2   e125     bnz     0x00242e         	BNZ	_00680_DS_
0023e4   c243     movff   0x243, 0x000     	MOVFF	(_timers + 3), r0x00
0023e6   f000
0023e8   0ec0     movlw   0xc0             	MOVLW	0xc0
0023ea   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
0023ec   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0023ee   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0023f0   e008     bz      0x002402         	BZ	_00672_DS_
0023f2   0e3f     movlw   0x3f             	MOVLW	0x3f
0023f4   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
0023f6   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
0023f8   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
0023fa   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0023fc   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
0023fe   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002400   6f43     movwf   0x43, 0x1        	MOVWF	(_timers + 3), B
                                           _00672_DS_:
002402   c243     movff   0x243, 0x000     	MOVFF	(_timers + 3), r0x00
002404   f000
002406   ae00     btfss   0x00, 0x7, 0x0   	BTFSS	r0x00, 7
002408   d009     bra     0x00241c         	BRA	_00674_DS_
00240a   0e3f     movlw   0x3f             	MOVLW	0x3f
00240c   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
00240e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002410   0e20     movlw   0x20             	MOVLW	0x20
002412   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
002414   e303     bnc     0x00241c         	BNC	_00674_DS_
002416   8c00     bsf     0x00, 0x6, 0x0   	BSF	r0x00, 6
002418   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00241a   6f43     movwf   0x43, 0x1        	MOVWF	(_timers + 3), B
                                           _00674_DS_:
00241c   c243     movff   0x243, 0x000     	MOVFF	(_timers + 3), r0x00
00241e   f000
002420   ac00     btfss   0x00, 0x6, 0x0   	BTFSS	r0x00, 6
002422   d005     bra     0x00242e         	BRA	_00680_DS_
002424   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002426   0b03     andlw   0x03             	ANDLW	0x03
002428   e102     bnz     0x00242e         	BNZ	_00680_DS_
00242a   ec7d     call    0x0042fa, 0x0    	CALL	_prev_song
00242c   f021
                                           _00680_DS_:
                                           ;	.line	892; common/controller-axe.c	repeater(top,8,0x20,0x03,next_song)
00242e   51eb     movf    0xeb, 0x0, 0x1   	MOVF	(_curr + 1), W, B
002430   0a80     xorlw   0x80             	XORLW	0x80
002432   e125     bnz     0x00247e         	BNZ	_00691_DS_
002434   c244     movff   0x244, 0x000     	MOVFF	(_timers + 4), r0x00
002436   f000
002438   0ec0     movlw   0xc0             	MOVLW	0xc0
00243a   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
00243c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00243e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002440   e008     bz      0x002452         	BZ	_00682_DS_
002442   0e3f     movlw   0x3f             	MOVLW	0x3f
002444   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
002446   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
002448   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
00244a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00244c   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
00244e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002450   6f44     movwf   0x44, 0x1        	MOVWF	(_timers + 4), B
                                           _00682_DS_:
002452   c244     movff   0x244, 0x000     	MOVFF	(_timers + 4), r0x00
002454   f000
002456   ae00     btfss   0x00, 0x7, 0x0   	BTFSS	r0x00, 7
002458   d009     bra     0x00246c         	BRA	_00684_DS_
00245a   0e3f     movlw   0x3f             	MOVLW	0x3f
00245c   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
00245e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002460   0e20     movlw   0x20             	MOVLW	0x20
002462   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
002464   e303     bnc     0x00246c         	BNC	_00684_DS_
002466   8c00     bsf     0x00, 0x6, 0x0   	BSF	r0x00, 6
002468   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00246a   6f44     movwf   0x44, 0x1        	MOVWF	(_timers + 4), B
                                           _00684_DS_:
00246c   c244     movff   0x244, 0x000     	MOVFF	(_timers + 4), r0x00
00246e   f000
002470   ac00     btfss   0x00, 0x6, 0x0   	BTFSS	r0x00, 6
002472   d005     bra     0x00247e         	BRA	_00691_DS_
002474   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002476   0b03     andlw   0x03             	ANDLW	0x03
002478   e102     bnz     0x00247e         	BNZ	_00691_DS_
00247a   ec65     call    0x0042ca, 0x0    	CALL	_next_song
00247c   f021
                                           _00691_DS_:
00247e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002480   f001
002482   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002484   f000
002486   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__controller_init	code
                                           _controller_init:
                                           ;	.line	774; common/controller-axe.c	void controller_init(void) {
001e14   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001e16   ffe5
001e18   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001e1a   ffe5
001e1c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001e1e   ffe5
001e20   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001e22   ffe5
001e24   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001e26   ffe5
001e28   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
001e2a   ffe5
001e2c   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
001e2e   ffe5
001e30   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
001e32   ffe5
                                           ;	.line	777; common/controller-axe.c	last.mode = MODE_LIVE;
001e34   6b2e     clrf    0x2e, 0x1        	CLRF	(_last + 4), B
                                           ;	.line	778; common/controller-axe.c	curr.mode = MODE_LIVE;
001e36   6bee     clrf    0xee, 0x1        	CLRF	(_curr + 4), B
                                           ;	.line	779; common/controller-axe.c	for (i = 0; i < MODE_count; i++) {
001e38   6a00     clrf    0x00, 0x0        	CLRF	r0x00
001e3a   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00587_DS_:
                                           ;	.line	780; common/controller-axe.c	curr.mode_leds[i].top.byte = 0;
001e3c   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
001e3e   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
001e40   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001e42   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001e44   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
001e46   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001e48   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001e4a   0f01     addlw   0x01             	ADDLW	0x01
001e4c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001e4e   0e00     movlw   0x00             	MOVLW	0x00
001e50   2003     addwfc  0x03, 0x0, 0x0   	ADDWFC	r0x03, W
001e52   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001e54   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
001e56   ffe9
001e58   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
001e5a   ffea
001e5c   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ;	.line	781; common/controller-axe.c	curr.mode_leds[i].bot.byte = 0;
001e5e   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
001e60   ffe9
001e62   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
001e64   ffea
001e66   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ;	.line	779; common/controller-axe.c	for (i = 0; i < MODE_count; i++) {
001e68   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
001e6a   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
001e6c   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
001e6e   0e01     movlw   0x01             	MOVLW	0x01
001e70   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
001e72   e3e4     bnc     0x001e3c         	BNC	_00587_DS_
                                           ;	.line	784; common/controller-axe.c	last.leds = 0xFFFFU;
001e74   692c     setf    0x2c, 0x1        	SETF	(_last + 2), B
001e76   692d     setf    0x2d, 0x1        	SETF	(_last + 3), B
                                           ;	.line	785; common/controller-axe.c	curr.leds = 0x0000U;
001e78   6bec     clrf    0xec, 0x1        	CLRF	(_curr + 2), B
001e7a   6bed     clrf    0xed, 0x1        	CLRF	(_curr + 3), B
                                           ;	.line	787; common/controller-axe.c	last.setlist_mode = 0;
001e7c   6b32     clrf    0x32, 0x1        	CLRF	(_last + 8), B
                                           ;	.line	788; common/controller-axe.c	curr.setlist_mode = 1;
001e7e   0e01     movlw   0x01             	MOVLW	0x01
001e80   6ff2     movwf   0xf2, 0x1        	MOVWF	(_curr + 8), B
                                           ;	.line	790; common/controller-axe.c	curr.amp[0].gain = 0;
001e82   6bf8     clrf    0xf8, 0x1        	CLRF	(_curr + 14), B
                                           ;	.line	791; common/controller-axe.c	curr.amp[1].gain = 0;
001e84   6bfb     clrf    0xfb, 0x1        	CLRF	(_curr + 17), B
                                           ;	.line	792; common/controller-axe.c	last.amp[0].gain = ~curr.amp[0].gain;
001e86   1df8     comf    0xf8, 0x0, 0x1   	COMF	(_curr + 14), W, B
001e88   6f38     movwf   0x38, 0x1        	MOVWF	(_last + 14), B
                                           ;	.line	793; common/controller-axe.c	last.amp[1].gain = ~curr.amp[1].gain;
001e8a   1dfb     comf    0xfb, 0x0, 0x1   	COMF	(_curr + 17), W, B
001e8c   6f3b     movwf   0x3b, 0x1        	MOVWF	(_last + 17), B
                                           ;	.line	796; common/controller-axe.c	flash_load((u16)(128 * sizeof(struct program)), sizeof(struct set_list), (u8 *)&sl);
001e8e   0e80     movlw   0x80             	MOVLW	0x80
001e90   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e92   0e01     movlw   0x01             	MOVLW	HIGH(_sl)
001e94   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e96   0e00     movlw   0x00             	MOVLW	LOW(_sl)
001e98   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e9a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001e9c   0e40     movlw   0x40             	MOVLW	0x40
001e9e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ea0   0e20     movlw   0x20             	MOVLW	0x20
001ea2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ea4   0e00     movlw   0x00             	MOVLW	0x00
001ea6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001ea8   ec77     call    0x002aee, 0x0    	CALL	_flash_load
001eaa   f015
001eac   0e07     movlw   0x07             	MOVLW	0x07
001eae   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	797; common/controller-axe.c	sl_max = sl.count - (u8)1;
001eb0   0500     decf    0x00, 0x0, 0x1   	DECF	_sl, W, B
001eb2   6f72     movwf   0x72, 0x1        	MOVWF	_sl_max, B
                                           ;	.line	800; common/controller-axe.c	curr.sl_idx = 0;
001eb4   6bf3     clrf    0xf3, 0x1        	CLRF	(_curr + 9), B
                                           ;	.line	801; common/controller-axe.c	curr.pr_idx = 0;
001eb6   6bf4     clrf    0xf4, 0x1        	CLRF	(_curr + 10), B
                                           ;	.line	802; common/controller-axe.c	curr.sc_idx = 0;
001eb8   6bf5     clrf    0xf5, 0x1        	CLRF	(_curr + 11), B
                                           ;	.line	803; common/controller-axe.c	flash_load((u16)(sl.entries[curr.sl_idx].program * sizeof(struct program)), sizeof(struct program), (u8 *)&pr);
001eba   0e03     movlw   0x03             	MOVLW	LOW(_sl + 3)
001ebc   25f3     addwf   0xf3, 0x0, 0x1   	ADDWF	(_curr + 9), W, B
001ebe   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001ec0   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001ec2   0e01     movlw   0x01             	MOVLW	HIGH(_sl + 3)
001ec4   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001ec6   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001ec8   ffe9
001eca   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001ecc   ffea
001ece   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001ed0   f000
                                           ; ;multiply lit val:0x40 by variable r0x00 and store in r0x00
001ed2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001ed4   0d40     mullw   0x40             	MULLW	0x40
001ed6   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
001ed8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001eda   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
001edc   f000
001ede   0e80     movlw   0x80             	MOVLW	0x80
001ee0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ee2   0e01     movlw   0x01             	MOVLW	HIGH(_pr)
001ee4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ee6   0e40     movlw   0x40             	MOVLW	LOW(_pr)
001ee8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001eea   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
001eec   0e40     movlw   0x40             	MOVLW	0x40
001eee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ef0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001ef2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ef4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001ef6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ef8   ec77     call    0x002aee, 0x0    	CALL	_flash_load
001efa   f015
001efc   0e07     movlw   0x07             	MOVLW	0x07
001efe   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	804; common/controller-axe.c	struct_copy_program(origpr, pr);
001f00   5140     movf    0x40, 0x0, 0x1   	MOVF	_pr, W, B
001f02   6f80     movwf   0x80, 0x1        	MOVWF	_origpr, B
001f04   5141     movf    0x41, 0x0, 0x1   	MOVF	(_pr + 1), W, B
001f06   6f81     movwf   0x81, 0x1        	MOVWF	(_origpr + 1), B
001f08   5142     movf    0x42, 0x0, 0x1   	MOVF	(_pr + 2), W, B
001f0a   6f82     movwf   0x82, 0x1        	MOVWF	(_origpr + 2), B
001f0c   5143     movf    0x43, 0x0, 0x1   	MOVF	(_pr + 3), W, B
001f0e   6f83     movwf   0x83, 0x1        	MOVWF	(_origpr + 3), B
001f10   5144     movf    0x44, 0x0, 0x1   	MOVF	(_pr + 4), W, B
001f12   6f84     movwf   0x84, 0x1        	MOVWF	(_origpr + 4), B
001f14   5145     movf    0x45, 0x0, 0x1   	MOVF	(_pr + 5), W, B
001f16   6f85     movwf   0x85, 0x1        	MOVWF	(_origpr + 5), B
001f18   5146     movf    0x46, 0x0, 0x1   	MOVF	(_pr + 6), W, B
001f1a   6f86     movwf   0x86, 0x1        	MOVWF	(_origpr + 6), B
001f1c   5147     movf    0x47, 0x0, 0x1   	MOVF	(_pr + 7), W, B
001f1e   6f87     movwf   0x87, 0x1        	MOVWF	(_origpr + 7), B
001f20   5148     movf    0x48, 0x0, 0x1   	MOVF	(_pr + 8), W, B
001f22   6f88     movwf   0x88, 0x1        	MOVWF	(_origpr + 8), B
001f24   5149     movf    0x49, 0x0, 0x1   	MOVF	(_pr + 9), W, B
001f26   6f89     movwf   0x89, 0x1        	MOVWF	(_origpr + 9), B
001f28   514a     movf    0x4a, 0x0, 0x1   	MOVF	(_pr + 10), W, B
001f2a   6f8a     movwf   0x8a, 0x1        	MOVWF	(_origpr + 10), B
001f2c   514b     movf    0x4b, 0x0, 0x1   	MOVF	(_pr + 11), W, B
001f2e   6f8b     movwf   0x8b, 0x1        	MOVWF	(_origpr + 11), B
001f30   514c     movf    0x4c, 0x0, 0x1   	MOVF	(_pr + 12), W, B
001f32   6f8c     movwf   0x8c, 0x1        	MOVWF	(_origpr + 12), B
001f34   514d     movf    0x4d, 0x0, 0x1   	MOVF	(_pr + 13), W, B
001f36   6f8d     movwf   0x8d, 0x1        	MOVWF	(_origpr + 13), B
001f38   514e     movf    0x4e, 0x0, 0x1   	MOVF	(_pr + 14), W, B
001f3a   6f8e     movwf   0x8e, 0x1        	MOVWF	(_origpr + 14), B
001f3c   514f     movf    0x4f, 0x0, 0x1   	MOVF	(_pr + 15), W, B
001f3e   6f8f     movwf   0x8f, 0x1        	MOVWF	(_origpr + 15), B
001f40   5150     movf    0x50, 0x0, 0x1   	MOVF	(_pr + 16), W, B
001f42   6f90     movwf   0x90, 0x1        	MOVWF	(_origpr + 16), B
001f44   5151     movf    0x51, 0x0, 0x1   	MOVF	(_pr + 17), W, B
001f46   6f91     movwf   0x91, 0x1        	MOVWF	(_origpr + 17), B
001f48   5152     movf    0x52, 0x0, 0x1   	MOVF	(_pr + 18), W, B
001f4a   6f92     movwf   0x92, 0x1        	MOVWF	(_origpr + 18), B
001f4c   5153     movf    0x53, 0x0, 0x1   	MOVF	(_pr + 19), W, B
001f4e   6f93     movwf   0x93, 0x1        	MOVWF	(_origpr + 19), B
001f50   5154     movf    0x54, 0x0, 0x1   	MOVF	(_pr + 20), W, B
001f52   6f94     movwf   0x94, 0x1        	MOVWF	(_origpr + 20), B
001f54   5155     movf    0x55, 0x0, 0x1   	MOVF	(_pr + 21), W, B
001f56   6f95     movwf   0x95, 0x1        	MOVWF	(_origpr + 21), B
001f58   5156     movf    0x56, 0x0, 0x1   	MOVF	(_pr + 22), W, B
001f5a   6f96     movwf   0x96, 0x1        	MOVWF	(_origpr + 22), B
001f5c   5157     movf    0x57, 0x0, 0x1   	MOVF	(_pr + 23), W, B
001f5e   6f97     movwf   0x97, 0x1        	MOVWF	(_origpr + 23), B
001f60   5158     movf    0x58, 0x0, 0x1   	MOVF	(_pr + 24), W, B
001f62   6f98     movwf   0x98, 0x1        	MOVWF	(_origpr + 24), B
001f64   5159     movf    0x59, 0x0, 0x1   	MOVF	(_pr + 25), W, B
001f66   6f99     movwf   0x99, 0x1        	MOVWF	(_origpr + 25), B
001f68   515a     movf    0x5a, 0x0, 0x1   	MOVF	(_pr + 26), W, B
001f6a   6f9a     movwf   0x9a, 0x1        	MOVWF	(_origpr + 26), B
001f6c   515b     movf    0x5b, 0x0, 0x1   	MOVF	(_pr + 27), W, B
001f6e   6f9b     movwf   0x9b, 0x1        	MOVWF	(_origpr + 27), B
001f70   515c     movf    0x5c, 0x0, 0x1   	MOVF	(_pr + 28), W, B
001f72   6f9c     movwf   0x9c, 0x1        	MOVWF	(_origpr + 28), B
001f74   515d     movf    0x5d, 0x0, 0x1   	MOVF	(_pr + 29), W, B
001f76   6f9d     movwf   0x9d, 0x1        	MOVWF	(_origpr + 29), B
001f78   515e     movf    0x5e, 0x0, 0x1   	MOVF	(_pr + 30), W, B
001f7a   6f9e     movwf   0x9e, 0x1        	MOVWF	(_origpr + 30), B
001f7c   515f     movf    0x5f, 0x0, 0x1   	MOVF	(_pr + 31), W, B
001f7e   6f9f     movwf   0x9f, 0x1        	MOVWF	(_origpr + 31), B
001f80   5160     movf    0x60, 0x0, 0x1   	MOVF	(_pr + 32), W, B
001f82   6fa0     movwf   0xa0, 0x1        	MOVWF	(_origpr + 32), B
001f84   5161     movf    0x61, 0x0, 0x1   	MOVF	(_pr + 33), W, B
001f86   6fa1     movwf   0xa1, 0x1        	MOVWF	(_origpr + 33), B
001f88   5162     movf    0x62, 0x0, 0x1   	MOVF	(_pr + 34), W, B
001f8a   6fa2     movwf   0xa2, 0x1        	MOVWF	(_origpr + 34), B
001f8c   5163     movf    0x63, 0x0, 0x1   	MOVF	(_pr + 35), W, B
001f8e   6fa3     movwf   0xa3, 0x1        	MOVWF	(_origpr + 35), B
001f90   5164     movf    0x64, 0x0, 0x1   	MOVF	(_pr + 36), W, B
001f92   6fa4     movwf   0xa4, 0x1        	MOVWF	(_origpr + 36), B
001f94   5165     movf    0x65, 0x0, 0x1   	MOVF	(_pr + 37), W, B
001f96   6fa5     movwf   0xa5, 0x1        	MOVWF	(_origpr + 37), B
001f98   5166     movf    0x66, 0x0, 0x1   	MOVF	(_pr + 38), W, B
001f9a   6fa6     movwf   0xa6, 0x1        	MOVWF	(_origpr + 38), B
001f9c   5167     movf    0x67, 0x0, 0x1   	MOVF	(_pr + 39), W, B
001f9e   6fa7     movwf   0xa7, 0x1        	MOVWF	(_origpr + 39), B
001fa0   5168     movf    0x68, 0x0, 0x1   	MOVF	(_pr + 40), W, B
001fa2   6fa8     movwf   0xa8, 0x1        	MOVWF	(_origpr + 40), B
001fa4   5169     movf    0x69, 0x0, 0x1   	MOVF	(_pr + 41), W, B
001fa6   6fa9     movwf   0xa9, 0x1        	MOVWF	(_origpr + 41), B
001fa8   516a     movf    0x6a, 0x0, 0x1   	MOVF	(_pr + 42), W, B
001faa   6faa     movwf   0xaa, 0x1        	MOVWF	(_origpr + 42), B
001fac   516b     movf    0x6b, 0x0, 0x1   	MOVF	(_pr + 43), W, B
001fae   6fab     movwf   0xab, 0x1        	MOVWF	(_origpr + 43), B
001fb0   516c     movf    0x6c, 0x0, 0x1   	MOVF	(_pr + 44), W, B
001fb2   6fac     movwf   0xac, 0x1        	MOVWF	(_origpr + 44), B
001fb4   516d     movf    0x6d, 0x0, 0x1   	MOVF	(_pr + 45), W, B
001fb6   6fad     movwf   0xad, 0x1        	MOVWF	(_origpr + 45), B
001fb8   516e     movf    0x6e, 0x0, 0x1   	MOVF	(_pr + 46), W, B
001fba   6fae     movwf   0xae, 0x1        	MOVWF	(_origpr + 46), B
001fbc   516f     movf    0x6f, 0x0, 0x1   	MOVF	(_pr + 47), W, B
001fbe   6faf     movwf   0xaf, 0x1        	MOVWF	(_origpr + 47), B
001fc0   5170     movf    0x70, 0x0, 0x1   	MOVF	(_pr + 48), W, B
001fc2   6fb0     movwf   0xb0, 0x1        	MOVWF	(_origpr + 48), B
001fc4   5171     movf    0x71, 0x0, 0x1   	MOVF	(_pr + 49), W, B
001fc6   6fb1     movwf   0xb1, 0x1        	MOVWF	(_origpr + 49), B
001fc8   5172     movf    0x72, 0x0, 0x1   	MOVF	(_pr + 50), W, B
001fca   6fb2     movwf   0xb2, 0x1        	MOVWF	(_origpr + 50), B
001fcc   5173     movf    0x73, 0x0, 0x1   	MOVF	(_pr + 51), W, B
001fce   6fb3     movwf   0xb3, 0x1        	MOVWF	(_origpr + 51), B
001fd0   5174     movf    0x74, 0x0, 0x1   	MOVF	(_pr + 52), W, B
001fd2   6fb4     movwf   0xb4, 0x1        	MOVWF	(_origpr + 52), B
001fd4   5175     movf    0x75, 0x0, 0x1   	MOVF	(_pr + 53), W, B
001fd6   6fb5     movwf   0xb5, 0x1        	MOVWF	(_origpr + 53), B
001fd8   5176     movf    0x76, 0x0, 0x1   	MOVF	(_pr + 54), W, B
001fda   6fb6     movwf   0xb6, 0x1        	MOVWF	(_origpr + 54), B
001fdc   5177     movf    0x77, 0x0, 0x1   	MOVF	(_pr + 55), W, B
001fde   6fb7     movwf   0xb7, 0x1        	MOVWF	(_origpr + 55), B
001fe0   5178     movf    0x78, 0x0, 0x1   	MOVF	(_pr + 56), W, B
001fe2   6fb8     movwf   0xb8, 0x1        	MOVWF	(_origpr + 56), B
001fe4   5179     movf    0x79, 0x0, 0x1   	MOVF	(_pr + 57), W, B
001fe6   6fb9     movwf   0xb9, 0x1        	MOVWF	(_origpr + 57), B
001fe8   517a     movf    0x7a, 0x0, 0x1   	MOVF	(_pr + 58), W, B
001fea   6fba     movwf   0xba, 0x1        	MOVWF	(_origpr + 58), B
001fec   517b     movf    0x7b, 0x0, 0x1   	MOVF	(_pr + 59), W, B
001fee   6fbb     movwf   0xbb, 0x1        	MOVWF	(_origpr + 59), B
001ff0   517c     movf    0x7c, 0x0, 0x1   	MOVF	(_pr + 60), W, B
001ff2   6fbc     movwf   0xbc, 0x1        	MOVWF	(_origpr + 60), B
001ff4   517d     movf    0x7d, 0x0, 0x1   	MOVF	(_pr + 61), W, B
001ff6   6fbd     movwf   0xbd, 0x1        	MOVWF	(_origpr + 61), B
001ff8   517e     movf    0x7e, 0x0, 0x1   	MOVF	(_pr + 62), W, B
001ffa   6fbe     movwf   0xbe, 0x1        	MOVWF	(_origpr + 62), B
001ffc   517f     movf    0x7f, 0x0, 0x1   	MOVF	(_pr + 63), W, B
001ffe   6fbf     movwf   0xbf, 0x1        	MOVWF	(_origpr + 63), B
                                           ;	.line	806; common/controller-axe.c	curr.modified = 0;
002000   6bff     clrf    0xff, 0x1        	CLRF	(_curr + 21), B
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x00
                                           ;	.line	809; common/controller-axe.c	struct_copy_amp(curr.amp[0], pr.scene[curr.sc_idx].amp[0]);
002002   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
002004   0d06     mullw   0x06             	MULLW	0x06
002006   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
002008   f000
00200a   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00200c   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
00200e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002010   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
002012   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
002014   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
002016   ffe9
002018   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
00201a   ffea
00201c   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00201e   f000
002020   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002022   6ff8     movwf   0xf8, 0x1        	MOVWF	(_curr + 14), B
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x00
002024   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
002026   0d06     mullw   0x06             	MULLW	0x06
002028   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
00202a   f000
00202c   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00202e   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
002030   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002032   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
002034   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
002036   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
002038   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
00203a   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00203c   ffe9
00203e   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
002040   ffea
002042   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
002044   f000
002046   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002048   6ff9     movwf   0xf9, 0x1        	MOVWF	(_curr + 15), B
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x01
00204a   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
00204c   0d06     mullw   0x06             	MULLW	0x06
00204e   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
002050   f001
002052   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002054   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
002056   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
002058   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
00205a   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
00205c   0e02     movlw   0x02             	MOVLW	0x02
00205e   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
002060   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
002062   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
002064   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
002066   ffe9
002068   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
00206a   ffea
00206c   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
00206e   f001
002070   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002072   6ffa     movwf   0xfa, 0x1        	MOVWF	(_curr + 16), B
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x02
                                           ;	.line	810; common/controller-axe.c	struct_copy_amp(curr.amp[1], pr.scene[curr.sc_idx].amp[1]);
002074   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
002076   0d06     mullw   0x06             	MULLW	0x06
002078   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
00207a   f002
00207c   6a03     clrf    0x03, 0x0        	CLRF	r0x03
00207e   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
002080   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
002082   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
002084   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
002086   0e03     movlw   0x03             	MOVLW	0x03
002088   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
00208a   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
00208c   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
00208e   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
002090   ffe9
002092   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
002094   ffea
002096   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
002098   f002
00209a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00209c   6ffb     movwf   0xfb, 0x1        	MOVWF	(_curr + 17), B
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x02
00209e   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
0020a0   0d06     mullw   0x06             	MULLW	0x06
0020a2   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
0020a4   f002
0020a6   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0020a8   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
0020aa   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
0020ac   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
0020ae   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
0020b0   0e04     movlw   0x04             	MOVLW	0x04
0020b2   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
0020b4   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0020b6   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
0020b8   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
0020ba   ffe9
0020bc   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
0020be   ffea
0020c0   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
0020c2   f002
0020c4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0020c6   6ffc     movwf   0xfc, 0x1        	MOVWF	(_curr + 18), B
                                           ; ;multiply lit val:0x06 by variable (_curr + 11) and store in r0x03
0020c8   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
0020ca   0d06     mullw   0x06             	MULLW	0x06
0020cc   cff3     movff   0xff3, 0x003     	MOVFF	PRODL, r0x03
0020ce   f003
0020d0   6a04     clrf    0x04, 0x0        	CLRF	r0x04
0020d2   0e44     movlw   0x44             	MOVLW	LOW(_pr + 4)
0020d4   2603     addwf   0x03, 0x1, 0x0   	ADDWF	r0x03, F
0020d6   0e01     movlw   0x01             	MOVLW	HIGH(_pr + 4)
0020d8   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
0020da   0e05     movlw   0x05             	MOVLW	0x05
0020dc   2603     addwf   0x03, 0x1, 0x0   	ADDWF	r0x03, F
0020de   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0020e0   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
0020e2   c003     movff   0x003, 0xfe9     	MOVFF	r0x03, FSR0L
0020e4   ffe9
0020e6   c004     movff   0x004, 0xfea     	MOVFF	r0x04, FSR0H
0020e8   ffea
0020ea   cfef     movff   0xfef, 0x003     	MOVFF	INDF0, r0x03
0020ec   f003
0020ee   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0020f0   6ffd     movwf   0xfd, 0x1        	MOVWF	(_curr + 19), B
                                           ;	.line	813; common/controller-axe.c	last.amp[0].fx = ~curr.amp[0].fx;
0020f2   1e00     comf    0x00, 0x1, 0x0   	COMF	r0x00, F
0020f4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0020f6   6f39     movwf   0x39, 0x1        	MOVWF	(_last + 15), B
                                           ;	.line	814; common/controller-axe.c	last.amp[1].fx = ~curr.amp[1].fx;
0020f8   1e02     comf    0x02, 0x1, 0x0   	COMF	r0x02, F
0020fa   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0020fc   6f3c     movwf   0x3c, 0x1        	MOVWF	(_last + 18), B
                                           ;	.line	815; common/controller-axe.c	last.amp[0].volume = ~curr.amp[0].volume;
0020fe   1e01     comf    0x01, 0x1, 0x0   	COMF	r0x01, F
002100   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002102   6f3a     movwf   0x3a, 0x1        	MOVWF	(_last + 16), B
                                           ;	.line	816; common/controller-axe.c	last.amp[1].volume = ~curr.amp[1].volume;
002104   1e03     comf    0x03, 0x1, 0x0   	COMF	r0x03, F
002106   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002108   6f3d     movwf   0x3d, 0x1        	MOVWF	(_last + 19), B
                                           ;	.line	819; common/controller-axe.c	curr.selected_amp = 1;
00210a   0e01     movlw   0x01             	MOVLW	0x01
00210c   6ff6     movwf   0xf6, 0x1        	MOVWF	(_curr + 12), B
                                           ;	.line	820; common/controller-axe.c	curr.selected_both = 0;
00210e   6bf7     clrf    0xf7, 0x1        	CLRF	(_curr + 13), B
                                           ;	.line	823; common/controller-axe.c	for (i = 0; i < LCD_ROWS; ++i)
002110   6a00     clrf    0x00, 0x0        	CLRF	r0x00
002112   6a01     clrf    0x01, 0x0        	CLRF	r0x01
002114   6a02     clrf    0x02, 0x0        	CLRF	r0x02
                                           _00589_DS_:
                                           ;	.line	824; common/controller-axe.c	lcd_rows[i] = lcd_row_get(i);
002116   0ef0     movlw   0xf0             	MOVLW	LOW(_lcd_rows)
002118   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
00211a   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00211c   0e00     movlw   0x00             	MOVLW	HIGH(_lcd_rows)
00211e   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
002120   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002122   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002124   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002126   ec4d     call    0x00409a, 0x0    	CALL	_lcd_row_get
002128   f020
00212a   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00212c   cff3     movff   0xff3, 0x006     	MOVFF	PRODL, r0x06
00212e   f006
002130   cff4     movff   0xff4, 0x007     	MOVFF	PRODH, r0x07
002132   f007
002134   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002136   c003     movff   0x003, 0xfe9     	MOVFF	r0x03, FSR0L
002138   ffe9
00213a   c004     movff   0x004, 0xfea     	MOVFF	r0x04, FSR0H
00213c   ffea
00213e   c005     movff   0x005, 0xfee     	MOVFF	r0x05, POSTINC0
002140   ffee
002142   c006     movff   0x006, 0xfee     	MOVFF	r0x06, POSTINC0
002144   ffee
002146   c007     movff   0x007, 0xfef     	MOVFF	r0x07, INDF0
002148   ffef
                                           ;	.line	823; common/controller-axe.c	for (i = 0; i < LCD_ROWS; ++i)
00214a   0e03     movlw   0x03             	MOVLW	0x03
00214c   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
00214e   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
002150   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
002152   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
002154   0e04     movlw   0x04             	MOVLW	0x04
002156   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
002158   e3de     bnc     0x002116         	BNC	_00589_DS_
                                           ;	.line	826; common/controller-axe.c	for (i = 0; i < LCD_COLS; ++i) {
00215a   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00591_DS_:
                                           ;	.line	827; common/controller-axe.c	lcd_rows[row_amp1][i] = "                    "[i];
00215c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00215e   25f6     addwf   0xf6, 0x0, 0x1   	ADDWF	(_lcd_rows + 6), W, B
002160   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002162   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002164   21f7     addwfc  0xf7, 0x0, 0x1   	ADDWFC	(_lcd_rows + 7), W, B
002166   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002168   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
00216a   21f8     addwfc  0xf8, 0x0, 0x1   	ADDWFC	(_lcd_rows + 8), W, B
00216c   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00216e   0e1e     movlw   0x1e             	MOVLW	LOW(___str_1)
002170   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002172   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002174   6a05     clrf    0x05, 0x0        	CLRF	r0x05
002176   0e29     movlw   0x29             	MOVLW	HIGH(___str_1)
002178   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
00217a   6a06     clrf    0x06, 0x0        	CLRF	r0x06
00217c   0e00     movlw   0x00             	MOVLW	UPPER(___str_1)
00217e   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
002180   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
002182   fff6
002184   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
002186   fff7
002188   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
00218a   fff8
00218c   0009     tblrd*+                  	TBLRD*+	
00218e   cff5     movff   0xff5, 0x007     	MOVFF	TABLAT, r0x07
002190   f007
002192   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
002194   ffe5
002196   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
002198   ffe9
00219a   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
00219c   fff3
00219e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0021a0   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
0021a2   f021
                                           ;	.line	828; common/controller-axe.c	lcd_rows[row_amp2][i] = "                    "[i];
0021a4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0021a6   25f9     addwf   0xf9, 0x0, 0x1   	ADDWF	(_lcd_rows + 9), W, B
0021a8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0021aa   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0021ac   21fa     addwfc  0xfa, 0x0, 0x1   	ADDWFC	(_lcd_rows + 10), W, B
0021ae   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0021b0   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0021b2   21fb     addwfc  0xfb, 0x0, 0x1   	ADDWFC	(_lcd_rows + 11), W, B
0021b4   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
0021b6   fff6
0021b8   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
0021ba   fff7
0021bc   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
0021be   fff8
0021c0   0009     tblrd*+                  	TBLRD*+	
0021c2   cff5     movff   0xff5, 0x007     	MOVFF	TABLAT, r0x07
0021c4   f007
0021c6   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
0021c8   ffe5
0021ca   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
0021cc   ffe9
0021ce   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
0021d0   fff3
0021d2   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
0021d4   f021
                                           ;	.line	829; common/controller-axe.c	lcd_rows[row_status][i] = "                    "[i];
0021d6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0021d8   25f0     addwf   0xf0, 0x0, 0x1   	ADDWF	_lcd_rows, W, B
0021da   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0021dc   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0021de   21f1     addwfc  0xf1, 0x0, 0x1   	ADDWFC	(_lcd_rows + 1), W, B
0021e0   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0021e2   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0021e4   21f2     addwfc  0xf2, 0x0, 0x1   	ADDWFC	(_lcd_rows + 2), W, B
0021e6   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
0021e8   fff6
0021ea   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
0021ec   fff7
0021ee   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
0021f0   fff8
0021f2   0009     tblrd*+                  	TBLRD*+	
0021f4   cff5     movff   0xff5, 0x007     	MOVFF	TABLAT, r0x07
0021f6   f007
0021f8   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
0021fa   ffe5
0021fc   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
0021fe   ffe9
002200   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
002202   fff3
002204   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
002206   f021
                                           ;	.line	830; common/controller-axe.c	lcd_rows[row_song][i] = "                    "[i];
002208   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00220a   25f3     addwf   0xf3, 0x0, 0x1   	ADDWF	(_lcd_rows + 3), W, B
00220c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00220e   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002210   21f4     addwfc  0xf4, 0x0, 0x1   	ADDWFC	(_lcd_rows + 4), W, B
002212   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002214   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002216   21f5     addwfc  0xf5, 0x0, 0x1   	ADDWFC	(_lcd_rows + 5), W, B
002218   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
00221a   fff6
00221c   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
00221e   fff7
002220   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
002222   fff8
002224   0009     tblrd*+                  	TBLRD*+	
002226   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
002228   f004
00222a   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
00222c   ffe5
00222e   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
002230   ffe9
002232   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
002234   fff3
002236   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
002238   f021
                                           ;	.line	826; common/controller-axe.c	for (i = 0; i < LCD_COLS; ++i) {
00223a   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
00223c   0e14     movlw   0x14             	MOVLW	0x14
00223e   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
002240   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
002242   d78c     bra     0x00215c         	BRA	_00591_DS_
                                           ;	.line	833; common/controller-axe.c	update_lcd();
002244   ec0c     call    0x001018, 0x0    	CALL	_update_lcd
002246   f008
002248   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
00224a   f007
00224c   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
00224e   f006
002250   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
002252   f005
002254   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
002256   f004
002258   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00225a   f003
00225c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00225e   f002
002260   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002262   f001
002264   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002266   f000
002268   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__calc_leds	code
                                           _calc_leds:
                                           ;	.line	742; common/controller-axe.c	static void calc_leds(void) {
0009be   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0009c0   ffe5
0009c2   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0009c4   ffe5
0009c6   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0009c8   ffe5
0009ca   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0009cc   ffe5
                                           ;	.line	743; common/controller-axe.c	if (curr.selected_both) {
0009ce   51f7     movf    0xf7, 0x0, 0x1   	MOVF	(_curr + 13), W, B
0009d0   b4d8     btfsc   0xd8, 0x2, 0x0   	BTFSC	STATUS, 2
0009d2   d0d5     bra     0x000b7e         	BRA	_00577_DS_
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           ;	.line	744; common/controller-axe.c	curr.mode_leds[curr.mode].top.bits._1 = read_bit(dirty,  curr.amp[0].fx) | read_bit(dirty,  curr.amp[1].fx);
0009d4   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
0009d6   0d02     mullw   0x02             	MULLW	0x02
0009d8   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0009da   f000
0009dc   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0009de   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
0009e0   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0009e2   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
0009e4   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0009e6   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
0009e8   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0009ea   0e01     movlw   0x01             	MOVLW	0x01
0009ec   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
0009ee   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0009f0   0e01     movlw   0x01             	MOVLW	0x01
0009f2   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
0009f4   1202     iorwf   0x02, 0x1, 0x0   	IORWF	r0x02, F
0009f6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0009f8   0b01     andlw   0x01             	ANDLW	0x01
0009fa   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
0009fc   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0009fe   ffe9
000a00   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000a02   ffea
000a04   50ef     movf    0xef, 0x0, 0x0   	MOVF	INDF0, W
000a06   0bfe     andlw   0xfe             	ANDLW	0xfe
000a08   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000a0a   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           ;	.line	745; common/controller-axe.c	curr.mode_leds[curr.mode].top.bits._2 = read_bit(xy,     curr.amp[0].fx) | read_bit(xy,     curr.amp[1].fx);
000a0c   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
000a0e   0d02     mullw   0x02             	MULLW	0x02
000a10   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000a12   f000
000a14   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000a16   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
000a18   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000a1a   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
000a1c   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000a1e   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
000a20   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000a22   0e02     movlw   0x02             	MOVLW	0x02
000a24   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
000a26   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
000a28   4002     rrncf   0x02, 0x0, 0x0   	RRNCF	r0x02, W
000a2a   0b7f     andlw   0x7f             	ANDLW	0x7f
000a2c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
000a2e   0e02     movlw   0x02             	MOVLW	0x02
000a30   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
000a32   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
000a34   4003     rrncf   0x03, 0x0, 0x0   	RRNCF	r0x03, W
000a36   0b7f     andlw   0x7f             	ANDLW	0x7f
000a38   1202     iorwf   0x02, 0x1, 0x0   	IORWF	r0x02, F
000a3a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000a3c   0b01     andlw   0x01             	ANDLW	0x01
000a3e   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
000a40   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000a42   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000a44   ffe9
000a46   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000a48   ffea
000a4a   50ef     movf    0xef, 0x0, 0x0   	MOVF	INDF0, W
000a4c   0bfd     andlw   0xfd             	ANDLW	0xfd
000a4e   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000a50   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           ;	.line	746; common/controller-axe.c	curr.mode_leds[curr.mode].top.bits._3 = read_bit(pitch,  curr.amp[0].fx) | read_bit(pitch,  curr.amp[1].fx);
000a52   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
000a54   0d02     mullw   0x02             	MULLW	0x02
000a56   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000a58   f000
000a5a   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000a5c   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
000a5e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000a60   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
000a62   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000a64   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
000a66   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000a68   0e04     movlw   0x04             	MOVLW	0x04
000a6a   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
000a6c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
000a6e   4002     rrncf   0x02, 0x0, 0x0   	RRNCF	r0x02, W
000a70   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
000a72   0b3f     andlw   0x3f             	ANDLW	0x3f
000a74   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
000a76   0e04     movlw   0x04             	MOVLW	0x04
000a78   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
000a7a   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
000a7c   4003     rrncf   0x03, 0x0, 0x0   	RRNCF	r0x03, W
000a7e   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
000a80   0b3f     andlw   0x3f             	ANDLW	0x3f
000a82   1202     iorwf   0x02, 0x1, 0x0   	IORWF	r0x02, F
000a84   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000a86   0b01     andlw   0x01             	ANDLW	0x01
000a88   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
000a8a   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
000a8c   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000a8e   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000a90   ffe9
000a92   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000a94   ffea
000a96   50ef     movf    0xef, 0x0, 0x0   	MOVF	INDF0, W
000a98   0bfb     andlw   0xfb             	ANDLW	0xfb
000a9a   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000a9c   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           ;	.line	747; common/controller-axe.c	curr.mode_leds[curr.mode].top.bits._4 = read_bit(chorus, curr.amp[0].fx) | read_bit(chorus, curr.amp[1].fx);
000a9e   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
000aa0   0d02     mullw   0x02             	MULLW	0x02
000aa2   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000aa4   f000
000aa6   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000aa8   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
000aaa   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000aac   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
000aae   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000ab0   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
000ab2   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000ab4   0e08     movlw   0x08             	MOVLW	0x08
000ab6   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
000ab8   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
000aba   3802     swapf   0x02, 0x0, 0x0   	SWAPF	r0x02, W
000abc   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
000abe   0b1f     andlw   0x1f             	ANDLW	0x1f
000ac0   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
000ac2   0e08     movlw   0x08             	MOVLW	0x08
000ac4   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
000ac6   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
000ac8   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
000aca   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
000acc   0b1f     andlw   0x1f             	ANDLW	0x1f
000ace   1202     iorwf   0x02, 0x1, 0x0   	IORWF	r0x02, F
000ad0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000ad2   0b01     andlw   0x01             	ANDLW	0x01
000ad4   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000ad6   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
000ad8   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000ada   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000adc   ffe9
000ade   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000ae0   ffea
000ae2   50ef     movf    0xef, 0x0, 0x0   	MOVF	INDF0, W
000ae4   0bf7     andlw   0xf7             	ANDLW	0xf7
000ae6   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000ae8   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           ;	.line	748; common/controller-axe.c	curr.mode_leds[curr.mode].top.bits._5 = read_bit(delay,  curr.amp[0].fx) | read_bit(delay,  curr.amp[1].fx);
000aea   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
000aec   0d02     mullw   0x02             	MULLW	0x02
000aee   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000af0   f000
000af2   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000af4   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
000af6   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000af8   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
000afa   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000afc   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
000afe   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000b00   0e10     movlw   0x10             	MOVLW	0x10
000b02   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
000b04   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
000b06   3802     swapf   0x02, 0x0, 0x0   	SWAPF	r0x02, W
000b08   0b0f     andlw   0x0f             	ANDLW	0x0f
000b0a   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
000b0c   0e10     movlw   0x10             	MOVLW	0x10
000b0e   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
000b10   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
000b12   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
000b14   0b0f     andlw   0x0f             	ANDLW	0x0f
000b16   1202     iorwf   0x02, 0x1, 0x0   	IORWF	r0x02, F
000b18   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000b1a   0b01     andlw   0x01             	ANDLW	0x01
000b1c   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000b1e   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000b20   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000b22   ffe9
000b24   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000b26   ffea
000b28   50ef     movf    0xef, 0x0, 0x0   	MOVF	INDF0, W
000b2a   0bef     andlw   0xef             	ANDLW	0xef
000b2c   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000b2e   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           ;	.line	749; common/controller-axe.c	curr.mode_leds[curr.mode].top.bits._6 = read_bit(filter, curr.amp[0].fx) | read_bit(filter, curr.amp[1].fx);
000b30   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
000b32   0d02     mullw   0x02             	MULLW	0x02
000b34   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000b36   f000
000b38   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000b3a   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
000b3c   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000b3e   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
000b40   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000b42   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
000b44   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000b46   0e20     movlw   0x20             	MOVLW	0x20
000b48   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
000b4a   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
000b4c   3802     swapf   0x02, 0x0, 0x0   	SWAPF	r0x02, W
000b4e   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
000b50   0b07     andlw   0x07             	ANDLW	0x07
000b52   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
000b54   0e20     movlw   0x20             	MOVLW	0x20
000b56   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
000b58   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
000b5a   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
000b5c   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
000b5e   0b07     andlw   0x07             	ANDLW	0x07
000b60   1202     iorwf   0x02, 0x1, 0x0   	IORWF	r0x02, F
000b62   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000b64   0b01     andlw   0x01             	ANDLW	0x01
000b66   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000b68   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
000b6a   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000b6c   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000b6e   ffe9
000b70   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000b72   ffea
000b74   50ef     movf    0xef, 0x0, 0x0   	MOVF	INDF0, W
000b76   0bdf     andlw   0xdf             	ANDLW	0xdf
000b78   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000b7a   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
000b7c   d106     bra     0x000d8a         	BRA	_00578_DS_
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           _00577_DS_:
                                           ;	.line	751; common/controller-axe.c	curr.mode_leds[curr.mode].top.bits._1 = read_bit(dirty,  curr.amp[curr.selected_amp].fx);
000b7e   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
000b80   0d02     mullw   0x02             	MULLW	0x02
000b82   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000b84   f000
000b86   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000b88   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
000b8a   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000b8c   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
000b8e   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000b90   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
000b92   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
                                           ; ;multiply lit val:0x03 by variable (_curr + 12) and store in r0x02
000b94   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
000b96   0d03     mullw   0x03             	MULLW	0x03
000b98   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
000b9a   f002
000b9c   6a03     clrf    0x03, 0x0        	CLRF	r0x03
000b9e   0ef8     movlw   0xf8             	MOVLW	LOW(_curr + 14)
000ba0   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
000ba2   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 14)
000ba4   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
000ba6   4a02     infsnz  0x02, 0x1, 0x0   	INFSNZ	r0x02, F
000ba8   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
000baa   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
000bac   ffe9
000bae   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
000bb0   ffea
000bb2   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000bb4   f002
000bb6   0e01     movlw   0x01             	MOVLW	0x01
000bb8   1602     andwf   0x02, 0x1, 0x0   	ANDWF	r0x02, F
000bba   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000bbc   0b01     andlw   0x01             	ANDLW	0x01
000bbe   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000bc0   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000bc2   ffe9
000bc4   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000bc6   ffea
000bc8   50ef     movf    0xef, 0x0, 0x0   	MOVF	INDF0, W
000bca   0bfe     andlw   0xfe             	ANDLW	0xfe
000bcc   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000bce   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           ;	.line	752; common/controller-axe.c	curr.mode_leds[curr.mode].top.bits._2 = read_bit(xy,     curr.amp[curr.selected_amp].fx);
000bd0   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
000bd2   0d02     mullw   0x02             	MULLW	0x02
000bd4   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000bd6   f000
000bd8   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000bda   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
000bdc   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000bde   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
000be0   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000be2   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
000be4   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
                                           ; ;multiply lit val:0x03 by variable (_curr + 12) and store in r0x02
000be6   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
000be8   0d03     mullw   0x03             	MULLW	0x03
000bea   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
000bec   f002
000bee   6a03     clrf    0x03, 0x0        	CLRF	r0x03
000bf0   0ef8     movlw   0xf8             	MOVLW	LOW(_curr + 14)
000bf2   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
000bf4   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 14)
000bf6   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
000bf8   4a02     infsnz  0x02, 0x1, 0x0   	INFSNZ	r0x02, F
000bfa   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
000bfc   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
000bfe   ffe9
000c00   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
000c02   ffea
000c04   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000c06   f002
000c08   0e02     movlw   0x02             	MOVLW	0x02
000c0a   1602     andwf   0x02, 0x1, 0x0   	ANDWF	r0x02, F
000c0c   4002     rrncf   0x02, 0x0, 0x0   	RRNCF	r0x02, W
000c0e   0b7f     andlw   0x7f             	ANDLW	0x7f
000c10   0b01     andlw   0x01             	ANDLW	0x01
000c12   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
000c14   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000c16   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000c18   ffe9
000c1a   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000c1c   ffea
000c1e   50ef     movf    0xef, 0x0, 0x0   	MOVF	INDF0, W
000c20   0bfd     andlw   0xfd             	ANDLW	0xfd
000c22   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000c24   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           ;	.line	753; common/controller-axe.c	curr.mode_leds[curr.mode].top.bits._3 = read_bit(pitch,  curr.amp[curr.selected_amp].fx);
000c26   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
000c28   0d02     mullw   0x02             	MULLW	0x02
000c2a   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000c2c   f000
000c2e   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000c30   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
000c32   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000c34   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
000c36   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000c38   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
000c3a   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
                                           ; ;multiply lit val:0x03 by variable (_curr + 12) and store in r0x02
000c3c   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
000c3e   0d03     mullw   0x03             	MULLW	0x03
000c40   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
000c42   f002
000c44   6a03     clrf    0x03, 0x0        	CLRF	r0x03
000c46   0ef8     movlw   0xf8             	MOVLW	LOW(_curr + 14)
000c48   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
000c4a   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 14)
000c4c   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
000c4e   4a02     infsnz  0x02, 0x1, 0x0   	INFSNZ	r0x02, F
000c50   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
000c52   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
000c54   ffe9
000c56   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
000c58   ffea
000c5a   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000c5c   f002
000c5e   0e04     movlw   0x04             	MOVLW	0x04
000c60   1602     andwf   0x02, 0x1, 0x0   	ANDWF	r0x02, F
000c62   4002     rrncf   0x02, 0x0, 0x0   	RRNCF	r0x02, W
000c64   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
000c66   0b3f     andlw   0x3f             	ANDLW	0x3f
000c68   0b01     andlw   0x01             	ANDLW	0x01
000c6a   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
000c6c   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
000c6e   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000c70   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000c72   ffe9
000c74   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000c76   ffea
000c78   50ef     movf    0xef, 0x0, 0x0   	MOVF	INDF0, W
000c7a   0bfb     andlw   0xfb             	ANDLW	0xfb
000c7c   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000c7e   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           ;	.line	754; common/controller-axe.c	curr.mode_leds[curr.mode].top.bits._4 = read_bit(chorus, curr.amp[curr.selected_amp].fx);
000c80   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
000c82   0d02     mullw   0x02             	MULLW	0x02
000c84   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000c86   f000
000c88   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000c8a   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
000c8c   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000c8e   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
000c90   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000c92   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
000c94   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
                                           ; ;multiply lit val:0x03 by variable (_curr + 12) and store in r0x02
000c96   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
000c98   0d03     mullw   0x03             	MULLW	0x03
000c9a   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
000c9c   f002
000c9e   6a03     clrf    0x03, 0x0        	CLRF	r0x03
000ca0   0ef8     movlw   0xf8             	MOVLW	LOW(_curr + 14)
000ca2   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
000ca4   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 14)
000ca6   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
000ca8   4a02     infsnz  0x02, 0x1, 0x0   	INFSNZ	r0x02, F
000caa   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
000cac   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
000cae   ffe9
000cb0   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
000cb2   ffea
000cb4   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000cb6   f002
000cb8   0e08     movlw   0x08             	MOVLW	0x08
000cba   1602     andwf   0x02, 0x1, 0x0   	ANDWF	r0x02, F
000cbc   3802     swapf   0x02, 0x0, 0x0   	SWAPF	r0x02, W
000cbe   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
000cc0   0b1f     andlw   0x1f             	ANDLW	0x1f
000cc2   0b01     andlw   0x01             	ANDLW	0x01
000cc4   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000cc6   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
000cc8   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000cca   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000ccc   ffe9
000cce   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000cd0   ffea
000cd2   50ef     movf    0xef, 0x0, 0x0   	MOVF	INDF0, W
000cd4   0bf7     andlw   0xf7             	ANDLW	0xf7
000cd6   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000cd8   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           ;	.line	755; common/controller-axe.c	curr.mode_leds[curr.mode].top.bits._5 = read_bit(delay,  curr.amp[curr.selected_amp].fx);
000cda   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
000cdc   0d02     mullw   0x02             	MULLW	0x02
000cde   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000ce0   f000
000ce2   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000ce4   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
000ce6   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000ce8   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
000cea   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000cec   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
000cee   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
                                           ; ;multiply lit val:0x03 by variable (_curr + 12) and store in r0x02
000cf0   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
000cf2   0d03     mullw   0x03             	MULLW	0x03
000cf4   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
000cf6   f002
000cf8   6a03     clrf    0x03, 0x0        	CLRF	r0x03
000cfa   0ef8     movlw   0xf8             	MOVLW	LOW(_curr + 14)
000cfc   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
000cfe   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 14)
000d00   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
000d02   4a02     infsnz  0x02, 0x1, 0x0   	INFSNZ	r0x02, F
000d04   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
000d06   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
000d08   ffe9
000d0a   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
000d0c   ffea
000d0e   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000d10   f002
000d12   0e10     movlw   0x10             	MOVLW	0x10
000d14   1602     andwf   0x02, 0x1, 0x0   	ANDWF	r0x02, F
000d16   3802     swapf   0x02, 0x0, 0x0   	SWAPF	r0x02, W
000d18   0b0f     andlw   0x0f             	ANDLW	0x0f
000d1a   0b01     andlw   0x01             	ANDLW	0x01
000d1c   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000d1e   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000d20   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000d22   ffe9
000d24   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000d26   ffea
000d28   50ef     movf    0xef, 0x0, 0x0   	MOVF	INDF0, W
000d2a   0bef     andlw   0xef             	ANDLW	0xef
000d2c   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000d2e   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           ;	.line	756; common/controller-axe.c	curr.mode_leds[curr.mode].top.bits._6 = read_bit(filter, curr.amp[curr.selected_amp].fx);
000d30   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
000d32   0d02     mullw   0x02             	MULLW	0x02
000d34   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000d36   f000
000d38   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000d3a   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
000d3c   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000d3e   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
000d40   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000d42   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
000d44   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
                                           ; ;multiply lit val:0x03 by variable (_curr + 12) and store in r0x02
000d46   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
000d48   0d03     mullw   0x03             	MULLW	0x03
000d4a   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
000d4c   f002
000d4e   6a03     clrf    0x03, 0x0        	CLRF	r0x03
000d50   0ef8     movlw   0xf8             	MOVLW	LOW(_curr + 14)
000d52   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
000d54   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 14)
000d56   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
000d58   4a02     infsnz  0x02, 0x1, 0x0   	INFSNZ	r0x02, F
000d5a   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
000d5c   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
000d5e   ffe9
000d60   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
000d62   ffea
000d64   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000d66   f002
000d68   0e20     movlw   0x20             	MOVLW	0x20
000d6a   1602     andwf   0x02, 0x1, 0x0   	ANDWF	r0x02, F
000d6c   3802     swapf   0x02, 0x0, 0x0   	SWAPF	r0x02, W
000d6e   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
000d70   0b07     andlw   0x07             	ANDLW	0x07
000d72   0b01     andlw   0x01             	ANDLW	0x01
000d74   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000d76   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
000d78   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000d7a   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000d7c   ffe9
000d7e   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000d80   ffea
000d82   50ef     movf    0xef, 0x0, 0x0   	MOVF	INDF0, W
000d84   0bdf     andlw   0xdf             	ANDLW	0xdf
000d86   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000d88   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           _00578_DS_:
                                           ;	.line	758; common/controller-axe.c	curr.mode_leds[curr.mode].top.bits._7 = curr.fsw.top.bits._7;
000d8a   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
000d8c   0d02     mullw   0x02             	MULLW	0x02
000d8e   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000d90   f000
000d92   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000d94   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
000d96   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000d98   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
000d9a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000d9c   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
000d9e   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000da0   6a02     clrf    0x02, 0x0        	CLRF	r0x02
000da2   bdeb     btfsc   0xeb, 0x6, 0x1   	BTFSC	(_curr + 1), 6, B
000da4   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
000da6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000da8   0b01     andlw   0x01             	ANDLW	0x01
000daa   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
000dac   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
000dae   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000db0   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000db2   ffe9
000db4   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000db6   ffea
000db8   50ef     movf    0xef, 0x0, 0x0   	MOVF	INDF0, W
000dba   0bbf     andlw   0xbf             	ANDLW	0xbf
000dbc   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000dbe   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           ;	.line	759; common/controller-axe.c	curr.mode_leds[curr.mode].top.bits._8 = curr.fsw.top.bits._8;
000dc0   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
000dc2   0d02     mullw   0x02             	MULLW	0x02
000dc4   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000dc6   f000
000dc8   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000dca   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
000dcc   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000dce   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
000dd0   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000dd2   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
000dd4   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000dd6   6a02     clrf    0x02, 0x0        	CLRF	r0x02
000dd8   bfeb     btfsc   0xeb, 0x7, 0x1   	BTFSC	(_curr + 1), 7, B
000dda   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
000ddc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000dde   0b01     andlw   0x01             	ANDLW	0x01
000de0   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
000de2   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000de4   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000de6   ffe9
000de8   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000dea   ffea
000dec   50ef     movf    0xef, 0x0, 0x0   	MOVF	INDF0, W
000dee   0b7f     andlw   0x7f             	ANDLW	0x7f
000df0   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000df2   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           ;	.line	761; common/controller-axe.c	curr.mode_leds[curr.mode].bot.bits._1 = curr.selected_both;
000df4   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
000df6   0d02     mullw   0x02             	MULLW	0x02
000df8   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000dfa   f000
000dfc   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000dfe   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
000e00   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000e02   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
000e04   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000e06   c1f7     movff   0x1f7, 0x002     	MOVFF	(_curr + 13), r0x02
000e08   f002
000e0a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000e0c   0b01     andlw   0x01             	ANDLW	0x01
000e0e   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000e10   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000e12   ffe9
000e14   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000e16   ffea
000e18   50ef     movf    0xef, 0x0, 0x0   	MOVF	INDF0, W
000e1a   0bfe     andlw   0xfe             	ANDLW	0xfe
000e1c   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000e1e   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           ;	.line	762; common/controller-axe.c	curr.mode_leds[curr.mode].bot.bits._2 = curr.selected_amp;
000e20   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
000e22   0d02     mullw   0x02             	MULLW	0x02
000e24   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000e26   f000
000e28   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000e2a   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
000e2c   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000e2e   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
000e30   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000e32   c1f6     movff   0x1f6, 0x002     	MOVFF	(_curr + 12), r0x02
000e34   f002
000e36   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000e38   0b01     andlw   0x01             	ANDLW	0x01
000e3a   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
000e3c   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000e3e   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000e40   ffe9
000e42   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000e44   ffea
000e46   50ef     movf    0xef, 0x0, 0x0   	MOVF	INDF0, W
000e48   0bfd     andlw   0xfd             	ANDLW	0xfd
000e4a   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000e4c   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           ;	.line	763; common/controller-axe.c	curr.mode_leds[curr.mode].bot.bits._3 = curr.gain_mode;
000e4e   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
000e50   0d02     mullw   0x02             	MULLW	0x02
000e52   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000e54   f000
000e56   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000e58   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
000e5a   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000e5c   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
000e5e   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000e60   c1fe     movff   0x1fe, 0x002     	MOVFF	(_curr + 20), r0x02
000e62   f002
000e64   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000e66   0b01     andlw   0x01             	ANDLW	0x01
000e68   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
000e6a   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
000e6c   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000e6e   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000e70   ffe9
000e72   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000e74   ffea
000e76   50ef     movf    0xef, 0x0, 0x0   	MOVF	INDF0, W
000e78   0bfb     andlw   0xfb             	ANDLW	0xfb
000e7a   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000e7c   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           ;	.line	764; common/controller-axe.c	curr.mode_leds[curr.mode].bot.bits._4 = curr.fsw.bot.bits._4;
000e7e   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
000e80   0d02     mullw   0x02             	MULLW	0x02
000e82   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000e84   f000
000e86   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000e88   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
000e8a   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000e8c   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
000e8e   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000e90   6a02     clrf    0x02, 0x0        	CLRF	r0x02
000e92   b7ea     btfsc   0xea, 0x3, 0x1   	BTFSC	_curr, 3, B
000e94   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
000e96   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000e98   0b01     andlw   0x01             	ANDLW	0x01
000e9a   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000e9c   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
000e9e   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000ea0   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000ea2   ffe9
000ea4   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000ea6   ffea
000ea8   50ef     movf    0xef, 0x0, 0x0   	MOVF	INDF0, W
000eaa   0bf7     andlw   0xf7             	ANDLW	0xf7
000eac   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000eae   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           ;	.line	765; common/controller-axe.c	curr.mode_leds[curr.mode].bot.bits._5 = curr.fsw.bot.bits._5;
000eb0   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
000eb2   0d02     mullw   0x02             	MULLW	0x02
000eb4   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000eb6   f000
000eb8   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000eba   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
000ebc   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000ebe   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
000ec0   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000ec2   6a02     clrf    0x02, 0x0        	CLRF	r0x02
000ec4   b9ea     btfsc   0xea, 0x4, 0x1   	BTFSC	_curr, 4, B
000ec6   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
000ec8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000eca   0b01     andlw   0x01             	ANDLW	0x01
000ecc   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000ece   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000ed0   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000ed2   ffe9
000ed4   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000ed6   ffea
000ed8   50ef     movf    0xef, 0x0, 0x0   	MOVF	INDF0, W
000eda   0bef     andlw   0xef             	ANDLW	0xef
000edc   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000ede   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           ;	.line	766; common/controller-axe.c	curr.mode_leds[curr.mode].bot.bits._6 = curr.fsw.bot.bits._6;
000ee0   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
000ee2   0d02     mullw   0x02             	MULLW	0x02
000ee4   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000ee6   f000
000ee8   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000eea   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
000eec   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000eee   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
000ef0   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000ef2   6a02     clrf    0x02, 0x0        	CLRF	r0x02
000ef4   bbea     btfsc   0xea, 0x5, 0x1   	BTFSC	_curr, 5, B
000ef6   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
000ef8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000efa   0b01     andlw   0x01             	ANDLW	0x01
000efc   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
000efe   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
000f00   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000f02   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000f04   ffe9
000f06   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000f08   ffea
000f0a   50ef     movf    0xef, 0x0, 0x0   	MOVF	INDF0, W
000f0c   0bdf     andlw   0xdf             	ANDLW	0xdf
000f0e   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000f10   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           ;	.line	767; common/controller-axe.c	curr.mode_leds[curr.mode].bot.bits._7 = curr.fsw.bot.bits._7;
000f12   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
000f14   0d02     mullw   0x02             	MULLW	0x02
000f16   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000f18   f000
000f1a   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000f1c   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
000f1e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000f20   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
000f22   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000f24   6a02     clrf    0x02, 0x0        	CLRF	r0x02
000f26   bdea     btfsc   0xea, 0x6, 0x1   	BTFSC	_curr, 6, B
000f28   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
000f2a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000f2c   0b01     andlw   0x01             	ANDLW	0x01
000f2e   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
000f30   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
000f32   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000f34   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000f36   ffe9
000f38   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000f3a   ffea
000f3c   50ef     movf    0xef, 0x0, 0x0   	MOVF	INDF0, W
000f3e   0bbf     andlw   0xbf             	ANDLW	0xbf
000f40   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000f42   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           ;	.line	768; common/controller-axe.c	curr.mode_leds[curr.mode].bot.bits._8 = curr.fsw.bot.bits._8;
000f44   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
000f46   0d02     mullw   0x02             	MULLW	0x02
000f48   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000f4a   f000
000f4c   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000f4e   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
000f50   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000f52   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
000f54   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000f56   6a02     clrf    0x02, 0x0        	CLRF	r0x02
000f58   bfea     btfsc   0xea, 0x7, 0x1   	BTFSC	_curr, 7, B
000f5a   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
000f5c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000f5e   0b01     andlw   0x01             	ANDLW	0x01
000f60   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
000f62   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
000f64   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000f66   ffe9
000f68   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000f6a   ffea
000f6c   50ef     movf    0xef, 0x0, 0x0   	MOVF	INDF0, W
000f6e   0b7f     andlw   0x7f             	ANDLW	0x7f
000f70   10f4     iorwf   0xf4, 0x0, 0x0   	IORWF	PRODH, W
000f72   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	770; common/controller-axe.c	send_leds();
000f74   ec0b     call    0x003616, 0x0    	CALL	_send_leds
000f76   f01b
000f78   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
000f7a   f003
000f7c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
000f7e   f002
000f80   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
000f82   f001
000f84   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
000f86   f000
000f88   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__update_lcd	code
                                           _update_lcd:
                                           ;	.line	629; common/controller-axe.c	static void update_lcd(void) {
001018   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00101a   ffe5
00101c   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00101e   ffe5
001020   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001022   ffe5
001024   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001026   ffe5
001028   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
00102a   ffe5
00102c   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
00102e   ffe5
001030   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
001032   ffe5
001034   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
001036   ffe5
001038   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
00103a   ffe5
00103c   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
00103e   ffe5
                                           ;	.line	664; common/controller-axe.c	for (i = 0; i < LCD_COLS; ++i) {
001040   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00509_DS_:
                                           ;	.line	665; common/controller-axe.c	lcd_rows[row_status][i] = "                    "[i];
001042   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001044   25f0     addwf   0xf0, 0x0, 0x1   	ADDWF	_lcd_rows, W, B
001046   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001048   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
00104a   be00     btfsc   0x00, 0x7, 0x0   	BTFSC	r0x00, 7
00104c   68e8     setf    0xe8, 0x0        	SETF	WREG
00104e   21f1     addwfc  0xf1, 0x0, 0x1   	ADDWFC	(_lcd_rows + 1), W, B
001050   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001052   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
001054   be00     btfsc   0x00, 0x7, 0x0   	BTFSC	r0x00, 7
001056   68e8     setf    0xe8, 0x0        	SETF	WREG
001058   21f2     addwfc  0xf2, 0x0, 0x1   	ADDWFC	(_lcd_rows + 2), W, B
00105a   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00105c   0e1e     movlw   0x1e             	MOVLW	LOW(___str_1)
00105e   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001060   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001062   6a05     clrf    0x05, 0x0        	CLRF	r0x05
001064   be00     btfsc   0x00, 0x7, 0x0   	BTFSC	r0x00, 7
001066   6805     setf    0x05, 0x0        	SETF	r0x05
001068   0e29     movlw   0x29             	MOVLW	HIGH(___str_1)
00106a   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
00106c   6a06     clrf    0x06, 0x0        	CLRF	r0x06
00106e   be00     btfsc   0x00, 0x7, 0x0   	BTFSC	r0x00, 7
001070   6806     setf    0x06, 0x0        	SETF	r0x06
001072   0e00     movlw   0x00             	MOVLW	UPPER(___str_1)
001074   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
001076   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
001078   fff6
00107a   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
00107c   fff7
00107e   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
001080   fff8
001082   0009     tblrd*+                  	TBLRD*+	
001084   cff5     movff   0xff5, 0x007     	MOVFF	TABLAT, r0x07
001086   f007
001088   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
00108a   ffe5
00108c   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
00108e   ffe9
001090   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
001092   fff3
001094   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001096   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
001098   f021
                                           ;	.line	666; common/controller-axe.c	lcd_rows[row_song][i] = "                    "[i];
00109a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00109c   25f3     addwf   0xf3, 0x0, 0x1   	ADDWF	(_lcd_rows + 3), W, B
00109e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0010a0   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0010a2   be00     btfsc   0x00, 0x7, 0x0   	BTFSC	r0x00, 7
0010a4   68e8     setf    0xe8, 0x0        	SETF	WREG
0010a6   21f4     addwfc  0xf4, 0x0, 0x1   	ADDWFC	(_lcd_rows + 4), W, B
0010a8   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0010aa   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0010ac   be00     btfsc   0x00, 0x7, 0x0   	BTFSC	r0x00, 7
0010ae   68e8     setf    0xe8, 0x0        	SETF	WREG
0010b0   21f5     addwfc  0xf5, 0x0, 0x1   	ADDWFC	(_lcd_rows + 5), W, B
0010b2   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
0010b4   fff6
0010b6   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
0010b8   fff7
0010ba   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
0010bc   fff8
0010be   0009     tblrd*+                  	TBLRD*+	
0010c0   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
0010c2   f004
0010c4   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
0010c6   ffe5
0010c8   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
0010ca   ffe9
0010cc   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
0010ce   fff3
0010d0   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
0010d2   f021
                                           ;	.line	667; common/controller-axe.c	lcd_rows[row_amp1][i] = "MG*   0.0  JD*   0.0"[i];
0010d4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0010d6   25f6     addwf   0xf6, 0x0, 0x1   	ADDWF	(_lcd_rows + 6), W, B
0010d8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0010da   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0010dc   be00     btfsc   0x00, 0x7, 0x0   	BTFSC	r0x00, 7
0010de   68e8     setf    0xe8, 0x0        	SETF	WREG
0010e0   21f7     addwfc  0xf7, 0x0, 0x1   	ADDWFC	(_lcd_rows + 7), W, B
0010e2   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0010e4   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0010e6   be00     btfsc   0x00, 0x7, 0x0   	BTFSC	r0x00, 7
0010e8   68e8     setf    0xe8, 0x0        	SETF	WREG
0010ea   21f8     addwfc  0xf8, 0x0, 0x1   	ADDWFC	(_lcd_rows + 8), W, B
0010ec   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0010ee   0e34     movlw   0x34             	MOVLW	LOW(___str_2)
0010f0   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
0010f2   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0010f4   6a05     clrf    0x05, 0x0        	CLRF	r0x05
0010f6   be00     btfsc   0x00, 0x7, 0x0   	BTFSC	r0x00, 7
0010f8   6805     setf    0x05, 0x0        	SETF	r0x05
0010fa   0e29     movlw   0x29             	MOVLW	HIGH(___str_2)
0010fc   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0010fe   6a06     clrf    0x06, 0x0        	CLRF	r0x06
001100   be00     btfsc   0x00, 0x7, 0x0   	BTFSC	r0x00, 7
001102   6806     setf    0x06, 0x0        	SETF	r0x06
001104   0e00     movlw   0x00             	MOVLW	UPPER(___str_2)
001106   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
001108   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
00110a   fff6
00110c   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
00110e   fff7
001110   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
001112   fff8
001114   0009     tblrd*+                  	TBLRD*+	
001116   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
001118   f004
00111a   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
00111c   ffe5
00111e   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
001120   ffe9
001122   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
001124   fff3
001126   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001128   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
00112a   f021
                                           ;	.line	668; common/controller-axe.c	lcd_rows[row_amp2][i] = "GXPCDF 7F  GXPCDF 7F"[i];
00112c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00112e   25f9     addwf   0xf9, 0x0, 0x1   	ADDWF	(_lcd_rows + 9), W, B
001130   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001132   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
001134   be00     btfsc   0x00, 0x7, 0x0   	BTFSC	r0x00, 7
001136   68e8     setf    0xe8, 0x0        	SETF	WREG
001138   21fa     addwfc  0xfa, 0x0, 0x1   	ADDWFC	(_lcd_rows + 10), W, B
00113a   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00113c   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
00113e   be00     btfsc   0x00, 0x7, 0x0   	BTFSC	r0x00, 7
001140   68e8     setf    0xe8, 0x0        	SETF	WREG
001142   21fb     addwfc  0xfb, 0x0, 0x1   	ADDWFC	(_lcd_rows + 11), W, B
001144   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001146   0e4a     movlw   0x4a             	MOVLW	LOW(___str_3)
001148   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
00114a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00114c   6a05     clrf    0x05, 0x0        	CLRF	r0x05
00114e   be00     btfsc   0x00, 0x7, 0x0   	BTFSC	r0x00, 7
001150   6805     setf    0x05, 0x0        	SETF	r0x05
001152   0e29     movlw   0x29             	MOVLW	HIGH(___str_3)
001154   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
001156   6a06     clrf    0x06, 0x0        	CLRF	r0x06
001158   be00     btfsc   0x00, 0x7, 0x0   	BTFSC	r0x00, 7
00115a   6806     setf    0x06, 0x0        	SETF	r0x06
00115c   0e00     movlw   0x00             	MOVLW	UPPER(___str_3)
00115e   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
001160   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
001162   fff6
001164   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
001166   fff7
001168   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
00116a   fff8
00116c   0009     tblrd*+                  	TBLRD*+	
00116e   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
001170   f004
001172   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001174   ffe5
001176   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
001178   ffe9
00117a   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
00117c   fff3
00117e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001180   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
001182   f021
                                           ;	.line	664; common/controller-axe.c	for (i = 0; i < LCD_COLS; ++i) {
001184   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
001186   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001188   0f80     addlw   0x80             	ADDLW	0x80
00118a   0f6c     addlw   0x6c             	ADDLW	0x6c
00118c   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
00118e   d759     bra     0x001042         	BRA	_00509_DS_
                                           ;	.line	672; common/controller-axe.c	if (curr.setlist_mode == 0) {
001190   51f2     movf    0xf2, 0x0, 0x1   	MOVF	(_curr + 8), W, B
001192   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
001194   d041     bra     0x001218         	BRA	_00505_DS_
                                           ;	.line	673; common/controller-axe.c	for (i = 0; i < LCD_COLS; i++) {
001196   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00511_DS_:
                                           ;	.line	674; common/controller-axe.c	lcd_rows[row_status][i] = "Program    # 0 sc  0"[i];
001198   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00119a   25f0     addwf   0xf0, 0x0, 0x1   	ADDWF	_lcd_rows, W, B
00119c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00119e   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0011a0   be00     btfsc   0x00, 0x7, 0x0   	BTFSC	r0x00, 7
0011a2   68e8     setf    0xe8, 0x0        	SETF	WREG
0011a4   21f1     addwfc  0xf1, 0x0, 0x1   	ADDWFC	(_lcd_rows + 1), W, B
0011a6   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0011a8   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0011aa   be00     btfsc   0x00, 0x7, 0x0   	BTFSC	r0x00, 7
0011ac   68e8     setf    0xe8, 0x0        	SETF	WREG
0011ae   21f2     addwfc  0xf2, 0x0, 0x1   	ADDWFC	(_lcd_rows + 2), W, B
0011b0   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0011b2   0e60     movlw   0x60             	MOVLW	LOW(___str_4)
0011b4   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
0011b6   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0011b8   6a05     clrf    0x05, 0x0        	CLRF	r0x05
0011ba   be00     btfsc   0x00, 0x7, 0x0   	BTFSC	r0x00, 7
0011bc   6805     setf    0x05, 0x0        	SETF	r0x05
0011be   0e29     movlw   0x29             	MOVLW	HIGH(___str_4)
0011c0   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0011c2   6a06     clrf    0x06, 0x0        	CLRF	r0x06
0011c4   be00     btfsc   0x00, 0x7, 0x0   	BTFSC	r0x00, 7
0011c6   6806     setf    0x06, 0x0        	SETF	r0x06
0011c8   0e00     movlw   0x00             	MOVLW	UPPER(___str_4)
0011ca   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
0011cc   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
0011ce   fff6
0011d0   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
0011d2   fff7
0011d4   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
0011d6   fff8
0011d8   0009     tblrd*+                  	TBLRD*+	
0011da   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
0011dc   f004
0011de   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
0011e0   ffe5
0011e2   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
0011e4   ffe9
0011e6   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
0011e8   fff3
0011ea   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0011ec   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
0011ee   f021
                                           ;	.line	673; common/controller-axe.c	for (i = 0; i < LCD_COLS; i++) {
0011f0   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
0011f2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0011f4   0f80     addlw   0x80             	ADDLW	0x80
0011f6   0f6c     addlw   0x6c             	ADDLW	0x6c
0011f8   e3cf     bnc     0x001198         	BNC	_00511_DS_
                                           ;	.line	676; common/controller-axe.c	ritoa(lcd_rows[row_status], 13, curr.pr_idx + (u8)1);
0011fa   29f4     incf    0xf4, 0x0, 0x1   	INCF	(_curr + 10), W, B
0011fc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011fe   0e0d     movlw   0x0d             	MOVLW	0x0d
001200   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001202   51f2     movf    0xf2, 0x0, 0x1   	MOVF	(_lcd_rows + 2), W, B
001204   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001206   51f1     movf    0xf1, 0x0, 0x1   	MOVF	(_lcd_rows + 1), W, B
001208   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00120a   51f0     movf    0xf0, 0x0, 0x1   	MOVF	_lcd_rows, W, B
00120c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00120e   ec0f     call    0x00321e, 0x0    	CALL	_ritoa
001210   f019
001212   0e05     movlw   0x05             	MOVLW	0x05
001214   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001216   d081     bra     0x00131a         	BRA	_00506_DS_
                                           _00505_DS_:
                                           ;	.line	679; common/controller-axe.c	u8 yyyy = sl.d1 >> 1;
001218   4102     rrncf   0x02, 0x0, 0x1   	RRNCF	(_sl + 2), W, B
00121a   0b7f     andlw   0x7f             	ANDLW	0x7f
00121c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           ;	.line	680; common/controller-axe.c	u8 mm = ((sl.d1 & (u8)1) << 3) | (sl.d0 >> 5);
00121e   0e01     movlw   0x01             	MOVLW	0x01
001220   1502     andwf   0x02, 0x0, 0x1   	ANDWF	(_sl + 2), W, B
001222   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001224   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
001226   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
001228   0bf8     andlw   0xf8             	ANDLW	0xf8
00122a   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00122c   3901     swapf   0x01, 0x0, 0x1   	SWAPF	(_sl + 1), W, B
00122e   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
001230   0b07     andlw   0x07             	ANDLW	0x07
001232   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001234   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001236   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
                                           ;	.line	681; common/controller-axe.c	u8 dd = (sl.d0 & (u8)31);
001238   0e1f     movlw   0x1f             	MOVLW	0x1f
00123a   1501     andwf   0x01, 0x0, 0x1   	ANDWF	(_sl + 1), W, B
00123c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
                                           ;	.line	682; common/controller-axe.c	for (i = 0; i < LCD_COLS; i++) {
00123e   6a03     clrf    0x03, 0x0        	CLRF	r0x03
                                           _00513_DS_:
                                           ;	.line	683; common/controller-axe.c	lcd_rows[row_status][i] = "2014-01-01 # 0 sc  0"[i];
001240   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001242   25f0     addwf   0xf0, 0x0, 0x1   	ADDWF	_lcd_rows, W, B
001244   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001246   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
001248   be03     btfsc   0x03, 0x7, 0x0   	BTFSC	r0x03, 7
00124a   68e8     setf    0xe8, 0x0        	SETF	WREG
00124c   21f1     addwfc  0xf1, 0x0, 0x1   	ADDWFC	(_lcd_rows + 1), W, B
00124e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001250   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
001252   be03     btfsc   0x03, 0x7, 0x0   	BTFSC	r0x03, 7
001254   68e8     setf    0xe8, 0x0        	SETF	WREG
001256   21f2     addwfc  0xf2, 0x0, 0x1   	ADDWFC	(_lcd_rows + 2), W, B
001258   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00125a   0e76     movlw   0x76             	MOVLW	LOW(___str_5)
00125c   2403     addwf   0x03, 0x0, 0x0   	ADDWF	r0x03, W
00125e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
001260   6a08     clrf    0x08, 0x0        	CLRF	r0x08
001262   be03     btfsc   0x03, 0x7, 0x0   	BTFSC	r0x03, 7
001264   6808     setf    0x08, 0x0        	SETF	r0x08
001266   0e29     movlw   0x29             	MOVLW	HIGH(___str_5)
001268   2208     addwfc  0x08, 0x1, 0x0   	ADDWFC	r0x08, F
00126a   6a09     clrf    0x09, 0x0        	CLRF	r0x09
00126c   be03     btfsc   0x03, 0x7, 0x0   	BTFSC	r0x03, 7
00126e   6809     setf    0x09, 0x0        	SETF	r0x09
001270   0e00     movlw   0x00             	MOVLW	UPPER(___str_5)
001272   2209     addwfc  0x09, 0x1, 0x0   	ADDWFC	r0x09, F
001274   c007     movff   0x007, 0xff6     	MOVFF	r0x07, TBLPTRL
001276   fff6
001278   c008     movff   0x008, 0xff7     	MOVFF	r0x08, TBLPTRH
00127a   fff7
00127c   c009     movff   0x009, 0xff8     	MOVFF	r0x09, TBLPTRU
00127e   fff8
001280   0009     tblrd*+                  	TBLRD*+	
001282   cff5     movff   0xff5, 0x007     	MOVFF	TABLAT, r0x07
001284   f007
001286   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
001288   ffe5
00128a   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
00128c   ffe9
00128e   c005     movff   0x005, 0xff3     	MOVFF	r0x05, PRODL
001290   fff3
001292   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001294   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
001296   f021
                                           ;	.line	682; common/controller-axe.c	for (i = 0; i < LCD_COLS; i++) {
001298   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
00129a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00129c   0f80     addlw   0x80             	ADDLW	0x80
00129e   0f6c     addlw   0x6c             	ADDLW	0x6c
0012a0   e3cf     bnc     0x001240         	BNC	_00513_DS_
                                           ;	.line	685; common/controller-axe.c	ritoa(lcd_rows[row_status], 3, yyyy + (u8)14);
0012a2   0e0e     movlw   0x0e             	MOVLW	0x0e
0012a4   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0012a6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0012a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012aa   0e03     movlw   0x03             	MOVLW	0x03
0012ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012ae   51f2     movf    0xf2, 0x0, 0x1   	MOVF	(_lcd_rows + 2), W, B
0012b0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012b2   51f1     movf    0xf1, 0x0, 0x1   	MOVF	(_lcd_rows + 1), W, B
0012b4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012b6   51f0     movf    0xf0, 0x0, 0x1   	MOVF	_lcd_rows, W, B
0012b8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012ba   ec0f     call    0x00321e, 0x0    	CALL	_ritoa
0012bc   f019
0012be   0e05     movlw   0x05             	MOVLW	0x05
0012c0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	686; common/controller-axe.c	ritoa(lcd_rows[row_status], 6, mm + (u8)1);
0012c2   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0012c4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0012c6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012c8   0e06     movlw   0x06             	MOVLW	0x06
0012ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012cc   51f2     movf    0xf2, 0x0, 0x1   	MOVF	(_lcd_rows + 2), W, B
0012ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012d0   51f1     movf    0xf1, 0x0, 0x1   	MOVF	(_lcd_rows + 1), W, B
0012d2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012d4   51f0     movf    0xf0, 0x0, 0x1   	MOVF	_lcd_rows, W, B
0012d6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012d8   ec0f     call    0x00321e, 0x0    	CALL	_ritoa
0012da   f019
0012dc   0e05     movlw   0x05             	MOVLW	0x05
0012de   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	687; common/controller-axe.c	ritoa(lcd_rows[row_status], 9, dd + (u8)1);
0012e0   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
0012e2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0012e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012e6   0e09     movlw   0x09             	MOVLW	0x09
0012e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012ea   51f2     movf    0xf2, 0x0, 0x1   	MOVF	(_lcd_rows + 2), W, B
0012ec   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012ee   51f1     movf    0xf1, 0x0, 0x1   	MOVF	(_lcd_rows + 1), W, B
0012f0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012f2   51f0     movf    0xf0, 0x0, 0x1   	MOVF	_lcd_rows, W, B
0012f4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012f6   ec0f     call    0x00321e, 0x0    	CALL	_ritoa
0012f8   f019
0012fa   0e05     movlw   0x05             	MOVLW	0x05
0012fc   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	688; common/controller-axe.c	ritoa(lcd_rows[row_status], 13, curr.sl_idx + (u8)1);
0012fe   29f3     incf    0xf3, 0x0, 0x1   	INCF	(_curr + 9), W, B
001300   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001302   0e0d     movlw   0x0d             	MOVLW	0x0d
001304   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001306   51f2     movf    0xf2, 0x0, 0x1   	MOVF	(_lcd_rows + 2), W, B
001308   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00130a   51f1     movf    0xf1, 0x0, 0x1   	MOVF	(_lcd_rows + 1), W, B
00130c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00130e   51f0     movf    0xf0, 0x0, 0x1   	MOVF	_lcd_rows, W, B
001310   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001312   ec0f     call    0x00321e, 0x0    	CALL	_ritoa
001314   f019
001316   0e05     movlw   0x05             	MOVLW	0x05
001318   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00506_DS_:
                                           ;	.line	690; common/controller-axe.c	ritoa(lcd_rows[row_status], 19, curr.sc_idx + (u8)1);
00131a   29f5     incf    0xf5, 0x0, 0x1   	INCF	(_curr + 11), W, B
00131c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00131e   0e13     movlw   0x13             	MOVLW	0x13
001320   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001322   51f2     movf    0xf2, 0x0, 0x1   	MOVF	(_lcd_rows + 2), W, B
001324   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001326   51f1     movf    0xf1, 0x0, 0x1   	MOVF	(_lcd_rows + 1), W, B
001328   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00132a   51f0     movf    0xf0, 0x0, 0x1   	MOVF	_lcd_rows, W, B
00132c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00132e   ec0f     call    0x00321e, 0x0    	CALL	_ritoa
001330   f019
001332   0e05     movlw   0x05             	MOVLW	0x05
001334   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	693; common/controller-axe.c	pr_name = name_get(pr.name_index);
001336   5141     movf    0x41, 0x0, 0x1   	MOVF	(_pr + 1), W, B
001338   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00133a   5140     movf    0x40, 0x0, 0x1   	MOVF	_pr, W, B
00133c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00133e   ec97     call    0x003b2e, 0x0    	CALL	_name_get
001340   f01d
001342   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001344   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
001346   f001
001348   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
00134a   f002
00134c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00134e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	694; common/controller-axe.c	copy_str_lcd(pr_name, lcd_rows[row_song]);
001350   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_lcd_rows + 5), W, B
001352   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001354   51f4     movf    0xf4, 0x0, 0x1   	MOVF	(_lcd_rows + 4), W, B
001356   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001358   51f3     movf    0xf3, 0x0, 0x1   	MOVF	(_lcd_rows + 3), W, B
00135a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00135c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00135e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001360   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001362   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001364   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001366   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001368   ecb9     call    0x002d72, 0x0    	CALL	_copy_str_lcd
00136a   f016
00136c   0e06     movlw   0x06             	MOVLW	0x06
00136e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	696; common/controller-axe.c	if (curr.modified) {
001370   51ff     movf    0xff, 0x0, 0x1   	MOVF	(_curr + 21), W, B
001372   e012     bz      0x001398         	BZ	_00508_DS_
                                           ;	.line	697; common/controller-axe.c	lcd_rows[row_song][19] = '*';
001374   51f3     movf    0xf3, 0x0, 0x1   	MOVF	(_lcd_rows + 3), W, B
001376   0f13     addlw   0x13             	ADDLW	0x13
001378   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00137a   0e00     movlw   0x00             	MOVLW	0x00
00137c   21f4     addwfc  0xf4, 0x0, 0x1   	ADDWFC	(_lcd_rows + 4), W, B
00137e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001380   0e00     movlw   0x00             	MOVLW	0x00
001382   21f5     addwfc  0xf5, 0x0, 0x1   	ADDWFC	(_lcd_rows + 5), W, B
001384   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001386   0e2a     movlw   0x2a             	MOVLW	0x2a
001388   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00138a   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00138c   ffe9
00138e   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
001390   fff3
001392   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001394   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
001396   f021
                                           _00508_DS_:
                                           ;	.line	701; common/controller-axe.c	lcd_rows[row_amp1][ 2] = (curr.selected_amp == 0) ? (char)'*' : (char)' ';
001398   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_lcd_rows + 6), W, B
00139a   0f02     addlw   0x02             	ADDLW	0x02
00139c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00139e   0e00     movlw   0x00             	MOVLW	0x00
0013a0   21f7     addwfc  0xf7, 0x0, 0x1   	ADDWFC	(_lcd_rows + 7), W, B
0013a2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0013a4   0e00     movlw   0x00             	MOVLW	0x00
0013a6   21f8     addwfc  0xf8, 0x0, 0x1   	ADDWFC	(_lcd_rows + 8), W, B
0013a8   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0013aa   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
0013ac   e103     bnz     0x0013b4         	BNZ	_00517_DS_
0013ae   0e2a     movlw   0x2a             	MOVLW	0x2a
0013b0   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0013b2   d002     bra     0x0013b8         	BRA	_00518_DS_
                                           _00517_DS_:
0013b4   0e20     movlw   0x20             	MOVLW	0x20
0013b6   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
                                           _00518_DS_:
0013b8   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0013ba   ffe5
0013bc   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0013be   ffe9
0013c0   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0013c2   fff3
0013c4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0013c6   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
0013c8   f021
                                           ;	.line	702; common/controller-axe.c	lcd_rows[row_amp1][13] = (curr.selected_amp == 1) ? (char)'*' : (char)' ';
0013ca   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_lcd_rows + 6), W, B
0013cc   0f0d     addlw   0x0d             	ADDLW	0x0d
0013ce   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0013d0   0e00     movlw   0x00             	MOVLW	0x00
0013d2   21f7     addwfc  0xf7, 0x0, 0x1   	ADDWFC	(_lcd_rows + 7), W, B
0013d4   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0013d6   0e00     movlw   0x00             	MOVLW	0x00
0013d8   21f8     addwfc  0xf8, 0x0, 0x1   	ADDWFC	(_lcd_rows + 8), W, B
0013da   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0013dc   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
0013de   0a01     xorlw   0x01             	XORLW	0x01
0013e0   e103     bnz     0x0013e8         	BNZ	_00519_DS_
0013e2   0e2a     movlw   0x2a             	MOVLW	0x2a
0013e4   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0013e6   d002     bra     0x0013ec         	BRA	_00520_DS_
                                           _00519_DS_:
0013e8   0e20     movlw   0x20             	MOVLW	0x20
0013ea   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
                                           _00520_DS_:
0013ec   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0013ee   ffe5
0013f0   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0013f2   ffe9
0013f4   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0013f6   fff3
0013f8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0013fa   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
0013fc   f021
                                           ; ;multiply lit val:0x02 by variable (_curr + 16) and store in r0x00
                                           ;	.line	705; common/controller-axe.c	bcdtoa(lcd_rows[row_amp1],  8, dB_bcd_lookup[curr.amp[0].volume]);
0013fe   51fa     movf    0xfa, 0x0, 0x1   	MOVF	(_curr + 16), W, B
001400   0d02     mullw   0x02             	MULLW	0x02
001402   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
001404   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001406   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
001408   f000
00140a   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00140c   0e0c     movlw   0x0c             	MOVLW	LOW(_dB_bcd_lookup)
00140e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001410   0e28     movlw   0x28             	MOVLW	HIGH(_dB_bcd_lookup)
001412   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001414   0e00     movlw   0x00             	MOVLW	UPPER(_dB_bcd_lookup)
001416   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001418   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
00141a   fff6
00141c   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
00141e   fff7
001420   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
001422   fff8
001424   0009     tblrd*+                  	TBLRD*+	
001426   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
001428   f000
00142a   0009     tblrd*+                  	TBLRD*+	
00142c   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
00142e   f001
001430   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001432   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001434   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001436   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001438   0e08     movlw   0x08             	MOVLW	0x08
00143a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00143c   51f8     movf    0xf8, 0x0, 0x1   	MOVF	(_lcd_rows + 8), W, B
00143e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001440   51f7     movf    0xf7, 0x0, 0x1   	MOVF	(_lcd_rows + 7), W, B
001442   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001444   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_lcd_rows + 6), W, B
001446   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001448   ec2f     call    0x00265e, 0x0    	CALL	_bcdtoa
00144a   f013
00144c   0e06     movlw   0x06             	MOVLW	0x06
00144e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ; ;multiply lit val:0x02 by variable (_curr + 19) and store in r0x00
                                           ;	.line	706; common/controller-axe.c	bcdtoa(lcd_rows[row_amp1], 19, dB_bcd_lookup[curr.amp[1].volume]);
001450   51fd     movf    0xfd, 0x0, 0x1   	MOVF	(_curr + 19), W, B
001452   0d02     mullw   0x02             	MULLW	0x02
001454   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
001456   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001458   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
00145a   f000
00145c   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00145e   0e0c     movlw   0x0c             	MOVLW	LOW(_dB_bcd_lookup)
001460   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001462   0e28     movlw   0x28             	MOVLW	HIGH(_dB_bcd_lookup)
001464   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001466   0e00     movlw   0x00             	MOVLW	UPPER(_dB_bcd_lookup)
001468   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
00146a   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
00146c   fff6
00146e   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
001470   fff7
001472   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
001474   fff8
001476   0009     tblrd*+                  	TBLRD*+	
001478   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
00147a   f000
00147c   0009     tblrd*+                  	TBLRD*+	
00147e   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
001480   f001
001482   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001484   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001486   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001488   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00148a   0e13     movlw   0x13             	MOVLW	0x13
00148c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00148e   51f8     movf    0xf8, 0x0, 0x1   	MOVF	(_lcd_rows + 8), W, B
001490   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001492   51f7     movf    0xf7, 0x0, 0x1   	MOVF	(_lcd_rows + 7), W, B
001494   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001496   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_lcd_rows + 6), W, B
001498   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00149a   ec2f     call    0x00265e, 0x0    	CALL	_bcdtoa
00149c   f013
00149e   0e06     movlw   0x06             	MOVLW	0x06
0014a0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	709; common/controller-axe.c	lcd_rows[row_amp2][ 0] = (char)'G' | (char)(!read_bit(dirty, curr.amp[0].fx) << 5);
0014a2   c0f9     movff   0x0f9, 0x000     	MOVFF	(_lcd_rows + 9), r0x00
0014a4   f000
0014a6   c0fa     movff   0x0fa, 0x001     	MOVFF	(_lcd_rows + 10), r0x01
0014a8   f001
0014aa   c0fb     movff   0x0fb, 0x002     	MOVFF	(_lcd_rows + 11), r0x02
0014ac   f002
0014ae   0e01     movlw   0x01             	MOVLW	0x01
0014b0   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
0014b2   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0014b4   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0014b6   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
0014b8   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
0014ba   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0014bc   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0014be   3603     rlcf    0x03, 0x1, 0x0   	RLCF	r0x03, F
0014c0   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
0014c2   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
0014c4   0be0     andlw   0xe0             	ANDLW	0xe0
0014c6   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0014c8   0e47     movlw   0x47             	MOVLW	0x47
0014ca   1203     iorwf   0x03, 0x1, 0x0   	IORWF	r0x03, F
0014cc   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0014ce   ffe5
0014d0   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0014d2   ffe9
0014d4   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0014d6   fff3
0014d8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0014da   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
0014dc   f021
                                           ;	.line	710; common/controller-axe.c	lcd_rows[row_amp2][ 1] = (char)'X' | (char)(read_bit(xy, curr.amp[0].fx));
0014de   51f9     movf    0xf9, 0x0, 0x1   	MOVF	(_lcd_rows + 9), W, B
0014e0   0f01     addlw   0x01             	ADDLW	0x01
0014e2   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0014e4   0e00     movlw   0x00             	MOVLW	0x00
0014e6   21fa     addwfc  0xfa, 0x0, 0x1   	ADDWFC	(_lcd_rows + 10), W, B
0014e8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0014ea   0e00     movlw   0x00             	MOVLW	0x00
0014ec   21fb     addwfc  0xfb, 0x0, 0x1   	ADDWFC	(_lcd_rows + 11), W, B
0014ee   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0014f0   0e02     movlw   0x02             	MOVLW	0x02
0014f2   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
0014f4   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0014f6   4003     rrncf   0x03, 0x0, 0x0   	RRNCF	r0x03, W
0014f8   0b7f     andlw   0x7f             	ANDLW	0x7f
0014fa   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0014fc   0e58     movlw   0x58             	MOVLW	0x58
0014fe   1203     iorwf   0x03, 0x1, 0x0   	IORWF	r0x03, F
001500   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001502   ffe5
001504   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001506   ffe9
001508   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
00150a   fff3
00150c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00150e   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
001510   f021
                                           ;	.line	711; common/controller-axe.c	lcd_rows[row_amp2][ 2] = (char)'P' | (char)(!read_bit(pitch, curr.amp[0].fx) << 5);
001512   51f9     movf    0xf9, 0x0, 0x1   	MOVF	(_lcd_rows + 9), W, B
001514   0f02     addlw   0x02             	ADDLW	0x02
001516   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001518   0e00     movlw   0x00             	MOVLW	0x00
00151a   21fa     addwfc  0xfa, 0x0, 0x1   	ADDWFC	(_lcd_rows + 10), W, B
00151c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00151e   0e00     movlw   0x00             	MOVLW	0x00
001520   21fb     addwfc  0xfb, 0x0, 0x1   	ADDWFC	(_lcd_rows + 11), W, B
001522   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001524   0e04     movlw   0x04             	MOVLW	0x04
001526   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
001528   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00152a   4003     rrncf   0x03, 0x0, 0x0   	RRNCF	r0x03, W
00152c   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
00152e   0b3f     andlw   0x3f             	ANDLW	0x3f
001530   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001532   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001534   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
001536   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
001538   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00153a   6a03     clrf    0x03, 0x0        	CLRF	r0x03
00153c   3603     rlcf    0x03, 0x1, 0x0   	RLCF	r0x03, F
00153e   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
001540   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
001542   0be0     andlw   0xe0             	ANDLW	0xe0
001544   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001546   0e50     movlw   0x50             	MOVLW	0x50
001548   1203     iorwf   0x03, 0x1, 0x0   	IORWF	r0x03, F
00154a   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00154c   ffe5
00154e   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001550   ffe9
001552   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
001554   fff3
001556   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001558   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
00155a   f021
                                           ;	.line	712; common/controller-axe.c	lcd_rows[row_amp2][ 3] = (char)'C' | (char)(!read_bit(chorus, curr.amp[0].fx) << 5);
00155c   51f9     movf    0xf9, 0x0, 0x1   	MOVF	(_lcd_rows + 9), W, B
00155e   0f03     addlw   0x03             	ADDLW	0x03
001560   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001562   0e00     movlw   0x00             	MOVLW	0x00
001564   21fa     addwfc  0xfa, 0x0, 0x1   	ADDWFC	(_lcd_rows + 10), W, B
001566   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001568   0e00     movlw   0x00             	MOVLW	0x00
00156a   21fb     addwfc  0xfb, 0x0, 0x1   	ADDWFC	(_lcd_rows + 11), W, B
00156c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00156e   0e08     movlw   0x08             	MOVLW	0x08
001570   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
001572   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001574   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
001576   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
001578   0b1f     andlw   0x1f             	ANDLW	0x1f
00157a   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00157c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00157e   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
001580   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
001582   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
001584   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001586   3603     rlcf    0x03, 0x1, 0x0   	RLCF	r0x03, F
001588   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
00158a   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
00158c   0be0     andlw   0xe0             	ANDLW	0xe0
00158e   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001590   0e43     movlw   0x43             	MOVLW	0x43
001592   1203     iorwf   0x03, 0x1, 0x0   	IORWF	r0x03, F
001594   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001596   ffe5
001598   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00159a   ffe9
00159c   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
00159e   fff3
0015a0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0015a2   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
0015a4   f021
                                           ;	.line	713; common/controller-axe.c	lcd_rows[row_amp2][ 4] = (char)'D' | (char)(!read_bit(delay, curr.amp[0].fx) << 5);
0015a6   51f9     movf    0xf9, 0x0, 0x1   	MOVF	(_lcd_rows + 9), W, B
0015a8   0f04     addlw   0x04             	ADDLW	0x04
0015aa   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0015ac   0e00     movlw   0x00             	MOVLW	0x00
0015ae   21fa     addwfc  0xfa, 0x0, 0x1   	ADDWFC	(_lcd_rows + 10), W, B
0015b0   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0015b2   0e00     movlw   0x00             	MOVLW	0x00
0015b4   21fb     addwfc  0xfb, 0x0, 0x1   	ADDWFC	(_lcd_rows + 11), W, B
0015b6   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0015b8   0e10     movlw   0x10             	MOVLW	0x10
0015ba   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
0015bc   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0015be   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
0015c0   0b0f     andlw   0x0f             	ANDLW	0x0f
0015c2   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0015c4   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0015c6   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
0015c8   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
0015ca   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0015cc   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0015ce   3603     rlcf    0x03, 0x1, 0x0   	RLCF	r0x03, F
0015d0   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
0015d2   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
0015d4   0be0     andlw   0xe0             	ANDLW	0xe0
0015d6   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0015d8   0e44     movlw   0x44             	MOVLW	0x44
0015da   1203     iorwf   0x03, 0x1, 0x0   	IORWF	r0x03, F
0015dc   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0015de   ffe5
0015e0   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0015e2   ffe9
0015e4   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0015e6   fff3
0015e8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0015ea   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
0015ec   f021
                                           ;	.line	714; common/controller-axe.c	lcd_rows[row_amp2][ 5] = (char)'F' | (char)(!read_bit(filter, curr.amp[0].fx) << 5);
0015ee   51f9     movf    0xf9, 0x0, 0x1   	MOVF	(_lcd_rows + 9), W, B
0015f0   0f05     addlw   0x05             	ADDLW	0x05
0015f2   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0015f4   0e00     movlw   0x00             	MOVLW	0x00
0015f6   21fa     addwfc  0xfa, 0x0, 0x1   	ADDWFC	(_lcd_rows + 10), W, B
0015f8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0015fa   0e00     movlw   0x00             	MOVLW	0x00
0015fc   21fb     addwfc  0xfb, 0x0, 0x1   	ADDWFC	(_lcd_rows + 11), W, B
0015fe   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001600   0e20     movlw   0x20             	MOVLW	0x20
001602   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
001604   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001606   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
001608   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
00160a   0b07     andlw   0x07             	ANDLW	0x07
00160c   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00160e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001610   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
001612   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
001614   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
001616   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001618   3603     rlcf    0x03, 0x1, 0x0   	RLCF	r0x03, F
00161a   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
00161c   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
00161e   0be0     andlw   0xe0             	ANDLW	0xe0
001620   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001622   0e46     movlw   0x46             	MOVLW	0x46
001624   1203     iorwf   0x03, 0x1, 0x0   	IORWF	r0x03, F
001626   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001628   ffe5
00162a   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00162c   ffe9
00162e   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
001630   fff3
001632   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001634   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
001636   f021
                                           ;	.line	715; common/controller-axe.c	hextoa(lcd_rows[row_amp2], 8, or_default(curr.amp[0].gain));
001638   c0f9     movff   0x0f9, 0x000     	MOVFF	(_lcd_rows + 9), r0x00
00163a   f000
00163c   c0fa     movff   0x0fa, 0x001     	MOVFF	(_lcd_rows + 10), r0x01
00163e   f001
001640   c0fb     movff   0x0fb, 0x002     	MOVFF	(_lcd_rows + 11), r0x02
001642   f002
001644   c1f8     movff   0x1f8, 0x003     	MOVFF	(_curr + 14), r0x03
001646   f003
001648   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00164a   e103     bnz     0x001652         	BNZ	_00521_DS_
00164c   0e40     movlw   0x40             	MOVLW	0x40
00164e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001650   d002     bra     0x001656         	BRA	_00522_DS_
                                           _00521_DS_:
001652   c003     movff   0x003, 0x004     	MOVFF	r0x03, r0x04
001654   f004
                                           _00522_DS_:
001656   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001658   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00165a   0e08     movlw   0x08             	MOVLW	0x08
00165c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00165e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001660   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001662   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001664   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001666   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001668   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00166a   ecb5     call    0x002f6a, 0x0    	CALL	_hextoa
00166c   f017
00166e   0e05     movlw   0x05             	MOVLW	0x05
001670   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	717; common/controller-axe.c	lcd_rows[row_amp2][11] = (char)'G' | (char)(!read_bit(dirty, curr.amp[1].fx) << 5);
001672   51f9     movf    0xf9, 0x0, 0x1   	MOVF	(_lcd_rows + 9), W, B
001674   0f0b     addlw   0x0b             	ADDLW	0x0b
001676   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001678   0e00     movlw   0x00             	MOVLW	0x00
00167a   21fa     addwfc  0xfa, 0x0, 0x1   	ADDWFC	(_lcd_rows + 10), W, B
00167c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00167e   0e00     movlw   0x00             	MOVLW	0x00
001680   21fb     addwfc  0xfb, 0x0, 0x1   	ADDWFC	(_lcd_rows + 11), W, B
001682   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001684   0e01     movlw   0x01             	MOVLW	0x01
001686   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
001688   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00168a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00168c   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
00168e   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
001690   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
001692   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001694   3603     rlcf    0x03, 0x1, 0x0   	RLCF	r0x03, F
001696   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
001698   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
00169a   0be0     andlw   0xe0             	ANDLW	0xe0
00169c   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00169e   0e47     movlw   0x47             	MOVLW	0x47
0016a0   1203     iorwf   0x03, 0x1, 0x0   	IORWF	r0x03, F
0016a2   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0016a4   ffe5
0016a6   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0016a8   ffe9
0016aa   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0016ac   fff3
0016ae   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0016b0   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
0016b2   f021
                                           ;	.line	718; common/controller-axe.c	lcd_rows[row_amp2][12] = (char)'X' | (char)(read_bit(xy, curr.amp[1].fx));
0016b4   51f9     movf    0xf9, 0x0, 0x1   	MOVF	(_lcd_rows + 9), W, B
0016b6   0f0c     addlw   0x0c             	ADDLW	0x0c
0016b8   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0016ba   0e00     movlw   0x00             	MOVLW	0x00
0016bc   21fa     addwfc  0xfa, 0x0, 0x1   	ADDWFC	(_lcd_rows + 10), W, B
0016be   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0016c0   0e00     movlw   0x00             	MOVLW	0x00
0016c2   21fb     addwfc  0xfb, 0x0, 0x1   	ADDWFC	(_lcd_rows + 11), W, B
0016c4   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0016c6   0e02     movlw   0x02             	MOVLW	0x02
0016c8   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
0016ca   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0016cc   4003     rrncf   0x03, 0x0, 0x0   	RRNCF	r0x03, W
0016ce   0b7f     andlw   0x7f             	ANDLW	0x7f
0016d0   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0016d2   0e58     movlw   0x58             	MOVLW	0x58
0016d4   1203     iorwf   0x03, 0x1, 0x0   	IORWF	r0x03, F
0016d6   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0016d8   ffe5
0016da   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0016dc   ffe9
0016de   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0016e0   fff3
0016e2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0016e4   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
0016e6   f021
                                           ;	.line	719; common/controller-axe.c	lcd_rows[row_amp2][13] = (char)'P' | (char)(!read_bit(pitch, curr.amp[1].fx) << 5);
0016e8   51f9     movf    0xf9, 0x0, 0x1   	MOVF	(_lcd_rows + 9), W, B
0016ea   0f0d     addlw   0x0d             	ADDLW	0x0d
0016ec   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0016ee   0e00     movlw   0x00             	MOVLW	0x00
0016f0   21fa     addwfc  0xfa, 0x0, 0x1   	ADDWFC	(_lcd_rows + 10), W, B
0016f2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0016f4   0e00     movlw   0x00             	MOVLW	0x00
0016f6   21fb     addwfc  0xfb, 0x0, 0x1   	ADDWFC	(_lcd_rows + 11), W, B
0016f8   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0016fa   0e04     movlw   0x04             	MOVLW	0x04
0016fc   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
0016fe   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001700   4003     rrncf   0x03, 0x0, 0x0   	RRNCF	r0x03, W
001702   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
001704   0b3f     andlw   0x3f             	ANDLW	0x3f
001706   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001708   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00170a   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
00170c   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
00170e   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
001710   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001712   3603     rlcf    0x03, 0x1, 0x0   	RLCF	r0x03, F
001714   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
001716   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
001718   0be0     andlw   0xe0             	ANDLW	0xe0
00171a   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00171c   0e50     movlw   0x50             	MOVLW	0x50
00171e   1203     iorwf   0x03, 0x1, 0x0   	IORWF	r0x03, F
001720   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001722   ffe5
001724   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001726   ffe9
001728   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
00172a   fff3
00172c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00172e   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
001730   f021
                                           ;	.line	720; common/controller-axe.c	lcd_rows[row_amp2][14] = (char)'C' | (char)(!read_bit(chorus, curr.amp[1].fx) << 5);
001732   51f9     movf    0xf9, 0x0, 0x1   	MOVF	(_lcd_rows + 9), W, B
001734   0f0e     addlw   0x0e             	ADDLW	0x0e
001736   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001738   0e00     movlw   0x00             	MOVLW	0x00
00173a   21fa     addwfc  0xfa, 0x0, 0x1   	ADDWFC	(_lcd_rows + 10), W, B
00173c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00173e   0e00     movlw   0x00             	MOVLW	0x00
001740   21fb     addwfc  0xfb, 0x0, 0x1   	ADDWFC	(_lcd_rows + 11), W, B
001742   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001744   0e08     movlw   0x08             	MOVLW	0x08
001746   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
001748   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00174a   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
00174c   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
00174e   0b1f     andlw   0x1f             	ANDLW	0x1f
001750   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001752   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001754   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
001756   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
001758   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00175a   6a03     clrf    0x03, 0x0        	CLRF	r0x03
00175c   3603     rlcf    0x03, 0x1, 0x0   	RLCF	r0x03, F
00175e   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
001760   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
001762   0be0     andlw   0xe0             	ANDLW	0xe0
001764   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001766   0e43     movlw   0x43             	MOVLW	0x43
001768   1203     iorwf   0x03, 0x1, 0x0   	IORWF	r0x03, F
00176a   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00176c   ffe5
00176e   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001770   ffe9
001772   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
001774   fff3
001776   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001778   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
00177a   f021
                                           ;	.line	721; common/controller-axe.c	lcd_rows[row_amp2][15] = (char)'D' | (char)(!read_bit(delay, curr.amp[1].fx) << 5);
00177c   51f9     movf    0xf9, 0x0, 0x1   	MOVF	(_lcd_rows + 9), W, B
00177e   0f0f     addlw   0x0f             	ADDLW	0x0f
001780   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001782   0e00     movlw   0x00             	MOVLW	0x00
001784   21fa     addwfc  0xfa, 0x0, 0x1   	ADDWFC	(_lcd_rows + 10), W, B
001786   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001788   0e00     movlw   0x00             	MOVLW	0x00
00178a   21fb     addwfc  0xfb, 0x0, 0x1   	ADDWFC	(_lcd_rows + 11), W, B
00178c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00178e   0e10     movlw   0x10             	MOVLW	0x10
001790   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
001792   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001794   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
001796   0b0f     andlw   0x0f             	ANDLW	0x0f
001798   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00179a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00179c   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
00179e   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
0017a0   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0017a2   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0017a4   3603     rlcf    0x03, 0x1, 0x0   	RLCF	r0x03, F
0017a6   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
0017a8   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
0017aa   0be0     andlw   0xe0             	ANDLW	0xe0
0017ac   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0017ae   0e44     movlw   0x44             	MOVLW	0x44
0017b0   1203     iorwf   0x03, 0x1, 0x0   	IORWF	r0x03, F
0017b2   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0017b4   ffe5
0017b6   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0017b8   ffe9
0017ba   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0017bc   fff3
0017be   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0017c0   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
0017c2   f021
                                           ;	.line	722; common/controller-axe.c	lcd_rows[row_amp2][16] = (char)'F' | (char)(!read_bit(filter, curr.amp[1].fx) << 5);
0017c4   51f9     movf    0xf9, 0x0, 0x1   	MOVF	(_lcd_rows + 9), W, B
0017c6   0f10     addlw   0x10             	ADDLW	0x10
0017c8   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0017ca   0e00     movlw   0x00             	MOVLW	0x00
0017cc   21fa     addwfc  0xfa, 0x0, 0x1   	ADDWFC	(_lcd_rows + 10), W, B
0017ce   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0017d0   0e00     movlw   0x00             	MOVLW	0x00
0017d2   21fb     addwfc  0xfb, 0x0, 0x1   	ADDWFC	(_lcd_rows + 11), W, B
0017d4   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0017d6   0e20     movlw   0x20             	MOVLW	0x20
0017d8   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
0017da   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0017dc   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
0017de   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
0017e0   0b07     andlw   0x07             	ANDLW	0x07
0017e2   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0017e4   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0017e6   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
0017e8   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
0017ea   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0017ec   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0017ee   3603     rlcf    0x03, 0x1, 0x0   	RLCF	r0x03, F
0017f0   3803     swapf   0x03, 0x0, 0x0   	SWAPF	r0x03, W
0017f2   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
0017f4   0be0     andlw   0xe0             	ANDLW	0xe0
0017f6   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0017f8   0e46     movlw   0x46             	MOVLW	0x46
0017fa   1203     iorwf   0x03, 0x1, 0x0   	IORWF	r0x03, F
0017fc   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0017fe   ffe5
001800   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001802   ffe9
001804   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
001806   fff3
001808   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00180a   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
00180c   f021
                                           ;	.line	723; common/controller-axe.c	hextoa(lcd_rows[row_amp2], 19, or_default(curr.amp[1].gain));
00180e   c0f9     movff   0x0f9, 0x000     	MOVFF	(_lcd_rows + 9), r0x00
001810   f000
001812   c0fa     movff   0x0fa, 0x001     	MOVFF	(_lcd_rows + 10), r0x01
001814   f001
001816   c0fb     movff   0x0fb, 0x002     	MOVFF	(_lcd_rows + 11), r0x02
001818   f002
00181a   c1fb     movff   0x1fb, 0x003     	MOVFF	(_curr + 17), r0x03
00181c   f003
00181e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001820   e103     bnz     0x001828         	BNZ	_00523_DS_
001822   0e40     movlw   0x40             	MOVLW	0x40
001824   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001826   d002     bra     0x00182c         	BRA	_00524_DS_
                                           _00523_DS_:
001828   c003     movff   0x003, 0x004     	MOVFF	r0x03, r0x04
00182a   f004
                                           _00524_DS_:
00182c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00182e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001830   0e13     movlw   0x13             	MOVLW	0x13
001832   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001834   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001836   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001838   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00183a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00183c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00183e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001840   ecb5     call    0x002f6a, 0x0    	CALL	_hextoa
001842   f017
001844   0e05     movlw   0x05             	MOVLW	0x05
001846   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	725; common/controller-axe.c	lcd_updated_all();
001848   ec15     call    0x00442a, 0x0    	CALL	_lcd_updated_all
00184a   f022
00184c   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
00184e   f009
001850   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
001852   f008
001854   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
001856   f007
001858   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
00185a   f006
00185c   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
00185e   f005
001860   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
001862   f004
001864   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001866   f003
001868   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00186a   f002
00186c   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00186e   f001
001870   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001872   f000
001874   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__calc_midi	code
                                           _calc_midi:
                                           ;	.line	485; common/controller-axe.c	static void calc_midi(void) {
001876   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001878   ffe5
00187a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00187c   ffe5
00187e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001880   ffe5
001882   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001884   ffe5
001886   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001888   ffe5
00188a   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
00188c   ffe5
00188e   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
001890   ffe5
001892   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
001894   ffe5
001896   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
001898   ffe5
00189a   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
00189c   ffe5
00189e   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
0018a0   ffe5
                                           ;	.line	496; common/controller-axe.c	dirty = read_bit(dirty, curr.amp[0].fx);
0018a2   0e01     movlw   0x01             	MOVLW	0x01
0018a4   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
0018a6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           ;	.line	497; common/controller-axe.c	last_dirty = read_bit(dirty, last.amp[0].fx);
0018a8   0e01     movlw   0x01             	MOVLW	0x01
0018aa   1539     andwf   0x39, 0x0, 0x1   	ANDWF	(_last + 15), W, B
0018ac   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           ;	.line	498; common/controller-axe.c	dirty_changed = (u8)(dirty != last_dirty);
0018ae   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0018b0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0018b2   1801     xorwf   0x01, 0x0, 0x0   	XORWF	r0x01, W
0018b4   e101     bnz     0x0018b8         	BNZ	_00407_DS_
0018b6   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
                                           _00407_DS_:
0018b8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0018ba   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
0018bc   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
0018be   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0018c0   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0018c2   3602     rlcf    0x02, 0x1, 0x0   	RLCF	r0x02, F
                                           ;	.line	500; common/controller-axe.c	gain = or_default(curr.amp[0].gain);
0018c4   c1f8     movff   0x1f8, 0x003     	MOVFF	(_curr + 14), r0x03
0018c6   f003
0018c8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0018ca   e103     bnz     0x0018d2         	BNZ	_00260_DS_
0018cc   0e40     movlw   0x40             	MOVLW	0x40
0018ce   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0018d0   d002     bra     0x0018d6         	BRA	_00261_DS_
                                           _00260_DS_:
0018d2   c003     movff   0x003, 0x004     	MOVFF	r0x03, r0x04
0018d4   f004
                                           _00261_DS_:
0018d6   c004     movff   0x004, 0x003     	MOVFF	r0x04, r0x03
0018d8   f003
                                           ;	.line	501; common/controller-axe.c	last_gain = or_default(last.amp[0].gain);
0018da   c238     movff   0x238, 0x004     	MOVFF	(_last + 14), r0x04
0018dc   f004
0018de   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0018e0   e103     bnz     0x0018e8         	BNZ	_00262_DS_
0018e2   0e40     movlw   0x40             	MOVLW	0x40
0018e4   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0018e6   d002     bra     0x0018ec         	BRA	_00263_DS_
                                           _00262_DS_:
0018e8   c004     movff   0x004, 0x005     	MOVFF	r0x04, r0x05
0018ea   f005
                                           _00263_DS_:
0018ec   c005     movff   0x005, 0x004     	MOVFF	r0x05, r0x04
0018ee   f004
                                           ;	.line	502; common/controller-axe.c	gain_changed = (u8)(gain != last_gain);
0018f0   6a05     clrf    0x05, 0x0        	CLRF	r0x05
0018f2   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0018f4   1804     xorwf   0x04, 0x0, 0x0   	XORWF	r0x04, W
0018f6   e101     bnz     0x0018fa         	BNZ	_00409_DS_
0018f8   2a05     incf    0x05, 0x1, 0x0   	INCF	r0x05, F
                                           _00409_DS_:
0018fa   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0018fc   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
0018fe   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
001900   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
001902   6a05     clrf    0x05, 0x0        	CLRF	r0x05
001904   3605     rlcf    0x05, 0x1, 0x0   	RLCF	r0x05, F
                                           ;	.line	504; common/controller-axe.c	gate = (u8)(dirty && (gain >= 0x10));
001906   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001908   e003     bz      0x001910         	BZ	_00264_DS_
00190a   0e10     movlw   0x10             	MOVLW	0x10
00190c   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
00190e   e202     bc      0x001914         	BC	_00265_DS_
                                           _00264_DS_:
001910   6a06     clrf    0x06, 0x0        	CLRF	r0x06
001912   d002     bra     0x001918         	BRA	_00266_DS_
                                           _00265_DS_:
001914   0e01     movlw   0x01             	MOVLW	0x01
001916   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
                                           _00266_DS_:
                                           ;	.line	505; common/controller-axe.c	last_gate = (u8)(last_dirty && (last_gain >= 0x10));
001918   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00191a   e003     bz      0x001922         	BZ	_00267_DS_
00191c   0e10     movlw   0x10             	MOVLW	0x10
00191e   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
001920   e202     bc      0x001926         	BC	_00268_DS_
                                           _00267_DS_:
001922   6a07     clrf    0x07, 0x0        	CLRF	r0x07
001924   d002     bra     0x00192a         	BRA	_00269_DS_
                                           _00268_DS_:
001926   0e01     movlw   0x01             	MOVLW	0x01
001928   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
                                           _00269_DS_:
                                           ;	.line	507; common/controller-axe.c	diff |= gain_changed;
00192a   c005     movff   0x005, 0x008     	MOVFF	r0x05, r0x08
00192c   f008
                                           ;	.line	509; common/controller-axe.c	send_gain = (u8)((dirty && gain_changed) || dirty_changed);
00192e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001930   e002     bz      0x001936         	BZ	_00275_DS_
001932   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001934   e102     bnz     0x00193a         	BNZ	_00271_DS_
                                           _00275_DS_:
001936   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001938   e03b     bz      0x0019b0         	BZ	_00212_DS_
                                           _00271_DS_:
                                           ;	.line	512; common/controller-axe.c	midi_set_axe_cc(axe_cc_external3, (dirty == 0) ? (u8)0x00 : gain);
00193a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00193c   e102     bnz     0x001942         	BNZ	_00276_DS_
00193e   6a09     clrf    0x09, 0x0        	CLRF	r0x09
001940   d002     bra     0x001946         	BRA	_00277_DS_
                                           _00276_DS_:
001942   c003     movff   0x003, 0x009     	MOVFF	r0x03, r0x09
001944   f009
                                           _00277_DS_:
001946   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001948   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00194a   0e12     movlw   0x12             	MOVLW	0x12
00194c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00194e   0e02     movlw   0x02             	MOVLW	0x02
001950   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001952   0e0b     movlw   0x0b             	MOVLW	0x0b
001954   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001956   ec63     call    0x003cc6, 0x0    	CALL	_midi_send_cmd2
001958   f01e
00195a   0e04     movlw   0x04             	MOVLW	0x04
00195c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	513; common/controller-axe.c	if (gate != last_gate) {
00195e   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001960   1807     xorwf   0x07, 0x0, 0x0   	XORWF	r0x07, W
001962   e024     bz      0x0019ac         	BZ	_00210_DS_
                                           ;	.line	514; common/controller-axe.c	midi_set_axe_cc(axe_cc_byp_gate1, calc_cc_toggle(gate));
001964   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001966   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
001968   6c09     negf    0x09, 0x0        	NEGF	r0x09
00196a   4009     rrncf   0x09, 0x0, 0x0   	RRNCF	r0x09, W
00196c   0b7f     andlw   0x7f             	ANDLW	0x7f
00196e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001970   0e3c     movlw   0x3c             	MOVLW	0x3c
001972   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001974   0e02     movlw   0x02             	MOVLW	0x02
001976   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001978   0e0b     movlw   0x0b             	MOVLW	0x0b
00197a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00197c   ec63     call    0x003cc6, 0x0    	CALL	_midi_send_cmd2
00197e   f01e
001980   0e04     movlw   0x04             	MOVLW	0x04
001982   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	515; common/controller-axe.c	midi_set_axe_cc(axe_cc_byp_compressor1, calc_cc_toggle(!gate));
001984   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001986   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
001988   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
00198a   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00198c   6a09     clrf    0x09, 0x0        	CLRF	r0x09
00198e   3609     rlcf    0x09, 0x1, 0x0   	RLCF	r0x09, F
001990   6c09     negf    0x09, 0x0        	NEGF	r0x09
001992   4009     rrncf   0x09, 0x0, 0x0   	RRNCF	r0x09, W
001994   0b7f     andlw   0x7f             	ANDLW	0x7f
001996   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001998   0e2b     movlw   0x2b             	MOVLW	0x2b
00199a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00199c   0e02     movlw   0x02             	MOVLW	0x02
00199e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0019a0   0e0b     movlw   0x0b             	MOVLW	0x0b
0019a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0019a4   ec63     call    0x003cc6, 0x0    	CALL	_midi_send_cmd2
0019a6   f01e
0019a8   0e04     movlw   0x04             	MOVLW	0x04
0019aa   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00210_DS_:
                                           ;	.line	517; common/controller-axe.c	diff = 1;
0019ac   0e01     movlw   0x01             	MOVLW	0x01
0019ae   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
                                           _00212_DS_:
                                           ;	.line	520; common/controller-axe.c	dirty = read_bit(dirty, curr.amp[1].fx);
0019b0   0e01     movlw   0x01             	MOVLW	0x01
0019b2   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
                                           ; =DF= MOVFF: SRC op r0x09 replaced by WREG
0019b4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           ;	.line	521; common/controller-axe.c	last_dirty = read_bit(dirty, last.amp[1].fx);
0019b6   0e01     movlw   0x01             	MOVLW	0x01
0019b8   153c     andwf   0x3c, 0x0, 0x1   	ANDWF	(_last + 18), W, B
                                           ; =DF= MOVFF: SRC op r0x09 replaced by WREG
0019ba   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           ;	.line	522; common/controller-axe.c	dirty_changed = (u8)(dirty != last_dirty);
0019bc   6a09     clrf    0x09, 0x0        	CLRF	r0x09
0019be   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0019c0   1801     xorwf   0x01, 0x0, 0x0   	XORWF	r0x01, W
0019c2   e101     bnz     0x0019c6         	BNZ	_00419_DS_
0019c4   2a09     incf    0x09, 0x1, 0x0   	INCF	r0x09, F
                                           _00419_DS_:
0019c6   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0019c8   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
0019ca   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
0019cc   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0019ce   6a09     clrf    0x09, 0x0        	CLRF	r0x09
0019d0   3609     rlcf    0x09, 0x1, 0x0   	RLCF	r0x09, F
0019d2   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0019d4   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
                                           ;	.line	524; common/controller-axe.c	gain = or_default(curr.amp[1].gain);
0019d6   c1fb     movff   0x1fb, 0x009     	MOVFF	(_curr + 17), r0x09
0019d8   f009
0019da   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0019dc   e103     bnz     0x0019e4         	BNZ	_00278_DS_
0019de   0e40     movlw   0x40             	MOVLW	0x40
0019e0   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0019e2   d002     bra     0x0019e8         	BRA	_00279_DS_
                                           _00278_DS_:
0019e4   c009     movff   0x009, 0x00a     	MOVFF	r0x09, r0x0a
0019e6   f00a
                                           _00279_DS_:
0019e8   c00a     movff   0x00a, 0x003     	MOVFF	r0x0a, r0x03
0019ea   f003
                                           ;	.line	525; common/controller-axe.c	last_gain = or_default(last.amp[1].gain);
0019ec   c23b     movff   0x23b, 0x009     	MOVFF	(_last + 17), r0x09
0019ee   f009
0019f0   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
0019f2   e103     bnz     0x0019fa         	BNZ	_00280_DS_
0019f4   0e40     movlw   0x40             	MOVLW	0x40
0019f6   6e0a     movwf   0x0a, 0x0        	MOVWF	r0x0a
0019f8   d002     bra     0x0019fe         	BRA	_00281_DS_
                                           _00280_DS_:
0019fa   c009     movff   0x009, 0x00a     	MOVFF	r0x09, r0x0a
0019fc   f00a
                                           _00281_DS_:
0019fe   c00a     movff   0x00a, 0x004     	MOVFF	r0x0a, r0x04
001a00   f004
                                           ;	.line	526; common/controller-axe.c	gain_changed = (u8)(gain != last_gain);
001a02   6a09     clrf    0x09, 0x0        	CLRF	r0x09
001a04   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001a06   1804     xorwf   0x04, 0x0, 0x0   	XORWF	r0x04, W
001a08   e101     bnz     0x001a0c         	BNZ	_00421_DS_
001a0a   2a09     incf    0x09, 0x1, 0x0   	INCF	r0x09, F
                                           _00421_DS_:
001a0c   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001a0e   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
001a10   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
001a12   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
001a14   6a09     clrf    0x09, 0x0        	CLRF	r0x09
001a16   3609     rlcf    0x09, 0x1, 0x0   	RLCF	r0x09, F
001a18   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001a1a   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
                                           ;	.line	528; common/controller-axe.c	gate = (u8)(dirty && (gain >= 0x10));
001a1c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001a1e   e003     bz      0x001a26         	BZ	_00282_DS_
001a20   0e10     movlw   0x10             	MOVLW	0x10
001a22   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
001a24   e202     bc      0x001a2a         	BC	_00283_DS_
                                           _00282_DS_:
001a26   6a09     clrf    0x09, 0x0        	CLRF	r0x09
001a28   d002     bra     0x001a2e         	BRA	_00284_DS_
                                           _00283_DS_:
001a2a   0e01     movlw   0x01             	MOVLW	0x01
001a2c   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
                                           _00284_DS_:
001a2e   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
001a30   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
                                           ;	.line	529; common/controller-axe.c	last_gate = (u8)(last_dirty && (last_gain >= 0x10));
001a32   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001a34   e003     bz      0x001a3c         	BZ	_00285_DS_
001a36   0e10     movlw   0x10             	MOVLW	0x10
001a38   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
001a3a   e202     bc      0x001a40         	BC	_00286_DS_
                                           _00285_DS_:
001a3c   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001a3e   d002     bra     0x001a44         	BRA	_00287_DS_
                                           _00286_DS_:
001a40   0e01     movlw   0x01             	MOVLW	0x01
001a42   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           _00287_DS_:
001a44   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001a46   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
                                           ;	.line	531; common/controller-axe.c	diff |= gain_changed;
001a48   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001a4a   1208     iorwf   0x08, 0x1, 0x0   	IORWF	r0x08, F
                                           ;	.line	532; common/controller-axe.c	send_gain = (u8)((dirty && gain_changed) || dirty_changed);
001a4c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001a4e   e002     bz      0x001a54         	BZ	_00293_DS_
001a50   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001a52   e102     bnz     0x001a58         	BNZ	_00289_DS_
                                           _00293_DS_:
001a54   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001a56   e03b     bz      0x001ace         	BZ	_00216_DS_
                                           _00289_DS_:
                                           ;	.line	535; common/controller-axe.c	midi_set_axe_cc(axe_cc_external4, (dirty == 0) ? (u8)0x00 : gain);
001a58   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001a5a   e102     bnz     0x001a60         	BNZ	_00294_DS_
001a5c   6a00     clrf    0x00, 0x0        	CLRF	r0x00
001a5e   d002     bra     0x001a64         	BRA	_00295_DS_
                                           _00294_DS_:
001a60   c003     movff   0x003, 0x000     	MOVFF	r0x03, r0x00
001a62   f000
                                           _00295_DS_:
001a64   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001a66   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a68   0e13     movlw   0x13             	MOVLW	0x13
001a6a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a6c   0e02     movlw   0x02             	MOVLW	0x02
001a6e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a70   0e0b     movlw   0x0b             	MOVLW	0x0b
001a72   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a74   ec63     call    0x003cc6, 0x0    	CALL	_midi_send_cmd2
001a76   f01e
001a78   0e04     movlw   0x04             	MOVLW	0x04
001a7a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	536; common/controller-axe.c	if (gate != last_gate) {
001a7c   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001a7e   1807     xorwf   0x07, 0x0, 0x0   	XORWF	r0x07, W
001a80   e024     bz      0x001aca         	BZ	_00214_DS_
                                           ;	.line	537; common/controller-axe.c	midi_set_axe_cc(axe_cc_byp_gate2, calc_cc_toggle(gate));
001a82   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001a84   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001a86   6c00     negf    0x00, 0x0        	NEGF	r0x00
001a88   4000     rrncf   0x00, 0x0, 0x0   	RRNCF	r0x00, W
001a8a   0b7f     andlw   0x7f             	ANDLW	0x7f
001a8c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a8e   0e3d     movlw   0x3d             	MOVLW	0x3d
001a90   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a92   0e02     movlw   0x02             	MOVLW	0x02
001a94   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a96   0e0b     movlw   0x0b             	MOVLW	0x0b
001a98   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a9a   ec63     call    0x003cc6, 0x0    	CALL	_midi_send_cmd2
001a9c   f01e
001a9e   0e04     movlw   0x04             	MOVLW	0x04
001aa0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	538; common/controller-axe.c	midi_set_axe_cc(axe_cc_byp_compressor2, calc_cc_toggle(!gate));
001aa2   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001aa4   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
001aa6   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
001aa8   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
001aaa   6a06     clrf    0x06, 0x0        	CLRF	r0x06
001aac   3606     rlcf    0x06, 0x1, 0x0   	RLCF	r0x06, F
001aae   6c06     negf    0x06, 0x0        	NEGF	r0x06
001ab0   4006     rrncf   0x06, 0x0, 0x0   	RRNCF	r0x06, W
001ab2   0b7f     andlw   0x7f             	ANDLW	0x7f
001ab4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ab6   0e2c     movlw   0x2c             	MOVLW	0x2c
001ab8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001aba   0e02     movlw   0x02             	MOVLW	0x02
001abc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001abe   0e0b     movlw   0x0b             	MOVLW	0x0b
001ac0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ac2   ec63     call    0x003cc6, 0x0    	CALL	_midi_send_cmd2
001ac4   f01e
001ac6   0e04     movlw   0x04             	MOVLW	0x04
001ac8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00214_DS_:
                                           ;	.line	540; common/controller-axe.c	diff = 1;
001aca   0e01     movlw   0x01             	MOVLW	0x01
001acc   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
                                           _00216_DS_:
                                           ;	.line	545; common/controller-axe.c	xy = read_bit(xy, curr.amp[0].fx);
001ace   0e02     movlw   0x02             	MOVLW	0x02
001ad0   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
001ad2   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001ad4   4000     rrncf   0x00, 0x0, 0x0   	RRNCF	r0x00, W
001ad6   0b7f     andlw   0x7f             	ANDLW	0x7f
001ad8   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           ;	.line	546; common/controller-axe.c	if (xy != read_bit(xy, last.amp[0].fx)) {
001ada   0e02     movlw   0x02             	MOVLW	0x02
001adc   1539     andwf   0x39, 0x0, 0x1   	ANDWF	(_last + 15), W, B
001ade   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001ae0   4001     rrncf   0x01, 0x0, 0x0   	RRNCF	r0x01, W
001ae2   0b7f     andlw   0x7f             	ANDLW	0x7f
001ae4   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001ae6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001ae8   1801     xorwf   0x01, 0x0, 0x0   	XORWF	r0x01, W
001aea   e016     bz      0x001b18         	BZ	_00218_DS_
                                           ;	.line	548; common/controller-axe.c	midi_set_axe_cc(axe_cc_xy_amp1, calc_cc_toggle(!xy));
001aec   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001aee   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
001af0   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
001af2   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
001af4   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001af6   3601     rlcf    0x01, 0x1, 0x0   	RLCF	r0x01, F
001af8   6c01     negf    0x01, 0x0        	NEGF	r0x01
001afa   4001     rrncf   0x01, 0x0, 0x0   	RRNCF	r0x01, W
001afc   0b7f     andlw   0x7f             	ANDLW	0x7f
001afe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b00   0e64     movlw   0x64             	MOVLW	0x64
001b02   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b04   0e02     movlw   0x02             	MOVLW	0x02
001b06   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b08   0e0b     movlw   0x0b             	MOVLW	0x0b
001b0a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b0c   ec63     call    0x003cc6, 0x0    	CALL	_midi_send_cmd2
001b0e   f01e
001b10   0e04     movlw   0x04             	MOVLW	0x04
001b12   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	549; common/controller-axe.c	diff = 1;
001b14   0e01     movlw   0x01             	MOVLW	0x01
001b16   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
                                           _00218_DS_:
                                           ;	.line	551; common/controller-axe.c	xy = read_bit(xy, curr.amp[1].fx);
001b18   0e02     movlw   0x02             	MOVLW	0x02
001b1a   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
001b1c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001b1e   4001     rrncf   0x01, 0x0, 0x0   	RRNCF	r0x01, W
001b20   0b7f     andlw   0x7f             	ANDLW	0x7f
001b22   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           ;	.line	552; common/controller-axe.c	if (xy != read_bit(xy, last.amp[1].fx)) {
001b24   0e02     movlw   0x02             	MOVLW	0x02
001b26   153c     andwf   0x3c, 0x0, 0x1   	ANDWF	(_last + 18), W, B
001b28   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001b2a   4001     rrncf   0x01, 0x0, 0x0   	RRNCF	r0x01, W
001b2c   0b7f     andlw   0x7f             	ANDLW	0x7f
001b2e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001b30   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001b32   1801     xorwf   0x01, 0x0, 0x0   	XORWF	r0x01, W
001b34   e016     bz      0x001b62         	BZ	_00220_DS_
                                           ;	.line	554; common/controller-axe.c	midi_set_axe_cc(axe_cc_xy_amp2, calc_cc_toggle(!xy));
001b36   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001b38   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
001b3a   66e8     tstfsz  0xe8, 0x0        	TSTFSZ	WREG
001b3c   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
001b3e   6a00     clrf    0x00, 0x0        	CLRF	r0x00
001b40   3600     rlcf    0x00, 0x1, 0x0   	RLCF	r0x00, F
001b42   6c00     negf    0x00, 0x0        	NEGF	r0x00
001b44   4000     rrncf   0x00, 0x0, 0x0   	RRNCF	r0x00, W
001b46   0b7f     andlw   0x7f             	ANDLW	0x7f
001b48   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b4a   0e65     movlw   0x65             	MOVLW	0x65
001b4c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b4e   0e02     movlw   0x02             	MOVLW	0x02
001b50   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b52   0e0b     movlw   0x0b             	MOVLW	0x0b
001b54   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b56   ec63     call    0x003cc6, 0x0    	CALL	_midi_send_cmd2
001b58   f01e
001b5a   0e04     movlw   0x04             	MOVLW	0x04
001b5c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	555; common/controller-axe.c	diff = 1;
001b5e   0e01     movlw   0x01             	MOVLW	0x01
001b60   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
                                           _00220_DS_:
                                           ;	.line	559; common/controller-axe.c	if (curr.amp[0].volume != last.amp[0].volume) {
001b62   c1fa     movff   0x1fa, 0x000     	MOVFF	(_curr + 16), r0x00
001b64   f000
001b66   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001b68   193a     xorwf   0x3a, 0x0, 0x1   	XORWF	(_last + 16), W, B
001b6a   e00e     bz      0x001b88         	BZ	_00222_DS_
                                           ;	.line	561; common/controller-axe.c	midi_set_axe_cc(axe_cc_external1, (curr.amp[0].volume));
001b6c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001b6e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b70   0e10     movlw   0x10             	MOVLW	0x10
001b72   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b74   0e02     movlw   0x02             	MOVLW	0x02
001b76   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b78   0e0b     movlw   0x0b             	MOVLW	0x0b
001b7a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b7c   ec63     call    0x003cc6, 0x0    	CALL	_midi_send_cmd2
001b7e   f01e
001b80   0e04     movlw   0x04             	MOVLW	0x04
001b82   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	562; common/controller-axe.c	diff = 1;
001b84   0e01     movlw   0x01             	MOVLW	0x01
001b86   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
                                           _00222_DS_:
                                           ;	.line	564; common/controller-axe.c	if (curr.amp[1].volume != last.amp[1].volume) {
001b88   c1fd     movff   0x1fd, 0x000     	MOVFF	(_curr + 19), r0x00
001b8a   f000
001b8c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001b8e   193d     xorwf   0x3d, 0x0, 0x1   	XORWF	(_last + 19), W, B
001b90   e00e     bz      0x001bae         	BZ	_00224_DS_
                                           ;	.line	566; common/controller-axe.c	midi_set_axe_cc(axe_cc_external2, (curr.amp[1].volume));
001b92   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001b94   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b96   0e11     movlw   0x11             	MOVLW	0x11
001b98   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b9a   0e02     movlw   0x02             	MOVLW	0x02
001b9c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b9e   0e0b     movlw   0x0b             	MOVLW	0x0b
001ba0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ba2   ec63     call    0x003cc6, 0x0    	CALL	_midi_send_cmd2
001ba4   f01e
001ba6   0e04     movlw   0x04             	MOVLW	0x04
001ba8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	567; common/controller-axe.c	diff = 1;
001baa   0e01     movlw   0x01             	MOVLW	0x01
001bac   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
                                           _00224_DS_:
                                           ;	.line	571; common/controller-axe.c	if (read_bit(delay, curr.amp[0].fx) != read_bit(delay, last.amp[0].fx)) {
001bae   0e10     movlw   0x10             	MOVLW	0x10
001bb0   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
001bb2   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001bb4   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
001bb6   0b0f     andlw   0x0f             	ANDLW	0x0f
001bb8   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001bba   0e10     movlw   0x10             	MOVLW	0x10
001bbc   1539     andwf   0x39, 0x0, 0x1   	ANDWF	(_last + 15), W, B
001bbe   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001bc0   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
001bc2   0b0f     andlw   0x0f             	ANDLW	0x0f
001bc4   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001bc6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001bc8   1801     xorwf   0x01, 0x0, 0x0   	XORWF	r0x01, W
001bca   e00e     bz      0x001be8         	BZ	_00226_DS_
                                           ;	.line	572; common/controller-axe.c	midi_set_axe_cc(axe_cc_byp_delay1, calc_cc_toggle(read_bit(delay, curr.amp[0].fx)));
001bcc   6c00     negf    0x00, 0x0        	NEGF	r0x00
001bce   4000     rrncf   0x00, 0x0, 0x0   	RRNCF	r0x00, W
001bd0   0b7f     andlw   0x7f             	ANDLW	0x7f
001bd2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001bd4   0e2f     movlw   0x2f             	MOVLW	0x2f
001bd6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001bd8   0e02     movlw   0x02             	MOVLW	0x02
001bda   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001bdc   0e0b     movlw   0x0b             	MOVLW	0x0b
001bde   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001be0   ec63     call    0x003cc6, 0x0    	CALL	_midi_send_cmd2
001be2   f01e
001be4   0e04     movlw   0x04             	MOVLW	0x04
001be6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00226_DS_:
                                           ;	.line	574; common/controller-axe.c	if (read_bit(delay, curr.amp[1].fx) != read_bit(delay, last.amp[1].fx)) {
001be8   0e10     movlw   0x10             	MOVLW	0x10
001bea   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
001bec   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001bee   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
001bf0   0b0f     andlw   0x0f             	ANDLW	0x0f
001bf2   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001bf4   0e10     movlw   0x10             	MOVLW	0x10
001bf6   153c     andwf   0x3c, 0x0, 0x1   	ANDWF	(_last + 18), W, B
001bf8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001bfa   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
001bfc   0b0f     andlw   0x0f             	ANDLW	0x0f
001bfe   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001c00   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001c02   1801     xorwf   0x01, 0x0, 0x0   	XORWF	r0x01, W
001c04   e00e     bz      0x001c22         	BZ	_00228_DS_
                                           ;	.line	575; common/controller-axe.c	midi_set_axe_cc(axe_cc_byp_delay2, calc_cc_toggle(read_bit(delay, curr.amp[1].fx)));
001c06   6c00     negf    0x00, 0x0        	NEGF	r0x00
001c08   4000     rrncf   0x00, 0x0, 0x0   	RRNCF	r0x00, W
001c0a   0b7f     andlw   0x7f             	ANDLW	0x7f
001c0c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c0e   0e30     movlw   0x30             	MOVLW	0x30
001c10   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c12   0e02     movlw   0x02             	MOVLW	0x02
001c14   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c16   0e0b     movlw   0x0b             	MOVLW	0x0b
001c18   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c1a   ec63     call    0x003cc6, 0x0    	CALL	_midi_send_cmd2
001c1c   f01e
001c1e   0e04     movlw   0x04             	MOVLW	0x04
001c20   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00228_DS_:
                                           ;	.line	578; common/controller-axe.c	if (read_bit(pitch, curr.amp[0].fx) != read_bit(pitch, last.amp[0].fx)) {
001c22   0e04     movlw   0x04             	MOVLW	0x04
001c24   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
001c26   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001c28   4000     rrncf   0x00, 0x0, 0x0   	RRNCF	r0x00, W
001c2a   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
001c2c   0b3f     andlw   0x3f             	ANDLW	0x3f
001c2e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001c30   0e04     movlw   0x04             	MOVLW	0x04
001c32   1539     andwf   0x39, 0x0, 0x1   	ANDWF	(_last + 15), W, B
001c34   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001c36   4001     rrncf   0x01, 0x0, 0x0   	RRNCF	r0x01, W
001c38   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
001c3a   0b3f     andlw   0x3f             	ANDLW	0x3f
001c3c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001c3e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001c40   1801     xorwf   0x01, 0x0, 0x0   	XORWF	r0x01, W
001c42   e00e     bz      0x001c60         	BZ	_00230_DS_
                                           ;	.line	579; common/controller-axe.c	midi_set_axe_cc(axe_cc_byp_pitch1, calc_cc_toggle(read_bit(pitch, curr.amp[0].fx)));
001c44   6c00     negf    0x00, 0x0        	NEGF	r0x00
001c46   4000     rrncf   0x00, 0x0, 0x0   	RRNCF	r0x00, W
001c48   0b7f     andlw   0x7f             	ANDLW	0x7f
001c4a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c4c   0e4d     movlw   0x4d             	MOVLW	0x4d
001c4e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c50   0e02     movlw   0x02             	MOVLW	0x02
001c52   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c54   0e0b     movlw   0x0b             	MOVLW	0x0b
001c56   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c58   ec63     call    0x003cc6, 0x0    	CALL	_midi_send_cmd2
001c5a   f01e
001c5c   0e04     movlw   0x04             	MOVLW	0x04
001c5e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00230_DS_:
                                           ;	.line	581; common/controller-axe.c	if (read_bit(pitch, curr.amp[1].fx) != read_bit(pitch, last.amp[1].fx)) {
001c60   0e04     movlw   0x04             	MOVLW	0x04
001c62   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
001c64   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001c66   4000     rrncf   0x00, 0x0, 0x0   	RRNCF	r0x00, W
001c68   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
001c6a   0b3f     andlw   0x3f             	ANDLW	0x3f
001c6c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001c6e   0e04     movlw   0x04             	MOVLW	0x04
001c70   153c     andwf   0x3c, 0x0, 0x1   	ANDWF	(_last + 18), W, B
001c72   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001c74   4001     rrncf   0x01, 0x0, 0x0   	RRNCF	r0x01, W
001c76   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
001c78   0b3f     andlw   0x3f             	ANDLW	0x3f
001c7a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001c7c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001c7e   1801     xorwf   0x01, 0x0, 0x0   	XORWF	r0x01, W
001c80   e00e     bz      0x001c9e         	BZ	_00232_DS_
                                           ;	.line	582; common/controller-axe.c	midi_set_axe_cc(axe_cc_byp_pitch2, calc_cc_toggle(read_bit(pitch, curr.amp[1].fx)));
001c82   6c00     negf    0x00, 0x0        	NEGF	r0x00
001c84   4000     rrncf   0x00, 0x0, 0x0   	RRNCF	r0x00, W
001c86   0b7f     andlw   0x7f             	ANDLW	0x7f
001c88   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c8a   0e4e     movlw   0x4e             	MOVLW	0x4e
001c8c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c8e   0e02     movlw   0x02             	MOVLW	0x02
001c90   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c92   0e0b     movlw   0x0b             	MOVLW	0x0b
001c94   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c96   ec63     call    0x003cc6, 0x0    	CALL	_midi_send_cmd2
001c98   f01e
001c9a   0e04     movlw   0x04             	MOVLW	0x04
001c9c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00232_DS_:
                                           ;	.line	585; common/controller-axe.c	if (read_bit(chorus, curr.amp[0].fx) != read_bit(chorus, last.amp[0].fx)) {
001c9e   0e08     movlw   0x08             	MOVLW	0x08
001ca0   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
001ca2   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001ca4   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
001ca6   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
001ca8   0b1f     andlw   0x1f             	ANDLW	0x1f
001caa   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001cac   0e08     movlw   0x08             	MOVLW	0x08
001cae   1539     andwf   0x39, 0x0, 0x1   	ANDWF	(_last + 15), W, B
001cb0   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001cb2   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
001cb4   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
001cb6   0b1f     andlw   0x1f             	ANDLW	0x1f
001cb8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001cba   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001cbc   1801     xorwf   0x01, 0x0, 0x0   	XORWF	r0x01, W
001cbe   e00e     bz      0x001cdc         	BZ	_00234_DS_
                                           ;	.line	586; common/controller-axe.c	midi_set_axe_cc(axe_cc_byp_chorus1, calc_cc_toggle(read_bit(chorus, curr.amp[0].fx)));
001cc0   6c00     negf    0x00, 0x0        	NEGF	r0x00
001cc2   4000     rrncf   0x00, 0x0, 0x0   	RRNCF	r0x00, W
001cc4   0b7f     andlw   0x7f             	ANDLW	0x7f
001cc6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001cc8   0e29     movlw   0x29             	MOVLW	0x29
001cca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ccc   0e02     movlw   0x02             	MOVLW	0x02
001cce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001cd0   0e0b     movlw   0x0b             	MOVLW	0x0b
001cd2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001cd4   ec63     call    0x003cc6, 0x0    	CALL	_midi_send_cmd2
001cd6   f01e
001cd8   0e04     movlw   0x04             	MOVLW	0x04
001cda   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00234_DS_:
                                           ;	.line	588; common/controller-axe.c	if (read_bit(chorus, curr.amp[1].fx) != read_bit(chorus, last.amp[1].fx)) {
001cdc   0e08     movlw   0x08             	MOVLW	0x08
001cde   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
001ce0   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001ce2   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
001ce4   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
001ce6   0b1f     andlw   0x1f             	ANDLW	0x1f
001ce8   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001cea   0e08     movlw   0x08             	MOVLW	0x08
001cec   153c     andwf   0x3c, 0x0, 0x1   	ANDWF	(_last + 18), W, B
001cee   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001cf0   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
001cf2   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
001cf4   0b1f     andlw   0x1f             	ANDLW	0x1f
001cf6   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001cf8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001cfa   1801     xorwf   0x01, 0x0, 0x0   	XORWF	r0x01, W
001cfc   e00e     bz      0x001d1a         	BZ	_00236_DS_
                                           ;	.line	589; common/controller-axe.c	midi_set_axe_cc(axe_cc_byp_chorus2, calc_cc_toggle(read_bit(chorus, curr.amp[1].fx)));
001cfe   6c00     negf    0x00, 0x0        	NEGF	r0x00
001d00   4000     rrncf   0x00, 0x0, 0x0   	RRNCF	r0x00, W
001d02   0b7f     andlw   0x7f             	ANDLW	0x7f
001d04   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d06   0e2a     movlw   0x2a             	MOVLW	0x2a
001d08   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d0a   0e02     movlw   0x02             	MOVLW	0x02
001d0c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d0e   0e0b     movlw   0x0b             	MOVLW	0x0b
001d10   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d12   ec63     call    0x003cc6, 0x0    	CALL	_midi_send_cmd2
001d14   f01e
001d16   0e04     movlw   0x04             	MOVLW	0x04
001d18   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00236_DS_:
                                           ;	.line	592; common/controller-axe.c	if (read_bit(filter, curr.amp[0].fx) != read_bit(filter, last.amp[0].fx)) {
001d1a   0e20     movlw   0x20             	MOVLW	0x20
001d1c   15f9     andwf   0xf9, 0x0, 0x1   	ANDWF	(_curr + 15), W, B
001d1e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001d20   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
001d22   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
001d24   0b07     andlw   0x07             	ANDLW	0x07
001d26   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001d28   0e20     movlw   0x20             	MOVLW	0x20
001d2a   1539     andwf   0x39, 0x0, 0x1   	ANDWF	(_last + 15), W, B
001d2c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001d2e   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
001d30   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
001d32   0b07     andlw   0x07             	ANDLW	0x07
001d34   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001d36   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001d38   1801     xorwf   0x01, 0x0, 0x0   	XORWF	r0x01, W
001d3a   e00e     bz      0x001d58         	BZ	_00238_DS_
                                           ;	.line	593; common/controller-axe.c	midi_set_axe_cc(axe_cc_byp_phaser1, calc_cc_toggle(read_bit(filter, curr.amp[0].fx)));
001d3c   6c00     negf    0x00, 0x0        	NEGF	r0x00
001d3e   4000     rrncf   0x00, 0x0, 0x0   	RRNCF	r0x00, W
001d40   0b7f     andlw   0x7f             	ANDLW	0x7f
001d42   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d44   0e4b     movlw   0x4b             	MOVLW	0x4b
001d46   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d48   0e02     movlw   0x02             	MOVLW	0x02
001d4a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d4c   0e0b     movlw   0x0b             	MOVLW	0x0b
001d4e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d50   ec63     call    0x003cc6, 0x0    	CALL	_midi_send_cmd2
001d52   f01e
001d54   0e04     movlw   0x04             	MOVLW	0x04
001d56   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00238_DS_:
                                           ;	.line	595; common/controller-axe.c	if (read_bit(filter, curr.amp[1].fx) != read_bit(filter, last.amp[1].fx)) {
001d58   0e20     movlw   0x20             	MOVLW	0x20
001d5a   15fc     andwf   0xfc, 0x0, 0x1   	ANDWF	(_curr + 18), W, B
001d5c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001d5e   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
001d60   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
001d62   0b07     andlw   0x07             	ANDLW	0x07
001d64   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001d66   0e20     movlw   0x20             	MOVLW	0x20
001d68   153c     andwf   0x3c, 0x0, 0x1   	ANDWF	(_last + 18), W, B
001d6a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001d6c   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
001d6e   40e8     rrncf   0xe8, 0x0, 0x0   	RRNCF	WREG, W
001d70   0b07     andlw   0x07             	ANDLW	0x07
001d72   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001d74   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001d76   1801     xorwf   0x01, 0x0, 0x0   	XORWF	r0x01, W
001d78   e00e     bz      0x001d96         	BZ	_00240_DS_
                                           ;	.line	596; common/controller-axe.c	midi_set_axe_cc(axe_cc_byp_phaser2, calc_cc_toggle(read_bit(filter, curr.amp[1].fx)));
001d7a   6c00     negf    0x00, 0x0        	NEGF	r0x00
001d7c   4000     rrncf   0x00, 0x0, 0x0   	RRNCF	r0x00, W
001d7e   0b7f     andlw   0x7f             	ANDLW	0x7f
001d80   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d82   0e4c     movlw   0x4c             	MOVLW	0x4c
001d84   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d86   0e02     movlw   0x02             	MOVLW	0x02
001d88   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d8a   0e0b     movlw   0x0b             	MOVLW	0x0b
001d8c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d8e   ec63     call    0x003cc6, 0x0    	CALL	_midi_send_cmd2
001d90   f01e
001d92   0e04     movlw   0x04             	MOVLW	0x04
001d94   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00240_DS_:
                                           ;	.line	599; common/controller-axe.c	if (curr.amp[0].fx != last.amp[0].fx) {
001d96   51f9     movf    0xf9, 0x0, 0x1   	MOVF	(_curr + 15), W, B
001d98   1939     xorwf   0x39, 0x0, 0x1   	XORWF	(_last + 15), W, B
001d9a   e002     bz      0x001da0         	BZ	_00242_DS_
                                           ;	.line	600; common/controller-axe.c	diff = 1;
001d9c   0e01     movlw   0x01             	MOVLW	0x01
001d9e   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
                                           _00242_DS_:
                                           ;	.line	602; common/controller-axe.c	if (curr.amp[1].fx != last.amp[1].fx) {
001da0   51fc     movf    0xfc, 0x0, 0x1   	MOVF	(_curr + 18), W, B
001da2   193c     xorwf   0x3c, 0x0, 0x1   	XORWF	(_last + 18), W, B
001da4   e002     bz      0x001daa         	BZ	_00244_DS_
                                           ;	.line	603; common/controller-axe.c	diff = 1;
001da6   0e01     movlw   0x01             	MOVLW	0x01
001da8   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
                                           _00244_DS_:
                                           ;	.line	606; common/controller-axe.c	if (curr.pr_idx != last.pr_idx) {
001daa   51f4     movf    0xf4, 0x0, 0x1   	MOVF	(_curr + 10), W, B
001dac   1934     xorwf   0x34, 0x0, 0x1   	XORWF	(_last + 10), W, B
001dae   e003     bz      0x001db6         	BZ	_00248_DS_
                                           ;	.line	607; common/controller-axe.c	diff = 1;
001db0   0e01     movlw   0x01             	MOVLW	0x01
001db2   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
001db4   d005     bra     0x001dc0         	BRA	_00249_DS_
                                           _00248_DS_:
                                           ;	.line	608; common/controller-axe.c	} else if (curr.sc_idx != last.sc_idx) {
001db6   51f5     movf    0xf5, 0x0, 0x1   	MOVF	(_curr + 11), W, B
001db8   1935     xorwf   0x35, 0x0, 0x1   	XORWF	(_last + 11), W, B
001dba   e002     bz      0x001dc0         	BZ	_00249_DS_
                                           ;	.line	609; common/controller-axe.c	diff = 1;
001dbc   0e01     movlw   0x01             	MOVLW	0x01
001dbe   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
                                           _00249_DS_:
                                           ;	.line	612; common/controller-axe.c	if (curr.selected_amp != last.selected_amp) {
001dc0   51f6     movf    0xf6, 0x0, 0x1   	MOVF	(_curr + 12), W, B
001dc2   1936     xorwf   0x36, 0x0, 0x1   	XORWF	(_last + 12), W, B
001dc4   e002     bz      0x001dca         	BZ	_00251_DS_
                                           ;	.line	613; common/controller-axe.c	diff = 1;
001dc6   0e01     movlw   0x01             	MOVLW	0x01
001dc8   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
                                           _00251_DS_:
                                           ;	.line	615; common/controller-axe.c	if (curr.selected_both != last.selected_both) {
001dca   51f7     movf    0xf7, 0x0, 0x1   	MOVF	(_curr + 13), W, B
001dcc   1937     xorwf   0x37, 0x0, 0x1   	XORWF	(_last + 13), W, B
001dce   e002     bz      0x001dd4         	BZ	_00253_DS_
                                           ;	.line	616; common/controller-axe.c	diff = 1;
001dd0   0e01     movlw   0x01             	MOVLW	0x01
001dd2   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
                                           _00253_DS_:
                                           ;	.line	618; common/controller-axe.c	if (curr.modified != last.modified) {
001dd4   51ff     movf    0xff, 0x0, 0x1   	MOVF	(_curr + 21), W, B
001dd6   193f     xorwf   0x3f, 0x0, 0x1   	XORWF	(_last + 21), W, B
001dd8   e002     bz      0x001dde         	BZ	_00255_DS_
                                           ;	.line	619; common/controller-axe.c	diff = 1;
001dda   0e01     movlw   0x01             	MOVLW	0x01
001ddc   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
                                           _00255_DS_:
                                           ;	.line	623; common/controller-axe.c	if (diff) {
001dde   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
001de0   e002     bz      0x001de6         	BZ	_00258_DS_
                                           ;	.line	624; common/controller-axe.c	update_lcd();
001de2   ec0c     call    0x001018, 0x0    	CALL	_update_lcd
001de4   f008
                                           _00258_DS_:
001de6   cfe4     movff   0xfe4, 0x00a     	MOVFF	PREINC1, r0x0a
001de8   f00a
001dea   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
001dec   f009
001dee   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
001df0   f008
001df2   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
001df4   f007
001df6   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
001df8   f006
001dfa   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
001dfc   f005
001dfe   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
001e00   f004
001e02   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001e04   f003
001e06   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001e08   f002
001e0a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001e0c   f001
001e0e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001e10   f000
001e12   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__send_leds	code
                                           _send_leds:
                                           ;	.line	433; common/controller-axe.c	static void send_leds(void) {
003616   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003618   ffe5
00361a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00361c   ffe5
00361e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003620   ffe5
003622   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003624   ffe5
003626   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
003628   ffe5
00362a   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
00362c   ffe5
                                           ; ;multiply lit val:0x02 by variable (_curr + 4) and store in r0x00
                                           ;	.line	435; common/controller-axe.c	curr.leds = (u16)curr.mode_leds[curr.mode].bot.byte | ((u16)curr.mode_leds[curr.mode].top.byte << 8);
00362e   51ee     movf    0xee, 0x0, 0x1   	MOVF	(_curr + 4), W, B
003630   0d02     mullw   0x02             	MULLW	0x02
003632   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
003634   f000
003636   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
003638   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
00363a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00363c   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00363e   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
003640   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
003642   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
003644   ffe9
003646   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
003648   ffea
00364a   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
00364c   f001
00364e   6a02     clrf    0x02, 0x0        	CLRF	r0x02
003650   6a03     clrf    0x03, 0x0        	CLRF	r0x03
003652   0eef     movlw   0xef             	MOVLW	LOW(_curr + 5)
003654   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
003656   0e01     movlw   0x01             	MOVLW	HIGH(_curr + 5)
003658   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
00365a   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
00365c   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
00365e   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003660   ffe9
003662   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
003664   ffea
003666   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
003668   f000
00366a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00366c   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00366e   6a04     clrf    0x04, 0x0        	CLRF	r0x04
003670   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
003672   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
003674   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
003676   1202     iorwf   0x02, 0x1, 0x0   	IORWF	r0x02, F
003678   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00367a   6fec     movwf   0xec, 0x1        	MOVWF	(_curr + 2), B
00367c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00367e   6fed     movwf   0xed, 0x1        	MOVWF	(_curr + 3), B
                                           ;	.line	436; common/controller-axe.c	if (curr.leds != last.leds) {
003680   c1ec     movff   0x1ec, 0x000     	MOVFF	(_curr + 2), r0x00
003682   f000
003684   c1ed     movff   0x1ed, 0x003     	MOVFF	(_curr + 3), r0x03
003686   f003
003688   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00368a   192c     xorwf   0x2c, 0x0, 0x1   	XORWF	(_last + 2), W, B
00368c   e103     bnz     0x003694         	BNZ	_00204_DS_
00368e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003690   192d     xorwf   0x2d, 0x0, 0x1   	XORWF	(_last + 3), W, B
003692   e00c     bz      0x0036ac         	BZ	_00197_DS_
                                           _00204_DS_:
                                           ;	.line	437; common/controller-axe.c	led_set(curr.leds);
003694   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
003696   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003698   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00369a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00369c   ec4c     call    0x004298, 0x0    	CALL	_led_set
00369e   f021
0036a0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0036a2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	438; common/controller-axe.c	last.leds = curr.leds;
0036a4   51ec     movf    0xec, 0x0, 0x1   	MOVF	(_curr + 2), W, B
0036a6   6f2c     movwf   0x2c, 0x1        	MOVWF	(_last + 2), B
0036a8   51ed     movf    0xed, 0x0, 0x1   	MOVF	(_curr + 3), W, B
0036aa   6f2d     movwf   0x2d, 0x1        	MOVWF	(_last + 3), B
                                           _00197_DS_:
0036ac   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
0036ae   f005
0036b0   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
0036b2   f004
0036b4   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0036b6   f003
0036b8   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0036ba   f002
0036bc   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0036be   f001
0036c0   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0036c2   f000
0036c4   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__copy_str_lcd	code
                                           _copy_str_lcd:
                                           ;	.line	390; common/controller-axe.c	static void copy_str_lcd(rom const char *src, char *dst) {
002d72   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002d74   ffe5
002d76   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002d78   ffd9
002d7a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002d7c   ffe5
002d7e   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002d80   ffe5
002d82   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002d84   ffe5
002d86   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002d88   ffe5
002d8a   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
002d8c   ffe5
002d8e   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
002d90   ffe5
002d92   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
002d94   ffe5
002d96   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
002d98   ffe5
002d9a   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
002d9c   ffe5
002d9e   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
002da0   ffe5
002da2   0e02     movlw   0x02             	MOVLW	0x02
002da4   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
002da6   f000
002da8   0e03     movlw   0x03             	MOVLW	0x03
002daa   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
002dac   f001
002dae   0e04     movlw   0x04             	MOVLW	0x04
002db0   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
002db2   f002
002db4   0e05     movlw   0x05             	MOVLW	0x05
002db6   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
002db8   f003
002dba   0e06     movlw   0x06             	MOVLW	0x06
002dbc   cfdb     movff   0xfdb, 0x004     	MOVFF	PLUSW2, r0x04
002dbe   f004
002dc0   0e07     movlw   0x07             	MOVLW	0x07
002dc2   cfdb     movff   0xfdb, 0x005     	MOVFF	PLUSW2, r0x05
002dc4   f005
                                           ;	.line	392; common/controller-axe.c	for (i = 0; src[i] != 0 && i < LCD_COLS; ++i) {
002dc6   6a06     clrf    0x06, 0x0        	CLRF	r0x06
                                           _00165_DS_:
002dc8   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
002dca   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002dcc   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
002dce   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002dd0   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002dd2   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002dd4   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002dd6   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
002dd8   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
002dda   c007     movff   0x007, 0xff6     	MOVFF	r0x07, TBLPTRL
002ddc   fff6
002dde   c008     movff   0x008, 0xff7     	MOVFF	r0x08, TBLPTRH
002de0   fff7
002de2   c009     movff   0x009, 0xff8     	MOVFF	r0x09, TBLPTRU
002de4   fff8
002de6   0009     tblrd*+                  	TBLRD*+	
002de8   cff5     movff   0xff5, 0x007     	MOVFF	TABLAT, r0x07
002dea   f007
002dec   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
002dee   e015     bz      0x002e1a         	BZ	_00176_DS_
002df0   0e14     movlw   0x14             	MOVLW	0x14
002df2   5c06     subwf   0x06, 0x0, 0x0   	SUBWF	r0x06, W
002df4   e212     bc      0x002e1a         	BC	_00176_DS_
                                           ;	.line	393; common/controller-axe.c	dst[i] = src[i];
002df6   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
002df8   2403     addwf   0x03, 0x0, 0x0   	ADDWF	r0x03, W
002dfa   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002dfc   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002dfe   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
002e00   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
002e02   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002e04   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
002e06   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
002e08   ffe5
002e0a   c008     movff   0x008, 0xfe9     	MOVFF	r0x08, FSR0L
002e0c   ffe9
002e0e   c009     movff   0x009, 0xff3     	MOVFF	r0x09, PRODL
002e10   fff3
002e12   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
002e14   f021
                                           ;	.line	392; common/controller-axe.c	for (i = 0; src[i] != 0 && i < LCD_COLS; ++i) {
002e16   2a06     incf    0x06, 0x1, 0x0   	INCF	r0x06, F
002e18   d7d7     bra     0x002dc8         	BRA	_00165_DS_
                                           _00176_DS_:
002e1a   c006     movff   0x006, 0x000     	MOVFF	r0x06, r0x00
002e1c   f000
                                           _00168_DS_:
                                           ;	.line	395; common/controller-axe.c	for (; i < LCD_COLS; i++) {
002e1e   0e14     movlw   0x14             	MOVLW	0x14
002e20   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
002e22   e214     bc      0x002e4c         	BC	_00170_DS_
                                           ;	.line	396; common/controller-axe.c	dst[i] = ' ';
002e24   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002e26   2403     addwf   0x03, 0x0, 0x0   	ADDWF	r0x03, W
002e28   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002e2a   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002e2c   2004     addwfc  0x04, 0x0, 0x0   	ADDWFC	r0x04, W
002e2e   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002e30   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002e32   2005     addwfc  0x05, 0x0, 0x0   	ADDWFC	r0x05, W
002e34   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002e36   0e20     movlw   0x20             	MOVLW	0x20
002e38   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002e3a   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
002e3c   ffe9
002e3e   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
002e40   fff3
002e42   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
002e44   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
002e46   f021
                                           ;	.line	395; common/controller-axe.c	for (; i < LCD_COLS; i++) {
002e48   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
002e4a   d7e9     bra     0x002e1e         	BRA	_00168_DS_
                                           _00170_DS_:
002e4c   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
002e4e   f009
002e50   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
002e52   f008
002e54   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
002e56   f007
002e58   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
002e5a   f006
002e5c   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
002e5e   f005
002e60   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
002e62   f004
002e64   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002e66   f003
002e68   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002e6a   f002
002e6c   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002e6e   f001
002e70   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002e72   f000
002e74   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002e76   ffd9
002e78   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__bcd	code
                                           _bcd:
                                           ;	.line	377; common/controller-axe.c	static char *bcd(u16 n) {
003eac   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003eae   ffe5
003eb0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003eb2   ffd9
003eb4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003eb6   ffe5
003eb8   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003eba   ffe5
003ebc   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003ebe   ffe5
003ec0   0e02     movlw   0x02             	MOVLW	0x02
003ec2   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003ec4   f000
003ec6   0e03     movlw   0x03             	MOVLW	0x03
003ec8   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003eca   f001
                                           ;	.line	378; common/controller-axe.c	bcd_tmp[5] = 0;
003ecc   6b4d     clrf    0x4d, 0x1        	CLRF	(_bcd_tmp + 5), B
                                           ;	.line	379; common/controller-axe.c	bcd_tmp[4] = ' ';
003ece   0e20     movlw   0x20             	MOVLW	0x20
003ed0   6f4c     movwf   0x4c, 0x1        	MOVWF	(_bcd_tmp + 4), B
                                           ;	.line	380; common/controller-axe.c	bcd_tmp[3] = ' ';
003ed2   6f4b     movwf   0x4b, 0x1        	MOVWF	(_bcd_tmp + 3), B
                                           ;	.line	381; common/controller-axe.c	bcd_tmp[2] = ' ';
003ed4   6f4a     movwf   0x4a, 0x1        	MOVWF	(_bcd_tmp + 2), B
                                           ;	.line	382; common/controller-axe.c	bcd_tmp[1] = ' ';
003ed6   6f49     movwf   0x49, 0x1        	MOVWF	(_bcd_tmp + 1), B
                                           ;	.line	383; common/controller-axe.c	bcd_tmp[0] = ' ';
003ed8   6f48     movwf   0x48, 0x1        	MOVWF	_bcd_tmp, B
                                           ;	.line	384; common/controller-axe.c	bcdtoa(bcd_tmp, 4, n);
003eda   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003edc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003ede   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003ee0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003ee2   0e04     movlw   0x04             	MOVLW	0x04
003ee4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003ee6   0e80     movlw   0x80             	MOVLW	0x80
003ee8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003eea   0e02     movlw   0x02             	MOVLW	HIGH(_bcd_tmp)
003eec   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003eee   0e48     movlw   0x48             	MOVLW	LOW(_bcd_tmp)
003ef0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003ef2   ec2f     call    0x00265e, 0x0    	CALL	_bcdtoa
003ef4   f013
003ef6   0e06     movlw   0x06             	MOVLW	0x06
003ef8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	385; common/controller-axe.c	return bcd_tmp;
003efa   0e02     movlw   0x02             	MOVLW	HIGH(_bcd_tmp)
003efc   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
003efe   0e80     movlw   0x80             	MOVLW	0x80
003f00   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
003f02   c002     movff   0x002, 0xff4     	MOVFF	r0x02, PRODH
003f04   fff4
003f06   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
003f08   fff3
003f0a   0e48     movlw   0x48             	MOVLW	LOW(_bcd_tmp)
003f0c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003f0e   f002
003f10   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003f12   f001
003f14   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003f16   f000
003f18   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003f1a   ffd9
003f1c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__bcdtoa	code
                                           _bcdtoa:
                                           ;	.line	352; common/controller-axe.c	static void bcdtoa(char *dst, u8 col, u16 bcd) {
00265e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002660   ffe5
002662   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002664   ffd9
002666   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002668   ffe5
00266a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00266c   ffe5
00266e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002670   ffe5
002672   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002674   ffe5
002676   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
002678   ffe5
00267a   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
00267c   ffe5
00267e   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
002680   ffe5
002682   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
002684   ffe5
002686   0e02     movlw   0x02             	MOVLW	0x02
002688   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00268a   f000
00268c   0e03     movlw   0x03             	MOVLW	0x03
00268e   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
002690   f001
002692   0e04     movlw   0x04             	MOVLW	0x04
002694   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
002696   f002
002698   0e05     movlw   0x05             	MOVLW	0x05
00269a   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
00269c   f003
00269e   0e06     movlw   0x06             	MOVLW	0x06
0026a0   cfdb     movff   0xfdb, 0x004     	MOVFF	PLUSW2, r0x04
0026a2   f004
0026a4   0e07     movlw   0x07             	MOVLW	0x07
0026a6   cfdb     movff   0xfdb, 0x005     	MOVFF	PLUSW2, r0x05
0026a8   f005
                                           ;	.line	354; common/controller-axe.c	dst += col;
0026aa   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0026ac   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0026ae   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0026b0   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0026b2   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0026b4   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
                                           ;	.line	355; common/controller-axe.c	sign = (u8) ((bcd & 0x8000) != 0);
0026b6   ae05     btfss   0x05, 0x7, 0x0   	BTFSS	r0x05, 7
0026b8   d003     bra     0x0026c0         	BRA	_00134_DS_
0026ba   0e01     movlw   0x01             	MOVLW	0x01
0026bc   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0026be   d001     bra     0x0026c2         	BRA	_00135_DS_
                                           _00134_DS_:
0026c0   6a03     clrf    0x03, 0x0        	CLRF	r0x03
                                           _00135_DS_:
                                           ;	.line	356; common/controller-axe.c	if ((bcd & 0x7FFF) == 0x7FFF) {
0026c2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0026c4   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0026c6   0e7f     movlw   0x7f             	MOVLW	0x7f
0026c8   1405     andwf   0x05, 0x0, 0x0   	ANDWF	r0x05, W
0026ca   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0026cc   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0026ce   0aff     xorlw   0xff             	XORLW	0xff
0026d0   e103     bnz     0x0026d8         	BNZ	_00150_DS_
0026d2   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0026d4   0a7f     xorlw   0x7f             	XORLW	0x7f
0026d6   e001     bz      0x0026da         	BZ	_00151_DS_
                                           _00150_DS_:
0026d8   d028     bra     0x00272a         	BRA	_00128_DS_
                                           _00151_DS_:
                                           ;	.line	357; common/controller-axe.c	*dst-- = 'f';
0026da   0e66     movlw   0x66             	MOVLW	0x66
0026dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026de   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0026e0   ffe9
0026e2   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0026e4   fff3
0026e6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0026e8   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
0026ea   f021
0026ec   0eff     movlw   0xff             	MOVLW	0xff
0026ee   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0026f0   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0026f2   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
                                           ;	.line	358; common/controller-axe.c	*dst-- = 'n';
0026f4   0e6e     movlw   0x6e             	MOVLW	0x6e
0026f6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026f8   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0026fa   ffe9
0026fc   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0026fe   fff3
002700   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002702   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
002704   f021
002706   0eff     movlw   0xff             	MOVLW	0xff
002708   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00270a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00270c   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
                                           ;	.line	359; common/controller-axe.c	*dst-- = 'i';
00270e   0e69     movlw   0x69             	MOVLW	0x69
002710   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002712   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
002714   ffe9
002716   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
002718   fff3
00271a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00271c   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
00271e   f021
002720   0eff     movlw   0xff             	MOVLW	0xff
002722   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002724   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
002726   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002728   d053     bra     0x0027d0         	BRA	_00129_DS_
                                           _00128_DS_:
                                           ;	.line	361; common/controller-axe.c	*dst-- = (char) '0' + (char) (bcd & 0x0F);
00272a   0e0f     movlw   0x0f             	MOVLW	0x0f
00272c   1404     andwf   0x04, 0x0, 0x0   	ANDWF	r0x04, W
00272e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002730   0e30     movlw   0x30             	MOVLW	0x30
002732   2606     addwf   0x06, 0x1, 0x0   	ADDWF	r0x06, F
002734   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
002736   ffe5
002738   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00273a   ffe9
00273c   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
00273e   fff3
002740   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002742   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
002744   f021
002746   0eff     movlw   0xff             	MOVLW	0xff
002748   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00274a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00274c   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
                                           ;	.line	362; common/controller-axe.c	*dst-- = '.';
00274e   0e2e     movlw   0x2e             	MOVLW	0x2e
002750   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002752   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
002754   ffe9
002756   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
002758   fff3
00275a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00275c   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
00275e   f021
002760   0eff     movlw   0xff             	MOVLW	0xff
002762   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002764   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
002766   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
                                           ;	.line	363; common/controller-axe.c	bcd >>= 4;
002768   0ef0     movlw   0xf0             	MOVLW	0xf0
00276a   1604     andwf   0x04, 0x1, 0x0   	ANDWF	r0x04, F
00276c   3a04     swapf   0x04, 0x1, 0x0   	SWAPF	r0x04, F
00276e   3a05     swapf   0x05, 0x1, 0x0   	SWAPF	r0x05, F
002770   1405     andwf   0x05, 0x0, 0x0   	ANDWF	r0x05, W
002772   1a05     xorwf   0x05, 0x1, 0x0   	XORWF	r0x05, F
002774   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
                                           ;	.line	364; common/controller-axe.c	*dst-- = (char) '0' + (char) (bcd & 0x0F);
002776   0e0f     movlw   0x0f             	MOVLW	0x0f
002778   1404     andwf   0x04, 0x0, 0x0   	ANDWF	r0x04, W
00277a   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00277c   0e30     movlw   0x30             	MOVLW	0x30
00277e   2606     addwf   0x06, 0x1, 0x0   	ADDWF	r0x06, F
002780   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
002782   ffe5
002784   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
002786   ffe9
002788   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
00278a   fff3
00278c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00278e   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
002790   f021
002792   0eff     movlw   0xff             	MOVLW	0xff
002794   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002796   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
002798   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
                                           ;	.line	365; common/controller-axe.c	bcd >>= 4;
00279a   0ef0     movlw   0xf0             	MOVLW	0xf0
00279c   1604     andwf   0x04, 0x1, 0x0   	ANDWF	r0x04, F
00279e   3a04     swapf   0x04, 0x1, 0x0   	SWAPF	r0x04, F
0027a0   3a05     swapf   0x05, 0x1, 0x0   	SWAPF	r0x05, F
0027a2   1405     andwf   0x05, 0x0, 0x0   	ANDWF	r0x05, W
0027a4   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
                                           ;	.line	366; common/controller-axe.c	if ((bcd & 0x0F) > 0) {
0027a6   0e0f     movlw   0x0f             	MOVLW	0x0f
0027a8   1604     andwf   0x04, 0x1, 0x0   	ANDWF	r0x04, F
0027aa   6a05     clrf    0x05, 0x0        	CLRF	r0x05
0027ac   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0027ae   1005     iorwf   0x05, 0x0, 0x0   	IORWF	r0x05, W
0027b0   e00f     bz      0x0027d0         	BZ	_00129_DS_
                                           ;	.line	367; common/controller-axe.c	*dst-- = (char) '0' + (char) (bcd & 0x0F);
0027b2   0e30     movlw   0x30             	MOVLW	0x30
0027b4   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0027b6   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
0027b8   ffe5
0027ba   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0027bc   ffe9
0027be   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0027c0   fff3
0027c2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0027c4   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
0027c6   f021
0027c8   0eff     movlw   0xff             	MOVLW	0xff
0027ca   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0027cc   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0027ce   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
                                           _00129_DS_:
                                           ;	.line	370; common/controller-axe.c	if (sign) {
0027d0   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0027d2   e009     bz      0x0027e6         	BZ	_00132_DS_
                                           ;	.line	371; common/controller-axe.c	*dst = '-';
0027d4   0e2d     movlw   0x2d             	MOVLW	0x2d
0027d6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0027d8   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0027da   ffe9
0027dc   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0027de   fff3
0027e0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0027e2   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
0027e4   f021
                                           _00132_DS_:
0027e6   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
0027e8   f007
0027ea   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
0027ec   f006
0027ee   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
0027f0   f005
0027f2   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
0027f4   f004
0027f6   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0027f8   f003
0027fa   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0027fc   f002
0027fe   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002800   f001
002802   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002804   f000
002806   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002808   ffd9
00280a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__ritoa	code
                                           _ritoa:
                                           ;	.line	344; common/controller-axe.c	static s8 ritoa(char *dst, s8 col, u8 n) {
00321e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003220   ffe5
003222   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003224   ffd9
003226   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003228   ffe5
00322a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00322c   ffe5
00322e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003230   ffe5
003232   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003234   ffe5
003236   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
003238   ffe5
00323a   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
00323c   ffe5
00323e   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
003240   ffe5
003242   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
003244   ffe5
003246   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
003248   ffe5
00324a   0e02     movlw   0x02             	MOVLW	0x02
00324c   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00324e   f000
003250   0e03     movlw   0x03             	MOVLW	0x03
003252   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003254   f001
003256   0e04     movlw   0x04             	MOVLW	0x04
003258   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
00325a   f002
00325c   0e05     movlw   0x05             	MOVLW	0x05
00325e   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
003260   f003
003262   0e06     movlw   0x06             	MOVLW	0x06
003264   cfdb     movff   0xfdb, 0x004     	MOVFF	PLUSW2, r0x04
003266   f004
                                           _00117_DS_:
                                           ;	.line	346; common/controller-axe.c	dst[col--] = (n % (char)10) + (char)'0';
003268   c003     movff   0x003, 0x005     	MOVFF	r0x03, r0x05
00326a   f005
00326c   0603     decf    0x03, 0x1, 0x0   	DECF	r0x03, F
00326e   0e00     movlw   0x00             	MOVLW	0x00
003270   be05     btfsc   0x05, 0x7, 0x0   	BTFSC	r0x05, 7
003272   0eff     movlw   0xff             	MOVLW	0xff
003274   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
003276   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
003278   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00327a   2605     addwf   0x05, 0x1, 0x0   	ADDWF	r0x05, F
00327c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00327e   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
003280   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003282   2207     addwfc  0x07, 0x1, 0x0   	ADDWFC	r0x07, F
003284   0e0a     movlw   0x0a             	MOVLW	0x0a
003286   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003288   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
00328a   ffe5
00328c   ec1c     call    0x003e38, 0x0    	CALL	__moduchar
00328e   f01f
003290   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
003292   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
003294   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
003296   0e30     movlw   0x30             	MOVLW	0x30
003298   2608     addwf   0x08, 0x1, 0x0   	ADDWF	r0x08, F
00329a   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
00329c   ffe5
00329e   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0032a0   ffe9
0032a2   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
0032a4   fff3
0032a6   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0032a8   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
0032aa   f021
                                           ;	.line	347; common/controller-axe.c	} while ((n /= (u8)10) > (u8)0);
0032ac   0e0a     movlw   0x0a             	MOVLW	0x0a
0032ae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0032b0   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
0032b2   ffe5
0032b4   ece1     call    0x003dc2, 0x0    	CALL	__divuchar
0032b6   f01e
0032b8   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0032ba   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0032bc   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0032be   c005     movff   0x005, 0x004     	MOVFF	r0x05, r0x04
0032c0   f004
0032c2   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0032c4   e1d1     bnz     0x003268         	BNZ	_00117_DS_
                                           ;	.line	348; common/controller-axe.c	return col;
0032c6   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0032c8   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
0032ca   f008
0032cc   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
0032ce   f007
0032d0   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
0032d2   f006
0032d4   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
0032d6   f005
0032d8   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
0032da   f004
0032dc   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0032de   f003
0032e0   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0032e2   f002
0032e4   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0032e6   f001
0032e8   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0032ea   f000
0032ec   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0032ee   ffd9
0032f0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__hextoa	code
                                           _hextoa:
                                           ;	.line	338; common/controller-axe.c	static void hextoa(char *dst, u8 col, u8 n) {
002f6a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002f6c   ffe5
002f6e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002f70   ffd9
002f72   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002f74   ffe5
002f76   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002f78   ffe5
002f7a   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002f7c   ffe5
002f7e   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002f80   ffe5
002f82   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
002f84   ffe5
002f86   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
002f88   ffe5
002f8a   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
002f8c   ffe5
002f8e   0e02     movlw   0x02             	MOVLW	0x02
002f90   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
002f92   f000
002f94   0e03     movlw   0x03             	MOVLW	0x03
002f96   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
002f98   f001
002f9a   0e04     movlw   0x04             	MOVLW	0x04
002f9c   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
002f9e   f002
002fa0   0e05     movlw   0x05             	MOVLW	0x05
002fa2   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
002fa4   f003
002fa6   0e06     movlw   0x06             	MOVLW	0x06
002fa8   cfdb     movff   0xfdb, 0x004     	MOVFF	PLUSW2, r0x04
002faa   f004
                                           ;	.line	339; common/controller-axe.c	dst += col;
002fac   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002fae   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002fb0   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002fb2   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
002fb4   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002fb6   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
                                           ;	.line	340; common/controller-axe.c	*dst-- = hex[n & 0x0F];
002fb8   0e0f     movlw   0x0f             	MOVLW	0x0f
002fba   1404     andwf   0x04, 0x0, 0x0   	ANDWF	r0x04, W
002fbc   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
002fbe   6a05     clrf    0x05, 0x0        	CLRF	r0x05
002fc0   6a06     clrf    0x06, 0x0        	CLRF	r0x06
002fc2   0e0e     movlw   0x0e             	MOVLW	LOW(_hex)
002fc4   2603     addwf   0x03, 0x1, 0x0   	ADDWF	r0x03, F
002fc6   0e29     movlw   0x29             	MOVLW	HIGH(_hex)
002fc8   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
002fca   0e00     movlw   0x00             	MOVLW	UPPER(_hex)
002fcc   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
002fce   c003     movff   0x003, 0xff6     	MOVFF	r0x03, TBLPTRL
002fd0   fff6
002fd2   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
002fd4   fff7
002fd6   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
002fd8   fff8
002fda   0009     tblrd*+                  	TBLRD*+	
002fdc   cff5     movff   0xff5, 0x003     	MOVFF	TABLAT, r0x03
002fde   f003
002fe0   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002fe2   ffe5
002fe4   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
002fe6   ffe9
002fe8   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
002fea   fff3
002fec   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002fee   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
002ff0   f021
002ff2   0eff     movlw   0xff             	MOVLW	0xff
002ff4   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002ff6   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
002ff8   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
                                           ;	.line	341; common/controller-axe.c	*dst = hex[(n >> 4) & 0x0F];
002ffa   3804     swapf   0x04, 0x0, 0x0   	SWAPF	r0x04, W
002ffc   0b0f     andlw   0x0f             	ANDLW	0x0f
002ffe   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
003000   0e0f     movlw   0x0f             	MOVLW	0x0f
003002   1604     andwf   0x04, 0x1, 0x0   	ANDWF	r0x04, F
003004   6a03     clrf    0x03, 0x0        	CLRF	r0x03
003006   6a05     clrf    0x05, 0x0        	CLRF	r0x05
003008   0e0e     movlw   0x0e             	MOVLW	LOW(_hex)
00300a   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
00300c   0e29     movlw   0x29             	MOVLW	HIGH(_hex)
00300e   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
003010   0e00     movlw   0x00             	MOVLW	UPPER(_hex)
003012   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
003014   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
003016   fff6
003018   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
00301a   fff7
00301c   c005     movff   0x005, 0xff8     	MOVFF	r0x05, TBLPTRU
00301e   fff8
003020   0009     tblrd*+                  	TBLRD*+	
003022   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
003024   f004
003026   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
003028   ffe5
00302a   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00302c   ffe9
00302e   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
003030   fff3
003032   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003034   ece4     call    0x0043c8, 0x0    	CALL	__gptrput1
003036   f021
003038   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
00303a   f006
00303c   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
00303e   f005
003040   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
003042   f004
003044   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003046   f003
003048   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00304a   f002
00304c   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00304e   f001
003050   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003052   f000
003054   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003056   ffd9
003058   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_controller_axe__name_get	code
                                           _name_get:
                                           ;	.line	306; common/controller-axe.c	static rom const char *name_get(u16 name_index) {
003b2e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003b30   ffe5
003b32   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003b34   ffd9
003b36   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003b38   ffe5
003b3a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003b3c   ffe5
003b3e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003b40   ffe5
003b42   0e02     movlw   0x02             	MOVLW	0x02
003b44   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003b46   f000
003b48   0e03     movlw   0x03             	MOVLW	0x03
003b4a   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003b4c   f001
                                           ;	.line	307; common/controller-axe.c	if (name_index == (u16)0) {
003b4e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003b50   1001     iorwf   0x01, 0x0, 0x0   	IORWF	r0x01, W
003b52   e106     bnz     0x003b60         	BNZ	_00106_DS_
                                           ;	.line	308; common/controller-axe.c	return "";
003b54   0e00     movlw   0x00             	MOVLW	UPPER(___str_0)
003b56   6ef4     movwf   0xf4, 0x0        	MOVWF	PRODH
003b58   0e29     movlw   0x29             	MOVLW	HIGH(___str_0)
003b5a   6ef3     movwf   0xf3, 0x0        	MOVWF	PRODL
003b5c   0e0c     movlw   0x0c             	MOVLW	LOW(___str_0)
003b5e   d025     bra     0x003baa         	BRA	_00107_DS_
                                           _00106_DS_:
                                           ;	.line	310; common/controller-axe.c	return (rom const char *)flash_addr(name_table_offs + ((name_index - 1) * 20));
003b60   0eff     movlw   0xff             	MOVLW	0xff
003b62   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
003b64   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
003b66   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003b68   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003b6a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003b6c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003b6e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003b70   0e14     movlw   0x14             	MOVLW	0x14
003b72   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003b74   ecb4     call    0x003968, 0x0    	CALL	__mulint
003b76   f01c
003b78   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
003b7a   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
003b7c   f001
003b7e   0e04     movlw   0x04             	MOVLW	0x04
003b80   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
003b82   0e40     movlw   0x40             	MOVLW	0x40
003b84   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
003b86   0e20     movlw   0x20             	MOVLW	0x20
003b88   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
003b8a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003b8c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003b8e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003b90   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003b92   ec04     call    0x003a08, 0x0    	CALL	_flash_addr
003b94   f01d
003b96   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
003b98   f001
003b9a   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
003b9c   f002
003b9e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003ba0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003ba2   c002     movff   0x002, 0xff4     	MOVFF	r0x02, PRODH
003ba4   fff4
003ba6   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
003ba8   fff3
                                           _00107_DS_:
003baa   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003bac   f002
003bae   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003bb0   f001
003bb2   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003bb4   f000
003bb6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003bb8   ffd9
003bba   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block for Ival
                                           	code
                                           _dB_bcd_lookup:
00280c   ffff     dw      0xffff           	DB	0xff, 0xff, 0x04, 0xf5, 0x43, 0xf4, 0x07, 0xf4, 0x81, 0xf3, 0x60, 0xf3
00280e   f504     dw      0xf504           
002810   f443     dw      0xf443           
002812   f407     dw      0xf407           
002814   f381     dw      0xf381           
002816   f360     dw      0xf360           
002818   f344     dw      0xf344           	DB	0x44, 0xf3, 0x29, 0xf3, 0x17, 0xf3, 0x06, 0xf3, 0x95, 0xf2, 0x86, 0xf2
00281a   f329     dw      0xf329           
00281c   f317     dw      0xf317           
00281e   f306     dw      0xf306           
002820   f295     dw      0xf295           
002822   f286     dw      0xf286           
002824   f278     dw      0xf278           	DB	0x78, 0xf2, 0x70, 0xf2, 0x62, 0xf2, 0x55, 0xf2, 0x49, 0xf2, 0x42, 0xf2
002826   f270     dw      0xf270           
002828   f262     dw      0xf262           
00282a   f255     dw      0xf255           
00282c   f249     dw      0xf249           
00282e   f242     dw      0xf242           
002830   f236     dw      0xf236           	DB	0x36, 0xf2, 0x31, 0xf2, 0x25, 0xf2, 0x20, 0xf2, 0x15, 0xf2, 0x10, 0xf2
002832   f231     dw      0xf231           
002834   f225     dw      0xf225           
002836   f220     dw      0xf220           
002838   f215     dw      0xf215           
00283a   f210     dw      0xf210           
00283c   f205     dw      0xf205           	DB	0x05, 0xf2, 0x01, 0xf2, 0x96, 0xf1, 0x92, 0xf1, 0x88, 0xf1, 0x84, 0xf1
00283e   f201     dw      0xf201           
002840   f196     dw      0xf196           
002842   f192     dw      0xf192           
002844   f188     dw      0xf188           
002846   f184     dw      0xf184           
002848   f180     dw      0xf180           	DB	0x80, 0xf1, 0x76, 0xf1, 0x72, 0xf1, 0x68, 0xf1, 0x65, 0xf1, 0x61, 0xf1
00284a   f176     dw      0xf176           
00284c   f172     dw      0xf172           
00284e   f168     dw      0xf168           
002850   f165     dw      0xf165           
002852   f161     dw      0xf161           
002854   f158     dw      0xf158           	DB	0x58, 0xf1, 0x54, 0xf1, 0x51, 0xf1, 0x48, 0xf1, 0x44, 0xf1, 0x41, 0xf1
002856   f154     dw      0xf154           
002858   f151     dw      0xf151           
00285a   f148     dw      0xf148           
00285c   f144     dw      0xf144           
00285e   f141     dw      0xf141           
002860   f138     dw      0xf138           	DB	0x38, 0xf1, 0x35, 0xf1, 0x32, 0xf1, 0x29, 0xf1, 0x26, 0xf1, 0x23, 0xf1
002862   f135     dw      0xf135           
002864   f132     dw      0xf132           
002866   f129     dw      0xf129           
002868   f126     dw      0xf126           
00286a   f123     dw      0xf123           
00286c   f120     dw      0xf120           	DB	0x20, 0xf1, 0x17, 0xf1, 0x14, 0xf1, 0x11, 0xf1, 0x09, 0xf1, 0x06, 0xf1
00286e   f117     dw      0xf117           
002870   f114     dw      0xf114           
002872   f111     dw      0xf111           
002874   f109     dw      0xf109           
002876   f106     dw      0xf106           
002878   f103     dw      0xf103           	DB	0x03, 0xf1, 0x00, 0xf1, 0x98, 0xf0, 0x95, 0xf0, 0x92, 0xf0, 0x90, 0xf0
00287a   f100     dw      0xf100           
00287c   f098     dw      0xf098           
00287e   f095     dw      0xf095           
002880   f092     dw      0xf092           
002882   f090     dw      0xf090           
002884   f087     dw      0xf087           	DB	0x87, 0xf0, 0x85, 0xf0, 0x82, 0xf0, 0x79, 0xf0, 0x77, 0xf0, 0x74, 0xf0
002886   f085     dw      0xf085           
002888   f082     dw      0xf082           
00288a   f079     dw      0xf079           
00288c   f077     dw      0xf077           
00288e   f074     dw      0xf074           
002890   f072     dw      0xf072           	DB	0x72, 0xf0, 0x70, 0xf0, 0x67, 0xf0, 0x65, 0xf0, 0x62, 0xf0, 0x60, 0xf0
002892   f070     dw      0xf070           
002894   f067     dw      0xf067           
002896   f065     dw      0xf065           
002898   f062     dw      0xf062           
00289a   f060     dw      0xf060           
00289c   f057     dw      0xf057           	DB	0x57, 0xf0, 0x55, 0xf0, 0x53, 0xf0, 0x50, 0xf0, 0x48, 0xf0, 0x46, 0xf0
00289e   f055     dw      0xf055           
0028a0   f053     dw      0xf053           
0028a2   f050     dw      0xf050           
0028a4   f048     dw      0xf048           
0028a6   f046     dw      0xf046           
0028a8   f043     dw      0xf043           	DB	0x43, 0xf0, 0x41, 0xf0, 0x39, 0xf0, 0x37, 0xf0, 0x34, 0xf0, 0x32, 0xf0
0028aa   f041     dw      0xf041           
0028ac   f039     dw      0xf039           
0028ae   f037     dw      0xf037           
0028b0   f034     dw      0xf034           
0028b2   f032     dw      0xf032           
0028b4   f030     dw      0xf030           	DB	0x30, 0xf0, 0x28, 0xf0, 0x25, 0xf0, 0x23, 0xf0, 0x21, 0xf0, 0x19, 0xf0
0028b6   f028     dw      0xf028           
0028b8   f025     dw      0xf025           
0028ba   f023     dw      0xf023           
0028bc   f021     dw      0xf021           
0028be   f019     dw      0xf019           
0028c0   f017     dw      0xf017           	DB	0x17, 0xf0, 0x14, 0xf0, 0x12, 0xf0, 0x10, 0xf0, 0x08, 0xf0, 0x06, 0xf0
0028c2   f014     dw      0xf014           
0028c4   f012     dw      0xf012           
0028c6   f010     dw      0xf010           
0028c8   f008     dw      0xf008           
0028ca   f006     dw      0xf006           
0028cc   f004     dw      0xf004           	DB	0x04, 0xf0, 0x01, 0xf0, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x06, 0x00
0028ce   f001     dw      0xf001           
0028d0   0000     nop                      
0028d2   0002     dw      0x0002           
0028d4   0004     clrwdt                   
0028d6   0006     pop                      
0028d8   0008     tblrd*                   	DB	0x08, 0x00, 0x10, 0x00, 0x12, 0x00, 0x15, 0x00, 0x17, 0x00, 0x19, 0x00
0028da   0010     retfie  0x0              
0028dc   0012     return  0x0              
0028de   0015     dw      0x0015           
0028e0   0017     dw      0x0017           
0028e2   0019     dw      0x0019           
0028e4   0021     dw      0x0021           	DB	0x21, 0x00, 0x23, 0x00, 0x25, 0x00, 0x27, 0x00, 0x29, 0x00, 0x31, 0x00
0028e6   0023     dw      0x0023           
0028e8   0025     dw      0x0025           
0028ea   0027     dw      0x0027           
0028ec   0029     dw      0x0029           
0028ee   0031     dw      0x0031           
0028f0   0033     dw      0x0033           	DB	0x33, 0x00, 0x35, 0x00, 0x37, 0x00, 0x39, 0x00, 0x41, 0x00, 0x43, 0x00
0028f2   0035     dw      0x0035           
0028f4   0037     dw      0x0037           
0028f6   0039     dw      0x0039           
0028f8   0041     dw      0x0041           
0028fa   0043     dw      0x0043           
0028fc   0045     dw      0x0045           	DB	0x45, 0x00, 0x47, 0x00, 0x49, 0x00, 0x51, 0x00, 0x53, 0x00, 0x55, 0x00
0028fe   0047     dw      0x0047           
002900   0049     dw      0x0049           
002902   0051     dw      0x0051           
002904   0053     dw      0x0053           
002906   0055     dw      0x0055           
002908   0057     dw      0x0057           	DB	0x57, 0x00, 0x60, 0x00
00290a   0060     dw      0x0060           
                                           ; ; Starting pCode block
                                           ___str_0:
00290c   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block for Ival
                                           _hex:
00290e   3130     rrcf    0x30, 0x0, 0x1   	DB	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42
002910   3332     rrcf    0x32, 0x1, 0x1   
002912   3534     rlcf    0x34, 0x0, 0x1   
002914   3736     rlcf    0x36, 0x1, 0x1   
002916   3938     swapf   0x38, 0x0, 0x1   
002918   4241     rrncf   0x41, 0x1, 0x0   
00291a   4443     rlncf   0x43, 0x0, 0x0   	DB	0x43, 0x44, 0x45, 0x46
00291c   4645     rlncf   0x45, 0x1, 0x0   
                                           ; ; Starting pCode block
                                           ___str_1:
00291e   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
002920   2020     addwfc  0x20, 0x0, 0x0   
002922   2020     addwfc  0x20, 0x0, 0x0   
002924   2020     addwfc  0x20, 0x0, 0x0   
002926   2020     addwfc  0x20, 0x0, 0x0   
002928   2020     addwfc  0x20, 0x0, 0x0   
00292a   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
00292c   2020     addwfc  0x20, 0x0, 0x0   
00292e   2020     addwfc  0x20, 0x0, 0x0   
002930   2020     addwfc  0x20, 0x0, 0x0   
002932   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_2:
002934   474d     rlncf   0x4d, 0x1, 0x1   	DB	0x4d, 0x47, 0x2a, 0x20, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x20, 0x4a
002936   202a     addwfc  0x2a, 0x0, 0x0   
002938   2020     addwfc  0x20, 0x0, 0x0   
00293a   2e30     decfsz  0x30, 0x1, 0x0   
00293c   2030     addwfc  0x30, 0x0, 0x0   
00293e   4a20     infsnz  0x20, 0x1, 0x0   
002940   2a44     incf    0x44, 0x1, 0x0   	DB	0x44, 0x2a, 0x20, 0x20, 0x20, 0x30, 0x2e, 0x30, 0x00
002942   2020     addwfc  0x20, 0x0, 0x0   
002944   3020     rrcf    0x20, 0x0, 0x0   
002946   302e     rrcf    0x2e, 0x0, 0x0   
002948   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_3:
00294a   5847     subwfb  0x47, 0x0, 0x0   	DB	0x47, 0x58, 0x50, 0x43, 0x44, 0x46, 0x20, 0x37, 0x46, 0x20, 0x20, 0x47
00294c   4350     rrncf   0x50, 0x1, 0x1   
00294e   4644     rlncf   0x44, 0x1, 0x0   
002950   3720     rlcf    0x20, 0x1, 0x1   
002952   2046     addwfc  0x46, 0x0, 0x0   
002954   4720     rlncf   0x20, 0x1, 0x1   
002956   5058     movf    0x58, 0x0, 0x0   	DB	0x58, 0x50, 0x43, 0x44, 0x46, 0x20, 0x37, 0x46, 0x00
002958   4443     rlncf   0x43, 0x0, 0x0   
00295a   2046     addwfc  0x46, 0x0, 0x0   
00295c   4637     rlncf   0x37, 0x1, 0x0   
00295e   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_4:
002960   7250     btg     0x50, 0x1, 0x0   	DB	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x23
002962   676f     tstfsz  0x6f, 0x1        
002964   6172     cpfslt  0x72, 0x1        
002966   206d     addwfc  0x6d, 0x0, 0x0   
002968   2020     addwfc  0x20, 0x0, 0x0   
00296a   2320     addwfc  0x20, 0x1, 0x1   
00296c   3020     rrcf    0x20, 0x0, 0x0   	DB	0x20, 0x30, 0x20, 0x73, 0x63, 0x20, 0x20, 0x30, 0x00
00296e   7320     btg     0x20, 0x1, 0x1   
002970   2063     addwfc  0x63, 0x0, 0x0   
002972   3020     rrcf    0x20, 0x0, 0x0   
002974   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_5:
002976   3032     rrcf    0x32, 0x0, 0x0   	DB	0x32, 0x30, 0x31, 0x34, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x20, 0x23
002978   3431     rlcf    0x31, 0x0, 0x0   
00297a   302d     rrcf    0x2d, 0x0, 0x0   
00297c   2d31     decfsz  0x31, 0x0, 0x1   
00297e   3130     rrcf    0x30, 0x0, 0x1   
002980   2320     addwfc  0x20, 0x1, 0x1   
002982   3020     rrcf    0x20, 0x0, 0x0   	DB	0x20, 0x30, 0x20, 0x73, 0x63, 0x20, 0x20, 0x30, 0x00
002984   7320     btg     0x20, 0x1, 0x1   
002986   2063     addwfc  0x63, 0x0, 0x0   
002988   3020     rrcf    0x20, 0x0, 0x0   
00298a   0000     nop                      


                                           ; Statistics:
                                           ; code size:	13338 (0x341a) bytes (10.18%)
                                           ;           	 6669 (0x1a0d) words
                                           ; udata size:	  263 (0x0107) bytes (14.68%)
                                           ; access size:	   11 (0x000b) bytes


                                           	end
